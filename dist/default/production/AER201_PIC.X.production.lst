

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 11 00:31:13 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.40
   103                           ; Generated 01/12/2016 GMT
   104                           ; 
   105                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F4620 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataBANK1
   138  0059E4                     __pidataBANK1:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _bottle_count_disp
   142  0059E4  FFFF               	dw	65535
   143                           
   144                           	psect	mediumconst
   145  00FDB4                     __pmediumconst:
   146                           	opt stack 0
   147  00FDB4  00                 	db	0
   148  00FDB5                     _dpowers:
   149                           	opt stack 0
   150  00FDB5  0001               	dw	1
   151  00FDB7  0000               	dw	0
   152  00FDB9  000A               	dw	10
   153  00FDBB  0000               	dw	0
   154  00FDBD  0064               	dw	100
   155  00FDBF  0000               	dw	0
   156  00FDC1  03E8               	dw	1000
   157  00FDC3  0000               	dw	0
   158  00FDC5  2710               	dw	10000
   159  00FDC7  0000               	dw	0
   160  00FDC9  86A0               	dw	34464
   161  00FDCB  0001               	dw	1
   162  00FDCD  4240               	dw	16960
   163  00FDCF  000F               	dw	15
   164  00FDD1  9680               	dw	38528
   165  00FDD3  0098               	dw	152
   166  00FDD5  E100               	dw	57600
   167  00FDD7  05F5               	dw	1525
   168  00FDD9  CA00               	dw	51712
   169  00FDDB  3B9A               	dw	15258
   170  00FDDD                     __end_of_dpowers:
   171                           	opt stack 0
   172  00FDDD                     __npowers_:
   173                           	opt stack 0
   174  00FDDD  00                 	db	0
   175  00FDDE  80                 	db	128
   176  00FDDF  3F                 	db	63
   177  00FDE0  CD                 	db	205
   178  00FDE1  CC                 	db	204
   179  00FDE2  3D                 	db	61
   180  00FDE3  D7                 	db	215
   181  00FDE4  23                 	db	35
   182  00FDE5  3C                 	db	60
   183  00FDE6  12                 	db	18
   184  00FDE7  83                 	db	131
   185  00FDE8  3A                 	db	58
   186  00FDE9  B7                 	db	183
   187  00FDEA  D1                 	db	209
   188  00FDEB  38                 	db	56
   189  00FDEC  C6                 	db	198
   190  00FDED  27                 	db	39
   191  00FDEE  37                 	db	55
   192  00FDEF  38                 	db	56
   193  00FDF0  86                 	db	134
   194  00FDF1  35                 	db	53
   195  00FDF2  C0                 	db	192
   196  00FDF3  D6                 	db	214
   197  00FDF4  33                 	db	51
   198  00FDF5  CC                 	db	204
   199  00FDF6  2B                 	db	43
   200  00FDF7  32                 	db	50
   201  00FDF8  70                 	db	112
   202  00FDF9  89                 	db	137
   203  00FDFA  30                 	db	48
   204  00FDFB  E7                 	db	231
   205  00FDFC  DB                 	db	219
   206  00FDFD  2E                 	db	46
   207  00FDFE  E5                 	db	229
   208  00FDFF  3C                 	db	60
   209  00FE00  1E                 	db	30
   210  00FE01  42                 	db	66
   211  00FE02  A2                 	db	162
   212  00FE03  0D                 	db	13
   213  00FE04                     __end_of__npowers_:
   214                           	opt stack 0
   215  00FE04                     __powers_:
   216                           	opt stack 0
   217  00FE04  00                 	db	0
   218  00FE05  80                 	db	128
   219  00FE06  3F                 	db	63
   220  00FE07  00                 	db	0
   221  00FE08  20                 	db	32
   222  00FE09  41                 	db	65
   223  00FE0A  00                 	db	0
   224  00FE0B  C8                 	db	200
   225  00FE0C  42                 	db	66
   226  00FE0D  00                 	db	0
   227  00FE0E  7A                 	db	122
   228  00FE0F  44                 	db	68
   229  00FE10  40                 	db	64
   230  00FE11  1C                 	db	28
   231  00FE12  46                 	db	70
   232  00FE13  50                 	db	80
   233  00FE14  C3                 	db	195
   234  00FE15  47                 	db	71
   235  00FE16  24                 	db	36
   236  00FE17  74                 	db	116
   237  00FE18  49                 	db	73
   238  00FE19  97                 	db	151
   239  00FE1A  18                 	db	24
   240  00FE1B  4B                 	db	75
   241  00FE1C  BC                 	db	188
   242  00FE1D  BE                 	db	190
   243  00FE1E  4C                 	db	76
   244  00FE1F  6B                 	db	107
   245  00FE20  6E                 	db	110
   246  00FE21  4E                 	db	78
   247  00FE22  03                 	db	3
   248  00FE23  15                 	db	21
   249  00FE24  50                 	db	80
   250  00FE25  79                 	db	121
   251  00FE26  AD                 	db	173
   252  00FE27  60                 	db	96
   253  00FE28  F3                 	db	243
   254  00FE29  49                 	db	73
   255  00FE2A  71                 	db	113
   256  00FE2B                     __end_of__powers_:
   257                           	opt stack 0
   258  00FE2B                     _hexpowers:
   259                           	opt stack 0
   260  00FE2B  0001               	dw	1
   261  00FE2D  0000               	dw	0
   262  00FE2F  0010               	dw	16
   263  00FE31  0000               	dw	0
   264  00FE33  0100               	dw	256
   265  00FE35  0000               	dw	0
   266  00FE37  1000               	dw	4096
   267  00FE39  0000               	dw	0
   268  00FE3B  0000               	dw	0
   269  00FE3D  0001               	dw	1
   270  00FE3F  0000               	dw	0
   271  00FE41  0010               	dw	16
   272  00FE43  0000               	dw	0
   273  00FE45  0100               	dw	256
   274  00FE47  0000               	dw	0
   275  00FE49  1000               	dw	4096
   276  00FE4B                     __end_of_hexpowers:
   277                           	opt stack 0
   278  00FE4B                     _keys:
   279                           	opt stack 0
   280  00FE4B  31                 	db	49
   281  00FE4C  32                 	db	50
   282  00FE4D  33                 	db	51
   283  00FE4E  41                 	db	65
   284  00FE4F  34                 	db	52
   285  00FE50  35                 	db	53
   286  00FE51  36                 	db	54
   287  00FE52  42                 	db	66
   288  00FE53  37                 	db	55
   289  00FE54  38                 	db	56
   290  00FE55  39                 	db	57
   291  00FE56  43                 	db	67
   292  00FE57  2A                 	db	42
   293  00FE58  30                 	db	48
   294  00FE59  23                 	db	35
   295  00FE5A  44                 	db	68
   296  00FE5B  00                 	db	0
   297  00FE5C                     __end_of_keys:
   298                           	opt stack 0
   299  00FE5C                     _timeset:
   300                           	opt stack 0
   301  00FE5C  50                 	db	80
   302  00FE5D  36                 	db	54
   303  00FE5E  19                 	db	25
   304  00FE5F  01                 	db	1
   305  00FE60  10                 	db	16
   306  00FE61  04                 	db	4
   307  00FE62  17                 	db	23
   308  00FE63                     __end_of_timeset:
   309                           	opt stack 0
   310  00FE63                     exp@coeff:
   311                           	opt stack 0
   312  00FE63  00                 	db	0
   313  00FE64  80                 	db	128
   314  00FE65  3F                 	db	63
   315  00FE66  72                 	db	114
   316  00FE67  31                 	db	49
   317  00FE68  3F                 	db	63
   318  00FE69  FE                 	db	254
   319  00FE6A  75                 	db	117
   320  00FE6B  3E                 	db	62
   321  00FE6C  58                 	db	88
   322  00FE6D  63                 	db	99
   323  00FE6E  3D                 	db	61
   324  00FE6F  95                 	db	149
   325  00FE70  1D                 	db	29
   326  00FE71  3C                 	db	60
   327  00FE72  C5                 	db	197
   328  00FE73  AE                 	db	174
   329  00FE74  3A                 	db	58
   330  00FE75  79                 	db	121
   331  00FE76  21                 	db	33
   332  00FE77  39                 	db	57
   333  00FE78  94                 	db	148
   334  00FE79  80                 	db	128
   335  00FE7A  37                 	db	55
   336  00FE7B  93                 	db	147
   337  00FE7C  A7                 	db	167
   338  00FE7D  35                 	db	53
   339  00FE7E  56                 	db	86
   340  00FE7F  15                 	db	21
   341  00FE80  34                 	db	52
   342  00FE81                     __end_ofexp@coeff:
   343                           	opt stack 0
   344  00FE81                     log@coeff:
   345                           	opt stack 0
   346  00FE81  00                 	db	0
   347  00FE82  00                 	db	0
   348  00FE83  00                 	db	0
   349  00FE84  00                 	db	0
   350  00FE85  80                 	db	128
   351  00FE86  3F                 	db	63
   352  00FE87  F0                 	db	240
   353  00FE88  FF                 	db	255
   354  00FE89  BE                 	db	190
   355  00FE8A  E2                 	db	226
   356  00FE8B  A9                 	db	169
   357  00FE8C  3E                 	db	62
   358  00FE8D  83                 	db	131
   359  00FE8E  76                 	db	118
   360  00FE8F  BE                 	db	190
   361  00FE90  AE                 	db	174
   362  00FE91  2B                 	db	43
   363  00FE92  3E                 	db	62
   364  00FE93  3C                 	db	60
   365  00FE94  C3                 	db	195
   366  00FE95  BD                 	db	189
   367  00FE96  D2                 	db	210
   368  00FE97  13                 	db	19
   369  00FE98  3D                 	db	61
   370  00FE99  78                 	db	120
   371  00FE9A  D3                 	db	211
   372  00FE9B  BB                 	db	187
   373  00FE9C                     __end_oflog@coeff:
   374                           	opt stack 0
   375  0000                     _TMR0	set	4054
   376  0000                     _TMR1	set	4046
   377  0000                     _TMR3	set	4018
   378  0000                     _ADCON0	set	4034
   379  0000                     _ADCON1	set	4033
   380  0000                     _INTCONbits	set	4082
   381  0000                     _LATA	set	3977
   382  0000                     _LATAbits	set	3977
   383  0000                     _LATB	set	3978
   384  0000                     _LATC	set	3979
   385  0000                     _LATCbits	set	3979
   386  0000                     _LATD	set	3980
   387  0000                     _LATDbits	set	3980
   388  0000                     _LATE	set	3981
   389  0000                     _PORTAbits	set	3968
   390  0000                     _PORTB	set	3969
   391  0000                     _SSPADD	set	4040
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1	set	4038
   394  0000                     _SSPCON2	set	4037
   395  0000                     _SSPSTAT	set	4039
   396  0000                     _T1CON	set	4045
   397  0000                     _T3CON	set	4017
   398  0000                     _TRISA	set	3986
   399  0000                     _TRISB	set	3987
   400  0000                     _TRISC	set	3988
   401  0000                     _TRISD	set	3989
   402  0000                     _TRISE	set	3990
   403  0000                     _ACKDT	set	32301
   404  0000                     _ACKEN	set	32300
   405  0000                     _GIE	set	32663
   406  0000                     _INT0IE	set	32660
   407  0000                     _INT1IE	set	32643
   408  0000                     _INT1IF	set	32640
   409  0000                     _INT2IE	set	32644
   410  0000                     _PEIE	set	32662
   411  0000                     _PEN	set	32298
   412  0000                     _PSA	set	32427
   413  0000                     _RCEN	set	32299
   414  0000                     _RSEN	set	32297
   415  0000                     _SEN	set	32296
   416  0000                     _T08BIT	set	32430
   417  0000                     _T0CS	set	32429
   418  0000                     _T0PS0	set	32424
   419  0000                     _T0PS1	set	32425
   420  0000                     _T0PS2	set	32426
   421  0000                     _T1CKPS0	set	32364
   422  0000                     _T1CKPS1	set	32365
   423  0000                     _T3CKPS0	set	32140
   424  0000                     _T3CKPS1	set	32141
   425  0000                     _TMR0IE	set	32661
   426  0000                     _TMR0IF	set	32658
   427  0000                     _TMR0ON	set	32431
   428  0000                     _TMR1CS	set	32361
   429  0000                     _TMR1IE	set	31976
   430  0000                     _TMR1IF	set	31984
   431  0000                     _TMR1ON	set	32360
   432  0000                     _TMR3CS	set	32137
   433  0000                     _TMR3IE	set	32001
   434  0000                     _TMR3IF	set	32009
   435  0000                     _TMR3ON	set	32136
   436  0000                     _TRISC3	set	31907
   437  0000                     _TRISC4	set	31908
   438  0000                     _nRBPU	set	32655
   439  00FE9C                     STR_3:
   440  00FE9C  47                 	db	71	;'G'
   441  00FE9D  25                 	db	37
   442  00FE9E  75                 	db	117	;'u'
   443  00FE9F  20                 	db	32
   444  00FEA0  42                 	db	66	;'B'
   445  00FEA1  25                 	db	37
   446  00FEA2  75                 	db	117	;'u'
   447  00FEA3  20                 	db	32
   448  00FEA4  20                 	db	32
   449  00FEA5  20                 	db	32
   450  00FEA6  20                 	db	32
   451  00FEA7  20                 	db	32
   452  00FEA8  20                 	db	32
   453  00FEA9  20                 	db	32
   454  00FEAA  20                 	db	32
   455  00FEAB  20                 	db	32
   456  00FEAC  20                 	db	32
   457  00FEAD  20                 	db	32
   458  00FEAE  20                 	db	32
   459  00FEAF  20                 	db	32
   460  00FEB0  20                 	db	32
   461  00FEB1  20                 	db	32
   462  00FEB2  20                 	db	32
   463  00FEB3  00                 	db	0
   464  00FEB4                     STR_2:
   465  00FEB4  43                 	db	67	;'C'
   466  00FEB5  25                 	db	37
   467  00FEB6  75                 	db	117	;'u'
   468  00FEB7  20                 	db	32
   469  00FEB8  52                 	db	82	;'R'
   470  00FEB9  25                 	db	37
   471  00FEBA  75                 	db	117	;'u'
   472  00FEBB  20                 	db	32
   473  00FEBC  20                 	db	32
   474  00FEBD  20                 	db	32
   475  00FEBE  20                 	db	32
   476  00FEBF  20                 	db	32
   477  00FEC0  20                 	db	32
   478  00FEC1  20                 	db	32
   479  00FEC2  20                 	db	32
   480  00FEC3  20                 	db	32
   481  00FEC4  20                 	db	32
   482  00FEC5  20                 	db	32
   483  00FEC6  20                 	db	32
   484  00FEC7  20                 	db	32
   485  00FEC8  20                 	db	32
   486  00FEC9  20                 	db	32
   487  00FECA  20                 	db	32
   488  00FECB  00                 	db	0
   489  00FECC                     STR_17:
   490  00FECC  54                 	db	84	;'T'
   491  00FECD  6F                 	db	111	;'o'
   492  00FECE  74                 	db	116	;'t'
   493  00FECF  61                 	db	97	;'a'
   494  00FED0  6C                 	db	108	;'l'
   495  00FED1  20                 	db	32
   496  00FED2  4F                 	db	79	;'O'
   497  00FED3  70                 	db	112	;'p'
   498  00FED4  65                 	db	101	;'e'
   499  00FED5  72                 	db	114	;'r'
   500  00FED6  61                 	db	97	;'a'
   501  00FED7  74                 	db	116	;'t'
   502  00FED8  69                 	db	105	;'i'
   503  00FED9  6F                 	db	111	;'o'
   504  00FEDA  6E                 	db	110	;'n'
   505  00FEDB  20                 	db	32
   506  00FEDC  20                 	db	32
   507  00FEDD  20                 	db	32
   508  00FEDE  20                 	db	32
   509  00FEDF  20                 	db	32
   510  00FEE0  20                 	db	32
   511  00FEE1  20                 	db	32
   512  00FEE2  00                 	db	0
   513  00FEE3                     STR_8:
   514  00FEE3  44                 	db	68	;'D'
   515  00FEE4  61                 	db	97	;'a'
   516  00FEE5  74                 	db	116	;'t'
   517  00FEE6  65                 	db	101	;'e'
   518  00FEE7  3A                 	db	58	;':'
   519  00FEE8  20                 	db	32
   520  00FEE9  25                 	db	37
   521  00FEEA  30                 	db	48	;'0'
   522  00FEEB  32                 	db	50	;'2'
   523  00FEEC  78                 	db	120	;'x'
   524  00FEED  2F                 	db	47
   525  00FEEE  25                 	db	37
   526  00FEEF  30                 	db	48	;'0'
   527  00FEF0  32                 	db	50	;'2'
   528  00FEF1  78                 	db	120	;'x'
   529  00FEF2  2F                 	db	47
   530  00FEF3  25                 	db	37
   531  00FEF4  30                 	db	48	;'0'
   532  00FEF5  32                 	db	50	;'2'
   533  00FEF6  78                 	db	120	;'x'
   534  00FEF7  20                 	db	32
   535  00FEF8  20                 	db	32
   536  00FEF9  00                 	db	0
   537  00FEFA                     STR_9:
   538  00FEFA  54                 	db	84	;'T'
   539  00FEFB  69                 	db	105	;'i'
   540  00FEFC  6D                 	db	109	;'m'
   541  00FEFD  65                 	db	101	;'e'
   542  00FEFE  3A                 	db	58	;':'
   543  00FEFF  20                 	db	32
   544  00FF00  25                 	db	37
   545  00FF01  30                 	db	48	;'0'
   546  00FF02  32                 	db	50	;'2'
   547  00FF03  78                 	db	120	;'x'
   548  00FF04  3A                 	db	58	;':'
   549  00FF05  25                 	db	37
   550  00FF06  30                 	db	48	;'0'
   551  00FF07  32                 	db	50	;'2'
   552  00FF08  78                 	db	120	;'x'
   553  00FF09  3A                 	db	58	;':'
   554  00FF0A  25                 	db	37
   555  00FF0B  30                 	db	48	;'0'
   556  00FF0C  32                 	db	50	;'2'
   557  00FF0D  78                 	db	120	;'x'
   558  00FF0E  20                 	db	32
   559  00FF0F  20                 	db	32
   560  00FF10  00                 	db	0
   561  00FF11                     STR_6:
   562  00FF11  73                 	db	115	;'s'
   563  00FF12  74                 	db	116	;'t'
   564  00FF13  61                 	db	97	;'a'
   565  00FF14  6E                 	db	110	;'n'
   566  00FF15  64                 	db	100	;'d'
   567  00FF16  62                 	db	98	;'b'
   568  00FF17  79                 	db	121	;'y'
   569  00FF18  20                 	db	32
   570  00FF19  20                 	db	32
   571  00FF1A  20                 	db	32
   572  00FF1B  20                 	db	32
   573  00FF1C  20                 	db	32
   574  00FF1D  20                 	db	32
   575  00FF1E  20                 	db	32
   576  00FF1F  20                 	db	32
   577  00FF20  20                 	db	32
   578  00FF21  20                 	db	32
   579  00FF22  00                 	db	0
   580  00FF23                     STR_18:
   581  00FF23  54                 	db	84	;'T'
   582  00FF24  69                 	db	105	;'i'
   583  00FF25  6D                 	db	109	;'m'
   584  00FF26  65                 	db	101	;'e'
   585  00FF27  3A                 	db	58	;':'
   586  00FF28  20                 	db	32
   587  00FF29  25                 	db	37
   588  00FF2A  64                 	db	100	;'d'
   589  00FF2B  20                 	db	32
   590  00FF2C  73                 	db	115	;'s'
   591  00FF2D  20                 	db	32
   592  00FF2E  20                 	db	32
   593  00FF2F  20                 	db	32
   594  00FF30  20                 	db	32
   595  00FF31  20                 	db	32
   596  00FF32  20                 	db	32
   597  00FF33  20                 	db	32
   598  00FF34  00                 	db	0
   599  00FF35                     STR_22:
   600  00FF35  30                 	db	48	;'0'
   601  00FF36  31                 	db	49	;'1'
   602  00FF37  32                 	db	50	;'2'
   603  00FF38  33                 	db	51	;'3'
   604  00FF39  34                 	db	52	;'4'
   605  00FF3A  35                 	db	53	;'5'
   606  00FF3B  36                 	db	54	;'6'
   607  00FF3C  37                 	db	55	;'7'
   608  00FF3D  38                 	db	56	;'8'
   609  00FF3E  39                 	db	57	;'9'
   610  00FF3F  61                 	db	97	;'a'
   611  00FF40  62                 	db	98	;'b'
   612  00FF41  63                 	db	99	;'c'
   613  00FF42  64                 	db	100	;'d'
   614  00FF43  65                 	db	101	;'e'
   615  00FF44  66                 	db	102	;'f'
   616  00FF45  00                 	db	0
   617  00FF46                     STR_11:
   618  00FF46  54                 	db	84	;'T'
   619  00FF47  6F                 	db	111	;'o'
   620  00FF48  74                 	db	116	;'t'
   621  00FF49  61                 	db	97	;'a'
   622  00FF4A  6C                 	db	108	;'l'
   623  00FF4B  3A                 	db	58	;':'
   624  00FF4C  20                 	db	32
   625  00FF4D  25                 	db	37
   626  00FF4E  64                 	db	100	;'d'
   627  00FF4F  20                 	db	32
   628  00FF50  20                 	db	32
   629  00FF51  20                 	db	32
   630  00FF52  20                 	db	32
   631  00FF53  20                 	db	32
   632  00FF54  20                 	db	32
   633  00FF55  20                 	db	32
   634  00FF56  00                 	db	0
   635  00FF57                     STR_10:
   636  00FF57  42                 	db	66	;'B'
   637  00FF58  6F                 	db	111	;'o'
   638  00FF59  74                 	db	116	;'t'
   639  00FF5A  74                 	db	116	;'t'
   640  00FF5B  6C                 	db	108	;'l'
   641  00FF5C  65                 	db	101	;'e'
   642  00FF5D  20                 	db	32
   643  00FF5E  43                 	db	67	;'C'
   644  00FF5F  6F                 	db	111	;'o'
   645  00FF60  75                 	db	117	;'u'
   646  00FF61  6E                 	db	110	;'n'
   647  00FF62  74                 	db	116	;'t'
   648  00FF63  20                 	db	32
   649  00FF64  20                 	db	32
   650  00FF65  20                 	db	32
   651  00FF66  20                 	db	32
   652  00FF67  00                 	db	0
   653  00FF68                     STR_12:
   654  00FF68  59                 	db	89	;'Y'
   655  00FF69  4F                 	db	79	;'O'
   656  00FF6A  50                 	db	80	;'P'
   657  00FF6B  20                 	db	32
   658  00FF6C  57                 	db	87	;'W'
   659  00FF6D  2F                 	db	47
   660  00FF6E  20                 	db	32
   661  00FF6F  43                 	db	67	;'C'
   662  00FF70  41                 	db	65	;'A'
   663  00FF71  50                 	db	80	;'P'
   664  00FF72  3A                 	db	58	;':'
   665  00FF73  20                 	db	32
   666  00FF74  25                 	db	37
   667  00FF75  64                 	db	100	;'d'
   668  00FF76  20                 	db	32
   669  00FF77  20                 	db	32
   670  00FF78  00                 	db	0
   671  00FF79                     STR_13:
   672  00FF79  59                 	db	89	;'Y'
   673  00FF7A  4F                 	db	79	;'O'
   674  00FF7B  50                 	db	80	;'P'
   675  00FF7C  20                 	db	32
   676  00FF7D  4E                 	db	78	;'N'
   677  00FF7E  4F                 	db	79	;'O'
   678  00FF7F  20                 	db	32
   679  00FF80  43                 	db	67	;'C'
   680  00FF81  41                 	db	65	;'A'
   681  00FF82  50                 	db	80	;'P'
   682  00FF83  3A                 	db	58	;':'
   683  00FF84  20                 	db	32
   684  00FF85  25                 	db	37
   685  00FF86  64                 	db	100	;'d'
   686  00FF87  20                 	db	32
   687  00FF88  20                 	db	32
   688  00FF89  00                 	db	0
   689  00FF8A                     STR_14:
   690  00FF8A  45                 	db	69	;'E'
   691  00FF8B  53                 	db	83	;'S'
   692  00FF8C  4B                 	db	75	;'K'
   693  00FF8D  41                 	db	65	;'A'
   694  00FF8E  20                 	db	32
   695  00FF8F  57                 	db	87	;'W'
   696  00FF90  2F                 	db	47
   697  00FF91  20                 	db	32
   698  00FF92  43                 	db	67	;'C'
   699  00FF93  41                 	db	65	;'A'
   700  00FF94  50                 	db	80	;'P'
   701  00FF95  3A                 	db	58	;':'
   702  00FF96  20                 	db	32
   703  00FF97  25                 	db	37
   704  00FF98  64                 	db	100	;'d'
   705  00FF99  20                 	db	32
   706  00FF9A  00                 	db	0
   707  00FF9B                     STR_15:
   708  00FF9B  45                 	db	69	;'E'
   709  00FF9C  53                 	db	83	;'S'
   710  00FF9D  4B                 	db	75	;'K'
   711  00FF9E  41                 	db	65	;'A'
   712  00FF9F  20                 	db	32
   713  00FFA0  4E                 	db	78	;'N'
   714  00FFA1  4F                 	db	79	;'O'
   715  00FFA2  20                 	db	32
   716  00FFA3  43                 	db	67	;'C'
   717  00FFA4  41                 	db	65	;'A'
   718  00FFA5  50                 	db	80	;'P'
   719  00FFA6  3A                 	db	58	;':'
   720  00FFA7  20                 	db	32
   721  00FFA8  25                 	db	37
   722  00FFA9  64                 	db	100	;'d'
   723  00FFAA  20                 	db	32
   724  00FFAB  00                 	db	0
   725  00FFAC                     STR_20:
   726  00FFAC  4F                 	db	79	;'O'
   727  00FFAD  70                 	db	112	;'p'
   728  00FFAE  65                 	db	101	;'e'
   729  00FFAF  72                 	db	114	;'r'
   730  00FFB0  61                 	db	97	;'a'
   731  00FFB1  74                 	db	116	;'t'
   732  00FFB2  69                 	db	105	;'i'
   733  00FFB3  6F                 	db	111	;'o'
   734  00FFB4  6E                 	db	110	;'n'
   735  00FFB5  20                 	db	32
   736  00FFB6  44                 	db	68	;'D'
   737  00FFB7  6F                 	db	111	;'o'
   738  00FFB8  6E                 	db	110	;'n'
   739  00FFB9  65                 	db	101	;'e'
   740  00FFBA  21                 	db	33
   741  00FFBB  00                 	db	0
   742  00FFBC                     STR_16:
   743  00FFBC  45                 	db	69	;'E'
   744  00FFBD  52                 	db	82	;'R'
   745  00FFBE  52                 	db	82	;'R'
   746  00FFBF  3A                 	db	58	;':'
   747  00FFC0  20                 	db	32
   748  00FFC1  42                 	db	66	;'B'
   749  00FFC2  41                 	db	65	;'A'
   750  00FFC3  44                 	db	68	;'D'
   751  00FFC4  20                 	db	32
   752  00FFC5  42                 	db	66	;'B'
   753  00FFC6  54                 	db	84	;'T'
   754  00FFC7  4C                 	db	76	;'L'
   755  00FFC8  43                 	db	67	;'C'
   756  00FFC9  4E                 	db	78	;'N'
   757  00FFCA  54                 	db	84	;'T'
   758  00FFCB  00                 	db	0
   759  00FFCC                     STR_21:
   760  00FFCC  45                 	db	69	;'E'
   761  00FFCD  4D                 	db	77	;'M'
   762  00FFCE  45                 	db	69	;'E'
   763  00FFCF  52                 	db	82	;'R'
   764  00FFD0  47                 	db	71	;'G'
   765  00FFD1  45                 	db	69	;'E'
   766  00FFD2  4E                 	db	78	;'N'
   767  00FFD3  43                 	db	67	;'C'
   768  00FFD4  59                 	db	89	;'Y'
   769  00FFD5  20                 	db	32
   770  00FFD6  53                 	db	83	;'S'
   771  00FFD7  54                 	db	84	;'T'
   772  00FFD8  4F                 	db	79	;'O'
   773  00FFD9  50                 	db	80	;'P'
   774  00FFDA  00                 	db	0
   775  00FFDB                     STR_5:
   776  00FFDB  45                 	db	69	;'E'
   777  00FFDC  52                 	db	82	;'R'
   778  00FFDD  52                 	db	82	;'R'
   779  00FFDE  3A                 	db	58	;':'
   780  00FFDF  20                 	db	32
   781  00FFE0  42                 	db	66	;'B'
   782  00FFE1  41                 	db	65	;'A'
   783  00FFE2  44                 	db	68	;'D'
   784  00FFE3  20                 	db	32
   785  00FFE4  49                 	db	73	;'I'
   786  00FFE5  53                 	db	83	;'S'
   787  00FFE6  52                 	db	82	;'R'
   788  00FFE7  00                 	db	0
   789  00FFE8                     STR_7:
   790  00FFE8  25                 	db	37
   791  00FFE9  64                 	db	100	;'d'
   792  00FFEA  20                 	db	32
   793  00FFEB  20                 	db	32
   794  00FFEC  20                 	db	32
   795  00FFED  20                 	db	32
   796  00FFEE  20                 	db	32
   797  00FFEF  20                 	db	32
   798  00FFF0  00                 	db	0
   799  00FFF1                     STR_1:
   800  00FFF1  72                 	db	114	;'r'
   801  00FFF2  75                 	db	117	;'u'
   802  00FFF3  6E                 	db	110	;'n'
   803  00FFF4  6E                 	db	110	;'n'
   804  00FFF5  69                 	db	105	;'i'
   805  00FFF6  6E                 	db	110	;'n'
   806  00FFF7  67                 	db	103	;'g'
   807  00FFF8  00                 	db	0
   808  00FFF9                     STR_4:
   809  00FFF9  25                 	db	37
   810  00FFFA  64                 	db	100	;'d'
   811  00FFFB  00                 	db	0
   812  00FFFC                     STR_19:
   813  00FFFC  25                 	db	37
   814  00FFFD  66                 	db	102	;'f'
   815  00FFFE  00                 	db	0
   816                           
   817                           ; #config settings
   818  00FFFF  00                 	db	0	; dummy byte at the end
   819  0000                     
   820                           	psect	cinit
   821  005672                     __pcinit:
   822                           	opt stack 0
   823  005672                     start_initialization:
   824                           	opt stack 0
   825  005672                     __initialization:
   826                           	opt stack 0
   827                           
   828                           ; Initialize objects allocated to BANK1 (2 bytes)
   829                           ; load TBLPTR registers with __pidataBANK1
   830  005672  0EE4               	movlw	low __pidataBANK1
   831  005674  6EF6               	movwf	tblptrl,c
   832  005676  0E59               	movlw	high __pidataBANK1
   833  005678  6EF7               	movwf	tblptrh,c
   834  00567A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   835  00567C  6EF8               	movwf	tblptru,c
   836  00567E  0009               	tblrd		*+	;fetch initializer
   837  005680  CFF5 F187          	movff	tablat,__pdataBANK1
   838  005684  0009               	tblrd		*+	;fetch initializer
   839  005686  CFF5 F188          	movff	tablat,__pdataBANK1+1
   840                           
   841                           ; Clear objects allocated to BANK1 (65 bytes)
   842  00568A  EE01  F046         	lfsr	0,__pbssBANK1
   843  00568E  0E41               	movlw	65
   844  005690                     clear_0:
   845  005690  6AEE               	clrf	postinc0,c
   846  005692  06E8               	decf	wreg,f,c
   847  005694  E1FD               	bnz	clear_0
   848                           
   849                           ; Clear objects allocated to BANK0 (32 bytes)
   850  005696  EE00  F0C2         	lfsr	0,__pbssBANK0
   851  00569A  0E20               	movlw	32
   852  00569C                     clear_1:
   853  00569C  6AEE               	clrf	postinc0,c
   854  00569E  06E8               	decf	wreg,f,c
   855  0056A0  E1FD               	bnz	clear_1
   856                           
   857                           ; Clear objects allocated to COMRAM (5 bytes)
   858  0056A2  6A7E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   859  0056A4  6A7D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   860  0056A6  6A7C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   861  0056A8  6A7B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   862  0056AA  6A7A               	clrf	__pbssCOMRAM& (0+255),c
   863  0056AC                     end_of_initialization:
   864                           	opt stack 0
   865  0056AC                     __end_of__initialization:
   866                           	opt stack 0
   867  0056AC  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   868  0056AE  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   869  0056B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   870  0056B2  6EF8               	movwf	tblptru,c
   871  0056B4  0100               	movlb	0
   872  0056B6  EF46  F018         	goto	_main	;jump to C main() function
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           
   880                           	psect	bssCOMRAM
   881  00007A                     __pbssCOMRAM:
   882                           	opt stack 0
   883  00007A                     _i:
   884                           	opt stack 0
   885  00007A                     	ds	2
   886  00007C                     _j:
   887                           	opt stack 0
   888  00007C                     	ds	2
   889  00007E                     _servo0_flag:
   890                           	opt stack 0
   891  00007E                     	ds	1
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           
   899                           	psect	bssBANK0
   900  0000C2                     __pbssBANK0:
   901                           	opt stack 0
   902  0000C2                     _color:
   903                           	opt stack 0
   904  0000C2                     	ds	8
   905  0000CA                     _color_high:
   906                           	opt stack 0
   907  0000CA                     	ds	4
   908  0000CE                     _color_low:
   909                           	opt stack 0
   910  0000CE                     	ds	4
   911  0000D2                     _r:
   912                           	opt stack 0
   913  0000D2                     	ds	3
   914  0000D5                     _r_p:
   915                           	opt stack 0
   916  0000D5                     	ds	3
   917  0000D8                     _end_time:
   918                           	opt stack 0
   919  0000D8                     	ds	2
   920  0000DA                     _flag_picbug:
   921                           	opt stack 0
   922  0000DA                     	ds	2
   923  0000DC                     _flag_top_read:
   924                           	opt stack 0
   925  0000DC                     	ds	2
   926  0000DE                     _start_time:
   927                           	opt stack 0
   928  0000DE                     	ds	2
   929  0000E0                     _curr_state:
   930                           	opt stack 0
   931  0000E0                     	ds	1
   932  0000E1                     _servo1_flag:
   933                           	opt stack 0
   934  0000E1                     	ds	1
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           
   942                           	psect	bssBANK1
   943  000146                     __pbssBANK1:
   944                           	opt stack 0
   945  000146                     _bottle_count_array:
   946                           	opt stack 0
   947  000146                     	ds	10
   948  000150                     _colorprev:
   949                           	opt stack 0
   950  000150                     	ds	8
   951  000158                     _time:
   952                           	opt stack 0
   953  000158                     	ds	7
   954  00015F                     _testint:
   955                           	opt stack 0
   956  00015F                     	ds	6
   957  000165                     _b:
   958                           	opt stack 0
   959  000165                     	ds	3
   960  000168                     _b_p:
   961                           	opt stack 0
   962  000168                     	ds	3
   963  00016B                     _bottle_read_bot:
   964                           	opt stack 0
   965  00016B                     	ds	2
   966  00016D                     _bottle_read_top:
   967                           	opt stack 0
   968  00016D                     	ds	2
   969  00016F                     _errno:
   970                           	opt stack 0
   971  00016F                     	ds	2
   972  000171                     _etime:
   973                           	opt stack 0
   974  000171                     	ds	2
   975  000173                     _flag_bottle:
   976                           	opt stack 0
   977  000173                     	ds	2
   978  000175                     _flag_bottle_high:
   979                           	opt stack 0
   980  000175                     	ds	2
   981  000177                     _flag_eskaC:
   982                           	opt stack 0
   983  000177                     	ds	2
   984  000179                     _flag_yopNC:
   985                           	opt stack 0
   986  000179                     	ds	2
   987  00017B                     _operation_disp:
   988                           	opt stack 0
   989  00017B                     	ds	2
   990  00017D                     _operation_time:
   991                           	opt stack 0
   992  00017D                     	ds	2
   993  00017F                     _servo0_timer:
   994                           	opt stack 0
   995  00017F                     	ds	2
   996  000181                     _servo1_timer:
   997                           	opt stack 0
   998  000181                     	ds	2
   999  000183                     _stime:
  1000                           	opt stack 0
  1001  000183                     	ds	2
  1002  000185                     _testflag:
  1003                           	opt stack 0
  1004  000185                     	ds	2
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           
  1012                           	psect	dataBANK1
  1013  000187                     __pdataBANK1:
  1014                           	opt stack 0
  1015  000187                     _bottle_count_disp:
  1016                           	opt stack 0
  1017  000187                     	ds	2
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           
  1025                           	psect	cstackBANK1
  1026  000100                     __pcstackBANK1:
  1027                           	opt stack 0
  1028  000100                     ?_fround:
  1029                           	opt stack 0
  1030  000100                     ?_scale:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x0
  1034  000100                     	ds	3
  1035  000103                     _fround$1307:
  1036                           	opt stack 0
  1037  000103                     _scale$1308:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x3
  1041  000103                     	ds	3
  1042  000106                     scale@scl:
  1043                           	opt stack 0
  1044  000106                     _fround$1306:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x6
  1048  000106                     	ds	1
  1049  000107                     ?___fttol:
  1050                           	opt stack 0
  1051  000107                     ___fttol@f1:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x7
  1055  000107                     	ds	2
  1056  000109                     fround@prec:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x9
  1060  000109                     	ds	1
  1061  00010A                     ?___ftadd:
  1062                           	opt stack 0
  1063  00010A                     ___ftadd@f1:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0xA
  1067  00010A                     	ds	1
  1068  00010B                     ??___fttol:
  1069                           
  1070                           ; 1 bytes @ 0xB
  1071  00010B                     	ds	2
  1072  00010D                     ___ftadd@f2:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0xD
  1076  00010D                     	ds	3
  1077  000110                     ??___ftadd:
  1078  000110                     ___fttol@sign1:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x10
  1082  000110                     	ds	1
  1083  000111                     ___fttol@lval:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x11
  1087  000111                     	ds	2
  1088  000113                     ___ftadd@sign:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x13
  1092  000113                     	ds	1
  1093  000114                     ___ftadd@exp2:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x14
  1097  000114                     	ds	1
  1098  000115                     ___ftadd@exp1:
  1099                           	opt stack 0
  1100  000115                     ___fttol@exp1:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x15
  1104  000115                     	ds	1
  1105  000116                     ?___ftsub:
  1106                           	opt stack 0
  1107  000116                     ___ftsub@f1:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x16
  1111  000116                     	ds	3
  1112  000119                     ___ftsub@f2:
  1113                           	opt stack 0
  1114                           
  1115                           ; 3 bytes @ 0x19
  1116  000119                     	ds	3
  1117  00011C                     ?_printf:
  1118                           	opt stack 0
  1119  00011C                     printf@f:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x1C
  1123  00011C                     	ds	8
  1124  000124                     ??_printf:
  1125                           
  1126                           ; 1 bytes @ 0x24
  1127  000124                     	ds	6
  1128  00012A                     _printf$1309:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x2A
  1132  00012A                     	ds	3
  1133  00012D                     printf@idx:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x2D
  1137  00012D                     	ds	1
  1138  00012E                     printf@ap:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x2E
  1142  00012E                     	ds	2
  1143  000130                     printf@prec:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x30
  1147  000130                     	ds	2
  1148  000132                     printf@tmpval:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x32
  1152  000132                     	ds	4
  1153  000136                     printf@width:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x36
  1157  000136                     	ds	2
  1158  000138                     printf@exp:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x38
  1162  000138                     	ds	2
  1163  00013A                     printf@val:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x3A
  1167  00013A                     	ds	4
  1168  00013E                     printf@flag:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x3E
  1172  00013E                     	ds	2
  1173  000140                     printf@fval:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x40
  1177  000140                     	ds	3
  1178  000143                     printf@c:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x43
  1182  000143                     	ds	1
  1183  000144                     ??_main:
  1184                           
  1185                           ; 1 bytes @ 0x44
  1186  000144                     	ds	2
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           
  1194                           	psect	cstackBANK0
  1195  000080                     __pcstackBANK0:
  1196                           	opt stack 0
  1197  000080                     _dec_to_hex$1304:
  1198                           	opt stack 0
  1199                           
  1200                           ; 3 bytes @ 0x0
  1201  000080                     	ds	3
  1202  000083                     _dec_to_hex$1522:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x3
  1206  000083                     	ds	3
  1207  000086                     dec_to_hex@temp:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x6
  1211  000086                     	ds	2
  1212  000088                     dec_to_hex@i:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x8
  1216  000088                     	ds	2
  1217  00008A                     dec_to_hex@hexnum:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0xA
  1221  00008A                     	ds	2
  1222  00008C                     dec_to_hex@quotient:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0xC
  1226  00008C                     	ds	2
  1227  00008E                     ??_isr:
  1228                           
  1229                           ; 1 bytes @ 0xE
  1230  00008E                     	ds	16
  1231  00009E                     ??_isdigit:
  1232  00009E                     ??_I2C_Master_Wait:
  1233  00009E                     ?___awmod:
  1234                           	opt stack 0
  1235  00009E                     ?___ftpack:
  1236                           	opt stack 0
  1237  00009E                     ?___ftneg:
  1238                           	opt stack 0
  1239  00009E                     ?__tdiv_to_l_:
  1240                           	opt stack 0
  1241  00009E                     ?__div_to_l_:
  1242                           	opt stack 0
  1243  00009E                     ?___lldiv:
  1244                           	opt stack 0
  1245  00009E                     lcdNibble@temp:
  1246                           	opt stack 0
  1247  00009E                     ___awmod@dividend:
  1248                           	opt stack 0
  1249  00009E                     __div_to_l_@f1:
  1250                           	opt stack 0
  1251  00009E                     ___ftpack@arg:
  1252                           	opt stack 0
  1253  00009E                     __tdiv_to_l_@f1:
  1254                           	opt stack 0
  1255  00009E                     ___ftneg@f1:
  1256                           	opt stack 0
  1257  00009E                     ___lldiv@dividend:
  1258                           	opt stack 0
  1259                           
  1260                           ; 4 bytes @ 0x1E
  1261  00009E                     	ds	1
  1262  00009F                     I2C_Master_Read@a:
  1263                           	opt stack 0
  1264  00009F                     lcdNibble@data:
  1265                           	opt stack 0
  1266  00009F                     _isdigit$853:
  1267                           	opt stack 0
  1268  00009F                     I2C_Master_Write@d:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x1F
  1272  00009F                     	ds	1
  1273  0000A0                     I2C_Master_Read@temp:
  1274                           	opt stack 0
  1275  0000A0                     lcdInst@data:
  1276                           	opt stack 0
  1277  0000A0                     putch@data:
  1278                           	opt stack 0
  1279  0000A0                     isdigit@c:
  1280                           	opt stack 0
  1281  0000A0                     ___awmod@divisor:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x20
  1285  0000A0                     	ds	1
  1286  0000A1                     ??_read_colorsensor:
  1287  0000A1                     ??_I2C_ColorSens_Init:
  1288  0000A1                     ??_initLCD:
  1289  0000A1                     ___ftpack@exp:
  1290                           	opt stack 0
  1291  0000A1                     __div_to_l_@f2:
  1292                           	opt stack 0
  1293  0000A1                     __tdiv_to_l_@f2:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0x21
  1297  0000A1                     	ds	1
  1298  0000A2                     ___awmod@counter:
  1299                           	opt stack 0
  1300  0000A2                     ___ftpack@sign:
  1301                           	opt stack 0
  1302  0000A2                     ___lldiv@divisor:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0x22
  1306  0000A2                     	ds	1
  1307  0000A3                     ??___ftpack:
  1308  0000A3                     ___awmod@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x23
  1312  0000A3                     	ds	1
  1313  0000A4                     ??__tdiv_to_l_:
  1314  0000A4                     ?___awdiv:
  1315                           	opt stack 0
  1316  0000A4                     ___awdiv@dividend:
  1317                           	opt stack 0
  1318  0000A4                     __div_to_l_@quot:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x24
  1322  0000A4                     	ds	2
  1323  0000A6                     ?___ftdiv:
  1324                           	opt stack 0
  1325  0000A6                     ?___lltoft:
  1326                           	opt stack 0
  1327  0000A6                     ?___lwtoft:
  1328                           	opt stack 0
  1329  0000A6                     ___awdiv@divisor:
  1330                           	opt stack 0
  1331  0000A6                     ___lwtoft@c:
  1332                           	opt stack 0
  1333  0000A6                     ___ftdiv@f1:
  1334                           	opt stack 0
  1335  0000A6                     ___lldiv@quotient:
  1336                           	opt stack 0
  1337  0000A6                     ___lltoft@c:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x26
  1341  0000A6                     	ds	1
  1342  0000A7                     __tdiv_to_l_@quot:
  1343                           	opt stack 0
  1344                           
  1345                           ; 4 bytes @ 0x27
  1346  0000A7                     	ds	1
  1347  0000A8                     ___awdiv@counter:
  1348                           	opt stack 0
  1349  0000A8                     __div_to_l_@cntr:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x28
  1353  0000A8                     	ds	1
  1354  0000A9                     ___awdiv@sign:
  1355                           	opt stack 0
  1356  0000A9                     __div_to_l_@exp1:
  1357                           	opt stack 0
  1358  0000A9                     ___ftdiv@f2:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x29
  1362  0000A9                     	ds	1
  1363  0000AA                     ??___lltoft:
  1364  0000AA                     ___lldiv@counter:
  1365                           	opt stack 0
  1366  0000AA                     ___awdiv@quotient:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x2A
  1370  0000AA                     	ds	1
  1371  0000AB                     ?___llmod:
  1372                           	opt stack 0
  1373  0000AB                     __tdiv_to_l_@cntr:
  1374                           	opt stack 0
  1375  0000AB                     I2C_Master_Init@c:
  1376                           	opt stack 0
  1377  0000AB                     ___llmod@dividend:
  1378                           	opt stack 0
  1379                           
  1380                           ; 4 bytes @ 0x2B
  1381  0000AB                     	ds	1
  1382  0000AC                     ??___ftdiv:
  1383  0000AC                     ?___wmul:
  1384                           	opt stack 0
  1385  0000AC                     __tdiv_to_l_@exp1:
  1386                           	opt stack 0
  1387  0000AC                     ___wmul@multiplier:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x2C
  1391  0000AC                     	ds	2
  1392  0000AE                     ___lltoft@exp:
  1393                           	opt stack 0
  1394  0000AE                     ___wmul@multiplicand:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x2E
  1398  0000AE                     	ds	1
  1399  0000AF                     ??_I2C_Master_Init:
  1400  0000AF                     ___ftdiv@cntr:
  1401                           	opt stack 0
  1402  0000AF                     ___llmod@divisor:
  1403                           	opt stack 0
  1404                           
  1405                           ; 4 bytes @ 0x2F
  1406  0000AF                     	ds	1
  1407  0000B0                     ___wmul@product:
  1408                           	opt stack 0
  1409  0000B0                     ___ftdiv@f3:
  1410                           	opt stack 0
  1411                           
  1412                           ; 3 bytes @ 0x30
  1413  0000B0                     	ds	2
  1414  0000B2                     ?___ftmul:
  1415                           	opt stack 0
  1416  0000B2                     ___ftmul@f1:
  1417                           	opt stack 0
  1418                           
  1419                           ; 3 bytes @ 0x32
  1420  0000B2                     	ds	1
  1421  0000B3                     ___ftdiv@exp:
  1422                           	opt stack 0
  1423  0000B3                     ___llmod@counter:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x33
  1427  0000B3                     	ds	1
  1428  0000B4                     ___ftdiv@sign:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x34
  1432  0000B4                     	ds	1
  1433  0000B5                     ___ftge@ff1:
  1434                           	opt stack 0
  1435  0000B5                     ___ftmul@f2:
  1436                           	opt stack 0
  1437                           
  1438                           ; 3 bytes @ 0x35
  1439  0000B5                     	ds	3
  1440  0000B8                     ??___ftmul:
  1441  0000B8                     ___ftge@ff2:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0x38
  1445  0000B8                     	ds	3
  1446  0000BB                     ??___ftge:
  1447  0000BB                     ___ftmul@exp:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x3B
  1451  0000BB                     	ds	1
  1452  0000BC                     ___ftmul@f3_as_product:
  1453                           	opt stack 0
  1454                           
  1455                           ; 3 bytes @ 0x3C
  1456  0000BC                     	ds	3
  1457  0000BF                     ___ftmul@cntr:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x3F
  1461  0000BF                     	ds	1
  1462  0000C0                     ___ftmul@sign:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x40
  1466  0000C0                     	ds	1
  1467  0000C1                     date_time@i:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x41
  1471  0000C1                     	ds	1
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           
  1479                           	psect	cstackCOMRAM
  1480  000001                     __pcstackCOMRAM:
  1481                           	opt stack 0
  1482  000001                     ??i2_I2C_Master_Wait:
  1483  000001                     ??i2_isdigit:
  1484  000001                     ?i2___awmod:
  1485                           	opt stack 0
  1486  000001                     ?_frexp:
  1487                           	opt stack 0
  1488  000001                     ?i2___ftpack:
  1489                           	opt stack 0
  1490  000001                     ?i2___ftneg:
  1491                           	opt stack 0
  1492  000001                     ?i2__div_to_l_:
  1493                           	opt stack 0
  1494  000001                     ?i2__tdiv_to_l_:
  1495                           	opt stack 0
  1496  000001                     ?i2___lldiv:
  1497                           	opt stack 0
  1498  000001                     i2lcdNibble@temp:
  1499                           	opt stack 0
  1500  000001                     i2___awmod@dividend:
  1501                           	opt stack 0
  1502  000001                     frexp@value:
  1503                           	opt stack 0
  1504  000001                     i2__div_to_l_@f1:
  1505                           	opt stack 0
  1506  000001                     i2___ftpack@arg:
  1507                           	opt stack 0
  1508  000001                     i2__tdiv_to_l_@f1:
  1509                           	opt stack 0
  1510  000001                     i2___ftge@ff1:
  1511                           	opt stack 0
  1512  000001                     i2___ftneg@f1:
  1513                           	opt stack 0
  1514  000001                     i2___lldiv@dividend:
  1515                           	opt stack 0
  1516                           
  1517                           ; 4 bytes @ 0x0
  1518  000001                     	ds	1
  1519  000002                     i2I2C_Master_Read@a:
  1520                           	opt stack 0
  1521  000002                     i2lcdNibble@data:
  1522                           	opt stack 0
  1523  000002                     i2_isdigit$853:
  1524                           	opt stack 0
  1525  000002                     i2I2C_Master_Write@d:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x1
  1529  000002                     	ds	1
  1530  000003                     i2I2C_Master_Read@temp:
  1531                           	opt stack 0
  1532  000003                     i2lcdInst@data:
  1533                           	opt stack 0
  1534  000003                     i2putch@data:
  1535                           	opt stack 0
  1536  000003                     i2isdigit@c:
  1537                           	opt stack 0
  1538  000003                     i2___awmod@divisor:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x2
  1542  000003                     	ds	1
  1543  000004                     ??i2_read_colorsensor:
  1544  000004                     read_time@i:
  1545                           	opt stack 0
  1546  000004                     i2___ftpack@exp:
  1547                           	opt stack 0
  1548  000004                     frexp@eptr:
  1549                           	opt stack 0
  1550  000004                     i2__div_to_l_@f2:
  1551                           	opt stack 0
  1552  000004                     i2__tdiv_to_l_@f2:
  1553                           	opt stack 0
  1554  000004                     i2___ftge@ff2:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x3
  1558  000004                     	ds	1
  1559  000005                     i2___awmod@counter:
  1560                           	opt stack 0
  1561  000005                     i2___ftpack@sign:
  1562                           	opt stack 0
  1563  000005                     i2___lldiv@divisor:
  1564                           	opt stack 0
  1565                           
  1566                           ; 4 bytes @ 0x4
  1567  000005                     	ds	1
  1568  000006                     ??_frexp:
  1569  000006                     ??i2___ftpack:
  1570  000006                     i2___awmod@sign:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x5
  1574  000006                     	ds	1
  1575  000007                     ??i2__tdiv_to_l_:
  1576  000007                     ??i2___ftge:
  1577  000007                     ?i2___awdiv:
  1578                           	opt stack 0
  1579  000007                     i2___awdiv@dividend:
  1580                           	opt stack 0
  1581  000007                     i2__div_to_l_@quot:
  1582                           	opt stack 0
  1583                           
  1584                           ; 4 bytes @ 0x6
  1585  000007                     	ds	2
  1586  000009                     ?___awtoft:
  1587                           	opt stack 0
  1588  000009                     ?i2___ftdiv:
  1589                           	opt stack 0
  1590  000009                     ?i2___lltoft:
  1591                           	opt stack 0
  1592  000009                     ___awtoft@c:
  1593                           	opt stack 0
  1594  000009                     i2___awdiv@divisor:
  1595                           	opt stack 0
  1596  000009                     i2___ftdiv@f1:
  1597                           	opt stack 0
  1598  000009                     i2___lldiv@quotient:
  1599                           	opt stack 0
  1600  000009                     i2___lltoft@c:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x8
  1604  000009                     	ds	1
  1605  00000A                     i2__tdiv_to_l_@quot:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0x9
  1609  00000A                     	ds	1
  1610  00000B                     i2___awdiv@counter:
  1611                           	opt stack 0
  1612  00000B                     i2__div_to_l_@cntr:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0xA
  1616  00000B                     	ds	1
  1617  00000C                     ___awtoft@sign:
  1618                           	opt stack 0
  1619  00000C                     i2___awdiv@sign:
  1620                           	opt stack 0
  1621  00000C                     i2__div_to_l_@exp1:
  1622                           	opt stack 0
  1623  00000C                     i2___ftdiv@f2:
  1624                           	opt stack 0
  1625                           
  1626                           ; 3 bytes @ 0xB
  1627  00000C                     	ds	1
  1628  00000D                     ??i2___lltoft:
  1629  00000D                     i2___lldiv@counter:
  1630                           	opt stack 0
  1631  00000D                     i2___awdiv@quotient:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0xC
  1635  00000D                     	ds	1
  1636  00000E                     ?i2___llmod:
  1637                           	opt stack 0
  1638  00000E                     i2__tdiv_to_l_@cntr:
  1639                           	opt stack 0
  1640  00000E                     i2___llmod@dividend:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0xD
  1644  00000E                     	ds	1
  1645  00000F                     ??i2___ftdiv:
  1646  00000F                     ?i2___wmul:
  1647                           	opt stack 0
  1648  00000F                     i2__tdiv_to_l_@exp1:
  1649                           	opt stack 0
  1650  00000F                     i2___wmul@multiplier:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0xE
  1654  00000F                     	ds	2
  1655  000011                     i2___lltoft@exp:
  1656                           	opt stack 0
  1657  000011                     i2___wmul@multiplicand:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x10
  1661  000011                     	ds	1
  1662  000012                     i2___ftdiv@cntr:
  1663                           	opt stack 0
  1664  000012                     i2___llmod@divisor:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x11
  1668  000012                     	ds	1
  1669  000013                     i2___wmul@product:
  1670                           	opt stack 0
  1671  000013                     i2___ftdiv@f3:
  1672                           	opt stack 0
  1673                           
  1674                           ; 3 bytes @ 0x12
  1675  000013                     	ds	2
  1676  000015                     ?i2___ftmul:
  1677                           	opt stack 0
  1678  000015                     i2___ftmul@f1:
  1679                           	opt stack 0
  1680                           
  1681                           ; 3 bytes @ 0x14
  1682  000015                     	ds	1
  1683  000016                     i2___ftdiv@exp:
  1684                           	opt stack 0
  1685  000016                     i2___llmod@counter:
  1686                           	opt stack 0
  1687                           
  1688                           ; 1 bytes @ 0x15
  1689  000016                     	ds	1
  1690  000017                     i2___ftdiv@sign:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0x16
  1694  000017                     	ds	1
  1695  000018                     i2___ftmul@f2:
  1696                           	opt stack 0
  1697                           
  1698                           ; 3 bytes @ 0x17
  1699  000018                     	ds	3
  1700  00001B                     ??i2___ftmul:
  1701                           
  1702                           ; 1 bytes @ 0x1A
  1703  00001B                     	ds	3
  1704  00001E                     i2___ftmul@exp:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x1D
  1708  00001E                     	ds	1
  1709  00001F                     i2___ftmul@f3_as_product:
  1710                           	opt stack 0
  1711                           
  1712                           ; 3 bytes @ 0x1E
  1713  00001F                     	ds	3
  1714  000022                     i2___ftmul@cntr:
  1715                           	opt stack 0
  1716                           
  1717                           ; 1 bytes @ 0x21
  1718  000022                     	ds	1
  1719  000023                     i2___ftmul@sign:
  1720                           	opt stack 0
  1721                           
  1722                           ; 1 bytes @ 0x22
  1723  000023                     	ds	1
  1724  000024                     ?i2_fround:
  1725                           	opt stack 0
  1726  000024                     ?i2_scale:
  1727                           	opt stack 0
  1728                           
  1729                           ; 3 bytes @ 0x23
  1730  000024                     	ds	3
  1731  000027                     i2_fround$1527:
  1732                           	opt stack 0
  1733  000027                     i2_scale$1528:
  1734                           	opt stack 0
  1735                           
  1736                           ; 3 bytes @ 0x26
  1737  000027                     	ds	3
  1738  00002A                     i2scale@scl:
  1739                           	opt stack 0
  1740  00002A                     i2_fround$1526:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x29
  1744  00002A                     	ds	3
  1745  00002D                     i2fround@prec:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x2C
  1749  00002D                     	ds	1
  1750  00002E                     ?i2___ftadd:
  1751                           	opt stack 0
  1752  00002E                     i2___ftadd@f1:
  1753                           	opt stack 0
  1754                           
  1755                           ; 3 bytes @ 0x2D
  1756  00002E                     	ds	3
  1757  000031                     i2___ftadd@f2:
  1758                           	opt stack 0
  1759                           
  1760                           ; 3 bytes @ 0x30
  1761  000031                     	ds	3
  1762  000034                     ??i2___ftadd:
  1763                           
  1764                           ; 1 bytes @ 0x33
  1765  000034                     	ds	3
  1766  000037                     i2___ftadd@sign:
  1767                           	opt stack 0
  1768                           
  1769                           ; 1 bytes @ 0x36
  1770  000037                     	ds	1
  1771  000038                     i2___ftadd@exp2:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0x37
  1775  000038                     	ds	1
  1776  000039                     i2___ftadd@exp1:
  1777                           	opt stack 0
  1778                           
  1779                           ; 1 bytes @ 0x38
  1780  000039                     	ds	1
  1781  00003A                     ?_eval_poly:
  1782                           	opt stack 0
  1783  00003A                     ?i2___ftsub:
  1784                           	opt stack 0
  1785  00003A                     ?i2___fttol:
  1786                           	opt stack 0
  1787  00003A                     eval_poly@x:
  1788                           	opt stack 0
  1789  00003A                     i2___ftsub@f1:
  1790                           	opt stack 0
  1791  00003A                     i2___fttol@f1:
  1792                           	opt stack 0
  1793                           
  1794                           ; 3 bytes @ 0x39
  1795  00003A                     	ds	3
  1796  00003D                     eval_poly@d:
  1797                           	opt stack 0
  1798  00003D                     i2___ftsub@f2:
  1799                           	opt stack 0
  1800                           
  1801                           ; 3 bytes @ 0x3C
  1802  00003D                     	ds	1
  1803  00003E                     ??i2___fttol:
  1804                           
  1805                           ; 1 bytes @ 0x3D
  1806  00003E                     	ds	1
  1807  00003F                     eval_poly@n:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x3E
  1811  00003F                     	ds	1
  1812  000040                     
  1813                           ; 1 bytes @ 0x3F
  1814  000040                     	ds	1
  1815  000041                     ??_eval_poly:
  1816                           
  1817                           ; 1 bytes @ 0x40
  1818  000041                     	ds	2
  1819  000043                     i2___fttol@sign1:
  1820                           	opt stack 0
  1821  000043                     eval_poly@res:
  1822                           	opt stack 0
  1823                           
  1824                           ; 3 bytes @ 0x42
  1825  000043                     	ds	1
  1826  000044                     i2___fttol@lval:
  1827                           	opt stack 0
  1828                           
  1829                           ; 4 bytes @ 0x43
  1830  000044                     	ds	2
  1831  000046                     ?_log:
  1832                           	opt stack 0
  1833  000046                     ?_ldexp:
  1834                           	opt stack 0
  1835  000046                     ldexp@value:
  1836                           	opt stack 0
  1837  000046                     log@x:
  1838                           	opt stack 0
  1839                           
  1840                           ; 3 bytes @ 0x45
  1841  000046                     	ds	2
  1842  000048                     i2___fttol@exp1:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x47
  1846  000048                     	ds	1
  1847  000049                     ?i2_printf:
  1848                           	opt stack 0
  1849  000049                     ?___altoft:
  1850                           	opt stack 0
  1851  000049                     ldexp@newexp:
  1852                           	opt stack 0
  1853  000049                     log@exponent:
  1854                           	opt stack 0
  1855  000049                     i2printf@f:
  1856                           	opt stack 0
  1857  000049                     ___altoft@c:
  1858                           	opt stack 0
  1859                           
  1860                           ; 4 bytes @ 0x48
  1861  000049                     	ds	2
  1862  00004B                     ??_ldexp:
  1863                           
  1864                           ; 1 bytes @ 0x4A
  1865  00004B                     	ds	2
  1866  00004D                     ??___altoft:
  1867                           
  1868                           ; 1 bytes @ 0x4C
  1869  00004D                     	ds	2
  1870  00004F                     ??i2_printf:
  1871                           
  1872                           ; 1 bytes @ 0x4E
  1873  00004F                     	ds	2
  1874  000051                     ___altoft@exp:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x50
  1878  000051                     	ds	1
  1879  000052                     ___altoft@sign:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x51
  1883  000052                     	ds	1
  1884  000053                     ?_floor:
  1885                           	opt stack 0
  1886  000053                     floor@x:
  1887                           	opt stack 0
  1888                           
  1889                           ; 3 bytes @ 0x52
  1890  000053                     	ds	2
  1891  000055                     i2_printf$1529:
  1892                           	opt stack 0
  1893                           
  1894                           ; 3 bytes @ 0x54
  1895  000055                     	ds	1
  1896  000056                     floor@i:
  1897                           	opt stack 0
  1898                           
  1899                           ; 3 bytes @ 0x55
  1900  000056                     	ds	2
  1901  000058                     i2printf@idx:
  1902                           	opt stack 0
  1903                           
  1904                           ; 1 bytes @ 0x57
  1905  000058                     	ds	1
  1906  000059                     floor@expon:
  1907                           	opt stack 0
  1908  000059                     i2printf@ap:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x58
  1912  000059                     	ds	2
  1913  00005B                     ?_exp:
  1914                           	opt stack 0
  1915  00005B                     i2printf@prec:
  1916                           	opt stack 0
  1917  00005B                     exp@x:
  1918                           	opt stack 0
  1919                           
  1920                           ; 3 bytes @ 0x5A
  1921  00005B                     	ds	2
  1922  00005D                     i2printf@tmpval:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0x5C
  1926  00005D                     	ds	1
  1927  00005E                     _exp$1525:
  1928                           	opt stack 0
  1929                           
  1930                           ; 3 bytes @ 0x5D
  1931  00005E                     	ds	3
  1932  000061                     exp@exponent:
  1933                           	opt stack 0
  1934  000061                     i2printf@width:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x60
  1938  000061                     	ds	2
  1939  000063                     exp@sign:
  1940                           	opt stack 0
  1941  000063                     i2printf@exp:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x62
  1945  000063                     	ds	1
  1946  000064                     ?_pow:
  1947                           	opt stack 0
  1948  000064                     pow@x:
  1949                           	opt stack 0
  1950                           
  1951                           ; 3 bytes @ 0x63
  1952  000064                     	ds	1
  1953  000065                     i2printf@val:
  1954                           	opt stack 0
  1955                           
  1956                           ; 4 bytes @ 0x64
  1957  000065                     	ds	2
  1958  000067                     pow@y:
  1959                           	opt stack 0
  1960                           
  1961                           ; 3 bytes @ 0x66
  1962  000067                     	ds	2
  1963  000069                     i2printf@flag:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x68
  1967  000069                     	ds	1
  1968  00006A                     _pow$1523:
  1969                           	opt stack 0
  1970                           
  1971                           ; 3 bytes @ 0x69
  1972  00006A                     	ds	1
  1973  00006B                     i2printf@fval:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x6A
  1977  00006B                     	ds	2
  1978  00006D                     _pow$1524:
  1979                           	opt stack 0
  1980                           
  1981                           ; 3 bytes @ 0x6C
  1982  00006D                     	ds	1
  1983  00006E                     i2printf@c:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x6D
  1987  00006E                     	ds	2
  1988  000070                     pow@sign:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x6F
  1992  000070                     	ds	1
  1993  000071                     pow@yi:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x70
  1997  000071                     	ds	4
  1998  000075                     ?_dec_to_hex:
  1999                           	opt stack 0
  2000  000075                     dec_to_hex@num:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x74
  2004  000075                     	ds	2
  2005  000077                     isr@i:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x76
  2009  000077                     	ds	1
  2010  000078                     _isr$1521:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x77
  2014  000078                     	ds	2
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           
  2022 ;;
  2023 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2024 ;;
  2025 ;; *************** function _main *****************
  2026 ;; Defined at:
  2027 ;;		line 16 in file "main.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:        2 bytes
  2046 ;; Hardware stack levels required when called:   12
  2047 ;; This function calls:
  2048 ;;		_I2C_ColorSens_Init
  2049 ;;		_I2C_Master_Init
  2050 ;;		_bottle_count
  2051 ;;		_bottle_time
  2052 ;;		_date_time
  2053 ;;		_emergencystop
  2054 ;;		_initLCD
  2055 ;;		_operation
  2056 ;;		_operationend
  2057 ;;		_standby
  2058 ;; This function is called by:
  2059 ;;		Startup code after reset
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text0
  2064  00308C                     __ptext0:
  2065                           	opt stack 0
  2066  00308C                     _main:
  2067                           	opt stack 19
  2068                           
  2069                           ;main.c: 23: TRISA = 0b11111011;
  2070                           
  2071                           ;incstack = 0
  2072  00308C  0EFB               	movlw	251
  2073  00308E  6E92               	movwf	3986,c	;volatile
  2074                           
  2075                           ;main.c: 24: TRISB = 0xFF;
  2076  003090  6893               	setf	3987,c	;volatile
  2077                           
  2078                           ;main.c: 25: TRISC = 0x00;
  2079  003092  0E00               	movlw	0
  2080  003094  6E94               	movwf	3988,c	;volatile
  2081                           
  2082                           ;main.c: 26: TRISD = 0x00;
  2083  003096  0E00               	movlw	0
  2084  003098  6E95               	movwf	3989,c	;volatile
  2085                           
  2086                           ;main.c: 27: TRISE = 0x00;
  2087  00309A  0E00               	movlw	0
  2088  00309C  6E96               	movwf	3990,c	;volatile
  2089                           
  2090                           ;main.c: 29: LATA = 0x00;
  2091  00309E  0E00               	movlw	0
  2092  0030A0  6E89               	movwf	3977,c	;volatile
  2093                           
  2094                           ;main.c: 30: LATB = 0x00;
  2095  0030A2  0E00               	movlw	0
  2096  0030A4  6E8A               	movwf	3978,c	;volatile
  2097                           
  2098                           ;main.c: 31: LATC = 0x00;
  2099  0030A6  0E00               	movlw	0
  2100  0030A8  6E8B               	movwf	3979,c	;volatile
  2101                           
  2102                           ;main.c: 32: LATD = 0x00;
  2103  0030AA  0E00               	movlw	0
  2104  0030AC  6E8C               	movwf	3980,c	;volatile
  2105                           
  2106                           ;main.c: 33: LATE = 0x00;
  2107  0030AE  0E00               	movlw	0
  2108  0030B0  6E8D               	movwf	3981,c	;volatile
  2109                           
  2110                           ;main.c: 35: ADCON0 = 0x00;
  2111  0030B2  0E00               	movlw	0
  2112  0030B4  6EC2               	movwf	4034,c	;volatile
  2113                           
  2114                           ;main.c: 36: ADCON1 = 0xFF;
  2115  0030B6  68C1               	setf	4033,c	;volatile
  2116                           
  2117                           ;main.c: 39: GIE = 1;
  2118  0030B8  8EF2               	bsf	intcon,7,c	;volatile
  2119                           
  2120                           ;main.c: 40: PEIE = 1;
  2121  0030BA  8CF2               	bsf	intcon,6,c	;volatile
  2122                           
  2123                           ;main.c: 41: INT1IE = 1;
  2124  0030BC  86F0               	bsf	intcon3,3,c	;volatile
  2125                           
  2126                           ;main.c: 42: INT0IE = 0;
  2127  0030BE  98F2               	bcf	intcon,4,c	;volatile
  2128                           
  2129                           ;main.c: 43: INT2IE = 0;
  2130  0030C0  98F0               	bcf	intcon3,4,c	;volatile
  2131                           
  2132                           ;main.c: 45: nRBPU = 0;
  2133  0030C2  9EF1               	bcf	intcon2,7,c	;volatile
  2134                           
  2135                           ;main.c: 47: initLCD();
  2136  0030C4  ECC4  F02A         	call	_initLCD	;wreg free
  2137                           
  2138                           ;main.c: 48: I2C_Master_Init(10000);
  2139  0030C8  0E10               	movlw	16
  2140  0030CA  0100               	movlb	0	; () banked
  2141  0030CC  6FAB               	movwf	I2C_Master_Init@c& (0+255),b
  2142  0030CE  0E27               	movlw	39
  2143  0030D0  6FAC               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2144  0030D2  0E00               	movlw	0
  2145  0030D4  6FAD               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2146  0030D6  0E00               	movlw	0
  2147  0030D8  6FAE               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2148  0030DA  EC66  F02A         	call	_I2C_Master_Init	;wreg free
  2149                           
  2150                           ;main.c: 49: I2C_ColorSens_Init();
  2151  0030DE  EC83  F021         	call	_I2C_ColorSens_Init	;wreg free
  2152                           
  2153                           ;main.c: 52: TMR0 = 0;
  2154  0030E2  0E00               	movlw	0
  2155  0030E4  6ED7               	movwf	4055,c	;volatile
  2156  0030E6  0E00               	movlw	0
  2157  0030E8  6ED6               	movwf	4054,c	;volatile
  2158                           
  2159                           ;main.c: 53: T08BIT = 0;
  2160  0030EA  9CD5               	bcf	4053,6,c	;volatile
  2161                           
  2162                           ;main.c: 54: T0CS = 0;
  2163  0030EC  9AD5               	bcf	4053,5,c	;volatile
  2164                           
  2165                           ;main.c: 55: PSA = 0;
  2166  0030EE  96D5               	bcf	4053,3,c	;volatile
  2167                           
  2168                           ;main.c: 56: T0PS2 = 1;
  2169  0030F0  84D5               	bsf	4053,2,c	;volatile
  2170                           
  2171                           ;main.c: 57: T0PS1 = 1;
  2172  0030F2  82D5               	bsf	4053,1,c	;volatile
  2173                           
  2174                           ;main.c: 58: T0PS0 = 1;
  2175  0030F4  80D5               	bsf	4053,0,c	;volatile
  2176                           
  2177                           ;main.c: 60: TMR1 = 0;
  2178  0030F6  0E00               	movlw	0
  2179  0030F8  6ECF               	movwf	4047,c	;volatile
  2180  0030FA  0E00               	movlw	0
  2181  0030FC  6ECE               	movwf	4046,c	;volatile
  2182                           
  2183                           ;main.c: 61: servo0_flag = 0;
  2184  0030FE  0E00               	movlw	0
  2185  003100  6E7E               	movwf	_servo0_flag,c
  2186                           
  2187                           ;main.c: 62: servo0_timer = 1;
  2188  003102  0E00               	movlw	0
  2189  003104  0101               	movlb	1	; () banked
  2190  003106  6F80               	movwf	(_servo0_timer+1)& (0+255),b
  2191  003108  0E01               	movlw	1
  2192  00310A  6F7F               	movwf	_servo0_timer& (0+255),b
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;main.c: 63: T1CON = 0b10000001;
  2196  00310C  0E81               	movlw	129
  2197  00310E  6ECD               	movwf	4045,c	;volatile
  2198                           
  2199                           ; BSR set to: 1
  2200                           ;main.c: 64: TMR1ON = 0;
  2201  003110  90CD               	bcf	4045,0,c	;volatile
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 65: TMR1CS = 0;
  2205  003112  92CD               	bcf	4045,1,c	;volatile
  2206                           
  2207                           ; BSR set to: 1
  2208                           ;main.c: 66: T1CKPS1 = 0;
  2209  003114  9ACD               	bcf	4045,5,c	;volatile
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;main.c: 67: T1CKPS0 = 0;
  2213  003116  98CD               	bcf	4045,4,c	;volatile
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;main.c: 68: TMR1IE = 1;
  2217  003118  809D               	bsf	3997,0,c	;volatile
  2218                           
  2219                           ; BSR set to: 1
  2220                           ;main.c: 70: TMR3 = 0;
  2221  00311A  0E00               	movlw	0
  2222  00311C  6EB3               	movwf	4019,c	;volatile
  2223  00311E  0E00               	movlw	0
  2224  003120  6EB2               	movwf	4018,c	;volatile
  2225                           
  2226                           ; BSR set to: 1
  2227                           ;main.c: 71: servo1_flag = 0;
  2228  003122  0E00               	movlw	0
  2229  003124  0100               	movlb	0	; () banked
  2230  003126  6FE1               	movwf	_servo1_flag& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 72: servo1_timer = 1;
  2234  003128  0E00               	movlw	0
  2235  00312A  0101               	movlb	1	; () banked
  2236  00312C  6F82               	movwf	(_servo1_timer+1)& (0+255),b
  2237  00312E  0E01               	movlw	1
  2238  003130  6F81               	movwf	_servo1_timer& (0+255),b
  2239                           
  2240                           ; BSR set to: 1
  2241                           ;main.c: 73: T3CON = 0b1000001;
  2242  003132  0E41               	movlw	65
  2243  003134  6EB1               	movwf	4017,c	;volatile
  2244                           
  2245                           ; BSR set to: 1
  2246                           ;main.c: 74: TMR3ON = 0;
  2247  003136  90B1               	bcf	4017,0,c	;volatile
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;main.c: 75: TMR3CS = 0;
  2251  003138  92B1               	bcf	4017,1,c	;volatile
  2252                           
  2253                           ; BSR set to: 1
  2254                           ;main.c: 76: T3CKPS1 = 0;
  2255  00313A  9AB1               	bcf	4017,5,c	;volatile
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;main.c: 77: T3CKPS0 = 0;
  2259  00313C  98B1               	bcf	4017,4,c	;volatile
  2260                           
  2261                           ; BSR set to: 1
  2262                           ;main.c: 78: TMR3IE = 1;
  2263  00313E  82A0               	bsf	4000,1,c	;volatile
  2264                           
  2265                           ; BSR set to: 1
  2266                           ;main.c: 83: curr_state = STANDBY;
  2267  003140  0E00               	movlw	0
  2268  003142  0100               	movlb	0	; () banked
  2269  003144  6FE0               	movwf	_curr_state& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 86: switch(curr_state){
  2273                           
  2274                           ;main.c: 85: while(1){
  2275  003146  D062               	goto	l8027
  2276  003148                     l7997:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 88: standby();
  2280  003148  EC7D  F02B         	call	_standby	;wreg free
  2281                           
  2282                           ;main.c: 89: _delay((unsigned long)((500)*(10000000/4000.0)));
  2283  00314C  0E07               	movlw	7
  2284  00314E  0101               	movlb	1	; () banked
  2285  003150  6F45               	movwf	(??_main+1)& (0+255),b
  2286  003152  0E58               	movlw	88
  2287  003154  0101               	movlb	1	; () banked
  2288  003156  6F44               	movwf	??_main& (0+255),b
  2289  003158  0E59               	movlw	89
  2290  00315A                     u9247:
  2291  00315A  2EE8               	decfsz	wreg,f,c
  2292  00315C  D7FE               	bra	u9247
  2293  00315E  2F44               	decfsz	??_main& (0+255),f,b
  2294  003160  D7FC               	bra	u9247
  2295  003162  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2296  003164  D7FA               	bra	u9247
  2297  003166  D051               	goto	L4
  2298  003168                     l8001:
  2299                           
  2300                           ;main.c: 92: emergencystop();
  2301  003168  EC7D  F02C         	call	_emergencystop	;wreg free
  2302                           
  2303                           ;main.c: 93: break;
  2304  00316C  D04F               	goto	l8027
  2305  00316E                     l8003:
  2306                           
  2307                           ;main.c: 95: operation();
  2308  00316E  EC7B  F00F         	call	_operation	;wreg free
  2309                           
  2310                           ;main.c: 96: _delay((unsigned long)((2)*(10000000/4000.0)));
  2311  003172  0E07               	movlw	7
  2312  003174  0101               	movlb	1	; () banked
  2313  003176  6F44               	movwf	??_main& (0+255),b
  2314  003178  0E7D               	movlw	125
  2315  00317A                     u9257:
  2316  00317A  2EE8               	decfsz	wreg,f,c
  2317  00317C  D7FE               	bra	u9257
  2318  00317E  2F44               	decfsz	??_main& (0+255),f,b
  2319  003180  D7FC               	bra	u9257
  2320                           
  2321                           ;main.c: 97: _delay((unsigned long)((400)*(10000000/4000000.0)));
  2322  003182  0EC8               	movlw	200
  2323  003184                     u9267:
  2324  003184  D000               	nop2	
  2325  003186  2EE8               	decfsz	wreg,f,c
  2326  003188  D7FD               	bra	u9267
  2327                           
  2328                           ;main.c: 98: break;
  2329  00318A  D040               	goto	l8027
  2330  00318C                     l8009:
  2331                           
  2332                           ;main.c: 100: operationend();
  2333  00318C  EC9D  F02C         	call	_operationend	;wreg free
  2334                           
  2335                           ;main.c: 101: _delay((unsigned long)((500)*(10000000/4000.0)));
  2336  003190  0E07               	movlw	7
  2337  003192  0101               	movlb	1	; () banked
  2338  003194  6F45               	movwf	(??_main+1)& (0+255),b
  2339  003196  0E58               	movlw	88
  2340  003198  0101               	movlb	1	; () banked
  2341  00319A  6F44               	movwf	??_main& (0+255),b
  2342  00319C  0E59               	movlw	89
  2343  00319E                     u9277:
  2344  00319E  2EE8               	decfsz	wreg,f,c
  2345  0031A0  D7FE               	bra	u9277
  2346  0031A2  2F44               	decfsz	??_main& (0+255),f,b
  2347  0031A4  D7FC               	bra	u9277
  2348  0031A6  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2349  0031A8  D7FA               	bra	u9277
  2350  0031AA  D02F               	goto	L4
  2351  0031AC                     l8013:
  2352                           
  2353                           ;main.c: 104: date_time();
  2354  0031AC  ECBF  F024         	call	_date_time	;wreg free
  2355                           
  2356                           ;main.c: 105: _delay((unsigned long)((300)*(10000000/4000.0)));
  2357  0031B0  0E04               	movlw	4
  2358  0031B2  0101               	movlb	1	; () banked
  2359  0031B4  6F45               	movwf	(??_main+1)& (0+255),b
  2360  0031B6  0ECF               	movlw	207
  2361  0031B8  0101               	movlb	1	; () banked
  2362  0031BA  6F44               	movwf	??_main& (0+255),b
  2363  0031BC  0E01               	movlw	1
  2364  0031BE                     u9287:
  2365  0031BE  2EE8               	decfsz	wreg,f,c
  2366  0031C0  D7FE               	bra	u9287
  2367  0031C2  2F44               	decfsz	??_main& (0+255),f,b
  2368  0031C4  D7FC               	bra	u9287
  2369  0031C6  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2370  0031C8  D7FA               	bra	u9287
  2371  0031CA  D01F               	goto	L4
  2372  0031CC                     l8017:
  2373                           
  2374                           ;main.c: 108: bottle_count();
  2375  0031CC  EC01  F021         	call	_bottle_count	;wreg free
  2376                           
  2377                           ;main.c: 109: _delay((unsigned long)((300)*(10000000/4000.0)));
  2378  0031D0  0E04               	movlw	4
  2379  0031D2  0101               	movlb	1	; () banked
  2380  0031D4  6F45               	movwf	(??_main+1)& (0+255),b
  2381  0031D6  0ECF               	movlw	207
  2382  0031D8  0101               	movlb	1	; () banked
  2383  0031DA  6F44               	movwf	??_main& (0+255),b
  2384  0031DC  0E01               	movlw	1
  2385  0031DE                     u9297:
  2386  0031DE  2EE8               	decfsz	wreg,f,c
  2387  0031E0  D7FE               	bra	u9297
  2388  0031E2  2F44               	decfsz	??_main& (0+255),f,b
  2389  0031E4  D7FC               	bra	u9297
  2390  0031E6  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2391  0031E8  D7FA               	bra	u9297
  2392  0031EA  D00F               	goto	L4
  2393  0031EC                     l8021:
  2394                           
  2395                           ;main.c: 112: bottle_time();
  2396  0031EC  ECB6  F02B         	call	_bottle_time	;wreg free
  2397                           
  2398                           ;main.c: 113: _delay((unsigned long)((300)*(10000000/4000.0)));
  2399  0031F0  0E04               	movlw	4
  2400  0031F2  0101               	movlb	1	; () banked
  2401  0031F4  6F45               	movwf	(??_main+1)& (0+255),b
  2402  0031F6  0ECF               	movlw	207
  2403  0031F8  0101               	movlb	1	; () banked
  2404  0031FA  6F44               	movwf	??_main& (0+255),b
  2405  0031FC  0E01               	movlw	1
  2406  0031FE                     u9307:
  2407  0031FE  2EE8               	decfsz	wreg,f,c
  2408  003200  D7FE               	bra	u9307
  2409  003202  2F44               	decfsz	??_main& (0+255),f,b
  2410  003204  D7FC               	bra	u9307
  2411  003206  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2412  003208  D7FA               	bra	u9307
  2413  00320A                     L4:
  2414  00320A  D000               	nop2	
  2415  00320C                     l8027:
  2416  00320C  0100               	movlb	0	; () banked
  2417  00320E  51E0               	movf	_curr_state& (0+255),w,b
  2418                           
  2419                           ; Switch size 1, requested type "space"
  2420                           ; Number of cases is 7, Range of values is 0 to 6
  2421                           ; switch strategies available:
  2422                           ; Name         Instructions Cycles
  2423                           ; simple_byte           22    12 (average)
  2424                           ;	Chosen strategy is simple_byte
  2425  003210  0A00               	xorlw	0	; case 0
  2426  003212  B4D8               	btfsc	status,2,c
  2427  003214  D799               	goto	l7997
  2428  003216  0A01               	xorlw	1	; case 1
  2429  003218  B4D8               	btfsc	status,2,c
  2430  00321A  D7A6               	goto	l8001
  2431  00321C  0A03               	xorlw	3	; case 2
  2432  00321E  B4D8               	btfsc	status,2,c
  2433  003220  D7A6               	goto	l8003
  2434  003222  0A01               	xorlw	1	; case 3
  2435  003224  B4D8               	btfsc	status,2,c
  2436  003226  D7B2               	goto	l8009
  2437  003228  0A07               	xorlw	7	; case 4
  2438  00322A  B4D8               	btfsc	status,2,c
  2439  00322C  D7BF               	goto	l8013
  2440  00322E  0A01               	xorlw	1	; case 5
  2441  003230  B4D8               	btfsc	status,2,c
  2442  003232  D7CC               	goto	l8017
  2443  003234  0A03               	xorlw	3	; case 6
  2444  003236  B4D8               	btfsc	status,2,c
  2445  003238  D7D9               	goto	l8021
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ; BSR set to: 0
  2450  00323A  D7E8               	goto	l8027
  2451  00323C                     __end_of_main:
  2452                           	opt stack 0
  2453                           tblptru	equ	0xFF8
  2454                           tblptrh	equ	0xFF7
  2455                           tblptrl	equ	0xFF6
  2456                           tablat	equ	0xFF5
  2457                           intcon	equ	0xFF2
  2458                           intcon2	equ	0xFF1
  2459                           intcon3	equ	0xFF0
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function _standby *****************
  2465 ;; Defined at:
  2466 ;;		line 256 in file "main.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;Total ram usage:        0 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:   11
  2487 ;; This function calls:
  2488 ;;		_lcdInst
  2489 ;;		_printf
  2490 ;;		_read_colorsensor
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text1
  2497  0056FA                     __ptext1:
  2498                           	opt stack 0
  2499  0056FA                     _standby:
  2500                           	opt stack 19
  2501                           
  2502                           ;main.c: 257: lcdInst(0b10000000);
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;incstack = 0
  2506  0056FA  0E80               	movlw	128
  2507  0056FC  ECC4  F02C         	call	_lcdInst
  2508                           
  2509                           ;main.c: 258: printf("standby          ");
  2510  005700  0E11               	movlw	low STR_6
  2511  005702  0101               	movlb	1	; () banked
  2512  005704  6F1C               	movwf	printf@f& (0+255),b
  2513  005706  0EFF               	movlw	high STR_6
  2514  005708  0101               	movlb	1	; () banked
  2515  00570A  6F1D               	movwf	(printf@f+1)& (0+255),b
  2516  00570C  EC09  F000         	call	_printf	;wreg free
  2517                           
  2518                           ;main.c: 259: lcdInst(0b11000000);
  2519  005710  0EC0               	movlw	192
  2520  005712  ECC4  F02C         	call	_lcdInst
  2521                           
  2522                           ;main.c: 260: read_colorsensor();
  2523  005716  EC02  F022         	call	_read_colorsensor	;wreg free
  2524                           
  2525                           ;main.c: 261: printf("%d      ", color[0]);
  2526  00571A  0EE8               	movlw	low STR_7
  2527  00571C  0101               	movlb	1	; () banked
  2528  00571E  6F1C               	movwf	printf@f& (0+255),b
  2529  005720  0EFF               	movlw	high STR_7
  2530  005722  0101               	movlb	1	; () banked
  2531  005724  6F1D               	movwf	(printf@f+1)& (0+255),b
  2532  005726  C0C2  F11E         	movff	_color,?_printf+2
  2533  00572A  C0C3  F11F         	movff	_color+1,?_printf+3
  2534  00572E  EC09  F000         	call	_printf	;wreg free
  2535  005732  0012               	return	
  2536  005734                     __end_of_standby:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           intcon	equ	0xFF2
  2543                           intcon2	equ	0xFF1
  2544                           intcon3	equ	0xFF0
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _operationend *****************
  2550 ;; Defined at:
  2551 ;;		line 462 in file "main.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:   11
  2572 ;; This function calls:
  2573 ;;		_lcdInst
  2574 ;;		_printf
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text2
  2581  00593A                     __ptext2:
  2582                           	opt stack 0
  2583  00593A                     _operationend:
  2584                           	opt stack 19
  2585                           
  2586                           ;main.c: 463: lcdInst(0b10000000);
  2587                           
  2588                           ;incstack = 0
  2589  00593A  0E80               	movlw	128
  2590  00593C  ECC4  F02C         	call	_lcdInst
  2591                           
  2592                           ;main.c: 464: printf("Operation Done!");
  2593  005940  0EAC               	movlw	low STR_20
  2594  005942  0101               	movlb	1	; () banked
  2595  005944  6F1C               	movwf	printf@f& (0+255),b
  2596  005946  0EFF               	movlw	high STR_20
  2597  005948  0101               	movlb	1	; () banked
  2598  00594A  6F1D               	movwf	(printf@f+1)& (0+255),b
  2599  00594C  EC09  F000         	call	_printf	;wreg free
  2600  005950  0012               	return	
  2601  005952                     __end_of_operationend:
  2602                           	opt stack 0
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           intcon	equ	0xFF2
  2608                           intcon2	equ	0xFF1
  2609                           intcon3	equ	0xFF0
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function _operation *****************
  2615 ;; Defined at:
  2616 ;;		line 368 in file "main.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;Total ram usage:        0 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:   11
  2637 ;; This function calls:
  2638 ;;		___ftdiv
  2639 ;;		___ftge
  2640 ;;		___lwtoft
  2641 ;;		_lcdInst
  2642 ;;		_printf
  2643 ;;		_read_colorsensor
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text3
  2650  001EF6                     __ptext3:
  2651                           	opt stack 0
  2652  001EF6                     _operation:
  2653                           	opt stack 19
  2654                           
  2655                           ;main.c: 386: colorprev[0] = color[0];
  2656                           
  2657                           ;incstack = 0
  2658  001EF6  C0C2  F150         	movff	_color,_colorprev
  2659  001EFA  C0C3  F151         	movff	_color+1,_colorprev+1
  2660                           
  2661                           ;main.c: 387: colorprev[1] = color[1];
  2662  001EFE  C0C4  F152         	movff	_color+2,_colorprev+2
  2663  001F02  C0C5  F153         	movff	_color+3,_colorprev+3
  2664                           
  2665                           ;main.c: 388: colorprev[2] = color[2];
  2666  001F06  C0C6  F154         	movff	_color+4,_colorprev+4
  2667  001F0A  C0C7  F155         	movff	_color+5,_colorprev+5
  2668                           
  2669                           ;main.c: 389: colorprev[3] = color[3];
  2670  001F0E  C0C8  F156         	movff	_color+6,_colorprev+6
  2671  001F12  C0C9  F157         	movff	_color+7,_colorprev+7
  2672                           
  2673                           ;main.c: 391: GIE = 0;
  2674  001F16  9EF2               	bcf	intcon,7,c	;volatile
  2675                           
  2676                           ;main.c: 392: read_colorsensor();
  2677  001F18  EC02  F022         	call	_read_colorsensor	;wreg free
  2678                           
  2679                           ;main.c: 393: if(color[0]>17){
  2680  001F1C  0100               	movlb	0	; () banked
  2681  001F1E  51C3               	movf	(_color+1)& (0+255),w,b
  2682  001F20  E105               	bnz	u8970
  2683  001F22  0E12               	movlw	18
  2684  001F24  0100               	movlb	0	; () banked
  2685  001F26  5DC2               	subwf	_color& (0+255),w,b
  2686  001F28  A0D8               	btfss	status,0,c
  2687  001F2A  D15A               	goto	l7791
  2688  001F2C                     u8970:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 394: flag_bottle = 1;
  2692  001F2C  0E00               	movlw	0
  2693  001F2E  0101               	movlb	1	; () banked
  2694  001F30  6F74               	movwf	(_flag_bottle+1)& (0+255),b
  2695  001F32  0E01               	movlw	1
  2696  001F34  6F73               	movwf	_flag_bottle& (0+255),b
  2697                           
  2698                           ; BSR set to: 1
  2699                           ;main.c: 395: flag_picbug += 1;
  2700  001F36  0100               	movlb	0	; () banked
  2701  001F38  4BDA               	infsnz	_flag_picbug& (0+255),f,b
  2702  001F3A  2BDB               	incf	(_flag_picbug+1)& (0+255),f,b
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main.c: 397: if(color[3]>color[1] && !flag_top_read) flag_eskaC += 1;
  2706  001F3C  0100               	movlb	0	; () banked
  2707  001F3E  51C8               	movf	(_color+6)& (0+255),w,b
  2708  001F40  0100               	movlb	0	; () banked
  2709  001F42  5DC4               	subwf	(_color+2)& (0+255),w,b
  2710  001F44  0100               	movlb	0	; () banked
  2711  001F46  51C9               	movf	(_color+7)& (0+255),w,b
  2712  001F48  0100               	movlb	0	; () banked
  2713  001F4A  59C5               	subwfb	(_color+3)& (0+255),w,b
  2714  001F4C  B0D8               	btfsc	status,0,c
  2715  001F4E  D009               	goto	l7753
  2716                           
  2717                           ; BSR set to: 0
  2718  001F50  0100               	movlb	0	; () banked
  2719  001F52  51DC               	movf	_flag_top_read& (0+255),w,b
  2720  001F54  0100               	movlb	0	; () banked
  2721  001F56  11DD               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2722  001F58  A4D8               	btfss	status,2,c
  2723  001F5A  D003               	goto	l7753
  2724                           
  2725                           ; BSR set to: 0
  2726  001F5C  0101               	movlb	1	; () banked
  2727  001F5E  4B77               	infsnz	_flag_eskaC& (0+255),f,b
  2728  001F60  2B78               	incf	(_flag_eskaC+1)& (0+255),f,b
  2729  001F62                     l7753:
  2730                           
  2731                           ;main.c: 398: if(color[1]>150 || color[2]>150)flag_yopNC = 1;
  2732  001F62  0100               	movlb	0	; () banked
  2733  001F64  51C5               	movf	(_color+3)& (0+255),w,b
  2734  001F66  E10D               	bnz	l7757
  2735  001F68  0E97               	movlw	151
  2736  001F6A  0100               	movlb	0	; () banked
  2737  001F6C  5DC4               	subwf	(_color+2)& (0+255),w,b
  2738  001F6E  B0D8               	btfsc	status,0,c
  2739  001F70  D008               	goto	l7757
  2740                           
  2741                           ; BSR set to: 0
  2742  001F72  0100               	movlb	0	; () banked
  2743  001F74  51C7               	movf	(_color+5)& (0+255),w,b
  2744  001F76  E105               	bnz	l7757
  2745  001F78  0E97               	movlw	151
  2746  001F7A  0100               	movlb	0	; () banked
  2747  001F7C  5DC6               	subwf	(_color+4)& (0+255),w,b
  2748  001F7E  A0D8               	btfss	status,0,c
  2749  001F80  D005               	goto	l7759
  2750  001F82                     l7757:
  2751                           
  2752                           ; BSR set to: 0
  2753  001F82  0E00               	movlw	0
  2754  001F84  0101               	movlb	1	; () banked
  2755  001F86  6F7A               	movwf	(_flag_yopNC+1)& (0+255),b
  2756  001F88  0E01               	movlw	1
  2757  001F8A  6F79               	movwf	_flag_yopNC& (0+255),b
  2758  001F8C                     l7759:
  2759                           
  2760                           ;main.c: 399: if(color[0]>22){
  2761  001F8C  0100               	movlb	0	; () banked
  2762  001F8E  51C3               	movf	(_color+1)& (0+255),w,b
  2763  001F90  E105               	bnz	u9020
  2764  001F92  0E17               	movlw	23
  2765  001F94  0100               	movlb	0	; () banked
  2766  001F96  5DC2               	subwf	_color& (0+255),w,b
  2767  001F98  A0D8               	btfss	status,0,c
  2768  001F9A  D08F               	goto	l7775
  2769  001F9C                     u9020:
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 400: if(!flag_top_read){
  2773  001F9C  0100               	movlb	0	; () banked
  2774  001F9E  51DC               	movf	_flag_top_read& (0+255),w,b
  2775  001FA0  0100               	movlb	0	; () banked
  2776  001FA2  11DD               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2777  001FA4  A4D8               	btfss	status,2,c
  2778  001FA6  D084               	goto	l404
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 401: r = (float) color[1];
  2782  001FA8  C0C4  F0A6         	movff	_color+2,___lwtoft@c
  2783  001FAC  C0C5  F0A7         	movff	_color+3,___lwtoft@c+1
  2784  001FB0  EC1B  F02C         	call	___lwtoft	;wreg free
  2785  001FB4  C0A6  F0D2         	movff	?___lwtoft,_r
  2786  001FB8  C0A7  F0D3         	movff	?___lwtoft+1,_r+1
  2787  001FBC  C0A8  F0D4         	movff	?___lwtoft+2,_r+2
  2788                           
  2789                           ;main.c: 402: b = (float) color[3];
  2790  001FC0  C0C8  F0A6         	movff	_color+6,___lwtoft@c
  2791  001FC4  C0C9  F0A7         	movff	_color+7,___lwtoft@c+1
  2792  001FC8  EC1B  F02C         	call	___lwtoft	;wreg free
  2793  001FCC  C0A6  F165         	movff	?___lwtoft,_b
  2794  001FD0  C0A7  F166         	movff	?___lwtoft+1,_b+1
  2795  001FD4  C0A8  F167         	movff	?___lwtoft+2,_b+2
  2796                           
  2797                           ;main.c: 405: if(r/b > 2 && r>16) bottle_read_top = 1;
  2798  001FD8  0E00               	movlw	0
  2799  001FDA  0100               	movlb	0	; () banked
  2800  001FDC  6FB5               	movwf	___ftge@ff1& (0+255),b
  2801  001FDE  0E00               	movlw	0
  2802  001FE0  0100               	movlb	0	; () banked
  2803  001FE2  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2804  001FE4  0E40               	movlw	64
  2805  001FE6  0100               	movlb	0	; () banked
  2806  001FE8  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2807  001FEA  C165  F0A9         	movff	_b,___ftdiv@f2
  2808  001FEE  C166  F0AA         	movff	_b+1,___ftdiv@f2+1
  2809  001FF2  C167  F0AB         	movff	_b+2,___ftdiv@f2+2
  2810  001FF6  C0D2  F0A6         	movff	_r,___ftdiv@f1
  2811  001FFA  C0D3  F0A7         	movff	_r+1,___ftdiv@f1+1
  2812  001FFE  C0D4  F0A8         	movff	_r+2,___ftdiv@f1+2
  2813  002002  ECF1  F01C         	call	___ftdiv	;wreg free
  2814  002006  C0A6  F0B8         	movff	?___ftdiv,___ftge@ff2
  2815  00200A  C0A7  F0B9         	movff	?___ftdiv+1,___ftge@ff2+1
  2816  00200E  C0A8  F0BA         	movff	?___ftdiv+2,___ftge@ff2+2
  2817  002012  EC91  F025         	call	___ftge	;wreg free
  2818  002016  0100               	movlb	0	; () banked
  2819  002018  B0D8               	btfsc	status,0,c
  2820  00201A  D019               	goto	l7769
  2821                           
  2822                           ; BSR set to: 0
  2823  00201C  0E00               	movlw	0
  2824  00201E  0100               	movlb	0	; () banked
  2825  002020  6FB5               	movwf	___ftge@ff1& (0+255),b
  2826  002022  0E80               	movlw	128
  2827  002024  0100               	movlb	0	; () banked
  2828  002026  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2829  002028  0E41               	movlw	65
  2830  00202A  0100               	movlb	0	; () banked
  2831  00202C  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2832  00202E  C0D2  F0B8         	movff	_r,___ftge@ff2
  2833  002032  C0D3  F0B9         	movff	_r+1,___ftge@ff2+1
  2834  002036  C0D4  F0BA         	movff	_r+2,___ftge@ff2+2
  2835  00203A  EC91  F025         	call	___ftge	;wreg free
  2836  00203E  0100               	movlb	0	; () banked
  2837  002040  B0D8               	btfsc	status,0,c
  2838  002042  D005               	goto	l7769
  2839                           
  2840                           ; BSR set to: 0
  2841  002044  0E00               	movlw	0
  2842  002046  0101               	movlb	1	; () banked
  2843  002048  6F6E               	movwf	(_bottle_read_top+1)& (0+255),b
  2844  00204A  0E01               	movlw	1
  2845  00204C  D02B               	goto	L6
  2846  00204E                     l7769:
  2847                           
  2848                           ;main.c: 406: else if(r/b < 0.75) bottle_read_top = 2;
  2849  00204E  C165  F0A9         	movff	_b,___ftdiv@f2
  2850  002052  C166  F0AA         	movff	_b+1,___ftdiv@f2+1
  2851  002056  C167  F0AB         	movff	_b+2,___ftdiv@f2+2
  2852  00205A  C0D2  F0A6         	movff	_r,___ftdiv@f1
  2853  00205E  C0D3  F0A7         	movff	_r+1,___ftdiv@f1+1
  2854  002062  C0D4  F0A8         	movff	_r+2,___ftdiv@f1+2
  2855  002066  ECF1  F01C         	call	___ftdiv	;wreg free
  2856  00206A  C0A6  F0B5         	movff	?___ftdiv,___ftge@ff1
  2857  00206E  C0A7  F0B6         	movff	?___ftdiv+1,___ftge@ff1+1
  2858  002072  C0A8  F0B7         	movff	?___ftdiv+2,___ftge@ff1+2
  2859  002076  0E00               	movlw	0
  2860  002078  0100               	movlb	0	; () banked
  2861  00207A  6FB8               	movwf	___ftge@ff2& (0+255),b
  2862  00207C  0E40               	movlw	64
  2863  00207E  0100               	movlb	0	; () banked
  2864  002080  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2865  002082  0E3F               	movlw	63
  2866  002084  0100               	movlb	0	; () banked
  2867  002086  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2868  002088  EC91  F025         	call	___ftge	;wreg free
  2869  00208C  0100               	movlb	0	; () banked
  2870  00208E  B0D8               	btfsc	status,0,c
  2871  002090  D005               	goto	l7773
  2872                           
  2873                           ; BSR set to: 0
  2874  002092  0E00               	movlw	0
  2875  002094  0101               	movlb	1	; () banked
  2876  002096  6F6E               	movwf	(_bottle_read_top+1)& (0+255),b
  2877  002098  0E02               	movlw	2
  2878  00209A  D004               	goto	L6
  2879  00209C                     l7773:
  2880                           
  2881                           ;main.c: 407: else bottle_read_top = 0;
  2882  00209C  0E00               	movlw	0
  2883  00209E  0101               	movlb	1	; () banked
  2884  0020A0  6F6E               	movwf	(_bottle_read_top+1)& (0+255),b
  2885  0020A2  0E00               	movlw	0
  2886  0020A4                     L6:
  2887  0020A4  6F6D               	movwf	_bottle_read_top& (0+255),b
  2888                           
  2889                           ; BSR set to: 1
  2890                           ;main.c: 408: flag_top_read = 1;
  2891                           
  2892                           ; BSR set to: 1
  2893  0020A6  0E00               	movlw	0
  2894  0020A8  0100               	movlb	0	; () banked
  2895  0020AA  6FDD               	movwf	(_flag_top_read+1)& (0+255),b
  2896  0020AC  0E01               	movlw	1
  2897  0020AE  6FDC               	movwf	_flag_top_read& (0+255),b
  2898  0020B0                     l404:
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;main.c: 409: }
  2902                           ;main.c: 410: flag_bottle_high = 1;
  2903  0020B0  0E00               	movlw	0
  2904  0020B2  0101               	movlb	1	; () banked
  2905  0020B4  6F76               	movwf	(_flag_bottle_high+1)& (0+255),b
  2906  0020B6  0E01               	movlw	1
  2907  0020B8  D091               	goto	L7
  2908  0020BA                     l7775:
  2909                           
  2910                           ;main.c: 412: else if(color[0]<22){
  2911  0020BA  0100               	movlb	0	; () banked
  2912  0020BC  51C3               	movf	(_color+1)& (0+255),w,b
  2913  0020BE  E104               	bnz	u9071
  2914  0020C0  0E16               	movlw	22
  2915  0020C2  0100               	movlb	0	; () banked
  2916  0020C4  5DC2               	subwf	_color& (0+255),w,b
  2917  0020C6  B0D8               	btfsc	status,0,c
  2918  0020C8                     u9071:
  2919  0020C8  D146               	goto	l7849
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 413: if(flag_bottle_high){
  2923  0020CA  0101               	movlb	1	; () banked
  2924  0020CC  5175               	movf	_flag_bottle_high& (0+255),w,b
  2925  0020CE  0101               	movlb	1	; () banked
  2926  0020D0  1176               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2927  0020D2  B4D8               	btfsc	status,2,c
  2928  0020D4  D140               	goto	l7849
  2929                           
  2930                           ; BSR set to: 1
  2931                           ;main.c: 414: r_p = (float) colorprev[1];
  2932  0020D6  C152  F0A6         	movff	_colorprev+2,___lwtoft@c
  2933  0020DA  C153  F0A7         	movff	_colorprev+3,___lwtoft@c+1
  2934  0020DE  EC1B  F02C         	call	___lwtoft	;wreg free
  2935  0020E2  C0A6  F0D5         	movff	?___lwtoft,_r_p
  2936  0020E6  C0A7  F0D6         	movff	?___lwtoft+1,_r_p+1
  2937  0020EA  C0A8  F0D7         	movff	?___lwtoft+2,_r_p+2
  2938                           
  2939                           ;main.c: 415: b_p = (float) colorprev[3];
  2940  0020EE  C156  F0A6         	movff	_colorprev+6,___lwtoft@c
  2941  0020F2  C157  F0A7         	movff	_colorprev+7,___lwtoft@c+1
  2942  0020F6  EC1B  F02C         	call	___lwtoft	;wreg free
  2943  0020FA  C0A6  F168         	movff	?___lwtoft,_b_p
  2944  0020FE  C0A7  F169         	movff	?___lwtoft+1,_b_p+1
  2945  002102  C0A8  F16A         	movff	?___lwtoft+2,_b_p+2
  2946                           
  2947                           ;main.c: 416: if(r_p/b_p > 3.2 && r_p>18) bottle_read_bot = 1;
  2948  002106  0ECD               	movlw	205
  2949  002108  0100               	movlb	0	; () banked
  2950  00210A  6FB5               	movwf	___ftge@ff1& (0+255),b
  2951  00210C  0E4C               	movlw	76
  2952  00210E  0100               	movlb	0	; () banked
  2953  002110  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2954  002112  0E40               	movlw	64
  2955  002114  0100               	movlb	0	; () banked
  2956  002116  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2957  002118  C168  F0A9         	movff	_b_p,___ftdiv@f2
  2958  00211C  C169  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  2959  002120  C16A  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  2960  002124  C0D5  F0A6         	movff	_r_p,___ftdiv@f1
  2961  002128  C0D6  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  2962  00212C  C0D7  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  2963  002130  ECF1  F01C         	call	___ftdiv	;wreg free
  2964  002134  C0A6  F0B8         	movff	?___ftdiv,___ftge@ff2
  2965  002138  C0A7  F0B9         	movff	?___ftdiv+1,___ftge@ff2+1
  2966  00213C  C0A8  F0BA         	movff	?___ftdiv+2,___ftge@ff2+2
  2967  002140  EC91  F025         	call	___ftge	;wreg free
  2968  002144  0100               	movlb	0	; () banked
  2969  002146  B0D8               	btfsc	status,0,c
  2970  002148  D019               	goto	l7785
  2971                           
  2972                           ; BSR set to: 0
  2973  00214A  0E00               	movlw	0
  2974  00214C  0100               	movlb	0	; () banked
  2975  00214E  6FB5               	movwf	___ftge@ff1& (0+255),b
  2976  002150  0E90               	movlw	144
  2977  002152  0100               	movlb	0	; () banked
  2978  002154  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2979  002156  0E41               	movlw	65
  2980  002158  0100               	movlb	0	; () banked
  2981  00215A  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2982  00215C  C0D5  F0B8         	movff	_r_p,___ftge@ff2
  2983  002160  C0D6  F0B9         	movff	_r_p+1,___ftge@ff2+1
  2984  002164  C0D7  F0BA         	movff	_r_p+2,___ftge@ff2+2
  2985  002168  EC91  F025         	call	___ftge	;wreg free
  2986  00216C  0100               	movlb	0	; () banked
  2987  00216E  B0D8               	btfsc	status,0,c
  2988  002170  D005               	goto	l7785
  2989                           
  2990                           ; BSR set to: 0
  2991  002172  0E00               	movlw	0
  2992  002174  0101               	movlb	1	; () banked
  2993  002176  6F6C               	movwf	(_bottle_read_bot+1)& (0+255),b
  2994  002178  0E01               	movlw	1
  2995  00217A  D02B               	goto	L9
  2996  00217C                     l7785:
  2997                           
  2998                           ;main.c: 417: else if(r_p/b_p < 0.75) bottle_read_bot = 2;
  2999  00217C  C168  F0A9         	movff	_b_p,___ftdiv@f2
  3000  002180  C169  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  3001  002184  C16A  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  3002  002188  C0D5  F0A6         	movff	_r_p,___ftdiv@f1
  3003  00218C  C0D6  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  3004  002190  C0D7  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  3005  002194  ECF1  F01C         	call	___ftdiv	;wreg free
  3006  002198  C0A6  F0B5         	movff	?___ftdiv,___ftge@ff1
  3007  00219C  C0A7  F0B6         	movff	?___ftdiv+1,___ftge@ff1+1
  3008  0021A0  C0A8  F0B7         	movff	?___ftdiv+2,___ftge@ff1+2
  3009  0021A4  0E00               	movlw	0
  3010  0021A6  0100               	movlb	0	; () banked
  3011  0021A8  6FB8               	movwf	___ftge@ff2& (0+255),b
  3012  0021AA  0E40               	movlw	64
  3013  0021AC  0100               	movlb	0	; () banked
  3014  0021AE  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  3015  0021B0  0E3F               	movlw	63
  3016  0021B2  0100               	movlb	0	; () banked
  3017  0021B4  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  3018  0021B6  EC91  F025         	call	___ftge	;wreg free
  3019  0021BA  0100               	movlb	0	; () banked
  3020  0021BC  B0D8               	btfsc	status,0,c
  3021  0021BE  D005               	goto	l7789
  3022                           
  3023                           ; BSR set to: 0
  3024  0021C0  0E00               	movlw	0
  3025  0021C2  0101               	movlb	1	; () banked
  3026  0021C4  6F6C               	movwf	(_bottle_read_bot+1)& (0+255),b
  3027  0021C6  0E02               	movlw	2
  3028  0021C8  D004               	goto	L9
  3029  0021CA                     l7789:
  3030                           
  3031                           ;main.c: 418: else bottle_read_bot = 0;
  3032  0021CA  0E00               	movlw	0
  3033  0021CC  0101               	movlb	1	; () banked
  3034  0021CE  6F6C               	movwf	(_bottle_read_bot+1)& (0+255),b
  3035  0021D0  0E00               	movlw	0
  3036  0021D2                     L9:
  3037  0021D2  6F6B               	movwf	_bottle_read_bot& (0+255),b
  3038                           
  3039                           ; BSR set to: 1
  3040                           ;main.c: 419: flag_bottle_high = 0;
  3041                           
  3042                           ; BSR set to: 1
  3043  0021D4  0E00               	movlw	0
  3044  0021D6  0101               	movlb	1	; () banked
  3045  0021D8  6F76               	movwf	(_flag_bottle_high+1)& (0+255),b
  3046  0021DA  0E00               	movlw	0
  3047  0021DC                     L7:
  3048  0021DC  6F75               	movwf	_flag_bottle_high& (0+255),b
  3049                           
  3050                           ; BSR set to: 1
  3051                           ;main.c: 420: }
  3052                           ;main.c: 421: }
  3053                           ;main.c: 422: }
  3054                           
  3055                           ; BSR set to: 1
  3056                           
  3057                           ; BSR set to: 1
  3058  0021DE  D0BB               	goto	l7849
  3059  0021E0                     l7791:
  3060                           
  3061                           ;main.c: 423: else if(flag_bottle && flag_picbug > 22){
  3062  0021E0  0101               	movlb	1	; () banked
  3063  0021E2  5173               	movf	_flag_bottle& (0+255),w,b
  3064  0021E4  0101               	movlb	1	; () banked
  3065  0021E6  1174               	iorwf	(_flag_bottle+1)& (0+255),w,b
  3066  0021E8  B4D8               	btfsc	status,2,c
  3067  0021EA  D09C               	goto	l7843
  3068                           
  3069                           ; BSR set to: 1
  3070  0021EC  0100               	movlb	0	; () banked
  3071  0021EE  BFDB               	btfsc	(_flag_picbug+1)& (0+255),7,b
  3072  0021F0  D099               	goto	l7843
  3073  0021F2  0100               	movlb	0	; () banked
  3074  0021F4  51DB               	movf	(_flag_picbug+1)& (0+255),w,b
  3075  0021F6  E105               	bnz	u9130
  3076  0021F8  0E17               	movlw	23
  3077  0021FA  0100               	movlb	0	; () banked
  3078  0021FC  5DDA               	subwf	_flag_picbug& (0+255),w,b
  3079  0021FE  A0D8               	btfss	status,0,c
  3080  002200  D091               	goto	l7843
  3081  002202                     u9130:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 424: flag_picbug = 0;
  3085  002202  0E00               	movlw	0
  3086  002204  0100               	movlb	0	; () banked
  3087  002206  6FDB               	movwf	(_flag_picbug+1)& (0+255),b
  3088  002208  0E00               	movlw	0
  3089  00220A  6FDA               	movwf	_flag_picbug& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;main.c: 425: bottle_count_array[0] += 1;
  3093  00220C  0101               	movlb	1	; () banked
  3094  00220E  4B46               	infsnz	_bottle_count_array& (0+255),f,b
  3095  002210  2B47               	incf	(_bottle_count_array+1)& (0+255),f,b
  3096                           
  3097                           ; BSR set to: 1
  3098                           ;main.c: 426: TMR0 = 0;
  3099  002212  0E00               	movlw	0
  3100  002214  6ED7               	movwf	4055,c	;volatile
  3101  002216  0E00               	movlw	0
  3102  002218  6ED6               	movwf	4054,c	;volatile
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;main.c: 427: if(bottle_read_top == 2 || bottle_read_bot == 2 || flag_eskaC>1){
  3106  00221A  0E02               	movlw	2
  3107  00221C  0101               	movlb	1	; () banked
  3108  00221E  196D               	xorwf	_bottle_read_top& (0+255),w,b
  3109  002220  0101               	movlb	1	; () banked
  3110  002222  116E               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  3111  002224  B4D8               	btfsc	status,2,c
  3112  002226  D012               	goto	l7807
  3113                           
  3114                           ; BSR set to: 1
  3115  002228  0E02               	movlw	2
  3116  00222A  0101               	movlb	1	; () banked
  3117  00222C  196B               	xorwf	_bottle_read_bot& (0+255),w,b
  3118  00222E  0101               	movlb	1	; () banked
  3119  002230  116C               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  3120  002232  B4D8               	btfsc	status,2,c
  3121  002234  D00B               	goto	l7807
  3122                           
  3123                           ; BSR set to: 1
  3124  002236  0101               	movlb	1	; () banked
  3125  002238  BF78               	btfsc	(_flag_eskaC+1)& (0+255),7,b
  3126  00223A  D010               	goto	l7811
  3127  00223C  0101               	movlb	1	; () banked
  3128  00223E  5178               	movf	(_flag_eskaC+1)& (0+255),w,b
  3129  002240  E105               	bnz	l7807
  3130  002242  0E02               	movlw	2
  3131  002244  0101               	movlb	1	; () banked
  3132  002246  5D77               	subwf	_flag_eskaC& (0+255),w,b
  3133  002248  A0D8               	btfss	status,0,c
  3134  00224A  D008               	goto	l7811
  3135  00224C                     l7807:
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 428: bottle_count_array[3] += 1;
  3139  00224C  0101               	movlb	1	; () banked
  3140  00224E  4B4C               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  3141  002250  2B4D               	incf	(_bottle_count_array+7)& (0+255),f,b
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;main.c: 429: servo1_timer = 1;
  3145  002252  0E00               	movlw	0
  3146  002254  0101               	movlb	1	; () banked
  3147  002256  6F82               	movwf	(_servo1_timer+1)& (0+255),b
  3148  002258  0E01               	movlw	1
  3149  00225A  D02A               	goto	L10
  3150  00225C                     l7811:
  3151                           
  3152                           ; BSR set to: 1
  3153                           ;main.c: 431: else if(bottle_read_top == 1 || bottle_read_bot == 1){
  3154  00225C  0101               	movlb	1	; () banked
  3155  00225E  056D               	decf	_bottle_read_top& (0+255),w,b
  3156  002260  0101               	movlb	1	; () banked
  3157  002262  116E               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  3158  002264  B4D8               	btfsc	status,2,c
  3159  002266  D006               	goto	l7815
  3160                           
  3161                           ; BSR set to: 1
  3162  002268  0101               	movlb	1	; () banked
  3163  00226A  056B               	decf	_bottle_read_bot& (0+255),w,b
  3164  00226C  0101               	movlb	1	; () banked
  3165  00226E  116C               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  3166  002270  A4D8               	btfss	status,2,c
  3167  002272  D008               	goto	l7819
  3168  002274                     l7815:
  3169                           
  3170                           ; BSR set to: 1
  3171                           ;main.c: 432: bottle_count_array[1] += 1;
  3172  002274  0101               	movlb	1	; () banked
  3173  002276  4B48               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  3174  002278  2B49               	incf	(_bottle_count_array+3)& (0+255),f,b
  3175                           
  3176                           ; BSR set to: 1
  3177                           ;main.c: 433: servo0_timer = 1;
  3178  00227A  0E00               	movlw	0
  3179  00227C  0101               	movlb	1	; () banked
  3180  00227E  6F80               	movwf	(_servo0_timer+1)& (0+255),b
  3181  002280  0E01               	movlw	1
  3182  002282  D00D               	goto	L11
  3183  002284                     l7819:
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;main.c: 436: else if(flag_yopNC){
  3187  002284  0101               	movlb	1	; () banked
  3188  002286  5179               	movf	_flag_yopNC& (0+255),w,b
  3189  002288  0101               	movlb	1	; () banked
  3190  00228A  117A               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  3191  00228C  B4D8               	btfsc	status,2,c
  3192  00228E  D009               	goto	l7825
  3193                           
  3194                           ; BSR set to: 1
  3195                           ;main.c: 437: bottle_count_array[2] += 1;
  3196  002290  0101               	movlb	1	; () banked
  3197  002292  4B4A               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  3198  002294  2B4B               	incf	(_bottle_count_array+5)& (0+255),f,b
  3199                           
  3200                           ; BSR set to: 1
  3201                           ;main.c: 438: servo0_timer = 0;
  3202  002296  0E00               	movlw	0
  3203  002298  0101               	movlb	1	; () banked
  3204  00229A  6F80               	movwf	(_servo0_timer+1)& (0+255),b
  3205  00229C  0E00               	movlw	0
  3206  00229E                     L11:
  3207  00229E  6F7F               	movwf	_servo0_timer& (0+255),b
  3208                           
  3209                           ;main.c: 439: }
  3210  0022A0  D008               	goto	l7829
  3211  0022A2                     l7825:
  3212                           
  3213                           ; BSR set to: 1
  3214                           ;main.c: 440: else{
  3215                           ;main.c: 441: bottle_count_array[4] += 1;
  3216  0022A2  0101               	movlb	1	; () banked
  3217  0022A4  4B4E               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  3218  0022A6  2B4F               	incf	(_bottle_count_array+9)& (0+255),f,b
  3219                           
  3220                           ; BSR set to: 1
  3221                           ;main.c: 442: servo1_timer = 0;
  3222  0022A8  0E00               	movlw	0
  3223  0022AA  0101               	movlb	1	; () banked
  3224  0022AC  6F82               	movwf	(_servo1_timer+1)& (0+255),b
  3225  0022AE  0E00               	movlw	0
  3226  0022B0                     L10:
  3227  0022B0  6F81               	movwf	_servo1_timer& (0+255),b
  3228  0022B2                     l7829:
  3229                           
  3230                           ; BSR set to: 1
  3231                           ;main.c: 443: }
  3232                           ;main.c: 444: flag_bottle = 0;
  3233  0022B2  0E00               	movlw	0
  3234  0022B4  0101               	movlb	1	; () banked
  3235  0022B6  6F74               	movwf	(_flag_bottle+1)& (0+255),b
  3236  0022B8  0E00               	movlw	0
  3237  0022BA  6F73               	movwf	_flag_bottle& (0+255),b
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;main.c: 445: flag_bottle_high = 0;
  3241  0022BC  0E00               	movlw	0
  3242  0022BE  0101               	movlb	1	; () banked
  3243  0022C0  6F76               	movwf	(_flag_bottle_high+1)& (0+255),b
  3244  0022C2  0E00               	movlw	0
  3245  0022C4  6F75               	movwf	_flag_bottle_high& (0+255),b
  3246                           
  3247                           ; BSR set to: 1
  3248                           ;main.c: 446: flag_top_read = 0;
  3249  0022C6  0E00               	movlw	0
  3250  0022C8  0100               	movlb	0	; () banked
  3251  0022CA  6FDD               	movwf	(_flag_top_read+1)& (0+255),b
  3252  0022CC  0E00               	movlw	0
  3253  0022CE  6FDC               	movwf	_flag_top_read& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 447: flag_yopNC = 0;
  3257  0022D0  0E00               	movlw	0
  3258  0022D2  0101               	movlb	1	; () banked
  3259  0022D4  6F7A               	movwf	(_flag_yopNC+1)& (0+255),b
  3260  0022D6  0E00               	movlw	0
  3261  0022D8  6F79               	movwf	_flag_yopNC& (0+255),b
  3262                           
  3263                           ; BSR set to: 1
  3264                           ;main.c: 448: lcdInst(0b10000000);
  3265  0022DA  0E80               	movlw	128
  3266  0022DC  ECC4  F02C         	call	_lcdInst
  3267                           
  3268                           ;main.c: 451: flag_eskaC = 0;
  3269  0022E0  0E00               	movlw	0
  3270  0022E2  0101               	movlb	1	; () banked
  3271  0022E4  6F78               	movwf	(_flag_eskaC+1)& (0+255),b
  3272  0022E6  0E00               	movlw	0
  3273  0022E8  6F77               	movwf	_flag_eskaC& (0+255),b
  3274                           
  3275                           ; BSR set to: 1
  3276                           ;main.c: 454: printf("%f", r_p/b_p);
  3277  0022EA  0EFC               	movlw	low STR_19
  3278  0022EC  0101               	movlb	1	; () banked
  3279  0022EE  6F1C               	movwf	printf@f& (0+255),b
  3280  0022F0  0EFF               	movlw	high STR_19
  3281  0022F2  0101               	movlb	1	; () banked
  3282  0022F4  6F1D               	movwf	(printf@f+1)& (0+255),b
  3283  0022F6  C0D5  F0A6         	movff	_r_p,___ftdiv@f1
  3284  0022FA  C0D6  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  3285  0022FE  C0D7  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  3286  002302  C168  F0A9         	movff	_b_p,___ftdiv@f2
  3287  002306  C169  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  3288  00230A  C16A  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  3289  00230E  ECF1  F01C         	call	___ftdiv	;wreg free
  3290  002312  C0A6  F11E         	movff	?___ftdiv,?_printf+2
  3291  002316  C0A7  F11F         	movff	?___ftdiv+1,?_printf+3
  3292  00231A  C0A8  F120         	movff	?___ftdiv+2,?_printf+4
  3293  00231E  EC09  F000         	call	_printf	;wreg free
  3294                           
  3295                           ;main.c: 456: }
  3296  002322  D019               	goto	l7849
  3297  002324                     l7843:
  3298                           
  3299                           ;main.c: 457: else if(flag_picbug < 4 && flag_picbug > 0) flag_picbug -= 1;
  3300  002324  0100               	movlb	0	; () banked
  3301  002326  BFDB               	btfsc	(_flag_picbug+1)& (0+255),7,b
  3302  002328  D008               	goto	l7845
  3303  00232A  0100               	movlb	0	; () banked
  3304  00232C  51DB               	movf	(_flag_picbug+1)& (0+255),w,b
  3305  00232E  E113               	bnz	l7849
  3306  002330  0E04               	movlw	4
  3307  002332  0100               	movlb	0	; () banked
  3308  002334  5DDA               	subwf	_flag_picbug& (0+255),w,b
  3309  002336  B0D8               	btfsc	status,0,c
  3310  002338  D00E               	goto	l7849
  3311  00233A                     l7845:
  3312                           
  3313                           ; BSR set to: 0
  3314  00233A  0100               	movlb	0	; () banked
  3315  00233C  BFDB               	btfsc	(_flag_picbug+1)& (0+255),7,b
  3316  00233E  D00B               	goto	l7849
  3317  002340  0100               	movlb	0	; () banked
  3318  002342  51DB               	movf	(_flag_picbug+1)& (0+255),w,b
  3319  002344  E104               	bnz	u9210
  3320  002346  0100               	movlb	0	; () banked
  3321  002348  05DA               	decf	_flag_picbug& (0+255),w,b
  3322  00234A  A0D8               	btfss	status,0,c
  3323  00234C  D004               	goto	l7849
  3324  00234E                     u9210:
  3325                           
  3326                           ; BSR set to: 0
  3327  00234E  0100               	movlb	0	; () banked
  3328  002350  07DA               	decf	_flag_picbug& (0+255),f,b
  3329  002352  A0D8               	btfss	status,0,c
  3330  002354  07DB               	decf	(_flag_picbug+1)& (0+255),f,b
  3331  002356                     l7849:
  3332                           
  3333                           ;main.c: 458: GIE = 1;
  3334  002356  8EF2               	bsf	intcon,7,c	;volatile
  3335  002358  0012               	return	
  3336  00235A                     __end_of_operation:
  3337                           	opt stack 0
  3338                           tblptru	equ	0xFF8
  3339                           tblptrh	equ	0xFF7
  3340                           tblptrl	equ	0xFF6
  3341                           tablat	equ	0xFF5
  3342                           intcon	equ	0xFF2
  3343                           intcon2	equ	0xFF1
  3344                           intcon3	equ	0xFF0
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _read_colorsensor *****************
  3350 ;; Defined at:
  3351 ;;		line 500 in file "main.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2, status,0, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;Total ram usage:        2 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    9
  3372 ;; This function calls:
  3373 ;;		_I2C_Master_Read
  3374 ;;		_I2C_Master_Start
  3375 ;;		_I2C_Master_Stop
  3376 ;;		_I2C_Master_Write
  3377 ;; This function is called by:
  3378 ;;		_standby
  3379 ;;		_operation
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text4
  3384  004404                     __ptext4:
  3385                           	opt stack 0
  3386  004404                     _read_colorsensor:
  3387                           	opt stack 20
  3388                           
  3389                           ;main.c: 519: I2C_Master_Start();
  3390                           
  3391                           ;incstack = 0
  3392  004404  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
  3393                           
  3394                           ;main.c: 520: I2C_Master_Write(0b01010011);
  3395  004408  0E00               	movlw	0
  3396  00440A  0100               	movlb	0	; () banked
  3397  00440C  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3398  00440E  0E53               	movlw	83
  3399  004410  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  3400  004412  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
  3401                           
  3402                           ;main.c: 521: color_low[0] = I2C_Master_Read(1);
  3403  004416  0E01               	movlw	1
  3404  004418  EC04  F02C         	call	_I2C_Master_Read
  3405  00441C  0100               	movlb	0	; () banked
  3406  00441E  6FCE               	movwf	_color_low& (0+255),b
  3407                           
  3408                           ;main.c: 522: color_high[0] = I2C_Master_Read(1);
  3409  004420  0E01               	movlw	1
  3410  004422  EC04  F02C         	call	_I2C_Master_Read
  3411  004426  0100               	movlb	0	; () banked
  3412  004428  6FCA               	movwf	_color_high& (0+255),b
  3413                           
  3414                           ;main.c: 523: color_low[1] = I2C_Master_Read(1);
  3415  00442A  0E01               	movlw	1
  3416  00442C  EC04  F02C         	call	_I2C_Master_Read
  3417  004430  0100               	movlb	0	; () banked
  3418  004432  6FCF               	movwf	(_color_low+1)& (0+255),b
  3419                           
  3420                           ;main.c: 524: color_high[1] = I2C_Master_Read(1);
  3421  004434  0E01               	movlw	1
  3422  004436  EC04  F02C         	call	_I2C_Master_Read
  3423  00443A  0100               	movlb	0	; () banked
  3424  00443C  6FCB               	movwf	(_color_high+1)& (0+255),b
  3425                           
  3426                           ;main.c: 525: color_low[2] = I2C_Master_Read(1);
  3427  00443E  0E01               	movlw	1
  3428  004440  EC04  F02C         	call	_I2C_Master_Read
  3429  004444  0100               	movlb	0	; () banked
  3430  004446  6FD0               	movwf	(_color_low+2)& (0+255),b
  3431                           
  3432                           ;main.c: 526: color_high[2] = I2C_Master_Read(1);
  3433  004448  0E01               	movlw	1
  3434  00444A  EC04  F02C         	call	_I2C_Master_Read
  3435  00444E  0100               	movlb	0	; () banked
  3436  004450  6FCC               	movwf	(_color_high+2)& (0+255),b
  3437                           
  3438                           ;main.c: 527: color_low[3] = I2C_Master_Read(1);
  3439  004452  0E01               	movlw	1
  3440  004454  EC04  F02C         	call	_I2C_Master_Read
  3441  004458  0100               	movlb	0	; () banked
  3442  00445A  6FD1               	movwf	(_color_low+3)& (0+255),b
  3443                           
  3444                           ;main.c: 528: color_high[3] = I2C_Master_Read(0);
  3445  00445C  0E00               	movlw	0
  3446  00445E  EC04  F02C         	call	_I2C_Master_Read
  3447  004462  0100               	movlb	0	; () banked
  3448  004464  6FCD               	movwf	(_color_high+3)& (0+255),b
  3449                           
  3450                           ;main.c: 529: I2C_Master_Stop();
  3451  004466  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
  3452                           
  3453                           ;main.c: 530: color[0] = (color_high[0] << 8)|(color_low[0]);
  3454  00446A  0100               	movlb	0	; () banked
  3455  00446C  51CE               	movf	_color_low& (0+255),w,b
  3456  00446E  C0CA  F0A1         	movff	_color_high,??_read_colorsensor
  3457  004472  0100               	movlb	0	; () banked
  3458  004474  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3459  004476  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3460  00447A  0100               	movlb	0	; () banked
  3461  00447C  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3462  00447E  0100               	movlb	0	; () banked
  3463  004480  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3464  004482  0100               	movlb	0	; () banked
  3465  004484  6FC2               	movwf	_color& (0+255),b
  3466  004486  0100               	movlb	0	; () banked
  3467  004488  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3468  00448A  0100               	movlb	0	; () banked
  3469  00448C  6FC3               	movwf	(_color+1)& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 531: color[1] = (color_high[1] << 8)|(color_low[1]);
  3473  00448E  0100               	movlb	0	; () banked
  3474  004490  51CF               	movf	(_color_low+1)& (0+255),w,b
  3475  004492  C0CB  F0A1         	movff	_color_high+1,??_read_colorsensor
  3476  004496  0100               	movlb	0	; () banked
  3477  004498  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3478  00449A  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3479  00449E  0100               	movlb	0	; () banked
  3480  0044A0  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3481  0044A2  0100               	movlb	0	; () banked
  3482  0044A4  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3483  0044A6  0100               	movlb	0	; () banked
  3484  0044A8  6FC4               	movwf	(_color+2)& (0+255),b
  3485  0044AA  0100               	movlb	0	; () banked
  3486  0044AC  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3487  0044AE  0100               	movlb	0	; () banked
  3488  0044B0  6FC5               	movwf	(_color+3)& (0+255),b
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;main.c: 532: color[2] = (color_high[2] << 8)|(color_low[2]);
  3492  0044B2  0100               	movlb	0	; () banked
  3493  0044B4  51D0               	movf	(_color_low+2)& (0+255),w,b
  3494  0044B6  C0CC  F0A1         	movff	_color_high+2,??_read_colorsensor
  3495  0044BA  0100               	movlb	0	; () banked
  3496  0044BC  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3497  0044BE  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3498  0044C2  0100               	movlb	0	; () banked
  3499  0044C4  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3500  0044C6  0100               	movlb	0	; () banked
  3501  0044C8  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3502  0044CA  0100               	movlb	0	; () banked
  3503  0044CC  6FC6               	movwf	(_color+4)& (0+255),b
  3504  0044CE  0100               	movlb	0	; () banked
  3505  0044D0  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3506  0044D2  0100               	movlb	0	; () banked
  3507  0044D4  6FC7               	movwf	(_color+5)& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 533: color[3] = (color_high[3] << 8)|(color_low[3]);
  3511  0044D6  0100               	movlb	0	; () banked
  3512  0044D8  51D1               	movf	(_color_low+3)& (0+255),w,b
  3513  0044DA  C0CD  F0A1         	movff	_color_high+3,??_read_colorsensor
  3514  0044DE  0100               	movlb	0	; () banked
  3515  0044E0  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3516  0044E2  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3517  0044E6  0100               	movlb	0	; () banked
  3518  0044E8  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3519  0044EA  0100               	movlb	0	; () banked
  3520  0044EC  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3521  0044EE  0100               	movlb	0	; () banked
  3522  0044F0  6FC8               	movwf	(_color+6)& (0+255),b
  3523  0044F2  0100               	movlb	0	; () banked
  3524  0044F4  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3525  0044F6  0100               	movlb	0	; () banked
  3526  0044F8  6FC9               	movwf	(_color+7)& (0+255),b
  3527  0044FA  0012               	return	
  3528  0044FC                     __end_of_read_colorsensor:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           intcon	equ	0xFF2
  3535                           intcon2	equ	0xFF1
  3536                           intcon3	equ	0xFF0
  3537                           postinc0	equ	0xFEE
  3538                           wreg	equ	0xFE8
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function ___lwtoft *****************
  3542 ;; Defined at:
  3543 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwtoft.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  c               2   38[BANK0 ] unsigned int 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  3   38[BANK0 ] float 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:        3 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    8
  3564 ;; This function calls:
  3565 ;;		___ftpack
  3566 ;; This function is called by:
  3567 ;;		_operation
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text5
  3572  005836                     __ptext5:
  3573                           	opt stack 0
  3574  005836                     ___lwtoft:
  3575                           	opt stack 21
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;incstack = 0
  3579  005836  C0A6  F09E         	movff	___lwtoft@c,___ftpack@arg
  3580  00583A  C0A7  F09F         	movff	___lwtoft@c+1,___ftpack@arg+1
  3581  00583E  0100               	movlb	0	; () banked
  3582  005840  6BA0               	clrf	(___ftpack@arg+2)& (0+255),b
  3583  005842  0E8E               	movlw	142
  3584  005844  0100               	movlb	0	; () banked
  3585  005846  6FA1               	movwf	___ftpack@exp& (0+255),b
  3586  005848  0E00               	movlw	0
  3587  00584A  0100               	movlb	0	; () banked
  3588  00584C  6FA2               	movwf	___ftpack@sign& (0+255),b
  3589  00584E  ECF5  F01F         	call	___ftpack	;wreg free
  3590  005852  C09E  F0A6         	movff	?___ftpack,?___lwtoft
  3591  005856  C09F  F0A7         	movff	?___ftpack+1,?___lwtoft+1
  3592  00585A  C0A0  F0A8         	movff	?___ftpack+2,?___lwtoft+2
  3593  00585E  0012               	return	
  3594  005860                     __end_of___lwtoft:
  3595                           	opt stack 0
  3596                           tblptru	equ	0xFF8
  3597                           tblptrh	equ	0xFF7
  3598                           tblptrl	equ	0xFF6
  3599                           tablat	equ	0xFF5
  3600                           intcon	equ	0xFF2
  3601                           intcon2	equ	0xFF1
  3602                           intcon3	equ	0xFF0
  3603                           postinc0	equ	0xFEE
  3604                           wreg	equ	0xFE8
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function ___ftdiv *****************
  3608 ;; Defined at:
  3609 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  f1              3   38[BANK0 ] float 
  3612 ;;  f2              3   41[BANK0 ] float 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  f3              3   48[BANK0 ] float 
  3615 ;;  sign            1   52[BANK0 ] unsigned char 
  3616 ;;  exp             1   51[BANK0 ] unsigned char 
  3617 ;;  cntr            1   47[BANK0 ] unsigned char 
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  3   38[BANK0 ] float 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:       15 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    8
  3634 ;; This function calls:
  3635 ;;		___ftpack
  3636 ;; This function is called by:
  3637 ;;		_operation
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text6
  3642  0039E2                     __ptext6:
  3643                           	opt stack 0
  3644  0039E2                     ___ftdiv:
  3645                           	opt stack 21
  3646                           
  3647                           ;incstack = 0
  3648  0039E2  C0A8  F0AC         	movff	___ftdiv@f1+2,??___ftdiv
  3649  0039E6  0100               	movlb	0	; () banked
  3650  0039E8  6BAD               	clrf	(??___ftdiv+1)& (0+255),b
  3651  0039EA  6BAE               	clrf	(??___ftdiv+2)& (0+255),b
  3652  0039EC  0100               	movlb	0	; () banked
  3653  0039EE  35A7               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3654  0039F0  0100               	movlb	0	; () banked
  3655  0039F2  37AC               	rlcf	??___ftdiv& (0+255),f,b
  3656  0039F4  E301               	bnc	u8921
  3657  0039F6  81AD               	bsf	(??___ftdiv+1)& (0+255),0,b
  3658  0039F8                     u8921:
  3659  0039F8  0100               	movlb	0	; () banked
  3660  0039FA  51AC               	movf	??___ftdiv& (0+255),w,b
  3661  0039FC  0100               	movlb	0	; () banked
  3662  0039FE  6FB3               	movwf	___ftdiv@exp& (0+255),b
  3663  003A00  0100               	movlb	0	; () banked
  3664  003A02  51B3               	movf	___ftdiv@exp& (0+255),w,b
  3665  003A04  A4D8               	btfss	status,2,c
  3666  003A06  D00A               	goto	l7675
  3667                           
  3668                           ; BSR set to: 0
  3669  003A08  0E00               	movlw	0
  3670  003A0A  0100               	movlb	0	; () banked
  3671  003A0C  6FA6               	movwf	?___ftdiv& (0+255),b
  3672  003A0E  0E00               	movlw	0
  3673  003A10  0100               	movlb	0	; () banked
  3674  003A12  6FA7               	movwf	(?___ftdiv+1)& (0+255),b
  3675  003A14  0E00               	movlw	0
  3676  003A16  0100               	movlb	0	; () banked
  3677  003A18  6FA8               	movwf	(?___ftdiv+2)& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680  003A1A  0012               	return	
  3681  003A1C                     l7675:
  3682                           
  3683                           ; BSR set to: 0
  3684  003A1C  C0AB  F0AC         	movff	___ftdiv@f2+2,??___ftdiv
  3685  003A20  0100               	movlb	0	; () banked
  3686  003A22  6BAD               	clrf	(??___ftdiv+1)& (0+255),b
  3687  003A24  6BAE               	clrf	(??___ftdiv+2)& (0+255),b
  3688  003A26  0100               	movlb	0	; () banked
  3689  003A28  35AA               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3690  003A2A  0100               	movlb	0	; () banked
  3691  003A2C  37AC               	rlcf	??___ftdiv& (0+255),f,b
  3692  003A2E  E301               	bnc	u8941
  3693  003A30  81AD               	bsf	(??___ftdiv+1)& (0+255),0,b
  3694  003A32                     u8941:
  3695  003A32  0100               	movlb	0	; () banked
  3696  003A34  51AC               	movf	??___ftdiv& (0+255),w,b
  3697  003A36  0100               	movlb	0	; () banked
  3698  003A38  6FB4               	movwf	___ftdiv@sign& (0+255),b
  3699  003A3A  0100               	movlb	0	; () banked
  3700  003A3C  51B4               	movf	___ftdiv@sign& (0+255),w,b
  3701  003A3E  A4D8               	btfss	status,2,c
  3702  003A40  D00A               	goto	l7681
  3703                           
  3704                           ; BSR set to: 0
  3705  003A42  0E00               	movlw	0
  3706  003A44  0100               	movlb	0	; () banked
  3707  003A46  6FA6               	movwf	?___ftdiv& (0+255),b
  3708  003A48  0E00               	movlw	0
  3709  003A4A  0100               	movlb	0	; () banked
  3710  003A4C  6FA7               	movwf	(?___ftdiv+1)& (0+255),b
  3711  003A4E  0E00               	movlw	0
  3712  003A50  0100               	movlb	0	; () banked
  3713  003A52  6FA8               	movwf	(?___ftdiv+2)& (0+255),b
  3714                           
  3715                           ; BSR set to: 0
  3716  003A54  0012               	return	
  3717  003A56                     l7681:
  3718                           
  3719                           ; BSR set to: 0
  3720  003A56  0E00               	movlw	0
  3721  003A58  0100               	movlb	0	; () banked
  3722  003A5A  6FB0               	movwf	___ftdiv@f3& (0+255),b
  3723  003A5C  0E00               	movlw	0
  3724  003A5E  0100               	movlb	0	; () banked
  3725  003A60  6FB1               	movwf	(___ftdiv@f3+1)& (0+255),b
  3726  003A62  0E00               	movlw	0
  3727  003A64  0100               	movlb	0	; () banked
  3728  003A66  6FB2               	movwf	(___ftdiv@f3+2)& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731  003A68  0100               	movlb	0	; () banked
  3732  003A6A  51B4               	movf	___ftdiv@sign& (0+255),w,b
  3733  003A6C  0F89               	addlw	137
  3734  003A6E  0100               	movlb	0	; () banked
  3735  003A70  5FB3               	subwf	___ftdiv@exp& (0+255),f,b
  3736                           
  3737                           ; BSR set to: 0
  3738  003A72  C0A8  F0B4         	movff	___ftdiv@f1+2,___ftdiv@sign
  3739                           
  3740                           ; BSR set to: 0
  3741  003A76  0100               	movlb	0	; () banked
  3742  003A78  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3743  003A7A  0100               	movlb	0	; () banked
  3744  003A7C  1BB4               	xorwf	___ftdiv@sign& (0+255),f,b
  3745                           
  3746                           ; BSR set to: 0
  3747  003A7E  0E80               	movlw	128
  3748  003A80  0100               	movlb	0	; () banked
  3749  003A82  17B4               	andwf	___ftdiv@sign& (0+255),f,b
  3750                           
  3751                           ; BSR set to: 0
  3752  003A84  0100               	movlb	0	; () banked
  3753  003A86  8FA7               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3754                           
  3755                           ; BSR set to: 0
  3756  003A88  0EFF               	movlw	255
  3757  003A8A  0100               	movlb	0	; () banked
  3758  003A8C  17A6               	andwf	___ftdiv@f1& (0+255),f,b
  3759  003A8E  0EFF               	movlw	255
  3760  003A90  0100               	movlb	0	; () banked
  3761  003A92  17A7               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3762  003A94  0E00               	movlw	0
  3763  003A96  0100               	movlb	0	; () banked
  3764  003A98  17A8               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3765                           
  3766                           ; BSR set to: 0
  3767  003A9A  0100               	movlb	0	; () banked
  3768  003A9C  8FAA               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3769                           
  3770                           ; BSR set to: 0
  3771  003A9E  0EFF               	movlw	255
  3772  003AA0  0100               	movlb	0	; () banked
  3773  003AA2  17A9               	andwf	___ftdiv@f2& (0+255),f,b
  3774  003AA4  0EFF               	movlw	255
  3775  003AA6  0100               	movlb	0	; () banked
  3776  003AA8  17AA               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3777  003AAA  0E00               	movlw	0
  3778  003AAC  0100               	movlb	0	; () banked
  3779  003AAE  17AB               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3780                           
  3781                           ; BSR set to: 0
  3782  003AB0  0E18               	movlw	24
  3783  003AB2  0100               	movlb	0	; () banked
  3784  003AB4  6FAF               	movwf	___ftdiv@cntr& (0+255),b
  3785  003AB6                     l7701:
  3786                           
  3787                           ; BSR set to: 0
  3788  003AB6  0100               	movlb	0	; () banked
  3789  003AB8  90D8               	bcf	status,0,c
  3790  003ABA  37B0               	rlcf	___ftdiv@f3& (0+255),f,b
  3791  003ABC  37B1               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3792  003ABE  37B2               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3793                           
  3794                           ; BSR set to: 0
  3795  003AC0  0100               	movlb	0	; () banked
  3796  003AC2  51A9               	movf	___ftdiv@f2& (0+255),w,b
  3797  003AC4  0100               	movlb	0	; () banked
  3798  003AC6  5DA6               	subwf	___ftdiv@f1& (0+255),w,b
  3799  003AC8  0100               	movlb	0	; () banked
  3800  003ACA  51AA               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3801  003ACC  0100               	movlb	0	; () banked
  3802  003ACE  59A7               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3803  003AD0  0100               	movlb	0	; () banked
  3804  003AD2  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3805  003AD4  0100               	movlb	0	; () banked
  3806  003AD6  59A8               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3807  003AD8  A0D8               	btfss	status,0,c
  3808  003ADA  D00E               	goto	l909
  3809                           
  3810                           ; BSR set to: 0
  3811  003ADC  0100               	movlb	0	; () banked
  3812  003ADE  51A9               	movf	___ftdiv@f2& (0+255),w,b
  3813  003AE0  0100               	movlb	0	; () banked
  3814  003AE2  5FA6               	subwf	___ftdiv@f1& (0+255),f,b
  3815  003AE4  0100               	movlb	0	; () banked
  3816  003AE6  51AA               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3817  003AE8  0100               	movlb	0	; () banked
  3818  003AEA  5BA7               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3819  003AEC  0100               	movlb	0	; () banked
  3820  003AEE  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3821  003AF0  0100               	movlb	0	; () banked
  3822  003AF2  5BA8               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3823                           
  3824                           ; BSR set to: 0
  3825  003AF4  0100               	movlb	0	; () banked
  3826  003AF6  81B0               	bsf	___ftdiv@f3& (0+255),0,b
  3827  003AF8                     l909:
  3828                           
  3829                           ; BSR set to: 0
  3830  003AF8  0100               	movlb	0	; () banked
  3831  003AFA  90D8               	bcf	status,0,c
  3832  003AFC  37A6               	rlcf	___ftdiv@f1& (0+255),f,b
  3833  003AFE  37A7               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3834  003B00  37A8               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3835                           
  3836                           ; BSR set to: 0
  3837  003B02  0100               	movlb	0	; () banked
  3838  003B04  2FAF               	decfsz	___ftdiv@cntr& (0+255),f,b
  3839  003B06  D7D7               	goto	l7701
  3840                           
  3841                           ; BSR set to: 0
  3842                           
  3843                           ; BSR set to: 0
  3844  003B08  C0B0  F09E         	movff	___ftdiv@f3,___ftpack@arg
  3845  003B0C  C0B1  F09F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3846  003B10  C0B2  F0A0         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3847  003B14  C0B3  F0A1         	movff	___ftdiv@exp,___ftpack@exp
  3848  003B18  C0B4  F0A2         	movff	___ftdiv@sign,___ftpack@sign
  3849  003B1C  ECF5  F01F         	call	___ftpack	;wreg free
  3850  003B20  C09E  F0A6         	movff	?___ftpack,?___ftdiv
  3851  003B24  C09F  F0A7         	movff	?___ftpack+1,?___ftdiv+1
  3852  003B28  C0A0  F0A8         	movff	?___ftpack+2,?___ftdiv+2
  3853  003B2C  0012               	return	
  3854  003B2E                     __end_of___ftdiv:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           intcon	equ	0xFF2
  3861                           intcon2	equ	0xFF1
  3862                           intcon3	equ	0xFF0
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _initLCD *****************
  3868 ;; Defined at:
  3869 ;;		line 14 in file "lcd.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;		None
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      void 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        1 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    9
  3890 ;; This function calls:
  3891 ;;		_lcdInst
  3892 ;; This function is called by:
  3893 ;;		_main
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text7
  3898  005588                     __ptext7:
  3899                           	opt stack 0
  3900  005588                     _initLCD:
  3901                           	opt stack 21
  3902                           
  3903                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3904                           
  3905                           ;incstack = 0
  3906  005588  0E31               	movlw	49
  3907  00558A  0100               	movlb	0	; () banked
  3908  00558C  6FA1               	movwf	??_initLCD& (0+255),b
  3909  00558E  0EB2               	movlw	178
  3910  005590                     u9317:
  3911  005590  2EE8               	decfsz	wreg,f,c
  3912  005592  D7FE               	bra	u9317
  3913  005594  2FA1               	decfsz	??_initLCD& (0+255),f,b
  3914  005596  D7FC               	bra	u9317
  3915  005598  F000               	nop	
  3916                           
  3917                           ;lcd.c: 16: lcdInst(0b00110011);
  3918  00559A  0E33               	movlw	51
  3919  00559C  ECC4  F02C         	call	_lcdInst
  3920                           
  3921                           ;lcd.c: 17: lcdInst(0b00110011);
  3922  0055A0  0E33               	movlw	51
  3923  0055A2  ECC4  F02C         	call	_lcdInst
  3924                           
  3925                           ;lcd.c: 18: lcdInst(0b00110010);
  3926  0055A6  0E32               	movlw	50
  3927  0055A8  ECC4  F02C         	call	_lcdInst
  3928                           
  3929                           ;lcd.c: 19: lcdInst(0b00101000);
  3930  0055AC  0E28               	movlw	40
  3931  0055AE  ECC4  F02C         	call	_lcdInst
  3932                           
  3933                           ;lcd.c: 20: lcdInst(0b00001111);
  3934  0055B2  0E0F               	movlw	15
  3935  0055B4  ECC4  F02C         	call	_lcdInst
  3936                           
  3937                           ;lcd.c: 21: lcdInst(0b00000110);
  3938  0055B8  0E06               	movlw	6
  3939  0055BA  ECC4  F02C         	call	_lcdInst
  3940                           
  3941                           ;lcd.c: 22: lcdInst(0b00000001);
  3942  0055BE  0E01               	movlw	1
  3943  0055C0  ECC4  F02C         	call	_lcdInst
  3944                           
  3945                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  3946  0055C4  0E31               	movlw	49
  3947  0055C6  0100               	movlb	0	; () banked
  3948  0055C8  6FA1               	movwf	??_initLCD& (0+255),b
  3949  0055CA  0EB2               	movlw	178
  3950  0055CC                     u9327:
  3951  0055CC  2EE8               	decfsz	wreg,f,c
  3952  0055CE  D7FE               	bra	u9327
  3953  0055D0  2FA1               	decfsz	??_initLCD& (0+255),f,b
  3954  0055D2  D7FC               	bra	u9327
  3955  0055D4  F000               	nop	
  3956  0055D6  0012               	return		;funcret
  3957  0055D8                     __end_of_initLCD:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           intcon3	equ	0xFF0
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _emergencystop *****************
  3971 ;; Defined at:
  3972 ;;		line 468 in file "main.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;		None
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;Total ram usage:        0 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:   11
  3993 ;; This function calls:
  3994 ;;		_lcdInst
  3995 ;;		_printf
  3996 ;; This function is called by:
  3997 ;;		_main
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text8
  4002  0058FA                     __ptext8:
  4003                           	opt stack 0
  4004  0058FA                     _emergencystop:
  4005                           	opt stack 19
  4006                           
  4007                           ;main.c: 469: (INTCONbits.GIE = 0);
  4008                           
  4009                           ;incstack = 0
  4010  0058FA  9EF2               	bcf	intcon,7,c	;volatile
  4011                           
  4012                           ;main.c: 470: PORTAbits.RA2 = 0;
  4013  0058FC  9480               	bcf	3968,2,c	;volatile
  4014                           
  4015                           ;main.c: 471: lcdInst(0b00000001);
  4016  0058FE  0E01               	movlw	1
  4017  005900  ECC4  F02C         	call	_lcdInst
  4018                           
  4019                           ;main.c: 472: lcdInst(0b10000000);
  4020  005904  0E80               	movlw	128
  4021  005906  ECC4  F02C         	call	_lcdInst
  4022                           
  4023                           ;main.c: 473: printf("EMERGENCY STOP");
  4024  00590A  0ECC               	movlw	low STR_21
  4025  00590C  0101               	movlb	1	; () banked
  4026  00590E  6F1C               	movwf	printf@f& (0+255),b
  4027  005910  0EFF               	movlw	high STR_21
  4028  005912  0101               	movlb	1	; () banked
  4029  005914  6F1D               	movwf	(printf@f+1)& (0+255),b
  4030  005916  EC09  F000         	call	_printf	;wreg free
  4031  00591A                     l436:
  4032  00591A  D7FF               	goto	l436
  4033  00591C                     __end_of_emergencystop:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           intcon3	equ	0xFF0
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _date_time *****************
  4047 ;; Defined at:
  4048 ;;		line 287 in file "main.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  i               1   65[BANK0 ] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;Total ram usage:        1 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:   11
  4069 ;; This function calls:
  4070 ;;		_I2C_Master_Read
  4071 ;;		_I2C_Master_Start
  4072 ;;		_I2C_Master_Stop
  4073 ;;		_I2C_Master_Write
  4074 ;;		_lcdInst
  4075 ;;		_printf
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text9
  4082  00497E                     __ptext9:
  4083                           	opt stack 0
  4084  00497E                     _date_time:
  4085                           	opt stack 19
  4086                           
  4087                           ;main.c: 289: I2C_Master_Start();
  4088                           
  4089                           ;incstack = 0
  4090  00497E  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
  4091                           
  4092                           ;main.c: 290: I2C_Master_Write(0b11010000);
  4093  004982  0E00               	movlw	0
  4094  004984  0100               	movlb	0	; () banked
  4095  004986  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4096  004988  0ED0               	movlw	208
  4097  00498A  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4098  00498C  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
  4099                           
  4100                           ;main.c: 291: I2C_Master_Write(0x00);
  4101  004990  0E00               	movlw	0
  4102  004992  0100               	movlb	0	; () banked
  4103  004994  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4104  004996  0E00               	movlw	0
  4105  004998  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4106  00499A  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
  4107                           
  4108                           ;main.c: 292: I2C_Master_Stop();
  4109  00499E  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
  4110                           
  4111                           ;main.c: 295: I2C_Master_Start();
  4112  0049A2  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
  4113                           
  4114                           ;main.c: 296: I2C_Master_Write(0b11010001);
  4115  0049A6  0E00               	movlw	0
  4116  0049A8  0100               	movlb	0	; () banked
  4117  0049AA  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4118  0049AC  0ED1               	movlw	209
  4119  0049AE  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4120  0049B0  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
  4121                           
  4122                           ;main.c: 297: for(unsigned char i=0;i<0x06;i++){
  4123  0049B4  0E00               	movlw	0
  4124  0049B6  0100               	movlb	0	; () banked
  4125  0049B8  6FC1               	movwf	date_time@i& (0+255),b
  4126  0049BA                     l7863:
  4127                           
  4128                           ; BSR set to: 0
  4129  0049BA  0E05               	movlw	5
  4130  0049BC  0100               	movlb	0	; () banked
  4131  0049BE  65C1               	cpfsgt	date_time@i& (0+255),b
  4132  0049C0  D001               	goto	l7867
  4133  0049C2  D010               	goto	l7873
  4134  0049C4                     l7867:
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;main.c: 298: time[i] = I2C_Master_Read(1);
  4138  0049C4  0100               	movlb	0	; () banked
  4139  0049C6  51C1               	movf	date_time@i& (0+255),w,b
  4140  0049C8  0D01               	mullw	1
  4141  0049CA  0E58               	movlw	low _time
  4142  0049CC  24F3               	addwf	prodl,w,c
  4143  0049CE  6ED9               	movwf	fsr2l,c
  4144  0049D0  0E01               	movlw	high _time
  4145  0049D2  20F4               	addwfc	prodh,w,c
  4146  0049D4  6EDA               	movwf	fsr2h,c
  4147  0049D6  0E01               	movlw	1
  4148  0049D8  EC04  F02C         	call	_I2C_Master_Read
  4149  0049DC  6EDF               	movwf	indf2,c
  4150  0049DE  0100               	movlb	0	; () banked
  4151  0049E0  2BC1               	incf	date_time@i& (0+255),f,b
  4152  0049E2  D7EB               	goto	l7863
  4153  0049E4                     l7873:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;main.c: 299: }
  4157                           ;main.c: 300: time[6] = I2C_Master_Read(0);
  4158  0049E4  0E00               	movlw	0
  4159  0049E6  EC04  F02C         	call	_I2C_Master_Read
  4160  0049EA  0101               	movlb	1	; () banked
  4161  0049EC  6F5E               	movwf	(_time+6)& (0+255),b
  4162                           
  4163                           ;main.c: 301: I2C_Master_Stop();
  4164  0049EE  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
  4165                           
  4166                           ;main.c: 304: lcdInst(0b10000000);
  4167  0049F2  0E80               	movlw	128
  4168  0049F4  ECC4  F02C         	call	_lcdInst
  4169                           
  4170                           ;main.c: 305: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  4171  0049F8  0EE3               	movlw	low STR_8
  4172  0049FA  0101               	movlb	1	; () banked
  4173  0049FC  6F1C               	movwf	printf@f& (0+255),b
  4174  0049FE  0EFE               	movlw	high STR_8
  4175  004A00  0101               	movlb	1	; () banked
  4176  004A02  6F1D               	movwf	(printf@f+1)& (0+255),b
  4177  004A04  C15D  F11E         	movff	_time+5,?_printf+2
  4178  004A08  0101               	movlb	1	; () banked
  4179  004A0A  6B1F               	clrf	(?_printf+3)& (0+255),b
  4180  004A0C  C15C  F120         	movff	_time+4,?_printf+4
  4181  004A10  0101               	movlb	1	; () banked
  4182  004A12  6B21               	clrf	(?_printf+5)& (0+255),b
  4183  004A14  C15E  F122         	movff	_time+6,?_printf+6
  4184  004A18  0101               	movlb	1	; () banked
  4185  004A1A  6B23               	clrf	(?_printf+7)& (0+255),b
  4186  004A1C  EC09  F000         	call	_printf	;wreg free
  4187                           
  4188                           ;main.c: 306: lcdInst(0b11000000);
  4189  004A20  0EC0               	movlw	192
  4190  004A22  ECC4  F02C         	call	_lcdInst
  4191                           
  4192                           ;main.c: 307: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4193  004A26  0EFA               	movlw	low STR_9
  4194  004A28  0101               	movlb	1	; () banked
  4195  004A2A  6F1C               	movwf	printf@f& (0+255),b
  4196  004A2C  0EFE               	movlw	high STR_9
  4197  004A2E  0101               	movlb	1	; () banked
  4198  004A30  6F1D               	movwf	(printf@f+1)& (0+255),b
  4199  004A32  C15A  F11E         	movff	_time+2,?_printf+2
  4200  004A36  0101               	movlb	1	; () banked
  4201  004A38  6B1F               	clrf	(?_printf+3)& (0+255),b
  4202  004A3A  C159  F120         	movff	_time+1,?_printf+4
  4203  004A3E  0101               	movlb	1	; () banked
  4204  004A40  6B21               	clrf	(?_printf+5)& (0+255),b
  4205  004A42  C158  F122         	movff	_time,?_printf+6
  4206  004A46  0101               	movlb	1	; () banked
  4207  004A48  6B23               	clrf	(?_printf+7)& (0+255),b
  4208  004A4A  EC09  F000         	call	_printf	;wreg free
  4209  004A4E  0012               	return	
  4210  004A50                     __end_of_date_time:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           intcon	equ	0xFF2
  4219                           intcon2	equ	0xFF1
  4220                           intcon3	equ	0xFF0
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           indf2	equ	0xFDF
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _I2C_Master_Read *****************
  4229 ;; Defined at:
  4230 ;;		line 110 in file "I2C.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  a               1    wreg     unsigned char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  a               1   31[BANK0 ] unsigned char 
  4235 ;;  temp            1   32[BANK0 ] unsigned char 
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      unsigned char 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    8
  4252 ;; This function calls:
  4253 ;;		_I2C_Master_Wait
  4254 ;; This function is called by:
  4255 ;;		_date_time
  4256 ;;		_read_colorsensor
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text10
  4261  005808                     __ptext10:
  4262                           	opt stack 0
  4263  005808                     _I2C_Master_Read:
  4264                           	opt stack 20
  4265                           
  4266                           ;incstack = 0
  4267                           ;I2C_Master_Read@a stored from wreg
  4268  005808  0100               	movlb	0	; () banked
  4269  00580A  6F9F               	movwf	I2C_Master_Read@a& (0+255),b
  4270                           
  4271                           ;I2C.c: 112: unsigned char temp;
  4272                           ;I2C.c: 113: I2C_Master_Wait();
  4273  00580C  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
  4274                           
  4275                           ;I2C.c: 114: RCEN = 1;
  4276  005810  86C5               	bsf	4037,3,c	;volatile
  4277                           
  4278                           ;I2C.c: 115: I2C_Master_Wait();
  4279  005812  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
  4280                           
  4281                           ;I2C.c: 116: temp = SSPBUF;
  4282  005816  CFC9 F0A0          	movff	4041,I2C_Master_Read@temp	;volatile
  4283                           
  4284                           ;I2C.c: 117: I2C_Master_Wait();
  4285  00581A  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
  4286                           
  4287                           ;I2C.c: 118: ACKDT = (a)?0:1;
  4288  00581E  0100               	movlb	0	; () banked
  4289  005820  519F               	movf	I2C_Master_Read@a& (0+255),w,b
  4290  005822  0100               	movlb	0	; () banked
  4291  005824  A4D8               	btfss	status,2,c
  4292  005826  D002               	goto	u5100
  4293  005828  8AC5               	bsf	4037,5,c	;volatile
  4294  00582A  D001               	goto	l4899
  4295  00582C                     u5100:
  4296  00582C  9AC5               	bcf	4037,5,c	;volatile
  4297  00582E                     l4899:
  4298                           
  4299                           ;I2C.c: 119: ACKEN = 1;
  4300  00582E  88C5               	bsf	4037,4,c	;volatile
  4301                           
  4302                           ;I2C.c: 120: return temp;
  4303  005830  0100               	movlb	0	; () banked
  4304  005832  51A0               	movf	I2C_Master_Read@temp& (0+255),w,b
  4305  005834  0012               	return	
  4306  005836                     __end_of_I2C_Master_Read:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           intcon3	equ	0xFF0
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           indf2	equ	0xFDF
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function _bottle_time *****************
  4325 ;; Defined at:
  4326 ;;		line 360 in file "main.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;Total ram usage:        0 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:   11
  4347 ;; This function calls:
  4348 ;;		_lcdInst
  4349 ;;		_printf
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text11
  4356  00576C                     __ptext11:
  4357                           	opt stack 0
  4358  00576C                     _bottle_time:
  4359                           	opt stack 19
  4360                           
  4361                           ;main.c: 361: lcdInst(0b10000000);
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;incstack = 0
  4365  00576C  0E80               	movlw	128
  4366  00576E  ECC4  F02C         	call	_lcdInst
  4367                           
  4368                           ;main.c: 362: printf("Total Operation       ");
  4369  005772  0ECC               	movlw	low STR_17
  4370  005774  0101               	movlb	1	; () banked
  4371  005776  6F1C               	movwf	printf@f& (0+255),b
  4372  005778  0EFE               	movlw	high STR_17
  4373  00577A  0101               	movlb	1	; () banked
  4374  00577C  6F1D               	movwf	(printf@f+1)& (0+255),b
  4375  00577E  EC09  F000         	call	_printf	;wreg free
  4376                           
  4377                           ;main.c: 363: lcdInst(0b11000000);
  4378  005782  0EC0               	movlw	192
  4379  005784  ECC4  F02C         	call	_lcdInst
  4380                           
  4381                           ;main.c: 364: printf("Time: %d s       ", operation_time);
  4382  005788  0E23               	movlw	low STR_18
  4383  00578A  0101               	movlb	1	; () banked
  4384  00578C  6F1C               	movwf	printf@f& (0+255),b
  4385  00578E  0EFF               	movlw	high STR_18
  4386  005790  0101               	movlb	1	; () banked
  4387  005792  6F1D               	movwf	(printf@f+1)& (0+255),b
  4388  005794  C17D  F11E         	movff	_operation_time,?_printf+2
  4389  005798  C17E  F11F         	movff	_operation_time+1,?_printf+3
  4390  00579C  EC09  F000         	call	_printf	;wreg free
  4391  0057A0  0012               	return	
  4392  0057A2                     __end_of_bottle_time:
  4393                           	opt stack 0
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon	equ	0xFF2
  4401                           intcon2	equ	0xFF1
  4402                           intcon3	equ	0xFF0
  4403                           postinc0	equ	0xFEE
  4404                           wreg	equ	0xFE8
  4405                           indf2	equ	0xFDF
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _bottle_count *****************
  4411 ;; Defined at:
  4412 ;;		line 330 in file "main.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:   11
  4433 ;; This function calls:
  4434 ;;		___awmod
  4435 ;;		_lcdInst
  4436 ;;		_printf
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text12
  4443  004202                     __ptext12:
  4444                           	opt stack 0
  4445  004202                     _bottle_count:
  4446                           	opt stack 19
  4447                           
  4448                           ;main.c: 331: switch(bottle_count_disp % 3){
  4449                           
  4450                           ;incstack = 0
  4451  004202  D065               	goto	l7907
  4452  004204                     l7883:
  4453                           
  4454                           ;main.c: 333: lcdInst(0b10000000);
  4455  004204  0E80               	movlw	128
  4456  004206  ECC4  F02C         	call	_lcdInst
  4457                           
  4458                           ;main.c: 334: printf("Bottle Count    ");
  4459  00420A  0E57               	movlw	low STR_10
  4460  00420C  0101               	movlb	1	; () banked
  4461  00420E  6F1C               	movwf	printf@f& (0+255),b
  4462  004210  0EFF               	movlw	high STR_10
  4463  004212  0101               	movlb	1	; () banked
  4464  004214  6F1D               	movwf	(printf@f+1)& (0+255),b
  4465  004216  EC09  F000         	call	_printf	;wreg free
  4466                           
  4467                           ;main.c: 335: lcdInst(0b11000000);
  4468  00421A  0EC0               	movlw	192
  4469  00421C  ECC4  F02C         	call	_lcdInst
  4470                           
  4471                           ;main.c: 336: printf("Total: %d       ", bottle_count_array[0]);
  4472  004220  0E46               	movlw	low STR_11
  4473  004222  0101               	movlb	1	; () banked
  4474  004224  6F1C               	movwf	printf@f& (0+255),b
  4475  004226  0EFF               	movlw	high STR_11
  4476  004228  0101               	movlb	1	; () banked
  4477  00422A  6F1D               	movwf	(printf@f+1)& (0+255),b
  4478  00422C  C146  F11E         	movff	_bottle_count_array,?_printf+2
  4479  004230  C147  F11F         	movff	_bottle_count_array+1,?_printf+3
  4480  004234  EC09  F000         	call	_printf	;wreg free
  4481                           
  4482                           ;main.c: 337: break;
  4483  004238  0012               	return	
  4484  00423A                     l7889:
  4485                           
  4486                           ;main.c: 339: lcdInst(0b10000000);
  4487  00423A  0E80               	movlw	128
  4488  00423C  ECC4  F02C         	call	_lcdInst
  4489                           
  4490                           ;main.c: 340: printf("YOP W/ CAP: %d  ", bottle_count_array[1]);
  4491  004240  0E68               	movlw	low STR_12
  4492  004242  0101               	movlb	1	; () banked
  4493  004244  6F1C               	movwf	printf@f& (0+255),b
  4494  004246  0EFF               	movlw	high STR_12
  4495  004248  0101               	movlb	1	; () banked
  4496  00424A  6F1D               	movwf	(printf@f+1)& (0+255),b
  4497  00424C  C148  F11E         	movff	_bottle_count_array+2,?_printf+2
  4498  004250  C149  F11F         	movff	_bottle_count_array+3,?_printf+3
  4499  004254  EC09  F000         	call	_printf	;wreg free
  4500                           
  4501                           ;main.c: 341: lcdInst(0b11000000);
  4502  004258  0EC0               	movlw	192
  4503  00425A  ECC4  F02C         	call	_lcdInst
  4504                           
  4505                           ;main.c: 342: printf("YOP NO CAP: %d  ", bottle_count_array[2]);
  4506  00425E  0E79               	movlw	low STR_13
  4507  004260  0101               	movlb	1	; () banked
  4508  004262  6F1C               	movwf	printf@f& (0+255),b
  4509  004264  0EFF               	movlw	high STR_13
  4510  004266  0101               	movlb	1	; () banked
  4511  004268  6F1D               	movwf	(printf@f+1)& (0+255),b
  4512  00426A  C14A  F11E         	movff	_bottle_count_array+4,?_printf+2
  4513  00426E  C14B  F11F         	movff	_bottle_count_array+5,?_printf+3
  4514  004272  EC09  F000         	call	_printf	;wreg free
  4515                           
  4516                           ;main.c: 343: break;
  4517  004276  0012               	return	
  4518  004278                     l7895:
  4519                           
  4520                           ;main.c: 345: lcdInst(0b10000000);
  4521  004278  0E80               	movlw	128
  4522  00427A  ECC4  F02C         	call	_lcdInst
  4523                           
  4524                           ;main.c: 346: printf("ESKA W/ CAP: %d ", bottle_count_array[3]);
  4525  00427E  0E8A               	movlw	low STR_14
  4526  004280  0101               	movlb	1	; () banked
  4527  004282  6F1C               	movwf	printf@f& (0+255),b
  4528  004284  0EFF               	movlw	high STR_14
  4529  004286  0101               	movlb	1	; () banked
  4530  004288  6F1D               	movwf	(printf@f+1)& (0+255),b
  4531  00428A  C14C  F11E         	movff	_bottle_count_array+6,?_printf+2
  4532  00428E  C14D  F11F         	movff	_bottle_count_array+7,?_printf+3
  4533  004292  EC09  F000         	call	_printf	;wreg free
  4534                           
  4535                           ;main.c: 347: lcdInst(0b11000000);
  4536  004296  0EC0               	movlw	192
  4537  004298  ECC4  F02C         	call	_lcdInst
  4538                           
  4539                           ;main.c: 348: printf("ESKA NO CAP: %d ", bottle_count_array[4]);
  4540  00429C  0E9B               	movlw	low STR_15
  4541  00429E  0101               	movlb	1	; () banked
  4542  0042A0  6F1C               	movwf	printf@f& (0+255),b
  4543  0042A2  0EFF               	movlw	high STR_15
  4544  0042A4  0101               	movlb	1	; () banked
  4545  0042A6  6F1D               	movwf	(printf@f+1)& (0+255),b
  4546  0042A8  C14E  F11E         	movff	_bottle_count_array+8,?_printf+2
  4547  0042AC  C14F  F11F         	movff	_bottle_count_array+9,?_printf+3
  4548  0042B0  EC09  F000         	call	_printf	;wreg free
  4549                           
  4550                           ;main.c: 349: break;
  4551  0042B4  0012               	return	
  4552  0042B6                     l7901:
  4553                           
  4554                           ;main.c: 352: lcdInst(0b10000000);
  4555  0042B6  0E80               	movlw	128
  4556  0042B8  ECC4  F02C         	call	_lcdInst
  4557                           
  4558                           ;main.c: 353: printf("ERR: BAD BTLCNT");
  4559  0042BC  0EBC               	movlw	low STR_16
  4560  0042BE  0101               	movlb	1	; () banked
  4561  0042C0  6F1C               	movwf	printf@f& (0+255),b
  4562  0042C2  0EFF               	movlw	high STR_16
  4563  0042C4  0101               	movlb	1	; () banked
  4564  0042C6  6F1D               	movwf	(printf@f+1)& (0+255),b
  4565  0042C8  EC09  F000         	call	_printf	;wreg free
  4566  0042CC  D7F4               	goto	l7901
  4567  0042CE                     l7907:
  4568  0042CE  C187  F09E         	movff	_bottle_count_disp,___awmod@dividend
  4569  0042D2  C188  F09F         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4570  0042D6  0E00               	movlw	0
  4571  0042D8  0100               	movlb	0	; () banked
  4572  0042DA  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  4573  0042DC  0E03               	movlw	3
  4574  0042DE  6FA0               	movwf	___awmod@divisor& (0+255),b
  4575  0042E0  EC6C  F027         	call	___awmod	;wreg free
  4576                           
  4577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4578                           ; Switch size 1, requested type "space"
  4579                           ; Number of cases is 1, Range of values is 0 to 0
  4580                           ; switch strategies available:
  4581                           ; Name         Instructions Cycles
  4582                           ; simple_byte            4     3 (average)
  4583                           ;	Chosen strategy is simple_byte
  4584  0042E4  0100               	movlb	0	; () banked
  4585  0042E6  519F               	movf	(?___awmod+1)& (0+255),w,b
  4586  0042E8  0A00               	xorlw	0	; case 0
  4587  0042EA  A4D8               	btfss	status,2,c
  4588  0042EC  D7E4               	goto	l7901
  4589                           
  4590                           ; BSR set to: 0
  4591                           ; Switch size 1, requested type "space"
  4592                           ; Number of cases is 3, Range of values is 0 to 2
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte           10     6 (average)
  4596                           ;	Chosen strategy is simple_byte
  4597  0042EE  0100               	movlb	0	; () banked
  4598  0042F0  519E               	movf	?___awmod& (0+255),w,b
  4599  0042F2  0A00               	xorlw	0	; case 0
  4600  0042F4  B4D8               	btfsc	status,2,c
  4601  0042F6  D786               	goto	l7883
  4602  0042F8  0A01               	xorlw	1	; case 1
  4603  0042FA  B4D8               	btfsc	status,2,c
  4604  0042FC  D79E               	goto	l7889
  4605  0042FE  0A03               	xorlw	3	; case 2
  4606  004300  B4D8               	btfsc	status,2,c
  4607  004302  D7BA               	goto	l7895
  4608  004304  D7D8               	goto	l7901
  4609  004306                     __end_of_bottle_count:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           intcon3	equ	0xFF0
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           indf2	equ	0xFDF
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _printf *****************
  4628 ;; Defined at:
  4629 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  f               2   28[BANK1 ] PTR const unsigned char 
  4632 ;;		 -> STR_21(15), STR_20(16), STR_19(3), STR_18(18), 
  4633 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
  4634 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  4635 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(18), 
  4636 ;;		 -> STR_5(13), STR_4(3), STR_3(24), STR_2(24), 
  4637 ;;		 -> STR_1(8), 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  idx             1   45[BANK1 ] unsigned char 
  4640 ;;  val             4   58[BANK1 ] unsigned long 
  4641 ;;  tmpval          4   50[BANK1 ] struct .
  4642 ;;  fval            3   64[BANK1 ] struct .
  4643 ;;  cp              3    0        PTR const unsigned char 
  4644 ;;  flag            2   62[BANK1 ] unsigned short 
  4645 ;;  exp             2   56[BANK1 ] int 
  4646 ;;  width           2   54[BANK1 ] int 
  4647 ;;  prec            2   48[BANK1 ] int 
  4648 ;;  ap              2   46[BANK1 ] PTR void [1]
  4649 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4650 ;;  len             2    0        unsigned int 
  4651 ;;  c               1   67[BANK1 ] char 
  4652 ;;  d               1    0        unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  2   28[BANK1 ] int 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:       40 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:   10
  4669 ;; This function calls:
  4670 ;;		___awdiv
  4671 ;;		___ftadd
  4672 ;;		___ftge
  4673 ;;		___ftmul
  4674 ;;		___ftneg
  4675 ;;		___ftsub
  4676 ;;		___fttol
  4677 ;;		___lldiv
  4678 ;;		___llmod
  4679 ;;		___lltoft
  4680 ;;		___wmul
  4681 ;;		__div_to_l_
  4682 ;;		__tdiv_to_l_
  4683 ;;		_fround
  4684 ;;		_isdigit
  4685 ;;		_putch
  4686 ;;		_scale
  4687 ;; This function is called by:
  4688 ;;		_standby
  4689 ;;		_date_time
  4690 ;;		_bottle_count
  4691 ;;		_bottle_time
  4692 ;;		_operation
  4693 ;;		_operationend
  4694 ;;		_emergencystop
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text13
  4699  000012                     __ptext13:
  4700                           	opt stack 0
  4701  000012                     _printf:
  4702                           	opt stack 19
  4703                           
  4704                           ;doprnt.c: 466: va_list ap;
  4705                           ;doprnt.c: 499: signed char c;
  4706                           ;doprnt.c: 501: int width;
  4707                           ;doprnt.c: 504: int prec;
  4708                           ;doprnt.c: 508: unsigned short flag;
  4709                           ;doprnt.c: 515: char d;
  4710                           ;doprnt.c: 516: double fval;
  4711                           ;doprnt.c: 517: int exp;
  4712                           ;doprnt.c: 523: union {
  4713                           ;doprnt.c: 524: unsigned long vd;
  4714                           ;doprnt.c: 525: double integ;
  4715                           ;doprnt.c: 526: } tmpval;
  4716                           ;doprnt.c: 528: unsigned long val;
  4717                           ;doprnt.c: 529: unsigned len;
  4718                           ;doprnt.c: 530: const char * cp;
  4719                           ;doprnt.c: 533: *ap = __va_start();
  4720                           
  4721                           ;incstack = 0
  4722  000012  0E1E               	movlw	low (?_printf+2)
  4723  000014  0101               	movlb	1	; () banked
  4724  000016  6F2E               	movwf	printf@ap& (0+255),b
  4725  000018  0E01               	movlw	high (?_printf+2)
  4726  00001A  0101               	movlb	1	; () banked
  4727  00001C  6F2F               	movwf	(printf@ap+1)& (0+255),b
  4728                           
  4729                           ;doprnt.c: 536: while(c = *f++) {
  4730  00001E  EFEE  F005         	goto	l7667
  4731  000022                     l7377:
  4732                           
  4733                           ; BSR set to: 1
  4734                           ;doprnt.c: 538: if(c != '%')
  4735  000022  0E25               	movlw	37
  4736  000024  0101               	movlb	1	; () banked
  4737  000026  1943               	xorwf	printf@c& (0+255),w,b
  4738  000028  B4D8               	btfsc	status,2,c
  4739  00002A  D006               	goto	l7381
  4740                           
  4741                           ; BSR set to: 1
  4742                           ;doprnt.c: 540: {
  4743                           ;doprnt.c: 541: (putch(c) );
  4744  00002C  0101               	movlb	1	; () banked
  4745  00002E  5143               	movf	printf@c& (0+255),w,b
  4746  000030  ECBC  F02C         	call	_putch
  4747                           
  4748                           ;doprnt.c: 542: continue;
  4749  000034  EFEE  F005         	goto	l7667
  4750  000038                     l7381:
  4751                           
  4752                           ;doprnt.c: 543: }
  4753                           ;doprnt.c: 546: width = 0;
  4754  000038  0E00               	movlw	0
  4755  00003A  0101               	movlb	1	; () banked
  4756  00003C  6F37               	movwf	(printf@width+1)& (0+255),b
  4757  00003E  0E00               	movlw	0
  4758  000040  6F36               	movwf	printf@width& (0+255),b
  4759                           
  4760                           ;doprnt.c: 548: flag = 0;
  4761  000042  0E00               	movlw	0
  4762  000044  0101               	movlb	1	; () banked
  4763  000046  6F3F               	movwf	(printf@flag+1)& (0+255),b
  4764  000048  0E00               	movlw	0
  4765  00004A  6F3E               	movwf	printf@flag& (0+255),b
  4766                           
  4767                           ; BSR set to: 1
  4768                           ;doprnt.c: 551: switch(*f) {
  4769                           
  4770                           ;doprnt.c: 550: for(;;) {
  4771  00004C  D005               	goto	l7387
  4772  00004E                     l7383:
  4773                           
  4774                           ;doprnt.c: 580: flag |= 0x04;
  4775  00004E  0101               	movlb	1	; () banked
  4776  000050  853E               	bsf	printf@flag& (0+255),2,b
  4777                           
  4778                           ;doprnt.c: 581: f++;
  4779  000052  0101               	movlb	1	; () banked
  4780  000054  4B1C               	infsnz	printf@f& (0+255),f,b
  4781  000056  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4782  000058                     l7387:
  4783  000058  C11C  FFF6         	movff	printf@f,tblptrl
  4784  00005C  C11D  FFF7         	movff	printf@f+1,tblptrh
  4785  000060                     	if	0	;tblptru may be non-zero
  4786  000060                     	endif
  4787  000060                     	if	0	;tblptru may be non-zero
  4788  000060                     	endif
  4789  000060  0008               	tblrd		*
  4790  000062  50F5               	movf	tablat,w,c
  4791                           
  4792                           ; Switch size 1, requested type "space"
  4793                           ; Number of cases is 1, Range of values is 48 to 48
  4794                           ; switch strategies available:
  4795                           ; Name         Instructions Cycles
  4796                           ; simple_byte            4     3 (average)
  4797                           ;	Chosen strategy is simple_byte
  4798  000064  0A30               	xorlw	48	; case 48
  4799  000066  B4D8               	btfsc	status,2,c
  4800  000068  D7F2               	goto	l7383
  4801                           
  4802                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4803                           
  4804                           ;doprnt.c: 586: }
  4805                           
  4806                           ;doprnt.c: 585: break;
  4807  00006A  C11C  FFF6         	movff	printf@f,tblptrl
  4808  00006E  C11D  FFF7         	movff	printf@f+1,tblptrh
  4809  000072                     	if	0	;tblptru may be non-zero
  4810  000072                     	endif
  4811  000072                     	if	0	;tblptru may be non-zero
  4812  000072                     	endif
  4813  000072  0008               	tblrd		*
  4814  000074  50F5               	movf	tablat,w,c
  4815  000076  EC30  F02C         	call	_isdigit
  4816  00007A  A0D8               	btfss	status,0,c
  4817  00007C  D04B               	goto	l7409
  4818                           
  4819                           ;doprnt.c: 598: width = 0;
  4820  00007E  0E00               	movlw	0
  4821  000080  0101               	movlb	1	; () banked
  4822  000082  6F37               	movwf	(printf@width+1)& (0+255),b
  4823  000084  0E00               	movlw	0
  4824  000086  6F36               	movwf	printf@width& (0+255),b
  4825  000088                     l7393:
  4826                           
  4827                           ;doprnt.c: 600: width *= 10;
  4828  000088  C136  F0AC         	movff	printf@width,___wmul@multiplier
  4829  00008C  C137  F0AD         	movff	printf@width+1,___wmul@multiplier+1
  4830  000090  0E00               	movlw	0
  4831  000092  0100               	movlb	0	; () banked
  4832  000094  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4833  000096  0E0A               	movlw	10
  4834  000098  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  4835  00009A  ECD1  F02B         	call	___wmul	;wreg free
  4836  00009E  C0AC  F136         	movff	?___wmul,printf@width
  4837  0000A2  C0AD  F137         	movff	?___wmul+1,printf@width+1
  4838                           
  4839                           ;doprnt.c: 601: width += *f++ - '0';
  4840  0000A6  0ED0               	movlw	208
  4841  0000A8  0101               	movlb	1	; () banked
  4842  0000AA  6F24               	movwf	??_printf& (0+255),b
  4843  0000AC  0EFF               	movlw	255
  4844  0000AE  0101               	movlb	1	; () banked
  4845  0000B0  6F25               	movwf	(??_printf+1)& (0+255),b
  4846  0000B2  C11C  FFF6         	movff	printf@f,tblptrl
  4847  0000B6  C11D  FFF7         	movff	printf@f+1,tblptrh
  4848  0000BA                     	if	0	;tblptru may be non-zero
  4849  0000BA                     	endif
  4850  0000BA                     	if	0	;tblptru may be non-zero
  4851  0000BA                     	endif
  4852  0000BA  0008               	tblrd		*
  4853  0000BC  50F5               	movf	tablat,w,c
  4854  0000BE  0101               	movlb	1	; () banked
  4855  0000C0  6F26               	movwf	(??_printf+2)& (0+255),b
  4856  0000C2  6B27               	clrf	(??_printf+3)& (0+255),b
  4857  0000C4  0101               	movlb	1	; () banked
  4858  0000C6  5124               	movf	??_printf& (0+255),w,b
  4859  0000C8  0101               	movlb	1	; () banked
  4860  0000CA  2726               	addwf	(??_printf+2)& (0+255),f,b
  4861  0000CC  0101               	movlb	1	; () banked
  4862  0000CE  5125               	movf	(??_printf+1)& (0+255),w,b
  4863  0000D0  0101               	movlb	1	; () banked
  4864  0000D2  2327               	addwfc	(??_printf+3)& (0+255),f,b
  4865  0000D4  0101               	movlb	1	; () banked
  4866  0000D6  5126               	movf	(??_printf+2)& (0+255),w,b
  4867  0000D8  0101               	movlb	1	; () banked
  4868  0000DA  2736               	addwf	printf@width& (0+255),f,b
  4869  0000DC  0101               	movlb	1	; () banked
  4870  0000DE  5127               	movf	(??_printf+3)& (0+255),w,b
  4871  0000E0  0101               	movlb	1	; () banked
  4872  0000E2  2337               	addwfc	(printf@width+1)& (0+255),f,b
  4873                           
  4874                           ; BSR set to: 1
  4875  0000E4  0101               	movlb	1	; () banked
  4876  0000E6  4B1C               	infsnz	printf@f& (0+255),f,b
  4877  0000E8  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4878                           
  4879                           ; BSR set to: 1
  4880                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4881  0000EA  C11C  FFF6         	movff	printf@f,tblptrl
  4882  0000EE  C11D  FFF7         	movff	printf@f+1,tblptrh
  4883  0000F2                     	if	0	;tblptru may be non-zero
  4884  0000F2                     	endif
  4885  0000F2                     	if	0	;tblptru may be non-zero
  4886  0000F2                     	endif
  4887  0000F2  0008               	tblrd		*
  4888  0000F4  50F5               	movf	tablat,w,c
  4889  0000F6  EC30  F02C         	call	_isdigit
  4890  0000FA  A0D8               	btfss	status,0,c
  4891  0000FC  D00B               	goto	l7409
  4892  0000FE  D7C4               	goto	l7393
  4893  000100                     l7401:
  4894                           
  4895                           ;doprnt.c: 663: flag |= 0x400;
  4896  000100  0101               	movlb	1	; () banked
  4897  000102  853F               	bsf	(printf@flag+1)& (0+255),2,b
  4898                           
  4899                           ; BSR set to: 1
  4900                           ;doprnt.c: 698: case 'i':
  4901                           ;doprnt.c: 699: break;
  4902                           
  4903                           ; BSR set to: 1
  4904                           
  4905                           ;doprnt.c: 697: case 'd':
  4906                           
  4907                           ;doprnt.c: 664: break;
  4908  000104  D027               	goto	l7411
  4909  000106                     l7403:
  4910                           
  4911                           ; BSR set to: 1
  4912                           ;doprnt.c: 721: flag |= 0x80;
  4913  000106  0101               	movlb	1	; () banked
  4914  000108  8F3E               	bsf	printf@flag& (0+255),7,b
  4915                           
  4916                           ;doprnt.c: 723: break;
  4917  00010A  D024               	goto	l7411
  4918  00010C                     l7405:
  4919                           
  4920                           ; BSR set to: 1
  4921                           ;doprnt.c: 818: flag |= 0xC0;
  4922  00010C  0EC0               	movlw	192
  4923  00010E  0101               	movlb	1	; () banked
  4924  000110  133E               	iorwf	printf@flag& (0+255),f,b
  4925                           
  4926                           ; BSR set to: 1
  4927                           ;doprnt.c: 822: }
  4928                           
  4929                           ;doprnt.c: 819: break;
  4930  000112  D020               	goto	l7411
  4931  000114                     l7409:
  4932  000114  C11C  FFF6         	movff	printf@f,tblptrl
  4933  000118  C11D  FFF7         	movff	printf@f+1,tblptrh
  4934  00011C  0101               	movlb	1	; () banked
  4935  00011E  4B1C               	infsnz	printf@f& (0+255),f,b
  4936  000120  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4937  000122                     	if	0	;tblptru may be non-zero
  4938  000122                     	endif
  4939  000122                     	if	0	;tblptru may be non-zero
  4940  000122                     	endif
  4941  000122  0008               	tblrd		*
  4942  000124  CFF5 F143          	movff	tablat,printf@c
  4943  000128  0101               	movlb	1	; () banked
  4944  00012A  5143               	movf	printf@c& (0+255),w,b
  4945                           
  4946                           ; Switch size 1, requested type "space"
  4947                           ; Number of cases is 6, Range of values is 0 to 120
  4948                           ; switch strategies available:
  4949                           ; Name         Instructions Cycles
  4950                           ; simple_byte           19    10 (average)
  4951                           ;	Chosen strategy is simple_byte
  4952  00012C  0A00               	xorlw	0	; case 0
  4953  00012E  B4D8               	btfsc	status,2,c
  4954  000130  0012               	return	
  4955  000132  0A64               	xorlw	100	; case 100
  4956  000134  B4D8               	btfsc	status,2,c
  4957  000136  D00E               	goto	l7411
  4958  000138  0A02               	xorlw	2	; case 102
  4959  00013A  B4D8               	btfsc	status,2,c
  4960  00013C  D7E1               	goto	l7401
  4961  00013E  0A0F               	xorlw	15	; case 105
  4962  000140  B4D8               	btfsc	status,2,c
  4963  000142  D008               	goto	l7411
  4964  000144  0A1C               	xorlw	28	; case 117
  4965  000146  B4D8               	btfsc	status,2,c
  4966  000148  D7E1               	goto	l7405
  4967  00014A  0A0D               	xorlw	13	; case 120
  4968  00014C  B4D8               	btfsc	status,2,c
  4969  00014E  D7DB               	goto	l7403
  4970  000150  EFEE  F005         	goto	l7667
  4971  000154                     l7411:
  4972                           
  4973                           ; BSR set to: 1
  4974                           ;doprnt.c: 825: if(flag & (0x700)) {
  4975  000154  0E07               	movlw	7
  4976  000156  0101               	movlb	1	; () banked
  4977  000158  153F               	andwf	(printf@flag+1)& (0+255),w,b
  4978  00015A  B4D8               	btfsc	status,2,c
  4979  00015C  D37A               	goto	l7569
  4980                           
  4981                           ; BSR set to: 1
  4982                           ;doprnt.c: 829: prec = 6;
  4983  00015E  0E00               	movlw	0
  4984  000160  0101               	movlb	1	; () banked
  4985  000162  6F31               	movwf	(printf@prec+1)& (0+255),b
  4986  000164  0E06               	movlw	6
  4987  000166  6F30               	movwf	printf@prec& (0+255),b
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4991  000168  C12E  FFD9         	movff	printf@ap,fsr2l
  4992  00016C  C12F  FFDA         	movff	printf@ap+1,fsr2h
  4993  000170  CFDE F140          	movff	postinc2,printf@fval
  4994  000174  CFDE F141          	movff	postinc2,printf@fval+1
  4995  000178  CFDD F142          	movff	postdec2,printf@fval+2
  4996                           
  4997                           ; BSR set to: 1
  4998  00017C  0E03               	movlw	3
  4999  00017E  0101               	movlb	1	; () banked
  5000  000180  272E               	addwf	printf@ap& (0+255),f,b
  5001  000182  0E00               	movlw	0
  5002  000184  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 1
  5005                           ;doprnt.c: 831: if(fval < 0.0) {
  5006  000186  0101               	movlb	1	; () banked
  5007  000188  AF42               	btfss	(printf@fval+2)& (0+255),7,b
  5008  00018A  D011               	goto	l7425
  5009                           
  5010                           ; BSR set to: 1
  5011                           ;doprnt.c: 832: fval = -fval;
  5012  00018C  C140  F09E         	movff	printf@fval,___ftneg@f1
  5013  000190  C141  F09F         	movff	printf@fval+1,___ftneg@f1+1
  5014  000194  C142  F0A0         	movff	printf@fval+2,___ftneg@f1+2
  5015  000198  ECEC  F02B         	call	___ftneg	;wreg free
  5016  00019C  C09E  F140         	movff	?___ftneg,printf@fval
  5017  0001A0  C09F  F141         	movff	?___ftneg+1,printf@fval+1
  5018  0001A4  C0A0  F142         	movff	?___ftneg+2,printf@fval+2
  5019                           
  5020                           ;doprnt.c: 833: flag |= 0x03;
  5021  0001A8  0E03               	movlw	3
  5022  0001AA  0101               	movlb	1	; () banked
  5023  0001AC  133E               	iorwf	printf@flag& (0+255),f,b
  5024  0001AE                     l7425:
  5025                           
  5026                           ; BSR set to: 1
  5027                           ;doprnt.c: 834: }
  5028                           ;doprnt.c: 835: exp = 0;
  5029  0001AE  0E00               	movlw	0
  5030  0001B0  0101               	movlb	1	; () banked
  5031  0001B2  6F39               	movwf	(printf@exp+1)& (0+255),b
  5032  0001B4  0E00               	movlw	0
  5033  0001B6  6F38               	movwf	printf@exp& (0+255),b
  5034                           
  5035                           ; BSR set to: 1
  5036                           ;doprnt.c: 836: if( fval!=0) {
  5037  0001B8  0101               	movlb	1	; () banked
  5038  0001BA  5140               	movf	printf@fval& (0+255),w,b
  5039  0001BC  0101               	movlb	1	; () banked
  5040  0001BE  1141               	iorwf	(printf@fval+1)& (0+255),w,b
  5041  0001C0  0101               	movlb	1	; () banked
  5042  0001C2  1142               	iorwf	(printf@fval+2)& (0+255),w,b
  5043  0001C4  B4D8               	btfsc	status,2,c
  5044  0001C6  D09B               	goto	l7453
  5045                           
  5046                           ; BSR set to: 1
  5047                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5048  0001C8  0E82               	movlw	130
  5049  0001CA  0101               	movlb	1	; () banked
  5050  0001CC  6F24               	movwf	??_printf& (0+255),b
  5051  0001CE  0EFF               	movlw	255
  5052  0001D0  0101               	movlb	1	; () banked
  5053  0001D2  6F25               	movwf	(??_printf+1)& (0+255),b
  5054  0001D4  C140  F126         	movff	printf@fval,??_printf+2
  5055  0001D8  C141  F127         	movff	printf@fval+1,??_printf+3
  5056  0001DC  C142  F128         	movff	printf@fval+2,??_printf+4
  5057  0001E0  C143  F129         	movff	printf@fval+3,??_printf+5
  5058  0001E4  0E10               	movlw	16
  5059  0001E6  D006               	goto	u8460
  5060  0001E8                     u8465:
  5061  0001E8  0101               	movlb	1	; () banked
  5062  0001EA  90D8               	bcf	status,0,c
  5063  0001EC  3329               	rrcf	(??_printf+5)& (0+255),f,b
  5064  0001EE  3328               	rrcf	(??_printf+4)& (0+255),f,b
  5065  0001F0  3327               	rrcf	(??_printf+3)& (0+255),f,b
  5066  0001F2  3326               	rrcf	(??_printf+2)& (0+255),f,b
  5067  0001F4                     u8460:
  5068  0001F4  2EE8               	decfsz	wreg,f,c
  5069  0001F6  D7F8               	goto	u8465
  5070  0001F8  0101               	movlb	1	; () banked
  5071  0001FA  5126               	movf	(??_printf+2)& (0+255),w,b
  5072  0001FC  0101               	movlb	1	; () banked
  5073  0001FE  2524               	addwf	??_printf& (0+255),w,b
  5074  000200  0101               	movlb	1	; () banked
  5075  000202  6F38               	movwf	printf@exp& (0+255),b
  5076  000204  0E00               	movlw	0
  5077  000206  0101               	movlb	1	; () banked
  5078  000208  2125               	addwfc	(??_printf+1)& (0+255),w,b
  5079  00020A  0101               	movlb	1	; () banked
  5080  00020C  6F39               	movwf	(printf@exp+1)& (0+255),b
  5081                           
  5082                           ; BSR set to: 1
  5083                           ;doprnt.c: 838: exp--;
  5084  00020E  0101               	movlb	1	; () banked
  5085  000210  0738               	decf	printf@exp& (0+255),f,b
  5086  000212  A0D8               	btfss	status,0,c
  5087  000214  0739               	decf	(printf@exp+1)& (0+255),f,b
  5088                           
  5089                           ; BSR set to: 1
  5090                           ;doprnt.c: 839: exp *= 3;
  5091  000216  C138  F0AC         	movff	printf@exp,___wmul@multiplier
  5092  00021A  C139  F0AD         	movff	printf@exp+1,___wmul@multiplier+1
  5093  00021E  0E00               	movlw	0
  5094  000220  0100               	movlb	0	; () banked
  5095  000222  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5096  000224  0E03               	movlw	3
  5097  000226  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  5098  000228  ECD1  F02B         	call	___wmul	;wreg free
  5099  00022C  C0AC  F138         	movff	?___wmul,printf@exp
  5100  000230  C0AD  F139         	movff	?___wmul+1,printf@exp+1
  5101                           
  5102                           ;doprnt.c: 840: exp /= 10;
  5103  000234  C138  F0A4         	movff	printf@exp,___awdiv@dividend
  5104  000238  C139  F0A5         	movff	printf@exp+1,___awdiv@dividend+1
  5105  00023C  0E00               	movlw	0
  5106  00023E  0100               	movlb	0	; () banked
  5107  000240  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  5108  000242  0E0A               	movlw	10
  5109  000244  6FA6               	movwf	___awdiv@divisor& (0+255),b
  5110  000246  EC58  F026         	call	___awdiv	;wreg free
  5111  00024A  C0A4  F138         	movff	?___awdiv,printf@exp
  5112  00024E  C0A5  F139         	movff	?___awdiv+1,printf@exp+1
  5113                           
  5114                           ;doprnt.c: 841: if(exp < 0)
  5115  000252  0101               	movlb	1	; () banked
  5116  000254  AF39               	btfss	(printf@exp+1)& (0+255),7,b
  5117  000256  D004               	goto	l7441
  5118                           
  5119                           ; BSR set to: 1
  5120                           ;doprnt.c: 842: exp--;
  5121  000258  0101               	movlb	1	; () banked
  5122  00025A  0738               	decf	printf@exp& (0+255),f,b
  5123  00025C  A0D8               	btfss	status,0,c
  5124  00025E  0739               	decf	(printf@exp+1)& (0+255),f,b
  5125  000260                     l7441:
  5126                           
  5127                           ; BSR set to: 1
  5128                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5129  000260  0101               	movlb	1	; () banked
  5130  000262  5138               	movf	printf@exp& (0+255),w,b
  5131  000264  0800               	sublw	0
  5132  000266  ECED  F00A         	call	_scale
  5133  00026A  C100  F132         	movff	?_scale,printf@tmpval
  5134  00026E  C101  F133         	movff	?_scale+1,printf@tmpval+1
  5135  000272  C102  F134         	movff	?_scale+2,printf@tmpval+2
  5136                           
  5137                           ;doprnt.c: 847: tmpval.integ *= fval;
  5138  000276  C132  F0B2         	movff	printf@tmpval,___ftmul@f1
  5139  00027A  C133  F0B3         	movff	printf@tmpval+1,___ftmul@f1+1
  5140  00027E  C134  F0B4         	movff	printf@tmpval+2,___ftmul@f1+2
  5141  000282  C140  F0B5         	movff	printf@fval,___ftmul@f2
  5142  000286  C141  F0B6         	movff	printf@fval+1,___ftmul@f2+1
  5143  00028A  C142  F0B7         	movff	printf@fval+2,___ftmul@f2+2
  5144  00028E  EC42  F01C         	call	___ftmul	;wreg free
  5145  000292  C0B2  F132         	movff	?___ftmul,printf@tmpval
  5146  000296  C0B3  F133         	movff	?___ftmul+1,printf@tmpval+1
  5147  00029A  C0B4  F134         	movff	?___ftmul+2,printf@tmpval+2
  5148                           
  5149                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5150  00029E  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5151  0002A2  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5152  0002A6  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5153  0002AA  0E00               	movlw	0
  5154  0002AC  0100               	movlb	0	; () banked
  5155  0002AE  6FB8               	movwf	___ftge@ff2& (0+255),b
  5156  0002B0  0E80               	movlw	128
  5157  0002B2  0100               	movlb	0	; () banked
  5158  0002B4  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5159  0002B6  0E3F               	movlw	63
  5160  0002B8  0100               	movlb	0	; () banked
  5161  0002BA  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5162  0002BC  EC91  F025         	call	___ftge	;wreg free
  5163  0002C0  0100               	movlb	0	; () banked
  5164  0002C2  B0D8               	btfsc	status,0,c
  5165  0002C4  D005               	goto	l7449
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 849: exp--;
  5169  0002C6  0101               	movlb	1	; () banked
  5170  0002C8  0738               	decf	printf@exp& (0+255),f,b
  5171  0002CA  A0D8               	btfss	status,0,c
  5172  0002CC  0739               	decf	(printf@exp+1)& (0+255),f,b
  5173  0002CE  D017               	goto	l7453
  5174  0002D0                     l7449:
  5175                           
  5176                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5177  0002D0  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5178  0002D4  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5179  0002D8  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5180  0002DC  0E00               	movlw	0
  5181  0002DE  0100               	movlb	0	; () banked
  5182  0002E0  6FB8               	movwf	___ftge@ff2& (0+255),b
  5183  0002E2  0E20               	movlw	32
  5184  0002E4  0100               	movlb	0	; () banked
  5185  0002E6  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5186  0002E8  0E41               	movlw	65
  5187  0002EA  0100               	movlb	0	; () banked
  5188  0002EC  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5189  0002EE  EC91  F025         	call	___ftge	;wreg free
  5190  0002F2  0100               	movlb	0	; () banked
  5191  0002F4  A0D8               	btfss	status,0,c
  5192  0002F6  D003               	goto	l7453
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;doprnt.c: 851: exp++;
  5196  0002F8  0101               	movlb	1	; () banked
  5197  0002FA  4B38               	infsnz	printf@exp& (0+255),f,b
  5198  0002FC  2B39               	incf	(printf@exp+1)& (0+255),f,b
  5199  0002FE                     l7453:
  5200                           
  5201                           ;doprnt.c: 852: }
  5202                           ;doprnt.c: 1112: if(prec <= 12)
  5203  0002FE  0101               	movlb	1	; () banked
  5204  000300  BF31               	btfsc	(printf@prec+1)& (0+255),7,b
  5205  000302  D008               	goto	l7455
  5206  000304  0101               	movlb	1	; () banked
  5207  000306  5131               	movf	(printf@prec+1)& (0+255),w,b
  5208  000308  E11D               	bnz	l7457
  5209  00030A  0E0D               	movlw	13
  5210  00030C  0101               	movlb	1	; () banked
  5211  00030E  5D30               	subwf	printf@prec& (0+255),w,b
  5212  000310  B0D8               	btfsc	status,0,c
  5213  000312  D018               	goto	l7457
  5214  000314                     l7455:
  5215                           
  5216                           ; BSR set to: 1
  5217                           ;doprnt.c: 1113: fval += fround(prec);
  5218  000314  C140  F10A         	movff	printf@fval,___ftadd@f1
  5219  000318  C141  F10B         	movff	printf@fval+1,___ftadd@f1+1
  5220  00031C  C142  F10C         	movff	printf@fval+2,___ftadd@f1+2
  5221  000320  0101               	movlb	1	; () banked
  5222  000322  5130               	movf	printf@prec& (0+255),w,b
  5223  000324  ECA5  F013         	call	_fround
  5224  000328  C100  F10D         	movff	?_fround,___ftadd@f2
  5225  00032C  C101  F10E         	movff	?_fround+1,___ftadd@f2+1
  5226  000330  C102  F10F         	movff	?_fround+2,___ftadd@f2+2
  5227  000334  ECFB  F014         	call	___ftadd	;wreg free
  5228  000338  C10A  F140         	movff	?___ftadd,printf@fval
  5229  00033C  C10B  F141         	movff	?___ftadd+1,printf@fval+1
  5230  000340  C10C  F142         	movff	?___ftadd+2,printf@fval+2
  5231  000344                     l7457:
  5232                           
  5233                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5234  000344  0101               	movlb	1	; () banked
  5235  000346  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5236  000348  D008               	goto	l7459
  5237  00034A  0101               	movlb	1	; () banked
  5238  00034C  5139               	movf	(printf@exp+1)& (0+255),w,b
  5239  00034E  E12A               	bnz	l7465
  5240  000350  0E0A               	movlw	10
  5241  000352  0101               	movlb	1	; () banked
  5242  000354  5D38               	subwf	printf@exp& (0+255),w,b
  5243  000356  B0D8               	btfsc	status,0,c
  5244  000358  D025               	goto	l7465
  5245  00035A                     l7459:
  5246                           
  5247                           ; BSR set to: 1
  5248  00035A  0101               	movlb	1	; () banked
  5249  00035C  5140               	movf	printf@fval& (0+255),w,b
  5250  00035E  0101               	movlb	1	; () banked
  5251  000360  1141               	iorwf	(printf@fval+1)& (0+255),w,b
  5252  000362  0101               	movlb	1	; () banked
  5253  000364  1142               	iorwf	(printf@fval+2)& (0+255),w,b
  5254  000366  B4D8               	btfsc	status,2,c
  5255  000368  D063               	goto	l7479
  5256                           
  5257                           ; BSR set to: 1
  5258  00036A  C140  F107         	movff	printf@fval,___fttol@f1
  5259  00036E  C141  F108         	movff	printf@fval+1,___fttol@f1+1
  5260  000372  C142  F109         	movff	printf@fval+2,___fttol@f1+2
  5261  000376  EC97  F01D         	call	___fttol	;wreg free
  5262  00037A  0101               	movlb	1	; () banked
  5263  00037C  5107               	movf	?___fttol& (0+255),w,b
  5264  00037E  0101               	movlb	1	; () banked
  5265  000380  1108               	iorwf	(?___fttol+1)& (0+255),w,b
  5266  000382  0101               	movlb	1	; () banked
  5267  000384  1109               	iorwf	(?___fttol+2)& (0+255),w,b
  5268  000386  0101               	movlb	1	; () banked
  5269  000388  110A               	iorwf	(?___fttol+3)& (0+255),w,b
  5270  00038A  A4D8               	btfss	status,2,c
  5271  00038C  D051               	goto	l7479
  5272                           
  5273                           ; BSR set to: 1
  5274  00038E  0101               	movlb	1	; () banked
  5275  000390  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5276  000392  D04E               	goto	l7479
  5277  000394  0101               	movlb	1	; () banked
  5278  000396  5139               	movf	(printf@exp+1)& (0+255),w,b
  5279  000398  E105               	bnz	l7465
  5280  00039A  0E02               	movlw	2
  5281  00039C  0101               	movlb	1	; () banked
  5282  00039E  5D38               	subwf	printf@exp& (0+255),w,b
  5283  0003A0  A0D8               	btfss	status,0,c
  5284  0003A2  D046               	goto	l7479
  5285  0003A4                     l7465:
  5286                           
  5287                           ; BSR set to: 1
  5288                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5289  0003A4  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5290  0003A8  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5291  0003AC  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5292  0003B0  0E70               	movlw	112
  5293  0003B2  0100               	movlb	0	; () banked
  5294  0003B4  6FB8               	movwf	___ftge@ff2& (0+255),b
  5295  0003B6  0E89               	movlw	137
  5296  0003B8  0100               	movlb	0	; () banked
  5297  0003BA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5298  0003BC  0E40               	movlw	64
  5299  0003BE  0100               	movlb	0	; () banked
  5300  0003C0  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5301  0003C2  EC91  F025         	call	___ftge	;wreg free
  5302  0003C6  0100               	movlb	0	; () banked
  5303  0003C8  B0D8               	btfsc	status,0,c
  5304  0003CA  D003               	goto	l7469
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5308  0003CC  0101               	movlb	1	; () banked
  5309  0003CE  0EF7               	movlw	247
  5310  0003D0  D002               	goto	L12
  5311  0003D2                     l7469:
  5312                           
  5313                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5314  0003D2  0101               	movlb	1	; () banked
  5315  0003D4  0EF8               	movlw	248
  5316  0003D6                     L12:
  5317  0003D6  2738               	addwf	printf@exp& (0+255),f,b
  5318  0003D8  0EFF               	movlw	255
  5319  0003DA  2339               	addwfc	(printf@exp+1)& (0+255),f,b
  5320                           
  5321                           ; BSR set to: 1
  5322                           ;doprnt.c: 1124: }
  5323                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5324                           
  5325                           ; BSR set to: 1
  5326  0003DC  0101               	movlb	1	; () banked
  5327  0003DE  5138               	movf	printf@exp& (0+255),w,b
  5328  0003E0  ECED  F00A         	call	_scale
  5329  0003E4  C100  F132         	movff	?_scale,printf@tmpval
  5330  0003E8  C101  F133         	movff	?_scale+1,printf@tmpval+1
  5331  0003EC  C102  F134         	movff	?_scale+2,printf@tmpval+2
  5332                           
  5333                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5334  0003F0  C140  F09E         	movff	printf@fval,__tdiv_to_l_@f1
  5335  0003F4  C141  F09F         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5336  0003F8  C142  F0A0         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5337  0003FC  C132  F0A1         	movff	printf@tmpval,__tdiv_to_l_@f2
  5338  000400  C133  F0A2         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5339  000404  C134  F0A3         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5340  000408  ECF4  F019         	call	__tdiv_to_l_	;wreg free
  5341  00040C  C09E  F13A         	movff	?__tdiv_to_l_,printf@val
  5342  000410  C09F  F13B         	movff	?__tdiv_to_l_+1,printf@val+1
  5343  000414  C0A0  F13C         	movff	?__tdiv_to_l_+2,printf@val+2
  5344  000418  C0A1  F13D         	movff	?__tdiv_to_l_+3,printf@val+3
  5345                           
  5346                           ;doprnt.c: 1129: fval = 0.0;
  5347  00041C  0E00               	movlw	0
  5348  00041E  0101               	movlb	1	; () banked
  5349  000420  6F40               	movwf	printf@fval& (0+255),b
  5350  000422  0E00               	movlw	0
  5351  000424  0101               	movlb	1	; () banked
  5352  000426  6F41               	movwf	(printf@fval+1)& (0+255),b
  5353  000428  0E00               	movlw	0
  5354  00042A  0101               	movlb	1	; () banked
  5355  00042C  6F42               	movwf	(printf@fval+2)& (0+255),b
  5356                           
  5357                           ;doprnt.c: 1130: } else {
  5358  00042E  D033               	goto	l7483
  5359  000430                     l7479:
  5360                           
  5361                           ; BSR set to: 1
  5362                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5363  000430  C140  F107         	movff	printf@fval,___fttol@f1
  5364  000434  C141  F108         	movff	printf@fval+1,___fttol@f1+1
  5365  000438  C142  F109         	movff	printf@fval+2,___fttol@f1+2
  5366  00043C  EC97  F01D         	call	___fttol	;wreg free
  5367  000440  C107  F13A         	movff	?___fttol,printf@val
  5368  000444  C108  F13B         	movff	?___fttol+1,printf@val+1
  5369  000448  C109  F13C         	movff	?___fttol+2,printf@val+2
  5370  00044C  C10A  F13D         	movff	?___fttol+3,printf@val+3
  5371                           
  5372                           ;doprnt.c: 1132: fval -= (double)val;
  5373  000450  C140  F116         	movff	printf@fval,___ftsub@f1
  5374  000454  C141  F117         	movff	printf@fval+1,___ftsub@f1+1
  5375  000458  C142  F118         	movff	printf@fval+2,___ftsub@f1+2
  5376  00045C  C13A  F0A6         	movff	printf@val,___lltoft@c
  5377  000460  C13B  F0A7         	movff	printf@val+1,___lltoft@c+1
  5378  000464  C13C  F0A8         	movff	printf@val+2,___lltoft@c+2
  5379  000468  C13D  F0A9         	movff	printf@val+3,___lltoft@c+3
  5380  00046C  EC1D  F029         	call	___lltoft	;wreg free
  5381  000470  C0A6  F119         	movff	?___lltoft,___ftsub@f2
  5382  000474  C0A7  F11A         	movff	?___lltoft+1,___ftsub@f2+1
  5383  000478  C0A8  F11B         	movff	?___lltoft+2,___ftsub@f2+2
  5384  00047C  EC13  F02B         	call	___ftsub	;wreg free
  5385  000480  C116  F140         	movff	?___ftsub,printf@fval
  5386  000484  C117  F141         	movff	?___ftsub+1,printf@fval+1
  5387  000488  C118  F142         	movff	?___ftsub+2,printf@fval+2
  5388                           
  5389                           ;doprnt.c: 1133: exp = 0;
  5390  00048C  0E00               	movlw	0
  5391  00048E  0101               	movlb	1	; () banked
  5392  000490  6F39               	movwf	(printf@exp+1)& (0+255),b
  5393  000492  0E00               	movlw	0
  5394  000494  6F38               	movwf	printf@exp& (0+255),b
  5395  000496                     l7483:
  5396                           
  5397                           ; BSR set to: 1
  5398                           ;doprnt.c: 1134: }
  5399                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5400  000496  0E01               	movlw	1
  5401  000498  0101               	movlb	1	; () banked
  5402  00049A  6F43               	movwf	printf@c& (0+255),b
  5403  00049C                     l7485:
  5404                           
  5405                           ; BSR set to: 1
  5406  00049C  0E0A               	movlw	10
  5407  00049E  0101               	movlb	1	; () banked
  5408  0004A0  1943               	xorwf	printf@c& (0+255),w,b
  5409  0004A2  B4D8               	btfsc	status,2,c
  5410  0004A4  D01E               	goto	l7497
  5411                           
  5412                           ; BSR set to: 1
  5413                           ;doprnt.c: 1137: if(val < dpowers[c])
  5414                           
  5415                           ; BSR set to: 1
  5416                           
  5417                           ; BSR set to: 1
  5418  0004A6  0101               	movlb	1	; () banked
  5419  0004A8  5143               	movf	printf@c& (0+255),w,b
  5420  0004AA  0D04               	mullw	4
  5421  0004AC  0EB5               	movlw	low _dpowers
  5422  0004AE  24F3               	addwf	prodl,w,c
  5423  0004B0  6EF6               	movwf	tblptrl,c
  5424  0004B2  0EFD               	movlw	high _dpowers
  5425  0004B4  20F4               	addwfc	prodh,w,c
  5426  0004B6  6EF7               	movwf	tblptrh,c
  5427  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  5428  0004B8                     	endif
  5429  0004B8  0009               	tblrd		*+
  5430  0004BA  50F5               	movf	tablat,w,c
  5431  0004BC  0101               	movlb	1	; () banked
  5432  0004BE  5D3A               	subwf	printf@val& (0+255),w,b
  5433  0004C0  0009               	tblrd		*+
  5434  0004C2  50F5               	movf	tablat,w,c
  5435  0004C4  0101               	movlb	1	; () banked
  5436  0004C6  593B               	subwfb	(printf@val+1)& (0+255),w,b
  5437  0004C8  0009               	tblrd		*+
  5438  0004CA  50F5               	movf	tablat,w,c
  5439  0004CC  0101               	movlb	1	; () banked
  5440  0004CE  593C               	subwfb	(printf@val+2)& (0+255),w,b
  5441  0004D0  0009               	tblrd		*+
  5442  0004D2  50F5               	movf	tablat,w,c
  5443  0004D4  0101               	movlb	1	; () banked
  5444  0004D6  593D               	subwfb	(printf@val+3)& (0+255),w,b
  5445  0004D8  A0D8               	btfss	status,0,c
  5446  0004DA  D003               	goto	l7497
  5447                           
  5448                           ; BSR set to: 1
  5449                           
  5450                           ; BSR set to: 1
  5451                           
  5452                           ; BSR set to: 1
  5453                           ;doprnt.c: 1138: break;
  5454  0004DC  0101               	movlb	1	; () banked
  5455  0004DE  2B43               	incf	printf@c& (0+255),f,b
  5456  0004E0  D7DD               	goto	l7485
  5457  0004E2                     l7497:
  5458                           
  5459                           ; BSR set to: 1
  5460                           ;doprnt.c: 1142: width -= prec + c + exp;
  5461  0004E2  C143  F124         	movff	printf@c,??_printf
  5462  0004E6  0101               	movlb	1	; () banked
  5463  0004E8  6B25               	clrf	(??_printf+1)& (0+255),b
  5464  0004EA  BF24               	btfsc	??_printf& (0+255),7,b
  5465  0004EC  0725               	decf	(??_printf+1)& (0+255),f,b
  5466  0004EE  0101               	movlb	1	; () banked
  5467  0004F0  5130               	movf	printf@prec& (0+255),w,b
  5468  0004F2  0101               	movlb	1	; () banked
  5469  0004F4  2724               	addwf	??_printf& (0+255),f,b
  5470  0004F6  0101               	movlb	1	; () banked
  5471  0004F8  5131               	movf	(printf@prec+1)& (0+255),w,b
  5472  0004FA  0101               	movlb	1	; () banked
  5473  0004FC  2325               	addwfc	(??_printf+1)& (0+255),f,b
  5474  0004FE  0101               	movlb	1	; () banked
  5475  000500  5138               	movf	printf@exp& (0+255),w,b
  5476  000502  0101               	movlb	1	; () banked
  5477  000504  2724               	addwf	??_printf& (0+255),f,b
  5478  000506  0101               	movlb	1	; () banked
  5479  000508  5139               	movf	(printf@exp+1)& (0+255),w,b
  5480  00050A  0101               	movlb	1	; () banked
  5481  00050C  2325               	addwfc	(??_printf+1)& (0+255),f,b
  5482  00050E  0101               	movlb	1	; () banked
  5483  000510  5124               	movf	??_printf& (0+255),w,b
  5484  000512  0101               	movlb	1	; () banked
  5485  000514  5F36               	subwf	printf@width& (0+255),f,b
  5486  000516  0101               	movlb	1	; () banked
  5487  000518  5125               	movf	(??_printf+1)& (0+255),w,b
  5488  00051A  0101               	movlb	1	; () banked
  5489  00051C  5B37               	subwfb	(printf@width+1)& (0+255),f,b
  5490                           
  5491                           ;doprnt.c: 1143: if(
  5492                           ;doprnt.c: 1147: prec)
  5493  00051E  0101               	movlb	1	; () banked
  5494  000520  5130               	movf	printf@prec& (0+255),w,b
  5495  000522  0101               	movlb	1	; () banked
  5496  000524  1131               	iorwf	(printf@prec+1)& (0+255),w,b
  5497  000526  B4D8               	btfsc	status,2,c
  5498  000528  D004               	goto	l7501
  5499                           
  5500                           ; BSR set to: 1
  5501                           ;doprnt.c: 1148: width--;
  5502  00052A  0101               	movlb	1	; () banked
  5503  00052C  0736               	decf	printf@width& (0+255),f,b
  5504  00052E  A0D8               	btfss	status,0,c
  5505  000530  0737               	decf	(printf@width+1)& (0+255),f,b
  5506  000532                     l7501:
  5507                           
  5508                           ; BSR set to: 1
  5509                           ;doprnt.c: 1149: if(flag & 0x03)
  5510  000532  0E03               	movlw	3
  5511  000534  0101               	movlb	1	; () banked
  5512  000536  153E               	andwf	printf@flag& (0+255),w,b
  5513  000538  0101               	movlb	1	; () banked
  5514  00053A  6F24               	movwf	??_printf& (0+255),b
  5515  00053C  0E00               	movlw	0
  5516  00053E  0101               	movlb	1	; () banked
  5517  000540  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5518  000542  0101               	movlb	1	; () banked
  5519  000544  6F25               	movwf	(??_printf+1)& (0+255),b
  5520  000546  0101               	movlb	1	; () banked
  5521  000548  5124               	movf	??_printf& (0+255),w,b
  5522  00054A  0101               	movlb	1	; () banked
  5523  00054C  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5524  00054E  B4D8               	btfsc	status,2,c
  5525  000550  D004               	goto	l7505
  5526                           
  5527                           ; BSR set to: 1
  5528                           ;doprnt.c: 1150: width--;
  5529  000552  0101               	movlb	1	; () banked
  5530  000554  0736               	decf	printf@width& (0+255),f,b
  5531  000556  A0D8               	btfss	status,0,c
  5532  000558  0737               	decf	(printf@width+1)& (0+255),f,b
  5533  00055A                     l7505:
  5534                           
  5535                           ; BSR set to: 1
  5536                           ;doprnt.c: 1153: if(flag & 0x04) {
  5537  00055A  0101               	movlb	1	; () banked
  5538  00055C  A53E               	btfss	printf@flag& (0+255),2,b
  5539  00055E  D02D               	goto	l7521
  5540                           
  5541                           ; BSR set to: 1
  5542                           ;doprnt.c: 1157: if(flag & 0x03)
  5543  000560  0E03               	movlw	3
  5544  000562  0101               	movlb	1	; () banked
  5545  000564  153E               	andwf	printf@flag& (0+255),w,b
  5546  000566  0101               	movlb	1	; () banked
  5547  000568  6F24               	movwf	??_printf& (0+255),b
  5548  00056A  0E00               	movlw	0
  5549  00056C  0101               	movlb	1	; () banked
  5550  00056E  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5551  000570  0101               	movlb	1	; () banked
  5552  000572  6F25               	movwf	(??_printf+1)& (0+255),b
  5553  000574  0101               	movlb	1	; () banked
  5554  000576  5124               	movf	??_printf& (0+255),w,b
  5555  000578  0101               	movlb	1	; () banked
  5556  00057A  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5557  00057C  B4D8               	btfsc	status,2,c
  5558  00057E  D00B               	goto	l7515
  5559                           
  5560                           ; BSR set to: 1
  5561                           ;doprnt.c: 1159: (putch('-') );
  5562  000580  0E2D               	movlw	45
  5563  000582  ECBC  F02C         	call	_putch
  5564                           
  5565                           ;doprnt.c: 1168: while(width > 0) {
  5566  000586  D007               	goto	l7515
  5567  000588                     l7511:
  5568                           
  5569                           ;doprnt.c: 1169: (putch('0') );
  5570  000588  0E30               	movlw	48
  5571  00058A  ECBC  F02C         	call	_putch
  5572                           
  5573                           ;doprnt.c: 1170: width--;
  5574  00058E  0101               	movlb	1	; () banked
  5575  000590  0736               	decf	printf@width& (0+255),f,b
  5576  000592  A0D8               	btfss	status,0,c
  5577  000594  0737               	decf	(printf@width+1)& (0+255),f,b
  5578  000596                     l7515:
  5579  000596  0101               	movlb	1	; () banked
  5580  000598  BF37               	btfsc	(printf@width+1)& (0+255),7,b
  5581  00059A  D074               	goto	l7533
  5582  00059C  0101               	movlb	1	; () banked
  5583  00059E  5137               	movf	(printf@width+1)& (0+255),w,b
  5584  0005A0  E1F3               	bnz	l7511
  5585  0005A2  0101               	movlb	1	; () banked
  5586  0005A4  0536               	decf	printf@width& (0+255),w,b
  5587  0005A6  A0D8               	btfss	status,0,c
  5588  0005A8  D06D               	goto	l7533
  5589  0005AA  D7EE               	goto	l7511
  5590  0005AC                     l7517:
  5591                           
  5592                           ; BSR set to: 1
  5593                           ;doprnt.c: 1181: (putch(' ') );
  5594  0005AC  0E20               	movlw	32
  5595  0005AE  ECBC  F02C         	call	_putch
  5596                           
  5597                           ;doprnt.c: 1182: width--;
  5598  0005B2  0101               	movlb	1	; () banked
  5599  0005B4  0736               	decf	printf@width& (0+255),f,b
  5600  0005B6  A0D8               	btfss	status,0,c
  5601  0005B8  0737               	decf	(printf@width+1)& (0+255),f,b
  5602  0005BA                     l7521:
  5603                           
  5604                           ; BSR set to: 1
  5605  0005BA  0101               	movlb	1	; () banked
  5606  0005BC  BF37               	btfsc	(printf@width+1)& (0+255),7,b
  5607  0005BE  D007               	goto	l7523
  5608  0005C0  0101               	movlb	1	; () banked
  5609  0005C2  5137               	movf	(printf@width+1)& (0+255),w,b
  5610  0005C4  E1F3               	bnz	l7517
  5611  0005C6  0101               	movlb	1	; () banked
  5612  0005C8  0536               	decf	printf@width& (0+255),w,b
  5613  0005CA  B0D8               	btfsc	status,0,c
  5614  0005CC  D7EF               	goto	l7517
  5615  0005CE                     l7523:
  5616                           
  5617                           ; BSR set to: 1
  5618                           ;doprnt.c: 1183: }
  5619                           ;doprnt.c: 1188: if(flag & 0x03)
  5620  0005CE  0E03               	movlw	3
  5621  0005D0  0101               	movlb	1	; () banked
  5622  0005D2  153E               	andwf	printf@flag& (0+255),w,b
  5623  0005D4  0101               	movlb	1	; () banked
  5624  0005D6  6F24               	movwf	??_printf& (0+255),b
  5625  0005D8  0E00               	movlw	0
  5626  0005DA  0101               	movlb	1	; () banked
  5627  0005DC  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5628  0005DE  0101               	movlb	1	; () banked
  5629  0005E0  6F25               	movwf	(??_printf+1)& (0+255),b
  5630  0005E2  0101               	movlb	1	; () banked
  5631  0005E4  5124               	movf	??_printf& (0+255),w,b
  5632  0005E6  0101               	movlb	1	; () banked
  5633  0005E8  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5634  0005EA  B4D8               	btfsc	status,2,c
  5635  0005EC  D04B               	goto	l7533
  5636                           
  5637                           ; BSR set to: 1
  5638                           ;doprnt.c: 1190: (putch('-') );
  5639  0005EE  0E2D               	movlw	45
  5640  0005F0  ECBC  F02C         	call	_putch
  5641                           
  5642                           ;doprnt.c: 1195: }
  5643                           ;doprnt.c: 1196: while(c--) {
  5644  0005F4  D047               	goto	l7533
  5645  0005F6                     l7527:
  5646                           
  5647                           ;doprnt.c: 1200: {
  5648                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5649  0005F6  C13A  F09E         	movff	printf@val,___lldiv@dividend
  5650  0005FA  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  5651  0005FE  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  5652  000602  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  5653  000606  0101               	movlb	1	; () banked
  5654  000608  5143               	movf	printf@c& (0+255),w,b
  5655  00060A  0D04               	mullw	4
  5656  00060C  0EB5               	movlw	low _dpowers
  5657  00060E  24F3               	addwf	prodl,w,c
  5658  000610  6EF6               	movwf	tblptrl,c
  5659  000612  0EFD               	movlw	high _dpowers
  5660  000614  20F4               	addwfc	prodh,w,c
  5661  000616  6EF7               	movwf	tblptrh,c
  5662  000618                     	if	0	;There are less than 3 active tblptr bytes
  5663  000618                     	endif
  5664  000618  0009               	tblrd		*+
  5665  00061A  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  5666  00061E  0009               	tblrd		*+
  5667  000620  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  5668  000624  0009               	tblrd		*+
  5669  000626  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  5670  00062A  000A               	tblrd		*-
  5671  00062C  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  5672  000630  ECB7  F026         	call	___lldiv	;wreg free
  5673  000634  C09E  F132         	movff	?___lldiv,printf@tmpval
  5674  000638  C09F  F133         	movff	?___lldiv+1,printf@tmpval+1
  5675  00063C  C0A0  F134         	movff	?___lldiv+2,printf@tmpval+2
  5676  000640  C0A1  F135         	movff	?___lldiv+3,printf@tmpval+3
  5677                           
  5678                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5679  000644  C132  F0AB         	movff	printf@tmpval,___llmod@dividend
  5680  000648  C133  F0AC         	movff	printf@tmpval+1,___llmod@dividend+1
  5681  00064C  C134  F0AD         	movff	printf@tmpval+2,___llmod@dividend+2
  5682  000650  C135  F0AE         	movff	printf@tmpval+3,___llmod@dividend+3
  5683  000654  0E0A               	movlw	10
  5684  000656  0100               	movlb	0	; () banked
  5685  000658  6FAF               	movwf	___llmod@divisor& (0+255),b
  5686  00065A  0E00               	movlw	0
  5687  00065C  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  5688  00065E  0E00               	movlw	0
  5689  000660  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  5690  000662  0E00               	movlw	0
  5691  000664  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  5692  000666  ECBD  F027         	call	___llmod	;wreg free
  5693  00066A  C0AB  F132         	movff	?___llmod,printf@tmpval
  5694  00066E  C0AC  F133         	movff	?___llmod+1,printf@tmpval+1
  5695  000672  C0AD  F134         	movff	?___llmod+2,printf@tmpval+2
  5696  000676  C0AE  F135         	movff	?___llmod+3,printf@tmpval+3
  5697                           
  5698                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5699  00067A  0101               	movlb	1	; () banked
  5700  00067C  5132               	movf	printf@tmpval& (0+255),w,b
  5701  00067E  0F30               	addlw	48
  5702  000680  ECBC  F02C         	call	_putch
  5703  000684                     l7533:
  5704  000684  0101               	movlb	1	; () banked
  5705  000686  0743               	decf	printf@c& (0+255),f,b
  5706  000688  0101               	movlb	1	; () banked
  5707  00068A  2943               	incf	printf@c& (0+255),w,b
  5708  00068C  B4D8               	btfsc	status,2,c
  5709  00068E  D008               	goto	l7539
  5710  000690  D7B2               	goto	l7527
  5711  000692                     l7535:
  5712                           
  5713                           ; BSR set to: 1
  5714                           ;doprnt.c: 1208: (putch('0') );
  5715  000692  0E30               	movlw	48
  5716  000694  ECBC  F02C         	call	_putch
  5717                           
  5718                           ;doprnt.c: 1209: exp--;
  5719  000698  0101               	movlb	1	; () banked
  5720  00069A  0738               	decf	printf@exp& (0+255),f,b
  5721  00069C  A0D8               	btfss	status,0,c
  5722  00069E  0739               	decf	(printf@exp+1)& (0+255),f,b
  5723  0006A0                     l7539:
  5724                           
  5725                           ; BSR set to: 1
  5726  0006A0  0101               	movlb	1	; () banked
  5727  0006A2  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5728  0006A4  D007               	goto	l7541
  5729  0006A6  0101               	movlb	1	; () banked
  5730  0006A8  5139               	movf	(printf@exp+1)& (0+255),w,b
  5731  0006AA  E1F3               	bnz	l7535
  5732  0006AC  0101               	movlb	1	; () banked
  5733  0006AE  0538               	decf	printf@exp& (0+255),w,b
  5734  0006B0  B0D8               	btfsc	status,0,c
  5735  0006B2  D7EF               	goto	l7535
  5736  0006B4                     l7541:
  5737                           
  5738                           ; BSR set to: 1
  5739                           ;doprnt.c: 1210: }
  5740                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5741  0006B4  0101               	movlb	1	; () banked
  5742  0006B6  BF31               	btfsc	(printf@prec+1)& (0+255),7,b
  5743  0006B8  D00C               	goto	l564
  5744  0006BA  0101               	movlb	1	; () banked
  5745  0006BC  5131               	movf	(printf@prec+1)& (0+255),w,b
  5746  0006BE  E105               	bnz	u8680
  5747  0006C0  0E09               	movlw	9
  5748  0006C2  0101               	movlb	1	; () banked
  5749  0006C4  5D30               	subwf	printf@prec& (0+255),w,b
  5750  0006C6  A0D8               	btfss	status,0,c
  5751  0006C8  D004               	goto	l564
  5752  0006CA                     u8680:
  5753                           
  5754                           ; BSR set to: 1
  5755                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5756  0006CA  0E08               	movlw	8
  5757  0006CC  0101               	movlb	1	; () banked
  5758  0006CE  6F43               	movwf	printf@c& (0+255),b
  5759  0006D0  D002               	goto	l7545
  5760  0006D2                     l564:
  5761                           
  5762                           ; BSR set to: 1
  5763                           ;doprnt.c: 1213: else
  5764                           ;doprnt.c: 1214: c = prec;
  5765  0006D2  C130  F143         	movff	printf@prec,printf@c
  5766  0006D6                     l7545:
  5767                           
  5768                           ; BSR set to: 1
  5769                           ;doprnt.c: 1215: prec -= c;
  5770  0006D6  0101               	movlb	1	; () banked
  5771  0006D8  5143               	movf	printf@c& (0+255),w,b
  5772  0006DA  0101               	movlb	1	; () banked
  5773  0006DC  5F30               	subwf	printf@prec& (0+255),f,b
  5774  0006DE  0E00               	movlw	0
  5775  0006E0  0101               	movlb	1	; () banked
  5776  0006E2  BF43               	btfsc	printf@c& (0+255),7,b
  5777  0006E4  0EFF               	movlw	255
  5778  0006E6  0101               	movlb	1	; () banked
  5779  0006E8  5B31               	subwfb	(printf@prec+1)& (0+255),f,b
  5780                           
  5781                           ; BSR set to: 1
  5782                           ;doprnt.c: 1219: if(c)
  5783  0006EA  0101               	movlb	1	; () banked
  5784  0006EC  5143               	movf	printf@c& (0+255),w,b
  5785  0006EE  0101               	movlb	1	; () banked
  5786  0006F0  B4D8               	btfsc	status,2,c
  5787  0006F2  D003               	goto	l7551
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;doprnt.c: 1221: (putch('.') );
  5791  0006F4  0E2E               	movlw	46
  5792  0006F6  ECBC  F02C         	call	_putch
  5793  0006FA                     l7551:
  5794                           
  5795                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5796  0006FA  0101               	movlb	1	; () banked
  5797  0006FC  5143               	movf	printf@c& (0+255),w,b
  5798  0006FE  ECED  F00A         	call	_scale
  5799  000702  C100  F12A         	movff	?_scale,_printf$1309
  5800  000706  C101  F12B         	movff	?_scale+1,_printf$1309+1
  5801  00070A  C102  F12C         	movff	?_scale+2,_printf$1309+2
  5802                           
  5803                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5804  00070E  C140  F0B5         	movff	printf@fval,___ftmul@f2
  5805  000712  C141  F0B6         	movff	printf@fval+1,___ftmul@f2+1
  5806  000716  C142  F0B7         	movff	printf@fval+2,___ftmul@f2+2
  5807  00071A  C12A  F0B2         	movff	_printf$1309,___ftmul@f1
  5808  00071E  C12B  F0B3         	movff	_printf$1309+1,___ftmul@f1+1
  5809  000722  C12C  F0B4         	movff	_printf$1309+2,___ftmul@f1+2
  5810  000726  EC42  F01C         	call	___ftmul	;wreg free
  5811  00072A  C0B2  F107         	movff	?___ftmul,___fttol@f1
  5812  00072E  C0B3  F108         	movff	?___ftmul+1,___fttol@f1+1
  5813  000732  C0B4  F109         	movff	?___ftmul+2,___fttol@f1+2
  5814  000736  EC97  F01D         	call	___fttol	;wreg free
  5815  00073A  C107  F13A         	movff	?___fttol,printf@val
  5816  00073E  C108  F13B         	movff	?___fttol+1,printf@val+1
  5817  000742  C109  F13C         	movff	?___fttol+2,printf@val+2
  5818  000746  C10A  F13D         	movff	?___fttol+3,printf@val+3
  5819                           
  5820                           ;doprnt.c: 1228: while(c--) {
  5821  00074A  D06E               	goto	l7561
  5822  00074C                     l7555:
  5823                           
  5824                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5825  00074C  C13A  F09E         	movff	printf@val,___lldiv@dividend
  5826  000750  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  5827  000754  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  5828  000758  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  5829  00075C  0101               	movlb	1	; () banked
  5830  00075E  5143               	movf	printf@c& (0+255),w,b
  5831  000760  0D04               	mullw	4
  5832  000762  0EB5               	movlw	low _dpowers
  5833  000764  24F3               	addwf	prodl,w,c
  5834  000766  6EF6               	movwf	tblptrl,c
  5835  000768  0EFD               	movlw	high _dpowers
  5836  00076A  20F4               	addwfc	prodh,w,c
  5837  00076C  6EF7               	movwf	tblptrh,c
  5838  00076E                     	if	0	;There are less than 3 active tblptr bytes
  5839  00076E                     	endif
  5840  00076E  0009               	tblrd		*+
  5841  000770  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  5842  000774  0009               	tblrd		*+
  5843  000776  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  5844  00077A  0009               	tblrd		*+
  5845  00077C  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  5846  000780  000A               	tblrd		*-
  5847  000782  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  5848  000786  ECB7  F026         	call	___lldiv	;wreg free
  5849  00078A  C09E  F132         	movff	?___lldiv,printf@tmpval
  5850  00078E  C09F  F133         	movff	?___lldiv+1,printf@tmpval+1
  5851  000792  C0A0  F134         	movff	?___lldiv+2,printf@tmpval+2
  5852  000796  C0A1  F135         	movff	?___lldiv+3,printf@tmpval+3
  5853                           
  5854                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5855  00079A  C132  F0AB         	movff	printf@tmpval,___llmod@dividend
  5856  00079E  C133  F0AC         	movff	printf@tmpval+1,___llmod@dividend+1
  5857  0007A2  C134  F0AD         	movff	printf@tmpval+2,___llmod@dividend+2
  5858  0007A6  C135  F0AE         	movff	printf@tmpval+3,___llmod@dividend+3
  5859  0007AA  0E0A               	movlw	10
  5860  0007AC  0100               	movlb	0	; () banked
  5861  0007AE  6FAF               	movwf	___llmod@divisor& (0+255),b
  5862  0007B0  0E00               	movlw	0
  5863  0007B2  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  5864  0007B4  0E00               	movlw	0
  5865  0007B6  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  5866  0007B8  0E00               	movlw	0
  5867  0007BA  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  5868  0007BC  ECBD  F027         	call	___llmod	;wreg free
  5869  0007C0  C0AB  F132         	movff	?___llmod,printf@tmpval
  5870  0007C4  C0AC  F133         	movff	?___llmod+1,printf@tmpval+1
  5871  0007C8  C0AD  F134         	movff	?___llmod+2,printf@tmpval+2
  5872  0007CC  C0AE  F135         	movff	?___llmod+3,printf@tmpval+3
  5873                           
  5874                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5875  0007D0  0101               	movlb	1	; () banked
  5876  0007D2  5132               	movf	printf@tmpval& (0+255),w,b
  5877  0007D4  0F30               	addlw	48
  5878  0007D6  ECBC  F02C         	call	_putch
  5879                           
  5880                           ;doprnt.c: 1232: val %= dpowers[c];
  5881  0007DA  C13A  F0AB         	movff	printf@val,___llmod@dividend
  5882  0007DE  C13B  F0AC         	movff	printf@val+1,___llmod@dividend+1
  5883  0007E2  C13C  F0AD         	movff	printf@val+2,___llmod@dividend+2
  5884  0007E6  C13D  F0AE         	movff	printf@val+3,___llmod@dividend+3
  5885  0007EA  0101               	movlb	1	; () banked
  5886  0007EC  5143               	movf	printf@c& (0+255),w,b
  5887  0007EE  0D04               	mullw	4
  5888  0007F0  0EB5               	movlw	low _dpowers
  5889  0007F2  24F3               	addwf	prodl,w,c
  5890  0007F4  6EF6               	movwf	tblptrl,c
  5891  0007F6  0EFD               	movlw	high _dpowers
  5892  0007F8  20F4               	addwfc	prodh,w,c
  5893  0007FA  6EF7               	movwf	tblptrh,c
  5894  0007FC                     	if	0	;There are less than 3 active tblptr bytes
  5895  0007FC                     	endif
  5896  0007FC  0009               	tblrd		*+
  5897  0007FE  CFF5 F0AF          	movff	tablat,___llmod@divisor
  5898  000802  0009               	tblrd		*+
  5899  000804  CFF5 F0B0          	movff	tablat,___llmod@divisor+1
  5900  000808  0009               	tblrd		*+
  5901  00080A  CFF5 F0B1          	movff	tablat,___llmod@divisor+2
  5902  00080E  000A               	tblrd		*-
  5903  000810  CFF5 F0B2          	movff	tablat,___llmod@divisor+3
  5904  000814  ECBD  F027         	call	___llmod	;wreg free
  5905  000818  C0AB  F13A         	movff	?___llmod,printf@val
  5906  00081C  C0AC  F13B         	movff	?___llmod+1,printf@val+1
  5907  000820  C0AD  F13C         	movff	?___llmod+2,printf@val+2
  5908  000824  C0AE  F13D         	movff	?___llmod+3,printf@val+3
  5909  000828                     l7561:
  5910  000828  0101               	movlb	1	; () banked
  5911  00082A  0743               	decf	printf@c& (0+255),f,b
  5912  00082C  0101               	movlb	1	; () banked
  5913  00082E  2943               	incf	printf@c& (0+255),w,b
  5914  000830  B4D8               	btfsc	status,2,c
  5915  000832  D008               	goto	l7567
  5916  000834  D78B               	goto	l7555
  5917  000836                     l7563:
  5918                           
  5919                           ; BSR set to: 1
  5920                           ;doprnt.c: 1236: (putch('0') );
  5921  000836  0E30               	movlw	48
  5922  000838  ECBC  F02C         	call	_putch
  5923                           
  5924                           ;doprnt.c: 1237: prec--;
  5925  00083C  0101               	movlb	1	; () banked
  5926  00083E  0730               	decf	printf@prec& (0+255),f,b
  5927  000840  A0D8               	btfss	status,0,c
  5928  000842  0731               	decf	(printf@prec+1)& (0+255),f,b
  5929  000844                     l7567:
  5930                           
  5931                           ; BSR set to: 1
  5932  000844  0101               	movlb	1	; () banked
  5933  000846  5130               	movf	printf@prec& (0+255),w,b
  5934  000848  0101               	movlb	1	; () banked
  5935  00084A  1131               	iorwf	(printf@prec+1)& (0+255),w,b
  5936  00084C  B4D8               	btfsc	status,2,c
  5937  00084E  D1C6               	goto	l7667
  5938  000850  D7F2               	goto	l7563
  5939  000852                     l7569:
  5940                           
  5941                           ; BSR set to: 1
  5942                           ;doprnt.c: 1246: }
  5943                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5944  000852  0EC0               	movlw	192
  5945  000854  0101               	movlb	1	; () banked
  5946  000856  153E               	andwf	printf@flag& (0+255),w,b
  5947  000858  0101               	movlb	1	; () banked
  5948  00085A  6F24               	movwf	??_printf& (0+255),b
  5949  00085C  0E00               	movlw	0
  5950  00085E  0101               	movlb	1	; () banked
  5951  000860  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5952  000862  0101               	movlb	1	; () banked
  5953  000864  6F25               	movwf	(??_printf+1)& (0+255),b
  5954  000866  0101               	movlb	1	; () banked
  5955  000868  5124               	movf	??_printf& (0+255),w,b
  5956  00086A  0101               	movlb	1	; () banked
  5957  00086C  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5958  00086E  A4D8               	btfss	status,2,c
  5959  000870  D023               	goto	l7581
  5960                           
  5961                           ; BSR set to: 1
  5962                           ;doprnt.c: 1253: {
  5963                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5964  000872  C12E  FFD9         	movff	printf@ap,fsr2l
  5965  000876  C12F  FFDA         	movff	printf@ap+1,fsr2h
  5966  00087A  CFDE F13A          	movff	postinc2,printf@val
  5967  00087E  CFDD F13B          	movff	postdec2,printf@val+1
  5968  000882  0101               	movlb	1	; () banked
  5969  000884  0E00               	movlw	0
  5970  000886  BF3B               	btfsc	(printf@val+1)& (0+255),7,b
  5971  000888  0EFF               	movlw	-1
  5972  00088A  6F3C               	movwf	(printf@val+2)& (0+255),b
  5973  00088C  6F3D               	movwf	(printf@val+3)& (0+255),b
  5974                           
  5975                           ; BSR set to: 1
  5976  00088E  0E02               	movlw	2
  5977  000890  0101               	movlb	1	; () banked
  5978  000892  272E               	addwf	printf@ap& (0+255),f,b
  5979  000894  0E00               	movlw	0
  5980  000896  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  5981                           
  5982                           ; BSR set to: 1
  5983                           ;doprnt.c: 1261: if((long)val < 0) {
  5984  000898  0101               	movlb	1	; () banked
  5985  00089A  AF3D               	btfss	(printf@val+3)& (0+255),7,b
  5986  00089C  D06E               	goto	l7615
  5987                           
  5988                           ; BSR set to: 1
  5989                           ;doprnt.c: 1262: flag |= 0x03;
  5990  00089E  0E03               	movlw	3
  5991  0008A0  0101               	movlb	1	; () banked
  5992  0008A2  133E               	iorwf	printf@flag& (0+255),f,b
  5993                           
  5994                           ; BSR set to: 1
  5995                           ;doprnt.c: 1263: val = -val;
  5996  0008A4  0101               	movlb	1	; () banked
  5997  0008A6  1F3D               	comf	(printf@val+3)& (0+255),f,b
  5998  0008A8  1F3C               	comf	(printf@val+2)& (0+255),f,b
  5999  0008AA  1F3B               	comf	(printf@val+1)& (0+255),f,b
  6000  0008AC  6D3A               	negf	printf@val& (0+255),b
  6001  0008AE  0E00               	movlw	0
  6002  0008B0  233B               	addwfc	(printf@val+1)& (0+255),f,b
  6003  0008B2  233C               	addwfc	(printf@val+2)& (0+255),f,b
  6004  0008B4  233D               	addwfc	(printf@val+3)& (0+255),f,b
  6005                           
  6006                           ; BSR set to: 1
  6007                           ;doprnt.c: 1264: }
  6008                           ;doprnt.c: 1266: }
  6009  0008B6  D061               	goto	l7615
  6010  0008B8                     l7581:
  6011                           
  6012                           ; BSR set to: 1
  6013                           ;doprnt.c: 1268: else
  6014                           ;doprnt.c: 1273: {
  6015                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6016  0008B8  C12E  FFD9         	movff	printf@ap,fsr2l
  6017  0008BC  C12F  FFDA         	movff	printf@ap+1,fsr2h
  6018  0008C0  CFDE F124          	movff	postinc2,??_printf
  6019  0008C4  CFDD F125          	movff	postdec2,??_printf+1
  6020  0008C8  C124  F13A         	movff	??_printf,printf@val
  6021  0008CC  C125  F13B         	movff	??_printf+1,printf@val+1
  6022  0008D0  0101               	movlb	1	; () banked
  6023  0008D2  6B3C               	clrf	(printf@val+2)& (0+255),b
  6024  0008D4  6B3D               	clrf	(printf@val+3)& (0+255),b
  6025                           
  6026                           ; BSR set to: 1
  6027  0008D6  0E02               	movlw	2
  6028  0008D8  0101               	movlb	1	; () banked
  6029  0008DA  272E               	addwf	printf@ap& (0+255),f,b
  6030  0008DC  0E00               	movlw	0
  6031  0008DE  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;doprnt.c: 1287: }
  6035                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6036  0008E0  D04C               	goto	l7615
  6037  0008E2                     l7585:
  6038                           
  6039                           ; BSR set to: 1
  6040                           ;doprnt.c: 1302: case 0xC0:
  6041                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6042  0008E2  0E01               	movlw	1
  6043  0008E4  0101               	movlb	1	; () banked
  6044  0008E6  6F43               	movwf	printf@c& (0+255),b
  6045  0008E8                     l7587:
  6046                           
  6047                           ; BSR set to: 1
  6048  0008E8  0E0A               	movlw	10
  6049  0008EA  0101               	movlb	1	; () banked
  6050  0008EC  1943               	xorwf	printf@c& (0+255),w,b
  6051  0008EE  B4D8               	btfsc	status,2,c
  6052  0008F0  D050               	goto	l7617
  6053                           
  6054                           ; BSR set to: 1
  6055                           ;doprnt.c: 1306: if(val < dpowers[c])
  6056                           
  6057                           ; BSR set to: 1
  6058                           
  6059                           ; BSR set to: 1
  6060  0008F2  0101               	movlb	1	; () banked
  6061  0008F4  5143               	movf	printf@c& (0+255),w,b
  6062  0008F6  0D04               	mullw	4
  6063  0008F8  0EB5               	movlw	low _dpowers
  6064  0008FA  24F3               	addwf	prodl,w,c
  6065  0008FC  6EF6               	movwf	tblptrl,c
  6066  0008FE  0EFD               	movlw	high _dpowers
  6067  000900  20F4               	addwfc	prodh,w,c
  6068  000902  6EF7               	movwf	tblptrh,c
  6069  000904                     	if	0	;There are less than 3 active tblptr bytes
  6070  000904                     	endif
  6071  000904  0009               	tblrd		*+
  6072  000906  50F5               	movf	tablat,w,c
  6073  000908  0101               	movlb	1	; () banked
  6074  00090A  5D3A               	subwf	printf@val& (0+255),w,b
  6075  00090C  0009               	tblrd		*+
  6076  00090E  50F5               	movf	tablat,w,c
  6077  000910  0101               	movlb	1	; () banked
  6078  000912  593B               	subwfb	(printf@val+1)& (0+255),w,b
  6079  000914  0009               	tblrd		*+
  6080  000916  50F5               	movf	tablat,w,c
  6081  000918  0101               	movlb	1	; () banked
  6082  00091A  593C               	subwfb	(printf@val+2)& (0+255),w,b
  6083  00091C  0009               	tblrd		*+
  6084  00091E  50F5               	movf	tablat,w,c
  6085  000920  0101               	movlb	1	; () banked
  6086  000922  593D               	subwfb	(printf@val+3)& (0+255),w,b
  6087  000924  A0D8               	btfss	status,0,c
  6088  000926  D035               	goto	l7617
  6089                           
  6090                           ; BSR set to: 1
  6091                           
  6092                           ; BSR set to: 1
  6093                           
  6094                           ; BSR set to: 1
  6095                           ;doprnt.c: 1307: break;
  6096  000928  0101               	movlb	1	; () banked
  6097  00092A  2B43               	incf	printf@c& (0+255),f,b
  6098  00092C  D7DD               	goto	l7587
  6099  00092E                     l7599:
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6103  00092E  0E01               	movlw	1
  6104  000930  0101               	movlb	1	; () banked
  6105  000932  6F43               	movwf	printf@c& (0+255),b
  6106  000934                     l7601:
  6107                           
  6108                           ; BSR set to: 1
  6109  000934  0E08               	movlw	8
  6110  000936  0101               	movlb	1	; () banked
  6111  000938  1943               	xorwf	printf@c& (0+255),w,b
  6112  00093A  B4D8               	btfsc	status,2,c
  6113  00093C  D02A               	goto	l7617
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6117                           
  6118                           ; BSR set to: 1
  6119                           
  6120                           ; BSR set to: 1
  6121  00093E  0101               	movlb	1	; () banked
  6122  000940  5143               	movf	printf@c& (0+255),w,b
  6123  000942  0D04               	mullw	4
  6124  000944  0E2B               	movlw	low _hexpowers
  6125  000946  24F3               	addwf	prodl,w,c
  6126  000948  6EF6               	movwf	tblptrl,c
  6127  00094A  0EFE               	movlw	high _hexpowers
  6128  00094C  20F4               	addwfc	prodh,w,c
  6129  00094E  6EF7               	movwf	tblptrh,c
  6130  000950                     	if	0	;There are less than 3 active tblptr bytes
  6131  000950                     	endif
  6132  000950  0009               	tblrd		*+
  6133  000952  50F5               	movf	tablat,w,c
  6134  000954  0101               	movlb	1	; () banked
  6135  000956  5D3A               	subwf	printf@val& (0+255),w,b
  6136  000958  0009               	tblrd		*+
  6137  00095A  50F5               	movf	tablat,w,c
  6138  00095C  0101               	movlb	1	; () banked
  6139  00095E  593B               	subwfb	(printf@val+1)& (0+255),w,b
  6140  000960  0009               	tblrd		*+
  6141  000962  50F5               	movf	tablat,w,c
  6142  000964  0101               	movlb	1	; () banked
  6143  000966  593C               	subwfb	(printf@val+2)& (0+255),w,b
  6144  000968  0009               	tblrd		*+
  6145  00096A  50F5               	movf	tablat,w,c
  6146  00096C  0101               	movlb	1	; () banked
  6147  00096E  593D               	subwfb	(printf@val+3)& (0+255),w,b
  6148  000970  A0D8               	btfss	status,0,c
  6149  000972  D00F               	goto	l7617
  6150                           
  6151                           ; BSR set to: 1
  6152                           
  6153                           ; BSR set to: 1
  6154                           
  6155                           ; BSR set to: 1
  6156                           ;doprnt.c: 1318: break;
  6157  000974  0101               	movlb	1	; () banked
  6158  000976  2B43               	incf	printf@c& (0+255),f,b
  6159  000978  D7DD               	goto	l7601
  6160  00097A                     l7615:
  6161                           
  6162                           ; BSR set to: 1
  6163  00097A  0101               	movlb	1	; () banked
  6164  00097C  513E               	movf	printf@flag& (0+255),w,b
  6165  00097E  0BC0               	andlw	192
  6166                           
  6167                           ; Switch size 1, requested type "space"
  6168                           ; Number of cases is 3, Range of values is 0 to 192
  6169                           ; switch strategies available:
  6170                           ; Name         Instructions Cycles
  6171                           ; simple_byte           10     6 (average)
  6172                           ;	Chosen strategy is simple_byte
  6173  000980  0A00               	xorlw	0	; case 0
  6174  000982  B4D8               	btfsc	status,2,c
  6175  000984  D7AE               	goto	l7585
  6176  000986  0A80               	xorlw	128	; case 128
  6177  000988  B4D8               	btfsc	status,2,c
  6178  00098A  D7D1               	goto	l7599
  6179  00098C  0A40               	xorlw	64	; case 192
  6180  00098E  B4D8               	btfsc	status,2,c
  6181  000990  D7A8               	goto	l7585
  6182  000992                     l7617:
  6183                           
  6184                           ; BSR set to: 1
  6185                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6186  000992  0101               	movlb	1	; () banked
  6187  000994  5136               	movf	printf@width& (0+255),w,b
  6188  000996  0101               	movlb	1	; () banked
  6189  000998  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6190  00099A  B4D8               	btfsc	status,2,c
  6191  00099C  D014               	goto	l7623
  6192                           
  6193                           ; BSR set to: 1
  6194  00099E  0E03               	movlw	3
  6195  0009A0  0101               	movlb	1	; () banked
  6196  0009A2  153E               	andwf	printf@flag& (0+255),w,b
  6197  0009A4  0101               	movlb	1	; () banked
  6198  0009A6  6F24               	movwf	??_printf& (0+255),b
  6199  0009A8  0E00               	movlw	0
  6200  0009AA  0101               	movlb	1	; () banked
  6201  0009AC  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6202  0009AE  0101               	movlb	1	; () banked
  6203  0009B0  6F25               	movwf	(??_printf+1)& (0+255),b
  6204  0009B2  0101               	movlb	1	; () banked
  6205  0009B4  5124               	movf	??_printf& (0+255),w,b
  6206  0009B6  0101               	movlb	1	; () banked
  6207  0009B8  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6208  0009BA  B4D8               	btfsc	status,2,c
  6209  0009BC  D004               	goto	l7623
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;doprnt.c: 1346: width--;
  6213  0009BE  0101               	movlb	1	; () banked
  6214  0009C0  0736               	decf	printf@width& (0+255),f,b
  6215  0009C2  A0D8               	btfss	status,0,c
  6216  0009C4  0737               	decf	(printf@width+1)& (0+255),f,b
  6217  0009C6                     l7623:
  6218                           
  6219                           ; BSR set to: 1
  6220                           ;doprnt.c: 1381: if(width > c)
  6221  0009C6  0E80               	movlw	128
  6222  0009C8  0101               	movlb	1	; () banked
  6223  0009CA  BF43               	btfsc	printf@c& (0+255),7,b
  6224  0009CC  0E7F               	movlw	127
  6225  0009CE  0101               	movlb	1	; () banked
  6226  0009D0  6F24               	movwf	??_printf& (0+255),b
  6227  0009D2  0101               	movlb	1	; () banked
  6228  0009D4  5136               	movf	printf@width& (0+255),w,b
  6229  0009D6  0101               	movlb	1	; () banked
  6230  0009D8  5D43               	subwf	printf@c& (0+255),w,b
  6231  0009DA  0101               	movlb	1	; () banked
  6232  0009DC  5137               	movf	(printf@width+1)& (0+255),w,b
  6233  0009DE  0A80               	xorlw	128
  6234  0009E0  0101               	movlb	1	; () banked
  6235  0009E2  5924               	subwfb	??_printf& (0+255),w,b
  6236  0009E4  B0D8               	btfsc	status,0,c
  6237  0009E6  D00B               	goto	l7627
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;doprnt.c: 1382: width -= c;
  6241  0009E8  0101               	movlb	1	; () banked
  6242  0009EA  5143               	movf	printf@c& (0+255),w,b
  6243  0009EC  0101               	movlb	1	; () banked
  6244  0009EE  5F36               	subwf	printf@width& (0+255),f,b
  6245  0009F0  0E00               	movlw	0
  6246  0009F2  0101               	movlb	1	; () banked
  6247  0009F4  BF43               	btfsc	printf@c& (0+255),7,b
  6248  0009F6  0EFF               	movlw	255
  6249  0009F8  0101               	movlb	1	; () banked
  6250  0009FA  5B37               	subwfb	(printf@width+1)& (0+255),f,b
  6251  0009FC  D005               	goto	l7629
  6252  0009FE                     l7627:
  6253                           
  6254                           ; BSR set to: 1
  6255                           ;doprnt.c: 1383: else
  6256                           ;doprnt.c: 1384: width = 0;
  6257  0009FE  0E00               	movlw	0
  6258  000A00  0101               	movlb	1	; () banked
  6259  000A02  6F37               	movwf	(printf@width+1)& (0+255),b
  6260  000A04  0E00               	movlw	0
  6261  000A06  6F36               	movwf	printf@width& (0+255),b
  6262  000A08                     l7629:
  6263                           
  6264                           ; BSR set to: 1
  6265                           ;doprnt.c: 1387: if(flag & 0x04) {
  6266  000A08  0101               	movlb	1	; () banked
  6267  000A0A  A53E               	btfss	printf@flag& (0+255),2,b
  6268  000A0C  D021               	goto	l7641
  6269                           
  6270                           ; BSR set to: 1
  6271                           ;doprnt.c: 1392: if(flag & 0x03)
  6272  000A0E  0E03               	movlw	3
  6273  000A10  0101               	movlb	1	; () banked
  6274  000A12  153E               	andwf	printf@flag& (0+255),w,b
  6275  000A14  0101               	movlb	1	; () banked
  6276  000A16  6F24               	movwf	??_printf& (0+255),b
  6277  000A18  0E00               	movlw	0
  6278  000A1A  0101               	movlb	1	; () banked
  6279  000A1C  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6280  000A1E  0101               	movlb	1	; () banked
  6281  000A20  6F25               	movwf	(??_printf+1)& (0+255),b
  6282  000A22  0101               	movlb	1	; () banked
  6283  000A24  5124               	movf	??_printf& (0+255),w,b
  6284  000A26  0101               	movlb	1	; () banked
  6285  000A28  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6286  000A2A  B4D8               	btfsc	status,2,c
  6287  000A2C  D003               	goto	l7635
  6288                           
  6289                           ; BSR set to: 1
  6290                           ;doprnt.c: 1393: (putch('-') );
  6291  000A2E  0E2D               	movlw	45
  6292  000A30  ECBC  F02C         	call	_putch
  6293  000A34                     l7635:
  6294                           
  6295                           ;doprnt.c: 1415: if(width)
  6296  000A34  0101               	movlb	1	; () banked
  6297  000A36  5136               	movf	printf@width& (0+255),w,b
  6298  000A38  0101               	movlb	1	; () banked
  6299  000A3A  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6300  000A3C  B4D8               	btfsc	status,2,c
  6301  000A3E  D02E               	goto	l7651
  6302                           
  6303                           ; BSR set to: 1
  6304                           ;doprnt.c: 1417: (putch('0') );
  6305                           
  6306                           ; BSR set to: 1
  6307                           
  6308                           ;doprnt.c: 1416: do
  6309  000A40  0E30               	movlw	48
  6310  000A42  ECBC  F02C         	call	_putch
  6311                           
  6312                           ;doprnt.c: 1418: while(--width);
  6313  000A46  0101               	movlb	1	; () banked
  6314  000A48  0736               	decf	printf@width& (0+255),f,b
  6315  000A4A  A0D8               	btfss	status,0,c
  6316  000A4C  0737               	decf	(printf@width+1)& (0+255),f,b
  6317  000A4E  D7F2               	goto	l7635
  6318  000A50                     l7641:
  6319                           
  6320                           ; BSR set to: 1
  6321                           ;doprnt.c: 1422: {
  6322                           ;doprnt.c: 1424: if(width
  6323                           ;doprnt.c: 1428: )
  6324  000A50  0101               	movlb	1	; () banked
  6325  000A52  5136               	movf	printf@width& (0+255),w,b
  6326  000A54  0101               	movlb	1	; () banked
  6327  000A56  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6328  000A58  B4D8               	btfsc	status,2,c
  6329  000A5A  D00D               	goto	l7647
  6330  000A5C                     l7643:
  6331                           
  6332                           ; BSR set to: 1
  6333                           ;doprnt.c: 1430: (putch(' ') );
  6334  000A5C  0E20               	movlw	32
  6335  000A5E  ECBC  F02C         	call	_putch
  6336                           
  6337                           ;doprnt.c: 1431: while(--width);
  6338  000A62  0101               	movlb	1	; () banked
  6339  000A64  0736               	decf	printf@width& (0+255),f,b
  6340  000A66  A0D8               	btfss	status,0,c
  6341  000A68  0737               	decf	(printf@width+1)& (0+255),f,b
  6342  000A6A  0101               	movlb	1	; () banked
  6343  000A6C  5136               	movf	printf@width& (0+255),w,b
  6344  000A6E  0101               	movlb	1	; () banked
  6345  000A70  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6346  000A72  A4D8               	btfss	status,2,c
  6347  000A74  D7F3               	goto	l7643
  6348  000A76                     l7647:
  6349                           
  6350                           ; BSR set to: 1
  6351                           ;doprnt.c: 1438: if(flag & 0x03)
  6352  000A76  0E03               	movlw	3
  6353  000A78  0101               	movlb	1	; () banked
  6354  000A7A  153E               	andwf	printf@flag& (0+255),w,b
  6355  000A7C  0101               	movlb	1	; () banked
  6356  000A7E  6F24               	movwf	??_printf& (0+255),b
  6357  000A80  0E00               	movlw	0
  6358  000A82  0101               	movlb	1	; () banked
  6359  000A84  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6360  000A86  0101               	movlb	1	; () banked
  6361  000A88  6F25               	movwf	(??_printf+1)& (0+255),b
  6362  000A8A  0101               	movlb	1	; () banked
  6363  000A8C  5124               	movf	??_printf& (0+255),w,b
  6364  000A8E  0101               	movlb	1	; () banked
  6365  000A90  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6366  000A92  B4D8               	btfsc	status,2,c
  6367  000A94  D003               	goto	l7651
  6368                           
  6369                           ; BSR set to: 1
  6370                           ;doprnt.c: 1439: (putch('-') );
  6371  000A96  0E2D               	movlw	45
  6372  000A98  ECBC  F02C         	call	_putch
  6373  000A9C                     l7651:
  6374                           
  6375                           ;doprnt.c: 1469: }
  6376                           ;doprnt.c: 1472: prec = c;
  6377  000A9C  0101               	movlb	1	; () banked
  6378  000A9E  5143               	movf	printf@c& (0+255),w,b
  6379  000AA0  0101               	movlb	1	; () banked
  6380  000AA2  6F30               	movwf	printf@prec& (0+255),b
  6381  000AA4  6B31               	clrf	(printf@prec+1)& (0+255),b
  6382  000AA6  BF30               	btfsc	printf@prec& (0+255),7,b
  6383  000AA8  0731               	decf	(printf@prec+1)& (0+255),f,b
  6384                           
  6385                           ;doprnt.c: 1474: while(prec--) {
  6386  000AAA  D08D               	goto	l7665
  6387  000AAC                     l7653:
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;doprnt.c: 1486: case 0xC0:
  6391                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6392  000AAC  C130  F124         	movff	printf@prec,??_printf
  6393  000AB0  C131  F125         	movff	printf@prec+1,??_printf+1
  6394  000AB4  0101               	movlb	1	; () banked
  6395  000AB6  90D8               	bcf	status,0,c
  6396  000AB8  3724               	rlcf	??_printf& (0+255),f,b
  6397  000ABA  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6398  000ABC  0101               	movlb	1	; () banked
  6399  000ABE  90D8               	bcf	status,0,c
  6400  000AC0  3724               	rlcf	??_printf& (0+255),f,b
  6401  000AC2  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6402  000AC4  0EB5               	movlw	low _dpowers
  6403  000AC6  0101               	movlb	1	; () banked
  6404  000AC8  2524               	addwf	??_printf& (0+255),w,b
  6405  000ACA  6EF6               	movwf	tblptrl,c
  6406  000ACC  0EFD               	movlw	high _dpowers
  6407  000ACE  2125               	addwfc	(??_printf+1)& (0+255),w,b
  6408  000AD0  6EF7               	movwf	tblptrh,c
  6409  000AD2                     	if	0	;There are less than 3 active tblptr bytes
  6410  000AD2                     	endif
  6411  000AD2  0009               	tblrd		*+
  6412  000AD4  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  6413  000AD8  0009               	tblrd		*+
  6414  000ADA  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  6415  000ADE  0009               	tblrd		*+
  6416  000AE0  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  6417  000AE4  000A               	tblrd		*-
  6418  000AE6  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  6419  000AEA  C13A  F09E         	movff	printf@val,___lldiv@dividend
  6420  000AEE  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  6421  000AF2  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  6422  000AF6  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  6423  000AFA  ECB7  F026         	call	___lldiv	;wreg free
  6424  000AFE  C09E  F0AB         	movff	?___lldiv,___llmod@dividend
  6425  000B02  C09F  F0AC         	movff	?___lldiv+1,___llmod@dividend+1
  6426  000B06  C0A0  F0AD         	movff	?___lldiv+2,___llmod@dividend+2
  6427  000B0A  C0A1  F0AE         	movff	?___lldiv+3,___llmod@dividend+3
  6428  000B0E  0E0A               	movlw	10
  6429  000B10  0100               	movlb	0	; () banked
  6430  000B12  6FAF               	movwf	___llmod@divisor& (0+255),b
  6431  000B14  0E00               	movlw	0
  6432  000B16  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  6433  000B18  0E00               	movlw	0
  6434  000B1A  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  6435  000B1C  0E00               	movlw	0
  6436  000B1E  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  6437  000B20  ECBD  F027         	call	___llmod	;wreg free
  6438  000B24  0100               	movlb	0	; () banked
  6439  000B26  51AB               	movf	?___llmod& (0+255),w,b
  6440  000B28  0F30               	addlw	48
  6441  000B2A  0101               	movlb	1	; () banked
  6442  000B2C  6F43               	movwf	printf@c& (0+255),b
  6443                           
  6444                           ;doprnt.c: 1491: break;
  6445  000B2E  D047               	goto	l7663
  6446  000B30                     l7655:
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;doprnt.c: 1499: {
  6450                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6451  000B30  C13A  F09E         	movff	printf@val,___lldiv@dividend
  6452  000B34  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  6453  000B38  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  6454  000B3C  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  6455  000B40  C130  F124         	movff	printf@prec,??_printf
  6456  000B44  C131  F125         	movff	printf@prec+1,??_printf+1
  6457  000B48  0101               	movlb	1	; () banked
  6458  000B4A  90D8               	bcf	status,0,c
  6459  000B4C  3724               	rlcf	??_printf& (0+255),f,b
  6460  000B4E  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6461  000B50  0101               	movlb	1	; () banked
  6462  000B52  90D8               	bcf	status,0,c
  6463  000B54  3724               	rlcf	??_printf& (0+255),f,b
  6464  000B56  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6465  000B58  0E2B               	movlw	low _hexpowers
  6466  000B5A  0101               	movlb	1	; () banked
  6467  000B5C  2524               	addwf	??_printf& (0+255),w,b
  6468  000B5E  6EF6               	movwf	tblptrl,c
  6469  000B60  0EFE               	movlw	high _hexpowers
  6470  000B62  2125               	addwfc	(??_printf+1)& (0+255),w,b
  6471  000B64  6EF7               	movwf	tblptrh,c
  6472  000B66                     	if	0	;There are less than 3 active tblptr bytes
  6473  000B66                     	endif
  6474  000B66  0009               	tblrd		*+
  6475  000B68  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  6476  000B6C  0009               	tblrd		*+
  6477  000B6E  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  6478  000B72  0009               	tblrd		*+
  6479  000B74  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  6480  000B78  000A               	tblrd		*-
  6481  000B7A  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  6482  000B7E  ECB7  F026         	call	___lldiv	;wreg free
  6483  000B82  0100               	movlb	0	; () banked
  6484  000B84  519E               	movf	?___lldiv& (0+255),w,b
  6485  000B86  0B0F               	andlw	15
  6486  000B88  0101               	movlb	1	; () banked
  6487  000B8A  6F2D               	movwf	printf@idx& (0+255),b
  6488                           
  6489                           ; BSR set to: 1
  6490                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6491  000B8C  0101               	movlb	1	; () banked
  6492  000B8E  512D               	movf	printf@idx& (0+255),w,b
  6493  000B90  0D01               	mullw	1
  6494  000B92  0E35               	movlw	low STR_22
  6495  000B94  24F3               	addwf	prodl,w,c
  6496  000B96  6EF6               	movwf	tblptrl,c
  6497  000B98  0EFF               	movlw	high STR_22
  6498  000B9A  20F4               	addwfc	prodh,w,c
  6499  000B9C  6EF7               	movwf	tblptrh,c
  6500  000B9E                     	if	0	;There are less than 3 active tblptr bytes
  6501  000B9E                     	endif
  6502  000B9E  0008               	tblrd		*
  6503  000BA0  CFF5 F143          	movff	tablat,printf@c
  6504                           
  6505                           ; BSR set to: 1
  6506                           ;doprnt.c: 1523: }
  6507                           
  6508                           ;doprnt.c: 1508: }
  6509                           ;doprnt.c: 1510: break;
  6510  000BA4  D00C               	goto	l7663
  6511  000BA6                     l7661:
  6512                           
  6513                           ; BSR set to: 1
  6514  000BA6  0101               	movlb	1	; () banked
  6515  000BA8  513E               	movf	printf@flag& (0+255),w,b
  6516  000BAA  0BC0               	andlw	192
  6517                           
  6518                           ; Switch size 1, requested type "space"
  6519                           ; Number of cases is 3, Range of values is 0 to 192
  6520                           ; switch strategies available:
  6521                           ; Name         Instructions Cycles
  6522                           ; simple_byte           10     6 (average)
  6523                           ;	Chosen strategy is simple_byte
  6524  000BAC  0A00               	xorlw	0	; case 0
  6525  000BAE  B4D8               	btfsc	status,2,c
  6526  000BB0  D77D               	goto	l7653
  6527  000BB2  0A80               	xorlw	128	; case 128
  6528  000BB4  B4D8               	btfsc	status,2,c
  6529  000BB6  D7BC               	goto	l7655
  6530  000BB8  0A40               	xorlw	64	; case 192
  6531  000BBA  B4D8               	btfsc	status,2,c
  6532  000BBC  D777               	goto	l7653
  6533  000BBE                     l7663:
  6534                           
  6535                           ; BSR set to: 1
  6536                           ;doprnt.c: 1524: (putch(c) );
  6537  000BBE  0101               	movlb	1	; () banked
  6538  000BC0  5143               	movf	printf@c& (0+255),w,b
  6539  000BC2  ECBC  F02C         	call	_putch
  6540  000BC6                     l7665:
  6541  000BC6  0101               	movlb	1	; () banked
  6542  000BC8  0730               	decf	printf@prec& (0+255),f,b
  6543  000BCA  A0D8               	btfss	status,0,c
  6544  000BCC  0731               	decf	(printf@prec+1)& (0+255),f,b
  6545  000BCE  0101               	movlb	1	; () banked
  6546  000BD0  2930               	incf	printf@prec& (0+255),w,b
  6547  000BD2  E1E9               	bnz	l7661
  6548  000BD4  0101               	movlb	1	; () banked
  6549  000BD6  2931               	incf	(printf@prec+1)& (0+255),w,b
  6550  000BD8  A4D8               	btfss	status,2,c
  6551  000BDA  D7E5               	goto	l7661
  6552  000BDC                     l7667:
  6553  000BDC  C11C  FFF6         	movff	printf@f,tblptrl
  6554  000BE0  C11D  FFF7         	movff	printf@f+1,tblptrh
  6555  000BE4  0101               	movlb	1	; () banked
  6556  000BE6  4B1C               	infsnz	printf@f& (0+255),f,b
  6557  000BE8  2B1D               	incf	(printf@f+1)& (0+255),f,b
  6558  000BEA                     	if	0	;tblptru may be non-zero
  6559  000BEA                     	endif
  6560  000BEA                     	if	0	;tblptru may be non-zero
  6561  000BEA                     	endif
  6562  000BEA  0008               	tblrd		*
  6563  000BEC  CFF5 F143          	movff	tablat,printf@c
  6564  000BF0  0101               	movlb	1	; () banked
  6565  000BF2  5143               	movf	printf@c& (0+255),w,b
  6566  000BF4  B4D8               	btfsc	status,2,c
  6567  000BF6  0012               	return	
  6568  000BF8  EF11  F000         	goto	l7377
  6569  000BFC                     __end_of_printf:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           intcon	equ	0xFF2
  6578                           intcon2	equ	0xFF1
  6579                           intcon3	equ	0xFF0
  6580                           postinc0	equ	0xFEE
  6581                           wreg	equ	0xFE8
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _scale *****************
  6590 ;; Defined at:
  6591 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  scl             1    wreg     char 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  scl             1    6[BANK1 ] char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  3    0[BANK1 ] char 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        7 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    9
  6612 ;; This function calls:
  6613 ;;		___awdiv
  6614 ;;		___awmod
  6615 ;;		___ftmul
  6616 ;;		___wmul
  6617 ;; This function is called by:
  6618 ;;		_printf
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text14
  6623  0015DA                     __ptext14:
  6624                           	opt stack 0
  6625  0015DA                     _scale:
  6626                           	opt stack 19
  6627                           
  6628                           ;incstack = 0
  6629                           ;scale@scl stored from wreg
  6630  0015DA  0101               	movlb	1	; () banked
  6631  0015DC  6F06               	movwf	scale@scl& (0+255),b
  6632                           
  6633                           ;doprnt.c: 428: if(scl < 0) {
  6634  0015DE  0101               	movlb	1	; () banked
  6635  0015E0  AF06               	btfss	scale@scl& (0+255),7,b
  6636  0015E2  D12A               	goto	l7293
  6637                           
  6638                           ; BSR set to: 1
  6639                           ;doprnt.c: 429: scl = -scl;
  6640  0015E4  0101               	movlb	1	; () banked
  6641  0015E6  6D06               	negf	scale@scl& (0+255),b
  6642                           
  6643                           ;doprnt.c: 430: if(scl>=110)
  6644  0015E8  0101               	movlb	1	; () banked
  6645  0015EA  5106               	movf	scale@scl& (0+255),w,b
  6646  0015EC  0A80               	xorlw	128
  6647  0015EE  0F12               	addlw	-238
  6648  0015F0  A0D8               	btfss	status,0,c
  6649  0015F2  D0AC               	goto	l7283
  6650                           
  6651                           ; BSR set to: 1
  6652                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6653  0015F4  0E00               	movlw	0
  6654  0015F6  0100               	movlb	0	; () banked
  6655  0015F8  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6656  0015FA  0E03               	movlw	3
  6657  0015FC  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6658  0015FE  0E00               	movlw	0
  6659  001600  0100               	movlb	0	; () banked
  6660  001602  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6661  001604  0E0A               	movlw	10
  6662  001606  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6663  001608  0E00               	movlw	0
  6664  00160A  0100               	movlb	0	; () banked
  6665  00160C  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6666  00160E  0E64               	movlw	100
  6667  001610  6FA0               	movwf	___awmod@divisor& (0+255),b
  6668  001612  0101               	movlb	1	; () banked
  6669  001614  5106               	movf	scale@scl& (0+255),w,b
  6670  001616  0100               	movlb	0	; () banked
  6671  001618  6F9E               	movwf	___awmod@dividend& (0+255),b
  6672  00161A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6673  00161C  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6674  00161E  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6675  001620  EC6C  F027         	call	___awmod	;wreg free
  6676  001624  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  6677  001628  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  6678  00162C  EC58  F026         	call	___awdiv	;wreg free
  6679  001630  0E09               	movlw	9
  6680  001632  0100               	movlb	0	; () banked
  6681  001634  25A4               	addwf	?___awdiv& (0+255),w,b
  6682  001636  0100               	movlb	0	; () banked
  6683  001638  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6684  00163A  0E00               	movlw	0
  6685  00163C  0100               	movlb	0	; () banked
  6686  00163E  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6687  001640  0100               	movlb	0	; () banked
  6688  001642  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6689  001644  ECD1  F02B         	call	___wmul	;wreg free
  6690  001648  0EDD               	movlw	low __npowers_
  6691  00164A  0100               	movlb	0	; () banked
  6692  00164C  25AC               	addwf	?___wmul& (0+255),w,b
  6693  00164E  6EF6               	movwf	tblptrl,c
  6694  001650  0EFD               	movlw	high __npowers_
  6695  001652  0100               	movlb	0	; () banked
  6696  001654  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6697  001656  6EF7               	movwf	tblptrh,c
  6698  001658                     	if	0	;There are less than 3 active tblptr bytes
  6699  001658                     	endif
  6700  001658  0009               	tblrd		*+
  6701  00165A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6702  00165E  0009               	tblrd		*+
  6703  001660  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6704  001664  000A               	tblrd		*-
  6705  001666  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6706  00166A  0E00               	movlw	0
  6707  00166C  0100               	movlb	0	; () banked
  6708  00166E  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6709  001670  0E64               	movlw	100
  6710  001672  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6711  001674  0101               	movlb	1	; () banked
  6712  001676  5106               	movf	scale@scl& (0+255),w,b
  6713  001678  0100               	movlb	0	; () banked
  6714  00167A  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6715  00167C  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6716  00167E  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6717  001680  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6718  001682  EC58  F026         	call	___awdiv	;wreg free
  6719  001686  0E12               	movlw	18
  6720  001688  0100               	movlb	0	; () banked
  6721  00168A  25A4               	addwf	?___awdiv& (0+255),w,b
  6722  00168C  0100               	movlb	0	; () banked
  6723  00168E  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6724  001690  0E00               	movlw	0
  6725  001692  0100               	movlb	0	; () banked
  6726  001694  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6727  001696  0100               	movlb	0	; () banked
  6728  001698  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6729  00169A  0E00               	movlw	0
  6730  00169C  0100               	movlb	0	; () banked
  6731  00169E  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6732  0016A0  0E03               	movlw	3
  6733  0016A2  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6734  0016A4  ECD1  F02B         	call	___wmul	;wreg free
  6735  0016A8  0EDD               	movlw	low __npowers_
  6736  0016AA  0100               	movlb	0	; () banked
  6737  0016AC  25AC               	addwf	?___wmul& (0+255),w,b
  6738  0016AE  6EF6               	movwf	tblptrl,c
  6739  0016B0  0EFD               	movlw	high __npowers_
  6740  0016B2  0100               	movlb	0	; () banked
  6741  0016B4  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6742  0016B6  6EF7               	movwf	tblptrh,c
  6743  0016B8                     	if	0	;There are less than 3 active tblptr bytes
  6744  0016B8                     	endif
  6745  0016B8  0009               	tblrd		*+
  6746  0016BA  CFF5 F0B2          	movff	tablat,___ftmul@f1
  6747  0016BE  0009               	tblrd		*+
  6748  0016C0  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  6749  0016C4  000A               	tblrd		*-
  6750  0016C6  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  6751  0016CA  EC42  F01C         	call	___ftmul	;wreg free
  6752  0016CE  C0B2  F103         	movff	?___ftmul,_scale$1308
  6753  0016D2  C0B3  F104         	movff	?___ftmul+1,_scale$1308+1
  6754  0016D6  C0B4  F105         	movff	?___ftmul+2,_scale$1308+2
  6755                           
  6756                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6757  0016DA  C103  F0B2         	movff	_scale$1308,___ftmul@f1
  6758  0016DE  C104  F0B3         	movff	_scale$1308+1,___ftmul@f1+1
  6759  0016E2  C105  F0B4         	movff	_scale$1308+2,___ftmul@f1+2
  6760  0016E6  0E00               	movlw	0
  6761  0016E8  0100               	movlb	0	; () banked
  6762  0016EA  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6763  0016EC  0E03               	movlw	3
  6764  0016EE  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6765  0016F0  0E00               	movlw	0
  6766  0016F2  0100               	movlb	0	; () banked
  6767  0016F4  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6768  0016F6  0E0A               	movlw	10
  6769  0016F8  6FA0               	movwf	___awmod@divisor& (0+255),b
  6770  0016FA  0101               	movlb	1	; () banked
  6771  0016FC  5106               	movf	scale@scl& (0+255),w,b
  6772  0016FE  0100               	movlb	0	; () banked
  6773  001700  6F9E               	movwf	___awmod@dividend& (0+255),b
  6774  001702  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6775  001704  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6776  001706  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6777  001708  EC6C  F027         	call	___awmod	;wreg free
  6778  00170C  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  6779  001710  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  6780  001714  ECD1  F02B         	call	___wmul	;wreg free
  6781  001718  0EDD               	movlw	low __npowers_
  6782  00171A  0100               	movlb	0	; () banked
  6783  00171C  25AC               	addwf	?___wmul& (0+255),w,b
  6784  00171E  6EF6               	movwf	tblptrl,c
  6785  001720  0EFD               	movlw	high __npowers_
  6786  001722  0100               	movlb	0	; () banked
  6787  001724  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6788  001726  6EF7               	movwf	tblptrh,c
  6789  001728                     	if	0	;There are less than 3 active tblptr bytes
  6790  001728                     	endif
  6791  001728  0009               	tblrd		*+
  6792  00172A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6793  00172E  0009               	tblrd		*+
  6794  001730  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6795  001734  000A               	tblrd		*-
  6796  001736  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6797  00173A  EC42  F01C         	call	___ftmul	;wreg free
  6798  00173E  C0B2  F100         	movff	?___ftmul,?_scale
  6799  001742  C0B3  F101         	movff	?___ftmul+1,?_scale+1
  6800  001746  C0B4  F102         	movff	?___ftmul+2,?_scale+2
  6801  00174A  0012               	return	
  6802  00174C                     l7283:
  6803                           
  6804                           ;doprnt.c: 432: else if(scl > 10)
  6805  00174C  0101               	movlb	1	; () banked
  6806  00174E  5106               	movf	scale@scl& (0+255),w,b
  6807  001750  0A80               	xorlw	128
  6808  001752  0F75               	addlw	-139
  6809  001754  A0D8               	btfss	status,0,c
  6810  001756  D05D               	goto	l7289
  6811                           
  6812                           ; BSR set to: 1
  6813                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6814  001758  0E00               	movlw	0
  6815  00175A  0100               	movlb	0	; () banked
  6816  00175C  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6817  00175E  0E0A               	movlw	10
  6818  001760  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6819  001762  0101               	movlb	1	; () banked
  6820  001764  5106               	movf	scale@scl& (0+255),w,b
  6821  001766  0100               	movlb	0	; () banked
  6822  001768  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6823  00176A  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6824  00176C  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6825  00176E  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6826  001770  EC58  F026         	call	___awdiv	;wreg free
  6827  001774  0E09               	movlw	9
  6828  001776  0100               	movlb	0	; () banked
  6829  001778  25A4               	addwf	?___awdiv& (0+255),w,b
  6830  00177A  0100               	movlb	0	; () banked
  6831  00177C  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6832  00177E  0E00               	movlw	0
  6833  001780  0100               	movlb	0	; () banked
  6834  001782  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6835  001784  0100               	movlb	0	; () banked
  6836  001786  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6837  001788  0E00               	movlw	0
  6838  00178A  0100               	movlb	0	; () banked
  6839  00178C  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6840  00178E  0E03               	movlw	3
  6841  001790  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6842  001792  ECD1  F02B         	call	___wmul	;wreg free
  6843  001796  0EDD               	movlw	low __npowers_
  6844  001798  0100               	movlb	0	; () banked
  6845  00179A  25AC               	addwf	?___wmul& (0+255),w,b
  6846  00179C  6EF6               	movwf	tblptrl,c
  6847  00179E  0EFD               	movlw	high __npowers_
  6848  0017A0  0100               	movlb	0	; () banked
  6849  0017A2  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6850  0017A4  6EF7               	movwf	tblptrh,c
  6851  0017A6                     	if	0	;There are less than 3 active tblptr bytes
  6852  0017A6                     	endif
  6853  0017A6  0009               	tblrd		*+
  6854  0017A8  CFF5 F0B2          	movff	tablat,___ftmul@f1
  6855  0017AC  0009               	tblrd		*+
  6856  0017AE  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  6857  0017B2  000A               	tblrd		*-
  6858  0017B4  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  6859  0017B8  0E00               	movlw	0
  6860  0017BA  0100               	movlb	0	; () banked
  6861  0017BC  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6862  0017BE  0E03               	movlw	3
  6863  0017C0  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6864  0017C2  0E00               	movlw	0
  6865  0017C4  0100               	movlb	0	; () banked
  6866  0017C6  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6867  0017C8  0E0A               	movlw	10
  6868  0017CA  6FA0               	movwf	___awmod@divisor& (0+255),b
  6869  0017CC  0101               	movlb	1	; () banked
  6870  0017CE  5106               	movf	scale@scl& (0+255),w,b
  6871  0017D0  0100               	movlb	0	; () banked
  6872  0017D2  6F9E               	movwf	___awmod@dividend& (0+255),b
  6873  0017D4  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6874  0017D6  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6875  0017D8  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6876  0017DA  EC6C  F027         	call	___awmod	;wreg free
  6877  0017DE  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  6878  0017E2  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  6879  0017E6  ECD1  F02B         	call	___wmul	;wreg free
  6880  0017EA  0EDD               	movlw	low __npowers_
  6881  0017EC  0100               	movlb	0	; () banked
  6882  0017EE  25AC               	addwf	?___wmul& (0+255),w,b
  6883  0017F0  6EF6               	movwf	tblptrl,c
  6884  0017F2  0EFD               	movlw	high __npowers_
  6885  0017F4  0100               	movlb	0	; () banked
  6886  0017F6  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6887  0017F8  6EF7               	movwf	tblptrh,c
  6888  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  6889  0017FA                     	endif
  6890  0017FA  0009               	tblrd		*+
  6891  0017FC  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6892  001800  0009               	tblrd		*+
  6893  001802  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6894  001806  000A               	tblrd		*-
  6895  001808  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6896  00180C  EC42  F01C         	call	___ftmul	;wreg free
  6897  001810  D796               	goto	L13
  6898  001812                     l7289:
  6899                           
  6900                           ;doprnt.c: 434: return _npowers_[scl];
  6901  001812  0101               	movlb	1	; () banked
  6902  001814  5106               	movf	scale@scl& (0+255),w,b
  6903  001816  0D03               	mullw	3
  6904  001818  0EDD               	movlw	low __npowers_
  6905  00181A  24F3               	addwf	prodl,w,c
  6906  00181C  6EF6               	movwf	tblptrl,c
  6907  00181E  0EFD               	movlw	high __npowers_
  6908  001820  20F4               	addwfc	prodh,w,c
  6909  001822  6EF7               	movwf	tblptrh,c
  6910  001824                     	if	0	;There are less than 3 active tblptr bytes
  6911  001824                     	endif
  6912  001824  0009               	tblrd		*+
  6913  001826  CFF5 F100          	movff	tablat,?_scale
  6914  00182A  0009               	tblrd		*+
  6915  00182C  CFF5 F101          	movff	tablat,?_scale+1
  6916  001830  000A               	tblrd		*-
  6917  001832  CFF5 F102          	movff	tablat,?_scale+2
  6918                           
  6919                           ; BSR set to: 1
  6920  001836  0012               	return	
  6921  001838                     l7293:
  6922                           
  6923                           ; BSR set to: 1
  6924                           ;doprnt.c: 435: }
  6925                           ;doprnt.c: 436: if(scl>=110)
  6926  001838  0101               	movlb	1	; () banked
  6927  00183A  5106               	movf	scale@scl& (0+255),w,b
  6928  00183C  0A80               	xorlw	128
  6929  00183E  0F12               	addlw	-238
  6930  001840  A0D8               	btfss	status,0,c
  6931  001842  D0AC               	goto	l7301
  6932                           
  6933                           ; BSR set to: 1
  6934                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6935  001844  0E00               	movlw	0
  6936  001846  0100               	movlb	0	; () banked
  6937  001848  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6938  00184A  0E03               	movlw	3
  6939  00184C  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6940  00184E  0E00               	movlw	0
  6941  001850  0100               	movlb	0	; () banked
  6942  001852  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6943  001854  0E0A               	movlw	10
  6944  001856  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6945  001858  0E00               	movlw	0
  6946  00185A  0100               	movlb	0	; () banked
  6947  00185C  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6948  00185E  0E64               	movlw	100
  6949  001860  6FA0               	movwf	___awmod@divisor& (0+255),b
  6950  001862  0101               	movlb	1	; () banked
  6951  001864  5106               	movf	scale@scl& (0+255),w,b
  6952  001866  0100               	movlb	0	; () banked
  6953  001868  6F9E               	movwf	___awmod@dividend& (0+255),b
  6954  00186A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6955  00186C  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6956  00186E  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6957  001870  EC6C  F027         	call	___awmod	;wreg free
  6958  001874  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  6959  001878  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  6960  00187C  EC58  F026         	call	___awdiv	;wreg free
  6961  001880  0E09               	movlw	9
  6962  001882  0100               	movlb	0	; () banked
  6963  001884  25A4               	addwf	?___awdiv& (0+255),w,b
  6964  001886  0100               	movlb	0	; () banked
  6965  001888  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6966  00188A  0E00               	movlw	0
  6967  00188C  0100               	movlb	0	; () banked
  6968  00188E  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6969  001890  0100               	movlb	0	; () banked
  6970  001892  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6971  001894  ECD1  F02B         	call	___wmul	;wreg free
  6972  001898  0E04               	movlw	low __powers_
  6973  00189A  0100               	movlb	0	; () banked
  6974  00189C  25AC               	addwf	?___wmul& (0+255),w,b
  6975  00189E  6EF6               	movwf	tblptrl,c
  6976  0018A0  0EFE               	movlw	high __powers_
  6977  0018A2  0100               	movlb	0	; () banked
  6978  0018A4  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6979  0018A6  6EF7               	movwf	tblptrh,c
  6980  0018A8                     	if	0	;There are less than 3 active tblptr bytes
  6981  0018A8                     	endif
  6982  0018A8  0009               	tblrd		*+
  6983  0018AA  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6984  0018AE  0009               	tblrd		*+
  6985  0018B0  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6986  0018B4  000A               	tblrd		*-
  6987  0018B6  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6988  0018BA  0E00               	movlw	0
  6989  0018BC  0100               	movlb	0	; () banked
  6990  0018BE  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6991  0018C0  0E64               	movlw	100
  6992  0018C2  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6993  0018C4  0101               	movlb	1	; () banked
  6994  0018C6  5106               	movf	scale@scl& (0+255),w,b
  6995  0018C8  0100               	movlb	0	; () banked
  6996  0018CA  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6997  0018CC  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6998  0018CE  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6999  0018D0  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7000  0018D2  EC58  F026         	call	___awdiv	;wreg free
  7001  0018D6  0E12               	movlw	18
  7002  0018D8  0100               	movlb	0	; () banked
  7003  0018DA  25A4               	addwf	?___awdiv& (0+255),w,b
  7004  0018DC  0100               	movlb	0	; () banked
  7005  0018DE  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7006  0018E0  0E00               	movlw	0
  7007  0018E2  0100               	movlb	0	; () banked
  7008  0018E4  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7009  0018E6  0100               	movlb	0	; () banked
  7010  0018E8  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7011  0018EA  0E00               	movlw	0
  7012  0018EC  0100               	movlb	0	; () banked
  7013  0018EE  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7014  0018F0  0E03               	movlw	3
  7015  0018F2  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7016  0018F4  ECD1  F02B         	call	___wmul	;wreg free
  7017  0018F8  0E04               	movlw	low __powers_
  7018  0018FA  0100               	movlb	0	; () banked
  7019  0018FC  25AC               	addwf	?___wmul& (0+255),w,b
  7020  0018FE  6EF6               	movwf	tblptrl,c
  7021  001900  0EFE               	movlw	high __powers_
  7022  001902  0100               	movlb	0	; () banked
  7023  001904  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7024  001906  6EF7               	movwf	tblptrh,c
  7025  001908                     	if	0	;There are less than 3 active tblptr bytes
  7026  001908                     	endif
  7027  001908  0009               	tblrd		*+
  7028  00190A  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7029  00190E  0009               	tblrd		*+
  7030  001910  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7031  001914  000A               	tblrd		*-
  7032  001916  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7033  00191A  EC42  F01C         	call	___ftmul	;wreg free
  7034  00191E  C0B2  F103         	movff	?___ftmul,_scale$1308
  7035  001922  C0B3  F104         	movff	?___ftmul+1,_scale$1308+1
  7036  001926  C0B4  F105         	movff	?___ftmul+2,_scale$1308+2
  7037                           
  7038                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7039  00192A  C103  F0B2         	movff	_scale$1308,___ftmul@f1
  7040  00192E  C104  F0B3         	movff	_scale$1308+1,___ftmul@f1+1
  7041  001932  C105  F0B4         	movff	_scale$1308+2,___ftmul@f1+2
  7042  001936  0E00               	movlw	0
  7043  001938  0100               	movlb	0	; () banked
  7044  00193A  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7045  00193C  0E03               	movlw	3
  7046  00193E  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7047  001940  0E00               	movlw	0
  7048  001942  0100               	movlb	0	; () banked
  7049  001944  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7050  001946  0E0A               	movlw	10
  7051  001948  6FA0               	movwf	___awmod@divisor& (0+255),b
  7052  00194A  0101               	movlb	1	; () banked
  7053  00194C  5106               	movf	scale@scl& (0+255),w,b
  7054  00194E  0100               	movlb	0	; () banked
  7055  001950  6F9E               	movwf	___awmod@dividend& (0+255),b
  7056  001952  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7057  001954  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  7058  001956  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  7059  001958  EC6C  F027         	call	___awmod	;wreg free
  7060  00195C  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7061  001960  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7062  001964  ECD1  F02B         	call	___wmul	;wreg free
  7063  001968  0E04               	movlw	low __powers_
  7064  00196A  0100               	movlb	0	; () banked
  7065  00196C  25AC               	addwf	?___wmul& (0+255),w,b
  7066  00196E  6EF6               	movwf	tblptrl,c
  7067  001970  0EFE               	movlw	high __powers_
  7068  001972  0100               	movlb	0	; () banked
  7069  001974  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7070  001976  6EF7               	movwf	tblptrh,c
  7071  001978                     	if	0	;There are less than 3 active tblptr bytes
  7072  001978                     	endif
  7073  001978  0009               	tblrd		*+
  7074  00197A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7075  00197E  0009               	tblrd		*+
  7076  001980  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7077  001984  000A               	tblrd		*-
  7078  001986  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7079  00198A  EC42  F01C         	call	___ftmul	;wreg free
  7080  00198E  C0B2  F100         	movff	?___ftmul,?_scale
  7081  001992  C0B3  F101         	movff	?___ftmul+1,?_scale+1
  7082  001996  C0B4  F102         	movff	?___ftmul+2,?_scale+2
  7083  00199A  0012               	return	
  7084  00199C                     l7301:
  7085                           
  7086                           ;doprnt.c: 438: else if(scl > 10)
  7087  00199C  0101               	movlb	1	; () banked
  7088  00199E  5106               	movf	scale@scl& (0+255),w,b
  7089  0019A0  0A80               	xorlw	128
  7090  0019A2  0F75               	addlw	-139
  7091  0019A4  A0D8               	btfss	status,0,c
  7092  0019A6  D05D               	goto	l7307
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7096  0019A8  0E00               	movlw	0
  7097  0019AA  0100               	movlb	0	; () banked
  7098  0019AC  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7099  0019AE  0E0A               	movlw	10
  7100  0019B0  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7101  0019B2  0101               	movlb	1	; () banked
  7102  0019B4  5106               	movf	scale@scl& (0+255),w,b
  7103  0019B6  0100               	movlb	0	; () banked
  7104  0019B8  6FA4               	movwf	___awdiv@dividend& (0+255),b
  7105  0019BA  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7106  0019BC  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  7107  0019BE  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7108  0019C0  EC58  F026         	call	___awdiv	;wreg free
  7109  0019C4  0E09               	movlw	9
  7110  0019C6  0100               	movlb	0	; () banked
  7111  0019C8  25A4               	addwf	?___awdiv& (0+255),w,b
  7112  0019CA  0100               	movlb	0	; () banked
  7113  0019CC  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7114  0019CE  0E00               	movlw	0
  7115  0019D0  0100               	movlb	0	; () banked
  7116  0019D2  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7117  0019D4  0100               	movlb	0	; () banked
  7118  0019D6  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7119  0019D8  0E00               	movlw	0
  7120  0019DA  0100               	movlb	0	; () banked
  7121  0019DC  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7122  0019DE  0E03               	movlw	3
  7123  0019E0  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7124  0019E2  ECD1  F02B         	call	___wmul	;wreg free
  7125  0019E6  0E04               	movlw	low __powers_
  7126  0019E8  0100               	movlb	0	; () banked
  7127  0019EA  25AC               	addwf	?___wmul& (0+255),w,b
  7128  0019EC  6EF6               	movwf	tblptrl,c
  7129  0019EE  0EFE               	movlw	high __powers_
  7130  0019F0  0100               	movlb	0	; () banked
  7131  0019F2  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7132  0019F4  6EF7               	movwf	tblptrh,c
  7133  0019F6                     	if	0	;There are less than 3 active tblptr bytes
  7134  0019F6                     	endif
  7135  0019F6  0009               	tblrd		*+
  7136  0019F8  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7137  0019FC  0009               	tblrd		*+
  7138  0019FE  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7139  001A02  000A               	tblrd		*-
  7140  001A04  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7141  001A08  0E00               	movlw	0
  7142  001A0A  0100               	movlb	0	; () banked
  7143  001A0C  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7144  001A0E  0E03               	movlw	3
  7145  001A10  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7146  001A12  0E00               	movlw	0
  7147  001A14  0100               	movlb	0	; () banked
  7148  001A16  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7149  001A18  0E0A               	movlw	10
  7150  001A1A  6FA0               	movwf	___awmod@divisor& (0+255),b
  7151  001A1C  0101               	movlb	1	; () banked
  7152  001A1E  5106               	movf	scale@scl& (0+255),w,b
  7153  001A20  0100               	movlb	0	; () banked
  7154  001A22  6F9E               	movwf	___awmod@dividend& (0+255),b
  7155  001A24  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7156  001A26  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  7157  001A28  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  7158  001A2A  EC6C  F027         	call	___awmod	;wreg free
  7159  001A2E  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7160  001A32  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7161  001A36  ECD1  F02B         	call	___wmul	;wreg free
  7162  001A3A  0E04               	movlw	low __powers_
  7163  001A3C  0100               	movlb	0	; () banked
  7164  001A3E  25AC               	addwf	?___wmul& (0+255),w,b
  7165  001A40  6EF6               	movwf	tblptrl,c
  7166  001A42  0EFE               	movlw	high __powers_
  7167  001A44  0100               	movlb	0	; () banked
  7168  001A46  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7169  001A48  6EF7               	movwf	tblptrh,c
  7170  001A4A                     	if	0	;There are less than 3 active tblptr bytes
  7171  001A4A                     	endif
  7172  001A4A  0009               	tblrd		*+
  7173  001A4C  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7174  001A50  0009               	tblrd		*+
  7175  001A52  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7176  001A56  000A               	tblrd		*-
  7177  001A58  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7178  001A5C  EC42  F01C         	call	___ftmul	;wreg free
  7179  001A60  D796               	goto	L14
  7180  001A62                     l7307:
  7181                           
  7182                           ;doprnt.c: 440: return _powers_[scl];
  7183  001A62  0101               	movlb	1	; () banked
  7184  001A64  5106               	movf	scale@scl& (0+255),w,b
  7185  001A66  0D03               	mullw	3
  7186  001A68  0E04               	movlw	low __powers_
  7187  001A6A  24F3               	addwf	prodl,w,c
  7188  001A6C  6EF6               	movwf	tblptrl,c
  7189  001A6E  0EFE               	movlw	high __powers_
  7190  001A70  20F4               	addwfc	prodh,w,c
  7191  001A72  6EF7               	movwf	tblptrh,c
  7192  001A74                     	if	0	;There are less than 3 active tblptr bytes
  7193  001A74                     	endif
  7194  001A74  0009               	tblrd		*+
  7195  001A76  CFF5 F100          	movff	tablat,?_scale
  7196  001A7A  0009               	tblrd		*+
  7197  001A7C  CFF5 F101          	movff	tablat,?_scale+1
  7198  001A80  000A               	tblrd		*-
  7199  001A82  CFF5 F102          	movff	tablat,?_scale+2
  7200  001A86  0012               	return	
  7201  001A88                     __end_of_scale:
  7202                           	opt stack 0
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           intcon2	equ	0xFF1
  7211                           intcon3	equ	0xFF0
  7212                           postinc0	equ	0xFEE
  7213                           wreg	equ	0xFE8
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _putch *****************
  7222 ;; Defined at:
  7223 ;;		line 31 in file "lcd.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  data            1    wreg     unsigned char 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;  data            1   32[BANK0 ] unsigned char 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;Total ram usage:        1 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    8
  7244 ;; This function calls:
  7245 ;;		_lcdNibble
  7246 ;; This function is called by:
  7247 ;;		_printf
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           	psect	text15
  7252  005978                     __ptext15:
  7253                           	opt stack 0
  7254  005978                     _putch:
  7255                           	opt stack 20
  7256                           
  7257                           ;incstack = 0
  7258                           ;putch@data stored from wreg
  7259  005978  0100               	movlb	0	; () banked
  7260  00597A  6FA0               	movwf	putch@data& (0+255),b
  7261                           
  7262                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7263  00597C  848C               	bsf	3980,2,c	;volatile
  7264                           
  7265                           ;lcd.c: 33: lcdNibble(data);
  7266  00597E  0100               	movlb	0	; () banked
  7267  005980  51A0               	movf	putch@data& (0+255),w,b
  7268  005982  EC36  F02A         	call	_lcdNibble
  7269  005986  0012               	return		;funcret
  7270  005988                     __end_of_putch:
  7271                           	opt stack 0
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           intcon3	equ	0xFF0
  7281                           postinc0	equ	0xFEE
  7282                           wreg	equ	0xFE8
  7283                           indf2	equ	0xFDF
  7284                           postinc2	equ	0xFDE
  7285                           postdec2	equ	0xFDD
  7286                           fsr2h	equ	0xFDA
  7287                           fsr2l	equ	0xFD9
  7288                           status	equ	0xFD8
  7289                           
  7290 ;; *************** function _isdigit *****************
  7291 ;; Defined at:
  7292 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  c               1    wreg     unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  c               1   32[BANK0 ] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;		None               void
  7299 ;; Registers used:
  7300 ;;		wreg, status,2, status,0
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;Total ram usage:        3 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    7
  7313 ;; This function calls:
  7314 ;;		Nothing
  7315 ;; This function is called by:
  7316 ;;		_printf
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text16
  7321  005860                     __ptext16:
  7322                           	opt stack 0
  7323  005860                     _isdigit:
  7324                           	opt stack 21
  7325                           
  7326                           ;incstack = 0
  7327                           ;isdigit@c stored from wreg
  7328  005860  0100               	movlb	0	; () banked
  7329  005862  6FA0               	movwf	isdigit@c& (0+255),b
  7330  005864  0E00               	movlw	0
  7331  005866  0100               	movlb	0	; () banked
  7332  005868  6F9F               	movwf	_isdigit$853& (0+255),b
  7333                           
  7334                           ; BSR set to: 0
  7335  00586A  0E3A               	movlw	58
  7336  00586C  0100               	movlb	0	; () banked
  7337  00586E  61A0               	cpfslt	isdigit@c& (0+255),b
  7338  005870  D007               	goto	l4977
  7339                           
  7340                           ; BSR set to: 0
  7341  005872  0E2F               	movlw	47
  7342  005874  0100               	movlb	0	; () banked
  7343  005876  65A0               	cpfsgt	isdigit@c& (0+255),b
  7344  005878  D003               	goto	l4977
  7345                           
  7346                           ; BSR set to: 0
  7347  00587A  0E01               	movlw	1
  7348  00587C  0100               	movlb	0	; () banked
  7349  00587E  6F9F               	movwf	_isdigit$853& (0+255),b
  7350  005880                     l4977:
  7351                           
  7352                           ; BSR set to: 0
  7353  005880  C09F  F09E         	movff	_isdigit$853,??_isdigit
  7354  005884  0100               	movlb	0	; () banked
  7355  005886  319E               	rrcf	??_isdigit& (0+255),w,b
  7356  005888  0012               	return	
  7357  00588A                     __end_of_isdigit:
  7358                           	opt stack 0
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           intcon	equ	0xFF2
  7366                           intcon2	equ	0xFF1
  7367                           intcon3	equ	0xFF0
  7368                           postinc0	equ	0xFEE
  7369                           wreg	equ	0xFE8
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _fround *****************
  7378 ;; Defined at:
  7379 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  prec            1    wreg     unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  prec            1    9[BANK1 ] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  3    0[BANK1 ] unsigned char 
  7386 ;; Registers used:
  7387 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7393 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;Total ram usage:       10 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    9
  7400 ;; This function calls:
  7401 ;;		___awdiv
  7402 ;;		___awmod
  7403 ;;		___ftmul
  7404 ;;		___wmul
  7405 ;; This function is called by:
  7406 ;;		_printf
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text17
  7411  00274A                     __ptext17:
  7412                           	opt stack 0
  7413  00274A                     _fround:
  7414                           	opt stack 19
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;incstack = 0
  7418                           ;fround@prec stored from wreg
  7419  00274A  0101               	movlb	1	; () banked
  7420  00274C  6F09               	movwf	fround@prec& (0+255),b
  7421                           
  7422                           ;doprnt.c: 413: if(prec>=110)
  7423  00274E  0E6D               	movlw	109
  7424  002750  0101               	movlb	1	; () banked
  7425  002752  6509               	cpfsgt	fround@prec& (0+255),b
  7426  002754  D0BA               	goto	l7261
  7427                           
  7428                           ; BSR set to: 1
  7429                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7430  002756  0E00               	movlw	0
  7431  002758  0100               	movlb	0	; () banked
  7432  00275A  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7433  00275C  0E03               	movlw	3
  7434  00275E  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7435  002760  0E00               	movlw	0
  7436  002762  0100               	movlb	0	; () banked
  7437  002764  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7438  002766  0E0A               	movlw	10
  7439  002768  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7440  00276A  0E00               	movlw	0
  7441  00276C  0100               	movlb	0	; () banked
  7442  00276E  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7443  002770  0E64               	movlw	100
  7444  002772  6FA0               	movwf	___awmod@divisor& (0+255),b
  7445  002774  C109  F09E         	movff	fround@prec,___awmod@dividend
  7446  002778  0100               	movlb	0	; () banked
  7447  00277A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7448  00277C  EC6C  F027         	call	___awmod	;wreg free
  7449  002780  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  7450  002784  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  7451  002788  EC58  F026         	call	___awdiv	;wreg free
  7452  00278C  0E09               	movlw	9
  7453  00278E  0100               	movlb	0	; () banked
  7454  002790  25A4               	addwf	?___awdiv& (0+255),w,b
  7455  002792  0100               	movlb	0	; () banked
  7456  002794  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7457  002796  0E00               	movlw	0
  7458  002798  0100               	movlb	0	; () banked
  7459  00279A  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7460  00279C  0100               	movlb	0	; () banked
  7461  00279E  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7462  0027A0  ECD1  F02B         	call	___wmul	;wreg free
  7463  0027A4  0EDD               	movlw	low __npowers_
  7464  0027A6  0100               	movlb	0	; () banked
  7465  0027A8  25AC               	addwf	?___wmul& (0+255),w,b
  7466  0027AA  6EF6               	movwf	tblptrl,c
  7467  0027AC  0EFD               	movlw	high __npowers_
  7468  0027AE  0100               	movlb	0	; () banked
  7469  0027B0  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7470  0027B2  6EF7               	movwf	tblptrh,c
  7471  0027B4                     	if	0	;There are less than 3 active tblptr bytes
  7472  0027B4                     	endif
  7473  0027B4  0009               	tblrd		*+
  7474  0027B6  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7475  0027BA  0009               	tblrd		*+
  7476  0027BC  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7477  0027C0  000A               	tblrd		*-
  7478  0027C2  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7479  0027C6  0E00               	movlw	0
  7480  0027C8  0100               	movlb	0	; () banked
  7481  0027CA  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7482  0027CC  0E64               	movlw	100
  7483  0027CE  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7484  0027D0  C109  F0A4         	movff	fround@prec,___awdiv@dividend
  7485  0027D4  0100               	movlb	0	; () banked
  7486  0027D6  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7487  0027D8  EC58  F026         	call	___awdiv	;wreg free
  7488  0027DC  0E12               	movlw	18
  7489  0027DE  0100               	movlb	0	; () banked
  7490  0027E0  25A4               	addwf	?___awdiv& (0+255),w,b
  7491  0027E2  0100               	movlb	0	; () banked
  7492  0027E4  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7493  0027E6  0E00               	movlw	0
  7494  0027E8  0100               	movlb	0	; () banked
  7495  0027EA  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7496  0027EC  0100               	movlb	0	; () banked
  7497  0027EE  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7498  0027F0  0E00               	movlw	0
  7499  0027F2  0100               	movlb	0	; () banked
  7500  0027F4  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7501  0027F6  0E03               	movlw	3
  7502  0027F8  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7503  0027FA  ECD1  F02B         	call	___wmul	;wreg free
  7504  0027FE  0EDD               	movlw	low __npowers_
  7505  002800  0100               	movlb	0	; () banked
  7506  002802  25AC               	addwf	?___wmul& (0+255),w,b
  7507  002804  6EF6               	movwf	tblptrl,c
  7508  002806  0EFD               	movlw	high __npowers_
  7509  002808  0100               	movlb	0	; () banked
  7510  00280A  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7511  00280C  6EF7               	movwf	tblptrh,c
  7512  00280E                     	if	0	;There are less than 3 active tblptr bytes
  7513  00280E                     	endif
  7514  00280E  0009               	tblrd		*+
  7515  002810  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7516  002814  0009               	tblrd		*+
  7517  002816  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7518  00281A  000A               	tblrd		*-
  7519  00281C  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7520  002820  EC42  F01C         	call	___ftmul	;wreg free
  7521  002824  C0B2  F106         	movff	?___ftmul,_fround$1306
  7522  002828  C0B3  F107         	movff	?___ftmul+1,_fround$1306+1
  7523  00282C  C0B4  F108         	movff	?___ftmul+2,_fround$1306+2
  7524                           
  7525                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7526  002830  0E00               	movlw	0
  7527  002832  0100               	movlb	0	; () banked
  7528  002834  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7529  002836  0E03               	movlw	3
  7530  002838  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7531  00283A  0E00               	movlw	0
  7532  00283C  0100               	movlb	0	; () banked
  7533  00283E  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7534  002840  0E0A               	movlw	10
  7535  002842  6FA0               	movwf	___awmod@divisor& (0+255),b
  7536  002844  C109  F09E         	movff	fround@prec,___awmod@dividend
  7537  002848  0100               	movlb	0	; () banked
  7538  00284A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7539  00284C  EC6C  F027         	call	___awmod	;wreg free
  7540  002850  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7541  002854  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7542  002858  ECD1  F02B         	call	___wmul	;wreg free
  7543  00285C  0EDD               	movlw	low __npowers_
  7544  00285E  0100               	movlb	0	; () banked
  7545  002860  25AC               	addwf	?___wmul& (0+255),w,b
  7546  002862  6EF6               	movwf	tblptrl,c
  7547  002864  0EFD               	movlw	high __npowers_
  7548  002866  0100               	movlb	0	; () banked
  7549  002868  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7550  00286A  6EF7               	movwf	tblptrh,c
  7551  00286C                     	if	0	;There are less than 3 active tblptr bytes
  7552  00286C                     	endif
  7553  00286C  0009               	tblrd		*+
  7554  00286E  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7555  002872  0009               	tblrd		*+
  7556  002874  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7557  002878  000A               	tblrd		*-
  7558  00287A  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7559  00287E  C106  F0B2         	movff	_fround$1306,___ftmul@f1
  7560  002882  C107  F0B3         	movff	_fround$1306+1,___ftmul@f1+1
  7561  002886  C108  F0B4         	movff	_fround$1306+2,___ftmul@f1+2
  7562  00288A  EC42  F01C         	call	___ftmul	;wreg free
  7563  00288E  C0B2  F103         	movff	?___ftmul,_fround$1307
  7564  002892  C0B3  F104         	movff	?___ftmul+1,_fround$1307+1
  7565  002896  C0B4  F105         	movff	?___ftmul+2,_fround$1307+2
  7566                           
  7567                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7568  00289A  C103  F0B2         	movff	_fround$1307,___ftmul@f1
  7569  00289E  C104  F0B3         	movff	_fround$1307+1,___ftmul@f1+1
  7570  0028A2  C105  F0B4         	movff	_fround$1307+2,___ftmul@f1+2
  7571  0028A6  0E00               	movlw	0
  7572  0028A8  0100               	movlb	0	; () banked
  7573  0028AA  6FB5               	movwf	___ftmul@f2& (0+255),b
  7574  0028AC  0E00               	movlw	0
  7575  0028AE  0100               	movlb	0	; () banked
  7576  0028B0  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7577  0028B2  0E3F               	movlw	63
  7578  0028B4  0100               	movlb	0	; () banked
  7579  0028B6  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7580  0028B8  EC42  F01C         	call	___ftmul	;wreg free
  7581  0028BC  C0B2  F100         	movff	?___ftmul,?_fround
  7582  0028C0  C0B3  F101         	movff	?___ftmul+1,?_fround+1
  7583  0028C4  C0B4  F102         	movff	?___ftmul+2,?_fround+2
  7584  0028C8  0012               	return	
  7585  0028CA                     l7261:
  7586                           
  7587                           ;doprnt.c: 415: else if(prec > 10)
  7588  0028CA  0E0A               	movlw	10
  7589  0028CC  0101               	movlb	1	; () banked
  7590  0028CE  6509               	cpfsgt	fround@prec& (0+255),b
  7591  0028D0  D06E               	goto	l7269
  7592                           
  7593                           ; BSR set to: 1
  7594                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7595  0028D2  0E00               	movlw	0
  7596  0028D4  0100               	movlb	0	; () banked
  7597  0028D6  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7598  0028D8  0E03               	movlw	3
  7599  0028DA  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7600  0028DC  0E00               	movlw	0
  7601  0028DE  0100               	movlb	0	; () banked
  7602  0028E0  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7603  0028E2  0E0A               	movlw	10
  7604  0028E4  6FA0               	movwf	___awmod@divisor& (0+255),b
  7605  0028E6  C109  F09E         	movff	fround@prec,___awmod@dividend
  7606  0028EA  0100               	movlb	0	; () banked
  7607  0028EC  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7608  0028EE  EC6C  F027         	call	___awmod	;wreg free
  7609  0028F2  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7610  0028F6  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7611  0028FA  ECD1  F02B         	call	___wmul	;wreg free
  7612  0028FE  0EDD               	movlw	low __npowers_
  7613  002900  0100               	movlb	0	; () banked
  7614  002902  25AC               	addwf	?___wmul& (0+255),w,b
  7615  002904  6EF6               	movwf	tblptrl,c
  7616  002906  0EFD               	movlw	high __npowers_
  7617  002908  0100               	movlb	0	; () banked
  7618  00290A  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7619  00290C  6EF7               	movwf	tblptrh,c
  7620  00290E                     	if	0	;There are less than 3 active tblptr bytes
  7621  00290E                     	endif
  7622  00290E  0009               	tblrd		*+
  7623  002910  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7624  002914  0009               	tblrd		*+
  7625  002916  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7626  00291A  000A               	tblrd		*-
  7627  00291C  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7628  002920  0E00               	movlw	0
  7629  002922  0100               	movlb	0	; () banked
  7630  002924  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7631  002926  0E0A               	movlw	10
  7632  002928  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7633  00292A  C109  F0A4         	movff	fround@prec,___awdiv@dividend
  7634  00292E  0100               	movlb	0	; () banked
  7635  002930  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7636  002932  EC58  F026         	call	___awdiv	;wreg free
  7637  002936  0E09               	movlw	9
  7638  002938  0100               	movlb	0	; () banked
  7639  00293A  25A4               	addwf	?___awdiv& (0+255),w,b
  7640  00293C  0100               	movlb	0	; () banked
  7641  00293E  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7642  002940  0E00               	movlw	0
  7643  002942  0100               	movlb	0	; () banked
  7644  002944  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7645  002946  0100               	movlb	0	; () banked
  7646  002948  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7647  00294A  0E00               	movlw	0
  7648  00294C  0100               	movlb	0	; () banked
  7649  00294E  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7650  002950  0E03               	movlw	3
  7651  002952  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7652  002954  ECD1  F02B         	call	___wmul	;wreg free
  7653  002958  0EDD               	movlw	low __npowers_
  7654  00295A  0100               	movlb	0	; () banked
  7655  00295C  25AC               	addwf	?___wmul& (0+255),w,b
  7656  00295E  6EF6               	movwf	tblptrl,c
  7657  002960  0EFD               	movlw	high __npowers_
  7658  002962  0100               	movlb	0	; () banked
  7659  002964  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7660  002966  6EF7               	movwf	tblptrh,c
  7661  002968                     	if	0	;There are less than 3 active tblptr bytes
  7662  002968                     	endif
  7663  002968  0009               	tblrd		*+
  7664  00296A  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7665  00296E  0009               	tblrd		*+
  7666  002970  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7667  002974  000A               	tblrd		*-
  7668  002976  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7669  00297A  EC42  F01C         	call	___ftmul	;wreg free
  7670  00297E  C0B2  F106         	movff	?___ftmul,_fround$1306
  7671  002982  C0B3  F107         	movff	?___ftmul+1,_fround$1306+1
  7672  002986  C0B4  F108         	movff	?___ftmul+2,_fround$1306+2
  7673                           
  7674                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7675  00298A  C106  F0B2         	movff	_fround$1306,___ftmul@f1
  7676  00298E  C107  F0B3         	movff	_fround$1306+1,___ftmul@f1+1
  7677  002992  C108  F0B4         	movff	_fround$1306+2,___ftmul@f1+2
  7678  002996  0E00               	movlw	0
  7679  002998  0100               	movlb	0	; () banked
  7680  00299A  6FB5               	movwf	___ftmul@f2& (0+255),b
  7681  00299C  0E00               	movlw	0
  7682  00299E  0100               	movlb	0	; () banked
  7683  0029A0  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7684  0029A2  0E3F               	movlw	63
  7685  0029A4  0100               	movlb	0	; () banked
  7686  0029A6  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7687  0029A8  EC42  F01C         	call	___ftmul	;wreg free
  7688  0029AC  D787               	goto	L15
  7689  0029AE                     l7269:
  7690                           
  7691                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7692  0029AE  0101               	movlb	1	; () banked
  7693  0029B0  5109               	movf	fround@prec& (0+255),w,b
  7694  0029B2  0D03               	mullw	3
  7695  0029B4  0EDD               	movlw	low __npowers_
  7696  0029B6  24F3               	addwf	prodl,w,c
  7697  0029B8  6EF6               	movwf	tblptrl,c
  7698  0029BA  0EFD               	movlw	high __npowers_
  7699  0029BC  20F4               	addwfc	prodh,w,c
  7700  0029BE  6EF7               	movwf	tblptrh,c
  7701  0029C0                     	if	0	;There are less than 3 active tblptr bytes
  7702  0029C0                     	endif
  7703  0029C0  0009               	tblrd		*+
  7704  0029C2  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7705  0029C6  0009               	tblrd		*+
  7706  0029C8  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7707  0029CC  000A               	tblrd		*-
  7708  0029CE  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7709  0029D2  0E00               	movlw	0
  7710  0029D4  0100               	movlb	0	; () banked
  7711  0029D6  6FB5               	movwf	___ftmul@f2& (0+255),b
  7712  0029D8  0E00               	movlw	0
  7713  0029DA  0100               	movlb	0	; () banked
  7714  0029DC  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7715  0029DE  0E3F               	movlw	63
  7716  0029E0  0100               	movlb	0	; () banked
  7717  0029E2  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7718  0029E4  EC42  F01C         	call	___ftmul	;wreg free
  7719  0029E8  C0B2  F100         	movff	?___ftmul,?_fround
  7720  0029EC  C0B3  F101         	movff	?___ftmul+1,?_fround+1
  7721  0029F0  C0B4  F102         	movff	?___ftmul+2,?_fround+2
  7722  0029F4  0012               	return	
  7723  0029F6                     __end_of_fround:
  7724                           	opt stack 0
  7725                           tblptru	equ	0xFF8
  7726                           tblptrh	equ	0xFF7
  7727                           tblptrl	equ	0xFF6
  7728                           tablat	equ	0xFF5
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           intcon	equ	0xFF2
  7732                           intcon2	equ	0xFF1
  7733                           intcon3	equ	0xFF0
  7734                           postinc0	equ	0xFEE
  7735                           wreg	equ	0xFE8
  7736                           indf2	equ	0xFDF
  7737                           postinc2	equ	0xFDE
  7738                           postdec2	equ	0xFDD
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function ___wmul *****************
  7744 ;; Defined at:
  7745 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  multiplier      2   44[BANK0 ] unsigned int 
  7748 ;;  multiplicand    2   46[BANK0 ] unsigned int 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  product         2   48[BANK0 ] unsigned int 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  2   44[BANK0 ] unsigned int 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, prodl, prodh
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;Total ram usage:        6 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    7
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_fround
  7771 ;;		_scale
  7772 ;;		_printf
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text18
  7777  0057A2                     __ptext18:
  7778                           	opt stack 0
  7779  0057A2                     ___wmul:
  7780                           	opt stack 20
  7781                           
  7782                           ;incstack = 0
  7783  0057A2  0100               	movlb	0	; () banked
  7784  0057A4  51AC               	movf	___wmul@multiplier& (0+255),w,b
  7785  0057A6  0100               	movlb	0	; () banked
  7786  0057A8  03AE               	mulwf	___wmul@multiplicand& (0+255),b
  7787  0057AA  CFF3 F0B0          	movff	prodl,___wmul@product
  7788  0057AE  CFF4 F0B1          	movff	prodh,___wmul@product+1
  7789  0057B2  0100               	movlb	0	; () banked
  7790  0057B4  51AC               	movf	___wmul@multiplier& (0+255),w,b
  7791  0057B6  0100               	movlb	0	; () banked
  7792  0057B8  03AF               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7793  0057BA  50F3               	movf	prodl,w,c
  7794  0057BC  0100               	movlb	0	; () banked
  7795  0057BE  27B1               	addwf	(___wmul@product+1)& (0+255),f,b
  7796  0057C0  0100               	movlb	0	; () banked
  7797  0057C2  51AD               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7798  0057C4  0100               	movlb	0	; () banked
  7799  0057C6  03AE               	mulwf	___wmul@multiplicand& (0+255),b
  7800  0057C8  50F3               	movf	prodl,w,c
  7801  0057CA  0100               	movlb	0	; () banked
  7802  0057CC  27B1               	addwf	(___wmul@product+1)& (0+255),f,b
  7803                           
  7804                           ; BSR set to: 0
  7805  0057CE  C0B0  F0AC         	movff	___wmul@product,?___wmul
  7806  0057D2  C0B1  F0AD         	movff	___wmul@product+1,?___wmul+1
  7807  0057D6  0012               	return	
  7808  0057D8                     __end_of___wmul:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           intcon2	equ	0xFF1
  7818                           intcon3	equ	0xFF0
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function ___ftmul *****************
  7829 ;; Defined at:
  7830 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  f1              3   50[BANK0 ] float 
  7833 ;;  f2              3   53[BANK0 ] float 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  f3_as_produc    3   60[BANK0 ] unsigned um
  7836 ;;  sign            1   64[BANK0 ] unsigned char 
  7837 ;;  cntr            1   63[BANK0 ] unsigned char 
  7838 ;;  exp             1   59[BANK0 ] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  3   50[BANK0 ] float 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:       15 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    8
  7855 ;; This function calls:
  7856 ;;		___ftpack
  7857 ;; This function is called by:
  7858 ;;		_fround
  7859 ;;		_scale
  7860 ;;		_printf
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text19
  7865  003884                     __ptext19:
  7866                           	opt stack 0
  7867  003884                     ___ftmul:
  7868                           	opt stack 19
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;incstack = 0
  7872  003884  C0B4  F0B8         	movff	___ftmul@f1+2,??___ftmul
  7873  003888  0100               	movlb	0	; () banked
  7874  00388A  6BB9               	clrf	(??___ftmul+1)& (0+255),b
  7875  00388C  6BBA               	clrf	(??___ftmul+2)& (0+255),b
  7876  00388E  0100               	movlb	0	; () banked
  7877  003890  35B3               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7878  003892  0100               	movlb	0	; () banked
  7879  003894  37B8               	rlcf	??___ftmul& (0+255),f,b
  7880  003896  E301               	bnc	u8051
  7881  003898  81B9               	bsf	(??___ftmul+1)& (0+255),0,b
  7882  00389A                     u8051:
  7883  00389A  0100               	movlb	0	; () banked
  7884  00389C  51B8               	movf	??___ftmul& (0+255),w,b
  7885  00389E  0100               	movlb	0	; () banked
  7886  0038A0  6FBB               	movwf	___ftmul@exp& (0+255),b
  7887  0038A2  0100               	movlb	0	; () banked
  7888  0038A4  51BB               	movf	___ftmul@exp& (0+255),w,b
  7889  0038A6  A4D8               	btfss	status,2,c
  7890  0038A8  D00A               	goto	l7129
  7891                           
  7892                           ; BSR set to: 0
  7893  0038AA  0E00               	movlw	0
  7894  0038AC  0100               	movlb	0	; () banked
  7895  0038AE  6FB2               	movwf	?___ftmul& (0+255),b
  7896  0038B0  0E00               	movlw	0
  7897  0038B2  0100               	movlb	0	; () banked
  7898  0038B4  6FB3               	movwf	(?___ftmul+1)& (0+255),b
  7899  0038B6  0E00               	movlw	0
  7900  0038B8  0100               	movlb	0	; () banked
  7901  0038BA  6FB4               	movwf	(?___ftmul+2)& (0+255),b
  7902                           
  7903                           ; BSR set to: 0
  7904  0038BC  0012               	return	
  7905  0038BE                     l7129:
  7906                           
  7907                           ; BSR set to: 0
  7908  0038BE  C0B7  F0B8         	movff	___ftmul@f2+2,??___ftmul
  7909  0038C2  0100               	movlb	0	; () banked
  7910  0038C4  6BB9               	clrf	(??___ftmul+1)& (0+255),b
  7911  0038C6  6BBA               	clrf	(??___ftmul+2)& (0+255),b
  7912  0038C8  0100               	movlb	0	; () banked
  7913  0038CA  35B6               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7914  0038CC  0100               	movlb	0	; () banked
  7915  0038CE  37B8               	rlcf	??___ftmul& (0+255),f,b
  7916  0038D0  E301               	bnc	u8071
  7917  0038D2  81B9               	bsf	(??___ftmul+1)& (0+255),0,b
  7918  0038D4                     u8071:
  7919  0038D4  0100               	movlb	0	; () banked
  7920  0038D6  51B8               	movf	??___ftmul& (0+255),w,b
  7921  0038D8  0100               	movlb	0	; () banked
  7922  0038DA  6FC0               	movwf	___ftmul@sign& (0+255),b
  7923  0038DC  0100               	movlb	0	; () banked
  7924  0038DE  51C0               	movf	___ftmul@sign& (0+255),w,b
  7925  0038E0  A4D8               	btfss	status,2,c
  7926  0038E2  D00A               	goto	l7135
  7927                           
  7928                           ; BSR set to: 0
  7929  0038E4  0E00               	movlw	0
  7930  0038E6  0100               	movlb	0	; () banked
  7931  0038E8  6FB2               	movwf	?___ftmul& (0+255),b
  7932  0038EA  0E00               	movlw	0
  7933  0038EC  0100               	movlb	0	; () banked
  7934  0038EE  6FB3               	movwf	(?___ftmul+1)& (0+255),b
  7935  0038F0  0E00               	movlw	0
  7936  0038F2  0100               	movlb	0	; () banked
  7937  0038F4  6FB4               	movwf	(?___ftmul+2)& (0+255),b
  7938                           
  7939                           ; BSR set to: 0
  7940  0038F6  0012               	return	
  7941  0038F8                     l7135:
  7942                           
  7943                           ; BSR set to: 0
  7944  0038F8  0100               	movlb	0	; () banked
  7945  0038FA  51C0               	movf	___ftmul@sign& (0+255),w,b
  7946  0038FC  0F7B               	addlw	123
  7947  0038FE  0100               	movlb	0	; () banked
  7948  003900  27BB               	addwf	___ftmul@exp& (0+255),f,b
  7949                           
  7950                           ; BSR set to: 0
  7951  003902  C0B4  F0C0         	movff	___ftmul@f1+2,___ftmul@sign
  7952  003906  0100               	movlb	0	; () banked
  7953  003908  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  7954  00390A  0100               	movlb	0	; () banked
  7955  00390C  1BC0               	xorwf	___ftmul@sign& (0+255),f,b
  7956  00390E  0E80               	movlw	128
  7957  003910  0100               	movlb	0	; () banked
  7958  003912  17C0               	andwf	___ftmul@sign& (0+255),f,b
  7959                           
  7960                           ; BSR set to: 0
  7961  003914  0100               	movlb	0	; () banked
  7962  003916  8FB3               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7963                           
  7964                           ; BSR set to: 0
  7965  003918  0100               	movlb	0	; () banked
  7966  00391A  8FB6               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7967                           
  7968                           ; BSR set to: 0
  7969  00391C  0EFF               	movlw	255
  7970  00391E  0100               	movlb	0	; () banked
  7971  003920  17B5               	andwf	___ftmul@f2& (0+255),f,b
  7972  003922  0EFF               	movlw	255
  7973  003924  0100               	movlb	0	; () banked
  7974  003926  17B6               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7975  003928  0E00               	movlw	0
  7976  00392A  0100               	movlb	0	; () banked
  7977  00392C  17B7               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7978                           
  7979                           ; BSR set to: 0
  7980  00392E  0E00               	movlw	0
  7981  003930  0100               	movlb	0	; () banked
  7982  003932  6FBC               	movwf	___ftmul@f3_as_product& (0+255),b
  7983  003934  0E00               	movlw	0
  7984  003936  0100               	movlb	0	; () banked
  7985  003938  6FBD               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7986  00393A  0E00               	movlw	0
  7987  00393C  0100               	movlb	0	; () banked
  7988  00393E  6FBE               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7989                           
  7990                           ; BSR set to: 0
  7991  003940  0E07               	movlw	7
  7992  003942  0100               	movlb	0	; () banked
  7993  003944  6FBF               	movwf	___ftmul@cntr& (0+255),b
  7994  003946                     l7149:
  7995                           
  7996                           ; BSR set to: 0
  7997  003946  0100               	movlb	0	; () banked
  7998  003948  A1B2               	btfss	___ftmul@f1& (0+255),0,b
  7999  00394A  D00C               	goto	l7153
  8000                           
  8001                           ; BSR set to: 0
  8002  00394C  0100               	movlb	0	; () banked
  8003  00394E  51B5               	movf	___ftmul@f2& (0+255),w,b
  8004  003950  0100               	movlb	0	; () banked
  8005  003952  27BC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8006  003954  0100               	movlb	0	; () banked
  8007  003956  51B6               	movf	(___ftmul@f2+1)& (0+255),w,b
  8008  003958  0100               	movlb	0	; () banked
  8009  00395A  23BD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8010  00395C  0100               	movlb	0	; () banked
  8011  00395E  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  8012  003960  0100               	movlb	0	; () banked
  8013  003962  23BE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8014  003964                     l7153:
  8015                           
  8016                           ; BSR set to: 0
  8017  003964  0100               	movlb	0	; () banked
  8018  003966  90D8               	bcf	status,0,c
  8019  003968  33B4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8020  00396A  33B3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8021  00396C  33B2               	rrcf	___ftmul@f1& (0+255),f,b
  8022  00396E  0100               	movlb	0	; () banked
  8023  003970  90D8               	bcf	status,0,c
  8024  003972  37B5               	rlcf	___ftmul@f2& (0+255),f,b
  8025  003974  37B6               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8026  003976  37B7               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8027                           
  8028                           ; BSR set to: 0
  8029  003978  0100               	movlb	0	; () banked
  8030  00397A  2FBF               	decfsz	___ftmul@cntr& (0+255),f,b
  8031  00397C  D7E4               	goto	l7149
  8032                           
  8033                           ; BSR set to: 0
  8034                           
  8035                           ; BSR set to: 0
  8036  00397E  0E09               	movlw	9
  8037  003980  0100               	movlb	0	; () banked
  8038  003982  6FBF               	movwf	___ftmul@cntr& (0+255),b
  8039  003984                     l7159:
  8040                           
  8041                           ; BSR set to: 0
  8042  003984  0100               	movlb	0	; () banked
  8043  003986  A1B2               	btfss	___ftmul@f1& (0+255),0,b
  8044  003988  D00C               	goto	l7163
  8045                           
  8046                           ; BSR set to: 0
  8047  00398A  0100               	movlb	0	; () banked
  8048  00398C  51B5               	movf	___ftmul@f2& (0+255),w,b
  8049  00398E  0100               	movlb	0	; () banked
  8050  003990  27BC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8051  003992  0100               	movlb	0	; () banked
  8052  003994  51B6               	movf	(___ftmul@f2+1)& (0+255),w,b
  8053  003996  0100               	movlb	0	; () banked
  8054  003998  23BD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8055  00399A  0100               	movlb	0	; () banked
  8056  00399C  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  8057  00399E  0100               	movlb	0	; () banked
  8058  0039A0  23BE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8059  0039A2                     l7163:
  8060                           
  8061                           ; BSR set to: 0
  8062  0039A2  0100               	movlb	0	; () banked
  8063  0039A4  90D8               	bcf	status,0,c
  8064  0039A6  33B4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8065  0039A8  33B3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8066  0039AA  33B2               	rrcf	___ftmul@f1& (0+255),f,b
  8067  0039AC  0100               	movlb	0	; () banked
  8068  0039AE  90D8               	bcf	status,0,c
  8069  0039B0  33BE               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8070  0039B2  33BD               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8071  0039B4  33BC               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8072                           
  8073                           ; BSR set to: 0
  8074  0039B6  0100               	movlb	0	; () banked
  8075  0039B8  2FBF               	decfsz	___ftmul@cntr& (0+255),f,b
  8076  0039BA  D7E4               	goto	l7159
  8077                           
  8078                           ; BSR set to: 0
  8079                           
  8080                           ; BSR set to: 0
  8081  0039BC  C0BC  F09E         	movff	___ftmul@f3_as_product,___ftpack@arg
  8082  0039C0  C0BD  F09F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8083  0039C4  C0BE  F0A0         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8084  0039C8  C0BB  F0A1         	movff	___ftmul@exp,___ftpack@exp
  8085  0039CC  C0C0  F0A2         	movff	___ftmul@sign,___ftpack@sign
  8086  0039D0  ECF5  F01F         	call	___ftpack	;wreg free
  8087  0039D4  C09E  F0B2         	movff	?___ftpack,?___ftmul
  8088  0039D8  C09F  F0B3         	movff	?___ftpack+1,?___ftmul+1
  8089  0039DC  C0A0  F0B4         	movff	?___ftpack+2,?___ftmul+2
  8090  0039E0  0012               	return	
  8091  0039E2                     __end_of___ftmul:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon2	equ	0xFF1
  8101                           intcon3	equ	0xFF0
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function ___awmod *****************
  8112 ;; Defined at:
  8113 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  dividend        2   30[BANK0 ] int 
  8116 ;;  divisor         2   32[BANK0 ] int 
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  sign            1   35[BANK0 ] unsigned char 
  8119 ;;  counter         1   34[BANK0 ] unsigned char 
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  2   30[BANK0 ] int 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8129 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;Total ram usage:        6 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    7
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_bottle_count
  8140 ;;		_fround
  8141 ;;		_scale
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text20
  8146  004ED8                     __ptext20:
  8147                           	opt stack 0
  8148  004ED8                     ___awmod:
  8149                           	opt stack 20
  8150                           
  8151                           ;incstack = 0
  8152  004ED8  0E00               	movlw	0
  8153  004EDA  0100               	movlb	0	; () banked
  8154  004EDC  6FA3               	movwf	___awmod@sign& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157  004EDE  0100               	movlb	0	; () banked
  8158  004EE0  AF9F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8159  004EE2  D008               	goto	l7223
  8160                           
  8161                           ; BSR set to: 0
  8162  004EE4  0100               	movlb	0	; () banked
  8163  004EE6  6D9E               	negf	___awmod@dividend& (0+255),b
  8164  004EE8  1F9F               	comf	(___awmod@dividend+1)& (0+255),f,b
  8165  004EEA  B0D8               	btfsc	status,0,c
  8166  004EEC  2B9F               	incf	(___awmod@dividend+1)& (0+255),f,b
  8167                           
  8168                           ; BSR set to: 0
  8169  004EEE  0E01               	movlw	1
  8170  004EF0  0100               	movlb	0	; () banked
  8171  004EF2  6FA3               	movwf	___awmod@sign& (0+255),b
  8172  004EF4                     l7223:
  8173                           
  8174                           ; BSR set to: 0
  8175  004EF4  0100               	movlb	0	; () banked
  8176  004EF6  AFA1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8177  004EF8  D005               	goto	l7227
  8178                           
  8179                           ; BSR set to: 0
  8180  004EFA  0100               	movlb	0	; () banked
  8181  004EFC  6DA0               	negf	___awmod@divisor& (0+255),b
  8182  004EFE  1FA1               	comf	(___awmod@divisor+1)& (0+255),f,b
  8183  004F00  B0D8               	btfsc	status,0,c
  8184  004F02  2BA1               	incf	(___awmod@divisor+1)& (0+255),f,b
  8185  004F04                     l7227:
  8186                           
  8187                           ; BSR set to: 0
  8188  004F04  0100               	movlb	0	; () banked
  8189  004F06  51A0               	movf	___awmod@divisor& (0+255),w,b
  8190  004F08  0100               	movlb	0	; () banked
  8191  004F0A  11A1               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8192  004F0C  B4D8               	btfsc	status,2,c
  8193  004F0E  D026               	goto	l7243
  8194                           
  8195                           ; BSR set to: 0
  8196  004F10  0E01               	movlw	1
  8197  004F12  0100               	movlb	0	; () banked
  8198  004F14  6FA2               	movwf	___awmod@counter& (0+255),b
  8199  004F16  D006               	goto	l7233
  8200  004F18                     l7231:
  8201                           
  8202                           ; BSR set to: 0
  8203  004F18  0100               	movlb	0	; () banked
  8204  004F1A  90D8               	bcf	status,0,c
  8205  004F1C  37A0               	rlcf	___awmod@divisor& (0+255),f,b
  8206  004F1E  37A1               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8207  004F20  0100               	movlb	0	; () banked
  8208  004F22  2BA2               	incf	___awmod@counter& (0+255),f,b
  8209  004F24                     l7233:
  8210                           
  8211                           ; BSR set to: 0
  8212  004F24  0100               	movlb	0	; () banked
  8213  004F26  AFA1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8214  004F28  D7F7               	goto	l7231
  8215  004F2A                     l7235:
  8216                           
  8217                           ; BSR set to: 0
  8218  004F2A  0100               	movlb	0	; () banked
  8219  004F2C  51A0               	movf	___awmod@divisor& (0+255),w,b
  8220  004F2E  0100               	movlb	0	; () banked
  8221  004F30  5D9E               	subwf	___awmod@dividend& (0+255),w,b
  8222  004F32  0100               	movlb	0	; () banked
  8223  004F34  51A1               	movf	(___awmod@divisor+1)& (0+255),w,b
  8224  004F36  0100               	movlb	0	; () banked
  8225  004F38  599F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8226  004F3A  A0D8               	btfss	status,0,c
  8227  004F3C  D008               	goto	l7239
  8228                           
  8229                           ; BSR set to: 0
  8230  004F3E  0100               	movlb	0	; () banked
  8231  004F40  51A0               	movf	___awmod@divisor& (0+255),w,b
  8232  004F42  0100               	movlb	0	; () banked
  8233  004F44  5F9E               	subwf	___awmod@dividend& (0+255),f,b
  8234  004F46  0100               	movlb	0	; () banked
  8235  004F48  51A1               	movf	(___awmod@divisor+1)& (0+255),w,b
  8236  004F4A  0100               	movlb	0	; () banked
  8237  004F4C  5B9F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8238  004F4E                     l7239:
  8239                           
  8240                           ; BSR set to: 0
  8241  004F4E  0100               	movlb	0	; () banked
  8242  004F50  90D8               	bcf	status,0,c
  8243  004F52  33A1               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8244  004F54  33A0               	rrcf	___awmod@divisor& (0+255),f,b
  8245                           
  8246                           ; BSR set to: 0
  8247  004F56  0100               	movlb	0	; () banked
  8248  004F58  2FA2               	decfsz	___awmod@counter& (0+255),f,b
  8249  004F5A  D7E7               	goto	l7235
  8250  004F5C                     l7243:
  8251                           
  8252                           ; BSR set to: 0
  8253  004F5C  0100               	movlb	0	; () banked
  8254  004F5E  51A3               	movf	___awmod@sign& (0+255),w,b
  8255  004F60  0100               	movlb	0	; () banked
  8256  004F62  B4D8               	btfsc	status,2,c
  8257  004F64  D005               	goto	l7247
  8258                           
  8259                           ; BSR set to: 0
  8260  004F66  0100               	movlb	0	; () banked
  8261  004F68  6D9E               	negf	___awmod@dividend& (0+255),b
  8262  004F6A  1F9F               	comf	(___awmod@dividend+1)& (0+255),f,b
  8263  004F6C  B0D8               	btfsc	status,0,c
  8264  004F6E  2B9F               	incf	(___awmod@dividend+1)& (0+255),f,b
  8265  004F70                     l7247:
  8266                           
  8267                           ; BSR set to: 0
  8268  004F70  C09E  F09E         	movff	___awmod@dividend,?___awmod
  8269  004F74  C09F  F09F         	movff	___awmod@dividend+1,?___awmod+1
  8270  004F78  0012               	return	
  8271  004F7A                     __end_of___awmod:
  8272                           	opt stack 0
  8273                           tblptru	equ	0xFF8
  8274                           tblptrh	equ	0xFF7
  8275                           tblptrl	equ	0xFF6
  8276                           tablat	equ	0xFF5
  8277                           prodh	equ	0xFF4
  8278                           prodl	equ	0xFF3
  8279                           intcon	equ	0xFF2
  8280                           intcon2	equ	0xFF1
  8281                           intcon3	equ	0xFF0
  8282                           postinc0	equ	0xFEE
  8283                           wreg	equ	0xFE8
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           fsr2h	equ	0xFDA
  8288                           fsr2l	equ	0xFD9
  8289                           status	equ	0xFD8
  8290                           
  8291 ;; *************** function ___awdiv *****************
  8292 ;; Defined at:
  8293 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;  dividend        2   36[BANK0 ] int 
  8296 ;;  divisor         2   38[BANK0 ] int 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  quotient        2   42[BANK0 ] int 
  8299 ;;  sign            1   41[BANK0 ] unsigned char 
  8300 ;;  counter         1   40[BANK0 ] unsigned char 
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  2   36[BANK0 ] int 
  8303 ;; Registers used:
  8304 ;;		wreg, status,2, status,0
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8310 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;Total ram usage:        8 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:    7
  8317 ;; This function calls:
  8318 ;;		Nothing
  8319 ;; This function is called by:
  8320 ;;		_fround
  8321 ;;		_scale
  8322 ;;		_printf
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text21
  8327  004CB0                     __ptext21:
  8328                           	opt stack 0
  8329  004CB0                     ___awdiv:
  8330                           	opt stack 20
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;incstack = 0
  8334  004CB0  0E00               	movlw	0
  8335  004CB2  0100               	movlb	0	; () banked
  8336  004CB4  6FA9               	movwf	___awdiv@sign& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339  004CB6  0100               	movlb	0	; () banked
  8340  004CB8  AFA7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8341  004CBA  D008               	goto	l7179
  8342                           
  8343                           ; BSR set to: 0
  8344  004CBC  0100               	movlb	0	; () banked
  8345  004CBE  6DA6               	negf	___awdiv@divisor& (0+255),b
  8346  004CC0  1FA7               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8347  004CC2  B0D8               	btfsc	status,0,c
  8348  004CC4  2BA7               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8349                           
  8350                           ; BSR set to: 0
  8351  004CC6  0E01               	movlw	1
  8352  004CC8  0100               	movlb	0	; () banked
  8353  004CCA  6FA9               	movwf	___awdiv@sign& (0+255),b
  8354  004CCC                     l7179:
  8355                           
  8356                           ; BSR set to: 0
  8357  004CCC  0100               	movlb	0	; () banked
  8358  004CCE  AFA5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8359  004CD0  D008               	goto	l7185
  8360                           
  8361                           ; BSR set to: 0
  8362  004CD2  0100               	movlb	0	; () banked
  8363  004CD4  6DA4               	negf	___awdiv@dividend& (0+255),b
  8364  004CD6  1FA5               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8365  004CD8  B0D8               	btfsc	status,0,c
  8366  004CDA  2BA5               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8367                           
  8368                           ; BSR set to: 0
  8369  004CDC  0E01               	movlw	1
  8370  004CDE  0100               	movlb	0	; () banked
  8371  004CE0  1BA9               	xorwf	___awdiv@sign& (0+255),f,b
  8372  004CE2                     l7185:
  8373                           
  8374                           ; BSR set to: 0
  8375  004CE2  0E00               	movlw	0
  8376  004CE4  0100               	movlb	0	; () banked
  8377  004CE6  6FAB               	movwf	(___awdiv@quotient+1)& (0+255),b
  8378  004CE8  0E00               	movlw	0
  8379  004CEA  6FAA               	movwf	___awdiv@quotient& (0+255),b
  8380                           
  8381                           ; BSR set to: 0
  8382  004CEC  0100               	movlb	0	; () banked
  8383  004CEE  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8384  004CF0  0100               	movlb	0	; () banked
  8385  004CF2  11A7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8386  004CF4  B4D8               	btfsc	status,2,c
  8387  004CF6  D02C               	goto	l7207
  8388                           
  8389                           ; BSR set to: 0
  8390  004CF8  0E01               	movlw	1
  8391  004CFA  0100               	movlb	0	; () banked
  8392  004CFC  6FA8               	movwf	___awdiv@counter& (0+255),b
  8393  004CFE  D006               	goto	l7193
  8394  004D00                     l7191:
  8395                           
  8396                           ; BSR set to: 0
  8397  004D00  0100               	movlb	0	; () banked
  8398  004D02  90D8               	bcf	status,0,c
  8399  004D04  37A6               	rlcf	___awdiv@divisor& (0+255),f,b
  8400  004D06  37A7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8401  004D08  0100               	movlb	0	; () banked
  8402  004D0A  2BA8               	incf	___awdiv@counter& (0+255),f,b
  8403  004D0C                     l7193:
  8404                           
  8405                           ; BSR set to: 0
  8406  004D0C  0100               	movlb	0	; () banked
  8407  004D0E  AFA7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8408  004D10  D7F7               	goto	l7191
  8409  004D12                     l7195:
  8410                           
  8411                           ; BSR set to: 0
  8412  004D12  0100               	movlb	0	; () banked
  8413  004D14  90D8               	bcf	status,0,c
  8414  004D16  37AA               	rlcf	___awdiv@quotient& (0+255),f,b
  8415  004D18  37AB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 0
  8418  004D1A  0100               	movlb	0	; () banked
  8419  004D1C  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8420  004D1E  0100               	movlb	0	; () banked
  8421  004D20  5DA4               	subwf	___awdiv@dividend& (0+255),w,b
  8422  004D22  0100               	movlb	0	; () banked
  8423  004D24  51A7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8424  004D26  0100               	movlb	0	; () banked
  8425  004D28  59A5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8426  004D2A  A0D8               	btfss	status,0,c
  8427  004D2C  D00A               	goto	l7203
  8428                           
  8429                           ; BSR set to: 0
  8430  004D2E  0100               	movlb	0	; () banked
  8431  004D30  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8432  004D32  0100               	movlb	0	; () banked
  8433  004D34  5FA4               	subwf	___awdiv@dividend& (0+255),f,b
  8434  004D36  0100               	movlb	0	; () banked
  8435  004D38  51A7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8436  004D3A  0100               	movlb	0	; () banked
  8437  004D3C  5BA5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8438                           
  8439                           ; BSR set to: 0
  8440  004D3E  0100               	movlb	0	; () banked
  8441  004D40  81AA               	bsf	___awdiv@quotient& (0+255),0,b
  8442  004D42                     l7203:
  8443                           
  8444                           ; BSR set to: 0
  8445  004D42  0100               	movlb	0	; () banked
  8446  004D44  90D8               	bcf	status,0,c
  8447  004D46  33A7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8448  004D48  33A6               	rrcf	___awdiv@divisor& (0+255),f,b
  8449                           
  8450                           ; BSR set to: 0
  8451  004D4A  0100               	movlb	0	; () banked
  8452  004D4C  2FA8               	decfsz	___awdiv@counter& (0+255),f,b
  8453  004D4E  D7E1               	goto	l7195
  8454  004D50                     l7207:
  8455                           
  8456                           ; BSR set to: 0
  8457  004D50  0100               	movlb	0	; () banked
  8458  004D52  51A9               	movf	___awdiv@sign& (0+255),w,b
  8459  004D54  0100               	movlb	0	; () banked
  8460  004D56  B4D8               	btfsc	status,2,c
  8461  004D58  D005               	goto	l7211
  8462                           
  8463                           ; BSR set to: 0
  8464  004D5A  0100               	movlb	0	; () banked
  8465  004D5C  6DAA               	negf	___awdiv@quotient& (0+255),b
  8466  004D5E  1FAB               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8467  004D60  B0D8               	btfsc	status,0,c
  8468  004D62  2BAB               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8469  004D64                     l7211:
  8470                           
  8471                           ; BSR set to: 0
  8472  004D64  C0AA  F0A4         	movff	___awdiv@quotient,?___awdiv
  8473  004D68  C0AB  F0A5         	movff	___awdiv@quotient+1,?___awdiv+1
  8474  004D6C  0012               	return	
  8475  004D6E                     __end_of___awdiv:
  8476                           	opt stack 0
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           intcon	equ	0xFF2
  8484                           intcon2	equ	0xFF1
  8485                           intcon3	equ	0xFF0
  8486                           postinc0	equ	0xFEE
  8487                           wreg	equ	0xFE8
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function __tdiv_to_l_ *****************
  8496 ;; Defined at:
  8497 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  f1              3   30[BANK0 ] float 
  8500 ;;  f2              3   33[BANK0 ] float 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  quot            4   39[BANK0 ] unsigned long 
  8503 ;;  exp1            1   44[BANK0 ] unsigned char 
  8504 ;;  cntr            1   43[BANK0 ] unsigned char 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  4   30[BANK0 ] unsigned long 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8514 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;Total ram usage:       15 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    7
  8521 ;; This function calls:
  8522 ;;		Nothing
  8523 ;; This function is called by:
  8524 ;;		_printf
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text22
  8529  0033E8                     __ptext22:
  8530                           	opt stack 0
  8531  0033E8                     __tdiv_to_l_:
  8532                           	opt stack 21
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;incstack = 0
  8536  0033E8  C0A0  F0A4         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8537  0033EC  0100               	movlb	0	; () banked
  8538  0033EE  6BA5               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8539  0033F0  6BA6               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8540  0033F2  0100               	movlb	0	; () banked
  8541  0033F4  359F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8542  0033F6  0100               	movlb	0	; () banked
  8543  0033F8  37A4               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8544  0033FA  E301               	bnc	u5211
  8545  0033FC  81A5               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8546  0033FE                     u5211:
  8547  0033FE  0100               	movlb	0	; () banked
  8548  003400  51A4               	movf	??__tdiv_to_l_& (0+255),w,b
  8549  003402  0100               	movlb	0	; () banked
  8550  003404  6FAC               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8551  003406  0100               	movlb	0	; () banked
  8552  003408  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8553  00340A  A4D8               	btfss	status,2,c
  8554  00340C  D00A               	goto	l4987
  8555                           
  8556                           ; BSR set to: 0
  8557  00340E  0E00               	movlw	0
  8558  003410  0100               	movlb	0	; () banked
  8559  003412  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8560  003414  0E00               	movlw	0
  8561  003416  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8562  003418  0E00               	movlw	0
  8563  00341A  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8564  00341C  0E00               	movlw	0
  8565  00341E  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8566                           
  8567                           ; BSR set to: 0
  8568  003420  0012               	return	
  8569  003422                     l4987:
  8570                           
  8571                           ; BSR set to: 0
  8572  003422  C0A3  F0A4         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8573  003426  0100               	movlb	0	; () banked
  8574  003428  6BA5               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8575  00342A  6BA6               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8576  00342C  0100               	movlb	0	; () banked
  8577  00342E  35A2               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8578  003430  0100               	movlb	0	; () banked
  8579  003432  37A4               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8580  003434  E301               	bnc	u5231
  8581  003436  81A5               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8582  003438                     u5231:
  8583  003438  0100               	movlb	0	; () banked
  8584  00343A  51A4               	movf	??__tdiv_to_l_& (0+255),w,b
  8585  00343C  0100               	movlb	0	; () banked
  8586  00343E  6FAB               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8587  003440  0100               	movlb	0	; () banked
  8588  003442  51AB               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8589  003444  A4D8               	btfss	status,2,c
  8590  003446  D00A               	goto	l4993
  8591                           
  8592                           ; BSR set to: 0
  8593  003448  0E00               	movlw	0
  8594  00344A  0100               	movlb	0	; () banked
  8595  00344C  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8596  00344E  0E00               	movlw	0
  8597  003450  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8598  003452  0E00               	movlw	0
  8599  003454  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8600  003456  0E00               	movlw	0
  8601  003458  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8602                           
  8603                           ; BSR set to: 0
  8604  00345A  0012               	return	
  8605  00345C                     l4993:
  8606                           
  8607                           ; BSR set to: 0
  8608  00345C  0100               	movlb	0	; () banked
  8609  00345E  8F9F               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8610                           
  8611                           ; BSR set to: 0
  8612  003460  0EFF               	movlw	255
  8613  003462  0100               	movlb	0	; () banked
  8614  003464  179E               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8615  003466  0EFF               	movlw	255
  8616  003468  0100               	movlb	0	; () banked
  8617  00346A  179F               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8618  00346C  0E00               	movlw	0
  8619  00346E  0100               	movlb	0	; () banked
  8620  003470  17A0               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8621  003472  0100               	movlb	0	; () banked
  8622  003474  8FA2               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8623                           
  8624                           ; BSR set to: 0
  8625  003476  0EFF               	movlw	255
  8626  003478  0100               	movlb	0	; () banked
  8627  00347A  17A1               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8628  00347C  0EFF               	movlw	255
  8629  00347E  0100               	movlb	0	; () banked
  8630  003480  17A2               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8631  003482  0E00               	movlw	0
  8632  003484  0100               	movlb	0	; () banked
  8633  003486  17A3               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8634                           
  8635                           ; BSR set to: 0
  8636  003488  0E00               	movlw	0
  8637  00348A  0100               	movlb	0	; () banked
  8638  00348C  6FA7               	movwf	__tdiv_to_l_@quot& (0+255),b
  8639  00348E  0E00               	movlw	0
  8640  003490  6FA8               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8641  003492  0E00               	movlw	0
  8642  003494  6FA9               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8643  003496  0E00               	movlw	0
  8644  003498  6FAA               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8645                           
  8646                           ; BSR set to: 0
  8647  00349A  0E7F               	movlw	127
  8648  00349C  0100               	movlb	0	; () banked
  8649  00349E  5FAC               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8650                           
  8651                           ; BSR set to: 0
  8652  0034A0  0100               	movlb	0	; () banked
  8653  0034A2  51AB               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8654  0034A4  0F98               	addlw	152
  8655  0034A6  0100               	movlb	0	; () banked
  8656  0034A8  5FAC               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8657                           
  8658                           ; BSR set to: 0
  8659  0034AA  0E18               	movlw	24
  8660  0034AC  0100               	movlb	0	; () banked
  8661  0034AE  6FAB               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8662  0034B0                     l916:
  8663                           
  8664                           ; BSR set to: 0
  8665  0034B0  0100               	movlb	0	; () banked
  8666  0034B2  90D8               	bcf	status,0,c
  8667  0034B4  37A7               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8668  0034B6  37A8               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8669  0034B8  37A9               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8670  0034BA  37AA               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8671                           
  8672                           ; BSR set to: 0
  8673  0034BC  0100               	movlb	0	; () banked
  8674  0034BE  51A1               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8675  0034C0  0100               	movlb	0	; () banked
  8676  0034C2  5D9E               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8677  0034C4  0100               	movlb	0	; () banked
  8678  0034C6  51A2               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8679  0034C8  0100               	movlb	0	; () banked
  8680  0034CA  599F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8681  0034CC  0100               	movlb	0	; () banked
  8682  0034CE  51A3               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8683  0034D0  0100               	movlb	0	; () banked
  8684  0034D2  59A0               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8685  0034D4  A0D8               	btfss	status,0,c
  8686  0034D6  D00E               	goto	l917
  8687                           
  8688                           ; BSR set to: 0
  8689  0034D8  0100               	movlb	0	; () banked
  8690  0034DA  51A1               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8691  0034DC  0100               	movlb	0	; () banked
  8692  0034DE  5F9E               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8693  0034E0  0100               	movlb	0	; () banked
  8694  0034E2  51A2               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8695  0034E4  0100               	movlb	0	; () banked
  8696  0034E6  5B9F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8697  0034E8  0100               	movlb	0	; () banked
  8698  0034EA  51A3               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8699  0034EC  0100               	movlb	0	; () banked
  8700  0034EE  5BA0               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8701                           
  8702                           ; BSR set to: 0
  8703  0034F0  0100               	movlb	0	; () banked
  8704  0034F2  81A7               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8705  0034F4                     l917:
  8706                           
  8707                           ; BSR set to: 0
  8708  0034F4  0100               	movlb	0	; () banked
  8709  0034F6  90D8               	bcf	status,0,c
  8710  0034F8  379E               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8711  0034FA  379F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8712  0034FC  37A0               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8713                           
  8714                           ; BSR set to: 0
  8715  0034FE  0100               	movlb	0	; () banked
  8716  003500  2FAB               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8717  003502  D7D6               	goto	l916
  8718                           
  8719                           ; BSR set to: 0
  8720                           
  8721                           ; BSR set to: 0
  8722  003504  0100               	movlb	0	; () banked
  8723  003506  AFAC               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8724  003508  D01A               	goto	l5027
  8725                           
  8726                           ; BSR set to: 0
  8727  00350A  0100               	movlb	0	; () banked
  8728  00350C  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8729  00350E  0A80               	xorlw	128
  8730  003510  0F97               	addlw	151
  8731  003512  B0D8               	btfsc	status,0,c
  8732  003514  D00A               	goto	l5023
  8733                           
  8734                           ; BSR set to: 0
  8735  003516  0E00               	movlw	0
  8736  003518  0100               	movlb	0	; () banked
  8737  00351A  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8738  00351C  0E00               	movlw	0
  8739  00351E  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8740  003520  0E00               	movlw	0
  8741  003522  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8742  003524  0E00               	movlw	0
  8743  003526  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8744                           
  8745                           ; BSR set to: 0
  8746  003528  0012               	return	
  8747  00352A                     l5023:
  8748                           
  8749                           ; BSR set to: 0
  8750  00352A  0100               	movlb	0	; () banked
  8751  00352C  90D8               	bcf	status,0,c
  8752  00352E  33AA               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8753  003530  33A9               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8754  003532  33A8               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8755  003534  33A7               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8756                           
  8757                           ; BSR set to: 0
  8758  003536  0100               	movlb	0	; () banked
  8759  003538  3FAC               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8760  00353A  D7F7               	goto	l5023
  8761                           
  8762                           ; BSR set to: 0
  8763  00353C  D01B               	goto	l923
  8764  00353E                     l5027:
  8765                           
  8766                           ; BSR set to: 0
  8767  00353E  0E17               	movlw	23
  8768  003540  0100               	movlb	0	; () banked
  8769  003542  65AC               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8770  003544  D012               	goto	l5035
  8771                           
  8772                           ; BSR set to: 0
  8773  003546  0E00               	movlw	0
  8774  003548  0100               	movlb	0	; () banked
  8775  00354A  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8776  00354C  0E00               	movlw	0
  8777  00354E  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8778  003550  0E00               	movlw	0
  8779  003552  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8780  003554  0E00               	movlw	0
  8781  003556  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8782                           
  8783                           ; BSR set to: 0
  8784  003558  0012               	return	
  8785  00355A                     l5033:
  8786                           
  8787                           ; BSR set to: 0
  8788  00355A  0100               	movlb	0	; () banked
  8789  00355C  90D8               	bcf	status,0,c
  8790  00355E  37A7               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8791  003560  37A8               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8792  003562  37A9               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8793  003564  37AA               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8794  003566  0100               	movlb	0	; () banked
  8795  003568  07AC               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8796  00356A                     l5035:
  8797                           
  8798                           ; BSR set to: 0
  8799  00356A  0100               	movlb	0	; () banked
  8800  00356C  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8801  00356E  0100               	movlb	0	; () banked
  8802  003570  A4D8               	btfss	status,2,c
  8803  003572  D7F3               	goto	l5033
  8804  003574                     l923:
  8805                           
  8806                           ; BSR set to: 0
  8807  003574  C0A7  F09E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8808  003578  C0A8  F09F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8809  00357C  C0A9  F0A0         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8810  003580  C0AA  F0A1         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8811                           
  8812                           ; BSR set to: 0
  8813  003584  0012               	return		;funcret
  8814  003586                     __end_of__tdiv_to_l_:
  8815                           	opt stack 0
  8816                           tblptru	equ	0xFF8
  8817                           tblptrh	equ	0xFF7
  8818                           tblptrl	equ	0xFF6
  8819                           tablat	equ	0xFF5
  8820                           prodh	equ	0xFF4
  8821                           prodl	equ	0xFF3
  8822                           intcon	equ	0xFF2
  8823                           intcon2	equ	0xFF1
  8824                           intcon3	equ	0xFF0
  8825                           postinc0	equ	0xFEE
  8826                           wreg	equ	0xFE8
  8827                           indf2	equ	0xFDF
  8828                           postinc2	equ	0xFDE
  8829                           postdec2	equ	0xFDD
  8830                           fsr2h	equ	0xFDA
  8831                           fsr2l	equ	0xFD9
  8832                           status	equ	0xFD8
  8833                           
  8834 ;; *************** function __div_to_l_ *****************
  8835 ;; Defined at:
  8836 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;  f1              3   30[BANK0 ] unsigned long 
  8839 ;;  f2              3   33[BANK0 ] unsigned long 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  quot            4   36[BANK0 ] unsigned long 
  8842 ;;  exp1            1   41[BANK0 ] unsigned char 
  8843 ;;  cntr            1   40[BANK0 ] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  4   30[BANK0 ] unsigned long 
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 0/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8853 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;Total ram usage:       12 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    7
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		_printf
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text23
  8868  003586                     __ptext23:
  8869                           	opt stack 0
  8870  003586                     __div_to_l_:
  8871                           	opt stack 21
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;incstack = 0
  8875  003586  0100               	movlb	0	; () banked
  8876  003588  35A0               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  8877  00358A  35A1               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  8878  00358C  0100               	movlb	0	; () banked
  8879  00358E  6FA9               	movwf	__div_to_l_@exp1& (0+255),b
  8880  003590  0100               	movlb	0	; () banked
  8881  003592  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  8882  003594  A4D8               	btfss	status,2,c
  8883  003596  D00A               	goto	l5043
  8884                           
  8885                           ; BSR set to: 0
  8886  003598  0E00               	movlw	0
  8887  00359A  0100               	movlb	0	; () banked
  8888  00359C  6F9E               	movwf	?__div_to_l_& (0+255),b
  8889  00359E  0E00               	movlw	0
  8890  0035A0  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  8891  0035A2  0E00               	movlw	0
  8892  0035A4  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  8893  0035A6  0E00               	movlw	0
  8894  0035A8  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897  0035AA  0012               	return	
  8898  0035AC                     l5043:
  8899                           
  8900                           ; BSR set to: 0
  8901  0035AC  0100               	movlb	0	; () banked
  8902  0035AE  35A3               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  8903  0035B0  35A4               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  8904  0035B2  0100               	movlb	0	; () banked
  8905  0035B4  6FA8               	movwf	__div_to_l_@cntr& (0+255),b
  8906  0035B6  0100               	movlb	0	; () banked
  8907  0035B8  51A8               	movf	__div_to_l_@cntr& (0+255),w,b
  8908  0035BA  A4D8               	btfss	status,2,c
  8909  0035BC  D00A               	goto	l5049
  8910                           
  8911                           ; BSR set to: 0
  8912  0035BE  0E00               	movlw	0
  8913  0035C0  0100               	movlb	0	; () banked
  8914  0035C2  6F9E               	movwf	?__div_to_l_& (0+255),b
  8915  0035C4  0E00               	movlw	0
  8916  0035C6  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  8917  0035C8  0E00               	movlw	0
  8918  0035CA  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  8919  0035CC  0E00               	movlw	0
  8920  0035CE  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  8921                           
  8922                           ; BSR set to: 0
  8923  0035D0  0012               	return	
  8924  0035D2                     l5049:
  8925                           
  8926                           ; BSR set to: 0
  8927  0035D2  0100               	movlb	0	; () banked
  8928  0035D4  8FA0               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  8929                           
  8930                           ; BSR set to: 0
  8931  0035D6  0EFF               	movlw	255
  8932  0035D8  0100               	movlb	0	; () banked
  8933  0035DA  179E               	andwf	__div_to_l_@f1& (0+255),f,b
  8934  0035DC  0EFF               	movlw	255
  8935  0035DE  179F               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  8936  0035E0  0EFF               	movlw	255
  8937  0035E2  17A0               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  8938  0035E4  0E00               	movlw	0
  8939  0035E6  17A1               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  8940                           
  8941                           ; BSR set to: 0
  8942  0035E8  0100               	movlb	0	; () banked
  8943  0035EA  8FA3               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  8944  0035EC  0EFF               	movlw	255
  8945  0035EE  0100               	movlb	0	; () banked
  8946  0035F0  17A1               	andwf	__div_to_l_@f2& (0+255),f,b
  8947  0035F2  0EFF               	movlw	255
  8948  0035F4  17A2               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  8949  0035F6  0EFF               	movlw	255
  8950  0035F8  17A3               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  8951  0035FA  0E00               	movlw	0
  8952  0035FC  17A4               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  8953                           
  8954                           ; BSR set to: 0
  8955  0035FE  0E00               	movlw	0
  8956  003600  0100               	movlb	0	; () banked
  8957  003602  6FA4               	movwf	__div_to_l_@quot& (0+255),b
  8958  003604  0E00               	movlw	0
  8959  003606  6FA5               	movwf	(__div_to_l_@quot+1)& (0+255),b
  8960  003608  0E00               	movlw	0
  8961  00360A  6FA6               	movwf	(__div_to_l_@quot+2)& (0+255),b
  8962  00360C  0E00               	movlw	0
  8963  00360E  6FA7               	movwf	(__div_to_l_@quot+3)& (0+255),b
  8964                           
  8965                           ; BSR set to: 0
  8966  003610  0E7F               	movlw	127
  8967  003612  0100               	movlb	0	; () banked
  8968  003614  5FA9               	subwf	__div_to_l_@exp1& (0+255),f,b
  8969                           
  8970                           ; BSR set to: 0
  8971  003616  0100               	movlb	0	; () banked
  8972  003618  51A8               	movf	__div_to_l_@cntr& (0+255),w,b
  8973  00361A  0FA0               	addlw	160
  8974  00361C  0100               	movlb	0	; () banked
  8975  00361E  5FA9               	subwf	__div_to_l_@exp1& (0+255),f,b
  8976                           
  8977                           ; BSR set to: 0
  8978  003620  0E20               	movlw	32
  8979  003622  0100               	movlb	0	; () banked
  8980  003624  6FA8               	movwf	__div_to_l_@cntr& (0+255),b
  8981  003626                     l5063:
  8982                           
  8983                           ; BSR set to: 0
  8984  003626  0100               	movlb	0	; () banked
  8985  003628  90D8               	bcf	status,0,c
  8986  00362A  37A4               	rlcf	__div_to_l_@quot& (0+255),f,b
  8987  00362C  37A5               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  8988  00362E  37A6               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  8989  003630  37A7               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  003632  0100               	movlb	0	; () banked
  8993  003634  51A1               	movf	__div_to_l_@f2& (0+255),w,b
  8994  003636  0100               	movlb	0	; () banked
  8995  003638  5D9E               	subwf	__div_to_l_@f1& (0+255),w,b
  8996  00363A  0100               	movlb	0	; () banked
  8997  00363C  51A2               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  8998  00363E  0100               	movlb	0	; () banked
  8999  003640  599F               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  9000  003642  0100               	movlb	0	; () banked
  9001  003644  51A3               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9002  003646  0100               	movlb	0	; () banked
  9003  003648  59A0               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  9004  00364A  0100               	movlb	0	; () banked
  9005  00364C  51A4               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9006  00364E  0100               	movlb	0	; () banked
  9007  003650  59A1               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  9008  003652  A0D8               	btfss	status,0,c
  9009  003654  D012               	goto	l5071
  9010                           
  9011                           ; BSR set to: 0
  9012  003656  0100               	movlb	0	; () banked
  9013  003658  51A1               	movf	__div_to_l_@f2& (0+255),w,b
  9014  00365A  0100               	movlb	0	; () banked
  9015  00365C  5F9E               	subwf	__div_to_l_@f1& (0+255),f,b
  9016  00365E  0100               	movlb	0	; () banked
  9017  003660  51A2               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  9018  003662  0100               	movlb	0	; () banked
  9019  003664  5B9F               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  9020  003666  0100               	movlb	0	; () banked
  9021  003668  51A3               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  9022  00366A  0100               	movlb	0	; () banked
  9023  00366C  5BA0               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  9024  00366E  0100               	movlb	0	; () banked
  9025  003670  51A4               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  9026  003672  0100               	movlb	0	; () banked
  9027  003674  5BA1               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  9028                           
  9029                           ; BSR set to: 0
  9030  003676  0100               	movlb	0	; () banked
  9031  003678  81A4               	bsf	__div_to_l_@quot& (0+255),0,b
  9032  00367A                     l5071:
  9033                           
  9034                           ; BSR set to: 0
  9035  00367A  0100               	movlb	0	; () banked
  9036  00367C  90D8               	bcf	status,0,c
  9037  00367E  379E               	rlcf	__div_to_l_@f1& (0+255),f,b
  9038  003680  379F               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  9039  003682  37A0               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  9040  003684  37A1               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  9041                           
  9042                           ; BSR set to: 0
  9043  003686  0100               	movlb	0	; () banked
  9044  003688  2FA8               	decfsz	__div_to_l_@cntr& (0+255),f,b
  9045  00368A  D7CD               	goto	l5063
  9046                           
  9047                           ; BSR set to: 0
  9048                           
  9049                           ; BSR set to: 0
  9050  00368C  0100               	movlb	0	; () banked
  9051  00368E  AFA9               	btfss	__div_to_l_@exp1& (0+255),7,b
  9052  003690  D01A               	goto	l5087
  9053                           
  9054                           ; BSR set to: 0
  9055  003692  0100               	movlb	0	; () banked
  9056  003694  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  9057  003696  0A80               	xorlw	128
  9058  003698  0F9F               	addlw	159
  9059  00369A  B0D8               	btfsc	status,0,c
  9060  00369C  D00A               	goto	l5083
  9061                           
  9062                           ; BSR set to: 0
  9063  00369E  0E00               	movlw	0
  9064  0036A0  0100               	movlb	0	; () banked
  9065  0036A2  6F9E               	movwf	?__div_to_l_& (0+255),b
  9066  0036A4  0E00               	movlw	0
  9067  0036A6  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  9068  0036A8  0E00               	movlw	0
  9069  0036AA  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  9070  0036AC  0E00               	movlw	0
  9071  0036AE  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  9072                           
  9073                           ; BSR set to: 0
  9074  0036B0  0012               	return	
  9075  0036B2                     l5083:
  9076                           
  9077                           ; BSR set to: 0
  9078  0036B2  0100               	movlb	0	; () banked
  9079  0036B4  90D8               	bcf	status,0,c
  9080  0036B6  33A7               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9081  0036B8  33A6               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9082  0036BA  33A5               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9083  0036BC  33A4               	rrcf	__div_to_l_@quot& (0+255),f,b
  9084                           
  9085                           ; BSR set to: 0
  9086  0036BE  0100               	movlb	0	; () banked
  9087  0036C0  3FA9               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9088  0036C2  D7F7               	goto	l5083
  9089                           
  9090                           ; BSR set to: 0
  9091  0036C4  D01B               	goto	l819
  9092  0036C6                     l5087:
  9093                           
  9094                           ; BSR set to: 0
  9095  0036C6  0E1F               	movlw	31
  9096  0036C8  0100               	movlb	0	; () banked
  9097  0036CA  65A9               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9098  0036CC  D012               	goto	l5095
  9099                           
  9100                           ; BSR set to: 0
  9101  0036CE  0E00               	movlw	0
  9102  0036D0  0100               	movlb	0	; () banked
  9103  0036D2  6F9E               	movwf	?__div_to_l_& (0+255),b
  9104  0036D4  0E00               	movlw	0
  9105  0036D6  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  9106  0036D8  0E00               	movlw	0
  9107  0036DA  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  9108  0036DC  0E00               	movlw	0
  9109  0036DE  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  9110                           
  9111                           ; BSR set to: 0
  9112  0036E0  0012               	return	
  9113  0036E2                     l5093:
  9114                           
  9115                           ; BSR set to: 0
  9116  0036E2  0100               	movlb	0	; () banked
  9117  0036E4  90D8               	bcf	status,0,c
  9118  0036E6  37A4               	rlcf	__div_to_l_@quot& (0+255),f,b
  9119  0036E8  37A5               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9120  0036EA  37A6               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9121  0036EC  37A7               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9122  0036EE  0100               	movlb	0	; () banked
  9123  0036F0  07A9               	decf	__div_to_l_@exp1& (0+255),f,b
  9124  0036F2                     l5095:
  9125                           
  9126                           ; BSR set to: 0
  9127  0036F2  0100               	movlb	0	; () banked
  9128  0036F4  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  9129  0036F6  0100               	movlb	0	; () banked
  9130  0036F8  A4D8               	btfss	status,2,c
  9131  0036FA  D7F3               	goto	l5093
  9132  0036FC                     l819:
  9133                           
  9134                           ; BSR set to: 0
  9135  0036FC  C0A4  F09E         	movff	__div_to_l_@quot,?__div_to_l_
  9136  003700  C0A5  F09F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9137  003704  C0A6  F0A0         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9138  003708  C0A7  F0A1         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9139                           
  9140                           ; BSR set to: 0
  9141  00370C  0012               	return		;funcret
  9142  00370E                     __end_of__div_to_l_:
  9143                           	opt stack 0
  9144                           tblptru	equ	0xFF8
  9145                           tblptrh	equ	0xFF7
  9146                           tblptrl	equ	0xFF6
  9147                           tablat	equ	0xFF5
  9148                           prodh	equ	0xFF4
  9149                           prodl	equ	0xFF3
  9150                           intcon	equ	0xFF2
  9151                           intcon2	equ	0xFF1
  9152                           intcon3	equ	0xFF0
  9153                           postinc0	equ	0xFEE
  9154                           wreg	equ	0xFE8
  9155                           indf2	equ	0xFDF
  9156                           postinc2	equ	0xFDE
  9157                           postdec2	equ	0xFDD
  9158                           fsr2h	equ	0xFDA
  9159                           fsr2l	equ	0xFD9
  9160                           status	equ	0xFD8
  9161                           
  9162 ;; *************** function ___lltoft *****************
  9163 ;; Defined at:
  9164 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9165 ;; Parameters:    Size  Location     Type
  9166 ;;  c               4   38[BANK0 ] unsigned long 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;  exp             1   46[BANK0 ] unsigned char 
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  3   38[BANK0 ] float 
  9171 ;; Registers used:
  9172 ;;		wreg, status,2, status,0, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9178 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;Total ram usage:        9 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    8
  9185 ;; This function calls:
  9186 ;;		___ftpack
  9187 ;; This function is called by:
  9188 ;;		_printf
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           	psect	text24
  9193  00523A                     __ptext24:
  9194                           	opt stack 0
  9195  00523A                     ___lltoft:
  9196                           	opt stack 20
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;incstack = 0
  9200  00523A  0E8E               	movlw	142
  9201  00523C  0100               	movlb	0	; () banked
  9202  00523E  6FAE               	movwf	___lltoft@exp& (0+255),b
  9203  005240  D008               	goto	l7369
  9204  005242                     l7367:
  9205                           
  9206                           ; BSR set to: 0
  9207  005242  0100               	movlb	0	; () banked
  9208  005244  90D8               	bcf	status,0,c
  9209  005246  33A9               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9210  005248  33A8               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9211  00524A  33A7               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9212  00524C  33A6               	rrcf	___lltoft@c& (0+255),f,b
  9213  00524E  0100               	movlb	0	; () banked
  9214  005250  2BAE               	incf	___lltoft@exp& (0+255),f,b
  9215  005252                     l7369:
  9216                           
  9217                           ; BSR set to: 0
  9218  005252  0E00               	movlw	0
  9219  005254  0100               	movlb	0	; () banked
  9220  005256  15A6               	andwf	___lltoft@c& (0+255),w,b
  9221  005258  0100               	movlb	0	; () banked
  9222  00525A  6FAA               	movwf	??___lltoft& (0+255),b
  9223  00525C  0E00               	movlw	0
  9224  00525E  0100               	movlb	0	; () banked
  9225  005260  15A7               	andwf	(___lltoft@c+1)& (0+255),w,b
  9226  005262  0100               	movlb	0	; () banked
  9227  005264  6FAB               	movwf	(??___lltoft+1)& (0+255),b
  9228  005266  0E00               	movlw	0
  9229  005268  0100               	movlb	0	; () banked
  9230  00526A  15A8               	andwf	(___lltoft@c+2)& (0+255),w,b
  9231  00526C  0100               	movlb	0	; () banked
  9232  00526E  6FAC               	movwf	(??___lltoft+2)& (0+255),b
  9233  005270  0EFF               	movlw	255
  9234  005272  0100               	movlb	0	; () banked
  9235  005274  15A9               	andwf	(___lltoft@c+3)& (0+255),w,b
  9236  005276  0100               	movlb	0	; () banked
  9237  005278  6FAD               	movwf	(??___lltoft+3)& (0+255),b
  9238  00527A  0100               	movlb	0	; () banked
  9239  00527C  51AA               	movf	??___lltoft& (0+255),w,b
  9240  00527E  0100               	movlb	0	; () banked
  9241  005280  11AB               	iorwf	(??___lltoft+1)& (0+255),w,b
  9242  005282  0100               	movlb	0	; () banked
  9243  005284  11AC               	iorwf	(??___lltoft+2)& (0+255),w,b
  9244  005286  0100               	movlb	0	; () banked
  9245  005288  11AD               	iorwf	(??___lltoft+3)& (0+255),w,b
  9246  00528A  A4D8               	btfss	status,2,c
  9247  00528C  D7DA               	goto	l7367
  9248                           
  9249                           ; BSR set to: 0
  9250                           
  9251                           ; BSR set to: 0
  9252  00528E  C0A6  F09E         	movff	___lltoft@c,___ftpack@arg
  9253  005292  C0A7  F09F         	movff	___lltoft@c+1,___ftpack@arg+1
  9254  005296  C0A8  F0A0         	movff	___lltoft@c+2,___ftpack@arg+2
  9255  00529A  C0AE  F0A1         	movff	___lltoft@exp,___ftpack@exp
  9256  00529E  0E00               	movlw	0
  9257  0052A0  0100               	movlb	0	; () banked
  9258  0052A2  6FA2               	movwf	___ftpack@sign& (0+255),b
  9259  0052A4  ECF5  F01F         	call	___ftpack	;wreg free
  9260  0052A8  C09E  F0A6         	movff	?___ftpack,?___lltoft
  9261  0052AC  C09F  F0A7         	movff	?___ftpack+1,?___lltoft+1
  9262  0052B0  C0A0  F0A8         	movff	?___ftpack+2,?___lltoft+2
  9263  0052B4  0012               	return	
  9264  0052B6                     __end_of___lltoft:
  9265                           	opt stack 0
  9266                           tblptru	equ	0xFF8
  9267                           tblptrh	equ	0xFF7
  9268                           tblptrl	equ	0xFF6
  9269                           tablat	equ	0xFF5
  9270                           prodh	equ	0xFF4
  9271                           prodl	equ	0xFF3
  9272                           intcon	equ	0xFF2
  9273                           intcon2	equ	0xFF1
  9274                           intcon3	equ	0xFF0
  9275                           postinc0	equ	0xFEE
  9276                           wreg	equ	0xFE8
  9277                           indf2	equ	0xFDF
  9278                           postinc2	equ	0xFDE
  9279                           postdec2	equ	0xFDD
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function ___llmod *****************
  9285 ;; Defined at:
  9286 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;  dividend        4   43[BANK0 ] unsigned long 
  9289 ;;  divisor         4   47[BANK0 ] unsigned long 
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;  counter         1   51[BANK0 ] unsigned char 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  4   43[BANK0 ] unsigned long 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9301 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;Total ram usage:        9 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    7
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_printf
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text25
  9316  004F7A                     __ptext25:
  9317                           	opt stack 0
  9318  004F7A                     ___llmod:
  9319                           	opt stack 21
  9320                           
  9321                           ;incstack = 0
  9322  004F7A  0100               	movlb	0	; () banked
  9323  004F7C  51AF               	movf	___llmod@divisor& (0+255),w,b
  9324  004F7E  0100               	movlb	0	; () banked
  9325  004F80  11B0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9326  004F82  0100               	movlb	0	; () banked
  9327  004F84  11B1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9328  004F86  0100               	movlb	0	; () banked
  9329  004F88  11B2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9330  004F8A  B4D8               	btfsc	status,2,c
  9331  004F8C  D03A               	goto	l1008
  9332                           
  9333                           ; BSR set to: 0
  9334  004F8E  0E01               	movlw	1
  9335  004F90  0100               	movlb	0	; () banked
  9336  004F92  6FB3               	movwf	___llmod@counter& (0+255),b
  9337  004F94  D008               	goto	l5201
  9338  004F96                     l5199:
  9339                           
  9340                           ; BSR set to: 0
  9341  004F96  0100               	movlb	0	; () banked
  9342  004F98  90D8               	bcf	status,0,c
  9343  004F9A  37AF               	rlcf	___llmod@divisor& (0+255),f,b
  9344  004F9C  37B0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9345  004F9E  37B1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9346  004FA0  37B2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9347  004FA2  0100               	movlb	0	; () banked
  9348  004FA4  2BB3               	incf	___llmod@counter& (0+255),f,b
  9349  004FA6                     l5201:
  9350                           
  9351                           ; BSR set to: 0
  9352  004FA6  0100               	movlb	0	; () banked
  9353  004FA8  AFB2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9354  004FAA  D7F5               	goto	l5199
  9355  004FAC                     l5203:
  9356                           
  9357                           ; BSR set to: 0
  9358  004FAC  0100               	movlb	0	; () banked
  9359  004FAE  51AF               	movf	___llmod@divisor& (0+255),w,b
  9360  004FB0  0100               	movlb	0	; () banked
  9361  004FB2  5DAB               	subwf	___llmod@dividend& (0+255),w,b
  9362  004FB4  0100               	movlb	0	; () banked
  9363  004FB6  51B0               	movf	(___llmod@divisor+1)& (0+255),w,b
  9364  004FB8  0100               	movlb	0	; () banked
  9365  004FBA  59AC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9366  004FBC  0100               	movlb	0	; () banked
  9367  004FBE  51B1               	movf	(___llmod@divisor+2)& (0+255),w,b
  9368  004FC0  0100               	movlb	0	; () banked
  9369  004FC2  59AD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9370  004FC4  0100               	movlb	0	; () banked
  9371  004FC6  51B2               	movf	(___llmod@divisor+3)& (0+255),w,b
  9372  004FC8  0100               	movlb	0	; () banked
  9373  004FCA  59AE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9374  004FCC  A0D8               	btfss	status,0,c
  9375  004FCE  D010               	goto	l5207
  9376                           
  9377                           ; BSR set to: 0
  9378  004FD0  0100               	movlb	0	; () banked
  9379  004FD2  51AF               	movf	___llmod@divisor& (0+255),w,b
  9380  004FD4  0100               	movlb	0	; () banked
  9381  004FD6  5FAB               	subwf	___llmod@dividend& (0+255),f,b
  9382  004FD8  0100               	movlb	0	; () banked
  9383  004FDA  51B0               	movf	(___llmod@divisor+1)& (0+255),w,b
  9384  004FDC  0100               	movlb	0	; () banked
  9385  004FDE  5BAC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9386  004FE0  0100               	movlb	0	; () banked
  9387  004FE2  51B1               	movf	(___llmod@divisor+2)& (0+255),w,b
  9388  004FE4  0100               	movlb	0	; () banked
  9389  004FE6  5BAD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9390  004FE8  0100               	movlb	0	; () banked
  9391  004FEA  51B2               	movf	(___llmod@divisor+3)& (0+255),w,b
  9392  004FEC  0100               	movlb	0	; () banked
  9393  004FEE  5BAE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9394  004FF0                     l5207:
  9395                           
  9396                           ; BSR set to: 0
  9397  004FF0  0100               	movlb	0	; () banked
  9398  004FF2  90D8               	bcf	status,0,c
  9399  004FF4  33B2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9400  004FF6  33B1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9401  004FF8  33B0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9402  004FFA  33AF               	rrcf	___llmod@divisor& (0+255),f,b
  9403                           
  9404                           ; BSR set to: 0
  9405  004FFC  0100               	movlb	0	; () banked
  9406  004FFE  2FB3               	decfsz	___llmod@counter& (0+255),f,b
  9407  005000  D7D5               	goto	l5203
  9408  005002                     l1008:
  9409                           
  9410                           ; BSR set to: 0
  9411  005002  C0AB  F0AB         	movff	___llmod@dividend,?___llmod
  9412  005006  C0AC  F0AC         	movff	___llmod@dividend+1,?___llmod+1
  9413  00500A  C0AD  F0AD         	movff	___llmod@dividend+2,?___llmod+2
  9414  00500E  C0AE  F0AE         	movff	___llmod@dividend+3,?___llmod+3
  9415                           
  9416                           ; BSR set to: 0
  9417  005012  0012               	return		;funcret
  9418  005014                     __end_of___llmod:
  9419                           	opt stack 0
  9420                           tblptru	equ	0xFF8
  9421                           tblptrh	equ	0xFF7
  9422                           tblptrl	equ	0xFF6
  9423                           tablat	equ	0xFF5
  9424                           prodh	equ	0xFF4
  9425                           prodl	equ	0xFF3
  9426                           intcon	equ	0xFF2
  9427                           intcon2	equ	0xFF1
  9428                           intcon3	equ	0xFF0
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           fsr2h	equ	0xFDA
  9435                           fsr2l	equ	0xFD9
  9436                           status	equ	0xFD8
  9437                           
  9438 ;; *************** function ___fttol *****************
  9439 ;; Defined at:
  9440 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;  f1              3    7[BANK1 ] float 
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;  lval            4   17[BANK1 ] unsigned long 
  9445 ;;  exp1            1   21[BANK1 ] unsigned char 
  9446 ;;  sign1           1   16[BANK1 ] unsigned char 
  9447 ;; Return value:  Size  Location     Type
  9448 ;;                  4    7[BANK1 ] long 
  9449 ;; Registers used:
  9450 ;;		wreg, status,2, status,0
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9456 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9458 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;Total ram usage:       15 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    7
  9463 ;; This function calls:
  9464 ;;		Nothing
  9465 ;; This function is called by:
  9466 ;;		_printf
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           	psect	text26
  9471  003B2E                     __ptext26:
  9472                           	opt stack 0
  9473  003B2E                     ___fttol:
  9474                           	opt stack 21
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;incstack = 0
  9478  003B2E  C109  F10B         	movff	___fttol@f1+2,??___fttol
  9479  003B32  0101               	movlb	1	; () banked
  9480  003B34  6B0C               	clrf	(??___fttol+1)& (0+255),b
  9481  003B36  6B0D               	clrf	(??___fttol+2)& (0+255),b
  9482  003B38  0101               	movlb	1	; () banked
  9483  003B3A  3508               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9484  003B3C  0101               	movlb	1	; () banked
  9485  003B3E  370B               	rlcf	??___fttol& (0+255),f,b
  9486  003B40  E301               	bnc	u8311
  9487  003B42  810C               	bsf	(??___fttol+1)& (0+255),0,b
  9488  003B44                     u8311:
  9489  003B44  0101               	movlb	1	; () banked
  9490  003B46  510B               	movf	??___fttol& (0+255),w,b
  9491  003B48  0101               	movlb	1	; () banked
  9492  003B4A  6F15               	movwf	___fttol@exp1& (0+255),b
  9493  003B4C  0101               	movlb	1	; () banked
  9494  003B4E  5115               	movf	___fttol@exp1& (0+255),w,b
  9495  003B50  A4D8               	btfss	status,2,c
  9496  003B52  D00A               	goto	l7325
  9497                           
  9498                           ; BSR set to: 1
  9499  003B54  0E00               	movlw	0
  9500  003B56  0101               	movlb	1	; () banked
  9501  003B58  6F07               	movwf	?___fttol& (0+255),b
  9502  003B5A  0E00               	movlw	0
  9503  003B5C  6F08               	movwf	(?___fttol+1)& (0+255),b
  9504  003B5E  0E00               	movlw	0
  9505  003B60  6F09               	movwf	(?___fttol+2)& (0+255),b
  9506  003B62  0E00               	movlw	0
  9507  003B64  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9508                           
  9509                           ; BSR set to: 1
  9510  003B66  0012               	return	
  9511  003B68                     l7325:
  9512                           
  9513                           ; BSR set to: 1
  9514  003B68  0E17               	movlw	23
  9515  003B6A  0101               	movlb	1	; () banked
  9516  003B6C  6F0B               	movwf	??___fttol& (0+255),b
  9517  003B6E  C107  F10C         	movff	___fttol@f1,??___fttol+1
  9518  003B72  C108  F10D         	movff	___fttol@f1+1,??___fttol+2
  9519  003B76  C109  F10E         	movff	___fttol@f1+2,??___fttol+3
  9520  003B7A  0101               	movlb	1	; () banked
  9521  003B7C  290B               	incf	??___fttol& (0+255),w,b
  9522  003B7E  0101               	movlb	1	; () banked
  9523  003B80  6F0F               	movwf	(??___fttol+4)& (0+255),b
  9524  003B82  D005               	goto	u8330
  9525  003B84                     u8335:
  9526  003B84  0101               	movlb	1	; () banked
  9527  003B86  90D8               	bcf	status,0,c
  9528  003B88  330E               	rrcf	(??___fttol+3)& (0+255),f,b
  9529  003B8A  330D               	rrcf	(??___fttol+2)& (0+255),f,b
  9530  003B8C  330C               	rrcf	(??___fttol+1)& (0+255),f,b
  9531  003B8E                     u8330:
  9532  003B8E  0101               	movlb	1	; () banked
  9533  003B90  2F0F               	decfsz	(??___fttol+4)& (0+255),f,b
  9534  003B92  D7F8               	goto	u8335
  9535  003B94  0101               	movlb	1	; () banked
  9536  003B96  510C               	movf	(??___fttol+1)& (0+255),w,b
  9537  003B98  0101               	movlb	1	; () banked
  9538  003B9A  6F10               	movwf	___fttol@sign1& (0+255),b
  9539                           
  9540                           ; BSR set to: 1
  9541  003B9C  0101               	movlb	1	; () banked
  9542  003B9E  8F08               	bsf	(___fttol@f1+1)& (0+255),7,b
  9543                           
  9544                           ; BSR set to: 1
  9545  003BA0  0EFF               	movlw	255
  9546  003BA2  0101               	movlb	1	; () banked
  9547  003BA4  1707               	andwf	___fttol@f1& (0+255),f,b
  9548  003BA6  0EFF               	movlw	255
  9549  003BA8  0101               	movlb	1	; () banked
  9550  003BAA  1708               	andwf	(___fttol@f1+1)& (0+255),f,b
  9551  003BAC  0E00               	movlw	0
  9552  003BAE  0101               	movlb	1	; () banked
  9553  003BB0  1709               	andwf	(___fttol@f1+2)& (0+255),f,b
  9554                           
  9555                           ; BSR set to: 1
  9556  003BB2  0101               	movlb	1	; () banked
  9557  003BB4  5107               	movf	___fttol@f1& (0+255),w,b
  9558  003BB6  0101               	movlb	1	; () banked
  9559  003BB8  6F11               	movwf	___fttol@lval& (0+255),b
  9560  003BBA  0101               	movlb	1	; () banked
  9561  003BBC  5108               	movf	(___fttol@f1+1)& (0+255),w,b
  9562  003BBE  0101               	movlb	1	; () banked
  9563  003BC0  6F12               	movwf	(___fttol@lval+1)& (0+255),b
  9564  003BC2  0101               	movlb	1	; () banked
  9565  003BC4  5109               	movf	(___fttol@f1+2)& (0+255),w,b
  9566  003BC6  0101               	movlb	1	; () banked
  9567  003BC8  6F13               	movwf	(___fttol@lval+2)& (0+255),b
  9568  003BCA  0101               	movlb	1	; () banked
  9569  003BCC  6B14               	clrf	(___fttol@lval+3)& (0+255),b
  9570                           
  9571                           ; BSR set to: 1
  9572  003BCE  0E8E               	movlw	142
  9573  003BD0  0101               	movlb	1	; () banked
  9574  003BD2  5F15               	subwf	___fttol@exp1& (0+255),f,b
  9575                           
  9576                           ; BSR set to: 1
  9577  003BD4  0101               	movlb	1	; () banked
  9578  003BD6  AF15               	btfss	___fttol@exp1& (0+255),7,b
  9579  003BD8  D01A               	goto	l7347
  9580                           
  9581                           ; BSR set to: 1
  9582  003BDA  0101               	movlb	1	; () banked
  9583  003BDC  5115               	movf	___fttol@exp1& (0+255),w,b
  9584  003BDE  0A80               	xorlw	128
  9585  003BE0  0F8F               	addlw	143
  9586  003BE2  B0D8               	btfsc	status,0,c
  9587  003BE4  D00A               	goto	l7343
  9588                           
  9589                           ; BSR set to: 1
  9590  003BE6  0E00               	movlw	0
  9591  003BE8  0101               	movlb	1	; () banked
  9592  003BEA  6F07               	movwf	?___fttol& (0+255),b
  9593  003BEC  0E00               	movlw	0
  9594  003BEE  6F08               	movwf	(?___fttol+1)& (0+255),b
  9595  003BF0  0E00               	movlw	0
  9596  003BF2  6F09               	movwf	(?___fttol+2)& (0+255),b
  9597  003BF4  0E00               	movlw	0
  9598  003BF6  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9599                           
  9600                           ; BSR set to: 1
  9601  003BF8  0012               	return	
  9602  003BFA                     l7343:
  9603                           
  9604                           ; BSR set to: 1
  9605  003BFA  0101               	movlb	1	; () banked
  9606  003BFC  90D8               	bcf	status,0,c
  9607  003BFE  3314               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9608  003C00  3313               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9609  003C02  3312               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9610  003C04  3311               	rrcf	___fttol@lval& (0+255),f,b
  9611                           
  9612                           ; BSR set to: 1
  9613  003C06  0101               	movlb	1	; () banked
  9614  003C08  3F15               	incfsz	___fttol@exp1& (0+255),f,b
  9615  003C0A  D7F7               	goto	l7343
  9616                           
  9617                           ; BSR set to: 1
  9618  003C0C  D01B               	goto	l7357
  9619  003C0E                     l7347:
  9620                           
  9621                           ; BSR set to: 1
  9622  003C0E  0E17               	movlw	23
  9623  003C10  0101               	movlb	1	; () banked
  9624  003C12  6515               	cpfsgt	___fttol@exp1& (0+255),b
  9625  003C14  D012               	goto	l7355
  9626                           
  9627                           ; BSR set to: 1
  9628  003C16  0E00               	movlw	0
  9629  003C18  0101               	movlb	1	; () banked
  9630  003C1A  6F07               	movwf	?___fttol& (0+255),b
  9631  003C1C  0E00               	movlw	0
  9632  003C1E  6F08               	movwf	(?___fttol+1)& (0+255),b
  9633  003C20  0E00               	movlw	0
  9634  003C22  6F09               	movwf	(?___fttol+2)& (0+255),b
  9635  003C24  0E00               	movlw	0
  9636  003C26  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9637                           
  9638                           ; BSR set to: 1
  9639  003C28  0012               	return	
  9640  003C2A                     l7353:
  9641                           
  9642                           ; BSR set to: 1
  9643  003C2A  0101               	movlb	1	; () banked
  9644  003C2C  90D8               	bcf	status,0,c
  9645  003C2E  3711               	rlcf	___fttol@lval& (0+255),f,b
  9646  003C30  3712               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9647  003C32  3713               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9648  003C34  3714               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9649  003C36  0101               	movlb	1	; () banked
  9650  003C38  0715               	decf	___fttol@exp1& (0+255),f,b
  9651  003C3A                     l7355:
  9652                           
  9653                           ; BSR set to: 1
  9654  003C3A  0101               	movlb	1	; () banked
  9655  003C3C  5115               	movf	___fttol@exp1& (0+255),w,b
  9656  003C3E  0101               	movlb	1	; () banked
  9657  003C40  A4D8               	btfss	status,2,c
  9658  003C42  D7F3               	goto	l7353
  9659  003C44                     l7357:
  9660                           
  9661                           ; BSR set to: 1
  9662  003C44  0101               	movlb	1	; () banked
  9663  003C46  5110               	movf	___fttol@sign1& (0+255),w,b
  9664  003C48  0101               	movlb	1	; () banked
  9665  003C4A  B4D8               	btfsc	status,2,c
  9666  003C4C  D009               	goto	l7361
  9667                           
  9668                           ; BSR set to: 1
  9669  003C4E  0101               	movlb	1	; () banked
  9670  003C50  1F14               	comf	(___fttol@lval+3)& (0+255),f,b
  9671  003C52  1F13               	comf	(___fttol@lval+2)& (0+255),f,b
  9672  003C54  1F12               	comf	(___fttol@lval+1)& (0+255),f,b
  9673  003C56  6D11               	negf	___fttol@lval& (0+255),b
  9674  003C58  0E00               	movlw	0
  9675  003C5A  2312               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9676  003C5C  2313               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9677  003C5E  2314               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9678  003C60                     l7361:
  9679                           
  9680                           ; BSR set to: 1
  9681  003C60  C111  F107         	movff	___fttol@lval,?___fttol
  9682  003C64  C112  F108         	movff	___fttol@lval+1,?___fttol+1
  9683  003C68  C113  F109         	movff	___fttol@lval+2,?___fttol+2
  9684  003C6C  C114  F10A         	movff	___fttol@lval+3,?___fttol+3
  9685  003C70  0012               	return	
  9686  003C72                     __end_of___fttol:
  9687                           	opt stack 0
  9688                           tblptru	equ	0xFF8
  9689                           tblptrh	equ	0xFF7
  9690                           tblptrl	equ	0xFF6
  9691                           tablat	equ	0xFF5
  9692                           prodh	equ	0xFF4
  9693                           prodl	equ	0xFF3
  9694                           intcon	equ	0xFF2
  9695                           intcon2	equ	0xFF1
  9696                           intcon3	equ	0xFF0
  9697                           postinc0	equ	0xFEE
  9698                           wreg	equ	0xFE8
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706 ;; *************** function ___ftsub *****************
  9707 ;; Defined at:
  9708 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  f1              3   22[BANK1 ] float 
  9711 ;;  f2              3   25[BANK1 ] float 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;		None
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  3   22[BANK1 ] float 
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0, cstack
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9723 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;Total ram usage:        6 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    9
  9730 ;; This function calls:
  9731 ;;		___ftadd
  9732 ;; This function is called by:
  9733 ;;		_printf
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text27
  9738  005626                     __ptext27:
  9739                           	opt stack 0
  9740  005626                     ___ftsub:
  9741                           	opt stack 19
  9742                           
  9743                           ; BSR set to: 1
  9744                           ;incstack = 0
  9745  005626  0101               	movlb	1	; () banked
  9746  005628  5119               	movf	___ftsub@f2& (0+255),w,b
  9747  00562A  0101               	movlb	1	; () banked
  9748  00562C  111A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9749  00562E  0101               	movlb	1	; () banked
  9750  005630  111B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9751  005632  B4D8               	btfsc	status,2,c
  9752  005634  D009               	goto	l7315
  9753                           
  9754                           ; BSR set to: 1
  9755  005636  0E00               	movlw	0
  9756  005638  0101               	movlb	1	; () banked
  9757  00563A  1B19               	xorwf	___ftsub@f2& (0+255),f,b
  9758  00563C  0E00               	movlw	0
  9759  00563E  0101               	movlb	1	; () banked
  9760  005640  1B1A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9761  005642  0E80               	movlw	128
  9762  005644  0101               	movlb	1	; () banked
  9763  005646  1B1B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9764  005648                     l7315:
  9765                           
  9766                           ; BSR set to: 1
  9767  005648  C116  F10A         	movff	___ftsub@f1,___ftadd@f1
  9768  00564C  C117  F10B         	movff	___ftsub@f1+1,___ftadd@f1+1
  9769  005650  C118  F10C         	movff	___ftsub@f1+2,___ftadd@f1+2
  9770  005654  C119  F10D         	movff	___ftsub@f2,___ftadd@f2
  9771  005658  C11A  F10E         	movff	___ftsub@f2+1,___ftadd@f2+1
  9772  00565C  C11B  F10F         	movff	___ftsub@f2+2,___ftadd@f2+2
  9773  005660  ECFB  F014         	call	___ftadd	;wreg free
  9774  005664  C10A  F116         	movff	?___ftadd,?___ftsub
  9775  005668  C10B  F117         	movff	?___ftadd+1,?___ftsub+1
  9776  00566C  C10C  F118         	movff	?___ftadd+2,?___ftsub+2
  9777  005670  0012               	return	
  9778  005672                     __end_of___ftsub:
  9779                           	opt stack 0
  9780                           tblptru	equ	0xFF8
  9781                           tblptrh	equ	0xFF7
  9782                           tblptrl	equ	0xFF6
  9783                           tablat	equ	0xFF5
  9784                           prodh	equ	0xFF4
  9785                           prodl	equ	0xFF3
  9786                           intcon	equ	0xFF2
  9787                           intcon2	equ	0xFF1
  9788                           intcon3	equ	0xFF0
  9789                           postinc0	equ	0xFEE
  9790                           wreg	equ	0xFE8
  9791                           indf2	equ	0xFDF
  9792                           postinc2	equ	0xFDE
  9793                           postdec2	equ	0xFDD
  9794                           fsr2h	equ	0xFDA
  9795                           fsr2l	equ	0xFD9
  9796                           status	equ	0xFD8
  9797                           
  9798 ;; *************** function ___ftadd *****************
  9799 ;; Defined at:
  9800 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;  f1              3   10[BANK1 ] float 
  9803 ;;  f2              3   13[BANK1 ] float 
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;  exp1            1   21[BANK1 ] unsigned char 
  9806 ;;  exp2            1   20[BANK1 ] unsigned char 
  9807 ;;  sign            1   19[BANK1 ] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  3   10[BANK1 ] float 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0, cstack
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9817 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;Total ram usage:       12 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    8
  9824 ;; This function calls:
  9825 ;;		___ftpack
  9826 ;; This function is called by:
  9827 ;;		_printf
  9828 ;;		___ftsub
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           	psect	text28
  9833  0029F6                     __ptext28:
  9834                           	opt stack 0
  9835  0029F6                     ___ftadd:
  9836                           	opt stack 19
  9837                           
  9838                           ;incstack = 0
  9839  0029F6  C10C  F110         	movff	___ftadd@f1+2,??___ftadd
  9840  0029FA  0101               	movlb	1	; () banked
  9841  0029FC  6B11               	clrf	(??___ftadd+1)& (0+255),b
  9842  0029FE  6B12               	clrf	(??___ftadd+2)& (0+255),b
  9843  002A00  0101               	movlb	1	; () banked
  9844  002A02  350B               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9845  002A04  0101               	movlb	1	; () banked
  9846  002A06  3710               	rlcf	??___ftadd& (0+255),f,b
  9847  002A08  E301               	bnc	u7841
  9848  002A0A  8111               	bsf	(??___ftadd+1)& (0+255),0,b
  9849  002A0C                     u7841:
  9850  002A0C  0101               	movlb	1	; () banked
  9851  002A0E  5110               	movf	??___ftadd& (0+255),w,b
  9852  002A10  0101               	movlb	1	; () banked
  9853  002A12  6F15               	movwf	___ftadd@exp1& (0+255),b
  9854  002A14  C10F  F110         	movff	___ftadd@f2+2,??___ftadd
  9855  002A18  0101               	movlb	1	; () banked
  9856  002A1A  6B11               	clrf	(??___ftadd+1)& (0+255),b
  9857  002A1C  6B12               	clrf	(??___ftadd+2)& (0+255),b
  9858  002A1E  0101               	movlb	1	; () banked
  9859  002A20  350E               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9860  002A22  0101               	movlb	1	; () banked
  9861  002A24  3710               	rlcf	??___ftadd& (0+255),f,b
  9862  002A26  E301               	bnc	u7851
  9863  002A28  8111               	bsf	(??___ftadd+1)& (0+255),0,b
  9864  002A2A                     u7851:
  9865  002A2A  0101               	movlb	1	; () banked
  9866  002A2C  5110               	movf	??___ftadd& (0+255),w,b
  9867  002A2E  0101               	movlb	1	; () banked
  9868  002A30  6F14               	movwf	___ftadd@exp2& (0+255),b
  9869                           
  9870                           ; BSR set to: 1
  9871  002A32  0101               	movlb	1	; () banked
  9872  002A34  5115               	movf	___ftadd@exp1& (0+255),w,b
  9873  002A36  0101               	movlb	1	; () banked
  9874  002A38  B4D8               	btfsc	status,2,c
  9875  002A3A  D011               	goto	l874
  9876                           
  9877                           ; BSR set to: 1
  9878  002A3C  0101               	movlb	1	; () banked
  9879  002A3E  5114               	movf	___ftadd@exp2& (0+255),w,b
  9880  002A40  0101               	movlb	1	; () banked
  9881  002A42  5D15               	subwf	___ftadd@exp1& (0+255),w,b
  9882  002A44  B0D8               	btfsc	status,0,c
  9883  002A46  D012               	goto	l7061
  9884                           
  9885                           ; BSR set to: 1
  9886  002A48  0101               	movlb	1	; () banked
  9887  002A4A  5115               	movf	___ftadd@exp1& (0+255),w,b
  9888  002A4C  0800               	sublw	0
  9889  002A4E  0101               	movlb	1	; () banked
  9890  002A50  2514               	addwf	___ftadd@exp2& (0+255),w,b
  9891  002A52  0101               	movlb	1	; () banked
  9892  002A54  6F10               	movwf	??___ftadd& (0+255),b
  9893  002A56  0E18               	movlw	24
  9894  002A58  0101               	movlb	1	; () banked
  9895  002A5A  6510               	cpfsgt	??___ftadd& (0+255),b
  9896  002A5C  D007               	goto	l7061
  9897  002A5E                     l874:
  9898                           
  9899                           ; BSR set to: 1
  9900  002A5E  C10D  F10A         	movff	___ftadd@f2,?___ftadd
  9901  002A62  C10E  F10B         	movff	___ftadd@f2+1,?___ftadd+1
  9902  002A66  C10F  F10C         	movff	___ftadd@f2+2,?___ftadd+2
  9903  002A6A  0012               	return	
  9904  002A6C                     l7061:
  9905                           
  9906                           ; BSR set to: 1
  9907  002A6C  0101               	movlb	1	; () banked
  9908  002A6E  5114               	movf	___ftadd@exp2& (0+255),w,b
  9909  002A70  0101               	movlb	1	; () banked
  9910  002A72  B4D8               	btfsc	status,2,c
  9911  002A74  D011               	goto	l878
  9912                           
  9913                           ; BSR set to: 1
  9914  002A76  0101               	movlb	1	; () banked
  9915  002A78  5115               	movf	___ftadd@exp1& (0+255),w,b
  9916  002A7A  0101               	movlb	1	; () banked
  9917  002A7C  5D14               	subwf	___ftadd@exp2& (0+255),w,b
  9918  002A7E  B0D8               	btfsc	status,0,c
  9919  002A80  D012               	goto	l7067
  9920                           
  9921                           ; BSR set to: 1
  9922  002A82  0101               	movlb	1	; () banked
  9923  002A84  5114               	movf	___ftadd@exp2& (0+255),w,b
  9924  002A86  0800               	sublw	0
  9925  002A88  0101               	movlb	1	; () banked
  9926  002A8A  2515               	addwf	___ftadd@exp1& (0+255),w,b
  9927  002A8C  0101               	movlb	1	; () banked
  9928  002A8E  6F10               	movwf	??___ftadd& (0+255),b
  9929  002A90  0E18               	movlw	24
  9930  002A92  0101               	movlb	1	; () banked
  9931  002A94  6510               	cpfsgt	??___ftadd& (0+255),b
  9932  002A96  D007               	goto	l7067
  9933  002A98                     l878:
  9934                           
  9935                           ; BSR set to: 1
  9936  002A98  C10A  F10A         	movff	___ftadd@f1,?___ftadd
  9937  002A9C  C10B  F10B         	movff	___ftadd@f1+1,?___ftadd+1
  9938  002AA0  C10C  F10C         	movff	___ftadd@f1+2,?___ftadd+2
  9939  002AA4  0012               	return	
  9940  002AA6                     l7067:
  9941                           
  9942                           ; BSR set to: 1
  9943  002AA6  0E06               	movlw	6
  9944  002AA8  0101               	movlb	1	; () banked
  9945  002AAA  6F13               	movwf	___ftadd@sign& (0+255),b
  9946                           
  9947                           ; BSR set to: 1
  9948  002AAC  0101               	movlb	1	; () banked
  9949  002AAE  AF0C               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9950  002AB0  D002               	goto	l7073
  9951                           
  9952                           ; BSR set to: 1
  9953  002AB2  0101               	movlb	1	; () banked
  9954  002AB4  8F13               	bsf	___ftadd@sign& (0+255),7,b
  9955  002AB6                     l7073:
  9956                           
  9957                           ; BSR set to: 1
  9958  002AB6  0101               	movlb	1	; () banked
  9959  002AB8  AF0F               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9960  002ABA  D002               	goto	l880
  9961                           
  9962                           ; BSR set to: 1
  9963  002ABC  0101               	movlb	1	; () banked
  9964  002ABE  8D13               	bsf	___ftadd@sign& (0+255),6,b
  9965  002AC0                     l880:
  9966                           
  9967                           ; BSR set to: 1
  9968  002AC0  0101               	movlb	1	; () banked
  9969  002AC2  8F0B               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9970                           
  9971                           ; BSR set to: 1
  9972  002AC4  0EFF               	movlw	255
  9973  002AC6  0101               	movlb	1	; () banked
  9974  002AC8  170A               	andwf	___ftadd@f1& (0+255),f,b
  9975  002ACA  0EFF               	movlw	255
  9976  002ACC  0101               	movlb	1	; () banked
  9977  002ACE  170B               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9978  002AD0  0E00               	movlw	0
  9979  002AD2  0101               	movlb	1	; () banked
  9980  002AD4  170C               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9981  002AD6  0101               	movlb	1	; () banked
  9982  002AD8  8F0E               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9983                           
  9984                           ; BSR set to: 1
  9985  002ADA  0EFF               	movlw	255
  9986  002ADC  0101               	movlb	1	; () banked
  9987  002ADE  170D               	andwf	___ftadd@f2& (0+255),f,b
  9988  002AE0  0EFF               	movlw	255
  9989  002AE2  0101               	movlb	1	; () banked
  9990  002AE4  170E               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9991  002AE6  0E00               	movlw	0
  9992  002AE8  0101               	movlb	1	; () banked
  9993  002AEA  170F               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9994                           
  9995                           ; BSR set to: 1
  9996  002AEC  0101               	movlb	1	; () banked
  9997  002AEE  5114               	movf	___ftadd@exp2& (0+255),w,b
  9998  002AF0  0101               	movlb	1	; () banked
  9999  002AF2  5D15               	subwf	___ftadd@exp1& (0+255),w,b
 10000  002AF4  B0D8               	btfsc	status,0,c
 10001  002AF6  D025               	goto	l7093
 10002  002AF8                     l7083:
 10003                           
 10004                           ; BSR set to: 1
 10005  002AF8  0101               	movlb	1	; () banked
 10006  002AFA  90D8               	bcf	status,0,c
 10007  002AFC  370D               	rlcf	___ftadd@f2& (0+255),f,b
 10008  002AFE  370E               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10009  002B00  370F               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10010  002B02  0101               	movlb	1	; () banked
 10011  002B04  0714               	decf	___ftadd@exp2& (0+255),f,b
 10012                           
 10013                           ; BSR set to: 1
 10014  002B06  0101               	movlb	1	; () banked
 10015  002B08  5115               	movf	___ftadd@exp1& (0+255),w,b
 10016  002B0A  0101               	movlb	1	; () banked
 10017  002B0C  1914               	xorwf	___ftadd@exp2& (0+255),w,b
 10018  002B0E  B4D8               	btfsc	status,2,c
 10019  002B10  D011               	goto	l7091
 10020                           
 10021                           ; BSR set to: 1
 10022  002B12  0101               	movlb	1	; () banked
 10023  002B14  0713               	decf	___ftadd@sign& (0+255),f,b
 10024  002B16  C113  F110         	movff	___ftadd@sign,??___ftadd
 10025  002B1A  0E07               	movlw	7
 10026  002B1C  0101               	movlb	1	; () banked
 10027  002B1E  1710               	andwf	??___ftadd& (0+255),f,b
 10028  002B20  B4D8               	btfsc	status,2,c
 10029  002B22  D008               	goto	l7091
 10030  002B24  D7E9               	goto	l7083
 10031  002B26                     l7089:
 10032                           
 10033                           ; BSR set to: 1
 10034  002B26  0101               	movlb	1	; () banked
 10035  002B28  90D8               	bcf	status,0,c
 10036  002B2A  330C               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10037  002B2C  330B               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10038  002B2E  330A               	rrcf	___ftadd@f1& (0+255),f,b
 10039  002B30  0101               	movlb	1	; () banked
 10040  002B32  2B15               	incf	___ftadd@exp1& (0+255),f,b
 10041  002B34                     l7091:
 10042                           
 10043                           ; BSR set to: 1
 10044  002B34  0101               	movlb	1	; () banked
 10045  002B36  5114               	movf	___ftadd@exp2& (0+255),w,b
 10046  002B38  0101               	movlb	1	; () banked
 10047  002B3A  1915               	xorwf	___ftadd@exp1& (0+255),w,b
 10048  002B3C  B4D8               	btfsc	status,2,c
 10049  002B3E  D02B               	goto	l889
 10050  002B40  D7F2               	goto	l7089
 10051  002B42                     l7093:
 10052                           
 10053                           ; BSR set to: 1
 10054  002B42  0101               	movlb	1	; () banked
 10055  002B44  5115               	movf	___ftadd@exp1& (0+255),w,b
 10056  002B46  0101               	movlb	1	; () banked
 10057  002B48  5D14               	subwf	___ftadd@exp2& (0+255),w,b
 10058  002B4A  B0D8               	btfsc	status,0,c
 10059  002B4C  D024               	goto	l889
 10060  002B4E                     l7095:
 10061                           
 10062                           ; BSR set to: 1
 10063  002B4E  0101               	movlb	1	; () banked
 10064  002B50  90D8               	bcf	status,0,c
 10065  002B52  370A               	rlcf	___ftadd@f1& (0+255),f,b
 10066  002B54  370B               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10067  002B56  370C               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10068  002B58  0101               	movlb	1	; () banked
 10069  002B5A  0715               	decf	___ftadd@exp1& (0+255),f,b
 10070                           
 10071                           ; BSR set to: 1
 10072  002B5C  0101               	movlb	1	; () banked
 10073  002B5E  5115               	movf	___ftadd@exp1& (0+255),w,b
 10074  002B60  0101               	movlb	1	; () banked
 10075  002B62  1914               	xorwf	___ftadd@exp2& (0+255),w,b
 10076  002B64  B4D8               	btfsc	status,2,c
 10077  002B66  D011               	goto	l7103
 10078                           
 10079                           ; BSR set to: 1
 10080  002B68  0101               	movlb	1	; () banked
 10081  002B6A  0713               	decf	___ftadd@sign& (0+255),f,b
 10082  002B6C  C113  F110         	movff	___ftadd@sign,??___ftadd
 10083  002B70  0E07               	movlw	7
 10084  002B72  0101               	movlb	1	; () banked
 10085  002B74  1710               	andwf	??___ftadd& (0+255),f,b
 10086  002B76  B4D8               	btfsc	status,2,c
 10087  002B78  D008               	goto	l7103
 10088  002B7A  D7E9               	goto	l7095
 10089  002B7C                     l7101:
 10090                           
 10091                           ; BSR set to: 1
 10092  002B7C  0101               	movlb	1	; () banked
 10093  002B7E  90D8               	bcf	status,0,c
 10094  002B80  330F               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10095  002B82  330E               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10096  002B84  330D               	rrcf	___ftadd@f2& (0+255),f,b
 10097  002B86  0101               	movlb	1	; () banked
 10098  002B88  2B14               	incf	___ftadd@exp2& (0+255),f,b
 10099  002B8A                     l7103:
 10100                           
 10101                           ; BSR set to: 1
 10102  002B8A  0101               	movlb	1	; () banked
 10103  002B8C  5114               	movf	___ftadd@exp2& (0+255),w,b
 10104  002B8E  0101               	movlb	1	; () banked
 10105  002B90  1915               	xorwf	___ftadd@exp1& (0+255),w,b
 10106  002B92  A4D8               	btfss	status,2,c
 10107  002B94  D7F3               	goto	l7101
 10108  002B96                     l889:
 10109                           
 10110                           ; BSR set to: 1
 10111  002B96  0101               	movlb	1	; () banked
 10112  002B98  AF13               	btfss	___ftadd@sign& (0+255),7,b
 10113  002B9A  D012               	goto	l898
 10114                           
 10115                           ; BSR set to: 1
 10116  002B9C  0EFF               	movlw	255
 10117  002B9E  0101               	movlb	1	; () banked
 10118  002BA0  1B0A               	xorwf	___ftadd@f1& (0+255),f,b
 10119  002BA2  0EFF               	movlw	255
 10120  002BA4  0101               	movlb	1	; () banked
 10121  002BA6  1B0B               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10122  002BA8  0EFF               	movlw	255
 10123  002BAA  0101               	movlb	1	; () banked
 10124  002BAC  1B0C               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10125  002BAE  0E01               	movlw	1
 10126  002BB0  0101               	movlb	1	; () banked
 10127  002BB2  270A               	addwf	___ftadd@f1& (0+255),f,b
 10128  002BB4  0E00               	movlw	0
 10129  002BB6  0101               	movlb	1	; () banked
 10130  002BB8  230B               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10131  002BBA  0E00               	movlw	0
 10132  002BBC  0101               	movlb	1	; () banked
 10133  002BBE  230C               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10134  002BC0                     l898:
 10135                           
 10136                           ; BSR set to: 1
 10137  002BC0  0101               	movlb	1	; () banked
 10138  002BC2  AD13               	btfss	___ftadd@sign& (0+255),6,b
 10139  002BC4  D012               	goto	l7109
 10140                           
 10141                           ; BSR set to: 1
 10142  002BC6  0EFF               	movlw	255
 10143  002BC8  0101               	movlb	1	; () banked
 10144  002BCA  1B0D               	xorwf	___ftadd@f2& (0+255),f,b
 10145  002BCC  0EFF               	movlw	255
 10146  002BCE  0101               	movlb	1	; () banked
 10147  002BD0  1B0E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10148  002BD2  0EFF               	movlw	255
 10149  002BD4  0101               	movlb	1	; () banked
 10150  002BD6  1B0F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10151  002BD8  0E01               	movlw	1
 10152  002BDA  0101               	movlb	1	; () banked
 10153  002BDC  270D               	addwf	___ftadd@f2& (0+255),f,b
 10154  002BDE  0E00               	movlw	0
 10155  002BE0  0101               	movlb	1	; () banked
 10156  002BE2  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10157  002BE4  0E00               	movlw	0
 10158  002BE6  0101               	movlb	1	; () banked
 10159  002BE8  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10160  002BEA                     l7109:
 10161                           
 10162                           ; BSR set to: 1
 10163  002BEA  0E00               	movlw	0
 10164  002BEC  0101               	movlb	1	; () banked
 10165  002BEE  6F13               	movwf	___ftadd@sign& (0+255),b
 10166                           
 10167                           ; BSR set to: 1
 10168  002BF0  0101               	movlb	1	; () banked
 10169  002BF2  510A               	movf	___ftadd@f1& (0+255),w,b
 10170  002BF4  0101               	movlb	1	; () banked
 10171  002BF6  270D               	addwf	___ftadd@f2& (0+255),f,b
 10172  002BF8  0101               	movlb	1	; () banked
 10173  002BFA  510B               	movf	(___ftadd@f1+1)& (0+255),w,b
 10174  002BFC  0101               	movlb	1	; () banked
 10175  002BFE  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10176  002C00  0101               	movlb	1	; () banked
 10177  002C02  510C               	movf	(___ftadd@f1+2)& (0+255),w,b
 10178  002C04  0101               	movlb	1	; () banked
 10179  002C06  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10180                           
 10181                           ; BSR set to: 1
 10182  002C08  0101               	movlb	1	; () banked
 10183  002C0A  AF0F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10184  002C0C  D015               	goto	l7119
 10185                           
 10186                           ; BSR set to: 1
 10187  002C0E  0EFF               	movlw	255
 10188  002C10  0101               	movlb	1	; () banked
 10189  002C12  1B0D               	xorwf	___ftadd@f2& (0+255),f,b
 10190  002C14  0EFF               	movlw	255
 10191  002C16  0101               	movlb	1	; () banked
 10192  002C18  1B0E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10193  002C1A  0EFF               	movlw	255
 10194  002C1C  0101               	movlb	1	; () banked
 10195  002C1E  1B0F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10196  002C20  0E01               	movlw	1
 10197  002C22  0101               	movlb	1	; () banked
 10198  002C24  270D               	addwf	___ftadd@f2& (0+255),f,b
 10199  002C26  0E00               	movlw	0
 10200  002C28  0101               	movlb	1	; () banked
 10201  002C2A  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10202  002C2C  0E00               	movlw	0
 10203  002C2E  0101               	movlb	1	; () banked
 10204  002C30  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10205                           
 10206                           ; BSR set to: 1
 10207  002C32  0E01               	movlw	1
 10208  002C34  0101               	movlb	1	; () banked
 10209  002C36  6F13               	movwf	___ftadd@sign& (0+255),b
 10210  002C38                     l7119:
 10211                           
 10212                           ; BSR set to: 1
 10213  002C38  C10D  F09E         	movff	___ftadd@f2,___ftpack@arg
 10214  002C3C  C10E  F09F         	movff	___ftadd@f2+1,___ftpack@arg+1
 10215  002C40  C10F  F0A0         	movff	___ftadd@f2+2,___ftpack@arg+2
 10216  002C44  C115  F0A1         	movff	___ftadd@exp1,___ftpack@exp
 10217  002C48  C113  F0A2         	movff	___ftadd@sign,___ftpack@sign
 10218  002C4C  ECF5  F01F         	call	___ftpack	;wreg free
 10219  002C50  C09E  F10A         	movff	?___ftpack,?___ftadd
 10220  002C54  C09F  F10B         	movff	?___ftpack+1,?___ftadd+1
 10221  002C58  C0A0  F10C         	movff	?___ftpack+2,?___ftadd+2
 10222  002C5C  0012               	return	
 10223  002C5E                     __end_of___ftadd:
 10224                           	opt stack 0
 10225                           tblptru	equ	0xFF8
 10226                           tblptrh	equ	0xFF7
 10227                           tblptrl	equ	0xFF6
 10228                           tablat	equ	0xFF5
 10229                           prodh	equ	0xFF4
 10230                           prodl	equ	0xFF3
 10231                           intcon	equ	0xFF2
 10232                           intcon2	equ	0xFF1
 10233                           intcon3	equ	0xFF0
 10234                           postinc0	equ	0xFEE
 10235                           wreg	equ	0xFE8
 10236                           indf2	equ	0xFDF
 10237                           postinc2	equ	0xFDE
 10238                           postdec2	equ	0xFDD
 10239                           fsr2h	equ	0xFDA
 10240                           fsr2l	equ	0xFD9
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function ___ftpack *****************
 10244 ;; Defined at:
 10245 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;  arg             3   30[BANK0 ] unsigned um
 10248 ;;  exp             1   33[BANK0 ] unsigned char 
 10249 ;;  sign            1   34[BANK0 ] unsigned char 
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;		None
 10252 ;; Return value:  Size  Location     Type
 10253 ;;                  3   30[BANK0 ] float 
 10254 ;; Registers used:
 10255 ;;		wreg, status,2, status,0
 10256 ;; Tracked objects:
 10257 ;;		On entry : 0/0
 10258 ;;		On exit  : 0/0
 10259 ;;		Unchanged: 0/0
 10260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10261 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;Total ram usage:        8 bytes
 10266 ;; Hardware stack levels used:    1
 10267 ;; Hardware stack levels required when called:    7
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		___ftadd
 10272 ;;		___ftdiv
 10273 ;;		___ftmul
 10274 ;;		___lltoft
 10275 ;;		___lwtoft
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text29
 10280  003FEA                     __ptext29:
 10281                           	opt stack 0
 10282  003FEA                     ___ftpack:
 10283                           	opt stack 19
 10284                           
 10285                           ;incstack = 0
 10286  003FEA  0100               	movlb	0	; () banked
 10287  003FEC  51A1               	movf	___ftpack@exp& (0+255),w,b
 10288  003FEE  0100               	movlb	0	; () banked
 10289  003FF0  B4D8               	btfsc	status,2,c
 10290  003FF2  D008               	goto	l7015
 10291                           
 10292                           ; BSR set to: 0
 10293  003FF4  0100               	movlb	0	; () banked
 10294  003FF6  519E               	movf	___ftpack@arg& (0+255),w,b
 10295  003FF8  0100               	movlb	0	; () banked
 10296  003FFA  119F               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10297  003FFC  0100               	movlb	0	; () banked
 10298  003FFE  11A0               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10299  004000  A4D8               	btfss	status,2,c
 10300  004002  D011               	goto	l7021
 10301  004004                     l7015:
 10302                           
 10303                           ; BSR set to: 0
 10304  004004  0E00               	movlw	0
 10305  004006  0100               	movlb	0	; () banked
 10306  004008  6F9E               	movwf	?___ftpack& (0+255),b
 10307  00400A  0E00               	movlw	0
 10308  00400C  0100               	movlb	0	; () banked
 10309  00400E  6F9F               	movwf	(?___ftpack+1)& (0+255),b
 10310  004010  0E00               	movlw	0
 10311  004012  0100               	movlb	0	; () banked
 10312  004014  6FA0               	movwf	(?___ftpack+2)& (0+255),b
 10313                           
 10314                           ; BSR set to: 0
 10315  004016  0012               	return	
 10316  004018                     l7019:
 10317                           
 10318                           ; BSR set to: 0
 10319  004018  0100               	movlb	0	; () banked
 10320  00401A  2BA1               	incf	___ftpack@exp& (0+255),f,b
 10321  00401C  0100               	movlb	0	; () banked
 10322  00401E  90D8               	bcf	status,0,c
 10323  004020  33A0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10324  004022  339F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10325  004024  339E               	rrcf	___ftpack@arg& (0+255),f,b
 10326  004026                     l7021:
 10327                           
 10328                           ; BSR set to: 0
 10329  004026  0E00               	movlw	0
 10330  004028  0100               	movlb	0	; () banked
 10331  00402A  159E               	andwf	___ftpack@arg& (0+255),w,b
 10332  00402C  0100               	movlb	0	; () banked
 10333  00402E  6FA3               	movwf	??___ftpack& (0+255),b
 10334  004030  0E00               	movlw	0
 10335  004032  0100               	movlb	0	; () banked
 10336  004034  159F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10337  004036  0100               	movlb	0	; () banked
 10338  004038  6FA4               	movwf	(??___ftpack+1)& (0+255),b
 10339  00403A  0EFE               	movlw	254
 10340  00403C  0100               	movlb	0	; () banked
 10341  00403E  15A0               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10342  004040  0100               	movlb	0	; () banked
 10343  004042  6FA5               	movwf	(??___ftpack+2)& (0+255),b
 10344  004044  0100               	movlb	0	; () banked
 10345  004046  51A3               	movf	??___ftpack& (0+255),w,b
 10346  004048  0100               	movlb	0	; () banked
 10347  00404A  11A4               	iorwf	(??___ftpack+1)& (0+255),w,b
 10348  00404C  0100               	movlb	0	; () banked
 10349  00404E  11A5               	iorwf	(??___ftpack+2)& (0+255),w,b
 10350  004050  B4D8               	btfsc	status,2,c
 10351  004052  D011               	goto	l7027
 10352  004054  D7E1               	goto	l7019
 10353  004056                     l7023:
 10354                           
 10355                           ; BSR set to: 0
 10356  004056  0100               	movlb	0	; () banked
 10357  004058  2BA1               	incf	___ftpack@exp& (0+255),f,b
 10358                           
 10359                           ; BSR set to: 0
 10360  00405A  0E01               	movlw	1
 10361  00405C  0100               	movlb	0	; () banked
 10362  00405E  279E               	addwf	___ftpack@arg& (0+255),f,b
 10363  004060  0E00               	movlw	0
 10364  004062  0100               	movlb	0	; () banked
 10365  004064  239F               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10366  004066  0E00               	movlw	0
 10367  004068  0100               	movlb	0	; () banked
 10368  00406A  23A0               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10369  00406C  0100               	movlb	0	; () banked
 10370  00406E  90D8               	bcf	status,0,c
 10371  004070  33A0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10372  004072  339F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10373  004074  339E               	rrcf	___ftpack@arg& (0+255),f,b
 10374  004076                     l7027:
 10375                           
 10376                           ; BSR set to: 0
 10377  004076  0E00               	movlw	0
 10378  004078  0100               	movlb	0	; () banked
 10379  00407A  159E               	andwf	___ftpack@arg& (0+255),w,b
 10380  00407C  0100               	movlb	0	; () banked
 10381  00407E  6FA3               	movwf	??___ftpack& (0+255),b
 10382  004080  0E00               	movlw	0
 10383  004082  0100               	movlb	0	; () banked
 10384  004084  159F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10385  004086  0100               	movlb	0	; () banked
 10386  004088  6FA4               	movwf	(??___ftpack+1)& (0+255),b
 10387  00408A  0EFF               	movlw	255
 10388  00408C  0100               	movlb	0	; () banked
 10389  00408E  15A0               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10390  004090  0100               	movlb	0	; () banked
 10391  004092  6FA5               	movwf	(??___ftpack+2)& (0+255),b
 10392  004094  0100               	movlb	0	; () banked
 10393  004096  51A3               	movf	??___ftpack& (0+255),w,b
 10394  004098  0100               	movlb	0	; () banked
 10395  00409A  11A4               	iorwf	(??___ftpack+1)& (0+255),w,b
 10396  00409C  0100               	movlb	0	; () banked
 10397  00409E  11A5               	iorwf	(??___ftpack+2)& (0+255),w,b
 10398  0040A0  B4D8               	btfsc	status,2,c
 10399  0040A2  D008               	goto	l7031
 10400  0040A4  D7D8               	goto	l7023
 10401  0040A6                     l7029:
 10402                           
 10403                           ; BSR set to: 0
 10404  0040A6  0100               	movlb	0	; () banked
 10405  0040A8  07A1               	decf	___ftpack@exp& (0+255),f,b
 10406  0040AA  0100               	movlb	0	; () banked
 10407  0040AC  90D8               	bcf	status,0,c
 10408  0040AE  379E               	rlcf	___ftpack@arg& (0+255),f,b
 10409  0040B0  379F               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10410  0040B2  37A0               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10411  0040B4                     l7031:
 10412                           
 10413                           ; BSR set to: 0
 10414  0040B4  0100               	movlb	0	; () banked
 10415  0040B6  BF9F               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10416  0040B8  D004               	goto	l851
 10417                           
 10418                           ; BSR set to: 0
 10419  0040BA  0E02               	movlw	2
 10420  0040BC  0100               	movlb	0	; () banked
 10421  0040BE  61A1               	cpfslt	___ftpack@exp& (0+255),b
 10422  0040C0  D7F2               	goto	l7029
 10423  0040C2                     l851:
 10424                           
 10425                           ; BSR set to: 0
 10426  0040C2  0100               	movlb	0	; () banked
 10427  0040C4  B1A1               	btfsc	___ftpack@exp& (0+255),0,b
 10428  0040C6  D002               	goto	l7037
 10429                           
 10430                           ; BSR set to: 0
 10431  0040C8  0100               	movlb	0	; () banked
 10432  0040CA  9F9F               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10433  0040CC                     l7037:
 10434                           
 10435                           ; BSR set to: 0
 10436  0040CC  0100               	movlb	0	; () banked
 10437  0040CE  90D8               	bcf	status,0,c
 10438  0040D0  33A1               	rrcf	___ftpack@exp& (0+255),f,b
 10439  0040D2  0100               	movlb	0	; () banked
 10440  0040D4  51A1               	movf	___ftpack@exp& (0+255),w,b
 10441  0040D6  0100               	movlb	0	; () banked
 10442  0040D8  13A0               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10443                           
 10444                           ; BSR set to: 0
 10445  0040DA  0100               	movlb	0	; () banked
 10446  0040DC  51A2               	movf	___ftpack@sign& (0+255),w,b
 10447  0040DE  0100               	movlb	0	; () banked
 10448  0040E0  B4D8               	btfsc	status,2,c
 10449  0040E2  D002               	goto	l7043
 10450                           
 10451                           ; BSR set to: 0
 10452  0040E4  0100               	movlb	0	; () banked
 10453  0040E6  8FA0               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10454  0040E8                     l7043:
 10455                           
 10456                           ; BSR set to: 0
 10457  0040E8  C09E  F09E         	movff	___ftpack@arg,?___ftpack
 10458  0040EC  C09F  F09F         	movff	___ftpack@arg+1,?___ftpack+1
 10459  0040F0  C0A0  F0A0         	movff	___ftpack@arg+2,?___ftpack+2
 10460  0040F4  0012               	return	
 10461  0040F6                     __end_of___ftpack:
 10462                           	opt stack 0
 10463                           tblptru	equ	0xFF8
 10464                           tblptrh	equ	0xFF7
 10465                           tblptrl	equ	0xFF6
 10466                           tablat	equ	0xFF5
 10467                           prodh	equ	0xFF4
 10468                           prodl	equ	0xFF3
 10469                           intcon	equ	0xFF2
 10470                           intcon2	equ	0xFF1
 10471                           intcon3	equ	0xFF0
 10472                           postinc0	equ	0xFEE
 10473                           wreg	equ	0xFE8
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           postdec2	equ	0xFDD
 10477                           fsr2h	equ	0xFDA
 10478                           fsr2l	equ	0xFD9
 10479                           status	equ	0xFD8
 10480                           
 10481 ;; *************** function ___ftneg *****************
 10482 ;; Defined at:
 10483 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  f1              3   30[BANK0 ] float 
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;		None
 10488 ;; Return value:  Size  Location     Type
 10489 ;;                  3   30[BANK0 ] float 
 10490 ;; Registers used:
 10491 ;;		wreg, status,2, status,0
 10492 ;; Tracked objects:
 10493 ;;		On entry : 0/0
 10494 ;;		On exit  : 0/0
 10495 ;;		Unchanged: 0/0
 10496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10497 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;Total ram usage:        3 bytes
 10502 ;; Hardware stack levels used:    1
 10503 ;; Hardware stack levels required when called:    7
 10504 ;; This function calls:
 10505 ;;		Nothing
 10506 ;; This function is called by:
 10507 ;;		_printf
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           	psect	text30
 10512  0057D8                     __ptext30:
 10513                           	opt stack 0
 10514  0057D8                     ___ftneg:
 10515                           	opt stack 21
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;incstack = 0
 10519  0057D8  0100               	movlb	0	; () banked
 10520  0057DA  519E               	movf	___ftneg@f1& (0+255),w,b
 10521  0057DC  0100               	movlb	0	; () banked
 10522  0057DE  119F               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10523  0057E0  0100               	movlb	0	; () banked
 10524  0057E2  11A0               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10525  0057E4  B4D8               	btfsc	status,2,c
 10526  0057E6  D009               	goto	l948
 10527                           
 10528                           ; BSR set to: 0
 10529  0057E8  0E00               	movlw	0
 10530  0057EA  0100               	movlb	0	; () banked
 10531  0057EC  1B9E               	xorwf	___ftneg@f1& (0+255),f,b
 10532  0057EE  0E00               	movlw	0
 10533  0057F0  0100               	movlb	0	; () banked
 10534  0057F2  1B9F               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10535  0057F4  0E80               	movlw	128
 10536  0057F6  0100               	movlb	0	; () banked
 10537  0057F8  1BA0               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10538  0057FA                     l948:
 10539                           
 10540                           ; BSR set to: 0
 10541  0057FA  C09E  F09E         	movff	___ftneg@f1,?___ftneg
 10542  0057FE  C09F  F09F         	movff	___ftneg@f1+1,?___ftneg+1
 10543  005802  C0A0  F0A0         	movff	___ftneg@f1+2,?___ftneg+2
 10544                           
 10545                           ; BSR set to: 0
 10546  005806  0012               	return		;funcret
 10547  005808                     __end_of___ftneg:
 10548                           	opt stack 0
 10549                           tblptru	equ	0xFF8
 10550                           tblptrh	equ	0xFF7
 10551                           tblptrl	equ	0xFF6
 10552                           tablat	equ	0xFF5
 10553                           prodh	equ	0xFF4
 10554                           prodl	equ	0xFF3
 10555                           intcon	equ	0xFF2
 10556                           intcon2	equ	0xFF1
 10557                           intcon3	equ	0xFF0
 10558                           postinc0	equ	0xFEE
 10559                           wreg	equ	0xFE8
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function ___ftge *****************
 10568 ;; Defined at:
 10569 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  ff1             3   53[BANK0 ] float 
 10572 ;;  ff2             3   56[BANK0 ] float 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10584 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;Total ram usage:        9 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    7
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_operation
 10595 ;;		_printf
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text31
 10600  004B22                     __ptext31:
 10601                           	opt stack 0
 10602  004B22                     ___ftge:
 10603                           	opt stack 21
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;incstack = 0
 10607  004B22  0100               	movlb	0	; () banked
 10608  004B24  AFB7               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10609  004B26  D01D               	goto	l5109
 10610                           
 10611                           ; BSR set to: 0
 10612  004B28  C0B5  F0BB         	movff	___ftge@ff1,??___ftge
 10613  004B2C  C0B6  F0BC         	movff	___ftge@ff1+1,??___ftge+1
 10614  004B30  C0B7  F0BD         	movff	___ftge@ff1+2,??___ftge+2
 10615  004B34  0100               	movlb	0	; () banked
 10616  004B36  1FBB               	comf	??___ftge& (0+255),f,b
 10617  004B38  1FBC               	comf	(??___ftge+1)& (0+255),f,b
 10618  004B3A  1FBD               	comf	(??___ftge+2)& (0+255),f,b
 10619  004B3C  2BBB               	incf	??___ftge& (0+255),f,b
 10620  004B3E  0E00               	movlw	0
 10621  004B40  23BC               	addwfc	(??___ftge+1)& (0+255),f,b
 10622  004B42  23BD               	addwfc	(??___ftge+2)& (0+255),f,b
 10623  004B44  0E00               	movlw	0
 10624  004B46  0100               	movlb	0	; () banked
 10625  004B48  25BB               	addwf	??___ftge& (0+255),w,b
 10626  004B4A  0100               	movlb	0	; () banked
 10627  004B4C  6FB5               	movwf	___ftge@ff1& (0+255),b
 10628  004B4E  0E00               	movlw	0
 10629  004B50  0100               	movlb	0	; () banked
 10630  004B52  21BC               	addwfc	(??___ftge+1)& (0+255),w,b
 10631  004B54  0100               	movlb	0	; () banked
 10632  004B56  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
 10633  004B58  0E80               	movlw	128
 10634  004B5A  0100               	movlb	0	; () banked
 10635  004B5C  21BD               	addwfc	(??___ftge+2)& (0+255),w,b
 10636  004B5E  0100               	movlb	0	; () banked
 10637  004B60  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
 10638  004B62                     l5109:
 10639                           
 10640                           ; BSR set to: 0
 10641  004B62  0100               	movlb	0	; () banked
 10642  004B64  AFBA               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10643  004B66  D01D               	goto	l5113
 10644                           
 10645                           ; BSR set to: 0
 10646  004B68  C0B8  F0BB         	movff	___ftge@ff2,??___ftge
 10647  004B6C  C0B9  F0BC         	movff	___ftge@ff2+1,??___ftge+1
 10648  004B70  C0BA  F0BD         	movff	___ftge@ff2+2,??___ftge+2
 10649  004B74  0100               	movlb	0	; () banked
 10650  004B76  1FBB               	comf	??___ftge& (0+255),f,b
 10651  004B78  1FBC               	comf	(??___ftge+1)& (0+255),f,b
 10652  004B7A  1FBD               	comf	(??___ftge+2)& (0+255),f,b
 10653  004B7C  2BBB               	incf	??___ftge& (0+255),f,b
 10654  004B7E  0E00               	movlw	0
 10655  004B80  23BC               	addwfc	(??___ftge+1)& (0+255),f,b
 10656  004B82  23BD               	addwfc	(??___ftge+2)& (0+255),f,b
 10657  004B84  0E00               	movlw	0
 10658  004B86  0100               	movlb	0	; () banked
 10659  004B88  25BB               	addwf	??___ftge& (0+255),w,b
 10660  004B8A  0100               	movlb	0	; () banked
 10661  004B8C  6FB8               	movwf	___ftge@ff2& (0+255),b
 10662  004B8E  0E00               	movlw	0
 10663  004B90  0100               	movlb	0	; () banked
 10664  004B92  21BC               	addwfc	(??___ftge+1)& (0+255),w,b
 10665  004B94  0100               	movlb	0	; () banked
 10666  004B96  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
 10667  004B98  0E80               	movlw	128
 10668  004B9A  0100               	movlb	0	; () banked
 10669  004B9C  21BD               	addwfc	(??___ftge+2)& (0+255),w,b
 10670  004B9E  0100               	movlb	0	; () banked
 10671  004BA0  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
 10672  004BA2                     l5113:
 10673                           
 10674                           ; BSR set to: 0
 10675  004BA2  0E00               	movlw	0
 10676  004BA4  0100               	movlb	0	; () banked
 10677  004BA6  1BB5               	xorwf	___ftge@ff1& (0+255),f,b
 10678  004BA8  0E00               	movlw	0
 10679  004BAA  0100               	movlb	0	; () banked
 10680  004BAC  1BB6               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10681  004BAE  0E80               	movlw	128
 10682  004BB0  0100               	movlb	0	; () banked
 10683  004BB2  1BB7               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10684                           
 10685                           ; BSR set to: 0
 10686  004BB4  0E00               	movlw	0
 10687  004BB6  0100               	movlb	0	; () banked
 10688  004BB8  1BB8               	xorwf	___ftge@ff2& (0+255),f,b
 10689  004BBA  0E00               	movlw	0
 10690  004BBC  0100               	movlb	0	; () banked
 10691  004BBE  1BB9               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10692  004BC0  0E80               	movlw	128
 10693  004BC2  0100               	movlb	0	; () banked
 10694  004BC4  1BBA               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10695  004BC6  0100               	movlb	0	; () banked
 10696  004BC8  51B8               	movf	___ftge@ff2& (0+255),w,b
 10697  004BCA  0100               	movlb	0	; () banked
 10698  004BCC  5DB5               	subwf	___ftge@ff1& (0+255),w,b
 10699  004BCE  0100               	movlb	0	; () banked
 10700  004BD0  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
 10701  004BD2  0100               	movlb	0	; () banked
 10702  004BD4  59B6               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10703  004BD6  0100               	movlb	0	; () banked
 10704  004BD8  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
 10705  004BDA  0100               	movlb	0	; () banked
 10706  004BDC  59B7               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10707  004BDE  B0D8               	btfsc	status,0,c
 10708  004BE0  D002               	goto	l5119
 10709                           
 10710                           ; BSR set to: 0
 10711  004BE2  90D8               	bcf	status,0,c
 10712  004BE4  0012               	return	
 10713  004BE6                     l5119:
 10714                           
 10715                           ; BSR set to: 0
 10716  004BE6  80D8               	bsf	status,0,c
 10717                           
 10718                           ; BSR set to: 0
 10719  004BE8  0012               	return	
 10720  004BEA                     __end_of___ftge:
 10721                           	opt stack 0
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           intcon2	equ	0xFF1
 10730                           intcon3	equ	0xFF0
 10731                           postinc0	equ	0xFEE
 10732                           wreg	equ	0xFE8
 10733                           indf2	equ	0xFDF
 10734                           postinc2	equ	0xFDE
 10735                           postdec2	equ	0xFDD
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _lcdInst *****************
 10741 ;; Defined at:
 10742 ;;		line 26 in file "lcd.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;  data            1    wreg     unsigned char 
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  data            1   32[BANK0 ] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;Total ram usage:        1 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    8
 10763 ;; This function calls:
 10764 ;;		_lcdNibble
 10765 ;; This function is called by:
 10766 ;;		_initLCD
 10767 ;;		_standby
 10768 ;;		_date_time
 10769 ;;		_bottle_count
 10770 ;;		_bottle_time
 10771 ;;		_operation
 10772 ;;		_operationend
 10773 ;;		_emergencystop
 10774 ;; This function uses a non-reentrant model
 10775 ;;
 10776                           
 10777                           	psect	text32
 10778  005988                     __ptext32:
 10779                           	opt stack 0
 10780  005988                     _lcdInst:
 10781                           	opt stack 21
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;incstack = 0
 10785                           ;lcdInst@data stored from wreg
 10786  005988  0100               	movlb	0	; () banked
 10787  00598A  6FA0               	movwf	lcdInst@data& (0+255),b
 10788                           
 10789                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 10790  00598C  948C               	bcf	3980,2,c	;volatile
 10791                           
 10792                           ;lcd.c: 28: lcdNibble(data);
 10793  00598E  0100               	movlb	0	; () banked
 10794  005990  51A0               	movf	lcdInst@data& (0+255),w,b
 10795  005992  EC36  F02A         	call	_lcdNibble
 10796  005996  0012               	return		;funcret
 10797  005998                     __end_of_lcdInst:
 10798                           	opt stack 0
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           intcon2	equ	0xFF1
 10807                           intcon3	equ	0xFF0
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _lcdNibble *****************
 10818 ;; Defined at:
 10819 ;;		line 36 in file "lcd.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  data            1    wreg     unsigned char 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  data            1   31[BANK0 ] unsigned char 
 10824 ;;  temp            1   30[BANK0 ] unsigned char 
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      void 
 10827 ;; Registers used:
 10828 ;;		wreg, status,2, status,0
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;Total ram usage:        2 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    7
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_lcdInst
 10845 ;;		_putch
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text33
 10850  00546C                     __ptext33:
 10851                           	opt stack 0
 10852  00546C                     _lcdNibble:
 10853                           	opt stack 20
 10854                           
 10855                           ;incstack = 0
 10856                           ;lcdNibble@data stored from wreg
 10857  00546C  0100               	movlb	0	; () banked
 10858  00546E  6F9F               	movwf	lcdNibble@data& (0+255),b
 10859                           
 10860                           ;lcd.c: 38: char temp = data & 0xF0;
 10861  005470  0100               	movlb	0	; () banked
 10862  005472  519F               	movf	lcdNibble@data& (0+255),w,b
 10863  005474  0BF0               	andlw	240
 10864  005476  0100               	movlb	0	; () banked
 10865  005478  6F9E               	movwf	lcdNibble@temp& (0+255),b
 10866                           
 10867                           ;lcd.c: 39: LATD = LATD & 0x0F;
 10868  00547A  508C               	movf	3980,w,c	;volatile
 10869  00547C  0B0F               	andlw	15
 10870  00547E  6E8C               	movwf	3980,c	;volatile
 10871                           
 10872                           ;lcd.c: 40: LATD = temp | LATD;
 10873  005480  0100               	movlb	0	; () banked
 10874  005482  519E               	movf	lcdNibble@temp& (0+255),w,b
 10875  005484  108C               	iorwf	3980,w,c	;volatile
 10876  005486  6E8C               	movwf	3980,c	;volatile
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 10880  005488  968C               	bcf	3980,3,c	;volatile
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10884  00548A  0E19               	movlw	25
 10885  00548C                     u9337:
 10886  00548C  2EE8               	decfsz	wreg,f,c
 10887  00548E  D7FE               	bra	u9337
 10888                           
 10889                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 10890  005490  868C               	bsf	3980,3,c	;volatile
 10891                           
 10892                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10893  005492  0E19               	movlw	25
 10894  005494                     u9347:
 10895  005494  2EE8               	decfsz	wreg,f,c
 10896  005496  D7FE               	bra	u9347
 10897                           
 10898                           ;lcd.c: 47: data = data << 4;
 10899  005498  0100               	movlb	0	; () banked
 10900  00549A  399F               	swapf	lcdNibble@data& (0+255),w,b
 10901  00549C  0BF0               	andlw	240
 10902  00549E  0100               	movlb	0	; () banked
 10903  0054A0  6F9F               	movwf	lcdNibble@data& (0+255),b
 10904                           
 10905                           ;lcd.c: 49: temp = data & 0xF0;
 10906  0054A2  0100               	movlb	0	; () banked
 10907  0054A4  519F               	movf	lcdNibble@data& (0+255),w,b
 10908  0054A6  0BF0               	andlw	240
 10909  0054A8  0100               	movlb	0	; () banked
 10910  0054AA  6F9E               	movwf	lcdNibble@temp& (0+255),b
 10911                           
 10912                           ;lcd.c: 50: LATD = LATD & 0x0F;
 10913  0054AC  508C               	movf	3980,w,c	;volatile
 10914  0054AE  0B0F               	andlw	15
 10915  0054B0  6E8C               	movwf	3980,c	;volatile
 10916                           
 10917                           ;lcd.c: 51: LATD = temp | LATD;
 10918  0054B2  0100               	movlb	0	; () banked
 10919  0054B4  519E               	movf	lcdNibble@temp& (0+255),w,b
 10920  0054B6  108C               	iorwf	3980,w,c	;volatile
 10921  0054B8  6E8C               	movwf	3980,c	;volatile
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 10925  0054BA  968C               	bcf	3980,3,c	;volatile
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10929  0054BC  0E19               	movlw	25
 10930  0054BE                     u9357:
 10931  0054BE  2EE8               	decfsz	wreg,f,c
 10932  0054C0  D7FE               	bra	u9357
 10933                           
 10934                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 10935  0054C2  868C               	bsf	3980,3,c	;volatile
 10936                           
 10937                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10938  0054C4  0E19               	movlw	25
 10939  0054C6                     u9367:
 10940  0054C6  2EE8               	decfsz	wreg,f,c
 10941  0054C8  D7FE               	bra	u9367
 10942  0054CA  0012               	return		;funcret
 10943  0054CC                     __end_of_lcdNibble:
 10944                           	opt stack 0
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           intcon3	equ	0xFF0
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _I2C_Master_Init *****************
 10964 ;; Defined at:
 10965 ;;		line 14 in file "I2C.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  c               4   43[BANK0 ] const unsigned long 
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      void 
 10972 ;; Registers used:
 10973 ;;		wreg, status,2, status,0, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;Total ram usage:        8 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    8
 10986 ;; This function calls:
 10987 ;;		___lldiv
 10988 ;; This function is called by:
 10989 ;;		_main
 10990 ;; This function uses a non-reentrant model
 10991 ;;
 10992                           
 10993                           	psect	text34
 10994  0054CC                     __ptext34:
 10995                           	opt stack 0
 10996  0054CC                     _I2C_Master_Init:
 10997                           	opt stack 22
 10998                           
 10999                           ;I2C.c: 17: SSPSTAT = 0b00000000;
 11000                           
 11001                           ;incstack = 0
 11002  0054CC  0E00               	movlw	0
 11003  0054CE  6EC7               	movwf	4039,c	;volatile
 11004                           
 11005                           ;I2C.c: 18: SSPCON1 = 0b00101000;
 11006  0054D0  0E28               	movlw	40
 11007  0054D2  6EC6               	movwf	4038,c	;volatile
 11008                           
 11009                           ;I2C.c: 19: SSPCON2 = 0b00000000;
 11010  0054D4  0E00               	movlw	0
 11011  0054D6  6EC5               	movwf	4037,c	;volatile
 11012                           
 11013                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
 11014  0054D8  0E80               	movlw	128
 11015  0054DA  0100               	movlb	0	; () banked
 11016  0054DC  6F9E               	movwf	___lldiv@dividend& (0+255),b
 11017  0054DE  0E96               	movlw	150
 11018  0054E0  6F9F               	movwf	(___lldiv@dividend+1)& (0+255),b
 11019  0054E2  0E98               	movlw	152
 11020  0054E4  6FA0               	movwf	(___lldiv@dividend+2)& (0+255),b
 11021  0054E6  0E00               	movlw	0
 11022  0054E8  6FA1               	movwf	(___lldiv@dividend+3)& (0+255),b
 11023  0054EA  C0AB  F0AF         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 11024  0054EE  C0AC  F0B0         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 11025  0054F2  C0AD  F0B1         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 11026  0054F6  C0AE  F0B2         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 11027  0054FA  0E02               	movlw	2
 11028  0054FC                     u6785:
 11029  0054FC  90D8               	bcf	status,0,c
 11030  0054FE  0100               	movlb	0	; () banked
 11031  005500  37AF               	rlcf	??_I2C_Master_Init& (0+255),f,b
 11032  005502  37B0               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 11033  005504  37B1               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 11034  005506  37B2               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 11035  005508  2EE8               	decfsz	wreg,f,c
 11036  00550A  D7F8               	goto	u6785
 11037  00550C  C0AF  F0A2         	movff	??_I2C_Master_Init,___lldiv@divisor
 11038  005510  C0B0  F0A3         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11039  005514  C0B1  F0A4         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11040  005518  C0B2  F0A5         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11041  00551C  ECB7  F026         	call	___lldiv	;wreg free
 11042  005520  0100               	movlb	0	; () banked
 11043  005522  059E               	decf	?___lldiv& (0+255),w,b
 11044  005524  6EC8               	movwf	4040,c	;volatile
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;I2C.c: 21: TRISC3 = 1;
 11048  005526  8694               	bsf	3988,3,c	;volatile
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;I2C.c: 22: TRISC4 = 1;
 11052  005528  8894               	bsf	3988,4,c	;volatile
 11053                           
 11054                           ; BSR set to: 0
 11055  00552A  0012               	return		;funcret
 11056  00552C                     __end_of_I2C_Master_Init:
 11057                           	opt stack 0
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           intcon2	equ	0xFF1
 11066                           intcon3	equ	0xFF0
 11067                           postinc0	equ	0xFEE
 11068                           wreg	equ	0xFE8
 11069                           indf2	equ	0xFDF
 11070                           postinc2	equ	0xFDE
 11071                           postdec2	equ	0xFDD
 11072                           fsr2h	equ	0xFDA
 11073                           fsr2l	equ	0xFD9
 11074                           status	equ	0xFD8
 11075                           
 11076 ;; *************** function ___lldiv *****************
 11077 ;; Defined at:
 11078 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11079 ;; Parameters:    Size  Location     Type
 11080 ;;  dividend        4   30[BANK0 ] unsigned long 
 11081 ;;  divisor         4   34[BANK0 ] unsigned long 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;  quotient        4   38[BANK0 ] unsigned long 
 11084 ;;  counter         1   42[BANK0 ] unsigned char 
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  4   30[BANK0 ] unsigned long 
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:       13 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    7
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_I2C_Master_Init
 11105 ;;		_printf
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           	psect	text35
 11110  004D6E                     __ptext35:
 11111                           	opt stack 0
 11112  004D6E                     ___lldiv:
 11113                           	opt stack 21
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;incstack = 0
 11117  004D6E  0E00               	movlw	0
 11118  004D70  0100               	movlb	0	; () banked
 11119  004D72  6FA6               	movwf	___lldiv@quotient& (0+255),b
 11120  004D74  0E00               	movlw	0
 11121  004D76  6FA7               	movwf	(___lldiv@quotient+1)& (0+255),b
 11122  004D78  0E00               	movlw	0
 11123  004D7A  6FA8               	movwf	(___lldiv@quotient+2)& (0+255),b
 11124  004D7C  0E00               	movlw	0
 11125  004D7E  6FA9               	movwf	(___lldiv@quotient+3)& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128  004D80  0100               	movlb	0	; () banked
 11129  004D82  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11130  004D84  0100               	movlb	0	; () banked
 11131  004D86  11A3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11132  004D88  0100               	movlb	0	; () banked
 11133  004D8A  11A4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11134  004D8C  0100               	movlb	0	; () banked
 11135  004D8E  11A5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11136  004D90  B4D8               	btfsc	status,2,c
 11137  004D92  D042               	goto	l998
 11138                           
 11139                           ; BSR set to: 0
 11140  004D94  0E01               	movlw	1
 11141  004D96  0100               	movlb	0	; () banked
 11142  004D98  6FAA               	movwf	___lldiv@counter& (0+255),b
 11143  004D9A  D008               	goto	l5181
 11144  004D9C                     l5179:
 11145                           
 11146                           ; BSR set to: 0
 11147  004D9C  0100               	movlb	0	; () banked
 11148  004D9E  90D8               	bcf	status,0,c
 11149  004DA0  37A2               	rlcf	___lldiv@divisor& (0+255),f,b
 11150  004DA2  37A3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11151  004DA4  37A4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11152  004DA6  37A5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11153  004DA8  0100               	movlb	0	; () banked
 11154  004DAA  2BAA               	incf	___lldiv@counter& (0+255),f,b
 11155  004DAC                     l5181:
 11156                           
 11157                           ; BSR set to: 0
 11158  004DAC  0100               	movlb	0	; () banked
 11159  004DAE  AFA5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11160  004DB0  D7F5               	goto	l5179
 11161  004DB2                     l5183:
 11162                           
 11163                           ; BSR set to: 0
 11164  004DB2  0100               	movlb	0	; () banked
 11165  004DB4  90D8               	bcf	status,0,c
 11166  004DB6  37A6               	rlcf	___lldiv@quotient& (0+255),f,b
 11167  004DB8  37A7               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11168  004DBA  37A8               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11169  004DBC  37A9               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11170                           
 11171                           ; BSR set to: 0
 11172  004DBE  0100               	movlb	0	; () banked
 11173  004DC0  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11174  004DC2  0100               	movlb	0	; () banked
 11175  004DC4  5D9E               	subwf	___lldiv@dividend& (0+255),w,b
 11176  004DC6  0100               	movlb	0	; () banked
 11177  004DC8  51A3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11178  004DCA  0100               	movlb	0	; () banked
 11179  004DCC  599F               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11180  004DCE  0100               	movlb	0	; () banked
 11181  004DD0  51A4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11182  004DD2  0100               	movlb	0	; () banked
 11183  004DD4  59A0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11184  004DD6  0100               	movlb	0	; () banked
 11185  004DD8  51A5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11186  004DDA  0100               	movlb	0	; () banked
 11187  004DDC  59A1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11188  004DDE  A0D8               	btfss	status,0,c
 11189  004DE0  D012               	goto	l5191
 11190                           
 11191                           ; BSR set to: 0
 11192  004DE2  0100               	movlb	0	; () banked
 11193  004DE4  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11194  004DE6  0100               	movlb	0	; () banked
 11195  004DE8  5F9E               	subwf	___lldiv@dividend& (0+255),f,b
 11196  004DEA  0100               	movlb	0	; () banked
 11197  004DEC  51A3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11198  004DEE  0100               	movlb	0	; () banked
 11199  004DF0  5B9F               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11200  004DF2  0100               	movlb	0	; () banked
 11201  004DF4  51A4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11202  004DF6  0100               	movlb	0	; () banked
 11203  004DF8  5BA0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11204  004DFA  0100               	movlb	0	; () banked
 11205  004DFC  51A5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11206  004DFE  0100               	movlb	0	; () banked
 11207  004E00  5BA1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11208                           
 11209                           ; BSR set to: 0
 11210  004E02  0100               	movlb	0	; () banked
 11211  004E04  81A6               	bsf	___lldiv@quotient& (0+255),0,b
 11212  004E06                     l5191:
 11213                           
 11214                           ; BSR set to: 0
 11215  004E06  0100               	movlb	0	; () banked
 11216  004E08  90D8               	bcf	status,0,c
 11217  004E0A  33A5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11218  004E0C  33A4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11219  004E0E  33A3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11220  004E10  33A2               	rrcf	___lldiv@divisor& (0+255),f,b
 11221                           
 11222                           ; BSR set to: 0
 11223  004E12  0100               	movlb	0	; () banked
 11224  004E14  2FAA               	decfsz	___lldiv@counter& (0+255),f,b
 11225  004E16  D7CD               	goto	l5183
 11226  004E18                     l998:
 11227                           
 11228                           ; BSR set to: 0
 11229  004E18  C0A6  F09E         	movff	___lldiv@quotient,?___lldiv
 11230  004E1C  C0A7  F09F         	movff	___lldiv@quotient+1,?___lldiv+1
 11231  004E20  C0A8  F0A0         	movff	___lldiv@quotient+2,?___lldiv+2
 11232  004E24  C0A9  F0A1         	movff	___lldiv@quotient+3,?___lldiv+3
 11233                           
 11234                           ; BSR set to: 0
 11235  004E28  0012               	return		;funcret
 11236  004E2A                     __end_of___lldiv:
 11237                           	opt stack 0
 11238                           tblptru	equ	0xFF8
 11239                           tblptrh	equ	0xFF7
 11240                           tblptrl	equ	0xFF6
 11241                           tablat	equ	0xFF5
 11242                           prodh	equ	0xFF4
 11243                           prodl	equ	0xFF3
 11244                           intcon	equ	0xFF2
 11245                           intcon2	equ	0xFF1
 11246                           intcon3	equ	0xFF0
 11247                           postinc0	equ	0xFEE
 11248                           wreg	equ	0xFE8
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           fsr2h	equ	0xFDA
 11253                           fsr2l	equ	0xFD9
 11254                           status	equ	0xFD8
 11255                           
 11256 ;; *************** function _I2C_ColorSens_Init *****************
 11257 ;; Defined at:
 11258 ;;		line 54 in file "I2C.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;		None
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;		None
 11263 ;; Return value:  Size  Location     Type
 11264 ;;                  1    wreg      void 
 11265 ;; Registers used:
 11266 ;;		wreg, status,2, status,0, cstack
 11267 ;; Tracked objects:
 11268 ;;		On entry : 0/0
 11269 ;;		On exit  : 0/0
 11270 ;;		Unchanged: 0/0
 11271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;Total ram usage:        1 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; Hardware stack levels required when called:    9
 11279 ;; This function calls:
 11280 ;;		_I2C_Master_Start
 11281 ;;		_I2C_Master_Stop
 11282 ;;		_I2C_Master_Write
 11283 ;; This function is called by:
 11284 ;;		_main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text36
 11289  004306                     __ptext36:
 11290                           	opt stack 0
 11291  004306                     _I2C_ColorSens_Init:
 11292                           	opt stack 21
 11293                           
 11294                           ;I2C.c: 55: I2C_Master_Start();
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;incstack = 0
 11298  004306  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
 11299                           
 11300                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
 11301  00430A  0E00               	movlw	0
 11302  00430C  0100               	movlb	0	; () banked
 11303  00430E  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11304  004310  0E52               	movlw	82
 11305  004312  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11306  004314  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11307                           
 11308                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
 11309  004318  0E00               	movlw	0
 11310  00431A  0100               	movlb	0	; () banked
 11311  00431C  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11312  00431E  0E80               	movlw	128
 11313  004320  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11314  004322  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11315                           
 11316                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
 11317  004326  0E00               	movlw	0
 11318  004328  0100               	movlb	0	; () banked
 11319  00432A  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11320  00432C  0E01               	movlw	1
 11321  00432E  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11322  004330  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11323                           
 11324                           ;I2C.c: 59: I2C_Master_Stop();
 11325  004334  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
 11326                           
 11327                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
 11328  004338  0E0A               	movlw	10
 11329  00433A  0100               	movlb	0	; () banked
 11330  00433C  6FA1               	movwf	??_I2C_ColorSens_Init& (0+255),b
 11331  00433E  0EBC               	movlw	188
 11332  004340                     u9377:
 11333  004340  2EE8               	decfsz	wreg,f,c
 11334  004342  D7FE               	bra	u9377
 11335  004344  2FA1               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
 11336  004346  D7FC               	bra	u9377
 11337  004348  F000               	nop	
 11338                           
 11339                           ;I2C.c: 63: I2C_Master_Start();
 11340  00434A  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
 11341                           
 11342                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
 11343  00434E  0E00               	movlw	0
 11344  004350  0100               	movlb	0	; () banked
 11345  004352  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11346  004354  0E52               	movlw	82
 11347  004356  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11348  004358  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11349                           
 11350                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
 11351  00435C  0E00               	movlw	0
 11352  00435E  0100               	movlb	0	; () banked
 11353  004360  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11354  004362  0E80               	movlw	128
 11355  004364  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11356  004366  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11357                           
 11358                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
 11359  00436A  0E00               	movlw	0
 11360  00436C  0100               	movlb	0	; () banked
 11361  00436E  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11362  004370  0E03               	movlw	3
 11363  004372  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11364  004374  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11365                           
 11366                           ;I2C.c: 67: I2C_Master_Stop();
 11367  004378  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
 11368                           
 11369                           ;I2C.c: 69: I2C_Master_Start();
 11370  00437C  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
 11371                           
 11372                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
 11373  004380  0E00               	movlw	0
 11374  004382  0100               	movlb	0	; () banked
 11375  004384  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11376  004386  0E52               	movlw	82
 11377  004388  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11378  00438A  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11379                           
 11380                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
 11381  00438E  0E00               	movlw	0
 11382  004390  0100               	movlb	0	; () banked
 11383  004392  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11384  004394  0E8F               	movlw	143
 11385  004396  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11386  004398  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11387                           
 11388                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
 11389  00439C  0E00               	movlw	0
 11390  00439E  0100               	movlb	0	; () banked
 11391  0043A0  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11392  0043A2  0E02               	movlw	2
 11393  0043A4  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11394  0043A6  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11395                           
 11396                           ;I2C.c: 73: I2C_Master_Stop();
 11397  0043AA  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
 11398                           
 11399                           ;I2C.c: 90: I2C_Master_Start();
 11400  0043AE  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
 11401                           
 11402                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
 11403  0043B2  0E00               	movlw	0
 11404  0043B4  0100               	movlb	0	; () banked
 11405  0043B6  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11406  0043B8  0E52               	movlw	82
 11407  0043BA  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11408  0043BC  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11409                           
 11410                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
 11411  0043C0  0E00               	movlw	0
 11412  0043C2  0100               	movlb	0	; () banked
 11413  0043C4  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11414  0043C6  0E81               	movlw	129
 11415  0043C8  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11416  0043CA  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11417                           
 11418                           ;I2C.c: 93: I2C_Master_Write(0b11111111);
 11419  0043CE  0E00               	movlw	0
 11420  0043D0  0100               	movlb	0	; () banked
 11421  0043D2  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11422  0043D4  699F               	setf	I2C_Master_Write@d& (0+255),b
 11423  0043D6  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11424                           
 11425                           ;I2C.c: 94: I2C_Master_Stop();
 11426  0043DA  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
 11427                           
 11428                           ;I2C.c: 96: I2C_Master_Start();
 11429  0043DE  ECE6  F02C         	call	_I2C_Master_Start	;wreg free
 11430                           
 11431                           ;I2C.c: 97: I2C_Master_Write(0b01010010);
 11432  0043E2  0E00               	movlw	0
 11433  0043E4  0100               	movlb	0	; () banked
 11434  0043E6  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11435  0043E8  0E52               	movlw	82
 11436  0043EA  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11437  0043EC  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11438                           
 11439                           ;I2C.c: 98: I2C_Master_Write(0b10110100);
 11440  0043F0  0E00               	movlw	0
 11441  0043F2  0100               	movlb	0	; () banked
 11442  0043F4  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11443  0043F6  0EB4               	movlw	180
 11444  0043F8  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11445  0043FA  ECD8  F02C         	call	_I2C_Master_Write	;wreg free
 11446                           
 11447                           ;I2C.c: 99: I2C_Master_Stop();
 11448  0043FE  ECE2  F02C         	call	_I2C_Master_Stop	;wreg free
 11449  004402  0012               	return		;funcret
 11450  004404                     __end_of_I2C_ColorSens_Init:
 11451                           	opt stack 0
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon2	equ	0xFF1
 11460                           intcon3	equ	0xFF0
 11461                           postinc0	equ	0xFEE
 11462                           wreg	equ	0xFE8
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _I2C_Master_Write *****************
 11471 ;; Defined at:
 11472 ;;		line 48 in file "I2C.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;  d               2   31[BANK0 ] unsigned int 
 11475 ;; Auto vars:     Size  Location     Type
 11476 ;;		None
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		wreg, status,2, status,0, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;Total ram usage:        2 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    8
 11493 ;; This function calls:
 11494 ;;		_I2C_Master_Wait
 11495 ;; This function is called by:
 11496 ;;		_I2C_ColorSens_Init
 11497 ;;		_date_time
 11498 ;;		_read_colorsensor
 11499 ;;		_I2C_ColorSens_ClearInt
 11500 ;;		_set_time
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text37
 11505  0059B0                     __ptext37:
 11506                           	opt stack 0
 11507  0059B0                     _I2C_Master_Write:
 11508                           	opt stack 20
 11509                           
 11510                           ;I2C.c: 50: I2C_Master_Wait();
 11511                           
 11512                           ;incstack = 0
 11513  0059B0  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
 11514                           
 11515                           ;I2C.c: 51: SSPBUF = d;
 11516  0059B4  C09F  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11517  0059B8  0012               	return		;funcret
 11518  0059BA                     __end_of_I2C_Master_Write:
 11519                           	opt stack 0
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           intcon2	equ	0xFF1
 11528                           intcon3	equ	0xFF0
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _I2C_Master_Stop *****************
 11539 ;; Defined at:
 11540 ;;		line 42 in file "I2C.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;		None
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;		None
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      void 
 11547 ;; Registers used:
 11548 ;;		wreg, status,2, status,0, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;Total ram usage:        0 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    8
 11561 ;; This function calls:
 11562 ;;		_I2C_Master_Wait
 11563 ;; This function is called by:
 11564 ;;		_I2C_ColorSens_Init
 11565 ;;		_date_time
 11566 ;;		_read_colorsensor
 11567 ;;		_I2C_ColorSens_ClearInt
 11568 ;;		_set_time
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text38
 11573  0059C4                     __ptext38:
 11574                           	opt stack 0
 11575  0059C4                     _I2C_Master_Stop:
 11576                           	opt stack 20
 11577                           
 11578                           ;I2C.c: 44: I2C_Master_Wait();
 11579                           
 11580                           ;incstack = 0
 11581  0059C4  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
 11582                           
 11583                           ;I2C.c: 45: PEN = 1;
 11584  0059C8  84C5               	bsf	4037,2,c	;volatile
 11585  0059CA  0012               	return		;funcret
 11586  0059CC                     __end_of_I2C_Master_Stop:
 11587                           	opt stack 0
 11588                           tblptru	equ	0xFF8
 11589                           tblptrh	equ	0xFF7
 11590                           tblptrl	equ	0xFF6
 11591                           tablat	equ	0xFF5
 11592                           prodh	equ	0xFF4
 11593                           prodl	equ	0xFF3
 11594                           intcon	equ	0xFF2
 11595                           intcon2	equ	0xFF1
 11596                           intcon3	equ	0xFF0
 11597                           postinc0	equ	0xFEE
 11598                           wreg	equ	0xFE8
 11599                           indf2	equ	0xFDF
 11600                           postinc2	equ	0xFDE
 11601                           postdec2	equ	0xFDD
 11602                           fsr2h	equ	0xFDA
 11603                           fsr2l	equ	0xFD9
 11604                           status	equ	0xFD8
 11605                           
 11606 ;; *************** function _I2C_Master_Start *****************
 11607 ;; Defined at:
 11608 ;;		line 30 in file "I2C.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;		None
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;		None
 11613 ;; Return value:  Size  Location     Type
 11614 ;;                  1    wreg      void 
 11615 ;; Registers used:
 11616 ;;		wreg, status,2, status,0, cstack
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;Total ram usage:        0 bytes
 11627 ;; Hardware stack levels used:    1
 11628 ;; Hardware stack levels required when called:    8
 11629 ;; This function calls:
 11630 ;;		_I2C_Master_Wait
 11631 ;; This function is called by:
 11632 ;;		_I2C_ColorSens_Init
 11633 ;;		_date_time
 11634 ;;		_read_colorsensor
 11635 ;;		_I2C_ColorSens_ClearInt
 11636 ;;		_set_time
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           	psect	text39
 11641  0059CC                     __ptext39:
 11642                           	opt stack 0
 11643  0059CC                     _I2C_Master_Start:
 11644                           	opt stack 20
 11645                           
 11646                           ;I2C.c: 32: I2C_Master_Wait();
 11647                           
 11648                           ;incstack = 0
 11649  0059CC  ECA9  F02C         	call	_I2C_Master_Wait	;wreg free
 11650                           
 11651                           ;I2C.c: 33: SEN = 1;
 11652  0059D0  80C5               	bsf	4037,0,c	;volatile
 11653  0059D2  0012               	return		;funcret
 11654  0059D4                     __end_of_I2C_Master_Start:
 11655                           	opt stack 0
 11656                           tblptru	equ	0xFF8
 11657                           tblptrh	equ	0xFF7
 11658                           tblptrl	equ	0xFF6
 11659                           tablat	equ	0xFF5
 11660                           prodh	equ	0xFF4
 11661                           prodl	equ	0xFF3
 11662                           intcon	equ	0xFF2
 11663                           intcon2	equ	0xFF1
 11664                           intcon3	equ	0xFF0
 11665                           postinc0	equ	0xFEE
 11666                           wreg	equ	0xFE8
 11667                           indf2	equ	0xFDF
 11668                           postinc2	equ	0xFDE
 11669                           postdec2	equ	0xFDD
 11670                           fsr2h	equ	0xFDA
 11671                           fsr2l	equ	0xFD9
 11672                           status	equ	0xFD8
 11673                           
 11674 ;; *************** function _I2C_Master_Wait *****************
 11675 ;; Defined at:
 11676 ;;		line 25 in file "I2C.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;		None
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;		None
 11681 ;; Return value:  Size  Location     Type
 11682 ;;                  1    wreg      void 
 11683 ;; Registers used:
 11684 ;;		wreg, status,2, status,0
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11694 ;;Total ram usage:        1 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    7
 11697 ;; This function calls:
 11698 ;;		Nothing
 11699 ;; This function is called by:
 11700 ;;		_I2C_Master_Start
 11701 ;;		_I2C_Master_Stop
 11702 ;;		_I2C_Master_Write
 11703 ;;		_I2C_Master_Read
 11704 ;;		_I2C_Master_RepeatedStart
 11705 ;; This function uses a non-reentrant model
 11706 ;;
 11707                           
 11708                           	psect	text40
 11709  005952                     __ptext40:
 11710                           	opt stack 0
 11711  005952                     _I2C_Master_Wait:
 11712                           	opt stack 20
 11713  005952                     l34:
 11714  005952  B4C7               	btfsc	4039,2,c	;volatile
 11715  005954  D7FE               	goto	l34
 11716  005956  CFC5 F09E          	movff	4037,??_I2C_Master_Wait	;volatile
 11717  00595A  0E1F               	movlw	31
 11718  00595C  0100               	movlb	0	; () banked
 11719  00595E  179E               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11720  005960  B4D8               	btfsc	status,2,c
 11721  005962  0012               	return	
 11722  005964  D7F6               	goto	l34
 11723  005966                     __end_of_I2C_Master_Wait:
 11724                           	opt stack 0
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon2	equ	0xFF1
 11733                           intcon3	equ	0xFF0
 11734                           postinc0	equ	0xFEE
 11735                           wreg	equ	0xFE8
 11736                           indf2	equ	0xFDF
 11737                           postinc2	equ	0xFDE
 11738                           postdec2	equ	0xFDD
 11739                           fsr2h	equ	0xFDA
 11740                           fsr2l	equ	0xFD9
 11741                           status	equ	0xFD8
 11742                           
 11743 ;; *************** function _isr *****************
 11744 ;; Defined at:
 11745 ;;		line 122 in file "main.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  i               1  118[COMRAM] unsigned char 
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      void 
 11752 ;; Registers used:
 11753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;Total ram usage:       19 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    6
 11766 ;; This function calls:
 11767 ;;		_dec_to_hex
 11768 ;;		_read_time
 11769 ;;		i2___wmul
 11770 ;;		i2_lcdInst
 11771 ;;		i2_printf
 11772 ;;		i2_read_colorsensor
 11773 ;; This function is called by:
 11774 ;;		Interrupt level 2
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           	psect	intcode
 11779  000008                     __pintcode:
 11780                           	opt stack 0
 11781  000008                     _isr:
 11782                           	opt stack 19
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;incstack = 0
 11786  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11787  00000A  ED44  F00D         	call	int_func,f	;refresh shadow registers
 11788                           tblptru	equ	0xFF8
 11789                           tblptrh	equ	0xFF7
 11790                           tblptrl	equ	0xFF6
 11791                           tablat	equ	0xFF5
 11792                           prodh	equ	0xFF4
 11793                           prodl	equ	0xFF3
 11794                           intcon	equ	0xFF2
 11795                           intcon2	equ	0xFF1
 11796                           intcon3	equ	0xFF0
 11797                           postinc0	equ	0xFEE
 11798                           wreg	equ	0xFE8
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806                           	psect	intcode_body
 11807  001A88                     __pintcode_body:
 11808                           	opt stack 19
 11809  001A88                     int_func:
 11810                           	opt stack 19
 11811  001A88  0006               	pop		; remove dummy address from shadow register refresh
 11812  001A8A  CFFA F090          	movff	pclath,??_isr+2
 11813  001A8E  CFFB F091          	movff	pclatu,??_isr+3
 11814  001A92  CFE9 F092          	movff	fsr0l,??_isr+4
 11815  001A96  CFEA F093          	movff	fsr0h,??_isr+5
 11816  001A9A  CFE1 F094          	movff	fsr1l,??_isr+6
 11817  001A9E  CFE2 F095          	movff	fsr1h,??_isr+7
 11818  001AA2  CFD9 F096          	movff	fsr2l,??_isr+8
 11819  001AA6  CFDA F097          	movff	fsr2h,??_isr+9
 11820  001AAA  CFF3 F098          	movff	prodl,??_isr+10
 11821  001AAE  CFF4 F099          	movff	prodh,??_isr+11
 11822  001AB2  CFF6 F09A          	movff	tblptrl,??_isr+12
 11823  001AB6  CFF7 F09B          	movff	tblptrh,??_isr+13
 11824  001ABA  CFF8 F09C          	movff	tblptru,??_isr+14
 11825  001ABE  CFF5 F09D          	movff	tablat,??_isr+15
 11826                           
 11827                           ;main.c: 123: if (INT1IF) {
 11828  001AC2  B0F0               	btfsc	intcon3,0,c	;volatile
 11829  001AC4  D116               	goto	i2l6873
 11830  001AC6  D141               	goto	i2l318
 11831  001AC8                     i2l320:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 126: LATAbits.LATA2 = 1;
 11835  001AC8  8489               	bsf	3977,2,c	;volatile
 11836                           
 11837                           ;main.c: 130: TMR1ON = 1;
 11838  001ACA  80CD               	bsf	4045,0,c	;volatile
 11839                           
 11840                           ;main.c: 131: TMR3ON = 1;
 11841  001ACC  80B1               	bsf	4017,0,c	;volatile
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;main.c: 133: read_time();
 11845  001ACE  ECCF  F029         	call	_read_time	;wreg free
 11846                           
 11847                           ;main.c: 134: start_time[1] = time[1];
 11848  001AD2  C159  F0DF         	movff	_time+1,_start_time+1
 11849                           
 11850                           ;main.c: 135: start_time[0] = time[0];
 11851  001AD6  C158  F0DE         	movff	_time,_start_time
 11852                           
 11853                           ;main.c: 136: for(i=0;i<5;i++){
 11854  001ADA  0E00               	movlw	0
 11855  001ADC  6E7B               	movwf	_i+1,c
 11856  001ADE  0E00               	movlw	0
 11857  001AE0  6E7A               	movwf	_i,c
 11858  001AE2                     i2l6797:
 11859  001AE2  BE7B               	btfsc	_i+1,7,c
 11860  001AE4  D006               	goto	i2l6801
 11861  001AE6  507B               	movf	_i+1,w,c
 11862  001AE8  E114               	bnz	i2l6807
 11863  001AEA  0E05               	movlw	5
 11864  001AEC  5C7A               	subwf	_i,w,c
 11865  001AEE  B0D8               	btfsc	status,0,c
 11866  001AF0  D010               	goto	i2l6807
 11867  001AF2                     i2l6801:
 11868                           
 11869                           ;main.c: 137: bottle_count_array[i] = 0;
 11870  001AF2  90D8               	bcf	status,0,c
 11871  001AF4  347A               	rlcf	_i,w,c
 11872  001AF6  6ED9               	movwf	fsr2l,c
 11873  001AF8  347B               	rlcf	_i+1,w,c
 11874  001AFA  6EDA               	movwf	fsr2h,c
 11875  001AFC  0E46               	movlw	low _bottle_count_array
 11876  001AFE  26D9               	addwf	fsr2l,f,c
 11877  001B00  0E01               	movlw	high _bottle_count_array
 11878  001B02  22DA               	addwfc	fsr2h,f,c
 11879  001B04  0E00               	movlw	0
 11880  001B06  6EDE               	movwf	postinc2,c
 11881  001B08  0E00               	movlw	0
 11882  001B0A  6EDD               	movwf	postdec2,c
 11883  001B0C  4A7A               	infsnz	_i,f,c
 11884  001B0E  2A7B               	incf	_i+1,f,c
 11885  001B10  D7E8               	goto	i2l6797
 11886  001B12                     i2l6807:
 11887                           
 11888                           ;main.c: 138: }
 11889                           ;main.c: 139: lcdInst(0b00000001);
 11890  001B12  0E01               	movlw	1
 11891  001B14  ECD2  F02C         	call	i2_lcdInst
 11892                           
 11893                           ;main.c: 140: _delay((unsigned long)((100)*(10000000/4000.0)));
 11894  001B18  0E02               	movlw	2
 11895  001B1A  0100               	movlb	0	; () banked
 11896  001B1C  6F8F               	movwf	(??_isr+1)& (0+255),b
 11897  001B1E  0E45               	movlw	69
 11898  001B20  0100               	movlb	0	; () banked
 11899  001B22  6F8E               	movwf	??_isr& (0+255),b
 11900  001B24  0EA9               	movlw	169
 11901  001B26                     i2u938_47:
 11902  001B26  2EE8               	decfsz	wreg,f,c
 11903  001B28  D7FE               	bra	i2u938_47
 11904  001B2A  2F8E               	decfsz	??_isr& (0+255),f,b
 11905  001B2C  D7FC               	bra	i2u938_47
 11906  001B2E  2F8F               	decfsz	(??_isr+1)& (0+255),f,b
 11907  001B30  D7FA               	bra	i2u938_47
 11908  001B32  D000               	nop2	
 11909                           
 11910                           ;main.c: 141: lcdInst(0b10000000);
 11911  001B34  0E80               	movlw	128
 11912  001B36  ECD2  F02C         	call	i2_lcdInst
 11913                           
 11914                           ;main.c: 142: printf("running");
 11915  001B3A  0EF1               	movlw	low STR_1
 11916  001B3C  6E49               	movwf	i2printf@f,c
 11917  001B3E  0EFF               	movlw	high STR_1
 11918  001B40  6E4A               	movwf	i2printf@f+1,c
 11919  001B42  ECFE  F005         	call	i2_printf	;wreg free
 11920                           
 11921                           ;main.c: 143: bottle_count_disp = -1;
 11922  001B46  0101               	movlb	1	; () banked
 11923  001B48  6987               	setf	_bottle_count_disp& (0+255),b
 11924  001B4A  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 11925                           
 11926                           ; BSR set to: 1
 11927                           ;main.c: 144: curr_state = OPERATION;
 11928  001B4C  0E02               	movlw	2
 11929  001B4E  D0BA               	goto	L20
 11930  001B50                     i2l6819:
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;main.c: 147: bottle_count_disp += 1;
 11934  001B50  0101               	movlb	1	; () banked
 11935  001B52  4B87               	infsnz	_bottle_count_disp& (0+255),f,b
 11936  001B54  2B88               	incf	(_bottle_count_disp+1)& (0+255),f,b
 11937                           
 11938                           ; BSR set to: 1
 11939                           ;main.c: 148: curr_state = BOTTLECOUNT;
 11940  001B56  0E05               	movlw	5
 11941  001B58  0100               	movlb	0	; () banked
 11942  001B5A  6FE0               	movwf	_curr_state& (0+255),b
 11943  001B5C                     i2l6823:
 11944  001B5C  0E1F               	movlw	31
 11945  001B5E  1881               	xorwf	3969,w,c	;volatile
 11946  001B60  A4D8               	btfss	status,2,c
 11947  001B62  D0F1               	goto	i2l323
 11948  001B64  D7FB               	goto	i2l6823
 11949  001B66                     i2l6825:
 11950                           
 11951                           ;main.c: 152: operation_time = etime - stime;
 11952  001B66  C183  F08E         	movff	_stime,??_isr
 11953  001B6A  C184  F08F         	movff	_stime+1,??_isr+1
 11954  001B6E  0100               	movlb	0	; () banked
 11955  001B70  1F8E               	comf	??_isr& (0+255),f,b
 11956  001B72  1F8F               	comf	(??_isr+1)& (0+255),f,b
 11957  001B74  4B8E               	infsnz	??_isr& (0+255),f,b
 11958  001B76  2B8F               	incf	(??_isr+1)& (0+255),f,b
 11959  001B78  0101               	movlb	1	; () banked
 11960  001B7A  5171               	movf	_etime& (0+255),w,b
 11961  001B7C  0100               	movlb	0	; () banked
 11962  001B7E  258E               	addwf	??_isr& (0+255),w,b
 11963  001B80  0101               	movlb	1	; () banked
 11964  001B82  6F7D               	movwf	_operation_time& (0+255),b
 11965  001B84  0101               	movlb	1	; () banked
 11966  001B86  5172               	movf	(_etime+1)& (0+255),w,b
 11967  001B88  0100               	movlb	0	; () banked
 11968  001B8A  218F               	addwfc	(??_isr+1)& (0+255),w,b
 11969  001B8C  0101               	movlb	1	; () banked
 11970  001B8E  6F7E               	movwf	(_operation_time+1)& (0+255),b
 11971                           
 11972                           ; BSR set to: 1
 11973                           ;main.c: 153: bottle_count_disp = -1;
 11974  001B90  0101               	movlb	1	; () banked
 11975  001B92  6987               	setf	_bottle_count_disp& (0+255),b
 11976  001B94  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 11977                           
 11978                           ; BSR set to: 1
 11979                           ;main.c: 154: curr_state = BOTTLETIME;
 11980  001B96  0E06               	movlw	6
 11981  001B98  D095               	goto	L20
 11982  001B9A                     i2l329:
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;main.c: 157: bottle_count_disp = -1;
 11986  001B9A  0101               	movlb	1	; () banked
 11987  001B9C  6987               	setf	_bottle_count_disp& (0+255),b
 11988  001B9E  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 11989                           
 11990                           ; BSR set to: 1
 11991                           ;main.c: 158: curr_state = DATETIME;
 11992  001BA0  0E04               	movlw	4
 11993  001BA2  D090               	goto	L20
 11994  001BA4                     i2l330:
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;main.c: 161: LATAbits.LATA2 = 0;
 11998  001BA4  9489               	bcf	3977,2,c	;volatile
 11999                           
 12000                           ;main.c: 162: TMR0IE = 0;
 12001  001BA6  9AF2               	bcf	intcon,5,c	;volatile
 12002                           
 12003                           ;main.c: 163: TMR0ON = 0;
 12004  001BA8  9ED5               	bcf	4053,7,c	;volatile
 12005                           
 12006                           ;main.c: 164: TMR1ON = 0;
 12007  001BAA  90CD               	bcf	4045,0,c	;volatile
 12008                           
 12009                           ;main.c: 165: TMR3ON = 0;
 12010  001BAC  90B1               	bcf	4017,0,c	;volatile
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;main.c: 167: read_time();
 12014  001BAE  ECCF  F029         	call	_read_time	;wreg free
 12015                           
 12016                           ;main.c: 168: end_time[1] = time[1];
 12017  001BB2  C159  F0D9         	movff	_time+1,_end_time+1
 12018                           
 12019                           ;main.c: 169: end_time[0] = time[0];
 12020  001BB6  C158  F0D8         	movff	_time,_end_time
 12021                           
 12022                           ;main.c: 170: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12023  001BBA  C0DF  F075         	movff	_start_time+1,dec_to_hex@num
 12024  001BBE  6A76               	clrf	dec_to_hex@num+1,c
 12025  001BC0  EC7B  F020         	call	_dec_to_hex	;wreg free
 12026  001BC4  C075  F078         	movff	?_dec_to_hex,_isr$1521
 12027  001BC8  C076  F079         	movff	?_dec_to_hex+1,_isr$1521+1
 12028                           
 12029                           ;main.c: 170: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12030  001BCC  C078  F00F         	movff	_isr$1521,i2___wmul@multiplier
 12031  001BD0  C079  F010         	movff	_isr$1521+1,i2___wmul@multiplier+1
 12032  001BD4  0E00               	movlw	0
 12033  001BD6  6E12               	movwf	i2___wmul@multiplicand+1,c
 12034  001BD8  0E3C               	movlw	60
 12035  001BDA  6E11               	movwf	i2___wmul@multiplicand,c
 12036  001BDC  EC58  F02C         	call	i2___wmul	;wreg free
 12037  001BE0  C00F  F08E         	movff	?i2___wmul,??_isr
 12038  001BE4  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12039  001BE8  C0DE  F075         	movff	_start_time,dec_to_hex@num
 12040  001BEC  6A76               	clrf	dec_to_hex@num+1,c
 12041  001BEE  EC7B  F020         	call	_dec_to_hex	;wreg free
 12042  001BF2  5075               	movf	?_dec_to_hex,w,c
 12043  001BF4  0100               	movlb	0	; () banked
 12044  001BF6  258E               	addwf	??_isr& (0+255),w,b
 12045  001BF8  0101               	movlb	1	; () banked
 12046  001BFA  6F83               	movwf	_stime& (0+255),b
 12047  001BFC  5076               	movf	?_dec_to_hex+1,w,c
 12048  001BFE  0100               	movlb	0	; () banked
 12049  001C00  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12050  001C02  0101               	movlb	1	; () banked
 12051  001C04  6F84               	movwf	(_stime+1)& (0+255),b
 12052                           
 12053                           ; BSR set to: 1
 12054                           ;main.c: 171: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12055  001C06  C0D9  F075         	movff	_end_time+1,dec_to_hex@num
 12056  001C0A  6A76               	clrf	dec_to_hex@num+1,c
 12057  001C0C  EC7B  F020         	call	_dec_to_hex	;wreg free
 12058  001C10  C075  F078         	movff	?_dec_to_hex,_isr$1521
 12059  001C14  C076  F079         	movff	?_dec_to_hex+1,_isr$1521+1
 12060                           
 12061                           ;main.c: 171: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12062  001C18  C078  F00F         	movff	_isr$1521,i2___wmul@multiplier
 12063  001C1C  C079  F010         	movff	_isr$1521+1,i2___wmul@multiplier+1
 12064  001C20  0E00               	movlw	0
 12065  001C22  6E12               	movwf	i2___wmul@multiplicand+1,c
 12066  001C24  0E3C               	movlw	60
 12067  001C26  6E11               	movwf	i2___wmul@multiplicand,c
 12068  001C28  EC58  F02C         	call	i2___wmul	;wreg free
 12069  001C2C  C00F  F08E         	movff	?i2___wmul,??_isr
 12070  001C30  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12071  001C34  C0D8  F075         	movff	_end_time,dec_to_hex@num
 12072  001C38  6A76               	clrf	dec_to_hex@num+1,c
 12073  001C3A  EC7B  F020         	call	_dec_to_hex	;wreg free
 12074  001C3E  5075               	movf	?_dec_to_hex,w,c
 12075  001C40  0100               	movlb	0	; () banked
 12076  001C42  258E               	addwf	??_isr& (0+255),w,b
 12077  001C44  0101               	movlb	1	; () banked
 12078  001C46  6F71               	movwf	_etime& (0+255),b
 12079  001C48  5076               	movf	?_dec_to_hex+1,w,c
 12080  001C4A  0100               	movlb	0	; () banked
 12081  001C4C  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12082  001C4E  0101               	movlb	1	; () banked
 12083  001C50  6F72               	movwf	(_etime+1)& (0+255),b
 12084                           
 12085                           ; BSR set to: 1
 12086                           ;main.c: 172: lcdInst(0b00000001);
 12087  001C52  0E01               	movlw	1
 12088  001C54  ECD2  F02C         	call	i2_lcdInst
 12089                           
 12090                           ;main.c: 173: bottle_count_disp = -1;
 12091  001C58  0101               	movlb	1	; () banked
 12092  001C5A  6987               	setf	_bottle_count_disp& (0+255),b
 12093  001C5C  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 12094                           
 12095                           ; BSR set to: 1
 12096                           ;main.c: 174: curr_state = OPERATIONEND;
 12097  001C5E  0E03               	movlw	3
 12098  001C60  D031               	goto	L20
 12099  001C62                     i2l6853:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;main.c: 177: read_colorsensor();
 12103  001C62  EC54  F024         	call	i2_read_colorsensor	;wreg free
 12104                           
 12105                           ;main.c: 178: lcdInst(0b10000000);
 12106  001C66  0E80               	movlw	128
 12107  001C68  ECD2  F02C         	call	i2_lcdInst
 12108                           
 12109                           ;main.c: 179: printf("C%u R%u                ", color[0], color[1]);
 12110  001C6C  0EB4               	movlw	low STR_2
 12111  001C6E  6E49               	movwf	i2printf@f,c
 12112  001C70  0EFE               	movlw	high STR_2
 12113  001C72  6E4A               	movwf	i2printf@f+1,c
 12114  001C74  C0C2  F04B         	movff	_color,?i2_printf+2
 12115  001C78  C0C3  F04C         	movff	_color+1,?i2_printf+3
 12116  001C7C  C0C4  F04D         	movff	_color+2,?i2_printf+4
 12117  001C80  C0C5  F04E         	movff	_color+3,?i2_printf+5
 12118  001C84  ECFE  F005         	call	i2_printf	;wreg free
 12119                           
 12120                           ;main.c: 180: lcdInst(0b11000000);
 12121  001C88  0EC0               	movlw	192
 12122  001C8A  ECD2  F02C         	call	i2_lcdInst
 12123                           
 12124                           ;main.c: 181: printf("G%u B%u                ", color[2], color[3]);
 12125  001C8E  0E9C               	movlw	low STR_3
 12126  001C90  6E49               	movwf	i2printf@f,c
 12127  001C92  0EFE               	movlw	high STR_3
 12128  001C94  6E4A               	movwf	i2printf@f+1,c
 12129  001C96  C0C6  F04B         	movff	_color+4,?i2_printf+2
 12130  001C9A  C0C7  F04C         	movff	_color+5,?i2_printf+3
 12131  001C9E  C0C8  F04D         	movff	_color+6,?i2_printf+4
 12132  001CA2  C0C9  F04E         	movff	_color+7,?i2_printf+5
 12133  001CA6  ECFE  F005         	call	i2_printf	;wreg free
 12134                           
 12135                           ;main.c: 182: break;
 12136  001CAA  D04D               	goto	i2l323
 12137  001CAC                     i2l332:
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;main.c: 184: LATAbits.LATA2 = 0;
 12141  001CAC  9489               	bcf	3977,2,c	;volatile
 12142                           
 12143                           ;main.c: 185: (INTCONbits.GIE = 0);
 12144  001CAE  9EF2               	bcf	intcon,7,c	;volatile
 12145                           
 12146                           ;main.c: 186: TMR0ON = 0;
 12147  001CB0  9ED5               	bcf	4053,7,c	;volatile
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;main.c: 187: lcdInst(0b00000001);
 12151  001CB2  0E01               	movlw	1
 12152  001CB4  ECD2  F02C         	call	i2_lcdInst
 12153                           
 12154                           ;main.c: 188: curr_state = EMERGENCYSTOP;
 12155  001CB8  0E01               	movlw	1
 12156  001CBA  D004               	goto	L20
 12157  001CBC                     i2l333:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;main.c: 191: bottle_count_disp = -1;
 12161  001CBC  0101               	movlb	1	; () banked
 12162  001CBE  6987               	setf	_bottle_count_disp& (0+255),b
 12163  001CC0  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 12164                           
 12165                           ; BSR set to: 1
 12166                           ;main.c: 192: curr_state = STANDBY;
 12167  001CC2  0E00               	movlw	0
 12168  001CC4                     L20:
 12169  001CC4  0100               	movlb	0	; () banked
 12170  001CC6  6FE0               	movwf	_curr_state& (0+255),b
 12171                           
 12172                           ;main.c: 194: break;
 12173  001CC8  D03E               	goto	i2l323
 12174  001CCA                     i2l6865:
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;main.c: 197: lcdInst(0b10000000);
 12178  001CCA  0E80               	movlw	128
 12179  001CCC  ECD2  F02C         	call	i2_lcdInst
 12180                           
 12181                           ;main.c: 198: printf("%d", flag_picbug);
 12182  001CD0  0EF9               	movlw	low STR_4
 12183  001CD2  6E49               	movwf	i2printf@f,c
 12184  001CD4  0EFF               	movlw	high STR_4
 12185  001CD6  6E4A               	movwf	i2printf@f+1,c
 12186  001CD8  C0DA  F04B         	movff	_flag_picbug,?i2_printf+2
 12187  001CDC  C0DB  F04C         	movff	_flag_picbug+1,?i2_printf+3
 12188  001CE0  ECFE  F005         	call	i2_printf	;wreg free
 12189                           
 12190                           ;main.c: 199: break;
 12191  001CE4  D030               	goto	i2l323
 12192  001CE6                     i2l6869:
 12193                           
 12194                           ;main.c: 201: servo0_timer = 0;
 12195  001CE6  0E00               	movlw	0
 12196  001CE8  0101               	movlb	1	; () banked
 12197  001CEA  6F80               	movwf	(_servo0_timer+1)& (0+255),b
 12198  001CEC  0E00               	movlw	0
 12199  001CEE  6F7F               	movwf	_servo0_timer& (0+255),b
 12200                           
 12201                           ; BSR set to: 1
 12202                           ;main.c: 203: }
 12203                           
 12204                           ;main.c: 202: break;
 12205  001CF0  D02A               	goto	i2l323
 12206  001CF2                     i2l6873:
 12207  001CF2  3881               	swapf	3969,w,c	;volatile
 12208  001CF4  0B0F               	andlw	15
 12209  001CF6  0100               	movlb	0	; () banked
 12210  001CF8  6F8E               	movwf	??_isr& (0+255),b
 12211  001CFA  6B8F               	clrf	(??_isr+1)& (0+255),b
 12212                           
 12213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12214                           ; Switch size 1, requested type "space"
 12215                           ; Number of cases is 1, Range of values is 0 to 0
 12216                           ; switch strategies available:
 12217                           ; Name         Instructions Cycles
 12218                           ; simple_byte            4     3 (average)
 12219                           ;	Chosen strategy is simple_byte
 12220  001CFC  0100               	movlb	0	; () banked
 12221  001CFE  518F               	movf	(??_isr+1)& (0+255),w,b
 12222  001D00  0A00               	xorlw	0	; case 0
 12223  001D02  A4D8               	btfss	status,2,c
 12224  001D04  D020               	goto	i2l323
 12225                           
 12226                           ; BSR set to: 0
 12227                           ; Switch size 1, requested type "space"
 12228                           ; Number of cases is 10, Range of values is 0 to 14
 12229                           ; switch strategies available:
 12230                           ; Name         Instructions Cycles
 12231                           ; simple_byte           31    16 (average)
 12232                           ;	Chosen strategy is simple_byte
 12233  001D06  0100               	movlb	0	; () banked
 12234  001D08  518E               	movf	??_isr& (0+255),w,b
 12235  001D0A  0A00               	xorlw	0	; case 0
 12236  001D0C  B4D8               	btfsc	status,2,c
 12237  001D0E  D6DC               	goto	i2l320
 12238  001D10  0A01               	xorlw	1	; case 1
 12239  001D12  B4D8               	btfsc	status,2,c
 12240  001D14  D71D               	goto	i2l6819
 12241  001D16  0A03               	xorlw	3	; case 2
 12242  001D18  B4D8               	btfsc	status,2,c
 12243  001D1A  D725               	goto	i2l6825
 12244  001D1C  0A01               	xorlw	1	; case 3
 12245  001D1E  B4D8               	btfsc	status,2,c
 12246  001D20  D73C               	goto	i2l329
 12247  001D22  0A07               	xorlw	7	; case 4
 12248  001D24  B4D8               	btfsc	status,2,c
 12249  001D26  D73E               	goto	i2l330
 12250  001D28  0A01               	xorlw	1	; case 5
 12251  001D2A  B4D8               	btfsc	status,2,c
 12252  001D2C  D79A               	goto	i2l6853
 12253  001D2E  0A02               	xorlw	2	; case 7
 12254  001D30  B4D8               	btfsc	status,2,c
 12255  001D32  D7CB               	goto	i2l6865
 12256  001D34  0A0C               	xorlw	12	; case 11
 12257  001D36  B4D8               	btfsc	status,2,c
 12258  001D38  D7D6               	goto	i2l6869
 12259  001D3A  0A07               	xorlw	7	; case 12
 12260  001D3C  B4D8               	btfsc	status,2,c
 12261  001D3E  D7B6               	goto	i2l332
 12262  001D40  0A02               	xorlw	2	; case 14
 12263  001D42  B4D8               	btfsc	status,2,c
 12264  001D44  D7BB               	goto	i2l333
 12265  001D46                     i2l323:
 12266                           
 12267                           ;main.c: 204: INT1IF = 0;
 12268  001D46  90F0               	bcf	intcon3,0,c	;volatile
 12269                           
 12270                           ;main.c: 205: }
 12271  001D48  D0B8               	goto	i2l356
 12272  001D4A                     i2l318:
 12273                           
 12274                           ;main.c: 206: else if (TMR1IF){
 12275  001D4A  A09E               	btfss	3998,0,c	;volatile
 12276  001D4C  D01D               	goto	i2l337
 12277                           
 12278                           ;main.c: 207: if(servo0_flag){
 12279  001D4E  507E               	movf	_servo0_flag,w,c
 12280  001D50  B4D8               	btfsc	status,2,c
 12281  001D52  D007               	goto	i2l338
 12282                           
 12283                           ;main.c: 208: LATCbits.LATC0 = 0;
 12284  001D54  908B               	bcf	3979,0,c	;volatile
 12285                           
 12286                           ;main.c: 209: TMR1 = 16517;
 12287  001D56  0E40               	movlw	64
 12288  001D58  6ECF               	movwf	4047,c	;volatile
 12289  001D5A  0E85               	movlw	133
 12290  001D5C  6ECE               	movwf	4046,c	;volatile
 12291                           
 12292                           ;main.c: 210: servo0_flag = 0;
 12293  001D5E  0E00               	movlw	0
 12294  001D60  D010               	goto	L21
 12295  001D62                     i2l338:
 12296                           
 12297                           ;main.c: 212: else{
 12298                           ;main.c: 213: LATCbits.LATC0 = 1;
 12299  001D62  808B               	bsf	3979,0,c	;volatile
 12300                           
 12301                           ;main.c: 214: if(servo0_timer) TMR1 = 63000;
 12302  001D64  0101               	movlb	1	; () banked
 12303  001D66  517F               	movf	_servo0_timer& (0+255),w,b
 12304  001D68  0101               	movlb	1	; () banked
 12305  001D6A  1180               	iorwf	(_servo0_timer+1)& (0+255),w,b
 12306  001D6C  B4D8               	btfsc	status,2,c
 12307  001D6E  D004               	goto	i2l6885
 12308                           
 12309                           ; BSR set to: 1
 12310  001D70  0EF6               	movlw	246
 12311  001D72  6ECF               	movwf	4047,c	;volatile
 12312  001D74  0E18               	movlw	24
 12313  001D76  D003               	goto	L22
 12314  001D78                     i2l6885:
 12315                           
 12316                           ; BSR set to: 1
 12317                           ;main.c: 215: else TMR1 = 62000;
 12318  001D78  0EF2               	movlw	242
 12319  001D7A  6ECF               	movwf	4047,c	;volatile
 12320  001D7C  0E30               	movlw	48
 12321  001D7E                     L22:
 12322  001D7E  6ECE               	movwf	4046,c	;volatile
 12323                           
 12324                           ; BSR set to: 1
 12325                           ;main.c: 216: servo0_flag = 1;
 12326  001D80  0E01               	movlw	1
 12327  001D82                     L21:
 12328  001D82  6E7E               	movwf	_servo0_flag,c
 12329                           
 12330                           ;main.c: 217: }
 12331                           ;main.c: 218: TMR1IF = 0;
 12332                           
 12333                           ; BSR set to: 1
 12334  001D84  909E               	bcf	3998,0,c	;volatile
 12335                           
 12336                           ;main.c: 219: }
 12337  001D86  D099               	goto	i2l356
 12338  001D88                     i2l337:
 12339                           
 12340                           ;main.c: 220: else if (TMR3IF){
 12341  001D88  A2A1               	btfss	4001,1,c	;volatile
 12342  001D8A  D01F               	goto	i2l343
 12343                           
 12344                           ;main.c: 221: if(servo1_flag){
 12345  001D8C  0100               	movlb	0	; () banked
 12346  001D8E  51E1               	movf	_servo1_flag& (0+255),w,b
 12347  001D90  B4D8               	btfsc	status,2,c
 12348  001D92  D007               	goto	i2l344
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;main.c: 222: LATCbits.LATC1 = 0;
 12352  001D94  928B               	bcf	3979,1,c	;volatile
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;main.c: 223: TMR3 = 16517;
 12356  001D96  0E40               	movlw	64
 12357  001D98  6EB3               	movwf	4019,c	;volatile
 12358  001D9A  0E85               	movlw	133
 12359  001D9C  6EB2               	movwf	4018,c	;volatile
 12360                           
 12361                           ;main.c: 224: servo1_flag = 0;
 12362  001D9E  0E00               	movlw	0
 12363  001DA0  D010               	goto	L23
 12364  001DA2                     i2l344:
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;main.c: 226: else{
 12368                           ;main.c: 227: LATCbits.LATC1 = 1;
 12369  001DA2  828B               	bsf	3979,1,c	;volatile
 12370                           
 12371                           ; BSR set to: 0
 12372                           ;main.c: 228: if(servo1_timer) TMR3 = 62000;
 12373  001DA4  0101               	movlb	1	; () banked
 12374  001DA6  5181               	movf	_servo1_timer& (0+255),w,b
 12375  001DA8  0101               	movlb	1	; () banked
 12376  001DAA  1182               	iorwf	(_servo1_timer+1)& (0+255),w,b
 12377  001DAC  B4D8               	btfsc	status,2,c
 12378  001DAE  D004               	goto	i2l6899
 12379                           
 12380                           ; BSR set to: 1
 12381  001DB0  0EF2               	movlw	242
 12382  001DB2  6EB3               	movwf	4019,c	;volatile
 12383  001DB4  0E30               	movlw	48
 12384  001DB6  D003               	goto	L24
 12385  001DB8                     i2l6899:
 12386                           
 12387                           ; BSR set to: 1
 12388                           ;main.c: 229: else TMR3 = 63000;
 12389  001DB8  0EF6               	movlw	246
 12390  001DBA  6EB3               	movwf	4019,c	;volatile
 12391  001DBC  0E18               	movlw	24
 12392  001DBE                     L24:
 12393  001DBE  6EB2               	movwf	4018,c	;volatile
 12394                           
 12395                           ; BSR set to: 1
 12396                           ;main.c: 230: servo1_flag = 1;
 12397  001DC0  0E01               	movlw	1
 12398  001DC2                     L23:
 12399  001DC2  0100               	movlb	0	; () banked
 12400  001DC4  6FE1               	movwf	_servo1_flag& (0+255),b
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;main.c: 231: }
 12404                           ;main.c: 232: TMR3IF = 0;
 12405                           
 12406                           ; BSR set to: 0
 12407  001DC6  92A1               	bcf	4001,1,c	;volatile
 12408                           
 12409                           ;main.c: 233: }
 12410  001DC8  D078               	goto	i2l356
 12411  001DCA                     i2l343:
 12412                           
 12413                           ;main.c: 234: else if (TMR0IF){
 12414  001DCA  A4F2               	btfss	intcon,2,c	;volatile
 12415  001DCC  D05C               	goto	i2l6925
 12416                           
 12417                           ;main.c: 235: LATAbits.LATA2 = 0;
 12418  001DCE  9489               	bcf	3977,2,c	;volatile
 12419                           
 12420                           ;main.c: 236: TMR0ON = 0;
 12421  001DD0  9ED5               	bcf	4053,7,c	;volatile
 12422                           
 12423                           ;main.c: 237: read_time();
 12424  001DD2  ECCF  F029         	call	_read_time	;wreg free
 12425                           
 12426                           ;main.c: 238: end_time[1] = time[1];
 12427  001DD6  C159  F0D9         	movff	_time+1,_end_time+1
 12428                           
 12429                           ;main.c: 239: end_time[0] = time[0];
 12430  001DDA  C158  F0D8         	movff	_time,_end_time
 12431                           
 12432                           ;main.c: 240: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12433  001DDE  C0DF  F075         	movff	_start_time+1,dec_to_hex@num
 12434  001DE2  6A76               	clrf	dec_to_hex@num+1,c
 12435  001DE4  EC7B  F020         	call	_dec_to_hex	;wreg free
 12436  001DE8  C075  F078         	movff	?_dec_to_hex,_isr$1521
 12437  001DEC  C076  F079         	movff	?_dec_to_hex+1,_isr$1521+1
 12438                           
 12439                           ;main.c: 240: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12440  001DF0  C078  F00F         	movff	_isr$1521,i2___wmul@multiplier
 12441  001DF4  C079  F010         	movff	_isr$1521+1,i2___wmul@multiplier+1
 12442  001DF8  0E00               	movlw	0
 12443  001DFA  6E12               	movwf	i2___wmul@multiplicand+1,c
 12444  001DFC  0E3C               	movlw	60
 12445  001DFE  6E11               	movwf	i2___wmul@multiplicand,c
 12446  001E00  EC58  F02C         	call	i2___wmul	;wreg free
 12447  001E04  C00F  F08E         	movff	?i2___wmul,??_isr
 12448  001E08  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12449  001E0C  C0DE  F075         	movff	_start_time,dec_to_hex@num
 12450  001E10  6A76               	clrf	dec_to_hex@num+1,c
 12451  001E12  EC7B  F020         	call	_dec_to_hex	;wreg free
 12452  001E16  5075               	movf	?_dec_to_hex,w,c
 12453  001E18  0100               	movlb	0	; () banked
 12454  001E1A  258E               	addwf	??_isr& (0+255),w,b
 12455  001E1C  0101               	movlb	1	; () banked
 12456  001E1E  6F83               	movwf	_stime& (0+255),b
 12457  001E20  5076               	movf	?_dec_to_hex+1,w,c
 12458  001E22  0100               	movlb	0	; () banked
 12459  001E24  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12460  001E26  0101               	movlb	1	; () banked
 12461  001E28  6F84               	movwf	(_stime+1)& (0+255),b
 12462                           
 12463                           ; BSR set to: 1
 12464                           ;main.c: 241: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12465  001E2A  C0D9  F075         	movff	_end_time+1,dec_to_hex@num
 12466  001E2E  6A76               	clrf	dec_to_hex@num+1,c
 12467  001E30  EC7B  F020         	call	_dec_to_hex	;wreg free
 12468  001E34  C075  F078         	movff	?_dec_to_hex,_isr$1521
 12469  001E38  C076  F079         	movff	?_dec_to_hex+1,_isr$1521+1
 12470                           
 12471                           ;main.c: 241: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12472  001E3C  C078  F00F         	movff	_isr$1521,i2___wmul@multiplier
 12473  001E40  C079  F010         	movff	_isr$1521+1,i2___wmul@multiplier+1
 12474  001E44  0E00               	movlw	0
 12475  001E46  6E12               	movwf	i2___wmul@multiplicand+1,c
 12476  001E48  0E3C               	movlw	60
 12477  001E4A  6E11               	movwf	i2___wmul@multiplicand,c
 12478  001E4C  EC58  F02C         	call	i2___wmul	;wreg free
 12479  001E50  C00F  F08E         	movff	?i2___wmul,??_isr
 12480  001E54  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12481  001E58  C0D8  F075         	movff	_end_time,dec_to_hex@num
 12482  001E5C  6A76               	clrf	dec_to_hex@num+1,c
 12483  001E5E  EC7B  F020         	call	_dec_to_hex	;wreg free
 12484  001E62  5075               	movf	?_dec_to_hex,w,c
 12485  001E64  0100               	movlb	0	; () banked
 12486  001E66  258E               	addwf	??_isr& (0+255),w,b
 12487  001E68  0101               	movlb	1	; () banked
 12488  001E6A  6F71               	movwf	_etime& (0+255),b
 12489  001E6C  5076               	movf	?_dec_to_hex+1,w,c
 12490  001E6E  0100               	movlb	0	; () banked
 12491  001E70  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12492  001E72  0101               	movlb	1	; () banked
 12493  001E74  6F72               	movwf	(_etime+1)& (0+255),b
 12494                           
 12495                           ; BSR set to: 1
 12496                           ;main.c: 242: curr_state = OPERATIONEND;
 12497  001E76  0E03               	movlw	3
 12498  001E78  0100               	movlb	0	; () banked
 12499  001E7A  6FE0               	movwf	_curr_state& (0+255),b
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;main.c: 243: bottle_count_disp = -1;
 12503  001E7C  0101               	movlb	1	; () banked
 12504  001E7E  6987               	setf	_bottle_count_disp& (0+255),b
 12505  001E80  6988               	setf	(_bottle_count_disp+1)& (0+255),b
 12506                           
 12507                           ; BSR set to: 1
 12508                           ;main.c: 244: TMR0IF = 0;
 12509  001E82  94F2               	bcf	intcon,2,c	;volatile
 12510                           
 12511                           ;main.c: 245: }
 12512  001E84  D01A               	goto	i2l356
 12513  001E86                     i2l6925:
 12514                           
 12515                           ;main.c: 248: lcdInst(0b10000000);
 12516  001E86  0E80               	movlw	128
 12517  001E88  ECD2  F02C         	call	i2_lcdInst
 12518                           
 12519                           ;main.c: 249: printf("ERR: BAD ISR");
 12520  001E8C  0EDB               	movlw	low STR_5
 12521  001E8E  6E49               	movwf	i2printf@f,c
 12522  001E90  0EFF               	movlw	high STR_5
 12523  001E92  6E4A               	movwf	i2printf@f+1,c
 12524  001E94  ECFE  F005         	call	i2_printf	;wreg free
 12525                           
 12526                           ;main.c: 250: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
 12527  001E98  0E00               	movlw	0
 12528  001E9A  6E77               	movwf	isr@i,c
 12529  001E9C                     i2l6931:
 12530  001E9C  0E63               	movlw	99
 12531  001E9E  6477               	cpfsgt	isr@i,c
 12532  001EA0  D001               	goto	i2l6935
 12533  001EA2  D7F1               	goto	i2l6925
 12534  001EA4                     i2l6935:
 12535  001EA4  0E21               	movlw	33
 12536  001EA6  0100               	movlb	0	; () banked
 12537  001EA8  6F8E               	movwf	??_isr& (0+255),b
 12538  001EAA  0E76               	movlw	118
 12539  001EAC                     i2u939_47:
 12540  001EAC  2EE8               	decfsz	wreg,f,c
 12541  001EAE  D7FE               	bra	i2u939_47
 12542  001EB0  2F8E               	decfsz	??_isr& (0+255),f,b
 12543  001EB2  D7FC               	bra	i2u939_47
 12544  001EB4  F000               	nop	
 12545  001EB6  2A77               	incf	isr@i,f,c
 12546  001EB8  D7F1               	goto	i2l6931
 12547  001EBA                     i2l356:
 12548  001EBA  C09D  FFF5         	movff	??_isr+15,tablat
 12549  001EBE  C09C  FFF8         	movff	??_isr+14,tblptru
 12550  001EC2  C09B  FFF7         	movff	??_isr+13,tblptrh
 12551  001EC6  C09A  FFF6         	movff	??_isr+12,tblptrl
 12552  001ECA  C099  FFF4         	movff	??_isr+11,prodh
 12553  001ECE  C098  FFF3         	movff	??_isr+10,prodl
 12554  001ED2  C097  FFDA         	movff	??_isr+9,fsr2h
 12555  001ED6  C096  FFD9         	movff	??_isr+8,fsr2l
 12556  001EDA  C095  FFE2         	movff	??_isr+7,fsr1h
 12557  001EDE  C094  FFE1         	movff	??_isr+6,fsr1l
 12558  001EE2  C093  FFEA         	movff	??_isr+5,fsr0h
 12559  001EE6  C092  FFE9         	movff	??_isr+4,fsr0l
 12560  001EEA  C091  FFFB         	movff	??_isr+3,pclatu
 12561  001EEE  C090  FFFA         	movff	??_isr+2,pclath
 12562  001EF2  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12563  001EF4  0011               	retfie		f
 12564  001EF6                     __end_of_isr:
 12565                           	opt stack 0
 12566                           pclatu	equ	0xFFB
 12567                           pclath	equ	0xFFA
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           intcon2	equ	0xFF1
 12576                           intcon3	equ	0xFF0
 12577                           postinc0	equ	0xFEE
 12578                           fsr0h	equ	0xFEA
 12579                           fsr0l	equ	0xFE9
 12580                           wreg	equ	0xFE8
 12581                           fsr1h	equ	0xFE2
 12582                           fsr1l	equ	0xFE1
 12583                           indf2	equ	0xFDF
 12584                           postinc2	equ	0xFDE
 12585                           postdec2	equ	0xFDD
 12586                           fsr2h	equ	0xFDA
 12587                           fsr2l	equ	0xFD9
 12588                           status	equ	0xFD8
 12589                           
 12590 ;; *************** function i2_read_colorsensor *****************
 12591 ;; Defined at:
 12592 ;;		line 500 in file "main.c"
 12593 ;; Parameters:    Size  Location     Type
 12594 ;;		None
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;		None
 12597 ;; Return value:  Size  Location     Type
 12598 ;;                  1    wreg      void 
 12599 ;; Registers used:
 12600 ;;		wreg, status,2, status,0, cstack
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;Total ram usage:        2 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; Hardware stack levels required when called:    2
 12613 ;; This function calls:
 12614 ;;		i2_I2C_Master_Read
 12615 ;;		i2_I2C_Master_Start
 12616 ;;		i2_I2C_Master_Stop
 12617 ;;		i2_I2C_Master_Write
 12618 ;; This function is called by:
 12619 ;;		_isr
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	text42
 12624  0048A8                     __ptext42:
 12625                           	opt stack 0
 12626  0048A8                     i2_read_colorsensor:
 12627                           	opt stack 22
 12628                           
 12629                           ;main.c: 519: I2C_Master_Start();
 12630                           
 12631                           ;incstack = 0
 12632  0048A8  ECEE  F02C         	call	i2_I2C_Master_Start	;wreg free
 12633                           
 12634                           ;main.c: 520: I2C_Master_Write(0b01010011);
 12635  0048AC  0E00               	movlw	0
 12636  0048AE  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12637  0048B0  0E53               	movlw	83
 12638  0048B2  6E02               	movwf	i2I2C_Master_Write@d,c
 12639  0048B4  ECDD  F02C         	call	i2_I2C_Master_Write	;wreg free
 12640                           
 12641                           ;main.c: 521: color_low[0] = I2C_Master_Read(1);
 12642  0048B8  0E01               	movlw	1
 12643  0048BA  EC45  F02C         	call	i2_I2C_Master_Read
 12644  0048BE  0100               	movlb	0	; () banked
 12645  0048C0  6FCE               	movwf	_color_low& (0+255),b
 12646                           
 12647                           ;main.c: 522: color_high[0] = I2C_Master_Read(1);
 12648  0048C2  0E01               	movlw	1
 12649  0048C4  EC45  F02C         	call	i2_I2C_Master_Read
 12650  0048C8  0100               	movlb	0	; () banked
 12651  0048CA  6FCA               	movwf	_color_high& (0+255),b
 12652                           
 12653                           ;main.c: 523: color_low[1] = I2C_Master_Read(1);
 12654  0048CC  0E01               	movlw	1
 12655  0048CE  EC45  F02C         	call	i2_I2C_Master_Read
 12656  0048D2  0100               	movlb	0	; () banked
 12657  0048D4  6FCF               	movwf	(_color_low+1)& (0+255),b
 12658                           
 12659                           ;main.c: 524: color_high[1] = I2C_Master_Read(1);
 12660  0048D6  0E01               	movlw	1
 12661  0048D8  EC45  F02C         	call	i2_I2C_Master_Read
 12662  0048DC  0100               	movlb	0	; () banked
 12663  0048DE  6FCB               	movwf	(_color_high+1)& (0+255),b
 12664                           
 12665                           ;main.c: 525: color_low[2] = I2C_Master_Read(1);
 12666  0048E0  0E01               	movlw	1
 12667  0048E2  EC45  F02C         	call	i2_I2C_Master_Read
 12668  0048E6  0100               	movlb	0	; () banked
 12669  0048E8  6FD0               	movwf	(_color_low+2)& (0+255),b
 12670                           
 12671                           ;main.c: 526: color_high[2] = I2C_Master_Read(1);
 12672  0048EA  0E01               	movlw	1
 12673  0048EC  EC45  F02C         	call	i2_I2C_Master_Read
 12674  0048F0  0100               	movlb	0	; () banked
 12675  0048F2  6FCC               	movwf	(_color_high+2)& (0+255),b
 12676                           
 12677                           ;main.c: 527: color_low[3] = I2C_Master_Read(1);
 12678  0048F4  0E01               	movlw	1
 12679  0048F6  EC45  F02C         	call	i2_I2C_Master_Read
 12680  0048FA  0100               	movlb	0	; () banked
 12681  0048FC  6FD1               	movwf	(_color_low+3)& (0+255),b
 12682                           
 12683                           ;main.c: 528: color_high[3] = I2C_Master_Read(0);
 12684  0048FE  0E00               	movlw	0
 12685  004900  EC45  F02C         	call	i2_I2C_Master_Read
 12686  004904  0100               	movlb	0	; () banked
 12687  004906  6FCD               	movwf	(_color_high+3)& (0+255),b
 12688                           
 12689                           ;main.c: 529: I2C_Master_Stop();
 12690  004908  ECEA  F02C         	call	i2_I2C_Master_Stop	;wreg free
 12691                           
 12692                           ;main.c: 530: color[0] = (color_high[0] << 8)|(color_low[0]);
 12693  00490C  0100               	movlb	0	; () banked
 12694  00490E  51CE               	movf	_color_low& (0+255),w,b
 12695  004910  C0CA  F004         	movff	_color_high,??i2_read_colorsensor
 12696  004914  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12697  004916  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12698  00491A  6A04               	clrf	??i2_read_colorsensor,c
 12699  00491C  1004               	iorwf	??i2_read_colorsensor,w,c
 12700  00491E  0100               	movlb	0	; () banked
 12701  004920  6FC2               	movwf	_color& (0+255),b
 12702  004922  5005               	movf	??i2_read_colorsensor+1,w,c
 12703  004924  0100               	movlb	0	; () banked
 12704  004926  6FC3               	movwf	(_color+1)& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;main.c: 531: color[1] = (color_high[1] << 8)|(color_low[1]);
 12708  004928  0100               	movlb	0	; () banked
 12709  00492A  51CF               	movf	(_color_low+1)& (0+255),w,b
 12710  00492C  C0CB  F004         	movff	_color_high+1,??i2_read_colorsensor
 12711  004930  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12712  004932  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12713  004936  6A04               	clrf	??i2_read_colorsensor,c
 12714  004938  1004               	iorwf	??i2_read_colorsensor,w,c
 12715  00493A  0100               	movlb	0	; () banked
 12716  00493C  6FC4               	movwf	(_color+2)& (0+255),b
 12717  00493E  5005               	movf	??i2_read_colorsensor+1,w,c
 12718  004940  0100               	movlb	0	; () banked
 12719  004942  6FC5               	movwf	(_color+3)& (0+255),b
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;main.c: 532: color[2] = (color_high[2] << 8)|(color_low[2]);
 12723  004944  0100               	movlb	0	; () banked
 12724  004946  51D0               	movf	(_color_low+2)& (0+255),w,b
 12725  004948  C0CC  F004         	movff	_color_high+2,??i2_read_colorsensor
 12726  00494C  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12727  00494E  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12728  004952  6A04               	clrf	??i2_read_colorsensor,c
 12729  004954  1004               	iorwf	??i2_read_colorsensor,w,c
 12730  004956  0100               	movlb	0	; () banked
 12731  004958  6FC6               	movwf	(_color+4)& (0+255),b
 12732  00495A  5005               	movf	??i2_read_colorsensor+1,w,c
 12733  00495C  0100               	movlb	0	; () banked
 12734  00495E  6FC7               	movwf	(_color+5)& (0+255),b
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;main.c: 533: color[3] = (color_high[3] << 8)|(color_low[3]);
 12738  004960  0100               	movlb	0	; () banked
 12739  004962  51D1               	movf	(_color_low+3)& (0+255),w,b
 12740  004964  C0CD  F004         	movff	_color_high+3,??i2_read_colorsensor
 12741  004968  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12742  00496A  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12743  00496E  6A04               	clrf	??i2_read_colorsensor,c
 12744  004970  1004               	iorwf	??i2_read_colorsensor,w,c
 12745  004972  0100               	movlb	0	; () banked
 12746  004974  6FC8               	movwf	(_color+6)& (0+255),b
 12747  004976  5005               	movf	??i2_read_colorsensor+1,w,c
 12748  004978  0100               	movlb	0	; () banked
 12749  00497A  6FC9               	movwf	(_color+7)& (0+255),b
 12750  00497C  0012               	return	
 12751  00497E                     __end_ofi2_read_colorsensor:
 12752                           	opt stack 0
 12753                           pclatu	equ	0xFFB
 12754                           pclath	equ	0xFFA
 12755                           tblptru	equ	0xFF8
 12756                           tblptrh	equ	0xFF7
 12757                           tblptrl	equ	0xFF6
 12758                           tablat	equ	0xFF5
 12759                           prodh	equ	0xFF4
 12760                           prodl	equ	0xFF3
 12761                           intcon	equ	0xFF2
 12762                           intcon2	equ	0xFF1
 12763                           intcon3	equ	0xFF0
 12764                           postinc0	equ	0xFEE
 12765                           fsr0h	equ	0xFEA
 12766                           fsr0l	equ	0xFE9
 12767                           wreg	equ	0xFE8
 12768                           fsr1h	equ	0xFE2
 12769                           fsr1l	equ	0xFE1
 12770                           indf2	equ	0xFDF
 12771                           postinc2	equ	0xFDE
 12772                           postdec2	equ	0xFDD
 12773                           fsr2h	equ	0xFDA
 12774                           fsr2l	equ	0xFD9
 12775                           status	equ	0xFD8
 12776                           
 12777 ;; *************** function i2_printf *****************
 12778 ;; Defined at:
 12779 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12780 ;; Parameters:    Size  Location     Type
 12781 ;;  f               2   72[COMRAM] PTR const unsigned char 
 12782 ;;		 -> STR_21(15), STR_20(16), STR_19(3), STR_18(18), 
 12783 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
 12784 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
 12785 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(18), 
 12786 ;;		 -> STR_5(13), STR_4(3), STR_3(24), STR_2(24), 
 12787 ;;		 -> STR_1(8), 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  printf          4  100[COMRAM] unsigned long 
 12790 ;;  printf          4   92[COMRAM] struct .
 12791 ;;  printf          3  106[COMRAM] struct .
 12792 ;;  printf          3    0        PTR const unsigned char 
 12793 ;;  printf          2  104[COMRAM] unsigned short 
 12794 ;;  printf          2   98[COMRAM] int 
 12795 ;;  printf          2   96[COMRAM] int 
 12796 ;;  printf          2   90[COMRAM] int 
 12797 ;;  printf          2   88[COMRAM] PTR void [1]
 12798 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12799 ;;  printf          2    0        unsigned int 
 12800 ;;  printf          1  109[COMRAM] char 
 12801 ;;  printf          1   87[COMRAM] unsigned char 
 12802 ;;  printf          1    0        unsigned char 
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  2   72[COMRAM] int 
 12805 ;; Registers used:
 12806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12812 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;Total ram usage:       38 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    3
 12819 ;; This function calls:
 12820 ;;		i2___awdiv
 12821 ;;		i2___ftadd
 12822 ;;		i2___ftge
 12823 ;;		i2___ftmul
 12824 ;;		i2___ftneg
 12825 ;;		i2___ftsub
 12826 ;;		i2___fttol
 12827 ;;		i2___lldiv
 12828 ;;		i2___llmod
 12829 ;;		i2___lltoft
 12830 ;;		i2___wmul
 12831 ;;		i2__div_to_l_
 12832 ;;		i2__tdiv_to_l_
 12833 ;;		i2_fround
 12834 ;;		i2_isdigit
 12835 ;;		i2_putch
 12836 ;;		i2_scale
 12837 ;; This function is called by:
 12838 ;;		_isr
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text43
 12843  000BFC                     __ptext43:
 12844                           	opt stack 0
 12845  000BFC                     i2_printf:
 12846                           	opt stack 21
 12847                           
 12848                           ;doprnt.c: 466: va_list ap;
 12849                           ;doprnt.c: 499: signed char c;
 12850                           ;doprnt.c: 501: int width;
 12851                           ;doprnt.c: 504: int prec;
 12852                           ;doprnt.c: 508: unsigned short flag;
 12853                           ;doprnt.c: 515: char d;
 12854                           ;doprnt.c: 516: double fval;
 12855                           ;doprnt.c: 517: int exp;
 12856                           ;doprnt.c: 523: union {
 12857                           ;doprnt.c: 524: unsigned long vd;
 12858                           ;doprnt.c: 525: double integ;
 12859                           ;doprnt.c: 526: } tmpval;
 12860                           ;doprnt.c: 528: unsigned long val;
 12861                           ;doprnt.c: 529: unsigned len;
 12862                           ;doprnt.c: 530: const char * cp;
 12863                           ;doprnt.c: 533: *ap = __va_start();
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;incstack = 0
 12867  000BFC  0E4B               	movlw	low (?i2_printf+2)
 12868  000BFE  6E59               	movwf	i2printf@ap,c
 12869  000C00  0E00               	movlw	high (?i2_printf+2)
 12870  000C02  6E5A               	movwf	i2printf@ap+1,c
 12871                           
 12872                           ;doprnt.c: 536: while(c = *f++) {
 12873  000C04  EFDF  F00A         	goto	i2l6669
 12874  000C08                     i2l6379:
 12875                           
 12876                           ;doprnt.c: 538: if(c != '%')
 12877  000C08  0E25               	movlw	37
 12878  000C0A  186E               	xorwf	i2printf@c,w,c
 12879  000C0C  B4D8               	btfsc	status,2,c
 12880  000C0E  D005               	goto	i2l6383
 12881                           
 12882                           ;doprnt.c: 540: {
 12883                           ;doprnt.c: 541: (putch(c) );
 12884  000C10  506E               	movf	i2printf@c,w,c
 12885  000C12  ECCC  F02C         	call	i2_putch
 12886                           
 12887                           ;doprnt.c: 542: continue;
 12888  000C16  EFDF  F00A         	goto	i2l6669
 12889  000C1A                     i2l6383:
 12890                           
 12891                           ;doprnt.c: 543: }
 12892                           ;doprnt.c: 546: width = 0;
 12893  000C1A  0E00               	movlw	0
 12894  000C1C  6E62               	movwf	i2printf@width+1,c
 12895  000C1E  0E00               	movlw	0
 12896  000C20  6E61               	movwf	i2printf@width,c
 12897                           
 12898                           ;doprnt.c: 548: flag = 0;
 12899  000C22  0E00               	movlw	0
 12900  000C24  6E6A               	movwf	i2printf@flag+1,c
 12901  000C26  0E00               	movlw	0
 12902  000C28  6E69               	movwf	i2printf@flag,c
 12903                           
 12904                           ;doprnt.c: 551: switch(*f) {
 12905                           
 12906                           ;doprnt.c: 550: for(;;) {
 12907  000C2A  D003               	goto	i2l6389
 12908  000C2C                     i2l6385:
 12909                           
 12910                           ;doprnt.c: 580: flag |= 0x04;
 12911  000C2C  8469               	bsf	i2printf@flag,2,c
 12912                           
 12913                           ;doprnt.c: 581: f++;
 12914  000C2E  4A49               	infsnz	i2printf@f,f,c
 12915  000C30  2A4A               	incf	i2printf@f+1,f,c
 12916  000C32                     i2l6389:
 12917  000C32  C049  FFF6         	movff	i2printf@f,tblptrl
 12918  000C36  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12919  000C3A                     	if	0	;tblptru may be non-zero
 12920  000C3A                     	endif
 12921  000C3A                     	if	0	;tblptru may be non-zero
 12922  000C3A                     	endif
 12923  000C3A  0008               	tblrd		*
 12924  000C3C  50F5               	movf	tablat,w,c
 12925                           
 12926                           ; Switch size 1, requested type "space"
 12927                           ; Number of cases is 1, Range of values is 48 to 48
 12928                           ; switch strategies available:
 12929                           ; Name         Instructions Cycles
 12930                           ; simple_byte            4     3 (average)
 12931                           ;	Chosen strategy is simple_byte
 12932  000C3E  0A30               	xorlw	48	; case 48
 12933  000C40  B4D8               	btfsc	status,2,c
 12934  000C42  D7F4               	goto	i2l6385
 12935                           
 12936                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12937                           
 12938                           ;doprnt.c: 586: }
 12939                           
 12940                           ;doprnt.c: 585: break;
 12941  000C44  C049  FFF6         	movff	i2printf@f,tblptrl
 12942  000C48  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12943  000C4C                     	if	0	;tblptru may be non-zero
 12944  000C4C                     	endif
 12945  000C4C                     	if	0	;tblptru may be non-zero
 12946  000C4C                     	endif
 12947  000C4C  0008               	tblrd		*
 12948  000C4E  50F5               	movf	tablat,w,c
 12949  000C50  EC8E  F02C         	call	i2_isdigit
 12950  000C54  A0D8               	btfss	status,0,c
 12951  000C56  D03A               	goto	i2l6411
 12952                           
 12953                           ;doprnt.c: 598: width = 0;
 12954  000C58  0E00               	movlw	0
 12955  000C5A  6E62               	movwf	i2printf@width+1,c
 12956  000C5C  0E00               	movlw	0
 12957  000C5E  6E61               	movwf	i2printf@width,c
 12958  000C60                     i2l6395:
 12959                           
 12960                           ;doprnt.c: 600: width *= 10;
 12961  000C60  C061  F00F         	movff	i2printf@width,i2___wmul@multiplier
 12962  000C64  C062  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12963  000C68  0E00               	movlw	0
 12964  000C6A  6E12               	movwf	i2___wmul@multiplicand+1,c
 12965  000C6C  0E0A               	movlw	10
 12966  000C6E  6E11               	movwf	i2___wmul@multiplicand,c
 12967  000C70  EC58  F02C         	call	i2___wmul	;wreg free
 12968  000C74  C00F  F061         	movff	?i2___wmul,i2printf@width
 12969  000C78  C010  F062         	movff	?i2___wmul+1,i2printf@width+1
 12970                           
 12971                           ;doprnt.c: 601: width += *f++ - '0';
 12972  000C7C  0ED0               	movlw	208
 12973  000C7E  6E4F               	movwf	??i2_printf& (0+255),c
 12974  000C80  0EFF               	movlw	255
 12975  000C82  6E50               	movwf	(??i2_printf+1)& (0+255),c
 12976  000C84  C049  FFF6         	movff	i2printf@f,tblptrl
 12977  000C88  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12978  000C8C                     	if	0	;tblptru may be non-zero
 12979  000C8C                     	endif
 12980  000C8C                     	if	0	;tblptru may be non-zero
 12981  000C8C                     	endif
 12982  000C8C  0008               	tblrd		*
 12983  000C8E  50F5               	movf	tablat,w,c
 12984  000C90  6E51               	movwf	(??i2_printf+2)& (0+255),c
 12985  000C92  6A52               	clrf	(??i2_printf+3)& (0+255),c
 12986  000C94  504F               	movf	??i2_printf,w,c
 12987  000C96  2651               	addwf	??i2_printf+2,f,c
 12988  000C98  5050               	movf	??i2_printf+1,w,c
 12989  000C9A  2252               	addwfc	??i2_printf+3,f,c
 12990  000C9C  5051               	movf	??i2_printf+2,w,c
 12991  000C9E  2661               	addwf	i2printf@width,f,c
 12992  000CA0  5052               	movf	??i2_printf+3,w,c
 12993  000CA2  2262               	addwfc	i2printf@width+1,f,c
 12994  000CA4  4A49               	infsnz	i2printf@f,f,c
 12995  000CA6  2A4A               	incf	i2printf@f+1,f,c
 12996                           
 12997                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12998  000CA8  C049  FFF6         	movff	i2printf@f,tblptrl
 12999  000CAC  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 13000  000CB0                     	if	0	;tblptru may be non-zero
 13001  000CB0                     	endif
 13002  000CB0                     	if	0	;tblptru may be non-zero
 13003  000CB0                     	endif
 13004  000CB0  0008               	tblrd		*
 13005  000CB2  50F5               	movf	tablat,w,c
 13006  000CB4  EC8E  F02C         	call	i2_isdigit
 13007  000CB8  A0D8               	btfss	status,0,c
 13008  000CBA  D008               	goto	i2l6411
 13009  000CBC  D7D1               	goto	i2l6395
 13010  000CBE                     i2l6403:
 13011                           
 13012                           ;doprnt.c: 663: flag |= 0x400;
 13013  000CBE  846A               	bsf	i2printf@flag+1,2,c
 13014                           
 13015                           ;doprnt.c: 698: case 'i':
 13016                           ;doprnt.c: 699: break;
 13017                           
 13018                           ;doprnt.c: 697: case 'd':
 13019                           
 13020                           ;doprnt.c: 664: break;
 13021  000CC0  D023               	goto	i2l6413
 13022  000CC2                     i2l6405:
 13023                           
 13024                           ;doprnt.c: 721: flag |= 0x80;
 13025  000CC2  8E69               	bsf	i2printf@flag,7,c
 13026                           
 13027                           ;doprnt.c: 723: break;
 13028  000CC4  D021               	goto	i2l6413
 13029  000CC6                     i2l6407:
 13030                           
 13031                           ;doprnt.c: 818: flag |= 0xC0;
 13032  000CC6  0EC0               	movlw	192
 13033  000CC8  1269               	iorwf	i2printf@flag,f,c
 13034                           
 13035                           ;doprnt.c: 822: }
 13036                           
 13037                           ;doprnt.c: 819: break;
 13038  000CCA  D01E               	goto	i2l6413
 13039  000CCC                     i2l6411:
 13040  000CCC  C049  FFF6         	movff	i2printf@f,tblptrl
 13041  000CD0  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 13042  000CD4  4A49               	infsnz	i2printf@f,f,c
 13043  000CD6  2A4A               	incf	i2printf@f+1,f,c
 13044  000CD8                     	if	0	;tblptru may be non-zero
 13045  000CD8                     	endif
 13046  000CD8                     	if	0	;tblptru may be non-zero
 13047  000CD8                     	endif
 13048  000CD8  0008               	tblrd		*
 13049  000CDA  CFF5 F06E          	movff	tablat,i2printf@c
 13050  000CDE  506E               	movf	i2printf@c,w,c
 13051                           
 13052                           ; Switch size 1, requested type "space"
 13053                           ; Number of cases is 6, Range of values is 0 to 120
 13054                           ; switch strategies available:
 13055                           ; Name         Instructions Cycles
 13056                           ; simple_byte           19    10 (average)
 13057                           ;	Chosen strategy is simple_byte
 13058  000CE0  0A00               	xorlw	0	; case 0
 13059  000CE2  B4D8               	btfsc	status,2,c
 13060  000CE4  0012               	return	
 13061  000CE6  0A64               	xorlw	100	; case 100
 13062  000CE8  B4D8               	btfsc	status,2,c
 13063  000CEA  D00E               	goto	i2l6413
 13064  000CEC  0A02               	xorlw	2	; case 102
 13065  000CEE  B4D8               	btfsc	status,2,c
 13066  000CF0  D7E6               	goto	i2l6403
 13067  000CF2  0A0F               	xorlw	15	; case 105
 13068  000CF4  B4D8               	btfsc	status,2,c
 13069  000CF6  D008               	goto	i2l6413
 13070  000CF8  0A1C               	xorlw	28	; case 117
 13071  000CFA  B4D8               	btfsc	status,2,c
 13072  000CFC  D7E4               	goto	i2l6407
 13073  000CFE  0A0D               	xorlw	13	; case 120
 13074  000D00  B4D8               	btfsc	status,2,c
 13075  000D02  D7DF               	goto	i2l6405
 13076  000D04  EFDF  F00A         	goto	i2l6669
 13077  000D08                     i2l6413:
 13078                           
 13079                           ;doprnt.c: 825: if(flag & (0x700)) {
 13080  000D08  0E07               	movlw	7
 13081  000D0A  146A               	andwf	i2printf@flag+1,w,c
 13082  000D0C  B4D8               	btfsc	status,2,c
 13083  000D0E  D2EC               	goto	i2l6571
 13084                           
 13085                           ;doprnt.c: 829: prec = 6;
 13086  000D10  0E00               	movlw	0
 13087  000D12  6E5C               	movwf	i2printf@prec+1,c
 13088  000D14  0E06               	movlw	6
 13089  000D16  6E5B               	movwf	i2printf@prec,c
 13090                           
 13091                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13092  000D18  C059  FFD9         	movff	i2printf@ap,fsr2l
 13093  000D1C  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13094  000D20  CFDE F06B          	movff	postinc2,i2printf@fval
 13095  000D24  CFDE F06C          	movff	postinc2,i2printf@fval+1
 13096  000D28  CFDD F06D          	movff	postdec2,i2printf@fval+2
 13097  000D2C  0E03               	movlw	3
 13098  000D2E  2659               	addwf	i2printf@ap,f,c
 13099  000D30  0E00               	movlw	0
 13100  000D32  225A               	addwfc	i2printf@ap+1,f,c
 13101                           
 13102                           ;doprnt.c: 831: if(fval < 0.0) {
 13103  000D34  AE6D               	btfss	i2printf@fval+2,7,c
 13104  000D36  D010               	goto	i2l6427
 13105                           
 13106                           ;doprnt.c: 832: fval = -fval;
 13107  000D38  C06B  F001         	movff	i2printf@fval,i2___ftneg@f1
 13108  000D3C  C06C  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13109  000D40  C06D  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13110  000D44  EC6B  F02C         	call	i2___ftneg	;wreg free
 13111  000D48  C001  F06B         	movff	?i2___ftneg,i2printf@fval
 13112  000D4C  C002  F06C         	movff	?i2___ftneg+1,i2printf@fval+1
 13113  000D50  C003  F06D         	movff	?i2___ftneg+2,i2printf@fval+2
 13114                           
 13115                           ;doprnt.c: 833: flag |= 0x03;
 13116  000D54  0E03               	movlw	3
 13117  000D56  1269               	iorwf	i2printf@flag,f,c
 13118  000D58                     i2l6427:
 13119                           
 13120                           ;doprnt.c: 834: }
 13121                           ;doprnt.c: 835: exp = 0;
 13122  000D58  0E00               	movlw	0
 13123  000D5A  6E64               	movwf	i2printf@exp+1,c
 13124  000D5C  0E00               	movlw	0
 13125  000D5E  6E63               	movwf	i2printf@exp,c
 13126                           
 13127                           ;doprnt.c: 836: if( fval!=0) {
 13128  000D60  506B               	movf	i2printf@fval,w,c
 13129  000D62  106C               	iorwf	i2printf@fval+1,w,c
 13130  000D64  106D               	iorwf	i2printf@fval+2,w,c
 13131  000D66  B4D8               	btfsc	status,2,c
 13132  000D68  D083               	goto	i2l6455
 13133                           
 13134                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13135  000D6A  0E82               	movlw	130
 13136  000D6C  6E4F               	movwf	??i2_printf& (0+255),c
 13137  000D6E  0EFF               	movlw	255
 13138  000D70  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13139  000D72  C06B  F051         	movff	i2printf@fval,??i2_printf+2
 13140  000D76  C06C  F052         	movff	i2printf@fval+1,??i2_printf+3
 13141  000D7A  C06D  F053         	movff	i2printf@fval+2,??i2_printf+4
 13142  000D7E  C06E  F054         	movff	i2printf@fval+3,??i2_printf+5
 13143  000D82  0E10               	movlw	16
 13144  000D84  D005               	goto	i2u715_40
 13145  000D86                     i2u715_45:
 13146  000D86  90D8               	bcf	status,0,c
 13147  000D88  3254               	rrcf	??i2_printf+5,f,c
 13148  000D8A  3253               	rrcf	??i2_printf+4,f,c
 13149  000D8C  3252               	rrcf	??i2_printf+3,f,c
 13150  000D8E  3251               	rrcf	??i2_printf+2,f,c
 13151  000D90                     i2u715_40:
 13152  000D90  2EE8               	decfsz	wreg,f,c
 13153  000D92  D7F9               	goto	i2u715_45
 13154  000D94  5051               	movf	??i2_printf+2,w,c
 13155  000D96  244F               	addwf	??i2_printf,w,c
 13156  000D98  6E63               	movwf	i2printf@exp,c
 13157  000D9A  0E00               	movlw	0
 13158  000D9C  2050               	addwfc	??i2_printf+1,w,c
 13159  000D9E  6E64               	movwf	i2printf@exp+1,c
 13160                           
 13161                           ;doprnt.c: 838: exp--;
 13162  000DA0  0663               	decf	i2printf@exp,f,c
 13163  000DA2  A0D8               	btfss	status,0,c
 13164  000DA4  0664               	decf	i2printf@exp+1,f,c
 13165                           
 13166                           ;doprnt.c: 839: exp *= 3;
 13167  000DA6  C063  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13168  000DAA  C064  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13169  000DAE  0E00               	movlw	0
 13170  000DB0  6E12               	movwf	i2___wmul@multiplicand+1,c
 13171  000DB2  0E03               	movlw	3
 13172  000DB4  6E11               	movwf	i2___wmul@multiplicand,c
 13173  000DB6  EC58  F02C         	call	i2___wmul	;wreg free
 13174  000DBA  C00F  F063         	movff	?i2___wmul,i2printf@exp
 13175  000DBE  C010  F064         	movff	?i2___wmul+1,i2printf@exp+1
 13176                           
 13177                           ;doprnt.c: 840: exp /= 10;
 13178  000DC2  C063  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13179  000DC6  C064  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13180  000DCA  0E00               	movlw	0
 13181  000DCC  6E0A               	movwf	i2___awdiv@divisor+1,c
 13182  000DCE  0E0A               	movlw	10
 13183  000DD0  6E09               	movwf	i2___awdiv@divisor,c
 13184  000DD2  EC9A  F028         	call	i2___awdiv	;wreg free
 13185  000DD6  C007  F063         	movff	?i2___awdiv,i2printf@exp
 13186  000DDA  C008  F064         	movff	?i2___awdiv+1,i2printf@exp+1
 13187                           
 13188                           ;doprnt.c: 841: if(exp < 0)
 13189  000DDE  AE64               	btfss	i2printf@exp+1,7,c
 13190  000DE0  D003               	goto	i2l6443
 13191                           
 13192                           ;doprnt.c: 842: exp--;
 13193  000DE2  0663               	decf	i2printf@exp,f,c
 13194  000DE4  A0D8               	btfss	status,0,c
 13195  000DE6  0664               	decf	i2printf@exp+1,f,c
 13196  000DE8                     i2l6443:
 13197                           
 13198                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13199  000DE8  5063               	movf	i2printf@exp,w,c
 13200  000DEA  0800               	sublw	0
 13201  000DEC  ECAD  F011         	call	i2_scale
 13202  000DF0  C024  F05D         	movff	?i2_scale,i2printf@tmpval
 13203  000DF4  C025  F05E         	movff	?i2_scale+1,i2printf@tmpval+1
 13204  000DF8  C026  F05F         	movff	?i2_scale+2,i2printf@tmpval+2
 13205                           
 13206                           ;doprnt.c: 847: tmpval.integ *= fval;
 13207  000DFC  C05D  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13208  000E00  C05E  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13209  000E04  C05F  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13210  000E08  C06B  F018         	movff	i2printf@fval,i2___ftmul@f2
 13211  000E0C  C06C  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13212  000E10  C06D  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13213  000E14  ECF8  F022         	call	i2___ftmul	;wreg free
 13214  000E18  C015  F05D         	movff	?i2___ftmul,i2printf@tmpval
 13215  000E1C  C016  F05E         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13216  000E20  C017  F05F         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13217                           
 13218                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13219  000E24  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13220  000E28  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13221  000E2C  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13222  000E30  0E00               	movlw	0
 13223  000E32  6E04               	movwf	i2___ftge@ff2,c
 13224  000E34  0E80               	movlw	128
 13225  000E36  6E05               	movwf	i2___ftge@ff2+1,c
 13226  000E38  0E3F               	movlw	63
 13227  000E3A  6E06               	movwf	i2___ftge@ff2+2,c
 13228  000E3C  EC0A  F028         	call	i2___ftge	;wreg free
 13229  000E40  B0D8               	btfsc	status,0,c
 13230  000E42  D004               	goto	i2l6451
 13231                           
 13232                           ;doprnt.c: 849: exp--;
 13233  000E44  0663               	decf	i2printf@exp,f,c
 13234  000E46  A0D8               	btfss	status,0,c
 13235  000E48  0664               	decf	i2printf@exp+1,f,c
 13236  000E4A  D012               	goto	i2l6455
 13237  000E4C                     i2l6451:
 13238                           
 13239                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13240  000E4C  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13241  000E50  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13242  000E54  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13243  000E58  0E00               	movlw	0
 13244  000E5A  6E04               	movwf	i2___ftge@ff2,c
 13245  000E5C  0E20               	movlw	32
 13246  000E5E  6E05               	movwf	i2___ftge@ff2+1,c
 13247  000E60  0E41               	movlw	65
 13248  000E62  6E06               	movwf	i2___ftge@ff2+2,c
 13249  000E64  EC0A  F028         	call	i2___ftge	;wreg free
 13250  000E68  A0D8               	btfss	status,0,c
 13251  000E6A  D002               	goto	i2l6455
 13252                           
 13253                           ;doprnt.c: 851: exp++;
 13254  000E6C  4A63               	infsnz	i2printf@exp,f,c
 13255  000E6E  2A64               	incf	i2printf@exp+1,f,c
 13256  000E70                     i2l6455:
 13257                           
 13258                           ;doprnt.c: 852: }
 13259                           ;doprnt.c: 1112: if(prec <= 12)
 13260  000E70  BE5C               	btfsc	i2printf@prec+1,7,c
 13261  000E72  D006               	goto	i2l6457
 13262  000E74  505C               	movf	i2printf@prec+1,w,c
 13263  000E76  E11B               	bnz	i2l6459
 13264  000E78  0E0D               	movlw	13
 13265  000E7A  5C5B               	subwf	i2printf@prec,w,c
 13266  000E7C  B0D8               	btfsc	status,0,c
 13267  000E7E  D017               	goto	i2l6459
 13268  000E80                     i2l6457:
 13269                           
 13270                           ;doprnt.c: 1113: fval += fround(prec);
 13271  000E80  C06B  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13272  000E84  C06C  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13273  000E88  C06D  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13274  000E8C  505B               	movf	i2printf@prec,w,c
 13275  000E8E  EC2F  F016         	call	i2_fround
 13276  000E92  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13277  000E96  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13278  000E9A  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13279  000E9E  EC1E  F019         	call	i2___ftadd	;wreg free
 13280  000EA2  C02E  F06B         	movff	?i2___ftadd,i2printf@fval
 13281  000EA6  C02F  F06C         	movff	?i2___ftadd+1,i2printf@fval+1
 13282  000EAA  C030  F06D         	movff	?i2___ftadd+2,i2printf@fval+2
 13283  000EAE                     i2l6459:
 13284                           
 13285                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13286  000EAE  BE64               	btfsc	i2printf@exp+1,7,c
 13287  000EB0  D006               	goto	i2l6461
 13288  000EB2  5064               	movf	i2printf@exp+1,w,c
 13289  000EB4  E11E               	bnz	i2l6467
 13290  000EB6  0E0A               	movlw	10
 13291  000EB8  5C63               	subwf	i2printf@exp,w,c
 13292  000EBA  B0D8               	btfsc	status,0,c
 13293  000EBC  D01A               	goto	i2l6467
 13294  000EBE                     i2l6461:
 13295  000EBE  506B               	movf	i2printf@fval,w,c
 13296  000EC0  106C               	iorwf	i2printf@fval+1,w,c
 13297  000EC2  106D               	iorwf	i2printf@fval+2,w,c
 13298  000EC4  B4D8               	btfsc	status,2,c
 13299  000EC6  D051               	goto	i2l6481
 13300  000EC8  C06B  F03A         	movff	i2printf@fval,i2___fttol@f1
 13301  000ECC  C06C  F03B         	movff	i2printf@fval+1,i2___fttol@f1+1
 13302  000ED0  C06D  F03C         	movff	i2printf@fval+2,i2___fttol@f1+2
 13303  000ED4  EC7E  F022         	call	i2___fttol	;wreg free
 13304  000ED8  503A               	movf	?i2___fttol,w,c
 13305  000EDA  103B               	iorwf	?i2___fttol+1,w,c
 13306  000EDC  103C               	iorwf	?i2___fttol+2,w,c
 13307  000EDE  103D               	iorwf	?i2___fttol+3,w,c
 13308  000EE0  B4D8               	btfsc	status,2,c
 13309  000EE2  BE64               	btfsc	i2printf@exp+1,7,c
 13310  000EE4  D042               	goto	i2l6481
 13311  000EE6  5064               	movf	i2printf@exp+1,w,c
 13312  000EE8  E104               	bnz	i2l6467
 13313  000EEA  0E02               	movlw	2
 13314  000EEC  5C63               	subwf	i2printf@exp,w,c
 13315  000EEE  A0D8               	btfss	status,0,c
 13316  000EF0  D03C               	goto	i2l6481
 13317  000EF2                     i2l6467:
 13318                           
 13319                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13320  000EF2  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13321  000EF6  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13322  000EFA  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13323  000EFE  0E70               	movlw	112
 13324  000F00  6E04               	movwf	i2___ftge@ff2,c
 13325  000F02  0E89               	movlw	137
 13326  000F04  6E05               	movwf	i2___ftge@ff2+1,c
 13327  000F06  0E40               	movlw	64
 13328  000F08  6E06               	movwf	i2___ftge@ff2+2,c
 13329  000F0A  EC0A  F028         	call	i2___ftge	;wreg free
 13330  000F0E  B0D8               	btfsc	status,0,c
 13331  000F10  D002               	goto	i2l6471
 13332                           
 13333                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13334  000F12  0EF7               	movlw	247
 13335  000F14  D001               	goto	L25
 13336  000F16                     i2l6471:
 13337                           
 13338                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13339  000F16  0EF8               	movlw	248
 13340  000F18                     L25:
 13341  000F18  2663               	addwf	i2printf@exp,f,c
 13342  000F1A  0EFF               	movlw	255
 13343  000F1C  2264               	addwfc	i2printf@exp+1,f,c
 13344                           
 13345                           ;doprnt.c: 1124: }
 13346                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13347  000F1E  5063               	movf	i2printf@exp,w,c
 13348  000F20  ECAD  F011         	call	i2_scale
 13349  000F24  C024  F05D         	movff	?i2_scale,i2printf@tmpval
 13350  000F28  C025  F05E         	movff	?i2_scale+1,i2printf@tmpval+1
 13351  000F2C  C026  F05F         	movff	?i2_scale+2,i2printf@tmpval+2
 13352                           
 13353                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13354  000F30  C06B  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13355  000F34  C06C  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13356  000F38  C06D  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13357  000F3C  C05D  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13358  000F40  C05E  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13359  000F44  C05F  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13360  000F48  EC39  F01E         	call	i2__tdiv_to_l_	;wreg free
 13361  000F4C  C001  F065         	movff	?i2__tdiv_to_l_,i2printf@val
 13362  000F50  C002  F066         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13363  000F54  C003  F067         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13364  000F58  C004  F068         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13365                           
 13366                           ;doprnt.c: 1129: fval = 0.0;
 13367  000F5C  0E00               	movlw	0
 13368  000F5E  6E6B               	movwf	i2printf@fval,c
 13369  000F60  0E00               	movlw	0
 13370  000F62  6E6C               	movwf	i2printf@fval+1,c
 13371  000F64  0E00               	movlw	0
 13372  000F66  6E6D               	movwf	i2printf@fval+2,c
 13373                           
 13374                           ;doprnt.c: 1130: } else {
 13375  000F68  D032               	goto	i2l6485
 13376  000F6A                     i2l6481:
 13377                           
 13378                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13379  000F6A  C06B  F03A         	movff	i2printf@fval,i2___fttol@f1
 13380  000F6E  C06C  F03B         	movff	i2printf@fval+1,i2___fttol@f1+1
 13381  000F72  C06D  F03C         	movff	i2printf@fval+2,i2___fttol@f1+2
 13382  000F76  EC7E  F022         	call	i2___fttol	;wreg free
 13383  000F7A  C03A  F065         	movff	?i2___fttol,i2printf@val
 13384  000F7E  C03B  F066         	movff	?i2___fttol+1,i2printf@val+1
 13385  000F82  C03C  F067         	movff	?i2___fttol+2,i2printf@val+2
 13386  000F86  C03D  F068         	movff	?i2___fttol+3,i2printf@val+3
 13387                           
 13388                           ;doprnt.c: 1132: fval -= (double)val;
 13389  000F8A  C06B  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13390  000F8E  C06C  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13391  000F92  C06D  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13392  000F96  C065  F009         	movff	i2printf@val,i2___lltoft@c
 13393  000F9A  C066  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13394  000F9E  C067  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13395  000FA2  C068  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13396  000FA6  EC96  F02A         	call	i2___lltoft	;wreg free
 13397  000FAA  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13398  000FAE  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13399  000FB2  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13400  000FB6  EC5D  F02B         	call	i2___ftsub	;wreg free
 13401  000FBA  C03A  F06B         	movff	?i2___ftsub,i2printf@fval
 13402  000FBE  C03B  F06C         	movff	?i2___ftsub+1,i2printf@fval+1
 13403  000FC2  C03C  F06D         	movff	?i2___ftsub+2,i2printf@fval+2
 13404                           
 13405                           ;doprnt.c: 1133: exp = 0;
 13406  000FC6  0E00               	movlw	0
 13407  000FC8  6E64               	movwf	i2printf@exp+1,c
 13408  000FCA  0E00               	movlw	0
 13409  000FCC  6E63               	movwf	i2printf@exp,c
 13410  000FCE                     i2l6485:
 13411                           
 13412                           ;doprnt.c: 1134: }
 13413                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13414  000FCE  0E01               	movlw	1
 13415  000FD0  6E6E               	movwf	i2printf@c,c
 13416  000FD2                     i2l6487:
 13417  000FD2  0E0A               	movlw	10
 13418  000FD4  186E               	xorwf	i2printf@c,w,c
 13419  000FD6  B4D8               	btfsc	status,2,c
 13420  000FD8  D018               	goto	i2l6499
 13421                           
 13422                           ;doprnt.c: 1137: if(val < dpowers[c])
 13423  000FDA  506E               	movf	i2printf@c,w,c
 13424  000FDC  0D04               	mullw	4
 13425  000FDE  0EB5               	movlw	low _dpowers
 13426  000FE0  24F3               	addwf	prodl,w,c
 13427  000FE2  6EF6               	movwf	tblptrl,c
 13428  000FE4  0EFD               	movlw	high _dpowers
 13429  000FE6  20F4               	addwfc	prodh,w,c
 13430  000FE8  6EF7               	movwf	tblptrh,c
 13431  000FEA                     	if	0	;There are less than 3 active tblptr bytes
 13432  000FEA                     	endif
 13433  000FEA  0009               	tblrd		*+
 13434  000FEC  50F5               	movf	tablat,w,c
 13435  000FEE  5C65               	subwf	i2printf@val,w,c
 13436  000FF0  0009               	tblrd		*+
 13437  000FF2  50F5               	movf	tablat,w,c
 13438  000FF4  5866               	subwfb	i2printf@val+1,w,c
 13439  000FF6  0009               	tblrd		*+
 13440  000FF8  50F5               	movf	tablat,w,c
 13441  000FFA  5867               	subwfb	i2printf@val+2,w,c
 13442  000FFC  0009               	tblrd		*+
 13443  000FFE  50F5               	movf	tablat,w,c
 13444  001000  5868               	subwfb	i2printf@val+3,w,c
 13445  001002  A0D8               	btfss	status,0,c
 13446  001004  D002               	goto	i2l6499
 13447                           
 13448                           ;doprnt.c: 1138: break;
 13449  001006  2A6E               	incf	i2printf@c,f,c
 13450  001008  D7E4               	goto	i2l6487
 13451  00100A                     i2l6499:
 13452                           
 13453                           ;doprnt.c: 1142: width -= prec + c + exp;
 13454  00100A  C06E  F04F         	movff	i2printf@c,??i2_printf
 13455  00100E  6A50               	clrf	(??i2_printf+1)& (0+255),c
 13456  001010  BE4F               	btfsc	??i2_printf& (0+255),7,c
 13457  001012  0650               	decf	(??i2_printf+1)& (0+255),f,c
 13458  001014  505B               	movf	i2printf@prec,w,c
 13459  001016  264F               	addwf	??i2_printf,f,c
 13460  001018  505C               	movf	i2printf@prec+1,w,c
 13461  00101A  2250               	addwfc	??i2_printf+1,f,c
 13462  00101C  5063               	movf	i2printf@exp,w,c
 13463  00101E  264F               	addwf	??i2_printf,f,c
 13464  001020  5064               	movf	i2printf@exp+1,w,c
 13465  001022  2250               	addwfc	??i2_printf+1,f,c
 13466  001024  504F               	movf	??i2_printf,w,c
 13467  001026  5E61               	subwf	i2printf@width,f,c
 13468  001028  5050               	movf	??i2_printf+1,w,c
 13469  00102A  5A62               	subwfb	i2printf@width+1,f,c
 13470                           
 13471                           ;doprnt.c: 1143: if(
 13472                           ;doprnt.c: 1147: prec)
 13473  00102C  505B               	movf	i2printf@prec,w,c
 13474  00102E  105C               	iorwf	i2printf@prec+1,w,c
 13475  001030  B4D8               	btfsc	status,2,c
 13476  001032  D003               	goto	i2l6503
 13477                           
 13478                           ;doprnt.c: 1148: width--;
 13479  001034  0661               	decf	i2printf@width,f,c
 13480  001036  A0D8               	btfss	status,0,c
 13481  001038  0662               	decf	i2printf@width+1,f,c
 13482  00103A                     i2l6503:
 13483                           
 13484                           ;doprnt.c: 1149: if(flag & 0x03)
 13485  00103A  0E03               	movlw	3
 13486  00103C  1469               	andwf	i2printf@flag,w,c
 13487  00103E  6E4F               	movwf	??i2_printf& (0+255),c
 13488  001040  0E00               	movlw	0
 13489  001042  146A               	andwf	i2printf@flag+1,w,c
 13490  001044  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13491  001046  504F               	movf	??i2_printf,w,c
 13492  001048  1050               	iorwf	??i2_printf+1,w,c
 13493  00104A  B4D8               	btfsc	status,2,c
 13494  00104C  D003               	goto	i2l6507
 13495                           
 13496                           ;doprnt.c: 1150: width--;
 13497  00104E  0661               	decf	i2printf@width,f,c
 13498  001050  A0D8               	btfss	status,0,c
 13499  001052  0662               	decf	i2printf@width+1,f,c
 13500  001054                     i2l6507:
 13501                           
 13502                           ;doprnt.c: 1153: if(flag & 0x04) {
 13503  001054  A469               	btfss	i2printf@flag,2,c
 13504  001056  D022               	goto	i2l6523
 13505                           
 13506                           ;doprnt.c: 1157: if(flag & 0x03)
 13507  001058  0E03               	movlw	3
 13508  00105A  1469               	andwf	i2printf@flag,w,c
 13509  00105C  6E4F               	movwf	??i2_printf& (0+255),c
 13510  00105E  0E00               	movlw	0
 13511  001060  146A               	andwf	i2printf@flag+1,w,c
 13512  001062  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13513  001064  504F               	movf	??i2_printf,w,c
 13514  001066  1050               	iorwf	??i2_printf+1,w,c
 13515  001068  B4D8               	btfsc	status,2,c
 13516  00106A  D00A               	goto	i2l6517
 13517                           
 13518                           ;doprnt.c: 1159: (putch('-') );
 13519  00106C  0E2D               	movlw	45
 13520  00106E  ECCC  F02C         	call	i2_putch
 13521                           
 13522                           ;doprnt.c: 1168: while(width > 0) {
 13523  001072  D006               	goto	i2l6517
 13524  001074                     i2l6513:
 13525                           
 13526                           ;doprnt.c: 1169: (putch('0') );
 13527  001074  0E30               	movlw	48
 13528  001076  ECCC  F02C         	call	i2_putch
 13529                           
 13530                           ;doprnt.c: 1170: width--;
 13531  00107A  0661               	decf	i2printf@width,f,c
 13532  00107C  A0D8               	btfss	status,0,c
 13533  00107E  0662               	decf	i2printf@width+1,f,c
 13534  001080                     i2l6517:
 13535  001080  BE62               	btfsc	i2printf@width+1,7,c
 13536  001082  D065               	goto	i2l6535
 13537  001084  5062               	movf	i2printf@width+1,w,c
 13538  001086  E1F6               	bnz	i2l6513
 13539  001088  0461               	decf	i2printf@width,w,c
 13540  00108A  A0D8               	btfss	status,0,c
 13541  00108C  D060               	goto	i2l6535
 13542  00108E  D7F2               	goto	i2l6513
 13543  001090                     i2l6519:
 13544                           
 13545                           ;doprnt.c: 1181: (putch(' ') );
 13546  001090  0E20               	movlw	32
 13547  001092  ECCC  F02C         	call	i2_putch
 13548                           
 13549                           ;doprnt.c: 1182: width--;
 13550  001096  0661               	decf	i2printf@width,f,c
 13551  001098  A0D8               	btfss	status,0,c
 13552  00109A  0662               	decf	i2printf@width+1,f,c
 13553  00109C                     i2l6523:
 13554  00109C  BE62               	btfsc	i2printf@width+1,7,c
 13555  00109E  D005               	goto	i2l6525
 13556  0010A0  5062               	movf	i2printf@width+1,w,c
 13557  0010A2  E1F6               	bnz	i2l6519
 13558  0010A4  0461               	decf	i2printf@width,w,c
 13559  0010A6  B0D8               	btfsc	status,0,c
 13560  0010A8  D7F3               	goto	i2l6519
 13561  0010AA                     i2l6525:
 13562                           
 13563                           ;doprnt.c: 1183: }
 13564                           ;doprnt.c: 1188: if(flag & 0x03)
 13565  0010AA  0E03               	movlw	3
 13566  0010AC  1469               	andwf	i2printf@flag,w,c
 13567  0010AE  6E4F               	movwf	??i2_printf& (0+255),c
 13568  0010B0  0E00               	movlw	0
 13569  0010B2  146A               	andwf	i2printf@flag+1,w,c
 13570  0010B4  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13571  0010B6  504F               	movf	??i2_printf,w,c
 13572  0010B8  1050               	iorwf	??i2_printf+1,w,c
 13573  0010BA  B4D8               	btfsc	status,2,c
 13574  0010BC  D048               	goto	i2l6535
 13575                           
 13576                           ;doprnt.c: 1190: (putch('-') );
 13577  0010BE  0E2D               	movlw	45
 13578  0010C0  ECCC  F02C         	call	i2_putch
 13579                           
 13580                           ;doprnt.c: 1195: }
 13581                           ;doprnt.c: 1196: while(c--) {
 13582  0010C4  D044               	goto	i2l6535
 13583  0010C6                     i2l6529:
 13584                           
 13585                           ;doprnt.c: 1200: {
 13586                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13587  0010C6  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 13588  0010CA  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13589  0010CE  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13590  0010D2  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13591  0010D6  506E               	movf	i2printf@c,w,c
 13592  0010D8  0D04               	mullw	4
 13593  0010DA  0EB5               	movlw	low _dpowers
 13594  0010DC  24F3               	addwf	prodl,w,c
 13595  0010DE  6EF6               	movwf	tblptrl,c
 13596  0010E0  0EFD               	movlw	high _dpowers
 13597  0010E2  20F4               	addwfc	prodh,w,c
 13598  0010E4  6EF7               	movwf	tblptrh,c
 13599  0010E6                     	if	0	;There are less than 3 active tblptr bytes
 13600  0010E6                     	endif
 13601  0010E6  0009               	tblrd		*+
 13602  0010E8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13603  0010EC  0009               	tblrd		*+
 13604  0010EE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13605  0010F2  0009               	tblrd		*+
 13606  0010F4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13607  0010F8  000A               	tblrd		*-
 13608  0010FA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13609  0010FE  ECDC  F028         	call	i2___lldiv	;wreg free
 13610  001102  C001  F05D         	movff	?i2___lldiv,i2printf@tmpval
 13611  001106  C002  F05E         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13612  00110A  C003  F05F         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13613  00110E  C004  F060         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13614                           
 13615                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13616  001112  C05D  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13617  001116  C05E  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13618  00111A  C05F  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13619  00111E  C060  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13620  001122  0E0A               	movlw	10
 13621  001124  6E12               	movwf	i2___llmod@divisor,c
 13622  001126  0E00               	movlw	0
 13623  001128  6E13               	movwf	i2___llmod@divisor+1,c
 13624  00112A  0E00               	movlw	0
 13625  00112C  6E14               	movwf	i2___llmod@divisor+2,c
 13626  00112E  0E00               	movlw	0
 13627  001130  6E15               	movwf	i2___llmod@divisor+3,c
 13628  001132  EC03  F02A         	call	i2___llmod	;wreg free
 13629  001136  C00E  F05D         	movff	?i2___llmod,i2printf@tmpval
 13630  00113A  C00F  F05E         	movff	?i2___llmod+1,i2printf@tmpval+1
 13631  00113E  C010  F05F         	movff	?i2___llmod+2,i2printf@tmpval+2
 13632  001142  C011  F060         	movff	?i2___llmod+3,i2printf@tmpval+3
 13633                           
 13634                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13635  001146  505D               	movf	i2printf@tmpval,w,c
 13636  001148  0F30               	addlw	48
 13637  00114A  ECCC  F02C         	call	i2_putch
 13638  00114E                     i2l6535:
 13639  00114E  066E               	decf	i2printf@c,f,c
 13640  001150  286E               	incf	i2printf@c,w,c
 13641  001152  B4D8               	btfsc	status,2,c
 13642  001154  D007               	goto	i2l6541
 13643  001156  D7B7               	goto	i2l6529
 13644  001158                     i2l6537:
 13645                           
 13646                           ;doprnt.c: 1208: (putch('0') );
 13647  001158  0E30               	movlw	48
 13648  00115A  ECCC  F02C         	call	i2_putch
 13649                           
 13650                           ;doprnt.c: 1209: exp--;
 13651  00115E  0663               	decf	i2printf@exp,f,c
 13652  001160  A0D8               	btfss	status,0,c
 13653  001162  0664               	decf	i2printf@exp+1,f,c
 13654  001164                     i2l6541:
 13655  001164  BE64               	btfsc	i2printf@exp+1,7,c
 13656  001166  D005               	goto	i2l6543
 13657  001168  5064               	movf	i2printf@exp+1,w,c
 13658  00116A  E1F6               	bnz	i2l6537
 13659  00116C  0463               	decf	i2printf@exp,w,c
 13660  00116E  B0D8               	btfsc	status,0,c
 13661  001170  D7F3               	goto	i2l6537
 13662  001172                     i2l6543:
 13663                           
 13664                           ;doprnt.c: 1210: }
 13665                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13666  001172  BE5C               	btfsc	i2printf@prec+1,7,c
 13667  001174  D009               	goto	i2l564
 13668  001176  505C               	movf	i2printf@prec+1,w,c
 13669  001178  E104               	bnz	i2u737_40
 13670  00117A  0E09               	movlw	9
 13671  00117C  5C5B               	subwf	i2printf@prec,w,c
 13672  00117E  A0D8               	btfss	status,0,c
 13673  001180  D003               	goto	i2l564
 13674  001182                     i2u737_40:
 13675                           
 13676                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13677  001182  0E08               	movlw	8
 13678  001184  6E6E               	movwf	i2printf@c,c
 13679  001186  D002               	goto	i2l6547
 13680  001188                     i2l564:
 13681                           
 13682                           ;doprnt.c: 1213: else
 13683                           ;doprnt.c: 1214: c = prec;
 13684  001188  C05B  F06E         	movff	i2printf@prec,i2printf@c
 13685  00118C                     i2l6547:
 13686                           
 13687                           ;doprnt.c: 1215: prec -= c;
 13688  00118C  506E               	movf	i2printf@c,w,c
 13689  00118E  5E5B               	subwf	i2printf@prec,f,c
 13690  001190  0E00               	movlw	0
 13691  001192  BE6E               	btfsc	i2printf@c,7,c
 13692  001194  0EFF               	movlw	255
 13693  001196  5A5C               	subwfb	i2printf@prec+1,f,c
 13694                           
 13695                           ;doprnt.c: 1219: if(c)
 13696  001198  506E               	movf	i2printf@c,w,c
 13697  00119A  B4D8               	btfsc	status,2,c
 13698  00119C  D003               	goto	i2l6553
 13699                           
 13700                           ;doprnt.c: 1221: (putch('.') );
 13701  00119E  0E2E               	movlw	46
 13702  0011A0  ECCC  F02C         	call	i2_putch
 13703  0011A4                     i2l6553:
 13704                           
 13705                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13706  0011A4  506E               	movf	i2printf@c,w,c
 13707  0011A6  ECAD  F011         	call	i2_scale
 13708  0011AA  C024  F055         	movff	?i2_scale,i2_printf$1529
 13709  0011AE  C025  F056         	movff	?i2_scale+1,i2_printf$1529+1
 13710  0011B2  C026  F057         	movff	?i2_scale+2,i2_printf$1529+2
 13711                           
 13712                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13713  0011B6  C06B  F018         	movff	i2printf@fval,i2___ftmul@f2
 13714  0011BA  C06C  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13715  0011BE  C06D  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13716  0011C2  C055  F015         	movff	i2_printf$1529,i2___ftmul@f1
 13717  0011C6  C056  F016         	movff	i2_printf$1529+1,i2___ftmul@f1+1
 13718  0011CA  C057  F017         	movff	i2_printf$1529+2,i2___ftmul@f1+2
 13719  0011CE  ECF8  F022         	call	i2___ftmul	;wreg free
 13720  0011D2  C015  F03A         	movff	?i2___ftmul,i2___fttol@f1
 13721  0011D6  C016  F03B         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13722  0011DA  C017  F03C         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13723  0011DE  EC7E  F022         	call	i2___fttol	;wreg free
 13724  0011E2  C03A  F065         	movff	?i2___fttol,i2printf@val
 13725  0011E6  C03B  F066         	movff	?i2___fttol+1,i2printf@val+1
 13726  0011EA  C03C  F067         	movff	?i2___fttol+2,i2printf@val+2
 13727  0011EE  C03D  F068         	movff	?i2___fttol+3,i2printf@val+3
 13728                           
 13729                           ;doprnt.c: 1228: while(c--) {
 13730  0011F2  D06A               	goto	i2l6563
 13731  0011F4                     i2l6557:
 13732                           
 13733                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13734  0011F4  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 13735  0011F8  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13736  0011FC  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13737  001200  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13738  001204  506E               	movf	i2printf@c,w,c
 13739  001206  0D04               	mullw	4
 13740  001208  0EB5               	movlw	low _dpowers
 13741  00120A  24F3               	addwf	prodl,w,c
 13742  00120C  6EF6               	movwf	tblptrl,c
 13743  00120E  0EFD               	movlw	high _dpowers
 13744  001210  20F4               	addwfc	prodh,w,c
 13745  001212  6EF7               	movwf	tblptrh,c
 13746  001214                     	if	0	;There are less than 3 active tblptr bytes
 13747  001214                     	endif
 13748  001214  0009               	tblrd		*+
 13749  001216  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13750  00121A  0009               	tblrd		*+
 13751  00121C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13752  001220  0009               	tblrd		*+
 13753  001222  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13754  001226  000A               	tblrd		*-
 13755  001228  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13756  00122C  ECDC  F028         	call	i2___lldiv	;wreg free
 13757  001230  C001  F05D         	movff	?i2___lldiv,i2printf@tmpval
 13758  001234  C002  F05E         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13759  001238  C003  F05F         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13760  00123C  C004  F060         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13761                           
 13762                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13763  001240  C05D  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13764  001244  C05E  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13765  001248  C05F  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13766  00124C  C060  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13767  001250  0E0A               	movlw	10
 13768  001252  6E12               	movwf	i2___llmod@divisor,c
 13769  001254  0E00               	movlw	0
 13770  001256  6E13               	movwf	i2___llmod@divisor+1,c
 13771  001258  0E00               	movlw	0
 13772  00125A  6E14               	movwf	i2___llmod@divisor+2,c
 13773  00125C  0E00               	movlw	0
 13774  00125E  6E15               	movwf	i2___llmod@divisor+3,c
 13775  001260  EC03  F02A         	call	i2___llmod	;wreg free
 13776  001264  C00E  F05D         	movff	?i2___llmod,i2printf@tmpval
 13777  001268  C00F  F05E         	movff	?i2___llmod+1,i2printf@tmpval+1
 13778  00126C  C010  F05F         	movff	?i2___llmod+2,i2printf@tmpval+2
 13779  001270  C011  F060         	movff	?i2___llmod+3,i2printf@tmpval+3
 13780                           
 13781                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13782  001274  505D               	movf	i2printf@tmpval,w,c
 13783  001276  0F30               	addlw	48
 13784  001278  ECCC  F02C         	call	i2_putch
 13785                           
 13786                           ;doprnt.c: 1232: val %= dpowers[c];
 13787  00127C  C065  F00E         	movff	i2printf@val,i2___llmod@dividend
 13788  001280  C066  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13789  001284  C067  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13790  001288  C068  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13791  00128C  506E               	movf	i2printf@c,w,c
 13792  00128E  0D04               	mullw	4
 13793  001290  0EB5               	movlw	low _dpowers
 13794  001292  24F3               	addwf	prodl,w,c
 13795  001294  6EF6               	movwf	tblptrl,c
 13796  001296  0EFD               	movlw	high _dpowers
 13797  001298  20F4               	addwfc	prodh,w,c
 13798  00129A  6EF7               	movwf	tblptrh,c
 13799  00129C                     	if	0	;There are less than 3 active tblptr bytes
 13800  00129C                     	endif
 13801  00129C  0009               	tblrd		*+
 13802  00129E  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13803  0012A2  0009               	tblrd		*+
 13804  0012A4  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13805  0012A8  0009               	tblrd		*+
 13806  0012AA  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13807  0012AE  000A               	tblrd		*-
 13808  0012B0  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13809  0012B4  EC03  F02A         	call	i2___llmod	;wreg free
 13810  0012B8  C00E  F065         	movff	?i2___llmod,i2printf@val
 13811  0012BC  C00F  F066         	movff	?i2___llmod+1,i2printf@val+1
 13812  0012C0  C010  F067         	movff	?i2___llmod+2,i2printf@val+2
 13813  0012C4  C011  F068         	movff	?i2___llmod+3,i2printf@val+3
 13814  0012C8                     i2l6563:
 13815  0012C8  066E               	decf	i2printf@c,f,c
 13816  0012CA  286E               	incf	i2printf@c,w,c
 13817  0012CC  B4D8               	btfsc	status,2,c
 13818  0012CE  D007               	goto	i2l6569
 13819  0012D0  D791               	goto	i2l6557
 13820  0012D2                     i2l6565:
 13821                           
 13822                           ;doprnt.c: 1236: (putch('0') );
 13823  0012D2  0E30               	movlw	48
 13824  0012D4  ECCC  F02C         	call	i2_putch
 13825                           
 13826                           ;doprnt.c: 1237: prec--;
 13827  0012D8  065B               	decf	i2printf@prec,f,c
 13828  0012DA  A0D8               	btfss	status,0,c
 13829  0012DC  065C               	decf	i2printf@prec+1,f,c
 13830  0012DE                     i2l6569:
 13831  0012DE  505B               	movf	i2printf@prec,w,c
 13832  0012E0  105C               	iorwf	i2printf@prec+1,w,c
 13833  0012E2  B4D8               	btfsc	status,2,c
 13834  0012E4  D16C               	goto	i2l6669
 13835  0012E6  D7F5               	goto	i2l6565
 13836  0012E8                     i2l6571:
 13837                           
 13838                           ;doprnt.c: 1246: }
 13839                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 13840  0012E8  0EC0               	movlw	192
 13841  0012EA  1469               	andwf	i2printf@flag,w,c
 13842  0012EC  6E4F               	movwf	??i2_printf& (0+255),c
 13843  0012EE  0E00               	movlw	0
 13844  0012F0  146A               	andwf	i2printf@flag+1,w,c
 13845  0012F2  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13846  0012F4  504F               	movf	??i2_printf,w,c
 13847  0012F6  1050               	iorwf	??i2_printf+1,w,c
 13848  0012F8  A4D8               	btfss	status,2,c
 13849  0012FA  D01E               	goto	i2l6583
 13850                           
 13851                           ;doprnt.c: 1253: {
 13852                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13853  0012FC  C059  FFD9         	movff	i2printf@ap,fsr2l
 13854  001300  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13855  001304  CFDE F065          	movff	postinc2,i2printf@val
 13856  001308  CFDD F066          	movff	postdec2,i2printf@val+1
 13857  00130C  0E00               	movlw	0
 13858  00130E  BE66               	btfsc	i2printf@val+1,7,c
 13859  001310  0EFF               	movlw	-1
 13860  001312  6E67               	movwf	i2printf@val+2,c
 13861  001314  6E68               	movwf	i2printf@val+3,c
 13862  001316  0E02               	movlw	2
 13863  001318  2659               	addwf	i2printf@ap,f,c
 13864  00131A  0E00               	movlw	0
 13865  00131C  225A               	addwfc	i2printf@ap+1,f,c
 13866                           
 13867                           ;doprnt.c: 1261: if((long)val < 0) {
 13868  00131E  AE68               	btfss	i2printf@val+3,7,c
 13869  001320  D05A               	goto	i2l6617
 13870                           
 13871                           ;doprnt.c: 1262: flag |= 0x03;
 13872  001322  0E03               	movlw	3
 13873  001324  1269               	iorwf	i2printf@flag,f,c
 13874                           
 13875                           ;doprnt.c: 1263: val = -val;
 13876  001326  1E68               	comf	i2printf@val+3,f,c
 13877  001328  1E67               	comf	i2printf@val+2,f,c
 13878  00132A  1E66               	comf	i2printf@val+1,f,c
 13879  00132C  6C65               	negf	i2printf@val,c
 13880  00132E  0E00               	movlw	0
 13881  001330  2266               	addwfc	i2printf@val+1,f,c
 13882  001332  2267               	addwfc	i2printf@val+2,f,c
 13883  001334  2268               	addwfc	i2printf@val+3,f,c
 13884                           
 13885                           ;doprnt.c: 1264: }
 13886                           ;doprnt.c: 1266: }
 13887  001336  D04F               	goto	i2l6617
 13888  001338                     i2l6583:
 13889                           
 13890                           ;doprnt.c: 1268: else
 13891                           ;doprnt.c: 1273: {
 13892                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13893  001338  C059  FFD9         	movff	i2printf@ap,fsr2l
 13894  00133C  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13895  001340  CFDE F04F          	movff	postinc2,??i2_printf
 13896  001344  CFDD F050          	movff	postdec2,??i2_printf+1
 13897  001348  C04F  F065         	movff	??i2_printf,i2printf@val
 13898  00134C  C050  F066         	movff	??i2_printf+1,i2printf@val+1
 13899  001350  6A67               	clrf	i2printf@val+2,c
 13900  001352  6A68               	clrf	i2printf@val+3,c
 13901  001354  0E02               	movlw	2
 13902  001356  2659               	addwf	i2printf@ap,f,c
 13903  001358  0E00               	movlw	0
 13904  00135A  225A               	addwfc	i2printf@ap+1,f,c
 13905                           
 13906                           ;doprnt.c: 1287: }
 13907                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 13908  00135C  D03C               	goto	i2l6617
 13909  00135E                     i2l6587:
 13910                           
 13911                           ;doprnt.c: 1302: case 0xC0:
 13912                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13913  00135E  0E01               	movlw	1
 13914  001360  6E6E               	movwf	i2printf@c,c
 13915  001362                     i2l6589:
 13916  001362  0E0A               	movlw	10
 13917  001364  186E               	xorwf	i2printf@c,w,c
 13918  001366  B4D8               	btfsc	status,2,c
 13919  001368  D041               	goto	i2l6619
 13920                           
 13921                           ;doprnt.c: 1306: if(val < dpowers[c])
 13922  00136A  506E               	movf	i2printf@c,w,c
 13923  00136C  0D04               	mullw	4
 13924  00136E  0EB5               	movlw	low _dpowers
 13925  001370  24F3               	addwf	prodl,w,c
 13926  001372  6EF6               	movwf	tblptrl,c
 13927  001374  0EFD               	movlw	high _dpowers
 13928  001376  20F4               	addwfc	prodh,w,c
 13929  001378  6EF7               	movwf	tblptrh,c
 13930  00137A                     	if	0	;There are less than 3 active tblptr bytes
 13931  00137A                     	endif
 13932  00137A  0009               	tblrd		*+
 13933  00137C  50F5               	movf	tablat,w,c
 13934  00137E  5C65               	subwf	i2printf@val,w,c
 13935  001380  0009               	tblrd		*+
 13936  001382  50F5               	movf	tablat,w,c
 13937  001384  5866               	subwfb	i2printf@val+1,w,c
 13938  001386  0009               	tblrd		*+
 13939  001388  50F5               	movf	tablat,w,c
 13940  00138A  5867               	subwfb	i2printf@val+2,w,c
 13941  00138C  0009               	tblrd		*+
 13942  00138E  50F5               	movf	tablat,w,c
 13943  001390  5868               	subwfb	i2printf@val+3,w,c
 13944  001392  A0D8               	btfss	status,0,c
 13945  001394  D02B               	goto	i2l6619
 13946                           
 13947                           ;doprnt.c: 1307: break;
 13948  001396  2A6E               	incf	i2printf@c,f,c
 13949  001398  D7E4               	goto	i2l6589
 13950  00139A                     i2l6601:
 13951                           
 13952                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13953  00139A  0E01               	movlw	1
 13954  00139C  6E6E               	movwf	i2printf@c,c
 13955  00139E                     i2l6603:
 13956  00139E  0E08               	movlw	8
 13957  0013A0  186E               	xorwf	i2printf@c,w,c
 13958  0013A2  B4D8               	btfsc	status,2,c
 13959  0013A4  D023               	goto	i2l6619
 13960                           
 13961                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13962  0013A6  506E               	movf	i2printf@c,w,c
 13963  0013A8  0D04               	mullw	4
 13964  0013AA  0E2B               	movlw	low _hexpowers
 13965  0013AC  24F3               	addwf	prodl,w,c
 13966  0013AE  6EF6               	movwf	tblptrl,c
 13967  0013B0  0EFE               	movlw	high _hexpowers
 13968  0013B2  20F4               	addwfc	prodh,w,c
 13969  0013B4  6EF7               	movwf	tblptrh,c
 13970  0013B6                     	if	0	;There are less than 3 active tblptr bytes
 13971  0013B6                     	endif
 13972  0013B6  0009               	tblrd		*+
 13973  0013B8  50F5               	movf	tablat,w,c
 13974  0013BA  5C65               	subwf	i2printf@val,w,c
 13975  0013BC  0009               	tblrd		*+
 13976  0013BE  50F5               	movf	tablat,w,c
 13977  0013C0  5866               	subwfb	i2printf@val+1,w,c
 13978  0013C2  0009               	tblrd		*+
 13979  0013C4  50F5               	movf	tablat,w,c
 13980  0013C6  5867               	subwfb	i2printf@val+2,w,c
 13981  0013C8  0009               	tblrd		*+
 13982  0013CA  50F5               	movf	tablat,w,c
 13983  0013CC  5868               	subwfb	i2printf@val+3,w,c
 13984  0013CE  A0D8               	btfss	status,0,c
 13985  0013D0  D00D               	goto	i2l6619
 13986                           
 13987                           ;doprnt.c: 1318: break;
 13988  0013D2  2A6E               	incf	i2printf@c,f,c
 13989  0013D4  D7E4               	goto	i2l6603
 13990  0013D6                     i2l6617:
 13991  0013D6  5069               	movf	i2printf@flag,w,c
 13992  0013D8  0BC0               	andlw	192
 13993                           
 13994                           ; Switch size 1, requested type "space"
 13995                           ; Number of cases is 3, Range of values is 0 to 192
 13996                           ; switch strategies available:
 13997                           ; Name         Instructions Cycles
 13998                           ; simple_byte           10     6 (average)
 13999                           ;	Chosen strategy is simple_byte
 14000  0013DA  0A00               	xorlw	0	; case 0
 14001  0013DC  B4D8               	btfsc	status,2,c
 14002  0013DE  D7BF               	goto	i2l6587
 14003  0013E0  0A80               	xorlw	128	; case 128
 14004  0013E2  B4D8               	btfsc	status,2,c
 14005  0013E4  D7DA               	goto	i2l6601
 14006  0013E6  0A40               	xorlw	64	; case 192
 14007  0013E8  B4D8               	btfsc	status,2,c
 14008  0013EA  D7B9               	goto	i2l6587
 14009  0013EC                     i2l6619:
 14010                           
 14011                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14012  0013EC  5061               	movf	i2printf@width,w,c
 14013  0013EE  1062               	iorwf	i2printf@width+1,w,c
 14014  0013F0  B4D8               	btfsc	status,2,c
 14015  0013F2  D00D               	goto	i2l6625
 14016  0013F4  0E03               	movlw	3
 14017  0013F6  1469               	andwf	i2printf@flag,w,c
 14018  0013F8  6E4F               	movwf	??i2_printf& (0+255),c
 14019  0013FA  0E00               	movlw	0
 14020  0013FC  146A               	andwf	i2printf@flag+1,w,c
 14021  0013FE  6E50               	movwf	(??i2_printf+1)& (0+255),c
 14022  001400  504F               	movf	??i2_printf,w,c
 14023  001402  1050               	iorwf	??i2_printf+1,w,c
 14024  001404  B4D8               	btfsc	status,2,c
 14025  001406  D003               	goto	i2l6625
 14026                           
 14027                           ;doprnt.c: 1346: width--;
 14028  001408  0661               	decf	i2printf@width,f,c
 14029  00140A  A0D8               	btfss	status,0,c
 14030  00140C  0662               	decf	i2printf@width+1,f,c
 14031  00140E                     i2l6625:
 14032                           
 14033                           ;doprnt.c: 1381: if(width > c)
 14034  00140E  0E80               	movlw	128
 14035  001410  BE6E               	btfsc	i2printf@c,7,c
 14036  001412  0E7F               	movlw	127
 14037  001414  6E4F               	movwf	??i2_printf& (0+255),c
 14038  001416  5061               	movf	i2printf@width,w,c
 14039  001418  5C6E               	subwf	i2printf@c,w,c
 14040  00141A  5062               	movf	i2printf@width+1,w,c
 14041  00141C  0A80               	xorlw	128
 14042  00141E  584F               	subwfb	??i2_printf& (0+255),w,c
 14043  001420  B0D8               	btfsc	status,0,c
 14044  001422  D007               	goto	i2l6629
 14045                           
 14046                           ;doprnt.c: 1382: width -= c;
 14047  001424  506E               	movf	i2printf@c,w,c
 14048  001426  5E61               	subwf	i2printf@width,f,c
 14049  001428  0E00               	movlw	0
 14050  00142A  BE6E               	btfsc	i2printf@c,7,c
 14051  00142C  0EFF               	movlw	255
 14052  00142E  5A62               	subwfb	i2printf@width+1,f,c
 14053  001430  D004               	goto	i2l6631
 14054  001432                     i2l6629:
 14055                           
 14056                           ;doprnt.c: 1383: else
 14057                           ;doprnt.c: 1384: width = 0;
 14058  001432  0E00               	movlw	0
 14059  001434  6E62               	movwf	i2printf@width+1,c
 14060  001436  0E00               	movlw	0
 14061  001438  6E61               	movwf	i2printf@width,c
 14062  00143A                     i2l6631:
 14063                           
 14064                           ;doprnt.c: 1387: if(flag & 0x04) {
 14065  00143A  A469               	btfss	i2printf@flag,2,c
 14066  00143C  D018               	goto	i2l6643
 14067                           
 14068                           ;doprnt.c: 1392: if(flag & 0x03)
 14069  00143E  0E03               	movlw	3
 14070  001440  1469               	andwf	i2printf@flag,w,c
 14071  001442  6E4F               	movwf	??i2_printf& (0+255),c
 14072  001444  0E00               	movlw	0
 14073  001446  146A               	andwf	i2printf@flag+1,w,c
 14074  001448  6E50               	movwf	(??i2_printf+1)& (0+255),c
 14075  00144A  504F               	movf	??i2_printf,w,c
 14076  00144C  1050               	iorwf	??i2_printf+1,w,c
 14077  00144E  B4D8               	btfsc	status,2,c
 14078  001450  D003               	goto	i2l6637
 14079                           
 14080                           ;doprnt.c: 1393: (putch('-') );
 14081  001452  0E2D               	movlw	45
 14082  001454  ECCC  F02C         	call	i2_putch
 14083  001458                     i2l6637:
 14084                           
 14085                           ;doprnt.c: 1415: if(width)
 14086  001458  5061               	movf	i2printf@width,w,c
 14087  00145A  1062               	iorwf	i2printf@width+1,w,c
 14088  00145C  B4D8               	btfsc	status,2,c
 14089  00145E  D022               	goto	i2l6653
 14090                           
 14091                           ;doprnt.c: 1417: (putch('0') );
 14092                           
 14093                           ;doprnt.c: 1416: do
 14094  001460  0E30               	movlw	48
 14095  001462  ECCC  F02C         	call	i2_putch
 14096                           
 14097                           ;doprnt.c: 1418: while(--width);
 14098  001466  0661               	decf	i2printf@width,f,c
 14099  001468  A0D8               	btfss	status,0,c
 14100  00146A  0662               	decf	i2printf@width+1,f,c
 14101  00146C  D7F5               	goto	i2l6637
 14102  00146E                     i2l6643:
 14103                           
 14104                           ;doprnt.c: 1422: {
 14105                           ;doprnt.c: 1424: if(width
 14106                           ;doprnt.c: 1428: )
 14107  00146E  5061               	movf	i2printf@width,w,c
 14108  001470  1062               	iorwf	i2printf@width+1,w,c
 14109  001472  B4D8               	btfsc	status,2,c
 14110  001474  D00A               	goto	i2l6649
 14111  001476                     i2l6645:
 14112                           
 14113                           ;doprnt.c: 1430: (putch(' ') );
 14114  001476  0E20               	movlw	32
 14115  001478  ECCC  F02C         	call	i2_putch
 14116                           
 14117                           ;doprnt.c: 1431: while(--width);
 14118  00147C  0661               	decf	i2printf@width,f,c
 14119  00147E  A0D8               	btfss	status,0,c
 14120  001480  0662               	decf	i2printf@width+1,f,c
 14121  001482  5061               	movf	i2printf@width,w,c
 14122  001484  1062               	iorwf	i2printf@width+1,w,c
 14123  001486  A4D8               	btfss	status,2,c
 14124  001488  D7F6               	goto	i2l6645
 14125  00148A                     i2l6649:
 14126                           
 14127                           ;doprnt.c: 1438: if(flag & 0x03)
 14128  00148A  0E03               	movlw	3
 14129  00148C  1469               	andwf	i2printf@flag,w,c
 14130  00148E  6E4F               	movwf	??i2_printf& (0+255),c
 14131  001490  0E00               	movlw	0
 14132  001492  146A               	andwf	i2printf@flag+1,w,c
 14133  001494  6E50               	movwf	(??i2_printf+1)& (0+255),c
 14134  001496  504F               	movf	??i2_printf,w,c
 14135  001498  1050               	iorwf	??i2_printf+1,w,c
 14136  00149A  B4D8               	btfsc	status,2,c
 14137  00149C  D003               	goto	i2l6653
 14138                           
 14139                           ;doprnt.c: 1439: (putch('-') );
 14140  00149E  0E2D               	movlw	45
 14141  0014A0  ECCC  F02C         	call	i2_putch
 14142  0014A4                     i2l6653:
 14143                           
 14144                           ;doprnt.c: 1469: }
 14145                           ;doprnt.c: 1472: prec = c;
 14146  0014A4  506E               	movf	i2printf@c,w,c
 14147  0014A6  6E5B               	movwf	i2printf@prec,c
 14148  0014A8  6A5C               	clrf	i2printf@prec+1,c
 14149  0014AA  BE5B               	btfsc	i2printf@prec,7,c
 14150  0014AC  065C               	decf	i2printf@prec+1,f,c
 14151                           
 14152                           ;doprnt.c: 1474: while(prec--) {
 14153  0014AE  D07F               	goto	i2l6667
 14154  0014B0                     i2l6655:
 14155                           
 14156                           ;doprnt.c: 1486: case 0xC0:
 14157                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14158  0014B0  C05B  F04F         	movff	i2printf@prec,??i2_printf
 14159  0014B4  C05C  F050         	movff	i2printf@prec+1,??i2_printf+1
 14160  0014B8  90D8               	bcf	status,0,c
 14161  0014BA  364F               	rlcf	??i2_printf,f,c
 14162  0014BC  3650               	rlcf	??i2_printf+1,f,c
 14163  0014BE  90D8               	bcf	status,0,c
 14164  0014C0  364F               	rlcf	??i2_printf,f,c
 14165  0014C2  3650               	rlcf	??i2_printf+1,f,c
 14166  0014C4  0EB5               	movlw	low _dpowers
 14167  0014C6  244F               	addwf	??i2_printf,w,c
 14168  0014C8  6EF6               	movwf	tblptrl,c
 14169  0014CA  0EFD               	movlw	high _dpowers
 14170  0014CC  2050               	addwfc	??i2_printf+1,w,c
 14171  0014CE  6EF7               	movwf	tblptrh,c
 14172  0014D0                     	if	0	;There are less than 3 active tblptr bytes
 14173  0014D0                     	endif
 14174  0014D0  0009               	tblrd		*+
 14175  0014D2  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14176  0014D6  0009               	tblrd		*+
 14177  0014D8  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14178  0014DC  0009               	tblrd		*+
 14179  0014DE  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14180  0014E2  000A               	tblrd		*-
 14181  0014E4  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14182  0014E8  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 14183  0014EC  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14184  0014F0  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14185  0014F4  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14186  0014F8  ECDC  F028         	call	i2___lldiv	;wreg free
 14187  0014FC  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14188  001500  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14189  001504  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14190  001508  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14191  00150C  0E0A               	movlw	10
 14192  00150E  6E12               	movwf	i2___llmod@divisor,c
 14193  001510  0E00               	movlw	0
 14194  001512  6E13               	movwf	i2___llmod@divisor+1,c
 14195  001514  0E00               	movlw	0
 14196  001516  6E14               	movwf	i2___llmod@divisor+2,c
 14197  001518  0E00               	movlw	0
 14198  00151A  6E15               	movwf	i2___llmod@divisor+3,c
 14199  00151C  EC03  F02A         	call	i2___llmod	;wreg free
 14200  001520  500E               	movf	?i2___llmod,w,c
 14201  001522  0F30               	addlw	48
 14202  001524  6E6E               	movwf	i2printf@c,c
 14203                           
 14204                           ;doprnt.c: 1491: break;
 14205  001526  D040               	goto	i2l6665
 14206  001528                     i2l6657:
 14207                           
 14208                           ;doprnt.c: 1499: {
 14209                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14210  001528  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 14211  00152C  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14212  001530  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14213  001534  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14214  001538  C05B  F04F         	movff	i2printf@prec,??i2_printf
 14215  00153C  C05C  F050         	movff	i2printf@prec+1,??i2_printf+1
 14216  001540  90D8               	bcf	status,0,c
 14217  001542  364F               	rlcf	??i2_printf,f,c
 14218  001544  3650               	rlcf	??i2_printf+1,f,c
 14219  001546  90D8               	bcf	status,0,c
 14220  001548  364F               	rlcf	??i2_printf,f,c
 14221  00154A  3650               	rlcf	??i2_printf+1,f,c
 14222  00154C  0E2B               	movlw	low _hexpowers
 14223  00154E  244F               	addwf	??i2_printf,w,c
 14224  001550  6EF6               	movwf	tblptrl,c
 14225  001552  0EFE               	movlw	high _hexpowers
 14226  001554  2050               	addwfc	??i2_printf+1,w,c
 14227  001556  6EF7               	movwf	tblptrh,c
 14228  001558                     	if	0	;There are less than 3 active tblptr bytes
 14229  001558                     	endif
 14230  001558  0009               	tblrd		*+
 14231  00155A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14232  00155E  0009               	tblrd		*+
 14233  001560  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14234  001564  0009               	tblrd		*+
 14235  001566  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14236  00156A  000A               	tblrd		*-
 14237  00156C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14238  001570  ECDC  F028         	call	i2___lldiv	;wreg free
 14239  001574  5001               	movf	?i2___lldiv,w,c
 14240  001576  0B0F               	andlw	15
 14241  001578  6E58               	movwf	i2printf@idx,c
 14242                           
 14243                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14244  00157A  5058               	movf	i2printf@idx,w,c
 14245  00157C  0D01               	mullw	1
 14246  00157E  0E35               	movlw	low STR_22
 14247  001580  24F3               	addwf	prodl,w,c
 14248  001582  6EF6               	movwf	tblptrl,c
 14249  001584  0EFF               	movlw	high STR_22
 14250  001586  20F4               	addwfc	prodh,w,c
 14251  001588  6EF7               	movwf	tblptrh,c
 14252  00158A                     	if	0	;There are less than 3 active tblptr bytes
 14253  00158A                     	endif
 14254  00158A  0008               	tblrd		*
 14255  00158C  CFF5 F06E          	movff	tablat,i2printf@c
 14256                           
 14257                           ;doprnt.c: 1523: }
 14258                           
 14259                           ;doprnt.c: 1508: }
 14260                           ;doprnt.c: 1510: break;
 14261  001590  D00B               	goto	i2l6665
 14262  001592                     i2l6663:
 14263  001592  5069               	movf	i2printf@flag,w,c
 14264  001594  0BC0               	andlw	192
 14265                           
 14266                           ; Switch size 1, requested type "space"
 14267                           ; Number of cases is 3, Range of values is 0 to 192
 14268                           ; switch strategies available:
 14269                           ; Name         Instructions Cycles
 14270                           ; simple_byte           10     6 (average)
 14271                           ;	Chosen strategy is simple_byte
 14272  001596  0A00               	xorlw	0	; case 0
 14273  001598  B4D8               	btfsc	status,2,c
 14274  00159A  D78A               	goto	i2l6655
 14275  00159C  0A80               	xorlw	128	; case 128
 14276  00159E  B4D8               	btfsc	status,2,c
 14277  0015A0  D7C3               	goto	i2l6657
 14278  0015A2  0A40               	xorlw	64	; case 192
 14279  0015A4  B4D8               	btfsc	status,2,c
 14280  0015A6  D784               	goto	i2l6655
 14281  0015A8                     i2l6665:
 14282                           
 14283                           ;doprnt.c: 1524: (putch(c) );
 14284  0015A8  506E               	movf	i2printf@c,w,c
 14285  0015AA  ECCC  F02C         	call	i2_putch
 14286  0015AE                     i2l6667:
 14287  0015AE  065B               	decf	i2printf@prec,f,c
 14288  0015B0  A0D8               	btfss	status,0,c
 14289  0015B2  065C               	decf	i2printf@prec+1,f,c
 14290  0015B4  285B               	incf	i2printf@prec,w,c
 14291  0015B6  E1ED               	bnz	i2l6663
 14292  0015B8  285C               	incf	i2printf@prec+1,w,c
 14293  0015BA  A4D8               	btfss	status,2,c
 14294  0015BC  D7EA               	goto	i2l6663
 14295  0015BE                     i2l6669:
 14296  0015BE  C049  FFF6         	movff	i2printf@f,tblptrl
 14297  0015C2  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 14298  0015C6  4A49               	infsnz	i2printf@f,f,c
 14299  0015C8  2A4A               	incf	i2printf@f+1,f,c
 14300  0015CA                     	if	0	;tblptru may be non-zero
 14301  0015CA                     	endif
 14302  0015CA                     	if	0	;tblptru may be non-zero
 14303  0015CA                     	endif
 14304  0015CA  0008               	tblrd		*
 14305  0015CC  CFF5 F06E          	movff	tablat,i2printf@c
 14306  0015D0  506E               	movf	i2printf@c,w,c
 14307  0015D2  B4D8               	btfsc	status,2,c
 14308  0015D4  0012               	return	
 14309  0015D6  EF04  F006         	goto	i2l6379
 14310  0015DA                     __end_ofi2_printf:
 14311                           	opt stack 0
 14312                           pclatu	equ	0xFFB
 14313                           pclath	equ	0xFFA
 14314                           tblptru	equ	0xFF8
 14315                           tblptrh	equ	0xFF7
 14316                           tblptrl	equ	0xFF6
 14317                           tablat	equ	0xFF5
 14318                           prodh	equ	0xFF4
 14319                           prodl	equ	0xFF3
 14320                           intcon	equ	0xFF2
 14321                           intcon2	equ	0xFF1
 14322                           intcon3	equ	0xFF0
 14323                           postinc0	equ	0xFEE
 14324                           fsr0h	equ	0xFEA
 14325                           fsr0l	equ	0xFE9
 14326                           wreg	equ	0xFE8
 14327                           fsr1h	equ	0xFE2
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           postdec2	equ	0xFDD
 14332                           fsr2h	equ	0xFDA
 14333                           fsr2l	equ	0xFD9
 14334                           status	equ	0xFD8
 14335                           
 14336 ;; *************** function i2_scale *****************
 14337 ;; Defined at:
 14338 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14339 ;; Parameters:    Size  Location     Type
 14340 ;;  scl             1    wreg     char 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  scl             1   41[COMRAM] char 
 14343 ;; Return value:  Size  Location     Type
 14344 ;;                  3   35[COMRAM] char 
 14345 ;; Registers used:
 14346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : 0/0
 14349 ;;		On exit  : 0/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14353 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14355 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;Total ram usage:        7 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    2
 14359 ;; This function calls:
 14360 ;;		i2___awdiv
 14361 ;;		i2___awmod
 14362 ;;		i2___ftmul
 14363 ;;		i2___wmul
 14364 ;; This function is called by:
 14365 ;;		i2_printf
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           	psect	text44
 14370  00235A                     __ptext44:
 14371                           	opt stack 0
 14372  00235A                     i2_scale:
 14373                           	opt stack 21
 14374                           
 14375                           ;incstack = 0
 14376                           ;i2scale@scl stored from wreg
 14377  00235A  6E2A               	movwf	i2scale@scl,c
 14378                           
 14379                           ;doprnt.c: 428: if(scl < 0) {
 14380  00235C  AE2A               	btfss	i2scale@scl,7,c
 14381  00235E  D0FB               	goto	i2l5871
 14382                           
 14383                           ;doprnt.c: 429: scl = -scl;
 14384  002360  6C2A               	negf	i2scale@scl,c
 14385                           
 14386                           ;doprnt.c: 430: if(scl>=110)
 14387  002362  502A               	movf	i2scale@scl,w,c
 14388  002364  0A80               	xorlw	128
 14389  002366  0F12               	addlw	-238
 14390  002368  A0D8               	btfss	status,0,c
 14391  00236A  D091               	goto	i2l5861
 14392                           
 14393                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14394  00236C  0E00               	movlw	0
 14395  00236E  6E12               	movwf	i2___wmul@multiplicand+1,c
 14396  002370  0E03               	movlw	3
 14397  002372  6E11               	movwf	i2___wmul@multiplicand,c
 14398  002374  0E00               	movlw	0
 14399  002376  6E0A               	movwf	i2___awdiv@divisor+1,c
 14400  002378  0E0A               	movlw	10
 14401  00237A  6E09               	movwf	i2___awdiv@divisor,c
 14402  00237C  0E00               	movlw	0
 14403  00237E  6E04               	movwf	i2___awmod@divisor+1,c
 14404  002380  0E64               	movlw	100
 14405  002382  6E03               	movwf	i2___awmod@divisor,c
 14406  002384  502A               	movf	i2scale@scl,w,c
 14407  002386  6E01               	movwf	i2___awmod@dividend,c
 14408  002388  6A02               	clrf	i2___awmod@dividend+1,c
 14409  00238A  BE01               	btfsc	i2___awmod@dividend,7,c
 14410  00238C  0602               	decf	i2___awmod@dividend+1,f,c
 14411  00238E  EC97  F029         	call	i2___awmod	;wreg free
 14412  002392  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14413  002396  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14414  00239A  EC9A  F028         	call	i2___awdiv	;wreg free
 14415  00239E  0E09               	movlw	9
 14416  0023A0  2407               	addwf	?i2___awdiv,w,c
 14417  0023A2  6E0F               	movwf	i2___wmul@multiplier,c
 14418  0023A4  0E00               	movlw	0
 14419  0023A6  2008               	addwfc	?i2___awdiv+1,w,c
 14420  0023A8  6E10               	movwf	i2___wmul@multiplier+1,c
 14421  0023AA  EC58  F02C         	call	i2___wmul	;wreg free
 14422  0023AE  0EDD               	movlw	low __npowers_
 14423  0023B0  240F               	addwf	?i2___wmul,w,c
 14424  0023B2  6EF6               	movwf	tblptrl,c
 14425  0023B4  0EFD               	movlw	high __npowers_
 14426  0023B6  2010               	addwfc	?i2___wmul+1,w,c
 14427  0023B8  6EF7               	movwf	tblptrh,c
 14428  0023BA                     	if	0	;There are less than 3 active tblptr bytes
 14429  0023BA                     	endif
 14430  0023BA  0009               	tblrd		*+
 14431  0023BC  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14432  0023C0  0009               	tblrd		*+
 14433  0023C2  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14434  0023C6  000A               	tblrd		*-
 14435  0023C8  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14436  0023CC  0E00               	movlw	0
 14437  0023CE  6E0A               	movwf	i2___awdiv@divisor+1,c
 14438  0023D0  0E64               	movlw	100
 14439  0023D2  6E09               	movwf	i2___awdiv@divisor,c
 14440  0023D4  502A               	movf	i2scale@scl,w,c
 14441  0023D6  6E07               	movwf	i2___awdiv@dividend,c
 14442  0023D8  6A08               	clrf	i2___awdiv@dividend+1,c
 14443  0023DA  BE07               	btfsc	i2___awdiv@dividend,7,c
 14444  0023DC  0608               	decf	i2___awdiv@dividend+1,f,c
 14445  0023DE  EC9A  F028         	call	i2___awdiv	;wreg free
 14446  0023E2  0E12               	movlw	18
 14447  0023E4  2407               	addwf	?i2___awdiv,w,c
 14448  0023E6  6E0F               	movwf	i2___wmul@multiplier,c
 14449  0023E8  0E00               	movlw	0
 14450  0023EA  2008               	addwfc	?i2___awdiv+1,w,c
 14451  0023EC  6E10               	movwf	i2___wmul@multiplier+1,c
 14452  0023EE  0E00               	movlw	0
 14453  0023F0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14454  0023F2  0E03               	movlw	3
 14455  0023F4  6E11               	movwf	i2___wmul@multiplicand,c
 14456  0023F6  EC58  F02C         	call	i2___wmul	;wreg free
 14457  0023FA  0EDD               	movlw	low __npowers_
 14458  0023FC  240F               	addwf	?i2___wmul,w,c
 14459  0023FE  6EF6               	movwf	tblptrl,c
 14460  002400  0EFD               	movlw	high __npowers_
 14461  002402  2010               	addwfc	?i2___wmul+1,w,c
 14462  002404  6EF7               	movwf	tblptrh,c
 14463  002406                     	if	0	;There are less than 3 active tblptr bytes
 14464  002406                     	endif
 14465  002406  0009               	tblrd		*+
 14466  002408  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14467  00240C  0009               	tblrd		*+
 14468  00240E  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14469  002412  000A               	tblrd		*-
 14470  002414  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14471  002418  ECF8  F022         	call	i2___ftmul	;wreg free
 14472  00241C  C015  F027         	movff	?i2___ftmul,i2_scale$1528
 14473  002420  C016  F028         	movff	?i2___ftmul+1,i2_scale$1528+1
 14474  002424  C017  F029         	movff	?i2___ftmul+2,i2_scale$1528+2
 14475                           
 14476                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14477  002428  C027  F015         	movff	i2_scale$1528,i2___ftmul@f1
 14478  00242C  C028  F016         	movff	i2_scale$1528+1,i2___ftmul@f1+1
 14479  002430  C029  F017         	movff	i2_scale$1528+2,i2___ftmul@f1+2
 14480  002434  0E00               	movlw	0
 14481  002436  6E12               	movwf	i2___wmul@multiplicand+1,c
 14482  002438  0E03               	movlw	3
 14483  00243A  6E11               	movwf	i2___wmul@multiplicand,c
 14484  00243C  0E00               	movlw	0
 14485  00243E  6E04               	movwf	i2___awmod@divisor+1,c
 14486  002440  0E0A               	movlw	10
 14487  002442  6E03               	movwf	i2___awmod@divisor,c
 14488  002444  502A               	movf	i2scale@scl,w,c
 14489  002446  6E01               	movwf	i2___awmod@dividend,c
 14490  002448  6A02               	clrf	i2___awmod@dividend+1,c
 14491  00244A  BE01               	btfsc	i2___awmod@dividend,7,c
 14492  00244C  0602               	decf	i2___awmod@dividend+1,f,c
 14493  00244E  EC97  F029         	call	i2___awmod	;wreg free
 14494  002452  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14495  002456  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14496  00245A  EC58  F02C         	call	i2___wmul	;wreg free
 14497  00245E  0EDD               	movlw	low __npowers_
 14498  002460  240F               	addwf	?i2___wmul,w,c
 14499  002462  6EF6               	movwf	tblptrl,c
 14500  002464  0EFD               	movlw	high __npowers_
 14501  002466  2010               	addwfc	?i2___wmul+1,w,c
 14502  002468  6EF7               	movwf	tblptrh,c
 14503  00246A                     	if	0	;There are less than 3 active tblptr bytes
 14504  00246A                     	endif
 14505  00246A  0009               	tblrd		*+
 14506  00246C  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14507  002470  0009               	tblrd		*+
 14508  002472  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14509  002476  000A               	tblrd		*-
 14510  002478  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14511  00247C  ECF8  F022         	call	i2___ftmul	;wreg free
 14512  002480  C015  F024         	movff	?i2___ftmul,?i2_scale
 14513  002484  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14514  002488  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14515  00248C  0012               	return	
 14516  00248E                     i2l5861:
 14517                           
 14518                           ;doprnt.c: 432: else if(scl > 10)
 14519  00248E  502A               	movf	i2scale@scl,w,c
 14520  002490  0A80               	xorlw	128
 14521  002492  0F75               	addlw	-139
 14522  002494  A0D8               	btfss	status,0,c
 14523  002496  D04D               	goto	i2l5867
 14524                           
 14525                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14526  002498  0E00               	movlw	0
 14527  00249A  6E0A               	movwf	i2___awdiv@divisor+1,c
 14528  00249C  0E0A               	movlw	10
 14529  00249E  6E09               	movwf	i2___awdiv@divisor,c
 14530  0024A0  502A               	movf	i2scale@scl,w,c
 14531  0024A2  6E07               	movwf	i2___awdiv@dividend,c
 14532  0024A4  6A08               	clrf	i2___awdiv@dividend+1,c
 14533  0024A6  BE07               	btfsc	i2___awdiv@dividend,7,c
 14534  0024A8  0608               	decf	i2___awdiv@dividend+1,f,c
 14535  0024AA  EC9A  F028         	call	i2___awdiv	;wreg free
 14536  0024AE  0E09               	movlw	9
 14537  0024B0  2407               	addwf	?i2___awdiv,w,c
 14538  0024B2  6E0F               	movwf	i2___wmul@multiplier,c
 14539  0024B4  0E00               	movlw	0
 14540  0024B6  2008               	addwfc	?i2___awdiv+1,w,c
 14541  0024B8  6E10               	movwf	i2___wmul@multiplier+1,c
 14542  0024BA  0E00               	movlw	0
 14543  0024BC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14544  0024BE  0E03               	movlw	3
 14545  0024C0  6E11               	movwf	i2___wmul@multiplicand,c
 14546  0024C2  EC58  F02C         	call	i2___wmul	;wreg free
 14547  0024C6  0EDD               	movlw	low __npowers_
 14548  0024C8  240F               	addwf	?i2___wmul,w,c
 14549  0024CA  6EF6               	movwf	tblptrl,c
 14550  0024CC  0EFD               	movlw	high __npowers_
 14551  0024CE  2010               	addwfc	?i2___wmul+1,w,c
 14552  0024D0  6EF7               	movwf	tblptrh,c
 14553  0024D2                     	if	0	;There are less than 3 active tblptr bytes
 14554  0024D2                     	endif
 14555  0024D2  0009               	tblrd		*+
 14556  0024D4  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14557  0024D8  0009               	tblrd		*+
 14558  0024DA  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14559  0024DE  000A               	tblrd		*-
 14560  0024E0  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14561  0024E4  0E00               	movlw	0
 14562  0024E6  6E12               	movwf	i2___wmul@multiplicand+1,c
 14563  0024E8  0E03               	movlw	3
 14564  0024EA  6E11               	movwf	i2___wmul@multiplicand,c
 14565  0024EC  0E00               	movlw	0
 14566  0024EE  6E04               	movwf	i2___awmod@divisor+1,c
 14567  0024F0  0E0A               	movlw	10
 14568  0024F2  6E03               	movwf	i2___awmod@divisor,c
 14569  0024F4  502A               	movf	i2scale@scl,w,c
 14570  0024F6  6E01               	movwf	i2___awmod@dividend,c
 14571  0024F8  6A02               	clrf	i2___awmod@dividend+1,c
 14572  0024FA  BE01               	btfsc	i2___awmod@dividend,7,c
 14573  0024FC  0602               	decf	i2___awmod@dividend+1,f,c
 14574  0024FE  EC97  F029         	call	i2___awmod	;wreg free
 14575  002502  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14576  002506  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14577  00250A  EC58  F02C         	call	i2___wmul	;wreg free
 14578  00250E  0EDD               	movlw	low __npowers_
 14579  002510  240F               	addwf	?i2___wmul,w,c
 14580  002512  6EF6               	movwf	tblptrl,c
 14581  002514  0EFD               	movlw	high __npowers_
 14582  002516  2010               	addwfc	?i2___wmul+1,w,c
 14583  002518  6EF7               	movwf	tblptrh,c
 14584  00251A                     	if	0	;There are less than 3 active tblptr bytes
 14585  00251A                     	endif
 14586  00251A  0009               	tblrd		*+
 14587  00251C  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14588  002520  0009               	tblrd		*+
 14589  002522  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14590  002526  000A               	tblrd		*-
 14591  002528  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14592  00252C  ECF8  F022         	call	i2___ftmul	;wreg free
 14593  002530  D7A7               	goto	L26
 14594  002532                     i2l5867:
 14595                           
 14596                           ;doprnt.c: 434: return _npowers_[scl];
 14597  002532  502A               	movf	i2scale@scl,w,c
 14598  002534  0D03               	mullw	3
 14599  002536  0EDD               	movlw	low __npowers_
 14600  002538  24F3               	addwf	prodl,w,c
 14601  00253A  6EF6               	movwf	tblptrl,c
 14602  00253C  0EFD               	movlw	high __npowers_
 14603  00253E  20F4               	addwfc	prodh,w,c
 14604  002540  6EF7               	movwf	tblptrh,c
 14605  002542                     	if	0	;There are less than 3 active tblptr bytes
 14606  002542                     	endif
 14607  002542  0009               	tblrd		*+
 14608  002544  CFF5 F024          	movff	tablat,?i2_scale
 14609  002548  0009               	tblrd		*+
 14610  00254A  CFF5 F025          	movff	tablat,?i2_scale+1
 14611  00254E  000A               	tblrd		*-
 14612  002550  CFF5 F026          	movff	tablat,?i2_scale+2
 14613  002554  0012               	return	
 14614  002556                     i2l5871:
 14615                           
 14616                           ;doprnt.c: 435: }
 14617                           ;doprnt.c: 436: if(scl>=110)
 14618  002556  502A               	movf	i2scale@scl,w,c
 14619  002558  0A80               	xorlw	128
 14620  00255A  0F12               	addlw	-238
 14621  00255C  A0D8               	btfss	status,0,c
 14622  00255E  D091               	goto	i2l5879
 14623                           
 14624                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14625  002560  0E00               	movlw	0
 14626  002562  6E12               	movwf	i2___wmul@multiplicand+1,c
 14627  002564  0E03               	movlw	3
 14628  002566  6E11               	movwf	i2___wmul@multiplicand,c
 14629  002568  0E00               	movlw	0
 14630  00256A  6E0A               	movwf	i2___awdiv@divisor+1,c
 14631  00256C  0E0A               	movlw	10
 14632  00256E  6E09               	movwf	i2___awdiv@divisor,c
 14633  002570  0E00               	movlw	0
 14634  002572  6E04               	movwf	i2___awmod@divisor+1,c
 14635  002574  0E64               	movlw	100
 14636  002576  6E03               	movwf	i2___awmod@divisor,c
 14637  002578  502A               	movf	i2scale@scl,w,c
 14638  00257A  6E01               	movwf	i2___awmod@dividend,c
 14639  00257C  6A02               	clrf	i2___awmod@dividend+1,c
 14640  00257E  BE01               	btfsc	i2___awmod@dividend,7,c
 14641  002580  0602               	decf	i2___awmod@dividend+1,f,c
 14642  002582  EC97  F029         	call	i2___awmod	;wreg free
 14643  002586  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14644  00258A  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14645  00258E  EC9A  F028         	call	i2___awdiv	;wreg free
 14646  002592  0E09               	movlw	9
 14647  002594  2407               	addwf	?i2___awdiv,w,c
 14648  002596  6E0F               	movwf	i2___wmul@multiplier,c
 14649  002598  0E00               	movlw	0
 14650  00259A  2008               	addwfc	?i2___awdiv+1,w,c
 14651  00259C  6E10               	movwf	i2___wmul@multiplier+1,c
 14652  00259E  EC58  F02C         	call	i2___wmul	;wreg free
 14653  0025A2  0E04               	movlw	low __powers_
 14654  0025A4  240F               	addwf	?i2___wmul,w,c
 14655  0025A6  6EF6               	movwf	tblptrl,c
 14656  0025A8  0EFE               	movlw	high __powers_
 14657  0025AA  2010               	addwfc	?i2___wmul+1,w,c
 14658  0025AC  6EF7               	movwf	tblptrh,c
 14659  0025AE                     	if	0	;There are less than 3 active tblptr bytes
 14660  0025AE                     	endif
 14661  0025AE  0009               	tblrd		*+
 14662  0025B0  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14663  0025B4  0009               	tblrd		*+
 14664  0025B6  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14665  0025BA  000A               	tblrd		*-
 14666  0025BC  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14667  0025C0  0E00               	movlw	0
 14668  0025C2  6E0A               	movwf	i2___awdiv@divisor+1,c
 14669  0025C4  0E64               	movlw	100
 14670  0025C6  6E09               	movwf	i2___awdiv@divisor,c
 14671  0025C8  502A               	movf	i2scale@scl,w,c
 14672  0025CA  6E07               	movwf	i2___awdiv@dividend,c
 14673  0025CC  6A08               	clrf	i2___awdiv@dividend+1,c
 14674  0025CE  BE07               	btfsc	i2___awdiv@dividend,7,c
 14675  0025D0  0608               	decf	i2___awdiv@dividend+1,f,c
 14676  0025D2  EC9A  F028         	call	i2___awdiv	;wreg free
 14677  0025D6  0E12               	movlw	18
 14678  0025D8  2407               	addwf	?i2___awdiv,w,c
 14679  0025DA  6E0F               	movwf	i2___wmul@multiplier,c
 14680  0025DC  0E00               	movlw	0
 14681  0025DE  2008               	addwfc	?i2___awdiv+1,w,c
 14682  0025E0  6E10               	movwf	i2___wmul@multiplier+1,c
 14683  0025E2  0E00               	movlw	0
 14684  0025E4  6E12               	movwf	i2___wmul@multiplicand+1,c
 14685  0025E6  0E03               	movlw	3
 14686  0025E8  6E11               	movwf	i2___wmul@multiplicand,c
 14687  0025EA  EC58  F02C         	call	i2___wmul	;wreg free
 14688  0025EE  0E04               	movlw	low __powers_
 14689  0025F0  240F               	addwf	?i2___wmul,w,c
 14690  0025F2  6EF6               	movwf	tblptrl,c
 14691  0025F4  0EFE               	movlw	high __powers_
 14692  0025F6  2010               	addwfc	?i2___wmul+1,w,c
 14693  0025F8  6EF7               	movwf	tblptrh,c
 14694  0025FA                     	if	0	;There are less than 3 active tblptr bytes
 14695  0025FA                     	endif
 14696  0025FA  0009               	tblrd		*+
 14697  0025FC  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14698  002600  0009               	tblrd		*+
 14699  002602  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14700  002606  000A               	tblrd		*-
 14701  002608  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14702  00260C  ECF8  F022         	call	i2___ftmul	;wreg free
 14703  002610  C015  F027         	movff	?i2___ftmul,i2_scale$1528
 14704  002614  C016  F028         	movff	?i2___ftmul+1,i2_scale$1528+1
 14705  002618  C017  F029         	movff	?i2___ftmul+2,i2_scale$1528+2
 14706                           
 14707                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14708  00261C  C027  F015         	movff	i2_scale$1528,i2___ftmul@f1
 14709  002620  C028  F016         	movff	i2_scale$1528+1,i2___ftmul@f1+1
 14710  002624  C029  F017         	movff	i2_scale$1528+2,i2___ftmul@f1+2
 14711  002628  0E00               	movlw	0
 14712  00262A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14713  00262C  0E03               	movlw	3
 14714  00262E  6E11               	movwf	i2___wmul@multiplicand,c
 14715  002630  0E00               	movlw	0
 14716  002632  6E04               	movwf	i2___awmod@divisor+1,c
 14717  002634  0E0A               	movlw	10
 14718  002636  6E03               	movwf	i2___awmod@divisor,c
 14719  002638  502A               	movf	i2scale@scl,w,c
 14720  00263A  6E01               	movwf	i2___awmod@dividend,c
 14721  00263C  6A02               	clrf	i2___awmod@dividend+1,c
 14722  00263E  BE01               	btfsc	i2___awmod@dividend,7,c
 14723  002640  0602               	decf	i2___awmod@dividend+1,f,c
 14724  002642  EC97  F029         	call	i2___awmod	;wreg free
 14725  002646  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14726  00264A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14727  00264E  EC58  F02C         	call	i2___wmul	;wreg free
 14728  002652  0E04               	movlw	low __powers_
 14729  002654  240F               	addwf	?i2___wmul,w,c
 14730  002656  6EF6               	movwf	tblptrl,c
 14731  002658  0EFE               	movlw	high __powers_
 14732  00265A  2010               	addwfc	?i2___wmul+1,w,c
 14733  00265C  6EF7               	movwf	tblptrh,c
 14734  00265E                     	if	0	;There are less than 3 active tblptr bytes
 14735  00265E                     	endif
 14736  00265E  0009               	tblrd		*+
 14737  002660  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14738  002664  0009               	tblrd		*+
 14739  002666  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14740  00266A  000A               	tblrd		*-
 14741  00266C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14742  002670  ECF8  F022         	call	i2___ftmul	;wreg free
 14743  002674  C015  F024         	movff	?i2___ftmul,?i2_scale
 14744  002678  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14745  00267C  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14746  002680  0012               	return	
 14747  002682                     i2l5879:
 14748                           
 14749                           ;doprnt.c: 438: else if(scl > 10)
 14750  002682  502A               	movf	i2scale@scl,w,c
 14751  002684  0A80               	xorlw	128
 14752  002686  0F75               	addlw	-139
 14753  002688  A0D8               	btfss	status,0,c
 14754  00268A  D04D               	goto	i2l5885
 14755                           
 14756                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14757  00268C  0E00               	movlw	0
 14758  00268E  6E0A               	movwf	i2___awdiv@divisor+1,c
 14759  002690  0E0A               	movlw	10
 14760  002692  6E09               	movwf	i2___awdiv@divisor,c
 14761  002694  502A               	movf	i2scale@scl,w,c
 14762  002696  6E07               	movwf	i2___awdiv@dividend,c
 14763  002698  6A08               	clrf	i2___awdiv@dividend+1,c
 14764  00269A  BE07               	btfsc	i2___awdiv@dividend,7,c
 14765  00269C  0608               	decf	i2___awdiv@dividend+1,f,c
 14766  00269E  EC9A  F028         	call	i2___awdiv	;wreg free
 14767  0026A2  0E09               	movlw	9
 14768  0026A4  2407               	addwf	?i2___awdiv,w,c
 14769  0026A6  6E0F               	movwf	i2___wmul@multiplier,c
 14770  0026A8  0E00               	movlw	0
 14771  0026AA  2008               	addwfc	?i2___awdiv+1,w,c
 14772  0026AC  6E10               	movwf	i2___wmul@multiplier+1,c
 14773  0026AE  0E00               	movlw	0
 14774  0026B0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14775  0026B2  0E03               	movlw	3
 14776  0026B4  6E11               	movwf	i2___wmul@multiplicand,c
 14777  0026B6  EC58  F02C         	call	i2___wmul	;wreg free
 14778  0026BA  0E04               	movlw	low __powers_
 14779  0026BC  240F               	addwf	?i2___wmul,w,c
 14780  0026BE  6EF6               	movwf	tblptrl,c
 14781  0026C0  0EFE               	movlw	high __powers_
 14782  0026C2  2010               	addwfc	?i2___wmul+1,w,c
 14783  0026C4  6EF7               	movwf	tblptrh,c
 14784  0026C6                     	if	0	;There are less than 3 active tblptr bytes
 14785  0026C6                     	endif
 14786  0026C6  0009               	tblrd		*+
 14787  0026C8  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14788  0026CC  0009               	tblrd		*+
 14789  0026CE  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14790  0026D2  000A               	tblrd		*-
 14791  0026D4  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14792  0026D8  0E00               	movlw	0
 14793  0026DA  6E12               	movwf	i2___wmul@multiplicand+1,c
 14794  0026DC  0E03               	movlw	3
 14795  0026DE  6E11               	movwf	i2___wmul@multiplicand,c
 14796  0026E0  0E00               	movlw	0
 14797  0026E2  6E04               	movwf	i2___awmod@divisor+1,c
 14798  0026E4  0E0A               	movlw	10
 14799  0026E6  6E03               	movwf	i2___awmod@divisor,c
 14800  0026E8  502A               	movf	i2scale@scl,w,c
 14801  0026EA  6E01               	movwf	i2___awmod@dividend,c
 14802  0026EC  6A02               	clrf	i2___awmod@dividend+1,c
 14803  0026EE  BE01               	btfsc	i2___awmod@dividend,7,c
 14804  0026F0  0602               	decf	i2___awmod@dividend+1,f,c
 14805  0026F2  EC97  F029         	call	i2___awmod	;wreg free
 14806  0026F6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14807  0026FA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14808  0026FE  EC58  F02C         	call	i2___wmul	;wreg free
 14809  002702  0E04               	movlw	low __powers_
 14810  002704  240F               	addwf	?i2___wmul,w,c
 14811  002706  6EF6               	movwf	tblptrl,c
 14812  002708  0EFE               	movlw	high __powers_
 14813  00270A  2010               	addwfc	?i2___wmul+1,w,c
 14814  00270C  6EF7               	movwf	tblptrh,c
 14815  00270E                     	if	0	;There are less than 3 active tblptr bytes
 14816  00270E                     	endif
 14817  00270E  0009               	tblrd		*+
 14818  002710  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14819  002714  0009               	tblrd		*+
 14820  002716  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14821  00271A  000A               	tblrd		*-
 14822  00271C  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14823  002720  ECF8  F022         	call	i2___ftmul	;wreg free
 14824  002724  D7A7               	goto	L27
 14825  002726                     i2l5885:
 14826                           
 14827                           ;doprnt.c: 440: return _powers_[scl];
 14828  002726  502A               	movf	i2scale@scl,w,c
 14829  002728  0D03               	mullw	3
 14830  00272A  0E04               	movlw	low __powers_
 14831  00272C  24F3               	addwf	prodl,w,c
 14832  00272E  6EF6               	movwf	tblptrl,c
 14833  002730  0EFE               	movlw	high __powers_
 14834  002732  20F4               	addwfc	prodh,w,c
 14835  002734  6EF7               	movwf	tblptrh,c
 14836  002736                     	if	0	;There are less than 3 active tblptr bytes
 14837  002736                     	endif
 14838  002736  0009               	tblrd		*+
 14839  002738  CFF5 F024          	movff	tablat,?i2_scale
 14840  00273C  0009               	tblrd		*+
 14841  00273E  CFF5 F025          	movff	tablat,?i2_scale+1
 14842  002742  000A               	tblrd		*-
 14843  002744  CFF5 F026          	movff	tablat,?i2_scale+2
 14844  002748  0012               	return	
 14845  00274A                     __end_ofi2_scale:
 14846                           	opt stack 0
 14847                           pclatu	equ	0xFFB
 14848                           pclath	equ	0xFFA
 14849                           tblptru	equ	0xFF8
 14850                           tblptrh	equ	0xFF7
 14851                           tblptrl	equ	0xFF6
 14852                           tablat	equ	0xFF5
 14853                           prodh	equ	0xFF4
 14854                           prodl	equ	0xFF3
 14855                           intcon	equ	0xFF2
 14856                           intcon2	equ	0xFF1
 14857                           intcon3	equ	0xFF0
 14858                           postinc0	equ	0xFEE
 14859                           fsr0h	equ	0xFEA
 14860                           fsr0l	equ	0xFE9
 14861                           wreg	equ	0xFE8
 14862                           fsr1h	equ	0xFE2
 14863                           fsr1l	equ	0xFE1
 14864                           indf2	equ	0xFDF
 14865                           postinc2	equ	0xFDE
 14866                           postdec2	equ	0xFDD
 14867                           fsr2h	equ	0xFDA
 14868                           fsr2l	equ	0xFD9
 14869                           status	equ	0xFD8
 14870                           
 14871 ;; *************** function i2_putch *****************
 14872 ;; Defined at:
 14873 ;;		line 31 in file "lcd.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  data            1    wreg     unsigned char 
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;  data            1    2[COMRAM] unsigned char 
 14878 ;; Return value:  Size  Location     Type
 14879 ;;                  1    wreg      void 
 14880 ;; Registers used:
 14881 ;;		wreg, status,2, status,0, cstack
 14882 ;; Tracked objects:
 14883 ;;		On entry : 0/0
 14884 ;;		On exit  : 0/0
 14885 ;;		Unchanged: 0/0
 14886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14891 ;;Total ram usage:        1 bytes
 14892 ;; Hardware stack levels used:    1
 14893 ;; Hardware stack levels required when called:    1
 14894 ;; This function calls:
 14895 ;;		i2_lcdNibble
 14896 ;; This function is called by:
 14897 ;;		i2_printf
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           	psect	text45
 14902  005998                     __ptext45:
 14903                           	opt stack 0
 14904  005998                     i2_putch:
 14905                           	opt stack 22
 14906                           
 14907                           ;incstack = 0
 14908                           ;i2putch@data stored from wreg
 14909  005998  6E03               	movwf	i2putch@data,c
 14910                           
 14911                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 14912  00599A  848C               	bsf	3980,2,c	;volatile
 14913                           
 14914                           ;lcd.c: 33: lcdNibble(data);
 14915  00599C  5003               	movf	i2putch@data,w,c
 14916  00599E  ECEC  F02A         	call	i2_lcdNibble
 14917  0059A2  0012               	return		;funcret
 14918  0059A4                     __end_ofi2_putch:
 14919                           	opt stack 0
 14920                           pclatu	equ	0xFFB
 14921                           pclath	equ	0xFFA
 14922                           tblptru	equ	0xFF8
 14923                           tblptrh	equ	0xFF7
 14924                           tblptrl	equ	0xFF6
 14925                           tablat	equ	0xFF5
 14926                           prodh	equ	0xFF4
 14927                           prodl	equ	0xFF3
 14928                           intcon	equ	0xFF2
 14929                           intcon2	equ	0xFF1
 14930                           intcon3	equ	0xFF0
 14931                           postinc0	equ	0xFEE
 14932                           fsr0h	equ	0xFEA
 14933                           fsr0l	equ	0xFE9
 14934                           wreg	equ	0xFE8
 14935                           fsr1h	equ	0xFE2
 14936                           fsr1l	equ	0xFE1
 14937                           indf2	equ	0xFDF
 14938                           postinc2	equ	0xFDE
 14939                           postdec2	equ	0xFDD
 14940                           fsr2h	equ	0xFDA
 14941                           fsr2l	equ	0xFD9
 14942                           status	equ	0xFD8
 14943                           
 14944 ;; *************** function i2_isdigit *****************
 14945 ;; Defined at:
 14946 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14947 ;; Parameters:    Size  Location     Type
 14948 ;;  c               1    wreg     unsigned char 
 14949 ;; Auto vars:     Size  Location     Type
 14950 ;;  c               1    2[COMRAM] unsigned char 
 14951 ;; Return value:  Size  Location     Type
 14952 ;;		None               void
 14953 ;; Registers used:
 14954 ;;		wreg, status,2, status,0
 14955 ;; Tracked objects:
 14956 ;;		On entry : 0/0
 14957 ;;		On exit  : 0/0
 14958 ;;		Unchanged: 0/0
 14959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;Total ram usage:        3 bytes
 14965 ;; Hardware stack levels used:    1
 14966 ;; This function calls:
 14967 ;;		Nothing
 14968 ;; This function is called by:
 14969 ;;		i2_printf
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text46
 14974  00591C                     __ptext46:
 14975                           	opt stack 0
 14976  00591C                     i2_isdigit:
 14977                           	opt stack 23
 14978                           
 14979                           ;incstack = 0
 14980                           ;i2isdigit@c stored from wreg
 14981  00591C  6E03               	movwf	i2isdigit@c,c
 14982  00591E  0E00               	movlw	0
 14983  005920  6E02               	movwf	i2_isdigit$853,c
 14984  005922  0E3A               	movlw	58
 14985  005924  6003               	cpfslt	i2isdigit@c,c
 14986  005926  D005               	goto	i2l6013
 14987  005928  0E2F               	movlw	47
 14988  00592A  6403               	cpfsgt	i2isdigit@c,c
 14989  00592C  D002               	goto	i2l6013
 14990  00592E  0E01               	movlw	1
 14991  005930  6E02               	movwf	i2_isdigit$853,c
 14992  005932                     i2l6013:
 14993  005932  C002  F001         	movff	i2_isdigit$853,??i2_isdigit
 14994  005936  3001               	rrcf	??i2_isdigit,w,c
 14995  005938  0012               	return	
 14996  00593A                     __end_ofi2_isdigit:
 14997                           	opt stack 0
 14998                           pclatu	equ	0xFFB
 14999                           pclath	equ	0xFFA
 15000                           tblptru	equ	0xFF8
 15001                           tblptrh	equ	0xFF7
 15002                           tblptrl	equ	0xFF6
 15003                           tablat	equ	0xFF5
 15004                           prodh	equ	0xFF4
 15005                           prodl	equ	0xFF3
 15006                           intcon	equ	0xFF2
 15007                           intcon2	equ	0xFF1
 15008                           intcon3	equ	0xFF0
 15009                           postinc0	equ	0xFEE
 15010                           fsr0h	equ	0xFEA
 15011                           fsr0l	equ	0xFE9
 15012                           wreg	equ	0xFE8
 15013                           fsr1h	equ	0xFE2
 15014                           fsr1l	equ	0xFE1
 15015                           indf2	equ	0xFDF
 15016                           postinc2	equ	0xFDE
 15017                           postdec2	equ	0xFDD
 15018                           fsr2h	equ	0xFDA
 15019                           fsr2l	equ	0xFD9
 15020                           status	equ	0xFD8
 15021                           
 15022 ;; *************** function i2_fround *****************
 15023 ;; Defined at:
 15024 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 15025 ;; Parameters:    Size  Location     Type
 15026 ;;  prec            1    wreg     unsigned char 
 15027 ;; Auto vars:     Size  Location     Type
 15028 ;;  prec            1   44[COMRAM] unsigned char 
 15029 ;; Return value:  Size  Location     Type
 15030 ;;                  3   35[COMRAM] unsigned char 
 15031 ;; Registers used:
 15032 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15033 ;; Tracked objects:
 15034 ;;		On entry : 0/0
 15035 ;;		On exit  : 0/0
 15036 ;;		Unchanged: 0/0
 15037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15038 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15039 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15041 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15042 ;;Total ram usage:       10 bytes
 15043 ;; Hardware stack levels used:    1
 15044 ;; Hardware stack levels required when called:    2
 15045 ;; This function calls:
 15046 ;;		i2___awdiv
 15047 ;;		i2___awmod
 15048 ;;		i2___ftmul
 15049 ;;		i2___wmul
 15050 ;; This function is called by:
 15051 ;;		i2_printf
 15052 ;; This function uses a non-reentrant model
 15053 ;;
 15054                           
 15055                           	psect	text47
 15056  002C5E                     __ptext47:
 15057                           	opt stack 0
 15058  002C5E                     i2_fround:
 15059                           	opt stack 21
 15060                           
 15061                           ;incstack = 0
 15062                           ;i2fround@prec stored from wreg
 15063  002C5E  6E2D               	movwf	i2fround@prec,c
 15064                           
 15065                           ;doprnt.c: 413: if(prec>=110)
 15066  002C60  0E6D               	movlw	109
 15067  002C62  642D               	cpfsgt	i2fround@prec,c
 15068  002C64  D09F               	goto	i2l5839
 15069                           
 15070                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15071  002C66  0E00               	movlw	0
 15072  002C68  6E12               	movwf	i2___wmul@multiplicand+1,c
 15073  002C6A  0E03               	movlw	3
 15074  002C6C  6E11               	movwf	i2___wmul@multiplicand,c
 15075  002C6E  0E00               	movlw	0
 15076  002C70  6E0A               	movwf	i2___awdiv@divisor+1,c
 15077  002C72  0E0A               	movlw	10
 15078  002C74  6E09               	movwf	i2___awdiv@divisor,c
 15079  002C76  0E00               	movlw	0
 15080  002C78  6E04               	movwf	i2___awmod@divisor+1,c
 15081  002C7A  0E64               	movlw	100
 15082  002C7C  6E03               	movwf	i2___awmod@divisor,c
 15083  002C7E  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15084  002C82  6A02               	clrf	i2___awmod@dividend+1,c
 15085  002C84  EC97  F029         	call	i2___awmod	;wreg free
 15086  002C88  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 15087  002C8C  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 15088  002C90  EC9A  F028         	call	i2___awdiv	;wreg free
 15089  002C94  0E09               	movlw	9
 15090  002C96  2407               	addwf	?i2___awdiv,w,c
 15091  002C98  6E0F               	movwf	i2___wmul@multiplier,c
 15092  002C9A  0E00               	movlw	0
 15093  002C9C  2008               	addwfc	?i2___awdiv+1,w,c
 15094  002C9E  6E10               	movwf	i2___wmul@multiplier+1,c
 15095  002CA0  EC58  F02C         	call	i2___wmul	;wreg free
 15096  002CA4  0EDD               	movlw	low __npowers_
 15097  002CA6  240F               	addwf	?i2___wmul,w,c
 15098  002CA8  6EF6               	movwf	tblptrl,c
 15099  002CAA  0EFD               	movlw	high __npowers_
 15100  002CAC  2010               	addwfc	?i2___wmul+1,w,c
 15101  002CAE  6EF7               	movwf	tblptrh,c
 15102  002CB0                     	if	0	;There are less than 3 active tblptr bytes
 15103  002CB0                     	endif
 15104  002CB0  0009               	tblrd		*+
 15105  002CB2  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15106  002CB6  0009               	tblrd		*+
 15107  002CB8  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15108  002CBC  000A               	tblrd		*-
 15109  002CBE  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15110  002CC2  0E00               	movlw	0
 15111  002CC4  6E0A               	movwf	i2___awdiv@divisor+1,c
 15112  002CC6  0E64               	movlw	100
 15113  002CC8  6E09               	movwf	i2___awdiv@divisor,c
 15114  002CCA  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15115  002CCE  6A08               	clrf	i2___awdiv@dividend+1,c
 15116  002CD0  EC9A  F028         	call	i2___awdiv	;wreg free
 15117  002CD4  0E12               	movlw	18
 15118  002CD6  2407               	addwf	?i2___awdiv,w,c
 15119  002CD8  6E0F               	movwf	i2___wmul@multiplier,c
 15120  002CDA  0E00               	movlw	0
 15121  002CDC  2008               	addwfc	?i2___awdiv+1,w,c
 15122  002CDE  6E10               	movwf	i2___wmul@multiplier+1,c
 15123  002CE0  0E00               	movlw	0
 15124  002CE2  6E12               	movwf	i2___wmul@multiplicand+1,c
 15125  002CE4  0E03               	movlw	3
 15126  002CE6  6E11               	movwf	i2___wmul@multiplicand,c
 15127  002CE8  EC58  F02C         	call	i2___wmul	;wreg free
 15128  002CEC  0EDD               	movlw	low __npowers_
 15129  002CEE  240F               	addwf	?i2___wmul,w,c
 15130  002CF0  6EF6               	movwf	tblptrl,c
 15131  002CF2  0EFD               	movlw	high __npowers_
 15132  002CF4  2010               	addwfc	?i2___wmul+1,w,c
 15133  002CF6  6EF7               	movwf	tblptrh,c
 15134  002CF8                     	if	0	;There are less than 3 active tblptr bytes
 15135  002CF8                     	endif
 15136  002CF8  0009               	tblrd		*+
 15137  002CFA  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15138  002CFE  0009               	tblrd		*+
 15139  002D00  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15140  002D04  000A               	tblrd		*-
 15141  002D06  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15142  002D0A  ECF8  F022         	call	i2___ftmul	;wreg free
 15143  002D0E  C015  F02A         	movff	?i2___ftmul,i2_fround$1526
 15144  002D12  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1526+1
 15145  002D16  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1526+2
 15146                           
 15147                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15148  002D1A  0E00               	movlw	0
 15149  002D1C  6E12               	movwf	i2___wmul@multiplicand+1,c
 15150  002D1E  0E03               	movlw	3
 15151  002D20  6E11               	movwf	i2___wmul@multiplicand,c
 15152  002D22  0E00               	movlw	0
 15153  002D24  6E04               	movwf	i2___awmod@divisor+1,c
 15154  002D26  0E0A               	movlw	10
 15155  002D28  6E03               	movwf	i2___awmod@divisor,c
 15156  002D2A  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15157  002D2E  6A02               	clrf	i2___awmod@dividend+1,c
 15158  002D30  EC97  F029         	call	i2___awmod	;wreg free
 15159  002D34  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15160  002D38  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15161  002D3C  EC58  F02C         	call	i2___wmul	;wreg free
 15162  002D40  0EDD               	movlw	low __npowers_
 15163  002D42  240F               	addwf	?i2___wmul,w,c
 15164  002D44  6EF6               	movwf	tblptrl,c
 15165  002D46  0EFD               	movlw	high __npowers_
 15166  002D48  2010               	addwfc	?i2___wmul+1,w,c
 15167  002D4A  6EF7               	movwf	tblptrh,c
 15168  002D4C                     	if	0	;There are less than 3 active tblptr bytes
 15169  002D4C                     	endif
 15170  002D4C  0009               	tblrd		*+
 15171  002D4E  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15172  002D52  0009               	tblrd		*+
 15173  002D54  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15174  002D58  000A               	tblrd		*-
 15175  002D5A  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15176  002D5E  C02A  F015         	movff	i2_fround$1526,i2___ftmul@f1
 15177  002D62  C02B  F016         	movff	i2_fround$1526+1,i2___ftmul@f1+1
 15178  002D66  C02C  F017         	movff	i2_fround$1526+2,i2___ftmul@f1+2
 15179  002D6A  ECF8  F022         	call	i2___ftmul	;wreg free
 15180  002D6E  C015  F027         	movff	?i2___ftmul,i2_fround$1527
 15181  002D72  C016  F028         	movff	?i2___ftmul+1,i2_fround$1527+1
 15182  002D76  C017  F029         	movff	?i2___ftmul+2,i2_fround$1527+2
 15183                           
 15184                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15185  002D7A  C027  F015         	movff	i2_fround$1527,i2___ftmul@f1
 15186  002D7E  C028  F016         	movff	i2_fround$1527+1,i2___ftmul@f1+1
 15187  002D82  C029  F017         	movff	i2_fround$1527+2,i2___ftmul@f1+2
 15188  002D86  0E00               	movlw	0
 15189  002D88  6E18               	movwf	i2___ftmul@f2,c
 15190  002D8A  0E00               	movlw	0
 15191  002D8C  6E19               	movwf	i2___ftmul@f2+1,c
 15192  002D8E  0E3F               	movlw	63
 15193  002D90  6E1A               	movwf	i2___ftmul@f2+2,c
 15194  002D92  ECF8  F022         	call	i2___ftmul	;wreg free
 15195  002D96  C015  F024         	movff	?i2___ftmul,?i2_fround
 15196  002D9A  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15197  002D9E  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15198  002DA2  0012               	return	
 15199  002DA4                     i2l5839:
 15200                           
 15201                           ;doprnt.c: 415: else if(prec > 10)
 15202  002DA4  0E0A               	movlw	10
 15203  002DA6  642D               	cpfsgt	i2fround@prec,c
 15204  002DA8  D05D               	goto	i2l5847
 15205                           
 15206                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15207  002DAA  0E00               	movlw	0
 15208  002DAC  6E12               	movwf	i2___wmul@multiplicand+1,c
 15209  002DAE  0E03               	movlw	3
 15210  002DB0  6E11               	movwf	i2___wmul@multiplicand,c
 15211  002DB2  0E00               	movlw	0
 15212  002DB4  6E04               	movwf	i2___awmod@divisor+1,c
 15213  002DB6  0E0A               	movlw	10
 15214  002DB8  6E03               	movwf	i2___awmod@divisor,c
 15215  002DBA  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15216  002DBE  6A02               	clrf	i2___awmod@dividend+1,c
 15217  002DC0  EC97  F029         	call	i2___awmod	;wreg free
 15218  002DC4  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15219  002DC8  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15220  002DCC  EC58  F02C         	call	i2___wmul	;wreg free
 15221  002DD0  0EDD               	movlw	low __npowers_
 15222  002DD2  240F               	addwf	?i2___wmul,w,c
 15223  002DD4  6EF6               	movwf	tblptrl,c
 15224  002DD6  0EFD               	movlw	high __npowers_
 15225  002DD8  2010               	addwfc	?i2___wmul+1,w,c
 15226  002DDA  6EF7               	movwf	tblptrh,c
 15227  002DDC                     	if	0	;There are less than 3 active tblptr bytes
 15228  002DDC                     	endif
 15229  002DDC  0009               	tblrd		*+
 15230  002DDE  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15231  002DE2  0009               	tblrd		*+
 15232  002DE4  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15233  002DE8  000A               	tblrd		*-
 15234  002DEA  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15235  002DEE  0E00               	movlw	0
 15236  002DF0  6E0A               	movwf	i2___awdiv@divisor+1,c
 15237  002DF2  0E0A               	movlw	10
 15238  002DF4  6E09               	movwf	i2___awdiv@divisor,c
 15239  002DF6  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15240  002DFA  6A08               	clrf	i2___awdiv@dividend+1,c
 15241  002DFC  EC9A  F028         	call	i2___awdiv	;wreg free
 15242  002E00  0E09               	movlw	9
 15243  002E02  2407               	addwf	?i2___awdiv,w,c
 15244  002E04  6E0F               	movwf	i2___wmul@multiplier,c
 15245  002E06  0E00               	movlw	0
 15246  002E08  2008               	addwfc	?i2___awdiv+1,w,c
 15247  002E0A  6E10               	movwf	i2___wmul@multiplier+1,c
 15248  002E0C  0E00               	movlw	0
 15249  002E0E  6E12               	movwf	i2___wmul@multiplicand+1,c
 15250  002E10  0E03               	movlw	3
 15251  002E12  6E11               	movwf	i2___wmul@multiplicand,c
 15252  002E14  EC58  F02C         	call	i2___wmul	;wreg free
 15253  002E18  0EDD               	movlw	low __npowers_
 15254  002E1A  240F               	addwf	?i2___wmul,w,c
 15255  002E1C  6EF6               	movwf	tblptrl,c
 15256  002E1E  0EFD               	movlw	high __npowers_
 15257  002E20  2010               	addwfc	?i2___wmul+1,w,c
 15258  002E22  6EF7               	movwf	tblptrh,c
 15259  002E24                     	if	0	;There are less than 3 active tblptr bytes
 15260  002E24                     	endif
 15261  002E24  0009               	tblrd		*+
 15262  002E26  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15263  002E2A  0009               	tblrd		*+
 15264  002E2C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15265  002E30  000A               	tblrd		*-
 15266  002E32  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15267  002E36  ECF8  F022         	call	i2___ftmul	;wreg free
 15268  002E3A  C015  F02A         	movff	?i2___ftmul,i2_fround$1526
 15269  002E3E  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1526+1
 15270  002E42  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1526+2
 15271                           
 15272                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15273  002E46  C02A  F015         	movff	i2_fround$1526,i2___ftmul@f1
 15274  002E4A  C02B  F016         	movff	i2_fround$1526+1,i2___ftmul@f1+1
 15275  002E4E  C02C  F017         	movff	i2_fround$1526+2,i2___ftmul@f1+2
 15276  002E52  0E00               	movlw	0
 15277  002E54  6E18               	movwf	i2___ftmul@f2,c
 15278  002E56  0E00               	movlw	0
 15279  002E58  6E19               	movwf	i2___ftmul@f2+1,c
 15280  002E5A  0E3F               	movlw	63
 15281  002E5C  6E1A               	movwf	i2___ftmul@f2+2,c
 15282  002E5E  ECF8  F022         	call	i2___ftmul	;wreg free
 15283  002E62  D799               	goto	L28
 15284  002E64                     i2l5847:
 15285                           
 15286                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15287  002E64  502D               	movf	i2fround@prec,w,c
 15288  002E66  0D03               	mullw	3
 15289  002E68  0EDD               	movlw	low __npowers_
 15290  002E6A  24F3               	addwf	prodl,w,c
 15291  002E6C  6EF6               	movwf	tblptrl,c
 15292  002E6E  0EFD               	movlw	high __npowers_
 15293  002E70  20F4               	addwfc	prodh,w,c
 15294  002E72  6EF7               	movwf	tblptrh,c
 15295  002E74                     	if	0	;There are less than 3 active tblptr bytes
 15296  002E74                     	endif
 15297  002E74  0009               	tblrd		*+
 15298  002E76  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15299  002E7A  0009               	tblrd		*+
 15300  002E7C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15301  002E80  000A               	tblrd		*-
 15302  002E82  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15303  002E86  0E00               	movlw	0
 15304  002E88  6E18               	movwf	i2___ftmul@f2,c
 15305  002E8A  0E00               	movlw	0
 15306  002E8C  6E19               	movwf	i2___ftmul@f2+1,c
 15307  002E8E  0E3F               	movlw	63
 15308  002E90  6E1A               	movwf	i2___ftmul@f2+2,c
 15309  002E92  ECF8  F022         	call	i2___ftmul	;wreg free
 15310  002E96  C015  F024         	movff	?i2___ftmul,?i2_fround
 15311  002E9A  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15312  002E9E  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15313  002EA2  0012               	return	
 15314  002EA4                     __end_ofi2_fround:
 15315                           	opt stack 0
 15316                           pclatu	equ	0xFFB
 15317                           pclath	equ	0xFFA
 15318                           tblptru	equ	0xFF8
 15319                           tblptrh	equ	0xFF7
 15320                           tblptrl	equ	0xFF6
 15321                           tablat	equ	0xFF5
 15322                           prodh	equ	0xFF4
 15323                           prodl	equ	0xFF3
 15324                           intcon	equ	0xFF2
 15325                           intcon2	equ	0xFF1
 15326                           intcon3	equ	0xFF0
 15327                           postinc0	equ	0xFEE
 15328                           fsr0h	equ	0xFEA
 15329                           fsr0l	equ	0xFE9
 15330                           wreg	equ	0xFE8
 15331                           fsr1h	equ	0xFE2
 15332                           fsr1l	equ	0xFE1
 15333                           indf2	equ	0xFDF
 15334                           postinc2	equ	0xFDE
 15335                           postdec2	equ	0xFDD
 15336                           fsr2h	equ	0xFDA
 15337                           fsr2l	equ	0xFD9
 15338                           status	equ	0xFD8
 15339                           
 15340 ;; *************** function i2___awmod *****************
 15341 ;; Defined at:
 15342 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15343 ;; Parameters:    Size  Location     Type
 15344 ;;  dividend        2    0[COMRAM] int 
 15345 ;;  divisor         2    2[COMRAM] int 
 15346 ;; Auto vars:     Size  Location     Type
 15347 ;;  __awmod         1    5[COMRAM] unsigned char 
 15348 ;;  __awmod         1    4[COMRAM] unsigned char 
 15349 ;; Return value:  Size  Location     Type
 15350 ;;                  2    0[COMRAM] int 
 15351 ;; Registers used:
 15352 ;;		wreg, status,2, status,0
 15353 ;; Tracked objects:
 15354 ;;		On entry : 0/0
 15355 ;;		On exit  : 0/0
 15356 ;;		Unchanged: 0/0
 15357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15362 ;;Total ram usage:        6 bytes
 15363 ;; Hardware stack levels used:    1
 15364 ;; This function calls:
 15365 ;;		Nothing
 15366 ;; This function is called by:
 15367 ;;		i2_fround
 15368 ;;		i2_scale
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           	psect	text48
 15373  00532E                     __ptext48:
 15374                           	opt stack 0
 15375  00532E                     i2___awmod:
 15376                           	opt stack 22
 15377                           
 15378                           ;incstack = 0
 15379  00532E  0E00               	movlw	0
 15380  005330  6E06               	movwf	i2___awmod@sign,c
 15381  005332  AE02               	btfss	i2___awmod@dividend+1,7,c
 15382  005334  D006               	goto	i2l5361
 15383  005336  6C01               	negf	i2___awmod@dividend,c
 15384  005338  1E02               	comf	i2___awmod@dividend+1,f,c
 15385  00533A  B0D8               	btfsc	status,0,c
 15386  00533C  2A02               	incf	i2___awmod@dividend+1,f,c
 15387  00533E  0E01               	movlw	1
 15388  005340  6E06               	movwf	i2___awmod@sign,c
 15389  005342                     i2l5361:
 15390  005342  AE04               	btfss	i2___awmod@divisor+1,7,c
 15391  005344  D004               	goto	i2l5365
 15392  005346  6C03               	negf	i2___awmod@divisor,c
 15393  005348  1E04               	comf	i2___awmod@divisor+1,f,c
 15394  00534A  B0D8               	btfsc	status,0,c
 15395  00534C  2A04               	incf	i2___awmod@divisor+1,f,c
 15396  00534E                     i2l5365:
 15397  00534E  5003               	movf	i2___awmod@divisor,w,c
 15398  005350  1004               	iorwf	i2___awmod@divisor+1,w,c
 15399  005352  B4D8               	btfsc	status,2,c
 15400  005354  D018               	goto	i2l5381
 15401  005356  0E01               	movlw	1
 15402  005358  6E05               	movwf	i2___awmod@counter,c
 15403  00535A  D004               	goto	i2l5371
 15404  00535C                     i2l5369:
 15405  00535C  90D8               	bcf	status,0,c
 15406  00535E  3603               	rlcf	i2___awmod@divisor,f,c
 15407  005360  3604               	rlcf	i2___awmod@divisor+1,f,c
 15408  005362  2A05               	incf	i2___awmod@counter,f,c
 15409  005364                     i2l5371:
 15410  005364  AE04               	btfss	i2___awmod@divisor+1,7,c
 15411  005366  D7FA               	goto	i2l5369
 15412  005368                     i2l5373:
 15413  005368  5003               	movf	i2___awmod@divisor,w,c
 15414  00536A  5C01               	subwf	i2___awmod@dividend,w,c
 15415  00536C  5004               	movf	i2___awmod@divisor+1,w,c
 15416  00536E  5802               	subwfb	i2___awmod@dividend+1,w,c
 15417  005370  A0D8               	btfss	status,0,c
 15418  005372  D004               	goto	i2l5377
 15419  005374  5003               	movf	i2___awmod@divisor,w,c
 15420  005376  5E01               	subwf	i2___awmod@dividend,f,c
 15421  005378  5004               	movf	i2___awmod@divisor+1,w,c
 15422  00537A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15423  00537C                     i2l5377:
 15424  00537C  90D8               	bcf	status,0,c
 15425  00537E  3204               	rrcf	i2___awmod@divisor+1,f,c
 15426  005380  3203               	rrcf	i2___awmod@divisor,f,c
 15427  005382  2E05               	decfsz	i2___awmod@counter,f,c
 15428  005384  D7F1               	goto	i2l5373
 15429  005386                     i2l5381:
 15430  005386  5006               	movf	i2___awmod@sign,w,c
 15431  005388  B4D8               	btfsc	status,2,c
 15432  00538A  D004               	goto	i2l5385
 15433  00538C  6C01               	negf	i2___awmod@dividend,c
 15434  00538E  1E02               	comf	i2___awmod@dividend+1,f,c
 15435  005390  B0D8               	btfsc	status,0,c
 15436  005392  2A02               	incf	i2___awmod@dividend+1,f,c
 15437  005394                     i2l5385:
 15438  005394  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15439  005398  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15440  00539C  0012               	return	
 15441  00539E                     __end_ofi2___awmod:
 15442                           	opt stack 0
 15443                           pclatu	equ	0xFFB
 15444                           pclath	equ	0xFFA
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           intcon2	equ	0xFF1
 15453                           intcon3	equ	0xFF0
 15454                           postinc0	equ	0xFEE
 15455                           fsr0h	equ	0xFEA
 15456                           fsr0l	equ	0xFE9
 15457                           wreg	equ	0xFE8
 15458                           fsr1h	equ	0xFE2
 15459                           fsr1l	equ	0xFE1
 15460                           indf2	equ	0xFDF
 15461                           postinc2	equ	0xFDE
 15462                           postdec2	equ	0xFDD
 15463                           fsr2h	equ	0xFDA
 15464                           fsr2l	equ	0xFD9
 15465                           status	equ	0xFD8
 15466                           
 15467 ;; *************** function i2__tdiv_to_l_ *****************
 15468 ;; Defined at:
 15469 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15470 ;; Parameters:    Size  Location     Type
 15471 ;;  f1              3    0[COMRAM] float 
 15472 ;;  f2              3    3[COMRAM] float 
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15475 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15476 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15477 ;; Return value:  Size  Location     Type
 15478 ;;                  4    0[COMRAM] unsigned long 
 15479 ;; Registers used:
 15480 ;;		wreg, status,2, status,0
 15481 ;; Tracked objects:
 15482 ;;		On entry : 0/0
 15483 ;;		On exit  : 0/0
 15484 ;;		Unchanged: 0/0
 15485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15487 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;Total ram usage:       15 bytes
 15491 ;; Hardware stack levels used:    1
 15492 ;; This function calls:
 15493 ;;		Nothing
 15494 ;; This function is called by:
 15495 ;;		i2_printf
 15496 ;; This function uses a non-reentrant model
 15497 ;;
 15498                           
 15499                           	psect	text49
 15500  003C72                     __ptext49:
 15501                           	opt stack 0
 15502  003C72                     i2__tdiv_to_l_:
 15503                           	opt stack 23
 15504                           
 15505                           ;incstack = 0
 15506  003C72  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 15507  003C76  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15508  003C78  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15509  003C7A  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 15510  003C7C  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15511  003C7E  E301               	bnc	u661_41
 15512  003C80  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15513  003C82                     u661_41:
 15514  003C82  5007               	movf	??i2__tdiv_to_l_,w,c
 15515  003C84  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 15516  003C86  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15517  003C88  A4D8               	btfss	status,2,c
 15518  003C8A  D009               	goto	i2l5955
 15519  003C8C  0E00               	movlw	0
 15520  003C8E  6E01               	movwf	?i2__tdiv_to_l_,c
 15521  003C90  0E00               	movlw	0
 15522  003C92  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15523  003C94  0E00               	movlw	0
 15524  003C96  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15525  003C98  0E00               	movlw	0
 15526  003C9A  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15527  003C9C  0012               	return	
 15528  003C9E                     i2l5955:
 15529  003C9E  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 15530  003CA2  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15531  003CA4  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15532  003CA6  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 15533  003CA8  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15534  003CAA  E301               	bnc	u663_41
 15535  003CAC  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15536  003CAE                     u663_41:
 15537  003CAE  5007               	movf	??i2__tdiv_to_l_,w,c
 15538  003CB0  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15539  003CB2  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15540  003CB4  A4D8               	btfss	status,2,c
 15541  003CB6  D009               	goto	i2l5961
 15542  003CB8  0E00               	movlw	0
 15543  003CBA  6E01               	movwf	?i2__tdiv_to_l_,c
 15544  003CBC  0E00               	movlw	0
 15545  003CBE  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15546  003CC0  0E00               	movlw	0
 15547  003CC2  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15548  003CC4  0E00               	movlw	0
 15549  003CC6  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15550  003CC8  0012               	return	
 15551  003CCA                     i2l5961:
 15552  003CCA  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 15553  003CCC  0EFF               	movlw	255
 15554  003CCE  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 15555  003CD0  0EFF               	movlw	255
 15556  003CD2  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 15557  003CD4  0E00               	movlw	0
 15558  003CD6  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 15559  003CD8  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 15560  003CDA  0EFF               	movlw	255
 15561  003CDC  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 15562  003CDE  0EFF               	movlw	255
 15563  003CE0  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 15564  003CE2  0E00               	movlw	0
 15565  003CE4  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 15566  003CE6  0E00               	movlw	0
 15567  003CE8  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 15568  003CEA  0E00               	movlw	0
 15569  003CEC  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 15570  003CEE  0E00               	movlw	0
 15571  003CF0  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 15572  003CF2  0E00               	movlw	0
 15573  003CF4  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 15574  003CF6  0E7F               	movlw	127
 15575  003CF8  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15576  003CFA  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15577  003CFC  0F98               	addlw	152
 15578  003CFE  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15579  003D00  0E18               	movlw	24
 15580  003D02  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15581  003D04                     i2l916:
 15582  003D04  90D8               	bcf	status,0,c
 15583  003D06  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15584  003D08  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15585  003D0A  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15586  003D0C  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15587  003D0E  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15588  003D10  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 15589  003D12  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15590  003D14  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 15591  003D16  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15592  003D18  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 15593  003D1A  A0D8               	btfss	status,0,c
 15594  003D1C  D007               	goto	i2l917
 15595  003D1E  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15596  003D20  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 15597  003D22  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15598  003D24  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 15599  003D26  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15600  003D28  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 15601  003D2A  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 15602  003D2C                     i2l917:
 15603  003D2C  90D8               	bcf	status,0,c
 15604  003D2E  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 15605  003D30  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 15606  003D32  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 15607  003D34  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 15608  003D36  D7E6               	goto	i2l916
 15609  003D38  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 15610  003D3A  D016               	goto	i2l5995
 15611  003D3C  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15612  003D3E  0A80               	xorlw	128
 15613  003D40  0F97               	addlw	151
 15614  003D42  B0D8               	btfsc	status,0,c
 15615  003D44  D009               	goto	i2l5991
 15616  003D46  0E00               	movlw	0
 15617  003D48  6E01               	movwf	?i2__tdiv_to_l_,c
 15618  003D4A  0E00               	movlw	0
 15619  003D4C  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15620  003D4E  0E00               	movlw	0
 15621  003D50  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15622  003D52  0E00               	movlw	0
 15623  003D54  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15624  003D56  0012               	return	
 15625  003D58                     i2l5991:
 15626  003D58  90D8               	bcf	status,0,c
 15627  003D5A  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 15628  003D5C  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 15629  003D5E  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 15630  003D60  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 15631  003D62  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 15632  003D64  D7F9               	goto	i2l5991
 15633  003D66  D015               	goto	i2l923
 15634  003D68                     i2l5995:
 15635  003D68  0E17               	movlw	23
 15636  003D6A  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 15637  003D6C  D00F               	goto	i2l6003
 15638  003D6E  0E00               	movlw	0
 15639  003D70  6E01               	movwf	?i2__tdiv_to_l_,c
 15640  003D72  0E00               	movlw	0
 15641  003D74  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15642  003D76  0E00               	movlw	0
 15643  003D78  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15644  003D7A  0E00               	movlw	0
 15645  003D7C  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15646  003D7E  0012               	return	
 15647  003D80                     i2l6001:
 15648  003D80  90D8               	bcf	status,0,c
 15649  003D82  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15650  003D84  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15651  003D86  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15652  003D88  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15653  003D8A  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 15654  003D8C                     i2l6003:
 15655  003D8C  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15656  003D8E  A4D8               	btfss	status,2,c
 15657  003D90  D7F7               	goto	i2l6001
 15658  003D92                     i2l923:
 15659  003D92  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 15660  003D96  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 15661  003D9A  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 15662  003D9E  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 15663  003DA2  0012               	return		;funcret
 15664  003DA4                     __end_ofi2__tdiv_to_l_:
 15665                           	opt stack 0
 15666                           pclatu	equ	0xFFB
 15667                           pclath	equ	0xFFA
 15668                           tblptru	equ	0xFF8
 15669                           tblptrh	equ	0xFF7
 15670                           tblptrl	equ	0xFF6
 15671                           tablat	equ	0xFF5
 15672                           prodh	equ	0xFF4
 15673                           prodl	equ	0xFF3
 15674                           intcon	equ	0xFF2
 15675                           intcon2	equ	0xFF1
 15676                           intcon3	equ	0xFF0
 15677                           postinc0	equ	0xFEE
 15678                           fsr0h	equ	0xFEA
 15679                           fsr0l	equ	0xFE9
 15680                           wreg	equ	0xFE8
 15681                           fsr1h	equ	0xFE2
 15682                           fsr1l	equ	0xFE1
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           fsr2h	equ	0xFDA
 15687                           fsr2l	equ	0xFD9
 15688                           status	equ	0xFD8
 15689                           
 15690 ;; *************** function i2__div_to_l_ *****************
 15691 ;; Defined at:
 15692 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 15693 ;; Parameters:    Size  Location     Type
 15694 ;;  f1              3    0[COMRAM] unsigned long 
 15695 ;;  f2              3    3[COMRAM] unsigned long 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 15698 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 15699 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 15700 ;; Return value:  Size  Location     Type
 15701 ;;                  4    0[COMRAM] unsigned long 
 15702 ;; Registers used:
 15703 ;;		wreg, status,2, status,0
 15704 ;; Tracked objects:
 15705 ;;		On entry : 0/0
 15706 ;;		On exit  : 0/0
 15707 ;;		Unchanged: 0/0
 15708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15709 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15710 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15712 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15713 ;;Total ram usage:       12 bytes
 15714 ;; Hardware stack levels used:    1
 15715 ;; This function calls:
 15716 ;;		Nothing
 15717 ;; This function is called by:
 15718 ;;		i2_printf
 15719 ;; This function uses a non-reentrant model
 15720 ;;
 15721                           
 15722                           	psect	text50
 15723  003DA4                     __ptext50:
 15724                           	opt stack 0
 15725  003DA4                     i2__div_to_l_:
 15726                           	opt stack 23
 15727                           
 15728                           ;incstack = 0
 15729  003DA4  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 15730  003DA6  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 15731  003DA8  6E0C               	movwf	i2__div_to_l_@exp1,c
 15732  003DAA  500C               	movf	i2__div_to_l_@exp1,w,c
 15733  003DAC  A4D8               	btfss	status,2,c
 15734  003DAE  D009               	goto	i2l5895
 15735  003DB0  0E00               	movlw	0
 15736  003DB2  6E01               	movwf	?i2__div_to_l_,c
 15737  003DB4  0E00               	movlw	0
 15738  003DB6  6E02               	movwf	?i2__div_to_l_+1,c
 15739  003DB8  0E00               	movlw	0
 15740  003DBA  6E03               	movwf	?i2__div_to_l_+2,c
 15741  003DBC  0E00               	movlw	0
 15742  003DBE  6E04               	movwf	?i2__div_to_l_+3,c
 15743  003DC0  0012               	return	
 15744  003DC2                     i2l5895:
 15745  003DC2  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 15746  003DC4  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 15747  003DC6  6E0B               	movwf	i2__div_to_l_@cntr,c
 15748  003DC8  500B               	movf	i2__div_to_l_@cntr,w,c
 15749  003DCA  A4D8               	btfss	status,2,c
 15750  003DCC  D009               	goto	i2l5901
 15751  003DCE  0E00               	movlw	0
 15752  003DD0  6E01               	movwf	?i2__div_to_l_,c
 15753  003DD2  0E00               	movlw	0
 15754  003DD4  6E02               	movwf	?i2__div_to_l_+1,c
 15755  003DD6  0E00               	movlw	0
 15756  003DD8  6E03               	movwf	?i2__div_to_l_+2,c
 15757  003DDA  0E00               	movlw	0
 15758  003DDC  6E04               	movwf	?i2__div_to_l_+3,c
 15759  003DDE  0012               	return	
 15760  003DE0                     i2l5901:
 15761  003DE0  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 15762  003DE2  0EFF               	movlw	255
 15763  003DE4  1601               	andwf	i2__div_to_l_@f1,f,c
 15764  003DE6  0EFF               	movlw	255
 15765  003DE8  1602               	andwf	i2__div_to_l_@f1+1,f,c
 15766  003DEA  0EFF               	movlw	255
 15767  003DEC  1603               	andwf	i2__div_to_l_@f1+2,f,c
 15768  003DEE  0E00               	movlw	0
 15769  003DF0  1604               	andwf	i2__div_to_l_@f1+3,f,c
 15770  003DF2  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 15771  003DF4  0EFF               	movlw	255
 15772  003DF6  1604               	andwf	i2__div_to_l_@f2,f,c
 15773  003DF8  0EFF               	movlw	255
 15774  003DFA  1605               	andwf	i2__div_to_l_@f2+1,f,c
 15775  003DFC  0EFF               	movlw	255
 15776  003DFE  1606               	andwf	i2__div_to_l_@f2+2,f,c
 15777  003E00  0E00               	movlw	0
 15778  003E02  1607               	andwf	i2__div_to_l_@f2+3,f,c
 15779  003E04  0E00               	movlw	0
 15780  003E06  6E07               	movwf	i2__div_to_l_@quot,c
 15781  003E08  0E00               	movlw	0
 15782  003E0A  6E08               	movwf	i2__div_to_l_@quot+1,c
 15783  003E0C  0E00               	movlw	0
 15784  003E0E  6E09               	movwf	i2__div_to_l_@quot+2,c
 15785  003E10  0E00               	movlw	0
 15786  003E12  6E0A               	movwf	i2__div_to_l_@quot+3,c
 15787  003E14  0E7F               	movlw	127
 15788  003E16  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15789  003E18  500B               	movf	i2__div_to_l_@cntr,w,c
 15790  003E1A  0FA0               	addlw	160
 15791  003E1C  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15792  003E1E  0E20               	movlw	32
 15793  003E20  6E0B               	movwf	i2__div_to_l_@cntr,c
 15794  003E22                     i2l5915:
 15795  003E22  90D8               	bcf	status,0,c
 15796  003E24  3607               	rlcf	i2__div_to_l_@quot,f,c
 15797  003E26  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15798  003E28  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15799  003E2A  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15800  003E2C  5004               	movf	i2__div_to_l_@f2,w,c
 15801  003E2E  5C01               	subwf	i2__div_to_l_@f1,w,c
 15802  003E30  5005               	movf	i2__div_to_l_@f2+1,w,c
 15803  003E32  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 15804  003E34  5006               	movf	i2__div_to_l_@f2+2,w,c
 15805  003E36  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 15806  003E38  5007               	movf	i2__div_to_l_@f2+3,w,c
 15807  003E3A  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 15808  003E3C  A0D8               	btfss	status,0,c
 15809  003E3E  D009               	goto	i2l5923
 15810  003E40  5004               	movf	i2__div_to_l_@f2,w,c
 15811  003E42  5E01               	subwf	i2__div_to_l_@f1,f,c
 15812  003E44  5005               	movf	i2__div_to_l_@f2+1,w,c
 15813  003E46  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 15814  003E48  5006               	movf	i2__div_to_l_@f2+2,w,c
 15815  003E4A  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 15816  003E4C  5007               	movf	i2__div_to_l_@f2+3,w,c
 15817  003E4E  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 15818  003E50  8007               	bsf	i2__div_to_l_@quot,0,c
 15819  003E52                     i2l5923:
 15820  003E52  90D8               	bcf	status,0,c
 15821  003E54  3601               	rlcf	i2__div_to_l_@f1,f,c
 15822  003E56  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 15823  003E58  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 15824  003E5A  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 15825  003E5C  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 15826  003E5E  D7E1               	goto	i2l5915
 15827  003E60  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 15828  003E62  D016               	goto	i2l5939
 15829  003E64  500C               	movf	i2__div_to_l_@exp1,w,c
 15830  003E66  0A80               	xorlw	128
 15831  003E68  0F9F               	addlw	159
 15832  003E6A  B0D8               	btfsc	status,0,c
 15833  003E6C  D009               	goto	i2l5935
 15834  003E6E  0E00               	movlw	0
 15835  003E70  6E01               	movwf	?i2__div_to_l_,c
 15836  003E72  0E00               	movlw	0
 15837  003E74  6E02               	movwf	?i2__div_to_l_+1,c
 15838  003E76  0E00               	movlw	0
 15839  003E78  6E03               	movwf	?i2__div_to_l_+2,c
 15840  003E7A  0E00               	movlw	0
 15841  003E7C  6E04               	movwf	?i2__div_to_l_+3,c
 15842  003E7E  0012               	return	
 15843  003E80                     i2l5935:
 15844  003E80  90D8               	bcf	status,0,c
 15845  003E82  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 15846  003E84  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 15847  003E86  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 15848  003E88  3207               	rrcf	i2__div_to_l_@quot,f,c
 15849  003E8A  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 15850  003E8C  D7F9               	goto	i2l5935
 15851  003E8E  D015               	goto	i2l819
 15852  003E90                     i2l5939:
 15853  003E90  0E1F               	movlw	31
 15854  003E92  640C               	cpfsgt	i2__div_to_l_@exp1,c
 15855  003E94  D00F               	goto	i2l5947
 15856  003E96  0E00               	movlw	0
 15857  003E98  6E01               	movwf	?i2__div_to_l_,c
 15858  003E9A  0E00               	movlw	0
 15859  003E9C  6E02               	movwf	?i2__div_to_l_+1,c
 15860  003E9E  0E00               	movlw	0
 15861  003EA0  6E03               	movwf	?i2__div_to_l_+2,c
 15862  003EA2  0E00               	movlw	0
 15863  003EA4  6E04               	movwf	?i2__div_to_l_+3,c
 15864  003EA6  0012               	return	
 15865  003EA8                     i2l5945:
 15866  003EA8  90D8               	bcf	status,0,c
 15867  003EAA  3607               	rlcf	i2__div_to_l_@quot,f,c
 15868  003EAC  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15869  003EAE  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15870  003EB0  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15871  003EB2  060C               	decf	i2__div_to_l_@exp1,f,c
 15872  003EB4                     i2l5947:
 15873  003EB4  500C               	movf	i2__div_to_l_@exp1,w,c
 15874  003EB6  A4D8               	btfss	status,2,c
 15875  003EB8  D7F7               	goto	i2l5945
 15876  003EBA                     i2l819:
 15877  003EBA  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 15878  003EBE  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 15879  003EC2  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 15880  003EC6  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 15881  003ECA  0012               	return		;funcret
 15882  003ECC                     __end_ofi2__div_to_l_:
 15883                           	opt stack 0
 15884                           pclatu	equ	0xFFB
 15885                           pclath	equ	0xFFA
 15886                           tblptru	equ	0xFF8
 15887                           tblptrh	equ	0xFF7
 15888                           tblptrl	equ	0xFF6
 15889                           tablat	equ	0xFF5
 15890                           prodh	equ	0xFF4
 15891                           prodl	equ	0xFF3
 15892                           intcon	equ	0xFF2
 15893                           intcon2	equ	0xFF1
 15894                           intcon3	equ	0xFF0
 15895                           postinc0	equ	0xFEE
 15896                           fsr0h	equ	0xFEA
 15897                           fsr0l	equ	0xFE9
 15898                           wreg	equ	0xFE8
 15899                           fsr1h	equ	0xFE2
 15900                           fsr1l	equ	0xFE1
 15901                           indf2	equ	0xFDF
 15902                           postinc2	equ	0xFDE
 15903                           postdec2	equ	0xFDD
 15904                           fsr2h	equ	0xFDA
 15905                           fsr2l	equ	0xFD9
 15906                           status	equ	0xFD8
 15907                           
 15908 ;; *************** function i2___llmod *****************
 15909 ;; Defined at:
 15910 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;  dividend        4   13[COMRAM] unsigned long 
 15913 ;;  divisor         4   17[COMRAM] unsigned long 
 15914 ;; Auto vars:     Size  Location     Type
 15915 ;;  __llmod         1   21[COMRAM] unsigned char 
 15916 ;; Return value:  Size  Location     Type
 15917 ;;                  4   13[COMRAM] unsigned long 
 15918 ;; Registers used:
 15919 ;;		wreg, status,2, status,0
 15920 ;; Tracked objects:
 15921 ;;		On entry : 0/0
 15922 ;;		On exit  : 0/0
 15923 ;;		Unchanged: 0/0
 15924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15925 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15928 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15929 ;;Total ram usage:        9 bytes
 15930 ;; Hardware stack levels used:    1
 15931 ;; This function calls:
 15932 ;;		Nothing
 15933 ;; This function is called by:
 15934 ;;		i2_printf
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text51
 15939  005406                     __ptext51:
 15940                           	opt stack 0
 15941  005406                     i2___llmod:
 15942                           	opt stack 23
 15943                           
 15944                           ;incstack = 0
 15945  005406  5012               	movf	i2___llmod@divisor,w,c
 15946  005408  1013               	iorwf	i2___llmod@divisor+1,w,c
 15947  00540A  1014               	iorwf	i2___llmod@divisor+2,w,c
 15948  00540C  1015               	iorwf	i2___llmod@divisor+3,w,c
 15949  00540E  B4D8               	btfsc	status,2,c
 15950  005410  D024               	goto	i2l1008
 15951  005412  0E01               	movlw	1
 15952  005414  6E16               	movwf	i2___llmod@counter,c
 15953  005416  D006               	goto	i2l6045
 15954  005418                     i2l6043:
 15955  005418  90D8               	bcf	status,0,c
 15956  00541A  3612               	rlcf	i2___llmod@divisor,f,c
 15957  00541C  3613               	rlcf	i2___llmod@divisor+1,f,c
 15958  00541E  3614               	rlcf	i2___llmod@divisor+2,f,c
 15959  005420  3615               	rlcf	i2___llmod@divisor+3,f,c
 15960  005422  2A16               	incf	i2___llmod@counter,f,c
 15961  005424                     i2l6045:
 15962  005424  AE15               	btfss	i2___llmod@divisor+3,7,c
 15963  005426  D7F8               	goto	i2l6043
 15964  005428                     i2l6047:
 15965  005428  5012               	movf	i2___llmod@divisor,w,c
 15966  00542A  5C0E               	subwf	i2___llmod@dividend,w,c
 15967  00542C  5013               	movf	i2___llmod@divisor+1,w,c
 15968  00542E  580F               	subwfb	i2___llmod@dividend+1,w,c
 15969  005430  5014               	movf	i2___llmod@divisor+2,w,c
 15970  005432  5810               	subwfb	i2___llmod@dividend+2,w,c
 15971  005434  5015               	movf	i2___llmod@divisor+3,w,c
 15972  005436  5811               	subwfb	i2___llmod@dividend+3,w,c
 15973  005438  A0D8               	btfss	status,0,c
 15974  00543A  D008               	goto	i2l6051
 15975  00543C  5012               	movf	i2___llmod@divisor,w,c
 15976  00543E  5E0E               	subwf	i2___llmod@dividend,f,c
 15977  005440  5013               	movf	i2___llmod@divisor+1,w,c
 15978  005442  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 15979  005444  5014               	movf	i2___llmod@divisor+2,w,c
 15980  005446  5A10               	subwfb	i2___llmod@dividend+2,f,c
 15981  005448  5015               	movf	i2___llmod@divisor+3,w,c
 15982  00544A  5A11               	subwfb	i2___llmod@dividend+3,f,c
 15983  00544C                     i2l6051:
 15984  00544C  90D8               	bcf	status,0,c
 15985  00544E  3215               	rrcf	i2___llmod@divisor+3,f,c
 15986  005450  3214               	rrcf	i2___llmod@divisor+2,f,c
 15987  005452  3213               	rrcf	i2___llmod@divisor+1,f,c
 15988  005454  3212               	rrcf	i2___llmod@divisor,f,c
 15989  005456  2E16               	decfsz	i2___llmod@counter,f,c
 15990  005458  D7E7               	goto	i2l6047
 15991  00545A                     i2l1008:
 15992  00545A  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 15993  00545E  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 15994  005462  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 15995  005466  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 15996  00546A  0012               	return		;funcret
 15997  00546C                     __end_ofi2___llmod:
 15998                           	opt stack 0
 15999                           pclatu	equ	0xFFB
 16000                           pclath	equ	0xFFA
 16001                           tblptru	equ	0xFF8
 16002                           tblptrh	equ	0xFF7
 16003                           tblptrl	equ	0xFF6
 16004                           tablat	equ	0xFF5
 16005                           prodh	equ	0xFF4
 16006                           prodl	equ	0xFF3
 16007                           intcon	equ	0xFF2
 16008                           intcon2	equ	0xFF1
 16009                           intcon3	equ	0xFF0
 16010                           postinc0	equ	0xFEE
 16011                           fsr0h	equ	0xFEA
 16012                           fsr0l	equ	0xFE9
 16013                           wreg	equ	0xFE8
 16014                           fsr1h	equ	0xFE2
 16015                           fsr1l	equ	0xFE1
 16016                           indf2	equ	0xFDF
 16017                           postinc2	equ	0xFDE
 16018                           postdec2	equ	0xFDD
 16019                           fsr2h	equ	0xFDA
 16020                           fsr2l	equ	0xFD9
 16021                           status	equ	0xFD8
 16022                           
 16023 ;; *************** function i2___lldiv *****************
 16024 ;; Defined at:
 16025 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 16026 ;; Parameters:    Size  Location     Type
 16027 ;;  dividend        4    0[COMRAM] unsigned long 
 16028 ;;  divisor         4    4[COMRAM] unsigned long 
 16029 ;; Auto vars:     Size  Location     Type
 16030 ;;  __lldiv         4    8[COMRAM] unsigned long 
 16031 ;;  __lldiv         1   12[COMRAM] unsigned char 
 16032 ;; Return value:  Size  Location     Type
 16033 ;;                  4    0[COMRAM] unsigned long 
 16034 ;; Registers used:
 16035 ;;		wreg, status,2, status,0
 16036 ;; Tracked objects:
 16037 ;;		On entry : 0/0
 16038 ;;		On exit  : 0/0
 16039 ;;		Unchanged: 0/0
 16040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16041 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16042 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16044 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16045 ;;Total ram usage:       13 bytes
 16046 ;; Hardware stack levels used:    1
 16047 ;; This function calls:
 16048 ;;		Nothing
 16049 ;; This function is called by:
 16050 ;;		i2_printf
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           	psect	text52
 16055  0051B8                     __ptext52:
 16056                           	opt stack 0
 16057  0051B8                     i2___lldiv:
 16058                           	opt stack 23
 16059                           
 16060                           ;incstack = 0
 16061  0051B8  0E00               	movlw	0
 16062  0051BA  6E09               	movwf	i2___lldiv@quotient,c
 16063  0051BC  0E00               	movlw	0
 16064  0051BE  6E0A               	movwf	i2___lldiv@quotient+1,c
 16065  0051C0  0E00               	movlw	0
 16066  0051C2  6E0B               	movwf	i2___lldiv@quotient+2,c
 16067  0051C4  0E00               	movlw	0
 16068  0051C6  6E0C               	movwf	i2___lldiv@quotient+3,c
 16069  0051C8  5005               	movf	i2___lldiv@divisor,w,c
 16070  0051CA  1006               	iorwf	i2___lldiv@divisor+1,w,c
 16071  0051CC  1007               	iorwf	i2___lldiv@divisor+2,w,c
 16072  0051CE  1008               	iorwf	i2___lldiv@divisor+3,w,c
 16073  0051D0  B4D8               	btfsc	status,2,c
 16074  0051D2  D02A               	goto	i2l998
 16075  0051D4  0E01               	movlw	1
 16076  0051D6  6E0D               	movwf	i2___lldiv@counter,c
 16077  0051D8  D006               	goto	i2l6025
 16078  0051DA                     i2l6023:
 16079  0051DA  90D8               	bcf	status,0,c
 16080  0051DC  3605               	rlcf	i2___lldiv@divisor,f,c
 16081  0051DE  3606               	rlcf	i2___lldiv@divisor+1,f,c
 16082  0051E0  3607               	rlcf	i2___lldiv@divisor+2,f,c
 16083  0051E2  3608               	rlcf	i2___lldiv@divisor+3,f,c
 16084  0051E4  2A0D               	incf	i2___lldiv@counter,f,c
 16085  0051E6                     i2l6025:
 16086  0051E6  AE08               	btfss	i2___lldiv@divisor+3,7,c
 16087  0051E8  D7F8               	goto	i2l6023
 16088  0051EA                     i2l6027:
 16089  0051EA  90D8               	bcf	status,0,c
 16090  0051EC  3609               	rlcf	i2___lldiv@quotient,f,c
 16091  0051EE  360A               	rlcf	i2___lldiv@quotient+1,f,c
 16092  0051F0  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16093  0051F2  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16094  0051F4  5005               	movf	i2___lldiv@divisor,w,c
 16095  0051F6  5C01               	subwf	i2___lldiv@dividend,w,c
 16096  0051F8  5006               	movf	i2___lldiv@divisor+1,w,c
 16097  0051FA  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16098  0051FC  5007               	movf	i2___lldiv@divisor+2,w,c
 16099  0051FE  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16100  005200  5008               	movf	i2___lldiv@divisor+3,w,c
 16101  005202  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16102  005204  A0D8               	btfss	status,0,c
 16103  005206  D009               	goto	i2l6035
 16104  005208  5005               	movf	i2___lldiv@divisor,w,c
 16105  00520A  5E01               	subwf	i2___lldiv@dividend,f,c
 16106  00520C  5006               	movf	i2___lldiv@divisor+1,w,c
 16107  00520E  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16108  005210  5007               	movf	i2___lldiv@divisor+2,w,c
 16109  005212  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16110  005214  5008               	movf	i2___lldiv@divisor+3,w,c
 16111  005216  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16112  005218  8009               	bsf	i2___lldiv@quotient,0,c
 16113  00521A                     i2l6035:
 16114  00521A  90D8               	bcf	status,0,c
 16115  00521C  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16116  00521E  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16117  005220  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16118  005222  3205               	rrcf	i2___lldiv@divisor,f,c
 16119  005224  2E0D               	decfsz	i2___lldiv@counter,f,c
 16120  005226  D7E1               	goto	i2l6027
 16121  005228                     i2l998:
 16122  005228  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16123  00522C  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16124  005230  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16125  005234  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16126  005238  0012               	return		;funcret
 16127  00523A                     __end_ofi2___lldiv:
 16128                           	opt stack 0
 16129                           pclatu	equ	0xFFB
 16130                           pclath	equ	0xFFA
 16131                           tblptru	equ	0xFF8
 16132                           tblptrh	equ	0xFF7
 16133                           tblptrl	equ	0xFF6
 16134                           tablat	equ	0xFF5
 16135                           prodh	equ	0xFF4
 16136                           prodl	equ	0xFF3
 16137                           intcon	equ	0xFF2
 16138                           intcon2	equ	0xFF1
 16139                           intcon3	equ	0xFF0
 16140                           postinc0	equ	0xFEE
 16141                           fsr0h	equ	0xFEA
 16142                           fsr0l	equ	0xFE9
 16143                           wreg	equ	0xFE8
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           indf2	equ	0xFDF
 16147                           postinc2	equ	0xFDE
 16148                           postdec2	equ	0xFDD
 16149                           fsr2h	equ	0xFDA
 16150                           fsr2l	equ	0xFD9
 16151                           status	equ	0xFD8
 16152                           
 16153 ;; *************** function i2_lcdInst *****************
 16154 ;; Defined at:
 16155 ;;		line 26 in file "lcd.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;  data            1    wreg     unsigned char 
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;  data            1    2[COMRAM] unsigned char 
 16160 ;; Return value:  Size  Location     Type
 16161 ;;                  1    wreg      void 
 16162 ;; Registers used:
 16163 ;;		wreg, status,2, status,0, cstack
 16164 ;; Tracked objects:
 16165 ;;		On entry : 0/0
 16166 ;;		On exit  : 0/0
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;Total ram usage:        1 bytes
 16174 ;; Hardware stack levels used:    1
 16175 ;; Hardware stack levels required when called:    1
 16176 ;; This function calls:
 16177 ;;		i2_lcdNibble
 16178 ;; This function is called by:
 16179 ;;		_isr
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183                           	psect	text53
 16184  0059A4                     __ptext53:
 16185                           	opt stack 0
 16186  0059A4                     i2_lcdInst:
 16187                           	opt stack 23
 16188                           
 16189                           ;incstack = 0
 16190                           ;i2lcdInst@data stored from wreg
 16191  0059A4  6E03               	movwf	i2lcdInst@data,c
 16192                           
 16193                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 16194  0059A6  948C               	bcf	3980,2,c	;volatile
 16195                           
 16196                           ;lcd.c: 28: lcdNibble(data);
 16197  0059A8  5003               	movf	i2lcdInst@data,w,c
 16198  0059AA  ECEC  F02A         	call	i2_lcdNibble
 16199  0059AE  0012               	return		;funcret
 16200  0059B0                     __end_ofi2_lcdInst:
 16201                           	opt stack 0
 16202                           pclatu	equ	0xFFB
 16203                           pclath	equ	0xFFA
 16204                           tblptru	equ	0xFF8
 16205                           tblptrh	equ	0xFF7
 16206                           tblptrl	equ	0xFF6
 16207                           tablat	equ	0xFF5
 16208                           prodh	equ	0xFF4
 16209                           prodl	equ	0xFF3
 16210                           intcon	equ	0xFF2
 16211                           intcon2	equ	0xFF1
 16212                           intcon3	equ	0xFF0
 16213                           postinc0	equ	0xFEE
 16214                           fsr0h	equ	0xFEA
 16215                           fsr0l	equ	0xFE9
 16216                           wreg	equ	0xFE8
 16217                           fsr1h	equ	0xFE2
 16218                           fsr1l	equ	0xFE1
 16219                           indf2	equ	0xFDF
 16220                           postinc2	equ	0xFDE
 16221                           postdec2	equ	0xFDD
 16222                           fsr2h	equ	0xFDA
 16223                           fsr2l	equ	0xFD9
 16224                           status	equ	0xFD8
 16225                           
 16226 ;; *************** function i2_lcdNibble *****************
 16227 ;; Defined at:
 16228 ;;		line 36 in file "lcd.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  data            1    wreg     unsigned char 
 16231 ;; Auto vars:     Size  Location     Type
 16232 ;;  data            1    1[COMRAM] unsigned char 
 16233 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  1    wreg      void 
 16236 ;; Registers used:
 16237 ;;		wreg, status,2, status,0
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16247 ;;Total ram usage:        2 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; This function calls:
 16250 ;;		Nothing
 16251 ;; This function is called by:
 16252 ;;		i2_lcdInst
 16253 ;;		i2_putch
 16254 ;; This function uses a non-reentrant model
 16255 ;;
 16256                           
 16257                           	psect	text54
 16258  0055D8                     __ptext54:
 16259                           	opt stack 0
 16260  0055D8                     i2_lcdNibble:
 16261                           	opt stack 22
 16262                           
 16263                           ;incstack = 0
 16264                           ;i2lcdNibble@data stored from wreg
 16265  0055D8  6E02               	movwf	i2lcdNibble@data,c
 16266                           
 16267                           ;lcd.c: 38: char temp = data & 0xF0;
 16268  0055DA  5002               	movf	i2lcdNibble@data,w,c
 16269  0055DC  0BF0               	andlw	240
 16270  0055DE  6E01               	movwf	i2lcdNibble@temp,c
 16271                           
 16272                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16273  0055E0  508C               	movf	3980,w,c	;volatile
 16274  0055E2  0B0F               	andlw	15
 16275  0055E4  6E8C               	movwf	3980,c	;volatile
 16276                           
 16277                           ;lcd.c: 40: LATD = temp | LATD;
 16278  0055E6  5001               	movf	i2lcdNibble@temp,w,c
 16279  0055E8  108C               	iorwf	3980,w,c	;volatile
 16280  0055EA  6E8C               	movwf	3980,c	;volatile
 16281                           
 16282                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 16283  0055EC  968C               	bcf	3980,3,c	;volatile
 16284                           
 16285                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16286  0055EE  0E19               	movlw	25
 16287  0055F0                     i2u940_47:
 16288  0055F0  2EE8               	decfsz	wreg,f,c
 16289  0055F2  D7FE               	bra	i2u940_47
 16290                           
 16291                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 16292  0055F4  868C               	bsf	3980,3,c	;volatile
 16293                           
 16294                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16295  0055F6  0E19               	movlw	25
 16296  0055F8                     i2u941_47:
 16297  0055F8  2EE8               	decfsz	wreg,f,c
 16298  0055FA  D7FE               	bra	i2u941_47
 16299                           
 16300                           ;lcd.c: 47: data = data << 4;
 16301  0055FC  3802               	swapf	i2lcdNibble@data,w,c
 16302  0055FE  0BF0               	andlw	240
 16303  005600  6E02               	movwf	i2lcdNibble@data,c
 16304                           
 16305                           ;lcd.c: 49: temp = data & 0xF0;
 16306  005602  5002               	movf	i2lcdNibble@data,w,c
 16307  005604  0BF0               	andlw	240
 16308  005606  6E01               	movwf	i2lcdNibble@temp,c
 16309                           
 16310                           ;lcd.c: 50: LATD = LATD & 0x0F;
 16311  005608  508C               	movf	3980,w,c	;volatile
 16312  00560A  0B0F               	andlw	15
 16313  00560C  6E8C               	movwf	3980,c	;volatile
 16314                           
 16315                           ;lcd.c: 51: LATD = temp | LATD;
 16316  00560E  5001               	movf	i2lcdNibble@temp,w,c
 16317  005610  108C               	iorwf	3980,w,c	;volatile
 16318  005612  6E8C               	movwf	3980,c	;volatile
 16319                           
 16320                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 16321  005614  968C               	bcf	3980,3,c	;volatile
 16322                           
 16323                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16324  005616  0E19               	movlw	25
 16325  005618                     i2u942_47:
 16326  005618  2EE8               	decfsz	wreg,f,c
 16327  00561A  D7FE               	bra	i2u942_47
 16328                           
 16329                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 16330  00561C  868C               	bsf	3980,3,c	;volatile
 16331                           
 16332                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16333  00561E  0E19               	movlw	25
 16334  005620                     i2u943_47:
 16335  005620  2EE8               	decfsz	wreg,f,c
 16336  005622  D7FE               	bra	i2u943_47
 16337  005624  0012               	return		;funcret
 16338  005626                     __end_ofi2_lcdNibble:
 16339                           	opt stack 0
 16340                           pclatu	equ	0xFFB
 16341                           pclath	equ	0xFFA
 16342                           tblptru	equ	0xFF8
 16343                           tblptrh	equ	0xFF7
 16344                           tblptrl	equ	0xFF6
 16345                           tablat	equ	0xFF5
 16346                           prodh	equ	0xFF4
 16347                           prodl	equ	0xFF3
 16348                           intcon	equ	0xFF2
 16349                           intcon2	equ	0xFF1
 16350                           intcon3	equ	0xFF0
 16351                           postinc0	equ	0xFEE
 16352                           fsr0h	equ	0xFEA
 16353                           fsr0l	equ	0xFE9
 16354                           wreg	equ	0xFE8
 16355                           fsr1h	equ	0xFE2
 16356                           fsr1l	equ	0xFE1
 16357                           indf2	equ	0xFDF
 16358                           postinc2	equ	0xFDE
 16359                           postdec2	equ	0xFDD
 16360                           fsr2h	equ	0xFDA
 16361                           fsr2l	equ	0xFD9
 16362                           status	equ	0xFD8
 16363                           
 16364 ;; *************** function _read_time *****************
 16365 ;; Defined at:
 16366 ;;		line 312 in file "main.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;		None
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  i               1    3[COMRAM] unsigned char 
 16371 ;; Return value:  Size  Location     Type
 16372 ;;                  1    wreg      void 
 16373 ;; Registers used:
 16374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16375 ;; Tracked objects:
 16376 ;;		On entry : 0/0
 16377 ;;		On exit  : 0/0
 16378 ;;		Unchanged: 0/0
 16379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16384 ;;Total ram usage:        1 bytes
 16385 ;; Hardware stack levels used:    1
 16386 ;; Hardware stack levels required when called:    2
 16387 ;; This function calls:
 16388 ;;		i2_I2C_Master_Read
 16389 ;;		i2_I2C_Master_Start
 16390 ;;		i2_I2C_Master_Stop
 16391 ;;		i2_I2C_Master_Write
 16392 ;; This function is called by:
 16393 ;;		_isr
 16394 ;; This function uses a non-reentrant model
 16395 ;;
 16396                           
 16397                           	psect	text55
 16398  00539E                     __ptext55:
 16399                           	opt stack 0
 16400  00539E                     _read_time:
 16401                           	opt stack 22
 16402                           
 16403                           ;main.c: 314: I2C_Master_Start();
 16404                           
 16405                           ;incstack = 0
 16406  00539E  ECEE  F02C         	call	i2_I2C_Master_Start	;wreg free
 16407                           
 16408                           ;main.c: 315: I2C_Master_Write(0b11010000);
 16409  0053A2  0E00               	movlw	0
 16410  0053A4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16411  0053A6  0ED0               	movlw	208
 16412  0053A8  6E02               	movwf	i2I2C_Master_Write@d,c
 16413  0053AA  ECDD  F02C         	call	i2_I2C_Master_Write	;wreg free
 16414                           
 16415                           ;main.c: 316: I2C_Master_Write(0x00);
 16416  0053AE  0E00               	movlw	0
 16417  0053B0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16418  0053B2  0E00               	movlw	0
 16419  0053B4  6E02               	movwf	i2I2C_Master_Write@d,c
 16420  0053B6  ECDD  F02C         	call	i2_I2C_Master_Write	;wreg free
 16421                           
 16422                           ;main.c: 317: I2C_Master_Stop();
 16423  0053BA  ECEA  F02C         	call	i2_I2C_Master_Stop	;wreg free
 16424                           
 16425                           ;main.c: 320: I2C_Master_Start();
 16426  0053BE  ECEE  F02C         	call	i2_I2C_Master_Start	;wreg free
 16427                           
 16428                           ;main.c: 321: I2C_Master_Write(0b11010001);
 16429  0053C2  0E00               	movlw	0
 16430  0053C4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16431  0053C6  0ED1               	movlw	209
 16432  0053C8  6E02               	movwf	i2I2C_Master_Write@d,c
 16433  0053CA  ECDD  F02C         	call	i2_I2C_Master_Write	;wreg free
 16434                           
 16435                           ;main.c: 322: for(unsigned char i=0;i<0x06;i++){
 16436  0053CE  0E00               	movlw	0
 16437  0053D0  6E04               	movwf	read_time@i,c
 16438  0053D2                     i2l6329:
 16439  0053D2  0E05               	movlw	5
 16440  0053D4  6404               	cpfsgt	read_time@i,c
 16441  0053D6  D001               	goto	i2l6333
 16442  0053D8  D00E               	goto	i2l6339
 16443  0053DA                     i2l6333:
 16444                           
 16445                           ;main.c: 323: time[i] = I2C_Master_Read(1);
 16446  0053DA  5004               	movf	read_time@i,w,c
 16447  0053DC  0D01               	mullw	1
 16448  0053DE  0E58               	movlw	low _time
 16449  0053E0  24F3               	addwf	prodl,w,c
 16450  0053E2  6ED9               	movwf	fsr2l,c
 16451  0053E4  0E01               	movlw	high _time
 16452  0053E6  20F4               	addwfc	prodh,w,c
 16453  0053E8  6EDA               	movwf	fsr2h,c
 16454  0053EA  0E01               	movlw	1
 16455  0053EC  EC45  F02C         	call	i2_I2C_Master_Read
 16456  0053F0  6EDF               	movwf	indf2,c
 16457  0053F2  2A04               	incf	read_time@i,f,c
 16458  0053F4  D7EE               	goto	i2l6329
 16459  0053F6                     i2l6339:
 16460                           
 16461                           ;main.c: 324: }
 16462                           ;main.c: 325: time[6] = I2C_Master_Read(0);
 16463  0053F6  0E00               	movlw	0
 16464  0053F8  EC45  F02C         	call	i2_I2C_Master_Read
 16465  0053FC  0101               	movlb	1	; () banked
 16466  0053FE  6F5E               	movwf	(_time+6)& (0+255),b
 16467                           
 16468                           ;main.c: 326: I2C_Master_Stop();
 16469  005400  ECEA  F02C         	call	i2_I2C_Master_Stop	;wreg free
 16470  005404  0012               	return	
 16471  005406                     __end_of_read_time:
 16472                           	opt stack 0
 16473                           pclatu	equ	0xFFB
 16474                           pclath	equ	0xFFA
 16475                           tblptru	equ	0xFF8
 16476                           tblptrh	equ	0xFF7
 16477                           tblptrl	equ	0xFF6
 16478                           tablat	equ	0xFF5
 16479                           prodh	equ	0xFF4
 16480                           prodl	equ	0xFF3
 16481                           intcon	equ	0xFF2
 16482                           intcon2	equ	0xFF1
 16483                           intcon3	equ	0xFF0
 16484                           postinc0	equ	0xFEE
 16485                           fsr0h	equ	0xFEA
 16486                           fsr0l	equ	0xFE9
 16487                           wreg	equ	0xFE8
 16488                           fsr1h	equ	0xFE2
 16489                           fsr1l	equ	0xFE1
 16490                           indf2	equ	0xFDF
 16491                           postinc2	equ	0xFDE
 16492                           postdec2	equ	0xFDD
 16493                           fsr2h	equ	0xFDA
 16494                           fsr2l	equ	0xFD9
 16495                           status	equ	0xFD8
 16496                           
 16497 ;; *************** function i2_I2C_Master_Write *****************
 16498 ;; Defined at:
 16499 ;;		line 48 in file "I2C.c"
 16500 ;; Parameters:    Size  Location     Type
 16501 ;;  d               2    1[COMRAM] unsigned int 
 16502 ;; Auto vars:     Size  Location     Type
 16503 ;;		None
 16504 ;; Return value:  Size  Location     Type
 16505 ;;                  1    wreg      void 
 16506 ;; Registers used:
 16507 ;;		wreg, status,2, status,0, cstack
 16508 ;; Tracked objects:
 16509 ;;		On entry : 0/0
 16510 ;;		On exit  : 0/0
 16511 ;;		Unchanged: 0/0
 16512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;Total ram usage:        2 bytes
 16518 ;; Hardware stack levels used:    1
 16519 ;; Hardware stack levels required when called:    1
 16520 ;; This function calls:
 16521 ;;		i2_I2C_Master_Wait
 16522 ;; This function is called by:
 16523 ;;		_read_time
 16524 ;;		i2_read_colorsensor
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           	psect	text56
 16529  0059BA                     __ptext56:
 16530                           	opt stack 0
 16531  0059BA                     i2_I2C_Master_Write:
 16532                           	opt stack 22
 16533                           
 16534                           ;I2C.c: 50: I2C_Master_Wait();
 16535                           
 16536                           ;incstack = 0
 16537  0059BA  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16538                           
 16539                           ;I2C.c: 51: SSPBUF = d;
 16540  0059BE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 16541  0059C2  0012               	return		;funcret
 16542  0059C4                     __end_ofi2_I2C_Master_Write:
 16543                           	opt stack 0
 16544                           pclatu	equ	0xFFB
 16545                           pclath	equ	0xFFA
 16546                           tblptru	equ	0xFF8
 16547                           tblptrh	equ	0xFF7
 16548                           tblptrl	equ	0xFF6
 16549                           tablat	equ	0xFF5
 16550                           prodh	equ	0xFF4
 16551                           prodl	equ	0xFF3
 16552                           intcon	equ	0xFF2
 16553                           intcon2	equ	0xFF1
 16554                           intcon3	equ	0xFF0
 16555                           postinc0	equ	0xFEE
 16556                           fsr0h	equ	0xFEA
 16557                           fsr0l	equ	0xFE9
 16558                           wreg	equ	0xFE8
 16559                           fsr1h	equ	0xFE2
 16560                           fsr1l	equ	0xFE1
 16561                           indf2	equ	0xFDF
 16562                           postinc2	equ	0xFDE
 16563                           postdec2	equ	0xFDD
 16564                           fsr2h	equ	0xFDA
 16565                           fsr2l	equ	0xFD9
 16566                           status	equ	0xFD8
 16567                           
 16568 ;; *************** function i2_I2C_Master_Stop *****************
 16569 ;; Defined at:
 16570 ;;		line 42 in file "I2C.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;		None
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;		None
 16575 ;; Return value:  Size  Location     Type
 16576 ;;                  1    wreg      void 
 16577 ;; Registers used:
 16578 ;;		wreg, status,2, status,0, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16588 ;;Total ram usage:        0 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    1
 16591 ;; This function calls:
 16592 ;;		i2_I2C_Master_Wait
 16593 ;; This function is called by:
 16594 ;;		_read_time
 16595 ;;		i2_read_colorsensor
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           	psect	text57
 16600  0059D4                     __ptext57:
 16601                           	opt stack 0
 16602  0059D4                     i2_I2C_Master_Stop:
 16603                           	opt stack 22
 16604                           
 16605                           ;I2C.c: 44: I2C_Master_Wait();
 16606                           
 16607                           ;incstack = 0
 16608  0059D4  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16609                           
 16610                           ;I2C.c: 45: PEN = 1;
 16611  0059D8  84C5               	bsf	4037,2,c	;volatile
 16612  0059DA  0012               	return		;funcret
 16613  0059DC                     __end_ofi2_I2C_Master_Stop:
 16614                           	opt stack 0
 16615                           pclatu	equ	0xFFB
 16616                           pclath	equ	0xFFA
 16617                           tblptru	equ	0xFF8
 16618                           tblptrh	equ	0xFF7
 16619                           tblptrl	equ	0xFF6
 16620                           tablat	equ	0xFF5
 16621                           prodh	equ	0xFF4
 16622                           prodl	equ	0xFF3
 16623                           intcon	equ	0xFF2
 16624                           intcon2	equ	0xFF1
 16625                           intcon3	equ	0xFF0
 16626                           postinc0	equ	0xFEE
 16627                           fsr0h	equ	0xFEA
 16628                           fsr0l	equ	0xFE9
 16629                           wreg	equ	0xFE8
 16630                           fsr1h	equ	0xFE2
 16631                           fsr1l	equ	0xFE1
 16632                           indf2	equ	0xFDF
 16633                           postinc2	equ	0xFDE
 16634                           postdec2	equ	0xFDD
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           
 16639 ;; *************** function i2_I2C_Master_Start *****************
 16640 ;; Defined at:
 16641 ;;		line 30 in file "I2C.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;		None
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;		None
 16646 ;; Return value:  Size  Location     Type
 16647 ;;                  1    wreg      void 
 16648 ;; Registers used:
 16649 ;;		wreg, status,2, status,0, cstack
 16650 ;; Tracked objects:
 16651 ;;		On entry : 0/0
 16652 ;;		On exit  : 0/0
 16653 ;;		Unchanged: 0/0
 16654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;Total ram usage:        0 bytes
 16660 ;; Hardware stack levels used:    1
 16661 ;; Hardware stack levels required when called:    1
 16662 ;; This function calls:
 16663 ;;		i2_I2C_Master_Wait
 16664 ;; This function is called by:
 16665 ;;		_read_time
 16666 ;;		i2_read_colorsensor
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           	psect	text58
 16671  0059DC                     __ptext58:
 16672                           	opt stack 0
 16673  0059DC                     i2_I2C_Master_Start:
 16674                           	opt stack 22
 16675                           
 16676                           ;I2C.c: 32: I2C_Master_Wait();
 16677                           
 16678                           ;incstack = 0
 16679  0059DC  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16680                           
 16681                           ;I2C.c: 33: SEN = 1;
 16682  0059E0  80C5               	bsf	4037,0,c	;volatile
 16683  0059E2  0012               	return		;funcret
 16684  0059E4                     __end_ofi2_I2C_Master_Start:
 16685                           	opt stack 0
 16686                           pclatu	equ	0xFFB
 16687                           pclath	equ	0xFFA
 16688                           tblptru	equ	0xFF8
 16689                           tblptrh	equ	0xFF7
 16690                           tblptrl	equ	0xFF6
 16691                           tablat	equ	0xFF5
 16692                           prodh	equ	0xFF4
 16693                           prodl	equ	0xFF3
 16694                           intcon	equ	0xFF2
 16695                           intcon2	equ	0xFF1
 16696                           intcon3	equ	0xFF0
 16697                           postinc0	equ	0xFEE
 16698                           fsr0h	equ	0xFEA
 16699                           fsr0l	equ	0xFE9
 16700                           wreg	equ	0xFE8
 16701                           fsr1h	equ	0xFE2
 16702                           fsr1l	equ	0xFE1
 16703                           indf2	equ	0xFDF
 16704                           postinc2	equ	0xFDE
 16705                           postdec2	equ	0xFDD
 16706                           fsr2h	equ	0xFDA
 16707                           fsr2l	equ	0xFD9
 16708                           status	equ	0xFD8
 16709                           
 16710 ;; *************** function i2_I2C_Master_Read *****************
 16711 ;; Defined at:
 16712 ;;		line 110 in file "I2C.c"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;  a               1    wreg     unsigned char 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;  a               1    1[COMRAM] unsigned char 
 16717 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 16718 ;; Return value:  Size  Location     Type
 16719 ;;                  1    wreg      unsigned char 
 16720 ;; Registers used:
 16721 ;;		wreg, status,2, status,0, cstack
 16722 ;; Tracked objects:
 16723 ;;		On entry : 0/0
 16724 ;;		On exit  : 0/0
 16725 ;;		Unchanged: 0/0
 16726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;Total ram usage:        2 bytes
 16732 ;; Hardware stack levels used:    1
 16733 ;; Hardware stack levels required when called:    1
 16734 ;; This function calls:
 16735 ;;		i2_I2C_Master_Wait
 16736 ;; This function is called by:
 16737 ;;		_read_time
 16738 ;;		i2_read_colorsensor
 16739 ;; This function uses a non-reentrant model
 16740 ;;
 16741                           
 16742                           	psect	text59
 16743  00588A                     __ptext59:
 16744                           	opt stack 0
 16745  00588A                     i2_I2C_Master_Read:
 16746                           	opt stack 22
 16747                           
 16748                           ;incstack = 0
 16749                           ;i2I2C_Master_Read@a stored from wreg
 16750  00588A  6E02               	movwf	i2I2C_Master_Read@a,c
 16751                           
 16752                           ;I2C.c: 112: unsigned char temp;
 16753                           ;I2C.c: 113: I2C_Master_Wait();
 16754  00588C  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16755                           
 16756                           ;I2C.c: 114: RCEN = 1;
 16757  005890  86C5               	bsf	4037,3,c	;volatile
 16758                           
 16759                           ;I2C.c: 115: I2C_Master_Wait();
 16760  005892  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16761                           
 16762                           ;I2C.c: 116: temp = SSPBUF;
 16763  005896  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 16764                           
 16765                           ;I2C.c: 117: I2C_Master_Wait();
 16766  00589A  ECB3  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16767                           
 16768                           ;I2C.c: 118: ACKDT = (a)?0:1;
 16769  00589E  5002               	movf	i2I2C_Master_Read@a,w,c
 16770  0058A0  A4D8               	btfss	status,2,c
 16771  0058A2  D002               	goto	i2u645_40
 16772  0058A4  8AC5               	bsf	4037,5,c	;volatile
 16773  0058A6  D001               	goto	i2l5819
 16774  0058A8                     i2u645_40:
 16775  0058A8  9AC5               	bcf	4037,5,c	;volatile
 16776  0058AA                     i2l5819:
 16777                           
 16778                           ;I2C.c: 119: ACKEN = 1;
 16779  0058AA  88C5               	bsf	4037,4,c	;volatile
 16780                           
 16781                           ;I2C.c: 120: return temp;
 16782  0058AC  5003               	movf	i2I2C_Master_Read@temp,w,c
 16783  0058AE  0012               	return	
 16784  0058B0                     __end_ofi2_I2C_Master_Read:
 16785                           	opt stack 0
 16786                           pclatu	equ	0xFFB
 16787                           pclath	equ	0xFFA
 16788                           tblptru	equ	0xFF8
 16789                           tblptrh	equ	0xFF7
 16790                           tblptrl	equ	0xFF6
 16791                           tablat	equ	0xFF5
 16792                           prodh	equ	0xFF4
 16793                           prodl	equ	0xFF3
 16794                           intcon	equ	0xFF2
 16795                           intcon2	equ	0xFF1
 16796                           intcon3	equ	0xFF0
 16797                           postinc0	equ	0xFEE
 16798                           fsr0h	equ	0xFEA
 16799                           fsr0l	equ	0xFE9
 16800                           wreg	equ	0xFE8
 16801                           fsr1h	equ	0xFE2
 16802                           fsr1l	equ	0xFE1
 16803                           indf2	equ	0xFDF
 16804                           postinc2	equ	0xFDE
 16805                           postdec2	equ	0xFDD
 16806                           fsr2h	equ	0xFDA
 16807                           fsr2l	equ	0xFD9
 16808                           status	equ	0xFD8
 16809                           
 16810 ;; *************** function i2_I2C_Master_Wait *****************
 16811 ;; Defined at:
 16812 ;;		line 25 in file "I2C.c"
 16813 ;; Parameters:    Size  Location     Type
 16814 ;;		None
 16815 ;; Auto vars:     Size  Location     Type
 16816 ;;		None
 16817 ;; Return value:  Size  Location     Type
 16818 ;;                  1    wreg      void 
 16819 ;; Registers used:
 16820 ;;		wreg, status,2, status,0
 16821 ;; Tracked objects:
 16822 ;;		On entry : 0/0
 16823 ;;		On exit  : 0/0
 16824 ;;		Unchanged: 0/0
 16825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16830 ;;Total ram usage:        1 bytes
 16831 ;; Hardware stack levels used:    1
 16832 ;; This function calls:
 16833 ;;		Nothing
 16834 ;; This function is called by:
 16835 ;;		i2_I2C_Master_Start
 16836 ;;		i2_I2C_Master_Stop
 16837 ;;		i2_I2C_Master_Write
 16838 ;;		i2_I2C_Master_Read
 16839 ;; This function uses a non-reentrant model
 16840 ;;
 16841                           
 16842                           	psect	text60
 16843  005966                     __ptext60:
 16844                           	opt stack 0
 16845  005966                     i2_I2C_Master_Wait:
 16846                           	opt stack 22
 16847  005966                     i2l34:
 16848  005966  B4C7               	btfsc	4039,2,c	;volatile
 16849  005968  D7FE               	goto	i2l34
 16850  00596A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 16851  00596E  0E1F               	movlw	31
 16852  005970  1601               	andwf	??i2_I2C_Master_Wait,f,c
 16853  005972  B4D8               	btfsc	status,2,c
 16854  005974  0012               	return	
 16855  005976  D7F7               	goto	i2l34
 16856  005978                     __end_ofi2_I2C_Master_Wait:
 16857                           	opt stack 0
 16858                           pclatu	equ	0xFFB
 16859                           pclath	equ	0xFFA
 16860                           tblptru	equ	0xFF8
 16861                           tblptrh	equ	0xFF7
 16862                           tblptrl	equ	0xFF6
 16863                           tablat	equ	0xFF5
 16864                           prodh	equ	0xFF4
 16865                           prodl	equ	0xFF3
 16866                           intcon	equ	0xFF2
 16867                           intcon2	equ	0xFF1
 16868                           intcon3	equ	0xFF0
 16869                           postinc0	equ	0xFEE
 16870                           fsr0h	equ	0xFEA
 16871                           fsr0l	equ	0xFE9
 16872                           wreg	equ	0xFE8
 16873                           fsr1h	equ	0xFE2
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           fsr2h	equ	0xFDA
 16879                           fsr2l	equ	0xFD9
 16880                           status	equ	0xFD8
 16881                           
 16882 ;; *************** function _dec_to_hex *****************
 16883 ;; Defined at:
 16884 ;;		line 275 in file "main.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;  num             2  116[COMRAM] int 
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;  quotient        2   12[BANK0 ] int 
 16889 ;;  hexnum          2   10[BANK0 ] int 
 16890 ;;  i               2    8[BANK0 ] int 
 16891 ;;  temp            2    6[BANK0 ] int 
 16892 ;; Return value:  Size  Location     Type
 16893 ;;                  2  116[COMRAM] int 
 16894 ;; Registers used:
 16895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16904 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16905 ;;Total ram usage:       16 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    5
 16908 ;; This function calls:
 16909 ;;		___awtoft
 16910 ;;		_pow
 16911 ;;		i2___awdiv
 16912 ;;		i2___ftadd
 16913 ;;		i2___ftmul
 16914 ;;		i2___fttol
 16915 ;; This function is called by:
 16916 ;;		_isr
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           	psect	text61
 16921  0040F6                     __ptext61:
 16922                           	opt stack 0
 16923  0040F6                     _dec_to_hex:
 16924                           	opt stack 19
 16925                           
 16926                           ;main.c: 276: int i = 0, quotient = num, temp, hexnum = 0;
 16927                           
 16928                           ;incstack = 0
 16929  0040F6  0E00               	movlw	0
 16930  0040F8  0100               	movlb	0	; () banked
 16931  0040FA  6F89               	movwf	(dec_to_hex@i+1)& (0+255),b
 16932  0040FC  0E00               	movlw	0
 16933  0040FE  6F88               	movwf	dec_to_hex@i& (0+255),b
 16934                           
 16935                           ; BSR set to: 0
 16936  004100  C075  F08C         	movff	dec_to_hex@num,dec_to_hex@quotient
 16937  004104  C076  F08D         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 16938  004108  0E00               	movlw	0
 16939  00410A  0100               	movlb	0	; () banked
 16940  00410C  6F8B               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
 16941  00410E  0E00               	movlw	0
 16942  004110  6F8A               	movwf	dec_to_hex@hexnum& (0+255),b
 16943                           
 16944                           ;main.c: 278: while (quotient != 0) {
 16945  004112  D06C               	goto	i2l6359
 16946  004114                     i2l6347:
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;main.c: 279: temp = quotient % 16;
 16950  004114  0E0F               	movlw	15
 16951  004116  0100               	movlb	0	; () banked
 16952  004118  158C               	andwf	dec_to_hex@quotient& (0+255),w,b
 16953  00411A  0100               	movlb	0	; () banked
 16954  00411C  6F86               	movwf	dec_to_hex@temp& (0+255),b
 16955  00411E  0100               	movlb	0	; () banked
 16956  004120  6B87               	clrf	(dec_to_hex@temp+1)& (0+255),b
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;main.c: 280: hexnum += temp*pow(10,i);
 16960  004122  C088  F009         	movff	dec_to_hex@i,___awtoft@c
 16961  004126  C089  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
 16962  00412A  EC9A  F02B         	call	___awtoft	;wreg free
 16963  00412E  C009  F080         	movff	?___awtoft,_dec_to_hex$1304
 16964  004132  C00A  F081         	movff	?___awtoft+1,_dec_to_hex$1304+1
 16965  004136  C00B  F082         	movff	?___awtoft+2,_dec_to_hex$1304+2
 16966                           
 16967                           ;main.c: 280: hexnum += temp*pow(10,i);
 16968  00413A  C080  F067         	movff	_dec_to_hex$1304,pow@y
 16969  00413E  C081  F068         	movff	_dec_to_hex$1304+1,pow@y+1
 16970  004142  C082  F069         	movff	_dec_to_hex$1304+2,pow@y+2
 16971  004146  0E00               	movlw	0
 16972  004148  6E64               	movwf	pow@x,c
 16973  00414A  0E20               	movlw	32
 16974  00414C  6E65               	movwf	pow@x+1,c
 16975  00414E  0E41               	movlw	65
 16976  004150  6E66               	movwf	pow@x+2,c
 16977  004152  EC87  F01B         	call	_pow	;wreg free
 16978  004156  C064  F083         	movff	?_pow,_dec_to_hex$1522
 16979  00415A  C065  F084         	movff	?_pow+1,_dec_to_hex$1522+1
 16980  00415E  C066  F085         	movff	?_pow+2,_dec_to_hex$1522+2
 16981                           
 16982                           ;main.c: 280: hexnum += temp*pow(10,i);
 16983  004162  C083  F018         	movff	_dec_to_hex$1522,i2___ftmul@f2
 16984  004166  C084  F019         	movff	_dec_to_hex$1522+1,i2___ftmul@f2+1
 16985  00416A  C085  F01A         	movff	_dec_to_hex$1522+2,i2___ftmul@f2+2
 16986  00416E  C086  F009         	movff	dec_to_hex@temp,___awtoft@c
 16987  004172  C087  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
 16988  004176  EC9A  F02B         	call	___awtoft	;wreg free
 16989  00417A  C009  F015         	movff	?___awtoft,i2___ftmul@f1
 16990  00417E  C00A  F016         	movff	?___awtoft+1,i2___ftmul@f1+1
 16991  004182  C00B  F017         	movff	?___awtoft+2,i2___ftmul@f1+2
 16992  004186  ECF8  F022         	call	i2___ftmul	;wreg free
 16993  00418A  C015  F031         	movff	?i2___ftmul,i2___ftadd@f2
 16994  00418E  C016  F032         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 16995  004192  C017  F033         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 16996  004196  C08A  F009         	movff	dec_to_hex@hexnum,___awtoft@c
 16997  00419A  C08B  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
 16998  00419E  EC9A  F02B         	call	___awtoft	;wreg free
 16999  0041A2  C009  F02E         	movff	?___awtoft,i2___ftadd@f1
 17000  0041A6  C00A  F02F         	movff	?___awtoft+1,i2___ftadd@f1+1
 17001  0041AA  C00B  F030         	movff	?___awtoft+2,i2___ftadd@f1+2
 17002  0041AE  EC1E  F019         	call	i2___ftadd	;wreg free
 17003  0041B2  C02E  F03A         	movff	?i2___ftadd,i2___fttol@f1
 17004  0041B6  C02F  F03B         	movff	?i2___ftadd+1,i2___fttol@f1+1
 17005  0041BA  C030  F03C         	movff	?i2___ftadd+2,i2___fttol@f1+2
 17006  0041BE  EC7E  F022         	call	i2___fttol	;wreg free
 17007  0041C2  C03A  F08A         	movff	?i2___fttol,dec_to_hex@hexnum
 17008  0041C6  C03B  F08B         	movff	?i2___fttol+1,dec_to_hex@hexnum+1
 17009                           
 17010                           ;main.c: 281: quotient = quotient / 16;
 17011  0041CA  C08C  F007         	movff	dec_to_hex@quotient,i2___awdiv@dividend
 17012  0041CE  C08D  F008         	movff	dec_to_hex@quotient+1,i2___awdiv@dividend+1
 17013  0041D2  0E00               	movlw	0
 17014  0041D4  6E0A               	movwf	i2___awdiv@divisor+1,c
 17015  0041D6  0E10               	movlw	16
 17016  0041D8  6E09               	movwf	i2___awdiv@divisor,c
 17017  0041DA  EC9A  F028         	call	i2___awdiv	;wreg free
 17018  0041DE  C007  F08C         	movff	?i2___awdiv,dec_to_hex@quotient
 17019  0041E2  C008  F08D         	movff	?i2___awdiv+1,dec_to_hex@quotient+1
 17020                           
 17021                           ;main.c: 282: i += 1;
 17022  0041E6  0100               	movlb	0	; () banked
 17023  0041E8  4B88               	infsnz	dec_to_hex@i& (0+255),f,b
 17024  0041EA  2B89               	incf	(dec_to_hex@i+1)& (0+255),f,b
 17025  0041EC                     i2l6359:
 17026                           
 17027                           ; BSR set to: 0
 17028  0041EC  0100               	movlb	0	; () banked
 17029  0041EE  518C               	movf	dec_to_hex@quotient& (0+255),w,b
 17030  0041F0  0100               	movlb	0	; () banked
 17031  0041F2  118D               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
 17032  0041F4  A4D8               	btfss	status,2,c
 17033  0041F6  D78E               	goto	i2l6347
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;main.c: 283: }
 17037                           ;main.c: 284: return hexnum;
 17038  0041F8  C08A  F075         	movff	dec_to_hex@hexnum,?_dec_to_hex
 17039  0041FC  C08B  F076         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 17040                           
 17041                           ; BSR set to: 0
 17042  004200  0012               	return		;funcret
 17043  004202                     __end_of_dec_to_hex:
 17044                           	opt stack 0
 17045                           pclatu	equ	0xFFB
 17046                           pclath	equ	0xFFA
 17047                           tblptru	equ	0xFF8
 17048                           tblptrh	equ	0xFF7
 17049                           tblptrl	equ	0xFF6
 17050                           tablat	equ	0xFF5
 17051                           prodh	equ	0xFF4
 17052                           prodl	equ	0xFF3
 17053                           intcon	equ	0xFF2
 17054                           intcon2	equ	0xFF1
 17055                           intcon3	equ	0xFF0
 17056                           postinc0	equ	0xFEE
 17057                           fsr0h	equ	0xFEA
 17058                           fsr0l	equ	0xFE9
 17059                           wreg	equ	0xFE8
 17060                           fsr1h	equ	0xFE2
 17061                           fsr1l	equ	0xFE1
 17062                           indf2	equ	0xFDF
 17063                           postinc2	equ	0xFDE
 17064                           postdec2	equ	0xFDD
 17065                           fsr2h	equ	0xFDA
 17066                           fsr2l	equ	0xFD9
 17067                           status	equ	0xFD8
 17068                           
 17069 ;; *************** function i2___awdiv *****************
 17070 ;; Defined at:
 17071 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;  dividend        2    6[COMRAM] int 
 17074 ;;  divisor         2    8[COMRAM] int 
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;  __awdiv         2   12[COMRAM] int 
 17077 ;;  __awdiv         1   11[COMRAM] unsigned char 
 17078 ;;  __awdiv         1   10[COMRAM] unsigned char 
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  2    6[COMRAM] int 
 17081 ;; Registers used:
 17082 ;;		wreg, status,2, status,0
 17083 ;; Tracked objects:
 17084 ;;		On entry : 0/0
 17085 ;;		On exit  : 0/0
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17091 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17092 ;;Total ram usage:        8 bytes
 17093 ;; Hardware stack levels used:    1
 17094 ;; This function calls:
 17095 ;;		Nothing
 17096 ;; This function is called by:
 17097 ;;		_dec_to_hex
 17098 ;;		i2_fround
 17099 ;;		i2_scale
 17100 ;;		i2_printf
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           	psect	text62
 17105  005134                     __ptext62:
 17106                           	opt stack 0
 17107  005134                     i2___awdiv:
 17108                           	opt stack 22
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;incstack = 0
 17112  005134  0E00               	movlw	0
 17113  005136  6E0C               	movwf	i2___awdiv@sign,c
 17114  005138  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17115  00513A  D006               	goto	i2l5317
 17116  00513C  6C09               	negf	i2___awdiv@divisor,c
 17117  00513E  1E0A               	comf	i2___awdiv@divisor+1,f,c
 17118  005140  B0D8               	btfsc	status,0,c
 17119  005142  2A0A               	incf	i2___awdiv@divisor+1,f,c
 17120  005144  0E01               	movlw	1
 17121  005146  6E0C               	movwf	i2___awdiv@sign,c
 17122  005148                     i2l5317:
 17123  005148  AE08               	btfss	i2___awdiv@dividend+1,7,c
 17124  00514A  D006               	goto	i2l5323
 17125  00514C  6C07               	negf	i2___awdiv@dividend,c
 17126  00514E  1E08               	comf	i2___awdiv@dividend+1,f,c
 17127  005150  B0D8               	btfsc	status,0,c
 17128  005152  2A08               	incf	i2___awdiv@dividend+1,f,c
 17129  005154  0E01               	movlw	1
 17130  005156  1A0C               	xorwf	i2___awdiv@sign,f,c
 17131  005158                     i2l5323:
 17132  005158  0E00               	movlw	0
 17133  00515A  6E0E               	movwf	i2___awdiv@quotient+1,c
 17134  00515C  0E00               	movlw	0
 17135  00515E  6E0D               	movwf	i2___awdiv@quotient,c
 17136  005160  5009               	movf	i2___awdiv@divisor,w,c
 17137  005162  100A               	iorwf	i2___awdiv@divisor+1,w,c
 17138  005164  B4D8               	btfsc	status,2,c
 17139  005166  D01C               	goto	i2l5345
 17140  005168  0E01               	movlw	1
 17141  00516A  6E0B               	movwf	i2___awdiv@counter,c
 17142  00516C  D004               	goto	i2l5331
 17143  00516E                     i2l5329:
 17144  00516E  90D8               	bcf	status,0,c
 17145  005170  3609               	rlcf	i2___awdiv@divisor,f,c
 17146  005172  360A               	rlcf	i2___awdiv@divisor+1,f,c
 17147  005174  2A0B               	incf	i2___awdiv@counter,f,c
 17148  005176                     i2l5331:
 17149  005176  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17150  005178  D7FA               	goto	i2l5329
 17151  00517A                     i2l5333:
 17152  00517A  90D8               	bcf	status,0,c
 17153  00517C  360D               	rlcf	i2___awdiv@quotient,f,c
 17154  00517E  360E               	rlcf	i2___awdiv@quotient+1,f,c
 17155  005180  5009               	movf	i2___awdiv@divisor,w,c
 17156  005182  5C07               	subwf	i2___awdiv@dividend,w,c
 17157  005184  500A               	movf	i2___awdiv@divisor+1,w,c
 17158  005186  5808               	subwfb	i2___awdiv@dividend+1,w,c
 17159  005188  A0D8               	btfss	status,0,c
 17160  00518A  D005               	goto	i2l5341
 17161  00518C  5009               	movf	i2___awdiv@divisor,w,c
 17162  00518E  5E07               	subwf	i2___awdiv@dividend,f,c
 17163  005190  500A               	movf	i2___awdiv@divisor+1,w,c
 17164  005192  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 17165  005194  800D               	bsf	i2___awdiv@quotient,0,c
 17166  005196                     i2l5341:
 17167  005196  90D8               	bcf	status,0,c
 17168  005198  320A               	rrcf	i2___awdiv@divisor+1,f,c
 17169  00519A  3209               	rrcf	i2___awdiv@divisor,f,c
 17170  00519C  2E0B               	decfsz	i2___awdiv@counter,f,c
 17171  00519E  D7ED               	goto	i2l5333
 17172  0051A0                     i2l5345:
 17173  0051A0  500C               	movf	i2___awdiv@sign,w,c
 17174  0051A2  B4D8               	btfsc	status,2,c
 17175  0051A4  D004               	goto	i2l5349
 17176  0051A6  6C0D               	negf	i2___awdiv@quotient,c
 17177  0051A8  1E0E               	comf	i2___awdiv@quotient+1,f,c
 17178  0051AA  B0D8               	btfsc	status,0,c
 17179  0051AC  2A0E               	incf	i2___awdiv@quotient+1,f,c
 17180  0051AE                     i2l5349:
 17181  0051AE  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 17182  0051B2  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17183  0051B6  0012               	return	
 17184  0051B8                     __end_ofi2___awdiv:
 17185                           	opt stack 0
 17186                           pclatu	equ	0xFFB
 17187                           pclath	equ	0xFFA
 17188                           tblptru	equ	0xFF8
 17189                           tblptrh	equ	0xFF7
 17190                           tblptrl	equ	0xFF6
 17191                           tablat	equ	0xFF5
 17192                           prodh	equ	0xFF4
 17193                           prodl	equ	0xFF3
 17194                           intcon	equ	0xFF2
 17195                           intcon2	equ	0xFF1
 17196                           intcon3	equ	0xFF0
 17197                           postinc0	equ	0xFEE
 17198                           fsr0h	equ	0xFEA
 17199                           fsr0l	equ	0xFE9
 17200                           wreg	equ	0xFE8
 17201                           fsr1h	equ	0xFE2
 17202                           fsr1l	equ	0xFE1
 17203                           indf2	equ	0xFDF
 17204                           postinc2	equ	0xFDE
 17205                           postdec2	equ	0xFDD
 17206                           fsr2h	equ	0xFDA
 17207                           fsr2l	equ	0xFD9
 17208                           status	equ	0xFD8
 17209                           
 17210 ;; *************** function _pow *****************
 17211 ;; Defined at:
 17212 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 17213 ;; Parameters:    Size  Location     Type
 17214 ;;  x               3   99[COMRAM] int 
 17215 ;;  y               3  102[COMRAM] int 
 17216 ;; Auto vars:     Size  Location     Type
 17217 ;;  yi              4  112[COMRAM] unsigned long 
 17218 ;;  sign            1  111[COMRAM] unsigned char 
 17219 ;; Return value:  Size  Location     Type
 17220 ;;                  3   99[COMRAM] unsigned char 
 17221 ;; Registers used:
 17222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17223 ;; Tracked objects:
 17224 ;;		On entry : 0/0
 17225 ;;		On exit  : 0/0
 17226 ;;		Unchanged: 0/0
 17227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17228 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17229 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17231 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;Total ram usage:       17 bytes
 17233 ;; Hardware stack levels used:    1
 17234 ;; Hardware stack levels required when called:    4
 17235 ;; This function calls:
 17236 ;;		_exp
 17237 ;;		_log
 17238 ;;		i2___ftge
 17239 ;;		i2___ftmul
 17240 ;;		i2___ftneg
 17241 ;;		i2___fttol
 17242 ;;		i2___lltoft
 17243 ;; This function is called by:
 17244 ;;		_dec_to_hex
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           	psect	text63
 17249  00370E                     __ptext63:
 17250                           	opt stack 0
 17251  00370E                     _pow:
 17252                           	opt stack 19
 17253                           
 17254                           ;incstack = 0
 17255  00370E  0E00               	movlw	0
 17256  003710  6E70               	movwf	pow@sign,c
 17257  003712  5064               	movf	pow@x,w,c
 17258  003714  1065               	iorwf	pow@x+1,w,c
 17259  003716  1066               	iorwf	pow@x+2,w,c
 17260  003718  A4D8               	btfss	status,2,c
 17261  00371A  D01C               	goto	i2l5719
 17262  00371C  0E00               	movlw	0
 17263  00371E  6E01               	movwf	i2___ftge@ff1,c
 17264  003720  0E00               	movlw	0
 17265  003722  6E02               	movwf	i2___ftge@ff1+1,c
 17266  003724  0E00               	movlw	0
 17267  003726  6E03               	movwf	i2___ftge@ff1+2,c
 17268  003728  C067  F004         	movff	pow@y,i2___ftge@ff2
 17269  00372C  C068  F005         	movff	pow@y+1,i2___ftge@ff2+1
 17270  003730  C069  F006         	movff	pow@y+2,i2___ftge@ff2+2
 17271  003734  EC0A  F028         	call	i2___ftge	;wreg free
 17272  003738  A0D8               	btfss	status,0,c
 17273  00373A  D005               	goto	i2l1083
 17274  00373C  0E00               	movlw	0
 17275  00373E  0101               	movlb	1	; () banked
 17276  003740  6F70               	movwf	(_errno+1)& (0+255),b
 17277  003742  0E21               	movlw	33
 17278  003744  6F6F               	movwf	_errno& (0+255),b
 17279  003746                     i2l1083:
 17280  003746  0E00               	movlw	0
 17281  003748  6E64               	movwf	?_pow,c
 17282  00374A  0E00               	movlw	0
 17283  00374C  6E65               	movwf	?_pow+1,c
 17284  00374E  0E00               	movlw	0
 17285  003750  6E66               	movwf	?_pow+2,c
 17286  003752  0012               	return	
 17287  003754                     i2l5719:
 17288  003754  5067               	movf	pow@y,w,c
 17289  003756  1068               	iorwf	pow@y+1,w,c
 17290  003758  1069               	iorwf	pow@y+2,w,c
 17291  00375A  A4D8               	btfss	status,2,c
 17292  00375C  D007               	goto	i2l5725
 17293  00375E  0E00               	movlw	0
 17294  003760  6E64               	movwf	?_pow,c
 17295  003762  0E80               	movlw	128
 17296  003764  6E65               	movwf	?_pow+1,c
 17297  003766  0E3F               	movlw	63
 17298  003768  6E66               	movwf	?_pow+2,c
 17299  00376A  0012               	return	
 17300  00376C                     i2l5725:
 17301  00376C  AE66               	btfss	pow@x+2,7,c
 17302  00376E  D041               	goto	i2l5737
 17303  003770  C067  F03A         	movff	pow@y,i2___fttol@f1
 17304  003774  C068  F03B         	movff	pow@y+1,i2___fttol@f1+1
 17305  003778  C069  F03C         	movff	pow@y+2,i2___fttol@f1+2
 17306  00377C  EC7E  F022         	call	i2___fttol	;wreg free
 17307  003780  C03A  F071         	movff	?i2___fttol,pow@yi
 17308  003784  C03B  F072         	movff	?i2___fttol+1,pow@yi+1
 17309  003788  C03C  F073         	movff	?i2___fttol+2,pow@yi+2
 17310  00378C  C03D  F074         	movff	?i2___fttol+3,pow@yi+3
 17311  003790  C071  F009         	movff	pow@yi,i2___lltoft@c
 17312  003794  C072  F00A         	movff	pow@yi+1,i2___lltoft@c+1
 17313  003798  C073  F00B         	movff	pow@yi+2,i2___lltoft@c+2
 17314  00379C  C074  F00C         	movff	pow@yi+3,i2___lltoft@c+3
 17315  0037A0  EC96  F02A         	call	i2___lltoft	;wreg free
 17316  0037A4  5067               	movf	pow@y,w,c
 17317  0037A6  1809               	xorwf	?i2___lltoft,w,c
 17318  0037A8  E107               	bnz	i2u638_40
 17319  0037AA  5068               	movf	pow@y+1,w,c
 17320  0037AC  180A               	xorwf	?i2___lltoft+1,w,c
 17321  0037AE  E104               	bnz	i2u638_40
 17322  0037B0  5069               	movf	pow@y+2,w,c
 17323  0037B2  180B               	xorwf	?i2___lltoft+2,w,c
 17324  0037B4  B4D8               	btfsc	status,2,c
 17325  0037B6  D00C               	goto	i2l5733
 17326  0037B8                     i2u638_40:
 17327  0037B8  0E00               	movlw	0
 17328  0037BA  0101               	movlb	1	; () banked
 17329  0037BC  6F70               	movwf	(_errno+1)& (0+255),b
 17330  0037BE  0E21               	movlw	33
 17331  0037C0  6F6F               	movwf	_errno& (0+255),b
 17332  0037C2  0E00               	movlw	0
 17333  0037C4  6E64               	movwf	?_pow,c
 17334  0037C6  0E00               	movlw	0
 17335  0037C8  6E65               	movwf	?_pow+1,c
 17336  0037CA  0E00               	movlw	0
 17337  0037CC  6E66               	movwf	?_pow+2,c
 17338                           
 17339                           ; BSR set to: 1
 17340  0037CE  0012               	return	
 17341  0037D0                     i2l5733:
 17342  0037D0  5071               	movf	pow@yi,w,c
 17343  0037D2  0B01               	andlw	1
 17344  0037D4  6E70               	movwf	pow@sign,c
 17345  0037D6  C064  F001         	movff	pow@x,i2___ftneg@f1
 17346  0037DA  C065  F002         	movff	pow@x+1,i2___ftneg@f1+1
 17347  0037DE  C066  F003         	movff	pow@x+2,i2___ftneg@f1+2
 17348  0037E2  EC6B  F02C         	call	i2___ftneg	;wreg free
 17349  0037E6  C001  F064         	movff	?i2___ftneg,pow@x
 17350  0037EA  C002  F065         	movff	?i2___ftneg+1,pow@x+1
 17351  0037EE  C003  F066         	movff	?i2___ftneg+2,pow@x+2
 17352  0037F2                     i2l5737:
 17353  0037F2  C064  F046         	movff	pow@x,log@x
 17354  0037F6  C065  F047         	movff	pow@x+1,log@x+1
 17355  0037FA  C066  F048         	movff	pow@x+2,log@x+2
 17356  0037FE  EC66  F01F         	call	_log	;wreg free
 17357  003802  C046  F06A         	movff	?_log,_pow$1523
 17358  003806  C047  F06B         	movff	?_log+1,_pow$1523+1
 17359  00380A  C048  F06C         	movff	?_log+2,_pow$1523+2
 17360  00380E  C06A  F015         	movff	_pow$1523,i2___ftmul@f1
 17361  003812  C06B  F016         	movff	_pow$1523+1,i2___ftmul@f1+1
 17362  003816  C06C  F017         	movff	_pow$1523+2,i2___ftmul@f1+2
 17363  00381A  C067  F018         	movff	pow@y,i2___ftmul@f2
 17364  00381E  C068  F019         	movff	pow@y+1,i2___ftmul@f2+1
 17365  003822  C069  F01A         	movff	pow@y+2,i2___ftmul@f2+2
 17366  003826  ECF8  F022         	call	i2___ftmul	;wreg free
 17367  00382A  C015  F06D         	movff	?i2___ftmul,_pow$1524
 17368  00382E  C016  F06E         	movff	?i2___ftmul+1,_pow$1524+1
 17369  003832  C017  F06F         	movff	?i2___ftmul+2,_pow$1524+2
 17370  003836  C06D  F05B         	movff	_pow$1524,exp@x
 17371  00383A  C06E  F05C         	movff	_pow$1524+1,exp@x+1
 17372  00383E  C06F  F05D         	movff	_pow$1524+2,exp@x+2
 17373  003842  EC52  F017         	call	_exp	;wreg free
 17374  003846  C05B  F064         	movff	?_exp,pow@x
 17375  00384A  C05C  F065         	movff	?_exp+1,pow@x+1
 17376  00384E  C05D  F066         	movff	?_exp+2,pow@x+2
 17377  003852  5070               	movf	pow@sign,w,c
 17378  003854  B4D8               	btfsc	status,2,c
 17379  003856  D00F               	goto	i2l1088
 17380  003858  C064  F001         	movff	pow@x,i2___ftneg@f1
 17381  00385C  C065  F002         	movff	pow@x+1,i2___ftneg@f1+1
 17382  003860  C066  F003         	movff	pow@x+2,i2___ftneg@f1+2
 17383  003864  EC6B  F02C         	call	i2___ftneg	;wreg free
 17384  003868  C001  F064         	movff	?i2___ftneg,?_pow
 17385  00386C  C002  F065         	movff	?i2___ftneg+1,?_pow+1
 17386  003870  C003  F066         	movff	?i2___ftneg+2,?_pow+2
 17387  003874  0012               	return	
 17388  003876                     i2l1088:
 17389  003876  C064  F064         	movff	pow@x,?_pow
 17390  00387A  C065  F065         	movff	pow@x+1,?_pow+1
 17391  00387E  C066  F066         	movff	pow@x+2,?_pow+2
 17392  003882  0012               	return		;funcret
 17393  003884                     __end_of_pow:
 17394                           	opt stack 0
 17395                           pclatu	equ	0xFFB
 17396                           pclath	equ	0xFFA
 17397                           tblptru	equ	0xFF8
 17398                           tblptrh	equ	0xFF7
 17399                           tblptrl	equ	0xFF6
 17400                           tablat	equ	0xFF5
 17401                           prodh	equ	0xFF4
 17402                           prodl	equ	0xFF3
 17403                           intcon	equ	0xFF2
 17404                           intcon2	equ	0xFF1
 17405                           intcon3	equ	0xFF0
 17406                           postinc0	equ	0xFEE
 17407                           fsr0h	equ	0xFEA
 17408                           fsr0l	equ	0xFE9
 17409                           wreg	equ	0xFE8
 17410                           fsr1h	equ	0xFE2
 17411                           fsr1l	equ	0xFE1
 17412                           indf2	equ	0xFDF
 17413                           postinc2	equ	0xFDE
 17414                           postdec2	equ	0xFDD
 17415                           fsr2h	equ	0xFDA
 17416                           fsr2l	equ	0xFD9
 17417                           status	equ	0xFD8
 17418                           
 17419 ;; *************** function i2___lltoft *****************
 17420 ;; Defined at:
 17421 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 17422 ;; Parameters:    Size  Location     Type
 17423 ;;  c               4    8[COMRAM] unsigned long 
 17424 ;; Auto vars:     Size  Location     Type
 17425 ;;  __lltoft        1   16[COMRAM] unsigned char 
 17426 ;; Return value:  Size  Location     Type
 17427 ;;                  3    8[COMRAM] float 
 17428 ;; Registers used:
 17429 ;;		wreg, status,2, status,0, cstack
 17430 ;; Tracked objects:
 17431 ;;		On entry : 0/0
 17432 ;;		On exit  : 0/0
 17433 ;;		Unchanged: 0/0
 17434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17437 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17438 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17439 ;;Total ram usage:        9 bytes
 17440 ;; Hardware stack levels used:    1
 17441 ;; Hardware stack levels required when called:    1
 17442 ;; This function calls:
 17443 ;;		i2___ftpack
 17444 ;; This function is called by:
 17445 ;;		_pow
 17446 ;;		i2_printf
 17447 ;; This function uses a non-reentrant model
 17448 ;;
 17449                           
 17450                           	psect	text64
 17451  00552C                     __ptext64:
 17452                           	opt stack 0
 17453  00552C                     i2___lltoft:
 17454                           	opt stack 22
 17455                           
 17456                           ;incstack = 0
 17457  00552C  0E8E               	movlw	142
 17458  00552E  6E11               	movwf	i2___lltoft@exp,c
 17459  005530  D006               	goto	i2l5393
 17460  005532                     i2l5391:
 17461  005532  90D8               	bcf	status,0,c
 17462  005534  320C               	rrcf	i2___lltoft@c+3,f,c
 17463  005536  320B               	rrcf	i2___lltoft@c+2,f,c
 17464  005538  320A               	rrcf	i2___lltoft@c+1,f,c
 17465  00553A  3209               	rrcf	i2___lltoft@c,f,c
 17466  00553C  2A11               	incf	i2___lltoft@exp,f,c
 17467  00553E                     i2l5393:
 17468  00553E  0E00               	movlw	0
 17469  005540  1409               	andwf	i2___lltoft@c,w,c
 17470  005542  6E0D               	movwf	??i2___lltoft& (0+255),c
 17471  005544  0E00               	movlw	0
 17472  005546  140A               	andwf	i2___lltoft@c+1,w,c
 17473  005548  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 17474  00554A  0E00               	movlw	0
 17475  00554C  140B               	andwf	i2___lltoft@c+2,w,c
 17476  00554E  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 17477  005550  0EFF               	movlw	255
 17478  005552  140C               	andwf	i2___lltoft@c+3,w,c
 17479  005554  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 17480  005556  500D               	movf	??i2___lltoft,w,c
 17481  005558  100E               	iorwf	??i2___lltoft+1,w,c
 17482  00555A  100F               	iorwf	??i2___lltoft+2,w,c
 17483  00555C  1010               	iorwf	??i2___lltoft+3,w,c
 17484  00555E  A4D8               	btfss	status,2,c
 17485  005560  D7E8               	goto	i2l5391
 17486  005562  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 17487  005566  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 17488  00556A  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 17489  00556E  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 17490  005572  0E00               	movlw	0
 17491  005574  6E05               	movwf	i2___ftpack@sign,c
 17492  005576  EC15  F027         	call	i2___ftpack	;wreg free
 17493  00557A  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 17494  00557E  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 17495  005582  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 17496  005586  0012               	return	
 17497  005588                     __end_ofi2___lltoft:
 17498                           	opt stack 0
 17499                           pclatu	equ	0xFFB
 17500                           pclath	equ	0xFFA
 17501                           tblptru	equ	0xFF8
 17502                           tblptrh	equ	0xFF7
 17503                           tblptrl	equ	0xFF6
 17504                           tablat	equ	0xFF5
 17505                           prodh	equ	0xFF4
 17506                           prodl	equ	0xFF3
 17507                           intcon	equ	0xFF2
 17508                           intcon2	equ	0xFF1
 17509                           intcon3	equ	0xFF0
 17510                           postinc0	equ	0xFEE
 17511                           fsr0h	equ	0xFEA
 17512                           fsr0l	equ	0xFE9
 17513                           wreg	equ	0xFE8
 17514                           fsr1h	equ	0xFE2
 17515                           fsr1l	equ	0xFE1
 17516                           indf2	equ	0xFDF
 17517                           postinc2	equ	0xFDE
 17518                           postdec2	equ	0xFDD
 17519                           fsr2h	equ	0xFDA
 17520                           fsr2l	equ	0xFD9
 17521                           status	equ	0xFD8
 17522                           
 17523 ;; *************** function _log *****************
 17524 ;; Defined at:
 17525 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;  x               3   69[COMRAM] float 
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;  exponent        2   72[COMRAM] int 
 17530 ;; Return value:  Size  Location     Type
 17531 ;;                  3   69[COMRAM] int 
 17532 ;; Registers used:
 17533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17534 ;; Tracked objects:
 17535 ;;		On entry : 0/0
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17539 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17542 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17543 ;;Total ram usage:        5 bytes
 17544 ;; Hardware stack levels used:    1
 17545 ;; Hardware stack levels required when called:    3
 17546 ;; This function calls:
 17547 ;;		___awtoft
 17548 ;;		_eval_poly
 17549 ;;		_frexp
 17550 ;;		i2___ftadd
 17551 ;;		i2___ftmul
 17552 ;; This function is called by:
 17553 ;;		_pow
 17554 ;; This function uses a non-reentrant model
 17555 ;;
 17556                           
 17557                           	psect	text65
 17558  003ECC                     __ptext65:
 17559                           	opt stack 0
 17560  003ECC                     _log:
 17561                           	opt stack 19
 17562                           
 17563                           ;incstack = 0
 17564  003ECC  AE48               	btfss	log@x+2,7,c
 17565  003ECE  D00C               	goto	i2l5227
 17566  003ED0  0E00               	movlw	0
 17567  003ED2  0101               	movlb	1	; () banked
 17568  003ED4  6F70               	movwf	(_errno+1)& (0+255),b
 17569  003ED6  0E21               	movlw	33
 17570  003ED8  6F6F               	movwf	_errno& (0+255),b
 17571  003EDA  0E00               	movlw	0
 17572  003EDC  6E46               	movwf	?_log,c
 17573  003EDE  0E00               	movlw	0
 17574  003EE0  6E47               	movwf	?_log+1,c
 17575  003EE2  0E00               	movlw	0
 17576  003EE4  6E48               	movwf	?_log+2,c
 17577                           
 17578                           ; BSR set to: 1
 17579  003EE6  0012               	return	
 17580  003EE8                     i2l5227:
 17581  003EE8  5046               	movf	log@x,w,c
 17582  003EEA  1047               	iorwf	log@x+1,w,c
 17583  003EEC  1048               	iorwf	log@x+2,w,c
 17584  003EEE  A4D8               	btfss	status,2,c
 17585  003EF0  D00C               	goto	i2l5233
 17586  003EF2  0E00               	movlw	0
 17587  003EF4  0101               	movlb	1	; () banked
 17588  003EF6  6F70               	movwf	(_errno+1)& (0+255),b
 17589  003EF8  0E22               	movlw	34
 17590  003EFA  6F6F               	movwf	_errno& (0+255),b
 17591  003EFC  0E00               	movlw	0
 17592  003EFE  6E46               	movwf	?_log,c
 17593  003F00  0E00               	movlw	0
 17594  003F02  6E47               	movwf	?_log+1,c
 17595  003F04  0E00               	movlw	0
 17596  003F06  6E48               	movwf	?_log+2,c
 17597                           
 17598                           ; BSR set to: 1
 17599  003F08  0012               	return	
 17600  003F0A                     i2l5233:
 17601  003F0A  0E00               	movlw	0
 17602  003F0C  6E18               	movwf	i2___ftmul@f2,c
 17603  003F0E  0E00               	movlw	0
 17604  003F10  6E19               	movwf	i2___ftmul@f2+1,c
 17605  003F12  0E40               	movlw	64
 17606  003F14  6E1A               	movwf	i2___ftmul@f2+2,c
 17607  003F16  0E49               	movlw	low log@exponent
 17608  003F18  6E04               	movwf	frexp@eptr,c
 17609  003F1A  0E00               	movlw	high log@exponent
 17610  003F1C  6E05               	movwf	frexp@eptr+1,c
 17611  003F1E  C046  F001         	movff	log@x,frexp@value
 17612  003F22  C047  F002         	movff	log@x+1,frexp@value+1
 17613  003F26  C048  F003         	movff	log@x+2,frexp@value+2
 17614  003F2A  EC52  F028         	call	_frexp	;wreg free
 17615  003F2E  C001  F015         	movff	?_frexp,i2___ftmul@f1
 17616  003F32  C002  F016         	movff	?_frexp+1,i2___ftmul@f1+1
 17617  003F36  C003  F017         	movff	?_frexp+2,i2___ftmul@f1+2
 17618  003F3A  ECF8  F022         	call	i2___ftmul	;wreg free
 17619  003F3E  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 17620  003F42  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 17621  003F46  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 17622  003F4A  0E00               	movlw	0
 17623  003F4C  6E31               	movwf	i2___ftadd@f2,c
 17624  003F4E  0E80               	movlw	128
 17625  003F50  6E32               	movwf	i2___ftadd@f2+1,c
 17626  003F52  0EBF               	movlw	191
 17627  003F54  6E33               	movwf	i2___ftadd@f2+2,c
 17628  003F56  EC1E  F019         	call	i2___ftadd	;wreg free
 17629  003F5A  C02E  F046         	movff	?i2___ftadd,log@x
 17630  003F5E  C02F  F047         	movff	?i2___ftadd+1,log@x+1
 17631  003F62  C030  F048         	movff	?i2___ftadd+2,log@x+2
 17632  003F66  0649               	decf	log@exponent,f,c
 17633  003F68  A0D8               	btfss	status,0,c
 17634  003F6A  064A               	decf	log@exponent+1,f,c
 17635  003F6C  C046  F03A         	movff	log@x,eval_poly@x
 17636  003F70  C047  F03B         	movff	log@x+1,eval_poly@x+1
 17637  003F74  C048  F03C         	movff	log@x+2,eval_poly@x+2
 17638  003F78  0E81               	movlw	low log@coeff
 17639  003F7A  6E3D               	movwf	eval_poly@d,c
 17640  003F7C  0EFE               	movlw	high log@coeff
 17641  003F7E  6E3E               	movwf	eval_poly@d+1,c
 17642  003F80  0E00               	movlw	0
 17643  003F82  6E40               	movwf	eval_poly@n+1,c
 17644  003F84  0E08               	movlw	8
 17645  003F86  6E3F               	movwf	eval_poly@n,c
 17646  003F88  EC28  F025         	call	_eval_poly	;wreg free
 17647  003F8C  C03A  F046         	movff	?_eval_poly,log@x
 17648  003F90  C03B  F047         	movff	?_eval_poly+1,log@x+1
 17649  003F94  C03C  F048         	movff	?_eval_poly+2,log@x+2
 17650  003F98  0E72               	movlw	114
 17651  003F9A  6E18               	movwf	i2___ftmul@f2,c
 17652  003F9C  0E31               	movlw	49
 17653  003F9E  6E19               	movwf	i2___ftmul@f2+1,c
 17654  003FA0  0E3F               	movlw	63
 17655  003FA2  6E1A               	movwf	i2___ftmul@f2+2,c
 17656  003FA4  C049  F009         	movff	log@exponent,___awtoft@c
 17657  003FA8  C04A  F00A         	movff	log@exponent+1,___awtoft@c+1
 17658  003FAC  EC9A  F02B         	call	___awtoft	;wreg free
 17659  003FB0  C009  F015         	movff	?___awtoft,i2___ftmul@f1
 17660  003FB4  C00A  F016         	movff	?___awtoft+1,i2___ftmul@f1+1
 17661  003FB8  C00B  F017         	movff	?___awtoft+2,i2___ftmul@f1+2
 17662  003FBC  ECF8  F022         	call	i2___ftmul	;wreg free
 17663  003FC0  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 17664  003FC4  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 17665  003FC8  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 17666  003FCC  C046  F031         	movff	log@x,i2___ftadd@f2
 17667  003FD0  C047  F032         	movff	log@x+1,i2___ftadd@f2+1
 17668  003FD4  C048  F033         	movff	log@x+2,i2___ftadd@f2+2
 17669  003FD8  EC1E  F019         	call	i2___ftadd	;wreg free
 17670  003FDC  C02E  F046         	movff	?i2___ftadd,?_log
 17671  003FE0  C02F  F047         	movff	?i2___ftadd+1,?_log+1
 17672  003FE4  C030  F048         	movff	?i2___ftadd+2,?_log+2
 17673  003FE8  0012               	return	
 17674  003FEA                     __end_of_log:
 17675                           	opt stack 0
 17676                           pclatu	equ	0xFFB
 17677                           pclath	equ	0xFFA
 17678                           tblptru	equ	0xFF8
 17679                           tblptrh	equ	0xFF7
 17680                           tblptrl	equ	0xFF6
 17681                           tablat	equ	0xFF5
 17682                           prodh	equ	0xFF4
 17683                           prodl	equ	0xFF3
 17684                           intcon	equ	0xFF2
 17685                           intcon2	equ	0xFF1
 17686                           intcon3	equ	0xFF0
 17687                           postinc0	equ	0xFEE
 17688                           fsr0h	equ	0xFEA
 17689                           fsr0l	equ	0xFE9
 17690                           wreg	equ	0xFE8
 17691                           fsr1h	equ	0xFE2
 17692                           fsr1l	equ	0xFE1
 17693                           indf2	equ	0xFDF
 17694                           postinc2	equ	0xFDE
 17695                           postdec2	equ	0xFDD
 17696                           fsr2h	equ	0xFDA
 17697                           fsr2l	equ	0xFD9
 17698                           status	equ	0xFD8
 17699                           
 17700 ;; *************** function _exp *****************
 17701 ;; Defined at:
 17702 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 17703 ;; Parameters:    Size  Location     Type
 17704 ;;  x               3   90[COMRAM] int 
 17705 ;; Auto vars:     Size  Location     Type
 17706 ;;  exponent        2   96[COMRAM] int 
 17707 ;;  sign            1   98[COMRAM] unsigned char 
 17708 ;; Return value:  Size  Location     Type
 17709 ;;                  3   90[COMRAM] unsigned char 
 17710 ;; Registers used:
 17711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17712 ;; Tracked objects:
 17713 ;;		On entry : 0/0
 17714 ;;		On exit  : 0/0
 17715 ;;		Unchanged: 0/0
 17716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17717 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17718 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17720 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17721 ;;Total ram usage:        9 bytes
 17722 ;; Hardware stack levels used:    1
 17723 ;; Hardware stack levels required when called:    3
 17724 ;; This function calls:
 17725 ;;		___awtoft
 17726 ;;		_eval_poly
 17727 ;;		_floor
 17728 ;;		_ldexp
 17729 ;;		i2___ftdiv
 17730 ;;		i2___ftge
 17731 ;;		i2___ftmul
 17732 ;;		i2___ftneg
 17733 ;;		i2___ftsub
 17734 ;;		i2___fttol
 17735 ;; This function is called by:
 17736 ;;		_pow
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           	psect	text66
 17741  002EA4                     __ptext66:
 17742                           	opt stack 0
 17743  002EA4                     _exp:
 17744                           	opt stack 19
 17745                           
 17746                           ;incstack = 0
 17747  002EA4  505B               	movf	exp@x,w,c
 17748  002EA6  105C               	iorwf	exp@x+1,w,c
 17749  002EA8  105D               	iorwf	exp@x+2,w,c
 17750  002EAA  A4D8               	btfss	status,2,c
 17751  002EAC  D007               	goto	i2l5249
 17752  002EAE  0E00               	movlw	0
 17753  002EB0  6E5B               	movwf	?_exp,c
 17754  002EB2  0E80               	movlw	128
 17755  002EB4  6E5C               	movwf	?_exp+1,c
 17756  002EB6  0E3F               	movlw	63
 17757  002EB8  6E5D               	movwf	?_exp+2,c
 17758  002EBA  0012               	return	
 17759  002EBC                     i2l5249:
 17760  002EBC  0E72               	movlw	114
 17761  002EBE  6E01               	movwf	i2___ftge@ff1,c
 17762  002EC0  0E31               	movlw	49
 17763  002EC2  6E02               	movwf	i2___ftge@ff1+1,c
 17764  002EC4  0E44               	movlw	68
 17765  002EC6  6E03               	movwf	i2___ftge@ff1+2,c
 17766  002EC8  C05B  F004         	movff	exp@x,i2___ftge@ff2
 17767  002ECC  C05C  F005         	movff	exp@x+1,i2___ftge@ff2+1
 17768  002ED0  C05D  F006         	movff	exp@x+2,i2___ftge@ff2+2
 17769  002ED4  EC0A  F028         	call	i2___ftge	;wreg free
 17770  002ED8  B0D8               	btfsc	status,0,c
 17771  002EDA  D00C               	goto	i2l5255
 17772  002EDC  0E00               	movlw	0
 17773  002EDE  0101               	movlb	1	; () banked
 17774  002EE0  6F70               	movwf	(_errno+1)& (0+255),b
 17775  002EE2  0E22               	movlw	34
 17776  002EE4  6F6F               	movwf	_errno& (0+255),b
 17777  002EE6  0EFF               	movlw	255
 17778  002EE8  6E5B               	movwf	?_exp,c
 17779  002EEA  0E7F               	movlw	127
 17780  002EEC  6E5C               	movwf	?_exp+1,c
 17781  002EEE  0E7F               	movlw	127
 17782  002EF0  6E5D               	movwf	?_exp+2,c
 17783                           
 17784                           ; BSR set to: 1
 17785  002EF2  0012               	return	
 17786  002EF4                     i2l5255:
 17787  002EF4  C05B  F001         	movff	exp@x,i2___ftge@ff1
 17788  002EF8  C05C  F002         	movff	exp@x+1,i2___ftge@ff1+1
 17789  002EFC  C05D  F003         	movff	exp@x+2,i2___ftge@ff1+2
 17790  002F00  0E49               	movlw	73
 17791  002F02  6E04               	movwf	i2___ftge@ff2,c
 17792  002F04  0E3A               	movlw	58
 17793  002F06  6E05               	movwf	i2___ftge@ff2+1,c
 17794  002F08  0EC4               	movlw	196
 17795  002F0A  6E06               	movwf	i2___ftge@ff2+2,c
 17796  002F0C  EC0A  F028         	call	i2___ftge	;wreg free
 17797  002F10  B0D8               	btfsc	status,0,c
 17798  002F12  D00C               	goto	i2l5261
 17799  002F14  0E00               	movlw	0
 17800  002F16  0101               	movlb	1	; () banked
 17801  002F18  6F70               	movwf	(_errno+1)& (0+255),b
 17802  002F1A  0E22               	movlw	34
 17803  002F1C  6F6F               	movwf	_errno& (0+255),b
 17804  002F1E  0E00               	movlw	0
 17805  002F20  6E5B               	movwf	?_exp,c
 17806  002F22  0E00               	movlw	0
 17807  002F24  6E5C               	movwf	?_exp+1,c
 17808  002F26  0E00               	movlw	0
 17809  002F28  6E5D               	movwf	?_exp+2,c
 17810                           
 17811                           ; BSR set to: 1
 17812  002F2A  0012               	return	
 17813  002F2C                     i2l5261:
 17814  002F2C  AE5D               	btfss	exp@x+2,7,c
 17815  002F2E  D002               	goto	i2u562_40
 17816  002F30  0E01               	movlw	1
 17817  002F32  D001               	goto	i2u563_40
 17818  002F34                     i2u562_40:
 17819  002F34  0E00               	movlw	0
 17820  002F36                     i2u563_40:
 17821  002F36  6E63               	movwf	exp@sign,c
 17822  002F38  5063               	movf	exp@sign,w,c
 17823  002F3A  B4D8               	btfsc	status,2,c
 17824  002F3C  D00E               	goto	i2l1250
 17825  002F3E  C05B  F001         	movff	exp@x,i2___ftneg@f1
 17826  002F42  C05C  F002         	movff	exp@x+1,i2___ftneg@f1+1
 17827  002F46  C05D  F003         	movff	exp@x+2,i2___ftneg@f1+2
 17828  002F4A  EC6B  F02C         	call	i2___ftneg	;wreg free
 17829  002F4E  C001  F05B         	movff	?i2___ftneg,exp@x
 17830  002F52  C002  F05C         	movff	?i2___ftneg+1,exp@x+1
 17831  002F56  C003  F05D         	movff	?i2___ftneg+2,exp@x+2
 17832  002F5A                     i2l1250:
 17833  002F5A  C05B  F015         	movff	exp@x,i2___ftmul@f1
 17834  002F5E  C05C  F016         	movff	exp@x+1,i2___ftmul@f1+1
 17835  002F62  C05D  F017         	movff	exp@x+2,i2___ftmul@f1+2
 17836  002F66  0EAA               	movlw	170
 17837  002F68  6E18               	movwf	i2___ftmul@f2,c
 17838  002F6A  0EB8               	movlw	184
 17839  002F6C  6E19               	movwf	i2___ftmul@f2+1,c
 17840  002F6E  0E3F               	movlw	63
 17841  002F70  6E1A               	movwf	i2___ftmul@f2+2,c
 17842  002F72  ECF8  F022         	call	i2___ftmul	;wreg free
 17843  002F76  C015  F05B         	movff	?i2___ftmul,exp@x
 17844  002F7A  C016  F05C         	movff	?i2___ftmul+1,exp@x+1
 17845  002F7E  C017  F05D         	movff	?i2___ftmul+2,exp@x+2
 17846  002F82  C05B  F053         	movff	exp@x,floor@x
 17847  002F86  C05C  F054         	movff	exp@x+1,floor@x+1
 17848  002F8A  C05D  F055         	movff	exp@x+2,floor@x+2
 17849  002F8E  ECE5  F023         	call	_floor	;wreg free
 17850  002F92  C053  F05E         	movff	?_floor,_exp$1525
 17851  002F96  C054  F05F         	movff	?_floor+1,_exp$1525+1
 17852  002F9A  C055  F060         	movff	?_floor+2,_exp$1525+2
 17853  002F9E  C05E  F03A         	movff	_exp$1525,i2___fttol@f1
 17854  002FA2  C05F  F03B         	movff	_exp$1525+1,i2___fttol@f1+1
 17855  002FA6  C060  F03C         	movff	_exp$1525+2,i2___fttol@f1+2
 17856  002FAA  EC7E  F022         	call	i2___fttol	;wreg free
 17857  002FAE  C03A  F061         	movff	?i2___fttol,exp@exponent
 17858  002FB2  C03B  F062         	movff	?i2___fttol+1,exp@exponent+1
 17859  002FB6  C05B  F03A         	movff	exp@x,i2___ftsub@f1
 17860  002FBA  C05C  F03B         	movff	exp@x+1,i2___ftsub@f1+1
 17861  002FBE  C05D  F03C         	movff	exp@x+2,i2___ftsub@f1+2
 17862  002FC2  C061  F009         	movff	exp@exponent,___awtoft@c
 17863  002FC6  C062  F00A         	movff	exp@exponent+1,___awtoft@c+1
 17864  002FCA  EC9A  F02B         	call	___awtoft	;wreg free
 17865  002FCE  C009  F03D         	movff	?___awtoft,i2___ftsub@f2
 17866  002FD2  C00A  F03E         	movff	?___awtoft+1,i2___ftsub@f2+1
 17867  002FD6  C00B  F03F         	movff	?___awtoft+2,i2___ftsub@f2+2
 17868  002FDA  EC5D  F02B         	call	i2___ftsub	;wreg free
 17869  002FDE  C03A  F05B         	movff	?i2___ftsub,exp@x
 17870  002FE2  C03B  F05C         	movff	?i2___ftsub+1,exp@x+1
 17871  002FE6  C03C  F05D         	movff	?i2___ftsub+2,exp@x+2
 17872  002FEA  C05B  F03A         	movff	exp@x,eval_poly@x
 17873  002FEE  C05C  F03B         	movff	exp@x+1,eval_poly@x+1
 17874  002FF2  C05D  F03C         	movff	exp@x+2,eval_poly@x+2
 17875  002FF6  0E63               	movlw	low exp@coeff
 17876  002FF8  6E3D               	movwf	eval_poly@d,c
 17877  002FFA  0EFE               	movlw	high exp@coeff
 17878  002FFC  6E3E               	movwf	eval_poly@d+1,c
 17879  002FFE  0E00               	movlw	0
 17880  003000  6E40               	movwf	eval_poly@n+1,c
 17881  003002  0E09               	movlw	9
 17882  003004  6E3F               	movwf	eval_poly@n,c
 17883  003006  EC28  F025         	call	_eval_poly	;wreg free
 17884  00300A  C03A  F046         	movff	?_eval_poly,ldexp@value
 17885  00300E  C03B  F047         	movff	?_eval_poly+1,ldexp@value+1
 17886  003012  C03C  F048         	movff	?_eval_poly+2,ldexp@value+2
 17887  003016  C061  F049         	movff	exp@exponent,ldexp@newexp
 17888  00301A  C062  F04A         	movff	exp@exponent+1,ldexp@newexp+1
 17889  00301E  ECF5  F025         	call	_ldexp	;wreg free
 17890  003022  C046  F05B         	movff	?_ldexp,exp@x
 17891  003026  C047  F05C         	movff	?_ldexp+1,exp@x+1
 17892  00302A  C048  F05D         	movff	?_ldexp+2,exp@x+2
 17893  00302E  5063               	movf	exp@sign,w,c
 17894  003030  B4D8               	btfsc	status,2,c
 17895  003032  D025               	goto	i2l1251
 17896  003034  285B               	incf	exp@x,w,c
 17897  003036  E10E               	bnz	i2l5283
 17898  003038  0E7F               	movlw	127
 17899  00303A  185C               	xorwf	exp@x+1,w,c
 17900  00303C  E10B               	bnz	i2l5283
 17901  00303E  0E7F               	movlw	127
 17902  003040  185D               	xorwf	exp@x+2,w,c
 17903  003042  A4D8               	btfss	status,2,c
 17904  003044  D007               	goto	i2l5283
 17905  003046  0E00               	movlw	0
 17906  003048  6E5B               	movwf	?_exp,c
 17907  00304A  0E00               	movlw	0
 17908  00304C  6E5C               	movwf	?_exp+1,c
 17909  00304E  0E00               	movlw	0
 17910  003050  6E5D               	movwf	?_exp+2,c
 17911  003052  0012               	return	
 17912  003054                     i2l5283:
 17913  003054  0E00               	movlw	0
 17914  003056  6E09               	movwf	i2___ftdiv@f1,c
 17915  003058  0E80               	movlw	128
 17916  00305A  6E0A               	movwf	i2___ftdiv@f1+1,c
 17917  00305C  0E3F               	movlw	63
 17918  00305E  6E0B               	movwf	i2___ftdiv@f1+2,c
 17919  003060  C05B  F00C         	movff	exp@x,i2___ftdiv@f2
 17920  003064  C05C  F00D         	movff	exp@x+1,i2___ftdiv@f2+1
 17921  003068  C05D  F00E         	movff	exp@x+2,i2___ftdiv@f2+2
 17922  00306C  EC72  F023         	call	i2___ftdiv	;wreg free
 17923  003070  C009  F05B         	movff	?i2___ftdiv,?_exp
 17924  003074  C00A  F05C         	movff	?i2___ftdiv+1,?_exp+1
 17925  003078  C00B  F05D         	movff	?i2___ftdiv+2,?_exp+2
 17926  00307C  0012               	return	
 17927  00307E                     i2l1251:
 17928  00307E  C05B  F05B         	movff	exp@x,?_exp
 17929  003082  C05C  F05C         	movff	exp@x+1,?_exp+1
 17930  003086  C05D  F05D         	movff	exp@x+2,?_exp+2
 17931  00308A  0012               	return		;funcret
 17932  00308C                     __end_of_exp:
 17933                           	opt stack 0
 17934                           pclatu	equ	0xFFB
 17935                           pclath	equ	0xFFA
 17936                           tblptru	equ	0xFF8
 17937                           tblptrh	equ	0xFF7
 17938                           tblptrl	equ	0xFF6
 17939                           tablat	equ	0xFF5
 17940                           prodh	equ	0xFF4
 17941                           prodl	equ	0xFF3
 17942                           intcon	equ	0xFF2
 17943                           intcon2	equ	0xFF1
 17944                           intcon3	equ	0xFF0
 17945                           postinc0	equ	0xFEE
 17946                           fsr0h	equ	0xFEA
 17947                           fsr0l	equ	0xFE9
 17948                           wreg	equ	0xFE8
 17949                           fsr1h	equ	0xFE2
 17950                           fsr1l	equ	0xFE1
 17951                           indf2	equ	0xFDF
 17952                           postinc2	equ	0xFDE
 17953                           postdec2	equ	0xFDD
 17954                           fsr2h	equ	0xFDA
 17955                           fsr2l	equ	0xFD9
 17956                           status	equ	0xFD8
 17957                           
 17958 ;; *************** function i2___ftsub *****************
 17959 ;; Defined at:
 17960 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 17961 ;; Parameters:    Size  Location     Type
 17962 ;;  f1              3   57[COMRAM] float 
 17963 ;;  f2              3   60[COMRAM] float 
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;		None
 17966 ;; Return value:  Size  Location     Type
 17967 ;;                  3   57[COMRAM] float 
 17968 ;; Registers used:
 17969 ;;		wreg, status,2, status,0, cstack
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17975 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17978 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17979 ;;Total ram usage:        6 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    2
 17982 ;; This function calls:
 17983 ;;		i2___ftadd
 17984 ;; This function is called by:
 17985 ;;		_exp
 17986 ;;		i2_printf
 17987 ;; This function uses a non-reentrant model
 17988 ;;
 17989                           
 17990                           	psect	text67
 17991  0056BA                     __ptext67:
 17992                           	opt stack 0
 17993  0056BA                     i2___ftsub:
 17994                           	opt stack 21
 17995                           
 17996                           ;incstack = 0
 17997  0056BA  503D               	movf	i2___ftsub@f2,w,c
 17998  0056BC  103E               	iorwf	i2___ftsub@f2+1,w,c
 17999  0056BE  103F               	iorwf	i2___ftsub@f2+2,w,c
 18000  0056C0  B4D8               	btfsc	status,2,c
 18001  0056C2  D006               	goto	i2l4875
 18002  0056C4  0E00               	movlw	0
 18003  0056C6  1A3D               	xorwf	i2___ftsub@f2,f,c
 18004  0056C8  0E00               	movlw	0
 18005  0056CA  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 18006  0056CC  0E80               	movlw	128
 18007  0056CE  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 18008  0056D0                     i2l4875:
 18009  0056D0  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 18010  0056D4  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 18011  0056D8  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 18012  0056DC  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 18013  0056E0  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 18014  0056E4  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 18015  0056E8  EC1E  F019         	call	i2___ftadd	;wreg free
 18016  0056EC  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 18017  0056F0  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 18018  0056F4  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 18019  0056F8  0012               	return	
 18020  0056FA                     __end_ofi2___ftsub:
 18021                           	opt stack 0
 18022                           pclatu	equ	0xFFB
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           intcon2	equ	0xFF1
 18032                           intcon3	equ	0xFF0
 18033                           postinc0	equ	0xFEE
 18034                           fsr0h	equ	0xFEA
 18035                           fsr0l	equ	0xFE9
 18036                           wreg	equ	0xFE8
 18037                           fsr1h	equ	0xFE2
 18038                           fsr1l	equ	0xFE1
 18039                           indf2	equ	0xFDF
 18040                           postinc2	equ	0xFDE
 18041                           postdec2	equ	0xFDD
 18042                           fsr2h	equ	0xFDA
 18043                           fsr2l	equ	0xFD9
 18044                           status	equ	0xFD8
 18045                           
 18046 ;; *************** function i2___ftneg *****************
 18047 ;; Defined at:
 18048 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 18049 ;; Parameters:    Size  Location     Type
 18050 ;;  f1              3    0[COMRAM] float 
 18051 ;; Auto vars:     Size  Location     Type
 18052 ;;		None
 18053 ;; Return value:  Size  Location     Type
 18054 ;;                  3    0[COMRAM] float 
 18055 ;; Registers used:
 18056 ;;		wreg, status,2, status,0
 18057 ;; Tracked objects:
 18058 ;;		On entry : 0/0
 18059 ;;		On exit  : 0/0
 18060 ;;		Unchanged: 0/0
 18061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18062 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18065 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18066 ;;Total ram usage:        3 bytes
 18067 ;; Hardware stack levels used:    1
 18068 ;; This function calls:
 18069 ;;		Nothing
 18070 ;; This function is called by:
 18071 ;;		_pow
 18072 ;;		_exp
 18073 ;;		i2_printf
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           	psect	text68
 18078  0058D6                     __ptext68:
 18079                           	opt stack 0
 18080  0058D6                     i2___ftneg:
 18081                           	opt stack 23
 18082                           
 18083                           ;incstack = 0
 18084  0058D6  5001               	movf	i2___ftneg@f1,w,c
 18085  0058D8  1002               	iorwf	i2___ftneg@f1+1,w,c
 18086  0058DA  1003               	iorwf	i2___ftneg@f1+2,w,c
 18087  0058DC  B4D8               	btfsc	status,2,c
 18088  0058DE  D006               	goto	i2l948
 18089  0058E0  0E00               	movlw	0
 18090  0058E2  1A01               	xorwf	i2___ftneg@f1,f,c
 18091  0058E4  0E00               	movlw	0
 18092  0058E6  1A02               	xorwf	i2___ftneg@f1+1,f,c
 18093  0058E8  0E80               	movlw	128
 18094  0058EA  1A03               	xorwf	i2___ftneg@f1+2,f,c
 18095  0058EC                     i2l948:
 18096  0058EC  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 18097  0058F0  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 18098  0058F4  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 18099  0058F8  0012               	return		;funcret
 18100  0058FA                     __end_ofi2___ftneg:
 18101                           	opt stack 0
 18102                           pclatu	equ	0xFFB
 18103                           pclath	equ	0xFFA
 18104                           tblptru	equ	0xFF8
 18105                           tblptrh	equ	0xFF7
 18106                           tblptrl	equ	0xFF6
 18107                           tablat	equ	0xFF5
 18108                           prodh	equ	0xFF4
 18109                           prodl	equ	0xFF3
 18110                           intcon	equ	0xFF2
 18111                           intcon2	equ	0xFF1
 18112                           intcon3	equ	0xFF0
 18113                           postinc0	equ	0xFEE
 18114                           fsr0h	equ	0xFEA
 18115                           fsr0l	equ	0xFE9
 18116                           wreg	equ	0xFE8
 18117                           fsr1h	equ	0xFE2
 18118                           fsr1l	equ	0xFE1
 18119                           indf2	equ	0xFDF
 18120                           postinc2	equ	0xFDE
 18121                           postdec2	equ	0xFDD
 18122                           fsr2h	equ	0xFDA
 18123                           fsr2l	equ	0xFD9
 18124                           status	equ	0xFD8
 18125                           
 18126 ;; *************** function i2___ftdiv *****************
 18127 ;; Defined at:
 18128 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 18129 ;; Parameters:    Size  Location     Type
 18130 ;;  f1              3    8[COMRAM] float 
 18131 ;;  f2              3   11[COMRAM] float 
 18132 ;; Auto vars:     Size  Location     Type
 18133 ;;  __ftdiv         3   18[COMRAM] float 
 18134 ;;  __ftdiv         1   22[COMRAM] unsigned char 
 18135 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 18136 ;;  __ftdiv         1   17[COMRAM] unsigned char 
 18137 ;; Return value:  Size  Location     Type
 18138 ;;                  3    8[COMRAM] float 
 18139 ;; Registers used:
 18140 ;;		wreg, status,2, status,0, cstack
 18141 ;; Tracked objects:
 18142 ;;		On entry : 0/0
 18143 ;;		On exit  : 0/0
 18144 ;;		Unchanged: 0/0
 18145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18146 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18147 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18148 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18149 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18150 ;;Total ram usage:       15 bytes
 18151 ;; Hardware stack levels used:    1
 18152 ;; Hardware stack levels required when called:    1
 18153 ;; This function calls:
 18154 ;;		i2___ftpack
 18155 ;; This function is called by:
 18156 ;;		_exp
 18157 ;; This function uses a non-reentrant model
 18158 ;;
 18159                           
 18160                           	psect	text69
 18161  0046E4                     __ptext69:
 18162                           	opt stack 0
 18163  0046E4                     i2___ftdiv:
 18164                           	opt stack 20
 18165                           
 18166                           ;incstack = 0
 18167  0046E4  C00B  F00F         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 18168  0046E8  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 18169  0046EA  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 18170  0046EC  340A               	rlcf	i2___ftdiv@f1+1,w,c
 18171  0046EE  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 18172  0046F0  E301               	bnc	u503_41
 18173  0046F2  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 18174  0046F4                     u503_41:
 18175  0046F4  500F               	movf	??i2___ftdiv,w,c
 18176  0046F6  6E16               	movwf	i2___ftdiv@exp,c
 18177  0046F8  5016               	movf	i2___ftdiv@exp,w,c
 18178  0046FA  A4D8               	btfss	status,2,c
 18179  0046FC  D007               	goto	i2l4827
 18180  0046FE  0E00               	movlw	0
 18181  004700  6E09               	movwf	?i2___ftdiv,c
 18182  004702  0E00               	movlw	0
 18183  004704  6E0A               	movwf	?i2___ftdiv+1,c
 18184  004706  0E00               	movlw	0
 18185  004708  6E0B               	movwf	?i2___ftdiv+2,c
 18186  00470A  0012               	return	
 18187  00470C                     i2l4827:
 18188  00470C  C00E  F00F         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 18189  004710  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 18190  004712  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 18191  004714  340D               	rlcf	i2___ftdiv@f2+1,w,c
 18192  004716  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 18193  004718  E301               	bnc	u505_41
 18194  00471A  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 18195  00471C                     u505_41:
 18196  00471C  500F               	movf	??i2___ftdiv,w,c
 18197  00471E  6E17               	movwf	i2___ftdiv@sign,c
 18198  004720  5017               	movf	i2___ftdiv@sign,w,c
 18199  004722  A4D8               	btfss	status,2,c
 18200  004724  D007               	goto	i2l4833
 18201  004726  0E00               	movlw	0
 18202  004728  6E09               	movwf	?i2___ftdiv,c
 18203  00472A  0E00               	movlw	0
 18204  00472C  6E0A               	movwf	?i2___ftdiv+1,c
 18205  00472E  0E00               	movlw	0
 18206  004730  6E0B               	movwf	?i2___ftdiv+2,c
 18207  004732  0012               	return	
 18208  004734                     i2l4833:
 18209  004734  0E00               	movlw	0
 18210  004736  6E13               	movwf	i2___ftdiv@f3,c
 18211  004738  0E00               	movlw	0
 18212  00473A  6E14               	movwf	i2___ftdiv@f3+1,c
 18213  00473C  0E00               	movlw	0
 18214  00473E  6E15               	movwf	i2___ftdiv@f3+2,c
 18215  004740  5017               	movf	i2___ftdiv@sign,w,c
 18216  004742  0F89               	addlw	137
 18217  004744  5E16               	subwf	i2___ftdiv@exp,f,c
 18218  004746  C00B  F017         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 18219  00474A  500E               	movf	i2___ftdiv@f2+2,w,c
 18220  00474C  1A17               	xorwf	i2___ftdiv@sign,f,c
 18221  00474E  0E80               	movlw	128
 18222  004750  1617               	andwf	i2___ftdiv@sign,f,c
 18223  004752  8E0A               	bsf	i2___ftdiv@f1+1,7,c
 18224  004754  0EFF               	movlw	255
 18225  004756  1609               	andwf	i2___ftdiv@f1,f,c
 18226  004758  0EFF               	movlw	255
 18227  00475A  160A               	andwf	i2___ftdiv@f1+1,f,c
 18228  00475C  0E00               	movlw	0
 18229  00475E  160B               	andwf	i2___ftdiv@f1+2,f,c
 18230  004760  8E0D               	bsf	i2___ftdiv@f2+1,7,c
 18231  004762  0EFF               	movlw	255
 18232  004764  160C               	andwf	i2___ftdiv@f2,f,c
 18233  004766  0EFF               	movlw	255
 18234  004768  160D               	andwf	i2___ftdiv@f2+1,f,c
 18235  00476A  0E00               	movlw	0
 18236  00476C  160E               	andwf	i2___ftdiv@f2+2,f,c
 18237  00476E  0E18               	movlw	24
 18238  004770  6E12               	movwf	i2___ftdiv@cntr,c
 18239  004772                     i2l4853:
 18240  004772  90D8               	bcf	status,0,c
 18241  004774  3613               	rlcf	i2___ftdiv@f3,f,c
 18242  004776  3614               	rlcf	i2___ftdiv@f3+1,f,c
 18243  004778  3615               	rlcf	i2___ftdiv@f3+2,f,c
 18244  00477A  500C               	movf	i2___ftdiv@f2,w,c
 18245  00477C  5C09               	subwf	i2___ftdiv@f1,w,c
 18246  00477E  500D               	movf	i2___ftdiv@f2+1,w,c
 18247  004780  580A               	subwfb	i2___ftdiv@f1+1,w,c
 18248  004782  500E               	movf	i2___ftdiv@f2+2,w,c
 18249  004784  580B               	subwfb	i2___ftdiv@f1+2,w,c
 18250  004786  A0D8               	btfss	status,0,c
 18251  004788  D007               	goto	i2l909
 18252  00478A  500C               	movf	i2___ftdiv@f2,w,c
 18253  00478C  5E09               	subwf	i2___ftdiv@f1,f,c
 18254  00478E  500D               	movf	i2___ftdiv@f2+1,w,c
 18255  004790  5A0A               	subwfb	i2___ftdiv@f1+1,f,c
 18256  004792  500E               	movf	i2___ftdiv@f2+2,w,c
 18257  004794  5A0B               	subwfb	i2___ftdiv@f1+2,f,c
 18258  004796  8013               	bsf	i2___ftdiv@f3,0,c
 18259  004798                     i2l909:
 18260  004798  90D8               	bcf	status,0,c
 18261  00479A  3609               	rlcf	i2___ftdiv@f1,f,c
 18262  00479C  360A               	rlcf	i2___ftdiv@f1+1,f,c
 18263  00479E  360B               	rlcf	i2___ftdiv@f1+2,f,c
 18264  0047A0  2E12               	decfsz	i2___ftdiv@cntr,f,c
 18265  0047A2  D7E7               	goto	i2l4853
 18266  0047A4  C013  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 18267  0047A8  C014  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 18268  0047AC  C015  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 18269  0047B0  C016  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 18270  0047B4  C017  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 18271  0047B8  EC15  F027         	call	i2___ftpack	;wreg free
 18272  0047BC  C001  F009         	movff	?i2___ftpack,?i2___ftdiv
 18273  0047C0  C002  F00A         	movff	?i2___ftpack+1,?i2___ftdiv+1
 18274  0047C4  C003  F00B         	movff	?i2___ftpack+2,?i2___ftdiv+2
 18275  0047C8  0012               	return	
 18276  0047CA                     __end_ofi2___ftdiv:
 18277                           	opt stack 0
 18278                           pclatu	equ	0xFFB
 18279                           pclath	equ	0xFFA
 18280                           tblptru	equ	0xFF8
 18281                           tblptrh	equ	0xFF7
 18282                           tblptrl	equ	0xFF6
 18283                           tablat	equ	0xFF5
 18284                           prodh	equ	0xFF4
 18285                           prodl	equ	0xFF3
 18286                           intcon	equ	0xFF2
 18287                           intcon2	equ	0xFF1
 18288                           intcon3	equ	0xFF0
 18289                           postinc0	equ	0xFEE
 18290                           fsr0h	equ	0xFEA
 18291                           fsr0l	equ	0xFE9
 18292                           wreg	equ	0xFE8
 18293                           fsr1h	equ	0xFE2
 18294                           fsr1l	equ	0xFE1
 18295                           indf2	equ	0xFDF
 18296                           postinc2	equ	0xFDE
 18297                           postdec2	equ	0xFDD
 18298                           fsr2h	equ	0xFDA
 18299                           fsr2l	equ	0xFD9
 18300                           status	equ	0xFD8
 18301                           
 18302 ;; *************** function _ldexp *****************
 18303 ;; Defined at:
 18304 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 18305 ;; Parameters:    Size  Location     Type
 18306 ;;  value           3   69[COMRAM] float 
 18307 ;;  newexp          2   72[COMRAM] int 
 18308 ;; Auto vars:     Size  Location     Type
 18309 ;;		None
 18310 ;; Return value:  Size  Location     Type
 18311 ;;                  3   69[COMRAM] int 
 18312 ;; Registers used:
 18313 ;;		wreg, status,2, status,0
 18314 ;; Tracked objects:
 18315 ;;		On entry : 0/0
 18316 ;;		On exit  : 0/0
 18317 ;;		Unchanged: 0/0
 18318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18319 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18322 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18323 ;;Total ram usage:        7 bytes
 18324 ;; Hardware stack levels used:    1
 18325 ;; This function calls:
 18326 ;;		Nothing
 18327 ;; This function is called by:
 18328 ;;		_exp
 18329 ;; This function uses a non-reentrant model
 18330 ;;
 18331                           
 18332                           	psect	text70
 18333  004BEA                     __ptext70:
 18334                           	opt stack 0
 18335  004BEA                     _ldexp:
 18336                           	opt stack 21
 18337                           
 18338                           ;incstack = 0
 18339  004BEA  5046               	movf	ldexp@value,w,c
 18340  004BEC  1047               	iorwf	ldexp@value+1,w,c
 18341  004BEE  1048               	iorwf	ldexp@value+2,w,c
 18342  004BF0  A4D8               	btfss	status,2,c
 18343  004BF2  D007               	goto	i2l4791
 18344  004BF4  0E00               	movlw	0
 18345  004BF6  6E46               	movwf	?_ldexp,c
 18346  004BF8  0E00               	movlw	0
 18347  004BFA  6E47               	movwf	?_ldexp+1,c
 18348  004BFC  0E00               	movlw	0
 18349  004BFE  6E48               	movwf	?_ldexp+2,c
 18350  004C00  0012               	return	
 18351  004C02                     i2l4791:
 18352  004C02  5048               	movf	ldexp@value+2,w,c
 18353  004C04  0B7F               	andlw	127
 18354  004C06  6E4B               	movwf	??_ldexp& (0+255),c
 18355  004C08  6A4C               	clrf	(??_ldexp+1)& (0+255),c
 18356  004C0A  90D8               	bcf	status,0,c
 18357  004C0C  364B               	rlcf	??_ldexp,f,c
 18358  004C0E  364C               	rlcf	??_ldexp+1,f,c
 18359  004C10  504B               	movf	??_ldexp,w,c
 18360  004C12  2649               	addwf	ldexp@newexp,f,c
 18361  004C14  504C               	movf	??_ldexp+1,w,c
 18362  004C16  224A               	addwfc	ldexp@newexp+1,f,c
 18363  004C18  AE47               	btfss	ldexp@value+1,7,c
 18364  004C1A  D003               	goto	i2u499_40
 18365  004C1C  6A4B               	clrf	??_ldexp& (0+255),c
 18366  004C1E  2A4B               	incf	??_ldexp& (0+255),f,c
 18367  004C20  D001               	goto	i2u499_48
 18368  004C22                     i2u499_40:
 18369  004C22  6A4B               	clrf	??_ldexp& (0+255),c
 18370  004C24                     i2u499_48:
 18371  004C24  504B               	movf	??_ldexp,w,c
 18372  004C26  2649               	addwf	ldexp@newexp,f,c
 18373  004C28  0E00               	movlw	0
 18374  004C2A  224A               	addwfc	ldexp@newexp+1,f,c
 18375  004C2C  AE4A               	btfss	ldexp@newexp+1,7,c
 18376  004C2E  D00C               	goto	i2l4799
 18377  004C30  0E00               	movlw	0
 18378  004C32  0101               	movlb	1	; () banked
 18379  004C34  6F70               	movwf	(_errno+1)& (0+255),b
 18380  004C36  0E22               	movlw	34
 18381  004C38  6F6F               	movwf	_errno& (0+255),b
 18382  004C3A  0E00               	movlw	0
 18383  004C3C  6E46               	movwf	?_ldexp,c
 18384  004C3E  0E00               	movlw	0
 18385  004C40  6E47               	movwf	?_ldexp+1,c
 18386  004C42  0E00               	movlw	0
 18387  004C44                     L29:
 18388  004C44  6E48               	movwf	?_ldexp+2,c
 18389                           
 18390                           ; BSR set to: 1
 18391  004C46  0012               	return	
 18392  004C48                     i2l4799:
 18393  004C48  BE4A               	btfsc	ldexp@newexp+1,7,c
 18394  004C4A  D016               	goto	i2l4815
 18395  004C4C  044A               	decf	ldexp@newexp+1,w,c
 18396  004C4E  A0D8               	btfss	status,0,c
 18397  004C50  D013               	goto	i2l4815
 18398  004C52  0E00               	movlw	0
 18399  004C54  0101               	movlb	1	; () banked
 18400  004C56  6F70               	movwf	(_errno+1)& (0+255),b
 18401  004C58  0E22               	movlw	34
 18402  004C5A  6F6F               	movwf	_errno& (0+255),b
 18403                           
 18404                           ; BSR set to: 1
 18405  004C5C  AE48               	btfss	ldexp@value+2,7,c
 18406  004C5E  D006               	goto	i2l4811
 18407                           
 18408                           ; BSR set to: 1
 18409  004C60  0EFF               	movlw	255
 18410  004C62  6E46               	movwf	?_ldexp,c
 18411  004C64  0E7F               	movlw	127
 18412  004C66  6E47               	movwf	?_ldexp+1,c
 18413  004C68  0EFF               	movlw	255
 18414  004C6A  D7EC               	goto	L29
 18415  004C6C                     i2l4811:
 18416                           
 18417                           ; BSR set to: 1
 18418  004C6C  0EFF               	movlw	255
 18419  004C6E  6E46               	movwf	?_ldexp,c
 18420  004C70  0E7F               	movlw	127
 18421  004C72  6E47               	movwf	?_ldexp+1,c
 18422  004C74  0E7F               	movlw	127
 18423  004C76  D7E6               	goto	L29
 18424  004C78                     i2l4815:
 18425  004C78  344A               	rlcf	ldexp@newexp+1,w,c
 18426  004C7A  304A               	rrcf	ldexp@newexp+1,w,c
 18427  004C7C  6E4C               	movwf	(??_ldexp+1)& (0+255),c
 18428  004C7E  3049               	rrcf	ldexp@newexp,w,c
 18429  004C80  6E4B               	movwf	??_ldexp& (0+255),c
 18430  004C82  5048               	movf	ldexp@value+2,w,c
 18431  004C84  184B               	xorwf	??_ldexp,w,c
 18432  004C86  0B80               	andlw	-128
 18433  004C88  184B               	xorwf	??_ldexp,w,c
 18434  004C8A  6E48               	movwf	ldexp@value+2,c
 18435  004C8C  C049  F04B         	movff	ldexp@newexp,??_ldexp
 18436  004C90  0E01               	movlw	1
 18437  004C92  164B               	andwf	??_ldexp,f,c
 18438  004C94  324B               	rrcf	??_ldexp,f,c
 18439  004C96  324B               	rrcf	??_ldexp,f,c
 18440  004C98  5047               	movf	ldexp@value+1,w,c
 18441  004C9A  184B               	xorwf	??_ldexp,w,c
 18442  004C9C  0B7F               	andlw	-129
 18443  004C9E  184B               	xorwf	??_ldexp,w,c
 18444  004CA0  6E47               	movwf	ldexp@value+1,c
 18445  004CA2  C046  F046         	movff	ldexp@value,?_ldexp
 18446  004CA6  C047  F047         	movff	ldexp@value+1,?_ldexp+1
 18447  004CAA  C048  F048         	movff	ldexp@value+2,?_ldexp+2
 18448  004CAE  0012               	return	
 18449  004CB0                     __end_of_ldexp:
 18450                           	opt stack 0
 18451                           pclatu	equ	0xFFB
 18452                           pclath	equ	0xFFA
 18453                           tblptru	equ	0xFF8
 18454                           tblptrh	equ	0xFF7
 18455                           tblptrl	equ	0xFF6
 18456                           tablat	equ	0xFF5
 18457                           prodh	equ	0xFF4
 18458                           prodl	equ	0xFF3
 18459                           intcon	equ	0xFF2
 18460                           intcon2	equ	0xFF1
 18461                           intcon3	equ	0xFF0
 18462                           postinc0	equ	0xFEE
 18463                           fsr0h	equ	0xFEA
 18464                           fsr0l	equ	0xFE9
 18465                           wreg	equ	0xFE8
 18466                           fsr1h	equ	0xFE2
 18467                           fsr1l	equ	0xFE1
 18468                           indf2	equ	0xFDF
 18469                           postinc2	equ	0xFDE
 18470                           postdec2	equ	0xFDD
 18471                           fsr2h	equ	0xFDA
 18472                           fsr2l	equ	0xFD9
 18473                           status	equ	0xFD8
 18474                           
 18475 ;; *************** function _floor *****************
 18476 ;; Defined at:
 18477 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 18478 ;; Parameters:    Size  Location     Type
 18479 ;;  x               3   82[COMRAM] int 
 18480 ;; Auto vars:     Size  Location     Type
 18481 ;;  i               3   85[COMRAM] int 
 18482 ;;  expon           2   88[COMRAM] int 
 18483 ;; Return value:  Size  Location     Type
 18484 ;;                  3   82[COMRAM] int 
 18485 ;; Registers used:
 18486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18492 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;Total ram usage:        8 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    2
 18499 ;; This function calls:
 18500 ;;		___altoft
 18501 ;;		_frexp
 18502 ;;		i2___ftadd
 18503 ;;		i2___ftge
 18504 ;;		i2___fttol
 18505 ;; This function is called by:
 18506 ;;		_exp
 18507 ;; This function uses a non-reentrant model
 18508 ;;
 18509                           
 18510                           	psect	text71
 18511  0047CA                     __ptext71:
 18512                           	opt stack 0
 18513  0047CA                     _floor:
 18514                           	opt stack 19
 18515                           
 18516                           ;incstack = 0
 18517  0047CA  C053  F001         	movff	floor@x,frexp@value
 18518  0047CE  C054  F002         	movff	floor@x+1,frexp@value+1
 18519  0047D2  C055  F003         	movff	floor@x+2,frexp@value+2
 18520  0047D6  0E59               	movlw	low floor@expon
 18521  0047D8  6E04               	movwf	frexp@eptr,c
 18522  0047DA  0E00               	movlw	high floor@expon
 18523  0047DC  6E05               	movwf	frexp@eptr+1,c
 18524  0047DE  EC52  F028         	call	_frexp	;wreg free
 18525  0047E2  AE5A               	btfss	floor@expon+1,7,c
 18526  0047E4  D010               	goto	i2l4769
 18527  0047E6  AE55               	btfss	floor@x+2,7,c
 18528  0047E8  D007               	goto	i2l4765
 18529  0047EA  0E00               	movlw	0
 18530  0047EC  6E53               	movwf	?_floor,c
 18531  0047EE  0E80               	movlw	128
 18532  0047F0  6E54               	movwf	?_floor+1,c
 18533  0047F2  0EBF               	movlw	191
 18534  0047F4  6E55               	movwf	?_floor+2,c
 18535  0047F6  0012               	return	
 18536  0047F8                     i2l4765:
 18537  0047F8  0E00               	movlw	0
 18538  0047FA  6E53               	movwf	?_floor,c
 18539  0047FC  0E00               	movlw	0
 18540  0047FE  6E54               	movwf	?_floor+1,c
 18541  004800  0E00               	movlw	0
 18542  004802  6E55               	movwf	?_floor+2,c
 18543  004804  0012               	return	
 18544  004806                     i2l4769:
 18545  004806  505A               	movf	floor@expon+1,w,c
 18546  004808  E104               	bnz	i2u495_40
 18547  00480A  0E15               	movlw	21
 18548  00480C  5C59               	subwf	floor@expon,w,c
 18549  00480E  A0D8               	btfss	status,0,c
 18550  004810  D007               	goto	i2l4773
 18551  004812                     i2u495_40:
 18552  004812  C053  F053         	movff	floor@x,?_floor
 18553  004816  C054  F054         	movff	floor@x+1,?_floor+1
 18554  00481A  C055  F055         	movff	floor@x+2,?_floor+2
 18555  00481E  0012               	return	
 18556  004820                     i2l4773:
 18557  004820  C053  F03A         	movff	floor@x,i2___fttol@f1
 18558  004824  C054  F03B         	movff	floor@x+1,i2___fttol@f1+1
 18559  004828  C055  F03C         	movff	floor@x+2,i2___fttol@f1+2
 18560  00482C  EC7E  F022         	call	i2___fttol	;wreg free
 18561  004830  C03A  F049         	movff	?i2___fttol,___altoft@c
 18562  004834  C03B  F04A         	movff	?i2___fttol+1,___altoft@c+1
 18563  004838  C03C  F04B         	movff	?i2___fttol+2,___altoft@c+2
 18564  00483C  C03D  F04C         	movff	?i2___fttol+3,___altoft@c+3
 18565  004840  EC5B  F029         	call	___altoft	;wreg free
 18566  004844  C049  F056         	movff	?___altoft,floor@i
 18567  004848  C04A  F057         	movff	?___altoft+1,floor@i+1
 18568  00484C  C04B  F058         	movff	?___altoft+2,floor@i+2
 18569  004850  C053  F001         	movff	floor@x,i2___ftge@ff1
 18570  004854  C054  F002         	movff	floor@x+1,i2___ftge@ff1+1
 18571  004858  C055  F003         	movff	floor@x+2,i2___ftge@ff1+2
 18572  00485C  C056  F004         	movff	floor@i,i2___ftge@ff2
 18573  004860  C057  F005         	movff	floor@i+1,i2___ftge@ff2+1
 18574  004864  C058  F006         	movff	floor@i+2,i2___ftge@ff2+2
 18575  004868  EC0A  F028         	call	i2___ftge	;wreg free
 18576  00486C  B0D8               	btfsc	status,0,c
 18577  00486E  D015               	goto	i2l1261
 18578  004870  C056  F02E         	movff	floor@i,i2___ftadd@f1
 18579  004874  C057  F02F         	movff	floor@i+1,i2___ftadd@f1+1
 18580  004878  C058  F030         	movff	floor@i+2,i2___ftadd@f1+2
 18581  00487C  0E00               	movlw	0
 18582  00487E  6E31               	movwf	i2___ftadd@f2,c
 18583  004880  0E80               	movlw	128
 18584  004882  6E32               	movwf	i2___ftadd@f2+1,c
 18585  004884  0EBF               	movlw	191
 18586  004886  6E33               	movwf	i2___ftadd@f2+2,c
 18587  004888  EC1E  F019         	call	i2___ftadd	;wreg free
 18588  00488C  C02E  F053         	movff	?i2___ftadd,?_floor
 18589  004890  C02F  F054         	movff	?i2___ftadd+1,?_floor+1
 18590  004894  C030  F055         	movff	?i2___ftadd+2,?_floor+2
 18591  004898  0012               	return	
 18592  00489A                     i2l1261:
 18593  00489A  C056  F053         	movff	floor@i,?_floor
 18594  00489E  C057  F054         	movff	floor@i+1,?_floor+1
 18595  0048A2  C058  F055         	movff	floor@i+2,?_floor+2
 18596  0048A6  0012               	return		;funcret
 18597  0048A8                     __end_of_floor:
 18598                           	opt stack 0
 18599                           pclatu	equ	0xFFB
 18600                           pclath	equ	0xFFA
 18601                           tblptru	equ	0xFF8
 18602                           tblptrh	equ	0xFF7
 18603                           tblptrl	equ	0xFF6
 18604                           tablat	equ	0xFF5
 18605                           prodh	equ	0xFF4
 18606                           prodl	equ	0xFF3
 18607                           intcon	equ	0xFF2
 18608                           intcon2	equ	0xFF1
 18609                           intcon3	equ	0xFF0
 18610                           postinc0	equ	0xFEE
 18611                           fsr0h	equ	0xFEA
 18612                           fsr0l	equ	0xFE9
 18613                           wreg	equ	0xFE8
 18614                           fsr1h	equ	0xFE2
 18615                           fsr1l	equ	0xFE1
 18616                           indf2	equ	0xFDF
 18617                           postinc2	equ	0xFDE
 18618                           postdec2	equ	0xFDD
 18619                           fsr2h	equ	0xFDA
 18620                           fsr2l	equ	0xFD9
 18621                           status	equ	0xFD8
 18622                           
 18623 ;; *************** function i2___fttol *****************
 18624 ;; Defined at:
 18625 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;  f1              3   57[COMRAM] float 
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;  __fttol         4   67[COMRAM] unsigned long 
 18630 ;;  __fttol         1   71[COMRAM] unsigned char 
 18631 ;;  __fttol         1   66[COMRAM] unsigned char 
 18632 ;; Return value:  Size  Location     Type
 18633 ;;                  4   57[COMRAM] long 
 18634 ;; Registers used:
 18635 ;;		wreg, status,2, status,0
 18636 ;; Tracked objects:
 18637 ;;		On entry : 0/0
 18638 ;;		On exit  : 0/0
 18639 ;;		Unchanged: 0/0
 18640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;Total ram usage:       15 bytes
 18646 ;; Hardware stack levels used:    1
 18647 ;; This function calls:
 18648 ;;		Nothing
 18649 ;; This function is called by:
 18650 ;;		_dec_to_hex
 18651 ;;		_pow
 18652 ;;		_exp
 18653 ;;		_floor
 18654 ;;		i2_printf
 18655 ;; This function uses a non-reentrant model
 18656 ;;
 18657                           
 18658                           	psect	text72
 18659  0044FC                     __ptext72:
 18660                           	opt stack 0
 18661  0044FC                     i2___fttol:
 18662                           	opt stack 23
 18663                           
 18664                           ;incstack = 0
 18665  0044FC  C03C  F03E         	movff	i2___fttol@f1+2,??i2___fttol
 18666  004500  6A3F               	clrf	(??i2___fttol+1)& (0+255),c
 18667  004502  6A40               	clrf	(??i2___fttol+2)& (0+255),c
 18668  004504  343B               	rlcf	i2___fttol@f1+1,w,c
 18669  004506  363E               	rlcf	??i2___fttol& (0+255),f,c
 18670  004508  E301               	bnc	u443_41
 18671  00450A  803F               	bsf	(??i2___fttol+1)& (0+255),0,c
 18672  00450C                     u443_41:
 18673  00450C  503E               	movf	??i2___fttol,w,c
 18674  00450E  6E48               	movwf	i2___fttol@exp1,c
 18675  004510  5048               	movf	i2___fttol@exp1,w,c
 18676  004512  A4D8               	btfss	status,2,c
 18677  004514  D009               	goto	i2l4477
 18678  004516  0E00               	movlw	0
 18679  004518  6E3A               	movwf	?i2___fttol,c
 18680  00451A  0E00               	movlw	0
 18681  00451C  6E3B               	movwf	?i2___fttol+1,c
 18682  00451E  0E00               	movlw	0
 18683  004520  6E3C               	movwf	?i2___fttol+2,c
 18684  004522  0E00               	movlw	0
 18685  004524  6E3D               	movwf	?i2___fttol+3,c
 18686  004526  0012               	return	
 18687  004528                     i2l4477:
 18688  004528  0E17               	movlw	23
 18689  00452A  6E3E               	movwf	??i2___fttol& (0+255),c
 18690  00452C  C03A  F03F         	movff	i2___fttol@f1,??i2___fttol+1
 18691  004530  C03B  F040         	movff	i2___fttol@f1+1,??i2___fttol+2
 18692  004534  C03C  F041         	movff	i2___fttol@f1+2,??i2___fttol+3
 18693  004538  283E               	incf	??i2___fttol,w,c
 18694  00453A  6E42               	movwf	(??i2___fttol+4)& (0+255),c
 18695  00453C  D004               	goto	i2u445_40
 18696  00453E                     i2u445_45:
 18697  00453E  90D8               	bcf	status,0,c
 18698  004540  3241               	rrcf	??i2___fttol+3,f,c
 18699  004542  3240               	rrcf	??i2___fttol+2,f,c
 18700  004544  323F               	rrcf	??i2___fttol+1,f,c
 18701  004546                     i2u445_40:
 18702  004546  2E42               	decfsz	(??i2___fttol+4)& (0+255),f,c
 18703  004548  D7FA               	goto	i2u445_45
 18704  00454A  503F               	movf	??i2___fttol+1,w,c
 18705  00454C  6E43               	movwf	i2___fttol@sign1,c
 18706  00454E  8E3B               	bsf	i2___fttol@f1+1,7,c
 18707  004550  0EFF               	movlw	255
 18708  004552  163A               	andwf	i2___fttol@f1,f,c
 18709  004554  0EFF               	movlw	255
 18710  004556  163B               	andwf	i2___fttol@f1+1,f,c
 18711  004558  0E00               	movlw	0
 18712  00455A  163C               	andwf	i2___fttol@f1+2,f,c
 18713  00455C  503A               	movf	i2___fttol@f1,w,c
 18714  00455E  6E44               	movwf	i2___fttol@lval,c
 18715  004560  503B               	movf	i2___fttol@f1+1,w,c
 18716  004562  6E45               	movwf	i2___fttol@lval+1,c
 18717  004564  503C               	movf	i2___fttol@f1+2,w,c
 18718  004566  6E46               	movwf	i2___fttol@lval+2,c
 18719  004568  6A47               	clrf	i2___fttol@lval+3,c
 18720  00456A  0E8E               	movlw	142
 18721  00456C  5E48               	subwf	i2___fttol@exp1,f,c
 18722  00456E  AE48               	btfss	i2___fttol@exp1,7,c
 18723  004570  D016               	goto	i2l4499
 18724  004572  5048               	movf	i2___fttol@exp1,w,c
 18725  004574  0A80               	xorlw	128
 18726  004576  0F8F               	addlw	143
 18727  004578  B0D8               	btfsc	status,0,c
 18728  00457A  D009               	goto	i2l4495
 18729  00457C  0E00               	movlw	0
 18730  00457E  6E3A               	movwf	?i2___fttol,c
 18731  004580  0E00               	movlw	0
 18732  004582  6E3B               	movwf	?i2___fttol+1,c
 18733  004584  0E00               	movlw	0
 18734  004586  6E3C               	movwf	?i2___fttol+2,c
 18735  004588  0E00               	movlw	0
 18736  00458A  6E3D               	movwf	?i2___fttol+3,c
 18737  00458C  0012               	return	
 18738  00458E                     i2l4495:
 18739  00458E  90D8               	bcf	status,0,c
 18740  004590  3247               	rrcf	i2___fttol@lval+3,f,c
 18741  004592  3246               	rrcf	i2___fttol@lval+2,f,c
 18742  004594  3245               	rrcf	i2___fttol@lval+1,f,c
 18743  004596  3244               	rrcf	i2___fttol@lval,f,c
 18744  004598  3E48               	incfsz	i2___fttol@exp1,f,c
 18745  00459A  D7F9               	goto	i2l4495
 18746  00459C  D015               	goto	i2l4509
 18747  00459E                     i2l4499:
 18748  00459E  0E17               	movlw	23
 18749  0045A0  6448               	cpfsgt	i2___fttol@exp1,c
 18750  0045A2  D00F               	goto	i2l4507
 18751  0045A4  0E00               	movlw	0
 18752  0045A6  6E3A               	movwf	?i2___fttol,c
 18753  0045A8  0E00               	movlw	0
 18754  0045AA  6E3B               	movwf	?i2___fttol+1,c
 18755  0045AC  0E00               	movlw	0
 18756  0045AE  6E3C               	movwf	?i2___fttol+2,c
 18757  0045B0  0E00               	movlw	0
 18758  0045B2  6E3D               	movwf	?i2___fttol+3,c
 18759  0045B4  0012               	return	
 18760  0045B6                     i2l4505:
 18761  0045B6  90D8               	bcf	status,0,c
 18762  0045B8  3644               	rlcf	i2___fttol@lval,f,c
 18763  0045BA  3645               	rlcf	i2___fttol@lval+1,f,c
 18764  0045BC  3646               	rlcf	i2___fttol@lval+2,f,c
 18765  0045BE  3647               	rlcf	i2___fttol@lval+3,f,c
 18766  0045C0  0648               	decf	i2___fttol@exp1,f,c
 18767  0045C2                     i2l4507:
 18768  0045C2  5048               	movf	i2___fttol@exp1,w,c
 18769  0045C4  A4D8               	btfss	status,2,c
 18770  0045C6  D7F7               	goto	i2l4505
 18771  0045C8                     i2l4509:
 18772  0045C8  5043               	movf	i2___fttol@sign1,w,c
 18773  0045CA  B4D8               	btfsc	status,2,c
 18774  0045CC  D008               	goto	i2l4513
 18775  0045CE  1E47               	comf	i2___fttol@lval+3,f,c
 18776  0045D0  1E46               	comf	i2___fttol@lval+2,f,c
 18777  0045D2  1E45               	comf	i2___fttol@lval+1,f,c
 18778  0045D4  6C44               	negf	i2___fttol@lval,c
 18779  0045D6  0E00               	movlw	0
 18780  0045D8  2245               	addwfc	i2___fttol@lval+1,f,c
 18781  0045DA  2246               	addwfc	i2___fttol@lval+2,f,c
 18782  0045DC  2247               	addwfc	i2___fttol@lval+3,f,c
 18783  0045DE                     i2l4513:
 18784  0045DE  C044  F03A         	movff	i2___fttol@lval,?i2___fttol
 18785  0045E2  C045  F03B         	movff	i2___fttol@lval+1,?i2___fttol+1
 18786  0045E6  C046  F03C         	movff	i2___fttol@lval+2,?i2___fttol+2
 18787  0045EA  C047  F03D         	movff	i2___fttol@lval+3,?i2___fttol+3
 18788  0045EE  0012               	return	
 18789  0045F0                     __end_ofi2___fttol:
 18790                           	opt stack 0
 18791                           pclatu	equ	0xFFB
 18792                           pclath	equ	0xFFA
 18793                           tblptru	equ	0xFF8
 18794                           tblptrh	equ	0xFF7
 18795                           tblptrl	equ	0xFF6
 18796                           tablat	equ	0xFF5
 18797                           prodh	equ	0xFF4
 18798                           prodl	equ	0xFF3
 18799                           intcon	equ	0xFF2
 18800                           intcon2	equ	0xFF1
 18801                           intcon3	equ	0xFF0
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           fsr1h	equ	0xFE2
 18807                           fsr1l	equ	0xFE1
 18808                           indf2	equ	0xFDF
 18809                           postinc2	equ	0xFDE
 18810                           postdec2	equ	0xFDD
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function i2___ftge *****************
 18816 ;; Defined at:
 18817 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  ff1             3    0[COMRAM] float 
 18820 ;;  ff2             3    3[COMRAM] float 
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;		None
 18823 ;; Return value:  Size  Location     Type
 18824 ;;		None               void
 18825 ;; Registers used:
 18826 ;;		wreg, status,2, status,0
 18827 ;; Tracked objects:
 18828 ;;		On entry : 0/0
 18829 ;;		On exit  : 0/0
 18830 ;;		Unchanged: 0/0
 18831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18832 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;Total ram usage:        9 bytes
 18837 ;; Hardware stack levels used:    1
 18838 ;; This function calls:
 18839 ;;		Nothing
 18840 ;; This function is called by:
 18841 ;;		_pow
 18842 ;;		_exp
 18843 ;;		_floor
 18844 ;;		i2_printf
 18845 ;; This function uses a non-reentrant model
 18846 ;;
 18847                           
 18848                           	psect	text73
 18849  005014                     __ptext73:
 18850                           	opt stack 0
 18851  005014                     i2___ftge:
 18852                           	opt stack 23
 18853                           
 18854                           ;incstack = 0
 18855  005014  AE03               	btfss	i2___ftge@ff1+2,7,c
 18856  005016  D016               	goto	i2l4409
 18857  005018  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 18858  00501C  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 18859  005020  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 18860  005024  1E07               	comf	??i2___ftge,f,c
 18861  005026  1E08               	comf	??i2___ftge+1,f,c
 18862  005028  1E09               	comf	??i2___ftge+2,f,c
 18863  00502A  2A07               	incf	??i2___ftge,f,c
 18864  00502C  0E00               	movlw	0
 18865  00502E  2208               	addwfc	??i2___ftge+1,f,c
 18866  005030  2209               	addwfc	??i2___ftge+2,f,c
 18867  005032  0E00               	movlw	0
 18868  005034  2407               	addwf	??i2___ftge,w,c
 18869  005036  6E01               	movwf	i2___ftge@ff1,c
 18870  005038  0E00               	movlw	0
 18871  00503A  2008               	addwfc	??i2___ftge+1,w,c
 18872  00503C  6E02               	movwf	i2___ftge@ff1+1,c
 18873  00503E  0E80               	movlw	128
 18874  005040  2009               	addwfc	??i2___ftge+2,w,c
 18875  005042  6E03               	movwf	i2___ftge@ff1+2,c
 18876  005044                     i2l4409:
 18877  005044  AE06               	btfss	i2___ftge@ff2+2,7,c
 18878  005046  D016               	goto	i2l4413
 18879  005048  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 18880  00504C  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 18881  005050  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 18882  005054  1E07               	comf	??i2___ftge,f,c
 18883  005056  1E08               	comf	??i2___ftge+1,f,c
 18884  005058  1E09               	comf	??i2___ftge+2,f,c
 18885  00505A  2A07               	incf	??i2___ftge,f,c
 18886  00505C  0E00               	movlw	0
 18887  00505E  2208               	addwfc	??i2___ftge+1,f,c
 18888  005060  2209               	addwfc	??i2___ftge+2,f,c
 18889  005062  0E00               	movlw	0
 18890  005064  2407               	addwf	??i2___ftge,w,c
 18891  005066  6E04               	movwf	i2___ftge@ff2,c
 18892  005068  0E00               	movlw	0
 18893  00506A  2008               	addwfc	??i2___ftge+1,w,c
 18894  00506C  6E05               	movwf	i2___ftge@ff2+1,c
 18895  00506E  0E80               	movlw	128
 18896  005070  2009               	addwfc	??i2___ftge+2,w,c
 18897  005072  6E06               	movwf	i2___ftge@ff2+2,c
 18898  005074                     i2l4413:
 18899  005074  0E00               	movlw	0
 18900  005076  1A01               	xorwf	i2___ftge@ff1,f,c
 18901  005078  0E00               	movlw	0
 18902  00507A  1A02               	xorwf	i2___ftge@ff1+1,f,c
 18903  00507C  0E80               	movlw	128
 18904  00507E  1A03               	xorwf	i2___ftge@ff1+2,f,c
 18905  005080  0E00               	movlw	0
 18906  005082  1A04               	xorwf	i2___ftge@ff2,f,c
 18907  005084  0E00               	movlw	0
 18908  005086  1A05               	xorwf	i2___ftge@ff2+1,f,c
 18909  005088  0E80               	movlw	128
 18910  00508A  1A06               	xorwf	i2___ftge@ff2+2,f,c
 18911  00508C  5004               	movf	i2___ftge@ff2,w,c
 18912  00508E  5C01               	subwf	i2___ftge@ff1,w,c
 18913  005090  5005               	movf	i2___ftge@ff2+1,w,c
 18914  005092  5802               	subwfb	i2___ftge@ff1+1,w,c
 18915  005094  5006               	movf	i2___ftge@ff2+2,w,c
 18916  005096  5803               	subwfb	i2___ftge@ff1+2,w,c
 18917  005098  B0D8               	btfsc	status,0,c
 18918  00509A  D002               	goto	i2l4419
 18919  00509C  90D8               	bcf	status,0,c
 18920  00509E  0012               	return	
 18921  0050A0                     i2l4419:
 18922  0050A0  80D8               	bsf	status,0,c
 18923  0050A2  0012               	return	
 18924  0050A4                     __end_ofi2___ftge:
 18925                           	opt stack 0
 18926                           pclatu	equ	0xFFB
 18927                           pclath	equ	0xFFA
 18928                           tblptru	equ	0xFF8
 18929                           tblptrh	equ	0xFF7
 18930                           tblptrl	equ	0xFF6
 18931                           tablat	equ	0xFF5
 18932                           prodh	equ	0xFF4
 18933                           prodl	equ	0xFF3
 18934                           intcon	equ	0xFF2
 18935                           intcon2	equ	0xFF1
 18936                           intcon3	equ	0xFF0
 18937                           postinc0	equ	0xFEE
 18938                           fsr0h	equ	0xFEA
 18939                           fsr0l	equ	0xFE9
 18940                           wreg	equ	0xFE8
 18941                           fsr1h	equ	0xFE2
 18942                           fsr1l	equ	0xFE1
 18943                           indf2	equ	0xFDF
 18944                           postinc2	equ	0xFDE
 18945                           postdec2	equ	0xFDD
 18946                           fsr2h	equ	0xFDA
 18947                           fsr2l	equ	0xFD9
 18948                           status	equ	0xFD8
 18949                           
 18950 ;; *************** function _frexp *****************
 18951 ;; Defined at:
 18952 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 18953 ;; Parameters:    Size  Location     Type
 18954 ;;  value           3    0[COMRAM] float 
 18955 ;;  eptr            2    3[COMRAM] PTR int 
 18956 ;;		 -> log@exponent(2), floor@expon(2), 
 18957 ;; Auto vars:     Size  Location     Type
 18958 ;;		None
 18959 ;; Return value:  Size  Location     Type
 18960 ;;                  3    0[COMRAM] PTR int 
 18961 ;; Registers used:
 18962 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18963 ;; Tracked objects:
 18964 ;;		On entry : 0/0
 18965 ;;		On exit  : 0/0
 18966 ;;		Unchanged: 0/0
 18967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18968 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18970 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18971 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18972 ;;Total ram usage:        7 bytes
 18973 ;; Hardware stack levels used:    1
 18974 ;; This function calls:
 18975 ;;		Nothing
 18976 ;; This function is called by:
 18977 ;;		_floor
 18978 ;;		_log
 18979 ;; This function uses a non-reentrant model
 18980 ;;
 18981                           
 18982                           	psect	text74
 18983  0050A4                     __ptext74:
 18984                           	opt stack 0
 18985  0050A4                     _frexp:
 18986                           	opt stack 21
 18987                           
 18988                           ;incstack = 0
 18989  0050A4  5001               	movf	frexp@value,w,c
 18990  0050A6  1002               	iorwf	frexp@value+1,w,c
 18991  0050A8  1003               	iorwf	frexp@value+2,w,c
 18992  0050AA  A4D8               	btfss	status,2,c
 18993  0050AC  D00F               	goto	i2l4317
 18994  0050AE  C004  FFD9         	movff	frexp@eptr,fsr2l
 18995  0050B2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 18996  0050B6  0E00               	movlw	0
 18997  0050B8  6EDE               	movwf	postinc2,c
 18998  0050BA  0E00               	movlw	0
 18999  0050BC  6EDD               	movwf	postdec2,c
 19000  0050BE  0E00               	movlw	0
 19001  0050C0  6E01               	movwf	?_frexp,c
 19002  0050C2  0E00               	movlw	0
 19003  0050C4  6E02               	movwf	?_frexp+1,c
 19004  0050C6  0E00               	movlw	0
 19005  0050C8  6E03               	movwf	?_frexp+2,c
 19006  0050CA  0012               	return	
 19007  0050CC                     i2l4317:
 19008  0050CC  5003               	movf	frexp@value+2,w,c
 19009  0050CE  0B7F               	andlw	127
 19010  0050D0  6E06               	movwf	??_frexp& (0+255),c
 19011  0050D2  6A07               	clrf	(??_frexp+1)& (0+255),c
 19012  0050D4  90D8               	bcf	status,0,c
 19013  0050D6  3606               	rlcf	??_frexp,f,c
 19014  0050D8  3607               	rlcf	??_frexp+1,f,c
 19015  0050DA  C004  FFD9         	movff	frexp@eptr,fsr2l
 19016  0050DE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19017  0050E2  C006  FFDE         	movff	??_frexp,postinc2
 19018  0050E6  C007  FFDD         	movff	??_frexp+1,postdec2
 19019  0050EA  AE02               	btfss	frexp@value+1,7,c
 19020  0050EC  D003               	goto	i2u412_40
 19021  0050EE  6A06               	clrf	??_frexp& (0+255),c
 19022  0050F0  2A06               	incf	??_frexp& (0+255),f,c
 19023  0050F2  D001               	goto	i2u412_48
 19024  0050F4                     i2u412_40:
 19025  0050F4  6A06               	clrf	??_frexp& (0+255),c
 19026  0050F6                     i2u412_48:
 19027  0050F6  5006               	movf	??_frexp,w,c
 19028  0050F8  C004  FFD9         	movff	frexp@eptr,fsr2l
 19029  0050FC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19030  005100  12DE               	iorwf	postinc2,f,c
 19031  005102  0E00               	movlw	0
 19032  005104  12DD               	iorwf	postdec2,f,c
 19033  005106  C004  FFD9         	movff	frexp@eptr,fsr2l
 19034  00510A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19035  00510E  0E82               	movlw	130
 19036  005110  26DE               	addwf	postinc2,f,c
 19037  005112  0EFF               	movlw	255
 19038  005114  22DD               	addwfc	postdec2,f,c
 19039  005116  8003               	bsf	frexp@value+2,0,c
 19040  005118  8203               	bsf	frexp@value+2,1,c
 19041  00511A  8403               	bsf	frexp@value+2,2,c
 19042  00511C  8603               	bsf	frexp@value+2,3,c
 19043  00511E  8803               	bsf	frexp@value+2,4,c
 19044  005120  8A03               	bsf	frexp@value+2,5,c
 19045  005122  9C03               	bcf	frexp@value+2,6,c
 19046  005124  9E02               	bcf	frexp@value+1,7,c
 19047  005126  C001  F001         	movff	frexp@value,?_frexp
 19048  00512A  C002  F002         	movff	frexp@value+1,?_frexp+1
 19049  00512E  C003  F003         	movff	frexp@value+2,?_frexp+2
 19050  005132  0012               	return	
 19051  005134                     __end_of_frexp:
 19052                           	opt stack 0
 19053                           pclatu	equ	0xFFB
 19054                           pclath	equ	0xFFA
 19055                           tblptru	equ	0xFF8
 19056                           tblptrh	equ	0xFF7
 19057                           tblptrl	equ	0xFF6
 19058                           tablat	equ	0xFF5
 19059                           prodh	equ	0xFF4
 19060                           prodl	equ	0xFF3
 19061                           intcon	equ	0xFF2
 19062                           intcon2	equ	0xFF1
 19063                           intcon3	equ	0xFF0
 19064                           postinc0	equ	0xFEE
 19065                           fsr0h	equ	0xFEA
 19066                           fsr0l	equ	0xFE9
 19067                           wreg	equ	0xFE8
 19068                           fsr1h	equ	0xFE2
 19069                           fsr1l	equ	0xFE1
 19070                           indf2	equ	0xFDF
 19071                           postinc2	equ	0xFDE
 19072                           postdec2	equ	0xFDD
 19073                           fsr2h	equ	0xFDA
 19074                           fsr2l	equ	0xFD9
 19075                           status	equ	0xFD8
 19076                           
 19077 ;; *************** function ___altoft *****************
 19078 ;; Defined at:
 19079 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;  c               4   72[COMRAM] long 
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;  sign            1   81[COMRAM] unsigned char 
 19084 ;;  exp             1   80[COMRAM] unsigned char 
 19085 ;; Return value:  Size  Location     Type
 19086 ;;                  3   72[COMRAM] float 
 19087 ;; Registers used:
 19088 ;;		wreg, status,2, status,0, cstack
 19089 ;; Tracked objects:
 19090 ;;		On entry : 0/0
 19091 ;;		On exit  : 0/0
 19092 ;;		Unchanged: 0/0
 19093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19096 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;Total ram usage:       10 bytes
 19099 ;; Hardware stack levels used:    1
 19100 ;; Hardware stack levels required when called:    1
 19101 ;; This function calls:
 19102 ;;		i2___ftpack
 19103 ;; This function is called by:
 19104 ;;		_floor
 19105 ;; This function uses a non-reentrant model
 19106 ;;
 19107                           
 19108                           	psect	text75
 19109  0052B6                     __ptext75:
 19110                           	opt stack 0
 19111  0052B6                     ___altoft:
 19112                           	opt stack 19
 19113                           
 19114                           ;incstack = 0
 19115  0052B6  0E00               	movlw	0
 19116  0052B8  6E52               	movwf	___altoft@sign,c
 19117  0052BA  0E8E               	movlw	142
 19118  0052BC  6E51               	movwf	___altoft@exp,c
 19119  0052BE  AE4C               	btfss	___altoft@c+3,7,c
 19120  0052C0  D011               	goto	i2l4303
 19121  0052C2  1E4C               	comf	___altoft@c+3,f,c
 19122  0052C4  1E4B               	comf	___altoft@c+2,f,c
 19123  0052C6  1E4A               	comf	___altoft@c+1,f,c
 19124  0052C8  6C49               	negf	___altoft@c,c
 19125  0052CA  0E00               	movlw	0
 19126  0052CC  224A               	addwfc	___altoft@c+1,f,c
 19127  0052CE  224B               	addwfc	___altoft@c+2,f,c
 19128  0052D0  224C               	addwfc	___altoft@c+3,f,c
 19129  0052D2  0E01               	movlw	1
 19130  0052D4  6E52               	movwf	___altoft@sign,c
 19131  0052D6  D006               	goto	i2l4303
 19132  0052D8                     i2l4301:
 19133  0052D8  90D8               	bcf	status,0,c
 19134  0052DA  324C               	rrcf	___altoft@c+3,f,c
 19135  0052DC  324B               	rrcf	___altoft@c+2,f,c
 19136  0052DE  324A               	rrcf	___altoft@c+1,f,c
 19137  0052E0  3249               	rrcf	___altoft@c,f,c
 19138  0052E2  2A51               	incf	___altoft@exp,f,c
 19139  0052E4                     i2l4303:
 19140  0052E4  0E00               	movlw	0
 19141  0052E6  1449               	andwf	___altoft@c,w,c
 19142  0052E8  6E4D               	movwf	??___altoft& (0+255),c
 19143  0052EA  0E00               	movlw	0
 19144  0052EC  144A               	andwf	___altoft@c+1,w,c
 19145  0052EE  6E4E               	movwf	(??___altoft+1)& (0+255),c
 19146  0052F0  0E00               	movlw	0
 19147  0052F2  144B               	andwf	___altoft@c+2,w,c
 19148  0052F4  6E4F               	movwf	(??___altoft+2)& (0+255),c
 19149  0052F6  0EFF               	movlw	255
 19150  0052F8  144C               	andwf	___altoft@c+3,w,c
 19151  0052FA  6E50               	movwf	(??___altoft+3)& (0+255),c
 19152  0052FC  504D               	movf	??___altoft,w,c
 19153  0052FE  104E               	iorwf	??___altoft+1,w,c
 19154  005300  104F               	iorwf	??___altoft+2,w,c
 19155  005302  1050               	iorwf	??___altoft+3,w,c
 19156  005304  A4D8               	btfss	status,2,c
 19157  005306  D7E8               	goto	i2l4301
 19158  005308  C049  F001         	movff	___altoft@c,i2___ftpack@arg
 19159  00530C  C04A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 19160  005310  C04B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 19161  005314  C051  F004         	movff	___altoft@exp,i2___ftpack@exp
 19162  005318  C052  F005         	movff	___altoft@sign,i2___ftpack@sign
 19163  00531C  EC15  F027         	call	i2___ftpack	;wreg free
 19164  005320  C001  F049         	movff	?i2___ftpack,?___altoft
 19165  005324  C002  F04A         	movff	?i2___ftpack+1,?___altoft+1
 19166  005328  C003  F04B         	movff	?i2___ftpack+2,?___altoft+2
 19167  00532C  0012               	return	
 19168  00532E                     __end_of___altoft:
 19169                           	opt stack 0
 19170                           pclatu	equ	0xFFB
 19171                           pclath	equ	0xFFA
 19172                           tblptru	equ	0xFF8
 19173                           tblptrh	equ	0xFF7
 19174                           tblptrl	equ	0xFF6
 19175                           tablat	equ	0xFF5
 19176                           prodh	equ	0xFF4
 19177                           prodl	equ	0xFF3
 19178                           intcon	equ	0xFF2
 19179                           intcon2	equ	0xFF1
 19180                           intcon3	equ	0xFF0
 19181                           postinc0	equ	0xFEE
 19182                           fsr0h	equ	0xFEA
 19183                           fsr0l	equ	0xFE9
 19184                           wreg	equ	0xFE8
 19185                           fsr1h	equ	0xFE2
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           fsr2h	equ	0xFDA
 19191                           fsr2l	equ	0xFD9
 19192                           status	equ	0xFD8
 19193                           
 19194 ;; *************** function _eval_poly *****************
 19195 ;; Defined at:
 19196 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;  x               3   57[COMRAM] float 
 19199 ;;  d               2   60[COMRAM] PTR const 
 19200 ;;		 -> log@coeff(27), exp@coeff(30), 
 19201 ;;  n               2   62[COMRAM] int 
 19202 ;; Auto vars:     Size  Location     Type
 19203 ;;  res             3   66[COMRAM] int 
 19204 ;; Return value:  Size  Location     Type
 19205 ;;                  3   57[COMRAM] int 
 19206 ;; Registers used:
 19207 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19208 ;; Tracked objects:
 19209 ;;		On entry : 0/0
 19210 ;;		On exit  : 0/0
 19211 ;;		Unchanged: 0/0
 19212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19213 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19216 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19217 ;;Total ram usage:       12 bytes
 19218 ;; Hardware stack levels used:    1
 19219 ;; Hardware stack levels required when called:    2
 19220 ;; This function calls:
 19221 ;;		i2___ftadd
 19222 ;;		i2___ftmul
 19223 ;;		i2___wmul
 19224 ;; This function is called by:
 19225 ;;		_exp
 19226 ;;		_log
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           	psect	text76
 19231  004A50                     __ptext76:
 19232                           	opt stack 0
 19233  004A50                     _eval_poly:
 19234                           	opt stack 19
 19235                           
 19236                           ;incstack = 0
 19237  004A50  C03F  F00F         	movff	eval_poly@n,i2___wmul@multiplier
 19238  004A54  C040  F010         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 19239  004A58  0E00               	movlw	0
 19240  004A5A  6E12               	movwf	i2___wmul@multiplicand+1,c
 19241  004A5C  0E03               	movlw	3
 19242  004A5E  6E11               	movwf	i2___wmul@multiplicand,c
 19243  004A60  EC58  F02C         	call	i2___wmul	;wreg free
 19244  004A64  C03D  F041         	movff	eval_poly@d,??_eval_poly
 19245  004A68  C03E  F042         	movff	eval_poly@d+1,??_eval_poly+1
 19246  004A6C  500F               	movf	?i2___wmul,w,c
 19247  004A6E  2641               	addwf	??_eval_poly,f,c
 19248  004A70  5010               	movf	?i2___wmul+1,w,c
 19249  004A72  2242               	addwfc	??_eval_poly+1,f,c
 19250  004A74  C041  FFF6         	movff	??_eval_poly,tblptrl
 19251  004A78  C042  FFF7         	movff	??_eval_poly+1,tblptrh
 19252  004A7C                     	if	0	;tblptru may be non-zero
 19253  004A7C                     	endif
 19254  004A7C                     	if	0	;tblptru may be non-zero
 19255  004A7C                     	endif
 19256  004A7C  0009               	tblrd		*+
 19257  004A7E  CFF5 F043          	movff	tablat,eval_poly@res
 19258  004A82  0009               	tblrd		*+
 19259  004A84  CFF5 F044          	movff	tablat,eval_poly@res+1
 19260  004A88  000A               	tblrd		*-
 19261  004A8A  CFF5 F045          	movff	tablat,eval_poly@res+2
 19262  004A8E  D03E               	goto	i2l4783
 19263  004A90                     i2l4781:
 19264  004A90  C043  F018         	movff	eval_poly@res,i2___ftmul@f2
 19265  004A94  C044  F019         	movff	eval_poly@res+1,i2___ftmul@f2+1
 19266  004A98  C045  F01A         	movff	eval_poly@res+2,i2___ftmul@f2+2
 19267  004A9C  C03A  F015         	movff	eval_poly@x,i2___ftmul@f1
 19268  004AA0  C03B  F016         	movff	eval_poly@x+1,i2___ftmul@f1+1
 19269  004AA4  C03C  F017         	movff	eval_poly@x+2,i2___ftmul@f1+2
 19270  004AA8  ECF8  F022         	call	i2___ftmul	;wreg free
 19271  004AAC  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 19272  004AB0  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 19273  004AB4  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 19274  004AB8  0E00               	movlw	0
 19275  004ABA  6E12               	movwf	i2___wmul@multiplicand+1,c
 19276  004ABC  0E03               	movlw	3
 19277  004ABE  6E11               	movwf	i2___wmul@multiplicand,c
 19278  004AC0  063F               	decf	eval_poly@n,f,c
 19279  004AC2  A0D8               	btfss	status,0,c
 19280  004AC4  0640               	decf	eval_poly@n+1,f,c
 19281  004AC6  C03F  F00F         	movff	eval_poly@n,i2___wmul@multiplier
 19282  004ACA  C040  F010         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 19283  004ACE  EC58  F02C         	call	i2___wmul	;wreg free
 19284  004AD2  C03D  F041         	movff	eval_poly@d,??_eval_poly
 19285  004AD6  C03E  F042         	movff	eval_poly@d+1,??_eval_poly+1
 19286  004ADA  500F               	movf	?i2___wmul,w,c
 19287  004ADC  2641               	addwf	??_eval_poly,f,c
 19288  004ADE  5010               	movf	?i2___wmul+1,w,c
 19289  004AE0  2242               	addwfc	??_eval_poly+1,f,c
 19290  004AE2  C041  FFF6         	movff	??_eval_poly,tblptrl
 19291  004AE6  C042  FFF7         	movff	??_eval_poly+1,tblptrh
 19292  004AEA                     	if	0	;tblptru may be non-zero
 19293  004AEA                     	endif
 19294  004AEA                     	if	0	;tblptru may be non-zero
 19295  004AEA                     	endif
 19296  004AEA  0009               	tblrd		*+
 19297  004AEC  CFF5 F031          	movff	tablat,i2___ftadd@f2
 19298  004AF0  0009               	tblrd		*+
 19299  004AF2  CFF5 F032          	movff	tablat,i2___ftadd@f2+1
 19300  004AF6  000A               	tblrd		*-
 19301  004AF8  CFF5 F033          	movff	tablat,i2___ftadd@f2+2
 19302  004AFC  EC1E  F019         	call	i2___ftadd	;wreg free
 19303  004B00  C02E  F043         	movff	?i2___ftadd,eval_poly@res
 19304  004B04  C02F  F044         	movff	?i2___ftadd+1,eval_poly@res+1
 19305  004B08  C030  F045         	movff	?i2___ftadd+2,eval_poly@res+2
 19306  004B0C                     i2l4783:
 19307  004B0C  503F               	movf	eval_poly@n,w,c
 19308  004B0E  1040               	iorwf	eval_poly@n+1,w,c
 19309  004B10  A4D8               	btfss	status,2,c
 19310  004B12  D7BE               	goto	i2l4781
 19311  004B14  C043  F03A         	movff	eval_poly@res,?_eval_poly
 19312  004B18  C044  F03B         	movff	eval_poly@res+1,?_eval_poly+1
 19313  004B1C  C045  F03C         	movff	eval_poly@res+2,?_eval_poly+2
 19314  004B20  0012               	return		;funcret
 19315  004B22                     __end_of_eval_poly:
 19316                           	opt stack 0
 19317                           pclatu	equ	0xFFB
 19318                           pclath	equ	0xFFA
 19319                           tblptru	equ	0xFF8
 19320                           tblptrh	equ	0xFF7
 19321                           tblptrl	equ	0xFF6
 19322                           tablat	equ	0xFF5
 19323                           prodh	equ	0xFF4
 19324                           prodl	equ	0xFF3
 19325                           intcon	equ	0xFF2
 19326                           intcon2	equ	0xFF1
 19327                           intcon3	equ	0xFF0
 19328                           postinc0	equ	0xFEE
 19329                           fsr0h	equ	0xFEA
 19330                           fsr0l	equ	0xFE9
 19331                           wreg	equ	0xFE8
 19332                           fsr1h	equ	0xFE2
 19333                           fsr1l	equ	0xFE1
 19334                           indf2	equ	0xFDF
 19335                           postinc2	equ	0xFDE
 19336                           postdec2	equ	0xFDD
 19337                           fsr2h	equ	0xFDA
 19338                           fsr2l	equ	0xFD9
 19339                           status	equ	0xFD8
 19340                           
 19341 ;; *************** function i2___wmul *****************
 19342 ;; Defined at:
 19343 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19344 ;; Parameters:    Size  Location     Type
 19345 ;;  multiplier      2   14[COMRAM] unsigned int 
 19346 ;;  multiplicand    2   16[COMRAM] unsigned int 
 19347 ;; Auto vars:     Size  Location     Type
 19348 ;;  __wmul          2   18[COMRAM] unsigned int 
 19349 ;; Return value:  Size  Location     Type
 19350 ;;                  2   14[COMRAM] unsigned int 
 19351 ;; Registers used:
 19352 ;;		wreg, status,2, status,0, prodl, prodh
 19353 ;; Tracked objects:
 19354 ;;		On entry : 0/0
 19355 ;;		On exit  : 0/0
 19356 ;;		Unchanged: 0/0
 19357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19362 ;;Total ram usage:        6 bytes
 19363 ;; Hardware stack levels used:    1
 19364 ;; This function calls:
 19365 ;;		Nothing
 19366 ;; This function is called by:
 19367 ;;		_isr
 19368 ;;		_eval_poly
 19369 ;;		i2_fround
 19370 ;;		i2_scale
 19371 ;;		i2_printf
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           	psect	text77
 19376  0058B0                     __ptext77:
 19377                           	opt stack 0
 19378  0058B0                     i2___wmul:
 19379                           	opt stack 22
 19380                           
 19381                           ;incstack = 0
 19382  0058B0  500F               	movf	i2___wmul@multiplier,w,c
 19383  0058B2  0211               	mulwf	i2___wmul@multiplicand,c
 19384  0058B4  CFF3 F013          	movff	prodl,i2___wmul@product
 19385  0058B8  CFF4 F014          	movff	prodh,i2___wmul@product+1
 19386  0058BC  500F               	movf	i2___wmul@multiplier,w,c
 19387  0058BE  0212               	mulwf	i2___wmul@multiplicand+1,c
 19388  0058C0  50F3               	movf	prodl,w,c
 19389  0058C2  2614               	addwf	i2___wmul@product+1,f,c
 19390  0058C4  5010               	movf	i2___wmul@multiplier+1,w,c
 19391  0058C6  0211               	mulwf	i2___wmul@multiplicand,c
 19392  0058C8  50F3               	movf	prodl,w,c
 19393  0058CA  2614               	addwf	i2___wmul@product+1,f,c
 19394  0058CC  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 19395  0058D0  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 19396  0058D4  0012               	return	
 19397  0058D6                     __end_ofi2___wmul:
 19398                           	opt stack 0
 19399                           pclatu	equ	0xFFB
 19400                           pclath	equ	0xFFA
 19401                           tblptru	equ	0xFF8
 19402                           tblptrh	equ	0xFF7
 19403                           tblptrl	equ	0xFF6
 19404                           tablat	equ	0xFF5
 19405                           prodh	equ	0xFF4
 19406                           prodl	equ	0xFF3
 19407                           intcon	equ	0xFF2
 19408                           intcon2	equ	0xFF1
 19409                           intcon3	equ	0xFF0
 19410                           postinc0	equ	0xFEE
 19411                           fsr0h	equ	0xFEA
 19412                           fsr0l	equ	0xFE9
 19413                           wreg	equ	0xFE8
 19414                           fsr1h	equ	0xFE2
 19415                           fsr1l	equ	0xFE1
 19416                           indf2	equ	0xFDF
 19417                           postinc2	equ	0xFDE
 19418                           postdec2	equ	0xFDD
 19419                           fsr2h	equ	0xFDA
 19420                           fsr2l	equ	0xFD9
 19421                           status	equ	0xFD8
 19422                           
 19423 ;; *************** function i2___ftmul *****************
 19424 ;; Defined at:
 19425 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 19426 ;; Parameters:    Size  Location     Type
 19427 ;;  f1              3   20[COMRAM] float 
 19428 ;;  f2              3   23[COMRAM] float 
 19429 ;; Auto vars:     Size  Location     Type
 19430 ;;  __ftmul         3   30[COMRAM] unsigned um
 19431 ;;  __ftmul         1   34[COMRAM] unsigned char 
 19432 ;;  __ftmul         1   33[COMRAM] unsigned char 
 19433 ;;  __ftmul         1   29[COMRAM] unsigned char 
 19434 ;; Return value:  Size  Location     Type
 19435 ;;                  3   20[COMRAM] float 
 19436 ;; Registers used:
 19437 ;;		wreg, status,2, status,0, cstack
 19438 ;; Tracked objects:
 19439 ;;		On entry : 0/0
 19440 ;;		On exit  : 0/0
 19441 ;;		Unchanged: 0/0
 19442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19443 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19444 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19445 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19446 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19447 ;;Total ram usage:       15 bytes
 19448 ;; Hardware stack levels used:    1
 19449 ;; Hardware stack levels required when called:    1
 19450 ;; This function calls:
 19451 ;;		i2___ftpack
 19452 ;; This function is called by:
 19453 ;;		_dec_to_hex
 19454 ;;		_pow
 19455 ;;		_exp
 19456 ;;		_log
 19457 ;;		_eval_poly
 19458 ;;		i2_fround
 19459 ;;		i2_scale
 19460 ;;		i2_printf
 19461 ;; This function uses a non-reentrant model
 19462 ;;
 19463                           
 19464                           	psect	text78
 19465  0045F0                     __ptext78:
 19466                           	opt stack 0
 19467  0045F0                     i2___ftmul:
 19468                           	opt stack 21
 19469                           
 19470                           ;incstack = 0
 19471  0045F0  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 19472  0045F4  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 19473  0045F6  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 19474  0045F8  3416               	rlcf	i2___ftmul@f1+1,w,c
 19475  0045FA  361B               	rlcf	??i2___ftmul& (0+255),f,c
 19476  0045FC  E301               	bnc	u437_41
 19477  0045FE  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 19478  004600                     u437_41:
 19479  004600  501B               	movf	??i2___ftmul,w,c
 19480  004602  6E1E               	movwf	i2___ftmul@exp,c
 19481  004604  501E               	movf	i2___ftmul@exp,w,c
 19482  004606  A4D8               	btfss	status,2,c
 19483  004608  D007               	goto	i2l4429
 19484  00460A  0E00               	movlw	0
 19485  00460C  6E15               	movwf	?i2___ftmul,c
 19486  00460E  0E00               	movlw	0
 19487  004610  6E16               	movwf	?i2___ftmul+1,c
 19488  004612  0E00               	movlw	0
 19489  004614  6E17               	movwf	?i2___ftmul+2,c
 19490  004616  0012               	return	
 19491  004618                     i2l4429:
 19492  004618  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 19493  00461C  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 19494  00461E  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 19495  004620  3419               	rlcf	i2___ftmul@f2+1,w,c
 19496  004622  361B               	rlcf	??i2___ftmul& (0+255),f,c
 19497  004624  E301               	bnc	u439_41
 19498  004626  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 19499  004628                     u439_41:
 19500  004628  501B               	movf	??i2___ftmul,w,c
 19501  00462A  6E23               	movwf	i2___ftmul@sign,c
 19502  00462C  5023               	movf	i2___ftmul@sign,w,c
 19503  00462E  A4D8               	btfss	status,2,c
 19504  004630  D007               	goto	i2l4435
 19505  004632  0E00               	movlw	0
 19506  004634  6E15               	movwf	?i2___ftmul,c
 19507  004636  0E00               	movlw	0
 19508  004638  6E16               	movwf	?i2___ftmul+1,c
 19509  00463A  0E00               	movlw	0
 19510  00463C  6E17               	movwf	?i2___ftmul+2,c
 19511  00463E  0012               	return	
 19512  004640                     i2l4435:
 19513  004640  5023               	movf	i2___ftmul@sign,w,c
 19514  004642  0F7B               	addlw	123
 19515  004644  261E               	addwf	i2___ftmul@exp,f,c
 19516  004646  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 19517  00464A  501A               	movf	i2___ftmul@f2+2,w,c
 19518  00464C  1A23               	xorwf	i2___ftmul@sign,f,c
 19519  00464E  0E80               	movlw	128
 19520  004650  1623               	andwf	i2___ftmul@sign,f,c
 19521  004652  8E16               	bsf	i2___ftmul@f1+1,7,c
 19522  004654  8E19               	bsf	i2___ftmul@f2+1,7,c
 19523  004656  0EFF               	movlw	255
 19524  004658  1618               	andwf	i2___ftmul@f2,f,c
 19525  00465A  0EFF               	movlw	255
 19526  00465C  1619               	andwf	i2___ftmul@f2+1,f,c
 19527  00465E  0E00               	movlw	0
 19528  004660  161A               	andwf	i2___ftmul@f2+2,f,c
 19529  004662  0E00               	movlw	0
 19530  004664  6E1F               	movwf	i2___ftmul@f3_as_product,c
 19531  004666  0E00               	movlw	0
 19532  004668  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 19533  00466A  0E00               	movlw	0
 19534  00466C  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 19535  00466E  0E07               	movlw	7
 19536  004670  6E22               	movwf	i2___ftmul@cntr,c
 19537  004672                     i2l4449:
 19538  004672  A015               	btfss	i2___ftmul@f1,0,c
 19539  004674  D006               	goto	i2l4453
 19540  004676  5018               	movf	i2___ftmul@f2,w,c
 19541  004678  261F               	addwf	i2___ftmul@f3_as_product,f,c
 19542  00467A  5019               	movf	i2___ftmul@f2+1,w,c
 19543  00467C  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 19544  00467E  501A               	movf	i2___ftmul@f2+2,w,c
 19545  004680  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 19546  004682                     i2l4453:
 19547  004682  90D8               	bcf	status,0,c
 19548  004684  3217               	rrcf	i2___ftmul@f1+2,f,c
 19549  004686  3216               	rrcf	i2___ftmul@f1+1,f,c
 19550  004688  3215               	rrcf	i2___ftmul@f1,f,c
 19551  00468A  90D8               	bcf	status,0,c
 19552  00468C  3618               	rlcf	i2___ftmul@f2,f,c
 19553  00468E  3619               	rlcf	i2___ftmul@f2+1,f,c
 19554  004690  361A               	rlcf	i2___ftmul@f2+2,f,c
 19555  004692  2E22               	decfsz	i2___ftmul@cntr,f,c
 19556  004694  D7EE               	goto	i2l4449
 19557  004696  0E09               	movlw	9
 19558  004698  6E22               	movwf	i2___ftmul@cntr,c
 19559  00469A                     i2l4459:
 19560  00469A  A015               	btfss	i2___ftmul@f1,0,c
 19561  00469C  D006               	goto	i2l4463
 19562  00469E  5018               	movf	i2___ftmul@f2,w,c
 19563  0046A0  261F               	addwf	i2___ftmul@f3_as_product,f,c
 19564  0046A2  5019               	movf	i2___ftmul@f2+1,w,c
 19565  0046A4  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 19566  0046A6  501A               	movf	i2___ftmul@f2+2,w,c
 19567  0046A8  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 19568  0046AA                     i2l4463:
 19569  0046AA  90D8               	bcf	status,0,c
 19570  0046AC  3217               	rrcf	i2___ftmul@f1+2,f,c
 19571  0046AE  3216               	rrcf	i2___ftmul@f1+1,f,c
 19572  0046B0  3215               	rrcf	i2___ftmul@f1,f,c
 19573  0046B2  90D8               	bcf	status,0,c
 19574  0046B4  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 19575  0046B6  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 19576  0046B8  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 19577  0046BA  2E22               	decfsz	i2___ftmul@cntr,f,c
 19578  0046BC  D7EE               	goto	i2l4459
 19579  0046BE  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 19580  0046C2  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 19581  0046C6  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 19582  0046CA  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 19583  0046CE  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 19584  0046D2  EC15  F027         	call	i2___ftpack	;wreg free
 19585  0046D6  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 19586  0046DA  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 19587  0046DE  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 19588  0046E2  0012               	return	
 19589  0046E4                     __end_ofi2___ftmul:
 19590                           	opt stack 0
 19591                           pclatu	equ	0xFFB
 19592                           pclath	equ	0xFFA
 19593                           tblptru	equ	0xFF8
 19594                           tblptrh	equ	0xFF7
 19595                           tblptrl	equ	0xFF6
 19596                           tablat	equ	0xFF5
 19597                           prodh	equ	0xFF4
 19598                           prodl	equ	0xFF3
 19599                           intcon	equ	0xFF2
 19600                           intcon2	equ	0xFF1
 19601                           intcon3	equ	0xFF0
 19602                           postinc0	equ	0xFEE
 19603                           fsr0h	equ	0xFEA
 19604                           fsr0l	equ	0xFE9
 19605                           wreg	equ	0xFE8
 19606                           fsr1h	equ	0xFE2
 19607                           fsr1l	equ	0xFE1
 19608                           indf2	equ	0xFDF
 19609                           postinc2	equ	0xFDE
 19610                           postdec2	equ	0xFDD
 19611                           fsr2h	equ	0xFDA
 19612                           fsr2l	equ	0xFD9
 19613                           status	equ	0xFD8
 19614                           
 19615 ;; *************** function i2___ftadd *****************
 19616 ;; Defined at:
 19617 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 19618 ;; Parameters:    Size  Location     Type
 19619 ;;  f1              3   45[COMRAM] float 
 19620 ;;  f2              3   48[COMRAM] float 
 19621 ;; Auto vars:     Size  Location     Type
 19622 ;;  __ftadd         1   56[COMRAM] unsigned char 
 19623 ;;  __ftadd         1   55[COMRAM] unsigned char 
 19624 ;;  __ftadd         1   54[COMRAM] unsigned char 
 19625 ;; Return value:  Size  Location     Type
 19626 ;;                  3   45[COMRAM] float 
 19627 ;; Registers used:
 19628 ;;		wreg, status,2, status,0, cstack
 19629 ;; Tracked objects:
 19630 ;;		On entry : 0/0
 19631 ;;		On exit  : 0/0
 19632 ;;		Unchanged: 0/0
 19633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19634 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19635 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19637 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19638 ;;Total ram usage:       12 bytes
 19639 ;; Hardware stack levels used:    1
 19640 ;; Hardware stack levels required when called:    1
 19641 ;; This function calls:
 19642 ;;		i2___ftpack
 19643 ;; This function is called by:
 19644 ;;		_dec_to_hex
 19645 ;;		_floor
 19646 ;;		_log
 19647 ;;		_eval_poly
 19648 ;;		i2_printf
 19649 ;;		i2___ftsub
 19650 ;; This function uses a non-reentrant model
 19651 ;;
 19652                           
 19653                           	psect	text79
 19654  00323C                     __ptext79:
 19655                           	opt stack 0
 19656  00323C                     i2___ftadd:
 19657                           	opt stack 21
 19658                           
 19659                           ;incstack = 0
 19660  00323C  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 19661  003240  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 19662  003242  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 19663  003244  342F               	rlcf	i2___ftadd@f1+1,w,c
 19664  003246  3634               	rlcf	??i2___ftadd& (0+255),f,c
 19665  003248  E301               	bnc	u413_41
 19666  00324A  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 19667  00324C                     u413_41:
 19668  00324C  5034               	movf	??i2___ftadd,w,c
 19669  00324E  6E39               	movwf	i2___ftadd@exp1,c
 19670  003250  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 19671  003254  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 19672  003256  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 19673  003258  3432               	rlcf	i2___ftadd@f2+1,w,c
 19674  00325A  3634               	rlcf	??i2___ftadd& (0+255),f,c
 19675  00325C  E301               	bnc	u414_41
 19676  00325E  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 19677  003260                     u414_41:
 19678  003260  5034               	movf	??i2___ftadd,w,c
 19679  003262  6E38               	movwf	i2___ftadd@exp2,c
 19680  003264  5039               	movf	i2___ftadd@exp1,w,c
 19681  003266  B4D8               	btfsc	status,2,c
 19682  003268  D00B               	goto	i2l874
 19683  00326A  5038               	movf	i2___ftadd@exp2,w,c
 19684  00326C  5C39               	subwf	i2___ftadd@exp1,w,c
 19685  00326E  B0D8               	btfsc	status,0,c
 19686  003270  D00E               	goto	i2l4343
 19687  003272  5039               	movf	i2___ftadd@exp1,w,c
 19688  003274  0800               	sublw	0
 19689  003276  2438               	addwf	i2___ftadd@exp2,w,c
 19690  003278  6E34               	movwf	??i2___ftadd& (0+255),c
 19691  00327A  0E18               	movlw	24
 19692  00327C  6434               	cpfsgt	??i2___ftadd,c
 19693  00327E  D007               	goto	i2l4343
 19694  003280                     i2l874:
 19695  003280  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 19696  003284  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 19697  003288  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 19698  00328C  0012               	return	
 19699  00328E                     i2l4343:
 19700  00328E  5038               	movf	i2___ftadd@exp2,w,c
 19701  003290  B4D8               	btfsc	status,2,c
 19702  003292  D00B               	goto	i2l878
 19703  003294  5039               	movf	i2___ftadd@exp1,w,c
 19704  003296  5C38               	subwf	i2___ftadd@exp2,w,c
 19705  003298  B0D8               	btfsc	status,0,c
 19706  00329A  D00E               	goto	i2l4349
 19707  00329C  5038               	movf	i2___ftadd@exp2,w,c
 19708  00329E  0800               	sublw	0
 19709  0032A0  2439               	addwf	i2___ftadd@exp1,w,c
 19710  0032A2  6E34               	movwf	??i2___ftadd& (0+255),c
 19711  0032A4  0E18               	movlw	24
 19712  0032A6  6434               	cpfsgt	??i2___ftadd,c
 19713  0032A8  D007               	goto	i2l4349
 19714  0032AA                     i2l878:
 19715  0032AA  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 19716  0032AE  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 19717  0032B2  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 19718  0032B6  0012               	return	
 19719  0032B8                     i2l4349:
 19720  0032B8  0E06               	movlw	6
 19721  0032BA  6E37               	movwf	i2___ftadd@sign,c
 19722  0032BC  BE30               	btfsc	i2___ftadd@f1+2,7,c
 19723  0032BE  8E37               	bsf	i2___ftadd@sign,7,c
 19724  0032C0  BE33               	btfsc	i2___ftadd@f2+2,7,c
 19725  0032C2  8C37               	bsf	i2___ftadd@sign,6,c
 19726  0032C4  8E2F               	bsf	i2___ftadd@f1+1,7,c
 19727  0032C6  0EFF               	movlw	255
 19728  0032C8  162E               	andwf	i2___ftadd@f1,f,c
 19729  0032CA  0EFF               	movlw	255
 19730  0032CC  162F               	andwf	i2___ftadd@f1+1,f,c
 19731  0032CE  0E00               	movlw	0
 19732  0032D0  1630               	andwf	i2___ftadd@f1+2,f,c
 19733  0032D2  8E32               	bsf	i2___ftadd@f2+1,7,c
 19734  0032D4  0EFF               	movlw	255
 19735  0032D6  1631               	andwf	i2___ftadd@f2,f,c
 19736  0032D8  0EFF               	movlw	255
 19737  0032DA  1632               	andwf	i2___ftadd@f2+1,f,c
 19738  0032DC  0E00               	movlw	0
 19739  0032DE  1633               	andwf	i2___ftadd@f2+2,f,c
 19740  0032E0  5038               	movf	i2___ftadd@exp2,w,c
 19741  0032E2  5C39               	subwf	i2___ftadd@exp1,w,c
 19742  0032E4  B0D8               	btfsc	status,0,c
 19743  0032E6  D01B               	goto	i2l4375
 19744  0032E8                     i2l4365:
 19745  0032E8  90D8               	bcf	status,0,c
 19746  0032EA  3631               	rlcf	i2___ftadd@f2,f,c
 19747  0032EC  3632               	rlcf	i2___ftadd@f2+1,f,c
 19748  0032EE  3633               	rlcf	i2___ftadd@f2+2,f,c
 19749  0032F0  0638               	decf	i2___ftadd@exp2,f,c
 19750  0032F2  5039               	movf	i2___ftadd@exp1,w,c
 19751  0032F4  1838               	xorwf	i2___ftadd@exp2,w,c
 19752  0032F6  B4D8               	btfsc	status,2,c
 19753  0032F8  D00D               	goto	i2l4373
 19754  0032FA  0637               	decf	i2___ftadd@sign,f,c
 19755  0032FC  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 19756  003300  0E07               	movlw	7
 19757  003302  1634               	andwf	??i2___ftadd,f,c
 19758  003304  B4D8               	btfsc	status,2,c
 19759  003306  D006               	goto	i2l4373
 19760  003308  D7EF               	goto	i2l4365
 19761  00330A                     i2l4371:
 19762  00330A  90D8               	bcf	status,0,c
 19763  00330C  3230               	rrcf	i2___ftadd@f1+2,f,c
 19764  00330E  322F               	rrcf	i2___ftadd@f1+1,f,c
 19765  003310  322E               	rrcf	i2___ftadd@f1,f,c
 19766  003312  2A39               	incf	i2___ftadd@exp1,f,c
 19767  003314                     i2l4373:
 19768  003314  5038               	movf	i2___ftadd@exp2,w,c
 19769  003316  1839               	xorwf	i2___ftadd@exp1,w,c
 19770  003318  B4D8               	btfsc	status,2,c
 19771  00331A  D01F               	goto	i2l889
 19772  00331C  D7F6               	goto	i2l4371
 19773  00331E                     i2l4375:
 19774  00331E  5039               	movf	i2___ftadd@exp1,w,c
 19775  003320  5C38               	subwf	i2___ftadd@exp2,w,c
 19776  003322  B0D8               	btfsc	status,0,c
 19777  003324  D01A               	goto	i2l889
 19778  003326                     i2l4377:
 19779  003326  90D8               	bcf	status,0,c
 19780  003328  362E               	rlcf	i2___ftadd@f1,f,c
 19781  00332A  362F               	rlcf	i2___ftadd@f1+1,f,c
 19782  00332C  3630               	rlcf	i2___ftadd@f1+2,f,c
 19783  00332E  0639               	decf	i2___ftadd@exp1,f,c
 19784  003330  5039               	movf	i2___ftadd@exp1,w,c
 19785  003332  1838               	xorwf	i2___ftadd@exp2,w,c
 19786  003334  B4D8               	btfsc	status,2,c
 19787  003336  D00D               	goto	i2l4385
 19788  003338  0637               	decf	i2___ftadd@sign,f,c
 19789  00333A  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 19790  00333E  0E07               	movlw	7
 19791  003340  1634               	andwf	??i2___ftadd,f,c
 19792  003342  B4D8               	btfsc	status,2,c
 19793  003344  D006               	goto	i2l4385
 19794  003346  D7EF               	goto	i2l4377
 19795  003348                     i2l4383:
 19796  003348  90D8               	bcf	status,0,c
 19797  00334A  3233               	rrcf	i2___ftadd@f2+2,f,c
 19798  00334C  3232               	rrcf	i2___ftadd@f2+1,f,c
 19799  00334E  3231               	rrcf	i2___ftadd@f2,f,c
 19800  003350  2A38               	incf	i2___ftadd@exp2,f,c
 19801  003352                     i2l4385:
 19802  003352  5038               	movf	i2___ftadd@exp2,w,c
 19803  003354  1839               	xorwf	i2___ftadd@exp1,w,c
 19804  003356  A4D8               	btfss	status,2,c
 19805  003358  D7F7               	goto	i2l4383
 19806  00335A                     i2l889:
 19807  00335A  AE37               	btfss	i2___ftadd@sign,7,c
 19808  00335C  D00C               	goto	i2l898
 19809  00335E  0EFF               	movlw	255
 19810  003360  1A2E               	xorwf	i2___ftadd@f1,f,c
 19811  003362  0EFF               	movlw	255
 19812  003364  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 19813  003366  0EFF               	movlw	255
 19814  003368  1A30               	xorwf	i2___ftadd@f1+2,f,c
 19815  00336A  0E01               	movlw	1
 19816  00336C  262E               	addwf	i2___ftadd@f1,f,c
 19817  00336E  0E00               	movlw	0
 19818  003370  222F               	addwfc	i2___ftadd@f1+1,f,c
 19819  003372  0E00               	movlw	0
 19820  003374  2230               	addwfc	i2___ftadd@f1+2,f,c
 19821  003376                     i2l898:
 19822  003376  AC37               	btfss	i2___ftadd@sign,6,c
 19823  003378  D00C               	goto	i2l4391
 19824  00337A  0EFF               	movlw	255
 19825  00337C  1A31               	xorwf	i2___ftadd@f2,f,c
 19826  00337E  0EFF               	movlw	255
 19827  003380  1A32               	xorwf	i2___ftadd@f2+1,f,c
 19828  003382  0EFF               	movlw	255
 19829  003384  1A33               	xorwf	i2___ftadd@f2+2,f,c
 19830  003386  0E01               	movlw	1
 19831  003388  2631               	addwf	i2___ftadd@f2,f,c
 19832  00338A  0E00               	movlw	0
 19833  00338C  2232               	addwfc	i2___ftadd@f2+1,f,c
 19834  00338E  0E00               	movlw	0
 19835  003390  2233               	addwfc	i2___ftadd@f2+2,f,c
 19836  003392                     i2l4391:
 19837  003392  0E00               	movlw	0
 19838  003394  6E37               	movwf	i2___ftadd@sign,c
 19839  003396  502E               	movf	i2___ftadd@f1,w,c
 19840  003398  2631               	addwf	i2___ftadd@f2,f,c
 19841  00339A  502F               	movf	i2___ftadd@f1+1,w,c
 19842  00339C  2232               	addwfc	i2___ftadd@f2+1,f,c
 19843  00339E  5030               	movf	i2___ftadd@f1+2,w,c
 19844  0033A0  2233               	addwfc	i2___ftadd@f2+2,f,c
 19845  0033A2  AE33               	btfss	i2___ftadd@f2+2,7,c
 19846  0033A4  D00E               	goto	i2l4401
 19847  0033A6  0EFF               	movlw	255
 19848  0033A8  1A31               	xorwf	i2___ftadd@f2,f,c
 19849  0033AA  0EFF               	movlw	255
 19850  0033AC  1A32               	xorwf	i2___ftadd@f2+1,f,c
 19851  0033AE  0EFF               	movlw	255
 19852  0033B0  1A33               	xorwf	i2___ftadd@f2+2,f,c
 19853  0033B2  0E01               	movlw	1
 19854  0033B4  2631               	addwf	i2___ftadd@f2,f,c
 19855  0033B6  0E00               	movlw	0
 19856  0033B8  2232               	addwfc	i2___ftadd@f2+1,f,c
 19857  0033BA  0E00               	movlw	0
 19858  0033BC  2233               	addwfc	i2___ftadd@f2+2,f,c
 19859  0033BE  0E01               	movlw	1
 19860  0033C0  6E37               	movwf	i2___ftadd@sign,c
 19861  0033C2                     i2l4401:
 19862  0033C2  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 19863  0033C6  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 19864  0033CA  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 19865  0033CE  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 19866  0033D2  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 19867  0033D6  EC15  F027         	call	i2___ftpack	;wreg free
 19868  0033DA  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 19869  0033DE  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 19870  0033E2  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 19871  0033E6  0012               	return	
 19872  0033E8                     __end_ofi2___ftadd:
 19873                           	opt stack 0
 19874                           pclatu	equ	0xFFB
 19875                           pclath	equ	0xFFA
 19876                           tblptru	equ	0xFF8
 19877                           tblptrh	equ	0xFF7
 19878                           tblptrl	equ	0xFF6
 19879                           tablat	equ	0xFF5
 19880                           prodh	equ	0xFF4
 19881                           prodl	equ	0xFF3
 19882                           intcon	equ	0xFF2
 19883                           intcon2	equ	0xFF1
 19884                           intcon3	equ	0xFF0
 19885                           postinc0	equ	0xFEE
 19886                           fsr0h	equ	0xFEA
 19887                           fsr0l	equ	0xFE9
 19888                           wreg	equ	0xFE8
 19889                           fsr1h	equ	0xFE2
 19890                           fsr1l	equ	0xFE1
 19891                           indf2	equ	0xFDF
 19892                           postinc2	equ	0xFDE
 19893                           postdec2	equ	0xFDD
 19894                           fsr2h	equ	0xFDA
 19895                           fsr2l	equ	0xFD9
 19896                           status	equ	0xFD8
 19897                           
 19898 ;; *************** function ___awtoft *****************
 19899 ;; Defined at:
 19900 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 19901 ;; Parameters:    Size  Location     Type
 19902 ;;  c               2    8[COMRAM] int 
 19903 ;; Auto vars:     Size  Location     Type
 19904 ;;  sign            1   11[COMRAM] unsigned char 
 19905 ;; Return value:  Size  Location     Type
 19906 ;;                  3    8[COMRAM] float 
 19907 ;; Registers used:
 19908 ;;		wreg, status,2, status,0, cstack
 19909 ;; Tracked objects:
 19910 ;;		On entry : 0/0
 19911 ;;		On exit  : 0/0
 19912 ;;		Unchanged: 0/0
 19913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19914 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19917 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19918 ;;Total ram usage:        4 bytes
 19919 ;; Hardware stack levels used:    1
 19920 ;; Hardware stack levels required when called:    1
 19921 ;; This function calls:
 19922 ;;		i2___ftpack
 19923 ;; This function is called by:
 19924 ;;		_dec_to_hex
 19925 ;;		_exp
 19926 ;;		_log
 19927 ;; This function uses a non-reentrant model
 19928 ;;
 19929                           
 19930                           	psect	text80
 19931  005734                     __ptext80:
 19932                           	opt stack 0
 19933  005734                     ___awtoft:
 19934                           	opt stack 20
 19935                           
 19936                           ;incstack = 0
 19937  005734  0E00               	movlw	0
 19938  005736  6E0C               	movwf	___awtoft@sign,c
 19939  005738  AE0A               	btfss	___awtoft@c+1,7,c
 19940  00573A  D006               	goto	i2l4751
 19941  00573C  6C09               	negf	___awtoft@c,c
 19942  00573E  1E0A               	comf	___awtoft@c+1,f,c
 19943  005740  B0D8               	btfsc	status,0,c
 19944  005742  2A0A               	incf	___awtoft@c+1,f,c
 19945  005744  0E01               	movlw	1
 19946  005746  6E0C               	movwf	___awtoft@sign,c
 19947  005748                     i2l4751:
 19948  005748  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 19949  00574C  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 19950  005750  6A03               	clrf	i2___ftpack@arg+2,c
 19951  005752  0E8E               	movlw	142
 19952  005754  6E04               	movwf	i2___ftpack@exp,c
 19953  005756  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 19954  00575A  EC15  F027         	call	i2___ftpack	;wreg free
 19955  00575E  C001  F009         	movff	?i2___ftpack,?___awtoft
 19956  005762  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 19957  005766  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 19958  00576A  0012               	return	
 19959  00576C                     __end_of___awtoft:
 19960                           	opt stack 0
 19961                           pclatu	equ	0xFFB
 19962                           pclath	equ	0xFFA
 19963                           tblptru	equ	0xFF8
 19964                           tblptrh	equ	0xFF7
 19965                           tblptrl	equ	0xFF6
 19966                           tablat	equ	0xFF5
 19967                           prodh	equ	0xFF4
 19968                           prodl	equ	0xFF3
 19969                           intcon	equ	0xFF2
 19970                           intcon2	equ	0xFF1
 19971                           intcon3	equ	0xFF0
 19972                           postinc0	equ	0xFEE
 19973                           fsr0h	equ	0xFEA
 19974                           fsr0l	equ	0xFE9
 19975                           wreg	equ	0xFE8
 19976                           fsr1h	equ	0xFE2
 19977                           fsr1l	equ	0xFE1
 19978                           indf2	equ	0xFDF
 19979                           postinc2	equ	0xFDE
 19980                           postdec2	equ	0xFDD
 19981                           fsr2h	equ	0xFDA
 19982                           fsr2l	equ	0xFD9
 19983                           status	equ	0xFD8
 19984                           
 19985 ;; *************** function i2___ftpack *****************
 19986 ;; Defined at:
 19987 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 19988 ;; Parameters:    Size  Location     Type
 19989 ;;  arg             3    0[COMRAM] unsigned um
 19990 ;;  exp             1    3[COMRAM] unsigned char 
 19991 ;;  sign            1    4[COMRAM] unsigned char 
 19992 ;; Auto vars:     Size  Location     Type
 19993 ;;		None
 19994 ;; Return value:  Size  Location     Type
 19995 ;;                  3    0[COMRAM] float 
 19996 ;; Registers used:
 19997 ;;		wreg, status,2, status,0
 19998 ;; Tracked objects:
 19999 ;;		On entry : 0/0
 20000 ;;		On exit  : 0/0
 20001 ;;		Unchanged: 0/0
 20002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20003 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20005 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20006 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20007 ;;Total ram usage:        8 bytes
 20008 ;; Hardware stack levels used:    1
 20009 ;; This function calls:
 20010 ;;		Nothing
 20011 ;; This function is called by:
 20012 ;;		___altoft
 20013 ;;		___awtoft
 20014 ;;		i2___ftadd
 20015 ;;		i2___ftdiv
 20016 ;;		i2___ftmul
 20017 ;;		i2___lltoft
 20018 ;; This function uses a non-reentrant model
 20019 ;;
 20020                           
 20021                           	psect	text81
 20022  004E2A                     __ptext81:
 20023                           	opt stack 0
 20024  004E2A                     i2___ftpack:
 20025                           	opt stack 21
 20026                           
 20027                           ;incstack = 0
 20028  004E2A  5004               	movf	i2___ftpack@exp,w,c
 20029  004E2C  B4D8               	btfsc	status,2,c
 20030  004E2E  D005               	goto	i2l4225
 20031  004E30  5001               	movf	i2___ftpack@arg,w,c
 20032  004E32  1002               	iorwf	i2___ftpack@arg+1,w,c
 20033  004E34  1003               	iorwf	i2___ftpack@arg+2,w,c
 20034  004E36  A4D8               	btfss	status,2,c
 20035  004E38  D00C               	goto	i2l4231
 20036  004E3A                     i2l4225:
 20037  004E3A  0E00               	movlw	0
 20038  004E3C  6E01               	movwf	?i2___ftpack,c
 20039  004E3E  0E00               	movlw	0
 20040  004E40  6E02               	movwf	?i2___ftpack+1,c
 20041  004E42  0E00               	movlw	0
 20042  004E44  6E03               	movwf	?i2___ftpack+2,c
 20043  004E46  0012               	return	
 20044  004E48                     i2l4229:
 20045  004E48  2A04               	incf	i2___ftpack@exp,f,c
 20046  004E4A  90D8               	bcf	status,0,c
 20047  004E4C  3203               	rrcf	i2___ftpack@arg+2,f,c
 20048  004E4E  3202               	rrcf	i2___ftpack@arg+1,f,c
 20049  004E50  3201               	rrcf	i2___ftpack@arg,f,c
 20050  004E52                     i2l4231:
 20051  004E52  0E00               	movlw	0
 20052  004E54  1401               	andwf	i2___ftpack@arg,w,c
 20053  004E56  6E06               	movwf	??i2___ftpack& (0+255),c
 20054  004E58  0E00               	movlw	0
 20055  004E5A  1402               	andwf	i2___ftpack@arg+1,w,c
 20056  004E5C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 20057  004E5E  0EFE               	movlw	254
 20058  004E60  1403               	andwf	i2___ftpack@arg+2,w,c
 20059  004E62  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 20060  004E64  5006               	movf	??i2___ftpack,w,c
 20061  004E66  1007               	iorwf	??i2___ftpack+1,w,c
 20062  004E68  1008               	iorwf	??i2___ftpack+2,w,c
 20063  004E6A  B4D8               	btfsc	status,2,c
 20064  004E6C  D00C               	goto	i2l4237
 20065  004E6E  D7EC               	goto	i2l4229
 20066  004E70                     i2l4233:
 20067  004E70  2A04               	incf	i2___ftpack@exp,f,c
 20068  004E72  0E01               	movlw	1
 20069  004E74  2601               	addwf	i2___ftpack@arg,f,c
 20070  004E76  0E00               	movlw	0
 20071  004E78  2202               	addwfc	i2___ftpack@arg+1,f,c
 20072  004E7A  0E00               	movlw	0
 20073  004E7C  2203               	addwfc	i2___ftpack@arg+2,f,c
 20074  004E7E  90D8               	bcf	status,0,c
 20075  004E80  3203               	rrcf	i2___ftpack@arg+2,f,c
 20076  004E82  3202               	rrcf	i2___ftpack@arg+1,f,c
 20077  004E84  3201               	rrcf	i2___ftpack@arg,f,c
 20078  004E86                     i2l4237:
 20079  004E86  0E00               	movlw	0
 20080  004E88  1401               	andwf	i2___ftpack@arg,w,c
 20081  004E8A  6E06               	movwf	??i2___ftpack& (0+255),c
 20082  004E8C  0E00               	movlw	0
 20083  004E8E  1402               	andwf	i2___ftpack@arg+1,w,c
 20084  004E90  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 20085  004E92  0EFF               	movlw	255
 20086  004E94  1403               	andwf	i2___ftpack@arg+2,w,c
 20087  004E96  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 20088  004E98  5006               	movf	??i2___ftpack,w,c
 20089  004E9A  1007               	iorwf	??i2___ftpack+1,w,c
 20090  004E9C  1008               	iorwf	??i2___ftpack+2,w,c
 20091  004E9E  B4D8               	btfsc	status,2,c
 20092  004EA0  D006               	goto	i2l4241
 20093  004EA2  D7E6               	goto	i2l4233
 20094  004EA4                     i2l4239:
 20095  004EA4  0604               	decf	i2___ftpack@exp,f,c
 20096  004EA6  90D8               	bcf	status,0,c
 20097  004EA8  3601               	rlcf	i2___ftpack@arg,f,c
 20098  004EAA  3602               	rlcf	i2___ftpack@arg+1,f,c
 20099  004EAC  3603               	rlcf	i2___ftpack@arg+2,f,c
 20100  004EAE                     i2l4241:
 20101  004EAE  BE02               	btfsc	i2___ftpack@arg+1,7,c
 20102  004EB0  D003               	goto	i2l851
 20103  004EB2  0E02               	movlw	2
 20104  004EB4  6004               	cpfslt	i2___ftpack@exp,c
 20105  004EB6  D7F6               	goto	i2l4239
 20106  004EB8                     i2l851:
 20107  004EB8  A004               	btfss	i2___ftpack@exp,0,c
 20108  004EBA  9E02               	bcf	i2___ftpack@arg+1,7,c
 20109  004EBC  90D8               	bcf	status,0,c
 20110  004EBE  3204               	rrcf	i2___ftpack@exp,f,c
 20111  004EC0  5004               	movf	i2___ftpack@exp,w,c
 20112  004EC2  1203               	iorwf	i2___ftpack@arg+2,f,c
 20113  004EC4  5005               	movf	i2___ftpack@sign,w,c
 20114  004EC6  A4D8               	btfss	status,2,c
 20115  004EC8  8E03               	bsf	i2___ftpack@arg+2,7,c
 20116  004ECA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 20117  004ECE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 20118  004ED2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 20119  004ED6  0012               	return	
 20120  004ED8                     __end_ofi2___ftpack:
 20121                           	opt stack 0
 20122                           pclatu	equ	0xFFB
 20123                           pclath	equ	0xFFA
 20124                           tblptru	equ	0xFF8
 20125                           tblptrh	equ	0xFF7
 20126                           tblptrl	equ	0xFF6
 20127                           tablat	equ	0xFF5
 20128                           prodh	equ	0xFF4
 20129                           prodl	equ	0xFF3
 20130                           intcon	equ	0xFF2
 20131                           intcon2	equ	0xFF1
 20132                           intcon3	equ	0xFF0
 20133                           postinc0	equ	0xFEE
 20134                           fsr0h	equ	0xFEA
 20135                           fsr0l	equ	0xFE9
 20136                           wreg	equ	0xFE8
 20137                           fsr1h	equ	0xFE2
 20138                           fsr1l	equ	0xFE1
 20139                           indf2	equ	0xFDF
 20140                           postinc2	equ	0xFDE
 20141                           postdec2	equ	0xFDD
 20142                           fsr2h	equ	0xFDA
 20143                           fsr2l	equ	0xFD9
 20144                           status	equ	0xFD8
 20145                           pclatu	equ	0xFFB
 20146                           pclath	equ	0xFFA
 20147                           tblptru	equ	0xFF8
 20148                           tblptrh	equ	0xFF7
 20149                           tblptrl	equ	0xFF6
 20150                           tablat	equ	0xFF5
 20151                           prodh	equ	0xFF4
 20152                           prodl	equ	0xFF3
 20153                           intcon	equ	0xFF2
 20154                           intcon2	equ	0xFF1
 20155                           intcon3	equ	0xFF0
 20156                           postinc0	equ	0xFEE
 20157                           fsr0h	equ	0xFEA
 20158                           fsr0l	equ	0xFE9
 20159                           wreg	equ	0xFE8
 20160                           fsr1h	equ	0xFE2
 20161                           fsr1l	equ	0xFE1
 20162                           indf2	equ	0xFDF
 20163                           postinc2	equ	0xFDE
 20164                           postdec2	equ	0xFDD
 20165                           fsr2h	equ	0xFDA
 20166                           fsr2l	equ	0xFD9
 20167                           status	equ	0xFD8
 20168                           
 20169                           	psect	rparam
 20170  0000                     pclatu	equ	0xFFB
 20171                           pclath	equ	0xFFA
 20172                           tblptru	equ	0xFF8
 20173                           tblptrh	equ	0xFF7
 20174                           tblptrl	equ	0xFF6
 20175                           tablat	equ	0xFF5
 20176                           prodh	equ	0xFF4
 20177                           prodl	equ	0xFF3
 20178                           intcon	equ	0xFF2
 20179                           intcon2	equ	0xFF1
 20180                           intcon3	equ	0xFF0
 20181                           postinc0	equ	0xFEE
 20182                           fsr0h	equ	0xFEA
 20183                           fsr0l	equ	0xFE9
 20184                           wreg	equ	0xFE8
 20185                           fsr1h	equ	0xFE2
 20186                           fsr1l	equ	0xFE1
 20187                           indf2	equ	0xFDF
 20188                           postinc2	equ	0xFDE
 20189                           postdec2	equ	0xFDD
 20190                           fsr2h	equ	0xFDA
 20191                           fsr2l	equ	0xFD9
 20192                           status	equ	0xFD8
 20193                           
 20194                           	psect	temp
 20195  00007F                     btemp:
 20196                           	opt stack 0
 20197  00007F                     	ds	1
 20198  0000                     int$flags	set	btemp
 20199                           pclatu	equ	0xFFB
 20200                           pclath	equ	0xFFA
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           intcon2	equ	0xFF1
 20209                           intcon3	equ	0xFF0
 20210                           postinc0	equ	0xFEE
 20211                           fsr0h	equ	0xFEA
 20212                           fsr0l	equ	0xFE9
 20213                           wreg	equ	0xFE8
 20214                           fsr1h	equ	0xFE2
 20215                           fsr1l	equ	0xFE1
 20216                           indf2	equ	0xFDF
 20217                           postinc2	equ	0xFDE
 20218                           postdec2	equ	0xFDD
 20219                           fsr2h	equ	0xFDA
 20220                           fsr2l	equ	0xFD9
 20221                           status	equ	0xFD8


Data Sizes:
    Strings     355
    Constant    231
    Data        2
    BSS         102
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    121     126
    BANK0           128     66      98
    BANK1           256     70     137
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[3]), STR_18(CODE[18]), 
		 -> STR_17(CODE[23]), STR_16(CODE[16]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[23]), STR_8(CODE[23]), STR_7(CODE[9]), STR_6(CODE[18]), 
		 -> STR_5(CODE[13]), STR_4(CODE[3]), STR_3(CODE[24]), STR_2(CODE[24]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___fttol
    i2_scale->i2___ftmul
    i2_putch->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___llmod->i2___lldiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    i2___awdiv->i2___awmod
    _pow->_exp
    i2___lltoft->i2___ftpack
    _log->_eval_poly
    _exp->_floor
    i2___ftsub->i2___ftadd
    i2___ftdiv->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    i2___fttol->i2___ftadd
    ___altoft->i2___fttol
    _eval_poly->i2___ftadd
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___ftadd->i2_fround
    ___awtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_date_time
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _initLCD->_lcdInst
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->___ftmul
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftge->___ftdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    _isr->_dec_to_hex

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  447576
                                             68 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0   63070
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0   61353
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            0     0      0   71257
                            ___ftdiv
                             ___ftge
                           ___lwtoft
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                     2     2      0    1717
                                             33 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2773
                                             38 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3822
                                             38 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             33 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0   61353
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0   63169
                                             65 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             31 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0   61353
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0   63326
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              46    38      8   61218
                                             28 BANK1     40    32      8
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13909
                                              0 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             32 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             30 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13630
                                              0 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3360
                                             44 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5810
                                             50 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1973
                                             30 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2069
                                             36 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             30 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                             30 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2655
                                             38 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             43 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     770
                                              7 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4949
                                             22 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4501
                                             10 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2434
                                             30 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1592
                                             53 BANK0      9     3      6
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             32 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             30 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     888
                                             43 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                             30 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1672
                                             33 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1672
                                             31 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             30 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 25    25      0   69650
                                            118 COMRAM     3     3      0
                                             14 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (7) i2_read_colorsensor                                   2     2      0     171
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            44    38      6   25437
                                             72 COMRAM    38    32      6
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (8) i2_scale                                             13    10      3    5543
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2_fround                                            16    13      3    5345
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (8) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _read_time                                            1     1      0     239
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     126
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _dec_to_hex                                          16    14      2   41901
                                            116 COMRAM     2     0      2
                                              0 BANK0     14    14      0
                           ___awtoft
                                _pow
                          i2___awdiv
                          i2___ftadd
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     872
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) _pow                                                 17    11      6   34776
                                             99 COMRAM    17    11      6
                                _exp
                                _log
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___fttol
                         i2___lltoft
 ---------------------------------------------------------------------------------
 (8) i2___lltoft                                           9     5      4     820
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _log                                                  5     2      3   11721
                                             69 COMRAM     5     2      3
                           ___awtoft
                          _eval_poly
                              _frexp
                          i2___ftadd
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) _exp                                                  9     6      3   18600
                                             90 COMRAM     9     6      3
                           ___awtoft
                          _eval_poly
                              _floor
                              _ldexp
                          i2___ftdiv
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
 ---------------------------------------------------------------------------------
 (8) i2___ftsub                                            6     0      6    2074
                                             57 COMRAM     6     0      6
                           ___awtoft (ARG)
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftneg                                            3     0      3     149
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftdiv                                          15     9      6    1031
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) _ldexp                                               7     2      5     376
                                             69 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (10) _floor                                               8     5      3    4533
                                             82 COMRAM     8     5      3
                           ___altoft
                              _frexp
                          i2___ftadd
                           i2___ftge
                          i2___fttol
 ---------------------------------------------------------------------------------
 (8) i2___fttol                                           15    11      4     434
                                             57 COMRAM    15    11      4
                           ___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     500
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _frexp                                               7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4     901
                                             72 COMRAM    10     6      4
                         i2___ftpack
                          i2___fttol (ARG)
 ---------------------------------------------------------------------------------
 (10) _eval_poly                                          12     5      7    5883
                                             57 COMRAM    12     5      7
                          i2___ftadd
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4    1353
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6    2065
                                             20 COMRAM    15     9      6
                           ___awtoft (ARG)
                              _frexp (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1903
                                             45 COMRAM    12     6      6
                           ___awtoft (ARG)
                              _frexp (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3    1110
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___ftdiv
       ___ftpack
     ___ftge
       ___ftdiv (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awtoft
       i2___ftpack
     _pow
       _exp
         ___awtoft
           i2___ftpack
         _eval_poly
           i2___ftadd
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         _floor
           ___altoft
             i2___ftpack
             i2___fttol (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftadd (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___ftmul (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                 i2_fround (ARG)
                   i2___awdiv
                     i2___awmod (ARG)
                   i2___awmod
                   i2___ftmul
                     ___awtoft (ARG)
                       i2___ftpack
                     _frexp (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                     i2___ftpack (ARG)
                     i2___wmul (ARG)
                       i2___awdiv (ARG)
                         i2___awmod (ARG)
                       i2___awmod (ARG)
                   i2___wmul
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
               i2___ftmul (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
           _frexp
           i2___ftadd
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
           i2___fttol
             ___awtoft (ARG)
               i2___ftpack
             i2___ftadd (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___ftmul (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
         _ldexp
           _eval_poly (ARG)
             i2___ftadd
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___ftmul (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftdiv
           i2___ftpack
         i2___ftge
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           ___awtoft (ARG)
             i2___ftpack
           i2___ftadd (ARG)
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           ___awtoft (ARG)
             i2___ftpack
           i2___ftadd (ARG)
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       _log
         ___awtoft
           i2___ftpack
         _eval_poly
           i2___ftadd
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         _frexp
         i2___ftadd
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___fttol
         ___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft
         i2___ftpack
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       ___awtoft (ARG)
         i2___ftpack
       _frexp (ARG)
       i2___ftmul (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftmul
       ___awtoft (ARG)
         i2___ftpack
       _frexp (ARG)
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___fttol
       ___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
     i2___awdiv (ARG)
       i2___awmod (ARG)
     i2___awmod (ARG)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       ___awtoft (ARG)
         i2___ftpack
       _frexp (ARG)
       i2___ftmul (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       ___awtoft (ARG)
         i2___ftpack
       _frexp (ARG)
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       ___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       ___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     46      89       7       53.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      62       5       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     79      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     169      34        0.0%
DATA                 0      0     169       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 11 00:31:13 2017

               ___altoft@exp 0051                            _b 0165                            _i 007A  
                          _j 007C                            _r 00D2           i2_I2C_Master_Start 59DC  
         i2_I2C_Master_Write 59BA                ___altoft@sign 0052                           l34 5952  
             ?_emergencystop 0001                 ___awdiv@sign 00A9          ___wmul@multiplicand 00AE  
                __CFG_BORV$3 000000                   i2___ftpack 4E2A                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                 ___ftadd@exp1 0115                 ___ftadd@exp2 0114  
                 i2___lltoft 552C                 ___ftadd@sign 0113                          l404 20B0  
                        l436 591A                          l564 06D2                          l851 40C2  
                        l819 36FC                          l923 3574                          l916 34B0  
                        l917 34F4                          l909 3AF8                          l880 2AC0  
                        l874 2A5E                          l948 57FA                          l878 2A98  
                        l889 2B96                          l898 2BC0                          _GIE 007F97  
                        l998 4E18                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28                          _PSA 007EAB  
        ?i2_I2C_Master_Start 0001                          _b_p 0168          ?i2_I2C_Master_Write 0002  
                        _exp 2EA4                          _log 3ECC                          _r_p 00D5  
                        _isr 0008                          _pow 370E                 ___awmod@sign 00A3  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 0001  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 00AF                 ___ftdiv@sign 00B4  
               __CFG_WDT$OFF 000000                         l1008 5002                         l5023 352A  
                       l5113 4BA2                         l5201 4FA6                         l5033 355A  
                       l5203 4FAC                         l5043 35AC                         l5035 356A  
                       l5027 353E                         l5109 4B62                         l5119 4BE6  
                       l5207 4FF0                         l5071 367A                         l5063 3626  
                       l5049 35D2                         l5083 36B2                         l5181 4DAC  
                       l7021 4026                         l7101 2B7C                         l5093 36E2  
                       l5191 4E06                         l5183 4DB2                         l7031 40B4  
                       l7023 4056                         l7015 4004                         l7103 2B8A  
                       l5095 36F2                         l5087 36C6                         l8001 3168  
                       l5179 4D9C                         l7043 40E8                         l7027 4076  
                       l7019 4018                         l7211 4D64                         l7203 4D42  
                       l8003 316E                         l7037 40CC                         l7029 40A6  
                       l7109 2BEA                         l7061 2A6C                         l7301 199C  
                       l8021 31EC                         l8013 31AC                         l7119 2C38  
                       l5199 4F96                         l7207 4D50                         l7231 4F18  
                       l7223 4EF4                         l7135 38F8                         l7073 2AB6  
                       l7233 4F24                         l7153 3964                         l7129 38BE  
                       l7401 0100                         l8017 31CC                         l8009 318C  
                       l7091 2B34                         l7083 2AF8                         l7067 2AA6  
                       l7315 5648                         l7235 4F2A                         l7243 4F5C  
                       l7227 4F04                         l7163 39A2                         l7307 1A62  
                       l7403 0106                         l7411 0154                         l8027 320C  
                       ?_exp 005B                         l7093 2B42                         l7325 3B68  
                       l7149 3946                         l7261 28CA                         l7501 0532  
                       l7405 010C                         ?_log 0046                         l7095 2B4E  
                       l7343 3BFA                         l7191 4D00                         l7247 4F70  
                       l7239 4F4E                         l7159 3984                         l7511 0588  
                       l7089 2B26                         l7361 3C60                         l7353 3C2A  
                       l7193 4D0C                         l7185 4CE2                         l7601 0934  
                       l7521 05BA                         l7505 055A                         l7441 0260  
                       l7425 01AE                         l7409 0114                         l7355 3C3A  
                       l7347 3C0E                         l7195 4D12                         l7179 4CCC  
                       l7283 174C                         l7523 05CE                         l7515 0596  
                       ?_isr 0001                         l7357 3C44                         l7269 29AE  
                       l7293 1838                         l7541 06B4                         l7517 05AC  
                       l7533 0684                         l7453 02FE                         l7381 0038  
                       l7701 3AB6                         l7367 5242                         l7623 09C6  
                       l7615 097A                         l7551 06FA                         l7535 0692  
                       l7527 05F6                         l7455 0314                         l7383 004E  
                       l7369 5252                         l4993 345C                         l4977 5880  
                       l7289 1812                         l7641 0A50                         l7617 0992  
                       l7561 0828                         l7545 06D6                         l7465 03A4  
                       l7457 0344                         l7449 02D0                         l7393 0088  
                       l7377 0022                         l4987 3422                         l7643 0A5C  
                       l7651 0A9C                         l7635 0A34                         l7627 09FE  
                       l7563 0836                         l7555 074C                         l7539 06A0  
                       l7483 0496                         l7459 035A                         l7387 0058  
                       l4899 582E                         l7811 225C                         l7653 0AAC  
                       l7661 0BA6                         l7629 0A08                         l7581 08B8  
                       l7485 049C                         l7469 03D2                         l7901 42B6  
                       l7655 0B30                         l7663 0BBE                         l7647 0A76  
                       l7567 0844                         l7479 0430                         l7815 2274  
                       l7807 224C                         l7665 0BC6                         l7585 08E2  
                       l7497 04E2                         l7569 0852                         l7681 3A56  
                       l7825 22A2                         l7753 1F62                         l7587 08E8  
                       l7667 0BDC                         l7907 42CE                         l7675 3A1C  
                       l7819 2284                         l7843 2324                         l7845 233A  
                       l7829 22B2                         l7773 209C                         l7757 1F82  
                       l7599 092E                         l7863 49BA                         l7775 20BA  
                       l7759 1F8C                         l7791 21E0                         l7873 49E4  
                       l7785 217C                         l7849 2356                         l7769 204E  
                       l7883 4204                         l7867 49C4                         l7789 21CA  
                       ?_pow 0064                         l7895 4278                         l7889 423A  
                       l7997 3148        __size_ofi2__div_to_l_ 0128           i2_read_colorsensor 48A8  
                       STR_1 FFF1                         STR_2 FEB4                         STR_3 FE9C  
                       STR_4 FFF9                         STR_5 FFDB                         STR_6 FF11  
                       STR_7 FFE8                         STR_8 FEE3                         STR_9 FEFA  
                       _T0CS 007EAD                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u5100 582C                         u5211 33FE                 printf@tmpval 0132  
                       u5231 3438                         _PEIE 007F96                         _RCEN 007E2B  
                       i2l34 5966                         u8051 389A                         u9020 1F9C  
                       u8311 3B44                         u8071 38D4                         u8330 3B8E  
                       u9210 234E                         u9130 2202                         u8335 3B84  
                       u9071 20C8                         u9307 31FE                         u8460 01F4  
                       u9317 5590                         u9327 55CC                         u9247 315A  
                       u6785 54FC                         u9337 548C                         u7841 2A0C  
                       u8465 01E8                         u9257 317A                         u9347 5494  
                       u7851 2A2A                         u9267 3184                         u9357 54BE  
                       u9277 319E                         u9367 54C6                         u9287 31BE  
                       u8680 06CA                         u9377 4340                         u8921 39F8  
                       u9297 31DE                         u8941 3A32                         u8970 1F2C  
                       _TMR0 000FD6                         _TMR1 000FCE                         _TMR3 000FB2  
                       _RSEN 007E29                         _main 308C                 ___ftpack@arg 009E  
                       _keys FE4B                 ___ftpack@exp 00A1                         _time 0158  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007F                         exp@x 005B  
                       log@x 0046                         isr@i 0077                 i2___ftadd@f1 002E  
               i2___ftadd@f2 0031         ??i2_I2C_Master_Start 0002                 i2___ftge@ff1 0001  
               i2___ftge@ff2 0004         ??i2_I2C_Master_Write 0004                         pow@x 0064  
                       pow@y 0067                         prodh 000FF4                         prodl 000FF3  
                       start 000E          ?i2_read_colorsensor 0001                __CFG_IESO$OFF 000000  
               i2___ftdiv@f1 0009                 i2___ftdiv@f2 000C                 i2___ftdiv@f3 0013  
            __end_ofi2_scale 274A                 i2___ftneg@f1 0001              __end_ofi2_putch 59A4  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 00BF                 i2___ftmul@f1 0015  
               i2___ftmul@f2 0018                 ___param_bank 000000                 ___ftmul@sign 00C0  
               i2___ftsub@f1 003A                 i2___ftsub@f2 003D                 i2___fttol@f1 003A  
                i2_lcdNibble 55D8                ?_bottle_count 0001                 ___fttol@exp1 0115  
               i2___lltoft@c 0009                        ??_exp 005E                        ??_log 0049  
               ___fttol@lval 0111                        ??_isr 008E                        ??_pow 006A  
           ?_I2C_Master_Init 00AB             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D              __end_of___awdiv 4D6E              __end_of___ftadd 2C5E  
                      STR_10 FF57                        STR_11 FF46                        STR_20 FFAC  
                      STR_12 FF68                        STR_21 FFCC                        STR_13 FF79  
                      STR_14 FF8A                        STR_22 FF35                        STR_15 FF9B  
                      STR_16 FFBC                        STR_17 FECC                        STR_18 FF23  
                      STR_19 FFFC              __end_of___awmod 4F7A              __end_of___ftdiv 3B2E  
            __end_of___ftneg 5808              __end_of___lldiv 4E2A              __end_of___ftmul 39E2  
            ___awdiv@divisor 00A6                        _T1CON 000FCD              __end_of___llmod 5014  
            __end_of___ftsub 5672              __end_of___fttol 3C72                        _T3CON 000FB1  
                      _T0PS0 007EA8                        _T0PS1 007EA9                        _T0PS2 007EAA  
                      i2l320 1AC8                        i2l330 1BA4                        i2l323 1D46  
                      i2l332 1CAC                        i2l333 1CBC                        i2l318 1D4A  
                      i2l343 1DCA                        i2l344 1DA2                        i2l337 1D88  
                      i2l329 1B9A                        i2l338 1D62                        i2l356 1EBA  
                      i2l564 1188                        i2l851 4EB8                        i2l819 3EBA  
                      i2l923 3D92                        i2l916 3D04                        i2l909 4798  
                      i2l917 3D2C                        i2l874 3280                        i2l948 58EC  
            ___awdiv@counter 00A8                        i2l878 32AA                        i2l889 335A  
                      i2l898 3376                        i2l998 5228         ??i2_read_colorsensor 0004  
                      _PORTB 000F81                 i2__div_to_l_ 3DA4                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 00AE              __end_of_lcdInst 5998               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 55D8  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FDDD                        _color 00C2                   i2scale@scl 002A  
                      _floor 47CA                        _etime 0171                        _ldexp 4BEA  
                      _frexp 50A4                        _errno 016F                        _scale 15DA  
            __end_of_isdigit 588A                ___ftpack@sign 00A2                        _putch 5978  
                      _stime 0183                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___ftge 50A4                        pow@yi 0071              __end_of_timeset FE63  
           __end_ofi2___wmul 58D6              __end_of_standby 5734                        status 000FD8  
           __end_ofi2_fround 2EA4                i2___ftdiv@exp 0016           __size_ofi2___awdiv 0084  
         __size_ofi2___ftadd 01AC           __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000  
              i2printf@width 0061           __size_ofi2___ftdiv 00E6                  exp@exponent 0061  
         __size_ofi2___ftneg 0024           __size_ofi2___lldiv 0082           __size_ofi2___ftmul 00F4  
         __size_ofi2___llmod 0066           __size_ofi2___ftsub 0040           __size_ofi2___fttol 00F4  
           __end_ofi2_printf 15DA                  ldexp@newexp 0049              __initialization 5672  
                log@exponent 0049            i2___lldiv@divisor 0005           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00C1               ??_bottle_count 00C1                 __end_of_main 323C  
          i2___lldiv@counter 000D                 __end_of_keys FE5C                i2___ftmul@exp 001E  
                 i2printf@ap 0059           __size_ofi2_isdigit 001E                  ?i2___ftpack 0001  
                ?i2___lltoft 0009                       ??_main 0144                ___fttol@sign1 0110  
              __activetblptr 000002         __size_of__tdiv_to_l_ 019E            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 009F           ??_I2C_Master_Start 009F                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 00A1                       ?_floor 0053  
                     ?_ldexp 0046                       ?_frexp 0001             __end_of___altoft 532E  
           ___llmod@dividend 00AB                       ?_scale 0100                       _T08BIT 007EAE  
           ___awdiv@dividend 00A4              i2lcdNibble@data 0002             __end_of___awtoft 576C  
                     ?_putch 0001             __end_of___ftpack 40F6              i2lcdNibble@temp 0001  
           __end_of___lltoft 52B6                       _INT0IE 007F94                       _INT1IE 007F83  
                     _INT1IF 007F80                       _INT2IE 007F84                       i2l1008 545A  
                     i2l1250 2F5A                       i2l1251 307E                       i2l1083 3746  
                     i2l1261 489A                       i2l1088 3876                       i2l4301 52D8  
                     i2l4231 4E52                       i2l4303 52E4                       i2l4241 4EAE  
                     i2l4233 4E70                       i2l4225 4E3A                       i2l4401 33C2  
                     i2l6001 3D80                       i2l6003 3D8C                       i2l4237 4E86  
                     i2l4229 4E48                       i2l4317 50CC                       i2l4413 5074  
                     i2l6013 5932                       i2l4239 4EA4                       i2l4343 328E  
                     i2l6023 51DA                       i2l4409 5044                       i2l4513 45DE  
                     i2l4505 45B6                       i2l5233 3F0A                       i2l6025 51E6  
                     i2l4371 330A                       i2l4435 4640                       i2l4419 50A0  
                     i2l4507 45C2                       i2l5227 3EE8                       i2l5331 5176  
                     i2l5323 5158                       i2l6035 521A                       i2l6027 51EA  
                     i2l6051 544C                       i2l6043 5418                       i2l4373 3314  
                     i2l4365 32E8                       i2l4349 32B8                       i2l4453 4682  
                     i2l4429 4618                       i2l4509 45C8                       i2l5261 2F2C  
                     i2l5341 5196                       i2l5333 517A                       i2l5317 5148  
                     i2l6045 5424                       i2l4391 3392                       i2l4383 3348  
                     i2l4375 331E                       i2l4463 46AA                       i2l5255 2EF4  
                     i2l6047 5428                       i2l4385 3352                       i2l4377 3326  
                     i2l4449 4672                       i2l5249 2EBC                       i2l5329 516E  
                     i2l5345 51A0                       i2l5361 5342                       i2l4459 469A  
                     i2l4811 4C6C                       i2l5283 3054                       i2l5371 5364  
                     i2l6403 0CBE                       i2l6411 0CCC                       i2l4477 4528  
                     i2l5349 51AE                       i2l6333 53DA                       i2l5373 5368  
                     i2l5381 5386                       i2l5365 534E                       i2l6405 0CC2  
                     i2l6413 0D08                       i2l4751 5748                       i2l4495 458E  
                     i2l4815 4C78                       i2l5391 5532                       i2l6503 103A  
                     i2l6407 0CC6                       i2l4833 4734                       i2l5393 553E  
                     i2l6329 53D2                       i2l5385 5394                       i2l5377 537C  
                     i2l5369 535C                       i2l6601 139A                       i2l6513 1074  
                     i2l4499 459E                       i2l4827 470C                       i2l6347 4114  
                     i2l6339 53F6                       i2l6603 139E                       i2l6523 109C  
                     i2l6507 1054                       i2l6451 0E4C                       i2l6443 0DE8  
                     i2l6427 0D58                       i2l4781 4A90                       i2l4773 4820  
                     i2l4765 47F8                       i2l4853 4772                       i2l5733 37D0  
                     i2l5725 376C                       i2l5901 3DE0                       i2l6541 1164  
                     i2l6525 10AA                       i2l6517 1080                       i2l6461 0EBE  
                     i2l4783 4B0C                       i2l4791 4C02                       i2l5719 3754  
                     i2l6359 41EC                       i2l6631 143A                       i2l6543 1172  
                     i2l6519 1090                       i2l6535 114E                       i2l6471 0F16  
                     i2l6455 0E70                       i2l6383 0C1A                       i2l4769 4806  
                     i2l5737 37F2                       i2l6625 140E                       i2l6617 13D6  
                     i2l6553 11A4                       i2l6537 1158                       i2l6529 10C6  
                     i2l6481 0F6A                       i2l6457 0E80                       i2l6385 0C2C  
                     i2l6801 1AF2                       i2l4875 56D0                       i2l5819 58AA  
                     i2l5923 3E52                       i2l5915 3E22                       i2l6643 146E  
                     i2l6619 13EC                       i2l6563 12C8                       i2l6547 118C  
                     i2l6467 0EF2                       i2l6459 0EAE                       i2l6571 12E8  
                     i2l6395 0C60                       i2l6379 0C08                       i2l5861 248E  
                     i2l6645 1476                       i2l6653 14A4                       i2l6637 1458  
                     i2l6629 1432                       i2l6565 12D2                       i2l6557 11F4  
                     i2l6485 0FCE                       i2l6389 0C32                       i2l4799 4C48  
                     i2l5935 3E80                       i2l5847 2E64                       i2l5839 2DA4  
                     i2l5871 2556                       i2l6655 14B0                       i2l6663 1592  
                     i2l6583 1338                       i2l6487 0FD2                       i2l6823 1B5C  
                     i2l6807 1B12                       i2l5945 3EA8                       i2l5961 3CCA  
                     i2l6657 1528                       i2l6665 15A8                       i2l6649 148A  
                     i2l6569 12DE                       i2l6825 1B66                       i2l5947 3EB4  
                     i2l5939 3E90                       i2l5955 3C9E                       i2l5867 2532  
                     i2l6667 15AE                       i2l6587 135E                       i2l6499 100A  
                     i2l6931 1E9C                       i2l6819 1B50                       i2l5885 2726  
                     i2l6589 1362                       i2l6669 15BE                       i2l6925 1E86  
                     i2l6853 1C62                       i2l5895 3DC2                       i2l5991 3D58  
                     i2l5879 2682                       i2l6935 1EA4                       i2l6865 1CCA  
                     i2l6873 1CF2                       i2l5995 3D68                       i2l6885 1D78  
                     i2l6869 1CE6                       i2l6797 1AE2                       i2l6899 1DB8  
                     u413_41 324C                       u414_41 3260                       u503_41 46F4  
                  ??i2_scale 0027                       u505_41 471C             __end_of___lwtoft 5860  
                     u443_41 450C                       u437_41 4600                       u439_41 4628  
                     u661_41 3C82                       u663_41 3CAE                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _TMR1CS 007E69                       _TMR3IE 007D01  
                     _TMR3IF 007D09                       _TMR3CS 007D89                       _TMR0ON 007EAF  
                     _TMR1ON 007E68                       _TMR3ON 007D88                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
     __size_ofi2__tdiv_to_l_ 0132               __CFG_XINST$OFF 000000            ?_read_colorsensor 0001  
               i2_scale$1528 0027             __end_of__powers_ FE2B                       ___ftge 4B22  
                     ___wmul 57A2           ??_read_colorsensor 00A1                    ??___awdiv 00A8  
                  ??___ftadd 0110               __CFG_STVREN$ON 000000                    ??___awmod 00A2  
                  ??___ftdiv 00AC                    ??___ftneg 00A1                    ??___lldiv 00A6  
                  ??___ftmul 00B8                    ??___llmod 00B3                    ??___ftsub 00C1  
                  ??___fttol 010B                dec_to_hex@num 0075                       _fround 274A  
                     clear_0 5690                       clear_1 569C             ___awdiv@quotient 00AA  
            ___awmod@divisor 00A0              ___awmod@counter 00A2                    ??_lcdInst 00A0  
                     _printf 0012               i2___awdiv@sign 000C                       floor@i 0056  
                     floor@x 0053        ___ftmul@f3_as_product 00BC                    ??_initLCD 00A1  
                  ??_isdigit 009E            __end_ofi2___awdiv 51B8            __end_ofi2___ftadd 33E8  
          __end_ofi2___awmod 539E            __end_ofi2___ftdiv 47CA               i2___ftadd@exp1 0039  
             i2___ftadd@exp2 0038            __end_ofi2___ftneg 58FA            __end_ofi2___lldiv 523A  
          __end_ofi2___ftmul 46E4            __end_ofi2___llmod 546C            __end_ofi2___ftsub 56FA  
          __end_ofi2___fttol 45F0               i2___ftadd@sign 0037                 __mediumconst FDB4  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_standby 00C1               i2___awmod@sign 0006            __end_ofi2_lcdInst 59B0  
          __end_ofi2_isdigit 593A             __end_ofexp@coeff FE81         __size_of_bottle_time 0036  
           __end_oflog@coeff FE9C               i2___ftdiv@cntr 0012                   __accesstop 0080  
    __end_of__initialization 56AC                   ___altoft@c 0049               i2___ftdiv@sign 0017  
                 ___ftadd@f1 010A                   ___ftadd@f2 010D          __size_ofi2___ftpack 00AE  
             i2printf@tmpval 005D                   ___ftge@ff1 00B5                   ___ftge@ff2 00B8  
        __size_ofi2___lltoft 005C                 eval_poly@res 0043                ___rparam_used 000001  
                 ___ftdiv@f1 00A6                   ___ftdiv@f2 00A9                   ___ftdiv@f3 00B0  
                 ___ftneg@f1 009E                   ___awtoft@c 0009               i2___ftpack@arg 0001  
         i2__tdiv_to_l_@exp1 000F            i2___llmod@divisor 0012               i2___ftpack@exp 0004  
         i2__tdiv_to_l_@cntr 000E            i2___llmod@counter 0016           i2__tdiv_to_l_@quot 000A  
                 ___ftmul@f1 00B2                   ___ftmul@f2 00B5                   ___ftsub@f1 0116  
                 ___ftsub@f2 0119                   ___fttol@f1 0107               __pcstackCOMRAM 0001  
         i2___lldiv@dividend 0001                 __pidataBANK1 59E4                   ___lltoft@c 00A6  
              __end_of_floor 48A8                __end_of_ldexp 4CB0                __end_of_frexp 5134  
             i2___ftmul@cntr 0022                __end_of_scale 1A88               i2___ftmul@sign 0023  
              __end_of_putch 5988                  i2printf@idx 0058                  i2printf@exp 0063  
                i2printf@val 0065           __size_of_date_time 00D2               i2___fttol@exp1 0048  
                 ___lwtoft@c 00A6               i2___fttol@lval 0044                    ?i2___ftge 0001  
                  ?i2___wmul 000F                i2__tdiv_to_l_ 3C72           __size_of_lcdNibble 0060  
                 __div_to_l_ 3586                  i2putch@data 0003                    ?i2_fround 0024  
                  ?i2_printf 0049             _flag_bottle_high 0175  __size_of_I2C_ColorSens_Init 00FE  
            __div_to_l_@exp1 00A9                      ??_floor 0056                      ??_ldexp 004B  
            __div_to_l_@cntr 00A8                      ??_frexp 0006                      ??_scale 00C1  
             i2___lltoft@exp 0011         __end_of_bottle_count 4306              __div_to_l_@quot 00A4  
                 _dec_to_hex 40F6                      ??_putch 00A0           i2___lldiv@quotient 0009  
                 __pbssBANK0 00C2                   __pbssBANK1 0146           __size_of_eval_poly 00D2  
           i2__tdiv_to_l_@f1 0001             i2__tdiv_to_l_@f2 0004                __div_to_l_@f1 009E  
              __div_to_l_@f2 00A1           __size_of_read_time 0068                      ?___ftge 00B5  
               ?i2_lcdNibble 0001                      ?___wmul 00AC                    ?___altoft 0049  
                    ?_fround 0100                   _flag_eskaC 0177                    ?___awtoft 0009  
                  ?___ftpack 009E                      ?_printf 011C           __size_of_operation 0464  
                  ?___lltoft 00A6                   _flag_yopNC 0179               ?i2__tdiv_to_l_ 0001  
            _bottle_read_bot 016B                   ??i2___ftge 0007              _bottle_read_top 016D  
                    _T1CKPS0 007E6C                      _T1CKPS1 007E6D                      _T3CKPS0 007D8C  
                  ?___lwtoft 00A6                      _T3CKPS1 007D8D                   ??i2___wmul 0013  
                 ??i2_fround 0027                   ??i2_printf 004F                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                   _color_high 00CA                      _SSPSTAT 000FC7  
                    i2_scale 235A            __end_of_date_time 4A50                      i2_putch 5998  
          _bottle_count_disp 0187  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 54CC  
__size_ofi2_I2C_Master_Write 000A            __end_of__npowers_ FE04                ?_operationend 0001  
                    __Hparam 0000                   _scale$1308 0103                      __Lparam 0000  
            __size_of___ftge 00C8                      ___awdiv 4CB0                      ___ftadd 29F6  
                    ___awmod 4ED8                      ___ftdiv 39E2                      ___ftneg 57D8  
                    ___lldiv 4D6E              __size_of___wmul 0036                      ___ftmul 3884  
                    ___llmod 4F7A                      ___ftsub 5626                      ___fttol 3B2E  
                 _curr_state 00E0                   ??___altoft 004D                      __pcinit 5672  
               ??i2___ftpack 0006                   ??___awtoft 000C                   ??___ftpack 00A3  
          __end_of_eval_poly 4B22              __size_of_fround 02AC      i2___ftmul@f3_as_product 001F  
                    __ramtop 1000                 ??i2___lltoft 000D                      _lcdInst 5988  
                 ??___lltoft 00AA                      __ptext0 308C                      __ptext1 56FA  
                    __ptext2 593A                      __ptext3 1EF6                      __ptext4 4404  
                    __ptext5 5836                      __ptext6 39E2                      __ptext7 5588  
                    __ptext8 58FA                      __ptext9 497E              __size_of_printf 0BEA  
                 ??___lwtoft 00A9                i2_fround$1526 002A                i2_fround$1527 0027  
             dec_to_hex@temp 0086                      _initLCD 5588            __end_of_hexpowers FE4B  
                ?__div_to_l_ 009E                i2_isdigit$853 0002                      _dpowers FDB5  
               i2fround@prec 002D                 __size_of_exp 01E8                 __size_of_log 011E  
                    _isdigit 5860                 __size_of_isr 1EEE  __size_ofi2_read_colorsensor 00D6  
               __size_of_pow 0176             ___awmod@dividend 009E            __end_of_read_time 5406  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014  
                 date_time@i 00C1     __size_of_I2C_Master_Stop 0008                      _timeset FE5C  
                    _testint 015F                      _standby 56FA                  ?_dec_to_hex 0075  
             __pintcode_body 1A88         end_of_initialization 56AC                      exp@sign 0063  
              __Lmediumconst FDB4                      int_func 1A88          i2___wmul@multiplier 000F  
          __end_of_operation 235A               _operation_disp 017B           __end_ofi2___ftpack 4ED8  
             _operation_time 017D               ??_operationend 00C1    __size_of_I2C_Master_Start 0008  
         __end_ofi2___lltoft 5588    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 00A2  
                    pow@sign 0070              ___lldiv@counter 00AA                      printf@c 0143  
                    printf@f 011C             I2C_Master_Init@c 00AB             I2C_Master_Read@a 009F  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
             __tdiv_to_l_@f1 009E               __tdiv_to_l_@f2 00A1        __end_of_emergencystop 591C  
            ??i2__tdiv_to_l_ 0007                ??__tdiv_to_l_ 00A4                    _PORTAbits 000F80  
      __size_of_bottle_count 0104    __size_of_read_colorsensor 00F8            i2_I2C_Master_Read 588A  
          i2_I2C_Master_Wait 5966            i2_I2C_Master_Stop 59D4                    i2___awdiv 5134  
                  i2___ftadd 323C                    i2___awmod 532E                    i2___ftdiv 46E4  
                  i2___ftneg 58D6                    i2___lldiv 51B8                    i2___ftmul 45F0  
                  i2___llmod 5406                    i2___ftsub 56BA                    i2___fttol 44FC  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                 _start_time 00DE                    i2_lcdInst 59A4                  ___ftdiv@exp 00B3  
                printf@width 0136           i2___llmod@dividend 000E           i2___awdiv@dividend 0007  
        ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005                    i2_isdigit 591C  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002          __size_of__div_to_l_ 0188  
                ___ftmul@exp 00BB                 _bottle_count 4202               __end_of___ftge 4BEA  
             __end_of___wmul 57D8          __size_of_dec_to_hex 010C         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003               __end_of_fround 29F6                   floor@expon 0059  
           i2___wmul@product 0013               __end_of_printf 0BFC                i2_printf$1529 0055  
               i2printf@flag 0069    __end_ofi2_I2C_Master_Read 58B0                 i2printf@fval 006B  
  __end_ofi2_I2C_Master_Wait 5978                 i2printf@prec 005B          start_initialization 5672  
  __end_ofi2_I2C_Master_Stop 59DC            __size_ofi2___ftge 0090                   eval_poly@d 003D  
                 eval_poly@n 003F                   eval_poly@x 003A           i2___awdiv@quotient 000D  
          __size_ofi2___wmul 0026                   ldexp@value 0046          __end_of__tdiv_to_l_ 3586  
                __end_of_exp 308C                  __end_of_log 3FEA                  __end_of_isr 1EF6  
                __end_of_pow 3884                    i2printf@c 006E                    i2printf@f 0049  
              ??_bottle_time 00C1        i2I2C_Master_Read@temp 0003              i2___fttol@sign1 0043  
          __size_ofi2_fround 0246                   ?i2___awdiv 0007                   ?i2___ftadd 002E  
                 ?i2___awmod 0001                   ?i2___ftdiv 0009                   ?i2___ftneg 0001  
                 ?i2___lldiv 0001                   ?i2___ftmul 0015                   ?i2___llmod 000E  
                 ?i2___ftsub 003A                   ?i2___fttol 003A            __size_ofi2_printf 09DE  
                 frexp@value 0001            ??_I2C_Master_Init 00AF            ??_I2C_Master_Read 009F  
          ??_I2C_Master_Wait 009E                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 009F  
            ___llmod@divisor 00AF              ___llmod@counter 00B3                   ?i2_isdigit 0001  
                   ??___ftge 00BB                     ??___wmul 00B0                  __pdataBANK1 0187  
           __CFG_LPT1OSC$OFF 000000                     ??_fround 00C1                     ??_printf 0124  
          __size_of___altoft 0078                   read_time@i 0004                   fround@prec 0109  
              ?i2__div_to_l_ 0001            __size_of___awtoft 0038            __size_of___ftpack 010C  
          __size_of___lltoft 007C   __end_of_I2C_ColorSens_Init 4404                  __pbssCOMRAM 007A  
       __end_of_operationend 5952            __size_of___lwtoft 002A                __pcstackBANK0 0080  
              __pcstackBANK1 0100                     ?i2_scale 0024                     ?i2_putch 0001  
        __end_of_bottle_time 57A2             _I2C_Master_Start 59CC          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 59B0                    _date_time 497E            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FDB4                    _lcdNibble 546C  
                   ?___awdiv 00A4                     ?___ftadd 010A                     ?___awmod 009E  
                   ?___ftdiv 00A6                     ?___ftneg 009E                     ?___lldiv 009E  
                   ?___ftmul 00B2                     ?___llmod 00AB                     ?___ftsub 0116  
                  __npowers_ FDDD                     ?___fttol 0107                     ?_lcdInst 0001  
                __tdiv_to_l_ 33E8             dec_to_hex@hexnum 008A               ??i2__div_to_l_ 0007  
                  _color_low 00CE                 ??__div_to_l_ 00A4                     ?_initLCD 0001  
                  _colorprev 0150                     ?_isdigit 0001             _read_colorsensor 4404  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 4A50  
 __size_ofi2_I2C_Master_Stop 0008                  _flag_bottle 0173                  _flag_picbug 00DA  
                  _hexpowers FE2B                     ?_standby 0001                  ??i2___awdiv 000B  
                ??i2___ftadd 0034                  ??i2___awmod 0005               __size_of_floor 00DE  
             __size_of_ldexp 00C6                  ??i2___ftdiv 000F               __size_of_frexp 0090  
               ??_dec_to_hex 0077                  ??i2___ftneg 0004                  ??i2___lldiv 0009  
                ??i2___ftmul 001B               __size_of_scale 04AE                  ??i2___llmod 0016  
                ??i2___ftsub 0040                  ??i2___fttol 003E                    _read_time 539E  
             __size_of_putch 0010   __end_ofi2_I2C_Master_Start 59E4   __end_ofi2_I2C_Master_Write 59C4  
                ??i2_lcdInst 0003               ___wmul@product 00B0                     _LATAbits 000F89  
                   _LATCbits 000F8B                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                 ?_date_time 0001                     i2u412_40 50F4                     i2u412_48 50F6  
         __end_of__div_to_l_ 370E                     i2u445_40 4546                     i2u445_45 453E  
                  _operation 1EF6                     i2u562_40 2F34                     i2u563_40 2F36  
                   i2u715_40 0D90                     i2u715_45 0D86                     i2u645_40 58A8  
                   i2u638_40 37B8                     i2u495_40 4812                     i2u737_40 1182  
                   i2u499_40 4C22                     i2u499_48 4C24                     i2u940_47 55F0  
                   i2u941_47 55F8                     i2u942_47 5618                     i2u943_47 5620  
                   i2u938_47 1B26                     i2u939_47 1EAC             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001              i2__div_to_l_@f1 0001              i2__div_to_l_@f2 0004  
         __end_of_dec_to_hex 4202   __end_ofi2_read_colorsensor 497E            ___wmul@multiplier 00AC  
                   i2___ftge 5014                     i2___wmul 58B0                lcdNibble@data 009F  
                 printf@flag 013E                lcdNibble@temp 009E                   printf@fval 0140  
                 printf@prec 0130                   ?_eval_poly 003A            i2___awdiv@divisor 0009  
                   i2_fround 2C5E            i2___awdiv@counter 000B                     i2_printf 0BFC  
                _bottle_time 576C          I2C_Master_Read@temp 00A0           _bottle_count_array 0146  
                 ?_read_time 0001           dec_to_hex@quotient 008C           i2___awmod@dividend 0001  
           __size_ofi2_scale 03F0             __size_ofi2_putch 000C                    frexp@eptr 0004  
                   __Hrparam 0000                   ?_operation 0001                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000                  dec_to_hex@i 0088             __size_of___awdiv 00BE  
           __size_of___ftadd 0268             __size_of___awmod 00A2             __size_of___ftdiv 014C  
           __size_of___ftneg 0030        i2___wmul@multiplicand 0011             __size_of___lldiv 00BC  
                   ___altoft 52B6             __size_of___ftmul 015E             __size_of___llmod 009A  
           __size_of___ftsub 004C             __size_of___fttol 0144        __size_of_operationend 0018  
                   ___awtoft 5734                     ___ftpack 3FEA                  _fround$1306 0106  
                _fround$1307 0103                     ___lltoft 523A        __end_ofi2__tdiv_to_l_ 3DA4  
              _flag_top_read 00DC                  _isdigit$853 009F           i2I2C_Master_Read@a 0002  
                   ___lwtoft 5836             __size_of_lcdInst 0010                     _exp$1525 005E  
            _I2C_Master_Init 54CC              _I2C_Master_Read 5808             __size_of_initLCD 0050  
            _I2C_Master_Wait 5952              _I2C_Master_Stop 59C4                     _isr$1521 0078  
           __size_of_isdigit 002A                     __ptext10 5808                     __ptext11 576C  
                   __ptext20 4ED8                     __ptext12 4202                     __ptext21 4CB0  
                   __ptext13 0012                     __ptext30 57D8                     __ptext22 33E8  
                   __ptext14 15DA                     __ptext31 4B22                     __ptext23 3586  
                   __ptext15 5978                     __ptext40 5952                     __ptext32 5988  
                   __ptext24 523A                     __ptext16 5860                     __ptext33 546C  
                   __ptext25 4F7A                     __ptext17 274A                     __ptext50 3DA4  
                   __ptext42 48A8                     __ptext34 54CC                     __ptext26 3B2E  
                   __ptext18 57A2                     __ptext51 5406                     __ptext43 0BFC  
                   __ptext35 4D6E                     __ptext27 5626                     __ptext19 3884  
                   __ptext60 5966                     __ptext52 51B8                     __ptext44 235A  
                   __ptext36 4306                     __ptext28 29F6                     __ptext61 40F6  
                   __ptext53 59A4                     __ptext45 5998                     __ptext37 59B0  
                   __ptext29 3FEA                     __ptext70 4BEA                     __ptext62 5134  
                   __ptext54 55D8                     __ptext46 591C                     __ptext38 59C4  
                   __ptext71 47CA                     __ptext63 370E                     __ptext55 539E  
                   __ptext47 2C5E                     __ptext39 59CC                     __ptext80 5734  
                   __ptext72 44FC                     __ptext64 552C                     __ptext56 59BA  
                   __ptext48 532E                     __ptext81 4E2A                     __ptext73 5014  
                   __ptext65 3ECC                     __ptext57 59D4                     __ptext49 3C72  
                   __ptext74 50A4                     __ptext66 2EA4                     __ptext58 59DC  
                   __ptext75 52B6                     __ptext67 56BA                     __ptext59 588A  
                   __ptext76 4A50                     __ptext68 58D6                     __ptext77 58B0  
                   __ptext69 46E4                     __ptext78 45F0                     __ptext79 323C  
                   _end_time 00D8                     __powers_ FE04             __size_of_standby 003A  
                   _pow$1523 006A                     _pow$1524 006D       __size_of_emergencystop 0022  
              __size_of_main 01B0         __end_ofi2__div_to_l_ 3ECC              _dec_to_hex$1304 0080  
            _dec_to_hex$1522 0083                  ??_date_time 00C1                 _operationend 593A  
              ??i2_lcdNibble 0001                  ??_lcdNibble 009E                     _testflag 0185  
                   int$flags 007F                    printf@idx 012D                    printf@exp 0138  
                  printf@val 013A                     exp@coeff FE63                     log@coeff FE81  
          i2___awmod@divisor 0003                    putch@data 00A0            i2___awmod@counter 0005  
   __end_of_I2C_Master_Start 59D4     __end_of_I2C_Master_Write 59BA                 _servo0_timer 017F  
                 _INTCONbits 000FF2                  ??_eval_poly 0041                 _servo1_timer 0181  
                   isdigit@c 00A0                     scale@scl 0106                  ??_read_time 0004  
                   intlevel2 0000             __tdiv_to_l_@exp1 00AC             __tdiv_to_l_@cntr 00AB  
           __tdiv_to_l_@quot 00A7             ___lldiv@dividend 009E           _I2C_ColorSens_Init 4306  
   __end_of_read_colorsensor 44FC                  ??_operation 00C1          ?_I2C_ColorSens_Init 0001  
                   printf@ap 012E      __end_of_I2C_Master_Init 552C                  _servo0_flag 007E  
    __end_of_I2C_Master_Read 5836                  _servo1_flag 00E1      __end_of_I2C_Master_Wait 5966  
    __end_of_I2C_Master_Stop 59CC                  lcdInst@data 00A0                _emergencystop 58FA  
               ?__tdiv_to_l_ 009E                  _printf$1309 012A          __end_ofi2_lcdNibble 5626  
           ___lldiv@quotient 00A6            I2C_Master_Write@d 009F         ??_I2C_ColorSens_Init 00A1  
          i2__div_to_l_@exp1 000C            i2__div_to_l_@cntr 000B            i2__div_to_l_@quot 0007  

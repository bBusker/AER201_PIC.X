

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 11 20:18:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  002DB0                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _bottle_count_disp
   125  002DB0  FFFF               	dw	65535
   126                           
   127                           	psect	mediumconst
   128  00FDB6                     __pmediumconst:
   129                           	opt stack 0
   130  00FDB6  00                 	db	0
   131  00FDB7                     _keys:
   132                           	opt stack 0
   133  00FDB7  31                 	db	49
   134  00FDB8  32                 	db	50
   135  00FDB9  33                 	db	51
   136  00FDBA  41                 	db	65
   137  00FDBB  34                 	db	52
   138  00FDBC  35                 	db	53
   139  00FDBD  36                 	db	54
   140  00FDBE  42                 	db	66
   141  00FDBF  37                 	db	55
   142  00FDC0  38                 	db	56
   143  00FDC1  39                 	db	57
   144  00FDC2  43                 	db	67
   145  00FDC3  2A                 	db	42
   146  00FDC4  30                 	db	48
   147  00FDC5  23                 	db	35
   148  00FDC6  44                 	db	68
   149  00FDC7  00                 	db	0
   150  00FDC8                     __end_of_keys:
   151                           	opt stack 0
   152  00FDC8                     _dpowers:
   153                           	opt stack 0
   154  00FDC8  0001               	dw	1
   155  00FDCA  000A               	dw	10
   156  00FDCC  0064               	dw	100
   157  00FDCE  03E8               	dw	1000
   158  00FDD0  2710               	dw	10000
   159  00FDD2                     __end_of_dpowers:
   160                           	opt stack 0
   161  00FDD2                     _hexpowers:
   162                           	opt stack 0
   163  00FDD2  0001               	dw	1
   164  00FDD4  0010               	dw	16
   165  00FDD6  0100               	dw	256
   166  00FDD8  1000               	dw	4096
   167  00FDDA                     __end_of_hexpowers:
   168                           	opt stack 0
   169  00FDDA                     _timeset:
   170                           	opt stack 0
   171  00FDDA  50                 	db	80
   172  00FDDB  35                 	db	53
   173  00FDDC  21                 	db	33
   174  00FDDD  08                 	db	8
   175  00FDDE  05                 	db	5
   176  00FDDF  02                 	db	2
   177  00FDE0  17                 	db	23
   178  00FDE1                     __end_of_timeset:
   179                           	opt stack 0
   180  00FDE1                     exp@coeff:
   181                           	opt stack 0
   182  00FDE1  00                 	db	0
   183  00FDE2  80                 	db	128
   184  00FDE3  3F                 	db	63
   185  00FDE4  72                 	db	114
   186  00FDE5  31                 	db	49
   187  00FDE6  3F                 	db	63
   188  00FDE7  FE                 	db	254
   189  00FDE8  75                 	db	117
   190  00FDE9  3E                 	db	62
   191  00FDEA  58                 	db	88
   192  00FDEB  63                 	db	99
   193  00FDEC  3D                 	db	61
   194  00FDED  95                 	db	149
   195  00FDEE  1D                 	db	29
   196  00FDEF  3C                 	db	60
   197  00FDF0  C5                 	db	197
   198  00FDF1  AE                 	db	174
   199  00FDF2  3A                 	db	58
   200  00FDF3  79                 	db	121
   201  00FDF4  21                 	db	33
   202  00FDF5  39                 	db	57
   203  00FDF6  94                 	db	148
   204  00FDF7  80                 	db	128
   205  00FDF8  37                 	db	55
   206  00FDF9  93                 	db	147
   207  00FDFA  A7                 	db	167
   208  00FDFB  35                 	db	53
   209  00FDFC  56                 	db	86
   210  00FDFD  15                 	db	21
   211  00FDFE  34                 	db	52
   212  00FDFF                     __end_ofexp@coeff:
   213                           	opt stack 0
   214  00FDFF                     log@coeff:
   215                           	opt stack 0
   216  00FDFF  00                 	db	0
   217  00FE00  00                 	db	0
   218  00FE01  00                 	db	0
   219  00FE02  00                 	db	0
   220  00FE03  80                 	db	128
   221  00FE04  3F                 	db	63
   222  00FE05  F0                 	db	240
   223  00FE06  FF                 	db	255
   224  00FE07  BE                 	db	190
   225  00FE08  E2                 	db	226
   226  00FE09  A9                 	db	169
   227  00FE0A  3E                 	db	62
   228  00FE0B  83                 	db	131
   229  00FE0C  76                 	db	118
   230  00FE0D  BE                 	db	190
   231  00FE0E  AE                 	db	174
   232  00FE0F  2B                 	db	43
   233  00FE10  3E                 	db	62
   234  00FE11  3C                 	db	60
   235  00FE12  C3                 	db	195
   236  00FE13  BD                 	db	189
   237  00FE14  D2                 	db	210
   238  00FE15  13                 	db	19
   239  00FE16  3D                 	db	61
   240  00FE17  78                 	db	120
   241  00FE18  D3                 	db	211
   242  00FE19  BB                 	db	187
   243  00FE1A                     __end_oflog@coeff:
   244                           	opt stack 0
   245  0000                     _TMR0	set	4054
   246  0000                     _ADCON0	set	4034
   247  0000                     _ADCON1	set	4033
   248  0000                     _INTCONbits	set	4082
   249  0000                     _LATA	set	3977
   250  0000                     _LATAbits	set	3977
   251  0000                     _LATB	set	3978
   252  0000                     _LATC	set	3979
   253  0000                     _LATCbits	set	3979
   254  0000                     _LATD	set	3980
   255  0000                     _LATDbits	set	3980
   256  0000                     _LATE	set	3981
   257  0000                     _PORTAbits	set	3968
   258  0000                     _PORTB	set	3969
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON2	set	4037
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _TRISA	set	3986
   265  0000                     _TRISB	set	3987
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _ACKDT	set	32301
   270  0000                     _ACKEN	set	32300
   271  0000                     _GIE	set	32663
   272  0000                     _INT0IE	set	32660
   273  0000                     _INT0IF	set	32657
   274  0000                     _INT1IE	set	32643
   275  0000                     _INT1IF	set	32640
   276  0000                     _INT2IE	set	32644
   277  0000                     _INT2IF	set	32641
   278  0000                     _PEN	set	32298
   279  0000                     _PSA	set	32427
   280  0000                     _RCEN	set	32299
   281  0000                     _RSEN	set	32297
   282  0000                     _SEN	set	32296
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _T0PS0	set	32424
   286  0000                     _T0PS1	set	32425
   287  0000                     _T0PS2	set	32426
   288  0000                     _TMR0IE	set	32661
   289  0000                     _TMR0IF	set	32658
   290  0000                     _TMR0ON	set	32431
   291  0000                     _TRISC3	set	31907
   292  0000                     _TRISC4	set	31908
   293  0000                     _nRBPU	set	32655
   294  00FE1A                     STR_22:
   295  00FE1A  52                 	db	82	;'R'
   296  00FE1B  25                 	db	37
   297  00FE1C  64                 	db	100	;'d'
   298  00FE1D  20                 	db	32
   299  00FE1E  47                 	db	71	;'G'
   300  00FE1F  25                 	db	37
   301  00FE20  64                 	db	100	;'d'
   302  00FE21  20                 	db	32
   303  00FE22  42                 	db	66	;'B'
   304  00FE23  25                 	db	37
   305  00FE24  64                 	db	100	;'d'
   306  00FE25  20                 	db	32
   307  00FE26  20                 	db	32
   308  00FE27  20                 	db	32
   309  00FE28  20                 	db	32
   310  00FE29  20                 	db	32
   311  00FE2A  20                 	db	32
   312  00FE2B  20                 	db	32
   313  00FE2C  20                 	db	32
   314  00FE2D  20                 	db	32
   315  00FE2E  20                 	db	32
   316  00FE2F  20                 	db	32
   317  00FE30  20                 	db	32
   318  00FE31  20                 	db	32
   319  00FE32  20                 	db	32
   320  00FE33  20                 	db	32
   321  00FE34  20                 	db	32
   322  00FE35  00                 	db	0
   323  00FE36                     STR_21:
   324  00FE36  52                 	db	82	;'R'
   325  00FE37  75                 	db	117	;'u'
   326  00FE38  6E                 	db	110	;'n'
   327  00FE39  6E                 	db	110	;'n'
   328  00FE3A  69                 	db	105	;'i'
   329  00FE3B  6E                 	db	110	;'n'
   330  00FE3C  67                 	db	103	;'g'
   331  00FE3D  7E                 	db	126
   332  00FE3E  7E                 	db	126
   333  00FE3F  7E                 	db	126
   334  00FE40  20                 	db	32
   335  00FE41  20                 	db	32
   336  00FE42  20                 	db	32
   337  00FE43  20                 	db	32
   338  00FE44  20                 	db	32
   339  00FE45  20                 	db	32
   340  00FE46  20                 	db	32
   341  00FE47  20                 	db	32
   342  00FE48  20                 	db	32
   343  00FE49  20                 	db	32
   344  00FE4A  20                 	db	32
   345  00FE4B  20                 	db	32
   346  00FE4C  20                 	db	32
   347  00FE4D  20                 	db	32
   348  00FE4E  00                 	db	0
   349  00FE4F                     STR_2:
   350  00FE4F  47                 	db	71	;'G'
   351  00FE50  25                 	db	37
   352  00FE51  75                 	db	117	;'u'
   353  00FE52  20                 	db	32
   354  00FE53  42                 	db	66	;'B'
   355  00FE54  25                 	db	37
   356  00FE55  75                 	db	117	;'u'
   357  00FE56  20                 	db	32
   358  00FE57  20                 	db	32
   359  00FE58  20                 	db	32
   360  00FE59  20                 	db	32
   361  00FE5A  20                 	db	32
   362  00FE5B  20                 	db	32
   363  00FE5C  20                 	db	32
   364  00FE5D  20                 	db	32
   365  00FE5E  20                 	db	32
   366  00FE5F  20                 	db	32
   367  00FE60  20                 	db	32
   368  00FE61  20                 	db	32
   369  00FE62  20                 	db	32
   370  00FE63  20                 	db	32
   371  00FE64  20                 	db	32
   372  00FE65  20                 	db	32
   373  00FE66  00                 	db	0
   374  00FE67                     STR_1:
   375  00FE67  43                 	db	67	;'C'
   376  00FE68  25                 	db	37
   377  00FE69  75                 	db	117	;'u'
   378  00FE6A  20                 	db	32
   379  00FE6B  52                 	db	82	;'R'
   380  00FE6C  25                 	db	37
   381  00FE6D  75                 	db	117	;'u'
   382  00FE6E  20                 	db	32
   383  00FE6F  20                 	db	32
   384  00FE70  20                 	db	32
   385  00FE71  20                 	db	32
   386  00FE72  20                 	db	32
   387  00FE73  20                 	db	32
   388  00FE74  20                 	db	32
   389  00FE75  20                 	db	32
   390  00FE76  20                 	db	32
   391  00FE77  20                 	db	32
   392  00FE78  20                 	db	32
   393  00FE79  20                 	db	32
   394  00FE7A  20                 	db	32
   395  00FE7B  20                 	db	32
   396  00FE7C  20                 	db	32
   397  00FE7D  20                 	db	32
   398  00FE7E  00                 	db	0
   399  00FE7F                     STR_20:
   400  00FE7F  52                 	db	82	;'R'
   401  00FE80  75                 	db	117	;'u'
   402  00FE81  6E                 	db	110	;'n'
   403  00FE82  6E                 	db	110	;'n'
   404  00FE83  69                 	db	105	;'i'
   405  00FE84  6E                 	db	110	;'n'
   406  00FE85  67                 	db	103	;'g'
   407  00FE86  7E                 	db	126
   408  00FE87  7E                 	db	126
   409  00FE88  20                 	db	32
   410  00FE89  20                 	db	32
   411  00FE8A  20                 	db	32
   412  00FE8B  20                 	db	32
   413  00FE8C  20                 	db	32
   414  00FE8D  20                 	db	32
   415  00FE8E  20                 	db	32
   416  00FE8F  20                 	db	32
   417  00FE90  20                 	db	32
   418  00FE91  20                 	db	32
   419  00FE92  20                 	db	32
   420  00FE93  20                 	db	32
   421  00FE94  20                 	db	32
   422  00FE95  20                 	db	32
   423  00FE96  00                 	db	0
   424  00FE97                     STR_19:
   425  00FE97  52                 	db	82	;'R'
   426  00FE98  75                 	db	117	;'u'
   427  00FE99  6E                 	db	110	;'n'
   428  00FE9A  6E                 	db	110	;'n'
   429  00FE9B  69                 	db	105	;'i'
   430  00FE9C  6E                 	db	110	;'n'
   431  00FE9D  67                 	db	103	;'g'
   432  00FE9E  7E                 	db	126
   433  00FE9F  20                 	db	32
   434  00FEA0  20                 	db	32
   435  00FEA1  20                 	db	32
   436  00FEA2  20                 	db	32
   437  00FEA3  20                 	db	32
   438  00FEA4  20                 	db	32
   439  00FEA5  20                 	db	32
   440  00FEA6  20                 	db	32
   441  00FEA7  20                 	db	32
   442  00FEA8  20                 	db	32
   443  00FEA9  20                 	db	32
   444  00FEAA  20                 	db	32
   445  00FEAB  20                 	db	32
   446  00FEAC  20                 	db	32
   447  00FEAD  00                 	db	0
   448  00FEAE                     STR_17:
   449  00FEAE  54                 	db	84	;'T'
   450  00FEAF  6F                 	db	111	;'o'
   451  00FEB0  74                 	db	116	;'t'
   452  00FEB1  61                 	db	97	;'a'
   453  00FEB2  6C                 	db	108	;'l'
   454  00FEB3  20                 	db	32
   455  00FEB4  4F                 	db	79	;'O'
   456  00FEB5  70                 	db	112	;'p'
   457  00FEB6  65                 	db	101	;'e'
   458  00FEB7  72                 	db	114	;'r'
   459  00FEB8  61                 	db	97	;'a'
   460  00FEB9  74                 	db	116	;'t'
   461  00FEBA  69                 	db	105	;'i'
   462  00FEBB  6F                 	db	111	;'o'
   463  00FEBC  6E                 	db	110	;'n'
   464  00FEBD  20                 	db	32
   465  00FEBE  20                 	db	32
   466  00FEBF  20                 	db	32
   467  00FEC0  20                 	db	32
   468  00FEC1  20                 	db	32
   469  00FEC2  20                 	db	32
   470  00FEC3  20                 	db	32
   471  00FEC4  00                 	db	0
   472  00FEC5                     STR_4:
   473  00FEC5  44                 	db	68	;'D'
   474  00FEC6  61                 	db	97	;'a'
   475  00FEC7  74                 	db	116	;'t'
   476  00FEC8  65                 	db	101	;'e'
   477  00FEC9  3A                 	db	58	;':'
   478  00FECA  20                 	db	32
   479  00FECB  25                 	db	37
   480  00FECC  30                 	db	48	;'0'
   481  00FECD  32                 	db	50	;'2'
   482  00FECE  78                 	db	120	;'x'
   483  00FECF  2F                 	db	47
   484  00FED0  25                 	db	37
   485  00FED1  30                 	db	48	;'0'
   486  00FED2  32                 	db	50	;'2'
   487  00FED3  78                 	db	120	;'x'
   488  00FED4  2F                 	db	47
   489  00FED5  25                 	db	37
   490  00FED6  30                 	db	48	;'0'
   491  00FED7  32                 	db	50	;'2'
   492  00FED8  78                 	db	120	;'x'
   493  00FED9  20                 	db	32
   494  00FEDA  20                 	db	32
   495  00FEDB  00                 	db	0
   496  00FEDC                     STR_5:
   497  00FEDC  54                 	db	84	;'T'
   498  00FEDD  69                 	db	105	;'i'
   499  00FEDE  6D                 	db	109	;'m'
   500  00FEDF  65                 	db	101	;'e'
   501  00FEE0  3A                 	db	58	;':'
   502  00FEE1  20                 	db	32
   503  00FEE2  25                 	db	37
   504  00FEE3  30                 	db	48	;'0'
   505  00FEE4  32                 	db	50	;'2'
   506  00FEE5  78                 	db	120	;'x'
   507  00FEE6  3A                 	db	58	;':'
   508  00FEE7  25                 	db	37
   509  00FEE8  30                 	db	48	;'0'
   510  00FEE9  32                 	db	50	;'2'
   511  00FEEA  78                 	db	120	;'x'
   512  00FEEB  3A                 	db	58	;':'
   513  00FEEC  25                 	db	37
   514  00FEED  30                 	db	48	;'0'
   515  00FEEE  32                 	db	50	;'2'
   516  00FEEF  78                 	db	120	;'x'
   517  00FEF0  20                 	db	32
   518  00FEF1  20                 	db	32
   519  00FEF2  00                 	db	0
   520  00FEF3                     STR_18:
   521  00FEF3  54                 	db	84	;'T'
   522  00FEF4  69                 	db	105	;'i'
   523  00FEF5  6D                 	db	109	;'m'
   524  00FEF6  65                 	db	101	;'e'
   525  00FEF7  3A                 	db	58	;':'
   526  00FEF8  20                 	db	32
   527  00FEF9  25                 	db	37
   528  00FEFA  64                 	db	100	;'d'
   529  00FEFB  20                 	db	32
   530  00FEFC  73                 	db	115	;'s'
   531  00FEFD  20                 	db	32
   532  00FEFE  20                 	db	32
   533  00FEFF  20                 	db	32
   534  00FF00  20                 	db	32
   535  00FF01  20                 	db	32
   536  00FF02  20                 	db	32
   537  00FF03  20                 	db	32
   538  00FF04  00                 	db	0
   539  00FF05                     STR_8:
   540  00FF05  59                 	db	89	;'Y'
   541  00FF06  4F                 	db	79	;'O'
   542  00FF07  50                 	db	80	;'P'
   543  00FF08  2B                 	db	43
   544  00FF09  43                 	db	67	;'C'
   545  00FF0A  41                 	db	65	;'A'
   546  00FF0B  50                 	db	80	;'P'
   547  00FF0C  2B                 	db	43
   548  00FF0D  4C                 	db	76	;'L'
   549  00FF0E  42                 	db	66	;'B'
   550  00FF0F  4C                 	db	76	;'L'
   551  00FF10  3A                 	db	58	;':'
   552  00FF11  20                 	db	32
   553  00FF12  25                 	db	37
   554  00FF13  64                 	db	100	;'d'
   555  00FF14  20                 	db	32
   556  00FF15  20                 	db	32
   557  00FF16  00                 	db	0
   558  00FF17                     STR_10:
   559  00FF17  59                 	db	89	;'Y'
   560  00FF18  4F                 	db	79	;'O'
   561  00FF19  50                 	db	80	;'P'
   562  00FF1A  2D                 	db	45
   563  00FF1B  43                 	db	67	;'C'
   564  00FF1C  41                 	db	65	;'A'
   565  00FF1D  50                 	db	80	;'P'
   566  00FF1E  2B                 	db	43
   567  00FF1F  4C                 	db	76	;'L'
   568  00FF20  42                 	db	66	;'B'
   569  00FF21  4C                 	db	76	;'L'
   570  00FF22  3A                 	db	58	;':'
   571  00FF23  20                 	db	32
   572  00FF24  25                 	db	37
   573  00FF25  64                 	db	100	;'d'
   574  00FF26  20                 	db	32
   575  00FF27  20                 	db	32
   576  00FF28  00                 	db	0
   577  00FF29                     STR_9:
   578  00FF29  59                 	db	89	;'Y'
   579  00FF2A  4F                 	db	79	;'O'
   580  00FF2B  50                 	db	80	;'P'
   581  00FF2C  2B                 	db	43
   582  00FF2D  43                 	db	67	;'C'
   583  00FF2E  41                 	db	65	;'A'
   584  00FF2F  50                 	db	80	;'P'
   585  00FF30  2D                 	db	45
   586  00FF31  4C                 	db	76	;'L'
   587  00FF32  42                 	db	66	;'B'
   588  00FF33  4C                 	db	76	;'L'
   589  00FF34  3A                 	db	58	;':'
   590  00FF35  20                 	db	32
   591  00FF36  25                 	db	37
   592  00FF37  64                 	db	100	;'d'
   593  00FF38  20                 	db	32
   594  00FF39  20                 	db	32
   595  00FF3A  00                 	db	0
   596  00FF3B                     STR_11:
   597  00FF3B  59                 	db	89	;'Y'
   598  00FF3C  4F                 	db	79	;'O'
   599  00FF3D  50                 	db	80	;'P'
   600  00FF3E  2D                 	db	45
   601  00FF3F  43                 	db	67	;'C'
   602  00FF40  41                 	db	65	;'A'
   603  00FF41  50                 	db	80	;'P'
   604  00FF42  2D                 	db	45
   605  00FF43  4C                 	db	76	;'L'
   606  00FF44  42                 	db	66	;'B'
   607  00FF45  4C                 	db	76	;'L'
   608  00FF46  3A                 	db	58	;':'
   609  00FF47  20                 	db	32
   610  00FF48  25                 	db	37
   611  00FF49  64                 	db	100	;'d'
   612  00FF4A  20                 	db	32
   613  00FF4B  20                 	db	32
   614  00FF4C  00                 	db	0
   615  00FF4D                     STR_12:
   616  00FF4D  45                 	db	69	;'E'
   617  00FF4E  53                 	db	83	;'S'
   618  00FF4F  4B                 	db	75	;'K'
   619  00FF50  41                 	db	65	;'A'
   620  00FF51  2B                 	db	43
   621  00FF52  43                 	db	67	;'C'
   622  00FF53  41                 	db	65	;'A'
   623  00FF54  50                 	db	80	;'P'
   624  00FF55  2B                 	db	43
   625  00FF56  4C                 	db	76	;'L'
   626  00FF57  42                 	db	66	;'B'
   627  00FF58  4C                 	db	76	;'L'
   628  00FF59  3A                 	db	58	;':'
   629  00FF5A  20                 	db	32
   630  00FF5B  25                 	db	37
   631  00FF5C  64                 	db	100	;'d'
   632  00FF5D  20                 	db	32
   633  00FF5E  00                 	db	0
   634  00FF5F                     STR_14:
   635  00FF5F  45                 	db	69	;'E'
   636  00FF60  53                 	db	83	;'S'
   637  00FF61  4B                 	db	75	;'K'
   638  00FF62  41                 	db	65	;'A'
   639  00FF63  2D                 	db	45
   640  00FF64  43                 	db	67	;'C'
   641  00FF65  41                 	db	65	;'A'
   642  00FF66  50                 	db	80	;'P'
   643  00FF67  2B                 	db	43
   644  00FF68  4C                 	db	76	;'L'
   645  00FF69  42                 	db	66	;'B'
   646  00FF6A  4C                 	db	76	;'L'
   647  00FF6B  3A                 	db	58	;':'
   648  00FF6C  20                 	db	32
   649  00FF6D  25                 	db	37
   650  00FF6E  64                 	db	100	;'d'
   651  00FF6F  20                 	db	32
   652  00FF70  00                 	db	0
   653  00FF71                     STR_13:
   654  00FF71  45                 	db	69	;'E'
   655  00FF72  53                 	db	83	;'S'
   656  00FF73  4B                 	db	75	;'K'
   657  00FF74  41                 	db	65	;'A'
   658  00FF75  2B                 	db	43
   659  00FF76  43                 	db	67	;'C'
   660  00FF77  41                 	db	65	;'A'
   661  00FF78  50                 	db	80	;'P'
   662  00FF79  2D                 	db	45
   663  00FF7A  4C                 	db	76	;'L'
   664  00FF7B  42                 	db	66	;'B'
   665  00FF7C  4C                 	db	76	;'L'
   666  00FF7D  3A                 	db	58	;':'
   667  00FF7E  20                 	db	32
   668  00FF7F  25                 	db	37
   669  00FF80  64                 	db	100	;'d'
   670  00FF81  20                 	db	32
   671  00FF82  00                 	db	0
   672  00FF83                     STR_15:
   673  00FF83  45                 	db	69	;'E'
   674  00FF84  53                 	db	83	;'S'
   675  00FF85  4B                 	db	75	;'K'
   676  00FF86  41                 	db	65	;'A'
   677  00FF87  2D                 	db	45
   678  00FF88  43                 	db	67	;'C'
   679  00FF89  41                 	db	65	;'A'
   680  00FF8A  50                 	db	80	;'P'
   681  00FF8B  2D                 	db	45
   682  00FF8C  4C                 	db	76	;'L'
   683  00FF8D  42                 	db	66	;'B'
   684  00FF8E  4C                 	db	76	;'L'
   685  00FF8F  3A                 	db	58	;':'
   686  00FF90  20                 	db	32
   687  00FF91  25                 	db	37
   688  00FF92  64                 	db	100	;'d'
   689  00FF93  20                 	db	32
   690  00FF94  00                 	db	0
   691  00FF95                     STR_25:
   692  00FF95  30                 	db	48	;'0'
   693  00FF96  31                 	db	49	;'1'
   694  00FF97  32                 	db	50	;'2'
   695  00FF98  33                 	db	51	;'3'
   696  00FF99  34                 	db	52	;'4'
   697  00FF9A  35                 	db	53	;'5'
   698  00FF9B  36                 	db	54	;'6'
   699  00FF9C  37                 	db	55	;'7'
   700  00FF9D  38                 	db	56	;'8'
   701  00FF9E  39                 	db	57	;'9'
   702  00FF9F  61                 	db	97	;'a'
   703  00FFA0  62                 	db	98	;'b'
   704  00FFA1  63                 	db	99	;'c'
   705  00FFA2  64                 	db	100	;'d'
   706  00FFA3  65                 	db	101	;'e'
   707  00FFA4  66                 	db	102	;'f'
   708  00FFA5  00                 	db	0
   709  00FFA6                     STR_7:
   710  00FFA6  54                 	db	84	;'T'
   711  00FFA7  6F                 	db	111	;'o'
   712  00FFA8  74                 	db	116	;'t'
   713  00FFA9  61                 	db	97	;'a'
   714  00FFAA  6C                 	db	108	;'l'
   715  00FFAB  3A                 	db	58	;':'
   716  00FFAC  20                 	db	32
   717  00FFAD  25                 	db	37
   718  00FFAE  64                 	db	100	;'d'
   719  00FFAF  20                 	db	32
   720  00FFB0  20                 	db	32
   721  00FFB1  20                 	db	32
   722  00FFB2  20                 	db	32
   723  00FFB3  20                 	db	32
   724  00FFB4  20                 	db	32
   725  00FFB5  20                 	db	32
   726  00FFB6  00                 	db	0
   727  00FFB7                     STR_6:
   728  00FFB7  42                 	db	66	;'B'
   729  00FFB8  6F                 	db	111	;'o'
   730  00FFB9  74                 	db	116	;'t'
   731  00FFBA  74                 	db	116	;'t'
   732  00FFBB  6C                 	db	108	;'l'
   733  00FFBC  65                 	db	101	;'e'
   734  00FFBD  20                 	db	32
   735  00FFBE  43                 	db	67	;'C'
   736  00FFBF  6F                 	db	111	;'o'
   737  00FFC0  75                 	db	117	;'u'
   738  00FFC1  6E                 	db	110	;'n'
   739  00FFC2  74                 	db	116	;'t'
   740  00FFC3  20                 	db	32
   741  00FFC4  20                 	db	32
   742  00FFC5  20                 	db	32
   743  00FFC6  20                 	db	32
   744  00FFC7  00                 	db	0
   745  00FFC8                     STR_23:
   746  00FFC8  4F                 	db	79	;'O'
   747  00FFC9  70                 	db	112	;'p'
   748  00FFCA  65                 	db	101	;'e'
   749  00FFCB  72                 	db	114	;'r'
   750  00FFCC  61                 	db	97	;'a'
   751  00FFCD  74                 	db	116	;'t'
   752  00FFCE  69                 	db	105	;'i'
   753  00FFCF  6F                 	db	111	;'o'
   754  00FFD0  6E                 	db	110	;'n'
   755  00FFD1  20                 	db	32
   756  00FFD2  44                 	db	68	;'D'
   757  00FFD3  6F                 	db	111	;'o'
   758  00FFD4  6E                 	db	110	;'n'
   759  00FFD5  65                 	db	101	;'e'
   760  00FFD6  21                 	db	33
   761  00FFD7  00                 	db	0
   762  00FFD8                     STR_24:
   763  00FFD8  45                 	db	69	;'E'
   764  00FFD9  4D                 	db	77	;'M'
   765  00FFDA  45                 	db	69	;'E'
   766  00FFDB  52                 	db	82	;'R'
   767  00FFDC  47                 	db	71	;'G'
   768  00FFDD  45                 	db	69	;'E'
   769  00FFDE  4E                 	db	78	;'N'
   770  00FFDF  43                 	db	67	;'C'
   771  00FFE0  59                 	db	89	;'Y'
   772  00FFE1  20                 	db	32
   773  00FFE2  53                 	db	83	;'S'
   774  00FFE3  54                 	db	84	;'T'
   775  00FFE4  4F                 	db	79	;'O'
   776  00FFE5  50                 	db	80	;'P'
   777  00FFE6  00                 	db	0
   778  00FFE7                     STR_3:
   779  00FFE7  62                 	db	98	;'b'
   780  00FFE8  61                 	db	97	;'a'
   781  00FFE9  64                 	db	100	;'d'
   782  00FFEA  20                 	db	32
   783  00FFEB  69                 	db	105	;'i'
   784  00FFEC  6E                 	db	110	;'n'
   785  00FFED  74                 	db	116	;'t'
   786  00FFEE  65                 	db	101	;'e'
   787  00FFEF  72                 	db	114	;'r'
   788  00FFF0  72                 	db	114	;'r'
   789  00FFF1  75                 	db	117	;'u'
   790  00FFF2  70                 	db	112	;'p'
   791  00FFF3  74                 	db	116	;'t'
   792  00FFF4  00                 	db	0
   793  00FFF5                     STR_16:
   794  00FFF5  45                 	db	69	;'E'
   795  00FFF6  52                 	db	82	;'R'
   796  00FFF7  52                 	db	82	;'R'
   797  00FFF8  4F                 	db	79	;'O'
   798  00FFF9  52                 	db	82	;'R'
   799  00FFFA  3A                 	db	58	;':'
   800  00FFFB  20                 	db	32
   801  00FFFC  25                 	db	37
   802  00FFFD  64                 	db	100	;'d'
   803  00FFFE  00                 	db	0
   804                           
   805                           ; #config settings
   806  00FFFF  00                 	db	0	; dummy byte at the end
   807  0000                     
   808                           	psect	cinit
   809  002B14                     __pcinit:
   810                           	opt stack 0
   811  002B14                     start_initialization:
   812                           	opt stack 0
   813  002B14                     __initialization:
   814                           	opt stack 0
   815                           
   816                           ; Initialize objects allocated to BANK0 (2 bytes)
   817                           ; load TBLPTR registers with __pidataBANK0
   818  002B14  0EB0               	movlw	low __pidataBANK0
   819  002B16  6EF6               	movwf	tblptrl,c
   820  002B18  0E2D               	movlw	high __pidataBANK0
   821  002B1A  6EF7               	movwf	tblptrh,c
   822  002B1C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   823  002B1E  6EF8               	movwf	tblptru,c
   824  002B20  0009               	tblrd		*+	;fetch initializer
   825  002B22  CFF5 F0EE          	movff	tablat,__pdataBANK0
   826  002B26  0009               	tblrd		*+	;fetch initializer
   827  002B28  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   828                           
   829                           ; Clear objects allocated to BANK0 (68 bytes)
   830  002B2C  EE00  F080         	lfsr	0,__pbssBANK0
   831  002B30  0E44               	movlw	68
   832  002B32                     clear_0:
   833  002B32  6AEE               	clrf	postinc0,c
   834  002B34  06E8               	decf	wreg,f,c
   835  002B36  E1FD               	bnz	clear_0
   836                           
   837                           ; Clear objects allocated to COMRAM (8 bytes)
   838  002B38  EE00  F076         	lfsr	0,__pbssCOMRAM
   839  002B3C  0E08               	movlw	8
   840  002B3E                     clear_1:
   841  002B3E  6AEE               	clrf	postinc0,c
   842  002B40  06E8               	decf	wreg,f,c
   843  002B42  E1FD               	bnz	clear_1
   844  002B44                     end_of_initialization:
   845                           	opt stack 0
   846  002B44                     __end_of__initialization:
   847                           	opt stack 0
   848  002B44  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   849  002B46  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   850  002B48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   851  002B4A  6EF8               	movwf	tblptru,c
   852  002B4C  0100               	movlb	0
   853  002B4E  EF75  F00D         	goto	_main	;jump to C main() function
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           
   861                           	psect	bssCOMRAM
   862  000076                     __pbssCOMRAM:
   863                           	opt stack 0
   864  000076                     _bottlequeue_tail:
   865                           	opt stack 0
   866  000076                     	ds	2
   867  000078                     _end_time:
   868                           	opt stack 0
   869  000078                     	ds	2
   870  00007A                     _start_time:
   871                           	opt stack 0
   872  00007A                     	ds	2
   873  00007C                     _stime:
   874                           	opt stack 0
   875  00007C                     	ds	2
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           
   883                           	psect	bssBANK0
   884  000080                     __pbssBANK0:
   885                           	opt stack 0
   886  000080                     _bottlequeue:
   887                           	opt stack 0
   888  000080                     	ds	22
   889  000096                     _color:
   890                           	opt stack 0
   891  000096                     	ds	8
   892  00009E                     _time:
   893                           	opt stack 0
   894  00009E                     	ds	7
   895  0000A5                     _bottlequeue_head:
   896                           	opt stack 0
   897  0000A5                     	ds	2
   898  0000A7                     _errno:
   899                           	opt stack 0
   900  0000A7                     	ds	2
   901  0000A9                     _eska_count:
   902                           	opt stack 0
   903  0000A9                     	ds	2
   904  0000AB                     _eskacap_count:
   905                           	opt stack 0
   906  0000AB                     	ds	2
   907  0000AD                     _eskacaplbl_count:
   908                           	opt stack 0
   909  0000AD                     	ds	2
   910  0000AF                     _eskalbl_count:
   911                           	opt stack 0
   912  0000AF                     	ds	2
   913  0000B1                     _etime:
   914                           	opt stack 0
   915  0000B1                     	ds	2
   916  0000B3                     _nodedata:
   917                           	opt stack 0
   918  0000B3                     	ds	2
   919  0000B5                     _operation_disp:
   920                           	opt stack 0
   921  0000B5                     	ds	2
   922  0000B7                     _operation_time:
   923                           	opt stack 0
   924  0000B7                     	ds	2
   925  0000B9                     _total_bottle_count:
   926                           	opt stack 0
   927  0000B9                     	ds	2
   928  0000BB                     _yop_count:
   929                           	opt stack 0
   930  0000BB                     	ds	2
   931  0000BD                     _yopcap_count:
   932                           	opt stack 0
   933  0000BD                     	ds	2
   934  0000BF                     _yopcaplbl_count:
   935                           	opt stack 0
   936  0000BF                     	ds	2
   937  0000C1                     _yoplbl_count:
   938                           	opt stack 0
   939  0000C1                     	ds	2
   940  0000C3                     _curr_state:
   941                           	opt stack 0
   942  0000C3                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           
   950                           	psect	dataBANK0
   951  0000EE                     __pdataBANK0:
   952                           	opt stack 0
   953  0000EE                     _bottle_count_disp:
   954                           	opt stack 0
   955  0000EE                     	ds	2
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           
   963                           	psect	cstackBANK1
   964  000100                     __pcstackBANK1:
   965                           	opt stack 0
   966  000100                     printf@idx:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x0
   970  000100                     	ds	1
   971  000101                     printf@ap:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x1
   975  000101                     	ds	2
   976  000103                     printf@prec:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x3
   980  000103                     	ds	1
   981  000104                     printf@val:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x4
   985  000104                     	ds	2
   986  000106                     printf@flag:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6
   990  000106                     	ds	1
   991  000107                     printf@width:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x7
   995  000107                     	ds	2
   996  000109                     printf@c:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x9
  1000  000109                     	ds	1
  1001  00010A                     ??_main:
  1002                           
  1003                           ; 1 bytes @ 0xA
  1004  00010A                     	ds	2
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           
  1012                           	psect	cstackBANK0
  1013  0000C4                     __pcstackBANK0:
  1014                           	opt stack 0
  1015  0000C4                     ??_isr:
  1016                           
  1017                           ; 1 bytes @ 0x0
  1018  0000C4                     	ds	16
  1019  0000D4                     ??_isdigit:
  1020  0000D4                     ??_I2C_Master_Wait:
  1021  0000D4                     ?___wmul:
  1022                           	opt stack 0
  1023  0000D4                     ?___awmod:
  1024                           	opt stack 0
  1025  0000D4                     ?___lwdiv:
  1026                           	opt stack 0
  1027  0000D4                     ?___lldiv:
  1028                           	opt stack 0
  1029  0000D4                     lcdNibble@temp:
  1030                           	opt stack 0
  1031  0000D4                     ___wmul@multiplier:
  1032                           	opt stack 0
  1033  0000D4                     ___awmod@dividend:
  1034                           	opt stack 0
  1035  0000D4                     ___lwdiv@dividend:
  1036                           	opt stack 0
  1037  0000D4                     ___lldiv@dividend:
  1038                           	opt stack 0
  1039                           
  1040                           ; 4 bytes @ 0x10
  1041  0000D4                     	ds	1
  1042  0000D5                     I2C_Master_Read@a:
  1043                           	opt stack 0
  1044  0000D5                     lcdNibble@data:
  1045                           	opt stack 0
  1046  0000D5                     _isdigit$821:
  1047                           	opt stack 0
  1048  0000D5                     I2C_Master_Write@d:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x11
  1052  0000D5                     	ds	1
  1053  0000D6                     I2C_Master_Read@temp:
  1054                           	opt stack 0
  1055  0000D6                     lcdInst@data:
  1056                           	opt stack 0
  1057  0000D6                     putch@data:
  1058                           	opt stack 0
  1059  0000D6                     isdigit@c:
  1060                           	opt stack 0
  1061  0000D6                     ___wmul@multiplicand:
  1062                           	opt stack 0
  1063  0000D6                     ___awmod@divisor:
  1064                           	opt stack 0
  1065  0000D6                     ___lwdiv@divisor:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x12
  1069  0000D6                     	ds	1
  1070  0000D7                     ??_read_colorsensor:
  1071  0000D7                     ??_initLCD:
  1072                           
  1073                           ; 1 bytes @ 0x13
  1074  0000D7                     	ds	1
  1075  0000D8                     ___awmod@counter:
  1076                           	opt stack 0
  1077  0000D8                     ___lwdiv@counter:
  1078                           	opt stack 0
  1079  0000D8                     ___wmul@product:
  1080                           	opt stack 0
  1081  0000D8                     ___lldiv@divisor:
  1082                           	opt stack 0
  1083                           
  1084                           ; 4 bytes @ 0x14
  1085  0000D8                     	ds	1
  1086  0000D9                     ___awmod@sign:
  1087                           	opt stack 0
  1088  0000D9                     ___lwdiv@quotient:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x15
  1092  0000D9                     	ds	2
  1093  0000DB                     ?___lwmod:
  1094                           	opt stack 0
  1095  0000DB                     ___lwmod@dividend:
  1096                           	opt stack 0
  1097  0000DB                     read_colorsensor@color_low:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0x17
  1101  0000DB                     	ds	1
  1102  0000DC                     ___lldiv@quotient:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x18
  1106  0000DC                     	ds	1
  1107  0000DD                     ___lwmod@divisor:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x19
  1111  0000DD                     	ds	2
  1112  0000DF                     ___lwmod@counter:
  1113                           	opt stack 0
  1114  0000DF                     read_colorsensor@color_high:
  1115                           	opt stack 0
  1116                           
  1117                           ; 4 bytes @ 0x1B
  1118  0000DF                     	ds	1
  1119  0000E0                     ?_printf:
  1120                           	opt stack 0
  1121  0000E0                     ___lldiv@counter:
  1122                           	opt stack 0
  1123  0000E0                     printf@f:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x1C
  1127  0000E0                     	ds	1
  1128  0000E1                     I2C_Master_Init@c:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x1D
  1132  0000E1                     	ds	2
  1133  0000E3                     read_colorsensor@i:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x1F
  1137  0000E3                     	ds	2
  1138  0000E5                     ??_I2C_Master_Init:
  1139                           
  1140                           ; 1 bytes @ 0x21
  1141  0000E5                     	ds	3
  1142  0000E8                     ??_printf:
  1143                           
  1144                           ; 1 bytes @ 0x24
  1145  0000E8                     	ds	4
  1146  0000EC                     ??_operation:
  1147  0000EC                     date_time@i:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x28
  1151  0000EC                     	ds	2
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           
  1159                           	psect	cstackCOMRAM
  1160  000001                     __pcstackCOMRAM:
  1161                           	opt stack 0
  1162  000001                     ??i2_I2C_Master_Wait:
  1163  000001                     ??i2_isdigit:
  1164  000001                     ?i2___wmul:
  1165                           	opt stack 0
  1166  000001                     ?i2___lwdiv:
  1167                           	opt stack 0
  1168  000001                     ?___ftpack:
  1169                           	opt stack 0
  1170  000001                     ?_frexp:
  1171                           	opt stack 0
  1172  000001                     ?___ftneg:
  1173                           	opt stack 0
  1174  000001                     i2lcdNibble@temp:
  1175                           	opt stack 0
  1176  000001                     servo_rotate0@degree:
  1177                           	opt stack 0
  1178  000001                     i2___wmul@multiplier:
  1179                           	opt stack 0
  1180  000001                     i2___lwdiv@dividend:
  1181                           	opt stack 0
  1182  000001                     ___ftpack@arg:
  1183                           	opt stack 0
  1184  000001                     ___ftge@ff1:
  1185                           	opt stack 0
  1186  000001                     ___ftneg@f1:
  1187                           	opt stack 0
  1188  000001                     frexp@value:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0x0
  1192  000001                     	ds	1
  1193  000002                     i2I2C_Master_Read@a:
  1194                           	opt stack 0
  1195  000002                     i2lcdNibble@data:
  1196                           	opt stack 0
  1197  000002                     i2_isdigit$821:
  1198                           	opt stack 0
  1199  000002                     i2I2C_Master_Write@d:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x1
  1203  000002                     	ds	1
  1204  000003                     ??_servo_rotate0:
  1205  000003                     i2I2C_Master_Read@temp:
  1206                           	opt stack 0
  1207  000003                     i2lcdInst@data:
  1208                           	opt stack 0
  1209  000003                     i2putch@data:
  1210                           	opt stack 0
  1211  000003                     i2isdigit@c:
  1212                           	opt stack 0
  1213  000003                     i2___wmul@multiplicand:
  1214                           	opt stack 0
  1215  000003                     i2___lwdiv@divisor:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x2
  1219  000003                     	ds	1
  1220  000004                     ??i2_read_colorsensor:
  1221  000004                     read_time@i:
  1222                           	opt stack 0
  1223  000004                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000004                     frexp@eptr:
  1226                           	opt stack 0
  1227  000004                     ___ftge@ff2:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x3
  1231  000004                     	ds	1
  1232  000005                     ___ftpack@sign:
  1233                           	opt stack 0
  1234  000005                     servo_rotate0@duty:
  1235                           	opt stack 0
  1236  000005                     i2___wmul@product:
  1237                           	opt stack 0
  1238  000005                     i2___lwdiv@quotient:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x4
  1242  000005                     	ds	1
  1243  000006                     ??___ftpack:
  1244  000006                     ??_frexp:
  1245                           
  1246                           ; 1 bytes @ 0x5
  1247  000006                     	ds	1
  1248  000007                     ??___ftge:
  1249  000007                     ?___awdiv:
  1250                           	opt stack 0
  1251  000007                     i2___lwdiv@counter:
  1252                           	opt stack 0
  1253  000007                     servo_rotate0@i:
  1254                           	opt stack 0
  1255  000007                     ___awdiv@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x6
  1259  000007                     	ds	1
  1260  000008                     ?i2___lwmod:
  1261                           	opt stack 0
  1262  000008                     i2___lwmod@dividend:
  1263                           	opt stack 0
  1264  000008                     i2read_colorsensor@color_low:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0x7
  1268  000008                     	ds	1
  1269  000009                     ?___ftdiv:
  1270                           	opt stack 0
  1271  000009                     ?___awtoft:
  1272                           	opt stack 0
  1273  000009                     ?___lltoft:
  1274                           	opt stack 0
  1275  000009                     servo_rotate0@j:
  1276                           	opt stack 0
  1277  000009                     ___awdiv@divisor:
  1278                           	opt stack 0
  1279  000009                     ___awtoft@c:
  1280                           	opt stack 0
  1281  000009                     ___ftdiv@f1:
  1282                           	opt stack 0
  1283  000009                     ___lltoft@c:
  1284                           	opt stack 0
  1285                           
  1286                           ; 4 bytes @ 0x8
  1287  000009                     	ds	1
  1288  00000A                     i2___lwmod@divisor:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x9
  1292  00000A                     	ds	1
  1293  00000B                     ___awdiv@counter:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0xA
  1297  00000B                     	ds	1
  1298  00000C                     ___awdiv@sign:
  1299                           	opt stack 0
  1300  00000C                     ___awtoft@sign:
  1301                           	opt stack 0
  1302  00000C                     i2___lwmod@counter:
  1303                           	opt stack 0
  1304  00000C                     ___ftdiv@f2:
  1305                           	opt stack 0
  1306  00000C                     i2read_colorsensor@color_high:
  1307                           	opt stack 0
  1308                           
  1309                           ; 4 bytes @ 0xB
  1310  00000C                     	ds	1
  1311  00000D                     ??___lltoft:
  1312  00000D                     ?i2_printf:
  1313                           	opt stack 0
  1314  00000D                     ?___ftmul:
  1315                           	opt stack 0
  1316  00000D                     ___awdiv@quotient:
  1317                           	opt stack 0
  1318  00000D                     i2printf@f:
  1319                           	opt stack 0
  1320  00000D                     ___ftmul@f1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0xC
  1324  00000D                     	ds	2
  1325  00000F                     ??___ftdiv:
  1326  00000F                     servo_rotate1@degree:
  1327                           	opt stack 0
  1328  00000F                     servo_rotate2@degree:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0xE
  1332  00000F                     	ds	1
  1333  000010                     i2read_colorsensor@i:
  1334                           	opt stack 0
  1335  000010                     ___ftmul@f2:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0xF
  1339  000010                     	ds	1
  1340  000011                     ??_servo_rotate2:
  1341  000011                     ??_servo_rotate1:
  1342  000011                     ___lltoft@exp:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x10
  1346  000011                     	ds	1
  1347  000012                     ___ftdiv@cntr:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x11
  1351  000012                     	ds	1
  1352  000013                     ??___ftmul:
  1353  000013                     ??i2_printf:
  1354  000013                     servo_rotate1@duty:
  1355                           	opt stack 0
  1356  000013                     servo_rotate2@duty:
  1357                           	opt stack 0
  1358  000013                     ___ftdiv@f3:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x12
  1362  000013                     	ds	2
  1363  000015                     servo_rotate1@i:
  1364                           	opt stack 0
  1365  000015                     servo_rotate2@i:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x14
  1369  000015                     	ds	1
  1370  000016                     ___ftdiv@exp:
  1371                           	opt stack 0
  1372  000016                     ___ftmul@exp:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x15
  1376  000016                     	ds	1
  1377  000017                     ___ftdiv@sign:
  1378                           	opt stack 0
  1379  000017                     i2printf@idx:
  1380                           	opt stack 0
  1381  000017                     servo_rotate1@j:
  1382                           	opt stack 0
  1383  000017                     servo_rotate2@j:
  1384                           	opt stack 0
  1385  000017                     ___ftmul@f3_as_product:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x16
  1389  000017                     	ds	1
  1390  000018                     i2printf@ap:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x17
  1394  000018                     	ds	2
  1395  00001A                     ___ftmul@cntr:
  1396                           	opt stack 0
  1397  00001A                     i2printf@prec:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x19
  1401  00001A                     	ds	1
  1402  00001B                     ___ftmul@sign:
  1403                           	opt stack 0
  1404  00001B                     i2printf@val:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x1A
  1408  00001B                     	ds	1
  1409  00001C                     ?___ftadd:
  1410                           	opt stack 0
  1411  00001C                     ___ftadd@f1:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x1B
  1415  00001C                     	ds	1
  1416  00001D                     i2printf@flag:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x1C
  1420  00001D                     	ds	1
  1421  00001E                     i2printf@width:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x1D
  1425  00001E                     	ds	1
  1426  00001F                     ___ftadd@f2:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x1E
  1430  00001F                     	ds	1
  1431  000020                     i2printf@c:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x1F
  1435  000020                     	ds	2
  1436  000022                     ??___ftadd:
  1437                           
  1438                           ; 1 bytes @ 0x21
  1439  000022                     	ds	3
  1440  000025                     ___ftadd@sign:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x24
  1444  000025                     	ds	1
  1445  000026                     ___ftadd@exp2:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x25
  1449  000026                     	ds	1
  1450  000027                     ___ftadd@exp1:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x26
  1454  000027                     	ds	1
  1455  000028                     ?___ftsub:
  1456                           	opt stack 0
  1457  000028                     ?_eval_poly:
  1458                           	opt stack 0
  1459  000028                     ?___fttol:
  1460                           	opt stack 0
  1461  000028                     ___ftsub@f1:
  1462                           	opt stack 0
  1463  000028                     ___fttol@f1:
  1464                           	opt stack 0
  1465  000028                     eval_poly@x:
  1466                           	opt stack 0
  1467                           
  1468                           ; 3 bytes @ 0x27
  1469  000028                     	ds	3
  1470  00002B                     eval_poly@d:
  1471                           	opt stack 0
  1472  00002B                     ___ftsub@f2:
  1473                           	opt stack 0
  1474                           
  1475                           ; 3 bytes @ 0x2A
  1476  00002B                     	ds	1
  1477  00002C                     ??___fttol:
  1478                           
  1479                           ; 1 bytes @ 0x2B
  1480  00002C                     	ds	1
  1481  00002D                     eval_poly@n:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x2C
  1485  00002D                     	ds	1
  1486  00002E                     
  1487                           ; 1 bytes @ 0x2D
  1488  00002E                     	ds	1
  1489  00002F                     ??_eval_poly:
  1490                           
  1491                           ; 1 bytes @ 0x2E
  1492  00002F                     	ds	2
  1493  000031                     ___fttol@sign1:
  1494                           	opt stack 0
  1495  000031                     eval_poly@res:
  1496                           	opt stack 0
  1497                           
  1498                           ; 3 bytes @ 0x30
  1499  000031                     	ds	1
  1500  000032                     ___fttol@lval:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x31
  1504  000032                     	ds	2
  1505  000034                     ?_log:
  1506                           	opt stack 0
  1507  000034                     ?_ldexp:
  1508                           	opt stack 0
  1509  000034                     ldexp@value:
  1510                           	opt stack 0
  1511  000034                     log@x:
  1512                           	opt stack 0
  1513                           
  1514                           ; 3 bytes @ 0x33
  1515  000034                     	ds	2
  1516  000036                     ___fttol@exp1:
  1517                           	opt stack 0
  1518                           
  1519                           ; 1 bytes @ 0x35
  1520  000036                     	ds	1
  1521  000037                     ?___altoft:
  1522                           	opt stack 0
  1523  000037                     ldexp@newexp:
  1524                           	opt stack 0
  1525  000037                     log@exponent:
  1526                           	opt stack 0
  1527  000037                     ___altoft@c:
  1528                           	opt stack 0
  1529                           
  1530                           ; 4 bytes @ 0x36
  1531  000037                     	ds	2
  1532  000039                     ??_ldexp:
  1533                           
  1534                           ; 1 bytes @ 0x38
  1535  000039                     	ds	2
  1536  00003B                     ??___altoft:
  1537                           
  1538                           ; 1 bytes @ 0x3A
  1539  00003B                     	ds	4
  1540  00003F                     ___altoft@exp:
  1541                           	opt stack 0
  1542                           
  1543                           ; 1 bytes @ 0x3E
  1544  00003F                     	ds	1
  1545  000040                     ___altoft@sign:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x3F
  1549  000040                     	ds	1
  1550  000041                     ?_floor:
  1551                           	opt stack 0
  1552  000041                     floor@x:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x40
  1556  000041                     	ds	3
  1557  000044                     floor@i:
  1558                           	opt stack 0
  1559                           
  1560                           ; 3 bytes @ 0x43
  1561  000044                     	ds	3
  1562  000047                     floor@expon:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x46
  1566  000047                     	ds	2
  1567  000049                     ?_exp:
  1568                           	opt stack 0
  1569  000049                     exp@x:
  1570                           	opt stack 0
  1571                           
  1572                           ; 3 bytes @ 0x48
  1573  000049                     	ds	3
  1574  00004C                     _exp$1261:
  1575                           	opt stack 0
  1576                           
  1577                           ; 3 bytes @ 0x4B
  1578  00004C                     	ds	3
  1579  00004F                     exp@exponent:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x4E
  1583  00004F                     	ds	2
  1584  000051                     exp@sign:
  1585                           	opt stack 0
  1586                           
  1587                           ; 1 bytes @ 0x50
  1588  000051                     	ds	1
  1589  000052                     ?_pow:
  1590                           	opt stack 0
  1591  000052                     pow@x:
  1592                           	opt stack 0
  1593                           
  1594                           ; 3 bytes @ 0x51
  1595  000052                     	ds	3
  1596  000055                     pow@y:
  1597                           	opt stack 0
  1598                           
  1599                           ; 3 bytes @ 0x54
  1600  000055                     	ds	3
  1601  000058                     _pow$1259:
  1602                           	opt stack 0
  1603                           
  1604                           ; 3 bytes @ 0x57
  1605  000058                     	ds	3
  1606  00005B                     _pow$1260:
  1607                           	opt stack 0
  1608                           
  1609                           ; 3 bytes @ 0x5A
  1610  00005B                     	ds	3
  1611  00005E                     pow@sign:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x5D
  1615  00005E                     	ds	1
  1616  00005F                     pow@yi:
  1617                           	opt stack 0
  1618                           
  1619                           ; 4 bytes @ 0x5E
  1620  00005F                     	ds	4
  1621  000063                     ?_dec_to_hex:
  1622                           	opt stack 0
  1623  000063                     dec_to_hex@num:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x62
  1627  000063                     	ds	2
  1628  000065                     _dec_to_hex$1257:
  1629                           	opt stack 0
  1630                           
  1631                           ; 3 bytes @ 0x64
  1632  000065                     	ds	3
  1633  000068                     _dec_to_hex$1258:
  1634                           	opt stack 0
  1635                           
  1636                           ; 3 bytes @ 0x67
  1637  000068                     	ds	3
  1638  00006B                     dec_to_hex@temp:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x6A
  1642  00006B                     	ds	2
  1643  00006D                     dec_to_hex@i:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x6C
  1647  00006D                     	ds	2
  1648  00006F                     dec_to_hex@hexnum:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x6E
  1652  00006F                     	ds	2
  1653  000071                     dec_to_hex@quotient:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x70
  1657  000071                     	ds	2
  1658  000073                     isr@i:
  1659                           	opt stack 0
  1660                           
  1661                           ; 1 bytes @ 0x72
  1662  000073                     	ds	1
  1663  000074                     _isr$1352:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x73
  1667  000074                     	ds	2
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           
  1675 ;;
  1676 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1677 ;;
  1678 ;; *************** function _main *****************
  1679 ;; Defined at:
  1680 ;;		line 87 in file "main.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;Total ram usage:        2 bytes
  1699 ;; Hardware stack levels required when called:   11
  1700 ;; This function calls:
  1701 ;;		_I2C_ColorSens_Init
  1702 ;;		_I2C_Master_Init
  1703 ;;		_bottle_count
  1704 ;;		_bottle_time
  1705 ;;		_date_time
  1706 ;;		_emergencystop
  1707 ;;		_initLCD
  1708 ;;		_operation
  1709 ;;		_operationend
  1710 ;;		_standby
  1711 ;; This function is called by:
  1712 ;;		Startup code after reset
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text0
  1717  001AEA                     __ptext0:
  1718                           	opt stack 0
  1719  001AEA                     _main:
  1720                           	opt stack 20
  1721                           
  1722                           ;main.c: 94: TRISA = 0b11111011;
  1723                           
  1724                           ;incstack = 0
  1725  001AEA  0EFB               	movlw	251
  1726  001AEC  6E92               	movwf	3986,c	;volatile
  1727                           
  1728                           ;main.c: 95: TRISB = 0xFF;
  1729  001AEE  6893               	setf	3987,c	;volatile
  1730                           
  1731                           ;main.c: 96: TRISC = 0x00;
  1732  001AF0  0E00               	movlw	0
  1733  001AF2  6E94               	movwf	3988,c	;volatile
  1734                           
  1735                           ;main.c: 97: TRISD = 0x00;
  1736  001AF4  0E00               	movlw	0
  1737  001AF6  6E95               	movwf	3989,c	;volatile
  1738                           
  1739                           ;main.c: 98: TRISE = 0x00;
  1740  001AF8  0E00               	movlw	0
  1741  001AFA  6E96               	movwf	3990,c	;volatile
  1742                           
  1743                           ;main.c: 100: LATA = 0x00;
  1744  001AFC  0E00               	movlw	0
  1745  001AFE  6E89               	movwf	3977,c	;volatile
  1746                           
  1747                           ;main.c: 101: LATB = 0x00;
  1748  001B00  0E00               	movlw	0
  1749  001B02  6E8A               	movwf	3978,c	;volatile
  1750                           
  1751                           ;main.c: 102: LATC = 0x00;
  1752  001B04  0E00               	movlw	0
  1753  001B06  6E8B               	movwf	3979,c	;volatile
  1754                           
  1755                           ;main.c: 103: LATD = 0x00;
  1756  001B08  0E00               	movlw	0
  1757  001B0A  6E8C               	movwf	3980,c	;volatile
  1758                           
  1759                           ;main.c: 104: LATE = 0x00;
  1760  001B0C  0E00               	movlw	0
  1761  001B0E  6E8D               	movwf	3981,c	;volatile
  1762                           
  1763                           ;main.c: 106: ADCON0 = 0x00;
  1764  001B10  0E00               	movlw	0
  1765  001B12  6EC2               	movwf	4034,c	;volatile
  1766                           
  1767                           ;main.c: 107: ADCON1 = 0xFF;
  1768  001B14  68C1               	setf	4033,c	;volatile
  1769                           
  1770                           ;main.c: 110: GIE = 1;
  1771  001B16  8EF2               	bsf	intcon,7,c	;volatile
  1772                           
  1773                           ;main.c: 111: INT1IE = 1;
  1774  001B18  86F0               	bsf	intcon3,3,c	;volatile
  1775                           
  1776                           ;main.c: 112: INT0IE = 0;
  1777  001B1A  98F2               	bcf	intcon,4,c	;volatile
  1778                           
  1779                           ;main.c: 113: INT2IE = 0;
  1780  001B1C  98F0               	bcf	intcon3,4,c	;volatile
  1781                           
  1782                           ;main.c: 115: nRBPU = 0;
  1783  001B1E  9EF1               	bcf	intcon2,7,c	;volatile
  1784                           
  1785                           ;main.c: 117: initLCD();
  1786  001B20  ECFA  F014         	call	_initLCD	;wreg free
  1787                           
  1788                           ;main.c: 118: I2C_Master_Init(10000);
  1789  001B24  0E10               	movlw	16
  1790  001B26  0100               	movlb	0	; () banked
  1791  001B28  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1792  001B2A  0E27               	movlw	39
  1793  001B2C  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1794  001B2E  0E00               	movlw	0
  1795  001B30  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1796  001B32  0E00               	movlw	0
  1797  001B34  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1798  001B36  EC73  F014         	call	_I2C_Master_Init	;wreg free
  1799                           
  1800                           ;main.c: 119: I2C_ColorSens_Init();
  1801  001B3A  ECDF  F013         	call	_I2C_ColorSens_Init	;wreg free
  1802                           
  1803                           ;main.c: 122: TMR0 = 0;
  1804  001B3E  0E00               	movlw	0
  1805  001B40  6ED7               	movwf	4055,c	;volatile
  1806  001B42  0E00               	movlw	0
  1807  001B44  6ED6               	movwf	4054,c	;volatile
  1808                           
  1809                           ;main.c: 123: T08BIT = 0;
  1810  001B46  9CD5               	bcf	4053,6,c	;volatile
  1811                           
  1812                           ;main.c: 124: T0CS = 0;
  1813  001B48  9AD5               	bcf	4053,5,c	;volatile
  1814                           
  1815                           ;main.c: 125: PSA = 0;
  1816  001B4A  96D5               	bcf	4053,3,c	;volatile
  1817                           
  1818                           ;main.c: 126: T0PS2 = 1;
  1819  001B4C  84D5               	bsf	4053,2,c	;volatile
  1820                           
  1821                           ;main.c: 127: T0PS1 = 1;
  1822  001B4E  82D5               	bsf	4053,1,c	;volatile
  1823                           
  1824                           ;main.c: 128: T0PS0 = 1;
  1825  001B50  80D5               	bsf	4053,0,c	;volatile
  1826                           
  1827                           ;main.c: 132: curr_state = STANDBY;
  1828  001B52  0E00               	movlw	0
  1829  001B54  0100               	movlb	0	; () banked
  1830  001B56  6FC3               	movwf	_curr_state& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 135: switch(curr_state){
  1834                           
  1835                           ;main.c: 134: while(1){
  1836  001B58  D015               	goto	l5209
  1837  001B5A                     l5193:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 137: standby();
  1841  001B5A  ECC4  F016         	call	_standby	;wreg free
  1842                           
  1843                           ;main.c: 138: break;
  1844  001B5E  D029               	goto	l5211
  1845  001B60                     l5195:
  1846                           
  1847                           ;main.c: 140: emergencystop();
  1848  001B60  EC5F  F016         	call	_emergencystop	;wreg free
  1849                           
  1850                           ;main.c: 141: break;
  1851  001B64  D026               	goto	l5211
  1852  001B66                     l5197:
  1853                           
  1854                           ;main.c: 143: operation();
  1855  001B66  ECFF  F00F         	call	_operation	;wreg free
  1856                           
  1857                           ;main.c: 144: break;
  1858  001B6A  D023               	goto	l5211
  1859  001B6C                     l5199:
  1860                           
  1861                           ;main.c: 146: operationend();
  1862  001B6C  EC7F  F016         	call	_operationend	;wreg free
  1863                           
  1864                           ;main.c: 147: break;
  1865  001B70  D020               	goto	l5211
  1866  001B72                     l5201:
  1867                           
  1868                           ;main.c: 149: date_time();
  1869  001B72  ECCA  F00E         	call	_date_time	;wreg free
  1870                           
  1871                           ;main.c: 150: break;
  1872  001B76  D01D               	goto	l5211
  1873  001B78                     l5203:
  1874                           
  1875                           ;main.c: 152: bottle_count();
  1876  001B78  ECE2  F008         	call	_bottle_count	;wreg free
  1877                           
  1878                           ;main.c: 153: break;
  1879  001B7C  D01A               	goto	l5211
  1880  001B7E                     l5205:
  1881                           
  1882                           ;main.c: 155: bottle_time();
  1883  001B7E  ECC5  F015         	call	_bottle_time	;wreg free
  1884                           
  1885                           ;main.c: 157: }
  1886                           
  1887                           ;main.c: 156: break;
  1888  001B82  D017               	goto	l5211
  1889  001B84                     l5209:
  1890  001B84  0100               	movlb	0	; () banked
  1891  001B86  51C3               	movf	_curr_state& (0+255),w,b
  1892                           
  1893                           ; Switch size 1, requested type "space"
  1894                           ; Number of cases is 7, Range of values is 0 to 6
  1895                           ; switch strategies available:
  1896                           ; Name         Instructions Cycles
  1897                           ; simple_byte           22    12 (average)
  1898                           ;	Chosen strategy is simple_byte
  1899  001B88  0A00               	xorlw	0	; case 0
  1900  001B8A  B4D8               	btfsc	status,2,c
  1901  001B8C  D7E6               	goto	l5193
  1902  001B8E  0A01               	xorlw	1	; case 1
  1903  001B90  B4D8               	btfsc	status,2,c
  1904  001B92  D7E6               	goto	l5195
  1905  001B94  0A03               	xorlw	3	; case 2
  1906  001B96  B4D8               	btfsc	status,2,c
  1907  001B98  D7E6               	goto	l5197
  1908  001B9A  0A01               	xorlw	1	; case 3
  1909  001B9C  B4D8               	btfsc	status,2,c
  1910  001B9E  D7E6               	goto	l5199
  1911  001BA0  0A07               	xorlw	7	; case 4
  1912  001BA2  B4D8               	btfsc	status,2,c
  1913  001BA4  D7E6               	goto	l5201
  1914  001BA6  0A01               	xorlw	1	; case 5
  1915  001BA8  B4D8               	btfsc	status,2,c
  1916  001BAA  D7E6               	goto	l5203
  1917  001BAC  0A03               	xorlw	3	; case 6
  1918  001BAE  B4D8               	btfsc	status,2,c
  1919  001BB0  D7E6               	goto	l5205
  1920  001BB2                     l5211:
  1921                           
  1922                           ;main.c: 158: _delay((unsigned long)((200)*(10000000/4000.0)));
  1923  001BB2  0E03               	movlw	3
  1924  001BB4  0101               	movlb	1	; () banked
  1925  001BB6  6F0B               	movwf	(??_main+1)& (0+255),b
  1926  001BB8  0E8A               	movlw	138
  1927  001BBA  0101               	movlb	1	; () banked
  1928  001BBC  6F0A               	movwf	??_main& (0+255),b
  1929  001BBE  0E55               	movlw	85
  1930  001BC0                     u4837:
  1931  001BC0  2EE8               	decfsz	wreg,f,c
  1932  001BC2  D7FE               	bra	u4837
  1933  001BC4  2F0A               	decfsz	??_main& (0+255),f,b
  1934  001BC6  D7FC               	bra	u4837
  1935  001BC8  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1936  001BCA  D7FA               	bra	u4837
  1937  001BCC  D000               	nop2	
  1938  001BCE  D7DA               	goto	l5209
  1939  001BD0                     __end_of_main:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           intcon	equ	0xFF2
  1946                           intcon2	equ	0xFF1
  1947                           intcon3	equ	0xFF0
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _standby *****************
  1953 ;; Defined at:
  1954 ;;		line 329 in file "main.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    9
  1975 ;; This function calls:
  1976 ;;		_lcdInst
  1977 ;; This function is called by:
  1978 ;;		_main
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text1
  1983  002D88                     __ptext1:
  1984                           	opt stack 0
  1985  002D88                     _standby:
  1986                           	opt stack 21
  1987                           
  1988                           ;main.c: 330: lcdInst(0b10000000);
  1989                           
  1990                           ;incstack = 0
  1991  002D88  0E80               	movlw	128
  1992  002D8A  ECA6  F016         	call	_lcdInst
  1993  002D8E  0012               	return	
  1994  002D90                     __end_of_standby:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           intcon3	equ	0xFF0
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _operationend *****************
  2008 ;; Defined at:
  2009 ;;		line 479 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:   10
  2030 ;; This function calls:
  2031 ;;		_lcdInst
  2032 ;;		_printf
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text2
  2039  002CFE                     __ptext2:
  2040                           	opt stack 0
  2041  002CFE                     _operationend:
  2042                           	opt stack 20
  2043                           
  2044                           ;main.c: 480: lcdInst(0b10000000);
  2045                           
  2046                           ;incstack = 0
  2047  002CFE  0E80               	movlw	128
  2048  002D00  ECA6  F016         	call	_lcdInst
  2049                           
  2050                           ;main.c: 481: printf("Operation Done!");
  2051  002D04  0EC8               	movlw	low STR_23
  2052  002D06  0100               	movlb	0	; () banked
  2053  002D08  6FE0               	movwf	printf@f& (0+255),b
  2054  002D0A  0EFF               	movlw	high STR_23
  2055  002D0C  0100               	movlb	0	; () banked
  2056  002D0E  6FE1               	movwf	(printf@f+1)& (0+255),b
  2057  002D10  EC97  F003         	call	_printf	;wreg free
  2058  002D14  0012               	return	
  2059  002D16                     __end_of_operationend:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           intcon	equ	0xFF2
  2066                           intcon2	equ	0xFF1
  2067                           intcon3	equ	0xFF0
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _operation *****************
  2073 ;; Defined at:
  2074 ;;		line 454 in file "main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        2 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:   10
  2095 ;; This function calls:
  2096 ;;		_lcdInst
  2097 ;;		_printf
  2098 ;;		_read_colorsensor
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text3
  2105  001FFE                     __ptext3:
  2106                           	opt stack 0
  2107  001FFE                     _operation:
  2108                           	opt stack 20
  2109                           
  2110                           ;main.c: 455: switch(operation_disp){
  2111                           
  2112                           ;incstack = 0
  2113  001FFE  D031               	goto	l5061
  2114  002000                     l5041:
  2115                           
  2116                           ;main.c: 457: lcdInst(0b10000000);
  2117  002000  0E80               	movlw	128
  2118  002002  ECA6  F016         	call	_lcdInst
  2119                           
  2120                           ;main.c: 458: printf("Running~              ");
  2121  002006  0E97               	movlw	low STR_19
  2122  002008  0100               	movlb	0	; () banked
  2123  00200A  6FE0               	movwf	printf@f& (0+255),b
  2124  00200C  0EFE               	movlw	high STR_19
  2125  00200E  0100               	movlb	0	; () banked
  2126  002010  6FE1               	movwf	(printf@f+1)& (0+255),b
  2127  002012  EC97  F003         	call	_printf	;wreg free
  2128                           
  2129                           ;main.c: 459: operation_disp = 1;
  2130  002016  0E00               	movlw	0
  2131  002018  0100               	movlb	0	; () banked
  2132  00201A  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2133  00201C  0E01               	movlw	1
  2134  00201E  D01F               	goto	L2
  2135  002020                     l5047:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 462: lcdInst(0b10000000);
  2139  002020  0E80               	movlw	128
  2140  002022  ECA6  F016         	call	_lcdInst
  2141                           
  2142                           ;main.c: 463: printf("Running~~              ");
  2143  002026  0E7F               	movlw	low STR_20
  2144  002028  0100               	movlb	0	; () banked
  2145  00202A  6FE0               	movwf	printf@f& (0+255),b
  2146  00202C  0EFE               	movlw	high STR_20
  2147  00202E  0100               	movlb	0	; () banked
  2148  002030  6FE1               	movwf	(printf@f+1)& (0+255),b
  2149  002032  EC97  F003         	call	_printf	;wreg free
  2150                           
  2151                           ;main.c: 464: operation_disp = 2;
  2152  002036  0E00               	movlw	0
  2153  002038  0100               	movlb	0	; () banked
  2154  00203A  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2155  00203C  0E02               	movlw	2
  2156  00203E  D00F               	goto	L2
  2157  002040                     l5053:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 467: lcdInst(0b10000000);
  2161  002040  0E80               	movlw	128
  2162  002042  ECA6  F016         	call	_lcdInst
  2163                           
  2164                           ;main.c: 468: printf("Running~~~              ");
  2165  002046  0E36               	movlw	low STR_21
  2166  002048  0100               	movlb	0	; () banked
  2167  00204A  6FE0               	movwf	printf@f& (0+255),b
  2168  00204C  0EFE               	movlw	high STR_21
  2169  00204E  0100               	movlb	0	; () banked
  2170  002050  6FE1               	movwf	(printf@f+1)& (0+255),b
  2171  002052  EC97  F003         	call	_printf	;wreg free
  2172                           
  2173                           ;main.c: 469: operation_disp = 0;
  2174  002056  0E00               	movlw	0
  2175  002058  0100               	movlb	0	; () banked
  2176  00205A  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2177  00205C  0E00               	movlw	0
  2178  00205E                     L2:
  2179  00205E  6FB5               	movwf	_operation_disp& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 471: }
  2183                           
  2184                           ;main.c: 470: break;
  2185  002060  D014               	goto	l5063
  2186  002062                     l5061:
  2187  002062  C0B5  F0EC         	movff	_operation_disp,??_operation
  2188  002066  C0B6  F0ED         	movff	_operation_disp+1,??_operation+1
  2189                           
  2190                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2191                           ; Switch size 1, requested type "space"
  2192                           ; Number of cases is 1, Range of values is 0 to 0
  2193                           ; switch strategies available:
  2194                           ; Name         Instructions Cycles
  2195                           ; simple_byte            4     3 (average)
  2196                           ;	Chosen strategy is simple_byte
  2197  00206A  0100               	movlb	0	; () banked
  2198  00206C  51ED               	movf	(??_operation+1)& (0+255),w,b
  2199  00206E  0A00               	xorlw	0	; case 0
  2200  002070  A4D8               	btfss	status,2,c
  2201  002072  D00B               	goto	l5063
  2202                           
  2203                           ; BSR set to: 0
  2204                           ; Switch size 1, requested type "space"
  2205                           ; Number of cases is 3, Range of values is 0 to 2
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte           10     6 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210  002074  0100               	movlb	0	; () banked
  2211  002076  51EC               	movf	??_operation& (0+255),w,b
  2212  002078  0A00               	xorlw	0	; case 0
  2213  00207A  B4D8               	btfsc	status,2,c
  2214  00207C  D7C1               	goto	l5041
  2215  00207E  0A01               	xorlw	1	; case 1
  2216  002080  B4D8               	btfsc	status,2,c
  2217  002082  D7CE               	goto	l5047
  2218  002084  0A03               	xorlw	3	; case 2
  2219  002086  B4D8               	btfsc	status,2,c
  2220  002088  D7DB               	goto	l5053
  2221  00208A                     l5063:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;main.c: 473: lcdInst(0b11000000);
  2225  00208A  0EC0               	movlw	192
  2226  00208C  ECA6  F016         	call	_lcdInst
  2227                           
  2228                           ;main.c: 474: read_colorsensor();
  2229  002090  EC67  F00A         	call	_read_colorsensor	;wreg free
  2230                           
  2231                           ;main.c: 475: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2232  002094  0E1A               	movlw	low STR_22
  2233  002096  0100               	movlb	0	; () banked
  2234  002098  6FE0               	movwf	printf@f& (0+255),b
  2235  00209A  0EFE               	movlw	high STR_22
  2236  00209C  0100               	movlb	0	; () banked
  2237  00209E  6FE1               	movwf	(printf@f+1)& (0+255),b
  2238  0020A0  C098  F0E2         	movff	_color+2,?_printf+2
  2239  0020A4  C099  F0E3         	movff	_color+3,?_printf+3
  2240  0020A8  C09A  F0E4         	movff	_color+4,?_printf+4
  2241  0020AC  C09B  F0E5         	movff	_color+5,?_printf+5
  2242  0020B0  C09C  F0E6         	movff	_color+6,?_printf+6
  2243  0020B4  C09D  F0E7         	movff	_color+7,?_printf+7
  2244  0020B8  EC97  F003         	call	_printf	;wreg free
  2245  0020BC  0012               	return	
  2246  0020BE                     __end_of_operation:
  2247                           	opt stack 0
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           intcon	equ	0xFF2
  2253                           intcon2	equ	0xFF1
  2254                           intcon3	equ	0xFF0
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _read_colorsensor *****************
  2260 ;; Defined at:
  2261 ;;		line 534 in file "main.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  2266 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  2267 ;;  i               2   31[BANK0 ] int 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;Total ram usage:       14 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    9
  2284 ;; This function calls:
  2285 ;;		_I2C_Master_Read
  2286 ;;		_I2C_Master_Start
  2287 ;;		_I2C_Master_Stop
  2288 ;;		_I2C_Master_Write
  2289 ;; This function is called by:
  2290 ;;		_operation
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text4
  2295  0014CE                     __ptext4:
  2296                           	opt stack 0
  2297  0014CE                     _read_colorsensor:
  2298                           	opt stack 20
  2299                           
  2300                           ;main.c: 539: unsigned char color_low[4];
  2301                           ;main.c: 540: unsigned char color_high[4];
  2302                           ;main.c: 541: int i;
  2303                           ;main.c: 544: I2C_Master_Start();
  2304                           
  2305                           ;incstack = 0
  2306  0014CE  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  2307                           
  2308                           ;main.c: 545: I2C_Master_Write(0b01010010);
  2309  0014D2  0E00               	movlw	0
  2310  0014D4  0100               	movlb	0	; () banked
  2311  0014D6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2312  0014D8  0E52               	movlw	82
  2313  0014DA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2314  0014DC  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2315                           
  2316                           ;main.c: 546: I2C_Master_Write(0b10110100);
  2317  0014E0  0E00               	movlw	0
  2318  0014E2  0100               	movlb	0	; () banked
  2319  0014E4  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2320  0014E6  0EB4               	movlw	180
  2321  0014E8  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2322  0014EA  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2323                           
  2324                           ;main.c: 547: I2C_Master_Start();
  2325  0014EE  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  2326                           
  2327                           ;main.c: 548: I2C_Master_Write(0b01010011);
  2328  0014F2  0E00               	movlw	0
  2329  0014F4  0100               	movlb	0	; () banked
  2330  0014F6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2331  0014F8  0E53               	movlw	83
  2332  0014FA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2333  0014FC  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2334                           
  2335                           ;main.c: 549: for(i=0; i<3; i++){
  2336  001500  0E00               	movlw	0
  2337  001502  0100               	movlb	0	; () banked
  2338  001504  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2339  001506  0E00               	movlw	0
  2340  001508  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2341  00150A                     l3613:
  2342                           
  2343                           ; BSR set to: 0
  2344  00150A  0100               	movlb	0	; () banked
  2345  00150C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2346  00150E  D008               	goto	l3617
  2347  001510  0100               	movlb	0	; () banked
  2348  001512  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2349  001514  E121               	bnz	l3623
  2350  001516  0E03               	movlw	3
  2351  001518  0100               	movlb	0	; () banked
  2352  00151A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2353  00151C  B0D8               	btfsc	status,0,c
  2354  00151E  D01C               	goto	l3623
  2355  001520                     l3617:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 550: color_low[i] = I2C_Master_Read(1);
  2359  001520  0EDB               	movlw	low read_colorsensor@color_low
  2360  001522  0100               	movlb	0	; () banked
  2361  001524  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2362  001526  6ED9               	movwf	fsr2l,c
  2363  001528  0E00               	movlw	high read_colorsensor@color_low
  2364  00152A  0100               	movlb	0	; () banked
  2365  00152C  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2366  00152E  6EDA               	movwf	fsr2h,c
  2367  001530  0E01               	movlw	1
  2368  001532  ECFB  F015         	call	_I2C_Master_Read
  2369  001536  6EDF               	movwf	indf2,c
  2370                           
  2371                           ;main.c: 551: color_high[i] = I2C_Master_Read(1);
  2372  001538  0EDF               	movlw	low read_colorsensor@color_high
  2373  00153A  0100               	movlb	0	; () banked
  2374  00153C  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2375  00153E  6ED9               	movwf	fsr2l,c
  2376  001540  0E00               	movlw	high read_colorsensor@color_high
  2377  001542  0100               	movlb	0	; () banked
  2378  001544  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2379  001546  6EDA               	movwf	fsr2h,c
  2380  001548  0E01               	movlw	1
  2381  00154A  ECFB  F015         	call	_I2C_Master_Read
  2382  00154E  6EDF               	movwf	indf2,c
  2383  001550  0100               	movlb	0	; () banked
  2384  001552  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2385  001554  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2386  001556  D7D9               	goto	l3613
  2387  001558                     l3623:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;main.c: 552: }
  2391                           ;main.c: 553: color_low[3] = I2C_Master_Read(1);
  2392  001558  0E01               	movlw	1
  2393  00155A  ECFB  F015         	call	_I2C_Master_Read
  2394  00155E  0100               	movlb	0	; () banked
  2395  001560  6FDE               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2396                           
  2397                           ;main.c: 554: color_high[3] = I2C_Master_Read(0);
  2398  001562  0E00               	movlw	0
  2399  001564  ECFB  F015         	call	_I2C_Master_Read
  2400  001568  0100               	movlb	0	; () banked
  2401  00156A  6FE2               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2402                           
  2403                           ;main.c: 555: I2C_Master_Stop();
  2404  00156C  ECC8  F016         	call	_I2C_Master_Stop	;wreg free
  2405                           
  2406                           ;main.c: 557: for(i=0; i<4; i++){
  2407  001570  0E00               	movlw	0
  2408  001572  0100               	movlb	0	; () banked
  2409  001574  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2410  001576  0E00               	movlw	0
  2411  001578  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2412  00157A                     l3627:
  2413                           
  2414                           ; BSR set to: 0
  2415  00157A  0100               	movlb	0	; () banked
  2416  00157C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2417  00157E  D008               	goto	l3631
  2418  001580  0100               	movlb	0	; () banked
  2419  001582  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2420  001584  E139               	bnz	l415
  2421  001586  0E04               	movlw	4
  2422  001588  0100               	movlb	0	; () banked
  2423  00158A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2424  00158C  B0D8               	btfsc	status,0,c
  2425  00158E  0012               	return	
  2426  001590                     l3631:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;main.c: 558: color[i] = (color_high[i] << 8)|(color_low[i]);
  2430  001590  0EDF               	movlw	low read_colorsensor@color_high
  2431  001592  0100               	movlb	0	; () banked
  2432  001594  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2433  001596  6ED9               	movwf	fsr2l,c
  2434  001598  0E00               	movlw	high read_colorsensor@color_high
  2435  00159A  0100               	movlb	0	; () banked
  2436  00159C  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2437  00159E  6EDA               	movwf	fsr2h,c
  2438  0015A0  50DF               	movf	indf2,w,c
  2439  0015A2  0100               	movlb	0	; () banked
  2440  0015A4  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2441  0015A6  0100               	movlb	0	; () banked
  2442  0015A8  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2443  0015AA  0100               	movlb	0	; () banked
  2444  0015AC  6FD9               	movwf	(??_read_colorsensor+2)& (0+255),b
  2445  0015AE  6BD8               	clrf	(??_read_colorsensor+1)& (0+255),b
  2446  0015B0  0EDB               	movlw	low read_colorsensor@color_low
  2447  0015B2  0100               	movlb	0	; () banked
  2448  0015B4  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2449  0015B6  6ED9               	movwf	fsr2l,c
  2450  0015B8  0E00               	movlw	high read_colorsensor@color_low
  2451  0015BA  0100               	movlb	0	; () banked
  2452  0015BC  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2453  0015BE  6EDA               	movwf	fsr2h,c
  2454  0015C0  50DF               	movf	indf2,w,c
  2455  0015C2  0100               	movlb	0	; () banked
  2456  0015C4  6FDA               	movwf	(??_read_colorsensor+3)& (0+255),b
  2457  0015C6  0100               	movlb	0	; () banked
  2458  0015C8  51DA               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2459  0015CA  0100               	movlb	0	; () banked
  2460  0015CC  13D8               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2461  0015CE  0E00               	movlw	0
  2462  0015D0  13D9               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2463  0015D2  90D8               	bcf	status,0,c
  2464  0015D4  0100               	movlb	0	; () banked
  2465  0015D6  35E3               	rlcf	read_colorsensor@i& (0+255),w,b
  2466  0015D8  6ED9               	movwf	fsr2l,c
  2467  0015DA  0100               	movlb	0	; () banked
  2468  0015DC  35E4               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2469  0015DE  6EDA               	movwf	fsr2h,c
  2470  0015E0  0E96               	movlw	low _color
  2471  0015E2  26D9               	addwf	fsr2l,f,c
  2472  0015E4  0E00               	movlw	high _color
  2473  0015E6  22DA               	addwfc	fsr2h,f,c
  2474  0015E8  C0D8  FFDE         	movff	??_read_colorsensor+1,postinc2
  2475  0015EC  C0D9  FFDD         	movff	??_read_colorsensor+2,postdec2
  2476                           
  2477                           ; BSR set to: 0
  2478  0015F0  0100               	movlb	0	; () banked
  2479  0015F2  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2480  0015F4  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2481  0015F6  D7C1               	goto	l3627
  2482  0015F8                     l415:
  2483                           
  2484                           ; BSR set to: 0
  2485  0015F8  0012               	return		;funcret
  2486  0015FA                     __end_of_read_colorsensor:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           intcon	equ	0xFF2
  2493                           intcon2	equ	0xFF1
  2494                           intcon3	equ	0xFF0
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           postdec2	equ	0xFDD
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _initLCD *****************
  2505 ;; Defined at:
  2506 ;;		line 14 in file "lcd.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        1 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    9
  2527 ;; This function calls:
  2528 ;;		_lcdInst
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text5
  2535  0029F4                     __ptext5:
  2536                           	opt stack 0
  2537  0029F4                     _initLCD:
  2538                           	opt stack 21
  2539                           
  2540                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;incstack = 0
  2544  0029F4  0E31               	movlw	49
  2545  0029F6  0100               	movlb	0	; () banked
  2546  0029F8  6FD7               	movwf	??_initLCD& (0+255),b
  2547  0029FA  0EB2               	movlw	178
  2548  0029FC                     u4847:
  2549  0029FC  2EE8               	decfsz	wreg,f,c
  2550  0029FE  D7FE               	bra	u4847
  2551  002A00  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2552  002A02  D7FC               	bra	u4847
  2553  002A04  F000               	nop	
  2554                           
  2555                           ;lcd.c: 16: lcdInst(0b00110011);
  2556  002A06  0E33               	movlw	51
  2557  002A08  ECA6  F016         	call	_lcdInst
  2558                           
  2559                           ;lcd.c: 17: lcdInst(0b00110011);
  2560  002A0C  0E33               	movlw	51
  2561  002A0E  ECA6  F016         	call	_lcdInst
  2562                           
  2563                           ;lcd.c: 18: lcdInst(0b00110010);
  2564  002A12  0E32               	movlw	50
  2565  002A14  ECA6  F016         	call	_lcdInst
  2566                           
  2567                           ;lcd.c: 19: lcdInst(0b00101000);
  2568  002A18  0E28               	movlw	40
  2569  002A1A  ECA6  F016         	call	_lcdInst
  2570                           
  2571                           ;lcd.c: 20: lcdInst(0b00001111);
  2572  002A1E  0E0F               	movlw	15
  2573  002A20  ECA6  F016         	call	_lcdInst
  2574                           
  2575                           ;lcd.c: 21: lcdInst(0b00000110);
  2576  002A24  0E06               	movlw	6
  2577  002A26  ECA6  F016         	call	_lcdInst
  2578                           
  2579                           ;lcd.c: 22: lcdInst(0b00000001);
  2580  002A2A  0E01               	movlw	1
  2581  002A2C  ECA6  F016         	call	_lcdInst
  2582                           
  2583                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2584  002A30  0E31               	movlw	49
  2585  002A32  0100               	movlb	0	; () banked
  2586  002A34  6FD7               	movwf	??_initLCD& (0+255),b
  2587  002A36  0EB2               	movlw	178
  2588  002A38                     u4857:
  2589  002A38  2EE8               	decfsz	wreg,f,c
  2590  002A3A  D7FE               	bra	u4857
  2591  002A3C  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2592  002A3E  D7FC               	bra	u4857
  2593  002A40  F000               	nop	
  2594  002A42  0012               	return		;funcret
  2595  002A44                     __end_of_initLCD:
  2596                           	opt stack 0
  2597                           tblptru	equ	0xFF8
  2598                           tblptrh	equ	0xFF7
  2599                           tblptrl	equ	0xFF6
  2600                           tablat	equ	0xFF5
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           intcon3	equ	0xFF0
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _emergencystop *****************
  2614 ;; Defined at:
  2615 ;;		line 485 in file "main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   10
  2636 ;; This function calls:
  2637 ;;		_lcdInst
  2638 ;;		_printf
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text6
  2645  002CBE                     __ptext6:
  2646                           	opt stack 0
  2647  002CBE                     _emergencystop:
  2648                           	opt stack 20
  2649                           
  2650                           ;main.c: 486: (INTCONbits.GIE = 0);
  2651                           
  2652                           ;incstack = 0
  2653  002CBE  9EF2               	bcf	intcon,7,c	;volatile
  2654                           
  2655                           ;main.c: 487: PORTAbits.RA2 = 0;
  2656  002CC0  9480               	bcf	3968,2,c	;volatile
  2657                           
  2658                           ;main.c: 488: lcdInst(0b00000001);
  2659  002CC2  0E01               	movlw	1
  2660  002CC4  ECA6  F016         	call	_lcdInst
  2661                           
  2662                           ;main.c: 489: lcdInst(0b10000000);
  2663  002CC8  0E80               	movlw	128
  2664  002CCA  ECA6  F016         	call	_lcdInst
  2665                           
  2666                           ;main.c: 490: printf("EMERGENCY STOP");
  2667  002CCE  0ED8               	movlw	low STR_24
  2668  002CD0  0100               	movlb	0	; () banked
  2669  002CD2  6FE0               	movwf	printf@f& (0+255),b
  2670  002CD4  0EFF               	movlw	high STR_24
  2671  002CD6  0100               	movlb	0	; () banked
  2672  002CD8  6FE1               	movwf	(printf@f+1)& (0+255),b
  2673  002CDA  EC97  F003         	call	_printf	;wreg free
  2674  002CDE                     l372:
  2675  002CDE  D7FF               	goto	l372
  2676  002CE0                     __end_of_emergencystop:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           intcon	equ	0xFF2
  2683                           intcon2	equ	0xFF1
  2684                           intcon3	equ	0xFF0
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           indf2	equ	0xFDF
  2688                           postinc2	equ	0xFDE
  2689                           postdec2	equ	0xFDD
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           
  2694 ;; *************** function _date_time *****************
  2695 ;; Defined at:
  2696 ;;		line 361 in file "main.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;		None
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  i               1   40[BANK0 ] unsigned char 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  1    wreg      void 
  2703 ;; Registers used:
  2704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        1 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:   10
  2717 ;; This function calls:
  2718 ;;		_I2C_Master_Read
  2719 ;;		_I2C_Master_Start
  2720 ;;		_I2C_Master_Stop
  2721 ;;		_I2C_Master_Write
  2722 ;;		_lcdInst
  2723 ;;		_printf
  2724 ;; This function is called by:
  2725 ;;		_main
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text7
  2730  001D94                     __ptext7:
  2731                           	opt stack 0
  2732  001D94                     _date_time:
  2733                           	opt stack 20
  2734                           
  2735                           ;main.c: 363: I2C_Master_Start();
  2736                           
  2737                           ;incstack = 0
  2738  001D94  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  2739                           
  2740                           ;main.c: 364: I2C_Master_Write(0b11010000);
  2741  001D98  0E00               	movlw	0
  2742  001D9A  0100               	movlb	0	; () banked
  2743  001D9C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2744  001D9E  0ED0               	movlw	208
  2745  001DA0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2746  001DA2  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2747                           
  2748                           ;main.c: 365: I2C_Master_Write(0x00);
  2749  001DA6  0E00               	movlw	0
  2750  001DA8  0100               	movlb	0	; () banked
  2751  001DAA  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2752  001DAC  0E00               	movlw	0
  2753  001DAE  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2754  001DB0  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2755                           
  2756                           ;main.c: 366: I2C_Master_Stop();
  2757  001DB4  ECC8  F016         	call	_I2C_Master_Stop	;wreg free
  2758                           
  2759                           ;main.c: 369: I2C_Master_Start();
  2760  001DB8  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  2761                           
  2762                           ;main.c: 370: I2C_Master_Write(0b11010001);
  2763  001DBC  0E00               	movlw	0
  2764  001DBE  0100               	movlb	0	; () banked
  2765  001DC0  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2766  001DC2  0ED1               	movlw	209
  2767  001DC4  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2768  001DC6  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  2769                           
  2770                           ;main.c: 371: for(unsigned char i=0;i<0x06;i++){
  2771  001DCA  0E00               	movlw	0
  2772  001DCC  0100               	movlb	0	; () banked
  2773  001DCE  6FEC               	movwf	date_time@i& (0+255),b
  2774  001DD0                     l5085:
  2775                           
  2776                           ; BSR set to: 0
  2777  001DD0  0E05               	movlw	5
  2778  001DD2  0100               	movlb	0	; () banked
  2779  001DD4  65EC               	cpfsgt	date_time@i& (0+255),b
  2780  001DD6  D001               	goto	l5089
  2781  001DD8  D010               	goto	l5095
  2782  001DDA                     l5089:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 372: time[i] = I2C_Master_Read(1);
  2786  001DDA  0100               	movlb	0	; () banked
  2787  001DDC  51EC               	movf	date_time@i& (0+255),w,b
  2788  001DDE  0D01               	mullw	1
  2789  001DE0  0E9E               	movlw	low _time
  2790  001DE2  24F3               	addwf	prodl,w,c
  2791  001DE4  6ED9               	movwf	fsr2l,c
  2792  001DE6  0E00               	movlw	high _time
  2793  001DE8  20F4               	addwfc	prodh,w,c
  2794  001DEA  6EDA               	movwf	fsr2h,c
  2795  001DEC  0E01               	movlw	1
  2796  001DEE  ECFB  F015         	call	_I2C_Master_Read
  2797  001DF2  6EDF               	movwf	indf2,c
  2798  001DF4  0100               	movlb	0	; () banked
  2799  001DF6  2BEC               	incf	date_time@i& (0+255),f,b
  2800  001DF8  D7EB               	goto	l5085
  2801  001DFA                     l5095:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 373: }
  2805                           ;main.c: 374: time[6] = I2C_Master_Read(0);
  2806  001DFA  0E00               	movlw	0
  2807  001DFC  ECFB  F015         	call	_I2C_Master_Read
  2808  001E00  0100               	movlb	0	; () banked
  2809  001E02  6FA4               	movwf	(_time+6)& (0+255),b
  2810                           
  2811                           ;main.c: 375: I2C_Master_Stop();
  2812  001E04  ECC8  F016         	call	_I2C_Master_Stop	;wreg free
  2813                           
  2814                           ;main.c: 378: lcdInst(0b10000000);
  2815  001E08  0E80               	movlw	128
  2816  001E0A  ECA6  F016         	call	_lcdInst
  2817                           
  2818                           ;main.c: 379: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2819  001E0E  0EC5               	movlw	low STR_4
  2820  001E10  0100               	movlb	0	; () banked
  2821  001E12  6FE0               	movwf	printf@f& (0+255),b
  2822  001E14  0EFE               	movlw	high STR_4
  2823  001E16  0100               	movlb	0	; () banked
  2824  001E18  6FE1               	movwf	(printf@f+1)& (0+255),b
  2825  001E1A  C0A3  F0E2         	movff	_time+5,?_printf+2
  2826  001E1E  0100               	movlb	0	; () banked
  2827  001E20  6BE3               	clrf	(?_printf+3)& (0+255),b
  2828  001E22  C0A2  F0E4         	movff	_time+4,?_printf+4
  2829  001E26  0100               	movlb	0	; () banked
  2830  001E28  6BE5               	clrf	(?_printf+5)& (0+255),b
  2831  001E2A  C0A4  F0E6         	movff	_time+6,?_printf+6
  2832  001E2E  0100               	movlb	0	; () banked
  2833  001E30  6BE7               	clrf	(?_printf+7)& (0+255),b
  2834  001E32  EC97  F003         	call	_printf	;wreg free
  2835                           
  2836                           ;main.c: 380: lcdInst(0b11000000);
  2837  001E36  0EC0               	movlw	192
  2838  001E38  ECA6  F016         	call	_lcdInst
  2839                           
  2840                           ;main.c: 381: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2841  001E3C  0EDC               	movlw	low STR_5
  2842  001E3E  0100               	movlb	0	; () banked
  2843  001E40  6FE0               	movwf	printf@f& (0+255),b
  2844  001E42  0EFE               	movlw	high STR_5
  2845  001E44  0100               	movlb	0	; () banked
  2846  001E46  6FE1               	movwf	(printf@f+1)& (0+255),b
  2847  001E48  C0A0  F0E2         	movff	_time+2,?_printf+2
  2848  001E4C  0100               	movlb	0	; () banked
  2849  001E4E  6BE3               	clrf	(?_printf+3)& (0+255),b
  2850  001E50  C09F  F0E4         	movff	_time+1,?_printf+4
  2851  001E54  0100               	movlb	0	; () banked
  2852  001E56  6BE5               	clrf	(?_printf+5)& (0+255),b
  2853  001E58  C09E  F0E6         	movff	_time,?_printf+6
  2854  001E5C  0100               	movlb	0	; () banked
  2855  001E5E  6BE7               	clrf	(?_printf+7)& (0+255),b
  2856  001E60  EC97  F003         	call	_printf	;wreg free
  2857  001E64  0012               	return	
  2858  001E66                     __end_of_date_time:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           intcon	equ	0xFF2
  2867                           intcon2	equ	0xFF1
  2868                           intcon3	equ	0xFF0
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           indf2	equ	0xFDF
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _I2C_Master_Read *****************
  2879 ;; Defined at:
  2880 ;;		line 67 in file "I2C.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  a               1    wreg     unsigned char 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  a               1   17[BANK0 ] unsigned char 
  2885 ;;  temp            1   18[BANK0 ] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      unsigned char 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;Total ram usage:        2 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    8
  2902 ;; This function calls:
  2903 ;;		_I2C_Master_Wait
  2904 ;; This function is called by:
  2905 ;;		_date_time
  2906 ;;		_read_colorsensor
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text8
  2911  002BF6                     __ptext8:
  2912                           	opt stack 0
  2913  002BF6                     _I2C_Master_Read:
  2914                           	opt stack 20
  2915                           
  2916                           ;incstack = 0
  2917                           ;I2C_Master_Read@a stored from wreg
  2918  002BF6  0100               	movlb	0	; () banked
  2919  002BF8  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2920                           
  2921                           ;I2C.c: 69: unsigned char temp;
  2922                           ;I2C.c: 70: I2C_Master_Wait();
  2923  002BFA  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  2924                           
  2925                           ;I2C.c: 71: RCEN = 1;
  2926  002BFE  86C5               	bsf	4037,3,c	;volatile
  2927                           
  2928                           ;I2C.c: 72: I2C_Master_Wait();
  2929  002C00  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  2930                           
  2931                           ;I2C.c: 73: temp = SSPBUF;
  2932  002C04  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2933                           
  2934                           ;I2C.c: 74: I2C_Master_Wait();
  2935  002C08  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  2936                           
  2937                           ;I2C.c: 75: ACKDT = (a)?0:1;
  2938  002C0C  0100               	movlb	0	; () banked
  2939  002C0E  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2940  002C10  0100               	movlb	0	; () banked
  2941  002C12  A4D8               	btfss	status,2,c
  2942  002C14  D002               	goto	u2960
  2943  002C16  8AC5               	bsf	4037,5,c	;volatile
  2944  002C18  D001               	goto	l3441
  2945  002C1A                     u2960:
  2946  002C1A  9AC5               	bcf	4037,5,c	;volatile
  2947  002C1C                     l3441:
  2948                           
  2949                           ;I2C.c: 76: ACKEN = 1;
  2950  002C1C  88C5               	bsf	4037,4,c	;volatile
  2951                           
  2952                           ;I2C.c: 77: return temp;
  2953  002C1E  0100               	movlb	0	; () banked
  2954  002C20  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2955  002C22  0012               	return	
  2956  002C24                     __end_of_I2C_Master_Read:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           intcon	equ	0xFF2
  2965                           intcon2	equ	0xFF1
  2966                           intcon3	equ	0xFF0
  2967                           postinc0	equ	0xFEE
  2968                           wreg	equ	0xFE8
  2969                           indf2	equ	0xFDF
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _bottle_time *****************
  2977 ;; Defined at:
  2978 ;;		line 446 in file "main.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:   10
  2999 ;; This function calls:
  3000 ;;		_lcdInst
  3001 ;;		_printf
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text9
  3008  002B8A                     __ptext9:
  3009                           	opt stack 0
  3010  002B8A                     _bottle_time:
  3011                           	opt stack 20
  3012                           
  3013                           ;main.c: 447: lcdInst(0b10000000);
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;incstack = 0
  3017  002B8A  0E80               	movlw	128
  3018  002B8C  ECA6  F016         	call	_lcdInst
  3019                           
  3020                           ;main.c: 448: printf("Total Operation       ");
  3021  002B90  0EAE               	movlw	low STR_17
  3022  002B92  0100               	movlb	0	; () banked
  3023  002B94  6FE0               	movwf	printf@f& (0+255),b
  3024  002B96  0EFE               	movlw	high STR_17
  3025  002B98  0100               	movlb	0	; () banked
  3026  002B9A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3027  002B9C  EC97  F003         	call	_printf	;wreg free
  3028                           
  3029                           ;main.c: 449: lcdInst(0b11000000);
  3030  002BA0  0EC0               	movlw	192
  3031  002BA2  ECA6  F016         	call	_lcdInst
  3032                           
  3033                           ;main.c: 450: printf("Time: %d s       ", operation_time);
  3034  002BA6  0EF3               	movlw	low STR_18
  3035  002BA8  0100               	movlb	0	; () banked
  3036  002BAA  6FE0               	movwf	printf@f& (0+255),b
  3037  002BAC  0EFE               	movlw	high STR_18
  3038  002BAE  0100               	movlb	0	; () banked
  3039  002BB0  6FE1               	movwf	(printf@f+1)& (0+255),b
  3040  002BB2  C0B7  F0E2         	movff	_operation_time,?_printf+2
  3041  002BB6  C0B8  F0E3         	movff	_operation_time+1,?_printf+3
  3042  002BBA  EC97  F003         	call	_printf	;wreg free
  3043  002BBE  0012               	return	
  3044  002BC0                     __end_of_bottle_time:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           intcon	equ	0xFF2
  3053                           intcon2	equ	0xFF1
  3054                           intcon3	equ	0xFF0
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _bottle_count *****************
  3065 ;; Defined at:
  3066 ;;		line 404 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:   10
  3087 ;; This function calls:
  3088 ;;		___awmod
  3089 ;;		_lcdInst
  3090 ;;		_printf
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text10
  3097  0011C4                     __ptext10:
  3098                           	opt stack 0
  3099  0011C4                     _bottle_count:
  3100                           	opt stack 20
  3101                           
  3102                           ;main.c: 405: switch(bottle_count_disp % 5){
  3103                           
  3104                           ;incstack = 0
  3105  0011C4  D0A7               	goto	l5141
  3106  0011C6                     l5105:
  3107                           
  3108                           ;main.c: 407: lcdInst(0b10000000);
  3109  0011C6  0E80               	movlw	128
  3110  0011C8  ECA6  F016         	call	_lcdInst
  3111                           
  3112                           ;main.c: 408: printf("Bottle Count    ");
  3113  0011CC  0EB7               	movlw	low STR_6
  3114  0011CE  0100               	movlb	0	; () banked
  3115  0011D0  6FE0               	movwf	printf@f& (0+255),b
  3116  0011D2  0EFF               	movlw	high STR_6
  3117  0011D4  0100               	movlb	0	; () banked
  3118  0011D6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3119  0011D8  EC97  F003         	call	_printf	;wreg free
  3120                           
  3121                           ;main.c: 409: lcdInst(0b11000000);
  3122  0011DC  0EC0               	movlw	192
  3123  0011DE  ECA6  F016         	call	_lcdInst
  3124                           
  3125                           ;main.c: 410: printf("Total: %d       ", total_bottle_count);
  3126  0011E2  0EA6               	movlw	low STR_7
  3127  0011E4  0100               	movlb	0	; () banked
  3128  0011E6  6FE0               	movwf	printf@f& (0+255),b
  3129  0011E8  0EFF               	movlw	high STR_7
  3130  0011EA  0100               	movlb	0	; () banked
  3131  0011EC  6FE1               	movwf	(printf@f+1)& (0+255),b
  3132  0011EE  C0B9  F0E2         	movff	_total_bottle_count,?_printf+2
  3133  0011F2  C0BA  F0E3         	movff	_total_bottle_count+1,?_printf+3
  3134  0011F6  EC97  F003         	call	_printf	;wreg free
  3135                           
  3136                           ;main.c: 411: break;
  3137  0011FA  0012               	return	
  3138  0011FC                     l5111:
  3139                           
  3140                           ;main.c: 413: lcdInst(0b10000000);
  3141  0011FC  0E80               	movlw	128
  3142  0011FE  ECA6  F016         	call	_lcdInst
  3143                           
  3144                           ;main.c: 414: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3145  001202  0E05               	movlw	low STR_8
  3146  001204  0100               	movlb	0	; () banked
  3147  001206  6FE0               	movwf	printf@f& (0+255),b
  3148  001208  0EFF               	movlw	high STR_8
  3149  00120A  0100               	movlb	0	; () banked
  3150  00120C  6FE1               	movwf	(printf@f+1)& (0+255),b
  3151  00120E  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3152  001212  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3153  001216  EC97  F003         	call	_printf	;wreg free
  3154                           
  3155                           ;main.c: 415: lcdInst(0b11000000);
  3156  00121A  0EC0               	movlw	192
  3157  00121C  ECA6  F016         	call	_lcdInst
  3158                           
  3159                           ;main.c: 416: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3160  001220  0E29               	movlw	low STR_9
  3161  001222  0100               	movlb	0	; () banked
  3162  001224  6FE0               	movwf	printf@f& (0+255),b
  3163  001226  0EFF               	movlw	high STR_9
  3164  001228  0100               	movlb	0	; () banked
  3165  00122A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3166  00122C  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3167  001230  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3168  001234  EC97  F003         	call	_printf	;wreg free
  3169                           
  3170                           ;main.c: 417: break;
  3171  001238  0012               	return	
  3172  00123A                     l5117:
  3173                           
  3174                           ;main.c: 419: lcdInst(0b10000000);
  3175  00123A  0E80               	movlw	128
  3176  00123C  ECA6  F016         	call	_lcdInst
  3177                           
  3178                           ;main.c: 420: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3179  001240  0E17               	movlw	low STR_10
  3180  001242  0100               	movlb	0	; () banked
  3181  001244  6FE0               	movwf	printf@f& (0+255),b
  3182  001246  0EFF               	movlw	high STR_10
  3183  001248  0100               	movlb	0	; () banked
  3184  00124A  6FE1               	movwf	(printf@f+1)& (0+255),b
  3185  00124C  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3186  001250  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3187  001254  EC97  F003         	call	_printf	;wreg free
  3188                           
  3189                           ;main.c: 421: lcdInst(0b11000000);
  3190  001258  0EC0               	movlw	192
  3191  00125A  ECA6  F016         	call	_lcdInst
  3192                           
  3193                           ;main.c: 422: printf("YOP-CAP-LBL: %d  ", yop_count);
  3194  00125E  0E3B               	movlw	low STR_11
  3195  001260  0100               	movlb	0	; () banked
  3196  001262  6FE0               	movwf	printf@f& (0+255),b
  3197  001264  0EFF               	movlw	high STR_11
  3198  001266  0100               	movlb	0	; () banked
  3199  001268  6FE1               	movwf	(printf@f+1)& (0+255),b
  3200  00126A  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3201  00126E  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3202  001272  EC97  F003         	call	_printf	;wreg free
  3203                           
  3204                           ;main.c: 423: break;
  3205  001276  0012               	return	
  3206  001278                     l5123:
  3207                           
  3208                           ;main.c: 425: lcdInst(0b10000000);
  3209  001278  0E80               	movlw	128
  3210  00127A  ECA6  F016         	call	_lcdInst
  3211                           
  3212                           ;main.c: 426: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3213  00127E  0E4D               	movlw	low STR_12
  3214  001280  0100               	movlb	0	; () banked
  3215  001282  6FE0               	movwf	printf@f& (0+255),b
  3216  001284  0EFF               	movlw	high STR_12
  3217  001286  0100               	movlb	0	; () banked
  3218  001288  6FE1               	movwf	(printf@f+1)& (0+255),b
  3219  00128A  C0AD  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3220  00128E  C0AE  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3221  001292  EC97  F003         	call	_printf	;wreg free
  3222                           
  3223                           ;main.c: 427: lcdInst(0b11000000);
  3224  001296  0EC0               	movlw	192
  3225  001298  ECA6  F016         	call	_lcdInst
  3226                           
  3227                           ;main.c: 428: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3228  00129C  0E71               	movlw	low STR_13
  3229  00129E  0100               	movlb	0	; () banked
  3230  0012A0  6FE0               	movwf	printf@f& (0+255),b
  3231  0012A2  0EFF               	movlw	high STR_13
  3232  0012A4  0100               	movlb	0	; () banked
  3233  0012A6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3234  0012A8  C0AB  F0E2         	movff	_eskacap_count,?_printf+2
  3235  0012AC  C0AC  F0E3         	movff	_eskacap_count+1,?_printf+3
  3236  0012B0  EC97  F003         	call	_printf	;wreg free
  3237                           
  3238                           ;main.c: 429: break;
  3239  0012B4  0012               	return	
  3240  0012B6                     l5129:
  3241                           
  3242                           ;main.c: 431: lcdInst(0b10000000);
  3243  0012B6  0E80               	movlw	128
  3244  0012B8  ECA6  F016         	call	_lcdInst
  3245                           
  3246                           ;main.c: 432: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3247  0012BC  0E5F               	movlw	low STR_14
  3248  0012BE  0100               	movlb	0	; () banked
  3249  0012C0  6FE0               	movwf	printf@f& (0+255),b
  3250  0012C2  0EFF               	movlw	high STR_14
  3251  0012C4  0100               	movlb	0	; () banked
  3252  0012C6  6FE1               	movwf	(printf@f+1)& (0+255),b
  3253  0012C8  C0AF  F0E2         	movff	_eskalbl_count,?_printf+2
  3254  0012CC  C0B0  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3255  0012D0  EC97  F003         	call	_printf	;wreg free
  3256                           
  3257                           ;main.c: 433: lcdInst(0b11000000);
  3258  0012D4  0EC0               	movlw	192
  3259  0012D6  ECA6  F016         	call	_lcdInst
  3260                           
  3261                           ;main.c: 434: printf("ESKA-CAP-LBL: %d ", eska_count);
  3262  0012DA  0E83               	movlw	low STR_15
  3263  0012DC  0100               	movlb	0	; () banked
  3264  0012DE  6FE0               	movwf	printf@f& (0+255),b
  3265  0012E0  0EFF               	movlw	high STR_15
  3266  0012E2  0100               	movlb	0	; () banked
  3267  0012E4  6FE1               	movwf	(printf@f+1)& (0+255),b
  3268  0012E6  C0A9  F0E2         	movff	_eska_count,?_printf+2
  3269  0012EA  C0AA  F0E3         	movff	_eska_count+1,?_printf+3
  3270  0012EE  EC97  F003         	call	_printf	;wreg free
  3271                           
  3272                           ;main.c: 435: break;
  3273  0012F2  0012               	return	
  3274  0012F4                     l5135:
  3275                           
  3276                           ;main.c: 438: lcdInst(0b10000000);
  3277  0012F4  0E80               	movlw	128
  3278  0012F6  ECA6  F016         	call	_lcdInst
  3279                           
  3280                           ;main.c: 439: printf("ERROR: %d", bottle_count_disp);
  3281  0012FA  0EF5               	movlw	low STR_16
  3282  0012FC  0100               	movlb	0	; () banked
  3283  0012FE  6FE0               	movwf	printf@f& (0+255),b
  3284  001300  0EFF               	movlw	high STR_16
  3285  001302  0100               	movlb	0	; () banked
  3286  001304  6FE1               	movwf	(printf@f+1)& (0+255),b
  3287  001306  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3288  00130A  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3289  00130E  EC97  F003         	call	_printf	;wreg free
  3290  001312  D7F0               	goto	l5135
  3291  001314                     l5141:
  3292  001314  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3293  001318  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3294  00131C  0E00               	movlw	0
  3295  00131E  0100               	movlb	0	; () banked
  3296  001320  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3297  001322  0E05               	movlw	5
  3298  001324  6FD6               	movwf	___awmod@divisor& (0+255),b
  3299  001326  ECC8  F011         	call	___awmod	;wreg free
  3300                           
  3301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3302                           ; Switch size 1, requested type "space"
  3303                           ; Number of cases is 1, Range of values is 0 to 0
  3304                           ; switch strategies available:
  3305                           ; Name         Instructions Cycles
  3306                           ; simple_byte            4     3 (average)
  3307                           ;	Chosen strategy is simple_byte
  3308  00132A  0100               	movlb	0	; () banked
  3309  00132C  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3310  00132E  0A00               	xorlw	0	; case 0
  3311  001330  A4D8               	btfss	status,2,c
  3312  001332  D7E0               	goto	l5135
  3313                           
  3314                           ; BSR set to: 0
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 5, Range of values is 0 to 4
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           16     9 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  001334  0100               	movlb	0	; () banked
  3322  001336  51D4               	movf	?___awmod& (0+255),w,b
  3323  001338  0A00               	xorlw	0	; case 0
  3324  00133A  B4D8               	btfsc	status,2,c
  3325  00133C  D744               	goto	l5105
  3326  00133E  0A01               	xorlw	1	; case 1
  3327  001340  B4D8               	btfsc	status,2,c
  3328  001342  D75C               	goto	l5111
  3329  001344  0A03               	xorlw	3	; case 2
  3330  001346  B4D8               	btfsc	status,2,c
  3331  001348  D778               	goto	l5117
  3332  00134A  0A01               	xorlw	1	; case 3
  3333  00134C  B4D8               	btfsc	status,2,c
  3334  00134E  D794               	goto	l5123
  3335  001350  0A07               	xorlw	7	; case 4
  3336  001352  B4D8               	btfsc	status,2,c
  3337  001354  D7B0               	goto	l5129
  3338  001356  D7CE               	goto	l5135
  3339  001358                     __end_of_bottle_count:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           prodh	equ	0xFF4
  3346                           prodl	equ	0xFF3
  3347                           intcon	equ	0xFF2
  3348                           intcon2	equ	0xFF1
  3349                           intcon3	equ	0xFF0
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _printf *****************
  3360 ;; Defined at:
  3361 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3364 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  3365 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  3366 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  3367 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  3368 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  3369 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  idx             1    0[BANK1 ] unsigned char 
  3372 ;;  tmpval          4    0        struct .
  3373 ;;  cp              3    0        PTR const unsigned char 
  3374 ;;  width           2    7[BANK1 ] int 
  3375 ;;  val             2    4[BANK1 ] unsigned int 
  3376 ;;  ap              2    1[BANK1 ] PTR void [1]
  3377 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3378 ;;  len             2    0        unsigned int 
  3379 ;;  c               1    9[BANK1 ] char 
  3380 ;;  flag            1    6[BANK1 ] unsigned char 
  3381 ;;  prec            1    3[BANK1 ] char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   28[BANK0 ] int 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:       22 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    9
  3398 ;; This function calls:
  3399 ;;		___lwdiv
  3400 ;;		___lwmod
  3401 ;;		___wmul
  3402 ;;		_isdigit
  3403 ;;		_putch
  3404 ;; This function is called by:
  3405 ;;		_date_time
  3406 ;;		_bottle_count
  3407 ;;		_bottle_time
  3408 ;;		_operation
  3409 ;;		_operationend
  3410 ;;		_emergencystop
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           	psect	text11
  3415  00072E                     __ptext11:
  3416                           	opt stack 0
  3417  00072E                     _printf:
  3418                           	opt stack 20
  3419                           
  3420                           ;doprnt.c: 466: va_list ap;
  3421                           ;doprnt.c: 499: signed char c;
  3422                           ;doprnt.c: 501: int width;
  3423                           ;doprnt.c: 506: signed char prec;
  3424                           ;doprnt.c: 508: unsigned char flag;
  3425                           ;doprnt.c: 523: union {
  3426                           ;doprnt.c: 524: unsigned long vd;
  3427                           ;doprnt.c: 525: double integ;
  3428                           ;doprnt.c: 526: } tmpval;
  3429                           ;doprnt.c: 528: unsigned int val;
  3430                           ;doprnt.c: 529: unsigned len;
  3431                           ;doprnt.c: 530: const char * cp;
  3432                           ;doprnt.c: 533: *ap = __va_start();
  3433                           
  3434                           ;incstack = 0
  3435  00072E  0EE2               	movlw	low (?_printf+2)
  3436  000730  0101               	movlb	1	; () banked
  3437  000732  6F01               	movwf	printf@ap& (0+255),b
  3438  000734  0E00               	movlw	high (?_printf+2)
  3439  000736  0101               	movlb	1	; () banked
  3440  000738  6F02               	movwf	(printf@ap+1)& (0+255),b
  3441                           
  3442                           ;doprnt.c: 536: while(c = *f++) {
  3443  00073A  D1D5               	goto	l5009
  3444  00073C                     l4879:
  3445                           
  3446                           ; BSR set to: 1
  3447                           ;doprnt.c: 538: if(c != '%')
  3448  00073C  0E25               	movlw	37
  3449  00073E  0101               	movlb	1	; () banked
  3450  000740  1909               	xorwf	printf@c& (0+255),w,b
  3451  000742  B4D8               	btfsc	status,2,c
  3452  000744  D005               	goto	l4883
  3453                           
  3454                           ; BSR set to: 1
  3455                           ;doprnt.c: 540: {
  3456                           ;doprnt.c: 541: (putch(c) );
  3457  000746  0101               	movlb	1	; () banked
  3458  000748  5109               	movf	printf@c& (0+255),w,b
  3459  00074A  EC9E  F016         	call	_putch
  3460                           
  3461                           ;doprnt.c: 542: continue;
  3462  00074E  D1CB               	goto	l5009
  3463  000750                     l4883:
  3464                           
  3465                           ;doprnt.c: 543: }
  3466                           ;doprnt.c: 546: width = 0;
  3467  000750  0E00               	movlw	0
  3468  000752  0101               	movlb	1	; () banked
  3469  000754  6F08               	movwf	(printf@width+1)& (0+255),b
  3470  000756  0E00               	movlw	0
  3471  000758  6F07               	movwf	printf@width& (0+255),b
  3472                           
  3473                           ;doprnt.c: 548: flag = 0;
  3474  00075A  0E00               	movlw	0
  3475  00075C  0101               	movlb	1	; () banked
  3476  00075E  6F06               	movwf	printf@flag& (0+255),b
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;doprnt.c: 551: switch(*f) {
  3480                           
  3481                           ;doprnt.c: 550: for(;;) {
  3482  000760  D005               	goto	l4889
  3483  000762                     l4885:
  3484                           
  3485                           ;doprnt.c: 580: flag |= 0x04;
  3486  000762  0101               	movlb	1	; () banked
  3487  000764  8506               	bsf	printf@flag& (0+255),2,b
  3488                           
  3489                           ;doprnt.c: 581: f++;
  3490  000766  0100               	movlb	0	; () banked
  3491  000768  4BE0               	infsnz	printf@f& (0+255),f,b
  3492  00076A  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3493  00076C                     l4889:
  3494  00076C  C0E0  FFF6         	movff	printf@f,tblptrl
  3495  000770  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3496  000774                     	if	0	;tblptru may be non-zero
  3497  000774                     	endif
  3498  000774                     	if	0	;tblptru may be non-zero
  3499  000774                     	endif
  3500  000774  0008               	tblrd		*
  3501  000776  50F5               	movf	tablat,w,c
  3502                           
  3503                           ; Switch size 1, requested type "space"
  3504                           ; Number of cases is 1, Range of values is 48 to 48
  3505                           ; switch strategies available:
  3506                           ; Name         Instructions Cycles
  3507                           ; simple_byte            4     3 (average)
  3508                           ;	Chosen strategy is simple_byte
  3509  000778  0A30               	xorlw	48	; case 48
  3510  00077A  B4D8               	btfsc	status,2,c
  3511  00077C  D7F2               	goto	l4885
  3512                           
  3513                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3514                           
  3515                           ;doprnt.c: 586: }
  3516                           
  3517                           ;doprnt.c: 585: break;
  3518  00077E  C0E0  FFF6         	movff	printf@f,tblptrl
  3519  000782  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3520  000786                     	if	0	;tblptru may be non-zero
  3521  000786                     	endif
  3522  000786                     	if	0	;tblptru may be non-zero
  3523  000786                     	endif
  3524  000786  0008               	tblrd		*
  3525  000788  50F5               	movf	tablat,w,c
  3526  00078A  EC12  F016         	call	_isdigit
  3527  00078E  A0D8               	btfss	status,0,c
  3528  000790  D048               	goto	l4909
  3529                           
  3530                           ;doprnt.c: 598: width = 0;
  3531  000792  0E00               	movlw	0
  3532  000794  0101               	movlb	1	; () banked
  3533  000796  6F08               	movwf	(printf@width+1)& (0+255),b
  3534  000798  0E00               	movlw	0
  3535  00079A  6F07               	movwf	printf@width& (0+255),b
  3536  00079C                     l4895:
  3537                           
  3538                           ;doprnt.c: 600: width *= 10;
  3539  00079C  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3540  0007A0  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3541  0007A4  0E00               	movlw	0
  3542  0007A6  0100               	movlb	0	; () banked
  3543  0007A8  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3544  0007AA  0E0A               	movlw	10
  3545  0007AC  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3546  0007AE  ECE0  F015         	call	___wmul	;wreg free
  3547  0007B2  C0D4  F107         	movff	?___wmul,printf@width
  3548  0007B6  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3549                           
  3550                           ;doprnt.c: 601: width += *f++ - '0';
  3551  0007BA  0ED0               	movlw	208
  3552  0007BC  0100               	movlb	0	; () banked
  3553  0007BE  6FE8               	movwf	??_printf& (0+255),b
  3554  0007C0  0EFF               	movlw	255
  3555  0007C2  0100               	movlb	0	; () banked
  3556  0007C4  6FE9               	movwf	(??_printf+1)& (0+255),b
  3557  0007C6  C0E0  FFF6         	movff	printf@f,tblptrl
  3558  0007CA  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3559  0007CE                     	if	0	;tblptru may be non-zero
  3560  0007CE                     	endif
  3561  0007CE                     	if	0	;tblptru may be non-zero
  3562  0007CE                     	endif
  3563  0007CE  0008               	tblrd		*
  3564  0007D0  50F5               	movf	tablat,w,c
  3565  0007D2  0100               	movlb	0	; () banked
  3566  0007D4  6FEA               	movwf	(??_printf+2)& (0+255),b
  3567  0007D6  6BEB               	clrf	(??_printf+3)& (0+255),b
  3568  0007D8  0100               	movlb	0	; () banked
  3569  0007DA  51E8               	movf	??_printf& (0+255),w,b
  3570  0007DC  0100               	movlb	0	; () banked
  3571  0007DE  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3572  0007E0  0100               	movlb	0	; () banked
  3573  0007E2  51E9               	movf	(??_printf+1)& (0+255),w,b
  3574  0007E4  0100               	movlb	0	; () banked
  3575  0007E6  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3576  0007E8  0100               	movlb	0	; () banked
  3577  0007EA  51EA               	movf	(??_printf+2)& (0+255),w,b
  3578  0007EC  0101               	movlb	1	; () banked
  3579  0007EE  2707               	addwf	printf@width& (0+255),f,b
  3580  0007F0  0100               	movlb	0	; () banked
  3581  0007F2  51EB               	movf	(??_printf+3)& (0+255),w,b
  3582  0007F4  0101               	movlb	1	; () banked
  3583  0007F6  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 1
  3586  0007F8  0100               	movlb	0	; () banked
  3587  0007FA  4BE0               	infsnz	printf@f& (0+255),f,b
  3588  0007FC  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3592  0007FE  C0E0  FFF6         	movff	printf@f,tblptrl
  3593  000802  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3594  000806                     	if	0	;tblptru may be non-zero
  3595  000806                     	endif
  3596  000806                     	if	0	;tblptru may be non-zero
  3597  000806                     	endif
  3598  000806  0008               	tblrd		*
  3599  000808  50F5               	movf	tablat,w,c
  3600  00080A  EC12  F016         	call	_isdigit
  3601  00080E  A0D8               	btfss	status,0,c
  3602  000810  D008               	goto	l4909
  3603  000812  D7C4               	goto	l4895
  3604  000814                     l4903:
  3605                           
  3606                           ;doprnt.c: 721: flag |= 0x80;
  3607  000814  0101               	movlb	1	; () banked
  3608  000816  8F06               	bsf	printf@flag& (0+255),7,b
  3609                           
  3610                           ;doprnt.c: 723: break;
  3611  000818  D020               	goto	l4911
  3612  00081A                     l4905:
  3613                           
  3614                           ; BSR set to: 1
  3615                           ;doprnt.c: 818: flag |= 0xC0;
  3616  00081A  0EC0               	movlw	192
  3617  00081C  0101               	movlb	1	; () banked
  3618  00081E  1306               	iorwf	printf@flag& (0+255),f,b
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;doprnt.c: 822: }
  3622                           
  3623                           ;doprnt.c: 819: break;
  3624  000820  D01C               	goto	l4911
  3625  000822                     l4909:
  3626  000822  C0E0  FFF6         	movff	printf@f,tblptrl
  3627  000826  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3628  00082A  0100               	movlb	0	; () banked
  3629  00082C  4BE0               	infsnz	printf@f& (0+255),f,b
  3630  00082E  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3631  000830                     	if	0	;tblptru may be non-zero
  3632  000830                     	endif
  3633  000830                     	if	0	;tblptru may be non-zero
  3634  000830                     	endif
  3635  000830  0008               	tblrd		*
  3636  000832  CFF5 F109          	movff	tablat,printf@c
  3637  000836  0101               	movlb	1	; () banked
  3638  000838  5109               	movf	printf@c& (0+255),w,b
  3639                           
  3640                           ; Switch size 1, requested type "space"
  3641                           ; Number of cases is 5, Range of values is 0 to 120
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; simple_byte           16     9 (average)
  3645                           ;	Chosen strategy is simple_byte
  3646  00083A  0A00               	xorlw	0	; case 0
  3647  00083C  B4D8               	btfsc	status,2,c
  3648  00083E  0012               	return	
  3649  000840  0A64               	xorlw	100	; case 100
  3650  000842  B4D8               	btfsc	status,2,c
  3651  000844  D00A               	goto	l4911
  3652  000846  0A0D               	xorlw	13	; case 105
  3653  000848  B4D8               	btfsc	status,2,c
  3654  00084A  D007               	goto	l4911
  3655  00084C  0A1C               	xorlw	28	; case 117
  3656  00084E  B4D8               	btfsc	status,2,c
  3657  000850  D7E4               	goto	l4905
  3658  000852  0A0D               	xorlw	13	; case 120
  3659  000854  B4D8               	btfsc	status,2,c
  3660  000856  D7DE               	goto	l4903
  3661  000858  D146               	goto	l5009
  3662  00085A                     l4911:
  3663                           
  3664                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3665  00085A  C106  F0E8         	movff	printf@flag,??_printf
  3666  00085E  0EC0               	movlw	192
  3667  000860  0100               	movlb	0	; () banked
  3668  000862  17E8               	andwf	??_printf& (0+255),f,b
  3669  000864  A4D8               	btfss	status,2,c
  3670  000866  D019               	goto	l4923
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;doprnt.c: 1253: {
  3674                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3675  000868  C101  FFD9         	movff	printf@ap,fsr2l
  3676  00086C  C102  FFDA         	movff	printf@ap+1,fsr2h
  3677  000870  CFDE F104          	movff	postinc2,printf@val
  3678  000874  CFDD F105          	movff	postdec2,printf@val+1
  3679                           
  3680                           ; BSR set to: 0
  3681  000878  0E02               	movlw	2
  3682  00087A  0101               	movlb	1	; () banked
  3683  00087C  2701               	addwf	printf@ap& (0+255),f,b
  3684  00087E  0E00               	movlw	0
  3685  000880  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3686                           
  3687                           ; BSR set to: 1
  3688                           ;doprnt.c: 1261: if((int)val < 0) {
  3689  000882  0101               	movlb	1	; () banked
  3690  000884  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3691  000886  D053               	goto	l4957
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;doprnt.c: 1262: flag |= 0x03;
  3695  000888  0E03               	movlw	3
  3696  00088A  0101               	movlb	1	; () banked
  3697  00088C  1306               	iorwf	printf@flag& (0+255),f,b
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;doprnt.c: 1263: val = -val;
  3701  00088E  0101               	movlb	1	; () banked
  3702  000890  6D04               	negf	printf@val& (0+255),b
  3703  000892  1F05               	comf	(printf@val+1)& (0+255),f,b
  3704  000894  B0D8               	btfsc	status,0,c
  3705  000896  2B05               	incf	(printf@val+1)& (0+255),f,b
  3706                           
  3707                           ; BSR set to: 1
  3708                           ;doprnt.c: 1264: }
  3709                           ;doprnt.c: 1266: }
  3710  000898  D04A               	goto	l4957
  3711  00089A                     l4923:
  3712                           
  3713                           ;doprnt.c: 1268: else
  3714                           ;doprnt.c: 1273: {
  3715                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3716  00089A  C101  FFD9         	movff	printf@ap,fsr2l
  3717  00089E  C102  FFDA         	movff	printf@ap+1,fsr2h
  3718  0008A2  CFDE F104          	movff	postinc2,printf@val
  3719  0008A6  CFDD F105          	movff	postdec2,printf@val+1
  3720  0008AA  0E02               	movlw	2
  3721  0008AC  0101               	movlb	1	; () banked
  3722  0008AE  2701               	addwf	printf@ap& (0+255),f,b
  3723  0008B0  0E00               	movlw	0
  3724  0008B2  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3725                           
  3726                           ; BSR set to: 1
  3727                           ;doprnt.c: 1287: }
  3728                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3729  0008B4  D03C               	goto	l4957
  3730  0008B6                     l4927:
  3731                           
  3732                           ; BSR set to: 1
  3733                           ;doprnt.c: 1302: case 0xC0:
  3734                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3735  0008B6  0E01               	movlw	1
  3736  0008B8  0101               	movlb	1	; () banked
  3737  0008BA  6F09               	movwf	printf@c& (0+255),b
  3738  0008BC                     l4929:
  3739                           
  3740                           ; BSR set to: 1
  3741  0008BC  0E05               	movlw	5
  3742  0008BE  0101               	movlb	1	; () banked
  3743  0008C0  1909               	xorwf	printf@c& (0+255),w,b
  3744  0008C2  B4D8               	btfsc	status,2,c
  3745  0008C4  D040               	goto	l4959
  3746                           
  3747                           ; BSR set to: 1
  3748                           ;doprnt.c: 1306: if(val < dpowers[c])
  3749                           
  3750                           ; BSR set to: 1
  3751                           
  3752                           ; BSR set to: 1
  3753  0008C6  0101               	movlb	1	; () banked
  3754  0008C8  5109               	movf	printf@c& (0+255),w,b
  3755  0008CA  0D02               	mullw	2
  3756  0008CC  0EC8               	movlw	low _dpowers
  3757  0008CE  24F3               	addwf	prodl,w,c
  3758  0008D0  6EF6               	movwf	tblptrl,c
  3759  0008D2  0EFD               	movlw	high _dpowers
  3760  0008D4  20F4               	addwfc	prodh,w,c
  3761  0008D6  6EF7               	movwf	tblptrh,c
  3762  0008D8                     	if	0	;There are less than 3 active tblptr bytes
  3763  0008D8                     	endif
  3764  0008D8  0009               	tblrd		*+
  3765  0008DA  50F5               	movf	tablat,w,c
  3766  0008DC  0101               	movlb	1	; () banked
  3767  0008DE  5D04               	subwf	printf@val& (0+255),w,b
  3768  0008E0  0009               	tblrd		*+
  3769  0008E2  50F5               	movf	tablat,w,c
  3770  0008E4  0101               	movlb	1	; () banked
  3771  0008E6  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3772  0008E8  A0D8               	btfss	status,0,c
  3773  0008EA  D02D               	goto	l4959
  3774                           
  3775                           ; BSR set to: 1
  3776                           
  3777                           ; BSR set to: 1
  3778                           
  3779                           ; BSR set to: 1
  3780                           ;doprnt.c: 1307: break;
  3781  0008EC  0101               	movlb	1	; () banked
  3782  0008EE  2B09               	incf	printf@c& (0+255),f,b
  3783  0008F0  D7E5               	goto	l4929
  3784  0008F2                     l4941:
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3788  0008F2  0E01               	movlw	1
  3789  0008F4  0101               	movlb	1	; () banked
  3790  0008F6  6F09               	movwf	printf@c& (0+255),b
  3791  0008F8                     l4943:
  3792                           
  3793                           ; BSR set to: 1
  3794  0008F8  0E04               	movlw	4
  3795  0008FA  0101               	movlb	1	; () banked
  3796  0008FC  1909               	xorwf	printf@c& (0+255),w,b
  3797  0008FE  B4D8               	btfsc	status,2,c
  3798  000900  D022               	goto	l4959
  3799                           
  3800                           ; BSR set to: 1
  3801                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3802                           
  3803                           ; BSR set to: 1
  3804                           
  3805                           ; BSR set to: 1
  3806  000902  0101               	movlb	1	; () banked
  3807  000904  5109               	movf	printf@c& (0+255),w,b
  3808  000906  0D02               	mullw	2
  3809  000908  0ED2               	movlw	low _hexpowers
  3810  00090A  24F3               	addwf	prodl,w,c
  3811  00090C  6EF6               	movwf	tblptrl,c
  3812  00090E  0EFD               	movlw	high _hexpowers
  3813  000910  20F4               	addwfc	prodh,w,c
  3814  000912  6EF7               	movwf	tblptrh,c
  3815  000914                     	if	0	;There are less than 3 active tblptr bytes
  3816  000914                     	endif
  3817  000914  0009               	tblrd		*+
  3818  000916  50F5               	movf	tablat,w,c
  3819  000918  0101               	movlb	1	; () banked
  3820  00091A  5D04               	subwf	printf@val& (0+255),w,b
  3821  00091C  0009               	tblrd		*+
  3822  00091E  50F5               	movf	tablat,w,c
  3823  000920  0101               	movlb	1	; () banked
  3824  000922  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3825  000924  A0D8               	btfss	status,0,c
  3826  000926  D00F               	goto	l4959
  3827                           
  3828                           ; BSR set to: 1
  3829                           
  3830                           ; BSR set to: 1
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;doprnt.c: 1318: break;
  3834  000928  0101               	movlb	1	; () banked
  3835  00092A  2B09               	incf	printf@c& (0+255),f,b
  3836  00092C  D7E5               	goto	l4943
  3837  00092E                     l4957:
  3838                           
  3839                           ; BSR set to: 1
  3840  00092E  0101               	movlb	1	; () banked
  3841  000930  5106               	movf	printf@flag& (0+255),w,b
  3842  000932  0BC0               	andlw	192
  3843                           
  3844                           ; Switch size 1, requested type "space"
  3845                           ; Number of cases is 3, Range of values is 0 to 192
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte           10     6 (average)
  3849                           ;	Chosen strategy is simple_byte
  3850  000934  0A00               	xorlw	0	; case 0
  3851  000936  B4D8               	btfsc	status,2,c
  3852  000938  D7BE               	goto	l4927
  3853  00093A  0A80               	xorlw	128	; case 128
  3854  00093C  B4D8               	btfsc	status,2,c
  3855  00093E  D7D9               	goto	l4941
  3856  000940  0A40               	xorlw	64	; case 192
  3857  000942  B4D8               	btfsc	status,2,c
  3858  000944  D7B8               	goto	l4927
  3859  000946                     l4959:
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3863  000946  0101               	movlb	1	; () banked
  3864  000948  5107               	movf	printf@width& (0+255),w,b
  3865  00094A  0101               	movlb	1	; () banked
  3866  00094C  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3867  00094E  B4D8               	btfsc	status,2,c
  3868  000950  D00B               	goto	l4965
  3869                           
  3870                           ; BSR set to: 1
  3871  000952  C106  F0E8         	movff	printf@flag,??_printf
  3872  000956  0E03               	movlw	3
  3873  000958  0100               	movlb	0	; () banked
  3874  00095A  17E8               	andwf	??_printf& (0+255),f,b
  3875  00095C  B4D8               	btfsc	status,2,c
  3876  00095E  D004               	goto	l4965
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 1346: width--;
  3880  000960  0101               	movlb	1	; () banked
  3881  000962  0707               	decf	printf@width& (0+255),f,b
  3882  000964  A0D8               	btfss	status,0,c
  3883  000966  0708               	decf	(printf@width+1)& (0+255),f,b
  3884  000968                     l4965:
  3885                           
  3886                           ;doprnt.c: 1381: if(width > c)
  3887  000968  0E80               	movlw	128
  3888  00096A  0101               	movlb	1	; () banked
  3889  00096C  BF09               	btfsc	printf@c& (0+255),7,b
  3890  00096E  0E7F               	movlw	127
  3891  000970  0100               	movlb	0	; () banked
  3892  000972  6FE8               	movwf	??_printf& (0+255),b
  3893  000974  0101               	movlb	1	; () banked
  3894  000976  5107               	movf	printf@width& (0+255),w,b
  3895  000978  0101               	movlb	1	; () banked
  3896  00097A  5D09               	subwf	printf@c& (0+255),w,b
  3897  00097C  0101               	movlb	1	; () banked
  3898  00097E  5108               	movf	(printf@width+1)& (0+255),w,b
  3899  000980  0A80               	xorlw	128
  3900  000982  0100               	movlb	0	; () banked
  3901  000984  59E8               	subwfb	??_printf& (0+255),w,b
  3902  000986  B0D8               	btfsc	status,0,c
  3903  000988  D00B               	goto	l4969
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;doprnt.c: 1382: width -= c;
  3907  00098A  0101               	movlb	1	; () banked
  3908  00098C  5109               	movf	printf@c& (0+255),w,b
  3909  00098E  0101               	movlb	1	; () banked
  3910  000990  5F07               	subwf	printf@width& (0+255),f,b
  3911  000992  0E00               	movlw	0
  3912  000994  0101               	movlb	1	; () banked
  3913  000996  BF09               	btfsc	printf@c& (0+255),7,b
  3914  000998  0EFF               	movlw	255
  3915  00099A  0101               	movlb	1	; () banked
  3916  00099C  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3917  00099E  D005               	goto	l4971
  3918  0009A0                     l4969:
  3919                           
  3920                           ;doprnt.c: 1383: else
  3921                           ;doprnt.c: 1384: width = 0;
  3922  0009A0  0E00               	movlw	0
  3923  0009A2  0101               	movlb	1	; () banked
  3924  0009A4  6F08               	movwf	(printf@width+1)& (0+255),b
  3925  0009A6  0E00               	movlw	0
  3926  0009A8  6F07               	movwf	printf@width& (0+255),b
  3927  0009AA                     l4971:
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;doprnt.c: 1387: if(flag & 0x04) {
  3931  0009AA  0101               	movlb	1	; () banked
  3932  0009AC  A506               	btfss	printf@flag& (0+255),2,b
  3933  0009AE  D018               	goto	l4983
  3934                           
  3935                           ; BSR set to: 1
  3936                           ;doprnt.c: 1392: if(flag & 0x03)
  3937  0009B0  C106  F0E8         	movff	printf@flag,??_printf
  3938  0009B4  0E03               	movlw	3
  3939  0009B6  0100               	movlb	0	; () banked
  3940  0009B8  17E8               	andwf	??_printf& (0+255),f,b
  3941  0009BA  B4D8               	btfsc	status,2,c
  3942  0009BC  D003               	goto	l4977
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 1393: (putch('-') );
  3946  0009BE  0E2D               	movlw	45
  3947  0009C0  EC9E  F016         	call	_putch
  3948  0009C4                     l4977:
  3949                           
  3950                           ;doprnt.c: 1415: if(width)
  3951  0009C4  0101               	movlb	1	; () banked
  3952  0009C6  5107               	movf	printf@width& (0+255),w,b
  3953  0009C8  0101               	movlb	1	; () banked
  3954  0009CA  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3955  0009CC  B4D8               	btfsc	status,2,c
  3956  0009CE  D025               	goto	l4993
  3957                           
  3958                           ; BSR set to: 1
  3959                           ;doprnt.c: 1417: (putch('0') );
  3960                           
  3961                           ; BSR set to: 1
  3962                           
  3963                           ;doprnt.c: 1416: do
  3964  0009D0  0E30               	movlw	48
  3965  0009D2  EC9E  F016         	call	_putch
  3966                           
  3967                           ;doprnt.c: 1418: while(--width);
  3968  0009D6  0101               	movlb	1	; () banked
  3969  0009D8  0707               	decf	printf@width& (0+255),f,b
  3970  0009DA  A0D8               	btfss	status,0,c
  3971  0009DC  0708               	decf	(printf@width+1)& (0+255),f,b
  3972  0009DE  D7F2               	goto	l4977
  3973  0009E0                     l4983:
  3974                           
  3975                           ; BSR set to: 1
  3976                           ;doprnt.c: 1422: {
  3977                           ;doprnt.c: 1424: if(width
  3978                           ;doprnt.c: 1428: )
  3979  0009E0  0101               	movlb	1	; () banked
  3980  0009E2  5107               	movf	printf@width& (0+255),w,b
  3981  0009E4  0101               	movlb	1	; () banked
  3982  0009E6  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3983  0009E8  B4D8               	btfsc	status,2,c
  3984  0009EA  D00D               	goto	l4989
  3985  0009EC                     l4985:
  3986                           
  3987                           ; BSR set to: 1
  3988                           ;doprnt.c: 1430: (putch(' ') );
  3989  0009EC  0E20               	movlw	32
  3990  0009EE  EC9E  F016         	call	_putch
  3991                           
  3992                           ;doprnt.c: 1431: while(--width);
  3993  0009F2  0101               	movlb	1	; () banked
  3994  0009F4  0707               	decf	printf@width& (0+255),f,b
  3995  0009F6  A0D8               	btfss	status,0,c
  3996  0009F8  0708               	decf	(printf@width+1)& (0+255),f,b
  3997  0009FA  0101               	movlb	1	; () banked
  3998  0009FC  5107               	movf	printf@width& (0+255),w,b
  3999  0009FE  0101               	movlb	1	; () banked
  4000  000A00  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4001  000A02  A4D8               	btfss	status,2,c
  4002  000A04  D7F3               	goto	l4985
  4003  000A06                     l4989:
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;doprnt.c: 1438: if(flag & 0x03)
  4007  000A06  C106  F0E8         	movff	printf@flag,??_printf
  4008  000A0A  0E03               	movlw	3
  4009  000A0C  0100               	movlb	0	; () banked
  4010  000A0E  17E8               	andwf	??_printf& (0+255),f,b
  4011  000A10  B4D8               	btfsc	status,2,c
  4012  000A12  D003               	goto	l4993
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;doprnt.c: 1439: (putch('-') );
  4016  000A14  0E2D               	movlw	45
  4017  000A16  EC9E  F016         	call	_putch
  4018  000A1A                     l4993:
  4019                           
  4020                           ;doprnt.c: 1469: }
  4021                           ;doprnt.c: 1472: prec = c;
  4022  000A1A  C109  F103         	movff	printf@c,printf@prec
  4023                           
  4024                           ;doprnt.c: 1474: while(prec--) {
  4025  000A1E  D05D               	goto	l5007
  4026  000A20                     l4995:
  4027                           
  4028                           ;doprnt.c: 1486: case 0xC0:
  4029                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4030  000A20  0101               	movlb	1	; () banked
  4031  000A22  5103               	movf	printf@prec& (0+255),w,b
  4032  000A24  0D02               	mullw	2
  4033  000A26  0EC8               	movlw	low _dpowers
  4034  000A28  24F3               	addwf	prodl,w,c
  4035  000A2A  6EF6               	movwf	tblptrl,c
  4036  000A2C  0EFD               	movlw	high _dpowers
  4037  000A2E  20F4               	addwfc	prodh,w,c
  4038  000A30  6EF7               	movwf	tblptrh,c
  4039  000A32                     	if	0	;There are less than 3 active tblptr bytes
  4040  000A32                     	endif
  4041  000A32  0009               	tblrd		*+
  4042  000A34  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4043  000A38  000A               	tblrd		*-
  4044  000A3A  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4045  000A3E  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4046  000A42  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4047  000A46  EC33  F013         	call	___lwdiv	;wreg free
  4048  000A4A  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4049  000A4E  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4050  000A52  0E00               	movlw	0
  4051  000A54  0100               	movlb	0	; () banked
  4052  000A56  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4053  000A58  0E0A               	movlw	10
  4054  000A5A  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4055  000A5C  EC12  F014         	call	___lwmod	;wreg free
  4056  000A60  0100               	movlb	0	; () banked
  4057  000A62  51DB               	movf	?___lwmod& (0+255),w,b
  4058  000A64  0F30               	addlw	48
  4059  000A66  0101               	movlb	1	; () banked
  4060  000A68  6F09               	movwf	printf@c& (0+255),b
  4061                           
  4062                           ;doprnt.c: 1491: break;
  4063  000A6A  D033               	goto	l5005
  4064  000A6C                     l4997:
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;doprnt.c: 1499: {
  4068                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4069  000A6C  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4070  000A70  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4071  000A74  0101               	movlb	1	; () banked
  4072  000A76  5103               	movf	printf@prec& (0+255),w,b
  4073  000A78  0D02               	mullw	2
  4074  000A7A  0ED2               	movlw	low _hexpowers
  4075  000A7C  24F3               	addwf	prodl,w,c
  4076  000A7E  6EF6               	movwf	tblptrl,c
  4077  000A80  0EFD               	movlw	high _hexpowers
  4078  000A82  20F4               	addwfc	prodh,w,c
  4079  000A84  6EF7               	movwf	tblptrh,c
  4080  000A86                     	if	0	;There are less than 3 active tblptr bytes
  4081  000A86                     	endif
  4082  000A86  0009               	tblrd		*+
  4083  000A88  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4084  000A8C  000A               	tblrd		*-
  4085  000A8E  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4086  000A92  EC33  F013         	call	___lwdiv	;wreg free
  4087  000A96  0100               	movlb	0	; () banked
  4088  000A98  51D4               	movf	?___lwdiv& (0+255),w,b
  4089  000A9A  0B0F               	andlw	15
  4090  000A9C  0101               	movlb	1	; () banked
  4091  000A9E  6F00               	movwf	printf@idx& (0+255),b
  4092                           
  4093                           ; BSR set to: 1
  4094                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4095  000AA0  0101               	movlb	1	; () banked
  4096  000AA2  5100               	movf	printf@idx& (0+255),w,b
  4097  000AA4  0D01               	mullw	1
  4098  000AA6  0E95               	movlw	low STR_25
  4099  000AA8  24F3               	addwf	prodl,w,c
  4100  000AAA  6EF6               	movwf	tblptrl,c
  4101  000AAC  0EFF               	movlw	high STR_25
  4102  000AAE  20F4               	addwfc	prodh,w,c
  4103  000AB0  6EF7               	movwf	tblptrh,c
  4104  000AB2                     	if	0	;There are less than 3 active tblptr bytes
  4105  000AB2                     	endif
  4106  000AB2  0008               	tblrd		*
  4107  000AB4  CFF5 F109          	movff	tablat,printf@c
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;doprnt.c: 1523: }
  4111                           
  4112                           ;doprnt.c: 1508: }
  4113                           ;doprnt.c: 1510: break;
  4114  000AB8  D00C               	goto	l5005
  4115  000ABA                     l5003:
  4116  000ABA  0101               	movlb	1	; () banked
  4117  000ABC  5106               	movf	printf@flag& (0+255),w,b
  4118  000ABE  0BC0               	andlw	192
  4119                           
  4120                           ; Switch size 1, requested type "space"
  4121                           ; Number of cases is 3, Range of values is 0 to 192
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte           10     6 (average)
  4125                           ;	Chosen strategy is simple_byte
  4126  000AC0  0A00               	xorlw	0	; case 0
  4127  000AC2  B4D8               	btfsc	status,2,c
  4128  000AC4  D7AD               	goto	l4995
  4129  000AC6  0A80               	xorlw	128	; case 128
  4130  000AC8  B4D8               	btfsc	status,2,c
  4131  000ACA  D7D0               	goto	l4997
  4132  000ACC  0A40               	xorlw	64	; case 192
  4133  000ACE  B4D8               	btfsc	status,2,c
  4134  000AD0  D7A7               	goto	l4995
  4135  000AD2                     l5005:
  4136                           
  4137                           ; BSR set to: 1
  4138                           ;doprnt.c: 1524: (putch(c) );
  4139  000AD2  0101               	movlb	1	; () banked
  4140  000AD4  5109               	movf	printf@c& (0+255),w,b
  4141  000AD6  EC9E  F016         	call	_putch
  4142  000ADA                     l5007:
  4143  000ADA  0101               	movlb	1	; () banked
  4144  000ADC  0703               	decf	printf@prec& (0+255),f,b
  4145  000ADE  0101               	movlb	1	; () banked
  4146  000AE0  2903               	incf	printf@prec& (0+255),w,b
  4147  000AE2  A4D8               	btfss	status,2,c
  4148  000AE4  D7EA               	goto	l5003
  4149  000AE6                     l5009:
  4150  000AE6  C0E0  FFF6         	movff	printf@f,tblptrl
  4151  000AEA  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4152  000AEE  0100               	movlb	0	; () banked
  4153  000AF0  4BE0               	infsnz	printf@f& (0+255),f,b
  4154  000AF2  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4155  000AF4                     	if	0	;tblptru may be non-zero
  4156  000AF4                     	endif
  4157  000AF4                     	if	0	;tblptru may be non-zero
  4158  000AF4                     	endif
  4159  000AF4  0008               	tblrd		*
  4160  000AF6  CFF5 F109          	movff	tablat,printf@c
  4161  000AFA  0101               	movlb	1	; () banked
  4162  000AFC  5109               	movf	printf@c& (0+255),w,b
  4163  000AFE  B4D8               	btfsc	status,2,c
  4164  000B00  0012               	return	
  4165  000B02  D61C               	goto	l4879
  4166  000B04                     __end_of_printf:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           intcon2	equ	0xFF1
  4176                           intcon3	equ	0xFF0
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _putch *****************
  4187 ;; Defined at:
  4188 ;;		line 31 in file "lcd.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  data            1    wreg     unsigned char 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  data            1   18[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;Total ram usage:        1 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    8
  4209 ;; This function calls:
  4210 ;;		_lcdNibble
  4211 ;; This function is called by:
  4212 ;;		_printf
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text12
  4217  002D3C                     __ptext12:
  4218                           	opt stack 0
  4219  002D3C                     _putch:
  4220                           	opt stack 20
  4221                           
  4222                           ;incstack = 0
  4223                           ;putch@data stored from wreg
  4224  002D3C  0100               	movlb	0	; () banked
  4225  002D3E  6FD6               	movwf	putch@data& (0+255),b
  4226                           
  4227                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4228  002D40  848C               	bsf	3980,2,c	;volatile
  4229                           
  4230                           ;lcd.c: 33: lcdNibble(data);
  4231  002D42  0100               	movlb	0	; () banked
  4232  002D44  51D6               	movf	putch@data& (0+255),w,b
  4233  002D46  EC43  F014         	call	_lcdNibble
  4234  002D4A  0012               	return		;funcret
  4235  002D4C                     __end_of_putch:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           intcon2	equ	0xFF1
  4245                           intcon3	equ	0xFF0
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _isdigit *****************
  4256 ;; Defined at:
  4257 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  c               1    wreg     unsigned char 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  c               1   18[BANK0 ] unsigned char 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;		None               void
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        3 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    7
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_printf
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text13
  4286  002C24                     __ptext13:
  4287                           	opt stack 0
  4288  002C24                     _isdigit:
  4289                           	opt stack 21
  4290                           
  4291                           ;incstack = 0
  4292                           ;isdigit@c stored from wreg
  4293  002C24  0100               	movlb	0	; () banked
  4294  002C26  6FD6               	movwf	isdigit@c& (0+255),b
  4295  002C28  0E00               	movlw	0
  4296  002C2A  0100               	movlb	0	; () banked
  4297  002C2C  6FD5               	movwf	_isdigit$821& (0+255),b
  4298                           
  4299                           ; BSR set to: 0
  4300  002C2E  0E3A               	movlw	58
  4301  002C30  0100               	movlb	0	; () banked
  4302  002C32  61D6               	cpfslt	isdigit@c& (0+255),b
  4303  002C34  D007               	goto	l4825
  4304                           
  4305                           ; BSR set to: 0
  4306  002C36  0E2F               	movlw	47
  4307  002C38  0100               	movlb	0	; () banked
  4308  002C3A  65D6               	cpfsgt	isdigit@c& (0+255),b
  4309  002C3C  D003               	goto	l4825
  4310                           
  4311                           ; BSR set to: 0
  4312  002C3E  0E01               	movlw	1
  4313  002C40  0100               	movlb	0	; () banked
  4314  002C42  6FD5               	movwf	_isdigit$821& (0+255),b
  4315  002C44                     l4825:
  4316                           
  4317                           ; BSR set to: 0
  4318  002C44  C0D5  F0D4         	movff	_isdigit$821,??_isdigit
  4319  002C48  0100               	movlb	0	; () banked
  4320  002C4A  31D4               	rrcf	??_isdigit& (0+255),w,b
  4321  002C4C  0012               	return	
  4322  002C4E                     __end_of_isdigit:
  4323                           	opt stack 0
  4324                           tblptru	equ	0xFF8
  4325                           tblptrh	equ	0xFF7
  4326                           tblptrl	equ	0xFF6
  4327                           tablat	equ	0xFF5
  4328                           prodh	equ	0xFF4
  4329                           prodl	equ	0xFF3
  4330                           intcon	equ	0xFF2
  4331                           intcon2	equ	0xFF1
  4332                           intcon3	equ	0xFF0
  4333                           postinc0	equ	0xFEE
  4334                           wreg	equ	0xFE8
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342 ;; *************** function ___wmul *****************
  4343 ;; Defined at:
  4344 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4347 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  product         2   20[BANK0 ] unsigned int 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  2   16[BANK0 ] unsigned int 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0, prodl, prodh
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:        6 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    7
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_printf
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text14
  4374  002BC0                     __ptext14:
  4375                           	opt stack 0
  4376  002BC0                     ___wmul:
  4377                           	opt stack 21
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;incstack = 0
  4381  002BC0  0100               	movlb	0	; () banked
  4382  002BC2  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4383  002BC4  0100               	movlb	0	; () banked
  4384  002BC6  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4385  002BC8  CFF3 F0D8          	movff	prodl,___wmul@product
  4386  002BCC  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4387  002BD0  0100               	movlb	0	; () banked
  4388  002BD2  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4389  002BD4  0100               	movlb	0	; () banked
  4390  002BD6  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4391  002BD8  50F3               	movf	prodl,w,c
  4392  002BDA  0100               	movlb	0	; () banked
  4393  002BDC  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4394  002BDE  0100               	movlb	0	; () banked
  4395  002BE0  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4396  002BE2  0100               	movlb	0	; () banked
  4397  002BE4  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4398  002BE6  50F3               	movf	prodl,w,c
  4399  002BE8  0100               	movlb	0	; () banked
  4400  002BEA  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4401                           
  4402                           ; BSR set to: 0
  4403  002BEC  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4404  002BF0  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4405  002BF4  0012               	return	
  4406  002BF6                     __end_of___wmul:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           intcon2	equ	0xFF1
  4416                           intcon3	equ	0xFF0
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           indf2	equ	0xFDF
  4420                           postinc2	equ	0xFDE
  4421                           postdec2	equ	0xFDD
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function ___lwmod *****************
  4427 ;; Defined at:
  4428 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  dividend        2   23[BANK0 ] unsigned int 
  4431 ;;  divisor         2   25[BANK0 ] unsigned int 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  counter         1   27[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  2   23[BANK0 ] unsigned int 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;Total ram usage:        5 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    7
  4450 ;; This function calls:
  4451 ;;		Nothing
  4452 ;; This function is called by:
  4453 ;;		_printf
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text15
  4458  002824                     __ptext15:
  4459                           	opt stack 0
  4460  002824                     ___lwmod:
  4461                           	opt stack 21
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;incstack = 0
  4465  002824  0100               	movlb	0	; () banked
  4466  002826  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4467  002828  0100               	movlb	0	; () banked
  4468  00282A  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4469  00282C  B4D8               	btfsc	status,2,c
  4470  00282E  D026               	goto	l905
  4471                           
  4472                           ; BSR set to: 0
  4473  002830  0E01               	movlw	1
  4474  002832  0100               	movlb	0	; () banked
  4475  002834  6FDF               	movwf	___lwmod@counter& (0+255),b
  4476  002836  D006               	goto	l4863
  4477  002838                     l4861:
  4478                           
  4479                           ; BSR set to: 0
  4480  002838  0100               	movlb	0	; () banked
  4481  00283A  90D8               	bcf	status,0,c
  4482  00283C  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4483  00283E  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4484  002840  0100               	movlb	0	; () banked
  4485  002842  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4486  002844                     l4863:
  4487                           
  4488                           ; BSR set to: 0
  4489  002844  0100               	movlb	0	; () banked
  4490  002846  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4491  002848  D7F7               	goto	l4861
  4492  00284A                     l4865:
  4493                           
  4494                           ; BSR set to: 0
  4495  00284A  0100               	movlb	0	; () banked
  4496  00284C  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4497  00284E  0100               	movlb	0	; () banked
  4498  002850  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4499  002852  0100               	movlb	0	; () banked
  4500  002854  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4501  002856  0100               	movlb	0	; () banked
  4502  002858  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4503  00285A  A0D8               	btfss	status,0,c
  4504  00285C  D008               	goto	l4869
  4505                           
  4506                           ; BSR set to: 0
  4507  00285E  0100               	movlb	0	; () banked
  4508  002860  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4509  002862  0100               	movlb	0	; () banked
  4510  002864  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4511  002866  0100               	movlb	0	; () banked
  4512  002868  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4513  00286A  0100               	movlb	0	; () banked
  4514  00286C  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4515  00286E                     l4869:
  4516                           
  4517                           ; BSR set to: 0
  4518  00286E  0100               	movlb	0	; () banked
  4519  002870  90D8               	bcf	status,0,c
  4520  002872  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4521  002874  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4522                           
  4523                           ; BSR set to: 0
  4524  002876  0100               	movlb	0	; () banked
  4525  002878  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4526  00287A  D7E7               	goto	l4865
  4527  00287C                     l905:
  4528                           
  4529                           ; BSR set to: 0
  4530  00287C  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4531  002880  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4532                           
  4533                           ; BSR set to: 0
  4534  002884  0012               	return		;funcret
  4535  002886                     __end_of___lwmod:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           intcon3	equ	0xFF0
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function ___lwdiv *****************
  4556 ;; Defined at:
  4557 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  dividend        2   16[BANK0 ] unsigned int 
  4560 ;;  divisor         2   18[BANK0 ] unsigned int 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  quotient        2   21[BANK0 ] unsigned int 
  4563 ;;  counter         1   20[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  2   16[BANK0 ] unsigned int 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:        7 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_printf
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text16
  4588  002666                     __ptext16:
  4589                           	opt stack 0
  4590  002666                     ___lwdiv:
  4591                           	opt stack 21
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;incstack = 0
  4595  002666  0E00               	movlw	0
  4596  002668  0100               	movlb	0	; () banked
  4597  00266A  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4598  00266C  0E00               	movlw	0
  4599  00266E  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602  002670  0100               	movlb	0	; () banked
  4603  002672  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4604  002674  0100               	movlb	0	; () banked
  4605  002676  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4606  002678  B4D8               	btfsc	status,2,c
  4607  00267A  D02C               	goto	l895
  4608                           
  4609                           ; BSR set to: 0
  4610  00267C  0E01               	movlw	1
  4611  00267E  0100               	movlb	0	; () banked
  4612  002680  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4613  002682  D006               	goto	l4843
  4614  002684                     l4841:
  4615                           
  4616                           ; BSR set to: 0
  4617  002684  0100               	movlb	0	; () banked
  4618  002686  90D8               	bcf	status,0,c
  4619  002688  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4620  00268A  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4621  00268C  0100               	movlb	0	; () banked
  4622  00268E  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4623  002690                     l4843:
  4624                           
  4625                           ; BSR set to: 0
  4626  002690  0100               	movlb	0	; () banked
  4627  002692  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4628  002694  D7F7               	goto	l4841
  4629  002696                     l4845:
  4630                           
  4631                           ; BSR set to: 0
  4632  002696  0100               	movlb	0	; () banked
  4633  002698  90D8               	bcf	status,0,c
  4634  00269A  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4635  00269C  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4636                           
  4637                           ; BSR set to: 0
  4638  00269E  0100               	movlb	0	; () banked
  4639  0026A0  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4640  0026A2  0100               	movlb	0	; () banked
  4641  0026A4  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4642  0026A6  0100               	movlb	0	; () banked
  4643  0026A8  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4644  0026AA  0100               	movlb	0	; () banked
  4645  0026AC  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4646  0026AE  A0D8               	btfss	status,0,c
  4647  0026B0  D00A               	goto	l4853
  4648                           
  4649                           ; BSR set to: 0
  4650  0026B2  0100               	movlb	0	; () banked
  4651  0026B4  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4652  0026B6  0100               	movlb	0	; () banked
  4653  0026B8  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4654  0026BA  0100               	movlb	0	; () banked
  4655  0026BC  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4656  0026BE  0100               	movlb	0	; () banked
  4657  0026C0  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4658                           
  4659                           ; BSR set to: 0
  4660  0026C2  0100               	movlb	0	; () banked
  4661  0026C4  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4662  0026C6                     l4853:
  4663                           
  4664                           ; BSR set to: 0
  4665  0026C6  0100               	movlb	0	; () banked
  4666  0026C8  90D8               	bcf	status,0,c
  4667  0026CA  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4668  0026CC  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4669                           
  4670                           ; BSR set to: 0
  4671  0026CE  0100               	movlb	0	; () banked
  4672  0026D0  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4673  0026D2  D7E1               	goto	l4845
  4674  0026D4                     l895:
  4675                           
  4676                           ; BSR set to: 0
  4677  0026D4  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4678  0026D8  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4679                           
  4680                           ; BSR set to: 0
  4681  0026DC  0012               	return		;funcret
  4682  0026DE                     __end_of___lwdiv:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           intcon2	equ	0xFF1
  4692                           intcon3	equ	0xFF0
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _lcdInst *****************
  4703 ;; Defined at:
  4704 ;;		line 26 in file "lcd.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  data            1    wreg     unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  data            1   18[BANK0 ] unsigned char 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2, status,0, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        1 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    8
  4725 ;; This function calls:
  4726 ;;		_lcdNibble
  4727 ;; This function is called by:
  4728 ;;		_initLCD
  4729 ;;		_standby
  4730 ;;		_date_time
  4731 ;;		_bottle_count
  4732 ;;		_bottle_time
  4733 ;;		_operation
  4734 ;;		_operationend
  4735 ;;		_emergencystop
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text17
  4740  002D4C                     __ptext17:
  4741                           	opt stack 0
  4742  002D4C                     _lcdInst:
  4743                           	opt stack 21
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;incstack = 0
  4747                           ;lcdInst@data stored from wreg
  4748  002D4C  0100               	movlb	0	; () banked
  4749  002D4E  6FD6               	movwf	lcdInst@data& (0+255),b
  4750                           
  4751                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4752  002D50  948C               	bcf	3980,2,c	;volatile
  4753                           
  4754                           ;lcd.c: 28: lcdNibble(data);
  4755  002D52  0100               	movlb	0	; () banked
  4756  002D54  51D6               	movf	lcdInst@data& (0+255),w,b
  4757  002D56  EC43  F014         	call	_lcdNibble
  4758  002D5A  0012               	return		;funcret
  4759  002D5C                     __end_of_lcdInst:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           intcon3	equ	0xFF0
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _lcdNibble *****************
  4780 ;; Defined at:
  4781 ;;		line 36 in file "lcd.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  data            1    wreg     unsigned char 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  data            1   17[BANK0 ] unsigned char 
  4786 ;;  temp            1   16[BANK0 ] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;Total ram usage:        2 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    7
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_lcdInst
  4807 ;;		_putch
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text18
  4812  002886                     __ptext18:
  4813                           	opt stack 0
  4814  002886                     _lcdNibble:
  4815                           	opt stack 21
  4816                           
  4817                           ;incstack = 0
  4818                           ;lcdNibble@data stored from wreg
  4819  002886  0100               	movlb	0	; () banked
  4820  002888  6FD5               	movwf	lcdNibble@data& (0+255),b
  4821                           
  4822                           ;lcd.c: 38: char temp = data & 0xF0;
  4823  00288A  0100               	movlb	0	; () banked
  4824  00288C  51D5               	movf	lcdNibble@data& (0+255),w,b
  4825  00288E  0BF0               	andlw	240
  4826  002890  0100               	movlb	0	; () banked
  4827  002892  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4828                           
  4829                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4830  002894  508C               	movf	3980,w,c	;volatile
  4831  002896  0B0F               	andlw	15
  4832  002898  6E8C               	movwf	3980,c	;volatile
  4833                           
  4834                           ;lcd.c: 40: LATD = temp | LATD;
  4835  00289A  0100               	movlb	0	; () banked
  4836  00289C  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4837  00289E  108C               	iorwf	3980,w,c	;volatile
  4838  0028A0  6E8C               	movwf	3980,c	;volatile
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4842  0028A2  968C               	bcf	3980,3,c	;volatile
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4846  0028A4  0E19               	movlw	25
  4847  0028A6                     u4867:
  4848  0028A6  2EE8               	decfsz	wreg,f,c
  4849  0028A8  D7FE               	bra	u4867
  4850                           
  4851                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4852  0028AA  868C               	bsf	3980,3,c	;volatile
  4853                           
  4854                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4855  0028AC  0E19               	movlw	25
  4856  0028AE                     u4877:
  4857  0028AE  2EE8               	decfsz	wreg,f,c
  4858  0028B0  D7FE               	bra	u4877
  4859                           
  4860                           ;lcd.c: 47: data = data << 4;
  4861  0028B2  0100               	movlb	0	; () banked
  4862  0028B4  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4863  0028B6  0BF0               	andlw	240
  4864  0028B8  0100               	movlb	0	; () banked
  4865  0028BA  6FD5               	movwf	lcdNibble@data& (0+255),b
  4866                           
  4867                           ;lcd.c: 49: temp = data & 0xF0;
  4868  0028BC  0100               	movlb	0	; () banked
  4869  0028BE  51D5               	movf	lcdNibble@data& (0+255),w,b
  4870  0028C0  0BF0               	andlw	240
  4871  0028C2  0100               	movlb	0	; () banked
  4872  0028C4  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4873                           
  4874                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4875  0028C6  508C               	movf	3980,w,c	;volatile
  4876  0028C8  0B0F               	andlw	15
  4877  0028CA  6E8C               	movwf	3980,c	;volatile
  4878                           
  4879                           ;lcd.c: 51: LATD = temp | LATD;
  4880  0028CC  0100               	movlb	0	; () banked
  4881  0028CE  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4882  0028D0  108C               	iorwf	3980,w,c	;volatile
  4883  0028D2  6E8C               	movwf	3980,c	;volatile
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4887  0028D4  968C               	bcf	3980,3,c	;volatile
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4891  0028D6  0E19               	movlw	25
  4892  0028D8                     u4887:
  4893  0028D8  2EE8               	decfsz	wreg,f,c
  4894  0028DA  D7FE               	bra	u4887
  4895                           
  4896                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4897  0028DC  868C               	bsf	3980,3,c	;volatile
  4898                           
  4899                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4900  0028DE  0E19               	movlw	25
  4901  0028E0                     u4897:
  4902  0028E0  2EE8               	decfsz	wreg,f,c
  4903  0028E2  D7FE               	bra	u4897
  4904  0028E4  0012               	return		;funcret
  4905  0028E6                     __end_of_lcdNibble:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           intcon3	equ	0xFF0
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function ___awmod *****************
  4926 ;; Defined at:
  4927 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  dividend        2   16[BANK0 ] int 
  4930 ;;  divisor         2   18[BANK0 ] int 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  sign            1   21[BANK0 ] unsigned char 
  4933 ;;  counter         1   20[BANK0 ] unsigned char 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  2   16[BANK0 ] int 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:        6 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    7
  4950 ;; This function calls:
  4951 ;;		Nothing
  4952 ;; This function is called by:
  4953 ;;		_bottle_count
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text19
  4958  002390                     __ptext19:
  4959                           	opt stack 0
  4960  002390                     ___awmod:
  4961                           	opt stack 22
  4962                           
  4963                           ;incstack = 0
  4964  002390  0E00               	movlw	0
  4965  002392  0100               	movlb	0	; () banked
  4966  002394  6FD9               	movwf	___awmod@sign& (0+255),b
  4967                           
  4968                           ; BSR set to: 0
  4969  002396  0100               	movlb	0	; () banked
  4970  002398  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4971  00239A  D008               	goto	l3863
  4972                           
  4973                           ; BSR set to: 0
  4974  00239C  0100               	movlb	0	; () banked
  4975  00239E  6DD4               	negf	___awmod@dividend& (0+255),b
  4976  0023A0  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  4977  0023A2  B0D8               	btfsc	status,0,c
  4978  0023A4  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  4979                           
  4980                           ; BSR set to: 0
  4981  0023A6  0E01               	movlw	1
  4982  0023A8  0100               	movlb	0	; () banked
  4983  0023AA  6FD9               	movwf	___awmod@sign& (0+255),b
  4984  0023AC                     l3863:
  4985                           
  4986                           ; BSR set to: 0
  4987  0023AC  0100               	movlb	0	; () banked
  4988  0023AE  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4989  0023B0  D005               	goto	l3867
  4990                           
  4991                           ; BSR set to: 0
  4992  0023B2  0100               	movlb	0	; () banked
  4993  0023B4  6DD6               	negf	___awmod@divisor& (0+255),b
  4994  0023B6  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  4995  0023B8  B0D8               	btfsc	status,0,c
  4996  0023BA  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  4997  0023BC                     l3867:
  4998                           
  4999                           ; BSR set to: 0
  5000  0023BC  0100               	movlb	0	; () banked
  5001  0023BE  51D6               	movf	___awmod@divisor& (0+255),w,b
  5002  0023C0  0100               	movlb	0	; () banked
  5003  0023C2  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5004  0023C4  B4D8               	btfsc	status,2,c
  5005  0023C6  D026               	goto	l3883
  5006                           
  5007                           ; BSR set to: 0
  5008  0023C8  0E01               	movlw	1
  5009  0023CA  0100               	movlb	0	; () banked
  5010  0023CC  6FD8               	movwf	___awmod@counter& (0+255),b
  5011  0023CE  D006               	goto	l3873
  5012  0023D0                     l3871:
  5013                           
  5014                           ; BSR set to: 0
  5015  0023D0  0100               	movlb	0	; () banked
  5016  0023D2  90D8               	bcf	status,0,c
  5017  0023D4  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  5018  0023D6  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5019  0023D8  0100               	movlb	0	; () banked
  5020  0023DA  2BD8               	incf	___awmod@counter& (0+255),f,b
  5021  0023DC                     l3873:
  5022                           
  5023                           ; BSR set to: 0
  5024  0023DC  0100               	movlb	0	; () banked
  5025  0023DE  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5026  0023E0  D7F7               	goto	l3871
  5027  0023E2                     l3875:
  5028                           
  5029                           ; BSR set to: 0
  5030  0023E2  0100               	movlb	0	; () banked
  5031  0023E4  51D6               	movf	___awmod@divisor& (0+255),w,b
  5032  0023E6  0100               	movlb	0	; () banked
  5033  0023E8  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  5034  0023EA  0100               	movlb	0	; () banked
  5035  0023EC  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5036  0023EE  0100               	movlb	0	; () banked
  5037  0023F0  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5038  0023F2  A0D8               	btfss	status,0,c
  5039  0023F4  D008               	goto	l3879
  5040                           
  5041                           ; BSR set to: 0
  5042  0023F6  0100               	movlb	0	; () banked
  5043  0023F8  51D6               	movf	___awmod@divisor& (0+255),w,b
  5044  0023FA  0100               	movlb	0	; () banked
  5045  0023FC  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5046  0023FE  0100               	movlb	0	; () banked
  5047  002400  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5048  002402  0100               	movlb	0	; () banked
  5049  002404  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5050  002406                     l3879:
  5051                           
  5052                           ; BSR set to: 0
  5053  002406  0100               	movlb	0	; () banked
  5054  002408  90D8               	bcf	status,0,c
  5055  00240A  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5056  00240C  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059  00240E  0100               	movlb	0	; () banked
  5060  002410  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5061  002412  D7E7               	goto	l3875
  5062  002414                     l3883:
  5063                           
  5064                           ; BSR set to: 0
  5065  002414  0100               	movlb	0	; () banked
  5066  002416  51D9               	movf	___awmod@sign& (0+255),w,b
  5067  002418  0100               	movlb	0	; () banked
  5068  00241A  B4D8               	btfsc	status,2,c
  5069  00241C  D005               	goto	l3887
  5070                           
  5071                           ; BSR set to: 0
  5072  00241E  0100               	movlb	0	; () banked
  5073  002420  6DD4               	negf	___awmod@dividend& (0+255),b
  5074  002422  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5075  002424  B0D8               	btfsc	status,0,c
  5076  002426  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5077  002428                     l3887:
  5078                           
  5079                           ; BSR set to: 0
  5080  002428  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5081  00242C  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5082  002430  0012               	return	
  5083  002432                     __end_of___awmod:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           intcon2	equ	0xFF1
  5093                           intcon3	equ	0xFF0
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function _I2C_Master_Init *****************
  5104 ;; Defined at:
  5105 ;;		line 13 in file "I2C.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  c               4   29[BANK0 ] const unsigned long 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;Total ram usage:        8 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    8
  5126 ;; This function calls:
  5127 ;;		___lldiv
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text20
  5134  0028E6                     __ptext20:
  5135                           	opt stack 0
  5136  0028E6                     _I2C_Master_Init:
  5137                           	opt stack 22
  5138                           
  5139                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;incstack = 0
  5143  0028E6  0E00               	movlw	0
  5144  0028E8  6EC7               	movwf	4039,c	;volatile
  5145                           
  5146                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5147  0028EA  0E28               	movlw	40
  5148  0028EC  6EC6               	movwf	4038,c	;volatile
  5149                           
  5150                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5151  0028EE  0E00               	movlw	0
  5152  0028F0  6EC5               	movwf	4037,c	;volatile
  5153                           
  5154                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5155  0028F2  0E80               	movlw	128
  5156  0028F4  0100               	movlb	0	; () banked
  5157  0028F6  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5158  0028F8  0E96               	movlw	150
  5159  0028FA  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5160  0028FC  0E98               	movlw	152
  5161  0028FE  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5162  002900  0E00               	movlw	0
  5163  002902  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5164  002904  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5165  002908  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5166  00290C  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5167  002910  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5168  002914  0E02               	movlw	2
  5169  002916                     u3775:
  5170  002916  90D8               	bcf	status,0,c
  5171  002918  0100               	movlb	0	; () banked
  5172  00291A  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5173  00291C  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5174  00291E  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5175  002920  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5176  002922  2EE8               	decfsz	wreg,f,c
  5177  002924  D7F8               	goto	u3775
  5178  002926  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5179  00292A  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5180  00292E  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5181  002932  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5182  002936  EC5F  F010         	call	___lldiv	;wreg free
  5183  00293A  0100               	movlb	0	; () banked
  5184  00293C  05D4               	decf	?___lldiv& (0+255),w,b
  5185  00293E  6EC8               	movwf	4040,c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;I2C.c: 20: TRISC3 = 1;
  5189  002940  8694               	bsf	3988,3,c	;volatile
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;I2C.c: 21: TRISC4 = 1;
  5193  002942  8894               	bsf	3988,4,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196  002944  0012               	return		;funcret
  5197  002946                     __end_of_I2C_Master_Init:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           intcon2	equ	0xFF1
  5207                           intcon3	equ	0xFF0
  5208                           postinc0	equ	0xFEE
  5209                           wreg	equ	0xFE8
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function ___lldiv *****************
  5218 ;; Defined at:
  5219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  dividend        4   16[BANK0 ] unsigned long 
  5222 ;;  divisor         4   20[BANK0 ] unsigned long 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  quotient        4   24[BANK0 ] unsigned long 
  5225 ;;  counter         1   28[BANK0 ] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  4   16[BANK0 ] unsigned long 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5235 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;Total ram usage:       13 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    7
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_I2C_Master_Init
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text21
  5250  0020BE                     __ptext21:
  5251                           	opt stack 0
  5252  0020BE                     ___lldiv:
  5253                           	opt stack 22
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;incstack = 0
  5257  0020BE  0E00               	movlw	0
  5258  0020C0  0100               	movlb	0	; () banked
  5259  0020C2  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5260  0020C4  0E00               	movlw	0
  5261  0020C6  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5262  0020C8  0E00               	movlw	0
  5263  0020CA  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5264  0020CC  0E00               	movlw	0
  5265  0020CE  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268  0020D0  0100               	movlb	0	; () banked
  5269  0020D2  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5270  0020D4  0100               	movlb	0	; () banked
  5271  0020D6  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5272  0020D8  0100               	movlb	0	; () banked
  5273  0020DA  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5274  0020DC  0100               	movlb	0	; () banked
  5275  0020DE  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5276  0020E0  B4D8               	btfsc	status,2,c
  5277  0020E2  D042               	goto	l842
  5278                           
  5279                           ; BSR set to: 0
  5280  0020E4  0E01               	movlw	1
  5281  0020E6  0100               	movlb	0	; () banked
  5282  0020E8  6FE0               	movwf	___lldiv@counter& (0+255),b
  5283  0020EA  D008               	goto	l3899
  5284  0020EC                     l3897:
  5285                           
  5286                           ; BSR set to: 0
  5287  0020EC  0100               	movlb	0	; () banked
  5288  0020EE  90D8               	bcf	status,0,c
  5289  0020F0  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5290  0020F2  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5291  0020F4  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5292  0020F6  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5293  0020F8  0100               	movlb	0	; () banked
  5294  0020FA  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5295  0020FC                     l3899:
  5296                           
  5297                           ; BSR set to: 0
  5298  0020FC  0100               	movlb	0	; () banked
  5299  0020FE  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5300  002100  D7F5               	goto	l3897
  5301  002102                     l3901:
  5302                           
  5303                           ; BSR set to: 0
  5304  002102  0100               	movlb	0	; () banked
  5305  002104  90D8               	bcf	status,0,c
  5306  002106  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5307  002108  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5308  00210A  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5309  00210C  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5310                           
  5311                           ; BSR set to: 0
  5312  00210E  0100               	movlb	0	; () banked
  5313  002110  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5314  002112  0100               	movlb	0	; () banked
  5315  002114  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5316  002116  0100               	movlb	0	; () banked
  5317  002118  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5318  00211A  0100               	movlb	0	; () banked
  5319  00211C  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5320  00211E  0100               	movlb	0	; () banked
  5321  002120  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5322  002122  0100               	movlb	0	; () banked
  5323  002124  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5324  002126  0100               	movlb	0	; () banked
  5325  002128  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5326  00212A  0100               	movlb	0	; () banked
  5327  00212C  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5328  00212E  A0D8               	btfss	status,0,c
  5329  002130  D012               	goto	l3909
  5330                           
  5331                           ; BSR set to: 0
  5332  002132  0100               	movlb	0	; () banked
  5333  002134  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5334  002136  0100               	movlb	0	; () banked
  5335  002138  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5336  00213A  0100               	movlb	0	; () banked
  5337  00213C  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5338  00213E  0100               	movlb	0	; () banked
  5339  002140  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5340  002142  0100               	movlb	0	; () banked
  5341  002144  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5342  002146  0100               	movlb	0	; () banked
  5343  002148  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5344  00214A  0100               	movlb	0	; () banked
  5345  00214C  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5346  00214E  0100               	movlb	0	; () banked
  5347  002150  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5348                           
  5349                           ; BSR set to: 0
  5350  002152  0100               	movlb	0	; () banked
  5351  002154  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5352  002156                     l3909:
  5353                           
  5354                           ; BSR set to: 0
  5355  002156  0100               	movlb	0	; () banked
  5356  002158  90D8               	bcf	status,0,c
  5357  00215A  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5358  00215C  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5359  00215E  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5360  002160  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5361                           
  5362                           ; BSR set to: 0
  5363  002162  0100               	movlb	0	; () banked
  5364  002164  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5365  002166  D7CD               	goto	l3901
  5366  002168                     l842:
  5367                           
  5368                           ; BSR set to: 0
  5369  002168  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5370  00216C  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5371  002170  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5372  002174  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5373                           
  5374                           ; BSR set to: 0
  5375  002178  0012               	return		;funcret
  5376  00217A                     __end_of___lldiv:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           intcon2	equ	0xFF1
  5386                           intcon3	equ	0xFF0
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _I2C_ColorSens_Init *****************
  5397 ;; Defined at:
  5398 ;;		line 53 in file "I2C.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, status,2, status,0, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    9
  5419 ;; This function calls:
  5420 ;;		_I2C_Master_Start
  5421 ;;		_I2C_Master_Stop
  5422 ;;		_I2C_Master_Write
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           	psect	text22
  5429  0027BE                     __ptext22:
  5430                           	opt stack 0
  5431  0027BE                     _I2C_ColorSens_Init:
  5432                           	opt stack 21
  5433                           
  5434                           ;I2C.c: 54: I2C_Master_Start();
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;incstack = 0
  5438  0027BE  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  5439                           
  5440                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  5441  0027C2  0E00               	movlw	0
  5442  0027C4  0100               	movlb	0	; () banked
  5443  0027C6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5444  0027C8  0E52               	movlw	82
  5445  0027CA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5446  0027CC  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5447                           
  5448                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  5449  0027D0  0E00               	movlw	0
  5450  0027D2  0100               	movlb	0	; () banked
  5451  0027D4  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5452  0027D6  0E80               	movlw	128
  5453  0027D8  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5454  0027DA  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5455                           
  5456                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  5457  0027DE  0E00               	movlw	0
  5458  0027E0  0100               	movlb	0	; () banked
  5459  0027E2  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5460  0027E4  0E03               	movlw	3
  5461  0027E6  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5462  0027E8  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5463                           
  5464                           ;I2C.c: 58: I2C_Master_Stop();
  5465  0027EC  ECC8  F016         	call	_I2C_Master_Stop	;wreg free
  5466                           
  5467                           ;I2C.c: 59: I2C_Master_Start();
  5468  0027F0  ECCC  F016         	call	_I2C_Master_Start	;wreg free
  5469                           
  5470                           ;I2C.c: 60: I2C_Master_Write(0b01010010);
  5471  0027F4  0E00               	movlw	0
  5472  0027F6  0100               	movlb	0	; () banked
  5473  0027F8  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5474  0027FA  0E52               	movlw	82
  5475  0027FC  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5476  0027FE  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5477                           
  5478                           ;I2C.c: 61: I2C_Master_Write(0b10001111);
  5479  002802  0E00               	movlw	0
  5480  002804  0100               	movlb	0	; () banked
  5481  002806  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5482  002808  0E8F               	movlw	143
  5483  00280A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5484  00280C  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5485                           
  5486                           ;I2C.c: 62: I2C_Master_Write(0b00000010);
  5487  002810  0E00               	movlw	0
  5488  002812  0100               	movlb	0	; () banked
  5489  002814  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5490  002816  0E02               	movlw	2
  5491  002818  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5492  00281A  ECBA  F016         	call	_I2C_Master_Write	;wreg free
  5493                           
  5494                           ;I2C.c: 63: I2C_Master_Stop();
  5495  00281E  ECC8  F016         	call	_I2C_Master_Stop	;wreg free
  5496  002822  0012               	return		;funcret
  5497  002824                     __end_of_I2C_ColorSens_Init:
  5498                           	opt stack 0
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodh	equ	0xFF4
  5504                           prodl	equ	0xFF3
  5505                           intcon	equ	0xFF2
  5506                           intcon2	equ	0xFF1
  5507                           intcon3	equ	0xFF0
  5508                           postinc0	equ	0xFEE
  5509                           wreg	equ	0xFE8
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _I2C_Master_Write *****************
  5518 ;; Defined at:
  5519 ;;		line 47 in file "I2C.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  d               2   17[BANK0 ] unsigned int 
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;Total ram usage:        2 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    8
  5540 ;; This function calls:
  5541 ;;		_I2C_Master_Wait
  5542 ;; This function is called by:
  5543 ;;		_I2C_ColorSens_Init
  5544 ;;		_date_time
  5545 ;;		_read_colorsensor
  5546 ;;		_set_time
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text23
  5551  002D74                     __ptext23:
  5552                           	opt stack 0
  5553  002D74                     _I2C_Master_Write:
  5554                           	opt stack 20
  5555                           
  5556                           ;I2C.c: 49: I2C_Master_Wait();
  5557                           
  5558                           ;incstack = 0
  5559  002D74  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  5560                           
  5561                           ;I2C.c: 50: SSPBUF = d;
  5562  002D78  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5563  002D7C  0012               	return		;funcret
  5564  002D7E                     __end_of_I2C_Master_Write:
  5565                           	opt stack 0
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           intcon2	equ	0xFF1
  5574                           intcon3	equ	0xFF0
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           indf2	equ	0xFDF
  5578                           postinc2	equ	0xFDE
  5579                           postdec2	equ	0xFDD
  5580                           fsr2h	equ	0xFDA
  5581                           fsr2l	equ	0xFD9
  5582                           status	equ	0xFD8
  5583                           
  5584 ;; *************** function _I2C_Master_Stop *****************
  5585 ;; Defined at:
  5586 ;;		line 41 in file "I2C.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;		None
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;		None
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;Total ram usage:        0 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    8
  5607 ;; This function calls:
  5608 ;;		_I2C_Master_Wait
  5609 ;; This function is called by:
  5610 ;;		_I2C_ColorSens_Init
  5611 ;;		_date_time
  5612 ;;		_read_colorsensor
  5613 ;;		_set_time
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           	psect	text24
  5618  002D90                     __ptext24:
  5619                           	opt stack 0
  5620  002D90                     _I2C_Master_Stop:
  5621                           	opt stack 20
  5622                           
  5623                           ;I2C.c: 43: I2C_Master_Wait();
  5624                           
  5625                           ;incstack = 0
  5626  002D90  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  5627                           
  5628                           ;I2C.c: 44: PEN = 1;
  5629  002D94  84C5               	bsf	4037,2,c	;volatile
  5630  002D96  0012               	return		;funcret
  5631  002D98                     __end_of_I2C_Master_Stop:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           intcon2	equ	0xFF1
  5641                           intcon3	equ	0xFF0
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function _I2C_Master_Start *****************
  5652 ;; Defined at:
  5653 ;;		line 29 in file "I2C.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;		None
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;		None
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;Total ram usage:        0 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    8
  5674 ;; This function calls:
  5675 ;;		_I2C_Master_Wait
  5676 ;; This function is called by:
  5677 ;;		_I2C_ColorSens_Init
  5678 ;;		_date_time
  5679 ;;		_read_colorsensor
  5680 ;;		_set_time
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text25
  5685  002D98                     __ptext25:
  5686                           	opt stack 0
  5687  002D98                     _I2C_Master_Start:
  5688                           	opt stack 20
  5689                           
  5690                           ;I2C.c: 31: I2C_Master_Wait();
  5691                           
  5692                           ;incstack = 0
  5693  002D98  EC8B  F016         	call	_I2C_Master_Wait	;wreg free
  5694                           
  5695                           ;I2C.c: 32: SEN = 1;
  5696  002D9C  80C5               	bsf	4037,0,c	;volatile
  5697  002D9E  0012               	return		;funcret
  5698  002DA0                     __end_of_I2C_Master_Start:
  5699                           	opt stack 0
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           prodh	equ	0xFF4
  5705                           prodl	equ	0xFF3
  5706                           intcon	equ	0xFF2
  5707                           intcon2	equ	0xFF1
  5708                           intcon3	equ	0xFF0
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           indf2	equ	0xFDF
  5712                           postinc2	equ	0xFDE
  5713                           postdec2	equ	0xFDD
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _I2C_Master_Wait *****************
  5719 ;; Defined at:
  5720 ;;		line 24 in file "I2C.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;		None
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, status,2, status,0
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:        1 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    7
  5741 ;; This function calls:
  5742 ;;		Nothing
  5743 ;; This function is called by:
  5744 ;;		_I2C_Master_Start
  5745 ;;		_I2C_Master_Stop
  5746 ;;		_I2C_Master_Write
  5747 ;;		_I2C_Master_Read
  5748 ;;		_I2C_Master_RepeatedStart
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text26
  5753  002D16                     __ptext26:
  5754                           	opt stack 0
  5755  002D16                     _I2C_Master_Wait:
  5756                           	opt stack 20
  5757  002D16                     l34:
  5758  002D16  B4C7               	btfsc	4039,2,c	;volatile
  5759  002D18  D7FE               	goto	l34
  5760  002D1A  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5761  002D1E  0E1F               	movlw	31
  5762  002D20  0100               	movlb	0	; () banked
  5763  002D22  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5764  002D24  B4D8               	btfsc	status,2,c
  5765  002D26  0012               	return	
  5766  002D28  D7F6               	goto	l34
  5767  002D2A                     __end_of_I2C_Master_Wait:
  5768                           	opt stack 0
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           intcon2	equ	0xFF1
  5777                           intcon3	equ	0xFF0
  5778                           postinc0	equ	0xFEE
  5779                           wreg	equ	0xFE8
  5780                           indf2	equ	0xFDF
  5781                           postinc2	equ	0xFDE
  5782                           postdec2	equ	0xFDD
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function _isr *****************
  5788 ;; Defined at:
  5789 ;;		line 164 in file "main.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  i               1  114[COMRAM] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;Total ram usage:       19 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    6
  5810 ;; This function calls:
  5811 ;;		_dec_to_hex
  5812 ;;		_read_time
  5813 ;;		_servo_rotate0
  5814 ;;		_servo_rotate1
  5815 ;;		_servo_rotate2
  5816 ;;		i2___wmul
  5817 ;;		i2_lcdInst
  5818 ;;		i2_printf
  5819 ;;		i2_read_colorsensor
  5820 ;; This function is called by:
  5821 ;;		Interrupt level 2
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           	psect	intcode
  5826  000008                     __pintcode:
  5827                           	opt stack 0
  5828  000008                     _isr:
  5829                           	opt stack 20
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;incstack = 0
  5833  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5834  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           intcon2	equ	0xFF1
  5843                           intcon3	equ	0xFF0
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853                           	psect	intcode_body
  5854  000012                     __pintcode_body:
  5855                           	opt stack 20
  5856  000012                     int_func:
  5857                           	opt stack 20
  5858  000012  0006               	pop		; remove dummy address from shadow register refresh
  5859  000014  CFFA F0C6          	movff	pclath,??_isr+2
  5860  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  5861  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  5862  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  5863  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  5864  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  5865  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  5866  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  5867  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  5868  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  5869  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  5870  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  5871  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  5872  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  5873                           
  5874                           ;main.c: 165: if (INT1IF) {
  5875  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  5876  00004E  D0E9               	goto	i2l4559
  5877  000050  D109               	goto	i2l269
  5878  000052                     i2l271:
  5879                           
  5880                           ;main.c: 168: bottle_count_disp = -1;
  5881  000052  0100               	movlb	0	; () banked
  5882  000054  69EE               	setf	_bottle_count_disp& (0+255),b
  5883  000056  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;main.c: 169: curr_state = STANDBY;
  5887  000058  0E00               	movlw	0
  5888  00005A  D0D2               	goto	L7
  5889  00005C                     i2l273:
  5890                           
  5891                           ;main.c: 172: LATAbits.LATA2 = 1;
  5892  00005C  8489               	bsf	3977,2,c	;volatile
  5893                           
  5894                           ;main.c: 173: INT0IE = 1;
  5895  00005E  88F2               	bsf	intcon,4,c	;volatile
  5896                           
  5897                           ;main.c: 174: INT2IE = 1;
  5898  000060  88F0               	bsf	intcon3,4,c	;volatile
  5899                           
  5900                           ;main.c: 175: TMR0IE = 1;
  5901  000062  8AF2               	bsf	intcon,5,c	;volatile
  5902                           
  5903                           ;main.c: 176: TMR0ON = 1;
  5904  000064  8ED5               	bsf	4053,7,c	;volatile
  5905                           
  5906                           ;main.c: 177: TMR0 = 0;
  5907  000066  0E00               	movlw	0
  5908  000068  6ED7               	movwf	4055,c	;volatile
  5909  00006A  0E00               	movlw	0
  5910  00006C  6ED6               	movwf	4054,c	;volatile
  5911                           
  5912                           ;main.c: 179: read_time();
  5913  00006E  ECAB  F013         	call	_read_time	;wreg free
  5914                           
  5915                           ;main.c: 180: start_time[1] = time[1];
  5916  000072  C09F  F07B         	movff	_time+1,_start_time+1
  5917                           
  5918                           ;main.c: 181: start_time[0] = time[0];
  5919  000076  C09E  F07A         	movff	_time,_start_time
  5920                           
  5921                           ;main.c: 183: bottlequeue_head = bottlequeue_tail = 0;
  5922  00007A  0E00               	movlw	0
  5923  00007C  6E77               	movwf	_bottlequeue_tail+1,c
  5924  00007E  0E00               	movlw	0
  5925  000080  6E76               	movwf	_bottlequeue_tail,c
  5926  000082  C076  F0A5         	movff	_bottlequeue_tail,_bottlequeue_head
  5927  000086  C077  F0A6         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  5928                           
  5929                           ;main.c: 185: lcdInst(0b00000001);
  5930  00008A  0E01               	movlw	1
  5931  00008C  ECB4  F016         	call	i2_lcdInst
  5932                           
  5933                           ;main.c: 186: bottle_count_disp = -1;
  5934  000090  0100               	movlb	0	; () banked
  5935  000092  69EE               	setf	_bottle_count_disp& (0+255),b
  5936  000094  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;main.c: 187: curr_state = OPERATION;
  5940  000096  0E02               	movlw	2
  5941  000098  D0B3               	goto	L7
  5942  00009A                     i2l4505:
  5943                           
  5944                           ;main.c: 190: bottle_count_disp += 1;
  5945  00009A  0100               	movlb	0	; () banked
  5946  00009C  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  5947  00009E  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 191: curr_state = BOTTLECOUNT;
  5951  0000A0  0E05               	movlw	5
  5952  0000A2  0100               	movlb	0	; () banked
  5953  0000A4  6FC3               	movwf	_curr_state& (0+255),b
  5954  0000A6                     i2l4509:
  5955  0000A6  0E1F               	movlw	31
  5956  0000A8  1881               	xorwf	3969,w,c	;volatile
  5957  0000AA  A4D8               	btfss	status,2,c
  5958  0000AC  D0D9               	goto	i2l272
  5959  0000AE  D7FB               	goto	i2l4509
  5960  0000B0                     i2l4511:
  5961                           
  5962                           ;main.c: 195: operation_time = etime - stime;
  5963  0000B0  C07C  F0C4         	movff	_stime,??_isr
  5964  0000B4  C07D  F0C5         	movff	_stime+1,??_isr+1
  5965  0000B8  0100               	movlb	0	; () banked
  5966  0000BA  1FC4               	comf	??_isr& (0+255),f,b
  5967  0000BC  1FC5               	comf	(??_isr+1)& (0+255),f,b
  5968  0000BE  4BC4               	infsnz	??_isr& (0+255),f,b
  5969  0000C0  2BC5               	incf	(??_isr+1)& (0+255),f,b
  5970  0000C2  0100               	movlb	0	; () banked
  5971  0000C4  51B1               	movf	_etime& (0+255),w,b
  5972  0000C6  0100               	movlb	0	; () banked
  5973  0000C8  25C4               	addwf	??_isr& (0+255),w,b
  5974  0000CA  0100               	movlb	0	; () banked
  5975  0000CC  6FB7               	movwf	_operation_time& (0+255),b
  5976  0000CE  0100               	movlb	0	; () banked
  5977  0000D0  51B2               	movf	(_etime+1)& (0+255),w,b
  5978  0000D2  0100               	movlb	0	; () banked
  5979  0000D4  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  5980  0000D6  0100               	movlb	0	; () banked
  5981  0000D8  6FB8               	movwf	(_operation_time+1)& (0+255),b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;main.c: 196: bottle_count_disp = -1;
  5985  0000DA  0100               	movlb	0	; () banked
  5986  0000DC  69EE               	setf	_bottle_count_disp& (0+255),b
  5987  0000DE  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;main.c: 197: curr_state = BOTTLETIME;
  5991  0000E0  0E06               	movlw	6
  5992  0000E2  D08E               	goto	L7
  5993  0000E4                     i2l279:
  5994                           
  5995                           ;main.c: 200: bottle_count_disp = -1;
  5996  0000E4  0100               	movlb	0	; () banked
  5997  0000E6  69EE               	setf	_bottle_count_disp& (0+255),b
  5998  0000E8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;main.c: 201: curr_state = DATETIME;
  6002  0000EA  0E04               	movlw	4
  6003  0000EC  D089               	goto	L7
  6004  0000EE                     i2l280:
  6005                           
  6006                           ;main.c: 204: LATAbits.LATA2 = 0;
  6007  0000EE  9489               	bcf	3977,2,c	;volatile
  6008                           
  6009                           ;main.c: 205: INT0IE = 0;
  6010  0000F0  98F2               	bcf	intcon,4,c	;volatile
  6011                           
  6012                           ;main.c: 206: INT2IE = 0;
  6013  0000F2  98F0               	bcf	intcon3,4,c	;volatile
  6014                           
  6015                           ;main.c: 207: TMR0IE = 0;
  6016  0000F4  9AF2               	bcf	intcon,5,c	;volatile
  6017                           
  6018                           ;main.c: 208: TMR0ON = 0;
  6019  0000F6  9ED5               	bcf	4053,7,c	;volatile
  6020                           
  6021                           ;main.c: 210: read_time();
  6022  0000F8  ECAB  F013         	call	_read_time	;wreg free
  6023                           
  6024                           ;main.c: 211: end_time[1] = time[1];
  6025  0000FC  C09F  F079         	movff	_time+1,_end_time+1
  6026                           
  6027                           ;main.c: 212: end_time[0] = time[0];
  6028  000100  C09E  F078         	movff	_time,_end_time
  6029                           
  6030                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6031  000104  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6032  000108  6A64               	clrf	dec_to_hex@num+1,c
  6033  00010A  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6034  00010E  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6035  000112  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6036                           
  6037                           ;main.c: 213: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6038  000116  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6039  00011A  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6040  00011E  0E00               	movlw	0
  6041  000120  6E04               	movwf	i2___wmul@multiplicand+1,c
  6042  000122  0E3C               	movlw	60
  6043  000124  6E03               	movwf	i2___wmul@multiplicand,c
  6044  000126  EC3A  F016         	call	i2___wmul	;wreg free
  6045  00012A  C001  F0C4         	movff	?i2___wmul,??_isr
  6046  00012E  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6047  000132  C07A  F063         	movff	_start_time,dec_to_hex@num
  6048  000136  6A64               	clrf	dec_to_hex@num+1,c
  6049  000138  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6050  00013C  5063               	movf	?_dec_to_hex,w,c
  6051  00013E  0100               	movlb	0	; () banked
  6052  000140  25C4               	addwf	??_isr& (0+255),w,b
  6053  000142  6E7C               	movwf	_stime,c
  6054  000144  5064               	movf	?_dec_to_hex+1,w,c
  6055  000146  0100               	movlb	0	; () banked
  6056  000148  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6057  00014A  6E7D               	movwf	_stime+1,c
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6061  00014C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  6062  000150  6A64               	clrf	dec_to_hex@num+1,c
  6063  000152  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6064  000156  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6065  00015A  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6066                           
  6067                           ;main.c: 214: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6068  00015E  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6069  000162  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6070  000166  0E00               	movlw	0
  6071  000168  6E04               	movwf	i2___wmul@multiplicand+1,c
  6072  00016A  0E3C               	movlw	60
  6073  00016C  6E03               	movwf	i2___wmul@multiplicand,c
  6074  00016E  EC3A  F016         	call	i2___wmul	;wreg free
  6075  000172  C001  F0C4         	movff	?i2___wmul,??_isr
  6076  000176  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6077  00017A  C078  F063         	movff	_end_time,dec_to_hex@num
  6078  00017E  6A64               	clrf	dec_to_hex@num+1,c
  6079  000180  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6080  000184  5063               	movf	?_dec_to_hex,w,c
  6081  000186  0100               	movlb	0	; () banked
  6082  000188  25C4               	addwf	??_isr& (0+255),w,b
  6083  00018A  0100               	movlb	0	; () banked
  6084  00018C  6FB1               	movwf	_etime& (0+255),b
  6085  00018E  5064               	movf	?_dec_to_hex+1,w,c
  6086  000190  0100               	movlb	0	; () banked
  6087  000192  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6088  000194  0100               	movlb	0	; () banked
  6089  000196  6FB2               	movwf	(_etime+1)& (0+255),b
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;main.c: 215: lcdInst(0b00000001);
  6093  000198  0E01               	movlw	1
  6094  00019A  ECB4  F016         	call	i2_lcdInst
  6095                           
  6096                           ;main.c: 216: bottle_count_disp = -1;
  6097  00019E  0100               	movlb	0	; () banked
  6098  0001A0  69EE               	setf	_bottle_count_disp& (0+255),b
  6099  0001A2  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;main.c: 217: curr_state = OPERATIONEND;
  6103  0001A4  0E03               	movlw	3
  6104  0001A6  D02C               	goto	L7
  6105  0001A8                     i2l4539:
  6106                           
  6107                           ;main.c: 220: read_colorsensor();
  6108  0001A8  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6109                           
  6110                           ;main.c: 221: lcdInst(0b10000000);
  6111  0001AC  0E80               	movlw	128
  6112  0001AE  ECB4  F016         	call	i2_lcdInst
  6113                           
  6114                           ;main.c: 222: printf("C%u R%u                ", color[0], color[1]);
  6115  0001B2  0E67               	movlw	low STR_1
  6116  0001B4  6E0D               	movwf	i2printf@f,c
  6117  0001B6  0EFE               	movlw	high STR_1
  6118  0001B8  6E0E               	movwf	i2printf@f+1,c
  6119  0001BA  C096  F00F         	movff	_color,?i2_printf+2
  6120  0001BE  C097  F010         	movff	_color+1,?i2_printf+3
  6121  0001C2  C098  F011         	movff	_color+2,?i2_printf+4
  6122  0001C6  C099  F012         	movff	_color+3,?i2_printf+5
  6123  0001CA  EC82  F005         	call	i2_printf	;wreg free
  6124                           
  6125                           ;main.c: 223: lcdInst(0b11000000);
  6126  0001CE  0EC0               	movlw	192
  6127  0001D0  ECB4  F016         	call	i2_lcdInst
  6128                           
  6129                           ;main.c: 224: printf("G%u B%u                ", color[2], color[3]);
  6130  0001D4  0E4F               	movlw	low STR_2
  6131  0001D6  6E0D               	movwf	i2printf@f,c
  6132  0001D8  0EFE               	movlw	high STR_2
  6133  0001DA  6E0E               	movwf	i2printf@f+1,c
  6134  0001DC  C09A  F00F         	movff	_color+4,?i2_printf+2
  6135  0001E0  C09B  F010         	movff	_color+5,?i2_printf+3
  6136  0001E4  C09C  F011         	movff	_color+6,?i2_printf+4
  6137  0001E8  C09D  F012         	movff	_color+7,?i2_printf+5
  6138  0001EC  EC82  F005         	call	i2_printf	;wreg free
  6139                           
  6140                           ;main.c: 225: break;
  6141  0001F0  D037               	goto	i2l272
  6142  0001F2                     i2l282:
  6143                           
  6144                           ;main.c: 227: LATAbits.LATA2 = 0;
  6145  0001F2  9489               	bcf	3977,2,c	;volatile
  6146                           
  6147                           ;main.c: 228: (INTCONbits.GIE = 0);
  6148  0001F4  9EF2               	bcf	intcon,7,c	;volatile
  6149                           
  6150                           ;main.c: 229: TMR0ON = 0;
  6151  0001F6  9ED5               	bcf	4053,7,c	;volatile
  6152                           
  6153                           ;main.c: 230: lcdInst(0b00000001);
  6154  0001F8  0E01               	movlw	1
  6155  0001FA  ECB4  F016         	call	i2_lcdInst
  6156                           
  6157                           ;main.c: 231: curr_state = EMERGENCYSTOP;
  6158  0001FE  0E01               	movlw	1
  6159  000200                     L7:
  6160  000200  0100               	movlb	0	; () banked
  6161  000202  6FC3               	movwf	_curr_state& (0+255),b
  6162                           
  6163                           ;main.c: 232: break;
  6164  000204  D02D               	goto	i2l272
  6165  000206                     i2l4553:
  6166                           
  6167                           ;main.c: 234: servo_rotate0(1);
  6168  000206  0E00               	movlw	0
  6169  000208  6E02               	movwf	servo_rotate0@degree+1,c
  6170  00020A  0E01               	movlw	1
  6171  00020C  6E01               	movwf	servo_rotate0@degree,c
  6172  00020E  EC19  F012         	call	_servo_rotate0	;wreg free
  6173                           
  6174                           ;main.c: 235: break;
  6175  000212  D026               	goto	i2l272
  6176  000214                     i2l4555:
  6177                           
  6178                           ;main.c: 237: servo_rotate0(2);
  6179  000214  0E00               	movlw	0
  6180  000216  6E02               	movwf	servo_rotate0@degree+1,c
  6181  000218  0E02               	movlw	2
  6182  00021A  6E01               	movwf	servo_rotate0@degree,c
  6183  00021C  EC19  F012         	call	_servo_rotate0	;wreg free
  6184                           
  6185                           ;main.c: 239: }
  6186                           
  6187                           ;main.c: 238: break;
  6188  000220  D01F               	goto	i2l272
  6189  000222                     i2l4559:
  6190  000222  5081               	movf	3969,w,c	;volatile
  6191                           
  6192                           ; Switch size 1, requested type "space"
  6193                           ; Number of cases is 10, Range of values is 15 to 239
  6194                           ; switch strategies available:
  6195                           ; Name         Instructions Cycles
  6196                           ; simple_byte           31    16 (average)
  6197                           ;	Chosen strategy is simple_byte
  6198  000224  0A0F               	xorlw	15	; case 15
  6199  000226  B4D8               	btfsc	status,2,c
  6200  000228  D719               	goto	i2l273
  6201  00022A  0A10               	xorlw	16	; case 31
  6202  00022C  B4D8               	btfsc	status,2,c
  6203  00022E  D735               	goto	i2l4505
  6204  000230  0A30               	xorlw	48	; case 47
  6205  000232  B4D8               	btfsc	status,2,c
  6206  000234  D73D               	goto	i2l4511
  6207  000236  0A10               	xorlw	16	; case 63
  6208  000238  B4D8               	btfsc	status,2,c
  6209  00023A  D754               	goto	i2l279
  6210  00023C  0A70               	xorlw	112	; case 79
  6211  00023E  B4D8               	btfsc	status,2,c
  6212  000240  D756               	goto	i2l280
  6213  000242  0A10               	xorlw	16	; case 95
  6214  000244  B4D8               	btfsc	status,2,c
  6215  000246  D7B0               	goto	i2l4539
  6216  000248  0A20               	xorlw	32	; case 127
  6217  00024A  B4D8               	btfsc	status,2,c
  6218  00024C  D7DC               	goto	i2l4553
  6219  00024E  0AC0               	xorlw	192	; case 191
  6220  000250  B4D8               	btfsc	status,2,c
  6221  000252  D7E0               	goto	i2l4555
  6222  000254  0A70               	xorlw	112	; case 207
  6223  000256  B4D8               	btfsc	status,2,c
  6224  000258  D7CC               	goto	i2l282
  6225  00025A  0A20               	xorlw	32	; case 239
  6226  00025C  B4D8               	btfsc	status,2,c
  6227  00025E  D6F9               	goto	i2l271
  6228  000260                     i2l272:
  6229                           
  6230                           ;main.c: 240: INT1IF = 0;
  6231  000260  90F0               	bcf	intcon3,0,c	;volatile
  6232                           
  6233                           ;main.c: 241: }
  6234  000262  D247               	goto	i2l317
  6235  000264                     i2l269:
  6236                           
  6237                           ;main.c: 242: else if (INT0IF){
  6238  000264  A2F2               	btfss	intcon,1,c	;volatile
  6239  000266  D10D               	goto	i2l286
  6240                           
  6241                           ;main.c: 243: if(PORTAbits.RA3){
  6242  000268  A680               	btfss	3968,3,c	;volatile
  6243  00026A  D109               	goto	i2l4615
  6244                           
  6245                           ;main.c: 244: read_colorsensor();
  6246  00026C  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6247                           
  6248                           ;main.c: 245: if (color[0]>10000 && color[1]>10000 && color[2]>10000 && color[3]>10000) 
      +                          bottlequeue[bottlequeue_tail] = 2;
  6249  000270  0100               	movlb	0	; () banked
  6250  000272  BF97               	btfsc	(_color+1)& (0+255),7,b
  6251  000274  D034               	goto	i2l4575
  6252  000276  0E11               	movlw	17
  6253  000278  0100               	movlb	0	; () banked
  6254  00027A  5D96               	subwf	_color& (0+255),w,b
  6255  00027C  0E27               	movlw	39
  6256  00027E  0100               	movlb	0	; () banked
  6257  000280  5997               	subwfb	(_color+1)& (0+255),w,b
  6258  000282  A0D8               	btfss	status,0,c
  6259  000284  D02C               	goto	i2l4575
  6260                           
  6261                           ; BSR set to: 0
  6262  000286  0100               	movlb	0	; () banked
  6263  000288  BF99               	btfsc	(_color+3)& (0+255),7,b
  6264  00028A  D029               	goto	i2l4575
  6265  00028C  0E11               	movlw	17
  6266  00028E  0100               	movlb	0	; () banked
  6267  000290  5D98               	subwf	(_color+2)& (0+255),w,b
  6268  000292  0E27               	movlw	39
  6269  000294  0100               	movlb	0	; () banked
  6270  000296  5999               	subwfb	(_color+3)& (0+255),w,b
  6271  000298  A0D8               	btfss	status,0,c
  6272  00029A  D021               	goto	i2l4575
  6273                           
  6274                           ; BSR set to: 0
  6275  00029C  0100               	movlb	0	; () banked
  6276  00029E  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6277  0002A0  D01E               	goto	i2l4575
  6278  0002A2  0E11               	movlw	17
  6279  0002A4  0100               	movlb	0	; () banked
  6280  0002A6  5D9A               	subwf	(_color+4)& (0+255),w,b
  6281  0002A8  0E27               	movlw	39
  6282  0002AA  0100               	movlb	0	; () banked
  6283  0002AC  599B               	subwfb	(_color+5)& (0+255),w,b
  6284  0002AE  A0D8               	btfss	status,0,c
  6285  0002B0  D016               	goto	i2l4575
  6286                           
  6287                           ; BSR set to: 0
  6288  0002B2  0100               	movlb	0	; () banked
  6289  0002B4  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6290  0002B6  D013               	goto	i2l4575
  6291  0002B8  0E11               	movlw	17
  6292  0002BA  0100               	movlb	0	; () banked
  6293  0002BC  5D9C               	subwf	(_color+6)& (0+255),w,b
  6294  0002BE  0E27               	movlw	39
  6295  0002C0  0100               	movlb	0	; () banked
  6296  0002C2  599D               	subwfb	(_color+7)& (0+255),w,b
  6297  0002C4  A0D8               	btfss	status,0,c
  6298  0002C6  D00B               	goto	i2l4575
  6299                           
  6300                           ; BSR set to: 0
  6301  0002C8  90D8               	bcf	status,0,c
  6302  0002CA  3476               	rlcf	_bottlequeue_tail,w,c
  6303  0002CC  6ED9               	movwf	fsr2l,c
  6304  0002CE  3477               	rlcf	_bottlequeue_tail+1,w,c
  6305  0002D0  6EDA               	movwf	fsr2h,c
  6306  0002D2  0E80               	movlw	low _bottlequeue
  6307  0002D4  26D9               	addwf	fsr2l,f,c
  6308  0002D6  0E00               	movlw	high _bottlequeue
  6309  0002D8  22DA               	addwfc	fsr2h,f,c
  6310  0002DA  0E02               	movlw	2
  6311  0002DC  D0A4               	goto	L10
  6312  0002DE                     i2l4575:
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;main.c: 246: else if (color[0]<3000 && color[1]<1100 && color[2]<1100 && color[3]<1200)
      +                           bottlequeue[bottlequeue_tail] = 4;
  6316  0002DE  0100               	movlb	0	; () banked
  6317  0002E0  BF97               	btfsc	(_color+1)& (0+255),7,b
  6318  0002E2  D008               	goto	i2l4577
  6319  0002E4  0EB8               	movlw	184
  6320  0002E6  0100               	movlb	0	; () banked
  6321  0002E8  5D96               	subwf	_color& (0+255),w,b
  6322  0002EA  0E0B               	movlw	11
  6323  0002EC  0100               	movlb	0	; () banked
  6324  0002EE  5997               	subwfb	(_color+1)& (0+255),w,b
  6325  0002F0  B0D8               	btfsc	status,0,c
  6326  0002F2  D02C               	goto	i2l4585
  6327  0002F4                     i2l4577:
  6328                           
  6329                           ; BSR set to: 0
  6330  0002F4  0100               	movlb	0	; () banked
  6331  0002F6  BF99               	btfsc	(_color+3)& (0+255),7,b
  6332  0002F8  D008               	goto	i2l4579
  6333  0002FA  0E4C               	movlw	76
  6334  0002FC  0100               	movlb	0	; () banked
  6335  0002FE  5D98               	subwf	(_color+2)& (0+255),w,b
  6336  000300  0E04               	movlw	4
  6337  000302  0100               	movlb	0	; () banked
  6338  000304  5999               	subwfb	(_color+3)& (0+255),w,b
  6339  000306  B0D8               	btfsc	status,0,c
  6340  000308  D021               	goto	i2l4585
  6341  00030A                     i2l4579:
  6342                           
  6343                           ; BSR set to: 0
  6344  00030A  0100               	movlb	0	; () banked
  6345  00030C  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6346  00030E  D008               	goto	i2l4581
  6347  000310  0E4C               	movlw	76
  6348  000312  0100               	movlb	0	; () banked
  6349  000314  5D9A               	subwf	(_color+4)& (0+255),w,b
  6350  000316  0E04               	movlw	4
  6351  000318  0100               	movlb	0	; () banked
  6352  00031A  599B               	subwfb	(_color+5)& (0+255),w,b
  6353  00031C  B0D8               	btfsc	status,0,c
  6354  00031E  D016               	goto	i2l4585
  6355  000320                     i2l4581:
  6356                           
  6357                           ; BSR set to: 0
  6358  000320  0100               	movlb	0	; () banked
  6359  000322  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6360  000324  D008               	goto	i2l4583
  6361  000326  0EB0               	movlw	176
  6362  000328  0100               	movlb	0	; () banked
  6363  00032A  5D9C               	subwf	(_color+6)& (0+255),w,b
  6364  00032C  0E04               	movlw	4
  6365  00032E  0100               	movlb	0	; () banked
  6366  000330  599D               	subwfb	(_color+7)& (0+255),w,b
  6367  000332  B0D8               	btfsc	status,0,c
  6368  000334  D00B               	goto	i2l4585
  6369  000336                     i2l4583:
  6370                           
  6371                           ; BSR set to: 0
  6372  000336  90D8               	bcf	status,0,c
  6373  000338  3476               	rlcf	_bottlequeue_tail,w,c
  6374  00033A  6ED9               	movwf	fsr2l,c
  6375  00033C  3477               	rlcf	_bottlequeue_tail+1,w,c
  6376  00033E  6EDA               	movwf	fsr2h,c
  6377  000340  0E80               	movlw	low _bottlequeue
  6378  000342  26D9               	addwf	fsr2l,f,c
  6379  000344  0E00               	movlw	high _bottlequeue
  6380  000346  22DA               	addwfc	fsr2h,f,c
  6381  000348  0E04               	movlw	4
  6382  00034A  D06D               	goto	L10
  6383  00034C                     i2l4585:
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;main.c: 247: else if (color[0]<5200 && color[1]<3200 && color[3]<1400 && color[3]<1300)
      +                           bottlequeue[bottlequeue_tail] = 0;
  6387  00034C  0100               	movlb	0	; () banked
  6388  00034E  BF97               	btfsc	(_color+1)& (0+255),7,b
  6389  000350  D008               	goto	i2l4587
  6390  000352  0E50               	movlw	80
  6391  000354  0100               	movlb	0	; () banked
  6392  000356  5D96               	subwf	_color& (0+255),w,b
  6393  000358  0E14               	movlw	20
  6394  00035A  0100               	movlb	0	; () banked
  6395  00035C  5997               	subwfb	(_color+1)& (0+255),w,b
  6396  00035E  B0D8               	btfsc	status,0,c
  6397  000360  D02C               	goto	i2l4595
  6398  000362                     i2l4587:
  6399                           
  6400                           ; BSR set to: 0
  6401  000362  0100               	movlb	0	; () banked
  6402  000364  BF99               	btfsc	(_color+3)& (0+255),7,b
  6403  000366  D008               	goto	i2l4589
  6404  000368  0E80               	movlw	128
  6405  00036A  0100               	movlb	0	; () banked
  6406  00036C  5D98               	subwf	(_color+2)& (0+255),w,b
  6407  00036E  0E0C               	movlw	12
  6408  000370  0100               	movlb	0	; () banked
  6409  000372  5999               	subwfb	(_color+3)& (0+255),w,b
  6410  000374  B0D8               	btfsc	status,0,c
  6411  000376  D021               	goto	i2l4595
  6412  000378                     i2l4589:
  6413                           
  6414                           ; BSR set to: 0
  6415  000378  0100               	movlb	0	; () banked
  6416  00037A  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6417  00037C  D008               	goto	i2l4591
  6418  00037E  0E78               	movlw	120
  6419  000380  0100               	movlb	0	; () banked
  6420  000382  5D9C               	subwf	(_color+6)& (0+255),w,b
  6421  000384  0E05               	movlw	5
  6422  000386  0100               	movlb	0	; () banked
  6423  000388  599D               	subwfb	(_color+7)& (0+255),w,b
  6424  00038A  B0D8               	btfsc	status,0,c
  6425  00038C  D016               	goto	i2l4595
  6426  00038E                     i2l4591:
  6427                           
  6428                           ; BSR set to: 0
  6429  00038E  0100               	movlb	0	; () banked
  6430  000390  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6431  000392  D008               	goto	i2l4593
  6432  000394  0E14               	movlw	20
  6433  000396  0100               	movlb	0	; () banked
  6434  000398  5D9C               	subwf	(_color+6)& (0+255),w,b
  6435  00039A  0E05               	movlw	5
  6436  00039C  0100               	movlb	0	; () banked
  6437  00039E  599D               	subwfb	(_color+7)& (0+255),w,b
  6438  0003A0  B0D8               	btfsc	status,0,c
  6439  0003A2  D00B               	goto	i2l4595
  6440  0003A4                     i2l4593:
  6441                           
  6442                           ; BSR set to: 0
  6443  0003A4  90D8               	bcf	status,0,c
  6444  0003A6  3476               	rlcf	_bottlequeue_tail,w,c
  6445  0003A8  6ED9               	movwf	fsr2l,c
  6446  0003AA  3477               	rlcf	_bottlequeue_tail+1,w,c
  6447  0003AC  6EDA               	movwf	fsr2h,c
  6448  0003AE  0E80               	movlw	low _bottlequeue
  6449  0003B0  26D9               	addwf	fsr2l,f,c
  6450  0003B2  0E00               	movlw	high _bottlequeue
  6451  0003B4  22DA               	addwfc	fsr2h,f,c
  6452  0003B6  0E00               	movlw	0
  6453  0003B8  D036               	goto	L10
  6454  0003BA                     i2l4595:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;main.c: 248: else if (color[0]>10000 && color[1]>3600 && color[2]>3900 && color[3]>3400
      +                          ) bottlequeue[bottlequeue_tail] = 6;
  6458  0003BA  0100               	movlb	0	; () banked
  6459  0003BC  BF97               	btfsc	(_color+1)& (0+255),7,b
  6460  0003BE  D036               	goto	i2l4605
  6461  0003C0  0E11               	movlw	17
  6462  0003C2  0100               	movlb	0	; () banked
  6463  0003C4  5D96               	subwf	_color& (0+255),w,b
  6464  0003C6  0E27               	movlw	39
  6465  0003C8  0100               	movlb	0	; () banked
  6466  0003CA  5997               	subwfb	(_color+1)& (0+255),w,b
  6467  0003CC  A0D8               	btfss	status,0,c
  6468  0003CE  D02E               	goto	i2l4605
  6469                           
  6470                           ; BSR set to: 0
  6471  0003D0  0100               	movlb	0	; () banked
  6472  0003D2  BF99               	btfsc	(_color+3)& (0+255),7,b
  6473  0003D4  D02B               	goto	i2l4605
  6474  0003D6  0E11               	movlw	17
  6475  0003D8  0100               	movlb	0	; () banked
  6476  0003DA  5D98               	subwf	(_color+2)& (0+255),w,b
  6477  0003DC  0E0E               	movlw	14
  6478  0003DE  0100               	movlb	0	; () banked
  6479  0003E0  5999               	subwfb	(_color+3)& (0+255),w,b
  6480  0003E2  A0D8               	btfss	status,0,c
  6481  0003E4  D023               	goto	i2l4605
  6482                           
  6483                           ; BSR set to: 0
  6484  0003E6  0100               	movlb	0	; () banked
  6485  0003E8  BF9B               	btfsc	(_color+5)& (0+255),7,b
  6486  0003EA  D020               	goto	i2l4605
  6487  0003EC  0E3D               	movlw	61
  6488  0003EE  0100               	movlb	0	; () banked
  6489  0003F0  5D9A               	subwf	(_color+4)& (0+255),w,b
  6490  0003F2  0E0F               	movlw	15
  6491  0003F4  0100               	movlb	0	; () banked
  6492  0003F6  599B               	subwfb	(_color+5)& (0+255),w,b
  6493  0003F8  A0D8               	btfss	status,0,c
  6494  0003FA  D018               	goto	i2l4605
  6495                           
  6496                           ; BSR set to: 0
  6497  0003FC  0100               	movlb	0	; () banked
  6498  0003FE  BF9D               	btfsc	(_color+7)& (0+255),7,b
  6499  000400  D015               	goto	i2l4605
  6500  000402  0E49               	movlw	73
  6501  000404  0100               	movlb	0	; () banked
  6502  000406  5D9C               	subwf	(_color+6)& (0+255),w,b
  6503  000408  0E0D               	movlw	13
  6504  00040A  0100               	movlb	0	; () banked
  6505  00040C  599D               	subwfb	(_color+7)& (0+255),w,b
  6506  00040E  A0D8               	btfss	status,0,c
  6507  000410  D00D               	goto	i2l4605
  6508                           
  6509                           ; BSR set to: 0
  6510  000412  90D8               	bcf	status,0,c
  6511  000414  3476               	rlcf	_bottlequeue_tail,w,c
  6512  000416  6ED9               	movwf	fsr2l,c
  6513  000418  3477               	rlcf	_bottlequeue_tail+1,w,c
  6514  00041A  6EDA               	movwf	fsr2h,c
  6515  00041C  0E80               	movlw	low _bottlequeue
  6516  00041E  26D9               	addwf	fsr2l,f,c
  6517  000420  0E00               	movlw	high _bottlequeue
  6518  000422  22DA               	addwfc	fsr2h,f,c
  6519  000424  0E06               	movlw	6
  6520  000426                     L10:
  6521  000426  6EDE               	movwf	postinc2,c
  6522  000428  0E00               	movlw	0
  6523  00042A  6EDD               	movwf	postdec2,c
  6524  00042C                     i2l4605:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 249: _delay((unsigned long)((150)*(10000000/4000.0)));
  6528  00042C  0E02               	movlw	2
  6529  00042E  0100               	movlb	0	; () banked
  6530  000430  6FC5               	movwf	(??_isr+1)& (0+255),b
  6531  000432  0EE7               	movlw	231
  6532  000434  0100               	movlb	0	; () banked
  6533  000436  6FC4               	movwf	??_isr& (0+255),b
  6534  000438  0E00               	movlw	0
  6535  00043A                     i2u490_47:
  6536  00043A  2EE8               	decfsz	wreg,f,c
  6537  00043C  D7FE               	bra	i2u490_47
  6538  00043E  2FC4               	decfsz	??_isr& (0+255),f,b
  6539  000440  D7FC               	bra	i2u490_47
  6540  000442  2FC5               	decfsz	(??_isr+1)& (0+255),f,b
  6541  000444  D7FA               	bra	i2u490_47
  6542  000446  F000               	nop	
  6543                           
  6544                           ;main.c: 250: read_colorsensor();
  6545  000448  ECFE  F00C         	call	i2_read_colorsensor	;wreg free
  6546                           
  6547                           ;main.c: 251: if (color[0]>1000) bottlequeue[bottlequeue_tail] += 1;
  6548  00044C  0100               	movlb	0	; () banked
  6549  00044E  BF97               	btfsc	(_color+1)& (0+255),7,b
  6550  000450  D014               	goto	i2l4613
  6551  000452  0EE9               	movlw	233
  6552  000454  0100               	movlb	0	; () banked
  6553  000456  5D96               	subwf	_color& (0+255),w,b
  6554  000458  0E03               	movlw	3
  6555  00045A  0100               	movlb	0	; () banked
  6556  00045C  5997               	subwfb	(_color+1)& (0+255),w,b
  6557  00045E  A0D8               	btfss	status,0,c
  6558  000460  D00C               	goto	i2l4613
  6559                           
  6560                           ; BSR set to: 0
  6561  000462  90D8               	bcf	status,0,c
  6562  000464  3476               	rlcf	_bottlequeue_tail,w,c
  6563  000466  6ED9               	movwf	fsr2l,c
  6564  000468  3477               	rlcf	_bottlequeue_tail+1,w,c
  6565  00046A  6EDA               	movwf	fsr2h,c
  6566  00046C  0E80               	movlw	low _bottlequeue
  6567  00046E  26D9               	addwf	fsr2l,f,c
  6568  000470  0E00               	movlw	high _bottlequeue
  6569  000472  22DA               	addwfc	fsr2h,f,c
  6570  000474  2ADE               	incf	postinc2,f,c
  6571  000476  0E00               	movlw	0
  6572  000478  22DD               	addwfc	postdec2,f,c
  6573  00047A                     i2l4613:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;main.c: 252: bottlequeue_tail += 1;
  6577  00047A  4A76               	infsnz	_bottlequeue_tail,f,c
  6578  00047C  2A77               	incf	_bottlequeue_tail+1,f,c
  6579  00047E                     i2l4615:
  6580                           
  6581                           ;main.c: 253: }
  6582                           ;main.c: 254: INT0IF = 0;
  6583  00047E  92F2               	bcf	intcon,1,c	;volatile
  6584                           
  6585                           ;main.c: 255: }
  6586  000480  D138               	goto	i2l317
  6587  000482                     i2l286:
  6588                           
  6589                           ;main.c: 256: else if (INT2IF){
  6590  000482  A2F0               	btfss	intcon3,1,c	;volatile
  6591  000484  D0BD               	goto	i2l297
  6592                           
  6593                           ;main.c: 257: if(PORTAbits.RA4){
  6594  000486  A880               	btfss	3968,4,c	;volatile
  6595  000488  D0B9               	goto	i2l298
  6596                           
  6597                           ;main.c: 258: nodedata = bottlequeue[bottlequeue_head];
  6598  00048A  90D8               	bcf	status,0,c
  6599  00048C  0100               	movlb	0	; () banked
  6600  00048E  35A5               	rlcf	_bottlequeue_head& (0+255),w,b
  6601  000490  6ED9               	movwf	fsr2l,c
  6602  000492  0100               	movlb	0	; () banked
  6603  000494  35A6               	rlcf	(_bottlequeue_head+1)& (0+255),w,b
  6604  000496  6EDA               	movwf	fsr2h,c
  6605  000498  0E80               	movlw	low _bottlequeue
  6606  00049A  26D9               	addwf	fsr2l,f,c
  6607  00049C  0E00               	movlw	high _bottlequeue
  6608  00049E  22DA               	addwfc	fsr2h,f,c
  6609  0004A0  CFDE F0B3          	movff	postinc2,_nodedata
  6610  0004A4  CFDD F0B4          	movff	postdec2,_nodedata+1
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;main.c: 259: bottlequeue_head += 1;
  6614  0004A8  0100               	movlb	0	; () banked
  6615  0004AA  4BA5               	infsnz	_bottlequeue_head& (0+255),f,b
  6616  0004AC  2BA6               	incf	(_bottlequeue_head+1)& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 260: total_bottle_count += 1;
  6620  0004AE  0100               	movlb	0	; () banked
  6621  0004B0  4BB9               	infsnz	_total_bottle_count& (0+255),f,b
  6622  0004B2  2BBA               	incf	(_total_bottle_count+1)& (0+255),f,b
  6623                           
  6624                           ;main.c: 261: switch (nodedata){
  6625  0004B4  D080               	goto	i2l4675
  6626  0004B6                     i2l4625:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;main.c: 263: servo_rotate0(0);
  6630  0004B6  0E00               	movlw	0
  6631  0004B8  6E02               	movwf	servo_rotate0@degree+1,c
  6632  0004BA  0E00               	movlw	0
  6633  0004BC  6E01               	movwf	servo_rotate0@degree,c
  6634  0004BE  EC19  F012         	call	_servo_rotate0	;wreg free
  6635                           
  6636                           ;main.c: 264: servo_rotate2(0);
  6637  0004C2  0E00               	movlw	0
  6638  0004C4  6E10               	movwf	servo_rotate2@degree+1,c
  6639  0004C6  0E00               	movlw	0
  6640  0004C8  6E0F               	movwf	servo_rotate2@degree,c
  6641  0004CA  ECBD  F010         	call	_servo_rotate2	;wreg free
  6642                           
  6643                           ;main.c: 265: yopcaplbl_count += 1;
  6644  0004CE  0100               	movlb	0	; () banked
  6645  0004D0  4BBF               	infsnz	_yopcaplbl_count& (0+255),f,b
  6646  0004D2  2BC0               	incf	(_yopcaplbl_count+1)& (0+255),f,b
  6647                           
  6648                           ;main.c: 266: break;
  6649  0004D4  D093               	goto	i2l298
  6650  0004D6                     i2l4631:
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;main.c: 268: servo_rotate0(0);
  6654  0004D6  0E00               	movlw	0
  6655  0004D8  6E02               	movwf	servo_rotate0@degree+1,c
  6656  0004DA  0E00               	movlw	0
  6657  0004DC  6E01               	movwf	servo_rotate0@degree,c
  6658  0004DE  EC19  F012         	call	_servo_rotate0	;wreg free
  6659                           
  6660                           ;main.c: 269: servo_rotate2(0);
  6661  0004E2  0E00               	movlw	0
  6662  0004E4  6E10               	movwf	servo_rotate2@degree+1,c
  6663  0004E6  0E00               	movlw	0
  6664  0004E8  6E0F               	movwf	servo_rotate2@degree,c
  6665  0004EA  ECBD  F010         	call	_servo_rotate2	;wreg free
  6666                           
  6667                           ;main.c: 270: yopcap_count += 1;
  6668  0004EE  0100               	movlb	0	; () banked
  6669  0004F0  4BBD               	infsnz	_yopcap_count& (0+255),f,b
  6670  0004F2  2BBE               	incf	(_yopcap_count+1)& (0+255),f,b
  6671                           
  6672                           ;main.c: 271: break;
  6673  0004F4  D083               	goto	i2l298
  6674  0004F6                     i2l4637:
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;main.c: 273: servo_rotate0(0);
  6678  0004F6  0E00               	movlw	0
  6679  0004F8  6E02               	movwf	servo_rotate0@degree+1,c
  6680  0004FA  0E00               	movlw	0
  6681  0004FC  6E01               	movwf	servo_rotate0@degree,c
  6682  0004FE  EC19  F012         	call	_servo_rotate0	;wreg free
  6683                           
  6684                           ;main.c: 274: servo_rotate2(120);
  6685  000502  0E00               	movlw	0
  6686  000504  6E10               	movwf	servo_rotate2@degree+1,c
  6687  000506  0E78               	movlw	120
  6688  000508  6E0F               	movwf	servo_rotate2@degree,c
  6689  00050A  ECBD  F010         	call	_servo_rotate2	;wreg free
  6690                           
  6691                           ;main.c: 275: yoplbl_count += 1;
  6692  00050E  0100               	movlb	0	; () banked
  6693  000510  4BC1               	infsnz	_yoplbl_count& (0+255),f,b
  6694  000512  2BC2               	incf	(_yoplbl_count+1)& (0+255),f,b
  6695                           
  6696                           ;main.c: 276: break;
  6697  000514  D073               	goto	i2l298
  6698  000516                     i2l4643:
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;main.c: 278: servo_rotate0(0);
  6702  000516  0E00               	movlw	0
  6703  000518  6E02               	movwf	servo_rotate0@degree+1,c
  6704  00051A  0E00               	movlw	0
  6705  00051C  6E01               	movwf	servo_rotate0@degree,c
  6706  00051E  EC19  F012         	call	_servo_rotate0	;wreg free
  6707                           
  6708                           ;main.c: 279: servo_rotate2(120);
  6709  000522  0E00               	movlw	0
  6710  000524  6E10               	movwf	servo_rotate2@degree+1,c
  6711  000526  0E78               	movlw	120
  6712  000528  6E0F               	movwf	servo_rotate2@degree,c
  6713  00052A  ECBD  F010         	call	_servo_rotate2	;wreg free
  6714                           
  6715                           ;main.c: 280: yop_count += 1;
  6716  00052E  0100               	movlb	0	; () banked
  6717  000530  4BBB               	infsnz	_yop_count& (0+255),f,b
  6718  000532  2BBC               	incf	(_yop_count+1)& (0+255),f,b
  6719                           
  6720                           ;main.c: 281: break;
  6721  000534  D063               	goto	i2l298
  6722  000536                     i2l4649:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;main.c: 283: servo_rotate0(120);
  6726  000536  0E00               	movlw	0
  6727  000538  6E02               	movwf	servo_rotate0@degree+1,c
  6728  00053A  0E78               	movlw	120
  6729  00053C  6E01               	movwf	servo_rotate0@degree,c
  6730  00053E  EC19  F012         	call	_servo_rotate0	;wreg free
  6731                           
  6732                           ;main.c: 284: servo_rotate1(0);
  6733  000542  0E00               	movlw	0
  6734  000544  6E10               	movwf	servo_rotate1@degree+1,c
  6735  000546  0E00               	movlw	0
  6736  000548  6E0F               	movwf	servo_rotate1@degree,c
  6737  00054A  EC17  F011         	call	_servo_rotate1	;wreg free
  6738                           
  6739                           ;main.c: 285: eskacaplbl_count += 1;
  6740  00054E  0100               	movlb	0	; () banked
  6741  000550  4BAD               	infsnz	_eskacaplbl_count& (0+255),f,b
  6742  000552  2BAE               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  6743                           
  6744                           ;main.c: 286: break;
  6745  000554  D053               	goto	i2l298
  6746  000556                     i2l4655:
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 288: servo_rotate0(120);
  6750  000556  0E00               	movlw	0
  6751  000558  6E02               	movwf	servo_rotate0@degree+1,c
  6752  00055A  0E78               	movlw	120
  6753  00055C  6E01               	movwf	servo_rotate0@degree,c
  6754  00055E  EC19  F012         	call	_servo_rotate0	;wreg free
  6755                           
  6756                           ;main.c: 289: servo_rotate1(0);
  6757  000562  0E00               	movlw	0
  6758  000564  6E10               	movwf	servo_rotate1@degree+1,c
  6759  000566  0E00               	movlw	0
  6760  000568  6E0F               	movwf	servo_rotate1@degree,c
  6761  00056A  EC17  F011         	call	_servo_rotate1	;wreg free
  6762                           
  6763                           ;main.c: 290: eskacap_count += 1;
  6764  00056E  0100               	movlb	0	; () banked
  6765  000570  4BAB               	infsnz	_eskacap_count& (0+255),f,b
  6766  000572  2BAC               	incf	(_eskacap_count+1)& (0+255),f,b
  6767                           
  6768                           ;main.c: 291: break;
  6769  000574  D043               	goto	i2l298
  6770  000576                     i2l4661:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;main.c: 293: servo_rotate0(120);
  6774  000576  0E00               	movlw	0
  6775  000578  6E02               	movwf	servo_rotate0@degree+1,c
  6776  00057A  0E78               	movlw	120
  6777  00057C  6E01               	movwf	servo_rotate0@degree,c
  6778  00057E  EC19  F012         	call	_servo_rotate0	;wreg free
  6779                           
  6780                           ;main.c: 294: servo_rotate1(120);
  6781  000582  0E00               	movlw	0
  6782  000584  6E10               	movwf	servo_rotate1@degree+1,c
  6783  000586  0E78               	movlw	120
  6784  000588  6E0F               	movwf	servo_rotate1@degree,c
  6785  00058A  EC17  F011         	call	_servo_rotate1	;wreg free
  6786                           
  6787                           ;main.c: 295: eskalbl_count += 1;
  6788  00058E  0100               	movlb	0	; () banked
  6789  000590  4BAF               	infsnz	_eskalbl_count& (0+255),f,b
  6790  000592  2BB0               	incf	(_eskalbl_count+1)& (0+255),f,b
  6791                           
  6792                           ;main.c: 296: break;
  6793  000594  D033               	goto	i2l298
  6794  000596                     i2l4667:
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;main.c: 298: servo_rotate0(120);
  6798  000596  0E00               	movlw	0
  6799  000598  6E02               	movwf	servo_rotate0@degree+1,c
  6800  00059A  0E78               	movlw	120
  6801  00059C  6E01               	movwf	servo_rotate0@degree,c
  6802  00059E  EC19  F012         	call	_servo_rotate0	;wreg free
  6803                           
  6804                           ;main.c: 299: servo_rotate1(120);
  6805  0005A2  0E00               	movlw	0
  6806  0005A4  6E10               	movwf	servo_rotate1@degree+1,c
  6807  0005A6  0E78               	movlw	120
  6808  0005A8  6E0F               	movwf	servo_rotate1@degree,c
  6809  0005AA  EC17  F011         	call	_servo_rotate1	;wreg free
  6810                           
  6811                           ;main.c: 300: eska_count += 1;
  6812  0005AE  0100               	movlb	0	; () banked
  6813  0005B0  4BA9               	infsnz	_eska_count& (0+255),f,b
  6814  0005B2  2BAA               	incf	(_eska_count+1)& (0+255),f,b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;main.c: 302: }
  6818                           
  6819                           ;main.c: 301: break;
  6820  0005B4  D023               	goto	i2l298
  6821  0005B6                     i2l4675:
  6822                           
  6823                           ; BSR set to: 0
  6824  0005B6  C0B3  F0C4         	movff	_nodedata,??_isr
  6825  0005BA  C0B4  F0C5         	movff	_nodedata+1,??_isr+1
  6826                           
  6827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6828                           ; Switch size 1, requested type "space"
  6829                           ; Number of cases is 1, Range of values is 0 to 0
  6830                           ; switch strategies available:
  6831                           ; Name         Instructions Cycles
  6832                           ; simple_byte            4     3 (average)
  6833                           ;	Chosen strategy is simple_byte
  6834  0005BE  0100               	movlb	0	; () banked
  6835  0005C0  51C5               	movf	(??_isr+1)& (0+255),w,b
  6836  0005C2  0A00               	xorlw	0	; case 0
  6837  0005C4  A4D8               	btfss	status,2,c
  6838  0005C6  D01A               	goto	i2l298
  6839                           
  6840                           ; BSR set to: 0
  6841                           ; Switch size 1, requested type "space"
  6842                           ; Number of cases is 8, Range of values is 0 to 7
  6843                           ; switch strategies available:
  6844                           ; Name         Instructions Cycles
  6845                           ; simple_byte           25    13 (average)
  6846                           ;	Chosen strategy is simple_byte
  6847  0005C8  0100               	movlb	0	; () banked
  6848  0005CA  51C4               	movf	??_isr& (0+255),w,b
  6849  0005CC  0A00               	xorlw	0	; case 0
  6850  0005CE  B4D8               	btfsc	status,2,c
  6851  0005D0  D772               	goto	i2l4625
  6852  0005D2  0A01               	xorlw	1	; case 1
  6853  0005D4  B4D8               	btfsc	status,2,c
  6854  0005D6  D77F               	goto	i2l4631
  6855  0005D8  0A03               	xorlw	3	; case 2
  6856  0005DA  B4D8               	btfsc	status,2,c
  6857  0005DC  D78C               	goto	i2l4637
  6858  0005DE  0A01               	xorlw	1	; case 3
  6859  0005E0  B4D8               	btfsc	status,2,c
  6860  0005E2  D799               	goto	i2l4643
  6861  0005E4  0A07               	xorlw	7	; case 4
  6862  0005E6  B4D8               	btfsc	status,2,c
  6863  0005E8  D7A6               	goto	i2l4649
  6864  0005EA  0A01               	xorlw	1	; case 5
  6865  0005EC  B4D8               	btfsc	status,2,c
  6866  0005EE  D7B3               	goto	i2l4655
  6867  0005F0  0A03               	xorlw	3	; case 6
  6868  0005F2  B4D8               	btfsc	status,2,c
  6869  0005F4  D7C0               	goto	i2l4661
  6870  0005F6  0A01               	xorlw	1	; case 7
  6871  0005F8  B4D8               	btfsc	status,2,c
  6872  0005FA  D7CD               	goto	i2l4667
  6873  0005FC                     i2l298:
  6874                           
  6875                           ;main.c: 303: }
  6876                           ;main.c: 304: INT2IF = 0;
  6877  0005FC  92F0               	bcf	intcon3,1,c	;volatile
  6878                           
  6879                           ;main.c: 305: }
  6880  0005FE  D079               	goto	i2l317
  6881  000600                     i2l297:
  6882                           
  6883                           ;main.c: 306: else if (TMR0IF){
  6884  000600  A4F2               	btfss	intcon,2,c	;volatile
  6885  000602  D05D               	goto	i2l4701
  6886                           
  6887                           ;main.c: 307: LATAbits.LATA2 = 0;
  6888  000604  9489               	bcf	3977,2,c	;volatile
  6889                           
  6890                           ;main.c: 308: TMR0ON = 0;
  6891  000606  9ED5               	bcf	4053,7,c	;volatile
  6892                           
  6893                           ;main.c: 309: read_time();
  6894  000608  ECAB  F013         	call	_read_time	;wreg free
  6895                           
  6896                           ;main.c: 310: end_time[1] = time[1];
  6897  00060C  C09F  F079         	movff	_time+1,_end_time+1
  6898                           
  6899                           ;main.c: 311: end_time[0] = time[0];
  6900  000610  C09E  F078         	movff	_time,_end_time
  6901                           
  6902                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6903  000614  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6904  000618  6A64               	clrf	dec_to_hex@num+1,c
  6905  00061A  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6906  00061E  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6907  000622  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6908                           
  6909                           ;main.c: 312: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6910  000626  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6911  00062A  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6912  00062E  0E00               	movlw	0
  6913  000630  6E04               	movwf	i2___wmul@multiplicand+1,c
  6914  000632  0E3C               	movlw	60
  6915  000634  6E03               	movwf	i2___wmul@multiplicand,c
  6916  000636  EC3A  F016         	call	i2___wmul	;wreg free
  6917  00063A  C001  F0C4         	movff	?i2___wmul,??_isr
  6918  00063E  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6919  000642  C07A  F063         	movff	_start_time,dec_to_hex@num
  6920  000646  6A64               	clrf	dec_to_hex@num+1,c
  6921  000648  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6922  00064C  5063               	movf	?_dec_to_hex,w,c
  6923  00064E  0100               	movlb	0	; () banked
  6924  000650  25C4               	addwf	??_isr& (0+255),w,b
  6925  000652  6E7C               	movwf	_stime,c
  6926  000654  5064               	movf	?_dec_to_hex+1,w,c
  6927  000656  0100               	movlb	0	; () banked
  6928  000658  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6929  00065A  6E7D               	movwf	_stime+1,c
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6933  00065C  C079  F063         	movff	_end_time+1,dec_to_hex@num
  6934  000660  6A64               	clrf	dec_to_hex@num+1,c
  6935  000662  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6936  000666  C063  F074         	movff	?_dec_to_hex,_isr$1352
  6937  00066A  C064  F075         	movff	?_dec_to_hex+1,_isr$1352+1
  6938                           
  6939                           ;main.c: 313: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6940  00066E  C074  F001         	movff	_isr$1352,i2___wmul@multiplier
  6941  000672  C075  F002         	movff	_isr$1352+1,i2___wmul@multiplier+1
  6942  000676  0E00               	movlw	0
  6943  000678  6E04               	movwf	i2___wmul@multiplicand+1,c
  6944  00067A  0E3C               	movlw	60
  6945  00067C  6E03               	movwf	i2___wmul@multiplicand,c
  6946  00067E  EC3A  F016         	call	i2___wmul	;wreg free
  6947  000682  C001  F0C4         	movff	?i2___wmul,??_isr
  6948  000686  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6949  00068A  C078  F063         	movff	_end_time,dec_to_hex@num
  6950  00068E  6A64               	clrf	dec_to_hex@num+1,c
  6951  000690  EC8C  F00B         	call	_dec_to_hex	;wreg free
  6952  000694  5063               	movf	?_dec_to_hex,w,c
  6953  000696  0100               	movlb	0	; () banked
  6954  000698  25C4               	addwf	??_isr& (0+255),w,b
  6955  00069A  0100               	movlb	0	; () banked
  6956  00069C  6FB1               	movwf	_etime& (0+255),b
  6957  00069E  5064               	movf	?_dec_to_hex+1,w,c
  6958  0006A0  0100               	movlb	0	; () banked
  6959  0006A2  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6960  0006A4  0100               	movlb	0	; () banked
  6961  0006A6  6FB2               	movwf	(_etime+1)& (0+255),b
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;main.c: 314: lcdInst(0b00000001);
  6965  0006A8  0E01               	movlw	1
  6966  0006AA  ECB4  F016         	call	i2_lcdInst
  6967                           
  6968                           ;main.c: 315: curr_state = OPERATIONEND;
  6969  0006AE  0E03               	movlw	3
  6970  0006B0  0100               	movlb	0	; () banked
  6971  0006B2  6FC3               	movwf	_curr_state& (0+255),b
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;main.c: 316: bottle_count_disp = -1;
  6975  0006B4  0100               	movlb	0	; () banked
  6976  0006B6  69EE               	setf	_bottle_count_disp& (0+255),b
  6977  0006B8  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;main.c: 317: TMR0IF = 0;
  6981  0006BA  94F2               	bcf	intcon,2,c	;volatile
  6982                           
  6983                           ;main.c: 318: }
  6984  0006BC  D01A               	goto	i2l317
  6985  0006BE                     i2l4701:
  6986                           
  6987                           ;main.c: 321: lcdInst(0b10000000);
  6988  0006BE  0E80               	movlw	128
  6989  0006C0  ECB4  F016         	call	i2_lcdInst
  6990                           
  6991                           ;main.c: 322: printf("bad interrupt");
  6992  0006C4  0EE7               	movlw	low STR_3
  6993  0006C6  6E0D               	movwf	i2printf@f,c
  6994  0006C8  0EFF               	movlw	high STR_3
  6995  0006CA  6E0E               	movwf	i2printf@f+1,c
  6996  0006CC  EC82  F005         	call	i2_printf	;wreg free
  6997                           
  6998                           ;main.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6999  0006D0  0E00               	movlw	0
  7000  0006D2  6E73               	movwf	isr@i,c
  7001  0006D4                     i2l4707:
  7002  0006D4  0E63               	movlw	99
  7003  0006D6  6473               	cpfsgt	isr@i,c
  7004  0006D8  D001               	goto	i2l4711
  7005  0006DA  D7F1               	goto	i2l4701
  7006  0006DC                     i2l4711:
  7007  0006DC  0E21               	movlw	33
  7008  0006DE  0100               	movlb	0	; () banked
  7009  0006E0  6FC4               	movwf	??_isr& (0+255),b
  7010  0006E2  0E76               	movlw	118
  7011  0006E4                     i2u491_47:
  7012  0006E4  2EE8               	decfsz	wreg,f,c
  7013  0006E6  D7FE               	bra	i2u491_47
  7014  0006E8  2FC4               	decfsz	??_isr& (0+255),f,b
  7015  0006EA  D7FC               	bra	i2u491_47
  7016  0006EC  F000               	nop	
  7017  0006EE  2A73               	incf	isr@i,f,c
  7018  0006F0  D7F1               	goto	i2l4707
  7019  0006F2                     i2l317:
  7020  0006F2  C0D3  FFF5         	movff	??_isr+15,tablat
  7021  0006F6  C0D2  FFF8         	movff	??_isr+14,tblptru
  7022  0006FA  C0D1  FFF7         	movff	??_isr+13,tblptrh
  7023  0006FE  C0D0  FFF6         	movff	??_isr+12,tblptrl
  7024  000702  C0CF  FFF4         	movff	??_isr+11,prodh
  7025  000706  C0CE  FFF3         	movff	??_isr+10,prodl
  7026  00070A  C0CD  FFDA         	movff	??_isr+9,fsr2h
  7027  00070E  C0CC  FFD9         	movff	??_isr+8,fsr2l
  7028  000712  C0CB  FFE2         	movff	??_isr+7,fsr1h
  7029  000716  C0CA  FFE1         	movff	??_isr+6,fsr1l
  7030  00071A  C0C9  FFEA         	movff	??_isr+5,fsr0h
  7031  00071E  C0C8  FFE9         	movff	??_isr+4,fsr0l
  7032  000722  C0C7  FFFB         	movff	??_isr+3,pclatu
  7033  000726  C0C6  FFFA         	movff	??_isr+2,pclath
  7034  00072A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7035  00072C  0011               	retfie		f
  7036  00072E                     __end_of_isr:
  7037                           	opt stack 0
  7038                           pclatu	equ	0xFFB
  7039                           pclath	equ	0xFFA
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           intcon	equ	0xFF2
  7047                           intcon2	equ	0xFF1
  7048                           intcon3	equ	0xFF0
  7049                           postinc0	equ	0xFEE
  7050                           fsr0h	equ	0xFEA
  7051                           fsr0l	equ	0xFE9
  7052                           wreg	equ	0xFE8
  7053                           fsr1h	equ	0xFE2
  7054                           fsr1l	equ	0xFE1
  7055                           indf2	equ	0xFDF
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           fsr2h	equ	0xFDA
  7059                           fsr2l	equ	0xFD9
  7060                           status	equ	0xFD8
  7061                           
  7062 ;; *************** function i2_read_colorsensor *****************
  7063 ;; Defined at:
  7064 ;;		line 534 in file "main.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  7069 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  7070 ;;  read_colorse    2   15[COMRAM] int 
  7071 ;; Return value:  Size  Location     Type
  7072 ;;                  1    wreg      void 
  7073 ;; Registers used:
  7074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;Total ram usage:       14 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:    2
  7087 ;; This function calls:
  7088 ;;		i2_I2C_Master_Read
  7089 ;;		i2_I2C_Master_Start
  7090 ;;		i2_I2C_Master_Stop
  7091 ;;		i2_I2C_Master_Write
  7092 ;; This function is called by:
  7093 ;;		_isr
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text28
  7098  0019FC                     __ptext28:
  7099                           	opt stack 0
  7100  0019FC                     i2_read_colorsensor:
  7101                           	opt stack 23
  7102                           
  7103                           ;main.c: 539: unsigned char color_low[4];
  7104                           ;main.c: 540: unsigned char color_high[4];
  7105                           ;main.c: 541: int i;
  7106                           ;main.c: 544: I2C_Master_Start();
  7107                           
  7108                           ;incstack = 0
  7109  0019FC  ECD4  F016         	call	i2_I2C_Master_Start	;wreg free
  7110                           
  7111                           ;main.c: 545: I2C_Master_Write(0b01010010);
  7112  001A00  0E00               	movlw	0
  7113  001A02  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7114  001A04  0E52               	movlw	82
  7115  001A06  6E02               	movwf	i2I2C_Master_Write@d,c
  7116  001A08  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  7117                           
  7118                           ;main.c: 546: I2C_Master_Write(0b10110100);
  7119  001A0C  0E00               	movlw	0
  7120  001A0E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7121  001A10  0EB4               	movlw	180
  7122  001A12  6E02               	movwf	i2I2C_Master_Write@d,c
  7123  001A14  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  7124                           
  7125                           ;main.c: 547: I2C_Master_Start();
  7126  001A18  ECD4  F016         	call	i2_I2C_Master_Start	;wreg free
  7127                           
  7128                           ;main.c: 548: I2C_Master_Write(0b01010011);
  7129  001A1C  0E00               	movlw	0
  7130  001A1E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7131  001A20  0E53               	movlw	83
  7132  001A22  6E02               	movwf	i2I2C_Master_Write@d,c
  7133  001A24  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  7134                           
  7135                           ;main.c: 549: for(i=0; i<3; i++){
  7136  001A28  0E00               	movlw	0
  7137  001A2A  6E11               	movwf	i2read_colorsensor@i+1,c
  7138  001A2C  0E00               	movlw	0
  7139  001A2E  6E10               	movwf	i2read_colorsensor@i,c
  7140  001A30                     i2l4263:
  7141  001A30  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  7142  001A32  D006               	goto	i2l4267
  7143  001A34  5011               	movf	i2read_colorsensor@i+1,w,c
  7144  001A36  E11B               	bnz	i2l4273
  7145  001A38  0E03               	movlw	3
  7146  001A3A  5C10               	subwf	i2read_colorsensor@i,w,c
  7147  001A3C  B0D8               	btfsc	status,0,c
  7148  001A3E  D017               	goto	i2l4273
  7149  001A40                     i2l4267:
  7150                           
  7151                           ;main.c: 550: color_low[i] = I2C_Master_Read(1);
  7152  001A40  0E08               	movlw	low i2read_colorsensor@color_low
  7153  001A42  2410               	addwf	i2read_colorsensor@i,w,c
  7154  001A44  6ED9               	movwf	fsr2l,c
  7155  001A46  0E00               	movlw	high i2read_colorsensor@color_low
  7156  001A48  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7157  001A4A  6EDA               	movwf	fsr2h,c
  7158  001A4C  0E01               	movlw	1
  7159  001A4E  EC27  F016         	call	i2_I2C_Master_Read
  7160  001A52  6EDF               	movwf	indf2,c
  7161                           
  7162                           ;main.c: 551: color_high[i] = I2C_Master_Read(1);
  7163  001A54  0E0C               	movlw	low i2read_colorsensor@color_high
  7164  001A56  2410               	addwf	i2read_colorsensor@i,w,c
  7165  001A58  6ED9               	movwf	fsr2l,c
  7166  001A5A  0E00               	movlw	high i2read_colorsensor@color_high
  7167  001A5C  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7168  001A5E  6EDA               	movwf	fsr2h,c
  7169  001A60  0E01               	movlw	1
  7170  001A62  EC27  F016         	call	i2_I2C_Master_Read
  7171  001A66  6EDF               	movwf	indf2,c
  7172  001A68  4A10               	infsnz	i2read_colorsensor@i,f,c
  7173  001A6A  2A11               	incf	i2read_colorsensor@i+1,f,c
  7174  001A6C  D7E1               	goto	i2l4263
  7175  001A6E                     i2l4273:
  7176                           
  7177                           ;main.c: 552: }
  7178                           ;main.c: 553: color_low[3] = I2C_Master_Read(1);
  7179  001A6E  0E01               	movlw	1
  7180  001A70  EC27  F016         	call	i2_I2C_Master_Read
  7181  001A74  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  7182                           
  7183                           ;main.c: 554: color_high[3] = I2C_Master_Read(0);
  7184  001A76  0E00               	movlw	0
  7185  001A78  EC27  F016         	call	i2_I2C_Master_Read
  7186  001A7C  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  7187                           
  7188                           ;main.c: 555: I2C_Master_Stop();
  7189  001A7E  ECD0  F016         	call	i2_I2C_Master_Stop	;wreg free
  7190                           
  7191                           ;main.c: 557: for(i=0; i<4; i++){
  7192  001A82  0E00               	movlw	0
  7193  001A84  6E11               	movwf	i2read_colorsensor@i+1,c
  7194  001A86  0E00               	movlw	0
  7195  001A88  6E10               	movwf	i2read_colorsensor@i,c
  7196  001A8A                     i2l4277:
  7197  001A8A  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  7198  001A8C  D006               	goto	i2l4281
  7199  001A8E  5011               	movf	i2read_colorsensor@i+1,w,c
  7200  001A90  E12B               	bnz	i2l415
  7201  001A92  0E04               	movlw	4
  7202  001A94  5C10               	subwf	i2read_colorsensor@i,w,c
  7203  001A96  B0D8               	btfsc	status,0,c
  7204  001A98  0012               	return	
  7205  001A9A                     i2l4281:
  7206                           
  7207                           ;main.c: 558: color[i] = (color_high[i] << 8)|(color_low[i]);
  7208  001A9A  0E0C               	movlw	low i2read_colorsensor@color_high
  7209  001A9C  2410               	addwf	i2read_colorsensor@i,w,c
  7210  001A9E  6ED9               	movwf	fsr2l,c
  7211  001AA0  0E00               	movlw	high i2read_colorsensor@color_high
  7212  001AA2  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7213  001AA4  6EDA               	movwf	fsr2h,c
  7214  001AA6  50DF               	movf	indf2,w,c
  7215  001AA8  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7216  001AAA  5004               	movf	??i2_read_colorsensor,w,c
  7217  001AAC  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  7218  001AAE  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  7219  001AB0  0E08               	movlw	low i2read_colorsensor@color_low
  7220  001AB2  2410               	addwf	i2read_colorsensor@i,w,c
  7221  001AB4  6ED9               	movwf	fsr2l,c
  7222  001AB6  0E00               	movlw	high i2read_colorsensor@color_low
  7223  001AB8  2011               	addwfc	i2read_colorsensor@i+1,w,c
  7224  001ABA  6EDA               	movwf	fsr2h,c
  7225  001ABC  50DF               	movf	indf2,w,c
  7226  001ABE  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  7227  001AC0  5007               	movf	??i2_read_colorsensor+3,w,c
  7228  001AC2  1205               	iorwf	??i2_read_colorsensor+1,f,c
  7229  001AC4  0E00               	movlw	0
  7230  001AC6  1206               	iorwf	??i2_read_colorsensor+2,f,c
  7231  001AC8  90D8               	bcf	status,0,c
  7232  001ACA  3410               	rlcf	i2read_colorsensor@i,w,c
  7233  001ACC  6ED9               	movwf	fsr2l,c
  7234  001ACE  3411               	rlcf	i2read_colorsensor@i+1,w,c
  7235  001AD0  6EDA               	movwf	fsr2h,c
  7236  001AD2  0E96               	movlw	low _color
  7237  001AD4  26D9               	addwf	fsr2l,f,c
  7238  001AD6  0E00               	movlw	high _color
  7239  001AD8  22DA               	addwfc	fsr2h,f,c
  7240  001ADA  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  7241  001ADE  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  7242  001AE2  4A10               	infsnz	i2read_colorsensor@i,f,c
  7243  001AE4  2A11               	incf	i2read_colorsensor@i+1,f,c
  7244  001AE6  D7D1               	goto	i2l4277
  7245  001AE8                     i2l415:
  7246  001AE8  0012               	return		;funcret
  7247  001AEA                     __end_ofi2_read_colorsensor:
  7248                           	opt stack 0
  7249                           pclatu	equ	0xFFB
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           intcon2	equ	0xFF1
  7259                           intcon3	equ	0xFF0
  7260                           postinc0	equ	0xFEE
  7261                           fsr0h	equ	0xFEA
  7262                           fsr0l	equ	0xFE9
  7263                           wreg	equ	0xFE8
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           indf2	equ	0xFDF
  7267                           postinc2	equ	0xFDE
  7268                           postdec2	equ	0xFDD
  7269                           fsr2h	equ	0xFDA
  7270                           fsr2l	equ	0xFD9
  7271                           status	equ	0xFD8
  7272                           
  7273 ;; *************** function i2_printf *****************
  7274 ;; Defined at:
  7275 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7278 ;;		 -> STR_24(15), STR_23(16), STR_22(28), STR_21(25), 
  7279 ;;		 -> STR_20(24), STR_19(23), STR_18(18), STR_17(23), 
  7280 ;;		 -> STR_16(10), STR_15(18), STR_14(18), STR_13(18), 
  7281 ;;		 -> STR_12(18), STR_11(18), STR_10(18), STR_9(18), 
  7282 ;;		 -> STR_8(18), STR_7(17), STR_6(17), STR_5(23), 
  7283 ;;		 -> STR_4(23), STR_3(14), STR_2(24), STR_1(24), 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  printf          4    0        struct .
  7286 ;;  printf          3    0        PTR const unsigned char 
  7287 ;;  printf          2   29[COMRAM] int 
  7288 ;;  printf          2   26[COMRAM] unsigned int 
  7289 ;;  printf          2   23[COMRAM] PTR void [1]
  7290 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7291 ;;  printf          2    0        unsigned int 
  7292 ;;  printf          1   31[COMRAM] char 
  7293 ;;  printf          1   28[COMRAM] unsigned char 
  7294 ;;  printf          1   25[COMRAM] char 
  7295 ;;  printf          1   22[COMRAM] unsigned char 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  2   12[COMRAM] int 
  7298 ;; Registers used:
  7299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7305 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7309 ;;Total ram usage:       20 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    2
  7312 ;; This function calls:
  7313 ;;		i2___lwdiv
  7314 ;;		i2___lwmod
  7315 ;;		i2___wmul
  7316 ;;		i2_isdigit
  7317 ;;		i2_putch
  7318 ;; This function is called by:
  7319 ;;		_isr
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           	psect	text29
  7324  000B04                     __ptext29:
  7325                           	opt stack 0
  7326  000B04                     i2_printf:
  7327                           	opt stack 23
  7328                           
  7329                           ;doprnt.c: 466: va_list ap;
  7330                           ;doprnt.c: 499: signed char c;
  7331                           ;doprnt.c: 501: int width;
  7332                           ;doprnt.c: 506: signed char prec;
  7333                           ;doprnt.c: 508: unsigned char flag;
  7334                           ;doprnt.c: 523: union {
  7335                           ;doprnt.c: 524: unsigned long vd;
  7336                           ;doprnt.c: 525: double integ;
  7337                           ;doprnt.c: 526: } tmpval;
  7338                           ;doprnt.c: 528: unsigned int val;
  7339                           ;doprnt.c: 529: unsigned len;
  7340                           ;doprnt.c: 530: const char * cp;
  7341                           ;doprnt.c: 533: *ap = __va_start();
  7342                           
  7343                           ;incstack = 0
  7344  000B04  0E0F               	movlw	low (?i2_printf+2)
  7345  000B06  6E18               	movwf	i2printf@ap,c
  7346  000B08  0E00               	movlw	high (?i2_printf+2)
  7347  000B0A  6E19               	movwf	i2printf@ap+1,c
  7348                           
  7349                           ;doprnt.c: 536: while(c = *f++) {
  7350  000B0C  D184               	goto	i2l4419
  7351  000B0E                     i2l4289:
  7352                           
  7353                           ;doprnt.c: 538: if(c != '%')
  7354  000B0E  0E25               	movlw	37
  7355  000B10  1820               	xorwf	i2printf@c,w,c
  7356  000B12  B4D8               	btfsc	status,2,c
  7357  000B14  D004               	goto	i2l4293
  7358                           
  7359                           ;doprnt.c: 540: {
  7360                           ;doprnt.c: 541: (putch(c) );
  7361  000B16  5020               	movf	i2printf@c,w,c
  7362  000B18  ECAE  F016         	call	i2_putch
  7363                           
  7364                           ;doprnt.c: 542: continue;
  7365  000B1C  D17C               	goto	i2l4419
  7366  000B1E                     i2l4293:
  7367                           
  7368                           ;doprnt.c: 543: }
  7369                           ;doprnt.c: 546: width = 0;
  7370  000B1E  0E00               	movlw	0
  7371  000B20  6E1F               	movwf	i2printf@width+1,c
  7372  000B22  0E00               	movlw	0
  7373  000B24  6E1E               	movwf	i2printf@width,c
  7374                           
  7375                           ;doprnt.c: 548: flag = 0;
  7376  000B26  0E00               	movlw	0
  7377  000B28  6E1D               	movwf	i2printf@flag,c
  7378                           
  7379                           ;doprnt.c: 551: switch(*f) {
  7380                           
  7381                           ;doprnt.c: 550: for(;;) {
  7382  000B2A  D003               	goto	i2l4299
  7383  000B2C                     i2l4295:
  7384                           
  7385                           ;doprnt.c: 580: flag |= 0x04;
  7386  000B2C  841D               	bsf	i2printf@flag,2,c
  7387                           
  7388                           ;doprnt.c: 581: f++;
  7389  000B2E  4A0D               	infsnz	i2printf@f,f,c
  7390  000B30  2A0E               	incf	i2printf@f+1,f,c
  7391  000B32                     i2l4299:
  7392  000B32  C00D  FFF6         	movff	i2printf@f,tblptrl
  7393  000B36  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7394  000B3A                     	if	0	;tblptru may be non-zero
  7395  000B3A                     	endif
  7396  000B3A                     	if	0	;tblptru may be non-zero
  7397  000B3A                     	endif
  7398  000B3A  0008               	tblrd		*
  7399  000B3C  50F5               	movf	tablat,w,c
  7400                           
  7401                           ; Switch size 1, requested type "space"
  7402                           ; Number of cases is 1, Range of values is 48 to 48
  7403                           ; switch strategies available:
  7404                           ; Name         Instructions Cycles
  7405                           ; simple_byte            4     3 (average)
  7406                           ;	Chosen strategy is simple_byte
  7407  000B3E  0A30               	xorlw	48	; case 48
  7408  000B40  B4D8               	btfsc	status,2,c
  7409  000B42  D7F4               	goto	i2l4295
  7410                           
  7411                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7412                           
  7413                           ;doprnt.c: 586: }
  7414                           
  7415                           ;doprnt.c: 585: break;
  7416  000B44  C00D  FFF6         	movff	i2printf@f,tblptrl
  7417  000B48  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7418  000B4C                     	if	0	;tblptru may be non-zero
  7419  000B4C                     	endif
  7420  000B4C                     	if	0	;tblptru may be non-zero
  7421  000B4C                     	endif
  7422  000B4C  0008               	tblrd		*
  7423  000B4E  50F5               	movf	tablat,w,c
  7424  000B50  EC70  F016         	call	i2_isdigit
  7425  000B54  A0D8               	btfss	status,0,c
  7426  000B56  D038               	goto	i2l4319
  7427                           
  7428                           ;doprnt.c: 598: width = 0;
  7429  000B58  0E00               	movlw	0
  7430  000B5A  6E1F               	movwf	i2printf@width+1,c
  7431  000B5C  0E00               	movlw	0
  7432  000B5E  6E1E               	movwf	i2printf@width,c
  7433  000B60                     i2l4305:
  7434                           
  7435                           ;doprnt.c: 600: width *= 10;
  7436  000B60  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7437  000B64  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7438  000B68  0E00               	movlw	0
  7439  000B6A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7440  000B6C  0E0A               	movlw	10
  7441  000B6E  6E03               	movwf	i2___wmul@multiplicand,c
  7442  000B70  EC3A  F016         	call	i2___wmul	;wreg free
  7443  000B74  C001  F01E         	movff	?i2___wmul,i2printf@width
  7444  000B78  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7445                           
  7446                           ;doprnt.c: 601: width += *f++ - '0';
  7447  000B7C  0ED0               	movlw	208
  7448  000B7E  6E13               	movwf	??i2_printf& (0+255),c
  7449  000B80  0EFF               	movlw	255
  7450  000B82  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7451  000B84  C00D  FFF6         	movff	i2printf@f,tblptrl
  7452  000B88  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7453  000B8C                     	if	0	;tblptru may be non-zero
  7454  000B8C                     	endif
  7455  000B8C                     	if	0	;tblptru may be non-zero
  7456  000B8C                     	endif
  7457  000B8C  0008               	tblrd		*
  7458  000B8E  50F5               	movf	tablat,w,c
  7459  000B90  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7460  000B92  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7461  000B94  5013               	movf	??i2_printf,w,c
  7462  000B96  2615               	addwf	??i2_printf+2,f,c
  7463  000B98  5014               	movf	??i2_printf+1,w,c
  7464  000B9A  2216               	addwfc	??i2_printf+3,f,c
  7465  000B9C  5015               	movf	??i2_printf+2,w,c
  7466  000B9E  261E               	addwf	i2printf@width,f,c
  7467  000BA0  5016               	movf	??i2_printf+3,w,c
  7468  000BA2  221F               	addwfc	i2printf@width+1,f,c
  7469  000BA4  4A0D               	infsnz	i2printf@f,f,c
  7470  000BA6  2A0E               	incf	i2printf@f+1,f,c
  7471                           
  7472                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7473  000BA8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7474  000BAC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7475  000BB0                     	if	0	;tblptru may be non-zero
  7476  000BB0                     	endif
  7477  000BB0                     	if	0	;tblptru may be non-zero
  7478  000BB0                     	endif
  7479  000BB0  0008               	tblrd		*
  7480  000BB2  50F5               	movf	tablat,w,c
  7481  000BB4  EC70  F016         	call	i2_isdigit
  7482  000BB8  A0D8               	btfss	status,0,c
  7483  000BBA  D006               	goto	i2l4319
  7484  000BBC  D7D1               	goto	i2l4305
  7485  000BBE                     i2l4313:
  7486                           
  7487                           ;doprnt.c: 721: flag |= 0x80;
  7488  000BBE  8E1D               	bsf	i2printf@flag,7,c
  7489                           
  7490                           ;doprnt.c: 723: break;
  7491  000BC0  D01D               	goto	i2l4321
  7492  000BC2                     i2l4315:
  7493                           
  7494                           ;doprnt.c: 818: flag |= 0xC0;
  7495  000BC2  0EC0               	movlw	192
  7496  000BC4  121D               	iorwf	i2printf@flag,f,c
  7497                           
  7498                           ;doprnt.c: 822: }
  7499                           
  7500                           ;doprnt.c: 819: break;
  7501  000BC6  D01A               	goto	i2l4321
  7502  000BC8                     i2l4319:
  7503  000BC8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7504  000BCC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7505  000BD0  4A0D               	infsnz	i2printf@f,f,c
  7506  000BD2  2A0E               	incf	i2printf@f+1,f,c
  7507  000BD4                     	if	0	;tblptru may be non-zero
  7508  000BD4                     	endif
  7509  000BD4                     	if	0	;tblptru may be non-zero
  7510  000BD4                     	endif
  7511  000BD4  0008               	tblrd		*
  7512  000BD6  CFF5 F020          	movff	tablat,i2printf@c
  7513  000BDA  5020               	movf	i2printf@c,w,c
  7514                           
  7515                           ; Switch size 1, requested type "space"
  7516                           ; Number of cases is 5, Range of values is 0 to 120
  7517                           ; switch strategies available:
  7518                           ; Name         Instructions Cycles
  7519                           ; simple_byte           16     9 (average)
  7520                           ;	Chosen strategy is simple_byte
  7521  000BDC  0A00               	xorlw	0	; case 0
  7522  000BDE  B4D8               	btfsc	status,2,c
  7523  000BE0  0012               	return	
  7524  000BE2  0A64               	xorlw	100	; case 100
  7525  000BE4  B4D8               	btfsc	status,2,c
  7526  000BE6  D00A               	goto	i2l4321
  7527  000BE8  0A0D               	xorlw	13	; case 105
  7528  000BEA  B4D8               	btfsc	status,2,c
  7529  000BEC  D007               	goto	i2l4321
  7530  000BEE  0A1C               	xorlw	28	; case 117
  7531  000BF0  B4D8               	btfsc	status,2,c
  7532  000BF2  D7E7               	goto	i2l4315
  7533  000BF4  0A0D               	xorlw	13	; case 120
  7534  000BF6  B4D8               	btfsc	status,2,c
  7535  000BF8  D7E2               	goto	i2l4313
  7536  000BFA  D10D               	goto	i2l4419
  7537  000BFC                     i2l4321:
  7538                           
  7539                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7540  000BFC  C01D  F013         	movff	i2printf@flag,??i2_printf
  7541  000C00  0EC0               	movlw	192
  7542  000C02  1613               	andwf	??i2_printf,f,c
  7543  000C04  A4D8               	btfss	status,2,c
  7544  000C06  D015               	goto	i2l4333
  7545                           
  7546                           ;doprnt.c: 1253: {
  7547                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7548  000C08  C018  FFD9         	movff	i2printf@ap,fsr2l
  7549  000C0C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7550  000C10  CFDE F01B          	movff	postinc2,i2printf@val
  7551  000C14  CFDD F01C          	movff	postdec2,i2printf@val+1
  7552  000C18  0E02               	movlw	2
  7553  000C1A  2618               	addwf	i2printf@ap,f,c
  7554  000C1C  0E00               	movlw	0
  7555  000C1E  2219               	addwfc	i2printf@ap+1,f,c
  7556                           
  7557                           ;doprnt.c: 1261: if((int)val < 0) {
  7558  000C20  AE1C               	btfss	i2printf@val+1,7,c
  7559  000C22  D044               	goto	i2l4367
  7560                           
  7561                           ;doprnt.c: 1262: flag |= 0x03;
  7562  000C24  0E03               	movlw	3
  7563  000C26  121D               	iorwf	i2printf@flag,f,c
  7564                           
  7565                           ;doprnt.c: 1263: val = -val;
  7566  000C28  6C1B               	negf	i2printf@val,c
  7567  000C2A  1E1C               	comf	i2printf@val+1,f,c
  7568  000C2C  B0D8               	btfsc	status,0,c
  7569  000C2E  2A1C               	incf	i2printf@val+1,f,c
  7570                           
  7571                           ;doprnt.c: 1264: }
  7572                           ;doprnt.c: 1266: }
  7573  000C30  D03D               	goto	i2l4367
  7574  000C32                     i2l4333:
  7575                           
  7576                           ;doprnt.c: 1268: else
  7577                           ;doprnt.c: 1273: {
  7578                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7579  000C32  C018  FFD9         	movff	i2printf@ap,fsr2l
  7580  000C36  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7581  000C3A  CFDE F01B          	movff	postinc2,i2printf@val
  7582  000C3E  CFDD F01C          	movff	postdec2,i2printf@val+1
  7583  000C42  0E02               	movlw	2
  7584  000C44  2618               	addwf	i2printf@ap,f,c
  7585  000C46  0E00               	movlw	0
  7586  000C48  2219               	addwfc	i2printf@ap+1,f,c
  7587                           
  7588                           ;doprnt.c: 1287: }
  7589                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7590  000C4A  D030               	goto	i2l4367
  7591  000C4C                     i2l4337:
  7592                           
  7593                           ;doprnt.c: 1302: case 0xC0:
  7594                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7595  000C4C  0E01               	movlw	1
  7596  000C4E  6E20               	movwf	i2printf@c,c
  7597  000C50                     i2l4339:
  7598  000C50  0E05               	movlw	5
  7599  000C52  1820               	xorwf	i2printf@c,w,c
  7600  000C54  B4D8               	btfsc	status,2,c
  7601  000C56  D035               	goto	i2l4369
  7602                           
  7603                           ;doprnt.c: 1306: if(val < dpowers[c])
  7604  000C58  5020               	movf	i2printf@c,w,c
  7605  000C5A  0D02               	mullw	2
  7606  000C5C  0EC8               	movlw	low _dpowers
  7607  000C5E  24F3               	addwf	prodl,w,c
  7608  000C60  6EF6               	movwf	tblptrl,c
  7609  000C62  0EFD               	movlw	high _dpowers
  7610  000C64  20F4               	addwfc	prodh,w,c
  7611  000C66  6EF7               	movwf	tblptrh,c
  7612  000C68                     	if	0	;There are less than 3 active tblptr bytes
  7613  000C68                     	endif
  7614  000C68  0009               	tblrd		*+
  7615  000C6A  50F5               	movf	tablat,w,c
  7616  000C6C  5C1B               	subwf	i2printf@val,w,c
  7617  000C6E  0009               	tblrd		*+
  7618  000C70  50F5               	movf	tablat,w,c
  7619  000C72  581C               	subwfb	i2printf@val+1,w,c
  7620  000C74  A0D8               	btfss	status,0,c
  7621  000C76  D025               	goto	i2l4369
  7622                           
  7623                           ;doprnt.c: 1307: break;
  7624  000C78  2A20               	incf	i2printf@c,f,c
  7625  000C7A  D7EA               	goto	i2l4339
  7626  000C7C                     i2l4351:
  7627                           
  7628                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7629  000C7C  0E01               	movlw	1
  7630  000C7E  6E20               	movwf	i2printf@c,c
  7631  000C80                     i2l4353:
  7632  000C80  0E04               	movlw	4
  7633  000C82  1820               	xorwf	i2printf@c,w,c
  7634  000C84  B4D8               	btfsc	status,2,c
  7635  000C86  D01D               	goto	i2l4369
  7636                           
  7637                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7638  000C88  5020               	movf	i2printf@c,w,c
  7639  000C8A  0D02               	mullw	2
  7640  000C8C  0ED2               	movlw	low _hexpowers
  7641  000C8E  24F3               	addwf	prodl,w,c
  7642  000C90  6EF6               	movwf	tblptrl,c
  7643  000C92  0EFD               	movlw	high _hexpowers
  7644  000C94  20F4               	addwfc	prodh,w,c
  7645  000C96  6EF7               	movwf	tblptrh,c
  7646  000C98                     	if	0	;There are less than 3 active tblptr bytes
  7647  000C98                     	endif
  7648  000C98  0009               	tblrd		*+
  7649  000C9A  50F5               	movf	tablat,w,c
  7650  000C9C  5C1B               	subwf	i2printf@val,w,c
  7651  000C9E  0009               	tblrd		*+
  7652  000CA0  50F5               	movf	tablat,w,c
  7653  000CA2  581C               	subwfb	i2printf@val+1,w,c
  7654  000CA4  A0D8               	btfss	status,0,c
  7655  000CA6  D00D               	goto	i2l4369
  7656                           
  7657                           ;doprnt.c: 1318: break;
  7658  000CA8  2A20               	incf	i2printf@c,f,c
  7659  000CAA  D7EA               	goto	i2l4353
  7660  000CAC                     i2l4367:
  7661  000CAC  501D               	movf	i2printf@flag,w,c
  7662  000CAE  0BC0               	andlw	192
  7663                           
  7664                           ; Switch size 1, requested type "space"
  7665                           ; Number of cases is 3, Range of values is 0 to 192
  7666                           ; switch strategies available:
  7667                           ; Name         Instructions Cycles
  7668                           ; simple_byte           10     6 (average)
  7669                           ;	Chosen strategy is simple_byte
  7670  000CB0  0A00               	xorlw	0	; case 0
  7671  000CB2  B4D8               	btfsc	status,2,c
  7672  000CB4  D7CB               	goto	i2l4337
  7673  000CB6  0A80               	xorlw	128	; case 128
  7674  000CB8  B4D8               	btfsc	status,2,c
  7675  000CBA  D7E0               	goto	i2l4351
  7676  000CBC  0A40               	xorlw	64	; case 192
  7677  000CBE  B4D8               	btfsc	status,2,c
  7678  000CC0  D7C5               	goto	i2l4337
  7679  000CC2                     i2l4369:
  7680                           
  7681                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7682  000CC2  501E               	movf	i2printf@width,w,c
  7683  000CC4  101F               	iorwf	i2printf@width+1,w,c
  7684  000CC6  B4D8               	btfsc	status,2,c
  7685  000CC8  D009               	goto	i2l4375
  7686  000CCA  C01D  F013         	movff	i2printf@flag,??i2_printf
  7687  000CCE  0E03               	movlw	3
  7688  000CD0  1613               	andwf	??i2_printf,f,c
  7689  000CD2  B4D8               	btfsc	status,2,c
  7690  000CD4  D003               	goto	i2l4375
  7691                           
  7692                           ;doprnt.c: 1346: width--;
  7693  000CD6  061E               	decf	i2printf@width,f,c
  7694  000CD8  A0D8               	btfss	status,0,c
  7695  000CDA  061F               	decf	i2printf@width+1,f,c
  7696  000CDC                     i2l4375:
  7697                           
  7698                           ;doprnt.c: 1381: if(width > c)
  7699  000CDC  0E80               	movlw	128
  7700  000CDE  BE20               	btfsc	i2printf@c,7,c
  7701  000CE0  0E7F               	movlw	127
  7702  000CE2  6E13               	movwf	??i2_printf& (0+255),c
  7703  000CE4  501E               	movf	i2printf@width,w,c
  7704  000CE6  5C20               	subwf	i2printf@c,w,c
  7705  000CE8  501F               	movf	i2printf@width+1,w,c
  7706  000CEA  0A80               	xorlw	128
  7707  000CEC  5813               	subwfb	??i2_printf& (0+255),w,c
  7708  000CEE  B0D8               	btfsc	status,0,c
  7709  000CF0  D007               	goto	i2l4379
  7710                           
  7711                           ;doprnt.c: 1382: width -= c;
  7712  000CF2  5020               	movf	i2printf@c,w,c
  7713  000CF4  5E1E               	subwf	i2printf@width,f,c
  7714  000CF6  0E00               	movlw	0
  7715  000CF8  BE20               	btfsc	i2printf@c,7,c
  7716  000CFA  0EFF               	movlw	255
  7717  000CFC  5A1F               	subwfb	i2printf@width+1,f,c
  7718  000CFE  D004               	goto	i2l4381
  7719  000D00                     i2l4379:
  7720                           
  7721                           ;doprnt.c: 1383: else
  7722                           ;doprnt.c: 1384: width = 0;
  7723  000D00  0E00               	movlw	0
  7724  000D02  6E1F               	movwf	i2printf@width+1,c
  7725  000D04  0E00               	movlw	0
  7726  000D06  6E1E               	movwf	i2printf@width,c
  7727  000D08                     i2l4381:
  7728                           
  7729                           ;doprnt.c: 1387: if(flag & 0x04) {
  7730  000D08  A41D               	btfss	i2printf@flag,2,c
  7731  000D0A  D014               	goto	i2l4393
  7732                           
  7733                           ;doprnt.c: 1392: if(flag & 0x03)
  7734  000D0C  C01D  F013         	movff	i2printf@flag,??i2_printf
  7735  000D10  0E03               	movlw	3
  7736  000D12  1613               	andwf	??i2_printf,f,c
  7737  000D14  B4D8               	btfsc	status,2,c
  7738  000D16  D003               	goto	i2l4387
  7739                           
  7740                           ;doprnt.c: 1393: (putch('-') );
  7741  000D18  0E2D               	movlw	45
  7742  000D1A  ECAE  F016         	call	i2_putch
  7743  000D1E                     i2l4387:
  7744                           
  7745                           ;doprnt.c: 1415: if(width)
  7746  000D1E  501E               	movf	i2printf@width,w,c
  7747  000D20  101F               	iorwf	i2printf@width+1,w,c
  7748  000D22  B4D8               	btfsc	status,2,c
  7749  000D24  D01E               	goto	i2l4403
  7750                           
  7751                           ;doprnt.c: 1417: (putch('0') );
  7752                           
  7753                           ;doprnt.c: 1416: do
  7754  000D26  0E30               	movlw	48
  7755  000D28  ECAE  F016         	call	i2_putch
  7756                           
  7757                           ;doprnt.c: 1418: while(--width);
  7758  000D2C  061E               	decf	i2printf@width,f,c
  7759  000D2E  A0D8               	btfss	status,0,c
  7760  000D30  061F               	decf	i2printf@width+1,f,c
  7761  000D32  D7F5               	goto	i2l4387
  7762  000D34                     i2l4393:
  7763                           
  7764                           ;doprnt.c: 1422: {
  7765                           ;doprnt.c: 1424: if(width
  7766                           ;doprnt.c: 1428: )
  7767  000D34  501E               	movf	i2printf@width,w,c
  7768  000D36  101F               	iorwf	i2printf@width+1,w,c
  7769  000D38  B4D8               	btfsc	status,2,c
  7770  000D3A  D00A               	goto	i2l4399
  7771  000D3C                     i2l4395:
  7772                           
  7773                           ;doprnt.c: 1430: (putch(' ') );
  7774  000D3C  0E20               	movlw	32
  7775  000D3E  ECAE  F016         	call	i2_putch
  7776                           
  7777                           ;doprnt.c: 1431: while(--width);
  7778  000D42  061E               	decf	i2printf@width,f,c
  7779  000D44  A0D8               	btfss	status,0,c
  7780  000D46  061F               	decf	i2printf@width+1,f,c
  7781  000D48  501E               	movf	i2printf@width,w,c
  7782  000D4A  101F               	iorwf	i2printf@width+1,w,c
  7783  000D4C  A4D8               	btfss	status,2,c
  7784  000D4E  D7F6               	goto	i2l4395
  7785  000D50                     i2l4399:
  7786                           
  7787                           ;doprnt.c: 1438: if(flag & 0x03)
  7788  000D50  C01D  F013         	movff	i2printf@flag,??i2_printf
  7789  000D54  0E03               	movlw	3
  7790  000D56  1613               	andwf	??i2_printf,f,c
  7791  000D58  B4D8               	btfsc	status,2,c
  7792  000D5A  D003               	goto	i2l4403
  7793                           
  7794                           ;doprnt.c: 1439: (putch('-') );
  7795  000D5C  0E2D               	movlw	45
  7796  000D5E  ECAE  F016         	call	i2_putch
  7797  000D62                     i2l4403:
  7798                           
  7799                           ;doprnt.c: 1469: }
  7800                           ;doprnt.c: 1472: prec = c;
  7801  000D62  C020  F01A         	movff	i2printf@c,i2printf@prec
  7802                           
  7803                           ;doprnt.c: 1474: while(prec--) {
  7804  000D66  D053               	goto	i2l4417
  7805  000D68                     i2l4405:
  7806                           
  7807                           ;doprnt.c: 1486: case 0xC0:
  7808                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7809  000D68  501A               	movf	i2printf@prec,w,c
  7810  000D6A  0D02               	mullw	2
  7811  000D6C  0EC8               	movlw	low _dpowers
  7812  000D6E  24F3               	addwf	prodl,w,c
  7813  000D70  6EF6               	movwf	tblptrl,c
  7814  000D72  0EFD               	movlw	high _dpowers
  7815  000D74  20F4               	addwfc	prodh,w,c
  7816  000D76  6EF7               	movwf	tblptrh,c
  7817  000D78                     	if	0	;There are less than 3 active tblptr bytes
  7818  000D78                     	endif
  7819  000D78  0009               	tblrd		*+
  7820  000D7A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7821  000D7E  000A               	tblrd		*-
  7822  000D80  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7823  000D84  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7824  000D88  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7825  000D8C  ECD1  F014         	call	i2___lwdiv	;wreg free
  7826  000D90  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7827  000D94  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7828  000D98  0E00               	movlw	0
  7829  000D9A  6E0B               	movwf	i2___lwmod@divisor+1,c
  7830  000D9C  0E0A               	movlw	10
  7831  000D9E  6E0A               	movwf	i2___lwmod@divisor,c
  7832  000DA0  EC49  F015         	call	i2___lwmod	;wreg free
  7833  000DA4  5008               	movf	?i2___lwmod,w,c
  7834  000DA6  0F30               	addlw	48
  7835  000DA8  6E20               	movwf	i2printf@c,c
  7836                           
  7837                           ;doprnt.c: 1491: break;
  7838  000DAA  D02E               	goto	i2l4415
  7839  000DAC                     i2l4407:
  7840                           
  7841                           ;doprnt.c: 1499: {
  7842                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7843  000DAC  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7844  000DB0  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7845  000DB4  501A               	movf	i2printf@prec,w,c
  7846  000DB6  0D02               	mullw	2
  7847  000DB8  0ED2               	movlw	low _hexpowers
  7848  000DBA  24F3               	addwf	prodl,w,c
  7849  000DBC  6EF6               	movwf	tblptrl,c
  7850  000DBE  0EFD               	movlw	high _hexpowers
  7851  000DC0  20F4               	addwfc	prodh,w,c
  7852  000DC2  6EF7               	movwf	tblptrh,c
  7853  000DC4                     	if	0	;There are less than 3 active tblptr bytes
  7854  000DC4                     	endif
  7855  000DC4  0009               	tblrd		*+
  7856  000DC6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7857  000DCA  000A               	tblrd		*-
  7858  000DCC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7859  000DD0  ECD1  F014         	call	i2___lwdiv	;wreg free
  7860  000DD4  5001               	movf	?i2___lwdiv,w,c
  7861  000DD6  0B0F               	andlw	15
  7862  000DD8  6E17               	movwf	i2printf@idx,c
  7863                           
  7864                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7865  000DDA  5017               	movf	i2printf@idx,w,c
  7866  000DDC  0D01               	mullw	1
  7867  000DDE  0E95               	movlw	low STR_25
  7868  000DE0  24F3               	addwf	prodl,w,c
  7869  000DE2  6EF6               	movwf	tblptrl,c
  7870  000DE4  0EFF               	movlw	high STR_25
  7871  000DE6  20F4               	addwfc	prodh,w,c
  7872  000DE8  6EF7               	movwf	tblptrh,c
  7873  000DEA                     	if	0	;There are less than 3 active tblptr bytes
  7874  000DEA                     	endif
  7875  000DEA  0008               	tblrd		*
  7876  000DEC  CFF5 F020          	movff	tablat,i2printf@c
  7877                           
  7878                           ;doprnt.c: 1523: }
  7879                           
  7880                           ;doprnt.c: 1508: }
  7881                           ;doprnt.c: 1510: break;
  7882  000DF0  D00B               	goto	i2l4415
  7883  000DF2                     i2l4413:
  7884  000DF2  501D               	movf	i2printf@flag,w,c
  7885  000DF4  0BC0               	andlw	192
  7886                           
  7887                           ; Switch size 1, requested type "space"
  7888                           ; Number of cases is 3, Range of values is 0 to 192
  7889                           ; switch strategies available:
  7890                           ; Name         Instructions Cycles
  7891                           ; simple_byte           10     6 (average)
  7892                           ;	Chosen strategy is simple_byte
  7893  000DF6  0A00               	xorlw	0	; case 0
  7894  000DF8  B4D8               	btfsc	status,2,c
  7895  000DFA  D7B6               	goto	i2l4405
  7896  000DFC  0A80               	xorlw	128	; case 128
  7897  000DFE  B4D8               	btfsc	status,2,c
  7898  000E00  D7D5               	goto	i2l4407
  7899  000E02  0A40               	xorlw	64	; case 192
  7900  000E04  B4D8               	btfsc	status,2,c
  7901  000E06  D7B0               	goto	i2l4405
  7902  000E08                     i2l4415:
  7903                           
  7904                           ;doprnt.c: 1524: (putch(c) );
  7905  000E08  5020               	movf	i2printf@c,w,c
  7906  000E0A  ECAE  F016         	call	i2_putch
  7907  000E0E                     i2l4417:
  7908  000E0E  061A               	decf	i2printf@prec,f,c
  7909  000E10  281A               	incf	i2printf@prec,w,c
  7910  000E12  A4D8               	btfss	status,2,c
  7911  000E14  D7EE               	goto	i2l4413
  7912  000E16                     i2l4419:
  7913  000E16  C00D  FFF6         	movff	i2printf@f,tblptrl
  7914  000E1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7915  000E1E  4A0D               	infsnz	i2printf@f,f,c
  7916  000E20  2A0E               	incf	i2printf@f+1,f,c
  7917  000E22                     	if	0	;tblptru may be non-zero
  7918  000E22                     	endif
  7919  000E22                     	if	0	;tblptru may be non-zero
  7920  000E22                     	endif
  7921  000E22  0008               	tblrd		*
  7922  000E24  CFF5 F020          	movff	tablat,i2printf@c
  7923  000E28  5020               	movf	i2printf@c,w,c
  7924  000E2A  B4D8               	btfsc	status,2,c
  7925  000E2C  0012               	return	
  7926  000E2E  D66F               	goto	i2l4289
  7927  000E30                     __end_ofi2_printf:
  7928                           	opt stack 0
  7929                           pclatu	equ	0xFFB
  7930                           pclath	equ	0xFFA
  7931                           tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           intcon	equ	0xFF2
  7938                           intcon2	equ	0xFF1
  7939                           intcon3	equ	0xFF0
  7940                           postinc0	equ	0xFEE
  7941                           fsr0h	equ	0xFEA
  7942                           fsr0l	equ	0xFE9
  7943                           wreg	equ	0xFE8
  7944                           fsr1h	equ	0xFE2
  7945                           fsr1l	equ	0xFE1
  7946                           indf2	equ	0xFDF
  7947                           postinc2	equ	0xFDE
  7948                           postdec2	equ	0xFDD
  7949                           fsr2h	equ	0xFDA
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8
  7952                           
  7953 ;; *************** function i2_putch *****************
  7954 ;; Defined at:
  7955 ;;		line 31 in file "lcd.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  data            1    wreg     unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  data            1    2[COMRAM] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, status,0, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;Total ram usage:        1 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    1
  7976 ;; This function calls:
  7977 ;;		i2_lcdNibble
  7978 ;; This function is called by:
  7979 ;;		i2_printf
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text30
  7984  002D5C                     __ptext30:
  7985                           	opt stack 0
  7986  002D5C                     i2_putch:
  7987                           	opt stack 23
  7988                           
  7989                           ;incstack = 0
  7990                           ;i2putch@data stored from wreg
  7991  002D5C  6E03               	movwf	i2putch@data,c
  7992                           
  7993                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7994  002D5E  848C               	bsf	3980,2,c	;volatile
  7995                           
  7996                           ;lcd.c: 33: lcdNibble(data);
  7997  002D60  5003               	movf	i2putch@data,w,c
  7998  002D62  EC22  F015         	call	i2_lcdNibble
  7999  002D66  0012               	return		;funcret
  8000  002D68                     __end_ofi2_putch:
  8001                           	opt stack 0
  8002                           pclatu	equ	0xFFB
  8003                           pclath	equ	0xFFA
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodh	equ	0xFF4
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           intcon2	equ	0xFF1
  8012                           intcon3	equ	0xFF0
  8013                           postinc0	equ	0xFEE
  8014                           fsr0h	equ	0xFEA
  8015                           fsr0l	equ	0xFE9
  8016                           wreg	equ	0xFE8
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function i2_isdigit *****************
  8027 ;; Defined at:
  8028 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  c               1    wreg     unsigned char 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  c               1    2[COMRAM] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;		None               void
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:        3 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		i2_printf
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text31
  8056  002CE0                     __ptext31:
  8057                           	opt stack 0
  8058  002CE0                     i2_isdigit:
  8059                           	opt stack 24
  8060                           
  8061                           ;incstack = 0
  8062                           ;i2isdigit@c stored from wreg
  8063  002CE0  6E03               	movwf	i2isdigit@c,c
  8064  002CE2  0E00               	movlw	0
  8065  002CE4  6E02               	movwf	i2_isdigit$821,c
  8066  002CE6  0E3A               	movlw	58
  8067  002CE8  6003               	cpfslt	i2isdigit@c,c
  8068  002CEA  D005               	goto	i2l3951
  8069  002CEC  0E2F               	movlw	47
  8070  002CEE  6403               	cpfsgt	i2isdigit@c,c
  8071  002CF0  D002               	goto	i2l3951
  8072  002CF2  0E01               	movlw	1
  8073  002CF4  6E02               	movwf	i2_isdigit$821,c
  8074  002CF6                     i2l3951:
  8075  002CF6  C002  F001         	movff	i2_isdigit$821,??i2_isdigit
  8076  002CFA  3001               	rrcf	??i2_isdigit,w,c
  8077  002CFC  0012               	return	
  8078  002CFE                     __end_ofi2_isdigit:
  8079                           	opt stack 0
  8080                           pclatu	equ	0xFFB
  8081                           pclath	equ	0xFFA
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon2	equ	0xFF1
  8090                           intcon3	equ	0xFF0
  8091                           postinc0	equ	0xFEE
  8092                           fsr0h	equ	0xFEA
  8093                           fsr0l	equ	0xFE9
  8094                           wreg	equ	0xFE8
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function i2___lwmod *****************
  8105 ;; Defined at:
  8106 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  dividend        2    7[COMRAM] unsigned int 
  8109 ;;  divisor         2    9[COMRAM] unsigned int 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  2    7[COMRAM] unsigned int 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2, status,0
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8121 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;Total ram usage:        5 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		i2_printf
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text32
  8135  002A92                     __ptext32:
  8136                           	opt stack 0
  8137  002A92                     i2___lwmod:
  8138                           	opt stack 24
  8139                           
  8140                           ;incstack = 0
  8141  002A92  500A               	movf	i2___lwmod@divisor,w,c
  8142  002A94  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8143  002A96  B4D8               	btfsc	status,2,c
  8144  002A98  D018               	goto	i2l905
  8145  002A9A  0E01               	movlw	1
  8146  002A9C  6E0C               	movwf	i2___lwmod@counter,c
  8147  002A9E  D004               	goto	i2l3983
  8148  002AA0                     i2l3981:
  8149  002AA0  90D8               	bcf	status,0,c
  8150  002AA2  360A               	rlcf	i2___lwmod@divisor,f,c
  8151  002AA4  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8152  002AA6  2A0C               	incf	i2___lwmod@counter,f,c
  8153  002AA8                     i2l3983:
  8154  002AA8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8155  002AAA  D7FA               	goto	i2l3981
  8156  002AAC                     i2l3985:
  8157  002AAC  500A               	movf	i2___lwmod@divisor,w,c
  8158  002AAE  5C08               	subwf	i2___lwmod@dividend,w,c
  8159  002AB0  500B               	movf	i2___lwmod@divisor+1,w,c
  8160  002AB2  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8161  002AB4  A0D8               	btfss	status,0,c
  8162  002AB6  D004               	goto	i2l3989
  8163  002AB8  500A               	movf	i2___lwmod@divisor,w,c
  8164  002ABA  5E08               	subwf	i2___lwmod@dividend,f,c
  8165  002ABC  500B               	movf	i2___lwmod@divisor+1,w,c
  8166  002ABE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8167  002AC0                     i2l3989:
  8168  002AC0  90D8               	bcf	status,0,c
  8169  002AC2  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8170  002AC4  320A               	rrcf	i2___lwmod@divisor,f,c
  8171  002AC6  2E0C               	decfsz	i2___lwmod@counter,f,c
  8172  002AC8  D7F1               	goto	i2l3985
  8173  002ACA                     i2l905:
  8174  002ACA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8175  002ACE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8176  002AD2  0012               	return		;funcret
  8177  002AD4                     __end_ofi2___lwmod:
  8178                           	opt stack 0
  8179                           pclatu	equ	0xFFB
  8180                           pclath	equ	0xFFA
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           intcon2	equ	0xFF1
  8189                           intcon3	equ	0xFF0
  8190                           postinc0	equ	0xFEE
  8191                           fsr0h	equ	0xFEA
  8192                           fsr0l	equ	0xFE9
  8193                           wreg	equ	0xFE8
  8194                           fsr1h	equ	0xFE2
  8195                           fsr1l	equ	0xFE1
  8196                           indf2	equ	0xFDF
  8197                           postinc2	equ	0xFDE
  8198                           postdec2	equ	0xFDD
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function i2___lwdiv *****************
  8204 ;; Defined at:
  8205 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  dividend        2    0[COMRAM] unsigned int 
  8208 ;;  divisor         2    2[COMRAM] unsigned int 
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8211 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  2    0[COMRAM] unsigned int 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8224 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;Total ram usage:        7 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; This function calls:
  8228 ;;		Nothing
  8229 ;; This function is called by:
  8230 ;;		i2_printf
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text33
  8235  0029A2                     __ptext33:
  8236                           	opt stack 0
  8237  0029A2                     i2___lwdiv:
  8238                           	opt stack 24
  8239                           
  8240                           ;incstack = 0
  8241  0029A2  0E00               	movlw	0
  8242  0029A4  6E06               	movwf	i2___lwdiv@quotient+1,c
  8243  0029A6  0E00               	movlw	0
  8244  0029A8  6E05               	movwf	i2___lwdiv@quotient,c
  8245  0029AA  5003               	movf	i2___lwdiv@divisor,w,c
  8246  0029AC  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8247  0029AE  B4D8               	btfsc	status,2,c
  8248  0029B0  D01C               	goto	i2l895
  8249  0029B2  0E01               	movlw	1
  8250  0029B4  6E07               	movwf	i2___lwdiv@counter,c
  8251  0029B6  D004               	goto	i2l3963
  8252  0029B8                     i2l3961:
  8253  0029B8  90D8               	bcf	status,0,c
  8254  0029BA  3603               	rlcf	i2___lwdiv@divisor,f,c
  8255  0029BC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8256  0029BE  2A07               	incf	i2___lwdiv@counter,f,c
  8257  0029C0                     i2l3963:
  8258  0029C0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8259  0029C2  D7FA               	goto	i2l3961
  8260  0029C4                     i2l3965:
  8261  0029C4  90D8               	bcf	status,0,c
  8262  0029C6  3605               	rlcf	i2___lwdiv@quotient,f,c
  8263  0029C8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8264  0029CA  5003               	movf	i2___lwdiv@divisor,w,c
  8265  0029CC  5C01               	subwf	i2___lwdiv@dividend,w,c
  8266  0029CE  5004               	movf	i2___lwdiv@divisor+1,w,c
  8267  0029D0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8268  0029D2  A0D8               	btfss	status,0,c
  8269  0029D4  D005               	goto	i2l3973
  8270  0029D6  5003               	movf	i2___lwdiv@divisor,w,c
  8271  0029D8  5E01               	subwf	i2___lwdiv@dividend,f,c
  8272  0029DA  5004               	movf	i2___lwdiv@divisor+1,w,c
  8273  0029DC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8274  0029DE  8005               	bsf	i2___lwdiv@quotient,0,c
  8275  0029E0                     i2l3973:
  8276  0029E0  90D8               	bcf	status,0,c
  8277  0029E2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8278  0029E4  3203               	rrcf	i2___lwdiv@divisor,f,c
  8279  0029E6  2E07               	decfsz	i2___lwdiv@counter,f,c
  8280  0029E8  D7ED               	goto	i2l3965
  8281  0029EA                     i2l895:
  8282  0029EA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8283  0029EE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8284  0029F2  0012               	return		;funcret
  8285  0029F4                     __end_ofi2___lwdiv:
  8286                           	opt stack 0
  8287                           pclatu	equ	0xFFB
  8288                           pclath	equ	0xFFA
  8289                           tblptru	equ	0xFF8
  8290                           tblptrh	equ	0xFF7
  8291                           tblptrl	equ	0xFF6
  8292                           tablat	equ	0xFF5
  8293                           prodh	equ	0xFF4
  8294                           prodl	equ	0xFF3
  8295                           intcon	equ	0xFF2
  8296                           intcon2	equ	0xFF1
  8297                           intcon3	equ	0xFF0
  8298                           postinc0	equ	0xFEE
  8299                           fsr0h	equ	0xFEA
  8300                           fsr0l	equ	0xFE9
  8301                           wreg	equ	0xFE8
  8302                           fsr1h	equ	0xFE2
  8303                           fsr1l	equ	0xFE1
  8304                           indf2	equ	0xFDF
  8305                           postinc2	equ	0xFDE
  8306                           postdec2	equ	0xFDD
  8307                           fsr2h	equ	0xFDA
  8308                           fsr2l	equ	0xFD9
  8309                           status	equ	0xFD8
  8310                           
  8311 ;; *************** function i2_lcdInst *****************
  8312 ;; Defined at:
  8313 ;;		line 26 in file "lcd.c"
  8314 ;; Parameters:    Size  Location     Type
  8315 ;;  data            1    wreg     unsigned char 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  data            1    2[COMRAM] unsigned char 
  8318 ;; Return value:  Size  Location     Type
  8319 ;;                  1    wreg      void 
  8320 ;; Registers used:
  8321 ;;		wreg, status,2, status,0, cstack
  8322 ;; Tracked objects:
  8323 ;;		On entry : 0/0
  8324 ;;		On exit  : 0/0
  8325 ;;		Unchanged: 0/0
  8326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;Total ram usage:        1 bytes
  8332 ;; Hardware stack levels used:    1
  8333 ;; Hardware stack levels required when called:    1
  8334 ;; This function calls:
  8335 ;;		i2_lcdNibble
  8336 ;; This function is called by:
  8337 ;;		_isr
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	text34
  8342  002D68                     __ptext34:
  8343                           	opt stack 0
  8344  002D68                     i2_lcdInst:
  8345                           	opt stack 24
  8346                           
  8347                           ;incstack = 0
  8348                           ;i2lcdInst@data stored from wreg
  8349  002D68  6E03               	movwf	i2lcdInst@data,c
  8350                           
  8351                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8352  002D6A  948C               	bcf	3980,2,c	;volatile
  8353                           
  8354                           ;lcd.c: 28: lcdNibble(data);
  8355  002D6C  5003               	movf	i2lcdInst@data,w,c
  8356  002D6E  EC22  F015         	call	i2_lcdNibble
  8357  002D72  0012               	return		;funcret
  8358  002D74                     __end_ofi2_lcdInst:
  8359                           	opt stack 0
  8360                           pclatu	equ	0xFFB
  8361                           pclath	equ	0xFFA
  8362                           tblptru	equ	0xFF8
  8363                           tblptrh	equ	0xFF7
  8364                           tblptrl	equ	0xFF6
  8365                           tablat	equ	0xFF5
  8366                           prodh	equ	0xFF4
  8367                           prodl	equ	0xFF3
  8368                           intcon	equ	0xFF2
  8369                           intcon2	equ	0xFF1
  8370                           intcon3	equ	0xFF0
  8371                           postinc0	equ	0xFEE
  8372                           fsr0h	equ	0xFEA
  8373                           fsr0l	equ	0xFE9
  8374                           wreg	equ	0xFE8
  8375                           fsr1h	equ	0xFE2
  8376                           fsr1l	equ	0xFE1
  8377                           indf2	equ	0xFDF
  8378                           postinc2	equ	0xFDE
  8379                           postdec2	equ	0xFDD
  8380                           fsr2h	equ	0xFDA
  8381                           fsr2l	equ	0xFD9
  8382                           status	equ	0xFD8
  8383                           
  8384 ;; *************** function i2_lcdNibble *****************
  8385 ;; Defined at:
  8386 ;;		line 36 in file "lcd.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;  data            1    wreg     unsigned char 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  data            1    1[COMRAM] unsigned char 
  8391 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      void 
  8394 ;; Registers used:
  8395 ;;		wreg, status,2, status,0
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;Total ram usage:        2 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		i2_lcdInst
  8411 ;;		i2_putch
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text35
  8416  002A44                     __ptext35:
  8417                           	opt stack 0
  8418  002A44                     i2_lcdNibble:
  8419                           	opt stack 23
  8420                           
  8421                           ;incstack = 0
  8422                           ;i2lcdNibble@data stored from wreg
  8423  002A44  6E02               	movwf	i2lcdNibble@data,c
  8424                           
  8425                           ;lcd.c: 38: char temp = data & 0xF0;
  8426  002A46  5002               	movf	i2lcdNibble@data,w,c
  8427  002A48  0BF0               	andlw	240
  8428  002A4A  6E01               	movwf	i2lcdNibble@temp,c
  8429                           
  8430                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8431  002A4C  508C               	movf	3980,w,c	;volatile
  8432  002A4E  0B0F               	andlw	15
  8433  002A50  6E8C               	movwf	3980,c	;volatile
  8434                           
  8435                           ;lcd.c: 40: LATD = temp | LATD;
  8436  002A52  5001               	movf	i2lcdNibble@temp,w,c
  8437  002A54  108C               	iorwf	3980,w,c	;volatile
  8438  002A56  6E8C               	movwf	3980,c	;volatile
  8439                           
  8440                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8441  002A58  968C               	bcf	3980,3,c	;volatile
  8442                           
  8443                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8444  002A5A  0E19               	movlw	25
  8445  002A5C                     i2u492_47:
  8446  002A5C  2EE8               	decfsz	wreg,f,c
  8447  002A5E  D7FE               	bra	i2u492_47
  8448                           
  8449                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8450  002A60  868C               	bsf	3980,3,c	;volatile
  8451                           
  8452                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8453  002A62  0E19               	movlw	25
  8454  002A64                     i2u493_47:
  8455  002A64  2EE8               	decfsz	wreg,f,c
  8456  002A66  D7FE               	bra	i2u493_47
  8457                           
  8458                           ;lcd.c: 47: data = data << 4;
  8459  002A68  3802               	swapf	i2lcdNibble@data,w,c
  8460  002A6A  0BF0               	andlw	240
  8461  002A6C  6E02               	movwf	i2lcdNibble@data,c
  8462                           
  8463                           ;lcd.c: 49: temp = data & 0xF0;
  8464  002A6E  5002               	movf	i2lcdNibble@data,w,c
  8465  002A70  0BF0               	andlw	240
  8466  002A72  6E01               	movwf	i2lcdNibble@temp,c
  8467                           
  8468                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8469  002A74  508C               	movf	3980,w,c	;volatile
  8470  002A76  0B0F               	andlw	15
  8471  002A78  6E8C               	movwf	3980,c	;volatile
  8472                           
  8473                           ;lcd.c: 51: LATD = temp | LATD;
  8474  002A7A  5001               	movf	i2lcdNibble@temp,w,c
  8475  002A7C  108C               	iorwf	3980,w,c	;volatile
  8476  002A7E  6E8C               	movwf	3980,c	;volatile
  8477                           
  8478                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8479  002A80  968C               	bcf	3980,3,c	;volatile
  8480                           
  8481                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8482  002A82  0E19               	movlw	25
  8483  002A84                     i2u494_47:
  8484  002A84  2EE8               	decfsz	wreg,f,c
  8485  002A86  D7FE               	bra	i2u494_47
  8486                           
  8487                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8488  002A88  868C               	bsf	3980,3,c	;volatile
  8489                           
  8490                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8491  002A8A  0E19               	movlw	25
  8492  002A8C                     i2u495_47:
  8493  002A8C  2EE8               	decfsz	wreg,f,c
  8494  002A8E  D7FE               	bra	i2u495_47
  8495  002A90  0012               	return		;funcret
  8496  002A92                     __end_ofi2_lcdNibble:
  8497                           	opt stack 0
  8498                           pclatu	equ	0xFFB
  8499                           pclath	equ	0xFFA
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           prodh	equ	0xFF4
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           intcon2	equ	0xFF1
  8508                           intcon3	equ	0xFF0
  8509                           postinc0	equ	0xFEE
  8510                           fsr0h	equ	0xFEA
  8511                           fsr0l	equ	0xFE9
  8512                           wreg	equ	0xFE8
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function _servo_rotate2 *****************
  8523 ;; Defined at:
  8524 ;;		line 521 in file "main.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  degree          2   14[COMRAM] int 
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  j               2   22[COMRAM] unsigned int 
  8529 ;;  i               2   20[COMRAM] unsigned int 
  8530 ;;  duty            2   18[COMRAM] int 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  1    wreg      void 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;Total ram usage:       10 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    1
  8547 ;; This function calls:
  8548 ;;		___awdiv
  8549 ;;		i2___wmul
  8550 ;; This function is called by:
  8551 ;;		_isr
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text36
  8556  00217A                     __ptext36:
  8557                           	opt stack 0
  8558  00217A                     _servo_rotate2:
  8559                           	opt stack 24
  8560                           
  8561                           ;main.c: 522: unsigned int i;
  8562                           ;main.c: 523: unsigned int j;
  8563                           ;main.c: 524: int duty = ((degree+90)*5/90)+10;
  8564                           
  8565                           ;incstack = 0
  8566  00217A  0E5A               	movlw	90
  8567  00217C  240F               	addwf	servo_rotate2@degree,w,c
  8568  00217E  6E01               	movwf	i2___wmul@multiplier,c
  8569  002180  0E00               	movlw	0
  8570  002182  2010               	addwfc	servo_rotate2@degree+1,w,c
  8571  002184  6E02               	movwf	i2___wmul@multiplier+1,c
  8572  002186  0E00               	movlw	0
  8573  002188  6E04               	movwf	i2___wmul@multiplicand+1,c
  8574  00218A  0E05               	movlw	5
  8575  00218C  6E03               	movwf	i2___wmul@multiplicand,c
  8576  00218E  EC3A  F016         	call	i2___wmul	;wreg free
  8577  002192  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8578  002196  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8579  00219A  0E00               	movlw	0
  8580  00219C  6E0A               	movwf	___awdiv@divisor+1,c
  8581  00219E  0E5A               	movlw	90
  8582  0021A0  6E09               	movwf	___awdiv@divisor,c
  8583  0021A2  ECF1  F012         	call	___awdiv	;wreg free
  8584  0021A6  0E0A               	movlw	10
  8585  0021A8  2407               	addwf	?___awdiv,w,c
  8586  0021AA  6E13               	movwf	servo_rotate2@duty,c
  8587  0021AC  0E00               	movlw	0
  8588  0021AE  2008               	addwfc	?___awdiv+1,w,c
  8589  0021B0  6E14               	movwf	servo_rotate2@duty+1,c
  8590                           
  8591                           ;main.c: 525: for (i=0; i<50; i++) {
  8592  0021B2  0E00               	movlw	0
  8593  0021B4  6E16               	movwf	servo_rotate2@i+1,c
  8594  0021B6  0E00               	movlw	0
  8595  0021B8  6E15               	movwf	servo_rotate2@i,c
  8596  0021BA                     i2l4211:
  8597  0021BA  5016               	movf	servo_rotate2@i+1,w,c
  8598  0021BC  E137               	bnz	i2l408
  8599  0021BE  0E32               	movlw	50
  8600  0021C0  5C15               	subwf	servo_rotate2@i,w,c
  8601  0021C2  B0D8               	btfsc	status,0,c
  8602  0021C4  0012               	return	
  8603                           
  8604                           ;main.c: 526: LATCbits.LATC2 = 1;
  8605  0021C6  848B               	bsf	3979,2,c	;volatile
  8606                           
  8607                           ;main.c: 527: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8608  0021C8  0E00               	movlw	0
  8609  0021CA  6E18               	movwf	servo_rotate2@j+1,c
  8610  0021CC  0E00               	movlw	0
  8611  0021CE  6E17               	movwf	servo_rotate2@j,c
  8612  0021D0  D006               	goto	i2l402
  8613  0021D2                     i2l4217:
  8614  0021D2  0E53               	movlw	83
  8615  0021D4                     i2u496_47:
  8616  0021D4  2EE8               	decfsz	wreg,f,c
  8617  0021D6  D7FE               	bra	i2u496_47
  8618  0021D8  F000               	nop	
  8619  0021DA  4A17               	infsnz	servo_rotate2@j,f,c
  8620  0021DC  2A18               	incf	servo_rotate2@j+1,f,c
  8621  0021DE                     i2l402:
  8622  0021DE  5013               	movf	servo_rotate2@duty,w,c
  8623  0021E0  5C17               	subwf	servo_rotate2@j,w,c
  8624  0021E2  5014               	movf	servo_rotate2@duty+1,w,c
  8625  0021E4  5818               	subwfb	servo_rotate2@j+1,w,c
  8626  0021E6  A0D8               	btfss	status,0,c
  8627  0021E8  D7F4               	goto	i2l4217
  8628                           
  8629                           ;main.c: 528: LATCbits.LATC2 = 0;
  8630  0021EA  948B               	bcf	3979,2,c	;volatile
  8631                           
  8632                           ;main.c: 529: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8633  0021EC  0E00               	movlw	0
  8634  0021EE  6E18               	movwf	servo_rotate2@j+1,c
  8635  0021F0  0E00               	movlw	0
  8636  0021F2  6E17               	movwf	servo_rotate2@j,c
  8637  0021F4  D006               	goto	i2l405
  8638  0021F6                     i2l4223:
  8639  0021F6  0E53               	movlw	83
  8640  0021F8                     i2u497_47:
  8641  0021F8  2EE8               	decfsz	wreg,f,c
  8642  0021FA  D7FE               	bra	i2u497_47
  8643  0021FC  F000               	nop	
  8644  0021FE  4A17               	infsnz	servo_rotate2@j,f,c
  8645  002200  2A18               	incf	servo_rotate2@j+1,f,c
  8646  002202                     i2l405:
  8647  002202  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
  8648  002206  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
  8649  00220A  1E11               	comf	??_servo_rotate2,f,c
  8650  00220C  1E12               	comf	??_servo_rotate2+1,f,c
  8651  00220E  4A11               	infsnz	??_servo_rotate2,f,c
  8652  002210  2A12               	incf	??_servo_rotate2+1,f,c
  8653  002212  0EC8               	movlw	200
  8654  002214  2611               	addwf	??_servo_rotate2,f,c
  8655  002216  0E00               	movlw	0
  8656  002218  2212               	addwfc	??_servo_rotate2+1,f,c
  8657  00221A  5011               	movf	??_servo_rotate2,w,c
  8658  00221C  5C17               	subwf	servo_rotate2@j,w,c
  8659  00221E  5012               	movf	??_servo_rotate2+1,w,c
  8660  002220  5818               	subwfb	servo_rotate2@j+1,w,c
  8661  002222  A0D8               	btfss	status,0,c
  8662  002224  D7E8               	goto	i2l4223
  8663  002226  4A15               	infsnz	servo_rotate2@i,f,c
  8664  002228  2A16               	incf	servo_rotate2@i+1,f,c
  8665  00222A  D7C7               	goto	i2l4211
  8666  00222C                     i2l408:
  8667  00222C  0012               	return		;funcret
  8668  00222E                     __end_of_servo_rotate2:
  8669                           	opt stack 0
  8670                           pclatu	equ	0xFFB
  8671                           pclath	equ	0xFFA
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           intcon	equ	0xFF2
  8679                           intcon2	equ	0xFF1
  8680                           intcon3	equ	0xFF0
  8681                           postinc0	equ	0xFEE
  8682                           fsr0h	equ	0xFEA
  8683                           fsr0l	equ	0xFE9
  8684                           wreg	equ	0xFE8
  8685                           fsr1h	equ	0xFE2
  8686                           fsr1l	equ	0xFE1
  8687                           indf2	equ	0xFDF
  8688                           postinc2	equ	0xFDE
  8689                           postdec2	equ	0xFDD
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8
  8693                           
  8694 ;; *************** function _servo_rotate1 *****************
  8695 ;; Defined at:
  8696 ;;		line 508 in file "main.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;  degree          2   14[COMRAM] int 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  j               2   22[COMRAM] unsigned int 
  8701 ;;  i               2   20[COMRAM] unsigned int 
  8702 ;;  duty            2   18[COMRAM] int 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  1    wreg      void 
  8705 ;; Registers used:
  8706 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;Total ram usage:       10 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    1
  8719 ;; This function calls:
  8720 ;;		___awdiv
  8721 ;;		i2___wmul
  8722 ;; This function is called by:
  8723 ;;		_isr
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text37
  8728  00222E                     __ptext37:
  8729                           	opt stack 0
  8730  00222E                     _servo_rotate1:
  8731                           	opt stack 24
  8732                           
  8733                           ;main.c: 509: unsigned int i;
  8734                           ;main.c: 510: unsigned int j;
  8735                           ;main.c: 511: int duty = ((degree+90)*5/90)+10;
  8736                           
  8737                           ;incstack = 0
  8738  00222E  0E5A               	movlw	90
  8739  002230  240F               	addwf	servo_rotate1@degree,w,c
  8740  002232  6E01               	movwf	i2___wmul@multiplier,c
  8741  002234  0E00               	movlw	0
  8742  002236  2010               	addwfc	servo_rotate1@degree+1,w,c
  8743  002238  6E02               	movwf	i2___wmul@multiplier+1,c
  8744  00223A  0E00               	movlw	0
  8745  00223C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8746  00223E  0E05               	movlw	5
  8747  002240  6E03               	movwf	i2___wmul@multiplicand,c
  8748  002242  EC3A  F016         	call	i2___wmul	;wreg free
  8749  002246  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  8750  00224A  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  8751  00224E  0E00               	movlw	0
  8752  002250  6E0A               	movwf	___awdiv@divisor+1,c
  8753  002252  0E5A               	movlw	90
  8754  002254  6E09               	movwf	___awdiv@divisor,c
  8755  002256  ECF1  F012         	call	___awdiv	;wreg free
  8756  00225A  0E0A               	movlw	10
  8757  00225C  2407               	addwf	?___awdiv,w,c
  8758  00225E  6E13               	movwf	servo_rotate1@duty,c
  8759  002260  0E00               	movlw	0
  8760  002262  2008               	addwfc	?___awdiv+1,w,c
  8761  002264  6E14               	movwf	servo_rotate1@duty+1,c
  8762                           
  8763                           ;main.c: 512: for (i=0; i<50; i++) {
  8764  002266  0E00               	movlw	0
  8765  002268  6E16               	movwf	servo_rotate1@i+1,c
  8766  00226A  0E00               	movlw	0
  8767  00226C  6E15               	movwf	servo_rotate1@i,c
  8768  00226E                     i2l4235:
  8769  00226E  5016               	movf	servo_rotate1@i+1,w,c
  8770  002270  E137               	bnz	i2l397
  8771  002272  0E32               	movlw	50
  8772  002274  5C15               	subwf	servo_rotate1@i,w,c
  8773  002276  B0D8               	btfsc	status,0,c
  8774  002278  0012               	return	
  8775                           
  8776                           ;main.c: 513: LATCbits.LATC1 = 1;
  8777  00227A  828B               	bsf	3979,1,c	;volatile
  8778                           
  8779                           ;main.c: 514: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8780  00227C  0E00               	movlw	0
  8781  00227E  6E18               	movwf	servo_rotate1@j+1,c
  8782  002280  0E00               	movlw	0
  8783  002282  6E17               	movwf	servo_rotate1@j,c
  8784  002284  D006               	goto	i2l391
  8785  002286                     i2l4241:
  8786  002286  0E53               	movlw	83
  8787  002288                     i2u498_47:
  8788  002288  2EE8               	decfsz	wreg,f,c
  8789  00228A  D7FE               	bra	i2u498_47
  8790  00228C  F000               	nop	
  8791  00228E  4A17               	infsnz	servo_rotate1@j,f,c
  8792  002290  2A18               	incf	servo_rotate1@j+1,f,c
  8793  002292                     i2l391:
  8794  002292  5013               	movf	servo_rotate1@duty,w,c
  8795  002294  5C17               	subwf	servo_rotate1@j,w,c
  8796  002296  5014               	movf	servo_rotate1@duty+1,w,c
  8797  002298  5818               	subwfb	servo_rotate1@j+1,w,c
  8798  00229A  A0D8               	btfss	status,0,c
  8799  00229C  D7F4               	goto	i2l4241
  8800                           
  8801                           ;main.c: 515: LATCbits.LATC1 = 0;
  8802  00229E  928B               	bcf	3979,1,c	;volatile
  8803                           
  8804                           ;main.c: 516: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8805  0022A0  0E00               	movlw	0
  8806  0022A2  6E18               	movwf	servo_rotate1@j+1,c
  8807  0022A4  0E00               	movlw	0
  8808  0022A6  6E17               	movwf	servo_rotate1@j,c
  8809  0022A8  D006               	goto	i2l394
  8810  0022AA                     i2l4247:
  8811  0022AA  0E53               	movlw	83
  8812  0022AC                     i2u499_47:
  8813  0022AC  2EE8               	decfsz	wreg,f,c
  8814  0022AE  D7FE               	bra	i2u499_47
  8815  0022B0  F000               	nop	
  8816  0022B2  4A17               	infsnz	servo_rotate1@j,f,c
  8817  0022B4  2A18               	incf	servo_rotate1@j+1,f,c
  8818  0022B6                     i2l394:
  8819  0022B6  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
  8820  0022BA  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  8821  0022BE  1E11               	comf	??_servo_rotate1,f,c
  8822  0022C0  1E12               	comf	??_servo_rotate1+1,f,c
  8823  0022C2  4A11               	infsnz	??_servo_rotate1,f,c
  8824  0022C4  2A12               	incf	??_servo_rotate1+1,f,c
  8825  0022C6  0EC8               	movlw	200
  8826  0022C8  2611               	addwf	??_servo_rotate1,f,c
  8827  0022CA  0E00               	movlw	0
  8828  0022CC  2212               	addwfc	??_servo_rotate1+1,f,c
  8829  0022CE  5011               	movf	??_servo_rotate1,w,c
  8830  0022D0  5C17               	subwf	servo_rotate1@j,w,c
  8831  0022D2  5012               	movf	??_servo_rotate1+1,w,c
  8832  0022D4  5818               	subwfb	servo_rotate1@j+1,w,c
  8833  0022D6  A0D8               	btfss	status,0,c
  8834  0022D8  D7E8               	goto	i2l4247
  8835  0022DA  4A15               	infsnz	servo_rotate1@i,f,c
  8836  0022DC  2A16               	incf	servo_rotate1@i+1,f,c
  8837  0022DE  D7C7               	goto	i2l4235
  8838  0022E0                     i2l397:
  8839  0022E0  0012               	return		;funcret
  8840  0022E2                     __end_of_servo_rotate1:
  8841                           	opt stack 0
  8842                           pclatu	equ	0xFFB
  8843                           pclath	equ	0xFFA
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           intcon	equ	0xFF2
  8851                           intcon2	equ	0xFF1
  8852                           intcon3	equ	0xFF0
  8853                           postinc0	equ	0xFEE
  8854                           fsr0h	equ	0xFEA
  8855                           fsr0l	equ	0xFE9
  8856                           wreg	equ	0xFE8
  8857                           fsr1h	equ	0xFE2
  8858                           fsr1l	equ	0xFE1
  8859                           indf2	equ	0xFDF
  8860                           postinc2	equ	0xFDE
  8861                           postdec2	equ	0xFDD
  8862                           fsr2h	equ	0xFDA
  8863                           fsr2l	equ	0xFD9
  8864                           status	equ	0xFD8
  8865                           
  8866 ;; *************** function _servo_rotate0 *****************
  8867 ;; Defined at:
  8868 ;;		line 495 in file "main.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;  degree          2    0[COMRAM] int 
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  j               2    8[COMRAM] unsigned int 
  8873 ;;  i               2    6[COMRAM] unsigned int 
  8874 ;;  duty            2    4[COMRAM] int 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:       10 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; This function calls:
  8891 ;;		Nothing
  8892 ;; This function is called by:
  8893 ;;		_isr
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text38
  8898  002432                     __ptext38:
  8899                           	opt stack 0
  8900  002432                     _servo_rotate0:
  8901                           	opt stack 25
  8902                           
  8903                           ;main.c: 496: unsigned int i;
  8904                           ;main.c: 497: unsigned int j;
  8905                           ;main.c: 498: int duty = degree;
  8906                           
  8907                           ;incstack = 0
  8908  002432  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8909  002436  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8910                           
  8911                           ;main.c: 499: for (i=0; i<50; i++) {
  8912  00243A  0E00               	movlw	0
  8913  00243C  6E08               	movwf	servo_rotate0@i+1,c
  8914  00243E  0E00               	movlw	0
  8915  002440  6E07               	movwf	servo_rotate0@i,c
  8916  002442                     i2l4187:
  8917  002442  5008               	movf	servo_rotate0@i+1,w,c
  8918  002444  E13D               	bnz	i2l386
  8919  002446  0E32               	movlw	50
  8920  002448  5C07               	subwf	servo_rotate0@i,w,c
  8921  00244A  B0D8               	btfsc	status,0,c
  8922  00244C  0012               	return	
  8923                           
  8924                           ;main.c: 500: LATCbits.LATC0 = 1;
  8925  00244E  808B               	bsf	3979,0,c	;volatile
  8926                           
  8927                           ;main.c: 501: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8928  002450  0E00               	movlw	0
  8929  002452  6E0A               	movwf	servo_rotate0@j+1,c
  8930  002454  0E00               	movlw	0
  8931  002456  6E09               	movwf	servo_rotate0@j,c
  8932  002458  D009               	goto	i2l380
  8933  00245A                     i2l4193:
  8934  00245A  0E04               	movlw	4
  8935  00245C  6E03               	movwf	??_servo_rotate0& (0+255),c
  8936  00245E  0E3E               	movlw	62
  8937  002460                     i2u500_47:
  8938  002460  2EE8               	decfsz	wreg,f,c
  8939  002462  D7FE               	bra	i2u500_47
  8940  002464  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8941  002466  D7FC               	bra	i2u500_47
  8942  002468  4A09               	infsnz	servo_rotate0@j,f,c
  8943  00246A  2A0A               	incf	servo_rotate0@j+1,f,c
  8944  00246C                     i2l380:
  8945  00246C  5005               	movf	servo_rotate0@duty,w,c
  8946  00246E  5C09               	subwf	servo_rotate0@j,w,c
  8947  002470  5006               	movf	servo_rotate0@duty+1,w,c
  8948  002472  580A               	subwfb	servo_rotate0@j+1,w,c
  8949  002474  A0D8               	btfss	status,0,c
  8950  002476  D7F1               	goto	i2l4193
  8951                           
  8952                           ;main.c: 502: LATCbits.LATC0 = 0;
  8953  002478  908B               	bcf	3979,0,c	;volatile
  8954                           
  8955                           ;main.c: 503: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8956  00247A  0E00               	movlw	0
  8957  00247C  6E0A               	movwf	servo_rotate0@j+1,c
  8958  00247E  0E00               	movlw	0
  8959  002480  6E09               	movwf	servo_rotate0@j,c
  8960  002482  D009               	goto	i2l383
  8961  002484                     i2l4199:
  8962  002484  0E04               	movlw	4
  8963  002486  6E03               	movwf	??_servo_rotate0& (0+255),c
  8964  002488  0E3E               	movlw	62
  8965  00248A                     i2u501_47:
  8966  00248A  2EE8               	decfsz	wreg,f,c
  8967  00248C  D7FE               	bra	i2u501_47
  8968  00248E  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8969  002490  D7FC               	bra	i2u501_47
  8970  002492  4A09               	infsnz	servo_rotate0@j,f,c
  8971  002494  2A0A               	incf	servo_rotate0@j+1,f,c
  8972  002496                     i2l383:
  8973  002496  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8974  00249A  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8975  00249E  1E03               	comf	??_servo_rotate0,f,c
  8976  0024A0  1E04               	comf	??_servo_rotate0+1,f,c
  8977  0024A2  4A03               	infsnz	??_servo_rotate0,f,c
  8978  0024A4  2A04               	incf	??_servo_rotate0+1,f,c
  8979  0024A6  0E14               	movlw	20
  8980  0024A8  2603               	addwf	??_servo_rotate0,f,c
  8981  0024AA  0E00               	movlw	0
  8982  0024AC  2204               	addwfc	??_servo_rotate0+1,f,c
  8983  0024AE  5003               	movf	??_servo_rotate0,w,c
  8984  0024B0  5C09               	subwf	servo_rotate0@j,w,c
  8985  0024B2  5004               	movf	??_servo_rotate0+1,w,c
  8986  0024B4  580A               	subwfb	servo_rotate0@j+1,w,c
  8987  0024B6  A0D8               	btfss	status,0,c
  8988  0024B8  D7E5               	goto	i2l4199
  8989  0024BA  4A07               	infsnz	servo_rotate0@i,f,c
  8990  0024BC  2A08               	incf	servo_rotate0@i+1,f,c
  8991  0024BE  D7C1               	goto	i2l4187
  8992  0024C0                     i2l386:
  8993  0024C0  0012               	return		;funcret
  8994  0024C2                     __end_of_servo_rotate0:
  8995                           	opt stack 0
  8996                           pclatu	equ	0xFFB
  8997                           pclath	equ	0xFFA
  8998                           tblptru	equ	0xFF8
  8999                           tblptrh	equ	0xFF7
  9000                           tblptrl	equ	0xFF6
  9001                           tablat	equ	0xFF5
  9002                           prodh	equ	0xFF4
  9003                           prodl	equ	0xFF3
  9004                           intcon	equ	0xFF2
  9005                           intcon2	equ	0xFF1
  9006                           intcon3	equ	0xFF0
  9007                           postinc0	equ	0xFEE
  9008                           fsr0h	equ	0xFEA
  9009                           fsr0l	equ	0xFE9
  9010                           wreg	equ	0xFE8
  9011                           fsr1h	equ	0xFE2
  9012                           fsr1l	equ	0xFE1
  9013                           indf2	equ	0xFDF
  9014                           postinc2	equ	0xFDE
  9015                           postdec2	equ	0xFDD
  9016                           fsr2h	equ	0xFDA
  9017                           fsr2l	equ	0xFD9
  9018                           status	equ	0xFD8
  9019                           
  9020 ;; *************** function _read_time *****************
  9021 ;; Defined at:
  9022 ;;		line 386 in file "main.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  i               1    3[COMRAM] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  1    wreg      void 
  9029 ;; Registers used:
  9030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;Total ram usage:        1 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    2
  9043 ;; This function calls:
  9044 ;;		i2_I2C_Master_Read
  9045 ;;		i2_I2C_Master_Start
  9046 ;;		i2_I2C_Master_Stop
  9047 ;;		i2_I2C_Master_Write
  9048 ;; This function is called by:
  9049 ;;		_isr
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text39
  9054  002756                     __ptext39:
  9055                           	opt stack 0
  9056  002756                     _read_time:
  9057                           	opt stack 23
  9058                           
  9059                           ;main.c: 388: I2C_Master_Start();
  9060                           
  9061                           ;incstack = 0
  9062  002756  ECD4  F016         	call	i2_I2C_Master_Start	;wreg free
  9063                           
  9064                           ;main.c: 389: I2C_Master_Write(0b11010000);
  9065  00275A  0E00               	movlw	0
  9066  00275C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9067  00275E  0ED0               	movlw	208
  9068  002760  6E02               	movwf	i2I2C_Master_Write@d,c
  9069  002762  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  9070                           
  9071                           ;main.c: 390: I2C_Master_Write(0x00);
  9072  002766  0E00               	movlw	0
  9073  002768  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9074  00276A  0E00               	movlw	0
  9075  00276C  6E02               	movwf	i2I2C_Master_Write@d,c
  9076  00276E  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  9077                           
  9078                           ;main.c: 391: I2C_Master_Stop();
  9079  002772  ECD0  F016         	call	i2_I2C_Master_Stop	;wreg free
  9080                           
  9081                           ;main.c: 394: I2C_Master_Start();
  9082  002776  ECD4  F016         	call	i2_I2C_Master_Start	;wreg free
  9083                           
  9084                           ;main.c: 395: I2C_Master_Write(0b11010001);
  9085  00277A  0E00               	movlw	0
  9086  00277C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9087  00277E  0ED1               	movlw	209
  9088  002780  6E02               	movwf	i2I2C_Master_Write@d,c
  9089  002782  ECBF  F016         	call	i2_I2C_Master_Write	;wreg free
  9090                           
  9091                           ;main.c: 396: for(unsigned char i=0;i<0x06;i++){
  9092  002786  0E00               	movlw	0
  9093  002788  6E04               	movwf	read_time@i,c
  9094  00278A                     i2l4151:
  9095  00278A  0E05               	movlw	5
  9096  00278C  6404               	cpfsgt	read_time@i,c
  9097  00278E  D001               	goto	i2l4155
  9098  002790  D00E               	goto	i2l4161
  9099  002792                     i2l4155:
  9100                           
  9101                           ;main.c: 397: time[i] = I2C_Master_Read(1);
  9102  002792  5004               	movf	read_time@i,w,c
  9103  002794  0D01               	mullw	1
  9104  002796  0E9E               	movlw	low _time
  9105  002798  24F3               	addwf	prodl,w,c
  9106  00279A  6ED9               	movwf	fsr2l,c
  9107  00279C  0E00               	movlw	high _time
  9108  00279E  20F4               	addwfc	prodh,w,c
  9109  0027A0  6EDA               	movwf	fsr2h,c
  9110  0027A2  0E01               	movlw	1
  9111  0027A4  EC27  F016         	call	i2_I2C_Master_Read
  9112  0027A8  6EDF               	movwf	indf2,c
  9113  0027AA  2A04               	incf	read_time@i,f,c
  9114  0027AC  D7EE               	goto	i2l4151
  9115  0027AE                     i2l4161:
  9116                           
  9117                           ;main.c: 398: }
  9118                           ;main.c: 399: time[6] = I2C_Master_Read(0);
  9119  0027AE  0E00               	movlw	0
  9120  0027B0  EC27  F016         	call	i2_I2C_Master_Read
  9121  0027B4  0100               	movlb	0	; () banked
  9122  0027B6  6FA4               	movwf	(_time+6)& (0+255),b
  9123                           
  9124                           ;main.c: 400: I2C_Master_Stop();
  9125  0027B8  ECD0  F016         	call	i2_I2C_Master_Stop	;wreg free
  9126  0027BC  0012               	return	
  9127  0027BE                     __end_of_read_time:
  9128                           	opt stack 0
  9129                           pclatu	equ	0xFFB
  9130                           pclath	equ	0xFFA
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           intcon	equ	0xFF2
  9138                           intcon2	equ	0xFF1
  9139                           intcon3	equ	0xFF0
  9140                           postinc0	equ	0xFEE
  9141                           fsr0h	equ	0xFEA
  9142                           fsr0l	equ	0xFE9
  9143                           wreg	equ	0xFE8
  9144                           fsr1h	equ	0xFE2
  9145                           fsr1l	equ	0xFE1
  9146                           indf2	equ	0xFDF
  9147                           postinc2	equ	0xFDE
  9148                           postdec2	equ	0xFDD
  9149                           fsr2h	equ	0xFDA
  9150                           fsr2l	equ	0xFD9
  9151                           status	equ	0xFD8
  9152                           
  9153 ;; *************** function i2_I2C_Master_Write *****************
  9154 ;; Defined at:
  9155 ;;		line 47 in file "I2C.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  d               2    1[COMRAM] unsigned int 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, status,2, status,0, cstack
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;Total ram usage:        2 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    1
  9176 ;; This function calls:
  9177 ;;		i2_I2C_Master_Wait
  9178 ;; This function is called by:
  9179 ;;		_read_time
  9180 ;;		i2_read_colorsensor
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text40
  9185  002D7E                     __ptext40:
  9186                           	opt stack 0
  9187  002D7E                     i2_I2C_Master_Write:
  9188                           	opt stack 23
  9189                           
  9190                           ;I2C.c: 49: I2C_Master_Wait();
  9191                           
  9192                           ;incstack = 0
  9193  002D7E  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9194                           
  9195                           ;I2C.c: 50: SSPBUF = d;
  9196  002D82  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9197  002D86  0012               	return		;funcret
  9198  002D88                     __end_ofi2_I2C_Master_Write:
  9199                           	opt stack 0
  9200                           pclatu	equ	0xFFB
  9201                           pclath	equ	0xFFA
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           prodh	equ	0xFF4
  9207                           prodl	equ	0xFF3
  9208                           intcon	equ	0xFF2
  9209                           intcon2	equ	0xFF1
  9210                           intcon3	equ	0xFF0
  9211                           postinc0	equ	0xFEE
  9212                           fsr0h	equ	0xFEA
  9213                           fsr0l	equ	0xFE9
  9214                           wreg	equ	0xFE8
  9215                           fsr1h	equ	0xFE2
  9216                           fsr1l	equ	0xFE1
  9217                           indf2	equ	0xFDF
  9218                           postinc2	equ	0xFDE
  9219                           postdec2	equ	0xFDD
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function i2_I2C_Master_Stop *****************
  9225 ;; Defined at:
  9226 ;;		line 41 in file "I2C.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;		None
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  1    wreg      void 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;Total ram usage:        0 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    1
  9247 ;; This function calls:
  9248 ;;		i2_I2C_Master_Wait
  9249 ;; This function is called by:
  9250 ;;		_read_time
  9251 ;;		i2_read_colorsensor
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           	psect	text41
  9256  002DA0                     __ptext41:
  9257                           	opt stack 0
  9258  002DA0                     i2_I2C_Master_Stop:
  9259                           	opt stack 23
  9260                           
  9261                           ;I2C.c: 43: I2C_Master_Wait();
  9262                           
  9263                           ;incstack = 0
  9264  002DA0  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9265                           
  9266                           ;I2C.c: 44: PEN = 1;
  9267  002DA4  84C5               	bsf	4037,2,c	;volatile
  9268  002DA6  0012               	return		;funcret
  9269  002DA8                     __end_ofi2_I2C_Master_Stop:
  9270                           	opt stack 0
  9271                           pclatu	equ	0xFFB
  9272                           pclath	equ	0xFFA
  9273                           tblptru	equ	0xFF8
  9274                           tblptrh	equ	0xFF7
  9275                           tblptrl	equ	0xFF6
  9276                           tablat	equ	0xFF5
  9277                           prodh	equ	0xFF4
  9278                           prodl	equ	0xFF3
  9279                           intcon	equ	0xFF2
  9280                           intcon2	equ	0xFF1
  9281                           intcon3	equ	0xFF0
  9282                           postinc0	equ	0xFEE
  9283                           fsr0h	equ	0xFEA
  9284                           fsr0l	equ	0xFE9
  9285                           wreg	equ	0xFE8
  9286                           fsr1h	equ	0xFE2
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           fsr2h	equ	0xFDA
  9292                           fsr2l	equ	0xFD9
  9293                           status	equ	0xFD8
  9294                           
  9295 ;; *************** function i2_I2C_Master_Start *****************
  9296 ;; Defined at:
  9297 ;;		line 29 in file "I2C.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;		None
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;		None
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  1    wreg      void 
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0, cstack
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;Total ram usage:        0 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; Hardware stack levels required when called:    1
  9318 ;; This function calls:
  9319 ;;		i2_I2C_Master_Wait
  9320 ;; This function is called by:
  9321 ;;		_read_time
  9322 ;;		i2_read_colorsensor
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           	psect	text42
  9327  002DA8                     __ptext42:
  9328                           	opt stack 0
  9329  002DA8                     i2_I2C_Master_Start:
  9330                           	opt stack 23
  9331                           
  9332                           ;I2C.c: 31: I2C_Master_Wait();
  9333                           
  9334                           ;incstack = 0
  9335  002DA8  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9336                           
  9337                           ;I2C.c: 32: SEN = 1;
  9338  002DAC  80C5               	bsf	4037,0,c	;volatile
  9339  002DAE  0012               	return		;funcret
  9340  002DB0                     __end_ofi2_I2C_Master_Start:
  9341                           	opt stack 0
  9342                           pclatu	equ	0xFFB
  9343                           pclath	equ	0xFFA
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           intcon2	equ	0xFF1
  9352                           intcon3	equ	0xFF0
  9353                           postinc0	equ	0xFEE
  9354                           fsr0h	equ	0xFEA
  9355                           fsr0l	equ	0xFE9
  9356                           wreg	equ	0xFE8
  9357                           fsr1h	equ	0xFE2
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function i2_I2C_Master_Read *****************
  9367 ;; Defined at:
  9368 ;;		line 67 in file "I2C.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  a               1    wreg     unsigned char 
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;  a               1    1[COMRAM] unsigned char 
  9373 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      unsigned char 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;Total ram usage:        2 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    1
  9390 ;; This function calls:
  9391 ;;		i2_I2C_Master_Wait
  9392 ;; This function is called by:
  9393 ;;		_read_time
  9394 ;;		i2_read_colorsensor
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398                           	psect	text43
  9399  002C4E                     __ptext43:
  9400                           	opt stack 0
  9401  002C4E                     i2_I2C_Master_Read:
  9402                           	opt stack 23
  9403                           
  9404                           ;incstack = 0
  9405                           ;i2I2C_Master_Read@a stored from wreg
  9406  002C4E  6E02               	movwf	i2I2C_Master_Read@a,c
  9407                           
  9408                           ;I2C.c: 69: unsigned char temp;
  9409                           ;I2C.c: 70: I2C_Master_Wait();
  9410  002C50  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9411                           
  9412                           ;I2C.c: 71: RCEN = 1;
  9413  002C54  86C5               	bsf	4037,3,c	;volatile
  9414                           
  9415                           ;I2C.c: 72: I2C_Master_Wait();
  9416  002C56  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9417                           
  9418                           ;I2C.c: 73: temp = SSPBUF;
  9419  002C5A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9420                           
  9421                           ;I2C.c: 74: I2C_Master_Wait();
  9422  002C5E  EC95  F016         	call	i2_I2C_Master_Wait	;wreg free
  9423                           
  9424                           ;I2C.c: 75: ACKDT = (a)?0:1;
  9425  002C62  5002               	movf	i2I2C_Master_Read@a,w,c
  9426  002C64  A4D8               	btfss	status,2,c
  9427  002C66  D002               	goto	i2u367_40
  9428  002C68  8AC5               	bsf	4037,5,c	;volatile
  9429  002C6A  D001               	goto	i2l3933
  9430  002C6C                     i2u367_40:
  9431  002C6C  9AC5               	bcf	4037,5,c	;volatile
  9432  002C6E                     i2l3933:
  9433                           
  9434                           ;I2C.c: 76: ACKEN = 1;
  9435  002C6E  88C5               	bsf	4037,4,c	;volatile
  9436                           
  9437                           ;I2C.c: 77: return temp;
  9438  002C70  5003               	movf	i2I2C_Master_Read@temp,w,c
  9439  002C72  0012               	return	
  9440  002C74                     __end_ofi2_I2C_Master_Read:
  9441                           	opt stack 0
  9442                           pclatu	equ	0xFFB
  9443                           pclath	equ	0xFFA
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           intcon3	equ	0xFF0
  9453                           postinc0	equ	0xFEE
  9454                           fsr0h	equ	0xFEA
  9455                           fsr0l	equ	0xFE9
  9456                           wreg	equ	0xFE8
  9457                           fsr1h	equ	0xFE2
  9458                           fsr1l	equ	0xFE1
  9459                           indf2	equ	0xFDF
  9460                           postinc2	equ	0xFDE
  9461                           postdec2	equ	0xFDD
  9462                           fsr2h	equ	0xFDA
  9463                           fsr2l	equ	0xFD9
  9464                           status	equ	0xFD8
  9465                           
  9466 ;; *************** function i2_I2C_Master_Wait *****************
  9467 ;; Defined at:
  9468 ;;		line 24 in file "I2C.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;		None
  9471 ;; Auto vars:     Size  Location     Type
  9472 ;;		None
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  1    wreg      void 
  9475 ;; Registers used:
  9476 ;;		wreg, status,2, status,0
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;Total ram usage:        1 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; This function calls:
  9489 ;;		Nothing
  9490 ;; This function is called by:
  9491 ;;		i2_I2C_Master_Start
  9492 ;;		i2_I2C_Master_Stop
  9493 ;;		i2_I2C_Master_Write
  9494 ;;		i2_I2C_Master_Read
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text44
  9499  002D2A                     __ptext44:
  9500                           	opt stack 0
  9501  002D2A                     i2_I2C_Master_Wait:
  9502                           	opt stack 23
  9503  002D2A                     i2l34:
  9504  002D2A  B4C7               	btfsc	4039,2,c	;volatile
  9505  002D2C  D7FE               	goto	i2l34
  9506  002D2E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9507  002D32  0E1F               	movlw	31
  9508  002D34  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9509  002D36  B4D8               	btfsc	status,2,c
  9510  002D38  0012               	return	
  9511  002D3A  D7F7               	goto	i2l34
  9512  002D3C                     __end_ofi2_I2C_Master_Wait:
  9513                           	opt stack 0
  9514                           pclatu	equ	0xFFB
  9515                           pclath	equ	0xFFA
  9516                           tblptru	equ	0xFF8
  9517                           tblptrh	equ	0xFF7
  9518                           tblptrl	equ	0xFF6
  9519                           tablat	equ	0xFF5
  9520                           prodh	equ	0xFF4
  9521                           prodl	equ	0xFF3
  9522                           intcon	equ	0xFF2
  9523                           intcon2	equ	0xFF1
  9524                           intcon3	equ	0xFF0
  9525                           postinc0	equ	0xFEE
  9526                           fsr0h	equ	0xFEA
  9527                           fsr0l	equ	0xFE9
  9528                           wreg	equ	0xFE8
  9529                           fsr1h	equ	0xFE2
  9530                           fsr1l	equ	0xFE1
  9531                           indf2	equ	0xFDF
  9532                           postinc2	equ	0xFDE
  9533                           postdec2	equ	0xFDD
  9534                           fsr2h	equ	0xFDA
  9535                           fsr2l	equ	0xFD9
  9536                           status	equ	0xFD8
  9537                           
  9538 ;; *************** function _dec_to_hex *****************
  9539 ;; Defined at:
  9540 ;;		line 347 in file "main.c"
  9541 ;; Parameters:    Size  Location     Type
  9542 ;;  num             2   98[COMRAM] int 
  9543 ;; Auto vars:     Size  Location     Type
  9544 ;;  quotient        2  112[COMRAM] int 
  9545 ;;  hexnum          2  110[COMRAM] int 
  9546 ;;  i               2  108[COMRAM] int 
  9547 ;;  temp            2  106[COMRAM] int 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  2   98[COMRAM] int 
  9550 ;; Registers used:
  9551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;Total ram usage:       16 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    5
  9564 ;; This function calls:
  9565 ;;		___awdiv
  9566 ;;		___awtoft
  9567 ;;		___ftadd
  9568 ;;		___ftmul
  9569 ;;		___fttol
  9570 ;;		_pow
  9571 ;; This function is called by:
  9572 ;;		_isr
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text45
  9577  001718                     __ptext45:
  9578                           	opt stack 0
  9579  001718                     _dec_to_hex:
  9580                           	opt stack 20
  9581                           
  9582                           ;main.c: 348: int i = 0, quotient = num, temp, hexnum = 0;
  9583                           
  9584                           ;incstack = 0
  9585  001718  0E00               	movlw	0
  9586  00171A  6E6E               	movwf	dec_to_hex@i+1,c
  9587  00171C  0E00               	movlw	0
  9588  00171E  6E6D               	movwf	dec_to_hex@i,c
  9589  001720  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9590  001724  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9591  001728  0E00               	movlw	0
  9592  00172A  6E70               	movwf	dec_to_hex@hexnum+1,c
  9593  00172C  0E00               	movlw	0
  9594  00172E  6E6F               	movwf	dec_to_hex@hexnum,c
  9595                           
  9596                           ;main.c: 350: while (quotient != 0) {
  9597  001730  D068               	goto	i2l4181
  9598  001732                     i2l4169:
  9599                           
  9600                           ;main.c: 351: temp = quotient % 16;
  9601  001732  0E0F               	movlw	15
  9602  001734  1471               	andwf	dec_to_hex@quotient,w,c
  9603  001736  6E6B               	movwf	dec_to_hex@temp,c
  9604  001738  6A6C               	clrf	dec_to_hex@temp+1,c
  9605                           
  9606                           ;main.c: 353: hexnum += temp*pow(10,i);
  9607  00173A  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  9608  00173E  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  9609  001742  ECA9  F015         	call	___awtoft	;wreg free
  9610  001746  C009  F065         	movff	?___awtoft,_dec_to_hex$1257
  9611  00174A  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1257+1
  9612  00174E  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1257+2
  9613                           
  9614                           ;main.c: 353: hexnum += temp*pow(10,i);
  9615  001752  C065  F055         	movff	_dec_to_hex$1257,pow@y
  9616  001756  C066  F056         	movff	_dec_to_hex$1257+1,pow@y+1
  9617  00175A  C067  F057         	movff	_dec_to_hex$1257+2,pow@y+2
  9618  00175E  0E00               	movlw	0
  9619  001760  6E52               	movwf	pow@x,c
  9620  001762  0E20               	movlw	32
  9621  001764  6E53               	movwf	pow@x+1,c
  9622  001766  0E41               	movlw	65
  9623  001768  6E54               	movwf	pow@x+2,c
  9624  00176A  ECAC  F009         	call	_pow	;wreg free
  9625  00176E  C052  F068         	movff	?_pow,_dec_to_hex$1258
  9626  001772  C053  F069         	movff	?_pow+1,_dec_to_hex$1258+1
  9627  001776  C054  F06A         	movff	?_pow+2,_dec_to_hex$1258+2
  9628                           
  9629                           ;main.c: 353: hexnum += temp*pow(10,i);
  9630  00177A  C068  F010         	movff	_dec_to_hex$1258,___ftmul@f2
  9631  00177E  C069  F011         	movff	_dec_to_hex$1258+1,___ftmul@f2+1
  9632  001782  C06A  F012         	movff	_dec_to_hex$1258+2,___ftmul@f2+2
  9633  001786  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  9634  00178A  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  9635  00178E  ECA9  F015         	call	___awtoft	;wreg free
  9636  001792  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9637  001796  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9638  00179A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9639  00179E  EC84  F00C         	call	___ftmul	;wreg free
  9640  0017A2  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9641  0017A6  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9642  0017AA  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9643  0017AE  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  9644  0017B2  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  9645  0017B6  ECA9  F015         	call	___awtoft	;wreg free
  9646  0017BA  C009  F01C         	movff	?___awtoft,___ftadd@f1
  9647  0017BE  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  9648  0017C2  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  9649  0017C6  EC0C  F008         	call	___ftadd	;wreg free
  9650  0017CA  C01C  F028         	movff	?___ftadd,___fttol@f1
  9651  0017CE  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9652  0017D2  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9653  0017D6  EC0A  F00C         	call	___fttol	;wreg free
  9654  0017DA  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9655  0017DE  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9656                           
  9657                           ;main.c: 355: quotient = quotient / 16;
  9658  0017E2  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  9659  0017E6  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9660  0017EA  0E00               	movlw	0
  9661  0017EC  6E0A               	movwf	___awdiv@divisor+1,c
  9662  0017EE  0E10               	movlw	16
  9663  0017F0  6E09               	movwf	___awdiv@divisor,c
  9664  0017F2  ECF1  F012         	call	___awdiv	;wreg free
  9665  0017F6  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  9666  0017FA  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9667                           
  9668                           ;main.c: 356: i += 1;
  9669  0017FE  4A6D               	infsnz	dec_to_hex@i,f,c
  9670  001800  2A6E               	incf	dec_to_hex@i+1,f,c
  9671  001802                     i2l4181:
  9672  001802  5071               	movf	dec_to_hex@quotient,w,c
  9673  001804  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9674  001806  A4D8               	btfss	status,2,c
  9675  001808  D794               	goto	i2l4169
  9676                           
  9677                           ;main.c: 357: }
  9678                           ;main.c: 358: return hexnum;
  9679  00180A  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9680  00180E  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9681  001812  0012               	return		;funcret
  9682  001814                     __end_of_dec_to_hex:
  9683                           	opt stack 0
  9684                           pclatu	equ	0xFFB
  9685                           pclath	equ	0xFFA
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           intcon	equ	0xFF2
  9693                           intcon2	equ	0xFF1
  9694                           intcon3	equ	0xFF0
  9695                           postinc0	equ	0xFEE
  9696                           fsr0h	equ	0xFEA
  9697                           fsr0l	equ	0xFE9
  9698                           wreg	equ	0xFE8
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           indf2	equ	0xFDF
  9702                           postinc2	equ	0xFDE
  9703                           postdec2	equ	0xFDD
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _pow *****************
  9709 ;; Defined at:
  9710 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  x               3   81[COMRAM] int 
  9713 ;;  y               3   84[COMRAM] int 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  yi              4   94[COMRAM] unsigned long 
  9716 ;;  sign            1   93[COMRAM] unsigned char 
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  3   81[COMRAM] unsigned char 
  9719 ;; Registers used:
  9720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9726 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;Total ram usage:       17 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    4
  9733 ;; This function calls:
  9734 ;;		___ftge
  9735 ;;		___ftmul
  9736 ;;		___ftneg
  9737 ;;		___fttol
  9738 ;;		___lltoft
  9739 ;;		_exp
  9740 ;;		_log
  9741 ;; This function is called by:
  9742 ;;		_dec_to_hex
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           	psect	text46
  9747  001358                     __ptext46:
  9748                           	opt stack 0
  9749  001358                     _pow:
  9750                           	opt stack 20
  9751                           
  9752                           ;incstack = 0
  9753  001358  0E00               	movlw	0
  9754  00135A  6E5E               	movwf	pow@sign,c
  9755  00135C  5052               	movf	pow@x,w,c
  9756  00135E  1053               	iorwf	pow@x+1,w,c
  9757  001360  1054               	iorwf	pow@x+2,w,c
  9758  001362  A4D8               	btfss	status,2,c
  9759  001364  D01C               	goto	i2l3781
  9760  001366  0E00               	movlw	0
  9761  001368  6E01               	movwf	___ftge@ff1,c
  9762  00136A  0E00               	movlw	0
  9763  00136C  6E02               	movwf	___ftge@ff1+1,c
  9764  00136E  0E00               	movlw	0
  9765  001370  6E03               	movwf	___ftge@ff1+2,c
  9766  001372  C055  F004         	movff	pow@y,___ftge@ff2
  9767  001376  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  9768  00137A  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  9769  00137E  ECA9  F012         	call	___ftge	;wreg free
  9770  001382  A0D8               	btfss	status,0,c
  9771  001384  D005               	goto	i2l927
  9772  001386  0E00               	movlw	0
  9773  001388  0100               	movlb	0	; () banked
  9774  00138A  6FA8               	movwf	(_errno+1)& (0+255),b
  9775  00138C  0E21               	movlw	33
  9776  00138E  6FA7               	movwf	_errno& (0+255),b
  9777  001390                     i2l927:
  9778  001390  0E00               	movlw	0
  9779  001392  6E52               	movwf	?_pow,c
  9780  001394  0E00               	movlw	0
  9781  001396  6E53               	movwf	?_pow+1,c
  9782  001398  0E00               	movlw	0
  9783  00139A  6E54               	movwf	?_pow+2,c
  9784  00139C  0012               	return	
  9785  00139E                     i2l3781:
  9786  00139E  5055               	movf	pow@y,w,c
  9787  0013A0  1056               	iorwf	pow@y+1,w,c
  9788  0013A2  1057               	iorwf	pow@y+2,w,c
  9789  0013A4  A4D8               	btfss	status,2,c
  9790  0013A6  D007               	goto	i2l3787
  9791  0013A8  0E00               	movlw	0
  9792  0013AA  6E52               	movwf	?_pow,c
  9793  0013AC  0E80               	movlw	128
  9794  0013AE  6E53               	movwf	?_pow+1,c
  9795  0013B0  0E3F               	movlw	63
  9796  0013B2  6E54               	movwf	?_pow+2,c
  9797  0013B4  0012               	return	
  9798  0013B6                     i2l3787:
  9799  0013B6  AE54               	btfss	pow@x+2,7,c
  9800  0013B8  D041               	goto	i2l3799
  9801  0013BA  C055  F028         	movff	pow@y,___fttol@f1
  9802  0013BE  C056  F029         	movff	pow@y+1,___fttol@f1+1
  9803  0013C2  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  9804  0013C6  EC0A  F00C         	call	___fttol	;wreg free
  9805  0013CA  C028  F05F         	movff	?___fttol,pow@yi
  9806  0013CE  C029  F060         	movff	?___fttol+1,pow@yi+1
  9807  0013D2  C02A  F061         	movff	?___fttol+2,pow@yi+2
  9808  0013D6  C02B  F062         	movff	?___fttol+3,pow@yi+3
  9809  0013DA  C05F  F009         	movff	pow@yi,___lltoft@c
  9810  0013DE  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  9811  0013E2  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  9812  0013E6  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  9813  0013EA  ECA3  F014         	call	___lltoft	;wreg free
  9814  0013EE  5055               	movf	pow@y,w,c
  9815  0013F0  1809               	xorwf	?___lltoft,w,c
  9816  0013F2  E107               	bnz	i2u350_40
  9817  0013F4  5056               	movf	pow@y+1,w,c
  9818  0013F6  180A               	xorwf	?___lltoft+1,w,c
  9819  0013F8  E104               	bnz	i2u350_40
  9820  0013FA  5057               	movf	pow@y+2,w,c
  9821  0013FC  180B               	xorwf	?___lltoft+2,w,c
  9822  0013FE  B4D8               	btfsc	status,2,c
  9823  001400  D00C               	goto	i2l3795
  9824  001402                     i2u350_40:
  9825  001402  0E00               	movlw	0
  9826  001404  0100               	movlb	0	; () banked
  9827  001406  6FA8               	movwf	(_errno+1)& (0+255),b
  9828  001408  0E21               	movlw	33
  9829  00140A  6FA7               	movwf	_errno& (0+255),b
  9830  00140C  0E00               	movlw	0
  9831  00140E  6E52               	movwf	?_pow,c
  9832  001410  0E00               	movlw	0
  9833  001412  6E53               	movwf	?_pow+1,c
  9834  001414  0E00               	movlw	0
  9835  001416  6E54               	movwf	?_pow+2,c
  9836                           
  9837                           ; BSR set to: 0
  9838  001418  0012               	return	
  9839  00141A                     i2l3795:
  9840  00141A  505F               	movf	pow@yi,w,c
  9841  00141C  0B01               	andlw	1
  9842  00141E  6E5E               	movwf	pow@sign,c
  9843  001420  C052  F001         	movff	pow@x,___ftneg@f1
  9844  001424  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9845  001428  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9846  00142C  EC4D  F016         	call	___ftneg	;wreg free
  9847  001430  C001  F052         	movff	?___ftneg,pow@x
  9848  001434  C002  F053         	movff	?___ftneg+1,pow@x+1
  9849  001438  C003  F054         	movff	?___ftneg+2,pow@x+2
  9850  00143C                     i2l3799:
  9851  00143C  C052  F034         	movff	pow@x,log@x
  9852  001440  C053  F035         	movff	pow@x+1,log@x+1
  9853  001444  C054  F036         	movff	pow@x+2,log@x+2
  9854  001448  ECFD  F00A         	call	_log	;wreg free
  9855  00144C  C034  F058         	movff	?_log,_pow$1259
  9856  001450  C035  F059         	movff	?_log+1,_pow$1259+1
  9857  001454  C036  F05A         	movff	?_log+2,_pow$1259+2
  9858  001458  C058  F00D         	movff	_pow$1259,___ftmul@f1
  9859  00145C  C059  F00E         	movff	_pow$1259+1,___ftmul@f1+1
  9860  001460  C05A  F00F         	movff	_pow$1259+2,___ftmul@f1+2
  9861  001464  C055  F010         	movff	pow@y,___ftmul@f2
  9862  001468  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9863  00146C  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9864  001470  EC84  F00C         	call	___ftmul	;wreg free
  9865  001474  C00D  F05B         	movff	?___ftmul,_pow$1260
  9866  001478  C00E  F05C         	movff	?___ftmul+1,_pow$1260+1
  9867  00147C  C00F  F05D         	movff	?___ftmul+2,_pow$1260+2
  9868  001480  C05B  F049         	movff	_pow$1260,exp@x
  9869  001484  C05C  F04A         	movff	_pow$1260+1,exp@x+1
  9870  001488  C05D  F04B         	movff	_pow$1260+2,exp@x+2
  9871  00148C  EC18  F007         	call	_exp	;wreg free
  9872  001490  C049  F052         	movff	?_exp,pow@x
  9873  001494  C04A  F053         	movff	?_exp+1,pow@x+1
  9874  001498  C04B  F054         	movff	?_exp+2,pow@x+2
  9875  00149C  505E               	movf	pow@sign,w,c
  9876  00149E  B4D8               	btfsc	status,2,c
  9877  0014A0  D00F               	goto	i2l932
  9878  0014A2  C052  F001         	movff	pow@x,___ftneg@f1
  9879  0014A6  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9880  0014AA  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9881  0014AE  EC4D  F016         	call	___ftneg	;wreg free
  9882  0014B2  C001  F052         	movff	?___ftneg,?_pow
  9883  0014B6  C002  F053         	movff	?___ftneg+1,?_pow+1
  9884  0014BA  C003  F054         	movff	?___ftneg+2,?_pow+2
  9885  0014BE  0012               	return	
  9886  0014C0                     i2l932:
  9887  0014C0  C052  F052         	movff	pow@x,?_pow
  9888  0014C4  C053  F053         	movff	pow@x+1,?_pow+1
  9889  0014C8  C054  F054         	movff	pow@x+2,?_pow+2
  9890  0014CC  0012               	return		;funcret
  9891  0014CE                     __end_of_pow:
  9892                           	opt stack 0
  9893                           pclatu	equ	0xFFB
  9894                           pclath	equ	0xFFA
  9895                           tblptru	equ	0xFF8
  9896                           tblptrh	equ	0xFF7
  9897                           tblptrl	equ	0xFF6
  9898                           tablat	equ	0xFF5
  9899                           prodh	equ	0xFF4
  9900                           prodl	equ	0xFF3
  9901                           intcon	equ	0xFF2
  9902                           intcon2	equ	0xFF1
  9903                           intcon3	equ	0xFF0
  9904                           postinc0	equ	0xFEE
  9905                           fsr0h	equ	0xFEA
  9906                           fsr0l	equ	0xFE9
  9907                           wreg	equ	0xFE8
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917 ;; *************** function _log *****************
  9918 ;; Defined at:
  9919 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  x               3   51[COMRAM] unsigned char 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  exponent        2   54[COMRAM] int 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  3   51[COMRAM] int 
  9926 ;; Registers used:
  9927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;Total ram usage:        5 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    3
  9940 ;; This function calls:
  9941 ;;		___awtoft
  9942 ;;		___ftadd
  9943 ;;		___ftmul
  9944 ;;		_eval_poly
  9945 ;;		_frexp
  9946 ;; This function is called by:
  9947 ;;		_pow
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text47
  9952  0015FA                     __ptext47:
  9953                           	opt stack 0
  9954  0015FA                     _log:
  9955                           	opt stack 20
  9956                           
  9957                           ;incstack = 0
  9958  0015FA  AE36               	btfss	log@x+2,7,c
  9959  0015FC  D00C               	goto	i2l3523
  9960  0015FE  0E00               	movlw	0
  9961  001600  0100               	movlb	0	; () banked
  9962  001602  6FA8               	movwf	(_errno+1)& (0+255),b
  9963  001604  0E21               	movlw	33
  9964  001606  6FA7               	movwf	_errno& (0+255),b
  9965  001608  0E00               	movlw	0
  9966  00160A  6E34               	movwf	?_log,c
  9967  00160C  0E00               	movlw	0
  9968  00160E  6E35               	movwf	?_log+1,c
  9969  001610  0E00               	movlw	0
  9970  001612  6E36               	movwf	?_log+2,c
  9971                           
  9972                           ; BSR set to: 0
  9973  001614  0012               	return	
  9974  001616                     i2l3523:
  9975  001616  5034               	movf	log@x,w,c
  9976  001618  1035               	iorwf	log@x+1,w,c
  9977  00161A  1036               	iorwf	log@x+2,w,c
  9978  00161C  A4D8               	btfss	status,2,c
  9979  00161E  D00C               	goto	i2l3529
  9980  001620  0E00               	movlw	0
  9981  001622  0100               	movlb	0	; () banked
  9982  001624  6FA8               	movwf	(_errno+1)& (0+255),b
  9983  001626  0E22               	movlw	34
  9984  001628  6FA7               	movwf	_errno& (0+255),b
  9985  00162A  0E00               	movlw	0
  9986  00162C  6E34               	movwf	?_log,c
  9987  00162E  0E00               	movlw	0
  9988  001630  6E35               	movwf	?_log+1,c
  9989  001632  0E00               	movlw	0
  9990  001634  6E36               	movwf	?_log+2,c
  9991                           
  9992                           ; BSR set to: 0
  9993  001636  0012               	return	
  9994  001638                     i2l3529:
  9995  001638  0E00               	movlw	0
  9996  00163A  6E10               	movwf	___ftmul@f2,c
  9997  00163C  0E00               	movlw	0
  9998  00163E  6E11               	movwf	___ftmul@f2+1,c
  9999  001640  0E40               	movlw	64
 10000  001642  6E12               	movwf	___ftmul@f2+2,c
 10001  001644  0E37               	movlw	low log@exponent
 10002  001646  6E04               	movwf	frexp@eptr,c
 10003  001648  0E00               	movlw	high log@exponent
 10004  00164A  6E05               	movwf	frexp@eptr+1,c
 10005  00164C  C034  F001         	movff	log@x,frexp@value
 10006  001650  C035  F002         	movff	log@x+1,frexp@value+1
 10007  001654  C036  F003         	movff	log@x+2,frexp@value+2
 10008  001658  EC61  F012         	call	_frexp	;wreg free
 10009  00165C  C001  F00D         	movff	?_frexp,___ftmul@f1
 10010  001660  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10011  001664  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10012  001668  EC84  F00C         	call	___ftmul	;wreg free
 10013  00166C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10014  001670  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10015  001674  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10016  001678  0E00               	movlw	0
 10017  00167A  6E1F               	movwf	___ftadd@f2,c
 10018  00167C  0E80               	movlw	128
 10019  00167E  6E20               	movwf	___ftadd@f2+1,c
 10020  001680  0EBF               	movlw	191
 10021  001682  6E21               	movwf	___ftadd@f2+2,c
 10022  001684  EC0C  F008         	call	___ftadd	;wreg free
 10023  001688  C01C  F034         	movff	?___ftadd,log@x
 10024  00168C  C01D  F035         	movff	?___ftadd+1,log@x+1
 10025  001690  C01E  F036         	movff	?___ftadd+2,log@x+2
 10026  001694  0637               	decf	log@exponent,f,c
 10027  001696  A0D8               	btfss	status,0,c
 10028  001698  0638               	decf	log@exponent+1,f,c
 10029  00169A  C034  F028         	movff	log@x,eval_poly@x
 10030  00169E  C035  F029         	movff	log@x+1,eval_poly@x+1
 10031  0016A2  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10032  0016A6  0EFF               	movlw	low log@coeff
 10033  0016A8  6E2B               	movwf	eval_poly@d,c
 10034  0016AA  0EFD               	movlw	high log@coeff
 10035  0016AC  6E2C               	movwf	eval_poly@d+1,c
 10036  0016AE  0E00               	movlw	0
 10037  0016B0  6E2E               	movwf	eval_poly@n+1,c
 10038  0016B2  0E08               	movlw	8
 10039  0016B4  6E2D               	movwf	eval_poly@n,c
 10040  0016B6  EC33  F00F         	call	_eval_poly	;wreg free
 10041  0016BA  C028  F034         	movff	?_eval_poly,log@x
 10042  0016BE  C029  F035         	movff	?_eval_poly+1,log@x+1
 10043  0016C2  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10044  0016C6  0E72               	movlw	114
 10045  0016C8  6E10               	movwf	___ftmul@f2,c
 10046  0016CA  0E31               	movlw	49
 10047  0016CC  6E11               	movwf	___ftmul@f2+1,c
 10048  0016CE  0E3F               	movlw	63
 10049  0016D0  6E12               	movwf	___ftmul@f2+2,c
 10050  0016D2  C037  F009         	movff	log@exponent,___awtoft@c
 10051  0016D6  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 10052  0016DA  ECA9  F015         	call	___awtoft	;wreg free
 10053  0016DE  C009  F00D         	movff	?___awtoft,___ftmul@f1
 10054  0016E2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 10055  0016E6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 10056  0016EA  EC84  F00C         	call	___ftmul	;wreg free
 10057  0016EE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10058  0016F2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10059  0016F6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10060  0016FA  C034  F01F         	movff	log@x,___ftadd@f2
 10061  0016FE  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10062  001702  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10063  001706  EC0C  F008         	call	___ftadd	;wreg free
 10064  00170A  C01C  F034         	movff	?___ftadd,?_log
 10065  00170E  C01D  F035         	movff	?___ftadd+1,?_log+1
 10066  001712  C01E  F036         	movff	?___ftadd+2,?_log+2
 10067  001716  0012               	return	
 10068  001718                     __end_of_log:
 10069                           	opt stack 0
 10070                           pclatu	equ	0xFFB
 10071                           pclath	equ	0xFFA
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           intcon2	equ	0xFF1
 10080                           intcon3	equ	0xFF0
 10081                           postinc0	equ	0xFEE
 10082                           fsr0h	equ	0xFEA
 10083                           fsr0l	equ	0xFE9
 10084                           wreg	equ	0xFE8
 10085                           fsr1h	equ	0xFE2
 10086                           fsr1l	equ	0xFE1
 10087                           indf2	equ	0xFDF
 10088                           postinc2	equ	0xFDE
 10089                           postdec2	equ	0xFDD
 10090                           fsr2h	equ	0xFDA
 10091                           fsr2l	equ	0xFD9
 10092                           status	equ	0xFD8
 10093                           
 10094 ;; *************** function _exp *****************
 10095 ;; Defined at:
 10096 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  x               3   72[COMRAM] int 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;  exponent        2   78[COMRAM] int 
 10101 ;;  sign            1   80[COMRAM] unsigned char 
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  3   72[COMRAM] unsigned char 
 10104 ;; Registers used:
 10105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10111 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;Total ram usage:        9 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    3
 10118 ;; This function calls:
 10119 ;;		___awtoft
 10120 ;;		___ftdiv
 10121 ;;		___ftge
 10122 ;;		___ftmul
 10123 ;;		___ftneg
 10124 ;;		___ftsub
 10125 ;;		___fttol
 10126 ;;		_eval_poly
 10127 ;;		_floor
 10128 ;;		_ldexp
 10129 ;; This function is called by:
 10130 ;;		_pow
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text48
 10135  000E30                     __ptext48:
 10136                           	opt stack 0
 10137  000E30                     _exp:
 10138                           	opt stack 20
 10139                           
 10140                           ;incstack = 0
 10141  000E30  5049               	movf	exp@x,w,c
 10142  000E32  104A               	iorwf	exp@x+1,w,c
 10143  000E34  104B               	iorwf	exp@x+2,w,c
 10144  000E36  A4D8               	btfss	status,2,c
 10145  000E38  D007               	goto	i2l3545
 10146  000E3A  0E00               	movlw	0
 10147  000E3C  6E49               	movwf	?_exp,c
 10148  000E3E  0E80               	movlw	128
 10149  000E40  6E4A               	movwf	?_exp+1,c
 10150  000E42  0E3F               	movlw	63
 10151  000E44  6E4B               	movwf	?_exp+2,c
 10152  000E46  0012               	return	
 10153  000E48                     i2l3545:
 10154  000E48  0E72               	movlw	114
 10155  000E4A  6E01               	movwf	___ftge@ff1,c
 10156  000E4C  0E31               	movlw	49
 10157  000E4E  6E02               	movwf	___ftge@ff1+1,c
 10158  000E50  0E44               	movlw	68
 10159  000E52  6E03               	movwf	___ftge@ff1+2,c
 10160  000E54  C049  F004         	movff	exp@x,___ftge@ff2
 10161  000E58  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 10162  000E5C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 10163  000E60  ECA9  F012         	call	___ftge	;wreg free
 10164  000E64  B0D8               	btfsc	status,0,c
 10165  000E66  D00C               	goto	i2l3551
 10166  000E68  0E00               	movlw	0
 10167  000E6A  0100               	movlb	0	; () banked
 10168  000E6C  6FA8               	movwf	(_errno+1)& (0+255),b
 10169  000E6E  0E22               	movlw	34
 10170  000E70  6FA7               	movwf	_errno& (0+255),b
 10171  000E72  0EFF               	movlw	255
 10172  000E74  6E49               	movwf	?_exp,c
 10173  000E76  0E7F               	movlw	127
 10174  000E78  6E4A               	movwf	?_exp+1,c
 10175  000E7A  0E7F               	movlw	127
 10176  000E7C  6E4B               	movwf	?_exp+2,c
 10177                           
 10178                           ; BSR set to: 0
 10179  000E7E  0012               	return	
 10180  000E80                     i2l3551:
 10181  000E80  C049  F001         	movff	exp@x,___ftge@ff1
 10182  000E84  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 10183  000E88  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 10184  000E8C  0E49               	movlw	73
 10185  000E8E  6E04               	movwf	___ftge@ff2,c
 10186  000E90  0E3A               	movlw	58
 10187  000E92  6E05               	movwf	___ftge@ff2+1,c
 10188  000E94  0EC4               	movlw	196
 10189  000E96  6E06               	movwf	___ftge@ff2+2,c
 10190  000E98  ECA9  F012         	call	___ftge	;wreg free
 10191  000E9C  B0D8               	btfsc	status,0,c
 10192  000E9E  D00C               	goto	i2l3557
 10193  000EA0  0E00               	movlw	0
 10194  000EA2  0100               	movlb	0	; () banked
 10195  000EA4  6FA8               	movwf	(_errno+1)& (0+255),b
 10196  000EA6  0E22               	movlw	34
 10197  000EA8  6FA7               	movwf	_errno& (0+255),b
 10198  000EAA  0E00               	movlw	0
 10199  000EAC  6E49               	movwf	?_exp,c
 10200  000EAE  0E00               	movlw	0
 10201  000EB0  6E4A               	movwf	?_exp+1,c
 10202  000EB2  0E00               	movlw	0
 10203  000EB4  6E4B               	movwf	?_exp+2,c
 10204                           
 10205                           ; BSR set to: 0
 10206  000EB6  0012               	return	
 10207  000EB8                     i2l3557:
 10208  000EB8  AE4B               	btfss	exp@x+2,7,c
 10209  000EBA  D002               	goto	i2u312_40
 10210  000EBC  0E01               	movlw	1
 10211  000EBE  D001               	goto	i2u313_40
 10212  000EC0                     i2u312_40:
 10213  000EC0  0E00               	movlw	0
 10214  000EC2                     i2u313_40:
 10215  000EC2  6E51               	movwf	exp@sign,c
 10216  000EC4  5051               	movf	exp@sign,w,c
 10217  000EC6  B4D8               	btfsc	status,2,c
 10218  000EC8  D00E               	goto	i2l1090
 10219  000ECA  C049  F001         	movff	exp@x,___ftneg@f1
 10220  000ECE  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10221  000ED2  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10222  000ED6  EC4D  F016         	call	___ftneg	;wreg free
 10223  000EDA  C001  F049         	movff	?___ftneg,exp@x
 10224  000EDE  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10225  000EE2  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10226  000EE6                     i2l1090:
 10227  000EE6  C049  F00D         	movff	exp@x,___ftmul@f1
 10228  000EEA  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10229  000EEE  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10230  000EF2  0EAA               	movlw	170
 10231  000EF4  6E10               	movwf	___ftmul@f2,c
 10232  000EF6  0EB8               	movlw	184
 10233  000EF8  6E11               	movwf	___ftmul@f2+1,c
 10234  000EFA  0E3F               	movlw	63
 10235  000EFC  6E12               	movwf	___ftmul@f2+2,c
 10236  000EFE  EC84  F00C         	call	___ftmul	;wreg free
 10237  000F02  C00D  F049         	movff	?___ftmul,exp@x
 10238  000F06  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10239  000F0A  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10240  000F0E  C049  F041         	movff	exp@x,floor@x
 10241  000F12  C04A  F042         	movff	exp@x+1,floor@x+1
 10242  000F16  C04B  F043         	movff	exp@x+2,floor@x+2
 10243  000F1A  EC5B  F00E         	call	_floor	;wreg free
 10244  000F1E  C041  F04C         	movff	?_floor,_exp$1261
 10245  000F22  C042  F04D         	movff	?_floor+1,_exp$1261+1
 10246  000F26  C043  F04E         	movff	?_floor+2,_exp$1261+2
 10247  000F2A  C04C  F028         	movff	_exp$1261,___fttol@f1
 10248  000F2E  C04D  F029         	movff	_exp$1261+1,___fttol@f1+1
 10249  000F32  C04E  F02A         	movff	_exp$1261+2,___fttol@f1+2
 10250  000F36  EC0A  F00C         	call	___fttol	;wreg free
 10251  000F3A  C028  F04F         	movff	?___fttol,exp@exponent
 10252  000F3E  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10253  000F42  C049  F028         	movff	exp@x,___ftsub@f1
 10254  000F46  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10255  000F4A  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10256  000F4E  C04F  F009         	movff	exp@exponent,___awtoft@c
 10257  000F52  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 10258  000F56  ECA9  F015         	call	___awtoft	;wreg free
 10259  000F5A  C009  F02B         	movff	?___awtoft,___ftsub@f2
 10260  000F5E  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 10261  000F62  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 10262  000F66  EC6A  F015         	call	___ftsub	;wreg free
 10263  000F6A  C028  F049         	movff	?___ftsub,exp@x
 10264  000F6E  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10265  000F72  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10266  000F76  C049  F028         	movff	exp@x,eval_poly@x
 10267  000F7A  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10268  000F7E  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10269  000F82  0EE1               	movlw	low exp@coeff
 10270  000F84  6E2B               	movwf	eval_poly@d,c
 10271  000F86  0EFD               	movlw	high exp@coeff
 10272  000F88  6E2C               	movwf	eval_poly@d+1,c
 10273  000F8A  0E00               	movlw	0
 10274  000F8C  6E2E               	movwf	eval_poly@n+1,c
 10275  000F8E  0E09               	movlw	9
 10276  000F90  6E2D               	movwf	eval_poly@n,c
 10277  000F92  EC33  F00F         	call	_eval_poly	;wreg free
 10278  000F96  C028  F034         	movff	?_eval_poly,ldexp@value
 10279  000F9A  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10280  000F9E  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10281  000FA2  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10282  000FA6  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10283  000FAA  EC9C  F00F         	call	_ldexp	;wreg free
 10284  000FAE  C034  F049         	movff	?_ldexp,exp@x
 10285  000FB2  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10286  000FB6  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10287  000FBA  5051               	movf	exp@sign,w,c
 10288  000FBC  B4D8               	btfsc	status,2,c
 10289  000FBE  D025               	goto	i2l1091
 10290  000FC0  2849               	incf	exp@x,w,c
 10291  000FC2  E10E               	bnz	i2l3579
 10292  000FC4  0E7F               	movlw	127
 10293  000FC6  184A               	xorwf	exp@x+1,w,c
 10294  000FC8  E10B               	bnz	i2l3579
 10295  000FCA  0E7F               	movlw	127
 10296  000FCC  184B               	xorwf	exp@x+2,w,c
 10297  000FCE  A4D8               	btfss	status,2,c
 10298  000FD0  D007               	goto	i2l3579
 10299  000FD2  0E00               	movlw	0
 10300  000FD4  6E49               	movwf	?_exp,c
 10301  000FD6  0E00               	movlw	0
 10302  000FD8  6E4A               	movwf	?_exp+1,c
 10303  000FDA  0E00               	movlw	0
 10304  000FDC  6E4B               	movwf	?_exp+2,c
 10305  000FDE  0012               	return	
 10306  000FE0                     i2l3579:
 10307  000FE0  0E00               	movlw	0
 10308  000FE2  6E09               	movwf	___ftdiv@f1,c
 10309  000FE4  0E80               	movlw	128
 10310  000FE6  6E0A               	movwf	___ftdiv@f1+1,c
 10311  000FE8  0E3F               	movlw	63
 10312  000FEA  6E0B               	movwf	___ftdiv@f1+2,c
 10313  000FEC  C049  F00C         	movff	exp@x,___ftdiv@f2
 10314  000FF0  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10315  000FF4  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10316  000FF8  ECE8  F00D         	call	___ftdiv	;wreg free
 10317  000FFC  C009  F049         	movff	?___ftdiv,?_exp
 10318  001000  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10319  001004  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10320  001008  0012               	return	
 10321  00100A                     i2l1091:
 10322  00100A  C049  F049         	movff	exp@x,?_exp
 10323  00100E  C04A  F04A         	movff	exp@x+1,?_exp+1
 10324  001012  C04B  F04B         	movff	exp@x+2,?_exp+2
 10325  001016  0012               	return		;funcret
 10326  001018                     __end_of_exp:
 10327                           	opt stack 0
 10328                           pclatu	equ	0xFFB
 10329                           pclath	equ	0xFFA
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           intcon	equ	0xFF2
 10337                           intcon2	equ	0xFF1
 10338                           intcon3	equ	0xFF0
 10339                           postinc0	equ	0xFEE
 10340                           fsr0h	equ	0xFEA
 10341                           fsr0l	equ	0xFE9
 10342                           wreg	equ	0xFE8
 10343                           fsr1h	equ	0xFE2
 10344                           fsr1l	equ	0xFE1
 10345                           indf2	equ	0xFDF
 10346                           postinc2	equ	0xFDE
 10347                           postdec2	equ	0xFDD
 10348                           fsr2h	equ	0xFDA
 10349                           fsr2l	equ	0xFD9
 10350                           status	equ	0xFD8
 10351                           
 10352 ;; *************** function _ldexp *****************
 10353 ;; Defined at:
 10354 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  value           3   51[COMRAM] unsigned char 
 10357 ;;  newexp          2   54[COMRAM] int 
 10358 ;; Auto vars:     Size  Location     Type
 10359 ;;		None
 10360 ;; Return value:  Size  Location     Type
 10361 ;;                  3   51[COMRAM] int 
 10362 ;; Registers used:
 10363 ;;		wreg, status,2, status,0
 10364 ;; Tracked objects:
 10365 ;;		On entry : 0/0
 10366 ;;		On exit  : 0/0
 10367 ;;		Unchanged: 0/0
 10368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10369 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;Total ram usage:        7 bytes
 10374 ;; Hardware stack levels used:    1
 10375 ;; This function calls:
 10376 ;;		Nothing
 10377 ;; This function is called by:
 10378 ;;		_exp
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           
 10382                           	psect	text49
 10383  001F38                     __ptext49:
 10384                           	opt stack 0
 10385  001F38                     _ldexp:
 10386                           	opt stack 22
 10387                           
 10388                           ;incstack = 0
 10389  001F38  5034               	movf	ldexp@value,w,c
 10390  001F3A  1035               	iorwf	ldexp@value+1,w,c
 10391  001F3C  1036               	iorwf	ldexp@value+2,w,c
 10392  001F3E  A4D8               	btfss	status,2,c
 10393  001F40  D007               	goto	i2l3391
 10394  001F42  0E00               	movlw	0
 10395  001F44  6E34               	movwf	?_ldexp,c
 10396  001F46  0E00               	movlw	0
 10397  001F48  6E35               	movwf	?_ldexp+1,c
 10398  001F4A  0E00               	movlw	0
 10399  001F4C  6E36               	movwf	?_ldexp+2,c
 10400  001F4E  0012               	return	
 10401  001F50                     i2l3391:
 10402  001F50  5036               	movf	ldexp@value+2,w,c
 10403  001F52  0B7F               	andlw	127
 10404  001F54  6E39               	movwf	??_ldexp& (0+255),c
 10405  001F56  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10406  001F58  90D8               	bcf	status,0,c
 10407  001F5A  3639               	rlcf	??_ldexp,f,c
 10408  001F5C  363A               	rlcf	??_ldexp+1,f,c
 10409  001F5E  5039               	movf	??_ldexp,w,c
 10410  001F60  2637               	addwf	ldexp@newexp,f,c
 10411  001F62  503A               	movf	??_ldexp+1,w,c
 10412  001F64  2238               	addwfc	ldexp@newexp+1,f,c
 10413  001F66  AE35               	btfss	ldexp@value+1,7,c
 10414  001F68  D003               	goto	i2u292_40
 10415  001F6A  6A39               	clrf	??_ldexp& (0+255),c
 10416  001F6C  2A39               	incf	??_ldexp& (0+255),f,c
 10417  001F6E  D001               	goto	i2u292_48
 10418  001F70                     i2u292_40:
 10419  001F70  6A39               	clrf	??_ldexp& (0+255),c
 10420  001F72                     i2u292_48:
 10421  001F72  5039               	movf	??_ldexp,w,c
 10422  001F74  2637               	addwf	ldexp@newexp,f,c
 10423  001F76  0E00               	movlw	0
 10424  001F78  2238               	addwfc	ldexp@newexp+1,f,c
 10425  001F7A  AE38               	btfss	ldexp@newexp+1,7,c
 10426  001F7C  D00C               	goto	i2l3399
 10427  001F7E  0E00               	movlw	0
 10428  001F80  0100               	movlb	0	; () banked
 10429  001F82  6FA8               	movwf	(_errno+1)& (0+255),b
 10430  001F84  0E22               	movlw	34
 10431  001F86  6FA7               	movwf	_errno& (0+255),b
 10432  001F88  0E00               	movlw	0
 10433  001F8A  6E34               	movwf	?_ldexp,c
 10434  001F8C  0E00               	movlw	0
 10435  001F8E  6E35               	movwf	?_ldexp+1,c
 10436  001F90  0E00               	movlw	0
 10437  001F92                     L11:
 10438  001F92  6E36               	movwf	?_ldexp+2,c
 10439                           
 10440                           ; BSR set to: 0
 10441  001F94  0012               	return	
 10442  001F96                     i2l3399:
 10443  001F96  BE38               	btfsc	ldexp@newexp+1,7,c
 10444  001F98  D016               	goto	i2l3415
 10445  001F9A  0438               	decf	ldexp@newexp+1,w,c
 10446  001F9C  A0D8               	btfss	status,0,c
 10447  001F9E  D013               	goto	i2l3415
 10448  001FA0  0E00               	movlw	0
 10449  001FA2  0100               	movlb	0	; () banked
 10450  001FA4  6FA8               	movwf	(_errno+1)& (0+255),b
 10451  001FA6  0E22               	movlw	34
 10452  001FA8  6FA7               	movwf	_errno& (0+255),b
 10453                           
 10454                           ; BSR set to: 0
 10455  001FAA  AE36               	btfss	ldexp@value+2,7,c
 10456  001FAC  D006               	goto	i2l3411
 10457                           
 10458                           ; BSR set to: 0
 10459  001FAE  0EFF               	movlw	255
 10460  001FB0  6E34               	movwf	?_ldexp,c
 10461  001FB2  0E7F               	movlw	127
 10462  001FB4  6E35               	movwf	?_ldexp+1,c
 10463  001FB6  0EFF               	movlw	255
 10464  001FB8  D7EC               	goto	L11
 10465  001FBA                     i2l3411:
 10466                           
 10467                           ; BSR set to: 0
 10468  001FBA  0EFF               	movlw	255
 10469  001FBC  6E34               	movwf	?_ldexp,c
 10470  001FBE  0E7F               	movlw	127
 10471  001FC0  6E35               	movwf	?_ldexp+1,c
 10472  001FC2  0E7F               	movlw	127
 10473  001FC4  D7E6               	goto	L11
 10474  001FC6                     i2l3415:
 10475  001FC6  3438               	rlcf	ldexp@newexp+1,w,c
 10476  001FC8  3038               	rrcf	ldexp@newexp+1,w,c
 10477  001FCA  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10478  001FCC  3037               	rrcf	ldexp@newexp,w,c
 10479  001FCE  6E39               	movwf	??_ldexp& (0+255),c
 10480  001FD0  5036               	movf	ldexp@value+2,w,c
 10481  001FD2  1839               	xorwf	??_ldexp,w,c
 10482  001FD4  0B80               	andlw	-128
 10483  001FD6  1839               	xorwf	??_ldexp,w,c
 10484  001FD8  6E36               	movwf	ldexp@value+2,c
 10485  001FDA  C037  F039         	movff	ldexp@newexp,??_ldexp
 10486  001FDE  0E01               	movlw	1
 10487  001FE0  1639               	andwf	??_ldexp,f,c
 10488  001FE2  3239               	rrcf	??_ldexp,f,c
 10489  001FE4  3239               	rrcf	??_ldexp,f,c
 10490  001FE6  5035               	movf	ldexp@value+1,w,c
 10491  001FE8  1839               	xorwf	??_ldexp,w,c
 10492  001FEA  0B7F               	andlw	-129
 10493  001FEC  1839               	xorwf	??_ldexp,w,c
 10494  001FEE  6E35               	movwf	ldexp@value+1,c
 10495  001FF0  C034  F034         	movff	ldexp@value,?_ldexp
 10496  001FF4  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10497  001FF8  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10498  001FFC  0012               	return	
 10499  001FFE                     __end_of_ldexp:
 10500                           	opt stack 0
 10501                           pclatu	equ	0xFFB
 10502                           pclath	equ	0xFFA
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           intcon2	equ	0xFF1
 10511                           intcon3	equ	0xFF0
 10512                           postinc0	equ	0xFEE
 10513                           fsr0h	equ	0xFEA
 10514                           fsr0l	equ	0xFE9
 10515                           wreg	equ	0xFE8
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _floor *****************
 10526 ;; Defined at:
 10527 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  x               3   64[COMRAM] int 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  i               3   67[COMRAM] int 
 10532 ;;  expon           2   70[COMRAM] int 
 10533 ;; Return value:  Size  Location     Type
 10534 ;;                  3   64[COMRAM] int 
 10535 ;; Registers used:
 10536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10542 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;Total ram usage:        8 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    2
 10549 ;; This function calls:
 10550 ;;		___altoft
 10551 ;;		___ftadd
 10552 ;;		___ftge
 10553 ;;		___fttol
 10554 ;;		_frexp
 10555 ;; This function is called by:
 10556 ;;		_exp
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text50
 10561  001CB6                     __ptext50:
 10562                           	opt stack 0
 10563  001CB6                     _floor:
 10564                           	opt stack 20
 10565                           
 10566                           ;incstack = 0
 10567  001CB6  C041  F001         	movff	floor@x,frexp@value
 10568  001CBA  C042  F002         	movff	floor@x+1,frexp@value+1
 10569  001CBE  C043  F003         	movff	floor@x+2,frexp@value+2
 10570  001CC2  0E47               	movlw	low floor@expon
 10571  001CC4  6E04               	movwf	frexp@eptr,c
 10572  001CC6  0E00               	movlw	high floor@expon
 10573  001CC8  6E05               	movwf	frexp@eptr+1,c
 10574  001CCA  EC61  F012         	call	_frexp	;wreg free
 10575  001CCE  AE48               	btfss	floor@expon+1,7,c
 10576  001CD0  D010               	goto	i2l3369
 10577  001CD2  AE43               	btfss	floor@x+2,7,c
 10578  001CD4  D007               	goto	i2l3365
 10579  001CD6  0E00               	movlw	0
 10580  001CD8  6E41               	movwf	?_floor,c
 10581  001CDA  0E80               	movlw	128
 10582  001CDC  6E42               	movwf	?_floor+1,c
 10583  001CDE  0EBF               	movlw	191
 10584  001CE0  6E43               	movwf	?_floor+2,c
 10585  001CE2  0012               	return	
 10586  001CE4                     i2l3365:
 10587  001CE4  0E00               	movlw	0
 10588  001CE6  6E41               	movwf	?_floor,c
 10589  001CE8  0E00               	movlw	0
 10590  001CEA  6E42               	movwf	?_floor+1,c
 10591  001CEC  0E00               	movlw	0
 10592  001CEE  6E43               	movwf	?_floor+2,c
 10593  001CF0  0012               	return	
 10594  001CF2                     i2l3369:
 10595  001CF2  5048               	movf	floor@expon+1,w,c
 10596  001CF4  E104               	bnz	i2u288_40
 10597  001CF6  0E15               	movlw	21
 10598  001CF8  5C47               	subwf	floor@expon,w,c
 10599  001CFA  A0D8               	btfss	status,0,c
 10600  001CFC  D007               	goto	i2l3373
 10601  001CFE                     i2u288_40:
 10602  001CFE  C041  F041         	movff	floor@x,?_floor
 10603  001D02  C042  F042         	movff	floor@x+1,?_floor+1
 10604  001D06  C043  F043         	movff	floor@x+2,?_floor+2
 10605  001D0A  0012               	return	
 10606  001D0C                     i2l3373:
 10607  001D0C  C041  F028         	movff	floor@x,___fttol@f1
 10608  001D10  C042  F029         	movff	floor@x+1,___fttol@f1+1
 10609  001D14  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 10610  001D18  EC0A  F00C         	call	___fttol	;wreg free
 10611  001D1C  C028  F037         	movff	?___fttol,___altoft@c
 10612  001D20  C029  F038         	movff	?___fttol+1,___altoft@c+1
 10613  001D24  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 10614  001D28  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 10615  001D2C  EC6F  F013         	call	___altoft	;wreg free
 10616  001D30  C037  F044         	movff	?___altoft,floor@i
 10617  001D34  C038  F045         	movff	?___altoft+1,floor@i+1
 10618  001D38  C039  F046         	movff	?___altoft+2,floor@i+2
 10619  001D3C  C041  F001         	movff	floor@x,___ftge@ff1
 10620  001D40  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 10621  001D44  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 10622  001D48  C044  F004         	movff	floor@i,___ftge@ff2
 10623  001D4C  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 10624  001D50  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 10625  001D54  ECA9  F012         	call	___ftge	;wreg free
 10626  001D58  B0D8               	btfsc	status,0,c
 10627  001D5A  D015               	goto	i2l1101
 10628  001D5C  C044  F01C         	movff	floor@i,___ftadd@f1
 10629  001D60  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 10630  001D64  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 10631  001D68  0E00               	movlw	0
 10632  001D6A  6E1F               	movwf	___ftadd@f2,c
 10633  001D6C  0E80               	movlw	128
 10634  001D6E  6E20               	movwf	___ftadd@f2+1,c
 10635  001D70  0EBF               	movlw	191
 10636  001D72  6E21               	movwf	___ftadd@f2+2,c
 10637  001D74  EC0C  F008         	call	___ftadd	;wreg free
 10638  001D78  C01C  F041         	movff	?___ftadd,?_floor
 10639  001D7C  C01D  F042         	movff	?___ftadd+1,?_floor+1
 10640  001D80  C01E  F043         	movff	?___ftadd+2,?_floor+2
 10641  001D84  0012               	return	
 10642  001D86                     i2l1101:
 10643  001D86  C044  F041         	movff	floor@i,?_floor
 10644  001D8A  C045  F042         	movff	floor@i+1,?_floor+1
 10645  001D8E  C046  F043         	movff	floor@i+2,?_floor+2
 10646  001D92  0012               	return		;funcret
 10647  001D94                     __end_of_floor:
 10648                           	opt stack 0
 10649                           pclatu	equ	0xFFB
 10650                           pclath	equ	0xFFA
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           intcon2	equ	0xFF1
 10659                           intcon3	equ	0xFF0
 10660                           postinc0	equ	0xFEE
 10661                           fsr0h	equ	0xFEA
 10662                           fsr0l	equ	0xFE9
 10663                           wreg	equ	0xFE8
 10664                           fsr1h	equ	0xFE2
 10665                           fsr1l	equ	0xFE1
 10666                           indf2	equ	0xFDF
 10667                           postinc2	equ	0xFDE
 10668                           postdec2	equ	0xFDD
 10669                           fsr2h	equ	0xFDA
 10670                           fsr2l	equ	0xFD9
 10671                           status	equ	0xFD8
 10672                           
 10673 ;; *************** function _frexp *****************
 10674 ;; Defined at:
 10675 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;  value           3    0[COMRAM] int 
 10678 ;;  eptr            2    3[COMRAM] PTR int 
 10679 ;;		 -> log@exponent(2), floor@expon(2), 
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  3    0[COMRAM] PTR int 
 10684 ;; Registers used:
 10685 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10691 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10694 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;Total ram usage:        7 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_floor
 10701 ;;		_log
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           	psect	text51
 10706  0024C2                     __ptext51:
 10707                           	opt stack 0
 10708  0024C2                     _frexp:
 10709                           	opt stack 22
 10710                           
 10711                           ;incstack = 0
 10712  0024C2  5001               	movf	frexp@value,w,c
 10713  0024C4  1002               	iorwf	frexp@value+1,w,c
 10714  0024C6  1003               	iorwf	frexp@value+2,w,c
 10715  0024C8  A4D8               	btfss	status,2,c
 10716  0024CA  D00F               	goto	i2l3245
 10717  0024CC  C004  FFD9         	movff	frexp@eptr,fsr2l
 10718  0024D0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10719  0024D4  0E00               	movlw	0
 10720  0024D6  6EDE               	movwf	postinc2,c
 10721  0024D8  0E00               	movlw	0
 10722  0024DA  6EDD               	movwf	postdec2,c
 10723  0024DC  0E00               	movlw	0
 10724  0024DE  6E01               	movwf	?_frexp,c
 10725  0024E0  0E00               	movlw	0
 10726  0024E2  6E02               	movwf	?_frexp+1,c
 10727  0024E4  0E00               	movlw	0
 10728  0024E6  6E03               	movwf	?_frexp+2,c
 10729  0024E8  0012               	return	
 10730  0024EA                     i2l3245:
 10731  0024EA  5003               	movf	frexp@value+2,w,c
 10732  0024EC  0B7F               	andlw	127
 10733  0024EE  6E06               	movwf	??_frexp& (0+255),c
 10734  0024F0  6A07               	clrf	(??_frexp+1)& (0+255),c
 10735  0024F2  90D8               	bcf	status,0,c
 10736  0024F4  3606               	rlcf	??_frexp,f,c
 10737  0024F6  3607               	rlcf	??_frexp+1,f,c
 10738  0024F8  C004  FFD9         	movff	frexp@eptr,fsr2l
 10739  0024FC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10740  002500  C006  FFDE         	movff	??_frexp,postinc2
 10741  002504  C007  FFDD         	movff	??_frexp+1,postdec2
 10742  002508  AE02               	btfss	frexp@value+1,7,c
 10743  00250A  D003               	goto	i2u275_40
 10744  00250C  6A06               	clrf	??_frexp& (0+255),c
 10745  00250E  2A06               	incf	??_frexp& (0+255),f,c
 10746  002510  D001               	goto	i2u275_48
 10747  002512                     i2u275_40:
 10748  002512  6A06               	clrf	??_frexp& (0+255),c
 10749  002514                     i2u275_48:
 10750  002514  5006               	movf	??_frexp,w,c
 10751  002516  C004  FFD9         	movff	frexp@eptr,fsr2l
 10752  00251A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10753  00251E  12DE               	iorwf	postinc2,f,c
 10754  002520  0E00               	movlw	0
 10755  002522  12DD               	iorwf	postdec2,f,c
 10756  002524  C004  FFD9         	movff	frexp@eptr,fsr2l
 10757  002528  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 10758  00252C  0E82               	movlw	130
 10759  00252E  26DE               	addwf	postinc2,f,c
 10760  002530  0EFF               	movlw	255
 10761  002532  22DD               	addwfc	postdec2,f,c
 10762  002534  8003               	bsf	frexp@value+2,0,c
 10763  002536  8203               	bsf	frexp@value+2,1,c
 10764  002538  8403               	bsf	frexp@value+2,2,c
 10765  00253A  8603               	bsf	frexp@value+2,3,c
 10766  00253C  8803               	bsf	frexp@value+2,4,c
 10767  00253E  8A03               	bsf	frexp@value+2,5,c
 10768  002540  9C03               	bcf	frexp@value+2,6,c
 10769  002542  9E02               	bcf	frexp@value+1,7,c
 10770  002544  C001  F001         	movff	frexp@value,?_frexp
 10771  002548  C002  F002         	movff	frexp@value+1,?_frexp+1
 10772  00254C  C003  F003         	movff	frexp@value+2,?_frexp+2
 10773  002550  0012               	return	
 10774  002552                     __end_of_frexp:
 10775                           	opt stack 0
 10776                           pclatu	equ	0xFFB
 10777                           pclath	equ	0xFFA
 10778                           tblptru	equ	0xFF8
 10779                           tblptrh	equ	0xFF7
 10780                           tblptrl	equ	0xFF6
 10781                           tablat	equ	0xFF5
 10782                           prodh	equ	0xFF4
 10783                           prodl	equ	0xFF3
 10784                           intcon	equ	0xFF2
 10785                           intcon2	equ	0xFF1
 10786                           intcon3	equ	0xFF0
 10787                           postinc0	equ	0xFEE
 10788                           fsr0h	equ	0xFEA
 10789                           fsr0l	equ	0xFE9
 10790                           wreg	equ	0xFE8
 10791                           fsr1h	equ	0xFE2
 10792                           fsr1l	equ	0xFE1
 10793                           indf2	equ	0xFDF
 10794                           postinc2	equ	0xFDE
 10795                           postdec2	equ	0xFDD
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function ___fttol *****************
 10801 ;; Defined at:
 10802 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  f1              3   39[COMRAM] float 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  lval            4   49[COMRAM] unsigned long 
 10807 ;;  exp1            1   53[COMRAM] unsigned char 
 10808 ;;  sign1           1   48[COMRAM] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  4   39[COMRAM] long 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:       15 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_dec_to_hex
 10828 ;;		_pow
 10829 ;;		_exp
 10830 ;;		_floor
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text52
 10835  001814                     __ptext52:
 10836                           	opt stack 0
 10837  001814                     ___fttol:
 10838                           	opt stack 21
 10839                           
 10840                           ;incstack = 0
 10841  001814  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10842  001818  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10843  00181A  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10844  00181C  3429               	rlcf	___fttol@f1+1,w,c
 10845  00181E  362C               	rlcf	??___fttol& (0+255),f,c
 10846  001820  E301               	bnc	u266_41
 10847  001822  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10848  001824                     u266_41:
 10849  001824  502C               	movf	??___fttol,w,c
 10850  001826  6E36               	movwf	___fttol@exp1,c
 10851  001828  5036               	movf	___fttol@exp1,w,c
 10852  00182A  A4D8               	btfss	status,2,c
 10853  00182C  D009               	goto	i2l3197
 10854  00182E  0E00               	movlw	0
 10855  001830  6E28               	movwf	?___fttol,c
 10856  001832  0E00               	movlw	0
 10857  001834  6E29               	movwf	?___fttol+1,c
 10858  001836  0E00               	movlw	0
 10859  001838  6E2A               	movwf	?___fttol+2,c
 10860  00183A  0E00               	movlw	0
 10861  00183C  6E2B               	movwf	?___fttol+3,c
 10862  00183E  0012               	return	
 10863  001840                     i2l3197:
 10864  001840  0E17               	movlw	23
 10865  001842  6E2C               	movwf	??___fttol& (0+255),c
 10866  001844  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10867  001848  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10868  00184C  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10869  001850  282C               	incf	??___fttol,w,c
 10870  001852  6E30               	movwf	(??___fttol+4)& (0+255),c
 10871  001854  D004               	goto	i2u268_40
 10872  001856                     i2u268_45:
 10873  001856  90D8               	bcf	status,0,c
 10874  001858  322F               	rrcf	??___fttol+3,f,c
 10875  00185A  322E               	rrcf	??___fttol+2,f,c
 10876  00185C  322D               	rrcf	??___fttol+1,f,c
 10877  00185E                     i2u268_40:
 10878  00185E  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10879  001860  D7FA               	goto	i2u268_45
 10880  001862  502D               	movf	??___fttol+1,w,c
 10881  001864  6E31               	movwf	___fttol@sign1,c
 10882  001866  8E29               	bsf	___fttol@f1+1,7,c
 10883  001868  0EFF               	movlw	255
 10884  00186A  1628               	andwf	___fttol@f1,f,c
 10885  00186C  0EFF               	movlw	255
 10886  00186E  1629               	andwf	___fttol@f1+1,f,c
 10887  001870  0E00               	movlw	0
 10888  001872  162A               	andwf	___fttol@f1+2,f,c
 10889  001874  5028               	movf	___fttol@f1,w,c
 10890  001876  6E32               	movwf	___fttol@lval,c
 10891  001878  5029               	movf	___fttol@f1+1,w,c
 10892  00187A  6E33               	movwf	___fttol@lval+1,c
 10893  00187C  502A               	movf	___fttol@f1+2,w,c
 10894  00187E  6E34               	movwf	___fttol@lval+2,c
 10895  001880  6A35               	clrf	___fttol@lval+3,c
 10896  001882  0E8E               	movlw	142
 10897  001884  5E36               	subwf	___fttol@exp1,f,c
 10898  001886  AE36               	btfss	___fttol@exp1,7,c
 10899  001888  D016               	goto	i2l3219
 10900  00188A  5036               	movf	___fttol@exp1,w,c
 10901  00188C  0A80               	xorlw	128
 10902  00188E  0F8F               	addlw	143
 10903  001890  B0D8               	btfsc	status,0,c
 10904  001892  D009               	goto	i2l3215
 10905  001894  0E00               	movlw	0
 10906  001896  6E28               	movwf	?___fttol,c
 10907  001898  0E00               	movlw	0
 10908  00189A  6E29               	movwf	?___fttol+1,c
 10909  00189C  0E00               	movlw	0
 10910  00189E  6E2A               	movwf	?___fttol+2,c
 10911  0018A0  0E00               	movlw	0
 10912  0018A2  6E2B               	movwf	?___fttol+3,c
 10913  0018A4  0012               	return	
 10914  0018A6                     i2l3215:
 10915  0018A6  90D8               	bcf	status,0,c
 10916  0018A8  3235               	rrcf	___fttol@lval+3,f,c
 10917  0018AA  3234               	rrcf	___fttol@lval+2,f,c
 10918  0018AC  3233               	rrcf	___fttol@lval+1,f,c
 10919  0018AE  3232               	rrcf	___fttol@lval,f,c
 10920  0018B0  3E36               	incfsz	___fttol@exp1,f,c
 10921  0018B2  D7F9               	goto	i2l3215
 10922  0018B4  D015               	goto	i2l3229
 10923  0018B6                     i2l3219:
 10924  0018B6  0E17               	movlw	23
 10925  0018B8  6436               	cpfsgt	___fttol@exp1,c
 10926  0018BA  D00F               	goto	i2l3227
 10927  0018BC  0E00               	movlw	0
 10928  0018BE  6E28               	movwf	?___fttol,c
 10929  0018C0  0E00               	movlw	0
 10930  0018C2  6E29               	movwf	?___fttol+1,c
 10931  0018C4  0E00               	movlw	0
 10932  0018C6  6E2A               	movwf	?___fttol+2,c
 10933  0018C8  0E00               	movlw	0
 10934  0018CA  6E2B               	movwf	?___fttol+3,c
 10935  0018CC  0012               	return	
 10936  0018CE                     i2l3225:
 10937  0018CE  90D8               	bcf	status,0,c
 10938  0018D0  3632               	rlcf	___fttol@lval,f,c
 10939  0018D2  3633               	rlcf	___fttol@lval+1,f,c
 10940  0018D4  3634               	rlcf	___fttol@lval+2,f,c
 10941  0018D6  3635               	rlcf	___fttol@lval+3,f,c
 10942  0018D8  0636               	decf	___fttol@exp1,f,c
 10943  0018DA                     i2l3227:
 10944  0018DA  5036               	movf	___fttol@exp1,w,c
 10945  0018DC  A4D8               	btfss	status,2,c
 10946  0018DE  D7F7               	goto	i2l3225
 10947  0018E0                     i2l3229:
 10948  0018E0  5031               	movf	___fttol@sign1,w,c
 10949  0018E2  B4D8               	btfsc	status,2,c
 10950  0018E4  D008               	goto	i2l3233
 10951  0018E6  1E35               	comf	___fttol@lval+3,f,c
 10952  0018E8  1E34               	comf	___fttol@lval+2,f,c
 10953  0018EA  1E33               	comf	___fttol@lval+1,f,c
 10954  0018EC  6C32               	negf	___fttol@lval,c
 10955  0018EE  0E00               	movlw	0
 10956  0018F0  2233               	addwfc	___fttol@lval+1,f,c
 10957  0018F2  2234               	addwfc	___fttol@lval+2,f,c
 10958  0018F4  2235               	addwfc	___fttol@lval+3,f,c
 10959  0018F6                     i2l3233:
 10960  0018F6  C032  F028         	movff	___fttol@lval,?___fttol
 10961  0018FA  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10962  0018FE  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10963  001902  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10964  001906  0012               	return	
 10965  001908                     __end_of___fttol:
 10966                           	opt stack 0
 10967                           pclatu	equ	0xFFB
 10968                           pclath	equ	0xFFA
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           intcon2	equ	0xFF1
 10977                           intcon3	equ	0xFF0
 10978                           postinc0	equ	0xFEE
 10979                           fsr0h	equ	0xFEA
 10980                           fsr0l	equ	0xFE9
 10981                           wreg	equ	0xFE8
 10982                           fsr1h	equ	0xFE2
 10983                           fsr1l	equ	0xFE1
 10984                           indf2	equ	0xFDF
 10985                           postinc2	equ	0xFDE
 10986                           postdec2	equ	0xFDD
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8
 10990                           
 10991 ;; *************** function ___ftge *****************
 10992 ;; Defined at:
 10993 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  ff1             3    0[COMRAM] float 
 10996 ;;  ff2             3    3[COMRAM] float 
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;		None
 10999 ;; Return value:  Size  Location     Type
 11000 ;;		None               void
 11001 ;; Registers used:
 11002 ;;		wreg, status,2, status,0
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11008 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;Total ram usage:        9 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		_pow
 11018 ;;		_exp
 11019 ;;		_floor
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           	psect	text53
 11024  002552                     __ptext53:
 11025                           	opt stack 0
 11026  002552                     ___ftge:
 11027                           	opt stack 21
 11028                           
 11029                           ;incstack = 0
 11030  002552  AE03               	btfss	___ftge@ff1+2,7,c
 11031  002554  D016               	goto	i2l3177
 11032  002556  C001  F007         	movff	___ftge@ff1,??___ftge
 11033  00255A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11034  00255E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11035  002562  1E07               	comf	??___ftge,f,c
 11036  002564  1E08               	comf	??___ftge+1,f,c
 11037  002566  1E09               	comf	??___ftge+2,f,c
 11038  002568  2A07               	incf	??___ftge,f,c
 11039  00256A  0E00               	movlw	0
 11040  00256C  2208               	addwfc	??___ftge+1,f,c
 11041  00256E  2209               	addwfc	??___ftge+2,f,c
 11042  002570  0E00               	movlw	0
 11043  002572  2407               	addwf	??___ftge,w,c
 11044  002574  6E01               	movwf	___ftge@ff1,c
 11045  002576  0E00               	movlw	0
 11046  002578  2008               	addwfc	??___ftge+1,w,c
 11047  00257A  6E02               	movwf	___ftge@ff1+1,c
 11048  00257C  0E80               	movlw	128
 11049  00257E  2009               	addwfc	??___ftge+2,w,c
 11050  002580  6E03               	movwf	___ftge@ff1+2,c
 11051  002582                     i2l3177:
 11052  002582  AE06               	btfss	___ftge@ff2+2,7,c
 11053  002584  D016               	goto	i2l3181
 11054  002586  C004  F007         	movff	___ftge@ff2,??___ftge
 11055  00258A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11056  00258E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11057  002592  1E07               	comf	??___ftge,f,c
 11058  002594  1E08               	comf	??___ftge+1,f,c
 11059  002596  1E09               	comf	??___ftge+2,f,c
 11060  002598  2A07               	incf	??___ftge,f,c
 11061  00259A  0E00               	movlw	0
 11062  00259C  2208               	addwfc	??___ftge+1,f,c
 11063  00259E  2209               	addwfc	??___ftge+2,f,c
 11064  0025A0  0E00               	movlw	0
 11065  0025A2  2407               	addwf	??___ftge,w,c
 11066  0025A4  6E04               	movwf	___ftge@ff2,c
 11067  0025A6  0E00               	movlw	0
 11068  0025A8  2008               	addwfc	??___ftge+1,w,c
 11069  0025AA  6E05               	movwf	___ftge@ff2+1,c
 11070  0025AC  0E80               	movlw	128
 11071  0025AE  2009               	addwfc	??___ftge+2,w,c
 11072  0025B0  6E06               	movwf	___ftge@ff2+2,c
 11073  0025B2                     i2l3181:
 11074  0025B2  0E00               	movlw	0
 11075  0025B4  1A01               	xorwf	___ftge@ff1,f,c
 11076  0025B6  0E00               	movlw	0
 11077  0025B8  1A02               	xorwf	___ftge@ff1+1,f,c
 11078  0025BA  0E80               	movlw	128
 11079  0025BC  1A03               	xorwf	___ftge@ff1+2,f,c
 11080  0025BE  0E00               	movlw	0
 11081  0025C0  1A04               	xorwf	___ftge@ff2,f,c
 11082  0025C2  0E00               	movlw	0
 11083  0025C4  1A05               	xorwf	___ftge@ff2+1,f,c
 11084  0025C6  0E80               	movlw	128
 11085  0025C8  1A06               	xorwf	___ftge@ff2+2,f,c
 11086  0025CA  5004               	movf	___ftge@ff2,w,c
 11087  0025CC  5C01               	subwf	___ftge@ff1,w,c
 11088  0025CE  5005               	movf	___ftge@ff2+1,w,c
 11089  0025D0  5802               	subwfb	___ftge@ff1+1,w,c
 11090  0025D2  5006               	movf	___ftge@ff2+2,w,c
 11091  0025D4  5803               	subwfb	___ftge@ff1+2,w,c
 11092  0025D6  B0D8               	btfsc	status,0,c
 11093  0025D8  D002               	goto	i2l3187
 11094  0025DA  90D8               	bcf	status,0,c
 11095  0025DC  0012               	return	
 11096  0025DE                     i2l3187:
 11097  0025DE  80D8               	bsf	status,0,c
 11098  0025E0  0012               	return	
 11099  0025E2                     __end_of___ftge:
 11100                           	opt stack 0
 11101                           pclatu	equ	0xFFB
 11102                           pclath	equ	0xFFA
 11103                           tblptru	equ	0xFF8
 11104                           tblptrh	equ	0xFF7
 11105                           tblptrl	equ	0xFF6
 11106                           tablat	equ	0xFF5
 11107                           prodh	equ	0xFF4
 11108                           prodl	equ	0xFF3
 11109                           intcon	equ	0xFF2
 11110                           intcon2	equ	0xFF1
 11111                           intcon3	equ	0xFF0
 11112                           postinc0	equ	0xFEE
 11113                           fsr0h	equ	0xFEA
 11114                           fsr0l	equ	0xFE9
 11115                           wreg	equ	0xFE8
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function ___altoft *****************
 11126 ;; Defined at:
 11127 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  c               4   54[COMRAM] long 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  sign            1   63[COMRAM] unsigned char 
 11132 ;;  exp             1   62[COMRAM] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  3   54[COMRAM] float 
 11135 ;; Registers used:
 11136 ;;		wreg, status,2, status,0, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;Total ram usage:       10 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    1
 11149 ;; This function calls:
 11150 ;;		___ftpack
 11151 ;; This function is called by:
 11152 ;;		_floor
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           	psect	text54
 11157  0026DE                     __ptext54:
 11158                           	opt stack 0
 11159  0026DE                     ___altoft:
 11160                           	opt stack 20
 11161                           
 11162                           ;incstack = 0
 11163  0026DE  0E00               	movlw	0
 11164  0026E0  6E40               	movwf	___altoft@sign,c
 11165  0026E2  0E8E               	movlw	142
 11166  0026E4  6E3F               	movwf	___altoft@exp,c
 11167  0026E6  AE3A               	btfss	___altoft@c+3,7,c
 11168  0026E8  D011               	goto	i2l3049
 11169  0026EA  1E3A               	comf	___altoft@c+3,f,c
 11170  0026EC  1E39               	comf	___altoft@c+2,f,c
 11171  0026EE  1E38               	comf	___altoft@c+1,f,c
 11172  0026F0  6C37               	negf	___altoft@c,c
 11173  0026F2  0E00               	movlw	0
 11174  0026F4  2238               	addwfc	___altoft@c+1,f,c
 11175  0026F6  2239               	addwfc	___altoft@c+2,f,c
 11176  0026F8  223A               	addwfc	___altoft@c+3,f,c
 11177  0026FA  0E01               	movlw	1
 11178  0026FC  6E40               	movwf	___altoft@sign,c
 11179  0026FE  D006               	goto	i2l3049
 11180  002700                     i2l3047:
 11181  002700  90D8               	bcf	status,0,c
 11182  002702  323A               	rrcf	___altoft@c+3,f,c
 11183  002704  3239               	rrcf	___altoft@c+2,f,c
 11184  002706  3238               	rrcf	___altoft@c+1,f,c
 11185  002708  3237               	rrcf	___altoft@c,f,c
 11186  00270A  2A3F               	incf	___altoft@exp,f,c
 11187  00270C                     i2l3049:
 11188  00270C  0E00               	movlw	0
 11189  00270E  1437               	andwf	___altoft@c,w,c
 11190  002710  6E3B               	movwf	??___altoft& (0+255),c
 11191  002712  0E00               	movlw	0
 11192  002714  1438               	andwf	___altoft@c+1,w,c
 11193  002716  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11194  002718  0E00               	movlw	0
 11195  00271A  1439               	andwf	___altoft@c+2,w,c
 11196  00271C  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11197  00271E  0EFF               	movlw	255
 11198  002720  143A               	andwf	___altoft@c+3,w,c
 11199  002722  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11200  002724  503B               	movf	??___altoft,w,c
 11201  002726  103C               	iorwf	??___altoft+1,w,c
 11202  002728  103D               	iorwf	??___altoft+2,w,c
 11203  00272A  103E               	iorwf	??___altoft+3,w,c
 11204  00272C  A4D8               	btfss	status,2,c
 11205  00272E  D7E8               	goto	i2l3047
 11206  002730  C037  F001         	movff	___altoft@c,___ftpack@arg
 11207  002734  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 11208  002738  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 11209  00273C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 11210  002740  C040  F005         	movff	___altoft@sign,___ftpack@sign
 11211  002744  EC71  F011         	call	___ftpack	;wreg free
 11212  002748  C001  F037         	movff	?___ftpack,?___altoft
 11213  00274C  C002  F038         	movff	?___ftpack+1,?___altoft+1
 11214  002750  C003  F039         	movff	?___ftpack+2,?___altoft+2
 11215  002754  0012               	return	
 11216  002756                     __end_of___altoft:
 11217                           	opt stack 0
 11218                           pclatu	equ	0xFFB
 11219                           pclath	equ	0xFFA
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           intcon2	equ	0xFF1
 11228                           intcon3	equ	0xFF0
 11229                           postinc0	equ	0xFEE
 11230                           fsr0h	equ	0xFEA
 11231                           fsr0l	equ	0xFE9
 11232                           wreg	equ	0xFE8
 11233                           fsr1h	equ	0xFE2
 11234                           fsr1l	equ	0xFE1
 11235                           indf2	equ	0xFDF
 11236                           postinc2	equ	0xFDE
 11237                           postdec2	equ	0xFDD
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _eval_poly *****************
 11243 ;; Defined at:
 11244 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  x               3   39[COMRAM] float 
 11247 ;;  d               2   42[COMRAM] PTR const 
 11248 ;;		 -> log@coeff(27), exp@coeff(30), 
 11249 ;;  n               2   44[COMRAM] int 
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;  res             3   48[COMRAM] int 
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  3   39[COMRAM] int 
 11254 ;; Registers used:
 11255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11261 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;Total ram usage:       12 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    2
 11268 ;; This function calls:
 11269 ;;		___ftadd
 11270 ;;		___ftmul
 11271 ;;		i2___wmul
 11272 ;; This function is called by:
 11273 ;;		_exp
 11274 ;;		_log
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text55
 11279  001E66                     __ptext55:
 11280                           	opt stack 0
 11281  001E66                     _eval_poly:
 11282                           	opt stack 20
 11283                           
 11284                           ;incstack = 0
 11285  001E66  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11286  001E6A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11287  001E6E  0E00               	movlw	0
 11288  001E70  6E04               	movwf	i2___wmul@multiplicand+1,c
 11289  001E72  0E03               	movlw	3
 11290  001E74  6E03               	movwf	i2___wmul@multiplicand,c
 11291  001E76  EC3A  F016         	call	i2___wmul	;wreg free
 11292  001E7A  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11293  001E7E  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11294  001E82  5001               	movf	?i2___wmul,w,c
 11295  001E84  262F               	addwf	??_eval_poly,f,c
 11296  001E86  5002               	movf	?i2___wmul+1,w,c
 11297  001E88  2230               	addwfc	??_eval_poly+1,f,c
 11298  001E8A  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11299  001E8E  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11300  001E92                     	if	0	;tblptru may be non-zero
 11301  001E92                     	endif
 11302  001E92                     	if	0	;tblptru may be non-zero
 11303  001E92                     	endif
 11304  001E92  0009               	tblrd		*+
 11305  001E94  CFF5 F031          	movff	tablat,eval_poly@res
 11306  001E98  0009               	tblrd		*+
 11307  001E9A  CFF5 F032          	movff	tablat,eval_poly@res+1
 11308  001E9E  000A               	tblrd		*-
 11309  001EA0  CFF5 F033          	movff	tablat,eval_poly@res+2
 11310  001EA4  D03E               	goto	i2l3383
 11311  001EA6                     i2l3381:
 11312  001EA6  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11313  001EAA  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11314  001EAE  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11315  001EB2  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11316  001EB6  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11317  001EBA  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11318  001EBE  EC84  F00C         	call	___ftmul	;wreg free
 11319  001EC2  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11320  001EC6  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11321  001ECA  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11322  001ECE  0E00               	movlw	0
 11323  001ED0  6E04               	movwf	i2___wmul@multiplicand+1,c
 11324  001ED2  0E03               	movlw	3
 11325  001ED4  6E03               	movwf	i2___wmul@multiplicand,c
 11326  001ED6  062D               	decf	eval_poly@n,f,c
 11327  001ED8  A0D8               	btfss	status,0,c
 11328  001EDA  062E               	decf	eval_poly@n+1,f,c
 11329  001EDC  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11330  001EE0  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11331  001EE4  EC3A  F016         	call	i2___wmul	;wreg free
 11332  001EE8  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11333  001EEC  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11334  001EF0  5001               	movf	?i2___wmul,w,c
 11335  001EF2  262F               	addwf	??_eval_poly,f,c
 11336  001EF4  5002               	movf	?i2___wmul+1,w,c
 11337  001EF6  2230               	addwfc	??_eval_poly+1,f,c
 11338  001EF8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11339  001EFC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11340  001F00                     	if	0	;tblptru may be non-zero
 11341  001F00                     	endif
 11342  001F00                     	if	0	;tblptru may be non-zero
 11343  001F00                     	endif
 11344  001F00  0009               	tblrd		*+
 11345  001F02  CFF5 F01F          	movff	tablat,___ftadd@f2
 11346  001F06  0009               	tblrd		*+
 11347  001F08  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11348  001F0C  000A               	tblrd		*-
 11349  001F0E  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11350  001F12  EC0C  F008         	call	___ftadd	;wreg free
 11351  001F16  C01C  F031         	movff	?___ftadd,eval_poly@res
 11352  001F1A  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11353  001F1E  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11354  001F22                     i2l3383:
 11355  001F22  502D               	movf	eval_poly@n,w,c
 11356  001F24  102E               	iorwf	eval_poly@n+1,w,c
 11357  001F26  A4D8               	btfss	status,2,c
 11358  001F28  D7BE               	goto	i2l3381
 11359  001F2A  C031  F028         	movff	eval_poly@res,?_eval_poly
 11360  001F2E  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11361  001F32  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11362  001F36  0012               	return		;funcret
 11363  001F38                     __end_of_eval_poly:
 11364                           	opt stack 0
 11365                           pclatu	equ	0xFFB
 11366                           pclath	equ	0xFFA
 11367                           tblptru	equ	0xFF8
 11368                           tblptrh	equ	0xFF7
 11369                           tblptrl	equ	0xFF6
 11370                           tablat	equ	0xFF5
 11371                           prodh	equ	0xFF4
 11372                           prodl	equ	0xFF3
 11373                           intcon	equ	0xFF2
 11374                           intcon2	equ	0xFF1
 11375                           intcon3	equ	0xFF0
 11376                           postinc0	equ	0xFEE
 11377                           fsr0h	equ	0xFEA
 11378                           fsr0l	equ	0xFE9
 11379                           wreg	equ	0xFE8
 11380                           fsr1h	equ	0xFE2
 11381                           fsr1l	equ	0xFE1
 11382                           indf2	equ	0xFDF
 11383                           postinc2	equ	0xFDE
 11384                           postdec2	equ	0xFDD
 11385                           fsr2h	equ	0xFDA
 11386                           fsr2l	equ	0xFD9
 11387                           status	equ	0xFD8
 11388                           
 11389 ;; *************** function i2___wmul *****************
 11390 ;; Defined at:
 11391 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  multiplier      2    0[COMRAM] unsigned int 
 11394 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;  __wmul          2    4[COMRAM] unsigned int 
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  2    0[COMRAM] unsigned int 
 11399 ;; Registers used:
 11400 ;;		wreg, status,2, status,0, prodl, prodh
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11406 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;Total ram usage:        6 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; This function calls:
 11413 ;;		Nothing
 11414 ;; This function is called by:
 11415 ;;		_isr
 11416 ;;		_servo_rotate1
 11417 ;;		_servo_rotate2
 11418 ;;		_eval_poly
 11419 ;;		i2_printf
 11420 ;; This function uses a non-reentrant model
 11421 ;;
 11422                           
 11423                           	psect	text56
 11424  002C74                     __ptext56:
 11425                           	opt stack 0
 11426  002C74                     i2___wmul:
 11427                           	opt stack 24
 11428                           
 11429                           ;incstack = 0
 11430  002C74  5001               	movf	i2___wmul@multiplier,w,c
 11431  002C76  0203               	mulwf	i2___wmul@multiplicand,c
 11432  002C78  CFF3 F005          	movff	prodl,i2___wmul@product
 11433  002C7C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11434  002C80  5001               	movf	i2___wmul@multiplier,w,c
 11435  002C82  0204               	mulwf	i2___wmul@multiplicand+1,c
 11436  002C84  50F3               	movf	prodl,w,c
 11437  002C86  2606               	addwf	i2___wmul@product+1,f,c
 11438  002C88  5002               	movf	i2___wmul@multiplier+1,w,c
 11439  002C8A  0203               	mulwf	i2___wmul@multiplicand,c
 11440  002C8C  50F3               	movf	prodl,w,c
 11441  002C8E  2606               	addwf	i2___wmul@product+1,f,c
 11442  002C90  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11443  002C94  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11444  002C98  0012               	return	
 11445  002C9A                     __end_ofi2___wmul:
 11446                           	opt stack 0
 11447                           pclatu	equ	0xFFB
 11448                           pclath	equ	0xFFA
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           intcon2	equ	0xFF1
 11457                           intcon3	equ	0xFF0
 11458                           postinc0	equ	0xFEE
 11459                           fsr0h	equ	0xFEA
 11460                           fsr0l	equ	0xFE9
 11461                           wreg	equ	0xFE8
 11462                           fsr1h	equ	0xFE2
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function ___ftmul *****************
 11472 ;; Defined at:
 11473 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  f1              3   12[COMRAM] float 
 11476 ;;  f2              3   15[COMRAM] float 
 11477 ;; Auto vars:     Size  Location     Type
 11478 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11479 ;;  sign            1   26[COMRAM] unsigned char 
 11480 ;;  cntr            1   25[COMRAM] unsigned char 
 11481 ;;  exp             1   21[COMRAM] unsigned char 
 11482 ;; Return value:  Size  Location     Type
 11483 ;;                  3   12[COMRAM] float 
 11484 ;; Registers used:
 11485 ;;		wreg, status,2, status,0, cstack
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11491 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;Total ram usage:       15 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    1
 11498 ;; This function calls:
 11499 ;;		___ftpack
 11500 ;; This function is called by:
 11501 ;;		_dec_to_hex
 11502 ;;		_pow
 11503 ;;		_exp
 11504 ;;		_log
 11505 ;;		_eval_poly
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text57
 11510  001908                     __ptext57:
 11511                           	opt stack 0
 11512  001908                     ___ftmul:
 11513                           	opt stack 20
 11514                           
 11515                           ;incstack = 0
 11516  001908  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11517  00190C  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11518  00190E  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11519  001910  340E               	rlcf	___ftmul@f1+1,w,c
 11520  001912  3613               	rlcf	??___ftmul& (0+255),f,c
 11521  001914  E301               	bnc	u257_41
 11522  001916  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11523  001918                     u257_41:
 11524  001918  5013               	movf	??___ftmul,w,c
 11525  00191A  6E16               	movwf	___ftmul@exp,c
 11526  00191C  5016               	movf	___ftmul@exp,w,c
 11527  00191E  A4D8               	btfss	status,2,c
 11528  001920  D007               	goto	i2l3131
 11529  001922  0E00               	movlw	0
 11530  001924  6E0D               	movwf	?___ftmul,c
 11531  001926  0E00               	movlw	0
 11532  001928  6E0E               	movwf	?___ftmul+1,c
 11533  00192A  0E00               	movlw	0
 11534  00192C  6E0F               	movwf	?___ftmul+2,c
 11535  00192E  0012               	return	
 11536  001930                     i2l3131:
 11537  001930  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11538  001934  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11539  001936  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11540  001938  3411               	rlcf	___ftmul@f2+1,w,c
 11541  00193A  3613               	rlcf	??___ftmul& (0+255),f,c
 11542  00193C  E301               	bnc	u259_41
 11543  00193E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11544  001940                     u259_41:
 11545  001940  5013               	movf	??___ftmul,w,c
 11546  001942  6E1B               	movwf	___ftmul@sign,c
 11547  001944  501B               	movf	___ftmul@sign,w,c
 11548  001946  A4D8               	btfss	status,2,c
 11549  001948  D007               	goto	i2l3137
 11550  00194A  0E00               	movlw	0
 11551  00194C  6E0D               	movwf	?___ftmul,c
 11552  00194E  0E00               	movlw	0
 11553  001950  6E0E               	movwf	?___ftmul+1,c
 11554  001952  0E00               	movlw	0
 11555  001954  6E0F               	movwf	?___ftmul+2,c
 11556  001956  0012               	return	
 11557  001958                     i2l3137:
 11558  001958  501B               	movf	___ftmul@sign,w,c
 11559  00195A  0F7B               	addlw	123
 11560  00195C  2616               	addwf	___ftmul@exp,f,c
 11561  00195E  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11562  001962  5012               	movf	___ftmul@f2+2,w,c
 11563  001964  1A1B               	xorwf	___ftmul@sign,f,c
 11564  001966  0E80               	movlw	128
 11565  001968  161B               	andwf	___ftmul@sign,f,c
 11566  00196A  8E0E               	bsf	___ftmul@f1+1,7,c
 11567  00196C  8E11               	bsf	___ftmul@f2+1,7,c
 11568  00196E  0EFF               	movlw	255
 11569  001970  1610               	andwf	___ftmul@f2,f,c
 11570  001972  0EFF               	movlw	255
 11571  001974  1611               	andwf	___ftmul@f2+1,f,c
 11572  001976  0E00               	movlw	0
 11573  001978  1612               	andwf	___ftmul@f2+2,f,c
 11574  00197A  0E00               	movlw	0
 11575  00197C  6E17               	movwf	___ftmul@f3_as_product,c
 11576  00197E  0E00               	movlw	0
 11577  001980  6E18               	movwf	___ftmul@f3_as_product+1,c
 11578  001982  0E00               	movlw	0
 11579  001984  6E19               	movwf	___ftmul@f3_as_product+2,c
 11580  001986  0E07               	movlw	7
 11581  001988  6E1A               	movwf	___ftmul@cntr,c
 11582  00198A                     i2l3151:
 11583  00198A  A00D               	btfss	___ftmul@f1,0,c
 11584  00198C  D006               	goto	i2l3155
 11585  00198E  5010               	movf	___ftmul@f2,w,c
 11586  001990  2617               	addwf	___ftmul@f3_as_product,f,c
 11587  001992  5011               	movf	___ftmul@f2+1,w,c
 11588  001994  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11589  001996  5012               	movf	___ftmul@f2+2,w,c
 11590  001998  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11591  00199A                     i2l3155:
 11592  00199A  90D8               	bcf	status,0,c
 11593  00199C  320F               	rrcf	___ftmul@f1+2,f,c
 11594  00199E  320E               	rrcf	___ftmul@f1+1,f,c
 11595  0019A0  320D               	rrcf	___ftmul@f1,f,c
 11596  0019A2  90D8               	bcf	status,0,c
 11597  0019A4  3610               	rlcf	___ftmul@f2,f,c
 11598  0019A6  3611               	rlcf	___ftmul@f2+1,f,c
 11599  0019A8  3612               	rlcf	___ftmul@f2+2,f,c
 11600  0019AA  2E1A               	decfsz	___ftmul@cntr,f,c
 11601  0019AC  D7EE               	goto	i2l3151
 11602  0019AE  0E09               	movlw	9
 11603  0019B0  6E1A               	movwf	___ftmul@cntr,c
 11604  0019B2                     i2l3161:
 11605  0019B2  A00D               	btfss	___ftmul@f1,0,c
 11606  0019B4  D006               	goto	i2l3165
 11607  0019B6  5010               	movf	___ftmul@f2,w,c
 11608  0019B8  2617               	addwf	___ftmul@f3_as_product,f,c
 11609  0019BA  5011               	movf	___ftmul@f2+1,w,c
 11610  0019BC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11611  0019BE  5012               	movf	___ftmul@f2+2,w,c
 11612  0019C0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11613  0019C2                     i2l3165:
 11614  0019C2  90D8               	bcf	status,0,c
 11615  0019C4  320F               	rrcf	___ftmul@f1+2,f,c
 11616  0019C6  320E               	rrcf	___ftmul@f1+1,f,c
 11617  0019C8  320D               	rrcf	___ftmul@f1,f,c
 11618  0019CA  90D8               	bcf	status,0,c
 11619  0019CC  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11620  0019CE  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11621  0019D0  3217               	rrcf	___ftmul@f3_as_product,f,c
 11622  0019D2  2E1A               	decfsz	___ftmul@cntr,f,c
 11623  0019D4  D7EE               	goto	i2l3161
 11624  0019D6  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11625  0019DA  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11626  0019DE  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11627  0019E2  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11628  0019E6  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11629  0019EA  EC71  F011         	call	___ftpack	;wreg free
 11630  0019EE  C001  F00D         	movff	?___ftpack,?___ftmul
 11631  0019F2  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11632  0019F6  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11633  0019FA  0012               	return	
 11634  0019FC                     __end_of___ftmul:
 11635                           	opt stack 0
 11636                           pclatu	equ	0xFFB
 11637                           pclath	equ	0xFFA
 11638                           tblptru	equ	0xFF8
 11639                           tblptrh	equ	0xFF7
 11640                           tblptrl	equ	0xFF6
 11641                           tablat	equ	0xFF5
 11642                           prodh	equ	0xFF4
 11643                           prodl	equ	0xFF3
 11644                           intcon	equ	0xFF2
 11645                           intcon2	equ	0xFF1
 11646                           intcon3	equ	0xFF0
 11647                           postinc0	equ	0xFEE
 11648                           fsr0h	equ	0xFEA
 11649                           fsr0l	equ	0xFE9
 11650                           wreg	equ	0xFE8
 11651                           fsr1h	equ	0xFE2
 11652                           fsr1l	equ	0xFE1
 11653                           indf2	equ	0xFDF
 11654                           postinc2	equ	0xFDE
 11655                           postdec2	equ	0xFDD
 11656                           fsr2h	equ	0xFDA
 11657                           fsr2l	equ	0xFD9
 11658                           status	equ	0xFD8
 11659                           
 11660 ;; *************** function ___ftsub *****************
 11661 ;; Defined at:
 11662 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  f1              3   39[COMRAM] float 
 11665 ;;  f2              3   42[COMRAM] float 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;		None
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  3   39[COMRAM] float 
 11670 ;; Registers used:
 11671 ;;		wreg, status,2, status,0, cstack
 11672 ;; Tracked objects:
 11673 ;;		On entry : 0/0
 11674 ;;		On exit  : 0/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11677 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;Total ram usage:        6 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    2
 11684 ;; This function calls:
 11685 ;;		___ftadd
 11686 ;; This function is called by:
 11687 ;;		_exp
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           	psect	text58
 11692  002AD4                     __ptext58:
 11693                           	opt stack 0
 11694  002AD4                     ___ftsub:
 11695                           	opt stack 20
 11696                           
 11697                           ;incstack = 0
 11698  002AD4  502B               	movf	___ftsub@f2,w,c
 11699  002AD6  102C               	iorwf	___ftsub@f2+1,w,c
 11700  002AD8  102D               	iorwf	___ftsub@f2+2,w,c
 11701  002ADA  B4D8               	btfsc	status,2,c
 11702  002ADC  D006               	goto	i2l3335
 11703  002ADE  0E00               	movlw	0
 11704  002AE0  1A2B               	xorwf	___ftsub@f2,f,c
 11705  002AE2  0E00               	movlw	0
 11706  002AE4  1A2C               	xorwf	___ftsub@f2+1,f,c
 11707  002AE6  0E80               	movlw	128
 11708  002AE8  1A2D               	xorwf	___ftsub@f2+2,f,c
 11709  002AEA                     i2l3335:
 11710  002AEA  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 11711  002AEE  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 11712  002AF2  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 11713  002AF6  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 11714  002AFA  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 11715  002AFE  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 11716  002B02  EC0C  F008         	call	___ftadd	;wreg free
 11717  002B06  C01C  F028         	movff	?___ftadd,?___ftsub
 11718  002B0A  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 11719  002B0E  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 11720  002B12  0012               	return	
 11721  002B14                     __end_of___ftsub:
 11722                           	opt stack 0
 11723                           pclatu	equ	0xFFB
 11724                           pclath	equ	0xFFA
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon2	equ	0xFF1
 11733                           intcon3	equ	0xFF0
 11734                           postinc0	equ	0xFEE
 11735                           fsr0h	equ	0xFEA
 11736                           fsr0l	equ	0xFE9
 11737                           wreg	equ	0xFE8
 11738                           fsr1h	equ	0xFE2
 11739                           fsr1l	equ	0xFE1
 11740                           indf2	equ	0xFDF
 11741                           postinc2	equ	0xFDE
 11742                           postdec2	equ	0xFDD
 11743                           fsr2h	equ	0xFDA
 11744                           fsr2l	equ	0xFD9
 11745                           status	equ	0xFD8
 11746                           
 11747 ;; *************** function ___ftadd *****************
 11748 ;; Defined at:
 11749 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;  f1              3   27[COMRAM] float 
 11752 ;;  f2              3   30[COMRAM] float 
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;  exp1            1   38[COMRAM] unsigned char 
 11755 ;;  exp2            1   37[COMRAM] unsigned char 
 11756 ;;  sign            1   36[COMRAM] unsigned char 
 11757 ;; Return value:  Size  Location     Type
 11758 ;;                  3   27[COMRAM] float 
 11759 ;; Registers used:
 11760 ;;		wreg, status,2, status,0, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11766 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;Total ram usage:       12 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    1
 11773 ;; This function calls:
 11774 ;;		___ftpack
 11775 ;; This function is called by:
 11776 ;;		_dec_to_hex
 11777 ;;		___ftsub
 11778 ;;		_floor
 11779 ;;		_log
 11780 ;;		_eval_poly
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           	psect	text59
 11785  001018                     __ptext59:
 11786                           	opt stack 0
 11787  001018                     ___ftadd:
 11788                           	opt stack 20
 11789                           
 11790                           ;incstack = 0
 11791  001018  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 11792  00101C  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11793  00101E  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11794  001020  341D               	rlcf	___ftadd@f1+1,w,c
 11795  001022  3622               	rlcf	??___ftadd& (0+255),f,c
 11796  001024  E301               	bnc	u236_41
 11797  001026  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11798  001028                     u236_41:
 11799  001028  5022               	movf	??___ftadd,w,c
 11800  00102A  6E27               	movwf	___ftadd@exp1,c
 11801  00102C  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 11802  001030  6A23               	clrf	(??___ftadd+1)& (0+255),c
 11803  001032  6A24               	clrf	(??___ftadd+2)& (0+255),c
 11804  001034  3420               	rlcf	___ftadd@f2+1,w,c
 11805  001036  3622               	rlcf	??___ftadd& (0+255),f,c
 11806  001038  E301               	bnc	u237_41
 11807  00103A  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 11808  00103C                     u237_41:
 11809  00103C  5022               	movf	??___ftadd,w,c
 11810  00103E  6E26               	movwf	___ftadd@exp2,c
 11811  001040  5027               	movf	___ftadd@exp1,w,c
 11812  001042  B4D8               	btfsc	status,2,c
 11813  001044  D00B               	goto	i2l735
 11814  001046  5026               	movf	___ftadd@exp2,w,c
 11815  001048  5C27               	subwf	___ftadd@exp1,w,c
 11816  00104A  B0D8               	btfsc	status,0,c
 11817  00104C  D00E               	goto	i2l3063
 11818  00104E  5027               	movf	___ftadd@exp1,w,c
 11819  001050  0800               	sublw	0
 11820  001052  2426               	addwf	___ftadd@exp2,w,c
 11821  001054  6E22               	movwf	??___ftadd& (0+255),c
 11822  001056  0E18               	movlw	24
 11823  001058  6422               	cpfsgt	??___ftadd,c
 11824  00105A  D007               	goto	i2l3063
 11825  00105C                     i2l735:
 11826  00105C  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11827  001060  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11828  001064  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11829  001068  0012               	return	
 11830  00106A                     i2l3063:
 11831  00106A  5026               	movf	___ftadd@exp2,w,c
 11832  00106C  B4D8               	btfsc	status,2,c
 11833  00106E  D00B               	goto	i2l739
 11834  001070  5027               	movf	___ftadd@exp1,w,c
 11835  001072  5C26               	subwf	___ftadd@exp2,w,c
 11836  001074  B0D8               	btfsc	status,0,c
 11837  001076  D00E               	goto	i2l3069
 11838  001078  5026               	movf	___ftadd@exp2,w,c
 11839  00107A  0800               	sublw	0
 11840  00107C  2427               	addwf	___ftadd@exp1,w,c
 11841  00107E  6E22               	movwf	??___ftadd& (0+255),c
 11842  001080  0E18               	movlw	24
 11843  001082  6422               	cpfsgt	??___ftadd,c
 11844  001084  D007               	goto	i2l3069
 11845  001086                     i2l739:
 11846  001086  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11847  00108A  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11848  00108E  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11849  001092  0012               	return	
 11850  001094                     i2l3069:
 11851  001094  0E06               	movlw	6
 11852  001096  6E25               	movwf	___ftadd@sign,c
 11853  001098  BE1E               	btfsc	___ftadd@f1+2,7,c
 11854  00109A  8E25               	bsf	___ftadd@sign,7,c
 11855  00109C  BE21               	btfsc	___ftadd@f2+2,7,c
 11856  00109E  8C25               	bsf	___ftadd@sign,6,c
 11857  0010A0  8E1D               	bsf	___ftadd@f1+1,7,c
 11858  0010A2  0EFF               	movlw	255
 11859  0010A4  161C               	andwf	___ftadd@f1,f,c
 11860  0010A6  0EFF               	movlw	255
 11861  0010A8  161D               	andwf	___ftadd@f1+1,f,c
 11862  0010AA  0E00               	movlw	0
 11863  0010AC  161E               	andwf	___ftadd@f1+2,f,c
 11864  0010AE  8E20               	bsf	___ftadd@f2+1,7,c
 11865  0010B0  0EFF               	movlw	255
 11866  0010B2  161F               	andwf	___ftadd@f2,f,c
 11867  0010B4  0EFF               	movlw	255
 11868  0010B6  1620               	andwf	___ftadd@f2+1,f,c
 11869  0010B8  0E00               	movlw	0
 11870  0010BA  1621               	andwf	___ftadd@f2+2,f,c
 11871  0010BC  5026               	movf	___ftadd@exp2,w,c
 11872  0010BE  5C27               	subwf	___ftadd@exp1,w,c
 11873  0010C0  B0D8               	btfsc	status,0,c
 11874  0010C2  D01B               	goto	i2l3095
 11875  0010C4                     i2l3085:
 11876  0010C4  90D8               	bcf	status,0,c
 11877  0010C6  361F               	rlcf	___ftadd@f2,f,c
 11878  0010C8  3620               	rlcf	___ftadd@f2+1,f,c
 11879  0010CA  3621               	rlcf	___ftadd@f2+2,f,c
 11880  0010CC  0626               	decf	___ftadd@exp2,f,c
 11881  0010CE  5027               	movf	___ftadd@exp1,w,c
 11882  0010D0  1826               	xorwf	___ftadd@exp2,w,c
 11883  0010D2  B4D8               	btfsc	status,2,c
 11884  0010D4  D00D               	goto	i2l3093
 11885  0010D6  0625               	decf	___ftadd@sign,f,c
 11886  0010D8  C025  F022         	movff	___ftadd@sign,??___ftadd
 11887  0010DC  0E07               	movlw	7
 11888  0010DE  1622               	andwf	??___ftadd,f,c
 11889  0010E0  B4D8               	btfsc	status,2,c
 11890  0010E2  D006               	goto	i2l3093
 11891  0010E4  D7EF               	goto	i2l3085
 11892  0010E6                     i2l3091:
 11893  0010E6  90D8               	bcf	status,0,c
 11894  0010E8  321E               	rrcf	___ftadd@f1+2,f,c
 11895  0010EA  321D               	rrcf	___ftadd@f1+1,f,c
 11896  0010EC  321C               	rrcf	___ftadd@f1,f,c
 11897  0010EE  2A27               	incf	___ftadd@exp1,f,c
 11898  0010F0                     i2l3093:
 11899  0010F0  5026               	movf	___ftadd@exp2,w,c
 11900  0010F2  1827               	xorwf	___ftadd@exp1,w,c
 11901  0010F4  B4D8               	btfsc	status,2,c
 11902  0010F6  D01F               	goto	i2l750
 11903  0010F8  D7F6               	goto	i2l3091
 11904  0010FA                     i2l3095:
 11905  0010FA  5027               	movf	___ftadd@exp1,w,c
 11906  0010FC  5C26               	subwf	___ftadd@exp2,w,c
 11907  0010FE  B0D8               	btfsc	status,0,c
 11908  001100  D01A               	goto	i2l750
 11909  001102                     i2l3097:
 11910  001102  90D8               	bcf	status,0,c
 11911  001104  361C               	rlcf	___ftadd@f1,f,c
 11912  001106  361D               	rlcf	___ftadd@f1+1,f,c
 11913  001108  361E               	rlcf	___ftadd@f1+2,f,c
 11914  00110A  0627               	decf	___ftadd@exp1,f,c
 11915  00110C  5027               	movf	___ftadd@exp1,w,c
 11916  00110E  1826               	xorwf	___ftadd@exp2,w,c
 11917  001110  B4D8               	btfsc	status,2,c
 11918  001112  D00D               	goto	i2l3105
 11919  001114  0625               	decf	___ftadd@sign,f,c
 11920  001116  C025  F022         	movff	___ftadd@sign,??___ftadd
 11921  00111A  0E07               	movlw	7
 11922  00111C  1622               	andwf	??___ftadd,f,c
 11923  00111E  B4D8               	btfsc	status,2,c
 11924  001120  D006               	goto	i2l3105
 11925  001122  D7EF               	goto	i2l3097
 11926  001124                     i2l3103:
 11927  001124  90D8               	bcf	status,0,c
 11928  001126  3221               	rrcf	___ftadd@f2+2,f,c
 11929  001128  3220               	rrcf	___ftadd@f2+1,f,c
 11930  00112A  321F               	rrcf	___ftadd@f2,f,c
 11931  00112C  2A26               	incf	___ftadd@exp2,f,c
 11932  00112E                     i2l3105:
 11933  00112E  5026               	movf	___ftadd@exp2,w,c
 11934  001130  1827               	xorwf	___ftadd@exp1,w,c
 11935  001132  A4D8               	btfss	status,2,c
 11936  001134  D7F7               	goto	i2l3103
 11937  001136                     i2l750:
 11938  001136  AE25               	btfss	___ftadd@sign,7,c
 11939  001138  D00C               	goto	i2l759
 11940  00113A  0EFF               	movlw	255
 11941  00113C  1A1C               	xorwf	___ftadd@f1,f,c
 11942  00113E  0EFF               	movlw	255
 11943  001140  1A1D               	xorwf	___ftadd@f1+1,f,c
 11944  001142  0EFF               	movlw	255
 11945  001144  1A1E               	xorwf	___ftadd@f1+2,f,c
 11946  001146  0E01               	movlw	1
 11947  001148  261C               	addwf	___ftadd@f1,f,c
 11948  00114A  0E00               	movlw	0
 11949  00114C  221D               	addwfc	___ftadd@f1+1,f,c
 11950  00114E  0E00               	movlw	0
 11951  001150  221E               	addwfc	___ftadd@f1+2,f,c
 11952  001152                     i2l759:
 11953  001152  AC25               	btfss	___ftadd@sign,6,c
 11954  001154  D00C               	goto	i2l3111
 11955  001156  0EFF               	movlw	255
 11956  001158  1A1F               	xorwf	___ftadd@f2,f,c
 11957  00115A  0EFF               	movlw	255
 11958  00115C  1A20               	xorwf	___ftadd@f2+1,f,c
 11959  00115E  0EFF               	movlw	255
 11960  001160  1A21               	xorwf	___ftadd@f2+2,f,c
 11961  001162  0E01               	movlw	1
 11962  001164  261F               	addwf	___ftadd@f2,f,c
 11963  001166  0E00               	movlw	0
 11964  001168  2220               	addwfc	___ftadd@f2+1,f,c
 11965  00116A  0E00               	movlw	0
 11966  00116C  2221               	addwfc	___ftadd@f2+2,f,c
 11967  00116E                     i2l3111:
 11968  00116E  0E00               	movlw	0
 11969  001170  6E25               	movwf	___ftadd@sign,c
 11970  001172  501C               	movf	___ftadd@f1,w,c
 11971  001174  261F               	addwf	___ftadd@f2,f,c
 11972  001176  501D               	movf	___ftadd@f1+1,w,c
 11973  001178  2220               	addwfc	___ftadd@f2+1,f,c
 11974  00117A  501E               	movf	___ftadd@f1+2,w,c
 11975  00117C  2221               	addwfc	___ftadd@f2+2,f,c
 11976  00117E  AE21               	btfss	___ftadd@f2+2,7,c
 11977  001180  D00E               	goto	i2l3121
 11978  001182  0EFF               	movlw	255
 11979  001184  1A1F               	xorwf	___ftadd@f2,f,c
 11980  001186  0EFF               	movlw	255
 11981  001188  1A20               	xorwf	___ftadd@f2+1,f,c
 11982  00118A  0EFF               	movlw	255
 11983  00118C  1A21               	xorwf	___ftadd@f2+2,f,c
 11984  00118E  0E01               	movlw	1
 11985  001190  261F               	addwf	___ftadd@f2,f,c
 11986  001192  0E00               	movlw	0
 11987  001194  2220               	addwfc	___ftadd@f2+1,f,c
 11988  001196  0E00               	movlw	0
 11989  001198  2221               	addwfc	___ftadd@f2+2,f,c
 11990  00119A  0E01               	movlw	1
 11991  00119C  6E25               	movwf	___ftadd@sign,c
 11992  00119E                     i2l3121:
 11993  00119E  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11994  0011A2  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11995  0011A6  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11996  0011AA  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11997  0011AE  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11998  0011B2  EC71  F011         	call	___ftpack	;wreg free
 11999  0011B6  C001  F01C         	movff	?___ftpack,?___ftadd
 12000  0011BA  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 12001  0011BE  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 12002  0011C2  0012               	return	
 12003  0011C4                     __end_of___ftadd:
 12004                           	opt stack 0
 12005                           pclatu	equ	0xFFB
 12006                           pclath	equ	0xFFA
 12007                           tblptru	equ	0xFF8
 12008                           tblptrh	equ	0xFF7
 12009                           tblptrl	equ	0xFF6
 12010                           tablat	equ	0xFF5
 12011                           prodh	equ	0xFF4
 12012                           prodl	equ	0xFF3
 12013                           intcon	equ	0xFF2
 12014                           intcon2	equ	0xFF1
 12015                           intcon3	equ	0xFF0
 12016                           postinc0	equ	0xFEE
 12017                           fsr0h	equ	0xFEA
 12018                           fsr0l	equ	0xFE9
 12019                           wreg	equ	0xFE8
 12020                           fsr1h	equ	0xFE2
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           fsr2h	equ	0xFDA
 12026                           fsr2l	equ	0xFD9
 12027                           status	equ	0xFD8
 12028                           
 12029 ;; *************** function ___ftneg *****************
 12030 ;; Defined at:
 12031 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  f1              3    0[COMRAM] float 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;		None
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  3    0[COMRAM] float 
 12038 ;; Registers used:
 12039 ;;		wreg, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12045 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12049 ;;Total ram usage:        3 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; This function calls:
 12052 ;;		Nothing
 12053 ;; This function is called by:
 12054 ;;		_pow
 12055 ;;		_exp
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           	psect	text60
 12060  002C9A                     __ptext60:
 12061                           	opt stack 0
 12062  002C9A                     ___ftneg:
 12063                           	opt stack 22
 12064                           
 12065                           ;incstack = 0
 12066  002C9A  5001               	movf	___ftneg@f1,w,c
 12067  002C9C  1002               	iorwf	___ftneg@f1+1,w,c
 12068  002C9E  1003               	iorwf	___ftneg@f1+2,w,c
 12069  002CA0  B4D8               	btfsc	status,2,c
 12070  002CA2  D006               	goto	i2l792
 12071  002CA4  0E00               	movlw	0
 12072  002CA6  1A01               	xorwf	___ftneg@f1,f,c
 12073  002CA8  0E00               	movlw	0
 12074  002CAA  1A02               	xorwf	___ftneg@f1+1,f,c
 12075  002CAC  0E80               	movlw	128
 12076  002CAE  1A03               	xorwf	___ftneg@f1+2,f,c
 12077  002CB0                     i2l792:
 12078  002CB0  C001  F001         	movff	___ftneg@f1,?___ftneg
 12079  002CB4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12080  002CB8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12081  002CBC  0012               	return		;funcret
 12082  002CBE                     __end_of___ftneg:
 12083                           	opt stack 0
 12084                           pclatu	equ	0xFFB
 12085                           pclath	equ	0xFFA
 12086                           tblptru	equ	0xFF8
 12087                           tblptrh	equ	0xFF7
 12088                           tblptrl	equ	0xFF6
 12089                           tablat	equ	0xFF5
 12090                           prodh	equ	0xFF4
 12091                           prodl	equ	0xFF3
 12092                           intcon	equ	0xFF2
 12093                           intcon2	equ	0xFF1
 12094                           intcon3	equ	0xFF0
 12095                           postinc0	equ	0xFEE
 12096                           fsr0h	equ	0xFEA
 12097                           fsr0l	equ	0xFE9
 12098                           wreg	equ	0xFE8
 12099                           fsr1h	equ	0xFE2
 12100                           fsr1l	equ	0xFE1
 12101                           indf2	equ	0xFDF
 12102                           postinc2	equ	0xFDE
 12103                           postdec2	equ	0xFDD
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function ___ftdiv *****************
 12109 ;; Defined at:
 12110 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  f1              3    8[COMRAM] float 
 12113 ;;  f2              3   11[COMRAM] float 
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;  f3              3   18[COMRAM] float 
 12116 ;;  sign            1   22[COMRAM] unsigned char 
 12117 ;;  exp             1   21[COMRAM] unsigned char 
 12118 ;;  cntr            1   17[COMRAM] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  3    8[COMRAM] float 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2, status,0, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12128 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;Total ram usage:       15 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    1
 12135 ;; This function calls:
 12136 ;;		___ftpack
 12137 ;; This function is called by:
 12138 ;;		_exp
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           	psect	text61
 12143  001BD0                     __ptext61:
 12144                           	opt stack 0
 12145  001BD0                     ___ftdiv:
 12146                           	opt stack 21
 12147                           
 12148                           ;incstack = 0
 12149  001BD0  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 12150  001BD4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12151  001BD6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12152  001BD8  340A               	rlcf	___ftdiv@f1+1,w,c
 12153  001BDA  360F               	rlcf	??___ftdiv& (0+255),f,c
 12154  001BDC  E301               	bnc	u278_41
 12155  001BDE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12156  001BE0                     u278_41:
 12157  001BE0  500F               	movf	??___ftdiv,w,c
 12158  001BE2  6E16               	movwf	___ftdiv@exp,c
 12159  001BE4  5016               	movf	___ftdiv@exp,w,c
 12160  001BE6  A4D8               	btfss	status,2,c
 12161  001BE8  D007               	goto	i2l3291
 12162  001BEA  0E00               	movlw	0
 12163  001BEC  6E09               	movwf	?___ftdiv,c
 12164  001BEE  0E00               	movlw	0
 12165  001BF0  6E0A               	movwf	?___ftdiv+1,c
 12166  001BF2  0E00               	movlw	0
 12167  001BF4  6E0B               	movwf	?___ftdiv+2,c
 12168  001BF6  0012               	return	
 12169  001BF8                     i2l3291:
 12170  001BF8  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 12171  001BFC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12172  001BFE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12173  001C00  340D               	rlcf	___ftdiv@f2+1,w,c
 12174  001C02  360F               	rlcf	??___ftdiv& (0+255),f,c
 12175  001C04  E301               	bnc	u280_41
 12176  001C06  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12177  001C08                     u280_41:
 12178  001C08  500F               	movf	??___ftdiv,w,c
 12179  001C0A  6E17               	movwf	___ftdiv@sign,c
 12180  001C0C  5017               	movf	___ftdiv@sign,w,c
 12181  001C0E  A4D8               	btfss	status,2,c
 12182  001C10  D007               	goto	i2l3297
 12183  001C12  0E00               	movlw	0
 12184  001C14  6E09               	movwf	?___ftdiv,c
 12185  001C16  0E00               	movlw	0
 12186  001C18  6E0A               	movwf	?___ftdiv+1,c
 12187  001C1A  0E00               	movlw	0
 12188  001C1C  6E0B               	movwf	?___ftdiv+2,c
 12189  001C1E  0012               	return	
 12190  001C20                     i2l3297:
 12191  001C20  0E00               	movlw	0
 12192  001C22  6E13               	movwf	___ftdiv@f3,c
 12193  001C24  0E00               	movlw	0
 12194  001C26  6E14               	movwf	___ftdiv@f3+1,c
 12195  001C28  0E00               	movlw	0
 12196  001C2A  6E15               	movwf	___ftdiv@f3+2,c
 12197  001C2C  5017               	movf	___ftdiv@sign,w,c
 12198  001C2E  0F89               	addlw	137
 12199  001C30  5E16               	subwf	___ftdiv@exp,f,c
 12200  001C32  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 12201  001C36  500E               	movf	___ftdiv@f2+2,w,c
 12202  001C38  1A17               	xorwf	___ftdiv@sign,f,c
 12203  001C3A  0E80               	movlw	128
 12204  001C3C  1617               	andwf	___ftdiv@sign,f,c
 12205  001C3E  8E0A               	bsf	___ftdiv@f1+1,7,c
 12206  001C40  0EFF               	movlw	255
 12207  001C42  1609               	andwf	___ftdiv@f1,f,c
 12208  001C44  0EFF               	movlw	255
 12209  001C46  160A               	andwf	___ftdiv@f1+1,f,c
 12210  001C48  0E00               	movlw	0
 12211  001C4A  160B               	andwf	___ftdiv@f1+2,f,c
 12212  001C4C  8E0D               	bsf	___ftdiv@f2+1,7,c
 12213  001C4E  0EFF               	movlw	255
 12214  001C50  160C               	andwf	___ftdiv@f2,f,c
 12215  001C52  0EFF               	movlw	255
 12216  001C54  160D               	andwf	___ftdiv@f2+1,f,c
 12217  001C56  0E00               	movlw	0
 12218  001C58  160E               	andwf	___ftdiv@f2+2,f,c
 12219  001C5A  0E18               	movlw	24
 12220  001C5C  6E12               	movwf	___ftdiv@cntr,c
 12221  001C5E                     i2l3317:
 12222  001C5E  90D8               	bcf	status,0,c
 12223  001C60  3613               	rlcf	___ftdiv@f3,f,c
 12224  001C62  3614               	rlcf	___ftdiv@f3+1,f,c
 12225  001C64  3615               	rlcf	___ftdiv@f3+2,f,c
 12226  001C66  500C               	movf	___ftdiv@f2,w,c
 12227  001C68  5C09               	subwf	___ftdiv@f1,w,c
 12228  001C6A  500D               	movf	___ftdiv@f2+1,w,c
 12229  001C6C  580A               	subwfb	___ftdiv@f1+1,w,c
 12230  001C6E  500E               	movf	___ftdiv@f2+2,w,c
 12231  001C70  580B               	subwfb	___ftdiv@f1+2,w,c
 12232  001C72  A0D8               	btfss	status,0,c
 12233  001C74  D007               	goto	i2l770
 12234  001C76  500C               	movf	___ftdiv@f2,w,c
 12235  001C78  5E09               	subwf	___ftdiv@f1,f,c
 12236  001C7A  500D               	movf	___ftdiv@f2+1,w,c
 12237  001C7C  5A0A               	subwfb	___ftdiv@f1+1,f,c
 12238  001C7E  500E               	movf	___ftdiv@f2+2,w,c
 12239  001C80  5A0B               	subwfb	___ftdiv@f1+2,f,c
 12240  001C82  8013               	bsf	___ftdiv@f3,0,c
 12241  001C84                     i2l770:
 12242  001C84  90D8               	bcf	status,0,c
 12243  001C86  3609               	rlcf	___ftdiv@f1,f,c
 12244  001C88  360A               	rlcf	___ftdiv@f1+1,f,c
 12245  001C8A  360B               	rlcf	___ftdiv@f1+2,f,c
 12246  001C8C  2E12               	decfsz	___ftdiv@cntr,f,c
 12247  001C8E  D7E7               	goto	i2l3317
 12248  001C90  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 12249  001C94  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12250  001C98  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12251  001C9C  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 12252  001CA0  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 12253  001CA4  EC71  F011         	call	___ftpack	;wreg free
 12254  001CA8  C001  F009         	movff	?___ftpack,?___ftdiv
 12255  001CAC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 12256  001CB0  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 12257  001CB4  0012               	return	
 12258  001CB6                     __end_of___ftdiv:
 12259                           	opt stack 0
 12260                           pclatu	equ	0xFFB
 12261                           pclath	equ	0xFFA
 12262                           tblptru	equ	0xFF8
 12263                           tblptrh	equ	0xFF7
 12264                           tblptrl	equ	0xFF6
 12265                           tablat	equ	0xFF5
 12266                           prodh	equ	0xFF4
 12267                           prodl	equ	0xFF3
 12268                           intcon	equ	0xFF2
 12269                           intcon2	equ	0xFF1
 12270                           intcon3	equ	0xFF0
 12271                           postinc0	equ	0xFEE
 12272                           fsr0h	equ	0xFEA
 12273                           fsr0l	equ	0xFE9
 12274                           wreg	equ	0xFE8
 12275                           fsr1h	equ	0xFE2
 12276                           fsr1l	equ	0xFE1
 12277                           indf2	equ	0xFDF
 12278                           postinc2	equ	0xFDE
 12279                           postdec2	equ	0xFDD
 12280                           fsr2h	equ	0xFDA
 12281                           fsr2l	equ	0xFD9
 12282                           status	equ	0xFD8
 12283                           
 12284 ;; *************** function ___awtoft *****************
 12285 ;; Defined at:
 12286 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12287 ;; Parameters:    Size  Location     Type
 12288 ;;  c               2    8[COMRAM] int 
 12289 ;; Auto vars:     Size  Location     Type
 12290 ;;  sign            1   11[COMRAM] unsigned char 
 12291 ;; Return value:  Size  Location     Type
 12292 ;;                  3    8[COMRAM] float 
 12293 ;; Registers used:
 12294 ;;		wreg, status,2, status,0, cstack
 12295 ;; Tracked objects:
 12296 ;;		On entry : 0/0
 12297 ;;		On exit  : 0/0
 12298 ;;		Unchanged: 0/0
 12299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12300 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12303 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12304 ;;Total ram usage:        4 bytes
 12305 ;; Hardware stack levels used:    1
 12306 ;; Hardware stack levels required when called:    1
 12307 ;; This function calls:
 12308 ;;		___ftpack
 12309 ;; This function is called by:
 12310 ;;		_dec_to_hex
 12311 ;;		_exp
 12312 ;;		_log
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           	psect	text62
 12317  002B52                     __ptext62:
 12318                           	opt stack 0
 12319  002B52                     ___awtoft:
 12320                           	opt stack 21
 12321                           
 12322                           ;incstack = 0
 12323  002B52  0E00               	movlw	0
 12324  002B54  6E0C               	movwf	___awtoft@sign,c
 12325  002B56  AE0A               	btfss	___awtoft@c+1,7,c
 12326  002B58  D006               	goto	i2l3347
 12327  002B5A  6C09               	negf	___awtoft@c,c
 12328  002B5C  1E0A               	comf	___awtoft@c+1,f,c
 12329  002B5E  B0D8               	btfsc	status,0,c
 12330  002B60  2A0A               	incf	___awtoft@c+1,f,c
 12331  002B62  0E01               	movlw	1
 12332  002B64  6E0C               	movwf	___awtoft@sign,c
 12333  002B66                     i2l3347:
 12334  002B66  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12335  002B6A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12336  002B6E  6A03               	clrf	___ftpack@arg+2,c
 12337  002B70  0E8E               	movlw	142
 12338  002B72  6E04               	movwf	___ftpack@exp,c
 12339  002B74  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12340  002B78  EC71  F011         	call	___ftpack	;wreg free
 12341  002B7C  C001  F009         	movff	?___ftpack,?___awtoft
 12342  002B80  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12343  002B84  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12344  002B88  0012               	return	
 12345  002B8A                     __end_of___awtoft:
 12346                           	opt stack 0
 12347                           pclatu	equ	0xFFB
 12348                           pclath	equ	0xFFA
 12349                           tblptru	equ	0xFF8
 12350                           tblptrh	equ	0xFF7
 12351                           tblptrl	equ	0xFF6
 12352                           tablat	equ	0xFF5
 12353                           prodh	equ	0xFF4
 12354                           prodl	equ	0xFF3
 12355                           intcon	equ	0xFF2
 12356                           intcon2	equ	0xFF1
 12357                           intcon3	equ	0xFF0
 12358                           postinc0	equ	0xFEE
 12359                           fsr0h	equ	0xFEA
 12360                           fsr0l	equ	0xFE9
 12361                           wreg	equ	0xFE8
 12362                           fsr1h	equ	0xFE2
 12363                           fsr1l	equ	0xFE1
 12364                           indf2	equ	0xFDF
 12365                           postinc2	equ	0xFDE
 12366                           postdec2	equ	0xFDD
 12367                           fsr2h	equ	0xFDA
 12368                           fsr2l	equ	0xFD9
 12369                           status	equ	0xFD8
 12370                           
 12371 ;; *************** function ___lltoft *****************
 12372 ;; Defined at:
 12373 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;  c               4    8[COMRAM] unsigned long 
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;  exp             1   16[COMRAM] unsigned char 
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  3    8[COMRAM] float 
 12380 ;; Registers used:
 12381 ;;		wreg, status,2, status,0, cstack
 12382 ;; Tracked objects:
 12383 ;;		On entry : 0/0
 12384 ;;		On exit  : 0/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12389 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12390 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12391 ;;Total ram usage:        9 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; Hardware stack levels required when called:    1
 12394 ;; This function calls:
 12395 ;;		___ftpack
 12396 ;; This function is called by:
 12397 ;;		_pow
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           	psect	text63
 12402  002946                     __ptext63:
 12403                           	opt stack 0
 12404  002946                     ___lltoft:
 12405                           	opt stack 22
 12406                           
 12407                           ;incstack = 0
 12408  002946  0E8E               	movlw	142
 12409  002948  6E11               	movwf	___lltoft@exp,c
 12410  00294A  D006               	goto	i2l3473
 12411  00294C                     i2l3471:
 12412  00294C  90D8               	bcf	status,0,c
 12413  00294E  320C               	rrcf	___lltoft@c+3,f,c
 12414  002950  320B               	rrcf	___lltoft@c+2,f,c
 12415  002952  320A               	rrcf	___lltoft@c+1,f,c
 12416  002954  3209               	rrcf	___lltoft@c,f,c
 12417  002956  2A11               	incf	___lltoft@exp,f,c
 12418  002958                     i2l3473:
 12419  002958  0E00               	movlw	0
 12420  00295A  1409               	andwf	___lltoft@c,w,c
 12421  00295C  6E0D               	movwf	??___lltoft& (0+255),c
 12422  00295E  0E00               	movlw	0
 12423  002960  140A               	andwf	___lltoft@c+1,w,c
 12424  002962  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12425  002964  0E00               	movlw	0
 12426  002966  140B               	andwf	___lltoft@c+2,w,c
 12427  002968  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12428  00296A  0EFF               	movlw	255
 12429  00296C  140C               	andwf	___lltoft@c+3,w,c
 12430  00296E  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12431  002970  500D               	movf	??___lltoft,w,c
 12432  002972  100E               	iorwf	??___lltoft+1,w,c
 12433  002974  100F               	iorwf	??___lltoft+2,w,c
 12434  002976  1010               	iorwf	??___lltoft+3,w,c
 12435  002978  A4D8               	btfss	status,2,c
 12436  00297A  D7E8               	goto	i2l3471
 12437  00297C  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12438  002980  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12439  002984  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12440  002988  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12441  00298C  0E00               	movlw	0
 12442  00298E  6E05               	movwf	___ftpack@sign,c
 12443  002990  EC71  F011         	call	___ftpack	;wreg free
 12444  002994  C001  F009         	movff	?___ftpack,?___lltoft
 12445  002998  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12446  00299C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12447  0029A0  0012               	return	
 12448  0029A2                     __end_of___lltoft:
 12449                           	opt stack 0
 12450                           pclatu	equ	0xFFB
 12451                           pclath	equ	0xFFA
 12452                           tblptru	equ	0xFF8
 12453                           tblptrh	equ	0xFF7
 12454                           tblptrl	equ	0xFF6
 12455                           tablat	equ	0xFF5
 12456                           prodh	equ	0xFF4
 12457                           prodl	equ	0xFF3
 12458                           intcon	equ	0xFF2
 12459                           intcon2	equ	0xFF1
 12460                           intcon3	equ	0xFF0
 12461                           postinc0	equ	0xFEE
 12462                           fsr0h	equ	0xFEA
 12463                           fsr0l	equ	0xFE9
 12464                           wreg	equ	0xFE8
 12465                           fsr1h	equ	0xFE2
 12466                           fsr1l	equ	0xFE1
 12467                           indf2	equ	0xFDF
 12468                           postinc2	equ	0xFDE
 12469                           postdec2	equ	0xFDD
 12470                           fsr2h	equ	0xFDA
 12471                           fsr2l	equ	0xFD9
 12472                           status	equ	0xFD8
 12473                           
 12474 ;; *************** function ___ftpack *****************
 12475 ;; Defined at:
 12476 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12477 ;; Parameters:    Size  Location     Type
 12478 ;;  arg             3    0[COMRAM] unsigned um
 12479 ;;  exp             1    3[COMRAM] unsigned char 
 12480 ;;  sign            1    4[COMRAM] unsigned char 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  3    0[COMRAM] float 
 12485 ;; Registers used:
 12486 ;;		wreg, status,2, status,0
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12492 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12494 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;Total ram usage:        8 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		___altoft
 12502 ;;		___awtoft
 12503 ;;		___ftadd
 12504 ;;		___ftdiv
 12505 ;;		___ftmul
 12506 ;;		___lltoft
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           	psect	text64
 12511  0022E2                     __ptext64:
 12512                           	opt stack 0
 12513  0022E2                     ___ftpack:
 12514                           	opt stack 20
 12515                           
 12516                           ;incstack = 0
 12517  0022E2  5004               	movf	___ftpack@exp,w,c
 12518  0022E4  B4D8               	btfsc	status,2,c
 12519  0022E6  D005               	goto	i2l3007
 12520  0022E8  5001               	movf	___ftpack@arg,w,c
 12521  0022EA  1002               	iorwf	___ftpack@arg+1,w,c
 12522  0022EC  1003               	iorwf	___ftpack@arg+2,w,c
 12523  0022EE  A4D8               	btfss	status,2,c
 12524  0022F0  D00C               	goto	i2l3013
 12525  0022F2                     i2l3007:
 12526  0022F2  0E00               	movlw	0
 12527  0022F4  6E01               	movwf	?___ftpack,c
 12528  0022F6  0E00               	movlw	0
 12529  0022F8  6E02               	movwf	?___ftpack+1,c
 12530  0022FA  0E00               	movlw	0
 12531  0022FC  6E03               	movwf	?___ftpack+2,c
 12532  0022FE  0012               	return	
 12533  002300                     i2l3011:
 12534  002300  2A04               	incf	___ftpack@exp,f,c
 12535  002302  90D8               	bcf	status,0,c
 12536  002304  3203               	rrcf	___ftpack@arg+2,f,c
 12537  002306  3202               	rrcf	___ftpack@arg+1,f,c
 12538  002308  3201               	rrcf	___ftpack@arg,f,c
 12539  00230A                     i2l3013:
 12540  00230A  0E00               	movlw	0
 12541  00230C  1401               	andwf	___ftpack@arg,w,c
 12542  00230E  6E06               	movwf	??___ftpack& (0+255),c
 12543  002310  0E00               	movlw	0
 12544  002312  1402               	andwf	___ftpack@arg+1,w,c
 12545  002314  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12546  002316  0EFE               	movlw	254
 12547  002318  1403               	andwf	___ftpack@arg+2,w,c
 12548  00231A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12549  00231C  5006               	movf	??___ftpack,w,c
 12550  00231E  1007               	iorwf	??___ftpack+1,w,c
 12551  002320  1008               	iorwf	??___ftpack+2,w,c
 12552  002322  B4D8               	btfsc	status,2,c
 12553  002324  D00C               	goto	i2l3019
 12554  002326  D7EC               	goto	i2l3011
 12555  002328                     i2l3015:
 12556  002328  2A04               	incf	___ftpack@exp,f,c
 12557  00232A  0E01               	movlw	1
 12558  00232C  2601               	addwf	___ftpack@arg,f,c
 12559  00232E  0E00               	movlw	0
 12560  002330  2202               	addwfc	___ftpack@arg+1,f,c
 12561  002332  0E00               	movlw	0
 12562  002334  2203               	addwfc	___ftpack@arg+2,f,c
 12563  002336  90D8               	bcf	status,0,c
 12564  002338  3203               	rrcf	___ftpack@arg+2,f,c
 12565  00233A  3202               	rrcf	___ftpack@arg+1,f,c
 12566  00233C  3201               	rrcf	___ftpack@arg,f,c
 12567  00233E                     i2l3019:
 12568  00233E  0E00               	movlw	0
 12569  002340  1401               	andwf	___ftpack@arg,w,c
 12570  002342  6E06               	movwf	??___ftpack& (0+255),c
 12571  002344  0E00               	movlw	0
 12572  002346  1402               	andwf	___ftpack@arg+1,w,c
 12573  002348  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12574  00234A  0EFF               	movlw	255
 12575  00234C  1403               	andwf	___ftpack@arg+2,w,c
 12576  00234E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12577  002350  5006               	movf	??___ftpack,w,c
 12578  002352  1007               	iorwf	??___ftpack+1,w,c
 12579  002354  1008               	iorwf	??___ftpack+2,w,c
 12580  002356  B4D8               	btfsc	status,2,c
 12581  002358  D006               	goto	i2l3023
 12582  00235A  D7E6               	goto	i2l3015
 12583  00235C                     i2l3021:
 12584  00235C  0604               	decf	___ftpack@exp,f,c
 12585  00235E  90D8               	bcf	status,0,c
 12586  002360  3601               	rlcf	___ftpack@arg,f,c
 12587  002362  3602               	rlcf	___ftpack@arg+1,f,c
 12588  002364  3603               	rlcf	___ftpack@arg+2,f,c
 12589  002366                     i2l3023:
 12590  002366  BE02               	btfsc	___ftpack@arg+1,7,c
 12591  002368  D003               	goto	i2l712
 12592  00236A  0E02               	movlw	2
 12593  00236C  6004               	cpfslt	___ftpack@exp,c
 12594  00236E  D7F6               	goto	i2l3021
 12595  002370                     i2l712:
 12596  002370  A004               	btfss	___ftpack@exp,0,c
 12597  002372  9E02               	bcf	___ftpack@arg+1,7,c
 12598  002374  90D8               	bcf	status,0,c
 12599  002376  3204               	rrcf	___ftpack@exp,f,c
 12600  002378  5004               	movf	___ftpack@exp,w,c
 12601  00237A  1203               	iorwf	___ftpack@arg+2,f,c
 12602  00237C  5005               	movf	___ftpack@sign,w,c
 12603  00237E  A4D8               	btfss	status,2,c
 12604  002380  8E03               	bsf	___ftpack@arg+2,7,c
 12605  002382  C001  F001         	movff	___ftpack@arg,?___ftpack
 12606  002386  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12607  00238A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12608  00238E  0012               	return	
 12609  002390                     __end_of___ftpack:
 12610                           	opt stack 0
 12611                           pclatu	equ	0xFFB
 12612                           pclath	equ	0xFFA
 12613                           tblptru	equ	0xFF8
 12614                           tblptrh	equ	0xFF7
 12615                           tblptrl	equ	0xFF6
 12616                           tablat	equ	0xFF5
 12617                           prodh	equ	0xFF4
 12618                           prodl	equ	0xFF3
 12619                           intcon	equ	0xFF2
 12620                           intcon2	equ	0xFF1
 12621                           intcon3	equ	0xFF0
 12622                           postinc0	equ	0xFEE
 12623                           fsr0h	equ	0xFEA
 12624                           fsr0l	equ	0xFE9
 12625                           wreg	equ	0xFE8
 12626                           fsr1h	equ	0xFE2
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           fsr2h	equ	0xFDA
 12632                           fsr2l	equ	0xFD9
 12633                           status	equ	0xFD8
 12634                           
 12635 ;; *************** function ___awdiv *****************
 12636 ;; Defined at:
 12637 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;  dividend        2    6[COMRAM] int 
 12640 ;;  divisor         2    8[COMRAM] int 
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;  quotient        2   12[COMRAM] int 
 12643 ;;  sign            1   11[COMRAM] unsigned char 
 12644 ;;  counter         1   10[COMRAM] unsigned char 
 12645 ;; Return value:  Size  Location     Type
 12646 ;;                  2    6[COMRAM] int 
 12647 ;; Registers used:
 12648 ;;		wreg, status,2, status,0
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12655 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12657 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;Total ram usage:        8 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; This function calls:
 12661 ;;		Nothing
 12662 ;; This function is called by:
 12663 ;;		_dec_to_hex
 12664 ;;		_servo_rotate1
 12665 ;;		_servo_rotate2
 12666 ;; This function uses a non-reentrant model
 12667 ;;
 12668                           
 12669                           	psect	text65
 12670  0025E2                     __ptext65:
 12671                           	opt stack 0
 12672  0025E2                     ___awdiv:
 12673                           	opt stack 24
 12674                           
 12675                           ;incstack = 0
 12676  0025E2  0E00               	movlw	0
 12677  0025E4  6E0C               	movwf	___awdiv@sign,c
 12678  0025E6  AE0A               	btfss	___awdiv@divisor+1,7,c
 12679  0025E8  D006               	goto	i2l3819
 12680  0025EA  6C09               	negf	___awdiv@divisor,c
 12681  0025EC  1E0A               	comf	___awdiv@divisor+1,f,c
 12682  0025EE  B0D8               	btfsc	status,0,c
 12683  0025F0  2A0A               	incf	___awdiv@divisor+1,f,c
 12684  0025F2  0E01               	movlw	1
 12685  0025F4  6E0C               	movwf	___awdiv@sign,c
 12686  0025F6                     i2l3819:
 12687  0025F6  AE08               	btfss	___awdiv@dividend+1,7,c
 12688  0025F8  D006               	goto	i2l3825
 12689  0025FA  6C07               	negf	___awdiv@dividend,c
 12690  0025FC  1E08               	comf	___awdiv@dividend+1,f,c
 12691  0025FE  B0D8               	btfsc	status,0,c
 12692  002600  2A08               	incf	___awdiv@dividend+1,f,c
 12693  002602  0E01               	movlw	1
 12694  002604  1A0C               	xorwf	___awdiv@sign,f,c
 12695  002606                     i2l3825:
 12696  002606  0E00               	movlw	0
 12697  002608  6E0E               	movwf	___awdiv@quotient+1,c
 12698  00260A  0E00               	movlw	0
 12699  00260C  6E0D               	movwf	___awdiv@quotient,c
 12700  00260E  5009               	movf	___awdiv@divisor,w,c
 12701  002610  100A               	iorwf	___awdiv@divisor+1,w,c
 12702  002612  B4D8               	btfsc	status,2,c
 12703  002614  D01C               	goto	i2l3847
 12704  002616  0E01               	movlw	1
 12705  002618  6E0B               	movwf	___awdiv@counter,c
 12706  00261A  D004               	goto	i2l3833
 12707  00261C                     i2l3831:
 12708  00261C  90D8               	bcf	status,0,c
 12709  00261E  3609               	rlcf	___awdiv@divisor,f,c
 12710  002620  360A               	rlcf	___awdiv@divisor+1,f,c
 12711  002622  2A0B               	incf	___awdiv@counter,f,c
 12712  002624                     i2l3833:
 12713  002624  AE0A               	btfss	___awdiv@divisor+1,7,c
 12714  002626  D7FA               	goto	i2l3831
 12715  002628                     i2l3835:
 12716  002628  90D8               	bcf	status,0,c
 12717  00262A  360D               	rlcf	___awdiv@quotient,f,c
 12718  00262C  360E               	rlcf	___awdiv@quotient+1,f,c
 12719  00262E  5009               	movf	___awdiv@divisor,w,c
 12720  002630  5C07               	subwf	___awdiv@dividend,w,c
 12721  002632  500A               	movf	___awdiv@divisor+1,w,c
 12722  002634  5808               	subwfb	___awdiv@dividend+1,w,c
 12723  002636  A0D8               	btfss	status,0,c
 12724  002638  D005               	goto	i2l3843
 12725  00263A  5009               	movf	___awdiv@divisor,w,c
 12726  00263C  5E07               	subwf	___awdiv@dividend,f,c
 12727  00263E  500A               	movf	___awdiv@divisor+1,w,c
 12728  002640  5A08               	subwfb	___awdiv@dividend+1,f,c
 12729  002642  800D               	bsf	___awdiv@quotient,0,c
 12730  002644                     i2l3843:
 12731  002644  90D8               	bcf	status,0,c
 12732  002646  320A               	rrcf	___awdiv@divisor+1,f,c
 12733  002648  3209               	rrcf	___awdiv@divisor,f,c
 12734  00264A  2E0B               	decfsz	___awdiv@counter,f,c
 12735  00264C  D7ED               	goto	i2l3835
 12736  00264E                     i2l3847:
 12737  00264E  500C               	movf	___awdiv@sign,w,c
 12738  002650  B4D8               	btfsc	status,2,c
 12739  002652  D004               	goto	i2l3851
 12740  002654  6C0D               	negf	___awdiv@quotient,c
 12741  002656  1E0E               	comf	___awdiv@quotient+1,f,c
 12742  002658  B0D8               	btfsc	status,0,c
 12743  00265A  2A0E               	incf	___awdiv@quotient+1,f,c
 12744  00265C                     i2l3851:
 12745  00265C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 12746  002660  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 12747  002664  0012               	return	
 12748  002666                     __end_of___awdiv:
 12749                           	opt stack 0
 12750                           pclatu	equ	0xFFB
 12751                           pclath	equ	0xFFA
 12752                           tblptru	equ	0xFF8
 12753                           tblptrh	equ	0xFF7
 12754                           tblptrl	equ	0xFF6
 12755                           tablat	equ	0xFF5
 12756                           prodh	equ	0xFF4
 12757                           prodl	equ	0xFF3
 12758                           intcon	equ	0xFF2
 12759                           intcon2	equ	0xFF1
 12760                           intcon3	equ	0xFF0
 12761                           postinc0	equ	0xFEE
 12762                           fsr0h	equ	0xFEA
 12763                           fsr0l	equ	0xFE9
 12764                           wreg	equ	0xFE8
 12765                           fsr1h	equ	0xFE2
 12766                           fsr1l	equ	0xFE1
 12767                           indf2	equ	0xFDF
 12768                           postinc2	equ	0xFDE
 12769                           postdec2	equ	0xFDD
 12770                           fsr2h	equ	0xFDA
 12771                           fsr2l	equ	0xFD9
 12772                           status	equ	0xFD8
 12773                           pclatu	equ	0xFFB
 12774                           pclath	equ	0xFFA
 12775                           tblptru	equ	0xFF8
 12776                           tblptrh	equ	0xFF7
 12777                           tblptrl	equ	0xFF6
 12778                           tablat	equ	0xFF5
 12779                           prodh	equ	0xFF4
 12780                           prodl	equ	0xFF3
 12781                           intcon	equ	0xFF2
 12782                           intcon2	equ	0xFF1
 12783                           intcon3	equ	0xFF0
 12784                           postinc0	equ	0xFEE
 12785                           fsr0h	equ	0xFEA
 12786                           fsr0l	equ	0xFE9
 12787                           wreg	equ	0xFE8
 12788                           fsr1h	equ	0xFE2
 12789                           fsr1l	equ	0xFE1
 12790                           indf2	equ	0xFDF
 12791                           postinc2	equ	0xFDE
 12792                           postdec2	equ	0xFDD
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797                           	psect	rparam
 12798  0000                     pclatu	equ	0xFFB
 12799                           pclath	equ	0xFFA
 12800                           tblptru	equ	0xFF8
 12801                           tblptrh	equ	0xFF7
 12802                           tblptrl	equ	0xFF6
 12803                           tablat	equ	0xFF5
 12804                           prodh	equ	0xFF4
 12805                           prodl	equ	0xFF3
 12806                           intcon	equ	0xFF2
 12807                           intcon2	equ	0xFF1
 12808                           intcon3	equ	0xFF0
 12809                           postinc0	equ	0xFEE
 12810                           fsr0h	equ	0xFEA
 12811                           fsr0l	equ	0xFE9
 12812                           wreg	equ	0xFE8
 12813                           fsr1h	equ	0xFE2
 12814                           fsr1l	equ	0xFE1
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           fsr2h	equ	0xFDA
 12819                           fsr2l	equ	0xFD9
 12820                           status	equ	0xFD8
 12821                           
 12822                           	psect	temp
 12823  00007E                     btemp:
 12824                           	opt stack 0
 12825  00007E                     	ds	1
 12826  0000                     int$flags	set	btemp
 12827                           pclatu	equ	0xFFB
 12828                           pclath	equ	0xFFA
 12829                           tblptru	equ	0xFF8
 12830                           tblptrh	equ	0xFF7
 12831                           tblptrl	equ	0xFF6
 12832                           tablat	equ	0xFF5
 12833                           prodh	equ	0xFF4
 12834                           prodl	equ	0xFF3
 12835                           intcon	equ	0xFF2
 12836                           intcon2	equ	0xFF1
 12837                           intcon3	equ	0xFF0
 12838                           postinc0	equ	0xFEE
 12839                           fsr0h	equ	0xFEA
 12840                           fsr0l	equ	0xFE9
 12841                           wreg	equ	0xFE8
 12842                           fsr1h	equ	0xFE2
 12843                           fsr1l	equ	0xFE1
 12844                           indf2	equ	0xFDF
 12845                           postinc2	equ	0xFDE
 12846                           postdec2	equ	0xFDD
 12847                           fsr2h	equ	0xFDA
 12848                           fsr2l	equ	0xFD9
 12849                           status	equ	0xFD8


Data Sizes:
    Strings     485
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[28]), STR_21(CODE[25]), 
		 -> STR_20(CODE[24]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[18]), 
		 -> STR_8(CODE[18]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[14]), STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_lcdInst
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   39131
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7180
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    1495
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6925
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5685
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6109
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5490
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1064
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0    1096
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1096
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   78855
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0     557
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2381
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     801
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   70199
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58403
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19114
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31682
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8491
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 11 20:18:26 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 2DA8            i2_I2C_Master_Write 2D7E  
               ___altoft@sign 0040                            l34 2D16                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 00D6            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l415 15F8                           l372 2CDE                           l905 287C  
                         l842 2168                           l895 26D4                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0E30                           _log 15FA  
                         _isr 0008                           _pow 1358                  ___awmod@sign 00D9  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l5003 0ABA                          l5005 0AD2  
                        l5007 0ADA                          l5111 11FC                          l5009 0AE6  
                        l5105 11C6                          l3441 2C1C                          l5041 2000  
                        l5201 1B72                          l5123 1278                          l5203 1B78  
                        l5211 1BB2                          l5117 123A                          l5141 1314  
                        l3613 150A                          l5053 2040                          l5061 2062  
                        l5205 1B7E                          l5135 12F4                          l3631 1590  
                        l3623 1558                          l5047 2020                          l5063 208A  
                        l5129 12B6                          l3617 1520                          l5209 1B84  
                        l3627 157A                          l3901 2102                          l5085 1DD0  
                        l5095 1DFA                          l5089 1DDA                          l5193 1B5A  
                        l5195 1B60                          l3909 2156                          l5197 1B66  
                        l3871 23D0                          l3863 23AC                          l4903 0814  
                        l4911 085A                          l5199 1B6C                          l3873 23DC  
                        l4841 2684                          l4825 2C44                          l4905 081A  
                        l3875 23E2                          l3883 2414                          l3867 23BC  
                        l4843 2690                          l4923 089A                          ?_exp 0049  
                        l4853 26C6                          l4845 2696                          l4861 2838  
                        l4941 08F2                          l4909 0822                          ?_log 0034  
                        l3887 2428                          l3879 2406                          l4863 2844  
                        l4943 08F8                          l4927 08B6                          l3897 20EC  
                        l4865 284A                          l4929 08BC                          l3899 20FC  
                        l4971 09AA                          l4883 0750                          ?_isr 0001  
                        l4869 286E                          l4965 0968                          l4957 092E  
                        l4885 0762                          l4983 09E0                          l4959 0946  
                        l4895 079C                          l4879 073C                          l4985 09EC  
                        l4993 0A1A                          l4977 09C4                          l4969 09A0  
                        l4889 076C                          l4995 0A20                          l4997 0A6C  
                        l4989 0A06                          ?_pow 0052            i2_read_colorsensor 19FC  
                        STR_1 FE67                          STR_2 FE4F                          STR_3 FFE7  
                        STR_4 FEC5                          STR_5 FEDC                          STR_6 FFB7  
                        STR_7 FFA6                          STR_8 FF05                          STR_9 FF29  
                        _T0CS 007EAD                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        u2960 2C1A                          _RCEN 007E2B                          u3775 2916  
                        i2l34 2D2A                          u4837 1BC0                          u4847 29FC  
                        u4857 2A38                          u4867 28A6                          u4877 28AE  
                        u4887 28D8                          u4897 28E0                          _TMR0 000FD6  
                        _RSEN 007E29                          _main 1AEA                  ___ftpack@arg 0001  
                        _keys FDB7                  ___ftpack@exp 0004                          _time 009E  
                        fsr0h 000FEA                          fsr1h 000FE2            i2___lwdiv@quotient 0005  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 007E  
                        exp@x 0049                          log@x 0034                          isr@i 0073  
        ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 2D68                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001A  
                ___param_bank 000000                  ___ftmul@sign 001B                   i2_lcdNibble 2A44  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 00C4  
                       ??_pow 0058                 _eskacap_count 00AB              ?_I2C_Master_Init 00E1  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 2666               __end_of___ftadd 11C4                         STR_10 FF17  
                       STR_11 FF3B                         STR_12 FF4D                         STR_20 FE7F  
                       STR_13 FF71                         STR_21 FE36                         STR_14 FF5F  
                       STR_22 FE1A                         STR_23 FFC8                         STR_15 FF83  
                       STR_16 FFF5                         STR_24 FFD8                         STR_25 FF95  
                       STR_17 FEAE                         STR_18 FEF3                         STR_19 FE97  
             __end_of___awmod 2432               __end_of___ftdiv 1CB6               __end_of___ftneg 2CBE  
             __end_of___lldiv 217A               __end_of___ftmul 19FC               ___awdiv@divisor 0009  
             __end_of___ftsub 2B14               __end_of___fttol 1908                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA               __end_of___lwdiv 26DE  
             __end_of___lwmod 2886                         i2l402 21DE                         i2l405 2202  
                       i2l317 06F2                         i2l415 1AE8                         i2l271 0052  
                       i2l408 222C                         i2l280 00EE                         i2l272 0260  
                       i2l273 005C                         i2l282 01F2                         i2l380 246C  
                       i2l269 0264                         i2l286 0482                         i2l383 2496  
                       i2l391 2292                         i2l279 00E4                         i2l712 2370  
                       i2l297 0600                         i2l386 24C0                         i2l394 22B6  
                       i2l298 05FC                         i2l397 22E0                         i2l750 1136  
                       i2l735 105C                         i2l905 2ACA                         i2l770 1C84  
                       i2l739 1086                         i2l932 14C0                         i2l759 1152  
                       i2l927 1390                         i2l792 2CB0               ___awdiv@counter 000B  
                       i2l895 29EA          ??i2_read_colorsensor 0004                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96               ??_servo_rotate0 0003  
             ??_servo_rotate1 0011               ??_servo_rotate2 0011                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 00E3  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 2D5C                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2A44                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 000C               __end_of_dpowers FDD2  
                       _color 0096                         _floor 1CB6                         _etime 00B1  
                       _ldexp 1F38                         _frexp 24C2                         _errno 00A7  
             __end_of_isdigit 2C4E                 ___ftpack@sign 0005                         _putch 2D3C  
                       _stime 007C                         pclath 000FFA                         tablat 000FF5  
               _eskalbl_count 00AF                         pow@yi 005F               __end_of_timeset FDE1  
            __end_ofi2___wmul 2C9A               __end_of_standby 2D90                         status 000FD8  
              __CFG_PBADEN$ON 000000                 i2printf@width 001E                   exp@exponent 004F  
            __end_ofi2_printf 0E30            __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042  
                 ldexp@newexp 0037               __initialization 2B14                   log@exponent 0037  
          __size_ofi2_lcdInst 000C               ??_emergencystop 00EC                ??_bottle_count 00EC  
                __end_of_main 1BD0                  __end_of_keys FDC8                    i2printf@ap 0018  
          __size_ofi2_isdigit 001E                        ??_main 010A                 ___fttol@sign1 0031  
               __activetblptr 000002             ?_I2C_Master_Start 0001             ?_I2C_Master_Write 00D5  
              servo_rotate0@i 0007                servo_rotate0@j 0009                servo_rotate1@i 0015  
              servo_rotate1@j 0017                servo_rotate2@i 0015                servo_rotate2@j 0017  
          ??_I2C_Master_Start 00D5                        _ADCON0 000FC2                        _ADCON1 000FC1  
          ??_I2C_Master_Write 00D7                        ?_floor 0041                        ?_ldexp 0034  
                      ?_frexp 0001              __end_of___altoft 2756                        _T08BIT 007EAE  
            ___awdiv@dividend 0007               i2lcdNibble@data 0002              __end_of___awtoft 2B8A  
                      ?_putch 0001              __end_of___ftpack 2390               i2lcdNibble@temp 0001  
            __end_of___lltoft 29A2                        _INT0IE 007F94                        _INT0IF 007F91  
                      _INT1IE 007F83                        _INT1IF 007F80                        _INT2IE 007F84  
                      _INT2IF 007F81                        i2l1101 1D86                        i2l1090 0EE6  
                      i2l3011 2300                        i2l1091 100A                        i2l3021 235C  
                      i2l3013 230A                        i2l3023 2366                        i2l3015 2328  
                      i2l3007 22F2                        i2l3111 116E                        i2l3103 1124  
                      i2l3121 119E                        i2l3105 112E                        i2l3019 233E  
                      i2l3131 1930                        i2l3063 106A                        i2l3151 198A  
                      i2l3047 2700                        i2l3215 18A6                        i2l3161 19B2  
                      i2l3137 1958                        i2l3049 270C                        i2l3233 18F6  
                      i2l3225 18CE                        i2l3091 10E6                        i2l3155 199A  
                      i2l3227 18DA                        i2l3219 18B6                        i2l3411 1FBA  
                      i2l4211 21BA                        i2l3317 1C5E                        i2l3093 10F0  
                      i2l3085 10C4                        i2l3069 1094                        i2l3165 19C2  
                      i2l3181 25B2                        i2l3229 18E0                        i2l3245 24EA  
                      i2l3095 10FA                        i2l3335 2AEA                        i2l3415 1FC6  
                      i2l4151 278A                        i2l4223 21F6                        i2l3097 1102  
                      i2l3177 2582                        i2l4161 27AE                        i2l4241 2286  
                      i2l4217 21D2                        i2l4313 0BBE                        i2l4321 0BFC  
                      i2l4305 0B60                        i2l3347 2B66                        i2l3291 1BF8  
                      i2l3187 25DE                        i2l3523 1616                        i2l4155 2792  
                      i2l4235 226E                        i2l4403 0D62                        i2l4315 0BC2  
                      i2l3381 1EA6                        i2l3197 1840                        i2l3373 1D0C  
                      i2l3365 1CE4                        i2l4181 1802                        i2l4405 0D68  
                      i2l4413 0DF2                        i2l4333 0C32                        i2l3471 294C  
                      i2l3383 1F22                        i2l3391 1F50                        i2l3551 0E80  
                      i2l4247 22AA                        i2l4407 0DAC                        i2l4415 0E08  
                      i2l4351 0C7C                        i2l4319 0BC8                        i2l4263 1A30  
                      i2l4511 00B0                        i2l3473 2958                        i2l3297 1C20  
                      i2l3369 1CF2                        i2l3545 0E48                        i2l3529 1638  
                      i2l4169 1732                        i2l4193 245A                        i2l4417 0E0E  
                      i2l4353 0C80                        i2l4337 0C4C                        i2l4281 1A9A  
                      i2l4273 1A6E                        i2l4505 009A                        i2l4187 2442  
                      i2l4339 0C50                        i2l4419 0E16                        i2l4267 1A40  
                      i2l3557 0EB8                        i2l4381 0D08                        i2l4293 0B1E  
                      i2l4277 1A8A                        i2l4701 06BE                        i2l4613 047A  
                      i2l4605 042C                        i2l4509 00A6                        i2l3831 261C  
                      i2l3399 1F96                        i2l4199 2484                        i2l4375 0CDC  
                      i2l4367 0CAC                        i2l4295 0B2C                        i2l4711 06DC  
                      i2l4631 04D6                        i2l4615 047E                        i2l3833 2624  
                      i2l3825 2606                        i2l4393 0D34                        i2l4369 0CC2  
                      i2l4289 0B0E                        i2l4625 04B6                        i2l4553 0206  
                      i2l3851 265C                        i2l3843 2644                        i2l3835 2628  
                      i2l3819 25F6                        i2l3579 0FE0                        i2l4395 0D3C  
                      i2l4387 0D1E                        i2l4379 0D00                        i2l4299 0B32  
                      i2l4707 06D4                        i2l4643 0516                        i2l4555 0214  
                      i2l4539 01A8                        i2l3781 139E                        i2l3933 2C6E  
                      i2l4661 0576                        i2l4637 04F6                        i2l4581 0320  
                      i2l3847 264E                        i2l3951 2CF6                        i2l4399 0D50  
                      i2l4655 0556                        i2l4591 038E                        i2l4583 0336  
                      i2l4575 02DE                        i2l4559 0222                        i2l3961 29B8  
                      i2l4649 0536                        i2l4593 03A4                        i2l4577 02F4  
                      i2l4585 034C                        i2l3795 141A                        i2l3787 13B6  
                      i2l3963 29C0                        i2l4667 0596                        i2l4675 05B6  
                      i2l4587 0362                        i2l4595 03BA                        i2l4579 030A  
                      i2l3973 29E0                        i2l3965 29C4                        i2l3981 2AA0  
                      i2l4589 0378                        i2l3799 143C                        i2l3983 2AA8  
                      i2l3985 2AAC                        i2l3989 2AC0                        u236_41 1028  
                      u237_41 103C                        u280_41 1C08                        u257_41 1918  
                      u266_41 1824                        u259_41 1940                        u278_41 1BE0  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 2552                  _yopcap_count 00BD  
                      ___wmul 2BC0            ??_read_colorsensor 00D7                     ??___awdiv 000B  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D8  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00DC  
                   ??___ftmul 0013                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D8                     ??___lwmod 00DF                 dec_to_hex@num 0063  
                      clear_0 2B32                        clear_1 2B3E              ___awdiv@quotient 000D  
             ___awmod@divisor 00D6               ___awmod@counter 00D8                     ??_lcdInst 00D6  
                      _printf 072E                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 0017                     ??_initLCD 00D7                     ??_isdigit 00D4  
           __end_ofi2___lwdiv 29F4                  __mediumconst FDB6             __end_ofi2___lwmod 2AD4  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_standby 00D7             __end_ofi2_lcdInst 2D74                  _yoplbl_count 00C1  
           __end_ofi2_isdigit 2CFE              __end_ofexp@coeff FDFF          __size_of_bottle_time 0036  
            __end_oflog@coeff FE1A                    __accesstop 0080       __end_of__initialization 2B44  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 0009                    ___ftdiv@f2 000C  
                  ___ftdiv@f3 0013                    ___ftneg@f1 0001                    ___awtoft@c 0009  
                  ___ftmul@f1 000D                    ___ftmul@f2 0010                    ___ftsub@f1 0028  
                  ___ftsub@f2 002B                    ___fttol@f1 0028            i2___lwmod@dividend 0008  
              __pcstackCOMRAM 0001                  __pidataBANK0 2DB0                    ___lltoft@c 0009  
               __end_of_floor 1D94                 __end_of_ldexp 1FFE                 __end_of_frexp 2552  
               __end_of_putch 2D4C                   i2printf@idx 0017                   i2printf@val 001B  
          __size_of_date_time 00D2           servo_rotate0@degree 0001           servo_rotate1@degree 000F  
         servo_rotate2@degree 000F                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D   __size_of_I2C_ColorSens_Init 0066  
                     ??_floor 0044                       ??_ldexp 0039                       ??_frexp 0006  
        __end_of_bottle_count 1358                    _dec_to_hex 1718                       ??_putch 00D6  
                  __pbssBANK0 0080            __size_of_eval_poly 00D2             servo_rotate0@duty 0005  
           servo_rotate1@duty 0013             servo_rotate2@duty 0013            __size_of_read_time 0068  
                     ?___ftge 0001                  ?i2_lcdNibble 0001                       ?___wmul 00D4  
                   ?___altoft 0037                     ?___awtoft 0009                     ?___ftpack 0001  
                     ?_printf 00E0            __size_of_operation 00C0                     ?___lltoft 0009  
                  ??i2___wmul 0005                    ??i2_printf 0013                       _SSPCON1 000FC6  
                     _SSPCON2 000FC5                       _SSPSTAT 000FC7             __end_of_date_time 1E66  
                  _eska_count 00A9                       i2_putch 2D5C             _bottle_count_disp 00EE  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 28E6   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 25E2                       ___ftadd 1018  
                     ___awmod 2390                       ___ftdiv 1BD0                       ___ftneg 2C9A  
                     ___lldiv 20BE               __size_of___wmul 0036                       ___ftmul 1908  
                     ___ftsub 2AD4                       ___fttol 1814                       ___lwdiv 2666  
                     ___lwmod 2824                    _curr_state 00C3                    ??___altoft 003B  
                     __pcinit 2B14                    ??___awtoft 000C                    ??___ftpack 0006  
           __end_of_eval_poly 1F38                       __ramtop 1000                       _lcdInst 2D4C  
                  ??___lltoft 000D                       __ptext0 1AEA                       __ptext1 2D88  
                     __ptext2 2CFE                       __ptext3 1FFE                       __ptext4 14CE  
                     __ptext5 29F4                       __ptext6 2CBE                       __ptext7 1D94  
                     __ptext8 2BF6                       __ptext9 2B8A               __size_of_printf 03D6  
              dec_to_hex@temp 006B                       _initLCD 29F4             __end_of_hexpowers FDDA  
               i2_isdigit$821 0002                       _dpowers FDC8                  __size_of_exp 01E8  
                __size_of_log 011E                       _isdigit 2C24                  __size_of_isr 0726  
 __size_ofi2_read_colorsensor 00EE                  __size_of_pow 0176              ___awmod@dividend 00D4  
           __end_of_read_time 27BE      __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E  
    __size_of_I2C_Master_Wait 0014                    date_time@i 00EC      __size_of_I2C_Master_Stop 0008  
       __end_of_servo_rotate0 24C2         __end_of_servo_rotate1 22E2         __end_of_servo_rotate2 222E  
                     _timeset FDDA                       _standby 2D88                   ?_dec_to_hex 0063  
              __pintcode_body 0012          end_of_initialization 2B44                       exp@sign 0051  
               __Lmediumconst FDB6                       int_func 0012           i2___wmul@multiplier 0001  
           __end_of_operation 20BE                _operation_disp 00B5                _operation_time 00B7  
              ??_operationend 00EC     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 00D8                       pow@sign 005E               ___lldiv@counter 00E0  
                     printf@c 0109                       printf@f 00E0              I2C_Master_Init@c 00E1  
            I2C_Master_Read@a 00D5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         __end_of_emergencystop 2CE0                     _PORTAbits 000F80  
       __size_of_bottle_count 0194     __size_of_read_colorsensor 012C     read_colorsensor@color_low 00DB  
           i2_I2C_Master_Read 2C4E             i2_I2C_Master_Wait 2D2A             i2_I2C_Master_Stop 2DA0  
           i2___lwdiv@divisor 0003                     i2___lwdiv 29A2                     i2___lwmod 2A92  
           i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001            ?i2_I2C_Master_Wait 0001  
i2read_colorsensor@color_high 000C            ?i2_I2C_Master_Stop 0001                    _start_time 007A  
                   i2_lcdInst 2D68                   ___ftdiv@exp 0016                   printf@width 0107  
         ??i2_I2C_Master_Read 0002                     i2_isdigit 2CE0           ??i2_I2C_Master_Wait 0001  
         ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 0016                  _bottle_count 11C4  
              __end_of___ftge 25E2                __end_of___wmul 2BF6           __size_of_dec_to_hex 00FC  
        __size_ofi2_lcdNibble 004E            _total_bottle_count 00B9                 i2lcdInst@data 0003  
                  floor@expon 0047              i2___wmul@product 0005                __end_of_printf 0B04  
                i2printf@flag 001D     __end_ofi2_I2C_Master_Read 2C74     __end_ofi2_I2C_Master_Wait 2D3C  
                i2printf@prec 001A           start_initialization 2B14     __end_ofi2_I2C_Master_Stop 2DA8  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 1018  
                 __end_of_log 1718                   __end_of_isr 072E                   __end_of_pow 14CE  
                   i2printf@c 0020                     i2printf@f 000D                 ??_bottle_time 00EC  
       i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001                    ?i2___lwmod 0008  
           __size_ofi2_printf 032C                    frexp@value 0001             ??_I2C_Master_Init 00E5  
           ??_I2C_Master_Read 00D5             ??_I2C_Master_Wait 00D4                    ?i2_lcdInst 0001  
           ??_I2C_Master_Stop 00D5    read_colorsensor@color_high 00DF                    ?i2_isdigit 0001  
                    ??___ftge 0007                      ??___wmul 00D8                   __pdataBANK0 00EE  
            __CFG_LPT1OSC$OFF 000000                      ??_printf 00E8             __size_of___altoft 0078  
                  read_time@i 0004             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C    __end_of_I2C_ColorSens_Init 2824                   __pbssCOMRAM 0076  
        __end_of_operationend 2D16                 __pcstackBANK0 00C4                 __pcstackBANK1 0100  
           i2___lwmod@divisor 000A             i2___lwmod@counter 000C                      ?i2_putch 0001  
         __end_of_bottle_time 2BC0              _I2C_Master_Start 2D98           i2I2C_Master_Write@d 0002  
            _I2C_Master_Write 2D74              _eskacaplbl_count 00AD                     _date_time 1D94  
            ___lwdiv@dividend 00D4             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst FDB6                     _lcdNibble 2886               _yopcaplbl_count 00BF  
                    ?___awdiv 0007                      ?___ftadd 001C                      ?___awmod 00D4  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 00D4  
                    ?___ftmul 000D                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 00D4                      ?___lwmod 00DB                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                      ?_isdigit 0001  
            _read_colorsensor 14CE    __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012  
                   _eval_poly 1E66    __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDD2  
                    ?_standby 0001              ___lwdiv@quotient 00D9                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 2756  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 2DB0    __end_ofi2_I2C_Master_Write 2D88  
                 ??i2_lcdInst 0003                ___wmul@product 00D8                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                   ??i2_isdigit 0001  
                  ?_date_time 0001                      i2u312_40 0EC0                      i2u313_40 0EC2  
                    i2u500_47 2460                      i2u501_47 248A                      i2u350_40 1402  
                    i2u275_40 2512                      i2u268_40 185E                      i2u275_48 2514  
                    i2u292_40 1F70                      i2u268_45 1856                      i2u292_48 1F72  
                    i2u367_40 2C6C                     _operation 1FFE                      i2u288_40 1CFE  
                    i2u490_47 043A                      i2u491_47 06E4                      i2u492_47 2A5C  
                    i2u493_47 2A64                      i2u494_47 2A84                      i2u495_47 2A8C  
                    i2u496_47 21D4                      i2u497_47 21F8                      i2u498_47 2288  
                    i2u499_47 22AC              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
          __end_of_dec_to_hex 1814    __end_ofi2_read_colorsensor 1AEA             ___wmul@multiplier 00D4  
                    i2___wmul 2C74                 lcdNibble@data 00D5                    printf@flag 0106  
               lcdNibble@temp 00D4                    printf@prec 0103                    ?_eval_poly 0028  
                    i2_printf 0B04                   _bottle_time 2B8A           I2C_Master_Read@temp 00D6  
                   _yop_count 00BB                    ?_read_time 0001            dec_to_hex@quotient 0071  
                 _bottlequeue 0080              __size_ofi2_putch 000C                     frexp@eptr 0004  
                    __Hrparam 0000           i2read_colorsensor@i 0010                    ?_operation 0001  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D  
      __size_of_servo_rotate0 0090        __size_of_servo_rotate1 00B4        __size_of_servo_rotate2 00B4  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___awmod 00A2  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024         i2___wmul@multiplicand 0003  
            __size_of___lldiv 00BC                      ___altoft 26DE              __size_of___ftmul 00F4  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0078  
            __size_of___lwmod 0062         __size_of_operationend 0018                      ___awtoft 2B52  
                    ___ftpack 22E2                      ___lltoft 2946                   _isdigit$821 00D5  
          i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010                      _exp$1261 004C  
             _I2C_Master_Init 28E6               _I2C_Master_Read 2BF6              __size_of_initLCD 0050  
             _I2C_Master_Wait 2D16               _I2C_Master_Stop 2D90                      _isr$1352 0074  
            __size_of_isdigit 002A               ___lwdiv@divisor 00D6               ___lwdiv@counter 00D8  
                    __ptext10 11C4                      __ptext11 072E                      __ptext20 28E6  
                    __ptext12 2D3C                      __ptext21 20BE                      __ptext13 2C24  
                    __ptext30 2D5C                      __ptext22 27BE                      __ptext14 2BC0  
                    __ptext31 2CE0                      __ptext23 2D74                      __ptext15 2824  
                    __ptext40 2D7E                      __ptext32 2A92                      __ptext24 2D90  
                    __ptext16 2666                      __ptext41 2DA0                      __ptext33 29A2  
                    __ptext25 2D98                      __ptext17 2D4C                      __ptext50 1CB6  
                    __ptext42 2DA8                      __ptext34 2D68                      __ptext26 2D16  
                    __ptext18 2886                      __ptext51 24C2                      __ptext43 2C4E  
                    __ptext35 2A44                      __ptext19 2390                      __ptext60 2C9A  
                    __ptext52 1814                      __ptext44 2D2A                      __ptext36 217A  
                    __ptext28 19FC                      __ptext61 1BD0                      __ptext53 2552  
                    __ptext45 1718                      __ptext37 222E                      __ptext29 0B04  
                    __ptext62 2B52                      __ptext54 26DE                      __ptext46 1358  
                    __ptext38 2432                      __ptext63 2946                      __ptext55 1E66  
                    __ptext47 15FA                      __ptext39 2756                      __ptext64 22E2  
                    __ptext56 2C74                      __ptext48 0E30                      __ptext65 25E2  
                    __ptext57 1908                      __ptext49 1F38                      __ptext58 2AD4  
                    __ptext59 1018                      _end_time 0078              __size_of_standby 0008  
                    _pow$1260 005B                      _pow$1259 0058        __size_of_emergencystop 0022  
               __size_of_main 00E6                      _nodedata 00B3               _dec_to_hex$1257 0065  
             _dec_to_hex$1258 0068                   ??_date_time 00EC                  _operationend 2CFE  
               ??i2_lcdNibble 0001                   ??_lcdNibble 00D4                      int$flags 007E  
                   printf@idx 0100                     printf@val 0104                      exp@coeff FDE1  
                    log@coeff FDFF              _bottlequeue_head 00A5                     putch@data 00D6  
    __end_of_I2C_Master_Start 2DA0              _bottlequeue_tail 0076      __end_of_I2C_Master_Write 2D7E  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00D6  
               _servo_rotate0 2432                 _servo_rotate1 222E                 _servo_rotate2 217A  
                 ??_read_time 0004                      intlevel2 0000              ___lwmod@dividend 00DB  
            ___lldiv@dividend 00D4            _I2C_ColorSens_Init 27BE      __end_of_read_colorsensor 15FA  
                 ??_operation 00EC           ?_I2C_ColorSens_Init 0001                      printf@ap 0101  
     __end_of_I2C_Master_Init 2946       __end_of_I2C_Master_Read 2C24       __end_of_I2C_Master_Wait 2D2A  
     __end_of_I2C_Master_Stop 2D98                   lcdInst@data 00D6                 _emergencystop 2CBE  
         __end_ofi2_lcdNibble 2A92              ___lldiv@quotient 00DC             I2C_Master_Write@d 00D5  
             ___lwmod@divisor 00DD   i2read_colorsensor@color_low 0008               ___lwmod@counter 00DF  
        ??_I2C_ColorSens_Init 00D7                ?_servo_rotate0 0001                ?_servo_rotate1 000F  
              ?_servo_rotate2 000F  

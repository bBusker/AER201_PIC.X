

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 01:00:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.40
    50                           ; Generated 01/12/2016 GMT
    51                           ; 
    52                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4620 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  000EB8                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _bottle_count_disp
    89  000EB8  FFFF               	dw	65535
    90                           
    91                           	psect	mediumconst
    92  00FEB0                     __pmediumconst:
    93                           	opt stack 0
    94  00FEB0  00                 	db	0
    95  00FEB1                     _keys:
    96                           	opt stack 0
    97  00FEB1  31                 	db	49
    98  00FEB2  32                 	db	50
    99  00FEB3  33                 	db	51
   100  00FEB4  41                 	db	65
   101  00FEB5  34                 	db	52
   102  00FEB6  35                 	db	53
   103  00FEB7  36                 	db	54
   104  00FEB8  42                 	db	66
   105  00FEB9  37                 	db	55
   106  00FEBA  38                 	db	56
   107  00FEBB  39                 	db	57
   108  00FEBC  43                 	db	67
   109  00FEBD  2A                 	db	42
   110  00FEBE  30                 	db	48
   111  00FEBF  23                 	db	35
   112  00FEC0  44                 	db	68
   113  00FEC1  00                 	db	0
   114  00FEC2                     __end_of_keys:
   115                           	opt stack 0
   116  00FEC2                     _dpowers:
   117                           	opt stack 0
   118  00FEC2  0001               	dw	1
   119  00FEC4  000A               	dw	10
   120  00FEC6  0064               	dw	100
   121  00FEC8  03E8               	dw	1000
   122  00FECA  2710               	dw	10000
   123  00FECC                     __end_of_dpowers:
   124                           	opt stack 0
   125  00FECC                     _hexpowers:
   126                           	opt stack 0
   127  00FECC  0001               	dw	1
   128  00FECE  0010               	dw	16
   129  00FED0  0100               	dw	256
   130  00FED2  1000               	dw	4096
   131  00FED4                     __end_of_hexpowers:
   132                           	opt stack 0
   133  00FED4                     _timeset:
   134                           	opt stack 0
   135  00FED4  50                 	db	80
   136  00FED5  35                 	db	53
   137  00FED6  21                 	db	33
   138  00FED7  08                 	db	8
   139  00FED8  05                 	db	5
   140  00FED9  02                 	db	2
   141  00FEDA  17                 	db	23
   142  00FEDB                     __end_of_timeset:
   143                           	opt stack 0
   144  0000                     _ADCON0	set	4034
   145  0000                     _ADCON1	set	4033
   146  0000                     _INTCONbits	set	4082
   147  0000                     _LATA	set	3977
   148  0000                     _LATB	set	3978
   149  0000                     _LATC	set	3979
   150  0000                     _LATD	set	3980
   151  0000                     _LATDbits	set	3980
   152  0000                     _LATE	set	3981
   153  0000                     _PORTB	set	3969
   154  0000                     _SSPADD	set	4040
   155  0000                     _SSPBUF	set	4041
   156  0000                     _SSPCON1	set	4038
   157  0000                     _SSPCON2	set	4037
   158  0000                     _SSPSTAT	set	4039
   159  0000                     _TRISA	set	3986
   160  0000                     _TRISB	set	3987
   161  0000                     _TRISC	set	3988
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISE	set	3990
   164  0000                     _ACKDT	set	32301
   165  0000                     _ACKEN	set	32300
   166  0000                     _INT1IE	set	32643
   167  0000                     _INT1IF	set	32640
   168  0000                     _PEN	set	32298
   169  0000                     _RCEN	set	32299
   170  0000                     _RSEN	set	32297
   171  0000                     _SEN	set	32296
   172  0000                     _TRISC3	set	31907
   173  0000                     _TRISC4	set	31908
   174  0000                     _nRBPU	set	32655
   175  00FEDB                     STR_4:
   176  00FEDB  44                 	db	68	;'D'
   177  00FEDC  61                 	db	97	;'a'
   178  00FEDD  74                 	db	116	;'t'
   179  00FEDE  65                 	db	101	;'e'
   180  00FEDF  3A                 	db	58	;':'
   181  00FEE0  20                 	db	32
   182  00FEE1  25                 	db	37
   183  00FEE2  30                 	db	48	;'0'
   184  00FEE3  32                 	db	50	;'2'
   185  00FEE4  78                 	db	120	;'x'
   186  00FEE5  2F                 	db	47
   187  00FEE6  25                 	db	37
   188  00FEE7  30                 	db	48	;'0'
   189  00FEE8  32                 	db	50	;'2'
   190  00FEE9  78                 	db	120	;'x'
   191  00FEEA  2F                 	db	47
   192  00FEEB  25                 	db	37
   193  00FEEC  30                 	db	48	;'0'
   194  00FEED  32                 	db	50	;'2'
   195  00FEEE  78                 	db	120	;'x'
   196  00FEEF  20                 	db	32
   197  00FEF0  20                 	db	32
   198  00FEF1  00                 	db	0
   199  00FEF2                     STR_5:
   200  00FEF2  54                 	db	84	;'T'
   201  00FEF3  69                 	db	105	;'i'
   202  00FEF4  6D                 	db	109	;'m'
   203  00FEF5  65                 	db	101	;'e'
   204  00FEF6  3A                 	db	58	;':'
   205  00FEF7  20                 	db	32
   206  00FEF8  25                 	db	37
   207  00FEF9  30                 	db	48	;'0'
   208  00FEFA  32                 	db	50	;'2'
   209  00FEFB  78                 	db	120	;'x'
   210  00FEFC  3A                 	db	58	;':'
   211  00FEFD  25                 	db	37
   212  00FEFE  30                 	db	48	;'0'
   213  00FEFF  32                 	db	50	;'2'
   214  00FF00  78                 	db	120	;'x'
   215  00FF01  3A                 	db	58	;':'
   216  00FF02  25                 	db	37
   217  00FF03  30                 	db	48	;'0'
   218  00FF04  32                 	db	50	;'2'
   219  00FF05  78                 	db	120	;'x'
   220  00FF06  20                 	db	32
   221  00FF07  20                 	db	32
   222  00FF08  00                 	db	0
   223  00FF09                     STR_17:
   224  00FF09  30                 	db	48	;'0'
   225  00FF0A  31                 	db	49	;'1'
   226  00FF0B  32                 	db	50	;'2'
   227  00FF0C  33                 	db	51	;'3'
   228  00FF0D  34                 	db	52	;'4'
   229  00FF0E  35                 	db	53	;'5'
   230  00FF0F  36                 	db	54	;'6'
   231  00FF10  37                 	db	55	;'7'
   232  00FF11  38                 	db	56	;'8'
   233  00FF12  39                 	db	57	;'9'
   234  00FF13  61                 	db	97	;'a'
   235  00FF14  62                 	db	98	;'b'
   236  00FF15  63                 	db	99	;'c'
   237  00FF16  64                 	db	100	;'d'
   238  00FF17  65                 	db	101	;'e'
   239  00FF18  66                 	db	102	;'f'
   240  00FF19  00                 	db	0
   241  00FF1A                     STR_2:
   242  00FF1A  73                 	db	115	;'s'
   243  00FF1B  74                 	db	116	;'t'
   244  00FF1C  61                 	db	97	;'a'
   245  00FF1D  6E                 	db	110	;'n'
   246  00FF1E  64                 	db	100	;'d'
   247  00FF1F  62                 	db	98	;'b'
   248  00FF20  79                 	db	121	;'y'
   249  00FF21  20                 	db	32
   250  00FF22  20                 	db	32
   251  00FF23  20                 	db	32
   252  00FF24  20                 	db	32
   253  00FF25  20                 	db	32
   254  00FF26  20                 	db	32
   255  00FF27  20                 	db	32
   256  00FF28  20                 	db	32
   257  00FF29  20                 	db	32
   258  00FF2A  00                 	db	0
   259  00FF2B                     STR_7:
   260  00FF2B  54                 	db	84	;'T'
   261  00FF2C  6F                 	db	111	;'o'
   262  00FF2D  74                 	db	116	;'t'
   263  00FF2E  61                 	db	97	;'a'
   264  00FF2F  6C                 	db	108	;'l'
   265  00FF30  3A                 	db	58	;':'
   266  00FF31  20                 	db	32
   267  00FF32  31                 	db	49	;'1'
   268  00FF33  30                 	db	48	;'0'
   269  00FF34  20                 	db	32
   270  00FF35  20                 	db	32
   271  00FF36  20                 	db	32
   272  00FF37  20                 	db	32
   273  00FF38  20                 	db	32
   274  00FF39  20                 	db	32
   275  00FF3A  20                 	db	32
   276  00FF3B  00                 	db	0
   277  00FF3C                     STR_3:
   278  00FF3C  50                 	db	80	;'P'
   279  00FF3D  4F                 	db	79	;'O'
   280  00FF3E  52                 	db	82	;'R'
   281  00FF3F  54                 	db	84	;'T'
   282  00FF40  42                 	db	66	;'B'
   283  00FF41  3A                 	db	58	;':'
   284  00FF42  20                 	db	32
   285  00FF43  25                 	db	37
   286  00FF44  64                 	db	100	;'d'
   287  00FF45  20                 	db	32
   288  00FF46  20                 	db	32
   289  00FF47  20                 	db	32
   290  00FF48  20                 	db	32
   291  00FF49  20                 	db	32
   292  00FF4A  20                 	db	32
   293  00FF4B  20                 	db	32
   294  00FF4C  00                 	db	0
   295  00FF4D                     STR_6:
   296  00FF4D  42                 	db	66	;'B'
   297  00FF4E  6F                 	db	111	;'o'
   298  00FF4F  74                 	db	116	;'t'
   299  00FF50  74                 	db	116	;'t'
   300  00FF51  6C                 	db	108	;'l'
   301  00FF52  65                 	db	101	;'e'
   302  00FF53  20                 	db	32
   303  00FF54  43                 	db	67	;'C'
   304  00FF55  6F                 	db	111	;'o'
   305  00FF56  75                 	db	117	;'u'
   306  00FF57  6E                 	db	110	;'n'
   307  00FF58  74                 	db	116	;'t'
   308  00FF59  20                 	db	32
   309  00FF5A  20                 	db	32
   310  00FF5B  20                 	db	32
   311  00FF5C  20                 	db	32
   312  00FF5D  00                 	db	0
   313  00FF5E                     STR_11:
   314  00FF5E  59                 	db	89	;'Y'
   315  00FF5F  4F                 	db	79	;'O'
   316  00FF60  50                 	db	80	;'P'
   317  00FF61  2D                 	db	45
   318  00FF62  43                 	db	67	;'C'
   319  00FF63  41                 	db	65	;'A'
   320  00FF64  50                 	db	80	;'P'
   321  00FF65  2D                 	db	45
   322  00FF66  4C                 	db	76	;'L'
   323  00FF67  42                 	db	66	;'B'
   324  00FF68  4C                 	db	76	;'L'
   325  00FF69  3A                 	db	58	;':'
   326  00FF6A  20                 	db	32
   327  00FF6B  30                 	db	48	;'0'
   328  00FF6C  20                 	db	32
   329  00FF6D  20                 	db	32
   330  00FF6E  00                 	db	0
   331  00FF6F                     STR_10:
   332  00FF6F  59                 	db	89	;'Y'
   333  00FF70  4F                 	db	79	;'O'
   334  00FF71  50                 	db	80	;'P'
   335  00FF72  2D                 	db	45
   336  00FF73  43                 	db	67	;'C'
   337  00FF74  41                 	db	65	;'A'
   338  00FF75  50                 	db	80	;'P'
   339  00FF76  2B                 	db	43
   340  00FF77  4C                 	db	76	;'L'
   341  00FF78  42                 	db	66	;'B'
   342  00FF79  4C                 	db	76	;'L'
   343  00FF7A  3A                 	db	58	;':'
   344  00FF7B  20                 	db	32
   345  00FF7C  31                 	db	49	;'1'
   346  00FF7D  20                 	db	32
   347  00FF7E  20                 	db	32
   348  00FF7F  00                 	db	0
   349  00FF80                     STR_9:
   350  00FF80  59                 	db	89	;'Y'
   351  00FF81  4F                 	db	79	;'O'
   352  00FF82  50                 	db	80	;'P'
   353  00FF83  2B                 	db	43
   354  00FF84  43                 	db	67	;'C'
   355  00FF85  41                 	db	65	;'A'
   356  00FF86  50                 	db	80	;'P'
   357  00FF87  2D                 	db	45
   358  00FF88  4C                 	db	76	;'L'
   359  00FF89  42                 	db	66	;'B'
   360  00FF8A  4C                 	db	76	;'L'
   361  00FF8B  3A                 	db	58	;':'
   362  00FF8C  20                 	db	32
   363  00FF8D  31                 	db	49	;'1'
   364  00FF8E  20                 	db	32
   365  00FF8F  20                 	db	32
   366  00FF90  00                 	db	0
   367  00FF91                     STR_8:
   368  00FF91  59                 	db	89	;'Y'
   369  00FF92  4F                 	db	79	;'O'
   370  00FF93  50                 	db	80	;'P'
   371  00FF94  2B                 	db	43
   372  00FF95  43                 	db	67	;'C'
   373  00FF96  41                 	db	65	;'A'
   374  00FF97  50                 	db	80	;'P'
   375  00FF98  2B                 	db	43
   376  00FF99  4C                 	db	76	;'L'
   377  00FF9A  42                 	db	66	;'B'
   378  00FF9B  4C                 	db	76	;'L'
   379  00FF9C  3A                 	db	58	;':'
   380  00FF9D  20                 	db	32
   381  00FF9E  33                 	db	51	;'3'
   382  00FF9F  20                 	db	32
   383  00FFA0  20                 	db	32
   384  00FFA1  00                 	db	0
   385  00FFA2                     STR_12:
   386  00FFA2  45                 	db	69	;'E'
   387  00FFA3  53                 	db	83	;'S'
   388  00FFA4  4B                 	db	75	;'K'
   389  00FFA5  41                 	db	65	;'A'
   390  00FFA6  2B                 	db	43
   391  00FFA7  43                 	db	67	;'C'
   392  00FFA8  41                 	db	65	;'A'
   393  00FFA9  50                 	db	80	;'P'
   394  00FFAA  2B                 	db	43
   395  00FFAB  4C                 	db	76	;'L'
   396  00FFAC  42                 	db	66	;'B'
   397  00FFAD  4C                 	db	76	;'L'
   398  00FFAE  3A                 	db	58	;':'
   399  00FFAF  20                 	db	32
   400  00FFB0  31                 	db	49	;'1'
   401  00FFB1  20                 	db	32
   402  00FFB2  00                 	db	0
   403  00FFB3                     STR_14:
   404  00FFB3  45                 	db	69	;'E'
   405  00FFB4  53                 	db	83	;'S'
   406  00FFB5  4B                 	db	75	;'K'
   407  00FFB6  41                 	db	65	;'A'
   408  00FFB7  2D                 	db	45
   409  00FFB8  43                 	db	67	;'C'
   410  00FFB9  41                 	db	65	;'A'
   411  00FFBA  50                 	db	80	;'P'
   412  00FFBB  2B                 	db	43
   413  00FFBC  4C                 	db	76	;'L'
   414  00FFBD  42                 	db	66	;'B'
   415  00FFBE  4C                 	db	76	;'L'
   416  00FFBF  3A                 	db	58	;':'
   417  00FFC0  20                 	db	32
   418  00FFC1  31                 	db	49	;'1'
   419  00FFC2  20                 	db	32
   420  00FFC3  00                 	db	0
   421  00FFC4                     STR_13:
   422  00FFC4  45                 	db	69	;'E'
   423  00FFC5  53                 	db	83	;'S'
   424  00FFC6  4B                 	db	75	;'K'
   425  00FFC7  41                 	db	65	;'A'
   426  00FFC8  2B                 	db	43
   427  00FFC9  43                 	db	67	;'C'
   428  00FFCA  41                 	db	65	;'A'
   429  00FFCB  50                 	db	80	;'P'
   430  00FFCC  2D                 	db	45
   431  00FFCD  4C                 	db	76	;'L'
   432  00FFCE  42                 	db	66	;'B'
   433  00FFCF  4C                 	db	76	;'L'
   434  00FFD0  3A                 	db	58	;':'
   435  00FFD1  20                 	db	32
   436  00FFD2  31                 	db	49	;'1'
   437  00FFD3  20                 	db	32
   438  00FFD4  00                 	db	0
   439  00FFD5                     STR_15:
   440  00FFD5  45                 	db	69	;'E'
   441  00FFD6  53                 	db	83	;'S'
   442  00FFD7  4B                 	db	75	;'K'
   443  00FFD8  41                 	db	65	;'A'
   444  00FFD9  2D                 	db	45
   445  00FFDA  43                 	db	67	;'C'
   446  00FFDB  41                 	db	65	;'A'
   447  00FFDC  50                 	db	80	;'P'
   448  00FFDD  2D                 	db	45
   449  00FFDE  4C                 	db	76	;'L'
   450  00FFDF  42                 	db	66	;'B'
   451  00FFE0  4C                 	db	76	;'L'
   452  00FFE1  3A                 	db	58	;':'
   453  00FFE2  20                 	db	32
   454  00FFE3  32                 	db	50	;'2'
   455  00FFE4  20                 	db	32
   456  00FFE5  00                 	db	0
   457  00FFE6                     STR_1:
   458  00FFE6  62                 	db	98	;'b'
   459  00FFE7  61                 	db	97	;'a'
   460  00FFE8  64                 	db	100	;'d'
   461  00FFE9  20                 	db	32
   462  00FFEA  69                 	db	105	;'i'
   463  00FFEB  6E                 	db	110	;'n'
   464  00FFEC  74                 	db	116	;'t'
   465  00FFED  65                 	db	101	;'e'
   466  00FFEE  72                 	db	114	;'r'
   467  00FFEF  72                 	db	114	;'r'
   468  00FFF0  75                 	db	117	;'u'
   469  00FFF1  70                 	db	112	;'p'
   470  00FFF2  74                 	db	116	;'t'
   471  00FFF3  00                 	db	0
   472  00FFF4                     STR_16:
   473  00FFF4  45                 	db	69	;'E'
   474  00FFF5  52                 	db	82	;'R'
   475  00FFF6  52                 	db	82	;'R'
   476  00FFF7  4F                 	db	79	;'O'
   477  00FFF8  52                 	db	82	;'R'
   478  00FFF9  3A                 	db	58	;':'
   479  00FFFA  20                 	db	32
   480  00FFFB  25                 	db	37
   481  00FFFC  64                 	db	100	;'d'
   482  00FFFD  00                 	db	0
   483                           
   484                           ; #config settings
   485  00FFFE  00                 	db	0	; dummy byte at the end
   486  0000                     
   487                           	psect	cinit
   488  000D50                     __pcinit:
   489                           	opt stack 0
   490  000D50                     start_initialization:
   491                           	opt stack 0
   492  000D50                     __initialization:
   493                           	opt stack 0
   494                           
   495                           ; Initialize objects allocated to COMRAM (2 bytes)
   496                           ; load TBLPTR registers with __pidataCOMRAM
   497  000D50  0EB8               	movlw	low __pidataCOMRAM
   498  000D52  6EF6               	movwf	tblptrl,c
   499  000D54  0E0E               	movlw	high __pidataCOMRAM
   500  000D56  6EF7               	movwf	tblptrh,c
   501  000D58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   502  000D5A  6EF8               	movwf	tblptru,c
   503  000D5C  0009               	tblrd		*+	;fetch initializer
   504  000D5E  CFF5 F050          	movff	tablat,__pdataCOMRAM
   505  000D62  0009               	tblrd		*+	;fetch initializer
   506  000D64  CFF5 F051          	movff	tablat,__pdataCOMRAM+1
   507                           
   508                           ; Clear objects allocated to COMRAM (8 bytes)
   509  000D68  EE00  F048         	lfsr	0,__pbssCOMRAM
   510  000D6C  0E08               	movlw	8
   511  000D6E                     clear_0:
   512  000D6E  6AEE               	clrf	postinc0,c
   513  000D70  06E8               	decf	wreg,f,c
   514  000D72  E1FD               	bnz	clear_0
   515  000D74                     end_of_initialization:
   516                           	opt stack 0
   517  000D74                     __end_of__initialization:
   518                           	opt stack 0
   519  000D74  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   520  000D76  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   521  000D78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   522  000D7A  6EF8               	movwf	tblptru,c
   523  000D7C  0100               	movlb	0
   524  000D7E  EFA8  F004         	goto	_main	;jump to C main() function
   525                           tblptru	equ	0xFF8
   526                           tblptrh	equ	0xFF7
   527                           tblptrl	equ	0xFF6
   528                           tablat	equ	0xFF5
   529                           postinc0	equ	0xFEE
   530                           wreg	equ	0xFE8
   531                           
   532                           	psect	bssCOMRAM
   533  000048                     __pbssCOMRAM:
   534                           	opt stack 0
   535  000048                     _time:
   536                           	opt stack 0
   537  000048                     	ds	7
   538  00004F                     _curr_state:
   539                           	opt stack 0
   540  00004F                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           
   548                           	psect	dataCOMRAM
   549  000050                     __pdataCOMRAM:
   550                           	opt stack 0
   551  000050                     _bottle_count_disp:
   552                           	opt stack 0
   553  000050                     	ds	2
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           
   561                           	psect	cstackBANK0
   562  000080                     __pcstackBANK0:
   563                           	opt stack 0
   564  000080                     printf@idx:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x0
   568  000080                     	ds	1
   569  000081                     printf@ap:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x1
   573  000081                     	ds	2
   574  000083                     printf@prec:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x3
   578  000083                     	ds	1
   579  000084                     printf@val:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x4
   583  000084                     	ds	2
   584  000086                     printf@flag:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x6
   588  000086                     	ds	1
   589  000087                     printf@width:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x7
   593  000087                     	ds	2
   594  000089                     printf@c:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x9
   598  000089                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           
   606                           	psect	cstackCOMRAM
   607  000001                     __pcstackCOMRAM:
   608                           	opt stack 0
   609  000001                     ??i2_isdigit:
   610  000001                     ?i2___wmul:
   611                           	opt stack 0
   612  000001                     ?i2___lwdiv:
   613                           	opt stack 0
   614  000001                     i2lcdNibble@temp:
   615                           	opt stack 0
   616  000001                     i2___wmul@multiplier:
   617                           	opt stack 0
   618  000001                     i2___lwdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  000001                     	ds	1
   623  000002                     i2lcdNibble@data:
   624                           	opt stack 0
   625  000002                     i2_isdigit$524:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x1
   629  000002                     	ds	1
   630  000003                     i2lcdInst@data:
   631                           	opt stack 0
   632  000003                     i2putch@data:
   633                           	opt stack 0
   634  000003                     i2isdigit@c:
   635                           	opt stack 0
   636  000003                     i2___wmul@multiplicand:
   637                           	opt stack 0
   638  000003                     i2___lwdiv@divisor:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x2
   642  000003                     	ds	2
   643  000005                     i2___wmul@product:
   644                           	opt stack 0
   645  000005                     i2___lwdiv@quotient:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x4
   649  000005                     	ds	2
   650  000007                     i2___lwdiv@counter:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x6
   654  000007                     	ds	1
   655  000008                     ?i2___lwmod:
   656                           	opt stack 0
   657  000008                     i2___lwmod@dividend:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x7
   661  000008                     	ds	2
   662  00000A                     i2___lwmod@divisor:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x9
   666  00000A                     	ds	2
   667  00000C                     i2___lwmod@counter:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0xB
   671  00000C                     	ds	1
   672  00000D                     ?i2_printf:
   673                           	opt stack 0
   674  00000D                     i2printf@f:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0xC
   678  00000D                     	ds	2
   679  00000F                     ??i2_printf:
   680                           
   681                           ; 1 bytes @ 0xE
   682  00000F                     	ds	4
   683  000013                     i2printf@idx:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x12
   687  000013                     	ds	1
   688  000014                     i2printf@ap:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x13
   692  000014                     	ds	2
   693  000016                     i2printf@prec:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x15
   697  000016                     	ds	1
   698  000017                     i2printf@val:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x16
   702  000017                     	ds	2
   703  000019                     i2printf@flag:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x18
   707  000019                     	ds	1
   708  00001A                     i2printf@width:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x19
   712  00001A                     	ds	2
   713  00001C                     i2printf@c:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x1B
   717  00001C                     	ds	1
   718  00001D                     ??_isr:
   719                           
   720                           ; 1 bytes @ 0x1C
   721  00001D                     	ds	15
   722  00002C                     isr@i:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x2B
   726  00002C                     	ds	1
   727  00002D                     ??_isdigit:
   728  00002D                     ??_I2C_Master_Wait:
   729  00002D                     ?___wmul:
   730                           	opt stack 0
   731  00002D                     ?___awmod:
   732                           	opt stack 0
   733  00002D                     ?___lwdiv:
   734                           	opt stack 0
   735  00002D                     ?___lldiv:
   736                           	opt stack 0
   737  00002D                     lcdNibble@temp:
   738                           	opt stack 0
   739  00002D                     ___wmul@multiplier:
   740                           	opt stack 0
   741  00002D                     ___awmod@dividend:
   742                           	opt stack 0
   743  00002D                     ___lwdiv@dividend:
   744                           	opt stack 0
   745  00002D                     ___lldiv@dividend:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x2C
   749  00002D                     	ds	1
   750  00002E                     I2C_Master_Read@a:
   751                           	opt stack 0
   752  00002E                     lcdNibble@data:
   753                           	opt stack 0
   754  00002E                     _isdigit$524:
   755                           	opt stack 0
   756  00002E                     I2C_Master_Write@d:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x2D
   760  00002E                     	ds	1
   761  00002F                     I2C_Master_Read@temp:
   762                           	opt stack 0
   763  00002F                     lcdInst@data:
   764                           	opt stack 0
   765  00002F                     putch@data:
   766                           	opt stack 0
   767  00002F                     isdigit@c:
   768                           	opt stack 0
   769  00002F                     ___wmul@multiplicand:
   770                           	opt stack 0
   771  00002F                     ___awmod@divisor:
   772                           	opt stack 0
   773  00002F                     ___lwdiv@divisor:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x2E
   777  00002F                     	ds	1
   778  000030                     ??_initLCD:
   779                           
   780                           ; 1 bytes @ 0x2F
   781  000030                     	ds	1
   782  000031                     ___awmod@counter:
   783                           	opt stack 0
   784  000031                     ___lwdiv@counter:
   785                           	opt stack 0
   786  000031                     ___wmul@product:
   787                           	opt stack 0
   788  000031                     ___lldiv@divisor:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x30
   792  000031                     	ds	1
   793  000032                     ___awmod@sign:
   794                           	opt stack 0
   795  000032                     ___lwdiv@quotient:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x31
   799  000032                     	ds	2
   800  000034                     ?___lwmod:
   801                           	opt stack 0
   802  000034                     ___lwmod@dividend:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x33
   806  000034                     	ds	1
   807  000035                     ___lldiv@quotient:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x34
   811  000035                     	ds	1
   812  000036                     ___lwmod@divisor:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x35
   816  000036                     	ds	2
   817  000038                     ___lwmod@counter:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x37
   821  000038                     	ds	1
   822  000039                     ?_printf:
   823                           	opt stack 0
   824  000039                     ___lldiv@counter:
   825                           	opt stack 0
   826  000039                     printf@f:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x38
   830  000039                     	ds	1
   831  00003A                     I2C_Master_Init@c:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x39
   835  00003A                     	ds	4
   836  00003E                     ??_I2C_Master_Init:
   837                           
   838                           ; 1 bytes @ 0x3D
   839  00003E                     	ds	3
   840  000041                     ??_printf:
   841                           
   842                           ; 1 bytes @ 0x40
   843  000041                     	ds	4
   844  000045                     date_time@i:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x44
   848  000045                     	ds	1
   849  000046                     ??_main:
   850                           
   851                           ; 1 bytes @ 0x45
   852  000046                     	ds	2
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           
   860 ;;
   861 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   862 ;;
   863 ;; *************** function _main *****************
   864 ;; Defined at:
   865 ;;		line 42 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;Total ram usage:        2 bytes
   884 ;; Hardware stack levels required when called:    8
   885 ;; This function calls:
   886 ;;		_I2C_Master_Init
   887 ;;		_bottle_count
   888 ;;		_bottle_time
   889 ;;		_date_time
   890 ;;		_initLCD
   891 ;;		_operation
   892 ;;		_standby
   893 ;; This function is called by:
   894 ;;		Startup code after reset
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text0
   899  000950                     __ptext0:
   900                           	opt stack 0
   901  000950                     _main:
   902                           	opt stack 23
   903                           
   904                           ;main.c: 46: TRISA = 0xFF;
   905                           
   906                           ;incstack = 0
   907  000950  6892               	setf	3986,c	;volatile
   908                           
   909                           ;main.c: 47: TRISB = 0xFF;
   910  000952  6893               	setf	3987,c	;volatile
   911                           
   912                           ;main.c: 48: TRISC = 0x00;
   913  000954  0E00               	movlw	0
   914  000956  6E94               	movwf	3988,c	;volatile
   915                           
   916                           ;main.c: 49: TRISD = 0x00;
   917  000958  0E00               	movlw	0
   918  00095A  6E95               	movwf	3989,c	;volatile
   919                           
   920                           ;main.c: 50: TRISE = 0x00;
   921  00095C  0E00               	movlw	0
   922  00095E  6E96               	movwf	3990,c	;volatile
   923                           
   924                           ;main.c: 52: LATA = 0x00;
   925  000960  0E00               	movlw	0
   926  000962  6E89               	movwf	3977,c	;volatile
   927                           
   928                           ;main.c: 53: LATB = 0x00;
   929  000964  0E00               	movlw	0
   930  000966  6E8A               	movwf	3978,c	;volatile
   931                           
   932                           ;main.c: 54: LATC = 0x00;
   933  000968  0E00               	movlw	0
   934  00096A  6E8B               	movwf	3979,c	;volatile
   935                           
   936                           ;main.c: 55: LATD = 0x00;
   937  00096C  0E00               	movlw	0
   938  00096E  6E8C               	movwf	3980,c	;volatile
   939                           
   940                           ;main.c: 56: LATE = 0x00;
   941  000970  0E00               	movlw	0
   942  000972  6E8D               	movwf	3981,c	;volatile
   943                           
   944                           ;main.c: 58: ADCON0 = 0x00;
   945  000974  0E00               	movlw	0
   946  000976  6EC2               	movwf	4034,c	;volatile
   947                           
   948                           ;main.c: 59: ADCON1 = 0xFF;
   949  000978  68C1               	setf	4033,c	;volatile
   950                           
   951                           ;main.c: 61: INT1IE = 1;
   952  00097A  86F0               	bsf	intcon3,3,c	;volatile
   953                           
   954                           ;main.c: 63: nRBPU = 0;
   955  00097C  9EF1               	bcf	intcon2,7,c	;volatile
   956                           
   957                           ;main.c: 65: initLCD();
   958  00097E  EC40  F006         	call	_initLCD	;wreg free
   959                           
   960                           ;main.c: 66: I2C_Master_Init(10000);
   961  000982  0E10               	movlw	16
   962  000984  6E3A               	movwf	I2C_Master_Init@c,c
   963  000986  0E27               	movlw	39
   964  000988  6E3B               	movwf	I2C_Master_Init@c+1,c
   965  00098A  0E00               	movlw	0
   966  00098C  6E3C               	movwf	I2C_Master_Init@c+2,c
   967  00098E  0E00               	movlw	0
   968  000990  6E3D               	movwf	I2C_Master_Init@c+3,c
   969  000992  EC73  F005         	call	_I2C_Master_Init	;wreg free
   970                           
   971                           ;main.c: 70: (INTCONbits.GIE = 1);
   972  000996  8EF2               	bsf	intcon,7,c	;volatile
   973                           
   974                           ;main.c: 72: curr_state = STANDBY;
   975  000998  0E00               	movlw	0
   976  00099A  6E4F               	movwf	_curr_state,c
   977                           
   978                           ;main.c: 75: switch(curr_state){
   979                           
   980                           ;main.c: 74: while(1){
   981  00099C  D00F               	goto	l2572
   982  00099E                     l2560:
   983                           
   984                           ;main.c: 77: standby();
   985  00099E  ECC1  F006         	call	_standby	;wreg free
   986                           
   987                           ;main.c: 78: break;
   988  0009A2  D01C               	goto	l2574
   989  0009A4                     l2562:
   990                           
   991                           ;main.c: 80: operation();
   992  0009A4  EC5D  F007         	call	_operation	;wreg free
   993                           
   994                           ;main.c: 81: break;
   995  0009A8  D019               	goto	l2574
   996  0009AA                     l2564:
   997                           
   998                           ;main.c: 83: date_time();
   999  0009AA  EC51  F004         	call	_date_time	;wreg free
  1000                           
  1001                           ;main.c: 84: break;
  1002  0009AE  D016               	goto	l2574
  1003  0009B0                     l2566:
  1004                           
  1005                           ;main.c: 86: bottle_count();
  1006  0009B0  EC53  F003         	call	_bottle_count	;wreg free
  1007                           
  1008                           ;main.c: 87: break;
  1009  0009B4  D013               	goto	l2574
  1010  0009B6                     l2568:
  1011                           
  1012                           ;main.c: 89: bottle_time();
  1013  0009B6  EC5E  F007         	call	_bottle_time	;wreg free
  1014                           
  1015                           ;main.c: 91: }
  1016                           
  1017                           ;main.c: 90: break;
  1018  0009BA  D010               	goto	l2574
  1019  0009BC                     l2572:
  1020  0009BC  504F               	movf	_curr_state,w,c
  1021                           
  1022                           ; Switch size 1, requested type "space"
  1023                           ; Number of cases is 5, Range of values is 0 to 4
  1024                           ; switch strategies available:
  1025                           ; Name         Instructions Cycles
  1026                           ; simple_byte           16     9 (average)
  1027                           ;	Chosen strategy is simple_byte
  1028  0009BE  0A00               	xorlw	0	; case 0
  1029  0009C0  B4D8               	btfsc	status,2,c
  1030  0009C2  D7ED               	goto	l2560
  1031  0009C4  0A01               	xorlw	1	; case 1
  1032  0009C6  B4D8               	btfsc	status,2,c
  1033  0009C8  D7ED               	goto	l2562
  1034  0009CA  0A03               	xorlw	3	; case 2
  1035  0009CC  B4D8               	btfsc	status,2,c
  1036  0009CE  D7ED               	goto	l2564
  1037  0009D0  0A01               	xorlw	1	; case 3
  1038  0009D2  B4D8               	btfsc	status,2,c
  1039  0009D4  D7ED               	goto	l2566
  1040  0009D6  0A07               	xorlw	7	; case 4
  1041  0009D8  B4D8               	btfsc	status,2,c
  1042  0009DA  D7ED               	goto	l2568
  1043  0009DC                     l2574:
  1044                           
  1045                           ;main.c: 92: _delay((unsigned long)((200)*(10000000/4000.0)));
  1046  0009DC  0E03               	movlw	3
  1047  0009DE  6E47               	movwf	(??_main+1)& (0+255),c
  1048  0009E0  0E8A               	movlw	138
  1049  0009E2  6E46               	movwf	??_main& (0+255),c
  1050  0009E4  0E56               	movlw	86
  1051  0009E6                     u1997:
  1052  0009E6  2EE8               	decfsz	wreg,f,c
  1053  0009E8  D7FE               	bra	u1997
  1054  0009EA  2E46               	decfsz	??_main& (0+255),f,c
  1055  0009EC  D7FC               	bra	u1997
  1056  0009EE  2E47               	decfsz	(??_main+1)& (0+255),f,c
  1057  0009F0  D7FA               	bra	u1997
  1058  0009F2  D7E4               	goto	l2572
  1059  0009F4                     __end_of_main:
  1060                           	opt stack 0
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           intcon	equ	0xFF2
  1066                           intcon2	equ	0xFF1
  1067                           intcon3	equ	0xFF0
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           status	equ	0xFD8
  1071                           
  1072 ;; *************** function _standby *****************
  1073 ;; Defined at:
  1074 ;;		line 127 in file "main.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    7
  1095 ;; This function calls:
  1096 ;;		_lcdInst
  1097 ;;		_printf
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text1
  1104  000D82                     __ptext1:
  1105                           	opt stack 0
  1106  000D82                     _standby:
  1107                           	opt stack 23
  1108                           
  1109                           ;main.c: 128: lcdInst(0b10000000);
  1110                           
  1111                           ;incstack = 0
  1112  000D82  0E80               	movlw	128
  1113  000D84  EC3D  F007         	call	_lcdInst
  1114                           
  1115                           ;main.c: 129: printf("standby         ");
  1116  000D88  0E1A               	movlw	low STR_2
  1117  000D8A  6E39               	movwf	printf@f,c
  1118  000D8C  0EFF               	movlw	high STR_2
  1119  000D8E  6E3A               	movwf	printf@f+1,c
  1120  000D90  EC09  F000         	call	_printf	;wreg free
  1121                           
  1122                           ;main.c: 130: lcdInst(0b11000000);
  1123  000D94  0EC0               	movlw	192
  1124  000D96  EC3D  F007         	call	_lcdInst
  1125                           
  1126                           ;main.c: 131: printf("PORTB: %d       ", PORTB);
  1127  000D9A  0E3C               	movlw	low STR_3
  1128  000D9C  6E39               	movwf	printf@f,c
  1129  000D9E  0EFF               	movlw	high STR_3
  1130  000DA0  6E3A               	movwf	printf@f+1,c
  1131  000DA2  CF81 F03B          	movff	3969,?_printf+2	;volatile
  1132  000DA6  6A3C               	clrf	?_printf+3,c
  1133  000DA8  EC09  F000         	call	_printf	;wreg free
  1134  000DAC  0012               	return	
  1135  000DAE                     __end_of_standby:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           intcon	equ	0xFF2
  1142                           intcon2	equ	0xFF1
  1143                           intcon3	equ	0xFF0
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _operation *****************
  1149 ;; Defined at:
  1150 ;;		line 216 in file "main.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		None
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1168 ;;Total ram usage:        0 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    4
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text2
  1179  000EBA                     __ptext2:
  1180                           	opt stack 0
  1181  000EBA                     _operation:
  1182                           	opt stack 26
  1183                           
  1184                           ;main.c: 217: return;
  1185                           
  1186                           ;incstack = 0
  1187  000EBA  0012               	return		;funcret
  1188  000EBC                     __end_of_operation:
  1189                           	opt stack 0
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           intcon	equ	0xFF2
  1195                           intcon2	equ	0xFF1
  1196                           intcon3	equ	0xFF0
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function _initLCD *****************
  1202 ;; Defined at:
  1203 ;;		line 14 in file "lcd.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        1 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    6
  1224 ;; This function calls:
  1225 ;;		_lcdInst
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text3
  1232  000C80                     __ptext3:
  1233                           	opt stack 0
  1234  000C80                     _initLCD:
  1235                           	opt stack 24
  1236                           
  1237                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  1238                           
  1239                           ;incstack = 0
  1240  000C80  0E31               	movlw	49
  1241  000C82  6E30               	movwf	??_initLCD& (0+255),c
  1242  000C84  0EB2               	movlw	178
  1243  000C86                     u2007:
  1244  000C86  2EE8               	decfsz	wreg,f,c
  1245  000C88  D7FE               	bra	u2007
  1246  000C8A  2E30               	decfsz	??_initLCD& (0+255),f,c
  1247  000C8C  D7FC               	bra	u2007
  1248  000C8E  D000               	nop2	
  1249                           
  1250                           ;lcd.c: 16: lcdInst(0b00110011);
  1251  000C90  0E33               	movlw	51
  1252  000C92  EC3D  F007         	call	_lcdInst
  1253                           
  1254                           ;lcd.c: 17: lcdInst(0b00110011);
  1255  000C96  0E33               	movlw	51
  1256  000C98  EC3D  F007         	call	_lcdInst
  1257                           
  1258                           ;lcd.c: 18: lcdInst(0b00110010);
  1259  000C9C  0E32               	movlw	50
  1260  000C9E  EC3D  F007         	call	_lcdInst
  1261                           
  1262                           ;lcd.c: 19: lcdInst(0b00101000);
  1263  000CA2  0E28               	movlw	40
  1264  000CA4  EC3D  F007         	call	_lcdInst
  1265                           
  1266                           ;lcd.c: 20: lcdInst(0b00001111);
  1267  000CA8  0E0F               	movlw	15
  1268  000CAA  EC3D  F007         	call	_lcdInst
  1269                           
  1270                           ;lcd.c: 21: lcdInst(0b00000110);
  1271  000CAE  0E06               	movlw	6
  1272  000CB0  EC3D  F007         	call	_lcdInst
  1273                           
  1274                           ;lcd.c: 22: lcdInst(0b00000001);
  1275  000CB4  0E01               	movlw	1
  1276  000CB6  EC3D  F007         	call	_lcdInst
  1277                           
  1278                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  1279  000CBA  0E31               	movlw	49
  1280  000CBC  6E30               	movwf	??_initLCD& (0+255),c
  1281  000CBE  0EB2               	movlw	178
  1282  000CC0                     u2017:
  1283  000CC0  2EE8               	decfsz	wreg,f,c
  1284  000CC2  D7FE               	bra	u2017
  1285  000CC4  2E30               	decfsz	??_initLCD& (0+255),f,c
  1286  000CC6  D7FC               	bra	u2017
  1287  000CC8  D000               	nop2	
  1288  000CCA  0012               	return		;funcret
  1289  000CCC                     __end_of_initLCD:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           intcon	equ	0xFF2
  1296                           intcon2	equ	0xFF1
  1297                           intcon3	equ	0xFF0
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _date_time *****************
  1303 ;; Defined at:
  1304 ;;		line 145 in file "main.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  i               1   68[COMRAM] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        1 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    7
  1325 ;; This function calls:
  1326 ;;		_I2C_Master_Read
  1327 ;;		_I2C_Master_Start
  1328 ;;		_I2C_Master_Stop
  1329 ;;		_I2C_Master_Write
  1330 ;;		_lcdInst
  1331 ;;		_printf
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text4
  1338  0008A2                     __ptext4:
  1339                           	opt stack 0
  1340  0008A2                     _date_time:
  1341                           	opt stack 23
  1342                           
  1343                           ;main.c: 147: I2C_Master_Start();
  1344                           
  1345                           ;incstack = 0
  1346  0008A2  EC58  F007         	call	_I2C_Master_Start	;wreg free
  1347                           
  1348                           ;main.c: 148: I2C_Master_Write(0b11010000);
  1349  0008A6  0E00               	movlw	0
  1350  0008A8  6E2F               	movwf	I2C_Master_Write@d+1,c
  1351  0008AA  0ED0               	movlw	208
  1352  0008AC  6E2E               	movwf	I2C_Master_Write@d,c
  1353  0008AE  EC4F  F007         	call	_I2C_Master_Write	;wreg free
  1354                           
  1355                           ;main.c: 149: I2C_Master_Write(0x00);
  1356  0008B2  0E00               	movlw	0
  1357  0008B4  6E2F               	movwf	I2C_Master_Write@d+1,c
  1358  0008B6  0E00               	movlw	0
  1359  0008B8  6E2E               	movwf	I2C_Master_Write@d,c
  1360  0008BA  EC4F  F007         	call	_I2C_Master_Write	;wreg free
  1361                           
  1362                           ;main.c: 150: I2C_Master_Stop();
  1363  0008BE  EC54  F007         	call	_I2C_Master_Stop	;wreg free
  1364                           
  1365                           ;main.c: 153: I2C_Master_Start();
  1366  0008C2  EC58  F007         	call	_I2C_Master_Start	;wreg free
  1367                           
  1368                           ;main.c: 154: I2C_Master_Write(0b11010001);
  1369  0008C6  0E00               	movlw	0
  1370  0008C8  6E2F               	movwf	I2C_Master_Write@d+1,c
  1371  0008CA  0ED1               	movlw	209
  1372  0008CC  6E2E               	movwf	I2C_Master_Write@d,c
  1373  0008CE  EC4F  F007         	call	_I2C_Master_Write	;wreg free
  1374                           
  1375                           ;main.c: 155: for(unsigned char i=0;i<0x06;i++){
  1376  0008D2  0E00               	movlw	0
  1377  0008D4  6E45               	movwf	date_time@i,c
  1378  0008D6                     l2482:
  1379  0008D6  0E05               	movlw	5
  1380  0008D8  6445               	cpfsgt	date_time@i,c
  1381  0008DA  D001               	goto	l2486
  1382  0008DC  D00E               	goto	l2492
  1383  0008DE                     l2486:
  1384                           
  1385                           ;main.c: 156: time[i] = I2C_Master_Read(1);
  1386  0008DE  5045               	movf	date_time@i,w,c
  1387  0008E0  0D01               	mullw	1
  1388  0008E2  0E48               	movlw	low _time
  1389  0008E4  24F3               	addwf	prodl,w,c
  1390  0008E6  6ED9               	movwf	fsr2l,c
  1391  0008E8  0E00               	movlw	high _time
  1392  0008EA  20F4               	addwfc	prodh,w,c
  1393  0008EC  6EDA               	movwf	fsr2h,c
  1394  0008EE  0E01               	movlw	1
  1395  0008F0  ECD7  F006         	call	_I2C_Master_Read
  1396  0008F4  6EDF               	movwf	indf2,c
  1397  0008F6  2A45               	incf	date_time@i,f,c
  1398  0008F8  D7EE               	goto	l2482
  1399  0008FA                     l2492:
  1400                           
  1401                           ;main.c: 157: }
  1402                           ;main.c: 158: time[6] = I2C_Master_Read(0);
  1403  0008FA  0E00               	movlw	0
  1404  0008FC  ECD7  F006         	call	_I2C_Master_Read
  1405  000900  6E4E               	movwf	_time+6,c
  1406                           
  1407                           ;main.c: 159: I2C_Master_Stop();
  1408  000902  EC54  F007         	call	_I2C_Master_Stop	;wreg free
  1409                           
  1410                           ;main.c: 162: lcdInst(0b10000000);
  1411  000906  0E80               	movlw	128
  1412  000908  EC3D  F007         	call	_lcdInst
  1413                           
  1414                           ;main.c: 163: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  1415  00090C  0EDB               	movlw	low STR_4
  1416  00090E  6E39               	movwf	printf@f,c
  1417  000910  0EFE               	movlw	high STR_4
  1418  000912  6E3A               	movwf	printf@f+1,c
  1419  000914  C04D  F03B         	movff	_time+5,?_printf+2
  1420  000918  6A3C               	clrf	?_printf+3,c
  1421  00091A  C04C  F03D         	movff	_time+4,?_printf+4
  1422  00091E  6A3E               	clrf	?_printf+5,c
  1423  000920  C04E  F03F         	movff	_time+6,?_printf+6
  1424  000924  6A40               	clrf	?_printf+7,c
  1425  000926  EC09  F000         	call	_printf	;wreg free
  1426                           
  1427                           ;main.c: 164: lcdInst(0b11000000);
  1428  00092A  0EC0               	movlw	192
  1429  00092C  EC3D  F007         	call	_lcdInst
  1430                           
  1431                           ;main.c: 165: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1432  000930  0EF2               	movlw	low STR_5
  1433  000932  6E39               	movwf	printf@f,c
  1434  000934  0EFE               	movlw	high STR_5
  1435  000936  6E3A               	movwf	printf@f+1,c
  1436  000938  C04A  F03B         	movff	_time+2,?_printf+2
  1437  00093C  6A3C               	clrf	?_printf+3,c
  1438  00093E  C049  F03D         	movff	_time+1,?_printf+4
  1439  000942  6A3E               	clrf	?_printf+5,c
  1440  000944  C048  F03F         	movff	_time,?_printf+6
  1441  000948  6A40               	clrf	?_printf+7,c
  1442  00094A  EC09  F000         	call	_printf	;wreg free
  1443  00094E  0012               	return	
  1444  000950                     __end_of_date_time:
  1445                           	opt stack 0
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           prodh	equ	0xFF4
  1451                           prodl	equ	0xFF3
  1452                           intcon	equ	0xFF2
  1453                           intcon2	equ	0xFF1
  1454                           intcon3	equ	0xFF0
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           indf2	equ	0xFDF
  1458                           fsr2h	equ	0xFDA
  1459                           fsr2l	equ	0xFD9
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _I2C_Master_Write *****************
  1463 ;; Defined at:
  1464 ;;		line 47 in file "I2C.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  d               2   45[COMRAM] unsigned int 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;Total ram usage:        2 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    5
  1485 ;; This function calls:
  1486 ;;		_I2C_Master_Wait
  1487 ;; This function is called by:
  1488 ;;		_date_time
  1489 ;;		_set_time
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text5
  1494  000E9E                     __ptext5:
  1495                           	opt stack 0
  1496  000E9E                     _I2C_Master_Write:
  1497                           	opt stack 24
  1498                           
  1499                           ;I2C.c: 49: I2C_Master_Wait();
  1500                           
  1501                           ;incstack = 0
  1502  000E9E  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1503                           
  1504                           ;I2C.c: 50: SSPBUF = d;
  1505  000EA2  C02E  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1506  000EA6  0012               	return		;funcret
  1507  000EA8                     __end_of_I2C_Master_Write:
  1508                           	opt stack 0
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           prodh	equ	0xFF4
  1514                           prodl	equ	0xFF3
  1515                           intcon	equ	0xFF2
  1516                           intcon2	equ	0xFF1
  1517                           intcon3	equ	0xFF0
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           indf2	equ	0xFDF
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function _I2C_Master_Stop *****************
  1526 ;; Defined at:
  1527 ;;		line 41 in file "I2C.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;		None
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;Total ram usage:        0 bytes
  1546 ;; Hardware stack levels used:    1
  1547 ;; Hardware stack levels required when called:    5
  1548 ;; This function calls:
  1549 ;;		_I2C_Master_Wait
  1550 ;; This function is called by:
  1551 ;;		_date_time
  1552 ;;		_set_time
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text6
  1557  000EA8                     __ptext6:
  1558                           	opt stack 0
  1559  000EA8                     _I2C_Master_Stop:
  1560                           	opt stack 24
  1561                           
  1562                           ;I2C.c: 43: I2C_Master_Wait();
  1563                           
  1564                           ;incstack = 0
  1565  000EA8  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1566                           
  1567                           ;I2C.c: 44: PEN = 1;
  1568  000EAC  84C5               	bsf	4037,2,c	;volatile
  1569  000EAE  0012               	return		;funcret
  1570  000EB0                     __end_of_I2C_Master_Stop:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           prodh	equ	0xFF4
  1577                           prodl	equ	0xFF3
  1578                           intcon	equ	0xFF2
  1579                           intcon2	equ	0xFF1
  1580                           intcon3	equ	0xFF0
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           indf2	equ	0xFDF
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _I2C_Master_Start *****************
  1589 ;; Defined at:
  1590 ;;		line 29 in file "I2C.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;		None
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;Total ram usage:        0 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    5
  1611 ;; This function calls:
  1612 ;;		_I2C_Master_Wait
  1613 ;; This function is called by:
  1614 ;;		_date_time
  1615 ;;		_set_time
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text7
  1620  000EB0                     __ptext7:
  1621                           	opt stack 0
  1622  000EB0                     _I2C_Master_Start:
  1623                           	opt stack 24
  1624                           
  1625                           ;I2C.c: 31: I2C_Master_Wait();
  1626                           
  1627                           ;incstack = 0
  1628  000EB0  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1629                           
  1630                           ;I2C.c: 32: SEN = 1;
  1631  000EB4  80C5               	bsf	4037,0,c	;volatile
  1632  000EB6  0012               	return		;funcret
  1633  000EB8                     __end_of_I2C_Master_Start:
  1634                           	opt stack 0
  1635                           tblptru	equ	0xFF8
  1636                           tblptrh	equ	0xFF7
  1637                           tblptrl	equ	0xFF6
  1638                           tablat	equ	0xFF5
  1639                           prodh	equ	0xFF4
  1640                           prodl	equ	0xFF3
  1641                           intcon	equ	0xFF2
  1642                           intcon2	equ	0xFF1
  1643                           intcon3	equ	0xFF0
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           indf2	equ	0xFDF
  1647                           fsr2h	equ	0xFDA
  1648                           fsr2l	equ	0xFD9
  1649                           status	equ	0xFD8
  1650                           
  1651 ;; *************** function _I2C_Master_Read *****************
  1652 ;; Defined at:
  1653 ;;		line 53 in file "I2C.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  a               1    wreg     unsigned char 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  a               1   45[COMRAM] unsigned char 
  1658 ;;  temp            1   46[COMRAM] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      unsigned char 
  1661 ;; Registers used:
  1662 ;;		wreg, status,2, status,0, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;Total ram usage:        2 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    5
  1675 ;; This function calls:
  1676 ;;		_I2C_Master_Wait
  1677 ;; This function is called by:
  1678 ;;		_date_time
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text8
  1683  000DAE                     __ptext8:
  1684                           	opt stack 0
  1685  000DAE                     _I2C_Master_Read:
  1686                           	opt stack 24
  1687                           
  1688                           ;incstack = 0
  1689                           ;I2C_Master_Read@a stored from wreg
  1690  000DAE  6E2E               	movwf	I2C_Master_Read@a,c
  1691                           
  1692                           ;I2C.c: 55: unsigned char temp;
  1693                           ;I2C.c: 56: I2C_Master_Wait();
  1694  000DB0  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1695                           
  1696                           ;I2C.c: 57: RCEN = 1;
  1697  000DB4  86C5               	bsf	4037,3,c	;volatile
  1698                           
  1699                           ;I2C.c: 58: I2C_Master_Wait();
  1700  000DB6  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1701                           
  1702                           ;I2C.c: 59: temp = SSPBUF;
  1703  000DBA  CFC9 F02F          	movff	4041,I2C_Master_Read@temp	;volatile
  1704                           
  1705                           ;I2C.c: 60: I2C_Master_Wait();
  1706  000DBE  EC2E  F007         	call	_I2C_Master_Wait	;wreg free
  1707                           
  1708                           ;I2C.c: 61: ACKDT = (a)?0:1;
  1709  000DC2  502E               	movf	I2C_Master_Read@a,w,c
  1710  000DC4  A4D8               	btfss	status,2,c
  1711  000DC6  D002               	goto	u110
  1712  000DC8  8AC5               	bsf	4037,5,c	;volatile
  1713  000DCA  D001               	goto	l1024
  1714  000DCC                     u110:
  1715  000DCC  9AC5               	bcf	4037,5,c	;volatile
  1716  000DCE                     l1024:
  1717                           
  1718                           ;I2C.c: 62: ACKEN = 1;
  1719  000DCE  88C5               	bsf	4037,4,c	;volatile
  1720                           
  1721                           ;I2C.c: 63: return temp;
  1722  000DD0  502F               	movf	I2C_Master_Read@temp,w,c
  1723  000DD2  0012               	return	
  1724  000DD4                     __end_of_I2C_Master_Read:
  1725                           	opt stack 0
  1726                           tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           prodh	equ	0xFF4
  1731                           prodl	equ	0xFF3
  1732                           intcon	equ	0xFF2
  1733                           intcon2	equ	0xFF1
  1734                           intcon3	equ	0xFF0
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           indf2	equ	0xFDF
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _I2C_Master_Wait *****************
  1743 ;; Defined at:
  1744 ;;		line 24 in file "I2C.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;		None
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      void 
  1751 ;; Registers used:
  1752 ;;		wreg, status,2, status,0
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1762 ;;Total ram usage:        1 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    4
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_I2C_Master_Start
  1769 ;;		_I2C_Master_Stop
  1770 ;;		_I2C_Master_Write
  1771 ;;		_I2C_Master_Read
  1772 ;;		_I2C_Master_RepeatedStart
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text9
  1777  000E5C                     __ptext9:
  1778                           	opt stack 0
  1779  000E5C                     _I2C_Master_Wait:
  1780                           	opt stack 24
  1781  000E5C                     l34:
  1782  000E5C  B4C7               	btfsc	4039,2,c	;volatile
  1783  000E5E  D7FE               	goto	l34
  1784  000E60  CFC5 F02D          	movff	4037,??_I2C_Master_Wait	;volatile
  1785  000E64  0E1F               	movlw	31
  1786  000E66  162D               	andwf	??_I2C_Master_Wait,f,c
  1787  000E68  B4D8               	btfsc	status,2,c
  1788  000E6A  0012               	return	
  1789  000E6C  D7F7               	goto	l34
  1790  000E6E                     __end_of_I2C_Master_Wait:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           intcon	equ	0xFF2
  1799                           intcon2	equ	0xFF1
  1800                           intcon3	equ	0xFF0
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           indf2	equ	0xFDF
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _bottle_time *****************
  1809 ;; Defined at:
  1810 ;;		line 212 in file "main.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		None
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    4
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text10
  1839  000EBC                     __ptext10:
  1840                           	opt stack 0
  1841  000EBC                     _bottle_time:
  1842                           	opt stack 26
  1843                           
  1844                           ;main.c: 213: return;
  1845                           
  1846                           ;incstack = 0
  1847  000EBC  0012               	return		;funcret
  1848  000EBE                     __end_of_bottle_time:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           intcon	equ	0xFF2
  1857                           intcon2	equ	0xFF1
  1858                           intcon3	equ	0xFF0
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           indf2	equ	0xFDF
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _bottle_count *****************
  1867 ;; Defined at:
  1868 ;;		line 170 in file "main.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    7
  1889 ;; This function calls:
  1890 ;;		___awmod
  1891 ;;		_lcdInst
  1892 ;;		_printf
  1893 ;; This function is called by:
  1894 ;;		_main
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text11
  1899  0006A6                     __ptext11:
  1900                           	opt stack 0
  1901  0006A6                     _bottle_count:
  1902                           	opt stack 23
  1903                           
  1904                           ;main.c: 171: switch(bottle_count_disp % 5){
  1905                           
  1906                           ;incstack = 0
  1907  0006A6  D06D               	goto	l2538
  1908  0006A8                     l2502:
  1909                           
  1910                           ;main.c: 173: lcdInst(0b10000000);
  1911  0006A8  0E80               	movlw	128
  1912  0006AA  EC3D  F007         	call	_lcdInst
  1913                           
  1914                           ;main.c: 174: printf("Bottle Count    ");
  1915  0006AE  0E4D               	movlw	low STR_6
  1916  0006B0  6E39               	movwf	printf@f,c
  1917  0006B2  0EFF               	movlw	high STR_6
  1918  0006B4  6E3A               	movwf	printf@f+1,c
  1919  0006B6  EC09  F000         	call	_printf	;wreg free
  1920                           
  1921                           ;main.c: 175: lcdInst(0b11000000);
  1922  0006BA  0EC0               	movlw	192
  1923  0006BC  EC3D  F007         	call	_lcdInst
  1924                           
  1925                           ;main.c: 176: printf("Total: 10       ");
  1926  0006C0  0E2B               	movlw	low STR_7
  1927  0006C2  6E39               	movwf	printf@f,c
  1928  0006C4  0EFF               	movlw	high STR_7
  1929  0006C6  6E3A               	movwf	printf@f+1,c
  1930  0006C8  EC09  F000         	call	_printf	;wreg free
  1931                           
  1932                           ;main.c: 177: break;
  1933  0006CC  0012               	return	
  1934  0006CE                     l2508:
  1935                           
  1936                           ;main.c: 179: lcdInst(0b10000000);
  1937  0006CE  0E80               	movlw	128
  1938  0006D0  EC3D  F007         	call	_lcdInst
  1939                           
  1940                           ;main.c: 180: printf("YOP+CAP+LBL: 3  ");
  1941  0006D4  0E91               	movlw	low STR_8
  1942  0006D6  6E39               	movwf	printf@f,c
  1943  0006D8  0EFF               	movlw	high STR_8
  1944  0006DA  6E3A               	movwf	printf@f+1,c
  1945  0006DC  EC09  F000         	call	_printf	;wreg free
  1946                           
  1947                           ;main.c: 181: lcdInst(0b11000000);
  1948  0006E0  0EC0               	movlw	192
  1949  0006E2  EC3D  F007         	call	_lcdInst
  1950                           
  1951                           ;main.c: 182: printf("YOP+CAP-LBL: 1  ");
  1952  0006E6  0E80               	movlw	low STR_9
  1953  0006E8  6E39               	movwf	printf@f,c
  1954  0006EA  0EFF               	movlw	high STR_9
  1955  0006EC  6E3A               	movwf	printf@f+1,c
  1956  0006EE  EC09  F000         	call	_printf	;wreg free
  1957                           
  1958                           ;main.c: 183: break;
  1959  0006F2  0012               	return	
  1960  0006F4                     l2514:
  1961                           
  1962                           ;main.c: 185: lcdInst(0b10000000);
  1963  0006F4  0E80               	movlw	128
  1964  0006F6  EC3D  F007         	call	_lcdInst
  1965                           
  1966                           ;main.c: 186: printf("YOP-CAP+LBL: 1  ");
  1967  0006FA  0E6F               	movlw	low STR_10
  1968  0006FC  6E39               	movwf	printf@f,c
  1969  0006FE  0EFF               	movlw	high STR_10
  1970  000700  6E3A               	movwf	printf@f+1,c
  1971  000702  EC09  F000         	call	_printf	;wreg free
  1972                           
  1973                           ;main.c: 187: lcdInst(0b11000000);
  1974  000706  0EC0               	movlw	192
  1975  000708  EC3D  F007         	call	_lcdInst
  1976                           
  1977                           ;main.c: 188: printf("YOP-CAP-LBL: 0  ");
  1978  00070C  0E5E               	movlw	low STR_11
  1979  00070E  6E39               	movwf	printf@f,c
  1980  000710  0EFF               	movlw	high STR_11
  1981  000712  6E3A               	movwf	printf@f+1,c
  1982  000714  EC09  F000         	call	_printf	;wreg free
  1983                           
  1984                           ;main.c: 189: break;
  1985  000718  0012               	return	
  1986  00071A                     l2520:
  1987                           
  1988                           ;main.c: 191: lcdInst(0b10000000);
  1989  00071A  0E80               	movlw	128
  1990  00071C  EC3D  F007         	call	_lcdInst
  1991                           
  1992                           ;main.c: 192: printf("ESKA+CAP+LBL: 1 ");
  1993  000720  0EA2               	movlw	low STR_12
  1994  000722  6E39               	movwf	printf@f,c
  1995  000724  0EFF               	movlw	high STR_12
  1996  000726  6E3A               	movwf	printf@f+1,c
  1997  000728  EC09  F000         	call	_printf	;wreg free
  1998                           
  1999                           ;main.c: 193: lcdInst(0b11000000);
  2000  00072C  0EC0               	movlw	192
  2001  00072E  EC3D  F007         	call	_lcdInst
  2002                           
  2003                           ;main.c: 194: printf("ESKA+CAP-LBL: 1 ");
  2004  000732  0EC4               	movlw	low STR_13
  2005  000734  6E39               	movwf	printf@f,c
  2006  000736  0EFF               	movlw	high STR_13
  2007  000738  6E3A               	movwf	printf@f+1,c
  2008  00073A  EC09  F000         	call	_printf	;wreg free
  2009                           
  2010                           ;main.c: 195: break;
  2011  00073E  0012               	return	
  2012  000740                     l2526:
  2013                           
  2014                           ;main.c: 197: lcdInst(0b10000000);
  2015  000740  0E80               	movlw	128
  2016  000742  EC3D  F007         	call	_lcdInst
  2017                           
  2018                           ;main.c: 198: printf("ESKA-CAP+LBL: 1 ");
  2019  000746  0EB3               	movlw	low STR_14
  2020  000748  6E39               	movwf	printf@f,c
  2021  00074A  0EFF               	movlw	high STR_14
  2022  00074C  6E3A               	movwf	printf@f+1,c
  2023  00074E  EC09  F000         	call	_printf	;wreg free
  2024                           
  2025                           ;main.c: 199: lcdInst(0b11000000);
  2026  000752  0EC0               	movlw	192
  2027  000754  EC3D  F007         	call	_lcdInst
  2028                           
  2029                           ;main.c: 200: printf("ESKA-CAP-LBL: 2 ");
  2030  000758  0ED5               	movlw	low STR_15
  2031  00075A  6E39               	movwf	printf@f,c
  2032  00075C  0EFF               	movlw	high STR_15
  2033  00075E  6E3A               	movwf	printf@f+1,c
  2034  000760  EC09  F000         	call	_printf	;wreg free
  2035                           
  2036                           ;main.c: 201: break;
  2037  000764  0012               	return	
  2038  000766                     l2532:
  2039                           
  2040                           ;main.c: 204: lcdInst(0b10000000);
  2041  000766  0E80               	movlw	128
  2042  000768  EC3D  F007         	call	_lcdInst
  2043                           
  2044                           ;main.c: 205: printf("ERROR: %d", bottle_count_disp);
  2045  00076C  0EF4               	movlw	low STR_16
  2046  00076E  6E39               	movwf	printf@f,c
  2047  000770  0EFF               	movlw	high STR_16
  2048  000772  6E3A               	movwf	printf@f+1,c
  2049  000774  C050  F03B         	movff	_bottle_count_disp,?_printf+2
  2050  000778  C051  F03C         	movff	_bottle_count_disp+1,?_printf+3
  2051  00077C  EC09  F000         	call	_printf	;wreg free
  2052  000780  D7F2               	goto	l2532
  2053  000782                     l2538:
  2054  000782  C050  F02D         	movff	_bottle_count_disp,___awmod@dividend
  2055  000786  C051  F02E         	movff	_bottle_count_disp+1,___awmod@dividend+1
  2056  00078A  0E00               	movlw	0
  2057  00078C  6E30               	movwf	___awmod@divisor+1,c
  2058  00078E  0E05               	movlw	5
  2059  000790  6E2F               	movwf	___awmod@divisor,c
  2060  000792  EC3B  F005         	call	___awmod	;wreg free
  2061                           
  2062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2063                           ; Switch size 1, requested type "space"
  2064                           ; Number of cases is 1, Range of values is 0 to 0
  2065                           ; switch strategies available:
  2066                           ; Name         Instructions Cycles
  2067                           ; simple_byte            4     3 (average)
  2068                           ;	Chosen strategy is simple_byte
  2069  000796  502E               	movf	?___awmod+1,w,c
  2070  000798  0A00               	xorlw	0	; case 0
  2071  00079A  A4D8               	btfss	status,2,c
  2072  00079C  D7E4               	goto	l2532
  2073                           
  2074                           ; Switch size 1, requested type "space"
  2075                           ; Number of cases is 5, Range of values is 0 to 4
  2076                           ; switch strategies available:
  2077                           ; Name         Instructions Cycles
  2078                           ; simple_byte           16     9 (average)
  2079                           ;	Chosen strategy is simple_byte
  2080  00079E  502D               	movf	?___awmod,w,c
  2081  0007A0  0A00               	xorlw	0	; case 0
  2082  0007A2  B4D8               	btfsc	status,2,c
  2083  0007A4  D781               	goto	l2502
  2084  0007A6  0A01               	xorlw	1	; case 1
  2085  0007A8  B4D8               	btfsc	status,2,c
  2086  0007AA  D791               	goto	l2508
  2087  0007AC  0A03               	xorlw	3	; case 2
  2088  0007AE  B4D8               	btfsc	status,2,c
  2089  0007B0  D7A1               	goto	l2514
  2090  0007B2  0A01               	xorlw	1	; case 3
  2091  0007B4  B4D8               	btfsc	status,2,c
  2092  0007B6  D7B1               	goto	l2520
  2093  0007B8  0A07               	xorlw	7	; case 4
  2094  0007BA  B4D8               	btfsc	status,2,c
  2095  0007BC  D7C1               	goto	l2526
  2096  0007BE  D7D3               	goto	l2532
  2097  0007C0                     __end_of_bottle_count:
  2098                           	opt stack 0
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           intcon	equ	0xFF2
  2106                           intcon2	equ	0xFF1
  2107                           intcon3	equ	0xFF0
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           indf2	equ	0xFDF
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _printf *****************
  2116 ;; Defined at:
  2117 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  f               2   56[COMRAM] PTR const unsigned char 
  2120 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  2121 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  2122 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  2123 ;;		 -> STR_4(23), STR_3(17), STR_2(17), STR_1(14), 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  idx             1    0[BANK0 ] unsigned char 
  2126 ;;  tmpval          4    0        struct .
  2127 ;;  cp              3    0        PTR const unsigned char 
  2128 ;;  width           2    7[BANK0 ] int 
  2129 ;;  val             2    4[BANK0 ] unsigned int 
  2130 ;;  ap              2    1[BANK0 ] PTR void [1]
  2131 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2132 ;;  len             2    0        unsigned int 
  2133 ;;  c               1    9[BANK0 ] char 
  2134 ;;  flag            1    6[BANK0 ] unsigned char 
  2135 ;;  prec            1    3[BANK0 ] char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  2   56[COMRAM] int 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:       22 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    6
  2152 ;; This function calls:
  2153 ;;		___lwdiv
  2154 ;;		___lwmod
  2155 ;;		___wmul
  2156 ;;		_isdigit
  2157 ;;		_putch
  2158 ;; This function is called by:
  2159 ;;		_standby
  2160 ;;		_date_time
  2161 ;;		_bottle_count
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text12
  2166  000012                     __ptext12:
  2167                           	opt stack 0
  2168  000012                     _printf:
  2169                           	opt stack 23
  2170                           
  2171                           ;doprnt.c: 466: va_list ap;
  2172                           ;doprnt.c: 499: signed char c;
  2173                           ;doprnt.c: 501: int width;
  2174                           ;doprnt.c: 506: signed char prec;
  2175                           ;doprnt.c: 508: unsigned char flag;
  2176                           ;doprnt.c: 523: union {
  2177                           ;doprnt.c: 524: unsigned long vd;
  2178                           ;doprnt.c: 525: double integ;
  2179                           ;doprnt.c: 526: } tmpval;
  2180                           ;doprnt.c: 528: unsigned int val;
  2181                           ;doprnt.c: 529: unsigned len;
  2182                           ;doprnt.c: 530: const char * cp;
  2183                           ;doprnt.c: 533: *ap = __va_start();
  2184                           
  2185                           ;incstack = 0
  2186  000012  0E3B               	movlw	low (?_printf+2)
  2187  000014  0100               	movlb	0	; () banked
  2188  000016  6F81               	movwf	printf@ap& (0+255),b
  2189  000018  0E00               	movlw	high (?_printf+2)
  2190  00001A  0100               	movlb	0	; () banked
  2191  00001C  6F82               	movwf	(printf@ap+1)& (0+255),b
  2192                           
  2193                           ;doprnt.c: 536: while(c = *f++) {
  2194  00001E  D1AF               	goto	l2450
  2195  000020                     l2324:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;doprnt.c: 538: if(c != '%')
  2199  000020  0E25               	movlw	37
  2200  000022  0100               	movlb	0	; () banked
  2201  000024  1989               	xorwf	printf@c& (0+255),w,b
  2202  000026  B4D8               	btfsc	status,2,c
  2203  000028  D005               	goto	l2328
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;doprnt.c: 540: {
  2207                           ;doprnt.c: 541: (putch(c) );
  2208  00002A  0100               	movlb	0	; () banked
  2209  00002C  5189               	movf	printf@c& (0+255),w,b
  2210  00002E  EC37  F007         	call	_putch
  2211                           
  2212                           ;doprnt.c: 542: continue;
  2213  000032  D1A5               	goto	l2450
  2214  000034                     l2328:
  2215                           
  2216                           ;doprnt.c: 543: }
  2217                           ;doprnt.c: 546: width = 0;
  2218  000034  0E00               	movlw	0
  2219  000036  0100               	movlb	0	; () banked
  2220  000038  6F88               	movwf	(printf@width+1)& (0+255),b
  2221  00003A  0E00               	movlw	0
  2222  00003C  6F87               	movwf	printf@width& (0+255),b
  2223                           
  2224                           ;doprnt.c: 548: flag = 0;
  2225  00003E  0E00               	movlw	0
  2226  000040  0100               	movlb	0	; () banked
  2227  000042  6F86               	movwf	printf@flag& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 551: switch(*f) {
  2231                           
  2232                           ;doprnt.c: 550: for(;;) {
  2233  000044  D004               	goto	l2334
  2234  000046                     l2330:
  2235                           
  2236                           ;doprnt.c: 580: flag |= 0x04;
  2237  000046  0100               	movlb	0	; () banked
  2238  000048  8586               	bsf	printf@flag& (0+255),2,b
  2239                           
  2240                           ;doprnt.c: 581: f++;
  2241  00004A  4A39               	infsnz	printf@f,f,c
  2242  00004C  2A3A               	incf	printf@f+1,f,c
  2243  00004E                     l2334:
  2244  00004E  C039  FFF6         	movff	printf@f,tblptrl
  2245  000052  C03A  FFF7         	movff	printf@f+1,tblptrh
  2246  000056                     	if	0	;tblptru may be non-zero
  2247  000056                     	endif
  2248  000056                     	if	0	;tblptru may be non-zero
  2249  000056                     	endif
  2250  000056  0008               	tblrd		*
  2251  000058  50F5               	movf	tablat,w,c
  2252                           
  2253                           ; Switch size 1, requested type "space"
  2254                           ; Number of cases is 1, Range of values is 48 to 48
  2255                           ; switch strategies available:
  2256                           ; Name         Instructions Cycles
  2257                           ; simple_byte            4     3 (average)
  2258                           ;	Chosen strategy is simple_byte
  2259  00005A  0A30               	xorlw	48	; case 48
  2260  00005C  B4D8               	btfsc	status,2,c
  2261  00005E  D7F3               	goto	l2330
  2262                           
  2263                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2264                           
  2265                           ;doprnt.c: 586: }
  2266                           
  2267                           ;doprnt.c: 585: break;
  2268  000060  C039  FFF6         	movff	printf@f,tblptrl
  2269  000064  C03A  FFF7         	movff	printf@f+1,tblptrh
  2270  000068                     	if	0	;tblptru may be non-zero
  2271  000068                     	endif
  2272  000068                     	if	0	;tblptru may be non-zero
  2273  000068                     	endif
  2274  000068  0008               	tblrd		*
  2275  00006A  50F5               	movf	tablat,w,c
  2276  00006C  EC10  F007         	call	_isdigit
  2277  000070  A0D8               	btfss	status,0,c
  2278  000072  D039               	goto	l2352
  2279                           
  2280                           ;doprnt.c: 598: width = 0;
  2281  000074  0E00               	movlw	0
  2282  000076  0100               	movlb	0	; () banked
  2283  000078  6F88               	movwf	(printf@width+1)& (0+255),b
  2284  00007A  0E00               	movlw	0
  2285  00007C  6F87               	movwf	printf@width& (0+255),b
  2286  00007E                     l2340:
  2287                           
  2288                           ;doprnt.c: 600: width *= 10;
  2289  00007E  C087  F02D         	movff	printf@width,___wmul@multiplier
  2290  000082  C088  F02E         	movff	printf@width+1,___wmul@multiplier+1
  2291  000086  0E00               	movlw	0
  2292  000088  6E30               	movwf	___wmul@multiplicand+1,c
  2293  00008A  0E0A               	movlw	10
  2294  00008C  6E2F               	movwf	___wmul@multiplicand,c
  2295  00008E  ECEA  F006         	call	___wmul	;wreg free
  2296  000092  C02D  F087         	movff	?___wmul,printf@width
  2297  000096  C02E  F088         	movff	?___wmul+1,printf@width+1
  2298                           
  2299                           ;doprnt.c: 601: width += *f++ - '0';
  2300  00009A  0ED0               	movlw	208
  2301  00009C  6E41               	movwf	??_printf& (0+255),c
  2302  00009E  0EFF               	movlw	255
  2303  0000A0  6E42               	movwf	(??_printf+1)& (0+255),c
  2304  0000A2  C039  FFF6         	movff	printf@f,tblptrl
  2305  0000A6  C03A  FFF7         	movff	printf@f+1,tblptrh
  2306  0000AA                     	if	0	;tblptru may be non-zero
  2307  0000AA                     	endif
  2308  0000AA                     	if	0	;tblptru may be non-zero
  2309  0000AA                     	endif
  2310  0000AA  0008               	tblrd		*
  2311  0000AC  50F5               	movf	tablat,w,c
  2312  0000AE  6E43               	movwf	(??_printf+2)& (0+255),c
  2313  0000B0  6A44               	clrf	(??_printf+3)& (0+255),c
  2314  0000B2  5041               	movf	??_printf,w,c
  2315  0000B4  2643               	addwf	??_printf+2,f,c
  2316  0000B6  5042               	movf	??_printf+1,w,c
  2317  0000B8  2244               	addwfc	??_printf+3,f,c
  2318  0000BA  5043               	movf	??_printf+2,w,c
  2319  0000BC  0100               	movlb	0	; () banked
  2320  0000BE  2787               	addwf	printf@width& (0+255),f,b
  2321  0000C0  5044               	movf	??_printf+3,w,c
  2322  0000C2  0100               	movlb	0	; () banked
  2323  0000C4  2388               	addwfc	(printf@width+1)& (0+255),f,b
  2324                           
  2325                           ; BSR set to: 0
  2326  0000C6  4A39               	infsnz	printf@f,f,c
  2327  0000C8  2A3A               	incf	printf@f+1,f,c
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2331  0000CA  C039  FFF6         	movff	printf@f,tblptrl
  2332  0000CE  C03A  FFF7         	movff	printf@f+1,tblptrh
  2333  0000D2                     	if	0	;tblptru may be non-zero
  2334  0000D2                     	endif
  2335  0000D2                     	if	0	;tblptru may be non-zero
  2336  0000D2                     	endif
  2337  0000D2  0008               	tblrd		*
  2338  0000D4  50F5               	movf	tablat,w,c
  2339  0000D6  EC10  F007         	call	_isdigit
  2340  0000DA  A0D8               	btfss	status,0,c
  2341  0000DC  D004               	goto	l2352
  2342  0000DE  D7CF               	goto	l2340
  2343  0000E0                     l2348:
  2344                           
  2345                           ;doprnt.c: 721: flag |= 0x80;
  2346  0000E0  0100               	movlb	0	; () banked
  2347  0000E2  8F86               	bsf	printf@flag& (0+255),7,b
  2348                           
  2349                           ;doprnt.c: 723: break;
  2350  0000E4  D018               	goto	l248
  2351  0000E6                     l2352:
  2352  0000E6  C039  FFF6         	movff	printf@f,tblptrl
  2353  0000EA  C03A  FFF7         	movff	printf@f+1,tblptrh
  2354  0000EE  4A39               	infsnz	printf@f,f,c
  2355  0000F0  2A3A               	incf	printf@f+1,f,c
  2356  0000F2                     	if	0	;tblptru may be non-zero
  2357  0000F2                     	endif
  2358  0000F2                     	if	0	;tblptru may be non-zero
  2359  0000F2                     	endif
  2360  0000F2  0008               	tblrd		*
  2361  0000F4  CFF5 F089          	movff	tablat,printf@c
  2362  0000F8  0100               	movlb	0	; () banked
  2363  0000FA  5189               	movf	printf@c& (0+255),w,b
  2364                           
  2365                           ; Switch size 1, requested type "space"
  2366                           ; Number of cases is 4, Range of values is 0 to 120
  2367                           ; switch strategies available:
  2368                           ; Name         Instructions Cycles
  2369                           ; simple_byte           13     7 (average)
  2370                           ;	Chosen strategy is simple_byte
  2371  0000FC  0A00               	xorlw	0	; case 0
  2372  0000FE  B4D8               	btfsc	status,2,c
  2373  000100  0012               	return	
  2374  000102  0A64               	xorlw	100	; case 100
  2375  000104  B4D8               	btfsc	status,2,c
  2376  000106  D007               	goto	l248
  2377  000108  0A0D               	xorlw	13	; case 105
  2378  00010A  B4D8               	btfsc	status,2,c
  2379  00010C  D004               	goto	l248
  2380  00010E  0A11               	xorlw	17	; case 120
  2381  000110  B4D8               	btfsc	status,2,c
  2382  000112  D7E6               	goto	l2348
  2383  000114  D134               	goto	l2450
  2384  000116                     l248:
  2385                           
  2386                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2387  000116  0100               	movlb	0	; () banked
  2388  000118  BF86               	btfsc	printf@flag& (0+255),7,b
  2389  00011A  D019               	goto	l2364
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;doprnt.c: 1253: {
  2393                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2394  00011C  C081  FFD9         	movff	printf@ap,fsr2l
  2395  000120  C082  FFDA         	movff	printf@ap+1,fsr2h
  2396  000124  CFDE F084          	movff	postinc2,printf@val
  2397  000128  CFDD F085          	movff	postdec2,printf@val+1
  2398                           
  2399                           ; BSR set to: 0
  2400  00012C  0E02               	movlw	2
  2401  00012E  0100               	movlb	0	; () banked
  2402  000130  2781               	addwf	printf@ap& (0+255),f,b
  2403  000132  0E00               	movlw	0
  2404  000134  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1261: if((int)val < 0) {
  2408  000136  0100               	movlb	0	; () banked
  2409  000138  AF85               	btfss	(printf@val+1)& (0+255),7,b
  2410  00013A  D053               	goto	l2398
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 1262: flag |= 0x03;
  2414  00013C  0E03               	movlw	3
  2415  00013E  0100               	movlb	0	; () banked
  2416  000140  1386               	iorwf	printf@flag& (0+255),f,b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1263: val = -val;
  2420  000142  0100               	movlb	0	; () banked
  2421  000144  6D84               	negf	printf@val& (0+255),b
  2422  000146  1F85               	comf	(printf@val+1)& (0+255),f,b
  2423  000148  B0D8               	btfsc	status,0,c
  2424  00014A  2B85               	incf	(printf@val+1)& (0+255),f,b
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 1264: }
  2428                           ;doprnt.c: 1266: }
  2429  00014C  D04A               	goto	l2398
  2430  00014E                     l2364:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;doprnt.c: 1268: else
  2434                           ;doprnt.c: 1273: {
  2435                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2436  00014E  C081  FFD9         	movff	printf@ap,fsr2l
  2437  000152  C082  FFDA         	movff	printf@ap+1,fsr2h
  2438  000156  CFDE F084          	movff	postinc2,printf@val
  2439  00015A  CFDD F085          	movff	postdec2,printf@val+1
  2440                           
  2441                           ; BSR set to: 0
  2442  00015E  0E02               	movlw	2
  2443  000160  0100               	movlb	0	; () banked
  2444  000162  2781               	addwf	printf@ap& (0+255),f,b
  2445  000164  0E00               	movlw	0
  2446  000166  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;doprnt.c: 1287: }
  2450                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2451  000168  D03C               	goto	l2398
  2452  00016A                     l2368:
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2456  00016A  0E01               	movlw	1
  2457  00016C  0100               	movlb	0	; () banked
  2458  00016E  6F89               	movwf	printf@c& (0+255),b
  2459  000170                     l2370:
  2460                           
  2461                           ; BSR set to: 0
  2462  000170  0E05               	movlw	5
  2463  000172  0100               	movlb	0	; () banked
  2464  000174  1989               	xorwf	printf@c& (0+255),w,b
  2465  000176  B4D8               	btfsc	status,2,c
  2466  000178  D03D               	goto	l2400
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;doprnt.c: 1306: if(val < dpowers[c])
  2470                           
  2471                           ; BSR set to: 0
  2472                           
  2473                           ; BSR set to: 0
  2474  00017A  0100               	movlb	0	; () banked
  2475  00017C  5189               	movf	printf@c& (0+255),w,b
  2476  00017E  0D02               	mullw	2
  2477  000180  0EC2               	movlw	low _dpowers
  2478  000182  24F3               	addwf	prodl,w,c
  2479  000184  6EF6               	movwf	tblptrl,c
  2480  000186  0EFE               	movlw	high _dpowers
  2481  000188  20F4               	addwfc	prodh,w,c
  2482  00018A  6EF7               	movwf	tblptrh,c
  2483  00018C                     	if	0	;There are less than 3 active tblptr bytes
  2484  00018C                     	endif
  2485  00018C  0009               	tblrd		*+
  2486  00018E  50F5               	movf	tablat,w,c
  2487  000190  0100               	movlb	0	; () banked
  2488  000192  5D84               	subwf	printf@val& (0+255),w,b
  2489  000194  0009               	tblrd		*+
  2490  000196  50F5               	movf	tablat,w,c
  2491  000198  0100               	movlb	0	; () banked
  2492  00019A  5985               	subwfb	(printf@val+1)& (0+255),w,b
  2493  00019C  A0D8               	btfss	status,0,c
  2494  00019E  D02A               	goto	l2400
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1307: break;
  2502  0001A0  0100               	movlb	0	; () banked
  2503  0001A2  2B89               	incf	printf@c& (0+255),f,b
  2504  0001A4  D7E5               	goto	l2370
  2505  0001A6                     l2382:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2509  0001A6  0E01               	movlw	1
  2510  0001A8  0100               	movlb	0	; () banked
  2511  0001AA  6F89               	movwf	printf@c& (0+255),b
  2512  0001AC                     l2384:
  2513                           
  2514                           ; BSR set to: 0
  2515  0001AC  0E04               	movlw	4
  2516  0001AE  0100               	movlb	0	; () banked
  2517  0001B0  1989               	xorwf	printf@c& (0+255),w,b
  2518  0001B2  B4D8               	btfsc	status,2,c
  2519  0001B4  D01F               	goto	l2400
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2523                           
  2524                           ; BSR set to: 0
  2525                           
  2526                           ; BSR set to: 0
  2527  0001B6  0100               	movlb	0	; () banked
  2528  0001B8  5189               	movf	printf@c& (0+255),w,b
  2529  0001BA  0D02               	mullw	2
  2530  0001BC  0ECC               	movlw	low _hexpowers
  2531  0001BE  24F3               	addwf	prodl,w,c
  2532  0001C0  6EF6               	movwf	tblptrl,c
  2533  0001C2  0EFE               	movlw	high _hexpowers
  2534  0001C4  20F4               	addwfc	prodh,w,c
  2535  0001C6  6EF7               	movwf	tblptrh,c
  2536  0001C8                     	if	0	;There are less than 3 active tblptr bytes
  2537  0001C8                     	endif
  2538  0001C8  0009               	tblrd		*+
  2539  0001CA  50F5               	movf	tablat,w,c
  2540  0001CC  0100               	movlb	0	; () banked
  2541  0001CE  5D84               	subwf	printf@val& (0+255),w,b
  2542  0001D0  0009               	tblrd		*+
  2543  0001D2  50F5               	movf	tablat,w,c
  2544  0001D4  0100               	movlb	0	; () banked
  2545  0001D6  5985               	subwfb	(printf@val+1)& (0+255),w,b
  2546  0001D8  A0D8               	btfss	status,0,c
  2547  0001DA  D00C               	goto	l2400
  2548                           
  2549                           ; BSR set to: 0
  2550                           
  2551                           ; BSR set to: 0
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1318: break;
  2555  0001DC  0100               	movlb	0	; () banked
  2556  0001DE  2B89               	incf	printf@c& (0+255),f,b
  2557  0001E0  D7E5               	goto	l2384
  2558  0001E2                     l2398:
  2559                           
  2560                           ; BSR set to: 0
  2561  0001E2  0100               	movlb	0	; () banked
  2562  0001E4  5186               	movf	printf@flag& (0+255),w,b
  2563  0001E6  0B80               	andlw	128
  2564                           
  2565                           ; Switch size 1, requested type "space"
  2566                           ; Number of cases is 2, Range of values is 0 to 128
  2567                           ; switch strategies available:
  2568                           ; Name         Instructions Cycles
  2569                           ; simple_byte            7     4 (average)
  2570                           ;	Chosen strategy is simple_byte
  2571  0001E8  0A00               	xorlw	0	; case 0
  2572  0001EA  B4D8               	btfsc	status,2,c
  2573  0001EC  D7BE               	goto	l2368
  2574  0001EE  0A80               	xorlw	128	; case 128
  2575  0001F0  B4D8               	btfsc	status,2,c
  2576  0001F2  D7D9               	goto	l2382
  2577  0001F4                     l2400:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2581  0001F4  0100               	movlb	0	; () banked
  2582  0001F6  5187               	movf	printf@width& (0+255),w,b
  2583  0001F8  0100               	movlb	0	; () banked
  2584  0001FA  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2585  0001FC  B4D8               	btfsc	status,2,c
  2586  0001FE  D00A               	goto	l2406
  2587                           
  2588                           ; BSR set to: 0
  2589  000200  C086  F041         	movff	printf@flag,??_printf
  2590  000204  0E03               	movlw	3
  2591  000206  1641               	andwf	??_printf,f,c
  2592  000208  B4D8               	btfsc	status,2,c
  2593  00020A  D004               	goto	l2406
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 1346: width--;
  2597  00020C  0100               	movlb	0	; () banked
  2598  00020E  0787               	decf	printf@width& (0+255),f,b
  2599  000210  A0D8               	btfss	status,0,c
  2600  000212  0788               	decf	(printf@width+1)& (0+255),f,b
  2601  000214                     l2406:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 1381: if(width > c)
  2605  000214  0E80               	movlw	128
  2606  000216  0100               	movlb	0	; () banked
  2607  000218  BF89               	btfsc	printf@c& (0+255),7,b
  2608  00021A  0E7F               	movlw	127
  2609  00021C  6E41               	movwf	??_printf& (0+255),c
  2610  00021E  0100               	movlb	0	; () banked
  2611  000220  5187               	movf	printf@width& (0+255),w,b
  2612  000222  0100               	movlb	0	; () banked
  2613  000224  5D89               	subwf	printf@c& (0+255),w,b
  2614  000226  0100               	movlb	0	; () banked
  2615  000228  5188               	movf	(printf@width+1)& (0+255),w,b
  2616  00022A  0A80               	xorlw	128
  2617  00022C  5841               	subwfb	??_printf& (0+255),w,c
  2618  00022E  B0D8               	btfsc	status,0,c
  2619  000230  D00B               	goto	l2410
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;doprnt.c: 1382: width -= c;
  2623  000232  0100               	movlb	0	; () banked
  2624  000234  5189               	movf	printf@c& (0+255),w,b
  2625  000236  0100               	movlb	0	; () banked
  2626  000238  5F87               	subwf	printf@width& (0+255),f,b
  2627  00023A  0E00               	movlw	0
  2628  00023C  0100               	movlb	0	; () banked
  2629  00023E  BF89               	btfsc	printf@c& (0+255),7,b
  2630  000240  0EFF               	movlw	255
  2631  000242  0100               	movlb	0	; () banked
  2632  000244  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  2633  000246  D005               	goto	l2412
  2634  000248                     l2410:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1383: else
  2638                           ;doprnt.c: 1384: width = 0;
  2639  000248  0E00               	movlw	0
  2640  00024A  0100               	movlb	0	; () banked
  2641  00024C  6F88               	movwf	(printf@width+1)& (0+255),b
  2642  00024E  0E00               	movlw	0
  2643  000250  6F87               	movwf	printf@width& (0+255),b
  2644  000252                     l2412:
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;doprnt.c: 1387: if(flag & 0x04) {
  2648  000252  0100               	movlb	0	; () banked
  2649  000254  A586               	btfss	printf@flag& (0+255),2,b
  2650  000256  D017               	goto	l2424
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;doprnt.c: 1392: if(flag & 0x03)
  2654  000258  C086  F041         	movff	printf@flag,??_printf
  2655  00025C  0E03               	movlw	3
  2656  00025E  1641               	andwf	??_printf,f,c
  2657  000260  B4D8               	btfsc	status,2,c
  2658  000262  D003               	goto	l2418
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 1393: (putch('-') );
  2662  000264  0E2D               	movlw	45
  2663  000266  EC37  F007         	call	_putch
  2664  00026A                     l2418:
  2665                           
  2666                           ;doprnt.c: 1415: if(width)
  2667  00026A  0100               	movlb	0	; () banked
  2668  00026C  5187               	movf	printf@width& (0+255),w,b
  2669  00026E  0100               	movlb	0	; () banked
  2670  000270  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2671  000272  B4D8               	btfsc	status,2,c
  2672  000274  D024               	goto	l2434
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;doprnt.c: 1417: (putch('0') );
  2676                           
  2677                           ; BSR set to: 0
  2678                           
  2679                           ;doprnt.c: 1416: do
  2680  000276  0E30               	movlw	48
  2681  000278  EC37  F007         	call	_putch
  2682                           
  2683                           ;doprnt.c: 1418: while(--width);
  2684  00027C  0100               	movlb	0	; () banked
  2685  00027E  0787               	decf	printf@width& (0+255),f,b
  2686  000280  A0D8               	btfss	status,0,c
  2687  000282  0788               	decf	(printf@width+1)& (0+255),f,b
  2688  000284  D7F2               	goto	l2418
  2689  000286                     l2424:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;doprnt.c: 1422: {
  2693                           ;doprnt.c: 1424: if(width
  2694                           ;doprnt.c: 1428: )
  2695  000286  0100               	movlb	0	; () banked
  2696  000288  5187               	movf	printf@width& (0+255),w,b
  2697  00028A  0100               	movlb	0	; () banked
  2698  00028C  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2699  00028E  B4D8               	btfsc	status,2,c
  2700  000290  D00D               	goto	l2430
  2701  000292                     l2426:
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;doprnt.c: 1430: (putch(' ') );
  2705  000292  0E20               	movlw	32
  2706  000294  EC37  F007         	call	_putch
  2707                           
  2708                           ;doprnt.c: 1431: while(--width);
  2709  000298  0100               	movlb	0	; () banked
  2710  00029A  0787               	decf	printf@width& (0+255),f,b
  2711  00029C  A0D8               	btfss	status,0,c
  2712  00029E  0788               	decf	(printf@width+1)& (0+255),f,b
  2713  0002A0  0100               	movlb	0	; () banked
  2714  0002A2  5187               	movf	printf@width& (0+255),w,b
  2715  0002A4  0100               	movlb	0	; () banked
  2716  0002A6  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2717  0002A8  A4D8               	btfss	status,2,c
  2718  0002AA  D7F3               	goto	l2426
  2719  0002AC                     l2430:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;doprnt.c: 1438: if(flag & 0x03)
  2723  0002AC  C086  F041         	movff	printf@flag,??_printf
  2724  0002B0  0E03               	movlw	3
  2725  0002B2  1641               	andwf	??_printf,f,c
  2726  0002B4  B4D8               	btfsc	status,2,c
  2727  0002B6  D003               	goto	l2434
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;doprnt.c: 1439: (putch('-') );
  2731  0002B8  0E2D               	movlw	45
  2732  0002BA  EC37  F007         	call	_putch
  2733  0002BE                     l2434:
  2734                           
  2735                           ;doprnt.c: 1469: }
  2736                           ;doprnt.c: 1472: prec = c;
  2737  0002BE  C089  F083         	movff	printf@c,printf@prec
  2738                           
  2739                           ;doprnt.c: 1474: while(prec--) {
  2740  0002C2  D057               	goto	l2448
  2741  0002C4                     l2436:
  2742                           
  2743                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2744  0002C4  0100               	movlb	0	; () banked
  2745  0002C6  5183               	movf	printf@prec& (0+255),w,b
  2746  0002C8  0D02               	mullw	2
  2747  0002CA  0EC2               	movlw	low _dpowers
  2748  0002CC  24F3               	addwf	prodl,w,c
  2749  0002CE  6EF6               	movwf	tblptrl,c
  2750  0002D0  0EFE               	movlw	high _dpowers
  2751  0002D2  20F4               	addwfc	prodh,w,c
  2752  0002D4  6EF7               	movwf	tblptrh,c
  2753  0002D6                     	if	0	;There are less than 3 active tblptr bytes
  2754  0002D6                     	endif
  2755  0002D6  0009               	tblrd		*+
  2756  0002D8  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  2757  0002DC  000A               	tblrd		*-
  2758  0002DE  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  2759  0002E2  C084  F02D         	movff	printf@val,___lwdiv@dividend
  2760  0002E6  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  2761  0002EA  ECA0  F005         	call	___lwdiv	;wreg free
  2762  0002EE  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
  2763  0002F2  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
  2764  0002F6  0E00               	movlw	0
  2765  0002F8  6E37               	movwf	___lwmod@divisor+1,c
  2766  0002FA  0E0A               	movlw	10
  2767  0002FC  6E36               	movwf	___lwmod@divisor,c
  2768  0002FE  EC66  F006         	call	___lwmod	;wreg free
  2769  000302  5034               	movf	?___lwmod,w,c
  2770  000304  0F30               	addlw	48
  2771  000306  0100               	movlb	0	; () banked
  2772  000308  6F89               	movwf	printf@c& (0+255),b
  2773                           
  2774                           ;doprnt.c: 1491: break;
  2775  00030A  D02F               	goto	l2446
  2776  00030C                     l2438:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;doprnt.c: 1499: {
  2780                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2781  00030C  C084  F02D         	movff	printf@val,___lwdiv@dividend
  2782  000310  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  2783  000314  0100               	movlb	0	; () banked
  2784  000316  5183               	movf	printf@prec& (0+255),w,b
  2785  000318  0D02               	mullw	2
  2786  00031A  0ECC               	movlw	low _hexpowers
  2787  00031C  24F3               	addwf	prodl,w,c
  2788  00031E  6EF6               	movwf	tblptrl,c
  2789  000320  0EFE               	movlw	high _hexpowers
  2790  000322  20F4               	addwfc	prodh,w,c
  2791  000324  6EF7               	movwf	tblptrh,c
  2792  000326                     	if	0	;There are less than 3 active tblptr bytes
  2793  000326                     	endif
  2794  000326  0009               	tblrd		*+
  2795  000328  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  2796  00032C  000A               	tblrd		*-
  2797  00032E  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  2798  000332  ECA0  F005         	call	___lwdiv	;wreg free
  2799  000336  502D               	movf	?___lwdiv,w,c
  2800  000338  0B0F               	andlw	15
  2801  00033A  0100               	movlb	0	; () banked
  2802  00033C  6F80               	movwf	printf@idx& (0+255),b
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2806  00033E  0100               	movlb	0	; () banked
  2807  000340  5180               	movf	printf@idx& (0+255),w,b
  2808  000342  0D01               	mullw	1
  2809  000344  0E09               	movlw	low STR_17
  2810  000346  24F3               	addwf	prodl,w,c
  2811  000348  6EF6               	movwf	tblptrl,c
  2812  00034A  0EFF               	movlw	high STR_17
  2813  00034C  20F4               	addwfc	prodh,w,c
  2814  00034E  6EF7               	movwf	tblptrh,c
  2815  000350                     	if	0	;There are less than 3 active tblptr bytes
  2816  000350                     	endif
  2817  000350  0008               	tblrd		*
  2818  000352  CFF5 F089          	movff	tablat,printf@c
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;doprnt.c: 1523: }
  2822                           
  2823                           ;doprnt.c: 1508: }
  2824                           ;doprnt.c: 1510: break;
  2825  000356  D009               	goto	l2446
  2826  000358                     l2444:
  2827  000358  0100               	movlb	0	; () banked
  2828  00035A  5186               	movf	printf@flag& (0+255),w,b
  2829  00035C  0B80               	andlw	128
  2830                           
  2831                           ; Switch size 1, requested type "space"
  2832                           ; Number of cases is 2, Range of values is 0 to 128
  2833                           ; switch strategies available:
  2834                           ; Name         Instructions Cycles
  2835                           ; simple_byte            7     4 (average)
  2836                           ;	Chosen strategy is simple_byte
  2837  00035E  0A00               	xorlw	0	; case 0
  2838  000360  B4D8               	btfsc	status,2,c
  2839  000362  D7B0               	goto	l2436
  2840  000364  0A80               	xorlw	128	; case 128
  2841  000366  B4D8               	btfsc	status,2,c
  2842  000368  D7D1               	goto	l2438
  2843  00036A                     l2446:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;doprnt.c: 1524: (putch(c) );
  2847  00036A  0100               	movlb	0	; () banked
  2848  00036C  5189               	movf	printf@c& (0+255),w,b
  2849  00036E  EC37  F007         	call	_putch
  2850  000372                     l2448:
  2851  000372  0100               	movlb	0	; () banked
  2852  000374  0783               	decf	printf@prec& (0+255),f,b
  2853  000376  0100               	movlb	0	; () banked
  2854  000378  2983               	incf	printf@prec& (0+255),w,b
  2855  00037A  A4D8               	btfss	status,2,c
  2856  00037C  D7ED               	goto	l2444
  2857  00037E                     l2450:
  2858  00037E  C039  FFF6         	movff	printf@f,tblptrl
  2859  000382  C03A  FFF7         	movff	printf@f+1,tblptrh
  2860  000386  4A39               	infsnz	printf@f,f,c
  2861  000388  2A3A               	incf	printf@f+1,f,c
  2862  00038A                     	if	0	;tblptru may be non-zero
  2863  00038A                     	endif
  2864  00038A                     	if	0	;tblptru may be non-zero
  2865  00038A                     	endif
  2866  00038A  0008               	tblrd		*
  2867  00038C  CFF5 F089          	movff	tablat,printf@c
  2868  000390  0100               	movlb	0	; () banked
  2869  000392  5189               	movf	printf@c& (0+255),w,b
  2870  000394  B4D8               	btfsc	status,2,c
  2871  000396  0012               	return	
  2872  000398  D643               	goto	l2324
  2873  00039A                     __end_of_printf:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           prodh	equ	0xFF4
  2880                           prodl	equ	0xFF3
  2881                           intcon	equ	0xFF2
  2882                           intcon2	equ	0xFF1
  2883                           intcon3	equ	0xFF0
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           indf2	equ	0xFDF
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _putch *****************
  2894 ;; Defined at:
  2895 ;;		line 31 in file "lcd.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  data            1    wreg     unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  data            1   46[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        1 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    5
  2916 ;; This function calls:
  2917 ;;		_lcdNibble
  2918 ;; This function is called by:
  2919 ;;		_printf
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text13
  2924  000E6E                     __ptext13:
  2925                           	opt stack 0
  2926  000E6E                     _putch:
  2927                           	opt stack 23
  2928                           
  2929                           ;incstack = 0
  2930                           ;putch@data stored from wreg
  2931  000E6E  6E2F               	movwf	putch@data,c
  2932                           
  2933                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2934  000E70  848C               	bsf	3980,2,c	;volatile
  2935                           
  2936                           ;lcd.c: 33: lcdNibble(data);
  2937  000E72  502F               	movf	putch@data,w,c
  2938  000E74  ECF2  F005         	call	_lcdNibble
  2939  000E78  0012               	return		;funcret
  2940  000E7A                     __end_of_putch:
  2941                           	opt stack 0
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           intcon2	equ	0xFF1
  2950                           intcon3	equ	0xFF0
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _isdigit *****************
  2961 ;; Defined at:
  2962 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  c               1    wreg     unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  c               1   46[COMRAM] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;		None               void
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;Total ram usage:        3 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    4
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_printf
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text14
  2991  000E20                     __ptext14:
  2992                           	opt stack 0
  2993  000E20                     _isdigit:
  2994                           	opt stack 24
  2995                           
  2996                           ;incstack = 0
  2997                           ;isdigit@c stored from wreg
  2998  000E20  6E2F               	movwf	isdigit@c,c
  2999  000E22  0E00               	movlw	0
  3000  000E24  6E2E               	movwf	_isdigit$524,c
  3001  000E26  0E3A               	movlw	58
  3002  000E28  602F               	cpfslt	isdigit@c,c
  3003  000E2A  D005               	goto	l2270
  3004  000E2C  0E2F               	movlw	47
  3005  000E2E  642F               	cpfsgt	isdigit@c,c
  3006  000E30  D002               	goto	l2270
  3007  000E32  0E01               	movlw	1
  3008  000E34  6E2E               	movwf	_isdigit$524,c
  3009  000E36                     l2270:
  3010  000E36  C02E  F02D         	movff	_isdigit$524,??_isdigit
  3011  000E3A  302D               	rrcf	??_isdigit,w,c
  3012  000E3C  0012               	return	
  3013  000E3E                     __end_of_isdigit:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           intcon	equ	0xFF2
  3022                           intcon2	equ	0xFF1
  3023                           intcon3	equ	0xFF0
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function ___wmul *****************
  3034 ;; Defined at:
  3035 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  multiplier      2   44[COMRAM] unsigned int 
  3038 ;;  multiplicand    2   46[COMRAM] unsigned int 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  product         2   48[COMRAM] unsigned int 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2   44[COMRAM] unsigned int 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0, prodl, prodh
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        6 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    4
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_printf
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text15
  3065  000DD4                     __ptext15:
  3066                           	opt stack 0
  3067  000DD4                     ___wmul:
  3068                           	opt stack 24
  3069                           
  3070                           ;incstack = 0
  3071  000DD4  502D               	movf	___wmul@multiplier,w,c
  3072  000DD6  022F               	mulwf	___wmul@multiplicand,c
  3073  000DD8  CFF3 F031          	movff	prodl,___wmul@product
  3074  000DDC  CFF4 F032          	movff	prodh,___wmul@product+1
  3075  000DE0  502D               	movf	___wmul@multiplier,w,c
  3076  000DE2  0230               	mulwf	___wmul@multiplicand+1,c
  3077  000DE4  50F3               	movf	prodl,w,c
  3078  000DE6  2632               	addwf	___wmul@product+1,f,c
  3079  000DE8  502E               	movf	___wmul@multiplier+1,w,c
  3080  000DEA  022F               	mulwf	___wmul@multiplicand,c
  3081  000DEC  50F3               	movf	prodl,w,c
  3082  000DEE  2632               	addwf	___wmul@product+1,f,c
  3083  000DF0  C031  F02D         	movff	___wmul@product,?___wmul
  3084  000DF4  C032  F02E         	movff	___wmul@product+1,?___wmul+1
  3085  000DF8  0012               	return	
  3086  000DFA                     __end_of___wmul:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           intcon	equ	0xFF2
  3095                           intcon2	equ	0xFF1
  3096                           intcon3	equ	0xFF0
  3097                           postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           indf2	equ	0xFDF
  3100                           postinc2	equ	0xFDE
  3101                           postdec2	equ	0xFDD
  3102                           fsr2h	equ	0xFDA
  3103                           fsr2l	equ	0xFD9
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function ___lwmod *****************
  3107 ;; Defined at:
  3108 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  dividend        2   51[COMRAM] unsigned int 
  3111 ;;  divisor         2   53[COMRAM] unsigned int 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  counter         1   55[COMRAM] unsigned char 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  2   51[COMRAM] unsigned int 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3123 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;Total ram usage:        5 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    4
  3130 ;; This function calls:
  3131 ;;		Nothing
  3132 ;; This function is called by:
  3133 ;;		_printf
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text16
  3138  000CCC                     __ptext16:
  3139                           	opt stack 0
  3140  000CCC                     ___lwmod:
  3141                           	opt stack 24
  3142                           
  3143                           ;incstack = 0
  3144  000CCC  5036               	movf	___lwmod@divisor,w,c
  3145  000CCE  1037               	iorwf	___lwmod@divisor+1,w,c
  3146  000CD0  B4D8               	btfsc	status,2,c
  3147  000CD2  D018               	goto	l703
  3148  000CD4  0E01               	movlw	1
  3149  000CD6  6E38               	movwf	___lwmod@counter,c
  3150  000CD8  D004               	goto	l2308
  3151  000CDA                     l2306:
  3152  000CDA  90D8               	bcf	status,0,c
  3153  000CDC  3636               	rlcf	___lwmod@divisor,f,c
  3154  000CDE  3637               	rlcf	___lwmod@divisor+1,f,c
  3155  000CE0  2A38               	incf	___lwmod@counter,f,c
  3156  000CE2                     l2308:
  3157  000CE2  AE37               	btfss	___lwmod@divisor+1,7,c
  3158  000CE4  D7FA               	goto	l2306
  3159  000CE6                     l2310:
  3160  000CE6  5036               	movf	___lwmod@divisor,w,c
  3161  000CE8  5C34               	subwf	___lwmod@dividend,w,c
  3162  000CEA  5037               	movf	___lwmod@divisor+1,w,c
  3163  000CEC  5835               	subwfb	___lwmod@dividend+1,w,c
  3164  000CEE  A0D8               	btfss	status,0,c
  3165  000CF0  D004               	goto	l2314
  3166  000CF2  5036               	movf	___lwmod@divisor,w,c
  3167  000CF4  5E34               	subwf	___lwmod@dividend,f,c
  3168  000CF6  5037               	movf	___lwmod@divisor+1,w,c
  3169  000CF8  5A35               	subwfb	___lwmod@dividend+1,f,c
  3170  000CFA                     l2314:
  3171  000CFA  90D8               	bcf	status,0,c
  3172  000CFC  3237               	rrcf	___lwmod@divisor+1,f,c
  3173  000CFE  3236               	rrcf	___lwmod@divisor,f,c
  3174  000D00  2E38               	decfsz	___lwmod@counter,f,c
  3175  000D02  D7F1               	goto	l2310
  3176  000D04                     l703:
  3177  000D04  C034  F034         	movff	___lwmod@dividend,?___lwmod
  3178  000D08  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  3179  000D0C  0012               	return		;funcret
  3180  000D0E                     __end_of___lwmod:
  3181                           	opt stack 0
  3182                           tblptru	equ	0xFF8
  3183                           tblptrh	equ	0xFF7
  3184                           tblptrl	equ	0xFF6
  3185                           tablat	equ	0xFF5
  3186                           prodh	equ	0xFF4
  3187                           prodl	equ	0xFF3
  3188                           intcon	equ	0xFF2
  3189                           intcon2	equ	0xFF1
  3190                           intcon3	equ	0xFF0
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function ___lwdiv *****************
  3201 ;; Defined at:
  3202 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  dividend        2   44[COMRAM] unsigned int 
  3205 ;;  divisor         2   46[COMRAM] unsigned int 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  quotient        2   49[COMRAM] unsigned int 
  3208 ;;  counter         1   48[COMRAM] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  2   44[COMRAM] unsigned int 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        7 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    4
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_printf
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text17
  3233  000B40                     __ptext17:
  3234                           	opt stack 0
  3235  000B40                     ___lwdiv:
  3236                           	opt stack 24
  3237                           
  3238                           ;incstack = 0
  3239  000B40  0E00               	movlw	0
  3240  000B42  6E33               	movwf	___lwdiv@quotient+1,c
  3241  000B44  0E00               	movlw	0
  3242  000B46  6E32               	movwf	___lwdiv@quotient,c
  3243  000B48  502F               	movf	___lwdiv@divisor,w,c
  3244  000B4A  1030               	iorwf	___lwdiv@divisor+1,w,c
  3245  000B4C  B4D8               	btfsc	status,2,c
  3246  000B4E  D01C               	goto	l693
  3247  000B50  0E01               	movlw	1
  3248  000B52  6E31               	movwf	___lwdiv@counter,c
  3249  000B54  D004               	goto	l2288
  3250  000B56                     l2286:
  3251  000B56  90D8               	bcf	status,0,c
  3252  000B58  362F               	rlcf	___lwdiv@divisor,f,c
  3253  000B5A  3630               	rlcf	___lwdiv@divisor+1,f,c
  3254  000B5C  2A31               	incf	___lwdiv@counter,f,c
  3255  000B5E                     l2288:
  3256  000B5E  AE30               	btfss	___lwdiv@divisor+1,7,c
  3257  000B60  D7FA               	goto	l2286
  3258  000B62                     l2290:
  3259  000B62  90D8               	bcf	status,0,c
  3260  000B64  3632               	rlcf	___lwdiv@quotient,f,c
  3261  000B66  3633               	rlcf	___lwdiv@quotient+1,f,c
  3262  000B68  502F               	movf	___lwdiv@divisor,w,c
  3263  000B6A  5C2D               	subwf	___lwdiv@dividend,w,c
  3264  000B6C  5030               	movf	___lwdiv@divisor+1,w,c
  3265  000B6E  582E               	subwfb	___lwdiv@dividend+1,w,c
  3266  000B70  A0D8               	btfss	status,0,c
  3267  000B72  D005               	goto	l2298
  3268  000B74  502F               	movf	___lwdiv@divisor,w,c
  3269  000B76  5E2D               	subwf	___lwdiv@dividend,f,c
  3270  000B78  5030               	movf	___lwdiv@divisor+1,w,c
  3271  000B7A  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  3272  000B7C  8032               	bsf	___lwdiv@quotient,0,c
  3273  000B7E                     l2298:
  3274  000B7E  90D8               	bcf	status,0,c
  3275  000B80  3230               	rrcf	___lwdiv@divisor+1,f,c
  3276  000B82  322F               	rrcf	___lwdiv@divisor,f,c
  3277  000B84  2E31               	decfsz	___lwdiv@counter,f,c
  3278  000B86  D7ED               	goto	l2290
  3279  000B88                     l693:
  3280  000B88  C032  F02D         	movff	___lwdiv@quotient,?___lwdiv
  3281  000B8C  C033  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3282  000B90  0012               	return		;funcret
  3283  000B92                     __end_of___lwdiv:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           intcon	equ	0xFF2
  3292                           intcon2	equ	0xFF1
  3293                           intcon3	equ	0xFF0
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function _lcdInst *****************
  3304 ;; Defined at:
  3305 ;;		line 26 in file "lcd.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  data            1    wreg     unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  data            1   46[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;Total ram usage:        1 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    5
  3326 ;; This function calls:
  3327 ;;		_lcdNibble
  3328 ;; This function is called by:
  3329 ;;		_initLCD
  3330 ;;		_standby
  3331 ;;		_date_time
  3332 ;;		_bottle_count
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text18
  3337  000E7A                     __ptext18:
  3338                           	opt stack 0
  3339  000E7A                     _lcdInst:
  3340                           	opt stack 24
  3341                           
  3342                           ;incstack = 0
  3343                           ;lcdInst@data stored from wreg
  3344  000E7A  6E2F               	movwf	lcdInst@data,c
  3345                           
  3346                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3347  000E7C  948C               	bcf	3980,2,c	;volatile
  3348                           
  3349                           ;lcd.c: 28: lcdNibble(data);
  3350  000E7E  502F               	movf	lcdInst@data,w,c
  3351  000E80  ECF2  F005         	call	_lcdNibble
  3352  000E84  0012               	return		;funcret
  3353  000E86                     __end_of_lcdInst:
  3354                           	opt stack 0
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           intcon2	equ	0xFF1
  3363                           intcon3	equ	0xFF0
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           indf2	equ	0xFDF
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _lcdNibble *****************
  3374 ;; Defined at:
  3375 ;;		line 36 in file "lcd.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  data            1    wreg     unsigned char 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  data            1   45[COMRAM] unsigned char 
  3380 ;;  temp            1   44[COMRAM] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        2 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    4
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_lcdInst
  3401 ;;		_putch
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text19
  3406  000BE4                     __ptext19:
  3407                           	opt stack 0
  3408  000BE4                     _lcdNibble:
  3409                           	opt stack 23
  3410                           
  3411                           ;incstack = 0
  3412                           ;lcdNibble@data stored from wreg
  3413  000BE4  6E2E               	movwf	lcdNibble@data,c
  3414                           
  3415                           ;lcd.c: 38: char temp = data & 0xF0;
  3416  000BE6  502E               	movf	lcdNibble@data,w,c
  3417  000BE8  0BF0               	andlw	240
  3418  000BEA  6E2D               	movwf	lcdNibble@temp,c
  3419                           
  3420                           ;lcd.c: 39: LATD = LATD & 0x0F;
  3421  000BEC  508C               	movf	3980,w,c	;volatile
  3422  000BEE  0B0F               	andlw	15
  3423  000BF0  6E8C               	movwf	3980,c	;volatile
  3424                           
  3425                           ;lcd.c: 40: LATD = temp | LATD;
  3426  000BF2  502D               	movf	lcdNibble@temp,w,c
  3427  000BF4  108C               	iorwf	3980,w,c	;volatile
  3428  000BF6  6E8C               	movwf	3980,c	;volatile
  3429                           
  3430                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  3431  000BF8  968C               	bcf	3980,3,c	;volatile
  3432                           
  3433                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3434  000BFA  0E19               	movlw	25
  3435  000BFC                     u2027:
  3436  000BFC  2EE8               	decfsz	wreg,f,c
  3437  000BFE  D7FE               	bra	u2027
  3438                           
  3439                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  3440  000C00  868C               	bsf	3980,3,c	;volatile
  3441                           
  3442                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3443  000C02  0E19               	movlw	25
  3444  000C04                     u2037:
  3445  000C04  2EE8               	decfsz	wreg,f,c
  3446  000C06  D7FE               	bra	u2037
  3447                           
  3448                           ;lcd.c: 47: data = data << 4;
  3449  000C08  382E               	swapf	lcdNibble@data,w,c
  3450  000C0A  0BF0               	andlw	240
  3451  000C0C  6E2E               	movwf	lcdNibble@data,c
  3452                           
  3453                           ;lcd.c: 49: temp = data & 0xF0;
  3454  000C0E  502E               	movf	lcdNibble@data,w,c
  3455  000C10  0BF0               	andlw	240
  3456  000C12  6E2D               	movwf	lcdNibble@temp,c
  3457                           
  3458                           ;lcd.c: 50: LATD = LATD & 0x0F;
  3459  000C14  508C               	movf	3980,w,c	;volatile
  3460  000C16  0B0F               	andlw	15
  3461  000C18  6E8C               	movwf	3980,c	;volatile
  3462                           
  3463                           ;lcd.c: 51: LATD = temp | LATD;
  3464  000C1A  502D               	movf	lcdNibble@temp,w,c
  3465  000C1C  108C               	iorwf	3980,w,c	;volatile
  3466  000C1E  6E8C               	movwf	3980,c	;volatile
  3467                           
  3468                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  3469  000C20  968C               	bcf	3980,3,c	;volatile
  3470                           
  3471                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3472  000C22  0E19               	movlw	25
  3473  000C24                     u2047:
  3474  000C24  2EE8               	decfsz	wreg,f,c
  3475  000C26  D7FE               	bra	u2047
  3476                           
  3477                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  3478  000C28  868C               	bsf	3980,3,c	;volatile
  3479                           
  3480                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3481  000C2A  0E19               	movlw	25
  3482  000C2C                     u2057:
  3483  000C2C  2EE8               	decfsz	wreg,f,c
  3484  000C2E  D7FE               	bra	u2057
  3485  000C30  0012               	return		;funcret
  3486  000C32                     __end_of_lcdNibble:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           intcon2	equ	0xFF1
  3496                           intcon3	equ	0xFF0
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function ___awmod *****************
  3507 ;; Defined at:
  3508 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  dividend        2   44[COMRAM] int 
  3511 ;;  divisor         2   46[COMRAM] int 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  sign            1   49[COMRAM] unsigned char 
  3514 ;;  counter         1   48[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;                  2   44[COMRAM] int 
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        6 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    4
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_bottle_count
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text20
  3539  000A76                     __ptext20:
  3540                           	opt stack 0
  3541  000A76                     ___awmod:
  3542                           	opt stack 25
  3543                           
  3544                           ;incstack = 0
  3545  000A76  0E00               	movlw	0
  3546  000A78  6E32               	movwf	___awmod@sign,c
  3547  000A7A  AE2E               	btfss	___awmod@dividend+1,7,c
  3548  000A7C  D006               	goto	l1830
  3549  000A7E  6C2D               	negf	___awmod@dividend,c
  3550  000A80  1E2E               	comf	___awmod@dividend+1,f,c
  3551  000A82  B0D8               	btfsc	status,0,c
  3552  000A84  2A2E               	incf	___awmod@dividend+1,f,c
  3553  000A86  0E01               	movlw	1
  3554  000A88  6E32               	movwf	___awmod@sign,c
  3555  000A8A                     l1830:
  3556  000A8A  AE30               	btfss	___awmod@divisor+1,7,c
  3557  000A8C  D004               	goto	l1834
  3558  000A8E  6C2F               	negf	___awmod@divisor,c
  3559  000A90  1E30               	comf	___awmod@divisor+1,f,c
  3560  000A92  B0D8               	btfsc	status,0,c
  3561  000A94  2A30               	incf	___awmod@divisor+1,f,c
  3562  000A96                     l1834:
  3563  000A96  502F               	movf	___awmod@divisor,w,c
  3564  000A98  1030               	iorwf	___awmod@divisor+1,w,c
  3565  000A9A  B4D8               	btfsc	status,2,c
  3566  000A9C  D018               	goto	l1850
  3567  000A9E  0E01               	movlw	1
  3568  000AA0  6E31               	movwf	___awmod@counter,c
  3569  000AA2  D004               	goto	l1840
  3570  000AA4                     l1838:
  3571  000AA4  90D8               	bcf	status,0,c
  3572  000AA6  362F               	rlcf	___awmod@divisor,f,c
  3573  000AA8  3630               	rlcf	___awmod@divisor+1,f,c
  3574  000AAA  2A31               	incf	___awmod@counter,f,c
  3575  000AAC                     l1840:
  3576  000AAC  AE30               	btfss	___awmod@divisor+1,7,c
  3577  000AAE  D7FA               	goto	l1838
  3578  000AB0                     l1842:
  3579  000AB0  502F               	movf	___awmod@divisor,w,c
  3580  000AB2  5C2D               	subwf	___awmod@dividend,w,c
  3581  000AB4  5030               	movf	___awmod@divisor+1,w,c
  3582  000AB6  582E               	subwfb	___awmod@dividend+1,w,c
  3583  000AB8  A0D8               	btfss	status,0,c
  3584  000ABA  D004               	goto	l1846
  3585  000ABC  502F               	movf	___awmod@divisor,w,c
  3586  000ABE  5E2D               	subwf	___awmod@dividend,f,c
  3587  000AC0  5030               	movf	___awmod@divisor+1,w,c
  3588  000AC2  5A2E               	subwfb	___awmod@dividend+1,f,c
  3589  000AC4                     l1846:
  3590  000AC4  90D8               	bcf	status,0,c
  3591  000AC6  3230               	rrcf	___awmod@divisor+1,f,c
  3592  000AC8  322F               	rrcf	___awmod@divisor,f,c
  3593  000ACA  2E31               	decfsz	___awmod@counter,f,c
  3594  000ACC  D7F1               	goto	l1842
  3595  000ACE                     l1850:
  3596  000ACE  5032               	movf	___awmod@sign,w,c
  3597  000AD0  B4D8               	btfsc	status,2,c
  3598  000AD2  D004               	goto	l1854
  3599  000AD4  6C2D               	negf	___awmod@dividend,c
  3600  000AD6  1E2E               	comf	___awmod@dividend+1,f,c
  3601  000AD8  B0D8               	btfsc	status,0,c
  3602  000ADA  2A2E               	incf	___awmod@dividend+1,f,c
  3603  000ADC                     l1854:
  3604  000ADC  C02D  F02D         	movff	___awmod@dividend,?___awmod
  3605  000AE0  C02E  F02E         	movff	___awmod@dividend+1,?___awmod+1
  3606  000AE4  0012               	return	
  3607  000AE6                     __end_of___awmod:
  3608                           	opt stack 0
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           prodh	equ	0xFF4
  3614                           prodl	equ	0xFF3
  3615                           intcon	equ	0xFF2
  3616                           intcon2	equ	0xFF1
  3617                           intcon3	equ	0xFF0
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _I2C_Master_Init *****************
  3628 ;; Defined at:
  3629 ;;		line 13 in file "I2C.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  c               4   57[COMRAM] const unsigned long 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;Total ram usage:        8 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    5
  3650 ;; This function calls:
  3651 ;;		___lldiv
  3652 ;; This function is called by:
  3653 ;;		_main
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text21
  3658  000AE6                     __ptext21:
  3659                           	opt stack 0
  3660  000AE6                     _I2C_Master_Init:
  3661                           	opt stack 25
  3662                           
  3663                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3664                           
  3665                           ;incstack = 0
  3666  000AE6  0E00               	movlw	0
  3667  000AE8  6EC7               	movwf	4039,c	;volatile
  3668                           
  3669                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3670  000AEA  0E28               	movlw	40
  3671  000AEC  6EC6               	movwf	4038,c	;volatile
  3672                           
  3673                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3674  000AEE  0E00               	movlw	0
  3675  000AF0  6EC5               	movwf	4037,c	;volatile
  3676                           
  3677                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3678  000AF2  0E80               	movlw	128
  3679  000AF4  6E2D               	movwf	___lldiv@dividend,c
  3680  000AF6  0E96               	movlw	150
  3681  000AF8  6E2E               	movwf	___lldiv@dividend+1,c
  3682  000AFA  0E98               	movlw	152
  3683  000AFC  6E2F               	movwf	___lldiv@dividend+2,c
  3684  000AFE  0E00               	movlw	0
  3685  000B00  6E30               	movwf	___lldiv@dividend+3,c
  3686  000B02  C03A  F03E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3687  000B06  C03B  F03F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3688  000B0A  C03C  F040         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3689  000B0E  C03D  F041         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3690  000B12  0E02               	movlw	2
  3691  000B14                     u1345:
  3692  000B14  90D8               	bcf	status,0,c
  3693  000B16  363E               	rlcf	??_I2C_Master_Init,f,c
  3694  000B18  363F               	rlcf	??_I2C_Master_Init+1,f,c
  3695  000B1A  3640               	rlcf	??_I2C_Master_Init+2,f,c
  3696  000B1C  3641               	rlcf	??_I2C_Master_Init+3,f,c
  3697  000B1E  2EE8               	decfsz	wreg,f,c
  3698  000B20  D7F9               	goto	u1345
  3699  000B22  C03E  F031         	movff	??_I2C_Master_Init,___lldiv@divisor
  3700  000B26  C03F  F032         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3701  000B2A  C040  F033         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3702  000B2E  C041  F034         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3703  000B32  ECFA  F004         	call	___lldiv	;wreg free
  3704  000B36  042D               	decf	?___lldiv,w,c
  3705  000B38  6EC8               	movwf	4040,c	;volatile
  3706                           
  3707                           ;I2C.c: 20: TRISC3 = 1;
  3708  000B3A  8694               	bsf	3988,3,c	;volatile
  3709                           
  3710                           ;I2C.c: 21: TRISC4 = 1;
  3711  000B3C  8894               	bsf	3988,4,c	;volatile
  3712  000B3E  0012               	return		;funcret
  3713  000B40                     __end_of_I2C_Master_Init:
  3714                           	opt stack 0
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           intcon	equ	0xFF2
  3722                           intcon2	equ	0xFF1
  3723                           intcon3	equ	0xFF0
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           indf2	equ	0xFDF
  3727                           postinc2	equ	0xFDE
  3728                           postdec2	equ	0xFDD
  3729                           fsr2h	equ	0xFDA
  3730                           fsr2l	equ	0xFD9
  3731                           status	equ	0xFD8
  3732                           
  3733 ;; *************** function ___lldiv *****************
  3734 ;; Defined at:
  3735 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;  dividend        4   44[COMRAM] unsigned long 
  3738 ;;  divisor         4   48[COMRAM] unsigned long 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;  quotient        4   52[COMRAM] unsigned long 
  3741 ;;  counter         1   56[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  4   44[COMRAM] unsigned long 
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:       13 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    4
  3758 ;; This function calls:
  3759 ;;		Nothing
  3760 ;; This function is called by:
  3761 ;;		_I2C_Master_Init
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text22
  3766  0009F4                     __ptext22:
  3767                           	opt stack 0
  3768  0009F4                     ___lldiv:
  3769                           	opt stack 25
  3770                           
  3771                           ;incstack = 0
  3772  0009F4  0E00               	movlw	0
  3773  0009F6  6E35               	movwf	___lldiv@quotient,c
  3774  0009F8  0E00               	movlw	0
  3775  0009FA  6E36               	movwf	___lldiv@quotient+1,c
  3776  0009FC  0E00               	movlw	0
  3777  0009FE  6E37               	movwf	___lldiv@quotient+2,c
  3778  000A00  0E00               	movlw	0
  3779  000A02  6E38               	movwf	___lldiv@quotient+3,c
  3780  000A04  5031               	movf	___lldiv@divisor,w,c
  3781  000A06  1032               	iorwf	___lldiv@divisor+1,w,c
  3782  000A08  1033               	iorwf	___lldiv@divisor+2,w,c
  3783  000A0A  1034               	iorwf	___lldiv@divisor+3,w,c
  3784  000A0C  B4D8               	btfsc	status,2,c
  3785  000A0E  D02A               	goto	l640
  3786  000A10  0E01               	movlw	1
  3787  000A12  6E39               	movwf	___lldiv@counter,c
  3788  000A14  D006               	goto	l1866
  3789  000A16                     l1864:
  3790  000A16  90D8               	bcf	status,0,c
  3791  000A18  3631               	rlcf	___lldiv@divisor,f,c
  3792  000A1A  3632               	rlcf	___lldiv@divisor+1,f,c
  3793  000A1C  3633               	rlcf	___lldiv@divisor+2,f,c
  3794  000A1E  3634               	rlcf	___lldiv@divisor+3,f,c
  3795  000A20  2A39               	incf	___lldiv@counter,f,c
  3796  000A22                     l1866:
  3797  000A22  AE34               	btfss	___lldiv@divisor+3,7,c
  3798  000A24  D7F8               	goto	l1864
  3799  000A26                     l1868:
  3800  000A26  90D8               	bcf	status,0,c
  3801  000A28  3635               	rlcf	___lldiv@quotient,f,c
  3802  000A2A  3636               	rlcf	___lldiv@quotient+1,f,c
  3803  000A2C  3637               	rlcf	___lldiv@quotient+2,f,c
  3804  000A2E  3638               	rlcf	___lldiv@quotient+3,f,c
  3805  000A30  5031               	movf	___lldiv@divisor,w,c
  3806  000A32  5C2D               	subwf	___lldiv@dividend,w,c
  3807  000A34  5032               	movf	___lldiv@divisor+1,w,c
  3808  000A36  582E               	subwfb	___lldiv@dividend+1,w,c
  3809  000A38  5033               	movf	___lldiv@divisor+2,w,c
  3810  000A3A  582F               	subwfb	___lldiv@dividend+2,w,c
  3811  000A3C  5034               	movf	___lldiv@divisor+3,w,c
  3812  000A3E  5830               	subwfb	___lldiv@dividend+3,w,c
  3813  000A40  A0D8               	btfss	status,0,c
  3814  000A42  D009               	goto	l1876
  3815  000A44  5031               	movf	___lldiv@divisor,w,c
  3816  000A46  5E2D               	subwf	___lldiv@dividend,f,c
  3817  000A48  5032               	movf	___lldiv@divisor+1,w,c
  3818  000A4A  5A2E               	subwfb	___lldiv@dividend+1,f,c
  3819  000A4C  5033               	movf	___lldiv@divisor+2,w,c
  3820  000A4E  5A2F               	subwfb	___lldiv@dividend+2,f,c
  3821  000A50  5034               	movf	___lldiv@divisor+3,w,c
  3822  000A52  5A30               	subwfb	___lldiv@dividend+3,f,c
  3823  000A54  8035               	bsf	___lldiv@quotient,0,c
  3824  000A56                     l1876:
  3825  000A56  90D8               	bcf	status,0,c
  3826  000A58  3234               	rrcf	___lldiv@divisor+3,f,c
  3827  000A5A  3233               	rrcf	___lldiv@divisor+2,f,c
  3828  000A5C  3232               	rrcf	___lldiv@divisor+1,f,c
  3829  000A5E  3231               	rrcf	___lldiv@divisor,f,c
  3830  000A60  2E39               	decfsz	___lldiv@counter,f,c
  3831  000A62  D7E1               	goto	l1868
  3832  000A64                     l640:
  3833  000A64  C035  F02D         	movff	___lldiv@quotient,?___lldiv
  3834  000A68  C036  F02E         	movff	___lldiv@quotient+1,?___lldiv+1
  3835  000A6C  C037  F02F         	movff	___lldiv@quotient+2,?___lldiv+2
  3836  000A70  C038  F030         	movff	___lldiv@quotient+3,?___lldiv+3
  3837  000A74  0012               	return		;funcret
  3838  000A76                     __end_of___lldiv:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           intcon2	equ	0xFF1
  3848                           intcon3	equ	0xFF0
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _isr *****************
  3859 ;; Defined at:
  3860 ;;		line 98 in file "main.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  i               1   43[COMRAM] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;Total ram usage:       16 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    3
  3881 ;; This function calls:
  3882 ;;		i2_lcdInst
  3883 ;;		i2_printf
  3884 ;; This function is called by:
  3885 ;;		Interrupt level 2
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	intcode
  3890  000008                     __pintcode:
  3891                           	opt stack 0
  3892  000008                     _isr:
  3893                           	opt stack 23
  3894                           
  3895                           ;incstack = 0
  3896  000008  8252               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3897  00000A  EDE0  F003         	call	int_func,f	;refresh shadow registers
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           intcon	equ	0xFF2
  3905                           intcon2	equ	0xFF1
  3906                           intcon3	equ	0xFF0
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           indf2	equ	0xFDF
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916                           	psect	intcode_body
  3917  0007C0                     __pintcode_body:
  3918                           	opt stack 23
  3919  0007C0                     int_func:
  3920                           	opt stack 23
  3921  0007C0  0006               	pop		; remove dummy address from shadow register refresh
  3922  0007C2  CFFA F01E          	movff	pclath,??_isr+1
  3923  0007C6  CFFB F01F          	movff	pclatu,??_isr+2
  3924  0007CA  CFE9 F020          	movff	fsr0l,??_isr+3
  3925  0007CE  CFEA F021          	movff	fsr0h,??_isr+4
  3926  0007D2  CFE1 F022          	movff	fsr1l,??_isr+5
  3927  0007D6  CFE2 F023          	movff	fsr1h,??_isr+6
  3928  0007DA  CFD9 F024          	movff	fsr2l,??_isr+7
  3929  0007DE  CFDA F025          	movff	fsr2h,??_isr+8
  3930  0007E2  CFF3 F026          	movff	prodl,??_isr+9
  3931  0007E6  CFF4 F027          	movff	prodh,??_isr+10
  3932  0007EA  CFF6 F028          	movff	tblptrl,??_isr+11
  3933  0007EE  CFF7 F029          	movff	tblptrh,??_isr+12
  3934  0007F2  CFF8 F02A          	movff	tblptru,??_isr+13
  3935  0007F6  CFF5 F02B          	movff	tablat,??_isr+14
  3936                           
  3937                           ;main.c: 99: if (INT1IF) {
  3938  0007FA  B0F0               	btfsc	intcon3,0,c	;volatile
  3939  0007FC  D00F               	goto	i2l2204
  3940  0007FE  D019               	goto	i2l2206
  3941  000800                     i2l2192:
  3942                           
  3943                           ;main.c: 102: curr_state = STANDBY;
  3944  000800  0E00               	movlw	0
  3945  000802  D001               	goto	L1
  3946  000804                     i2l2194:
  3947                           
  3948                           ;main.c: 105: curr_state = DATETIME;
  3949  000804  0E02               	movlw	2
  3950  000806                     L1:
  3951  000806  6E4F               	movwf	_curr_state,c
  3952                           
  3953                           ;main.c: 106: break;
  3954  000808  D02D               	goto	i2l177
  3955  00080A                     i2l2196:
  3956                           
  3957                           ;main.c: 108: curr_state = BOTTLECOUNT;
  3958  00080A  0E03               	movlw	3
  3959  00080C  6E4F               	movwf	_curr_state,c
  3960                           
  3961                           ;main.c: 109: bottle_count_disp += 1;
  3962  00080E  4A50               	infsnz	_bottle_count_disp,f,c
  3963  000810  2A51               	incf	_bottle_count_disp+1,f,c
  3964  000812                     i2l2200:
  3965  000812  0E1F               	movlw	31
  3966  000814  1881               	xorwf	3969,w,c	;volatile
  3967  000816  A4D8               	btfss	status,2,c
  3968  000818  D025               	goto	i2l177
  3969  00081A  D7FB               	goto	i2l2200
  3970  00081C                     i2l2204:
  3971  00081C  5081               	movf	3969,w,c	;volatile
  3972                           
  3973                           ; Switch size 1, requested type "space"
  3974                           ; Number of cases is 3, Range of values is 31 to 239
  3975                           ; switch strategies available:
  3976                           ; Name         Instructions Cycles
  3977                           ; simple_byte           10     6 (average)
  3978                           ;	Chosen strategy is simple_byte
  3979  00081E  0A1F               	xorlw	31	; case 31
  3980  000820  B4D8               	btfsc	status,2,c
  3981  000822  D7F3               	goto	i2l2196
  3982  000824  0A20               	xorlw	32	; case 63
  3983  000826  B4D8               	btfsc	status,2,c
  3984  000828  D7ED               	goto	i2l2194
  3985  00082A  0AD0               	xorlw	208	; case 239
  3986  00082C  B4D8               	btfsc	status,2,c
  3987  00082E  D7E8               	goto	i2l2192
  3988                           
  3989                           ;main.c: 115: }
  3990  000830  D019               	goto	i2l177
  3991  000832                     i2l2206:
  3992                           
  3993                           ;main.c: 118: lcdInst(0b10000000);
  3994  000832  0E80               	movlw	128
  3995  000834  EC49  F007         	call	i2_lcdInst
  3996                           
  3997                           ;main.c: 119: printf("bad interrupt");
  3998  000838  0EE6               	movlw	low STR_1
  3999  00083A  6E0D               	movwf	i2printf@f,c
  4000  00083C  0EFF               	movlw	high STR_1
  4001  00083E  6E0E               	movwf	i2printf@f+1,c
  4002  000840  ECCD  F001         	call	i2_printf	;wreg free
  4003                           
  4004                           ;main.c: 120: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  4005  000844  0E00               	movlw	0
  4006  000846  6E2C               	movwf	isr@i,c
  4007  000848                     i2l2212:
  4008  000848  0E63               	movlw	99
  4009  00084A  642C               	cpfsgt	isr@i,c
  4010  00084C  D001               	goto	i2l2216
  4011  00084E  D7F1               	goto	i2l2206
  4012  000850                     i2l2216:
  4013  000850  0E21               	movlw	33
  4014  000852  6E1D               	movwf	??_isr& (0+255),c
  4015  000854  0E76               	movlw	118
  4016  000856                     i2u206_47:
  4017  000856  2EE8               	decfsz	wreg,f,c
  4018  000858  D7FE               	bra	i2u206_47
  4019  00085A  2E1D               	decfsz	??_isr& (0+255),f,c
  4020  00085C  D7FC               	bra	i2u206_47
  4021  00085E  D000               	nop2	
  4022  000860  2A2C               	incf	isr@i,f,c
  4023  000862  D7F2               	goto	i2l2212
  4024  000864                     i2l177:
  4025                           
  4026                           ;main.c: 121: }
  4027                           ;main.c: 122: }
  4028                           ;main.c: 123: INT1IF = 0;
  4029  000864  90F0               	bcf	intcon3,0,c	;volatile
  4030                           
  4031                           ;main.c: 124: return;
  4032  000866  C02B  FFF5         	movff	??_isr+14,tablat
  4033  00086A  C02A  FFF8         	movff	??_isr+13,tblptru
  4034  00086E  C029  FFF7         	movff	??_isr+12,tblptrh
  4035  000872  C028  FFF6         	movff	??_isr+11,tblptrl
  4036  000876  C027  FFF4         	movff	??_isr+10,prodh
  4037  00087A  C026  FFF3         	movff	??_isr+9,prodl
  4038  00087E  C025  FFDA         	movff	??_isr+8,fsr2h
  4039  000882  C024  FFD9         	movff	??_isr+7,fsr2l
  4040  000886  C023  FFE2         	movff	??_isr+6,fsr1h
  4041  00088A  C022  FFE1         	movff	??_isr+5,fsr1l
  4042  00088E  C021  FFEA         	movff	??_isr+4,fsr0h
  4043  000892  C020  FFE9         	movff	??_isr+3,fsr0l
  4044  000896  C01F  FFFB         	movff	??_isr+2,pclatu
  4045  00089A  C01E  FFFA         	movff	??_isr+1,pclath
  4046  00089E  9252               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4047  0008A0  0011               	retfie		f
  4048  0008A2                     __end_of_isr:
  4049                           	opt stack 0
  4050                           pclatu	equ	0xFFB
  4051                           pclath	equ	0xFFA
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           intcon2	equ	0xFF1
  4060                           intcon3	equ	0xFF0
  4061                           postinc0	equ	0xFEE
  4062                           fsr0h	equ	0xFEA
  4063                           fsr0l	equ	0xFE9
  4064                           wreg	equ	0xFE8
  4065                           fsr1h	equ	0xFE2
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function i2_printf *****************
  4075 ;; Defined at:
  4076 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4079 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  4080 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  4081 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  4082 ;;		 -> STR_4(23), STR_3(17), STR_2(17), STR_1(14), 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  printf          4    0        struct .
  4085 ;;  printf          3    0        PTR const unsigned char 
  4086 ;;  printf          2   25[COMRAM] int 
  4087 ;;  printf          2   22[COMRAM] unsigned int 
  4088 ;;  printf          2   19[COMRAM] PTR void [1]
  4089 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4090 ;;  printf          2    0        unsigned int 
  4091 ;;  printf          1   27[COMRAM] char 
  4092 ;;  printf          1   24[COMRAM] unsigned char 
  4093 ;;  printf          1   21[COMRAM] char 
  4094 ;;  printf          1   18[COMRAM] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  2   12[COMRAM] int 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:       16 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    2
  4111 ;; This function calls:
  4112 ;;		i2___lwdiv
  4113 ;;		i2___lwmod
  4114 ;;		i2___wmul
  4115 ;;		i2_isdigit
  4116 ;;		i2_putch
  4117 ;; This function is called by:
  4118 ;;		_isr
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text24
  4123  00039A                     __ptext24:
  4124                           	opt stack 0
  4125  00039A                     i2_printf:
  4126                           	opt stack 23
  4127                           
  4128                           ;doprnt.c: 466: va_list ap;
  4129                           ;doprnt.c: 499: signed char c;
  4130                           ;doprnt.c: 501: int width;
  4131                           ;doprnt.c: 506: signed char prec;
  4132                           ;doprnt.c: 508: unsigned char flag;
  4133                           ;doprnt.c: 523: union {
  4134                           ;doprnt.c: 524: unsigned long vd;
  4135                           ;doprnt.c: 525: double integ;
  4136                           ;doprnt.c: 526: } tmpval;
  4137                           ;doprnt.c: 528: unsigned int val;
  4138                           ;doprnt.c: 529: unsigned len;
  4139                           ;doprnt.c: 530: const char * cp;
  4140                           ;doprnt.c: 533: *ap = __va_start();
  4141                           
  4142                           ;incstack = 0
  4143  00039A  0E0F               	movlw	low (?i2_printf+2)
  4144  00039C  6E14               	movwf	i2printf@ap,c
  4145  00039E  0E00               	movlw	high (?i2_printf+2)
  4146  0003A0  6E15               	movwf	i2printf@ap+1,c
  4147                           
  4148                           ;doprnt.c: 536: while(c = *f++) {
  4149  0003A2  D174               	goto	i2l2154
  4150  0003A4                     i2l2028:
  4151                           
  4152                           ;doprnt.c: 538: if(c != '%')
  4153  0003A4  0E25               	movlw	37
  4154  0003A6  181C               	xorwf	i2printf@c,w,c
  4155  0003A8  B4D8               	btfsc	status,2,c
  4156  0003AA  D004               	goto	i2l2032
  4157                           
  4158                           ;doprnt.c: 540: {
  4159                           ;doprnt.c: 541: (putch(c) );
  4160  0003AC  501C               	movf	i2printf@c,w,c
  4161  0003AE  EC43  F007         	call	i2_putch
  4162                           
  4163                           ;doprnt.c: 542: continue;
  4164  0003B2  D16C               	goto	i2l2154
  4165  0003B4                     i2l2032:
  4166                           
  4167                           ;doprnt.c: 543: }
  4168                           ;doprnt.c: 546: width = 0;
  4169  0003B4  0E00               	movlw	0
  4170  0003B6  6E1B               	movwf	i2printf@width+1,c
  4171  0003B8  0E00               	movlw	0
  4172  0003BA  6E1A               	movwf	i2printf@width,c
  4173                           
  4174                           ;doprnt.c: 548: flag = 0;
  4175  0003BC  0E00               	movlw	0
  4176  0003BE  6E19               	movwf	i2printf@flag,c
  4177                           
  4178                           ;doprnt.c: 551: switch(*f) {
  4179                           
  4180                           ;doprnt.c: 550: for(;;) {
  4181  0003C0  D003               	goto	i2l2038
  4182  0003C2                     i2l2034:
  4183                           
  4184                           ;doprnt.c: 580: flag |= 0x04;
  4185  0003C2  8419               	bsf	i2printf@flag,2,c
  4186                           
  4187                           ;doprnt.c: 581: f++;
  4188  0003C4  4A0D               	infsnz	i2printf@f,f,c
  4189  0003C6  2A0E               	incf	i2printf@f+1,f,c
  4190  0003C8                     i2l2038:
  4191  0003C8  C00D  FFF6         	movff	i2printf@f,tblptrl
  4192  0003CC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4193  0003D0                     	if	0	;tblptru may be non-zero
  4194  0003D0                     	endif
  4195  0003D0                     	if	0	;tblptru may be non-zero
  4196  0003D0                     	endif
  4197  0003D0  0008               	tblrd		*
  4198  0003D2  50F5               	movf	tablat,w,c
  4199                           
  4200                           ; Switch size 1, requested type "space"
  4201                           ; Number of cases is 1, Range of values is 48 to 48
  4202                           ; switch strategies available:
  4203                           ; Name         Instructions Cycles
  4204                           ; simple_byte            4     3 (average)
  4205                           ;	Chosen strategy is simple_byte
  4206  0003D4  0A30               	xorlw	48	; case 48
  4207  0003D6  B4D8               	btfsc	status,2,c
  4208  0003D8  D7F4               	goto	i2l2034
  4209                           
  4210                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4211                           
  4212                           ;doprnt.c: 586: }
  4213                           
  4214                           ;doprnt.c: 585: break;
  4215  0003DA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4216  0003DE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4217  0003E2                     	if	0	;tblptru may be non-zero
  4218  0003E2                     	endif
  4219  0003E2                     	if	0	;tblptru may be non-zero
  4220  0003E2                     	endif
  4221  0003E2  0008               	tblrd		*
  4222  0003E4  50F5               	movf	tablat,w,c
  4223  0003E6  EC1F  F007         	call	i2_isdigit
  4224  0003EA  A0D8               	btfss	status,0,c
  4225  0003EC  D035               	goto	i2l2056
  4226                           
  4227                           ;doprnt.c: 598: width = 0;
  4228  0003EE  0E00               	movlw	0
  4229  0003F0  6E1B               	movwf	i2printf@width+1,c
  4230  0003F2  0E00               	movlw	0
  4231  0003F4  6E1A               	movwf	i2printf@width,c
  4232  0003F6                     i2l2044:
  4233                           
  4234                           ;doprnt.c: 600: width *= 10;
  4235  0003F6  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4236  0003FA  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4237  0003FE  0E00               	movlw	0
  4238  000400  6E04               	movwf	i2___wmul@multiplicand+1,c
  4239  000402  0E0A               	movlw	10
  4240  000404  6E03               	movwf	i2___wmul@multiplicand,c
  4241  000406  ECFD  F006         	call	i2___wmul	;wreg free
  4242  00040A  C001  F01A         	movff	?i2___wmul,i2printf@width
  4243  00040E  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4244                           
  4245                           ;doprnt.c: 601: width += *f++ - '0';
  4246  000412  0ED0               	movlw	208
  4247  000414  6E0F               	movwf	??i2_printf& (0+255),c
  4248  000416  0EFF               	movlw	255
  4249  000418  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4250  00041A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4251  00041E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4252  000422                     	if	0	;tblptru may be non-zero
  4253  000422                     	endif
  4254  000422                     	if	0	;tblptru may be non-zero
  4255  000422                     	endif
  4256  000422  0008               	tblrd		*
  4257  000424  50F5               	movf	tablat,w,c
  4258  000426  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4259  000428  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4260  00042A  500F               	movf	??i2_printf,w,c
  4261  00042C  2611               	addwf	??i2_printf+2,f,c
  4262  00042E  5010               	movf	??i2_printf+1,w,c
  4263  000430  2212               	addwfc	??i2_printf+3,f,c
  4264  000432  5011               	movf	??i2_printf+2,w,c
  4265  000434  261A               	addwf	i2printf@width,f,c
  4266  000436  5012               	movf	??i2_printf+3,w,c
  4267  000438  221B               	addwfc	i2printf@width+1,f,c
  4268  00043A  4A0D               	infsnz	i2printf@f,f,c
  4269  00043C  2A0E               	incf	i2printf@f+1,f,c
  4270                           
  4271                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4272  00043E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4273  000442  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4274  000446                     	if	0	;tblptru may be non-zero
  4275  000446                     	endif
  4276  000446                     	if	0	;tblptru may be non-zero
  4277  000446                     	endif
  4278  000446  0008               	tblrd		*
  4279  000448  50F5               	movf	tablat,w,c
  4280  00044A  EC1F  F007         	call	i2_isdigit
  4281  00044E  A0D8               	btfss	status,0,c
  4282  000450  D003               	goto	i2l2056
  4283  000452  D7D1               	goto	i2l2044
  4284  000454                     i2l2052:
  4285                           
  4286                           ;doprnt.c: 721: flag |= 0x80;
  4287  000454  8E19               	bsf	i2printf@flag,7,c
  4288                           
  4289                           ;doprnt.c: 723: break;
  4290  000456  D017               	goto	i2l248
  4291  000458                     i2l2056:
  4292  000458  C00D  FFF6         	movff	i2printf@f,tblptrl
  4293  00045C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4294  000460  4A0D               	infsnz	i2printf@f,f,c
  4295  000462  2A0E               	incf	i2printf@f+1,f,c
  4296  000464                     	if	0	;tblptru may be non-zero
  4297  000464                     	endif
  4298  000464                     	if	0	;tblptru may be non-zero
  4299  000464                     	endif
  4300  000464  0008               	tblrd		*
  4301  000466  CFF5 F01C          	movff	tablat,i2printf@c
  4302  00046A  501C               	movf	i2printf@c,w,c
  4303                           
  4304                           ; Switch size 1, requested type "space"
  4305                           ; Number of cases is 4, Range of values is 0 to 120
  4306                           ; switch strategies available:
  4307                           ; Name         Instructions Cycles
  4308                           ; simple_byte           13     7 (average)
  4309                           ;	Chosen strategy is simple_byte
  4310  00046C  0A00               	xorlw	0	; case 0
  4311  00046E  B4D8               	btfsc	status,2,c
  4312  000470  0012               	return	
  4313  000472  0A64               	xorlw	100	; case 100
  4314  000474  B4D8               	btfsc	status,2,c
  4315  000476  D007               	goto	i2l248
  4316  000478  0A0D               	xorlw	13	; case 105
  4317  00047A  B4D8               	btfsc	status,2,c
  4318  00047C  D004               	goto	i2l248
  4319  00047E  0A11               	xorlw	17	; case 120
  4320  000480  B4D8               	btfsc	status,2,c
  4321  000482  D7E8               	goto	i2l2052
  4322  000484  D103               	goto	i2l2154
  4323  000486                     i2l248:
  4324                           
  4325                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4326  000486  BE19               	btfsc	i2printf@flag,7,c
  4327  000488  D015               	goto	i2l2068
  4328                           
  4329                           ;doprnt.c: 1253: {
  4330                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4331  00048A  C014  FFD9         	movff	i2printf@ap,fsr2l
  4332  00048E  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4333  000492  CFDE F017          	movff	postinc2,i2printf@val
  4334  000496  CFDD F018          	movff	postdec2,i2printf@val+1
  4335  00049A  0E02               	movlw	2
  4336  00049C  2614               	addwf	i2printf@ap,f,c
  4337  00049E  0E00               	movlw	0
  4338  0004A0  2215               	addwfc	i2printf@ap+1,f,c
  4339                           
  4340                           ;doprnt.c: 1261: if((int)val < 0) {
  4341  0004A2  AE18               	btfss	i2printf@val+1,7,c
  4342  0004A4  D044               	goto	i2l2102
  4343                           
  4344                           ;doprnt.c: 1262: flag |= 0x03;
  4345  0004A6  0E03               	movlw	3
  4346  0004A8  1219               	iorwf	i2printf@flag,f,c
  4347                           
  4348                           ;doprnt.c: 1263: val = -val;
  4349  0004AA  6C17               	negf	i2printf@val,c
  4350  0004AC  1E18               	comf	i2printf@val+1,f,c
  4351  0004AE  B0D8               	btfsc	status,0,c
  4352  0004B0  2A18               	incf	i2printf@val+1,f,c
  4353                           
  4354                           ;doprnt.c: 1264: }
  4355                           ;doprnt.c: 1266: }
  4356  0004B2  D03D               	goto	i2l2102
  4357  0004B4                     i2l2068:
  4358                           
  4359                           ;doprnt.c: 1268: else
  4360                           ;doprnt.c: 1273: {
  4361                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4362  0004B4  C014  FFD9         	movff	i2printf@ap,fsr2l
  4363  0004B8  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4364  0004BC  CFDE F017          	movff	postinc2,i2printf@val
  4365  0004C0  CFDD F018          	movff	postdec2,i2printf@val+1
  4366  0004C4  0E02               	movlw	2
  4367  0004C6  2614               	addwf	i2printf@ap,f,c
  4368  0004C8  0E00               	movlw	0
  4369  0004CA  2215               	addwfc	i2printf@ap+1,f,c
  4370                           
  4371                           ;doprnt.c: 1287: }
  4372                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4373  0004CC  D030               	goto	i2l2102
  4374  0004CE                     i2l2072:
  4375                           
  4376                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4377  0004CE  0E01               	movlw	1
  4378  0004D0  6E1C               	movwf	i2printf@c,c
  4379  0004D2                     i2l2074:
  4380  0004D2  0E05               	movlw	5
  4381  0004D4  181C               	xorwf	i2printf@c,w,c
  4382  0004D6  B4D8               	btfsc	status,2,c
  4383  0004D8  D032               	goto	i2l2104
  4384                           
  4385                           ;doprnt.c: 1306: if(val < dpowers[c])
  4386  0004DA  501C               	movf	i2printf@c,w,c
  4387  0004DC  0D02               	mullw	2
  4388  0004DE  0EC2               	movlw	low _dpowers
  4389  0004E0  24F3               	addwf	prodl,w,c
  4390  0004E2  6EF6               	movwf	tblptrl,c
  4391  0004E4  0EFE               	movlw	high _dpowers
  4392  0004E6  20F4               	addwfc	prodh,w,c
  4393  0004E8  6EF7               	movwf	tblptrh,c
  4394  0004EA                     	if	0	;There are less than 3 active tblptr bytes
  4395  0004EA                     	endif
  4396  0004EA  0009               	tblrd		*+
  4397  0004EC  50F5               	movf	tablat,w,c
  4398  0004EE  5C17               	subwf	i2printf@val,w,c
  4399  0004F0  0009               	tblrd		*+
  4400  0004F2  50F5               	movf	tablat,w,c
  4401  0004F4  5818               	subwfb	i2printf@val+1,w,c
  4402  0004F6  A0D8               	btfss	status,0,c
  4403  0004F8  D022               	goto	i2l2104
  4404                           
  4405                           ;doprnt.c: 1307: break;
  4406  0004FA  2A1C               	incf	i2printf@c,f,c
  4407  0004FC  D7EA               	goto	i2l2074
  4408  0004FE                     i2l2086:
  4409                           
  4410                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4411  0004FE  0E01               	movlw	1
  4412  000500  6E1C               	movwf	i2printf@c,c
  4413  000502                     i2l2088:
  4414  000502  0E04               	movlw	4
  4415  000504  181C               	xorwf	i2printf@c,w,c
  4416  000506  B4D8               	btfsc	status,2,c
  4417  000508  D01A               	goto	i2l2104
  4418                           
  4419                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4420  00050A  501C               	movf	i2printf@c,w,c
  4421  00050C  0D02               	mullw	2
  4422  00050E  0ECC               	movlw	low _hexpowers
  4423  000510  24F3               	addwf	prodl,w,c
  4424  000512  6EF6               	movwf	tblptrl,c
  4425  000514  0EFE               	movlw	high _hexpowers
  4426  000516  20F4               	addwfc	prodh,w,c
  4427  000518  6EF7               	movwf	tblptrh,c
  4428  00051A                     	if	0	;There are less than 3 active tblptr bytes
  4429  00051A                     	endif
  4430  00051A  0009               	tblrd		*+
  4431  00051C  50F5               	movf	tablat,w,c
  4432  00051E  5C17               	subwf	i2printf@val,w,c
  4433  000520  0009               	tblrd		*+
  4434  000522  50F5               	movf	tablat,w,c
  4435  000524  5818               	subwfb	i2printf@val+1,w,c
  4436  000526  A0D8               	btfss	status,0,c
  4437  000528  D00A               	goto	i2l2104
  4438                           
  4439                           ;doprnt.c: 1318: break;
  4440  00052A  2A1C               	incf	i2printf@c,f,c
  4441  00052C  D7EA               	goto	i2l2088
  4442  00052E                     i2l2102:
  4443  00052E  5019               	movf	i2printf@flag,w,c
  4444  000530  0B80               	andlw	128
  4445                           
  4446                           ; Switch size 1, requested type "space"
  4447                           ; Number of cases is 2, Range of values is 0 to 128
  4448                           ; switch strategies available:
  4449                           ; Name         Instructions Cycles
  4450                           ; simple_byte            7     4 (average)
  4451                           ;	Chosen strategy is simple_byte
  4452  000532  0A00               	xorlw	0	; case 0
  4453  000534  B4D8               	btfsc	status,2,c
  4454  000536  D7CB               	goto	i2l2072
  4455  000538  0A80               	xorlw	128	; case 128
  4456  00053A  B4D8               	btfsc	status,2,c
  4457  00053C  D7E0               	goto	i2l2086
  4458  00053E                     i2l2104:
  4459                           
  4460                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4461  00053E  501A               	movf	i2printf@width,w,c
  4462  000540  101B               	iorwf	i2printf@width+1,w,c
  4463  000542  B4D8               	btfsc	status,2,c
  4464  000544  D009               	goto	i2l2110
  4465  000546  C019  F00F         	movff	i2printf@flag,??i2_printf
  4466  00054A  0E03               	movlw	3
  4467  00054C  160F               	andwf	??i2_printf,f,c
  4468  00054E  B4D8               	btfsc	status,2,c
  4469  000550  D003               	goto	i2l2110
  4470                           
  4471                           ;doprnt.c: 1346: width--;
  4472  000552  061A               	decf	i2printf@width,f,c
  4473  000554  A0D8               	btfss	status,0,c
  4474  000556  061B               	decf	i2printf@width+1,f,c
  4475  000558                     i2l2110:
  4476                           
  4477                           ;doprnt.c: 1381: if(width > c)
  4478  000558  0E80               	movlw	128
  4479  00055A  BE1C               	btfsc	i2printf@c,7,c
  4480  00055C  0E7F               	movlw	127
  4481  00055E  6E0F               	movwf	??i2_printf& (0+255),c
  4482  000560  501A               	movf	i2printf@width,w,c
  4483  000562  5C1C               	subwf	i2printf@c,w,c
  4484  000564  501B               	movf	i2printf@width+1,w,c
  4485  000566  0A80               	xorlw	128
  4486  000568  580F               	subwfb	??i2_printf& (0+255),w,c
  4487  00056A  B0D8               	btfsc	status,0,c
  4488  00056C  D007               	goto	i2l2114
  4489                           
  4490                           ;doprnt.c: 1382: width -= c;
  4491  00056E  501C               	movf	i2printf@c,w,c
  4492  000570  5E1A               	subwf	i2printf@width,f,c
  4493  000572  0E00               	movlw	0
  4494  000574  BE1C               	btfsc	i2printf@c,7,c
  4495  000576  0EFF               	movlw	255
  4496  000578  5A1B               	subwfb	i2printf@width+1,f,c
  4497  00057A  D004               	goto	i2l2116
  4498  00057C                     i2l2114:
  4499                           
  4500                           ;doprnt.c: 1383: else
  4501                           ;doprnt.c: 1384: width = 0;
  4502  00057C  0E00               	movlw	0
  4503  00057E  6E1B               	movwf	i2printf@width+1,c
  4504  000580  0E00               	movlw	0
  4505  000582  6E1A               	movwf	i2printf@width,c
  4506  000584                     i2l2116:
  4507                           
  4508                           ;doprnt.c: 1387: if(flag & 0x04) {
  4509  000584  A419               	btfss	i2printf@flag,2,c
  4510  000586  D014               	goto	i2l2128
  4511                           
  4512                           ;doprnt.c: 1392: if(flag & 0x03)
  4513  000588  C019  F00F         	movff	i2printf@flag,??i2_printf
  4514  00058C  0E03               	movlw	3
  4515  00058E  160F               	andwf	??i2_printf,f,c
  4516  000590  B4D8               	btfsc	status,2,c
  4517  000592  D003               	goto	i2l2122
  4518                           
  4519                           ;doprnt.c: 1393: (putch('-') );
  4520  000594  0E2D               	movlw	45
  4521  000596  EC43  F007         	call	i2_putch
  4522  00059A                     i2l2122:
  4523                           
  4524                           ;doprnt.c: 1415: if(width)
  4525  00059A  501A               	movf	i2printf@width,w,c
  4526  00059C  101B               	iorwf	i2printf@width+1,w,c
  4527  00059E  B4D8               	btfsc	status,2,c
  4528  0005A0  D01E               	goto	i2l2138
  4529                           
  4530                           ;doprnt.c: 1417: (putch('0') );
  4531                           
  4532                           ;doprnt.c: 1416: do
  4533  0005A2  0E30               	movlw	48
  4534  0005A4  EC43  F007         	call	i2_putch
  4535                           
  4536                           ;doprnt.c: 1418: while(--width);
  4537  0005A8  061A               	decf	i2printf@width,f,c
  4538  0005AA  A0D8               	btfss	status,0,c
  4539  0005AC  061B               	decf	i2printf@width+1,f,c
  4540  0005AE  D7F5               	goto	i2l2122
  4541  0005B0                     i2l2128:
  4542                           
  4543                           ;doprnt.c: 1422: {
  4544                           ;doprnt.c: 1424: if(width
  4545                           ;doprnt.c: 1428: )
  4546  0005B0  501A               	movf	i2printf@width,w,c
  4547  0005B2  101B               	iorwf	i2printf@width+1,w,c
  4548  0005B4  B4D8               	btfsc	status,2,c
  4549  0005B6  D00A               	goto	i2l2134
  4550  0005B8                     i2l2130:
  4551                           
  4552                           ;doprnt.c: 1430: (putch(' ') );
  4553  0005B8  0E20               	movlw	32
  4554  0005BA  EC43  F007         	call	i2_putch
  4555                           
  4556                           ;doprnt.c: 1431: while(--width);
  4557  0005BE  061A               	decf	i2printf@width,f,c
  4558  0005C0  A0D8               	btfss	status,0,c
  4559  0005C2  061B               	decf	i2printf@width+1,f,c
  4560  0005C4  501A               	movf	i2printf@width,w,c
  4561  0005C6  101B               	iorwf	i2printf@width+1,w,c
  4562  0005C8  A4D8               	btfss	status,2,c
  4563  0005CA  D7F6               	goto	i2l2130
  4564  0005CC                     i2l2134:
  4565                           
  4566                           ;doprnt.c: 1438: if(flag & 0x03)
  4567  0005CC  C019  F00F         	movff	i2printf@flag,??i2_printf
  4568  0005D0  0E03               	movlw	3
  4569  0005D2  160F               	andwf	??i2_printf,f,c
  4570  0005D4  B4D8               	btfsc	status,2,c
  4571  0005D6  D003               	goto	i2l2138
  4572                           
  4573                           ;doprnt.c: 1439: (putch('-') );
  4574  0005D8  0E2D               	movlw	45
  4575  0005DA  EC43  F007         	call	i2_putch
  4576  0005DE                     i2l2138:
  4577                           
  4578                           ;doprnt.c: 1469: }
  4579                           ;doprnt.c: 1472: prec = c;
  4580  0005DE  C01C  F016         	movff	i2printf@c,i2printf@prec
  4581                           
  4582                           ;doprnt.c: 1474: while(prec--) {
  4583  0005E2  D050               	goto	i2l2152
  4584  0005E4                     i2l2140:
  4585                           
  4586                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4587  0005E4  5016               	movf	i2printf@prec,w,c
  4588  0005E6  0D02               	mullw	2
  4589  0005E8  0EC2               	movlw	low _dpowers
  4590  0005EA  24F3               	addwf	prodl,w,c
  4591  0005EC  6EF6               	movwf	tblptrl,c
  4592  0005EE  0EFE               	movlw	high _dpowers
  4593  0005F0  20F4               	addwfc	prodh,w,c
  4594  0005F2  6EF7               	movwf	tblptrh,c
  4595  0005F4                     	if	0	;There are less than 3 active tblptr bytes
  4596  0005F4                     	endif
  4597  0005F4  0009               	tblrd		*+
  4598  0005F6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4599  0005FA  000A               	tblrd		*-
  4600  0005FC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4601  000600  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4602  000604  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4603  000608  ECC9  F005         	call	i2___lwdiv	;wreg free
  4604  00060C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4605  000610  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4606  000614  0E00               	movlw	0
  4607  000616  6E0B               	movwf	i2___lwmod@divisor+1,c
  4608  000618  0E0A               	movlw	10
  4609  00061A  6E0A               	movwf	i2___lwmod@divisor,c
  4610  00061C  EC87  F006         	call	i2___lwmod	;wreg free
  4611  000620  5008               	movf	?i2___lwmod,w,c
  4612  000622  0F30               	addlw	48
  4613  000624  6E1C               	movwf	i2printf@c,c
  4614                           
  4615                           ;doprnt.c: 1491: break;
  4616  000626  D02B               	goto	i2l2150
  4617  000628                     i2l2142:
  4618                           
  4619                           ;doprnt.c: 1499: {
  4620                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4621  000628  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4622  00062C  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4623  000630  5016               	movf	i2printf@prec,w,c
  4624  000632  0D02               	mullw	2
  4625  000634  0ECC               	movlw	low _hexpowers
  4626  000636  24F3               	addwf	prodl,w,c
  4627  000638  6EF6               	movwf	tblptrl,c
  4628  00063A  0EFE               	movlw	high _hexpowers
  4629  00063C  20F4               	addwfc	prodh,w,c
  4630  00063E  6EF7               	movwf	tblptrh,c
  4631  000640                     	if	0	;There are less than 3 active tblptr bytes
  4632  000640                     	endif
  4633  000640  0009               	tblrd		*+
  4634  000642  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4635  000646  000A               	tblrd		*-
  4636  000648  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4637  00064C  ECC9  F005         	call	i2___lwdiv	;wreg free
  4638  000650  5001               	movf	?i2___lwdiv,w,c
  4639  000652  0B0F               	andlw	15
  4640  000654  6E13               	movwf	i2printf@idx,c
  4641                           
  4642                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4643  000656  5013               	movf	i2printf@idx,w,c
  4644  000658  0D01               	mullw	1
  4645  00065A  0E09               	movlw	low STR_17
  4646  00065C  24F3               	addwf	prodl,w,c
  4647  00065E  6EF6               	movwf	tblptrl,c
  4648  000660  0EFF               	movlw	high STR_17
  4649  000662  20F4               	addwfc	prodh,w,c
  4650  000664  6EF7               	movwf	tblptrh,c
  4651  000666                     	if	0	;There are less than 3 active tblptr bytes
  4652  000666                     	endif
  4653  000666  0008               	tblrd		*
  4654  000668  CFF5 F01C          	movff	tablat,i2printf@c
  4655                           
  4656                           ;doprnt.c: 1523: }
  4657                           
  4658                           ;doprnt.c: 1508: }
  4659                           ;doprnt.c: 1510: break;
  4660  00066C  D008               	goto	i2l2150
  4661  00066E                     i2l2148:
  4662  00066E  5019               	movf	i2printf@flag,w,c
  4663  000670  0B80               	andlw	128
  4664                           
  4665                           ; Switch size 1, requested type "space"
  4666                           ; Number of cases is 2, Range of values is 0 to 128
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte            7     4 (average)
  4670                           ;	Chosen strategy is simple_byte
  4671  000672  0A00               	xorlw	0	; case 0
  4672  000674  B4D8               	btfsc	status,2,c
  4673  000676  D7B6               	goto	i2l2140
  4674  000678  0A80               	xorlw	128	; case 128
  4675  00067A  B4D8               	btfsc	status,2,c
  4676  00067C  D7D5               	goto	i2l2142
  4677  00067E                     i2l2150:
  4678                           
  4679                           ;doprnt.c: 1524: (putch(c) );
  4680  00067E  501C               	movf	i2printf@c,w,c
  4681  000680  EC43  F007         	call	i2_putch
  4682  000684                     i2l2152:
  4683  000684  0616               	decf	i2printf@prec,f,c
  4684  000686  2816               	incf	i2printf@prec,w,c
  4685  000688  A4D8               	btfss	status,2,c
  4686  00068A  D7F1               	goto	i2l2148
  4687  00068C                     i2l2154:
  4688  00068C  C00D  FFF6         	movff	i2printf@f,tblptrl
  4689  000690  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4690  000694  4A0D               	infsnz	i2printf@f,f,c
  4691  000696  2A0E               	incf	i2printf@f+1,f,c
  4692  000698                     	if	0	;tblptru may be non-zero
  4693  000698                     	endif
  4694  000698                     	if	0	;tblptru may be non-zero
  4695  000698                     	endif
  4696  000698  0008               	tblrd		*
  4697  00069A  CFF5 F01C          	movff	tablat,i2printf@c
  4698  00069E  501C               	movf	i2printf@c,w,c
  4699  0006A0  B4D8               	btfsc	status,2,c
  4700  0006A2  0012               	return	
  4701  0006A4  D67F               	goto	i2l2028
  4702  0006A6                     __end_ofi2_printf:
  4703                           	opt stack 0
  4704                           pclatu	equ	0xFFB
  4705                           pclath	equ	0xFFA
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           prodh	equ	0xFF4
  4711                           prodl	equ	0xFF3
  4712                           intcon	equ	0xFF2
  4713                           intcon2	equ	0xFF1
  4714                           intcon3	equ	0xFF0
  4715                           postinc0	equ	0xFEE
  4716                           fsr0h	equ	0xFEA
  4717                           fsr0l	equ	0xFE9
  4718                           wreg	equ	0xFE8
  4719                           fsr1h	equ	0xFE2
  4720                           fsr1l	equ	0xFE1
  4721                           indf2	equ	0xFDF
  4722                           postinc2	equ	0xFDE
  4723                           postdec2	equ	0xFDD
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function i2_putch *****************
  4729 ;; Defined at:
  4730 ;;		line 31 in file "lcd.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  data            1    wreg     unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  data            1    2[COMRAM] unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2, status,0, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;Total ram usage:        1 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    1
  4751 ;; This function calls:
  4752 ;;		i2_lcdNibble
  4753 ;; This function is called by:
  4754 ;;		i2_printf
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text25
  4759  000E86                     __ptext25:
  4760                           	opt stack 0
  4761  000E86                     i2_putch:
  4762                           	opt stack 23
  4763                           
  4764                           ;incstack = 0
  4765                           ;i2putch@data stored from wreg
  4766  000E86  6E03               	movwf	i2putch@data,c
  4767                           
  4768                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4769  000E88  848C               	bsf	3980,2,c	;volatile
  4770                           
  4771                           ;lcd.c: 33: lcdNibble(data);
  4772  000E8A  5003               	movf	i2putch@data,w,c
  4773  000E8C  EC19  F006         	call	i2_lcdNibble
  4774  000E90  0012               	return		;funcret
  4775  000E92                     __end_ofi2_putch:
  4776                           	opt stack 0
  4777                           pclatu	equ	0xFFB
  4778                           pclath	equ	0xFFA
  4779                           tblptru	equ	0xFF8
  4780                           tblptrh	equ	0xFF7
  4781                           tblptrl	equ	0xFF6
  4782                           tablat	equ	0xFF5
  4783                           prodh	equ	0xFF4
  4784                           prodl	equ	0xFF3
  4785                           intcon	equ	0xFF2
  4786                           intcon2	equ	0xFF1
  4787                           intcon3	equ	0xFF0
  4788                           postinc0	equ	0xFEE
  4789                           fsr0h	equ	0xFEA
  4790                           fsr0l	equ	0xFE9
  4791                           wreg	equ	0xFE8
  4792                           fsr1h	equ	0xFE2
  4793                           fsr1l	equ	0xFE1
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function i2_isdigit *****************
  4802 ;; Defined at:
  4803 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  c               1    wreg     unsigned char 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  c               1    2[COMRAM] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;Total ram usage:        3 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		i2_printf
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text26
  4831  000E3E                     __ptext26:
  4832                           	opt stack 0
  4833  000E3E                     i2_isdigit:
  4834                           	opt stack 24
  4835                           
  4836                           ;incstack = 0
  4837                           ;i2isdigit@c stored from wreg
  4838  000E3E  6E03               	movwf	i2isdigit@c,c
  4839  000E40  0E00               	movlw	0
  4840  000E42  6E02               	movwf	i2_isdigit$524,c
  4841  000E44  0E3A               	movlw	58
  4842  000E46  6003               	cpfslt	i2isdigit@c,c
  4843  000E48  D005               	goto	i2l1898
  4844  000E4A  0E2F               	movlw	47
  4845  000E4C  6403               	cpfsgt	i2isdigit@c,c
  4846  000E4E  D002               	goto	i2l1898
  4847  000E50  0E01               	movlw	1
  4848  000E52  6E02               	movwf	i2_isdigit$524,c
  4849  000E54                     i2l1898:
  4850  000E54  C002  F001         	movff	i2_isdigit$524,??i2_isdigit
  4851  000E58  3001               	rrcf	??i2_isdigit,w,c
  4852  000E5A  0012               	return	
  4853  000E5C                     __end_ofi2_isdigit:
  4854                           	opt stack 0
  4855                           pclatu	equ	0xFFB
  4856                           pclath	equ	0xFFA
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           intcon2	equ	0xFF1
  4865                           intcon3	equ	0xFF0
  4866                           postinc0	equ	0xFEE
  4867                           fsr0h	equ	0xFEA
  4868                           fsr0l	equ	0xFE9
  4869                           wreg	equ	0xFE8
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function i2___wmul *****************
  4880 ;; Defined at:
  4881 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  multiplier      2    0[COMRAM] unsigned int 
  4884 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  __wmul          2    4[COMRAM] unsigned int 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  2    0[COMRAM] unsigned int 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0, prodl, prodh
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4896 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:        6 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; This function calls:
  4903 ;;		Nothing
  4904 ;; This function is called by:
  4905 ;;		i2_printf
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text27
  4910  000DFA                     __ptext27:
  4911                           	opt stack 0
  4912  000DFA                     i2___wmul:
  4913                           	opt stack 24
  4914                           
  4915                           ;incstack = 0
  4916  000DFA  5001               	movf	i2___wmul@multiplier,w,c
  4917  000DFC  0203               	mulwf	i2___wmul@multiplicand,c
  4918  000DFE  CFF3 F005          	movff	prodl,i2___wmul@product
  4919  000E02  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4920  000E06  5001               	movf	i2___wmul@multiplier,w,c
  4921  000E08  0204               	mulwf	i2___wmul@multiplicand+1,c
  4922  000E0A  50F3               	movf	prodl,w,c
  4923  000E0C  2606               	addwf	i2___wmul@product+1,f,c
  4924  000E0E  5002               	movf	i2___wmul@multiplier+1,w,c
  4925  000E10  0203               	mulwf	i2___wmul@multiplicand,c
  4926  000E12  50F3               	movf	prodl,w,c
  4927  000E14  2606               	addwf	i2___wmul@product+1,f,c
  4928  000E16  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4929  000E1A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4930  000E1E  0012               	return	
  4931  000E20                     __end_ofi2___wmul:
  4932                           	opt stack 0
  4933                           pclatu	equ	0xFFB
  4934                           pclath	equ	0xFFA
  4935                           tblptru	equ	0xFF8
  4936                           tblptrh	equ	0xFF7
  4937                           tblptrl	equ	0xFF6
  4938                           tablat	equ	0xFF5
  4939                           prodh	equ	0xFF4
  4940                           prodl	equ	0xFF3
  4941                           intcon	equ	0xFF2
  4942                           intcon2	equ	0xFF1
  4943                           intcon3	equ	0xFF0
  4944                           postinc0	equ	0xFEE
  4945                           fsr0h	equ	0xFEA
  4946                           fsr0l	equ	0xFE9
  4947                           wreg	equ	0xFE8
  4948                           fsr1h	equ	0xFE2
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function i2___lwmod *****************
  4958 ;; Defined at:
  4959 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  dividend        2    7[COMRAM] unsigned int 
  4962 ;;  divisor         2    9[COMRAM] unsigned int 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  2    7[COMRAM] unsigned int 
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:        5 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; This function calls:
  4981 ;;		Nothing
  4982 ;; This function is called by:
  4983 ;;		i2_printf
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text28
  4988  000D0E                     __ptext28:
  4989                           	opt stack 0
  4990  000D0E                     i2___lwmod:
  4991                           	opt stack 24
  4992                           
  4993                           ;incstack = 0
  4994  000D0E  500A               	movf	i2___lwmod@divisor,w,c
  4995  000D10  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4996  000D12  B4D8               	btfsc	status,2,c
  4997  000D14  D018               	goto	i2l703
  4998  000D16  0E01               	movlw	1
  4999  000D18  6E0C               	movwf	i2___lwmod@counter,c
  5000  000D1A  D004               	goto	i2l1930
  5001  000D1C                     i2l1928:
  5002  000D1C  90D8               	bcf	status,0,c
  5003  000D1E  360A               	rlcf	i2___lwmod@divisor,f,c
  5004  000D20  360B               	rlcf	i2___lwmod@divisor+1,f,c
  5005  000D22  2A0C               	incf	i2___lwmod@counter,f,c
  5006  000D24                     i2l1930:
  5007  000D24  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  5008  000D26  D7FA               	goto	i2l1928
  5009  000D28                     i2l1932:
  5010  000D28  500A               	movf	i2___lwmod@divisor,w,c
  5011  000D2A  5C08               	subwf	i2___lwmod@dividend,w,c
  5012  000D2C  500B               	movf	i2___lwmod@divisor+1,w,c
  5013  000D2E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  5014  000D30  A0D8               	btfss	status,0,c
  5015  000D32  D004               	goto	i2l1936
  5016  000D34  500A               	movf	i2___lwmod@divisor,w,c
  5017  000D36  5E08               	subwf	i2___lwmod@dividend,f,c
  5018  000D38  500B               	movf	i2___lwmod@divisor+1,w,c
  5019  000D3A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  5020  000D3C                     i2l1936:
  5021  000D3C  90D8               	bcf	status,0,c
  5022  000D3E  320B               	rrcf	i2___lwmod@divisor+1,f,c
  5023  000D40  320A               	rrcf	i2___lwmod@divisor,f,c
  5024  000D42  2E0C               	decfsz	i2___lwmod@counter,f,c
  5025  000D44  D7F1               	goto	i2l1932
  5026  000D46                     i2l703:
  5027  000D46  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  5028  000D4A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  5029  000D4E  0012               	return		;funcret
  5030  000D50                     __end_ofi2___lwmod:
  5031                           	opt stack 0
  5032                           pclatu	equ	0xFFB
  5033                           pclath	equ	0xFFA
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           intcon2	equ	0xFF1
  5042                           intcon3	equ	0xFF0
  5043                           postinc0	equ	0xFEE
  5044                           fsr0h	equ	0xFEA
  5045                           fsr0l	equ	0xFE9
  5046                           wreg	equ	0xFE8
  5047                           fsr1h	equ	0xFE2
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           fsr2h	equ	0xFDA
  5053                           fsr2l	equ	0xFD9
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function i2___lwdiv *****************
  5057 ;; Defined at:
  5058 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  dividend        2    0[COMRAM] unsigned int 
  5061 ;;  divisor         2    2[COMRAM] unsigned int 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5064 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  2    0[COMRAM] unsigned int 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5074 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;Total ram usage:        7 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		i2_printf
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text29
  5088  000B92                     __ptext29:
  5089                           	opt stack 0
  5090  000B92                     i2___lwdiv:
  5091                           	opt stack 24
  5092                           
  5093                           ;incstack = 0
  5094  000B92  0E00               	movlw	0
  5095  000B94  6E06               	movwf	i2___lwdiv@quotient+1,c
  5096  000B96  0E00               	movlw	0
  5097  000B98  6E05               	movwf	i2___lwdiv@quotient,c
  5098  000B9A  5003               	movf	i2___lwdiv@divisor,w,c
  5099  000B9C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5100  000B9E  B4D8               	btfsc	status,2,c
  5101  000BA0  D01C               	goto	i2l693
  5102  000BA2  0E01               	movlw	1
  5103  000BA4  6E07               	movwf	i2___lwdiv@counter,c
  5104  000BA6  D004               	goto	i2l1910
  5105  000BA8                     i2l1908:
  5106  000BA8  90D8               	bcf	status,0,c
  5107  000BAA  3603               	rlcf	i2___lwdiv@divisor,f,c
  5108  000BAC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5109  000BAE  2A07               	incf	i2___lwdiv@counter,f,c
  5110  000BB0                     i2l1910:
  5111  000BB0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5112  000BB2  D7FA               	goto	i2l1908
  5113  000BB4                     i2l1912:
  5114  000BB4  90D8               	bcf	status,0,c
  5115  000BB6  3605               	rlcf	i2___lwdiv@quotient,f,c
  5116  000BB8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5117  000BBA  5003               	movf	i2___lwdiv@divisor,w,c
  5118  000BBC  5C01               	subwf	i2___lwdiv@dividend,w,c
  5119  000BBE  5004               	movf	i2___lwdiv@divisor+1,w,c
  5120  000BC0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5121  000BC2  A0D8               	btfss	status,0,c
  5122  000BC4  D005               	goto	i2l1920
  5123  000BC6  5003               	movf	i2___lwdiv@divisor,w,c
  5124  000BC8  5E01               	subwf	i2___lwdiv@dividend,f,c
  5125  000BCA  5004               	movf	i2___lwdiv@divisor+1,w,c
  5126  000BCC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5127  000BCE  8005               	bsf	i2___lwdiv@quotient,0,c
  5128  000BD0                     i2l1920:
  5129  000BD0  90D8               	bcf	status,0,c
  5130  000BD2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5131  000BD4  3203               	rrcf	i2___lwdiv@divisor,f,c
  5132  000BD6  2E07               	decfsz	i2___lwdiv@counter,f,c
  5133  000BD8  D7ED               	goto	i2l1912
  5134  000BDA                     i2l693:
  5135  000BDA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5136  000BDE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5137  000BE2  0012               	return		;funcret
  5138  000BE4                     __end_ofi2___lwdiv:
  5139                           	opt stack 0
  5140                           pclatu	equ	0xFFB
  5141                           pclath	equ	0xFFA
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           intcon2	equ	0xFF1
  5150                           intcon3	equ	0xFF0
  5151                           postinc0	equ	0xFEE
  5152                           fsr0h	equ	0xFEA
  5153                           fsr0l	equ	0xFE9
  5154                           wreg	equ	0xFE8
  5155                           fsr1h	equ	0xFE2
  5156                           fsr1l	equ	0xFE1
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function i2_lcdInst *****************
  5165 ;; Defined at:
  5166 ;;		line 26 in file "lcd.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  data            1    wreg     unsigned char 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  data            1    2[COMRAM] unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        1 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    1
  5187 ;; This function calls:
  5188 ;;		i2_lcdNibble
  5189 ;; This function is called by:
  5190 ;;		_isr
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text30
  5195  000E92                     __ptext30:
  5196                           	opt stack 0
  5197  000E92                     i2_lcdInst:
  5198                           	opt stack 24
  5199                           
  5200                           ;incstack = 0
  5201                           ;i2lcdInst@data stored from wreg
  5202  000E92  6E03               	movwf	i2lcdInst@data,c
  5203                           
  5204                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5205  000E94  948C               	bcf	3980,2,c	;volatile
  5206                           
  5207                           ;lcd.c: 28: lcdNibble(data);
  5208  000E96  5003               	movf	i2lcdInst@data,w,c
  5209  000E98  EC19  F006         	call	i2_lcdNibble
  5210  000E9C  0012               	return		;funcret
  5211  000E9E                     __end_ofi2_lcdInst:
  5212                           	opt stack 0
  5213                           pclatu	equ	0xFFB
  5214                           pclath	equ	0xFFA
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           intcon	equ	0xFF2
  5222                           intcon2	equ	0xFF1
  5223                           intcon3	equ	0xFF0
  5224                           postinc0	equ	0xFEE
  5225                           fsr0h	equ	0xFEA
  5226                           fsr0l	equ	0xFE9
  5227                           wreg	equ	0xFE8
  5228                           fsr1h	equ	0xFE2
  5229                           fsr1l	equ	0xFE1
  5230                           indf2	equ	0xFDF
  5231                           postinc2	equ	0xFDE
  5232                           postdec2	equ	0xFDD
  5233                           fsr2h	equ	0xFDA
  5234                           fsr2l	equ	0xFD9
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function i2_lcdNibble *****************
  5238 ;; Defined at:
  5239 ;;		line 36 in file "lcd.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  data            1    wreg     unsigned char 
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  data            1    1[COMRAM] unsigned char 
  5244 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 0/0
  5251 ;;		On exit  : 0/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;Total ram usage:        2 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; This function calls:
  5261 ;;		Nothing
  5262 ;; This function is called by:
  5263 ;;		i2_lcdInst
  5264 ;;		i2_putch
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text31
  5269  000C32                     __ptext31:
  5270                           	opt stack 0
  5271  000C32                     i2_lcdNibble:
  5272                           	opt stack 23
  5273                           
  5274                           ;incstack = 0
  5275                           ;i2lcdNibble@data stored from wreg
  5276  000C32  6E02               	movwf	i2lcdNibble@data,c
  5277                           
  5278                           ;lcd.c: 38: char temp = data & 0xF0;
  5279  000C34  5002               	movf	i2lcdNibble@data,w,c
  5280  000C36  0BF0               	andlw	240
  5281  000C38  6E01               	movwf	i2lcdNibble@temp,c
  5282                           
  5283                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5284  000C3A  508C               	movf	3980,w,c	;volatile
  5285  000C3C  0B0F               	andlw	15
  5286  000C3E  6E8C               	movwf	3980,c	;volatile
  5287                           
  5288                           ;lcd.c: 40: LATD = temp | LATD;
  5289  000C40  5001               	movf	i2lcdNibble@temp,w,c
  5290  000C42  108C               	iorwf	3980,w,c	;volatile
  5291  000C44  6E8C               	movwf	3980,c	;volatile
  5292                           
  5293                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5294  000C46  968C               	bcf	3980,3,c	;volatile
  5295                           
  5296                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5297  000C48  0E19               	movlw	25
  5298  000C4A                     i2u207_47:
  5299  000C4A  2EE8               	decfsz	wreg,f,c
  5300  000C4C  D7FE               	bra	i2u207_47
  5301                           
  5302                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5303  000C4E  868C               	bsf	3980,3,c	;volatile
  5304                           
  5305                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5306  000C50  0E19               	movlw	25
  5307  000C52                     i2u208_47:
  5308  000C52  2EE8               	decfsz	wreg,f,c
  5309  000C54  D7FE               	bra	i2u208_47
  5310                           
  5311                           ;lcd.c: 47: data = data << 4;
  5312  000C56  3802               	swapf	i2lcdNibble@data,w,c
  5313  000C58  0BF0               	andlw	240
  5314  000C5A  6E02               	movwf	i2lcdNibble@data,c
  5315                           
  5316                           ;lcd.c: 49: temp = data & 0xF0;
  5317  000C5C  5002               	movf	i2lcdNibble@data,w,c
  5318  000C5E  0BF0               	andlw	240
  5319  000C60  6E01               	movwf	i2lcdNibble@temp,c
  5320                           
  5321                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5322  000C62  508C               	movf	3980,w,c	;volatile
  5323  000C64  0B0F               	andlw	15
  5324  000C66  6E8C               	movwf	3980,c	;volatile
  5325                           
  5326                           ;lcd.c: 51: LATD = temp | LATD;
  5327  000C68  5001               	movf	i2lcdNibble@temp,w,c
  5328  000C6A  108C               	iorwf	3980,w,c	;volatile
  5329  000C6C  6E8C               	movwf	3980,c	;volatile
  5330                           
  5331                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5332  000C6E  968C               	bcf	3980,3,c	;volatile
  5333                           
  5334                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5335  000C70  0E19               	movlw	25
  5336  000C72                     i2u209_47:
  5337  000C72  2EE8               	decfsz	wreg,f,c
  5338  000C74  D7FE               	bra	i2u209_47
  5339                           
  5340                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5341  000C76  868C               	bsf	3980,3,c	;volatile
  5342                           
  5343                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5344  000C78  0E19               	movlw	25
  5345  000C7A                     i2u210_47:
  5346  000C7A  2EE8               	decfsz	wreg,f,c
  5347  000C7C  D7FE               	bra	i2u210_47
  5348  000C7E  0012               	return		;funcret
  5349  000C80                     __end_ofi2_lcdNibble:
  5350                           	opt stack 0
  5351                           pclatu	equ	0xFFB
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           intcon2	equ	0xFF1
  5361                           intcon3	equ	0xFF0
  5362                           postinc0	equ	0xFEE
  5363                           fsr0h	equ	0xFEA
  5364                           fsr0l	equ	0xFE9
  5365                           wreg	equ	0xFE8
  5366                           fsr1h	equ	0xFE2
  5367                           fsr1l	equ	0xFE1
  5368                           indf2	equ	0xFDF
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           pclatu	equ	0xFFB
  5375                           pclath	equ	0xFFA
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           intcon2	equ	0xFF1
  5384                           intcon3	equ	0xFF0
  5385                           postinc0	equ	0xFEE
  5386                           fsr0h	equ	0xFEA
  5387                           fsr0l	equ	0xFE9
  5388                           wreg	equ	0xFE8
  5389                           fsr1h	equ	0xFE2
  5390                           fsr1l	equ	0xFE1
  5391                           indf2	equ	0xFDF
  5392                           postinc2	equ	0xFDE
  5393                           postdec2	equ	0xFDD
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398                           	psect	rparam
  5399  0000                     pclatu	equ	0xFFB
  5400                           pclath	equ	0xFFA
  5401                           tblptru	equ	0xFF8
  5402                           tblptrh	equ	0xFF7
  5403                           tblptrl	equ	0xFF6
  5404                           tablat	equ	0xFF5
  5405                           prodh	equ	0xFF4
  5406                           prodl	equ	0xFF3
  5407                           intcon	equ	0xFF2
  5408                           intcon2	equ	0xFF1
  5409                           intcon3	equ	0xFF0
  5410                           postinc0	equ	0xFEE
  5411                           fsr0h	equ	0xFEA
  5412                           fsr0l	equ	0xFE9
  5413                           wreg	equ	0xFE8
  5414                           fsr1h	equ	0xFE2
  5415                           fsr1l	equ	0xFE1
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423                           	psect	temp
  5424  000052                     btemp:
  5425                           	opt stack 0
  5426  000052                     	ds	1
  5427  0000                     int$flags	set	btemp
  5428                           pclatu	equ	0xFFB
  5429                           pclath	equ	0xFFA
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           intcon2	equ	0xFF1
  5438                           intcon3	equ	0xFF0
  5439                           postinc0	equ	0xFEE
  5440                           fsr0h	equ	0xFEA
  5441                           fsr0l	equ	0xFE9
  5442                           wreg	equ	0xFE8
  5443                           fsr1h	equ	0xFE2
  5444                           fsr1l	equ	0xFE1
  5445                           indf2	equ	0xFDF
  5446                           postinc2	equ	0xFDE
  5447                           postdec2	equ	0xFDD
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8


Data Sizes:
    Strings     291
    Constant    42
    Data        2
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      81
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_16(CODE[10]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _standby->_printf
    _initLCD->_lcdInst
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _standby->_printf
    _date_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   14502
                                             69 COMRAM     2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                            _initLCD
                          _operation
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4344
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4879
                                             68 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             45 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                             45 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4768
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4209
                                             56 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             44 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             57 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             44 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    2093
                                             28 COMRAM    16    16      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      51       1       64.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B      34        0.0%
DATA                 0      0      5B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 01:00:41 2017

                       l34 0E5C        ___wmul@multiplicand 002F         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l248 0116                        l703 0D04                        l640 0A64  
                      l693 0B88               __CFG_CPB$OFF 000000                        u110 0DCC  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _isr 0008               ___awmod@sign 0032                        prod 000FF3  
                      wreg 000FE8               ?_bottle_time 0001               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1024 0DCE                       l2310 0CE6  
                     l2400 01F4                       l2314 0CFA                       l2306 0CDA  
                     l2410 0248                       l2330 0046                       l2308 0CE2  
                     l2412 0252                       l2340 007E                       l2324 0020  
                     l2270 0E36                       l2430 02AC                       l2406 0214  
                     l2334 004E                       l2502 06A8                       l2424 0286  
                     l2352 00E6                       l2328 0034                       l2520 071A  
                     l2290 0B62                       l2426 0292                       l2434 02BE  
                     l2418 026A                       l2370 0170                       l2450 037E  
                     l2514 06F4                       l2436 02C4                       l2444 0358  
                     l2364 014E                       l2348 00E0                       l2532 0766  
                     l2508 06CE                       l1830 0A8A                       l2286 0B56  
                     l2438 030C                       l2446 036A                       l2382 01A6  
                     l2526 0740                       l1840 0AAC                       l2288 0B5E  
                     l2448 0372                       l2384 01AC                       l2368 016A  
                     l2560 099E                       l1842 0AB0                       l1850 0ACE  
                     l1834 0A96                       l2298 0B7E                       l2538 0782  
                     l2482 08D6                       l2562 09A4                       l2492 08FA  
                     l2564 09AA                       l2572 09BC                       l1854 0ADC  
                     l1846 0AC4                       l1838 0AA4                       l2398 01E2  
                     l2486 08DE                       l2566 09B0                       l2574 09DC  
                     l1864 0A16                       l2568 09B6                       l1866 0A22  
                     l1876 0A56                       l1868 0A26                       ?_isr 0001  
                     STR_1 FFE6                       STR_2 FF1A                       STR_3 FF3C  
                     STR_4 FEDB                       STR_5 FEF2                       STR_6 FF4D  
                     STR_7 FF2B                       STR_8 FF91                       STR_9 FF80  
                     u2007 0C86                       u2017 0CC0                       u2027 0BFC  
                     u2037 0C04                       _LATA 000F89                       _LATB 000F8A  
                     u2047 0C24                       _LATC 000F8B                       _LATD 000F8C  
                     u1345 0B14                       u2057 0C2C                       _LATE 000F8D  
                     _RCEN 007E2B                       u1997 09E6                       _RSEN 007E29  
                     _main 0950                       _keys FEB1                       _time 0048  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0052  
                     isr@i 002C                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 0E92  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 0C32  
            ?_bottle_count 0001                      ??_isr 001D           ?_I2C_Master_Init 003A  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    STR_10 FF6F                      STR_11 FF5E                      STR_12 FFA2  
                    STR_13 FFC4                      STR_14 FFB3                      STR_15 FFD5  
                    STR_16 FFF4                      STR_17 FF09            __end_of___awmod 0AE6  
          __end_of___lldiv 0A76            __end_of___lwdiv 0B92            __end_of___lwmod 0D0E  
                    i2l248 0486                      i2l177 0864                      i2l703 0D46  
                    i2l693 0BDA                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 0E86             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 0CCC             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FECC            __end_of_isdigit 0E3E  
                    _putch 0E6E                      pclath 000FFA                      tablat 000FF5  
          __end_of_timeset FEDB           __end_ofi2___wmul 0E20            __end_of_standby 0DAE  
                    status 000FD8             __CFG_PBADEN$ON 000000              i2printf@width 001A  
         __end_ofi2_printf 06A6         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
          __initialization 0D50         __size_ofi2_lcdInst 000C             ??_bottle_count 0045  
             __end_of_main 09F4               __end_of_keys FEC2                 i2printf@ap 0014  
       __size_ofi2_isdigit 001E                     ??_main 0046              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 002E         ??_I2C_Master_Start 002E  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0030  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l2110 0558  
                   i2l2102 052E                     i2l2104 053E                     i2l2032 03B4  
                   i2l2200 0812                     i2l2130 05B8                     i2l2122 059A  
                   i2l2114 057C                     i2l2034 03C2                     i2l2140 05E4  
                   i2l2116 0584                     i2l2052 0454                     i2l2044 03F6  
                   i2l2028 03A4                     i2l2212 0848                     i2l2204 081C  
                   i2l2142 0628                     i2l2150 067E                     i2l2134 05CC  
                   i2l2038 03C8                     i2l2206 0832                     i2l2152 0684  
                   i2l2128 05B0                     i2l2072 04CE                     i2l2056 0458  
                   i2l2216 0850                     i2l2138 05DE                     i2l2074 04D2  
                   i2l2154 068C                     i2l2148 066E                     i2l2068 04B4  
                   i2l2086 04FE                     i2l2088 0502                     i2l2192 0800  
                   i2l2194 0804                     i2l2196 080A                     i2l1910 0BB0  
                   i2l1920 0BD0                     i2l1912 0BB4                     i2l1930 0D24  
                   i2l1908 0BA8                     i2l1932 0D28                     i2l1936 0D3C  
                   i2l1928 0D1C                     i2l1898 0E54                  ??i2_putch 0003  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000                     ___wmul 0DD4  
           __CFG_STVREN$ON 000000                  ??___awmod 0031                  ??___lldiv 0035  
                ??___lwdiv 0031                  ??___lwmod 0038                     clear_0 0D6E  
          ___awmod@divisor 002F            ___awmod@counter 0031                  ??_lcdInst 002F  
                   _printf 0012                  ??_initLCD 0030               __pdataCOMRAM 0050  
                ??_isdigit 002D          __end_ofi2___lwdiv 0BE4               __mediumconst FEB0  
        __end_ofi2___lwmod 0D50                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_standby 0045          __end_ofi2_lcdInst 0E9E  
        __end_ofi2_isdigit 0E5C       __size_of_bottle_time 0002                 __accesstop 0080  
  __end_of__initialization 0D74              ___rparam_used 000001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_putch 0E7A                i2printf@idx 0013  
              i2printf@val 0017         __size_of_date_time 00AE                  ?i2___wmul 0001  
       __size_of_lcdNibble 004E                i2putch@data 0003                  ?i2_printf 000D  
     __end_of_bottle_count 07C0                    ??_putch 002F               ?i2_lcdNibble 0001  
                  ?___wmul 002D                    ?_printf 0039         __size_of_operation 0002  
               ??i2___wmul 0005                 ??i2_printf 000F                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7          __end_of_date_time 0950  
                  i2_putch 0E86          _bottle_count_disp 0050          __end_of_lcdNibble 0C32  
                  __Hparam 0000                    __Lparam 0000                    ___awmod 0A76  
                  ___lldiv 09F4            __size_of___wmul 0026                    ___lwdiv 0B40  
                  ___lwmod 0CCC                 _curr_state 004F                    __pcinit 0D50  
                  __ramtop 1000                    _lcdInst 0E7A                    __ptext0 0950  
                  __ptext1 0D82                    __ptext2 0EBA                    __ptext3 0C80  
                  __ptext4 08A2                    __ptext5 0E9E                    __ptext6 0EA8  
                  __ptext7 0EB0                    __ptext8 0DAE                    __ptext9 0E5C  
          __size_of_printf 0388                    _initLCD 0C80          __end_of_hexpowers FED4  
            i2_isdigit$524 0002                    _dpowers FEC2                    _isdigit 0E20  
             __size_of_isr 089A           ___awmod@dividend 002D   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012                 date_time@i 0045  
 __size_of_I2C_Master_Stop 0008                    _timeset FED4                    _standby 0D82  
           __pintcode_body 07C0       end_of_initialization 0D74              __Lmediumconst FEB0  
                  int_func 07C0        i2___wmul@multiplier 0001          __end_of_operation 0EBC  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0031  
          ___lldiv@counter 0039                    printf@c 0089                    printf@f 0039  
         I2C_Master_Init@c 003A           I2C_Master_Read@a 002E                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __size_of_bottle_count 011A  
        i2___lwdiv@divisor 0003                  i2___lwdiv 0B92                  i2___lwmod 0D0E  
        i2___lwdiv@counter 0007                  i2_lcdInst 0E92                printf@width 0087  
                i2_isdigit 0E3E               _bottle_count 06A6             __end_of___wmul 0DFA  
     __size_ofi2_lcdNibble 004E              __pidataCOMRAM 0EB8              i2lcdInst@data 0003  
         i2___wmul@product 0005             __end_of_printf 039A               i2printf@flag 0019  
             i2printf@prec 0016        start_initialization 0D50          __size_ofi2___wmul 0026  
              __end_of_isr 08A2                  i2printf@c 001C                  i2printf@f 000D  
            ??_bottle_time 002D                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 030C          ??_I2C_Master_Init 003E          ??_I2C_Master_Read 002E  
        ??_I2C_Master_Wait 002D                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 002E  
               ?i2_isdigit 0001                   ??___wmul 0031           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 0041                __pbssCOMRAM 0048              __pcstackBANK0 0080  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
      __end_of_bottle_time 0EBE           _I2C_Master_Start 0EB0           _I2C_Master_Write 0E9E  
                _date_time 08A2           ___lwdiv@dividend 002D          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FEB0                  _lcdNibble 0BE4  
                 ?___awmod 002D                   ?___lldiv 002D                   ?___lwdiv 002D  
                 ?___lwmod 0034                   ?_lcdInst 0001                   ?_initLCD 0001  
                 ?_isdigit 0001                  _hexpowers FECC                   ?_standby 0001  
         ___lwdiv@quotient 0032                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 000C                ??i2_lcdInst 0003             ___wmul@product 0031  
                 _LATDbits 000F8C                ??i2_isdigit 0001                 ?_date_time 0001  
                 i2u210_47 0C7A                   i2u206_47 0856                   i2u207_47 0C4A  
                 i2u208_47 0C52                   i2u209_47 0C72                  _operation 0EBA  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001          ___wmul@multiplier 002D  
                 i2___wmul 0DFA              lcdNibble@data 002E                 printf@flag 0086  
            lcdNibble@temp 002D                 printf@prec 0083                   i2_printf 039A  
              _bottle_time 0EBC        I2C_Master_Read@temp 002F           __size_ofi2_putch 000C  
                 __Hrparam 0000                 ?_operation 0001                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000           __size_of___awmod 0070      i2___wmul@multiplicand 0003  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
              _isdigit$524 002E           __size_of_lcdInst 000C            _I2C_Master_Init 0AE6  
          _I2C_Master_Read 0DAE           __size_of_initLCD 004C            _I2C_Master_Wait 0E5C  
          _I2C_Master_Stop 0EA8           __size_of_isdigit 001E            ___lwdiv@divisor 002F  
          ___lwdiv@counter 0031                   __ptext10 0EBC                   __ptext11 06A6  
                 __ptext20 0A76                   __ptext12 0012                   __ptext21 0AE6  
                 __ptext13 0E6E                   __ptext30 0E92                   __ptext22 09F4  
                 __ptext14 0E20                   __ptext31 0C32                   __ptext15 0DD4  
                 __ptext24 039A                   __ptext16 0CCC                   __ptext25 0E86  
                 __ptext17 0B40                   __ptext26 0E3E                   __ptext18 0E7A  
                 __ptext27 0DFA                   __ptext19 0BE4                   __ptext28 0D0E  
                 __ptext29 0B92           __size_of_standby 002C              __size_of_main 00A4  
              ??_date_time 0045              ??i2_lcdNibble 0001                ??_lcdNibble 002D  
                 int$flags 0052                  printf@idx 0080                  printf@val 0084  
                putch@data 002F   __end_of_I2C_Master_Start 0EB8   __end_of_I2C_Master_Write 0EA8  
               _INTCONbits 000FF2                   isdigit@c 002F                   intlevel2 0000  
         ___lwmod@dividend 0034           ___lldiv@dividend 002D                ??_operation 002D  
                 printf@ap 0081    __end_of_I2C_Master_Init 0B40    __end_of_I2C_Master_Read 0DD4  
  __end_of_I2C_Master_Wait 0E6E    __end_of_I2C_Master_Stop 0EB0                lcdInst@data 002F  
      __end_ofi2_lcdNibble 0C80           ___lldiv@quotient 0035          I2C_Master_Write@d 002E  
          ___lwmod@divisor 0036            ___lwmod@counter 0038  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Apr 04 10:36:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90                           ; Version 1.40
    91                           ; Generated 01/12/2016 GMT
    92                           ; 
    93                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC18F4620 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     
   125                           	psect	idataBANK0
   126  003146                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _bottle_count_disp
   130  003146  FFFF               	dw	65535
   131                           
   132                           	psect	mediumconst
   133  00FE44                     __pmediumconst:
   134                           	opt stack 0
   135  00FE44  00                 	db	0
   136  00FE45                     _keys:
   137                           	opt stack 0
   138  00FE45  31                 	db	49
   139  00FE46  32                 	db	50
   140  00FE47  33                 	db	51
   141  00FE48  41                 	db	65
   142  00FE49  34                 	db	52
   143  00FE4A  35                 	db	53
   144  00FE4B  36                 	db	54
   145  00FE4C  42                 	db	66
   146  00FE4D  37                 	db	55
   147  00FE4E  38                 	db	56
   148  00FE4F  39                 	db	57
   149  00FE50  43                 	db	67
   150  00FE51  2A                 	db	42
   151  00FE52  30                 	db	48
   152  00FE53  23                 	db	35
   153  00FE54  44                 	db	68
   154  00FE55  00                 	db	0
   155  00FE56                     __end_of_keys:
   156                           	opt stack 0
   157  00FE56                     _dpowers:
   158                           	opt stack 0
   159  00FE56  0001               	dw	1
   160  00FE58  000A               	dw	10
   161  00FE5A  0064               	dw	100
   162  00FE5C  03E8               	dw	1000
   163  00FE5E  2710               	dw	10000
   164  00FE60                     __end_of_dpowers:
   165                           	opt stack 0
   166  00FE60                     _hexpowers:
   167                           	opt stack 0
   168  00FE60  0001               	dw	1
   169  00FE62  0010               	dw	16
   170  00FE64  0100               	dw	256
   171  00FE66  1000               	dw	4096
   172  00FE68                     __end_of_hexpowers:
   173                           	opt stack 0
   174  00FE68                     _timeset:
   175                           	opt stack 0
   176  00FE68  50                 	db	80
   177  00FE69  35                 	db	53
   178  00FE6A  21                 	db	33
   179  00FE6B  08                 	db	8
   180  00FE6C  05                 	db	5
   181  00FE6D  02                 	db	2
   182  00FE6E  17                 	db	23
   183  00FE6F                     __end_of_timeset:
   184                           	opt stack 0
   185  00FE6F                     exp@coeff:
   186                           	opt stack 0
   187  00FE6F  00                 	db	0
   188  00FE70  80                 	db	128
   189  00FE71  3F                 	db	63
   190  00FE72  72                 	db	114
   191  00FE73  31                 	db	49
   192  00FE74  3F                 	db	63
   193  00FE75  FE                 	db	254
   194  00FE76  75                 	db	117
   195  00FE77  3E                 	db	62
   196  00FE78  58                 	db	88
   197  00FE79  63                 	db	99
   198  00FE7A  3D                 	db	61
   199  00FE7B  95                 	db	149
   200  00FE7C  1D                 	db	29
   201  00FE7D  3C                 	db	60
   202  00FE7E  C5                 	db	197
   203  00FE7F  AE                 	db	174
   204  00FE80  3A                 	db	58
   205  00FE81  79                 	db	121
   206  00FE82  21                 	db	33
   207  00FE83  39                 	db	57
   208  00FE84  94                 	db	148
   209  00FE85  80                 	db	128
   210  00FE86  37                 	db	55
   211  00FE87  93                 	db	147
   212  00FE88  A7                 	db	167
   213  00FE89  35                 	db	53
   214  00FE8A  56                 	db	86
   215  00FE8B  15                 	db	21
   216  00FE8C  34                 	db	52
   217  00FE8D                     __end_ofexp@coeff:
   218                           	opt stack 0
   219  00FE8D                     log@coeff:
   220                           	opt stack 0
   221  00FE8D  00                 	db	0
   222  00FE8E  00                 	db	0
   223  00FE8F  00                 	db	0
   224  00FE90  00                 	db	0
   225  00FE91  80                 	db	128
   226  00FE92  3F                 	db	63
   227  00FE93  F0                 	db	240
   228  00FE94  FF                 	db	255
   229  00FE95  BE                 	db	190
   230  00FE96  E2                 	db	226
   231  00FE97  A9                 	db	169
   232  00FE98  3E                 	db	62
   233  00FE99  83                 	db	131
   234  00FE9A  76                 	db	118
   235  00FE9B  BE                 	db	190
   236  00FE9C  AE                 	db	174
   237  00FE9D  2B                 	db	43
   238  00FE9E  3E                 	db	62
   239  00FE9F  3C                 	db	60
   240  00FEA0  C3                 	db	195
   241  00FEA1  BD                 	db	189
   242  00FEA2  D2                 	db	210
   243  00FEA3  13                 	db	19
   244  00FEA4  3D                 	db	61
   245  00FEA5  78                 	db	120
   246  00FEA6  D3                 	db	211
   247  00FEA7  BB                 	db	187
   248  00FEA8                     __end_oflog@coeff:
   249                           	opt stack 0
   250  0000                     _TMR0	set	4054
   251  0000                     _ADCON0	set	4034
   252  0000                     _ADCON1	set	4033
   253  0000                     _INTCONbits	set	4082
   254  0000                     _LATA	set	3977
   255  0000                     _LATAbits	set	3977
   256  0000                     _LATB	set	3978
   257  0000                     _LATC	set	3979
   258  0000                     _LATCbits	set	3979
   259  0000                     _LATD	set	3980
   260  0000                     _LATDbits	set	3980
   261  0000                     _LATE	set	3981
   262  0000                     _PORTAbits	set	3968
   263  0000                     _PORTB	set	3969
   264  0000                     _SSPADD	set	4040
   265  0000                     _SSPBUF	set	4041
   266  0000                     _SSPCON1	set	4038
   267  0000                     _SSPCON2	set	4037
   268  0000                     _SSPSTAT	set	4039
   269  0000                     _TRISA	set	3986
   270  0000                     _TRISB	set	3987
   271  0000                     _TRISC	set	3988
   272  0000                     _TRISD	set	3989
   273  0000                     _TRISE	set	3990
   274  0000                     _ACKDT	set	32301
   275  0000                     _ACKEN	set	32300
   276  0000                     _GIE	set	32663
   277  0000                     _INT0IE	set	32660
   278  0000                     _INT1IE	set	32643
   279  0000                     _INT1IF	set	32640
   280  0000                     _INT2IE	set	32644
   281  0000                     _PEN	set	32298
   282  0000                     _PSA	set	32427
   283  0000                     _RCEN	set	32299
   284  0000                     _RSEN	set	32297
   285  0000                     _SEN	set	32296
   286  0000                     _T08BIT	set	32430
   287  0000                     _T0CS	set	32429
   288  0000                     _T0PS0	set	32424
   289  0000                     _T0PS1	set	32425
   290  0000                     _T0PS2	set	32426
   291  0000                     _TMR0IE	set	32661
   292  0000                     _TMR0IF	set	32658
   293  0000                     _TMR0ON	set	32431
   294  0000                     _TRISC3	set	31907
   295  0000                     _TRISC4	set	31908
   296  0000                     _nRBPU	set	32655
   297  00FEA8                     STR_3:
   298  00FEA8  47                 	db	71	;'G'
   299  00FEA9  25                 	db	37
   300  00FEAA  75                 	db	117	;'u'
   301  00FEAB  20                 	db	32
   302  00FEAC  42                 	db	66	;'B'
   303  00FEAD  25                 	db	37
   304  00FEAE  75                 	db	117	;'u'
   305  00FEAF  20                 	db	32
   306  00FEB0  20                 	db	32
   307  00FEB1  20                 	db	32
   308  00FEB2  20                 	db	32
   309  00FEB3  20                 	db	32
   310  00FEB4  20                 	db	32
   311  00FEB5  20                 	db	32
   312  00FEB6  20                 	db	32
   313  00FEB7  20                 	db	32
   314  00FEB8  20                 	db	32
   315  00FEB9  20                 	db	32
   316  00FEBA  20                 	db	32
   317  00FEBB  20                 	db	32
   318  00FEBC  20                 	db	32
   319  00FEBD  20                 	db	32
   320  00FEBE  20                 	db	32
   321  00FEBF  00                 	db	0
   322  00FEC0                     STR_2:
   323  00FEC0  43                 	db	67	;'C'
   324  00FEC1  25                 	db	37
   325  00FEC2  75                 	db	117	;'u'
   326  00FEC3  20                 	db	32
   327  00FEC4  52                 	db	82	;'R'
   328  00FEC5  25                 	db	37
   329  00FEC6  75                 	db	117	;'u'
   330  00FEC7  20                 	db	32
   331  00FEC8  20                 	db	32
   332  00FEC9  20                 	db	32
   333  00FECA  20                 	db	32
   334  00FECB  20                 	db	32
   335  00FECC  20                 	db	32
   336  00FECD  20                 	db	32
   337  00FECE  20                 	db	32
   338  00FECF  20                 	db	32
   339  00FED0  20                 	db	32
   340  00FED1  20                 	db	32
   341  00FED2  20                 	db	32
   342  00FED3  20                 	db	32
   343  00FED4  20                 	db	32
   344  00FED5  20                 	db	32
   345  00FED6  20                 	db	32
   346  00FED7  00                 	db	0
   347  00FED8                     STR_16:
   348  00FED8  54                 	db	84	;'T'
   349  00FED9  6F                 	db	111	;'o'
   350  00FEDA  74                 	db	116	;'t'
   351  00FEDB  61                 	db	97	;'a'
   352  00FEDC  6C                 	db	108	;'l'
   353  00FEDD  20                 	db	32
   354  00FEDE  4F                 	db	79	;'O'
   355  00FEDF  70                 	db	112	;'p'
   356  00FEE0  65                 	db	101	;'e'
   357  00FEE1  72                 	db	114	;'r'
   358  00FEE2  61                 	db	97	;'a'
   359  00FEE3  74                 	db	116	;'t'
   360  00FEE4  69                 	db	105	;'i'
   361  00FEE5  6F                 	db	111	;'o'
   362  00FEE6  6E                 	db	110	;'n'
   363  00FEE7  20                 	db	32
   364  00FEE8  20                 	db	32
   365  00FEE9  20                 	db	32
   366  00FEEA  20                 	db	32
   367  00FEEB  20                 	db	32
   368  00FEEC  20                 	db	32
   369  00FEED  20                 	db	32
   370  00FEEE  00                 	db	0
   371  00FEEF                     STR_7:
   372  00FEEF  44                 	db	68	;'D'
   373  00FEF0  61                 	db	97	;'a'
   374  00FEF1  74                 	db	116	;'t'
   375  00FEF2  65                 	db	101	;'e'
   376  00FEF3  3A                 	db	58	;':'
   377  00FEF4  20                 	db	32
   378  00FEF5  25                 	db	37
   379  00FEF6  30                 	db	48	;'0'
   380  00FEF7  32                 	db	50	;'2'
   381  00FEF8  78                 	db	120	;'x'
   382  00FEF9  2F                 	db	47
   383  00FEFA  25                 	db	37
   384  00FEFB  30                 	db	48	;'0'
   385  00FEFC  32                 	db	50	;'2'
   386  00FEFD  78                 	db	120	;'x'
   387  00FEFE  2F                 	db	47
   388  00FEFF  25                 	db	37
   389  00FF00  30                 	db	48	;'0'
   390  00FF01  32                 	db	50	;'2'
   391  00FF02  78                 	db	120	;'x'
   392  00FF03  20                 	db	32
   393  00FF04  20                 	db	32
   394  00FF05  00                 	db	0
   395  00FF06                     STR_8:
   396  00FF06  54                 	db	84	;'T'
   397  00FF07  69                 	db	105	;'i'
   398  00FF08  6D                 	db	109	;'m'
   399  00FF09  65                 	db	101	;'e'
   400  00FF0A  3A                 	db	58	;':'
   401  00FF0B  20                 	db	32
   402  00FF0C  25                 	db	37
   403  00FF0D  30                 	db	48	;'0'
   404  00FF0E  32                 	db	50	;'2'
   405  00FF0F  78                 	db	120	;'x'
   406  00FF10  3A                 	db	58	;':'
   407  00FF11  25                 	db	37
   408  00FF12  30                 	db	48	;'0'
   409  00FF13  32                 	db	50	;'2'
   410  00FF14  78                 	db	120	;'x'
   411  00FF15  3A                 	db	58	;':'
   412  00FF16  25                 	db	37
   413  00FF17  30                 	db	48	;'0'
   414  00FF18  32                 	db	50	;'2'
   415  00FF19  78                 	db	120	;'x'
   416  00FF1A  20                 	db	32
   417  00FF1B  20                 	db	32
   418  00FF1C  00                 	db	0
   419  00FF1D                     STR_17:
   420  00FF1D  54                 	db	84	;'T'
   421  00FF1E  69                 	db	105	;'i'
   422  00FF1F  6D                 	db	109	;'m'
   423  00FF20  65                 	db	101	;'e'
   424  00FF21  3A                 	db	58	;':'
   425  00FF22  20                 	db	32
   426  00FF23  25                 	db	37
   427  00FF24  64                 	db	100	;'d'
   428  00FF25  20                 	db	32
   429  00FF26  73                 	db	115	;'s'
   430  00FF27  20                 	db	32
   431  00FF28  20                 	db	32
   432  00FF29  20                 	db	32
   433  00FF2A  20                 	db	32
   434  00FF2B  20                 	db	32
   435  00FF2C  20                 	db	32
   436  00FF2D  20                 	db	32
   437  00FF2E  00                 	db	0
   438  00FF2F                     STR_21:
   439  00FF2F  30                 	db	48	;'0'
   440  00FF30  31                 	db	49	;'1'
   441  00FF31  32                 	db	50	;'2'
   442  00FF32  33                 	db	51	;'3'
   443  00FF33  34                 	db	52	;'4'
   444  00FF34  35                 	db	53	;'5'
   445  00FF35  36                 	db	54	;'6'
   446  00FF36  37                 	db	55	;'7'
   447  00FF37  38                 	db	56	;'8'
   448  00FF38  39                 	db	57	;'9'
   449  00FF39  61                 	db	97	;'a'
   450  00FF3A  62                 	db	98	;'b'
   451  00FF3B  63                 	db	99	;'c'
   452  00FF3C  64                 	db	100	;'d'
   453  00FF3D  65                 	db	101	;'e'
   454  00FF3E  66                 	db	102	;'f'
   455  00FF3F  00                 	db	0
   456  00FF40                     STR_10:
   457  00FF40  54                 	db	84	;'T'
   458  00FF41  6F                 	db	111	;'o'
   459  00FF42  74                 	db	116	;'t'
   460  00FF43  61                 	db	97	;'a'
   461  00FF44  6C                 	db	108	;'l'
   462  00FF45  3A                 	db	58	;':'
   463  00FF46  20                 	db	32
   464  00FF47  25                 	db	37
   465  00FF48  64                 	db	100	;'d'
   466  00FF49  20                 	db	32
   467  00FF4A  20                 	db	32
   468  00FF4B  20                 	db	32
   469  00FF4C  20                 	db	32
   470  00FF4D  20                 	db	32
   471  00FF4E  20                 	db	32
   472  00FF4F  20                 	db	32
   473  00FF50  00                 	db	0
   474  00FF51                     STR_9:
   475  00FF51  42                 	db	66	;'B'
   476  00FF52  6F                 	db	111	;'o'
   477  00FF53  74                 	db	116	;'t'
   478  00FF54  74                 	db	116	;'t'
   479  00FF55  6C                 	db	108	;'l'
   480  00FF56  65                 	db	101	;'e'
   481  00FF57  20                 	db	32
   482  00FF58  43                 	db	67	;'C'
   483  00FF59  6F                 	db	111	;'o'
   484  00FF5A  75                 	db	117	;'u'
   485  00FF5B  6E                 	db	110	;'n'
   486  00FF5C  74                 	db	116	;'t'
   487  00FF5D  20                 	db	32
   488  00FF5E  20                 	db	32
   489  00FF5F  20                 	db	32
   490  00FF60  20                 	db	32
   491  00FF61  00                 	db	0
   492  00FF62                     STR_11:
   493  00FF62  59                 	db	89	;'Y'
   494  00FF63  4F                 	db	79	;'O'
   495  00FF64  50                 	db	80	;'P'
   496  00FF65  20                 	db	32
   497  00FF66  57                 	db	87	;'W'
   498  00FF67  2F                 	db	47
   499  00FF68  20                 	db	32
   500  00FF69  43                 	db	67	;'C'
   501  00FF6A  41                 	db	65	;'A'
   502  00FF6B  50                 	db	80	;'P'
   503  00FF6C  3A                 	db	58	;':'
   504  00FF6D  20                 	db	32
   505  00FF6E  25                 	db	37
   506  00FF6F  64                 	db	100	;'d'
   507  00FF70  20                 	db	32
   508  00FF71  20                 	db	32
   509  00FF72  00                 	db	0
   510  00FF73                     STR_12:
   511  00FF73  59                 	db	89	;'Y'
   512  00FF74  4F                 	db	79	;'O'
   513  00FF75  50                 	db	80	;'P'
   514  00FF76  20                 	db	32
   515  00FF77  4E                 	db	78	;'N'
   516  00FF78  4F                 	db	79	;'O'
   517  00FF79  20                 	db	32
   518  00FF7A  43                 	db	67	;'C'
   519  00FF7B  41                 	db	65	;'A'
   520  00FF7C  50                 	db	80	;'P'
   521  00FF7D  3A                 	db	58	;':'
   522  00FF7E  20                 	db	32
   523  00FF7F  25                 	db	37
   524  00FF80  64                 	db	100	;'d'
   525  00FF81  20                 	db	32
   526  00FF82  20                 	db	32
   527  00FF83  00                 	db	0
   528  00FF84                     STR_13:
   529  00FF84  45                 	db	69	;'E'
   530  00FF85  53                 	db	83	;'S'
   531  00FF86  4B                 	db	75	;'K'
   532  00FF87  41                 	db	65	;'A'
   533  00FF88  20                 	db	32
   534  00FF89  57                 	db	87	;'W'
   535  00FF8A  2F                 	db	47
   536  00FF8B  20                 	db	32
   537  00FF8C  43                 	db	67	;'C'
   538  00FF8D  41                 	db	65	;'A'
   539  00FF8E  50                 	db	80	;'P'
   540  00FF8F  3A                 	db	58	;':'
   541  00FF90  20                 	db	32
   542  00FF91  25                 	db	37
   543  00FF92  64                 	db	100	;'d'
   544  00FF93  20                 	db	32
   545  00FF94  00                 	db	0
   546  00FF95                     STR_14:
   547  00FF95  45                 	db	69	;'E'
   548  00FF96  53                 	db	83	;'S'
   549  00FF97  4B                 	db	75	;'K'
   550  00FF98  41                 	db	65	;'A'
   551  00FF99  20                 	db	32
   552  00FF9A  4E                 	db	78	;'N'
   553  00FF9B  4F                 	db	79	;'O'
   554  00FF9C  20                 	db	32
   555  00FF9D  43                 	db	67	;'C'
   556  00FF9E  41                 	db	65	;'A'
   557  00FF9F  50                 	db	80	;'P'
   558  00FFA0  3A                 	db	58	;':'
   559  00FFA1  20                 	db	32
   560  00FFA2  25                 	db	37
   561  00FFA3  64                 	db	100	;'d'
   562  00FFA4  20                 	db	32
   563  00FFA5  00                 	db	0
   564  00FFA6                     STR_19:
   565  00FFA6  4F                 	db	79	;'O'
   566  00FFA7  70                 	db	112	;'p'
   567  00FFA8  65                 	db	101	;'e'
   568  00FFA9  72                 	db	114	;'r'
   569  00FFAA  61                 	db	97	;'a'
   570  00FFAB  74                 	db	116	;'t'
   571  00FFAC  69                 	db	105	;'i'
   572  00FFAD  6F                 	db	111	;'o'
   573  00FFAE  6E                 	db	110	;'n'
   574  00FFAF  20                 	db	32
   575  00FFB0  44                 	db	68	;'D'
   576  00FFB1  6F                 	db	111	;'o'
   577  00FFB2  6E                 	db	110	;'n'
   578  00FFB3  65                 	db	101	;'e'
   579  00FFB4  21                 	db	33
   580  00FFB5  00                 	db	0
   581  00FFB6                     STR_15:
   582  00FFB6  45                 	db	69	;'E'
   583  00FFB7  52                 	db	82	;'R'
   584  00FFB8  52                 	db	82	;'R'
   585  00FFB9  3A                 	db	58	;':'
   586  00FFBA  20                 	db	32
   587  00FFBB  42                 	db	66	;'B'
   588  00FFBC  41                 	db	65	;'A'
   589  00FFBD  44                 	db	68	;'D'
   590  00FFBE  20                 	db	32
   591  00FFBF  42                 	db	66	;'B'
   592  00FFC0  54                 	db	84	;'T'
   593  00FFC1  4C                 	db	76	;'L'
   594  00FFC2  43                 	db	67	;'C'
   595  00FFC3  4E                 	db	78	;'N'
   596  00FFC4  54                 	db	84	;'T'
   597  00FFC5  00                 	db	0
   598  00FFC6                     STR_20:
   599  00FFC6  45                 	db	69	;'E'
   600  00FFC7  4D                 	db	77	;'M'
   601  00FFC8  45                 	db	69	;'E'
   602  00FFC9  52                 	db	82	;'R'
   603  00FFCA  47                 	db	71	;'G'
   604  00FFCB  45                 	db	69	;'E'
   605  00FFCC  4E                 	db	78	;'N'
   606  00FFCD  43                 	db	67	;'C'
   607  00FFCE  59                 	db	89	;'Y'
   608  00FFCF  20                 	db	32
   609  00FFD0  53                 	db	83	;'S'
   610  00FFD1  54                 	db	84	;'T'
   611  00FFD2  4F                 	db	79	;'O'
   612  00FFD3  50                 	db	80	;'P'
   613  00FFD4  00                 	db	0
   614  00FFD5                     STR_4:
   615  00FFD5  45                 	db	69	;'E'
   616  00FFD6  52                 	db	82	;'R'
   617  00FFD7  52                 	db	82	;'R'
   618  00FFD8  3A                 	db	58	;':'
   619  00FFD9  20                 	db	32
   620  00FFDA  42                 	db	66	;'B'
   621  00FFDB  41                 	db	65	;'A'
   622  00FFDC  44                 	db	68	;'D'
   623  00FFDD  20                 	db	32
   624  00FFDE  49                 	db	73	;'I'
   625  00FFDF  53                 	db	83	;'S'
   626  00FFE0  52                 	db	82	;'R'
   627  00FFE1  00                 	db	0
   628  00FFE2                     STR_6:
   629  00FFE2  25                 	db	37
   630  00FFE3  64                 	db	100	;'d'
   631  00FFE4  20                 	db	32
   632  00FFE5  20                 	db	32
   633  00FFE6  20                 	db	32
   634  00FFE7  20                 	db	32
   635  00FFE8  20                 	db	32
   636  00FFE9  20                 	db	32
   637  00FFEA  00                 	db	0
   638  00FFEB                     STR_1:
   639  00FFEB  72                 	db	114	;'r'
   640  00FFEC  75                 	db	117	;'u'
   641  00FFED  6E                 	db	110	;'n'
   642  00FFEE  6E                 	db	110	;'n'
   643  00FFEF  69                 	db	105	;'i'
   644  00FFF0  6E                 	db	110	;'n'
   645  00FFF1  67                 	db	103	;'g'
   646  00FFF2  00                 	db	0
   647  00FFF3                     STR_5:
   648  00FFF3  73                 	db	115	;'s'
   649  00FFF4  74                 	db	116	;'t'
   650  00FFF5  61                 	db	97	;'a'
   651  00FFF6  6E                 	db	110	;'n'
   652  00FFF7  64                 	db	100	;'d'
   653  00FFF8  62                 	db	98	;'b'
   654  00FFF9  79                 	db	121	;'y'
   655  00FFFA  00                 	db	0
   656  00FFFB                     STR_18:
   657  00FFFB  25                 	db	37
   658  00FFFC  64                 	db	100	;'d'
   659  00FFFD  00                 	db	0
   660                           
   661                           ; #config settings
   662  00FFFE  00                 	db	0	; dummy byte at the end
   663  0000                     
   664                           	psect	cinit
   665  002DA6                     __pcinit:
   666                           	opt stack 0
   667  002DA6                     start_initialization:
   668                           	opt stack 0
   669  002DA6                     __initialization:
   670                           	opt stack 0
   671                           
   672                           ; Initialize objects allocated to BANK0 (2 bytes)
   673                           ; load TBLPTR registers with __pidataBANK0
   674  002DA6  0E46               	movlw	low __pidataBANK0
   675  002DA8  6EF6               	movwf	tblptrl,c
   676  002DAA  0E31               	movlw	high __pidataBANK0
   677  002DAC  6EF7               	movwf	tblptrh,c
   678  002DAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   679  002DB0  6EF8               	movwf	tblptru,c
   680  002DB2  0009               	tblrd		*+	;fetch initializer
   681  002DB4  CFF5 F0ED          	movff	tablat,__pdataBANK0
   682  002DB8  0009               	tblrd		*+	;fetch initializer
   683  002DBA  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   684                           
   685                           ; Clear objects allocated to BANK1 (14 bytes)
   686  002DBE  EE01  F010         	lfsr	0,__pbssBANK1
   687  002DC2  0E0E               	movlw	14
   688  002DC4                     clear_0:
   689  002DC4  6AEE               	clrf	postinc0,c
   690  002DC6  06E8               	decf	wreg,f,c
   691  002DC8  E1FD               	bnz	clear_0
   692                           
   693                           ; Clear objects allocated to BANK0 (72 bytes)
   694  002DCA  EE00  F080         	lfsr	0,__pbssBANK0
   695  002DCE  0E48               	movlw	72
   696  002DD0                     clear_1:
   697  002DD0  6AEE               	clrf	postinc0,c
   698  002DD2  06E8               	decf	wreg,f,c
   699  002DD4  E1FD               	bnz	clear_1
   700                           
   701                           ; Clear objects allocated to COMRAM (8 bytes)
   702  002DD6  EE00  F076         	lfsr	0,__pbssCOMRAM
   703  002DDA  0E08               	movlw	8
   704  002DDC                     clear_2:
   705  002DDC  6AEE               	clrf	postinc0,c
   706  002DDE  06E8               	decf	wreg,f,c
   707  002DE0  E1FD               	bnz	clear_2
   708  002DE2                     end_of_initialization:
   709                           	opt stack 0
   710  002DE2                     __end_of__initialization:
   711                           	opt stack 0
   712  002DE2  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   713  002DE4  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   714  002DE6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   715  002DE8  6EF8               	movwf	tblptru,c
   716  002DEA  0100               	movlb	0
   717  002DEC  EFC9  F009         	goto	_main	;jump to C main() function
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           
   725                           	psect	bssCOMRAM
   726  000076                     __pbssCOMRAM:
   727                           	opt stack 0
   728  000076                     _end_time:
   729                           	opt stack 0
   730  000076                     	ds	2
   731  000078                     _i:
   732                           	opt stack 0
   733  000078                     	ds	2
   734  00007A                     _start_time:
   735                           	opt stack 0
   736  00007A                     	ds	2
   737  00007C                     _stime:
   738                           	opt stack 0
   739  00007C                     	ds	2
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           
   747                           	psect	bssBANK0
   748  000080                     __pbssBANK0:
   749                           	opt stack 0
   750  000080                     _bottle_count_array:
   751                           	opt stack 0
   752  000080                     	ds	10
   753  00008A                     _color:
   754                           	opt stack 0
   755  00008A                     	ds	8
   756  000092                     _time:
   757                           	opt stack 0
   758  000092                     	ds	7
   759  000099                     _color_high:
   760                           	opt stack 0
   761  000099                     	ds	4
   762  00009D                     _color_low:
   763                           	opt stack 0
   764  00009D                     	ds	4
   765  0000A1                     _b:
   766                           	opt stack 0
   767  0000A1                     	ds	3
   768  0000A4                     _b_p:
   769                           	opt stack 0
   770  0000A4                     	ds	3
   771  0000A7                     _r:
   772                           	opt stack 0
   773  0000A7                     	ds	3
   774  0000AA                     _r_p:
   775                           	opt stack 0
   776  0000AA                     	ds	3
   777  0000AD                     _bottle_read_bot:
   778                           	opt stack 0
   779  0000AD                     	ds	2
   780  0000AF                     _bottle_read_top:
   781                           	opt stack 0
   782  0000AF                     	ds	2
   783  0000B1                     _errno:
   784                           	opt stack 0
   785  0000B1                     	ds	2
   786  0000B3                     _etime:
   787                           	opt stack 0
   788  0000B3                     	ds	2
   789  0000B5                     _flag_bottle:
   790                           	opt stack 0
   791  0000B5                     	ds	2
   792  0000B7                     _flag_bottle_high:
   793                           	opt stack 0
   794  0000B7                     	ds	2
   795  0000B9                     _flag_picbug:
   796                           	opt stack 0
   797  0000B9                     	ds	2
   798  0000BB                     _flag_top_read:
   799                           	opt stack 0
   800  0000BB                     	ds	2
   801  0000BD                     _flag_yopNC:
   802                           	opt stack 0
   803  0000BD                     	ds	2
   804  0000BF                     _j:
   805                           	opt stack 0
   806  0000BF                     	ds	2
   807  0000C1                     _operation_disp:
   808                           	opt stack 0
   809  0000C1                     	ds	2
   810  0000C3                     _operation_time:
   811                           	opt stack 0
   812  0000C3                     	ds	2
   813  0000C5                     _testflag:
   814                           	opt stack 0
   815  0000C5                     	ds	2
   816  0000C7                     _curr_state:
   817                           	opt stack 0
   818  0000C7                     	ds	1
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           
   826                           	psect	dataBANK0
   827  0000ED                     __pdataBANK0:
   828                           	opt stack 0
   829  0000ED                     _bottle_count_disp:
   830                           	opt stack 0
   831  0000ED                     	ds	2
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839                           	psect	bssBANK1
   840  000110                     __pbssBANK1:
   841                           	opt stack 0
   842  000110                     _colorprev:
   843                           	opt stack 0
   844  000110                     	ds	8
   845  000118                     _testint:
   846                           	opt stack 0
   847  000118                     	ds	6
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855                           	psect	cstackBANK1
   856  000100                     __pcstackBANK1:
   857                           	opt stack 0
   858  000100                     ??_printf:
   859  000100                     ___ftdiv@cntr:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x0
   863  000100                     	ds	1
   864  000101                     ___ftdiv@f3:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x1
   868  000101                     	ds	3
   869  000104                     printf@idx:
   870                           	opt stack 0
   871  000104                     ___ftdiv@exp:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x4
   875  000104                     	ds	1
   876  000105                     ___ftdiv@sign:
   877                           	opt stack 0
   878  000105                     printf@ap:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x5
   882  000105                     	ds	1
   883  000106                     ___ftge@ff1:
   884                           	opt stack 0
   885                           
   886                           ; 3 bytes @ 0x6
   887  000106                     	ds	1
   888  000107                     printf@prec:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x7
   892  000107                     	ds	1
   893  000108                     printf@val:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x8
   897  000108                     	ds	1
   898  000109                     ___ftge@ff2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x9
   902  000109                     	ds	1
   903  00010A                     printf@flag:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0xA
   907  00010A                     	ds	1
   908  00010B                     printf@width:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0xB
   912  00010B                     	ds	2
   913  00010D                     printf@c:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0xD
   917  00010D                     	ds	1
   918  00010E                     ??_main:
   919                           
   920                           ; 1 bytes @ 0xE
   921  00010E                     	ds	2
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           
   929                           	psect	cstackBANK0
   930  0000C8                     __pcstackBANK0:
   931                           	opt stack 0
   932  0000C8                     ??_isr:
   933                           
   934                           ; 1 bytes @ 0x0
   935  0000C8                     	ds	16
   936  0000D8                     ??_isdigit:
   937  0000D8                     ??_I2C_Master_Wait:
   938  0000D8                     ?___wmul:
   939                           	opt stack 0
   940  0000D8                     ?___awmod:
   941                           	opt stack 0
   942  0000D8                     ?___lwdiv:
   943                           	opt stack 0
   944  0000D8                     ?___ftpack:
   945                           	opt stack 0
   946  0000D8                     ?___lldiv:
   947                           	opt stack 0
   948  0000D8                     lcdNibble@temp:
   949                           	opt stack 0
   950  0000D8                     servo_rotate0@degree:
   951                           	opt stack 0
   952  0000D8                     servo_rotate1@degree:
   953                           	opt stack 0
   954  0000D8                     ___wmul@multiplier:
   955                           	opt stack 0
   956  0000D8                     ___awmod@dividend:
   957                           	opt stack 0
   958  0000D8                     ___lwdiv@dividend:
   959                           	opt stack 0
   960  0000D8                     ___ftpack@arg:
   961                           	opt stack 0
   962  0000D8                     ___lldiv@dividend:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x10
   966  0000D8                     	ds	1
   967  0000D9                     I2C_Master_Read@a:
   968                           	opt stack 0
   969  0000D9                     lcdNibble@data:
   970                           	opt stack 0
   971  0000D9                     _isdigit$805:
   972                           	opt stack 0
   973  0000D9                     I2C_Master_Write@d:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x11
   977  0000D9                     	ds	1
   978  0000DA                     ??_servo_rotate1:
   979  0000DA                     ??_servo_rotate0:
   980  0000DA                     I2C_Master_Read@temp:
   981                           	opt stack 0
   982  0000DA                     lcdInst@data:
   983                           	opt stack 0
   984  0000DA                     putch@data:
   985                           	opt stack 0
   986  0000DA                     isdigit@c:
   987                           	opt stack 0
   988  0000DA                     ___wmul@multiplicand:
   989                           	opt stack 0
   990  0000DA                     ___awmod@divisor:
   991                           	opt stack 0
   992  0000DA                     ___lwdiv@divisor:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x12
   996  0000DA                     	ds	1
   997  0000DB                     ??_read_colorsensor:
   998  0000DB                     ??_I2C_ColorSens_Init:
   999  0000DB                     ??_initLCD:
  1000  0000DB                     ___ftpack@exp:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x13
  1004  0000DB                     	ds	1
  1005  0000DC                     ___awmod@counter:
  1006                           	opt stack 0
  1007  0000DC                     ___ftpack@sign:
  1008                           	opt stack 0
  1009  0000DC                     ___lwdiv@counter:
  1010                           	opt stack 0
  1011  0000DC                     ___wmul@product:
  1012                           	opt stack 0
  1013  0000DC                     ___lldiv@divisor:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x14
  1017  0000DC                     	ds	1
  1018  0000DD                     ??___ftpack:
  1019  0000DD                     ___awmod@sign:
  1020                           	opt stack 0
  1021  0000DD                     servo_rotate0@duty:
  1022                           	opt stack 0
  1023  0000DD                     servo_rotate1@duty:
  1024                           	opt stack 0
  1025  0000DD                     ___lwdiv@quotient:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x15
  1029  0000DD                     	ds	2
  1030  0000DF                     ?___lwmod:
  1031                           	opt stack 0
  1032  0000DF                     ___lwmod@dividend:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x17
  1036  0000DF                     	ds	1
  1037  0000E0                     ?___ftdiv:
  1038                           	opt stack 0
  1039  0000E0                     ?___awtoft:
  1040                           	opt stack 0
  1041  0000E0                     ___awtoft@c:
  1042                           	opt stack 0
  1043  0000E0                     ___ftdiv@f1:
  1044                           	opt stack 0
  1045  0000E0                     ___lldiv@quotient:
  1046                           	opt stack 0
  1047                           
  1048                           ; 4 bytes @ 0x18
  1049  0000E0                     	ds	1
  1050  0000E1                     ___lwmod@divisor:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x19
  1054  0000E1                     	ds	2
  1055  0000E3                     ___awtoft@sign:
  1056                           	opt stack 0
  1057  0000E3                     ___lwmod@counter:
  1058                           	opt stack 0
  1059  0000E3                     ___ftdiv@f2:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0x1B
  1063  0000E3                     	ds	1
  1064  0000E4                     ?_printf:
  1065                           	opt stack 0
  1066  0000E4                     ___lldiv@counter:
  1067                           	opt stack 0
  1068  0000E4                     printf@f:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x1C
  1072  0000E4                     	ds	1
  1073  0000E5                     I2C_Master_Init@c:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x1D
  1077  0000E5                     	ds	1
  1078  0000E6                     ??___ftdiv:
  1079                           
  1080                           ; 1 bytes @ 0x1E
  1081  0000E6                     	ds	3
  1082  0000E9                     ??_I2C_Master_Init:
  1083  0000E9                     ??___ftge:
  1084                           
  1085                           ; 1 bytes @ 0x21
  1086  0000E9                     	ds	3
  1087  0000EC                     ??_operation:
  1088  0000EC                     date_time@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x24
  1092  0000EC                     	ds	1
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           postinc0	equ	0xFEE
  1098                           wreg	equ	0xFE8
  1099                           
  1100                           	psect	cstackCOMRAM
  1101  000001                     __pcstackCOMRAM:
  1102                           	opt stack 0
  1103  000001                     ??i2_I2C_Master_Wait:
  1104  000001                     ??i2_isdigit:
  1105  000001                     ?___awdiv:
  1106                           	opt stack 0
  1107  000001                     ?i2___wmul:
  1108                           	opt stack 0
  1109  000001                     ?i2___lwdiv:
  1110                           	opt stack 0
  1111  000001                     ?_frexp:
  1112                           	opt stack 0
  1113  000001                     ?___ftneg:
  1114                           	opt stack 0
  1115  000001                     ?i2___ftpack:
  1116                           	opt stack 0
  1117  000001                     i2lcdNibble@temp:
  1118                           	opt stack 0
  1119  000001                     ___awdiv@dividend:
  1120                           	opt stack 0
  1121  000001                     i2servo_rotate1@degree:
  1122                           	opt stack 0
  1123  000001                     i2___wmul@multiplier:
  1124                           	opt stack 0
  1125  000001                     i2___lwdiv@dividend:
  1126                           	opt stack 0
  1127  000001                     ___ftneg@f1:
  1128                           	opt stack 0
  1129  000001                     frexp@value:
  1130                           	opt stack 0
  1131  000001                     i2___ftpack@arg:
  1132                           	opt stack 0
  1133  000001                     i2___ftge@ff1:
  1134                           	opt stack 0
  1135                           
  1136                           ; 3 bytes @ 0x0
  1137  000001                     	ds	1
  1138  000002                     i2I2C_Master_Read@a:
  1139                           	opt stack 0
  1140  000002                     i2lcdNibble@data:
  1141                           	opt stack 0
  1142  000002                     i2_isdigit$805:
  1143                           	opt stack 0
  1144  000002                     i2I2C_Master_Write@d:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x1
  1148  000002                     	ds	1
  1149  000003                     ??i2_servo_rotate1:
  1150  000003                     i2I2C_Master_Read@temp:
  1151                           	opt stack 0
  1152  000003                     i2lcdInst@data:
  1153                           	opt stack 0
  1154  000003                     i2putch@data:
  1155                           	opt stack 0
  1156  000003                     i2isdigit@c:
  1157                           	opt stack 0
  1158  000003                     ___awdiv@divisor:
  1159                           	opt stack 0
  1160  000003                     i2___wmul@multiplicand:
  1161                           	opt stack 0
  1162  000003                     i2___lwdiv@divisor:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x2
  1166  000003                     	ds	1
  1167  000004                     ??i2_read_colorsensor:
  1168  000004                     read_time@i:
  1169                           	opt stack 0
  1170  000004                     i2___ftpack@exp:
  1171                           	opt stack 0
  1172  000004                     frexp@eptr:
  1173                           	opt stack 0
  1174  000004                     i2___ftge@ff2:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x3
  1178  000004                     	ds	1
  1179  000005                     ___awdiv@counter:
  1180                           	opt stack 0
  1181  000005                     i2___ftpack@sign:
  1182                           	opt stack 0
  1183  000005                     i2___wmul@product:
  1184                           	opt stack 0
  1185  000005                     i2___lwdiv@quotient:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x4
  1189  000005                     	ds	1
  1190  000006                     ??_frexp:
  1191  000006                     ??i2___ftpack:
  1192  000006                     ___awdiv@sign:
  1193                           	opt stack 0
  1194  000006                     i2servo_rotate1@duty:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x5
  1198  000006                     	ds	1
  1199  000007                     ??i2___ftge:
  1200  000007                     i2___lwdiv@counter:
  1201                           	opt stack 0
  1202  000007                     ___awdiv@quotient:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x6
  1206  000007                     	ds	1
  1207  000008                     ?i2___lwmod:
  1208                           	opt stack 0
  1209  000008                     i2___lwmod@dividend:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x7
  1213  000008                     	ds	1
  1214  000009                     ?___lltoft:
  1215                           	opt stack 0
  1216  000009                     ?i2___awtoft:
  1217                           	opt stack 0
  1218  000009                     ?i2___ftdiv:
  1219                           	opt stack 0
  1220  000009                     i2___awtoft@c:
  1221                           	opt stack 0
  1222  000009                     i2___ftdiv@f1:
  1223                           	opt stack 0
  1224  000009                     ___lltoft@c:
  1225                           	opt stack 0
  1226                           
  1227                           ; 4 bytes @ 0x8
  1228  000009                     	ds	1
  1229  00000A                     i2___lwmod@divisor:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x9
  1233  00000A                     	ds	2
  1234  00000C                     i2___awtoft@sign:
  1235                           	opt stack 0
  1236  00000C                     i2___lwmod@counter:
  1237                           	opt stack 0
  1238  00000C                     i2___ftdiv@f2:
  1239                           	opt stack 0
  1240                           
  1241                           ; 3 bytes @ 0xB
  1242  00000C                     	ds	1
  1243  00000D                     ??___lltoft:
  1244  00000D                     ?i2_printf:
  1245                           	opt stack 0
  1246  00000D                     ?___ftmul:
  1247                           	opt stack 0
  1248  00000D                     i2printf@f:
  1249                           	opt stack 0
  1250  00000D                     ___ftmul@f1:
  1251                           	opt stack 0
  1252                           
  1253                           ; 3 bytes @ 0xC
  1254  00000D                     	ds	2
  1255  00000F                     ??i2___ftdiv:
  1256                           
  1257                           ; 1 bytes @ 0xE
  1258  00000F                     	ds	1
  1259  000010                     ___ftmul@f2:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0xF
  1263  000010                     	ds	1
  1264  000011                     ___lltoft@exp:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x10
  1268  000011                     	ds	1
  1269  000012                     i2___ftdiv@cntr:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x11
  1273  000012                     	ds	1
  1274  000013                     ??___ftmul:
  1275  000013                     ??i2_printf:
  1276  000013                     i2___ftdiv@f3:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0x12
  1280  000013                     	ds	3
  1281  000016                     ___ftmul@exp:
  1282                           	opt stack 0
  1283  000016                     i2___ftdiv@exp:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x15
  1287  000016                     	ds	1
  1288  000017                     i2printf@idx:
  1289                           	opt stack 0
  1290  000017                     i2___ftdiv@sign:
  1291                           	opt stack 0
  1292  000017                     ___ftmul@f3_as_product:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0x16
  1296  000017                     	ds	1
  1297  000018                     i2printf@ap:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x17
  1301  000018                     	ds	2
  1302  00001A                     ___ftmul@cntr:
  1303                           	opt stack 0
  1304  00001A                     i2printf@prec:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x19
  1308  00001A                     	ds	1
  1309  00001B                     ___ftmul@sign:
  1310                           	opt stack 0
  1311  00001B                     i2printf@val:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1A
  1315  00001B                     	ds	1
  1316  00001C                     ?___ftadd:
  1317                           	opt stack 0
  1318  00001C                     ___ftadd@f1:
  1319                           	opt stack 0
  1320                           
  1321                           ; 3 bytes @ 0x1B
  1322  00001C                     	ds	1
  1323  00001D                     i2printf@flag:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x1C
  1327  00001D                     	ds	1
  1328  00001E                     i2printf@width:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x1D
  1332  00001E                     	ds	1
  1333  00001F                     ___ftadd@f2:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x1E
  1337  00001F                     	ds	1
  1338  000020                     i2printf@c:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x1F
  1342  000020                     	ds	2
  1343  000022                     ??___ftadd:
  1344                           
  1345                           ; 1 bytes @ 0x21
  1346  000022                     	ds	3
  1347  000025                     ___ftadd@sign:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x24
  1351  000025                     	ds	1
  1352  000026                     ___ftadd@exp2:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x25
  1356  000026                     	ds	1
  1357  000027                     ___ftadd@exp1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x26
  1361  000027                     	ds	1
  1362  000028                     ?___ftsub:
  1363                           	opt stack 0
  1364  000028                     ?_eval_poly:
  1365                           	opt stack 0
  1366  000028                     ?___fttol:
  1367                           	opt stack 0
  1368  000028                     ___ftsub@f1:
  1369                           	opt stack 0
  1370  000028                     ___fttol@f1:
  1371                           	opt stack 0
  1372  000028                     eval_poly@x:
  1373                           	opt stack 0
  1374                           
  1375                           ; 3 bytes @ 0x27
  1376  000028                     	ds	3
  1377  00002B                     eval_poly@d:
  1378                           	opt stack 0
  1379  00002B                     ___ftsub@f2:
  1380                           	opt stack 0
  1381                           
  1382                           ; 3 bytes @ 0x2A
  1383  00002B                     	ds	1
  1384  00002C                     ??___fttol:
  1385                           
  1386                           ; 1 bytes @ 0x2B
  1387  00002C                     	ds	1
  1388  00002D                     eval_poly@n:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x2C
  1392  00002D                     	ds	1
  1393  00002E                     
  1394                           ; 1 bytes @ 0x2D
  1395  00002E                     	ds	1
  1396  00002F                     ??_eval_poly:
  1397                           
  1398                           ; 1 bytes @ 0x2E
  1399  00002F                     	ds	2
  1400  000031                     ___fttol@sign1:
  1401                           	opt stack 0
  1402  000031                     eval_poly@res:
  1403                           	opt stack 0
  1404                           
  1405                           ; 3 bytes @ 0x30
  1406  000031                     	ds	1
  1407  000032                     ___fttol@lval:
  1408                           	opt stack 0
  1409                           
  1410                           ; 4 bytes @ 0x31
  1411  000032                     	ds	2
  1412  000034                     ?_log:
  1413                           	opt stack 0
  1414  000034                     ?_ldexp:
  1415                           	opt stack 0
  1416  000034                     ldexp@value:
  1417                           	opt stack 0
  1418  000034                     log@x:
  1419                           	opt stack 0
  1420                           
  1421                           ; 3 bytes @ 0x33
  1422  000034                     	ds	2
  1423  000036                     ___fttol@exp1:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x35
  1427  000036                     	ds	1
  1428  000037                     ?___altoft:
  1429                           	opt stack 0
  1430  000037                     ldexp@newexp:
  1431                           	opt stack 0
  1432  000037                     log@exponent:
  1433                           	opt stack 0
  1434  000037                     ___altoft@c:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x36
  1438  000037                     	ds	2
  1439  000039                     ??_ldexp:
  1440                           
  1441                           ; 1 bytes @ 0x38
  1442  000039                     	ds	2
  1443  00003B                     ??___altoft:
  1444                           
  1445                           ; 1 bytes @ 0x3A
  1446  00003B                     	ds	4
  1447  00003F                     ___altoft@exp:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x3E
  1451  00003F                     	ds	1
  1452  000040                     ___altoft@sign:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x3F
  1456  000040                     	ds	1
  1457  000041                     ?_floor:
  1458                           	opt stack 0
  1459  000041                     floor@x:
  1460                           	opt stack 0
  1461                           
  1462                           ; 3 bytes @ 0x40
  1463  000041                     	ds	3
  1464  000044                     floor@i:
  1465                           	opt stack 0
  1466                           
  1467                           ; 3 bytes @ 0x43
  1468  000044                     	ds	3
  1469  000047                     floor@expon:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x46
  1473  000047                     	ds	2
  1474  000049                     ?_exp:
  1475                           	opt stack 0
  1476  000049                     exp@x:
  1477                           	opt stack 0
  1478                           
  1479                           ; 3 bytes @ 0x48
  1480  000049                     	ds	3
  1481  00004C                     _exp$1248:
  1482                           	opt stack 0
  1483                           
  1484                           ; 3 bytes @ 0x4B
  1485  00004C                     	ds	3
  1486  00004F                     exp@exponent:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x4E
  1490  00004F                     	ds	2
  1491  000051                     exp@sign:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x50
  1495  000051                     	ds	1
  1496  000052                     ?_pow:
  1497                           	opt stack 0
  1498  000052                     pow@x:
  1499                           	opt stack 0
  1500                           
  1501                           ; 3 bytes @ 0x51
  1502  000052                     	ds	3
  1503  000055                     pow@y:
  1504                           	opt stack 0
  1505                           
  1506                           ; 3 bytes @ 0x54
  1507  000055                     	ds	3
  1508  000058                     _pow$1246:
  1509                           	opt stack 0
  1510                           
  1511                           ; 3 bytes @ 0x57
  1512  000058                     	ds	3
  1513  00005B                     _pow$1247:
  1514                           	opt stack 0
  1515                           
  1516                           ; 3 bytes @ 0x5A
  1517  00005B                     	ds	3
  1518  00005E                     pow@sign:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x5D
  1522  00005E                     	ds	1
  1523  00005F                     pow@yi:
  1524                           	opt stack 0
  1525                           
  1526                           ; 4 bytes @ 0x5E
  1527  00005F                     	ds	4
  1528  000063                     ?_dec_to_hex:
  1529                           	opt stack 0
  1530  000063                     dec_to_hex@num:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x62
  1534  000063                     	ds	2
  1535  000065                     _dec_to_hex$1245:
  1536                           	opt stack 0
  1537                           
  1538                           ; 3 bytes @ 0x64
  1539  000065                     	ds	3
  1540  000068                     _dec_to_hex$1372:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x67
  1544  000068                     	ds	3
  1545  00006B                     dec_to_hex@temp:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x6A
  1549  00006B                     	ds	2
  1550  00006D                     dec_to_hex@i:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x6C
  1554  00006D                     	ds	2
  1555  00006F                     dec_to_hex@hexnum:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x6E
  1559  00006F                     	ds	2
  1560  000071                     dec_to_hex@quotient:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x70
  1564  000071                     	ds	2
  1565  000073                     isr@i:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x72
  1569  000073                     	ds	1
  1570  000074                     _isr$1371:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x73
  1574  000074                     	ds	2
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           
  1582 ;;
  1583 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1584 ;;
  1585 ;; *************** function _main *****************
  1586 ;; Defined at:
  1587 ;;		line 16 in file "main.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;		None
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;Total ram usage:        2 bytes
  1606 ;; Hardware stack levels required when called:   11
  1607 ;; This function calls:
  1608 ;;		_I2C_ColorSens_Init
  1609 ;;		_I2C_Master_Init
  1610 ;;		_bottle_count
  1611 ;;		_bottle_time
  1612 ;;		_date_time
  1613 ;;		_emergencystop
  1614 ;;		_initLCD
  1615 ;;		_operation
  1616 ;;		_operationend
  1617 ;;		_standby
  1618 ;; This function is called by:
  1619 ;;		Startup code after reset
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text0
  1624  001392                     __ptext0:
  1625                           	opt stack 0
  1626  001392                     _main:
  1627                           	opt stack 20
  1628                           
  1629                           ;main.c: 23: TRISA = 0b11111011;
  1630                           
  1631                           ;incstack = 0
  1632  001392  0EFB               	movlw	251
  1633  001394  6E92               	movwf	3986,c	;volatile
  1634                           
  1635                           ;main.c: 24: TRISB = 0xFF;
  1636  001396  6893               	setf	3987,c	;volatile
  1637                           
  1638                           ;main.c: 25: TRISC = 0x00;
  1639  001398  0E00               	movlw	0
  1640  00139A  6E94               	movwf	3988,c	;volatile
  1641                           
  1642                           ;main.c: 26: TRISD = 0x00;
  1643  00139C  0E00               	movlw	0
  1644  00139E  6E95               	movwf	3989,c	;volatile
  1645                           
  1646                           ;main.c: 27: TRISE = 0x00;
  1647  0013A0  0E00               	movlw	0
  1648  0013A2  6E96               	movwf	3990,c	;volatile
  1649                           
  1650                           ;main.c: 29: LATA = 0x00;
  1651  0013A4  0E00               	movlw	0
  1652  0013A6  6E89               	movwf	3977,c	;volatile
  1653                           
  1654                           ;main.c: 30: LATB = 0x00;
  1655  0013A8  0E00               	movlw	0
  1656  0013AA  6E8A               	movwf	3978,c	;volatile
  1657                           
  1658                           ;main.c: 31: LATC = 0x00;
  1659  0013AC  0E00               	movlw	0
  1660  0013AE  6E8B               	movwf	3979,c	;volatile
  1661                           
  1662                           ;main.c: 32: LATD = 0x00;
  1663  0013B0  0E00               	movlw	0
  1664  0013B2  6E8C               	movwf	3980,c	;volatile
  1665                           
  1666                           ;main.c: 33: LATE = 0x00;
  1667  0013B4  0E00               	movlw	0
  1668  0013B6  6E8D               	movwf	3981,c	;volatile
  1669                           
  1670                           ;main.c: 35: ADCON0 = 0x00;
  1671  0013B8  0E00               	movlw	0
  1672  0013BA  6EC2               	movwf	4034,c	;volatile
  1673                           
  1674                           ;main.c: 36: ADCON1 = 0xFF;
  1675  0013BC  68C1               	setf	4033,c	;volatile
  1676                           
  1677                           ;main.c: 39: GIE = 1;
  1678  0013BE  8EF2               	bsf	intcon,7,c	;volatile
  1679                           
  1680                           ;main.c: 40: INT1IE = 1;
  1681  0013C0  86F0               	bsf	intcon3,3,c	;volatile
  1682                           
  1683                           ;main.c: 41: INT0IE = 0;
  1684  0013C2  98F2               	bcf	intcon,4,c	;volatile
  1685                           
  1686                           ;main.c: 42: INT2IE = 0;
  1687  0013C4  98F0               	bcf	intcon3,4,c	;volatile
  1688                           
  1689                           ;main.c: 44: nRBPU = 0;
  1690  0013C6  9EF1               	bcf	intcon2,7,c	;volatile
  1691                           
  1692                           ;main.c: 46: initLCD();
  1693  0013C8  EC84  F016         	call	_initLCD	;wreg free
  1694                           
  1695                           ;main.c: 47: I2C_Master_Init(10000);
  1696  0013CC  0E10               	movlw	16
  1697  0013CE  0100               	movlb	0	; () banked
  1698  0013D0  6FE5               	movwf	I2C_Master_Init@c& (0+255),b
  1699  0013D2  0E27               	movlw	39
  1700  0013D4  6FE6               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1701  0013D6  0E00               	movlw	0
  1702  0013D8  6FE7               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1703  0013DA  0E00               	movlw	0
  1704  0013DC  6FE8               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1705  0013DE  ECFD  F015         	call	_I2C_Master_Init	;wreg free
  1706                           
  1707                           ;main.c: 48: I2C_ColorSens_Init();
  1708  0013E2  ECB5  F00C         	call	_I2C_ColorSens_Init	;wreg free
  1709                           
  1710                           ;main.c: 51: TMR0 = 0;
  1711  0013E6  0E00               	movlw	0
  1712  0013E8  6ED7               	movwf	4055,c	;volatile
  1713  0013EA  0E00               	movlw	0
  1714  0013EC  6ED6               	movwf	4054,c	;volatile
  1715                           
  1716                           ;main.c: 52: T08BIT = 0;
  1717  0013EE  9CD5               	bcf	4053,6,c	;volatile
  1718                           
  1719                           ;main.c: 53: T0CS = 0;
  1720  0013F0  9AD5               	bcf	4053,5,c	;volatile
  1721                           
  1722                           ;main.c: 54: PSA = 0;
  1723  0013F2  96D5               	bcf	4053,3,c	;volatile
  1724                           
  1725                           ;main.c: 55: T0PS2 = 1;
  1726  0013F4  84D5               	bsf	4053,2,c	;volatile
  1727                           
  1728                           ;main.c: 56: T0PS1 = 1;
  1729  0013F6  82D5               	bsf	4053,1,c	;volatile
  1730                           
  1731                           ;main.c: 57: T0PS0 = 1;
  1732  0013F8  80D5               	bsf	4053,0,c	;volatile
  1733                           
  1734                           ;main.c: 60: curr_state = STANDBY;
  1735  0013FA  0E00               	movlw	0
  1736  0013FC  0100               	movlb	0	; () banked
  1737  0013FE  6FC7               	movwf	_curr_state& (0+255),b
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 63: switch(curr_state){
  1741                           
  1742                           ;main.c: 62: while(1){
  1743  001400  D05F               	goto	l5536
  1744  001402                     l5508:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 65: standby();
  1748  001402  EC5B  F017         	call	_standby	;wreg free
  1749                           
  1750                           ;main.c: 66: _delay((unsigned long)((500)*(10000000/4000.0)));
  1751  001406  0E07               	movlw	7
  1752  001408  0101               	movlb	1	; () banked
  1753  00140A  6F0F               	movwf	(??_main+1)& (0+255),b
  1754  00140C  0E58               	movlw	88
  1755  00140E  0101               	movlb	1	; () banked
  1756  001410  6F0E               	movwf	??_main& (0+255),b
  1757  001412  0E59               	movlw	89
  1758  001414                     u5317:
  1759  001414  2EE8               	decfsz	wreg,f,c
  1760  001416  D7FE               	bra	u5317
  1761  001418  2F0E               	decfsz	??_main& (0+255),f,b
  1762  00141A  D7FC               	bra	u5317
  1763  00141C  2F0F               	decfsz	(??_main+1)& (0+255),f,b
  1764  00141E  D7FA               	bra	u5317
  1765  001420  D04E               	goto	L4
  1766  001422                     l5512:
  1767                           
  1768                           ;main.c: 69: emergencystop();
  1769  001422  EC2E  F018         	call	_emergencystop	;wreg free
  1770                           
  1771                           ;main.c: 70: break;
  1772  001426  D04C               	goto	l5536
  1773  001428                     l5514:
  1774                           
  1775                           ;main.c: 72: operation();
  1776  001428  ECDD  F003         	call	_operation	;wreg free
  1777                           
  1778                           ;main.c: 73: _delay((unsigned long)((3)*(10000000/4000.0)));
  1779  00142C  0E0A               	movlw	10
  1780  00142E  0101               	movlb	1	; () banked
  1781  001430  6F0E               	movwf	??_main& (0+255),b
  1782  001432  0EBC               	movlw	188
  1783  001434                     u5327:
  1784  001434  2EE8               	decfsz	wreg,f,c
  1785  001436  D7FE               	bra	u5327
  1786  001438  2F0E               	decfsz	??_main& (0+255),f,b
  1787  00143A  D7FC               	bra	u5327
  1788  00143C  F000               	nop	
  1789                           
  1790                           ;main.c: 74: break;
  1791  00143E  D040               	goto	l5536
  1792  001440                     l5518:
  1793                           
  1794                           ;main.c: 76: operationend();
  1795  001440  EC4E  F018         	call	_operationend	;wreg free
  1796                           
  1797                           ;main.c: 77: _delay((unsigned long)((500)*(10000000/4000.0)));
  1798  001444  0E07               	movlw	7
  1799  001446  0101               	movlb	1	; () banked
  1800  001448  6F0F               	movwf	(??_main+1)& (0+255),b
  1801  00144A  0E58               	movlw	88
  1802  00144C  0101               	movlb	1	; () banked
  1803  00144E  6F0E               	movwf	??_main& (0+255),b
  1804  001450  0E59               	movlw	89
  1805  001452                     u5337:
  1806  001452  2EE8               	decfsz	wreg,f,c
  1807  001454  D7FE               	bra	u5337
  1808  001456  2F0E               	decfsz	??_main& (0+255),f,b
  1809  001458  D7FC               	bra	u5337
  1810  00145A  2F0F               	decfsz	(??_main+1)& (0+255),f,b
  1811  00145C  D7FA               	bra	u5337
  1812  00145E  D02F               	goto	L4
  1813  001460                     l5522:
  1814                           
  1815                           ;main.c: 80: date_time();
  1816  001460  EC6F  F010         	call	_date_time	;wreg free
  1817                           
  1818                           ;main.c: 81: _delay((unsigned long)((300)*(10000000/4000.0)));
  1819  001464  0E04               	movlw	4
  1820  001466  0101               	movlb	1	; () banked
  1821  001468  6F0F               	movwf	(??_main+1)& (0+255),b
  1822  00146A  0ECF               	movlw	207
  1823  00146C  0101               	movlb	1	; () banked
  1824  00146E  6F0E               	movwf	??_main& (0+255),b
  1825  001470  0E01               	movlw	1
  1826  001472                     u5347:
  1827  001472  2EE8               	decfsz	wreg,f,c
  1828  001474  D7FE               	bra	u5347
  1829  001476  2F0E               	decfsz	??_main& (0+255),f,b
  1830  001478  D7FC               	bra	u5347
  1831  00147A  2F0F               	decfsz	(??_main+1)& (0+255),f,b
  1832  00147C  D7FA               	bra	u5347
  1833  00147E  D01F               	goto	L4
  1834  001480                     l5526:
  1835                           
  1836                           ;main.c: 84: bottle_count();
  1837  001480  EC33  F00C         	call	_bottle_count	;wreg free
  1838                           
  1839                           ;main.c: 85: _delay((unsigned long)((300)*(10000000/4000.0)));
  1840  001484  0E04               	movlw	4
  1841  001486  0101               	movlb	1	; () banked
  1842  001488  6F0F               	movwf	(??_main+1)& (0+255),b
  1843  00148A  0ECF               	movlw	207
  1844  00148C  0101               	movlb	1	; () banked
  1845  00148E  6F0E               	movwf	??_main& (0+255),b
  1846  001490  0E01               	movlw	1
  1847  001492                     u5357:
  1848  001492  2EE8               	decfsz	wreg,f,c
  1849  001494  D7FE               	bra	u5357
  1850  001496  2F0E               	decfsz	??_main& (0+255),f,b
  1851  001498  D7FC               	bra	u5357
  1852  00149A  2F0F               	decfsz	(??_main+1)& (0+255),f,b
  1853  00149C  D7FA               	bra	u5357
  1854  00149E  D00F               	goto	L4
  1855  0014A0                     l5530:
  1856                           
  1857                           ;main.c: 88: bottle_time();
  1858  0014A0  EC94  F017         	call	_bottle_time	;wreg free
  1859                           
  1860                           ;main.c: 89: _delay((unsigned long)((300)*(10000000/4000.0)));
  1861  0014A4  0E04               	movlw	4
  1862  0014A6  0101               	movlb	1	; () banked
  1863  0014A8  6F0F               	movwf	(??_main+1)& (0+255),b
  1864  0014AA  0ECF               	movlw	207
  1865  0014AC  0101               	movlb	1	; () banked
  1866  0014AE  6F0E               	movwf	??_main& (0+255),b
  1867  0014B0  0E01               	movlw	1
  1868  0014B2                     u5367:
  1869  0014B2  2EE8               	decfsz	wreg,f,c
  1870  0014B4  D7FE               	bra	u5367
  1871  0014B6  2F0E               	decfsz	??_main& (0+255),f,b
  1872  0014B8  D7FC               	bra	u5367
  1873  0014BA  2F0F               	decfsz	(??_main+1)& (0+255),f,b
  1874  0014BC  D7FA               	bra	u5367
  1875  0014BE                     L4:
  1876  0014BE  D000               	nop2	
  1877  0014C0                     l5536:
  1878  0014C0  0100               	movlb	0	; () banked
  1879  0014C2  51C7               	movf	_curr_state& (0+255),w,b
  1880                           
  1881                           ; Switch size 1, requested type "space"
  1882                           ; Number of cases is 7, Range of values is 0 to 6
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte           22    12 (average)
  1886                           ;	Chosen strategy is simple_byte
  1887  0014C4  0A00               	xorlw	0	; case 0
  1888  0014C6  B4D8               	btfsc	status,2,c
  1889  0014C8  D79C               	goto	l5508
  1890  0014CA  0A01               	xorlw	1	; case 1
  1891  0014CC  B4D8               	btfsc	status,2,c
  1892  0014CE  D7A9               	goto	l5512
  1893  0014D0  0A03               	xorlw	3	; case 2
  1894  0014D2  B4D8               	btfsc	status,2,c
  1895  0014D4  D7A9               	goto	l5514
  1896  0014D6  0A01               	xorlw	1	; case 3
  1897  0014D8  B4D8               	btfsc	status,2,c
  1898  0014DA  D7B2               	goto	l5518
  1899  0014DC  0A07               	xorlw	7	; case 4
  1900  0014DE  B4D8               	btfsc	status,2,c
  1901  0014E0  D7BF               	goto	l5522
  1902  0014E2  0A01               	xorlw	1	; case 5
  1903  0014E4  B4D8               	btfsc	status,2,c
  1904  0014E6  D7CC               	goto	l5526
  1905  0014E8  0A03               	xorlw	3	; case 6
  1906  0014EA  B4D8               	btfsc	status,2,c
  1907  0014EC  D7D9               	goto	l5530
  1908                           
  1909                           ; BSR set to: 0
  1910                           
  1911                           ; BSR set to: 0
  1912  0014EE  D7E8               	goto	l5536
  1913  0014F0                     __end_of_main:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           intcon3	equ	0xFF0
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _standby *****************
  1927 ;; Defined at:
  1928 ;;		line 198 in file "main.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:   10
  1949 ;; This function calls:
  1950 ;;		_lcdInst
  1951 ;;		_printf
  1952 ;;		_read_colorsensor
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text1
  1959  002EB6                     __ptext1:
  1960                           	opt stack 0
  1961  002EB6                     _standby:
  1962                           	opt stack 20
  1963                           
  1964                           ;main.c: 199: lcdInst(0b10000000);
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;incstack = 0
  1968  002EB6  0E80               	movlw	128
  1969  002EB8  EC75  F018         	call	_lcdInst
  1970                           
  1971                           ;main.c: 200: printf("standby");
  1972  002EBC  0EF3               	movlw	low STR_5
  1973  002EBE  0100               	movlb	0	; () banked
  1974  002EC0  6FE4               	movwf	printf@f& (0+255),b
  1975  002EC2  0EFF               	movlw	high STR_5
  1976  002EC4  0100               	movlb	0	; () banked
  1977  002EC6  6FE5               	movwf	(printf@f+1)& (0+255),b
  1978  002EC8  EC09  F000         	call	_printf	;wreg free
  1979                           
  1980                           ;main.c: 201: lcdInst(0b11000000);
  1981  002ECC  0EC0               	movlw	192
  1982  002ECE  EC75  F018         	call	_lcdInst
  1983                           
  1984                           ;main.c: 202: read_colorsensor();
  1985  002ED2  ECB2  F00D         	call	_read_colorsensor	;wreg free
  1986                           
  1987                           ;main.c: 203: printf("%d      ", color[0]);
  1988  002ED6  0EE2               	movlw	low STR_6
  1989  002ED8  0100               	movlb	0	; () banked
  1990  002EDA  6FE4               	movwf	printf@f& (0+255),b
  1991  002EDC  0EFF               	movlw	high STR_6
  1992  002EDE  0100               	movlb	0	; () banked
  1993  002EE0  6FE5               	movwf	(printf@f+1)& (0+255),b
  1994  002EE2  C08A  F0E6         	movff	_color,?_printf+2
  1995  002EE6  C08B  F0E7         	movff	_color+1,?_printf+3
  1996  002EEA  EC09  F000         	call	_printf	;wreg free
  1997  002EEE  0012               	return	
  1998  002EF0                     __end_of_standby:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           intcon	equ	0xFF2
  2005                           intcon2	equ	0xFF1
  2006                           intcon3	equ	0xFF0
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           status	equ	0xFD8
  2010                           
  2011 ;; *************** function _operationend *****************
  2012 ;; Defined at:
  2013 ;;		line 403 in file "main.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;Total ram usage:        0 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:   10
  2034 ;; This function calls:
  2035 ;;		_lcdInst
  2036 ;;		_printf
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text2
  2043  00309C                     __ptext2:
  2044                           	opt stack 0
  2045  00309C                     _operationend:
  2046                           	opt stack 20
  2047                           
  2048                           ;main.c: 404: lcdInst(0b10000000);
  2049                           
  2050                           ;incstack = 0
  2051  00309C  0E80               	movlw	128
  2052  00309E  EC75  F018         	call	_lcdInst
  2053                           
  2054                           ;main.c: 405: printf("Operation Done!");
  2055  0030A2  0EA6               	movlw	low STR_19
  2056  0030A4  0100               	movlb	0	; () banked
  2057  0030A6  6FE4               	movwf	printf@f& (0+255),b
  2058  0030A8  0EFF               	movlw	high STR_19
  2059  0030AA  0100               	movlb	0	; () banked
  2060  0030AC  6FE5               	movwf	(printf@f+1)& (0+255),b
  2061  0030AE  EC09  F000         	call	_printf	;wreg free
  2062  0030B2  0012               	return	
  2063  0030B4                     __end_of_operationend:
  2064                           	opt stack 0
  2065                           tblptru	equ	0xFF8
  2066                           tblptrh	equ	0xFF7
  2067                           tblptrl	equ	0xFF6
  2068                           tablat	equ	0xFF5
  2069                           intcon	equ	0xFF2
  2070                           intcon2	equ	0xFF1
  2071                           intcon3	equ	0xFF0
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           status	equ	0xFD8
  2075                           
  2076 ;; *************** function _operation *****************
  2077 ;; Defined at:
  2078 ;;		line 310 in file "main.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;		None
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;Total ram usage:        1 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:   10
  2099 ;; This function calls:
  2100 ;;		___awtoft
  2101 ;;		___ftdiv
  2102 ;;		___ftge
  2103 ;;		_lcdInst
  2104 ;;		_printf
  2105 ;;		_read_colorsensor
  2106 ;;		_servo_rotate0
  2107 ;;		_servo_rotate1
  2108 ;; This function is called by:
  2109 ;;		_main
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           	psect	text3
  2114  0007BA                     __ptext3:
  2115                           	opt stack 0
  2116  0007BA                     _operation:
  2117                           	opt stack 20
  2118                           
  2119                           ;main.c: 328: colorprev[0] = color[0];
  2120                           
  2121                           ;incstack = 0
  2122  0007BA  C08A  F110         	movff	_color,_colorprev
  2123  0007BE  C08B  F111         	movff	_color+1,_colorprev+1
  2124                           
  2125                           ;main.c: 329: colorprev[1] = color[1];
  2126  0007C2  C08C  F112         	movff	_color+2,_colorprev+2
  2127  0007C6  C08D  F113         	movff	_color+3,_colorprev+3
  2128                           
  2129                           ;main.c: 330: colorprev[2] = color[2];
  2130  0007CA  C08E  F114         	movff	_color+4,_colorprev+4
  2131  0007CE  C08F  F115         	movff	_color+5,_colorprev+5
  2132                           
  2133                           ;main.c: 331: colorprev[3] = color[3];
  2134  0007D2  C090  F116         	movff	_color+6,_colorprev+6
  2135  0007D6  C091  F117         	movff	_color+7,_colorprev+7
  2136                           
  2137                           ;main.c: 333: GIE = 0;
  2138  0007DA  9EF2               	bcf	intcon,7,c	;volatile
  2139                           
  2140                           ;main.c: 334: read_colorsensor();
  2141  0007DC  ECB2  F00D         	call	_read_colorsensor	;wreg free
  2142                           
  2143                           ;main.c: 335: if(color[0]>17){
  2144  0007E0  0100               	movlb	0	; () banked
  2145  0007E2  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2146  0007E4  D139               	goto	l5352
  2147  0007E6  0100               	movlb	0	; () banked
  2148  0007E8  518B               	movf	(_color+1)& (0+255),w,b
  2149  0007EA  E105               	bnz	u5120
  2150  0007EC  0E12               	movlw	18
  2151  0007EE  0100               	movlb	0	; () banked
  2152  0007F0  5D8A               	subwf	_color& (0+255),w,b
  2153  0007F2  A0D8               	btfss	status,0,c
  2154  0007F4  D131               	goto	l5352
  2155  0007F6                     u5120:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 336: flag_bottle = 1;
  2159  0007F6  0E00               	movlw	0
  2160  0007F8  0100               	movlb	0	; () banked
  2161  0007FA  6FB6               	movwf	(_flag_bottle+1)& (0+255),b
  2162  0007FC  0E01               	movlw	1
  2163  0007FE  6FB5               	movwf	_flag_bottle& (0+255),b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;main.c: 338: if(color[0]>300)flag_yopNC = 1;
  2167  000800  0100               	movlb	0	; () banked
  2168  000802  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2169  000804  D00D               	goto	l5320
  2170  000806  0E2D               	movlw	45
  2171  000808  0100               	movlb	0	; () banked
  2172  00080A  5D8A               	subwf	_color& (0+255),w,b
  2173  00080C  0E01               	movlw	1
  2174  00080E  0100               	movlb	0	; () banked
  2175  000810  598B               	subwfb	(_color+1)& (0+255),w,b
  2176  000812  A0D8               	btfss	status,0,c
  2177  000814  D005               	goto	l5320
  2178                           
  2179                           ; BSR set to: 0
  2180  000816  0E00               	movlw	0
  2181  000818  0100               	movlb	0	; () banked
  2182  00081A  6FBE               	movwf	(_flag_yopNC+1)& (0+255),b
  2183  00081C  0E01               	movlw	1
  2184  00081E  6FBD               	movwf	_flag_yopNC& (0+255),b
  2185  000820                     l5320:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;main.c: 339: if(color[0]>flag_picbug) flag_picbug = color[0];
  2189  000820  0100               	movlb	0	; () banked
  2190  000822  518A               	movf	_color& (0+255),w,b
  2191  000824  0100               	movlb	0	; () banked
  2192  000826  5DB9               	subwf	_flag_picbug& (0+255),w,b
  2193  000828  0100               	movlb	0	; () banked
  2194  00082A  51BA               	movf	(_flag_picbug+1)& (0+255),w,b
  2195  00082C  0A80               	xorlw	128
  2196  00082E  0100               	movlb	0	; () banked
  2197  000830  6FEC               	movwf	??_operation& (0+255),b
  2198  000832  0100               	movlb	0	; () banked
  2199  000834  518B               	movf	(_color+1)& (0+255),w,b
  2200  000836  0A80               	xorlw	128
  2201  000838  0100               	movlb	0	; () banked
  2202  00083A  59EC               	subwfb	??_operation& (0+255),w,b
  2203  00083C  B0D8               	btfsc	status,0,c
  2204  00083E  D004               	goto	l5324
  2205                           
  2206                           ; BSR set to: 0
  2207  000840  C08A  F0B9         	movff	_color,_flag_picbug
  2208  000844  C08B  F0BA         	movff	_color+1,_flag_picbug+1
  2209  000848                     l5324:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;main.c: 340: if(color[0]>30){
  2213  000848  0100               	movlb	0	; () banked
  2214  00084A  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2215  00084C  D083               	goto	l5338
  2216  00084E  0100               	movlb	0	; () banked
  2217  000850  518B               	movf	(_color+1)& (0+255),w,b
  2218  000852  E105               	bnz	u5150
  2219  000854  0E1F               	movlw	31
  2220  000856  0100               	movlb	0	; () banked
  2221  000858  5D8A               	subwf	_color& (0+255),w,b
  2222  00085A  A0D8               	btfss	status,0,c
  2223  00085C  D07B               	goto	l5338
  2224  00085E                     u5150:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;main.c: 341: if(!flag_top_read){
  2228  00085E  0100               	movlb	0	; () banked
  2229  000860  51BB               	movf	_flag_top_read& (0+255),w,b
  2230  000862  0100               	movlb	0	; () banked
  2231  000864  11BC               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2232  000866  A4D8               	btfss	status,2,c
  2233  000868  D070               	goto	l350
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 342: r = (float) color[1];
  2237  00086A  C08C  F0E0         	movff	_color+2,___awtoft@c
  2238  00086E  C08D  F0E1         	movff	_color+3,___awtoft@c+1
  2239  000872  ECF8  F016         	call	___awtoft	;wreg free
  2240  000876  C0E0  F0A7         	movff	?___awtoft,_r
  2241  00087A  C0E1  F0A8         	movff	?___awtoft+1,_r+1
  2242  00087E  C0E2  F0A9         	movff	?___awtoft+2,_r+2
  2243                           
  2244                           ;main.c: 343: b = (float) color[3];
  2245  000882  C090  F0E0         	movff	_color+6,___awtoft@c
  2246  000886  C091  F0E1         	movff	_color+7,___awtoft@c+1
  2247  00088A  ECF8  F016         	call	___awtoft	;wreg free
  2248  00088E  C0E0  F0A1         	movff	?___awtoft,_b
  2249  000892  C0E1  F0A2         	movff	?___awtoft+1,_b+1
  2250  000896  C0E2  F0A3         	movff	?___awtoft+2,_b+2
  2251                           
  2252                           ;main.c: 346: if(r/b > 2) bottle_read_top = 1;
  2253  00089A  0E00               	movlw	0
  2254  00089C  0101               	movlb	1	; () banked
  2255  00089E  6F06               	movwf	___ftge@ff1& (0+255),b
  2256  0008A0  0E00               	movlw	0
  2257  0008A2  0101               	movlb	1	; () banked
  2258  0008A4  6F07               	movwf	(___ftge@ff1+1)& (0+255),b
  2259  0008A6  0E40               	movlw	64
  2260  0008A8  0101               	movlb	1	; () banked
  2261  0008AA  6F08               	movwf	(___ftge@ff1+2)& (0+255),b
  2262  0008AC  C0A1  F0E3         	movff	_b,___ftdiv@f2
  2263  0008B0  C0A2  F0E4         	movff	_b+1,___ftdiv@f2+1
  2264  0008B4  C0A3  F0E5         	movff	_b+2,___ftdiv@f2+2
  2265  0008B8  C0A7  F0E0         	movff	_r,___ftdiv@f1
  2266  0008BC  C0A8  F0E1         	movff	_r+1,___ftdiv@f1+1
  2267  0008C0  C0A9  F0E2         	movff	_r+2,___ftdiv@f1+2
  2268  0008C4  EC78  F00A         	call	___ftdiv	;wreg free
  2269  0008C8  C0E0  F109         	movff	?___ftdiv,___ftge@ff2
  2270  0008CC  C0E1  F10A         	movff	?___ftdiv+1,___ftge@ff2+1
  2271  0008D0  C0E2  F10B         	movff	?___ftdiv+2,___ftge@ff2+2
  2272  0008D4  EC41  F011         	call	___ftge	;wreg free
  2273  0008D8  0101               	movlb	1	; () banked
  2274  0008DA  B0D8               	btfsc	status,0,c
  2275  0008DC  D005               	goto	l5332
  2276                           
  2277                           ; BSR set to: 1
  2278  0008DE  0E00               	movlw	0
  2279  0008E0  0100               	movlb	0	; () banked
  2280  0008E2  6FB0               	movwf	(_bottle_read_top+1)& (0+255),b
  2281  0008E4  0E01               	movlw	1
  2282  0008E6  D02B               	goto	L6
  2283  0008E8                     l5332:
  2284                           
  2285                           ;main.c: 347: else if(r/b < 0.75) bottle_read_top = 2;
  2286  0008E8  C0A1  F0E3         	movff	_b,___ftdiv@f2
  2287  0008EC  C0A2  F0E4         	movff	_b+1,___ftdiv@f2+1
  2288  0008F0  C0A3  F0E5         	movff	_b+2,___ftdiv@f2+2
  2289  0008F4  C0A7  F0E0         	movff	_r,___ftdiv@f1
  2290  0008F8  C0A8  F0E1         	movff	_r+1,___ftdiv@f1+1
  2291  0008FC  C0A9  F0E2         	movff	_r+2,___ftdiv@f1+2
  2292  000900  EC78  F00A         	call	___ftdiv	;wreg free
  2293  000904  C0E0  F106         	movff	?___ftdiv,___ftge@ff1
  2294  000908  C0E1  F107         	movff	?___ftdiv+1,___ftge@ff1+1
  2295  00090C  C0E2  F108         	movff	?___ftdiv+2,___ftge@ff1+2
  2296  000910  0E00               	movlw	0
  2297  000912  0101               	movlb	1	; () banked
  2298  000914  6F09               	movwf	___ftge@ff2& (0+255),b
  2299  000916  0E40               	movlw	64
  2300  000918  0101               	movlb	1	; () banked
  2301  00091A  6F0A               	movwf	(___ftge@ff2+1)& (0+255),b
  2302  00091C  0E3F               	movlw	63
  2303  00091E  0101               	movlb	1	; () banked
  2304  000920  6F0B               	movwf	(___ftge@ff2+2)& (0+255),b
  2305  000922  EC41  F011         	call	___ftge	;wreg free
  2306  000926  0101               	movlb	1	; () banked
  2307  000928  B0D8               	btfsc	status,0,c
  2308  00092A  D005               	goto	l5336
  2309                           
  2310                           ; BSR set to: 1
  2311  00092C  0E00               	movlw	0
  2312  00092E  0100               	movlb	0	; () banked
  2313  000930  6FB0               	movwf	(_bottle_read_top+1)& (0+255),b
  2314  000932  0E02               	movlw	2
  2315  000934  D004               	goto	L6
  2316  000936                     l5336:
  2317                           
  2318                           ;main.c: 348: else bottle_read_top = 0;
  2319  000936  0E00               	movlw	0
  2320  000938  0100               	movlb	0	; () banked
  2321  00093A  6FB0               	movwf	(_bottle_read_top+1)& (0+255),b
  2322  00093C  0E00               	movlw	0
  2323  00093E                     L6:
  2324  00093E  6FAF               	movwf	_bottle_read_top& (0+255),b
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 349: flag_top_read = 1;
  2328                           
  2329                           ; BSR set to: 0
  2330  000940  0E00               	movlw	0
  2331  000942  0100               	movlb	0	; () banked
  2332  000944  6FBC               	movwf	(_flag_top_read+1)& (0+255),b
  2333  000946  0E01               	movlw	1
  2334  000948  6FBB               	movwf	_flag_top_read& (0+255),b
  2335  00094A                     l350:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;main.c: 350: }
  2339                           ;main.c: 351: flag_bottle_high = 1;
  2340  00094A  0E00               	movlw	0
  2341  00094C  0100               	movlb	0	; () banked
  2342  00094E  6FB8               	movwf	(_flag_bottle_high+1)& (0+255),b
  2343  000950  0E01               	movlw	1
  2344  000952  D080               	goto	L7
  2345  000954                     l5338:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 353: else if(color[0]<30){
  2349  000954  0100               	movlb	0	; () banked
  2350  000956  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2351  000958  D008               	goto	l5340
  2352  00095A  0100               	movlb	0	; () banked
  2353  00095C  518B               	movf	(_color+1)& (0+255),w,b
  2354  00095E  E104               	bnz	u5191
  2355  000960  0E1E               	movlw	30
  2356  000962  0100               	movlb	0	; () banked
  2357  000964  5D8A               	subwf	_color& (0+255),w,b
  2358  000966  B0D8               	btfsc	status,0,c
  2359  000968                     u5191:
  2360  000968  D0F7               	goto	l5398
  2361  00096A                     l5340:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 354: if(flag_bottle_high){
  2365  00096A  0100               	movlb	0	; () banked
  2366  00096C  51B7               	movf	_flag_bottle_high& (0+255),w,b
  2367  00096E  0100               	movlb	0	; () banked
  2368  000970  11B8               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2369  000972  B4D8               	btfsc	status,2,c
  2370  000974  D0F1               	goto	l5398
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;main.c: 355: r_p = (float) colorprev[1];
  2374  000976  C112  F0E0         	movff	_colorprev+2,___awtoft@c
  2375  00097A  C113  F0E1         	movff	_colorprev+3,___awtoft@c+1
  2376  00097E  ECF8  F016         	call	___awtoft	;wreg free
  2377  000982  C0E0  F0AA         	movff	?___awtoft,_r_p
  2378  000986  C0E1  F0AB         	movff	?___awtoft+1,_r_p+1
  2379  00098A  C0E2  F0AC         	movff	?___awtoft+2,_r_p+2
  2380                           
  2381                           ;main.c: 356: b_p = (float) colorprev[3];
  2382  00098E  C116  F0E0         	movff	_colorprev+6,___awtoft@c
  2383  000992  C117  F0E1         	movff	_colorprev+7,___awtoft@c+1
  2384  000996  ECF8  F016         	call	___awtoft	;wreg free
  2385  00099A  C0E0  F0A4         	movff	?___awtoft,_b_p
  2386  00099E  C0E1  F0A5         	movff	?___awtoft+1,_b_p+1
  2387  0009A2  C0E2  F0A6         	movff	?___awtoft+2,_b_p+2
  2388                           
  2389                           ;main.c: 357: if(r_p/b_p > 3.2) bottle_read_bot = 1;
  2390  0009A6  0ECD               	movlw	205
  2391  0009A8  0101               	movlb	1	; () banked
  2392  0009AA  6F06               	movwf	___ftge@ff1& (0+255),b
  2393  0009AC  0E4C               	movlw	76
  2394  0009AE  0101               	movlb	1	; () banked
  2395  0009B0  6F07               	movwf	(___ftge@ff1+1)& (0+255),b
  2396  0009B2  0E40               	movlw	64
  2397  0009B4  0101               	movlb	1	; () banked
  2398  0009B6  6F08               	movwf	(___ftge@ff1+2)& (0+255),b
  2399  0009B8  C0A4  F0E3         	movff	_b_p,___ftdiv@f2
  2400  0009BC  C0A5  F0E4         	movff	_b_p+1,___ftdiv@f2+1
  2401  0009C0  C0A6  F0E5         	movff	_b_p+2,___ftdiv@f2+2
  2402  0009C4  C0AA  F0E0         	movff	_r_p,___ftdiv@f1
  2403  0009C8  C0AB  F0E1         	movff	_r_p+1,___ftdiv@f1+1
  2404  0009CC  C0AC  F0E2         	movff	_r_p+2,___ftdiv@f1+2
  2405  0009D0  EC78  F00A         	call	___ftdiv	;wreg free
  2406  0009D4  C0E0  F109         	movff	?___ftdiv,___ftge@ff2
  2407  0009D8  C0E1  F10A         	movff	?___ftdiv+1,___ftge@ff2+1
  2408  0009DC  C0E2  F10B         	movff	?___ftdiv+2,___ftge@ff2+2
  2409  0009E0  EC41  F011         	call	___ftge	;wreg free
  2410  0009E4  0101               	movlb	1	; () banked
  2411  0009E6  B0D8               	btfsc	status,0,c
  2412  0009E8  D005               	goto	l5346
  2413                           
  2414                           ; BSR set to: 1
  2415  0009EA  0E00               	movlw	0
  2416  0009EC  0100               	movlb	0	; () banked
  2417  0009EE  6FAE               	movwf	(_bottle_read_bot+1)& (0+255),b
  2418  0009F0  0E01               	movlw	1
  2419  0009F2  D02B               	goto	L9
  2420  0009F4                     l5346:
  2421                           
  2422                           ;main.c: 358: else if(r_p/b_p < 0.75) bottle_read_bot = 2;
  2423  0009F4  C0A4  F0E3         	movff	_b_p,___ftdiv@f2
  2424  0009F8  C0A5  F0E4         	movff	_b_p+1,___ftdiv@f2+1
  2425  0009FC  C0A6  F0E5         	movff	_b_p+2,___ftdiv@f2+2
  2426  000A00  C0AA  F0E0         	movff	_r_p,___ftdiv@f1
  2427  000A04  C0AB  F0E1         	movff	_r_p+1,___ftdiv@f1+1
  2428  000A08  C0AC  F0E2         	movff	_r_p+2,___ftdiv@f1+2
  2429  000A0C  EC78  F00A         	call	___ftdiv	;wreg free
  2430  000A10  C0E0  F106         	movff	?___ftdiv,___ftge@ff1
  2431  000A14  C0E1  F107         	movff	?___ftdiv+1,___ftge@ff1+1
  2432  000A18  C0E2  F108         	movff	?___ftdiv+2,___ftge@ff1+2
  2433  000A1C  0E00               	movlw	0
  2434  000A1E  0101               	movlb	1	; () banked
  2435  000A20  6F09               	movwf	___ftge@ff2& (0+255),b
  2436  000A22  0E40               	movlw	64
  2437  000A24  0101               	movlb	1	; () banked
  2438  000A26  6F0A               	movwf	(___ftge@ff2+1)& (0+255),b
  2439  000A28  0E3F               	movlw	63
  2440  000A2A  0101               	movlb	1	; () banked
  2441  000A2C  6F0B               	movwf	(___ftge@ff2+2)& (0+255),b
  2442  000A2E  EC41  F011         	call	___ftge	;wreg free
  2443  000A32  0101               	movlb	1	; () banked
  2444  000A34  B0D8               	btfsc	status,0,c
  2445  000A36  D005               	goto	l5350
  2446                           
  2447                           ; BSR set to: 1
  2448  000A38  0E00               	movlw	0
  2449  000A3A  0100               	movlb	0	; () banked
  2450  000A3C  6FAE               	movwf	(_bottle_read_bot+1)& (0+255),b
  2451  000A3E  0E02               	movlw	2
  2452  000A40  D004               	goto	L9
  2453  000A42                     l5350:
  2454                           
  2455                           ;main.c: 359: else bottle_read_bot = 0;
  2456  000A42  0E00               	movlw	0
  2457  000A44  0100               	movlb	0	; () banked
  2458  000A46  6FAE               	movwf	(_bottle_read_bot+1)& (0+255),b
  2459  000A48  0E00               	movlw	0
  2460  000A4A                     L9:
  2461  000A4A  6FAD               	movwf	_bottle_read_bot& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;main.c: 360: flag_bottle_high = 0;
  2465                           
  2466                           ; BSR set to: 0
  2467  000A4C  0E00               	movlw	0
  2468  000A4E  0100               	movlb	0	; () banked
  2469  000A50  6FB8               	movwf	(_flag_bottle_high+1)& (0+255),b
  2470  000A52  0E00               	movlw	0
  2471  000A54                     L7:
  2472  000A54  6FB7               	movwf	_flag_bottle_high& (0+255),b
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 361: }
  2476                           ;main.c: 362: }
  2477                           ;main.c: 363: }
  2478                           
  2479                           ; BSR set to: 0
  2480                           
  2481                           ; BSR set to: 0
  2482  000A56  D080               	goto	l5398
  2483  000A58                     l5352:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 365: else if(flag_bottle){
  2487  000A58  0100               	movlb	0	; () banked
  2488  000A5A  51B5               	movf	_flag_bottle& (0+255),w,b
  2489  000A5C  0100               	movlb	0	; () banked
  2490  000A5E  11B6               	iorwf	(_flag_bottle+1)& (0+255),w,b
  2491  000A60  B4D8               	btfsc	status,2,c
  2492  000A62  D07A               	goto	l5398
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 368: bottle_count_array[0] += 1;
  2496  000A64  0100               	movlb	0	; () banked
  2497  000A66  4B80               	infsnz	_bottle_count_array& (0+255),f,b
  2498  000A68  2B81               	incf	(_bottle_count_array+1)& (0+255),f,b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 369: TMR0 = 0;
  2502  000A6A  0E00               	movlw	0
  2503  000A6C  6ED7               	movwf	4055,c	;volatile
  2504  000A6E  0E00               	movlw	0
  2505  000A70  6ED6               	movwf	4054,c	;volatile
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 370: if(bottle_read_top == 2 || bottle_read_bot == 2){
  2509  000A72  0E02               	movlw	2
  2510  000A74  0100               	movlb	0	; () banked
  2511  000A76  19AF               	xorwf	_bottle_read_top& (0+255),w,b
  2512  000A78  0100               	movlb	0	; () banked
  2513  000A7A  11B0               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2514  000A7C  B4D8               	btfsc	status,2,c
  2515  000A7E  D007               	goto	l5362
  2516                           
  2517                           ; BSR set to: 0
  2518  000A80  0E02               	movlw	2
  2519  000A82  0100               	movlb	0	; () banked
  2520  000A84  19AD               	xorwf	_bottle_read_bot& (0+255),w,b
  2521  000A86  0100               	movlb	0	; () banked
  2522  000A88  11AE               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2523  000A8A  A4D8               	btfss	status,2,c
  2524  000A8C  D00B               	goto	l5366
  2525  000A8E                     l5362:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;main.c: 371: bottle_count_array[3] += 1;
  2529  000A8E  0100               	movlb	0	; () banked
  2530  000A90  4B86               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  2531  000A92  2B87               	incf	(_bottle_count_array+7)& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 372: servo_rotate1(10);
  2535  000A94  0E00               	movlw	0
  2536  000A96  0100               	movlb	0	; () banked
  2537  000A98  6FD9               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2538  000A9A  0E0A               	movlw	10
  2539  000A9C  6FD8               	movwf	servo_rotate1@degree& (0+255),b
  2540  000A9E  EC08  F012         	call	_servo_rotate1	;wreg free
  2541                           
  2542                           ;main.c: 373: }
  2543  000AA2  D032               	goto	l5384
  2544  000AA4                     l5366:
  2545                           
  2546                           ;main.c: 374: else if(bottle_read_top == 1 || bottle_read_bot == 1){
  2547  000AA4  0100               	movlb	0	; () banked
  2548  000AA6  05AF               	decf	_bottle_read_top& (0+255),w,b
  2549  000AA8  0100               	movlb	0	; () banked
  2550  000AAA  11B0               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2551  000AAC  B4D8               	btfsc	status,2,c
  2552  000AAE  D006               	goto	l5370
  2553                           
  2554                           ; BSR set to: 0
  2555  000AB0  0100               	movlb	0	; () banked
  2556  000AB2  05AD               	decf	_bottle_read_bot& (0+255),w,b
  2557  000AB4  0100               	movlb	0	; () banked
  2558  000AB6  11AE               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2559  000AB8  A4D8               	btfss	status,2,c
  2560  000ABA  D00B               	goto	l5374
  2561  000ABC                     l5370:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 375: bottle_count_array[1] += 1;
  2565  000ABC  0100               	movlb	0	; () banked
  2566  000ABE  4B82               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  2567  000AC0  2B83               	incf	(_bottle_count_array+3)& (0+255),f,b
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;main.c: 376: servo_rotate0(10);
  2571  000AC2  0E00               	movlw	0
  2572  000AC4  0100               	movlb	0	; () banked
  2573  000AC6  6FD9               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2574  000AC8  0E0A               	movlw	10
  2575  000ACA  6FD8               	movwf	servo_rotate0@degree& (0+255),b
  2576  000ACC  EC66  F012         	call	_servo_rotate0	;wreg free
  2577                           
  2578                           ;main.c: 377: }
  2579  000AD0  D01B               	goto	l5384
  2580  000AD2                     l5374:
  2581                           
  2582                           ;main.c: 379: else if(flag_yopNC){
  2583  000AD2  0100               	movlb	0	; () banked
  2584  000AD4  51BD               	movf	_flag_yopNC& (0+255),w,b
  2585  000AD6  0100               	movlb	0	; () banked
  2586  000AD8  11BE               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  2587  000ADA  B4D8               	btfsc	status,2,c
  2588  000ADC  D00B               	goto	l5380
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 380: bottle_count_array[2] += 1;
  2592  000ADE  0100               	movlb	0	; () banked
  2593  000AE0  4B84               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  2594  000AE2  2B85               	incf	(_bottle_count_array+5)& (0+255),f,b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 381: servo_rotate0(14);
  2598  000AE4  0E00               	movlw	0
  2599  000AE6  0100               	movlb	0	; () banked
  2600  000AE8  6FD9               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2601  000AEA  0E0E               	movlw	14
  2602  000AEC  6FD8               	movwf	servo_rotate0@degree& (0+255),b
  2603  000AEE  EC66  F012         	call	_servo_rotate0	;wreg free
  2604                           
  2605                           ;main.c: 382: }
  2606  000AF2  D00A               	goto	l5384
  2607  000AF4                     l5380:
  2608                           
  2609                           ;main.c: 383: else{
  2610                           ;main.c: 384: bottle_count_array[4] += 1;
  2611  000AF4  0100               	movlb	0	; () banked
  2612  000AF6  4B88               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  2613  000AF8  2B89               	incf	(_bottle_count_array+9)& (0+255),f,b
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 385: servo_rotate1(18);
  2617  000AFA  0E00               	movlw	0
  2618  000AFC  0100               	movlb	0	; () banked
  2619  000AFE  6FD9               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2620  000B00  0E12               	movlw	18
  2621  000B02  6FD8               	movwf	servo_rotate1@degree& (0+255),b
  2622  000B04  EC08  F012         	call	_servo_rotate1	;wreg free
  2623  000B08                     l5384:
  2624                           
  2625                           ;main.c: 386: }
  2626                           ;main.c: 387: flag_bottle = 0;
  2627  000B08  0E00               	movlw	0
  2628  000B0A  0100               	movlb	0	; () banked
  2629  000B0C  6FB6               	movwf	(_flag_bottle+1)& (0+255),b
  2630  000B0E  0E00               	movlw	0
  2631  000B10  6FB5               	movwf	_flag_bottle& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 388: flag_bottle_high = 0;
  2635  000B12  0E00               	movlw	0
  2636  000B14  0100               	movlb	0	; () banked
  2637  000B16  6FB8               	movwf	(_flag_bottle_high+1)& (0+255),b
  2638  000B18  0E00               	movlw	0
  2639  000B1A  6FB7               	movwf	_flag_bottle_high& (0+255),b
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;main.c: 389: flag_top_read = 0;
  2643  000B1C  0E00               	movlw	0
  2644  000B1E  0100               	movlb	0	; () banked
  2645  000B20  6FBC               	movwf	(_flag_top_read+1)& (0+255),b
  2646  000B22  0E00               	movlw	0
  2647  000B24  6FBB               	movwf	_flag_top_read& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;main.c: 390: flag_yopNC = 0;
  2651  000B26  0E00               	movlw	0
  2652  000B28  0100               	movlb	0	; () banked
  2653  000B2A  6FBE               	movwf	(_flag_yopNC+1)& (0+255),b
  2654  000B2C  0E00               	movlw	0
  2655  000B2E  6FBD               	movwf	_flag_yopNC& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 394: lcdInst(0b10000000);
  2659  000B30  0E80               	movlw	128
  2660  000B32  EC75  F018         	call	_lcdInst
  2661                           
  2662                           ;main.c: 395: printf("%d", flag_picbug);
  2663  000B36  0EFB               	movlw	low STR_18
  2664  000B38  0100               	movlb	0	; () banked
  2665  000B3A  6FE4               	movwf	printf@f& (0+255),b
  2666  000B3C  0EFF               	movlw	high STR_18
  2667  000B3E  0100               	movlb	0	; () banked
  2668  000B40  6FE5               	movwf	(printf@f+1)& (0+255),b
  2669  000B42  C0B9  F0E6         	movff	_flag_picbug,?_printf+2
  2670  000B46  C0BA  F0E7         	movff	_flag_picbug+1,?_printf+3
  2671  000B4A  EC09  F000         	call	_printf	;wreg free
  2672                           
  2673                           ;main.c: 396: flag_picbug = 0;
  2674  000B4E  0E00               	movlw	0
  2675  000B50  0100               	movlb	0	; () banked
  2676  000B52  6FBA               	movwf	(_flag_picbug+1)& (0+255),b
  2677  000B54  0E00               	movlw	0
  2678  000B56  6FB9               	movwf	_flag_picbug& (0+255),b
  2679  000B58                     l5398:
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;main.c: 398: }
  2683                           ;main.c: 399: GIE = 1;
  2684  000B58  8EF2               	bsf	intcon,7,c	;volatile
  2685  000B5A  0012               	return	
  2686  000B5C                     __end_of_operation:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           intcon	equ	0xFF2
  2693                           intcon2	equ	0xFF1
  2694                           intcon3	equ	0xFF0
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _servo_rotate1 *****************
  2700 ;; Defined at:
  2701 ;;		line 436 in file "main.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  degree          2   16[BANK0 ] int 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  duty            2   21[BANK0 ] int 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      void 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2715 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;Total ram usage:        7 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    7
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_operation
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text4
  2730  002410                     __ptext4:
  2731                           	opt stack 0
  2732  002410                     _servo_rotate1:
  2733                           	opt stack 22
  2734                           
  2735                           ;main.c: 441: int duty = degree;
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;incstack = 0
  2739  002410  C0D8  F0DD         	movff	servo_rotate1@degree,servo_rotate1@duty
  2740  002414  C0D9  F0DE         	movff	servo_rotate1@degree+1,servo_rotate1@duty+1
  2741                           
  2742                           ;main.c: 442: for (i=0; i<20; i++) {
  2743  002418  0E00               	movlw	0
  2744  00241A  6E79               	movwf	_i+1,c
  2745  00241C  0E00               	movlw	0
  2746  00241E  6E78               	movwf	_i,c
  2747  002420                     l3870:
  2748  002420  BE79               	btfsc	_i+1,7,c
  2749  002422  D006               	goto	l397
  2750  002424  5079               	movf	_i+1,w,c
  2751  002426  E151               	bnz	l405
  2752  002428  0E14               	movlw	20
  2753  00242A  5C78               	subwf	_i,w,c
  2754  00242C  B0D8               	btfsc	status,0,c
  2755  00242E  0012               	return	
  2756  002430                     l397:
  2757                           
  2758                           ;main.c: 443: LATCbits.LATC1 = 1;
  2759  002430  828B               	bsf	3979,1,c	;volatile
  2760                           
  2761                           ;main.c: 444: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2762  002432  0E00               	movlw	0
  2763  002434  0100               	movlb	0	; () banked
  2764  002436  6FC0               	movwf	(_j+1)& (0+255),b
  2765  002438  0E00               	movlw	0
  2766  00243A  6FBF               	movwf	_j& (0+255),b
  2767  00243C  D007               	goto	l399
  2768  00243E                     l3876:
  2769                           
  2770                           ; BSR set to: 0
  2771  00243E  0E53               	movlw	83
  2772  002440                     u5377:
  2773  002440  2EE8               	decfsz	wreg,f,c
  2774  002442  D7FE               	bra	u5377
  2775  002444  F000               	nop	
  2776  002446  0100               	movlb	0	; () banked
  2777  002448  4BBF               	infsnz	_j& (0+255),f,b
  2778  00244A  2BC0               	incf	(_j+1)& (0+255),f,b
  2779  00244C                     l399:
  2780                           
  2781                           ; BSR set to: 0
  2782  00244C  0100               	movlb	0	; () banked
  2783  00244E  51DD               	movf	servo_rotate1@duty& (0+255),w,b
  2784  002450  0100               	movlb	0	; () banked
  2785  002452  5DBF               	subwf	_j& (0+255),w,b
  2786  002454  0100               	movlb	0	; () banked
  2787  002456  51C0               	movf	(_j+1)& (0+255),w,b
  2788  002458  0A80               	xorlw	128
  2789  00245A  0100               	movlb	0	; () banked
  2790  00245C  6FDA               	movwf	??_servo_rotate1& (0+255),b
  2791  00245E  0100               	movlb	0	; () banked
  2792  002460  51DE               	movf	(servo_rotate1@duty+1)& (0+255),w,b
  2793  002462  0A80               	xorlw	128
  2794  002464  0100               	movlb	0	; () banked
  2795  002466  59DA               	subwfb	??_servo_rotate1& (0+255),w,b
  2796  002468  A0D8               	btfss	status,0,c
  2797  00246A  D7E9               	goto	l3876
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 445: LATCbits.LATC1 = 0;
  2801  00246C  928B               	bcf	3979,1,c	;volatile
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 446: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  2805  00246E  0E00               	movlw	0
  2806  002470  0100               	movlb	0	; () banked
  2807  002472  6FC0               	movwf	(_j+1)& (0+255),b
  2808  002474  0E00               	movlw	0
  2809  002476  6FBF               	movwf	_j& (0+255),b
  2810  002478  D007               	goto	l402
  2811  00247A                     l3882:
  2812                           
  2813                           ; BSR set to: 0
  2814  00247A  0E53               	movlw	83
  2815  00247C                     u5387:
  2816  00247C  2EE8               	decfsz	wreg,f,c
  2817  00247E  D7FE               	bra	u5387
  2818  002480  F000               	nop	
  2819  002482  0100               	movlb	0	; () banked
  2820  002484  4BBF               	infsnz	_j& (0+255),f,b
  2821  002486  2BC0               	incf	(_j+1)& (0+255),f,b
  2822  002488                     l402:
  2823                           
  2824                           ; BSR set to: 0
  2825  002488  C0DD  F0DA         	movff	servo_rotate1@duty,??_servo_rotate1
  2826  00248C  C0DE  F0DB         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  2827  002490  0100               	movlb	0	; () banked
  2828  002492  1FDA               	comf	??_servo_rotate1& (0+255),f,b
  2829  002494  1FDB               	comf	(??_servo_rotate1+1)& (0+255),f,b
  2830  002496  4BDA               	infsnz	??_servo_rotate1& (0+255),f,b
  2831  002498  2BDB               	incf	(??_servo_rotate1+1)& (0+255),f,b
  2832  00249A  0EC8               	movlw	200
  2833  00249C  0100               	movlb	0	; () banked
  2834  00249E  27DA               	addwf	??_servo_rotate1& (0+255),f,b
  2835  0024A0  0E00               	movlw	0
  2836  0024A2  23DB               	addwfc	(??_servo_rotate1+1)& (0+255),f,b
  2837  0024A4  0100               	movlb	0	; () banked
  2838  0024A6  51DA               	movf	??_servo_rotate1& (0+255),w,b
  2839  0024A8  0100               	movlb	0	; () banked
  2840  0024AA  5DBF               	subwf	_j& (0+255),w,b
  2841  0024AC  0100               	movlb	0	; () banked
  2842  0024AE  51C0               	movf	(_j+1)& (0+255),w,b
  2843  0024B0  0A80               	xorlw	128
  2844  0024B2  0100               	movlb	0	; () banked
  2845  0024B4  6FDC               	movwf	(??_servo_rotate1+2)& (0+255),b
  2846  0024B6  0100               	movlb	0	; () banked
  2847  0024B8  51DB               	movf	(??_servo_rotate1+1)& (0+255),w,b
  2848  0024BA  0A80               	xorlw	128
  2849  0024BC  0100               	movlb	0	; () banked
  2850  0024BE  59DC               	subwfb	(??_servo_rotate1+2)& (0+255),w,b
  2851  0024C0  A0D8               	btfss	status,0,c
  2852  0024C2  D7DB               	goto	l3882
  2853                           
  2854                           ; BSR set to: 0
  2855                           
  2856                           ; BSR set to: 0
  2857  0024C4  4A78               	infsnz	_i,f,c
  2858  0024C6  2A79               	incf	_i+1,f,c
  2859  0024C8  D7AB               	goto	l3870
  2860  0024CA                     l405:
  2861  0024CA  0012               	return		;funcret
  2862  0024CC                     __end_of_servo_rotate1:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           intcon	equ	0xFF2
  2869                           intcon2	equ	0xFF1
  2870                           intcon3	equ	0xFF0
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _servo_rotate0 *****************
  2876 ;; Defined at:
  2877 ;;		line 419 in file "main.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  degree          2   16[BANK0 ] int 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  duty            2   21[BANK0 ] int 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        7 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    7
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_operation
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text5
  2906  0024CC                     __ptext5:
  2907                           	opt stack 0
  2908  0024CC                     _servo_rotate0:
  2909                           	opt stack 22
  2910                           
  2911                           ;main.c: 426: int duty = degree;
  2912                           
  2913                           ;incstack = 0
  2914  0024CC  C0D8  F0DD         	movff	servo_rotate0@degree,servo_rotate0@duty
  2915  0024D0  C0D9  F0DE         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  2916                           
  2917                           ;main.c: 427: for (i=0; i<20; i++) {
  2918  0024D4  0E00               	movlw	0
  2919  0024D6  6E79               	movwf	_i+1,c
  2920  0024D8  0E00               	movlw	0
  2921  0024DA  6E78               	movwf	_i,c
  2922  0024DC                     l3934:
  2923  0024DC  BE79               	btfsc	_i+1,7,c
  2924  0024DE  D006               	goto	l386
  2925  0024E0  5079               	movf	_i+1,w,c
  2926  0024E2  E151               	bnz	l394
  2927  0024E4  0E14               	movlw	20
  2928  0024E6  5C78               	subwf	_i,w,c
  2929  0024E8  B0D8               	btfsc	status,0,c
  2930  0024EA  0012               	return	
  2931  0024EC                     l386:
  2932                           
  2933                           ;main.c: 428: LATCbits.LATC0 = 1;
  2934  0024EC  808B               	bsf	3979,0,c	;volatile
  2935                           
  2936                           ;main.c: 429: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2937  0024EE  0E00               	movlw	0
  2938  0024F0  0100               	movlb	0	; () banked
  2939  0024F2  6FC0               	movwf	(_j+1)& (0+255),b
  2940  0024F4  0E00               	movlw	0
  2941  0024F6  6FBF               	movwf	_j& (0+255),b
  2942  0024F8  D007               	goto	l388
  2943  0024FA                     l3940:
  2944                           
  2945                           ; BSR set to: 0
  2946  0024FA  0E53               	movlw	83
  2947  0024FC                     u5397:
  2948  0024FC  2EE8               	decfsz	wreg,f,c
  2949  0024FE  D7FE               	bra	u5397
  2950  002500  F000               	nop	
  2951  002502  0100               	movlb	0	; () banked
  2952  002504  4BBF               	infsnz	_j& (0+255),f,b
  2953  002506  2BC0               	incf	(_j+1)& (0+255),f,b
  2954  002508                     l388:
  2955                           
  2956                           ; BSR set to: 0
  2957  002508  0100               	movlb	0	; () banked
  2958  00250A  51DD               	movf	servo_rotate0@duty& (0+255),w,b
  2959  00250C  0100               	movlb	0	; () banked
  2960  00250E  5DBF               	subwf	_j& (0+255),w,b
  2961  002510  0100               	movlb	0	; () banked
  2962  002512  51C0               	movf	(_j+1)& (0+255),w,b
  2963  002514  0A80               	xorlw	128
  2964  002516  0100               	movlb	0	; () banked
  2965  002518  6FDA               	movwf	??_servo_rotate0& (0+255),b
  2966  00251A  0100               	movlb	0	; () banked
  2967  00251C  51DE               	movf	(servo_rotate0@duty+1)& (0+255),w,b
  2968  00251E  0A80               	xorlw	128
  2969  002520  0100               	movlb	0	; () banked
  2970  002522  59DA               	subwfb	??_servo_rotate0& (0+255),w,b
  2971  002524  A0D8               	btfss	status,0,c
  2972  002526  D7E9               	goto	l3940
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 430: LATCbits.LATC0 = 0;
  2976  002528  908B               	bcf	3979,0,c	;volatile
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 431: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  2980  00252A  0E00               	movlw	0
  2981  00252C  0100               	movlb	0	; () banked
  2982  00252E  6FC0               	movwf	(_j+1)& (0+255),b
  2983  002530  0E00               	movlw	0
  2984  002532  6FBF               	movwf	_j& (0+255),b
  2985  002534  D007               	goto	l391
  2986  002536                     l3946:
  2987                           
  2988                           ; BSR set to: 0
  2989  002536  0E53               	movlw	83
  2990  002538                     u5407:
  2991  002538  2EE8               	decfsz	wreg,f,c
  2992  00253A  D7FE               	bra	u5407
  2993  00253C  F000               	nop	
  2994  00253E  0100               	movlb	0	; () banked
  2995  002540  4BBF               	infsnz	_j& (0+255),f,b
  2996  002542  2BC0               	incf	(_j+1)& (0+255),f,b
  2997  002544                     l391:
  2998                           
  2999                           ; BSR set to: 0
  3000  002544  C0DD  F0DA         	movff	servo_rotate0@duty,??_servo_rotate0
  3001  002548  C0DE  F0DB         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  3002  00254C  0100               	movlb	0	; () banked
  3003  00254E  1FDA               	comf	??_servo_rotate0& (0+255),f,b
  3004  002550  1FDB               	comf	(??_servo_rotate0+1)& (0+255),f,b
  3005  002552  4BDA               	infsnz	??_servo_rotate0& (0+255),f,b
  3006  002554  2BDB               	incf	(??_servo_rotate0+1)& (0+255),f,b
  3007  002556  0EC8               	movlw	200
  3008  002558  0100               	movlb	0	; () banked
  3009  00255A  27DA               	addwf	??_servo_rotate0& (0+255),f,b
  3010  00255C  0E00               	movlw	0
  3011  00255E  23DB               	addwfc	(??_servo_rotate0+1)& (0+255),f,b
  3012  002560  0100               	movlb	0	; () banked
  3013  002562  51DA               	movf	??_servo_rotate0& (0+255),w,b
  3014  002564  0100               	movlb	0	; () banked
  3015  002566  5DBF               	subwf	_j& (0+255),w,b
  3016  002568  0100               	movlb	0	; () banked
  3017  00256A  51C0               	movf	(_j+1)& (0+255),w,b
  3018  00256C  0A80               	xorlw	128
  3019  00256E  0100               	movlb	0	; () banked
  3020  002570  6FDC               	movwf	(??_servo_rotate0+2)& (0+255),b
  3021  002572  0100               	movlb	0	; () banked
  3022  002574  51DB               	movf	(??_servo_rotate0+1)& (0+255),w,b
  3023  002576  0A80               	xorlw	128
  3024  002578  0100               	movlb	0	; () banked
  3025  00257A  59DC               	subwfb	(??_servo_rotate0+2)& (0+255),w,b
  3026  00257C  A0D8               	btfss	status,0,c
  3027  00257E  D7DB               	goto	l3946
  3028                           
  3029                           ; BSR set to: 0
  3030                           
  3031                           ; BSR set to: 0
  3032  002580  4A78               	infsnz	_i,f,c
  3033  002582  2A79               	incf	_i+1,f,c
  3034  002584  D7AB               	goto	l3934
  3035  002586                     l394:
  3036  002586  0012               	return		;funcret
  3037  002588                     __end_of_servo_rotate0:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           intcon	equ	0xFF2
  3044                           intcon2	equ	0xFF1
  3045                           intcon3	equ	0xFF0
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _read_colorsensor *****************
  3051 ;; Defined at:
  3052 ;;		line 451 in file "main.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;		None
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;		None
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;Total ram usage:        2 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    9
  3073 ;; This function calls:
  3074 ;;		_I2C_Master_Read
  3075 ;;		_I2C_Master_Start
  3076 ;;		_I2C_Master_Stop
  3077 ;;		_I2C_Master_Write
  3078 ;; This function is called by:
  3079 ;;		_standby
  3080 ;;		_operation
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text6
  3085  001B64                     __ptext6:
  3086                           	opt stack 0
  3087  001B64                     _read_colorsensor:
  3088                           	opt stack 20
  3089                           
  3090                           ;main.c: 470: I2C_Master_Start();
  3091                           
  3092                           ;incstack = 0
  3093  001B64  EC97  F018         	call	_I2C_Master_Start	;wreg free
  3094                           
  3095                           ;main.c: 471: I2C_Master_Write(0b01010011);
  3096  001B68  0E00               	movlw	0
  3097  001B6A  0100               	movlb	0	; () banked
  3098  001B6C  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3099  001B6E  0E53               	movlw	83
  3100  001B70  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  3101  001B72  EC89  F018         	call	_I2C_Master_Write	;wreg free
  3102                           
  3103                           ;main.c: 472: color_low[0] = I2C_Master_Read(1);
  3104  001B76  0E01               	movlw	1
  3105  001B78  ECCA  F017         	call	_I2C_Master_Read
  3106  001B7C  0100               	movlb	0	; () banked
  3107  001B7E  6F9D               	movwf	_color_low& (0+255),b
  3108                           
  3109                           ;main.c: 473: color_high[0] = I2C_Master_Read(1);
  3110  001B80  0E01               	movlw	1
  3111  001B82  ECCA  F017         	call	_I2C_Master_Read
  3112  001B86  0100               	movlb	0	; () banked
  3113  001B88  6F99               	movwf	_color_high& (0+255),b
  3114                           
  3115                           ;main.c: 474: color_low[1] = I2C_Master_Read(1);
  3116  001B8A  0E01               	movlw	1
  3117  001B8C  ECCA  F017         	call	_I2C_Master_Read
  3118  001B90  0100               	movlb	0	; () banked
  3119  001B92  6F9E               	movwf	(_color_low+1)& (0+255),b
  3120                           
  3121                           ;main.c: 475: color_high[1] = I2C_Master_Read(1);
  3122  001B94  0E01               	movlw	1
  3123  001B96  ECCA  F017         	call	_I2C_Master_Read
  3124  001B9A  0100               	movlb	0	; () banked
  3125  001B9C  6F9A               	movwf	(_color_high+1)& (0+255),b
  3126                           
  3127                           ;main.c: 476: color_low[2] = I2C_Master_Read(1);
  3128  001B9E  0E01               	movlw	1
  3129  001BA0  ECCA  F017         	call	_I2C_Master_Read
  3130  001BA4  0100               	movlb	0	; () banked
  3131  001BA6  6F9F               	movwf	(_color_low+2)& (0+255),b
  3132                           
  3133                           ;main.c: 477: color_high[2] = I2C_Master_Read(1);
  3134  001BA8  0E01               	movlw	1
  3135  001BAA  ECCA  F017         	call	_I2C_Master_Read
  3136  001BAE  0100               	movlb	0	; () banked
  3137  001BB0  6F9B               	movwf	(_color_high+2)& (0+255),b
  3138                           
  3139                           ;main.c: 478: color_low[3] = I2C_Master_Read(1);
  3140  001BB2  0E01               	movlw	1
  3141  001BB4  ECCA  F017         	call	_I2C_Master_Read
  3142  001BB8  0100               	movlb	0	; () banked
  3143  001BBA  6FA0               	movwf	(_color_low+3)& (0+255),b
  3144                           
  3145                           ;main.c: 479: color_high[3] = I2C_Master_Read(0);
  3146  001BBC  0E00               	movlw	0
  3147  001BBE  ECCA  F017         	call	_I2C_Master_Read
  3148  001BC2  0100               	movlb	0	; () banked
  3149  001BC4  6F9C               	movwf	(_color_high+3)& (0+255),b
  3150                           
  3151                           ;main.c: 480: I2C_Master_Stop();
  3152  001BC6  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  3153                           
  3154                           ;main.c: 481: color[0] = (color_high[0] << 8)|(color_low[0]);
  3155  001BCA  0100               	movlb	0	; () banked
  3156  001BCC  519D               	movf	_color_low& (0+255),w,b
  3157  001BCE  C099  F0DB         	movff	_color_high,??_read_colorsensor
  3158  001BD2  0100               	movlb	0	; () banked
  3159  001BD4  6BDC               	clrf	(??_read_colorsensor+1)& (0+255),b
  3160  001BD6  C0DB  F0DC         	movff	??_read_colorsensor,??_read_colorsensor+1
  3161  001BDA  0100               	movlb	0	; () banked
  3162  001BDC  6BDB               	clrf	??_read_colorsensor& (0+255),b
  3163  001BDE  0100               	movlb	0	; () banked
  3164  001BE0  11DB               	iorwf	??_read_colorsensor& (0+255),w,b
  3165  001BE2  0100               	movlb	0	; () banked
  3166  001BE4  6F8A               	movwf	_color& (0+255),b
  3167  001BE6  0100               	movlb	0	; () banked
  3168  001BE8  51DC               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3169  001BEA  0100               	movlb	0	; () banked
  3170  001BEC  6F8B               	movwf	(_color+1)& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 482: color[1] = (color_high[1] << 8)|(color_low[1]);
  3174  001BEE  0100               	movlb	0	; () banked
  3175  001BF0  519E               	movf	(_color_low+1)& (0+255),w,b
  3176  001BF2  C09A  F0DB         	movff	_color_high+1,??_read_colorsensor
  3177  001BF6  0100               	movlb	0	; () banked
  3178  001BF8  6BDC               	clrf	(??_read_colorsensor+1)& (0+255),b
  3179  001BFA  C0DB  F0DC         	movff	??_read_colorsensor,??_read_colorsensor+1
  3180  001BFE  0100               	movlb	0	; () banked
  3181  001C00  6BDB               	clrf	??_read_colorsensor& (0+255),b
  3182  001C02  0100               	movlb	0	; () banked
  3183  001C04  11DB               	iorwf	??_read_colorsensor& (0+255),w,b
  3184  001C06  0100               	movlb	0	; () banked
  3185  001C08  6F8C               	movwf	(_color+2)& (0+255),b
  3186  001C0A  0100               	movlb	0	; () banked
  3187  001C0C  51DC               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3188  001C0E  0100               	movlb	0	; () banked
  3189  001C10  6F8D               	movwf	(_color+3)& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 483: color[2] = (color_high[2] << 8)|(color_low[2]);
  3193  001C12  0100               	movlb	0	; () banked
  3194  001C14  519F               	movf	(_color_low+2)& (0+255),w,b
  3195  001C16  C09B  F0DB         	movff	_color_high+2,??_read_colorsensor
  3196  001C1A  0100               	movlb	0	; () banked
  3197  001C1C  6BDC               	clrf	(??_read_colorsensor+1)& (0+255),b
  3198  001C1E  C0DB  F0DC         	movff	??_read_colorsensor,??_read_colorsensor+1
  3199  001C22  0100               	movlb	0	; () banked
  3200  001C24  6BDB               	clrf	??_read_colorsensor& (0+255),b
  3201  001C26  0100               	movlb	0	; () banked
  3202  001C28  11DB               	iorwf	??_read_colorsensor& (0+255),w,b
  3203  001C2A  0100               	movlb	0	; () banked
  3204  001C2C  6F8E               	movwf	(_color+4)& (0+255),b
  3205  001C2E  0100               	movlb	0	; () banked
  3206  001C30  51DC               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3207  001C32  0100               	movlb	0	; () banked
  3208  001C34  6F8F               	movwf	(_color+5)& (0+255),b
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 484: color[3] = (color_high[3] << 8)|(color_low[3]);
  3212  001C36  0100               	movlb	0	; () banked
  3213  001C38  51A0               	movf	(_color_low+3)& (0+255),w,b
  3214  001C3A  C09C  F0DB         	movff	_color_high+3,??_read_colorsensor
  3215  001C3E  0100               	movlb	0	; () banked
  3216  001C40  6BDC               	clrf	(??_read_colorsensor+1)& (0+255),b
  3217  001C42  C0DB  F0DC         	movff	??_read_colorsensor,??_read_colorsensor+1
  3218  001C46  0100               	movlb	0	; () banked
  3219  001C48  6BDB               	clrf	??_read_colorsensor& (0+255),b
  3220  001C4A  0100               	movlb	0	; () banked
  3221  001C4C  11DB               	iorwf	??_read_colorsensor& (0+255),w,b
  3222  001C4E  0100               	movlb	0	; () banked
  3223  001C50  6F90               	movwf	(_color+6)& (0+255),b
  3224  001C52  0100               	movlb	0	; () banked
  3225  001C54  51DC               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3226  001C56  0100               	movlb	0	; () banked
  3227  001C58  6F91               	movwf	(_color+7)& (0+255),b
  3228  001C5A  0012               	return	
  3229  001C5C                     __end_of_read_colorsensor:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           intcon	equ	0xFF2
  3236                           intcon2	equ	0xFF1
  3237                           intcon3	equ	0xFF0
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function ___ftge *****************
  3243 ;; Defined at:
  3244 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  ff1             3    6[BANK1 ] float 
  3247 ;;  ff2             3    9[BANK1 ] float 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        9 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    7
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_operation
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text7
  3274  002282                     __ptext7:
  3275                           	opt stack 0
  3276  002282                     ___ftge:
  3277                           	opt stack 22
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;incstack = 0
  3281  002282  0101               	movlb	1	; () banked
  3282  002284  AF08               	btfss	(___ftge@ff1+2)& (0+255),7,b
  3283  002286  D01D               	goto	l5258
  3284                           
  3285                           ; BSR set to: 1
  3286  002288  C106  F0E9         	movff	___ftge@ff1,??___ftge
  3287  00228C  C107  F0EA         	movff	___ftge@ff1+1,??___ftge+1
  3288  002290  C108  F0EB         	movff	___ftge@ff1+2,??___ftge+2
  3289  002294  0100               	movlb	0	; () banked
  3290  002296  1FE9               	comf	??___ftge& (0+255),f,b
  3291  002298  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3292  00229A  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3293  00229C  2BE9               	incf	??___ftge& (0+255),f,b
  3294  00229E  0E00               	movlw	0
  3295  0022A0  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3296  0022A2  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3297  0022A4  0E00               	movlw	0
  3298  0022A6  0100               	movlb	0	; () banked
  3299  0022A8  25E9               	addwf	??___ftge& (0+255),w,b
  3300  0022AA  0101               	movlb	1	; () banked
  3301  0022AC  6F06               	movwf	___ftge@ff1& (0+255),b
  3302  0022AE  0E00               	movlw	0
  3303  0022B0  0100               	movlb	0	; () banked
  3304  0022B2  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3305  0022B4  0101               	movlb	1	; () banked
  3306  0022B6  6F07               	movwf	(___ftge@ff1+1)& (0+255),b
  3307  0022B8  0E80               	movlw	128
  3308  0022BA  0100               	movlb	0	; () banked
  3309  0022BC  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3310  0022BE  0101               	movlb	1	; () banked
  3311  0022C0  6F08               	movwf	(___ftge@ff1+2)& (0+255),b
  3312  0022C2                     l5258:
  3313                           
  3314                           ; BSR set to: 1
  3315  0022C2  0101               	movlb	1	; () banked
  3316  0022C4  AF0B               	btfss	(___ftge@ff2+2)& (0+255),7,b
  3317  0022C6  D01D               	goto	l5262
  3318                           
  3319                           ; BSR set to: 1
  3320  0022C8  C109  F0E9         	movff	___ftge@ff2,??___ftge
  3321  0022CC  C10A  F0EA         	movff	___ftge@ff2+1,??___ftge+1
  3322  0022D0  C10B  F0EB         	movff	___ftge@ff2+2,??___ftge+2
  3323  0022D4  0100               	movlb	0	; () banked
  3324  0022D6  1FE9               	comf	??___ftge& (0+255),f,b
  3325  0022D8  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3326  0022DA  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3327  0022DC  2BE9               	incf	??___ftge& (0+255),f,b
  3328  0022DE  0E00               	movlw	0
  3329  0022E0  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3330  0022E2  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3331  0022E4  0E00               	movlw	0
  3332  0022E6  0100               	movlb	0	; () banked
  3333  0022E8  25E9               	addwf	??___ftge& (0+255),w,b
  3334  0022EA  0101               	movlb	1	; () banked
  3335  0022EC  6F09               	movwf	___ftge@ff2& (0+255),b
  3336  0022EE  0E00               	movlw	0
  3337  0022F0  0100               	movlb	0	; () banked
  3338  0022F2  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3339  0022F4  0101               	movlb	1	; () banked
  3340  0022F6  6F0A               	movwf	(___ftge@ff2+1)& (0+255),b
  3341  0022F8  0E80               	movlw	128
  3342  0022FA  0100               	movlb	0	; () banked
  3343  0022FC  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3344  0022FE  0101               	movlb	1	; () banked
  3345  002300  6F0B               	movwf	(___ftge@ff2+2)& (0+255),b
  3346  002302                     l5262:
  3347                           
  3348                           ; BSR set to: 1
  3349  002302  0E00               	movlw	0
  3350  002304  0101               	movlb	1	; () banked
  3351  002306  1B06               	xorwf	___ftge@ff1& (0+255),f,b
  3352  002308  0E00               	movlw	0
  3353  00230A  0101               	movlb	1	; () banked
  3354  00230C  1B07               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  3355  00230E  0E80               	movlw	128
  3356  002310  0101               	movlb	1	; () banked
  3357  002312  1B08               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  3358                           
  3359                           ; BSR set to: 1
  3360  002314  0E00               	movlw	0
  3361  002316  0101               	movlb	1	; () banked
  3362  002318  1B09               	xorwf	___ftge@ff2& (0+255),f,b
  3363  00231A  0E00               	movlw	0
  3364  00231C  0101               	movlb	1	; () banked
  3365  00231E  1B0A               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  3366  002320  0E80               	movlw	128
  3367  002322  0101               	movlb	1	; () banked
  3368  002324  1B0B               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  3369  002326  0101               	movlb	1	; () banked
  3370  002328  5109               	movf	___ftge@ff2& (0+255),w,b
  3371  00232A  0101               	movlb	1	; () banked
  3372  00232C  5D06               	subwf	___ftge@ff1& (0+255),w,b
  3373  00232E  0101               	movlb	1	; () banked
  3374  002330  510A               	movf	(___ftge@ff2+1)& (0+255),w,b
  3375  002332  0101               	movlb	1	; () banked
  3376  002334  5907               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  3377  002336  0101               	movlb	1	; () banked
  3378  002338  510B               	movf	(___ftge@ff2+2)& (0+255),w,b
  3379  00233A  0101               	movlb	1	; () banked
  3380  00233C  5908               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  3381  00233E  B0D8               	btfsc	status,0,c
  3382  002340  D002               	goto	l5268
  3383                           
  3384                           ; BSR set to: 1
  3385  002342  90D8               	bcf	status,0,c
  3386  002344  0012               	return	
  3387  002346                     l5268:
  3388                           
  3389                           ; BSR set to: 1
  3390  002346  80D8               	bsf	status,0,c
  3391                           
  3392                           ; BSR set to: 1
  3393  002348  0012               	return	
  3394  00234A                     __end_of___ftge:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           intcon	equ	0xFF2
  3401                           intcon2	equ	0xFF1
  3402                           intcon3	equ	0xFF0
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function ___ftdiv *****************
  3408 ;; Defined at:
  3409 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  f1              3   24[BANK0 ] float 
  3412 ;;  f2              3   27[BANK0 ] float 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  f3              3    1[BANK1 ] float 
  3415 ;;  sign            1    5[BANK1 ] unsigned char 
  3416 ;;  exp             1    4[BANK1 ] unsigned char 
  3417 ;;  cntr            1    0[BANK1 ] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  3   24[BANK0 ] float 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         0       9       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:       15 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    8
  3434 ;; This function calls:
  3435 ;;		___ftpack
  3436 ;; This function is called by:
  3437 ;;		_operation
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text8
  3442  0014F0                     __ptext8:
  3443                           	opt stack 0
  3444  0014F0                     ___ftdiv:
  3445                           	opt stack 21
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;incstack = 0
  3449  0014F0  C0E2  F0E6         	movff	___ftdiv@f1+2,??___ftdiv
  3450  0014F4  0100               	movlb	0	; () banked
  3451  0014F6  6BE7               	clrf	(??___ftdiv+1)& (0+255),b
  3452  0014F8  6BE8               	clrf	(??___ftdiv+2)& (0+255),b
  3453  0014FA  0100               	movlb	0	; () banked
  3454  0014FC  35E1               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3455  0014FE  0100               	movlb	0	; () banked
  3456  001500  37E6               	rlcf	??___ftdiv& (0+255),f,b
  3457  001502  E301               	bnc	u5031
  3458  001504  81E7               	bsf	(??___ftdiv+1)& (0+255),0,b
  3459  001506                     u5031:
  3460  001506  0100               	movlb	0	; () banked
  3461  001508  51E6               	movf	??___ftdiv& (0+255),w,b
  3462  00150A  0101               	movlb	1	; () banked
  3463  00150C  6F04               	movwf	___ftdiv@exp& (0+255),b
  3464  00150E  0101               	movlb	1	; () banked
  3465  001510  5104               	movf	___ftdiv@exp& (0+255),w,b
  3466  001512  A4D8               	btfss	status,2,c
  3467  001514  D00A               	goto	l5202
  3468                           
  3469                           ; BSR set to: 1
  3470  001516  0E00               	movlw	0
  3471  001518  0100               	movlb	0	; () banked
  3472  00151A  6FE0               	movwf	?___ftdiv& (0+255),b
  3473  00151C  0E00               	movlw	0
  3474  00151E  0100               	movlb	0	; () banked
  3475  001520  6FE1               	movwf	(?___ftdiv+1)& (0+255),b
  3476  001522  0E00               	movlw	0
  3477  001524  0100               	movlb	0	; () banked
  3478  001526  6FE2               	movwf	(?___ftdiv+2)& (0+255),b
  3479                           
  3480                           ; BSR set to: 0
  3481  001528  0012               	return	
  3482  00152A                     l5202:
  3483  00152A  C0E5  F0E6         	movff	___ftdiv@f2+2,??___ftdiv
  3484  00152E  0100               	movlb	0	; () banked
  3485  001530  6BE7               	clrf	(??___ftdiv+1)& (0+255),b
  3486  001532  6BE8               	clrf	(??___ftdiv+2)& (0+255),b
  3487  001534  0100               	movlb	0	; () banked
  3488  001536  35E4               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3489  001538  0100               	movlb	0	; () banked
  3490  00153A  37E6               	rlcf	??___ftdiv& (0+255),f,b
  3491  00153C  E301               	bnc	u5051
  3492  00153E  81E7               	bsf	(??___ftdiv+1)& (0+255),0,b
  3493  001540                     u5051:
  3494  001540  0100               	movlb	0	; () banked
  3495  001542  51E6               	movf	??___ftdiv& (0+255),w,b
  3496  001544  0101               	movlb	1	; () banked
  3497  001546  6F05               	movwf	___ftdiv@sign& (0+255),b
  3498  001548  0101               	movlb	1	; () banked
  3499  00154A  5105               	movf	___ftdiv@sign& (0+255),w,b
  3500  00154C  A4D8               	btfss	status,2,c
  3501  00154E  D00A               	goto	l5208
  3502                           
  3503                           ; BSR set to: 1
  3504  001550  0E00               	movlw	0
  3505  001552  0100               	movlb	0	; () banked
  3506  001554  6FE0               	movwf	?___ftdiv& (0+255),b
  3507  001556  0E00               	movlw	0
  3508  001558  0100               	movlb	0	; () banked
  3509  00155A  6FE1               	movwf	(?___ftdiv+1)& (0+255),b
  3510  00155C  0E00               	movlw	0
  3511  00155E  0100               	movlb	0	; () banked
  3512  001560  6FE2               	movwf	(?___ftdiv+2)& (0+255),b
  3513                           
  3514                           ; BSR set to: 0
  3515  001562  0012               	return	
  3516  001564                     l5208:
  3517  001564  0E00               	movlw	0
  3518  001566  0101               	movlb	1	; () banked
  3519  001568  6F01               	movwf	___ftdiv@f3& (0+255),b
  3520  00156A  0E00               	movlw	0
  3521  00156C  0101               	movlb	1	; () banked
  3522  00156E  6F02               	movwf	(___ftdiv@f3+1)& (0+255),b
  3523  001570  0E00               	movlw	0
  3524  001572  0101               	movlb	1	; () banked
  3525  001574  6F03               	movwf	(___ftdiv@f3+2)& (0+255),b
  3526                           
  3527                           ; BSR set to: 1
  3528  001576  0101               	movlb	1	; () banked
  3529  001578  5105               	movf	___ftdiv@sign& (0+255),w,b
  3530  00157A  0F89               	addlw	137
  3531  00157C  0101               	movlb	1	; () banked
  3532  00157E  5F04               	subwf	___ftdiv@exp& (0+255),f,b
  3533                           
  3534                           ; BSR set to: 1
  3535  001580  C0E2  F105         	movff	___ftdiv@f1+2,___ftdiv@sign
  3536                           
  3537                           ; BSR set to: 1
  3538  001584  0100               	movlb	0	; () banked
  3539  001586  51E5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3540  001588  0101               	movlb	1	; () banked
  3541  00158A  1B05               	xorwf	___ftdiv@sign& (0+255),f,b
  3542                           
  3543                           ; BSR set to: 1
  3544  00158C  0E80               	movlw	128
  3545  00158E  0101               	movlb	1	; () banked
  3546  001590  1705               	andwf	___ftdiv@sign& (0+255),f,b
  3547                           
  3548                           ; BSR set to: 1
  3549  001592  0100               	movlb	0	; () banked
  3550  001594  8FE1               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3551                           
  3552                           ; BSR set to: 0
  3553  001596  0EFF               	movlw	255
  3554  001598  0100               	movlb	0	; () banked
  3555  00159A  17E0               	andwf	___ftdiv@f1& (0+255),f,b
  3556  00159C  0EFF               	movlw	255
  3557  00159E  0100               	movlb	0	; () banked
  3558  0015A0  17E1               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3559  0015A2  0E00               	movlw	0
  3560  0015A4  0100               	movlb	0	; () banked
  3561  0015A6  17E2               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3562                           
  3563                           ; BSR set to: 0
  3564  0015A8  0100               	movlb	0	; () banked
  3565  0015AA  8FE4               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3566                           
  3567                           ; BSR set to: 0
  3568  0015AC  0EFF               	movlw	255
  3569  0015AE  0100               	movlb	0	; () banked
  3570  0015B0  17E3               	andwf	___ftdiv@f2& (0+255),f,b
  3571  0015B2  0EFF               	movlw	255
  3572  0015B4  0100               	movlb	0	; () banked
  3573  0015B6  17E4               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3574  0015B8  0E00               	movlw	0
  3575  0015BA  0100               	movlb	0	; () banked
  3576  0015BC  17E5               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3577                           
  3578                           ; BSR set to: 0
  3579  0015BE  0E18               	movlw	24
  3580  0015C0  0101               	movlb	1	; () banked
  3581  0015C2  6F00               	movwf	___ftdiv@cntr& (0+255),b
  3582  0015C4                     l5228:
  3583                           
  3584                           ; BSR set to: 1
  3585  0015C4  0101               	movlb	1	; () banked
  3586  0015C6  90D8               	bcf	status,0,c
  3587  0015C8  3701               	rlcf	___ftdiv@f3& (0+255),f,b
  3588  0015CA  3702               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3589  0015CC  3703               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3590                           
  3591                           ; BSR set to: 1
  3592  0015CE  0100               	movlb	0	; () banked
  3593  0015D0  51E3               	movf	___ftdiv@f2& (0+255),w,b
  3594  0015D2  0100               	movlb	0	; () banked
  3595  0015D4  5DE0               	subwf	___ftdiv@f1& (0+255),w,b
  3596  0015D6  0100               	movlb	0	; () banked
  3597  0015D8  51E4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3598  0015DA  0100               	movlb	0	; () banked
  3599  0015DC  59E1               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3600  0015DE  0100               	movlb	0	; () banked
  3601  0015E0  51E5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3602  0015E2  0100               	movlb	0	; () banked
  3603  0015E4  59E2               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3604  0015E6  A0D8               	btfss	status,0,c
  3605  0015E8  D00E               	goto	l763
  3606                           
  3607                           ; BSR set to: 0
  3608  0015EA  0100               	movlb	0	; () banked
  3609  0015EC  51E3               	movf	___ftdiv@f2& (0+255),w,b
  3610  0015EE  0100               	movlb	0	; () banked
  3611  0015F0  5FE0               	subwf	___ftdiv@f1& (0+255),f,b
  3612  0015F2  0100               	movlb	0	; () banked
  3613  0015F4  51E4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3614  0015F6  0100               	movlb	0	; () banked
  3615  0015F8  5BE1               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3616  0015FA  0100               	movlb	0	; () banked
  3617  0015FC  51E5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3618  0015FE  0100               	movlb	0	; () banked
  3619  001600  5BE2               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3620                           
  3621                           ; BSR set to: 0
  3622  001602  0101               	movlb	1	; () banked
  3623  001604  8101               	bsf	___ftdiv@f3& (0+255),0,b
  3624  001606                     l763:
  3625  001606  0100               	movlb	0	; () banked
  3626  001608  90D8               	bcf	status,0,c
  3627  00160A  37E0               	rlcf	___ftdiv@f1& (0+255),f,b
  3628  00160C  37E1               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3629  00160E  37E2               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3630                           
  3631                           ; BSR set to: 0
  3632  001610  0101               	movlb	1	; () banked
  3633  001612  2F00               	decfsz	___ftdiv@cntr& (0+255),f,b
  3634  001614  D7D7               	goto	l5228
  3635                           
  3636                           ; BSR set to: 1
  3637                           
  3638                           ; BSR set to: 1
  3639  001616  C101  F0D8         	movff	___ftdiv@f3,___ftpack@arg
  3640  00161A  C102  F0D9         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3641  00161E  C103  F0DA         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3642  001622  C104  F0DB         	movff	___ftdiv@exp,___ftpack@exp
  3643  001626  C105  F0DC         	movff	___ftdiv@sign,___ftpack@sign
  3644  00162A  ECAD  F00B         	call	___ftpack	;wreg free
  3645  00162E  C0D8  F0E0         	movff	?___ftpack,?___ftdiv
  3646  001632  C0D9  F0E1         	movff	?___ftpack+1,?___ftdiv+1
  3647  001636  C0DA  F0E2         	movff	?___ftpack+2,?___ftdiv+2
  3648  00163A  0012               	return	
  3649  00163C                     __end_of___ftdiv:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           intcon	equ	0xFF2
  3656                           intcon2	equ	0xFF1
  3657                           intcon3	equ	0xFF0
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function ___awtoft *****************
  3663 ;; Defined at:
  3664 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  c               2   24[BANK0 ] int 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  sign            1   27[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  3   24[BANK0 ] float 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3678 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;Total ram usage:        4 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    8
  3685 ;; This function calls:
  3686 ;;		___ftpack
  3687 ;; This function is called by:
  3688 ;;		_operation
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text9
  3693  002DF0                     __ptext9:
  3694                           	opt stack 0
  3695  002DF0                     ___awtoft:
  3696                           	opt stack 21
  3697                           
  3698                           ;incstack = 0
  3699  002DF0  0E00               	movlw	0
  3700  002DF2  0100               	movlb	0	; () banked
  3701  002DF4  6FE3               	movwf	___awtoft@sign& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704  002DF6  0100               	movlb	0	; () banked
  3705  002DF8  AFE1               	btfss	(___awtoft@c+1)& (0+255),7,b
  3706  002DFA  D008               	goto	l5250
  3707                           
  3708                           ; BSR set to: 0
  3709  002DFC  0100               	movlb	0	; () banked
  3710  002DFE  6DE0               	negf	___awtoft@c& (0+255),b
  3711  002E00  1FE1               	comf	(___awtoft@c+1)& (0+255),f,b
  3712  002E02  B0D8               	btfsc	status,0,c
  3713  002E04  2BE1               	incf	(___awtoft@c+1)& (0+255),f,b
  3714                           
  3715                           ; BSR set to: 0
  3716  002E06  0E01               	movlw	1
  3717  002E08  0100               	movlb	0	; () banked
  3718  002E0A  6FE3               	movwf	___awtoft@sign& (0+255),b
  3719  002E0C                     l5250:
  3720                           
  3721                           ; BSR set to: 0
  3722  002E0C  C0E0  F0D8         	movff	___awtoft@c,___ftpack@arg
  3723  002E10  C0E1  F0D9         	movff	___awtoft@c+1,___ftpack@arg+1
  3724  002E14  0100               	movlb	0	; () banked
  3725  002E16  6BDA               	clrf	(___ftpack@arg+2)& (0+255),b
  3726  002E18  0E8E               	movlw	142
  3727  002E1A  0100               	movlb	0	; () banked
  3728  002E1C  6FDB               	movwf	___ftpack@exp& (0+255),b
  3729  002E1E  C0E3  F0DC         	movff	___awtoft@sign,___ftpack@sign
  3730  002E22  ECAD  F00B         	call	___ftpack	;wreg free
  3731  002E26  C0D8  F0E0         	movff	?___ftpack,?___awtoft
  3732  002E2A  C0D9  F0E1         	movff	?___ftpack+1,?___awtoft+1
  3733  002E2E  C0DA  F0E2         	movff	?___ftpack+2,?___awtoft+2
  3734  002E32  0012               	return	
  3735  002E34                     __end_of___awtoft:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           intcon	equ	0xFF2
  3742                           intcon2	equ	0xFF1
  3743                           intcon3	equ	0xFF0
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function ___ftpack *****************
  3749 ;; Defined at:
  3750 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  arg             3   16[BANK0 ] unsigned um
  3753 ;;  exp             1   19[BANK0 ] unsigned char 
  3754 ;;  sign            1   20[BANK0 ] unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  3   16[BANK0 ] float 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:        8 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    7
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		___awtoft
  3777 ;;		___ftdiv
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text10
  3782  00175A                     __ptext10:
  3783                           	opt stack 0
  3784  00175A                     ___ftpack:
  3785                           	opt stack 21
  3786                           
  3787                           ;incstack = 0
  3788  00175A  0100               	movlb	0	; () banked
  3789  00175C  51DB               	movf	___ftpack@exp& (0+255),w,b
  3790  00175E  0100               	movlb	0	; () banked
  3791  001760  B4D8               	btfsc	status,2,c
  3792  001762  D008               	goto	l4988
  3793                           
  3794                           ; BSR set to: 0
  3795  001764  0100               	movlb	0	; () banked
  3796  001766  51D8               	movf	___ftpack@arg& (0+255),w,b
  3797  001768  0100               	movlb	0	; () banked
  3798  00176A  11D9               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3799  00176C  0100               	movlb	0	; () banked
  3800  00176E  11DA               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3801  001770  A4D8               	btfss	status,2,c
  3802  001772  D011               	goto	l4994
  3803  001774                     l4988:
  3804                           
  3805                           ; BSR set to: 0
  3806  001774  0E00               	movlw	0
  3807  001776  0100               	movlb	0	; () banked
  3808  001778  6FD8               	movwf	?___ftpack& (0+255),b
  3809  00177A  0E00               	movlw	0
  3810  00177C  0100               	movlb	0	; () banked
  3811  00177E  6FD9               	movwf	(?___ftpack+1)& (0+255),b
  3812  001780  0E00               	movlw	0
  3813  001782  0100               	movlb	0	; () banked
  3814  001784  6FDA               	movwf	(?___ftpack+2)& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817  001786  0012               	return	
  3818  001788                     l4992:
  3819                           
  3820                           ; BSR set to: 0
  3821  001788  0100               	movlb	0	; () banked
  3822  00178A  2BDB               	incf	___ftpack@exp& (0+255),f,b
  3823  00178C  0100               	movlb	0	; () banked
  3824  00178E  90D8               	bcf	status,0,c
  3825  001790  33DA               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3826  001792  33D9               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3827  001794  33D8               	rrcf	___ftpack@arg& (0+255),f,b
  3828  001796                     l4994:
  3829                           
  3830                           ; BSR set to: 0
  3831  001796  0E00               	movlw	0
  3832  001798  0100               	movlb	0	; () banked
  3833  00179A  15D8               	andwf	___ftpack@arg& (0+255),w,b
  3834  00179C  0100               	movlb	0	; () banked
  3835  00179E  6FDD               	movwf	??___ftpack& (0+255),b
  3836  0017A0  0E00               	movlw	0
  3837  0017A2  0100               	movlb	0	; () banked
  3838  0017A4  15D9               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3839  0017A6  0100               	movlb	0	; () banked
  3840  0017A8  6FDE               	movwf	(??___ftpack+1)& (0+255),b
  3841  0017AA  0EFE               	movlw	254
  3842  0017AC  0100               	movlb	0	; () banked
  3843  0017AE  15DA               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3844  0017B0  0100               	movlb	0	; () banked
  3845  0017B2  6FDF               	movwf	(??___ftpack+2)& (0+255),b
  3846  0017B4  0100               	movlb	0	; () banked
  3847  0017B6  51DD               	movf	??___ftpack& (0+255),w,b
  3848  0017B8  0100               	movlb	0	; () banked
  3849  0017BA  11DE               	iorwf	(??___ftpack+1)& (0+255),w,b
  3850  0017BC  0100               	movlb	0	; () banked
  3851  0017BE  11DF               	iorwf	(??___ftpack+2)& (0+255),w,b
  3852  0017C0  B4D8               	btfsc	status,2,c
  3853  0017C2  D011               	goto	l5000
  3854  0017C4  D7E1               	goto	l4992
  3855  0017C6                     l4996:
  3856                           
  3857                           ; BSR set to: 0
  3858  0017C6  0100               	movlb	0	; () banked
  3859  0017C8  2BDB               	incf	___ftpack@exp& (0+255),f,b
  3860                           
  3861                           ; BSR set to: 0
  3862  0017CA  0E01               	movlw	1
  3863  0017CC  0100               	movlb	0	; () banked
  3864  0017CE  27D8               	addwf	___ftpack@arg& (0+255),f,b
  3865  0017D0  0E00               	movlw	0
  3866  0017D2  0100               	movlb	0	; () banked
  3867  0017D4  23D9               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3868  0017D6  0E00               	movlw	0
  3869  0017D8  0100               	movlb	0	; () banked
  3870  0017DA  23DA               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3871  0017DC  0100               	movlb	0	; () banked
  3872  0017DE  90D8               	bcf	status,0,c
  3873  0017E0  33DA               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3874  0017E2  33D9               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3875  0017E4  33D8               	rrcf	___ftpack@arg& (0+255),f,b
  3876  0017E6                     l5000:
  3877                           
  3878                           ; BSR set to: 0
  3879  0017E6  0E00               	movlw	0
  3880  0017E8  0100               	movlb	0	; () banked
  3881  0017EA  15D8               	andwf	___ftpack@arg& (0+255),w,b
  3882  0017EC  0100               	movlb	0	; () banked
  3883  0017EE  6FDD               	movwf	??___ftpack& (0+255),b
  3884  0017F0  0E00               	movlw	0
  3885  0017F2  0100               	movlb	0	; () banked
  3886  0017F4  15D9               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3887  0017F6  0100               	movlb	0	; () banked
  3888  0017F8  6FDE               	movwf	(??___ftpack+1)& (0+255),b
  3889  0017FA  0EFF               	movlw	255
  3890  0017FC  0100               	movlb	0	; () banked
  3891  0017FE  15DA               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3892  001800  0100               	movlb	0	; () banked
  3893  001802  6FDF               	movwf	(??___ftpack+2)& (0+255),b
  3894  001804  0100               	movlb	0	; () banked
  3895  001806  51DD               	movf	??___ftpack& (0+255),w,b
  3896  001808  0100               	movlb	0	; () banked
  3897  00180A  11DE               	iorwf	(??___ftpack+1)& (0+255),w,b
  3898  00180C  0100               	movlb	0	; () banked
  3899  00180E  11DF               	iorwf	(??___ftpack+2)& (0+255),w,b
  3900  001810  B4D8               	btfsc	status,2,c
  3901  001812  D008               	goto	l5004
  3902  001814  D7D8               	goto	l4996
  3903  001816                     l5002:
  3904                           
  3905                           ; BSR set to: 0
  3906  001816  0100               	movlb	0	; () banked
  3907  001818  07DB               	decf	___ftpack@exp& (0+255),f,b
  3908  00181A  0100               	movlb	0	; () banked
  3909  00181C  90D8               	bcf	status,0,c
  3910  00181E  37D8               	rlcf	___ftpack@arg& (0+255),f,b
  3911  001820  37D9               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3912  001822  37DA               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3913  001824                     l5004:
  3914                           
  3915                           ; BSR set to: 0
  3916  001824  0100               	movlb	0	; () banked
  3917  001826  BFD9               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3918  001828  D004               	goto	l705
  3919                           
  3920                           ; BSR set to: 0
  3921  00182A  0E02               	movlw	2
  3922  00182C  0100               	movlb	0	; () banked
  3923  00182E  61DB               	cpfslt	___ftpack@exp& (0+255),b
  3924  001830  D7F2               	goto	l5002
  3925  001832                     l705:
  3926                           
  3927                           ; BSR set to: 0
  3928  001832  0100               	movlb	0	; () banked
  3929  001834  B1DB               	btfsc	___ftpack@exp& (0+255),0,b
  3930  001836  D002               	goto	l5010
  3931                           
  3932                           ; BSR set to: 0
  3933  001838  0100               	movlb	0	; () banked
  3934  00183A  9FD9               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3935  00183C                     l5010:
  3936                           
  3937                           ; BSR set to: 0
  3938  00183C  0100               	movlb	0	; () banked
  3939  00183E  90D8               	bcf	status,0,c
  3940  001840  33DB               	rrcf	___ftpack@exp& (0+255),f,b
  3941  001842  0100               	movlb	0	; () banked
  3942  001844  51DB               	movf	___ftpack@exp& (0+255),w,b
  3943  001846  0100               	movlb	0	; () banked
  3944  001848  13DA               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3945                           
  3946                           ; BSR set to: 0
  3947  00184A  0100               	movlb	0	; () banked
  3948  00184C  51DC               	movf	___ftpack@sign& (0+255),w,b
  3949  00184E  0100               	movlb	0	; () banked
  3950  001850  B4D8               	btfsc	status,2,c
  3951  001852  D002               	goto	l5016
  3952                           
  3953                           ; BSR set to: 0
  3954  001854  0100               	movlb	0	; () banked
  3955  001856  8FDA               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3956  001858                     l5016:
  3957                           
  3958                           ; BSR set to: 0
  3959  001858  C0D8  F0D8         	movff	___ftpack@arg,?___ftpack
  3960  00185C  C0D9  F0D9         	movff	___ftpack@arg+1,?___ftpack+1
  3961  001860  C0DA  F0DA         	movff	___ftpack@arg+2,?___ftpack+2
  3962  001864  0012               	return	
  3963  001866                     __end_of___ftpack:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           intcon	equ	0xFF2
  3970                           intcon2	equ	0xFF1
  3971                           intcon3	equ	0xFF0
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _initLCD *****************
  3977 ;; Defined at:
  3978 ;;		line 14 in file "lcd.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;Total ram usage:        1 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    9
  3999 ;; This function calls:
  4000 ;;		_lcdInst
  4001 ;; This function is called by:
  4002 ;;		_main
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text11
  4007  002D08                     __ptext11:
  4008                           	opt stack 0
  4009  002D08                     _initLCD:
  4010                           	opt stack 21
  4011                           
  4012                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;incstack = 0
  4016  002D08  0E31               	movlw	49
  4017  002D0A  0100               	movlb	0	; () banked
  4018  002D0C  6FDB               	movwf	??_initLCD& (0+255),b
  4019  002D0E  0EB2               	movlw	178
  4020  002D10                     u5417:
  4021  002D10  2EE8               	decfsz	wreg,f,c
  4022  002D12  D7FE               	bra	u5417
  4023  002D14  2FDB               	decfsz	??_initLCD& (0+255),f,b
  4024  002D16  D7FC               	bra	u5417
  4025  002D18  F000               	nop	
  4026                           
  4027                           ;lcd.c: 16: lcdInst(0b00110011);
  4028  002D1A  0E33               	movlw	51
  4029  002D1C  EC75  F018         	call	_lcdInst
  4030                           
  4031                           ;lcd.c: 17: lcdInst(0b00110011);
  4032  002D20  0E33               	movlw	51
  4033  002D22  EC75  F018         	call	_lcdInst
  4034                           
  4035                           ;lcd.c: 18: lcdInst(0b00110010);
  4036  002D26  0E32               	movlw	50
  4037  002D28  EC75  F018         	call	_lcdInst
  4038                           
  4039                           ;lcd.c: 19: lcdInst(0b00101000);
  4040  002D2C  0E28               	movlw	40
  4041  002D2E  EC75  F018         	call	_lcdInst
  4042                           
  4043                           ;lcd.c: 20: lcdInst(0b00001111);
  4044  002D32  0E0F               	movlw	15
  4045  002D34  EC75  F018         	call	_lcdInst
  4046                           
  4047                           ;lcd.c: 21: lcdInst(0b00000110);
  4048  002D38  0E06               	movlw	6
  4049  002D3A  EC75  F018         	call	_lcdInst
  4050                           
  4051                           ;lcd.c: 22: lcdInst(0b00000001);
  4052  002D3E  0E01               	movlw	1
  4053  002D40  EC75  F018         	call	_lcdInst
  4054                           
  4055                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  4056  002D44  0E31               	movlw	49
  4057  002D46  0100               	movlb	0	; () banked
  4058  002D48  6FDB               	movwf	??_initLCD& (0+255),b
  4059  002D4A  0EB2               	movlw	178
  4060  002D4C                     u5427:
  4061  002D4C  2EE8               	decfsz	wreg,f,c
  4062  002D4E  D7FE               	bra	u5427
  4063  002D50  2FDB               	decfsz	??_initLCD& (0+255),f,b
  4064  002D52  D7FC               	bra	u5427
  4065  002D54  F000               	nop	
  4066  002D56  0012               	return		;funcret
  4067  002D58                     __end_of_initLCD:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           intcon	equ	0xFF2
  4074                           intcon2	equ	0xFF1
  4075                           intcon3	equ	0xFF0
  4076                           postinc0	equ	0xFEE
  4077                           wreg	equ	0xFE8
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _emergencystop *****************
  4081 ;; Defined at:
  4082 ;;		line 409 in file "main.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:   10
  4103 ;; This function calls:
  4104 ;;		_lcdInst
  4105 ;;		_printf
  4106 ;; This function is called by:
  4107 ;;		_main
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text12
  4112  00305C                     __ptext12:
  4113                           	opt stack 0
  4114  00305C                     _emergencystop:
  4115                           	opt stack 20
  4116                           
  4117                           ;main.c: 410: (INTCONbits.GIE = 0);
  4118                           
  4119                           ;incstack = 0
  4120  00305C  9EF2               	bcf	intcon,7,c	;volatile
  4121                           
  4122                           ;main.c: 411: PORTAbits.RA2 = 0;
  4123  00305E  9480               	bcf	3968,2,c	;volatile
  4124                           
  4125                           ;main.c: 412: lcdInst(0b00000001);
  4126  003060  0E01               	movlw	1
  4127  003062  EC75  F018         	call	_lcdInst
  4128                           
  4129                           ;main.c: 413: lcdInst(0b10000000);
  4130  003066  0E80               	movlw	128
  4131  003068  EC75  F018         	call	_lcdInst
  4132                           
  4133                           ;main.c: 414: printf("EMERGENCY STOP");
  4134  00306C  0EC6               	movlw	low STR_20
  4135  00306E  0100               	movlb	0	; () banked
  4136  003070  6FE4               	movwf	printf@f& (0+255),b
  4137  003072  0EFF               	movlw	high STR_20
  4138  003074  0100               	movlb	0	; () banked
  4139  003076  6FE5               	movwf	(printf@f+1)& (0+255),b
  4140  003078  EC09  F000         	call	_printf	;wreg free
  4141  00307C                     l380:
  4142  00307C  D7FF               	goto	l380
  4143  00307E                     __end_of_emergencystop:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           intcon	equ	0xFF2
  4150                           intcon2	equ	0xFF1
  4151                           intcon3	equ	0xFF0
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _date_time *****************
  4157 ;; Defined at:
  4158 ;;		line 229 in file "main.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;		None
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  i               1   36[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      void 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        1 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:   10
  4179 ;; This function calls:
  4180 ;;		_I2C_Master_Read
  4181 ;;		_I2C_Master_Start
  4182 ;;		_I2C_Master_Stop
  4183 ;;		_I2C_Master_Write
  4184 ;;		_lcdInst
  4185 ;;		_printf
  4186 ;; This function is called by:
  4187 ;;		_main
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text13
  4192  0020DE                     __ptext13:
  4193                           	opt stack 0
  4194  0020DE                     _date_time:
  4195                           	opt stack 20
  4196                           
  4197                           ;main.c: 231: I2C_Master_Start();
  4198                           
  4199                           ;incstack = 0
  4200  0020DE  EC97  F018         	call	_I2C_Master_Start	;wreg free
  4201                           
  4202                           ;main.c: 232: I2C_Master_Write(0b11010000);
  4203  0020E2  0E00               	movlw	0
  4204  0020E4  0100               	movlb	0	; () banked
  4205  0020E6  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4206  0020E8  0ED0               	movlw	208
  4207  0020EA  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  4208  0020EC  EC89  F018         	call	_I2C_Master_Write	;wreg free
  4209                           
  4210                           ;main.c: 233: I2C_Master_Write(0x00);
  4211  0020F0  0E00               	movlw	0
  4212  0020F2  0100               	movlb	0	; () banked
  4213  0020F4  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4214  0020F6  0E00               	movlw	0
  4215  0020F8  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  4216  0020FA  EC89  F018         	call	_I2C_Master_Write	;wreg free
  4217                           
  4218                           ;main.c: 234: I2C_Master_Stop();
  4219  0020FE  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  4220                           
  4221                           ;main.c: 237: I2C_Master_Start();
  4222  002102  EC97  F018         	call	_I2C_Master_Start	;wreg free
  4223                           
  4224                           ;main.c: 238: I2C_Master_Write(0b11010001);
  4225  002106  0E00               	movlw	0
  4226  002108  0100               	movlb	0	; () banked
  4227  00210A  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4228  00210C  0ED1               	movlw	209
  4229  00210E  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  4230  002110  EC89  F018         	call	_I2C_Master_Write	;wreg free
  4231                           
  4232                           ;main.c: 239: for(unsigned char i=0;i<0x06;i++){
  4233  002114  0E00               	movlw	0
  4234  002116  0100               	movlb	0	; () banked
  4235  002118  6FEC               	movwf	date_time@i& (0+255),b
  4236  00211A                     l5412:
  4237                           
  4238                           ; BSR set to: 0
  4239  00211A  0E05               	movlw	5
  4240  00211C  0100               	movlb	0	; () banked
  4241  00211E  65EC               	cpfsgt	date_time@i& (0+255),b
  4242  002120  D001               	goto	l5416
  4243  002122  D010               	goto	l5422
  4244  002124                     l5416:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;main.c: 240: time[i] = I2C_Master_Read(1);
  4248  002124  0100               	movlb	0	; () banked
  4249  002126  51EC               	movf	date_time@i& (0+255),w,b
  4250  002128  0D01               	mullw	1
  4251  00212A  0E92               	movlw	low _time
  4252  00212C  24F3               	addwf	prodl,w,c
  4253  00212E  6ED9               	movwf	fsr2l,c
  4254  002130  0E00               	movlw	high _time
  4255  002132  20F4               	addwfc	prodh,w,c
  4256  002134  6EDA               	movwf	fsr2h,c
  4257  002136  0E01               	movlw	1
  4258  002138  ECCA  F017         	call	_I2C_Master_Read
  4259  00213C  6EDF               	movwf	indf2,c
  4260  00213E  0100               	movlb	0	; () banked
  4261  002140  2BEC               	incf	date_time@i& (0+255),f,b
  4262  002142  D7EB               	goto	l5412
  4263  002144                     l5422:
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;main.c: 241: }
  4267                           ;main.c: 242: time[6] = I2C_Master_Read(0);
  4268  002144  0E00               	movlw	0
  4269  002146  ECCA  F017         	call	_I2C_Master_Read
  4270  00214A  0100               	movlb	0	; () banked
  4271  00214C  6F98               	movwf	(_time+6)& (0+255),b
  4272                           
  4273                           ;main.c: 243: I2C_Master_Stop();
  4274  00214E  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  4275                           
  4276                           ;main.c: 246: lcdInst(0b10000000);
  4277  002152  0E80               	movlw	128
  4278  002154  EC75  F018         	call	_lcdInst
  4279                           
  4280                           ;main.c: 247: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  4281  002158  0EEF               	movlw	low STR_7
  4282  00215A  0100               	movlb	0	; () banked
  4283  00215C  6FE4               	movwf	printf@f& (0+255),b
  4284  00215E  0EFE               	movlw	high STR_7
  4285  002160  0100               	movlb	0	; () banked
  4286  002162  6FE5               	movwf	(printf@f+1)& (0+255),b
  4287  002164  C097  F0E6         	movff	_time+5,?_printf+2
  4288  002168  0100               	movlb	0	; () banked
  4289  00216A  6BE7               	clrf	(?_printf+3)& (0+255),b
  4290  00216C  C096  F0E8         	movff	_time+4,?_printf+4
  4291  002170  0100               	movlb	0	; () banked
  4292  002172  6BE9               	clrf	(?_printf+5)& (0+255),b
  4293  002174  C098  F0EA         	movff	_time+6,?_printf+6
  4294  002178  0100               	movlb	0	; () banked
  4295  00217A  6BEB               	clrf	(?_printf+7)& (0+255),b
  4296  00217C  EC09  F000         	call	_printf	;wreg free
  4297                           
  4298                           ;main.c: 248: lcdInst(0b11000000);
  4299  002180  0EC0               	movlw	192
  4300  002182  EC75  F018         	call	_lcdInst
  4301                           
  4302                           ;main.c: 249: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4303  002186  0E06               	movlw	low STR_8
  4304  002188  0100               	movlb	0	; () banked
  4305  00218A  6FE4               	movwf	printf@f& (0+255),b
  4306  00218C  0EFF               	movlw	high STR_8
  4307  00218E  0100               	movlb	0	; () banked
  4308  002190  6FE5               	movwf	(printf@f+1)& (0+255),b
  4309  002192  C094  F0E6         	movff	_time+2,?_printf+2
  4310  002196  0100               	movlb	0	; () banked
  4311  002198  6BE7               	clrf	(?_printf+3)& (0+255),b
  4312  00219A  C093  F0E8         	movff	_time+1,?_printf+4
  4313  00219E  0100               	movlb	0	; () banked
  4314  0021A0  6BE9               	clrf	(?_printf+5)& (0+255),b
  4315  0021A2  C092  F0EA         	movff	_time,?_printf+6
  4316  0021A6  0100               	movlb	0	; () banked
  4317  0021A8  6BEB               	clrf	(?_printf+7)& (0+255),b
  4318  0021AA  EC09  F000         	call	_printf	;wreg free
  4319  0021AE  0012               	return	
  4320  0021B0                     __end_of_date_time:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           intcon2	equ	0xFF1
  4330                           intcon3	equ	0xFF0
  4331                           postinc0	equ	0xFEE
  4332                           wreg	equ	0xFE8
  4333                           indf2	equ	0xFDF
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _I2C_Master_Read *****************
  4339 ;; Defined at:
  4340 ;;		line 110 in file "I2C.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  a               1    wreg     unsigned char 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  a               1   17[BANK0 ] unsigned char 
  4345 ;;  temp            1   18[BANK0 ] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      unsigned char 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;Total ram usage:        2 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    8
  4362 ;; This function calls:
  4363 ;;		_I2C_Master_Wait
  4364 ;; This function is called by:
  4365 ;;		_date_time
  4366 ;;		_read_colorsensor
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text14
  4371  002F94                     __ptext14:
  4372                           	opt stack 0
  4373  002F94                     _I2C_Master_Read:
  4374                           	opt stack 20
  4375                           
  4376                           ;incstack = 0
  4377                           ;I2C_Master_Read@a stored from wreg
  4378  002F94  0100               	movlb	0	; () banked
  4379  002F96  6FD9               	movwf	I2C_Master_Read@a& (0+255),b
  4380                           
  4381                           ;I2C.c: 112: unsigned char temp;
  4382                           ;I2C.c: 113: I2C_Master_Wait();
  4383  002F98  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  4384                           
  4385                           ;I2C.c: 114: RCEN = 1;
  4386  002F9C  86C5               	bsf	4037,3,c	;volatile
  4387                           
  4388                           ;I2C.c: 115: I2C_Master_Wait();
  4389  002F9E  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  4390                           
  4391                           ;I2C.c: 116: temp = SSPBUF;
  4392  002FA2  CFC9 F0DA          	movff	4041,I2C_Master_Read@temp	;volatile
  4393                           
  4394                           ;I2C.c: 117: I2C_Master_Wait();
  4395  002FA6  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  4396                           
  4397                           ;I2C.c: 118: ACKDT = (a)?0:1;
  4398  002FAA  0100               	movlb	0	; () banked
  4399  002FAC  51D9               	movf	I2C_Master_Read@a& (0+255),w,b
  4400  002FAE  0100               	movlb	0	; () banked
  4401  002FB0  A4D8               	btfss	status,2,c
  4402  002FB2  D002               	goto	u3030
  4403  002FB4  8AC5               	bsf	4037,5,c	;volatile
  4404  002FB6  D001               	goto	l3516
  4405  002FB8                     u3030:
  4406  002FB8  9AC5               	bcf	4037,5,c	;volatile
  4407  002FBA                     l3516:
  4408                           
  4409                           ;I2C.c: 119: ACKEN = 1;
  4410  002FBA  88C5               	bsf	4037,4,c	;volatile
  4411                           
  4412                           ;I2C.c: 120: return temp;
  4413  002FBC  0100               	movlb	0	; () banked
  4414  002FBE  51DA               	movf	I2C_Master_Read@temp& (0+255),w,b
  4415  002FC0  0012               	return	
  4416  002FC2                     __end_of_I2C_Master_Read:
  4417                           	opt stack 0
  4418                           tblptru	equ	0xFF8
  4419                           tblptrh	equ	0xFF7
  4420                           tblptrl	equ	0xFF6
  4421                           tablat	equ	0xFF5
  4422                           prodh	equ	0xFF4
  4423                           prodl	equ	0xFF3
  4424                           intcon	equ	0xFF2
  4425                           intcon2	equ	0xFF1
  4426                           intcon3	equ	0xFF0
  4427                           postinc0	equ	0xFEE
  4428                           wreg	equ	0xFE8
  4429                           indf2	equ	0xFDF
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _bottle_time *****************
  4435 ;; Defined at:
  4436 ;;		line 302 in file "main.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;		None
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;Total ram usage:        0 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:   10
  4457 ;; This function calls:
  4458 ;;		_lcdInst
  4459 ;;		_printf
  4460 ;; This function is called by:
  4461 ;;		_main
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text15
  4466  002F28                     __ptext15:
  4467                           	opt stack 0
  4468  002F28                     _bottle_time:
  4469                           	opt stack 20
  4470                           
  4471                           ;main.c: 303: lcdInst(0b10000000);
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;incstack = 0
  4475  002F28  0E80               	movlw	128
  4476  002F2A  EC75  F018         	call	_lcdInst
  4477                           
  4478                           ;main.c: 304: printf("Total Operation       ");
  4479  002F2E  0ED8               	movlw	low STR_16
  4480  002F30  0100               	movlb	0	; () banked
  4481  002F32  6FE4               	movwf	printf@f& (0+255),b
  4482  002F34  0EFE               	movlw	high STR_16
  4483  002F36  0100               	movlb	0	; () banked
  4484  002F38  6FE5               	movwf	(printf@f+1)& (0+255),b
  4485  002F3A  EC09  F000         	call	_printf	;wreg free
  4486                           
  4487                           ;main.c: 305: lcdInst(0b11000000);
  4488  002F3E  0EC0               	movlw	192
  4489  002F40  EC75  F018         	call	_lcdInst
  4490                           
  4491                           ;main.c: 306: printf("Time: %d s       ", operation_time);
  4492  002F44  0E1D               	movlw	low STR_17
  4493  002F46  0100               	movlb	0	; () banked
  4494  002F48  6FE4               	movwf	printf@f& (0+255),b
  4495  002F4A  0EFF               	movlw	high STR_17
  4496  002F4C  0100               	movlb	0	; () banked
  4497  002F4E  6FE5               	movwf	(printf@f+1)& (0+255),b
  4498  002F50  C0C3  F0E6         	movff	_operation_time,?_printf+2
  4499  002F54  C0C4  F0E7         	movff	_operation_time+1,?_printf+3
  4500  002F58  EC09  F000         	call	_printf	;wreg free
  4501  002F5C  0012               	return	
  4502  002F5E                     __end_of_bottle_time:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           intcon2	equ	0xFF1
  4512                           intcon3	equ	0xFF0
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           indf2	equ	0xFDF
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _bottle_count *****************
  4521 ;; Defined at:
  4522 ;;		line 272 in file "main.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:   10
  4543 ;; This function calls:
  4544 ;;		___awmod
  4545 ;;		_lcdInst
  4546 ;;		_printf
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text16
  4553  001866                     __ptext16:
  4554                           	opt stack 0
  4555  001866                     _bottle_count:
  4556                           	opt stack 20
  4557                           
  4558                           ;main.c: 273: switch(bottle_count_disp % 3){
  4559                           
  4560                           ;incstack = 0
  4561  001866  D065               	goto	l5456
  4562  001868                     l5432:
  4563                           
  4564                           ;main.c: 275: lcdInst(0b10000000);
  4565  001868  0E80               	movlw	128
  4566  00186A  EC75  F018         	call	_lcdInst
  4567                           
  4568                           ;main.c: 276: printf("Bottle Count    ");
  4569  00186E  0E51               	movlw	low STR_9
  4570  001870  0100               	movlb	0	; () banked
  4571  001872  6FE4               	movwf	printf@f& (0+255),b
  4572  001874  0EFF               	movlw	high STR_9
  4573  001876  0100               	movlb	0	; () banked
  4574  001878  6FE5               	movwf	(printf@f+1)& (0+255),b
  4575  00187A  EC09  F000         	call	_printf	;wreg free
  4576                           
  4577                           ;main.c: 277: lcdInst(0b11000000);
  4578  00187E  0EC0               	movlw	192
  4579  001880  EC75  F018         	call	_lcdInst
  4580                           
  4581                           ;main.c: 278: printf("Total: %d       ", bottle_count_array[0]);
  4582  001884  0E40               	movlw	low STR_10
  4583  001886  0100               	movlb	0	; () banked
  4584  001888  6FE4               	movwf	printf@f& (0+255),b
  4585  00188A  0EFF               	movlw	high STR_10
  4586  00188C  0100               	movlb	0	; () banked
  4587  00188E  6FE5               	movwf	(printf@f+1)& (0+255),b
  4588  001890  C080  F0E6         	movff	_bottle_count_array,?_printf+2
  4589  001894  C081  F0E7         	movff	_bottle_count_array+1,?_printf+3
  4590  001898  EC09  F000         	call	_printf	;wreg free
  4591                           
  4592                           ;main.c: 279: break;
  4593  00189C  0012               	return	
  4594  00189E                     l5438:
  4595                           
  4596                           ;main.c: 281: lcdInst(0b10000000);
  4597  00189E  0E80               	movlw	128
  4598  0018A0  EC75  F018         	call	_lcdInst
  4599                           
  4600                           ;main.c: 282: printf("YOP W/ CAP: %d  ", bottle_count_array[1]);
  4601  0018A4  0E62               	movlw	low STR_11
  4602  0018A6  0100               	movlb	0	; () banked
  4603  0018A8  6FE4               	movwf	printf@f& (0+255),b
  4604  0018AA  0EFF               	movlw	high STR_11
  4605  0018AC  0100               	movlb	0	; () banked
  4606  0018AE  6FE5               	movwf	(printf@f+1)& (0+255),b
  4607  0018B0  C082  F0E6         	movff	_bottle_count_array+2,?_printf+2
  4608  0018B4  C083  F0E7         	movff	_bottle_count_array+3,?_printf+3
  4609  0018B8  EC09  F000         	call	_printf	;wreg free
  4610                           
  4611                           ;main.c: 283: lcdInst(0b11000000);
  4612  0018BC  0EC0               	movlw	192
  4613  0018BE  EC75  F018         	call	_lcdInst
  4614                           
  4615                           ;main.c: 284: printf("YOP NO CAP: %d  ", bottle_count_array[2]);
  4616  0018C2  0E73               	movlw	low STR_12
  4617  0018C4  0100               	movlb	0	; () banked
  4618  0018C6  6FE4               	movwf	printf@f& (0+255),b
  4619  0018C8  0EFF               	movlw	high STR_12
  4620  0018CA  0100               	movlb	0	; () banked
  4621  0018CC  6FE5               	movwf	(printf@f+1)& (0+255),b
  4622  0018CE  C084  F0E6         	movff	_bottle_count_array+4,?_printf+2
  4623  0018D2  C085  F0E7         	movff	_bottle_count_array+5,?_printf+3
  4624  0018D6  EC09  F000         	call	_printf	;wreg free
  4625                           
  4626                           ;main.c: 285: break;
  4627  0018DA  0012               	return	
  4628  0018DC                     l5444:
  4629                           
  4630                           ;main.c: 287: lcdInst(0b10000000);
  4631  0018DC  0E80               	movlw	128
  4632  0018DE  EC75  F018         	call	_lcdInst
  4633                           
  4634                           ;main.c: 288: printf("ESKA W/ CAP: %d ", bottle_count_array[3]);
  4635  0018E2  0E84               	movlw	low STR_13
  4636  0018E4  0100               	movlb	0	; () banked
  4637  0018E6  6FE4               	movwf	printf@f& (0+255),b
  4638  0018E8  0EFF               	movlw	high STR_13
  4639  0018EA  0100               	movlb	0	; () banked
  4640  0018EC  6FE5               	movwf	(printf@f+1)& (0+255),b
  4641  0018EE  C086  F0E6         	movff	_bottle_count_array+6,?_printf+2
  4642  0018F2  C087  F0E7         	movff	_bottle_count_array+7,?_printf+3
  4643  0018F6  EC09  F000         	call	_printf	;wreg free
  4644                           
  4645                           ;main.c: 289: lcdInst(0b11000000);
  4646  0018FA  0EC0               	movlw	192
  4647  0018FC  EC75  F018         	call	_lcdInst
  4648                           
  4649                           ;main.c: 290: printf("ESKA NO CAP: %d ", bottle_count_array[4]);
  4650  001900  0E95               	movlw	low STR_14
  4651  001902  0100               	movlb	0	; () banked
  4652  001904  6FE4               	movwf	printf@f& (0+255),b
  4653  001906  0EFF               	movlw	high STR_14
  4654  001908  0100               	movlb	0	; () banked
  4655  00190A  6FE5               	movwf	(printf@f+1)& (0+255),b
  4656  00190C  C088  F0E6         	movff	_bottle_count_array+8,?_printf+2
  4657  001910  C089  F0E7         	movff	_bottle_count_array+9,?_printf+3
  4658  001914  EC09  F000         	call	_printf	;wreg free
  4659                           
  4660                           ;main.c: 291: break;
  4661  001918  0012               	return	
  4662  00191A                     l5450:
  4663                           
  4664                           ;main.c: 294: lcdInst(0b10000000);
  4665  00191A  0E80               	movlw	128
  4666  00191C  EC75  F018         	call	_lcdInst
  4667                           
  4668                           ;main.c: 295: printf("ERR: BAD BTLCNT");
  4669  001920  0EB6               	movlw	low STR_15
  4670  001922  0100               	movlb	0	; () banked
  4671  001924  6FE4               	movwf	printf@f& (0+255),b
  4672  001926  0EFF               	movlw	high STR_15
  4673  001928  0100               	movlb	0	; () banked
  4674  00192A  6FE5               	movwf	(printf@f+1)& (0+255),b
  4675  00192C  EC09  F000         	call	_printf	;wreg free
  4676  001930  D7F4               	goto	l5450
  4677  001932                     l5456:
  4678  001932  C0ED  F0D8         	movff	_bottle_count_disp,___awmod@dividend
  4679  001936  C0EE  F0D9         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4680  00193A  0E00               	movlw	0
  4681  00193C  0100               	movlb	0	; () banked
  4682  00193E  6FDB               	movwf	(___awmod@divisor+1)& (0+255),b
  4683  001940  0E03               	movlw	3
  4684  001942  6FDA               	movwf	___awmod@divisor& (0+255),b
  4685  001944  ECCD  F013         	call	___awmod	;wreg free
  4686                           
  4687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4688                           ; Switch size 1, requested type "space"
  4689                           ; Number of cases is 1, Range of values is 0 to 0
  4690                           ; switch strategies available:
  4691                           ; Name         Instructions Cycles
  4692                           ; simple_byte            4     3 (average)
  4693                           ;	Chosen strategy is simple_byte
  4694  001948  0100               	movlb	0	; () banked
  4695  00194A  51D9               	movf	(?___awmod+1)& (0+255),w,b
  4696  00194C  0A00               	xorlw	0	; case 0
  4697  00194E  A4D8               	btfss	status,2,c
  4698  001950  D7E4               	goto	l5450
  4699                           
  4700                           ; BSR set to: 0
  4701                           ; Switch size 1, requested type "space"
  4702                           ; Number of cases is 3, Range of values is 0 to 2
  4703                           ; switch strategies available:
  4704                           ; Name         Instructions Cycles
  4705                           ; simple_byte           10     6 (average)
  4706                           ;	Chosen strategy is simple_byte
  4707  001952  0100               	movlb	0	; () banked
  4708  001954  51D8               	movf	?___awmod& (0+255),w,b
  4709  001956  0A00               	xorlw	0	; case 0
  4710  001958  B4D8               	btfsc	status,2,c
  4711  00195A  D786               	goto	l5432
  4712  00195C  0A01               	xorlw	1	; case 1
  4713  00195E  B4D8               	btfsc	status,2,c
  4714  001960  D79E               	goto	l5438
  4715  001962  0A03               	xorlw	3	; case 2
  4716  001964  B4D8               	btfsc	status,2,c
  4717  001966  D7BA               	goto	l5444
  4718  001968  D7D8               	goto	l5450
  4719  00196A                     __end_of_bottle_count:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           intcon2	equ	0xFF1
  4729                           intcon3	equ	0xFF0
  4730                           postinc0	equ	0xFEE
  4731                           wreg	equ	0xFE8
  4732                           indf2	equ	0xFDF
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _printf *****************
  4738 ;; Defined at:
  4739 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  4742 ;;		 -> STR_20(15), STR_19(16), STR_18(3), STR_17(18), 
  4743 ;;		 -> STR_16(23), STR_15(16), STR_14(17), STR_13(17), 
  4744 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  4745 ;;		 -> STR_8(23), STR_7(23), STR_6(9), STR_5(8), 
  4746 ;;		 -> STR_4(13), STR_3(24), STR_2(24), STR_1(8), 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  idx             1    4[BANK1 ] unsigned char 
  4749 ;;  tmpval          4    0        struct .
  4750 ;;  cp              3    0        PTR const unsigned char 
  4751 ;;  width           2   11[BANK1 ] int 
  4752 ;;  val             2    8[BANK1 ] unsigned int 
  4753 ;;  ap              2    5[BANK1 ] PTR void [1]
  4754 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4755 ;;  len             2    0        unsigned int 
  4756 ;;  c               1   13[BANK1 ] char 
  4757 ;;  flag            1   10[BANK1 ] unsigned char 
  4758 ;;  prec            1    7[BANK1 ] char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  2   28[BANK0 ] int 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       8      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:       22 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    9
  4775 ;; This function calls:
  4776 ;;		___lwdiv
  4777 ;;		___lwmod
  4778 ;;		___wmul
  4779 ;;		_isdigit
  4780 ;;		_putch
  4781 ;; This function is called by:
  4782 ;;		_standby
  4783 ;;		_date_time
  4784 ;;		_bottle_count
  4785 ;;		_bottle_time
  4786 ;;		_operation
  4787 ;;		_operationend
  4788 ;;		_emergencystop
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text17
  4793  000012                     __ptext17:
  4794                           	opt stack 0
  4795  000012                     _printf:
  4796                           	opt stack 20
  4797                           
  4798                           ;doprnt.c: 466: va_list ap;
  4799                           ;doprnt.c: 499: signed char c;
  4800                           ;doprnt.c: 501: int width;
  4801                           ;doprnt.c: 506: signed char prec;
  4802                           ;doprnt.c: 508: unsigned char flag;
  4803                           ;doprnt.c: 523: union {
  4804                           ;doprnt.c: 524: unsigned long vd;
  4805                           ;doprnt.c: 525: double integ;
  4806                           ;doprnt.c: 526: } tmpval;
  4807                           ;doprnt.c: 528: unsigned int val;
  4808                           ;doprnt.c: 529: unsigned len;
  4809                           ;doprnt.c: 530: const char * cp;
  4810                           ;doprnt.c: 533: *ap = __va_start();
  4811                           
  4812                           ;incstack = 0
  4813  000012  0EE6               	movlw	low (?_printf+2)
  4814  000014  0101               	movlb	1	; () banked
  4815  000016  6F05               	movwf	printf@ap& (0+255),b
  4816  000018  0E00               	movlw	high (?_printf+2)
  4817  00001A  0101               	movlb	1	; () banked
  4818  00001C  6F06               	movwf	(printf@ap+1)& (0+255),b
  4819                           
  4820                           ;doprnt.c: 536: while(c = *f++) {
  4821  00001E  D1D5               	goto	l5194
  4822  000020                     l5064:
  4823                           
  4824                           ; BSR set to: 1
  4825                           ;doprnt.c: 538: if(c != '%')
  4826  000020  0E25               	movlw	37
  4827  000022  0101               	movlb	1	; () banked
  4828  000024  190D               	xorwf	printf@c& (0+255),w,b
  4829  000026  B4D8               	btfsc	status,2,c
  4830  000028  D005               	goto	l5068
  4831                           
  4832                           ; BSR set to: 1
  4833                           ;doprnt.c: 540: {
  4834                           ;doprnt.c: 541: (putch(c) );
  4835  00002A  0101               	movlb	1	; () banked
  4836  00002C  510D               	movf	printf@c& (0+255),w,b
  4837  00002E  EC6D  F018         	call	_putch
  4838                           
  4839                           ;doprnt.c: 542: continue;
  4840  000032  D1CB               	goto	l5194
  4841  000034                     l5068:
  4842                           
  4843                           ;doprnt.c: 543: }
  4844                           ;doprnt.c: 546: width = 0;
  4845  000034  0E00               	movlw	0
  4846  000036  0101               	movlb	1	; () banked
  4847  000038  6F0C               	movwf	(printf@width+1)& (0+255),b
  4848  00003A  0E00               	movlw	0
  4849  00003C  6F0B               	movwf	printf@width& (0+255),b
  4850                           
  4851                           ;doprnt.c: 548: flag = 0;
  4852  00003E  0E00               	movlw	0
  4853  000040  0101               	movlb	1	; () banked
  4854  000042  6F0A               	movwf	printf@flag& (0+255),b
  4855                           
  4856                           ; BSR set to: 1
  4857                           ;doprnt.c: 551: switch(*f) {
  4858                           
  4859                           ;doprnt.c: 550: for(;;) {
  4860  000044  D005               	goto	l5074
  4861  000046                     l5070:
  4862                           
  4863                           ;doprnt.c: 580: flag |= 0x04;
  4864  000046  0101               	movlb	1	; () banked
  4865  000048  850A               	bsf	printf@flag& (0+255),2,b
  4866                           
  4867                           ;doprnt.c: 581: f++;
  4868  00004A  0100               	movlb	0	; () banked
  4869  00004C  4BE4               	infsnz	printf@f& (0+255),f,b
  4870  00004E  2BE5               	incf	(printf@f+1)& (0+255),f,b
  4871  000050                     l5074:
  4872  000050  C0E4  FFF6         	movff	printf@f,tblptrl
  4873  000054  C0E5  FFF7         	movff	printf@f+1,tblptrh
  4874  000058                     	if	0	;tblptru may be non-zero
  4875  000058                     	endif
  4876  000058                     	if	0	;tblptru may be non-zero
  4877  000058                     	endif
  4878  000058  0008               	tblrd		*
  4879  00005A  50F5               	movf	tablat,w,c
  4880                           
  4881                           ; Switch size 1, requested type "space"
  4882                           ; Number of cases is 1, Range of values is 48 to 48
  4883                           ; switch strategies available:
  4884                           ; Name         Instructions Cycles
  4885                           ; simple_byte            4     3 (average)
  4886                           ;	Chosen strategy is simple_byte
  4887  00005C  0A30               	xorlw	48	; case 48
  4888  00005E  B4D8               	btfsc	status,2,c
  4889  000060  D7F2               	goto	l5070
  4890                           
  4891                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4892                           
  4893                           ;doprnt.c: 586: }
  4894                           
  4895                           ;doprnt.c: 585: break;
  4896  000062  C0E4  FFF6         	movff	printf@f,tblptrl
  4897  000066  C0E5  FFF7         	movff	printf@f+1,tblptrh
  4898  00006A                     	if	0	;tblptru may be non-zero
  4899  00006A                     	endif
  4900  00006A                     	if	0	;tblptru may be non-zero
  4901  00006A                     	endif
  4902  00006A  0008               	tblrd		*
  4903  00006C  50F5               	movf	tablat,w,c
  4904  00006E  ECE1  F017         	call	_isdigit
  4905  000072  A0D8               	btfss	status,0,c
  4906  000074  D048               	goto	l5094
  4907                           
  4908                           ;doprnt.c: 598: width = 0;
  4909  000076  0E00               	movlw	0
  4910  000078  0101               	movlb	1	; () banked
  4911  00007A  6F0C               	movwf	(printf@width+1)& (0+255),b
  4912  00007C  0E00               	movlw	0
  4913  00007E  6F0B               	movwf	printf@width& (0+255),b
  4914  000080                     l5080:
  4915                           
  4916                           ;doprnt.c: 600: width *= 10;
  4917  000080  C10B  F0D8         	movff	printf@width,___wmul@multiplier
  4918  000084  C10C  F0D9         	movff	printf@width+1,___wmul@multiplier+1
  4919  000088  0E00               	movlw	0
  4920  00008A  0100               	movlb	0	; () banked
  4921  00008C  6FDB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4922  00008E  0E0A               	movlw	10
  4923  000090  6FDA               	movwf	___wmul@multiplicand& (0+255),b
  4924  000092  ECAF  F017         	call	___wmul	;wreg free
  4925  000096  C0D8  F10B         	movff	?___wmul,printf@width
  4926  00009A  C0D9  F10C         	movff	?___wmul+1,printf@width+1
  4927                           
  4928                           ;doprnt.c: 601: width += *f++ - '0';
  4929  00009E  0ED0               	movlw	208
  4930  0000A0  0101               	movlb	1	; () banked
  4931  0000A2  6F00               	movwf	??_printf& (0+255),b
  4932  0000A4  0EFF               	movlw	255
  4933  0000A6  0101               	movlb	1	; () banked
  4934  0000A8  6F01               	movwf	(??_printf+1)& (0+255),b
  4935  0000AA  C0E4  FFF6         	movff	printf@f,tblptrl
  4936  0000AE  C0E5  FFF7         	movff	printf@f+1,tblptrh
  4937  0000B2                     	if	0	;tblptru may be non-zero
  4938  0000B2                     	endif
  4939  0000B2                     	if	0	;tblptru may be non-zero
  4940  0000B2                     	endif
  4941  0000B2  0008               	tblrd		*
  4942  0000B4  50F5               	movf	tablat,w,c
  4943  0000B6  0101               	movlb	1	; () banked
  4944  0000B8  6F02               	movwf	(??_printf+2)& (0+255),b
  4945  0000BA  6B03               	clrf	(??_printf+3)& (0+255),b
  4946  0000BC  0101               	movlb	1	; () banked
  4947  0000BE  5100               	movf	??_printf& (0+255),w,b
  4948  0000C0  0101               	movlb	1	; () banked
  4949  0000C2  2702               	addwf	(??_printf+2)& (0+255),f,b
  4950  0000C4  0101               	movlb	1	; () banked
  4951  0000C6  5101               	movf	(??_printf+1)& (0+255),w,b
  4952  0000C8  0101               	movlb	1	; () banked
  4953  0000CA  2303               	addwfc	(??_printf+3)& (0+255),f,b
  4954  0000CC  0101               	movlb	1	; () banked
  4955  0000CE  5102               	movf	(??_printf+2)& (0+255),w,b
  4956  0000D0  0101               	movlb	1	; () banked
  4957  0000D2  270B               	addwf	printf@width& (0+255),f,b
  4958  0000D4  0101               	movlb	1	; () banked
  4959  0000D6  5103               	movf	(??_printf+3)& (0+255),w,b
  4960  0000D8  0101               	movlb	1	; () banked
  4961  0000DA  230C               	addwfc	(printf@width+1)& (0+255),f,b
  4962                           
  4963                           ; BSR set to: 1
  4964  0000DC  0100               	movlb	0	; () banked
  4965  0000DE  4BE4               	infsnz	printf@f& (0+255),f,b
  4966  0000E0  2BE5               	incf	(printf@f+1)& (0+255),f,b
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4970  0000E2  C0E4  FFF6         	movff	printf@f,tblptrl
  4971  0000E6  C0E5  FFF7         	movff	printf@f+1,tblptrh
  4972  0000EA                     	if	0	;tblptru may be non-zero
  4973  0000EA                     	endif
  4974  0000EA                     	if	0	;tblptru may be non-zero
  4975  0000EA                     	endif
  4976  0000EA  0008               	tblrd		*
  4977  0000EC  50F5               	movf	tablat,w,c
  4978  0000EE  ECE1  F017         	call	_isdigit
  4979  0000F2  A0D8               	btfss	status,0,c
  4980  0000F4  D008               	goto	l5094
  4981  0000F6  D7C4               	goto	l5080
  4982  0000F8                     l5088:
  4983                           
  4984                           ;doprnt.c: 721: flag |= 0x80;
  4985  0000F8  0101               	movlb	1	; () banked
  4986  0000FA  8F0A               	bsf	printf@flag& (0+255),7,b
  4987                           
  4988                           ;doprnt.c: 723: break;
  4989  0000FC  D020               	goto	l5096
  4990  0000FE                     l5090:
  4991                           
  4992                           ; BSR set to: 1
  4993                           ;doprnt.c: 818: flag |= 0xC0;
  4994  0000FE  0EC0               	movlw	192
  4995  000100  0101               	movlb	1	; () banked
  4996  000102  130A               	iorwf	printf@flag& (0+255),f,b
  4997                           
  4998                           ; BSR set to: 1
  4999                           ;doprnt.c: 822: }
  5000                           
  5001                           ;doprnt.c: 819: break;
  5002  000104  D01C               	goto	l5096
  5003  000106                     l5094:
  5004  000106  C0E4  FFF6         	movff	printf@f,tblptrl
  5005  00010A  C0E5  FFF7         	movff	printf@f+1,tblptrh
  5006  00010E  0100               	movlb	0	; () banked
  5007  000110  4BE4               	infsnz	printf@f& (0+255),f,b
  5008  000112  2BE5               	incf	(printf@f+1)& (0+255),f,b
  5009  000114                     	if	0	;tblptru may be non-zero
  5010  000114                     	endif
  5011  000114                     	if	0	;tblptru may be non-zero
  5012  000114                     	endif
  5013  000114  0008               	tblrd		*
  5014  000116  CFF5 F10D          	movff	tablat,printf@c
  5015  00011A  0101               	movlb	1	; () banked
  5016  00011C  510D               	movf	printf@c& (0+255),w,b
  5017                           
  5018                           ; Switch size 1, requested type "space"
  5019                           ; Number of cases is 5, Range of values is 0 to 120
  5020                           ; switch strategies available:
  5021                           ; Name         Instructions Cycles
  5022                           ; simple_byte           16     9 (average)
  5023                           ;	Chosen strategy is simple_byte
  5024  00011E  0A00               	xorlw	0	; case 0
  5025  000120  B4D8               	btfsc	status,2,c
  5026  000122  0012               	return	
  5027  000124  0A64               	xorlw	100	; case 100
  5028  000126  B4D8               	btfsc	status,2,c
  5029  000128  D00A               	goto	l5096
  5030  00012A  0A0D               	xorlw	13	; case 105
  5031  00012C  B4D8               	btfsc	status,2,c
  5032  00012E  D007               	goto	l5096
  5033  000130  0A1C               	xorlw	28	; case 117
  5034  000132  B4D8               	btfsc	status,2,c
  5035  000134  D7E4               	goto	l5090
  5036  000136  0A0D               	xorlw	13	; case 120
  5037  000138  B4D8               	btfsc	status,2,c
  5038  00013A  D7DE               	goto	l5088
  5039  00013C  D146               	goto	l5194
  5040  00013E                     l5096:
  5041                           
  5042                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5043  00013E  C10A  F100         	movff	printf@flag,??_printf
  5044  000142  0EC0               	movlw	192
  5045  000144  0101               	movlb	1	; () banked
  5046  000146  1700               	andwf	??_printf& (0+255),f,b
  5047  000148  A4D8               	btfss	status,2,c
  5048  00014A  D019               	goto	l5108
  5049                           
  5050                           ; BSR set to: 1
  5051                           ;doprnt.c: 1253: {
  5052                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5053  00014C  C105  FFD9         	movff	printf@ap,fsr2l
  5054  000150  C106  FFDA         	movff	printf@ap+1,fsr2h
  5055  000154  CFDE F108          	movff	postinc2,printf@val
  5056  000158  CFDD F109          	movff	postdec2,printf@val+1
  5057                           
  5058                           ; BSR set to: 1
  5059  00015C  0E02               	movlw	2
  5060  00015E  0101               	movlb	1	; () banked
  5061  000160  2705               	addwf	printf@ap& (0+255),f,b
  5062  000162  0E00               	movlw	0
  5063  000164  2306               	addwfc	(printf@ap+1)& (0+255),f,b
  5064                           
  5065                           ; BSR set to: 1
  5066                           ;doprnt.c: 1261: if((int)val < 0) {
  5067  000166  0101               	movlb	1	; () banked
  5068  000168  AF09               	btfss	(printf@val+1)& (0+255),7,b
  5069  00016A  D053               	goto	l5142
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;doprnt.c: 1262: flag |= 0x03;
  5073  00016C  0E03               	movlw	3
  5074  00016E  0101               	movlb	1	; () banked
  5075  000170  130A               	iorwf	printf@flag& (0+255),f,b
  5076                           
  5077                           ; BSR set to: 1
  5078                           ;doprnt.c: 1263: val = -val;
  5079  000172  0101               	movlb	1	; () banked
  5080  000174  6D08               	negf	printf@val& (0+255),b
  5081  000176  1F09               	comf	(printf@val+1)& (0+255),f,b
  5082  000178  B0D8               	btfsc	status,0,c
  5083  00017A  2B09               	incf	(printf@val+1)& (0+255),f,b
  5084                           
  5085                           ; BSR set to: 1
  5086                           ;doprnt.c: 1264: }
  5087                           ;doprnt.c: 1266: }
  5088  00017C  D04A               	goto	l5142
  5089  00017E                     l5108:
  5090                           
  5091                           ; BSR set to: 1
  5092                           ;doprnt.c: 1268: else
  5093                           ;doprnt.c: 1273: {
  5094                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5095  00017E  C105  FFD9         	movff	printf@ap,fsr2l
  5096  000182  C106  FFDA         	movff	printf@ap+1,fsr2h
  5097  000186  CFDE F108          	movff	postinc2,printf@val
  5098  00018A  CFDD F109          	movff	postdec2,printf@val+1
  5099                           
  5100                           ; BSR set to: 1
  5101  00018E  0E02               	movlw	2
  5102  000190  0101               	movlb	1	; () banked
  5103  000192  2705               	addwf	printf@ap& (0+255),f,b
  5104  000194  0E00               	movlw	0
  5105  000196  2306               	addwfc	(printf@ap+1)& (0+255),f,b
  5106                           
  5107                           ; BSR set to: 1
  5108                           ;doprnt.c: 1287: }
  5109                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5110  000198  D03C               	goto	l5142
  5111  00019A                     l5112:
  5112                           
  5113                           ; BSR set to: 1
  5114                           ;doprnt.c: 1302: case 0xC0:
  5115                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5116  00019A  0E01               	movlw	1
  5117  00019C  0101               	movlb	1	; () banked
  5118  00019E  6F0D               	movwf	printf@c& (0+255),b
  5119  0001A0                     l5114:
  5120                           
  5121                           ; BSR set to: 1
  5122  0001A0  0E05               	movlw	5
  5123  0001A2  0101               	movlb	1	; () banked
  5124  0001A4  190D               	xorwf	printf@c& (0+255),w,b
  5125  0001A6  B4D8               	btfsc	status,2,c
  5126  0001A8  D040               	goto	l5144
  5127                           
  5128                           ; BSR set to: 1
  5129                           ;doprnt.c: 1306: if(val < dpowers[c])
  5130                           
  5131                           ; BSR set to: 1
  5132                           
  5133                           ; BSR set to: 1
  5134  0001AA  0101               	movlb	1	; () banked
  5135  0001AC  510D               	movf	printf@c& (0+255),w,b
  5136  0001AE  0D02               	mullw	2
  5137  0001B0  0E56               	movlw	low _dpowers
  5138  0001B2  24F3               	addwf	prodl,w,c
  5139  0001B4  6EF6               	movwf	tblptrl,c
  5140  0001B6  0EFE               	movlw	high _dpowers
  5141  0001B8  20F4               	addwfc	prodh,w,c
  5142  0001BA  6EF7               	movwf	tblptrh,c
  5143  0001BC                     	if	0	;There are less than 3 active tblptr bytes
  5144  0001BC                     	endif
  5145  0001BC  0009               	tblrd		*+
  5146  0001BE  50F5               	movf	tablat,w,c
  5147  0001C0  0101               	movlb	1	; () banked
  5148  0001C2  5D08               	subwf	printf@val& (0+255),w,b
  5149  0001C4  0009               	tblrd		*+
  5150  0001C6  50F5               	movf	tablat,w,c
  5151  0001C8  0101               	movlb	1	; () banked
  5152  0001CA  5909               	subwfb	(printf@val+1)& (0+255),w,b
  5153  0001CC  A0D8               	btfss	status,0,c
  5154  0001CE  D02D               	goto	l5144
  5155                           
  5156                           ; BSR set to: 1
  5157                           
  5158                           ; BSR set to: 1
  5159                           
  5160                           ; BSR set to: 1
  5161                           ;doprnt.c: 1307: break;
  5162  0001D0  0101               	movlb	1	; () banked
  5163  0001D2  2B0D               	incf	printf@c& (0+255),f,b
  5164  0001D4  D7E5               	goto	l5114
  5165  0001D6                     l5126:
  5166                           
  5167                           ; BSR set to: 1
  5168                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5169  0001D6  0E01               	movlw	1
  5170  0001D8  0101               	movlb	1	; () banked
  5171  0001DA  6F0D               	movwf	printf@c& (0+255),b
  5172  0001DC                     l5128:
  5173                           
  5174                           ; BSR set to: 1
  5175  0001DC  0E04               	movlw	4
  5176  0001DE  0101               	movlb	1	; () banked
  5177  0001E0  190D               	xorwf	printf@c& (0+255),w,b
  5178  0001E2  B4D8               	btfsc	status,2,c
  5179  0001E4  D022               	goto	l5144
  5180                           
  5181                           ; BSR set to: 1
  5182                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5183                           
  5184                           ; BSR set to: 1
  5185                           
  5186                           ; BSR set to: 1
  5187  0001E6  0101               	movlb	1	; () banked
  5188  0001E8  510D               	movf	printf@c& (0+255),w,b
  5189  0001EA  0D02               	mullw	2
  5190  0001EC  0E60               	movlw	low _hexpowers
  5191  0001EE  24F3               	addwf	prodl,w,c
  5192  0001F0  6EF6               	movwf	tblptrl,c
  5193  0001F2  0EFE               	movlw	high _hexpowers
  5194  0001F4  20F4               	addwfc	prodh,w,c
  5195  0001F6  6EF7               	movwf	tblptrh,c
  5196  0001F8                     	if	0	;There are less than 3 active tblptr bytes
  5197  0001F8                     	endif
  5198  0001F8  0009               	tblrd		*+
  5199  0001FA  50F5               	movf	tablat,w,c
  5200  0001FC  0101               	movlb	1	; () banked
  5201  0001FE  5D08               	subwf	printf@val& (0+255),w,b
  5202  000200  0009               	tblrd		*+
  5203  000202  50F5               	movf	tablat,w,c
  5204  000204  0101               	movlb	1	; () banked
  5205  000206  5909               	subwfb	(printf@val+1)& (0+255),w,b
  5206  000208  A0D8               	btfss	status,0,c
  5207  00020A  D00F               	goto	l5144
  5208                           
  5209                           ; BSR set to: 1
  5210                           
  5211                           ; BSR set to: 1
  5212                           
  5213                           ; BSR set to: 1
  5214                           ;doprnt.c: 1318: break;
  5215  00020C  0101               	movlb	1	; () banked
  5216  00020E  2B0D               	incf	printf@c& (0+255),f,b
  5217  000210  D7E5               	goto	l5128
  5218  000212                     l5142:
  5219                           
  5220                           ; BSR set to: 1
  5221  000212  0101               	movlb	1	; () banked
  5222  000214  510A               	movf	printf@flag& (0+255),w,b
  5223  000216  0BC0               	andlw	192
  5224                           
  5225                           ; Switch size 1, requested type "space"
  5226                           ; Number of cases is 3, Range of values is 0 to 192
  5227                           ; switch strategies available:
  5228                           ; Name         Instructions Cycles
  5229                           ; simple_byte           10     6 (average)
  5230                           ;	Chosen strategy is simple_byte
  5231  000218  0A00               	xorlw	0	; case 0
  5232  00021A  B4D8               	btfsc	status,2,c
  5233  00021C  D7BE               	goto	l5112
  5234  00021E  0A80               	xorlw	128	; case 128
  5235  000220  B4D8               	btfsc	status,2,c
  5236  000222  D7D9               	goto	l5126
  5237  000224  0A40               	xorlw	64	; case 192
  5238  000226  B4D8               	btfsc	status,2,c
  5239  000228  D7B8               	goto	l5112
  5240  00022A                     l5144:
  5241                           
  5242                           ; BSR set to: 1
  5243                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5244  00022A  0101               	movlb	1	; () banked
  5245  00022C  510B               	movf	printf@width& (0+255),w,b
  5246  00022E  0101               	movlb	1	; () banked
  5247  000230  110C               	iorwf	(printf@width+1)& (0+255),w,b
  5248  000232  B4D8               	btfsc	status,2,c
  5249  000234  D00B               	goto	l5150
  5250                           
  5251                           ; BSR set to: 1
  5252  000236  C10A  F100         	movff	printf@flag,??_printf
  5253  00023A  0E03               	movlw	3
  5254  00023C  0101               	movlb	1	; () banked
  5255  00023E  1700               	andwf	??_printf& (0+255),f,b
  5256  000240  B4D8               	btfsc	status,2,c
  5257  000242  D004               	goto	l5150
  5258                           
  5259                           ; BSR set to: 1
  5260                           ;doprnt.c: 1346: width--;
  5261  000244  0101               	movlb	1	; () banked
  5262  000246  070B               	decf	printf@width& (0+255),f,b
  5263  000248  A0D8               	btfss	status,0,c
  5264  00024A  070C               	decf	(printf@width+1)& (0+255),f,b
  5265  00024C                     l5150:
  5266                           
  5267                           ; BSR set to: 1
  5268                           ;doprnt.c: 1381: if(width > c)
  5269  00024C  0E80               	movlw	128
  5270  00024E  0101               	movlb	1	; () banked
  5271  000250  BF0D               	btfsc	printf@c& (0+255),7,b
  5272  000252  0E7F               	movlw	127
  5273  000254  0101               	movlb	1	; () banked
  5274  000256  6F00               	movwf	??_printf& (0+255),b
  5275  000258  0101               	movlb	1	; () banked
  5276  00025A  510B               	movf	printf@width& (0+255),w,b
  5277  00025C  0101               	movlb	1	; () banked
  5278  00025E  5D0D               	subwf	printf@c& (0+255),w,b
  5279  000260  0101               	movlb	1	; () banked
  5280  000262  510C               	movf	(printf@width+1)& (0+255),w,b
  5281  000264  0A80               	xorlw	128
  5282  000266  0101               	movlb	1	; () banked
  5283  000268  5900               	subwfb	??_printf& (0+255),w,b
  5284  00026A  B0D8               	btfsc	status,0,c
  5285  00026C  D00B               	goto	l5154
  5286                           
  5287                           ; BSR set to: 1
  5288                           ;doprnt.c: 1382: width -= c;
  5289  00026E  0101               	movlb	1	; () banked
  5290  000270  510D               	movf	printf@c& (0+255),w,b
  5291  000272  0101               	movlb	1	; () banked
  5292  000274  5F0B               	subwf	printf@width& (0+255),f,b
  5293  000276  0E00               	movlw	0
  5294  000278  0101               	movlb	1	; () banked
  5295  00027A  BF0D               	btfsc	printf@c& (0+255),7,b
  5296  00027C  0EFF               	movlw	255
  5297  00027E  0101               	movlb	1	; () banked
  5298  000280  5B0C               	subwfb	(printf@width+1)& (0+255),f,b
  5299  000282  D005               	goto	l5156
  5300  000284                     l5154:
  5301                           
  5302                           ; BSR set to: 1
  5303                           ;doprnt.c: 1383: else
  5304                           ;doprnt.c: 1384: width = 0;
  5305  000284  0E00               	movlw	0
  5306  000286  0101               	movlb	1	; () banked
  5307  000288  6F0C               	movwf	(printf@width+1)& (0+255),b
  5308  00028A  0E00               	movlw	0
  5309  00028C  6F0B               	movwf	printf@width& (0+255),b
  5310  00028E                     l5156:
  5311                           
  5312                           ; BSR set to: 1
  5313                           ;doprnt.c: 1387: if(flag & 0x04) {
  5314  00028E  0101               	movlb	1	; () banked
  5315  000290  A50A               	btfss	printf@flag& (0+255),2,b
  5316  000292  D018               	goto	l5168
  5317                           
  5318                           ; BSR set to: 1
  5319                           ;doprnt.c: 1392: if(flag & 0x03)
  5320  000294  C10A  F100         	movff	printf@flag,??_printf
  5321  000298  0E03               	movlw	3
  5322  00029A  0101               	movlb	1	; () banked
  5323  00029C  1700               	andwf	??_printf& (0+255),f,b
  5324  00029E  B4D8               	btfsc	status,2,c
  5325  0002A0  D003               	goto	l5162
  5326                           
  5327                           ; BSR set to: 1
  5328                           ;doprnt.c: 1393: (putch('-') );
  5329  0002A2  0E2D               	movlw	45
  5330  0002A4  EC6D  F018         	call	_putch
  5331  0002A8                     l5162:
  5332                           
  5333                           ;doprnt.c: 1415: if(width)
  5334  0002A8  0101               	movlb	1	; () banked
  5335  0002AA  510B               	movf	printf@width& (0+255),w,b
  5336  0002AC  0101               	movlb	1	; () banked
  5337  0002AE  110C               	iorwf	(printf@width+1)& (0+255),w,b
  5338  0002B0  B4D8               	btfsc	status,2,c
  5339  0002B2  D025               	goto	l5178
  5340                           
  5341                           ; BSR set to: 1
  5342                           ;doprnt.c: 1417: (putch('0') );
  5343                           
  5344                           ; BSR set to: 1
  5345                           
  5346                           ;doprnt.c: 1416: do
  5347  0002B4  0E30               	movlw	48
  5348  0002B6  EC6D  F018         	call	_putch
  5349                           
  5350                           ;doprnt.c: 1418: while(--width);
  5351  0002BA  0101               	movlb	1	; () banked
  5352  0002BC  070B               	decf	printf@width& (0+255),f,b
  5353  0002BE  A0D8               	btfss	status,0,c
  5354  0002C0  070C               	decf	(printf@width+1)& (0+255),f,b
  5355  0002C2  D7F2               	goto	l5162
  5356  0002C4                     l5168:
  5357                           
  5358                           ; BSR set to: 1
  5359                           ;doprnt.c: 1422: {
  5360                           ;doprnt.c: 1424: if(width
  5361                           ;doprnt.c: 1428: )
  5362  0002C4  0101               	movlb	1	; () banked
  5363  0002C6  510B               	movf	printf@width& (0+255),w,b
  5364  0002C8  0101               	movlb	1	; () banked
  5365  0002CA  110C               	iorwf	(printf@width+1)& (0+255),w,b
  5366  0002CC  B4D8               	btfsc	status,2,c
  5367  0002CE  D00D               	goto	l5174
  5368  0002D0                     l5170:
  5369                           
  5370                           ; BSR set to: 1
  5371                           ;doprnt.c: 1430: (putch(' ') );
  5372  0002D0  0E20               	movlw	32
  5373  0002D2  EC6D  F018         	call	_putch
  5374                           
  5375                           ;doprnt.c: 1431: while(--width);
  5376  0002D6  0101               	movlb	1	; () banked
  5377  0002D8  070B               	decf	printf@width& (0+255),f,b
  5378  0002DA  A0D8               	btfss	status,0,c
  5379  0002DC  070C               	decf	(printf@width+1)& (0+255),f,b
  5380  0002DE  0101               	movlb	1	; () banked
  5381  0002E0  510B               	movf	printf@width& (0+255),w,b
  5382  0002E2  0101               	movlb	1	; () banked
  5383  0002E4  110C               	iorwf	(printf@width+1)& (0+255),w,b
  5384  0002E6  A4D8               	btfss	status,2,c
  5385  0002E8  D7F3               	goto	l5170
  5386  0002EA                     l5174:
  5387                           
  5388                           ; BSR set to: 1
  5389                           ;doprnt.c: 1438: if(flag & 0x03)
  5390  0002EA  C10A  F100         	movff	printf@flag,??_printf
  5391  0002EE  0E03               	movlw	3
  5392  0002F0  0101               	movlb	1	; () banked
  5393  0002F2  1700               	andwf	??_printf& (0+255),f,b
  5394  0002F4  B4D8               	btfsc	status,2,c
  5395  0002F6  D003               	goto	l5178
  5396                           
  5397                           ; BSR set to: 1
  5398                           ;doprnt.c: 1439: (putch('-') );
  5399  0002F8  0E2D               	movlw	45
  5400  0002FA  EC6D  F018         	call	_putch
  5401  0002FE                     l5178:
  5402                           
  5403                           ;doprnt.c: 1469: }
  5404                           ;doprnt.c: 1472: prec = c;
  5405  0002FE  C10D  F107         	movff	printf@c,printf@prec
  5406                           
  5407                           ;doprnt.c: 1474: while(prec--) {
  5408  000302  D05D               	goto	l5192
  5409  000304                     l5180:
  5410                           
  5411                           ;doprnt.c: 1486: case 0xC0:
  5412                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5413  000304  0101               	movlb	1	; () banked
  5414  000306  5107               	movf	printf@prec& (0+255),w,b
  5415  000308  0D02               	mullw	2
  5416  00030A  0E56               	movlw	low _dpowers
  5417  00030C  24F3               	addwf	prodl,w,c
  5418  00030E  6EF6               	movwf	tblptrl,c
  5419  000310  0EFE               	movlw	high _dpowers
  5420  000312  20F4               	addwfc	prodh,w,c
  5421  000314  6EF7               	movwf	tblptrh,c
  5422  000316                     	if	0	;There are less than 3 active tblptr bytes
  5423  000316                     	endif
  5424  000316  0009               	tblrd		*+
  5425  000318  CFF5 F0DA          	movff	tablat,___lwdiv@divisor
  5426  00031C  000A               	tblrd		*-
  5427  00031E  CFF5 F0DB          	movff	tablat,___lwdiv@divisor+1
  5428  000322  C108  F0D8         	movff	printf@val,___lwdiv@dividend
  5429  000326  C109  F0D9         	movff	printf@val+1,___lwdiv@dividend+1
  5430  00032A  ECF0  F014         	call	___lwdiv	;wreg free
  5431  00032E  C0D8  F0DF         	movff	?___lwdiv,___lwmod@dividend
  5432  000332  C0D9  F0E0         	movff	?___lwdiv+1,___lwmod@dividend+1
  5433  000336  0E00               	movlw	0
  5434  000338  0100               	movlb	0	; () banked
  5435  00033A  6FE2               	movwf	(___lwmod@divisor+1)& (0+255),b
  5436  00033C  0E0A               	movlw	10
  5437  00033E  6FE1               	movwf	___lwmod@divisor& (0+255),b
  5438  000340  EC9C  F015         	call	___lwmod	;wreg free
  5439  000344  0100               	movlb	0	; () banked
  5440  000346  51DF               	movf	?___lwmod& (0+255),w,b
  5441  000348  0F30               	addlw	48
  5442  00034A  0101               	movlb	1	; () banked
  5443  00034C  6F0D               	movwf	printf@c& (0+255),b
  5444                           
  5445                           ;doprnt.c: 1491: break;
  5446  00034E  D033               	goto	l5190
  5447  000350                     l5182:
  5448                           
  5449                           ; BSR set to: 1
  5450                           ;doprnt.c: 1499: {
  5451                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5452  000350  C108  F0D8         	movff	printf@val,___lwdiv@dividend
  5453  000354  C109  F0D9         	movff	printf@val+1,___lwdiv@dividend+1
  5454  000358  0101               	movlb	1	; () banked
  5455  00035A  5107               	movf	printf@prec& (0+255),w,b
  5456  00035C  0D02               	mullw	2
  5457  00035E  0E60               	movlw	low _hexpowers
  5458  000360  24F3               	addwf	prodl,w,c
  5459  000362  6EF6               	movwf	tblptrl,c
  5460  000364  0EFE               	movlw	high _hexpowers
  5461  000366  20F4               	addwfc	prodh,w,c
  5462  000368  6EF7               	movwf	tblptrh,c
  5463  00036A                     	if	0	;There are less than 3 active tblptr bytes
  5464  00036A                     	endif
  5465  00036A  0009               	tblrd		*+
  5466  00036C  CFF5 F0DA          	movff	tablat,___lwdiv@divisor
  5467  000370  000A               	tblrd		*-
  5468  000372  CFF5 F0DB          	movff	tablat,___lwdiv@divisor+1
  5469  000376  ECF0  F014         	call	___lwdiv	;wreg free
  5470  00037A  0100               	movlb	0	; () banked
  5471  00037C  51D8               	movf	?___lwdiv& (0+255),w,b
  5472  00037E  0B0F               	andlw	15
  5473  000380  0101               	movlb	1	; () banked
  5474  000382  6F04               	movwf	printf@idx& (0+255),b
  5475                           
  5476                           ; BSR set to: 1
  5477                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5478  000384  0101               	movlb	1	; () banked
  5479  000386  5104               	movf	printf@idx& (0+255),w,b
  5480  000388  0D01               	mullw	1
  5481  00038A  0E2F               	movlw	low STR_21
  5482  00038C  24F3               	addwf	prodl,w,c
  5483  00038E  6EF6               	movwf	tblptrl,c
  5484  000390  0EFF               	movlw	high STR_21
  5485  000392  20F4               	addwfc	prodh,w,c
  5486  000394  6EF7               	movwf	tblptrh,c
  5487  000396                     	if	0	;There are less than 3 active tblptr bytes
  5488  000396                     	endif
  5489  000396  0008               	tblrd		*
  5490  000398  CFF5 F10D          	movff	tablat,printf@c
  5491                           
  5492                           ; BSR set to: 1
  5493                           ;doprnt.c: 1523: }
  5494                           
  5495                           ;doprnt.c: 1508: }
  5496                           ;doprnt.c: 1510: break;
  5497  00039C  D00C               	goto	l5190
  5498  00039E                     l5188:
  5499  00039E  0101               	movlb	1	; () banked
  5500  0003A0  510A               	movf	printf@flag& (0+255),w,b
  5501  0003A2  0BC0               	andlw	192
  5502                           
  5503                           ; Switch size 1, requested type "space"
  5504                           ; Number of cases is 3, Range of values is 0 to 192
  5505                           ; switch strategies available:
  5506                           ; Name         Instructions Cycles
  5507                           ; simple_byte           10     6 (average)
  5508                           ;	Chosen strategy is simple_byte
  5509  0003A4  0A00               	xorlw	0	; case 0
  5510  0003A6  B4D8               	btfsc	status,2,c
  5511  0003A8  D7AD               	goto	l5180
  5512  0003AA  0A80               	xorlw	128	; case 128
  5513  0003AC  B4D8               	btfsc	status,2,c
  5514  0003AE  D7D0               	goto	l5182
  5515  0003B0  0A40               	xorlw	64	; case 192
  5516  0003B2  B4D8               	btfsc	status,2,c
  5517  0003B4  D7A7               	goto	l5180
  5518  0003B6                     l5190:
  5519                           
  5520                           ; BSR set to: 1
  5521                           ;doprnt.c: 1524: (putch(c) );
  5522  0003B6  0101               	movlb	1	; () banked
  5523  0003B8  510D               	movf	printf@c& (0+255),w,b
  5524  0003BA  EC6D  F018         	call	_putch
  5525  0003BE                     l5192:
  5526  0003BE  0101               	movlb	1	; () banked
  5527  0003C0  0707               	decf	printf@prec& (0+255),f,b
  5528  0003C2  0101               	movlb	1	; () banked
  5529  0003C4  2907               	incf	printf@prec& (0+255),w,b
  5530  0003C6  A4D8               	btfss	status,2,c
  5531  0003C8  D7EA               	goto	l5188
  5532  0003CA                     l5194:
  5533  0003CA  C0E4  FFF6         	movff	printf@f,tblptrl
  5534  0003CE  C0E5  FFF7         	movff	printf@f+1,tblptrh
  5535  0003D2  0100               	movlb	0	; () banked
  5536  0003D4  4BE4               	infsnz	printf@f& (0+255),f,b
  5537  0003D6  2BE5               	incf	(printf@f+1)& (0+255),f,b
  5538  0003D8                     	if	0	;tblptru may be non-zero
  5539  0003D8                     	endif
  5540  0003D8                     	if	0	;tblptru may be non-zero
  5541  0003D8                     	endif
  5542  0003D8  0008               	tblrd		*
  5543  0003DA  CFF5 F10D          	movff	tablat,printf@c
  5544  0003DE  0101               	movlb	1	; () banked
  5545  0003E0  510D               	movf	printf@c& (0+255),w,b
  5546  0003E2  B4D8               	btfsc	status,2,c
  5547  0003E4  0012               	return	
  5548  0003E6  D61C               	goto	l5064
  5549  0003E8                     __end_of_printf:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _putch *****************
  5570 ;; Defined at:
  5571 ;;		line 31 in file "lcd.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  data            1    wreg     unsigned char 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  data            1   18[BANK0 ] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:        1 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    8
  5592 ;; This function calls:
  5593 ;;		_lcdNibble
  5594 ;; This function is called by:
  5595 ;;		_printf
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text18
  5600  0030DA                     __ptext18:
  5601                           	opt stack 0
  5602  0030DA                     _putch:
  5603                           	opt stack 20
  5604                           
  5605                           ;incstack = 0
  5606                           ;putch@data stored from wreg
  5607  0030DA  0100               	movlb	0	; () banked
  5608  0030DC  6FDA               	movwf	putch@data& (0+255),b
  5609                           
  5610                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5611  0030DE  848C               	bsf	3980,2,c	;volatile
  5612                           
  5613                           ;lcd.c: 33: lcdNibble(data);
  5614  0030E0  0100               	movlb	0	; () banked
  5615  0030E2  51DA               	movf	putch@data& (0+255),w,b
  5616  0030E4  ECCD  F015         	call	_lcdNibble
  5617  0030E8  0012               	return		;funcret
  5618  0030EA                     __end_of_putch:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           intcon2	equ	0xFF1
  5628                           intcon3	equ	0xFF0
  5629                           postinc0	equ	0xFEE
  5630                           wreg	equ	0xFE8
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _isdigit *****************
  5639 ;; Defined at:
  5640 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  c               1    wreg     unsigned char 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  c               1   18[BANK0 ] unsigned char 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;Total ram usage:        3 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    7
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_printf
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text19
  5669  002FC2                     __ptext19:
  5670                           	opt stack 0
  5671  002FC2                     _isdigit:
  5672                           	opt stack 21
  5673                           
  5674                           ;incstack = 0
  5675                           ;isdigit@c stored from wreg
  5676  002FC2  0100               	movlb	0	; () banked
  5677  002FC4  6FDA               	movwf	isdigit@c& (0+255),b
  5678  002FC6  0E00               	movlw	0
  5679  002FC8  0100               	movlb	0	; () banked
  5680  002FCA  6FD9               	movwf	_isdigit$805& (0+255),b
  5681                           
  5682                           ; BSR set to: 0
  5683  002FCC  0E3A               	movlw	58
  5684  002FCE  0100               	movlb	0	; () banked
  5685  002FD0  61DA               	cpfslt	isdigit@c& (0+255),b
  5686  002FD2  D007               	goto	l4974
  5687                           
  5688                           ; BSR set to: 0
  5689  002FD4  0E2F               	movlw	47
  5690  002FD6  0100               	movlb	0	; () banked
  5691  002FD8  65DA               	cpfsgt	isdigit@c& (0+255),b
  5692  002FDA  D003               	goto	l4974
  5693                           
  5694                           ; BSR set to: 0
  5695  002FDC  0E01               	movlw	1
  5696  002FDE  0100               	movlb	0	; () banked
  5697  002FE0  6FD9               	movwf	_isdigit$805& (0+255),b
  5698  002FE2                     l4974:
  5699                           
  5700                           ; BSR set to: 0
  5701  002FE2  C0D9  F0D8         	movff	_isdigit$805,??_isdigit
  5702  002FE6  0100               	movlb	0	; () banked
  5703  002FE8  31D8               	rrcf	??_isdigit& (0+255),w,b
  5704  002FEA  0012               	return	
  5705  002FEC                     __end_of_isdigit:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           intcon2	equ	0xFF1
  5715                           intcon3	equ	0xFF0
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function ___wmul *****************
  5726 ;; Defined at:
  5727 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5730 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  product         2   20[BANK0 ] unsigned int 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  2   16[BANK0 ] unsigned int 
  5735 ;; Registers used:
  5736 ;;		wreg, status,2, status,0, prodl, prodh
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;Total ram usage:        6 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    7
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_printf
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text20
  5757  002F5E                     __ptext20:
  5758                           	opt stack 0
  5759  002F5E                     ___wmul:
  5760                           	opt stack 21
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;incstack = 0
  5764  002F5E  0100               	movlb	0	; () banked
  5765  002F60  51D8               	movf	___wmul@multiplier& (0+255),w,b
  5766  002F62  0100               	movlb	0	; () banked
  5767  002F64  03DA               	mulwf	___wmul@multiplicand& (0+255),b
  5768  002F66  CFF3 F0DC          	movff	prodl,___wmul@product
  5769  002F6A  CFF4 F0DD          	movff	prodh,___wmul@product+1
  5770  002F6E  0100               	movlb	0	; () banked
  5771  002F70  51D8               	movf	___wmul@multiplier& (0+255),w,b
  5772  002F72  0100               	movlb	0	; () banked
  5773  002F74  03DB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5774  002F76  50F3               	movf	prodl,w,c
  5775  002F78  0100               	movlb	0	; () banked
  5776  002F7A  27DD               	addwf	(___wmul@product+1)& (0+255),f,b
  5777  002F7C  0100               	movlb	0	; () banked
  5778  002F7E  51D9               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5779  002F80  0100               	movlb	0	; () banked
  5780  002F82  03DA               	mulwf	___wmul@multiplicand& (0+255),b
  5781  002F84  50F3               	movf	prodl,w,c
  5782  002F86  0100               	movlb	0	; () banked
  5783  002F88  27DD               	addwf	(___wmul@product+1)& (0+255),f,b
  5784                           
  5785                           ; BSR set to: 0
  5786  002F8A  C0DC  F0D8         	movff	___wmul@product,?___wmul
  5787  002F8E  C0DD  F0D9         	movff	___wmul@product+1,?___wmul+1
  5788  002F92  0012               	return	
  5789  002F94                     __end_of___wmul:
  5790                           	opt stack 0
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           intcon2	equ	0xFF1
  5799                           intcon3	equ	0xFF0
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           fsr2h	equ	0xFDA
  5806                           fsr2l	equ	0xFD9
  5807                           status	equ	0xFD8
  5808                           
  5809 ;; *************** function ___lwmod *****************
  5810 ;; Defined at:
  5811 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;  dividend        2   23[BANK0 ] unsigned int 
  5814 ;;  divisor         2   25[BANK0 ] unsigned int 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;  counter         1   27[BANK0 ] unsigned char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  2   23[BANK0 ] unsigned int 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;Total ram usage:        5 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    7
  5833 ;; This function calls:
  5834 ;;		Nothing
  5835 ;; This function is called by:
  5836 ;;		_printf
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text21
  5841  002B38                     __ptext21:
  5842                           	opt stack 0
  5843  002B38                     ___lwmod:
  5844                           	opt stack 21
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;incstack = 0
  5848  002B38  0100               	movlb	0	; () banked
  5849  002B3A  51E1               	movf	___lwmod@divisor& (0+255),w,b
  5850  002B3C  0100               	movlb	0	; () banked
  5851  002B3E  11E2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5852  002B40  B4D8               	btfsc	status,2,c
  5853  002B42  D026               	goto	l898
  5854                           
  5855                           ; BSR set to: 0
  5856  002B44  0E01               	movlw	1
  5857  002B46  0100               	movlb	0	; () banked
  5858  002B48  6FE3               	movwf	___lwmod@counter& (0+255),b
  5859  002B4A  D006               	goto	l5048
  5860  002B4C                     l5046:
  5861                           
  5862                           ; BSR set to: 0
  5863  002B4C  0100               	movlb	0	; () banked
  5864  002B4E  90D8               	bcf	status,0,c
  5865  002B50  37E1               	rlcf	___lwmod@divisor& (0+255),f,b
  5866  002B52  37E2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5867  002B54  0100               	movlb	0	; () banked
  5868  002B56  2BE3               	incf	___lwmod@counter& (0+255),f,b
  5869  002B58                     l5048:
  5870                           
  5871                           ; BSR set to: 0
  5872  002B58  0100               	movlb	0	; () banked
  5873  002B5A  AFE2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5874  002B5C  D7F7               	goto	l5046
  5875  002B5E                     l5050:
  5876                           
  5877                           ; BSR set to: 0
  5878  002B5E  0100               	movlb	0	; () banked
  5879  002B60  51E1               	movf	___lwmod@divisor& (0+255),w,b
  5880  002B62  0100               	movlb	0	; () banked
  5881  002B64  5DDF               	subwf	___lwmod@dividend& (0+255),w,b
  5882  002B66  0100               	movlb	0	; () banked
  5883  002B68  51E2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5884  002B6A  0100               	movlb	0	; () banked
  5885  002B6C  59E0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5886  002B6E  A0D8               	btfss	status,0,c
  5887  002B70  D008               	goto	l5054
  5888                           
  5889                           ; BSR set to: 0
  5890  002B72  0100               	movlb	0	; () banked
  5891  002B74  51E1               	movf	___lwmod@divisor& (0+255),w,b
  5892  002B76  0100               	movlb	0	; () banked
  5893  002B78  5FDF               	subwf	___lwmod@dividend& (0+255),f,b
  5894  002B7A  0100               	movlb	0	; () banked
  5895  002B7C  51E2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5896  002B7E  0100               	movlb	0	; () banked
  5897  002B80  5BE0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5898  002B82                     l5054:
  5899                           
  5900                           ; BSR set to: 0
  5901  002B82  0100               	movlb	0	; () banked
  5902  002B84  90D8               	bcf	status,0,c
  5903  002B86  33E2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5904  002B88  33E1               	rrcf	___lwmod@divisor& (0+255),f,b
  5905                           
  5906                           ; BSR set to: 0
  5907  002B8A  0100               	movlb	0	; () banked
  5908  002B8C  2FE3               	decfsz	___lwmod@counter& (0+255),f,b
  5909  002B8E  D7E7               	goto	l5050
  5910  002B90                     l898:
  5911                           
  5912                           ; BSR set to: 0
  5913  002B90  C0DF  F0DF         	movff	___lwmod@dividend,?___lwmod
  5914  002B94  C0E0  F0E0         	movff	___lwmod@dividend+1,?___lwmod+1
  5915                           
  5916                           ; BSR set to: 0
  5917  002B98  0012               	return		;funcret
  5918  002B9A                     __end_of___lwmod:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodh	equ	0xFF4
  5925                           prodl	equ	0xFF3
  5926                           intcon	equ	0xFF2
  5927                           intcon2	equ	0xFF1
  5928                           intcon3	equ	0xFF0
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function ___lwdiv *****************
  5939 ;; Defined at:
  5940 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  dividend        2   16[BANK0 ] unsigned int 
  5943 ;;  divisor         2   18[BANK0 ] unsigned int 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  quotient        2   21[BANK0 ] unsigned int 
  5946 ;;  counter         1   20[BANK0 ] unsigned char 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  2   16[BANK0 ] unsigned int 
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, status,0
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5956 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;Total ram usage:        7 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    7
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_printf
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text22
  5971  0029E0                     __ptext22:
  5972                           	opt stack 0
  5973  0029E0                     ___lwdiv:
  5974                           	opt stack 21
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;incstack = 0
  5978  0029E0  0E00               	movlw	0
  5979  0029E2  0100               	movlb	0	; () banked
  5980  0029E4  6FDE               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5981  0029E6  0E00               	movlw	0
  5982  0029E8  6FDD               	movwf	___lwdiv@quotient& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985  0029EA  0100               	movlb	0	; () banked
  5986  0029EC  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  5987  0029EE  0100               	movlb	0	; () banked
  5988  0029F0  11DB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5989  0029F2  B4D8               	btfsc	status,2,c
  5990  0029F4  D02C               	goto	l888
  5991                           
  5992                           ; BSR set to: 0
  5993  0029F6  0E01               	movlw	1
  5994  0029F8  0100               	movlb	0	; () banked
  5995  0029FA  6FDC               	movwf	___lwdiv@counter& (0+255),b
  5996  0029FC  D006               	goto	l5028
  5997  0029FE                     l5026:
  5998                           
  5999                           ; BSR set to: 0
  6000  0029FE  0100               	movlb	0	; () banked
  6001  002A00  90D8               	bcf	status,0,c
  6002  002A02  37DA               	rlcf	___lwdiv@divisor& (0+255),f,b
  6003  002A04  37DB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6004  002A06  0100               	movlb	0	; () banked
  6005  002A08  2BDC               	incf	___lwdiv@counter& (0+255),f,b
  6006  002A0A                     l5028:
  6007                           
  6008                           ; BSR set to: 0
  6009  002A0A  0100               	movlb	0	; () banked
  6010  002A0C  AFDB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6011  002A0E  D7F7               	goto	l5026
  6012  002A10                     l5030:
  6013                           
  6014                           ; BSR set to: 0
  6015  002A10  0100               	movlb	0	; () banked
  6016  002A12  90D8               	bcf	status,0,c
  6017  002A14  37DD               	rlcf	___lwdiv@quotient& (0+255),f,b
  6018  002A16  37DE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021  002A18  0100               	movlb	0	; () banked
  6022  002A1A  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  6023  002A1C  0100               	movlb	0	; () banked
  6024  002A1E  5DD8               	subwf	___lwdiv@dividend& (0+255),w,b
  6025  002A20  0100               	movlb	0	; () banked
  6026  002A22  51DB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6027  002A24  0100               	movlb	0	; () banked
  6028  002A26  59D9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6029  002A28  A0D8               	btfss	status,0,c
  6030  002A2A  D00A               	goto	l5038
  6031                           
  6032                           ; BSR set to: 0
  6033  002A2C  0100               	movlb	0	; () banked
  6034  002A2E  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  6035  002A30  0100               	movlb	0	; () banked
  6036  002A32  5FD8               	subwf	___lwdiv@dividend& (0+255),f,b
  6037  002A34  0100               	movlb	0	; () banked
  6038  002A36  51DB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6039  002A38  0100               	movlb	0	; () banked
  6040  002A3A  5BD9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6041                           
  6042                           ; BSR set to: 0
  6043  002A3C  0100               	movlb	0	; () banked
  6044  002A3E  81DD               	bsf	___lwdiv@quotient& (0+255),0,b
  6045  002A40                     l5038:
  6046                           
  6047                           ; BSR set to: 0
  6048  002A40  0100               	movlb	0	; () banked
  6049  002A42  90D8               	bcf	status,0,c
  6050  002A44  33DB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6051  002A46  33DA               	rrcf	___lwdiv@divisor& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054  002A48  0100               	movlb	0	; () banked
  6055  002A4A  2FDC               	decfsz	___lwdiv@counter& (0+255),f,b
  6056  002A4C  D7E1               	goto	l5030
  6057  002A4E                     l888:
  6058                           
  6059                           ; BSR set to: 0
  6060  002A4E  C0DD  F0D8         	movff	___lwdiv@quotient,?___lwdiv
  6061  002A52  C0DE  F0D9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6062                           
  6063                           ; BSR set to: 0
  6064  002A56  0012               	return		;funcret
  6065  002A58                     __end_of___lwdiv:
  6066                           	opt stack 0
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           intcon2	equ	0xFF1
  6075                           intcon3	equ	0xFF0
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _lcdInst *****************
  6086 ;; Defined at:
  6087 ;;		line 26 in file "lcd.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  data            1    wreg     unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  data            1   18[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;Total ram usage:        1 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    8
  6108 ;; This function calls:
  6109 ;;		_lcdNibble
  6110 ;; This function is called by:
  6111 ;;		_initLCD
  6112 ;;		_standby
  6113 ;;		_date_time
  6114 ;;		_bottle_count
  6115 ;;		_bottle_time
  6116 ;;		_operation
  6117 ;;		_operationend
  6118 ;;		_emergencystop
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text23
  6123  0030EA                     __ptext23:
  6124                           	opt stack 0
  6125  0030EA                     _lcdInst:
  6126                           	opt stack 21
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;incstack = 0
  6130                           ;lcdInst@data stored from wreg
  6131  0030EA  0100               	movlb	0	; () banked
  6132  0030EC  6FDA               	movwf	lcdInst@data& (0+255),b
  6133                           
  6134                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6135  0030EE  948C               	bcf	3980,2,c	;volatile
  6136                           
  6137                           ;lcd.c: 28: lcdNibble(data);
  6138  0030F0  0100               	movlb	0	; () banked
  6139  0030F2  51DA               	movf	lcdInst@data& (0+255),w,b
  6140  0030F4  ECCD  F015         	call	_lcdNibble
  6141  0030F8  0012               	return		;funcret
  6142  0030FA                     __end_of_lcdInst:
  6143                           	opt stack 0
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           intcon2	equ	0xFF1
  6152                           intcon3	equ	0xFF0
  6153                           postinc0	equ	0xFEE
  6154                           wreg	equ	0xFE8
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           fsr2h	equ	0xFDA
  6159                           fsr2l	equ	0xFD9
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _lcdNibble *****************
  6163 ;; Defined at:
  6164 ;;		line 36 in file "lcd.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  data            1    wreg     unsigned char 
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;  data            1   17[BANK0 ] unsigned char 
  6169 ;;  temp            1   16[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;Total ram usage:        2 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    7
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_lcdInst
  6190 ;;		_putch
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text24
  6195  002B9A                     __ptext24:
  6196                           	opt stack 0
  6197  002B9A                     _lcdNibble:
  6198                           	opt stack 20
  6199                           
  6200                           ;incstack = 0
  6201                           ;lcdNibble@data stored from wreg
  6202  002B9A  0100               	movlb	0	; () banked
  6203  002B9C  6FD9               	movwf	lcdNibble@data& (0+255),b
  6204                           
  6205                           ;lcd.c: 38: char temp = data & 0xF0;
  6206  002B9E  0100               	movlb	0	; () banked
  6207  002BA0  51D9               	movf	lcdNibble@data& (0+255),w,b
  6208  002BA2  0BF0               	andlw	240
  6209  002BA4  0100               	movlb	0	; () banked
  6210  002BA6  6FD8               	movwf	lcdNibble@temp& (0+255),b
  6211                           
  6212                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6213  002BA8  508C               	movf	3980,w,c	;volatile
  6214  002BAA  0B0F               	andlw	15
  6215  002BAC  6E8C               	movwf	3980,c	;volatile
  6216                           
  6217                           ;lcd.c: 40: LATD = temp | LATD;
  6218  002BAE  0100               	movlb	0	; () banked
  6219  002BB0  51D8               	movf	lcdNibble@temp& (0+255),w,b
  6220  002BB2  108C               	iorwf	3980,w,c	;volatile
  6221  002BB4  6E8C               	movwf	3980,c	;volatile
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6225  002BB6  968C               	bcf	3980,3,c	;volatile
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6229  002BB8  0E19               	movlw	25
  6230  002BBA                     u5437:
  6231  002BBA  2EE8               	decfsz	wreg,f,c
  6232  002BBC  D7FE               	bra	u5437
  6233                           
  6234                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6235  002BBE  868C               	bsf	3980,3,c	;volatile
  6236                           
  6237                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6238  002BC0  0E19               	movlw	25
  6239  002BC2                     u5447:
  6240  002BC2  2EE8               	decfsz	wreg,f,c
  6241  002BC4  D7FE               	bra	u5447
  6242                           
  6243                           ;lcd.c: 47: data = data << 4;
  6244  002BC6  0100               	movlb	0	; () banked
  6245  002BC8  39D9               	swapf	lcdNibble@data& (0+255),w,b
  6246  002BCA  0BF0               	andlw	240
  6247  002BCC  0100               	movlb	0	; () banked
  6248  002BCE  6FD9               	movwf	lcdNibble@data& (0+255),b
  6249                           
  6250                           ;lcd.c: 49: temp = data & 0xF0;
  6251  002BD0  0100               	movlb	0	; () banked
  6252  002BD2  51D9               	movf	lcdNibble@data& (0+255),w,b
  6253  002BD4  0BF0               	andlw	240
  6254  002BD6  0100               	movlb	0	; () banked
  6255  002BD8  6FD8               	movwf	lcdNibble@temp& (0+255),b
  6256                           
  6257                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6258  002BDA  508C               	movf	3980,w,c	;volatile
  6259  002BDC  0B0F               	andlw	15
  6260  002BDE  6E8C               	movwf	3980,c	;volatile
  6261                           
  6262                           ;lcd.c: 51: LATD = temp | LATD;
  6263  002BE0  0100               	movlb	0	; () banked
  6264  002BE2  51D8               	movf	lcdNibble@temp& (0+255),w,b
  6265  002BE4  108C               	iorwf	3980,w,c	;volatile
  6266  002BE6  6E8C               	movwf	3980,c	;volatile
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6270  002BE8  968C               	bcf	3980,3,c	;volatile
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6274  002BEA  0E19               	movlw	25
  6275  002BEC                     u5457:
  6276  002BEC  2EE8               	decfsz	wreg,f,c
  6277  002BEE  D7FE               	bra	u5457
  6278                           
  6279                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6280  002BF0  868C               	bsf	3980,3,c	;volatile
  6281                           
  6282                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6283  002BF2  0E19               	movlw	25
  6284  002BF4                     u5467:
  6285  002BF4  2EE8               	decfsz	wreg,f,c
  6286  002BF6  D7FE               	bra	u5467
  6287  002BF8  0012               	return		;funcret
  6288  002BFA                     __end_of_lcdNibble:
  6289                           	opt stack 0
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon	equ	0xFF2
  6297                           intcon2	equ	0xFF1
  6298                           intcon3	equ	0xFF0
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           fsr2h	equ	0xFDA
  6305                           fsr2l	equ	0xFD9
  6306                           status	equ	0xFD8
  6307                           
  6308 ;; *************** function ___awmod *****************
  6309 ;; Defined at:
  6310 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  dividend        2   16[BANK0 ] int 
  6313 ;;  divisor         2   18[BANK0 ] int 
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;  sign            1   21[BANK0 ] unsigned char 
  6316 ;;  counter         1   20[BANK0 ] unsigned char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  2   16[BANK0 ] int 
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6326 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;Total ram usage:        6 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    7
  6333 ;; This function calls:
  6334 ;;		Nothing
  6335 ;; This function is called by:
  6336 ;;		_bottle_count
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text25
  6341  00279A                     __ptext25:
  6342                           	opt stack 0
  6343  00279A                     ___awmod:
  6344                           	opt stack 22
  6345                           
  6346                           ;incstack = 0
  6347  00279A  0E00               	movlw	0
  6348  00279C  0100               	movlb	0	; () banked
  6349  00279E  6FDD               	movwf	___awmod@sign& (0+255),b
  6350                           
  6351                           ; BSR set to: 0
  6352  0027A0  0100               	movlb	0	; () banked
  6353  0027A2  AFD9               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6354  0027A4  D008               	goto	l4052
  6355                           
  6356                           ; BSR set to: 0
  6357  0027A6  0100               	movlb	0	; () banked
  6358  0027A8  6DD8               	negf	___awmod@dividend& (0+255),b
  6359  0027AA  1FD9               	comf	(___awmod@dividend+1)& (0+255),f,b
  6360  0027AC  B0D8               	btfsc	status,0,c
  6361  0027AE  2BD9               	incf	(___awmod@dividend+1)& (0+255),f,b
  6362                           
  6363                           ; BSR set to: 0
  6364  0027B0  0E01               	movlw	1
  6365  0027B2  0100               	movlb	0	; () banked
  6366  0027B4  6FDD               	movwf	___awmod@sign& (0+255),b
  6367  0027B6                     l4052:
  6368                           
  6369                           ; BSR set to: 0
  6370  0027B6  0100               	movlb	0	; () banked
  6371  0027B8  AFDB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6372  0027BA  D005               	goto	l4056
  6373                           
  6374                           ; BSR set to: 0
  6375  0027BC  0100               	movlb	0	; () banked
  6376  0027BE  6DDA               	negf	___awmod@divisor& (0+255),b
  6377  0027C0  1FDB               	comf	(___awmod@divisor+1)& (0+255),f,b
  6378  0027C2  B0D8               	btfsc	status,0,c
  6379  0027C4  2BDB               	incf	(___awmod@divisor+1)& (0+255),f,b
  6380  0027C6                     l4056:
  6381                           
  6382                           ; BSR set to: 0
  6383  0027C6  0100               	movlb	0	; () banked
  6384  0027C8  51DA               	movf	___awmod@divisor& (0+255),w,b
  6385  0027CA  0100               	movlb	0	; () banked
  6386  0027CC  11DB               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6387  0027CE  B4D8               	btfsc	status,2,c
  6388  0027D0  D026               	goto	l4072
  6389                           
  6390                           ; BSR set to: 0
  6391  0027D2  0E01               	movlw	1
  6392  0027D4  0100               	movlb	0	; () banked
  6393  0027D6  6FDC               	movwf	___awmod@counter& (0+255),b
  6394  0027D8  D006               	goto	l4062
  6395  0027DA                     l4060:
  6396                           
  6397                           ; BSR set to: 0
  6398  0027DA  0100               	movlb	0	; () banked
  6399  0027DC  90D8               	bcf	status,0,c
  6400  0027DE  37DA               	rlcf	___awmod@divisor& (0+255),f,b
  6401  0027E0  37DB               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6402  0027E2  0100               	movlb	0	; () banked
  6403  0027E4  2BDC               	incf	___awmod@counter& (0+255),f,b
  6404  0027E6                     l4062:
  6405                           
  6406                           ; BSR set to: 0
  6407  0027E6  0100               	movlb	0	; () banked
  6408  0027E8  AFDB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6409  0027EA  D7F7               	goto	l4060
  6410  0027EC                     l4064:
  6411                           
  6412                           ; BSR set to: 0
  6413  0027EC  0100               	movlb	0	; () banked
  6414  0027EE  51DA               	movf	___awmod@divisor& (0+255),w,b
  6415  0027F0  0100               	movlb	0	; () banked
  6416  0027F2  5DD8               	subwf	___awmod@dividend& (0+255),w,b
  6417  0027F4  0100               	movlb	0	; () banked
  6418  0027F6  51DB               	movf	(___awmod@divisor+1)& (0+255),w,b
  6419  0027F8  0100               	movlb	0	; () banked
  6420  0027FA  59D9               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6421  0027FC  A0D8               	btfss	status,0,c
  6422  0027FE  D008               	goto	l4068
  6423                           
  6424                           ; BSR set to: 0
  6425  002800  0100               	movlb	0	; () banked
  6426  002802  51DA               	movf	___awmod@divisor& (0+255),w,b
  6427  002804  0100               	movlb	0	; () banked
  6428  002806  5FD8               	subwf	___awmod@dividend& (0+255),f,b
  6429  002808  0100               	movlb	0	; () banked
  6430  00280A  51DB               	movf	(___awmod@divisor+1)& (0+255),w,b
  6431  00280C  0100               	movlb	0	; () banked
  6432  00280E  5BD9               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6433  002810                     l4068:
  6434                           
  6435                           ; BSR set to: 0
  6436  002810  0100               	movlb	0	; () banked
  6437  002812  90D8               	bcf	status,0,c
  6438  002814  33DB               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6439  002816  33DA               	rrcf	___awmod@divisor& (0+255),f,b
  6440                           
  6441                           ; BSR set to: 0
  6442  002818  0100               	movlb	0	; () banked
  6443  00281A  2FDC               	decfsz	___awmod@counter& (0+255),f,b
  6444  00281C  D7E7               	goto	l4064
  6445  00281E                     l4072:
  6446                           
  6447                           ; BSR set to: 0
  6448  00281E  0100               	movlb	0	; () banked
  6449  002820  51DD               	movf	___awmod@sign& (0+255),w,b
  6450  002822  0100               	movlb	0	; () banked
  6451  002824  B4D8               	btfsc	status,2,c
  6452  002826  D005               	goto	l4076
  6453                           
  6454                           ; BSR set to: 0
  6455  002828  0100               	movlb	0	; () banked
  6456  00282A  6DD8               	negf	___awmod@dividend& (0+255),b
  6457  00282C  1FD9               	comf	(___awmod@dividend+1)& (0+255),f,b
  6458  00282E  B0D8               	btfsc	status,0,c
  6459  002830  2BD9               	incf	(___awmod@dividend+1)& (0+255),f,b
  6460  002832                     l4076:
  6461                           
  6462                           ; BSR set to: 0
  6463  002832  C0D8  F0D8         	movff	___awmod@dividend,?___awmod
  6464  002836  C0D9  F0D9         	movff	___awmod@dividend+1,?___awmod+1
  6465  00283A  0012               	return	
  6466  00283C                     __end_of___awmod:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           intcon3	equ	0xFF0
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _I2C_Master_Init *****************
  6487 ;; Defined at:
  6488 ;;		line 14 in file "I2C.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  c               4   29[BANK0 ] const unsigned long 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6502 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;Total ram usage:        8 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    8
  6509 ;; This function calls:
  6510 ;;		___lldiv
  6511 ;; This function is called by:
  6512 ;;		_main
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text26
  6517  002BFA                     __ptext26:
  6518                           	opt stack 0
  6519  002BFA                     _I2C_Master_Init:
  6520                           	opt stack 22
  6521                           
  6522                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;incstack = 0
  6526  002BFA  0E00               	movlw	0
  6527  002BFC  6EC7               	movwf	4039,c	;volatile
  6528                           
  6529                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  6530  002BFE  0E28               	movlw	40
  6531  002C00  6EC6               	movwf	4038,c	;volatile
  6532                           
  6533                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  6534  002C02  0E00               	movlw	0
  6535  002C04  6EC5               	movwf	4037,c	;volatile
  6536                           
  6537                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  6538  002C06  0E80               	movlw	128
  6539  002C08  0100               	movlb	0	; () banked
  6540  002C0A  6FD8               	movwf	___lldiv@dividend& (0+255),b
  6541  002C0C  0E96               	movlw	150
  6542  002C0E  6FD9               	movwf	(___lldiv@dividend+1)& (0+255),b
  6543  002C10  0E98               	movlw	152
  6544  002C12  6FDA               	movwf	(___lldiv@dividend+2)& (0+255),b
  6545  002C14  0E00               	movlw	0
  6546  002C16  6FDB               	movwf	(___lldiv@dividend+3)& (0+255),b
  6547  002C18  C0E5  F0E9         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6548  002C1C  C0E6  F0EA         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6549  002C20  C0E7  F0EB         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6550  002C24  C0E8  F0EC         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6551  002C28  0E02               	movlw	2
  6552  002C2A                     u4055:
  6553  002C2A  90D8               	bcf	status,0,c
  6554  002C2C  0100               	movlb	0	; () banked
  6555  002C2E  37E9               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6556  002C30  37EA               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6557  002C32  37EB               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6558  002C34  37EC               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6559  002C36  2EE8               	decfsz	wreg,f,c
  6560  002C38  D7F8               	goto	u4055
  6561  002C3A  C0E9  F0DC         	movff	??_I2C_Master_Init,___lldiv@divisor
  6562  002C3E  C0EA  F0DD         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6563  002C42  C0EB  F0DE         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6564  002C46  C0EC  F0DF         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6565  002C4A  ECC4  F012         	call	___lldiv	;wreg free
  6566  002C4E  0100               	movlb	0	; () banked
  6567  002C50  05D8               	decf	?___lldiv& (0+255),w,b
  6568  002C52  6EC8               	movwf	4040,c	;volatile
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;I2C.c: 21: TRISC3 = 1;
  6572  002C54  8694               	bsf	3988,3,c	;volatile
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;I2C.c: 22: TRISC4 = 1;
  6576  002C56  8894               	bsf	3988,4,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579  002C58  0012               	return		;funcret
  6580  002C5A                     __end_of_I2C_Master_Init:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           indf2	equ	0xFDF
  6594                           postinc2	equ	0xFDE
  6595                           postdec2	equ	0xFDD
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function ___lldiv *****************
  6601 ;; Defined at:
  6602 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  dividend        4   16[BANK0 ] unsigned long 
  6605 ;;  divisor         4   20[BANK0 ] unsigned long 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  quotient        4   24[BANK0 ] unsigned long 
  6608 ;;  counter         1   28[BANK0 ] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  4   16[BANK0 ] unsigned long 
  6611 ;; Registers used:
  6612 ;;		wreg, status,2, status,0
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6618 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;Total ram usage:       13 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    7
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		_I2C_Master_Init
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text27
  6633  002588                     __ptext27:
  6634                           	opt stack 0
  6635  002588                     ___lldiv:
  6636                           	opt stack 22
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;incstack = 0
  6640  002588  0E00               	movlw	0
  6641  00258A  0100               	movlb	0	; () banked
  6642  00258C  6FE0               	movwf	___lldiv@quotient& (0+255),b
  6643  00258E  0E00               	movlw	0
  6644  002590  6FE1               	movwf	(___lldiv@quotient+1)& (0+255),b
  6645  002592  0E00               	movlw	0
  6646  002594  6FE2               	movwf	(___lldiv@quotient+2)& (0+255),b
  6647  002596  0E00               	movlw	0
  6648  002598  6FE3               	movwf	(___lldiv@quotient+3)& (0+255),b
  6649                           
  6650                           ; BSR set to: 0
  6651  00259A  0100               	movlb	0	; () banked
  6652  00259C  51DC               	movf	___lldiv@divisor& (0+255),w,b
  6653  00259E  0100               	movlb	0	; () banked
  6654  0025A0  11DD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6655  0025A2  0100               	movlb	0	; () banked
  6656  0025A4  11DE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6657  0025A6  0100               	movlb	0	; () banked
  6658  0025A8  11DF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6659  0025AA  B4D8               	btfsc	status,2,c
  6660  0025AC  D042               	goto	l835
  6661                           
  6662                           ; BSR set to: 0
  6663  0025AE  0E01               	movlw	1
  6664  0025B0  0100               	movlb	0	; () banked
  6665  0025B2  6FE4               	movwf	___lldiv@counter& (0+255),b
  6666  0025B4  D008               	goto	l4118
  6667  0025B6                     l4116:
  6668                           
  6669                           ; BSR set to: 0
  6670  0025B6  0100               	movlb	0	; () banked
  6671  0025B8  90D8               	bcf	status,0,c
  6672  0025BA  37DC               	rlcf	___lldiv@divisor& (0+255),f,b
  6673  0025BC  37DD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6674  0025BE  37DE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6675  0025C0  37DF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6676  0025C2  0100               	movlb	0	; () banked
  6677  0025C4  2BE4               	incf	___lldiv@counter& (0+255),f,b
  6678  0025C6                     l4118:
  6679                           
  6680                           ; BSR set to: 0
  6681  0025C6  0100               	movlb	0	; () banked
  6682  0025C8  AFDF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6683  0025CA  D7F5               	goto	l4116
  6684  0025CC                     l4120:
  6685                           
  6686                           ; BSR set to: 0
  6687  0025CC  0100               	movlb	0	; () banked
  6688  0025CE  90D8               	bcf	status,0,c
  6689  0025D0  37E0               	rlcf	___lldiv@quotient& (0+255),f,b
  6690  0025D2  37E1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6691  0025D4  37E2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6692  0025D6  37E3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6693                           
  6694                           ; BSR set to: 0
  6695  0025D8  0100               	movlb	0	; () banked
  6696  0025DA  51DC               	movf	___lldiv@divisor& (0+255),w,b
  6697  0025DC  0100               	movlb	0	; () banked
  6698  0025DE  5DD8               	subwf	___lldiv@dividend& (0+255),w,b
  6699  0025E0  0100               	movlb	0	; () banked
  6700  0025E2  51DD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6701  0025E4  0100               	movlb	0	; () banked
  6702  0025E6  59D9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6703  0025E8  0100               	movlb	0	; () banked
  6704  0025EA  51DE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6705  0025EC  0100               	movlb	0	; () banked
  6706  0025EE  59DA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6707  0025F0  0100               	movlb	0	; () banked
  6708  0025F2  51DF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6709  0025F4  0100               	movlb	0	; () banked
  6710  0025F6  59DB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6711  0025F8  A0D8               	btfss	status,0,c
  6712  0025FA  D012               	goto	l4128
  6713                           
  6714                           ; BSR set to: 0
  6715  0025FC  0100               	movlb	0	; () banked
  6716  0025FE  51DC               	movf	___lldiv@divisor& (0+255),w,b
  6717  002600  0100               	movlb	0	; () banked
  6718  002602  5FD8               	subwf	___lldiv@dividend& (0+255),f,b
  6719  002604  0100               	movlb	0	; () banked
  6720  002606  51DD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6721  002608  0100               	movlb	0	; () banked
  6722  00260A  5BD9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6723  00260C  0100               	movlb	0	; () banked
  6724  00260E  51DE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6725  002610  0100               	movlb	0	; () banked
  6726  002612  5BDA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6727  002614  0100               	movlb	0	; () banked
  6728  002616  51DF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6729  002618  0100               	movlb	0	; () banked
  6730  00261A  5BDB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6731                           
  6732                           ; BSR set to: 0
  6733  00261C  0100               	movlb	0	; () banked
  6734  00261E  81E0               	bsf	___lldiv@quotient& (0+255),0,b
  6735  002620                     l4128:
  6736                           
  6737                           ; BSR set to: 0
  6738  002620  0100               	movlb	0	; () banked
  6739  002622  90D8               	bcf	status,0,c
  6740  002624  33DF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6741  002626  33DE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6742  002628  33DD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6743  00262A  33DC               	rrcf	___lldiv@divisor& (0+255),f,b
  6744                           
  6745                           ; BSR set to: 0
  6746  00262C  0100               	movlb	0	; () banked
  6747  00262E  2FE4               	decfsz	___lldiv@counter& (0+255),f,b
  6748  002630  D7CD               	goto	l4120
  6749  002632                     l835:
  6750                           
  6751                           ; BSR set to: 0
  6752  002632  C0E0  F0D8         	movff	___lldiv@quotient,?___lldiv
  6753  002636  C0E1  F0D9         	movff	___lldiv@quotient+1,?___lldiv+1
  6754  00263A  C0E2  F0DA         	movff	___lldiv@quotient+2,?___lldiv+2
  6755  00263E  C0E3  F0DB         	movff	___lldiv@quotient+3,?___lldiv+3
  6756                           
  6757                           ; BSR set to: 0
  6758  002642  0012               	return		;funcret
  6759  002644                     __end_of___lldiv:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           intcon3	equ	0xFF0
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _I2C_ColorSens_Init *****************
  6780 ;; Defined at:
  6781 ;;		line 54 in file "I2C.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    9
  6802 ;; This function calls:
  6803 ;;		_I2C_Master_Start
  6804 ;;		_I2C_Master_Stop
  6805 ;;		_I2C_Master_Write
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811                           	psect	text28
  6812  00196A                     __ptext28:
  6813                           	opt stack 0
  6814  00196A                     _I2C_ColorSens_Init:
  6815                           	opt stack 21
  6816                           
  6817                           ;I2C.c: 55: I2C_Master_Start();
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;incstack = 0
  6821  00196A  EC97  F018         	call	_I2C_Master_Start	;wreg free
  6822                           
  6823                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  6824  00196E  0E00               	movlw	0
  6825  001970  0100               	movlb	0	; () banked
  6826  001972  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6827  001974  0E52               	movlw	82
  6828  001976  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6829  001978  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6830                           
  6831                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  6832  00197C  0E00               	movlw	0
  6833  00197E  0100               	movlb	0	; () banked
  6834  001980  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6835  001982  0E80               	movlw	128
  6836  001984  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6837  001986  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6838                           
  6839                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  6840  00198A  0E00               	movlw	0
  6841  00198C  0100               	movlb	0	; () banked
  6842  00198E  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6843  001990  0E01               	movlw	1
  6844  001992  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6845  001994  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6846                           
  6847                           ;I2C.c: 59: I2C_Master_Stop();
  6848  001998  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  6849                           
  6850                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  6851  00199C  0E0A               	movlw	10
  6852  00199E  0100               	movlb	0	; () banked
  6853  0019A0  6FDB               	movwf	??_I2C_ColorSens_Init& (0+255),b
  6854  0019A2  0EBC               	movlw	188
  6855  0019A4                     u5477:
  6856  0019A4  2EE8               	decfsz	wreg,f,c
  6857  0019A6  D7FE               	bra	u5477
  6858  0019A8  2FDB               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  6859  0019AA  D7FC               	bra	u5477
  6860  0019AC  F000               	nop	
  6861                           
  6862                           ;I2C.c: 63: I2C_Master_Start();
  6863  0019AE  EC97  F018         	call	_I2C_Master_Start	;wreg free
  6864                           
  6865                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  6866  0019B2  0E00               	movlw	0
  6867  0019B4  0100               	movlb	0	; () banked
  6868  0019B6  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6869  0019B8  0E52               	movlw	82
  6870  0019BA  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6871  0019BC  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6872                           
  6873                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  6874  0019C0  0E00               	movlw	0
  6875  0019C2  0100               	movlb	0	; () banked
  6876  0019C4  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6877  0019C6  0E80               	movlw	128
  6878  0019C8  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6879  0019CA  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6880                           
  6881                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  6882  0019CE  0E00               	movlw	0
  6883  0019D0  0100               	movlb	0	; () banked
  6884  0019D2  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6885  0019D4  0E03               	movlw	3
  6886  0019D6  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6887  0019D8  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6888                           
  6889                           ;I2C.c: 67: I2C_Master_Stop();
  6890  0019DC  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  6891                           
  6892                           ;I2C.c: 69: I2C_Master_Start();
  6893  0019E0  EC97  F018         	call	_I2C_Master_Start	;wreg free
  6894                           
  6895                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  6896  0019E4  0E00               	movlw	0
  6897  0019E6  0100               	movlb	0	; () banked
  6898  0019E8  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6899  0019EA  0E52               	movlw	82
  6900  0019EC  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6901  0019EE  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6902                           
  6903                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  6904  0019F2  0E00               	movlw	0
  6905  0019F4  0100               	movlb	0	; () banked
  6906  0019F6  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6907  0019F8  0E8F               	movlw	143
  6908  0019FA  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6909  0019FC  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6910                           
  6911                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  6912  001A00  0E00               	movlw	0
  6913  001A02  0100               	movlb	0	; () banked
  6914  001A04  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6915  001A06  0E02               	movlw	2
  6916  001A08  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6917  001A0A  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6918                           
  6919                           ;I2C.c: 73: I2C_Master_Stop();
  6920  001A0E  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  6921                           
  6922                           ;I2C.c: 90: I2C_Master_Start();
  6923  001A12  EC97  F018         	call	_I2C_Master_Start	;wreg free
  6924                           
  6925                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  6926  001A16  0E00               	movlw	0
  6927  001A18  0100               	movlb	0	; () banked
  6928  001A1A  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6929  001A1C  0E52               	movlw	82
  6930  001A1E  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6931  001A20  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6932                           
  6933                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  6934  001A24  0E00               	movlw	0
  6935  001A26  0100               	movlb	0	; () banked
  6936  001A28  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6937  001A2A  0E81               	movlw	129
  6938  001A2C  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6939  001A2E  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6940                           
  6941                           ;I2C.c: 93: I2C_Master_Write(0b11111111);
  6942  001A32  0E00               	movlw	0
  6943  001A34  0100               	movlb	0	; () banked
  6944  001A36  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6945  001A38  69D9               	setf	I2C_Master_Write@d& (0+255),b
  6946  001A3A  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6947                           
  6948                           ;I2C.c: 94: I2C_Master_Stop();
  6949  001A3E  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  6950                           
  6951                           ;I2C.c: 96: I2C_Master_Start();
  6952  001A42  EC97  F018         	call	_I2C_Master_Start	;wreg free
  6953                           
  6954                           ;I2C.c: 97: I2C_Master_Write(0b01010010);
  6955  001A46  0E00               	movlw	0
  6956  001A48  0100               	movlb	0	; () banked
  6957  001A4A  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6958  001A4C  0E52               	movlw	82
  6959  001A4E  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6960  001A50  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6961                           
  6962                           ;I2C.c: 98: I2C_Master_Write(0b10110100);
  6963  001A54  0E00               	movlw	0
  6964  001A56  0100               	movlb	0	; () banked
  6965  001A58  6FDA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6966  001A5A  0EB4               	movlw	180
  6967  001A5C  6FD9               	movwf	I2C_Master_Write@d& (0+255),b
  6968  001A5E  EC89  F018         	call	_I2C_Master_Write	;wreg free
  6969                           
  6970                           ;I2C.c: 99: I2C_Master_Stop();
  6971  001A62  EC93  F018         	call	_I2C_Master_Stop	;wreg free
  6972  001A66  0012               	return		;funcret
  6973  001A68                     __end_of_I2C_ColorSens_Init:
  6974                           	opt stack 0
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           intcon2	equ	0xFF1
  6983                           intcon3	equ	0xFF0
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _I2C_Master_Write *****************
  6994 ;; Defined at:
  6995 ;;		line 48 in file "I2C.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  d               2   17[BANK0 ] unsigned int 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;		None
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      void 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;Total ram usage:        2 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    8
  7016 ;; This function calls:
  7017 ;;		_I2C_Master_Wait
  7018 ;; This function is called by:
  7019 ;;		_I2C_ColorSens_Init
  7020 ;;		_date_time
  7021 ;;		_read_colorsensor
  7022 ;;		_I2C_ColorSens_ClearInt
  7023 ;;		_set_time
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text29
  7028  003112                     __ptext29:
  7029                           	opt stack 0
  7030  003112                     _I2C_Master_Write:
  7031                           	opt stack 20
  7032                           
  7033                           ;I2C.c: 50: I2C_Master_Wait();
  7034                           
  7035                           ;incstack = 0
  7036  003112  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  7037                           
  7038                           ;I2C.c: 51: SSPBUF = d;
  7039  003116  C0D9  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7040  00311A  0012               	return		;funcret
  7041  00311C                     __end_of_I2C_Master_Write:
  7042                           	opt stack 0
  7043                           tblptru	equ	0xFF8
  7044                           tblptrh	equ	0xFF7
  7045                           tblptrl	equ	0xFF6
  7046                           tablat	equ	0xFF5
  7047                           prodh	equ	0xFF4
  7048                           prodl	equ	0xFF3
  7049                           intcon	equ	0xFF2
  7050                           intcon2	equ	0xFF1
  7051                           intcon3	equ	0xFF0
  7052                           postinc0	equ	0xFEE
  7053                           wreg	equ	0xFE8
  7054                           indf2	equ	0xFDF
  7055                           postinc2	equ	0xFDE
  7056                           postdec2	equ	0xFDD
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function _I2C_Master_Stop *****************
  7062 ;; Defined at:
  7063 ;;		line 42 in file "I2C.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;		None
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;		None
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;Total ram usage:        0 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    8
  7084 ;; This function calls:
  7085 ;;		_I2C_Master_Wait
  7086 ;; This function is called by:
  7087 ;;		_I2C_ColorSens_Init
  7088 ;;		_date_time
  7089 ;;		_read_colorsensor
  7090 ;;		_I2C_ColorSens_ClearInt
  7091 ;;		_set_time
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text30
  7096  003126                     __ptext30:
  7097                           	opt stack 0
  7098  003126                     _I2C_Master_Stop:
  7099                           	opt stack 20
  7100                           
  7101                           ;I2C.c: 44: I2C_Master_Wait();
  7102                           
  7103                           ;incstack = 0
  7104  003126  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  7105                           
  7106                           ;I2C.c: 45: PEN = 1;
  7107  00312A  84C5               	bsf	4037,2,c	;volatile
  7108  00312C  0012               	return		;funcret
  7109  00312E                     __end_of_I2C_Master_Stop:
  7110                           	opt stack 0
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           prodh	equ	0xFF4
  7116                           prodl	equ	0xFF3
  7117                           intcon	equ	0xFF2
  7118                           intcon2	equ	0xFF1
  7119                           intcon3	equ	0xFF0
  7120                           postinc0	equ	0xFEE
  7121                           wreg	equ	0xFE8
  7122                           indf2	equ	0xFDF
  7123                           postinc2	equ	0xFDE
  7124                           postdec2	equ	0xFDD
  7125                           fsr2h	equ	0xFDA
  7126                           fsr2l	equ	0xFD9
  7127                           status	equ	0xFD8
  7128                           
  7129 ;; *************** function _I2C_Master_Start *****************
  7130 ;; Defined at:
  7131 ;;		line 30 in file "I2C.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg, status,2, status,0, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7149 ;;Total ram usage:        0 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    8
  7152 ;; This function calls:
  7153 ;;		_I2C_Master_Wait
  7154 ;; This function is called by:
  7155 ;;		_I2C_ColorSens_Init
  7156 ;;		_date_time
  7157 ;;		_read_colorsensor
  7158 ;;		_I2C_ColorSens_ClearInt
  7159 ;;		_set_time
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           	psect	text31
  7164  00312E                     __ptext31:
  7165                           	opt stack 0
  7166  00312E                     _I2C_Master_Start:
  7167                           	opt stack 20
  7168                           
  7169                           ;I2C.c: 32: I2C_Master_Wait();
  7170                           
  7171                           ;incstack = 0
  7172  00312E  EC5A  F018         	call	_I2C_Master_Wait	;wreg free
  7173                           
  7174                           ;I2C.c: 33: SEN = 1;
  7175  003132  80C5               	bsf	4037,0,c	;volatile
  7176  003134  0012               	return		;funcret
  7177  003136                     __end_of_I2C_Master_Start:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon	equ	0xFF2
  7186                           intcon2	equ	0xFF1
  7187                           intcon3	equ	0xFF0
  7188                           postinc0	equ	0xFEE
  7189                           wreg	equ	0xFE8
  7190                           indf2	equ	0xFDF
  7191                           postinc2	equ	0xFDE
  7192                           postdec2	equ	0xFDD
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _I2C_Master_Wait *****************
  7198 ;; Defined at:
  7199 ;;		line 25 in file "I2C.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;Total ram usage:        1 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    7
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		_I2C_Master_Start
  7224 ;;		_I2C_Master_Stop
  7225 ;;		_I2C_Master_Write
  7226 ;;		_I2C_Master_Read
  7227 ;;		_I2C_Master_RepeatedStart
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text32
  7232  0030B4                     __ptext32:
  7233                           	opt stack 0
  7234  0030B4                     _I2C_Master_Wait:
  7235                           	opt stack 20
  7236  0030B4                     l34:
  7237  0030B4  B4C7               	btfsc	4039,2,c	;volatile
  7238  0030B6  D7FE               	goto	l34
  7239  0030B8  CFC5 F0D8          	movff	4037,??_I2C_Master_Wait	;volatile
  7240  0030BC  0E1F               	movlw	31
  7241  0030BE  0100               	movlb	0	; () banked
  7242  0030C0  17D8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7243  0030C2  B4D8               	btfsc	status,2,c
  7244  0030C4  0012               	return	
  7245  0030C6  D7F6               	goto	l34
  7246  0030C8                     __end_of_I2C_Master_Wait:
  7247                           	opt stack 0
  7248                           tblptru	equ	0xFF8
  7249                           tblptrh	equ	0xFF7
  7250                           tblptrl	equ	0xFF6
  7251                           tablat	equ	0xFF5
  7252                           prodh	equ	0xFF4
  7253                           prodl	equ	0xFF3
  7254                           intcon	equ	0xFF2
  7255                           intcon2	equ	0xFF1
  7256                           intcon3	equ	0xFF0
  7257                           postinc0	equ	0xFEE
  7258                           wreg	equ	0xFE8
  7259                           indf2	equ	0xFDF
  7260                           postinc2	equ	0xFDE
  7261                           postdec2	equ	0xFDD
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266 ;; *************** function _isr *****************
  7267 ;; Defined at:
  7268 ;;		line 98 in file "main.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;		None
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  i               1  114[COMRAM] unsigned char 
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  1    wreg      void 
  7275 ;; Registers used:
  7276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;Total ram usage:       19 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    6
  7289 ;; This function calls:
  7290 ;;		_dec_to_hex
  7291 ;;		_read_time
  7292 ;;		i2___wmul
  7293 ;;		i2_lcdInst
  7294 ;;		i2_printf
  7295 ;;		i2_read_colorsensor
  7296 ;;		i2_servo_rotate1
  7297 ;; This function is called by:
  7298 ;;		Interrupt level 2
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           	psect	intcode
  7303  000008                     __pintcode:
  7304                           	opt stack 0
  7305  000008                     _isr:
  7306                           	opt stack 20
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;incstack = 0
  7310  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7311  00000A  EDF4  F001         	call	int_func,f	;refresh shadow registers
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon2	equ	0xFF1
  7320                           intcon3	equ	0xFF0
  7321                           postinc0	equ	0xFEE
  7322                           wreg	equ	0xFE8
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330                           	psect	intcode_body
  7331  0003E8                     __pintcode_body:
  7332                           	opt stack 20
  7333  0003E8                     int_func:
  7334                           	opt stack 20
  7335  0003E8  0006               	pop		; remove dummy address from shadow register refresh
  7336  0003EA  CFFA F0CA          	movff	pclath,??_isr+2
  7337  0003EE  CFFB F0CB          	movff	pclatu,??_isr+3
  7338  0003F2  CFE9 F0CC          	movff	fsr0l,??_isr+4
  7339  0003F6  CFEA F0CD          	movff	fsr0h,??_isr+5
  7340  0003FA  CFE1 F0CE          	movff	fsr1l,??_isr+6
  7341  0003FE  CFE2 F0CF          	movff	fsr1h,??_isr+7
  7342  000402  CFD9 F0D0          	movff	fsr2l,??_isr+8
  7343  000406  CFDA F0D1          	movff	fsr2h,??_isr+9
  7344  00040A  CFF3 F0D2          	movff	prodl,??_isr+10
  7345  00040E  CFF4 F0D3          	movff	prodh,??_isr+11
  7346  000412  CFF6 F0D4          	movff	tblptrl,??_isr+12
  7347  000416  CFF7 F0D5          	movff	tblptrh,??_isr+13
  7348  00041A  CFF8 F0D6          	movff	tblptru,??_isr+14
  7349  00041E  CFF5 F0D7          	movff	tablat,??_isr+15
  7350                           
  7351                           ;main.c: 99: if (INT1IF) {
  7352  000422  B0F0               	btfsc	intcon3,0,c	;volatile
  7353  000424  D10A               	goto	i2l4830
  7354  000426  D135               	goto	i2l278
  7355  000428                     i2l280:
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;main.c: 102: LATAbits.LATA2 = 1;
  7359  000428  8489               	bsf	3977,2,c	;volatile
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;main.c: 107: read_time();
  7363  00042A  EC68  F015         	call	_read_time	;wreg free
  7364                           
  7365                           ;main.c: 108: start_time[1] = time[1];
  7366  00042E  C093  F07B         	movff	_time+1,_start_time+1
  7367                           
  7368                           ;main.c: 109: start_time[0] = time[0];
  7369  000432  C092  F07A         	movff	_time,_start_time
  7370                           
  7371                           ;main.c: 110: for(i=0;i<5;i++){
  7372  000436  0E00               	movlw	0
  7373  000438  6E79               	movwf	_i+1,c
  7374  00043A  0E00               	movlw	0
  7375  00043C  6E78               	movwf	_i,c
  7376  00043E                     i2l4756:
  7377  00043E  BE79               	btfsc	_i+1,7,c
  7378  000440  D006               	goto	i2l4760
  7379  000442  5079               	movf	_i+1,w,c
  7380  000444  E114               	bnz	i2l4766
  7381  000446  0E05               	movlw	5
  7382  000448  5C78               	subwf	_i,w,c
  7383  00044A  B0D8               	btfsc	status,0,c
  7384  00044C  D010               	goto	i2l4766
  7385  00044E                     i2l4760:
  7386                           
  7387                           ;main.c: 111: bottle_count_array[i] = 0;
  7388  00044E  90D8               	bcf	status,0,c
  7389  000450  3478               	rlcf	_i,w,c
  7390  000452  6ED9               	movwf	fsr2l,c
  7391  000454  3479               	rlcf	_i+1,w,c
  7392  000456  6EDA               	movwf	fsr2h,c
  7393  000458  0E80               	movlw	low _bottle_count_array
  7394  00045A  26D9               	addwf	fsr2l,f,c
  7395  00045C  0E00               	movlw	high _bottle_count_array
  7396  00045E  22DA               	addwfc	fsr2h,f,c
  7397  000460  0E00               	movlw	0
  7398  000462  6EDE               	movwf	postinc2,c
  7399  000464  0E00               	movlw	0
  7400  000466  6EDD               	movwf	postdec2,c
  7401  000468  4A78               	infsnz	_i,f,c
  7402  00046A  2A79               	incf	_i+1,f,c
  7403  00046C  D7E8               	goto	i2l4756
  7404  00046E                     i2l4766:
  7405                           
  7406                           ;main.c: 112: }
  7407                           ;main.c: 113: lcdInst(0b00000001);
  7408  00046E  0E01               	movlw	1
  7409  000470  EC83  F018         	call	i2_lcdInst
  7410                           
  7411                           ;main.c: 114: _delay((unsigned long)((100)*(10000000/4000.0)));
  7412  000474  0E02               	movlw	2
  7413  000476  0100               	movlb	0	; () banked
  7414  000478  6FC9               	movwf	(??_isr+1)& (0+255),b
  7415  00047A  0E45               	movlw	69
  7416  00047C  0100               	movlb	0	; () banked
  7417  00047E  6FC8               	movwf	??_isr& (0+255),b
  7418  000480  0EA9               	movlw	169
  7419  000482                     i2u548_47:
  7420  000482  2EE8               	decfsz	wreg,f,c
  7421  000484  D7FE               	bra	i2u548_47
  7422  000486  2FC8               	decfsz	??_isr& (0+255),f,b
  7423  000488  D7FC               	bra	i2u548_47
  7424  00048A  2FC9               	decfsz	(??_isr+1)& (0+255),f,b
  7425  00048C  D7FA               	bra	i2u548_47
  7426  00048E  D000               	nop2	
  7427                           
  7428                           ;main.c: 115: lcdInst(0b10000000);
  7429  000490  0E80               	movlw	128
  7430  000492  EC83  F018         	call	i2_lcdInst
  7431                           
  7432                           ;main.c: 116: printf("running");
  7433  000496  0EEB               	movlw	low STR_1
  7434  000498  6E0D               	movwf	i2printf@f,c
  7435  00049A  0EFF               	movlw	high STR_1
  7436  00049C  6E0E               	movwf	i2printf@f+1,c
  7437  00049E  ECAE  F005         	call	i2_printf	;wreg free
  7438                           
  7439                           ;main.c: 117: bottle_count_disp = -1;
  7440  0004A2  0100               	movlb	0	; () banked
  7441  0004A4  69ED               	setf	_bottle_count_disp& (0+255),b
  7442  0004A6  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;main.c: 118: curr_state = OPERATION;
  7446  0004A8  0E02               	movlw	2
  7447  0004AA  D0B6               	goto	L14
  7448  0004AC                     i2l4778:
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;main.c: 121: bottle_count_disp += 1;
  7452  0004AC  0100               	movlb	0	; () banked
  7453  0004AE  4BED               	infsnz	_bottle_count_disp& (0+255),f,b
  7454  0004B0  2BEE               	incf	(_bottle_count_disp+1)& (0+255),f,b
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;main.c: 122: curr_state = BOTTLECOUNT;
  7458  0004B2  0E05               	movlw	5
  7459  0004B4  0100               	movlb	0	; () banked
  7460  0004B6  6FC7               	movwf	_curr_state& (0+255),b
  7461  0004B8                     i2l4782:
  7462  0004B8  0E1F               	movlw	31
  7463  0004BA  1881               	xorwf	3969,w,c	;volatile
  7464  0004BC  A4D8               	btfss	status,2,c
  7465  0004BE  D0E7               	goto	i2l283
  7466  0004C0  D7FB               	goto	i2l4782
  7467  0004C2                     i2l4784:
  7468                           
  7469                           ;main.c: 126: operation_time = etime - stime;
  7470  0004C2  C07C  F0C8         	movff	_stime,??_isr
  7471  0004C6  C07D  F0C9         	movff	_stime+1,??_isr+1
  7472  0004CA  0100               	movlb	0	; () banked
  7473  0004CC  1FC8               	comf	??_isr& (0+255),f,b
  7474  0004CE  1FC9               	comf	(??_isr+1)& (0+255),f,b
  7475  0004D0  4BC8               	infsnz	??_isr& (0+255),f,b
  7476  0004D2  2BC9               	incf	(??_isr+1)& (0+255),f,b
  7477  0004D4  0100               	movlb	0	; () banked
  7478  0004D6  51B3               	movf	_etime& (0+255),w,b
  7479  0004D8  0100               	movlb	0	; () banked
  7480  0004DA  25C8               	addwf	??_isr& (0+255),w,b
  7481  0004DC  0100               	movlb	0	; () banked
  7482  0004DE  6FC3               	movwf	_operation_time& (0+255),b
  7483  0004E0  0100               	movlb	0	; () banked
  7484  0004E2  51B4               	movf	(_etime+1)& (0+255),w,b
  7485  0004E4  0100               	movlb	0	; () banked
  7486  0004E6  21C9               	addwfc	(??_isr+1)& (0+255),w,b
  7487  0004E8  0100               	movlb	0	; () banked
  7488  0004EA  6FC4               	movwf	(_operation_time+1)& (0+255),b
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;main.c: 127: bottle_count_disp = -1;
  7492  0004EC  0100               	movlb	0	; () banked
  7493  0004EE  69ED               	setf	_bottle_count_disp& (0+255),b
  7494  0004F0  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;main.c: 128: curr_state = BOTTLETIME;
  7498  0004F2  0E06               	movlw	6
  7499  0004F4  D091               	goto	L14
  7500  0004F6                     i2l289:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;main.c: 131: bottle_count_disp = -1;
  7504  0004F6  0100               	movlb	0	; () banked
  7505  0004F8  69ED               	setf	_bottle_count_disp& (0+255),b
  7506  0004FA  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;main.c: 132: curr_state = DATETIME;
  7510  0004FC  0E04               	movlw	4
  7511  0004FE  D08C               	goto	L14
  7512  000500                     i2l290:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;main.c: 135: LATAbits.LATA2 = 0;
  7516  000500  9489               	bcf	3977,2,c	;volatile
  7517                           
  7518                           ;main.c: 136: TMR0IE = 0;
  7519  000502  9AF2               	bcf	intcon,5,c	;volatile
  7520                           
  7521                           ;main.c: 137: TMR0ON = 0;
  7522  000504  9ED5               	bcf	4053,7,c	;volatile
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;main.c: 139: read_time();
  7526  000506  EC68  F015         	call	_read_time	;wreg free
  7527                           
  7528                           ;main.c: 140: end_time[1] = time[1];
  7529  00050A  C093  F077         	movff	_time+1,_end_time+1
  7530                           
  7531                           ;main.c: 141: end_time[0] = time[0];
  7532  00050E  C092  F076         	movff	_time,_end_time
  7533                           
  7534                           ;main.c: 142: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7535  000512  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7536  000516  6A64               	clrf	dec_to_hex@num+1,c
  7537  000518  EC34  F00D         	call	_dec_to_hex	;wreg free
  7538  00051C  C063  F074         	movff	?_dec_to_hex,_isr$1371
  7539  000520  C064  F075         	movff	?_dec_to_hex+1,_isr$1371+1
  7540                           
  7541                           ;main.c: 142: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7542  000524  C074  F001         	movff	_isr$1371,i2___wmul@multiplier
  7543  000528  C075  F002         	movff	_isr$1371+1,i2___wmul@multiplier+1
  7544  00052C  0E00               	movlw	0
  7545  00052E  6E04               	movwf	i2___wmul@multiplicand+1,c
  7546  000530  0E3C               	movlw	60
  7547  000532  6E03               	movwf	i2___wmul@multiplicand,c
  7548  000534  EC09  F018         	call	i2___wmul	;wreg free
  7549  000538  C001  F0C8         	movff	?i2___wmul,??_isr
  7550  00053C  C002  F0C9         	movff	?i2___wmul+1,??_isr+1
  7551  000540  C07A  F063         	movff	_start_time,dec_to_hex@num
  7552  000544  6A64               	clrf	dec_to_hex@num+1,c
  7553  000546  EC34  F00D         	call	_dec_to_hex	;wreg free
  7554  00054A  5063               	movf	?_dec_to_hex,w,c
  7555  00054C  0100               	movlb	0	; () banked
  7556  00054E  25C8               	addwf	??_isr& (0+255),w,b
  7557  000550  6E7C               	movwf	_stime,c
  7558  000552  5064               	movf	?_dec_to_hex+1,w,c
  7559  000554  0100               	movlb	0	; () banked
  7560  000556  21C9               	addwfc	(??_isr+1)& (0+255),w,b
  7561  000558  6E7D               	movwf	_stime+1,c
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;main.c: 143: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7565  00055A  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7566  00055E  6A64               	clrf	dec_to_hex@num+1,c
  7567  000560  EC34  F00D         	call	_dec_to_hex	;wreg free
  7568  000564  C063  F074         	movff	?_dec_to_hex,_isr$1371
  7569  000568  C064  F075         	movff	?_dec_to_hex+1,_isr$1371+1
  7570                           
  7571                           ;main.c: 143: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7572  00056C  C074  F001         	movff	_isr$1371,i2___wmul@multiplier
  7573  000570  C075  F002         	movff	_isr$1371+1,i2___wmul@multiplier+1
  7574  000574  0E00               	movlw	0
  7575  000576  6E04               	movwf	i2___wmul@multiplicand+1,c
  7576  000578  0E3C               	movlw	60
  7577  00057A  6E03               	movwf	i2___wmul@multiplicand,c
  7578  00057C  EC09  F018         	call	i2___wmul	;wreg free
  7579  000580  C001  F0C8         	movff	?i2___wmul,??_isr
  7580  000584  C002  F0C9         	movff	?i2___wmul+1,??_isr+1
  7581  000588  C076  F063         	movff	_end_time,dec_to_hex@num
  7582  00058C  6A64               	clrf	dec_to_hex@num+1,c
  7583  00058E  EC34  F00D         	call	_dec_to_hex	;wreg free
  7584  000592  5063               	movf	?_dec_to_hex,w,c
  7585  000594  0100               	movlb	0	; () banked
  7586  000596  25C8               	addwf	??_isr& (0+255),w,b
  7587  000598  0100               	movlb	0	; () banked
  7588  00059A  6FB3               	movwf	_etime& (0+255),b
  7589  00059C  5064               	movf	?_dec_to_hex+1,w,c
  7590  00059E  0100               	movlb	0	; () banked
  7591  0005A0  21C9               	addwfc	(??_isr+1)& (0+255),w,b
  7592  0005A2  0100               	movlb	0	; () banked
  7593  0005A4  6FB4               	movwf	(_etime+1)& (0+255),b
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;main.c: 144: lcdInst(0b00000001);
  7597  0005A6  0E01               	movlw	1
  7598  0005A8  EC83  F018         	call	i2_lcdInst
  7599                           
  7600                           ;main.c: 145: bottle_count_disp = -1;
  7601  0005AC  0100               	movlb	0	; () banked
  7602  0005AE  69ED               	setf	_bottle_count_disp& (0+255),b
  7603  0005B0  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;main.c: 146: curr_state = OPERATIONEND;
  7607  0005B2  0E03               	movlw	3
  7608  0005B4  D031               	goto	L14
  7609  0005B6                     i2l4812:
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;main.c: 149: read_colorsensor();
  7613  0005B6  EC04  F010         	call	i2_read_colorsensor	;wreg free
  7614                           
  7615                           ;main.c: 150: lcdInst(0b10000000);
  7616  0005BA  0E80               	movlw	128
  7617  0005BC  EC83  F018         	call	i2_lcdInst
  7618                           
  7619                           ;main.c: 151: printf("C%u R%u                ", color[0], color[1]);
  7620  0005C0  0EC0               	movlw	low STR_2
  7621  0005C2  6E0D               	movwf	i2printf@f,c
  7622  0005C4  0EFE               	movlw	high STR_2
  7623  0005C6  6E0E               	movwf	i2printf@f+1,c
  7624  0005C8  C08A  F00F         	movff	_color,?i2_printf+2
  7625  0005CC  C08B  F010         	movff	_color+1,?i2_printf+3
  7626  0005D0  C08C  F011         	movff	_color+2,?i2_printf+4
  7627  0005D4  C08D  F012         	movff	_color+3,?i2_printf+5
  7628  0005D8  ECAE  F005         	call	i2_printf	;wreg free
  7629                           
  7630                           ;main.c: 152: lcdInst(0b11000000);
  7631  0005DC  0EC0               	movlw	192
  7632  0005DE  EC83  F018         	call	i2_lcdInst
  7633                           
  7634                           ;main.c: 153: printf("G%u B%u                ", color[2], color[3]);
  7635  0005E2  0EA8               	movlw	low STR_3
  7636  0005E4  6E0D               	movwf	i2printf@f,c
  7637  0005E6  0EFE               	movlw	high STR_3
  7638  0005E8  6E0E               	movwf	i2printf@f+1,c
  7639  0005EA  C08E  F00F         	movff	_color+4,?i2_printf+2
  7640  0005EE  C08F  F010         	movff	_color+5,?i2_printf+3
  7641  0005F2  C090  F011         	movff	_color+6,?i2_printf+4
  7642  0005F6  C091  F012         	movff	_color+7,?i2_printf+5
  7643  0005FA  ECAE  F005         	call	i2_printf	;wreg free
  7644                           
  7645                           ;main.c: 154: break;
  7646  0005FE  D047               	goto	i2l283
  7647  000600                     i2l292:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;main.c: 156: LATAbits.LATA2 = 0;
  7651  000600  9489               	bcf	3977,2,c	;volatile
  7652                           
  7653                           ;main.c: 157: (INTCONbits.GIE = 0);
  7654  000602  9EF2               	bcf	intcon,7,c	;volatile
  7655                           
  7656                           ;main.c: 158: TMR0ON = 0;
  7657  000604  9ED5               	bcf	4053,7,c	;volatile
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;main.c: 159: lcdInst(0b00000001);
  7661  000606  0E01               	movlw	1
  7662  000608  EC83  F018         	call	i2_lcdInst
  7663                           
  7664                           ;main.c: 160: curr_state = EMERGENCYSTOP;
  7665  00060C  0E01               	movlw	1
  7666  00060E  D004               	goto	L14
  7667  000610                     i2l293:
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;main.c: 163: bottle_count_disp = -1;
  7671  000610  0100               	movlb	0	; () banked
  7672  000612  69ED               	setf	_bottle_count_disp& (0+255),b
  7673  000614  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;main.c: 164: curr_state = STANDBY;
  7677  000616  0E00               	movlw	0
  7678  000618                     L14:
  7679  000618  0100               	movlb	0	; () banked
  7680  00061A  6FC7               	movwf	_curr_state& (0+255),b
  7681                           
  7682                           ;main.c: 166: break;
  7683  00061C  D038               	goto	i2l283
  7684  00061E                     i2l4824:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;main.c: 168: servo_rotate1(8);
  7688  00061E  0E00               	movlw	0
  7689  000620  6E02               	movwf	i2servo_rotate1@degree+1,c
  7690  000622  0E08               	movlw	8
  7691  000624  6E01               	movwf	i2servo_rotate1@degree,c
  7692  000626  EC79  F013         	call	i2_servo_rotate1	;wreg free
  7693                           
  7694                           ;main.c: 169: break;
  7695  00062A  D031               	goto	i2l283
  7696  00062C                     i2l4826:
  7697                           
  7698                           ;main.c: 171: servo_rotate1(18);
  7699  00062C  0E00               	movlw	0
  7700  00062E  6E02               	movwf	i2servo_rotate1@degree+1,c
  7701  000630  0E12               	movlw	18
  7702  000632  6E01               	movwf	i2servo_rotate1@degree,c
  7703  000634  EC79  F013         	call	i2_servo_rotate1	;wreg free
  7704                           
  7705                           ;main.c: 173: }
  7706                           
  7707                           ;main.c: 172: break;
  7708  000638  D02A               	goto	i2l283
  7709  00063A                     i2l4830:
  7710  00063A  3881               	swapf	3969,w,c	;volatile
  7711  00063C  0B0F               	andlw	15
  7712  00063E  0100               	movlb	0	; () banked
  7713  000640  6FC8               	movwf	??_isr& (0+255),b
  7714  000642  6BC9               	clrf	(??_isr+1)& (0+255),b
  7715                           
  7716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7717                           ; Switch size 1, requested type "space"
  7718                           ; Number of cases is 1, Range of values is 0 to 0
  7719                           ; switch strategies available:
  7720                           ; Name         Instructions Cycles
  7721                           ; simple_byte            4     3 (average)
  7722                           ;	Chosen strategy is simple_byte
  7723  000644  0100               	movlb	0	; () banked
  7724  000646  51C9               	movf	(??_isr+1)& (0+255),w,b
  7725  000648  0A00               	xorlw	0	; case 0
  7726  00064A  A4D8               	btfss	status,2,c
  7727  00064C  D020               	goto	i2l283
  7728                           
  7729                           ; BSR set to: 0
  7730                           ; Switch size 1, requested type "space"
  7731                           ; Number of cases is 10, Range of values is 0 to 14
  7732                           ; switch strategies available:
  7733                           ; Name         Instructions Cycles
  7734                           ; simple_byte           31    16 (average)
  7735                           ;	Chosen strategy is simple_byte
  7736  00064E  0100               	movlb	0	; () banked
  7737  000650  51C8               	movf	??_isr& (0+255),w,b
  7738  000652  0A00               	xorlw	0	; case 0
  7739  000654  B4D8               	btfsc	status,2,c
  7740  000656  D6E8               	goto	i2l280
  7741  000658  0A01               	xorlw	1	; case 1
  7742  00065A  B4D8               	btfsc	status,2,c
  7743  00065C  D727               	goto	i2l4778
  7744  00065E  0A03               	xorlw	3	; case 2
  7745  000660  B4D8               	btfsc	status,2,c
  7746  000662  D72F               	goto	i2l4784
  7747  000664  0A01               	xorlw	1	; case 3
  7748  000666  B4D8               	btfsc	status,2,c
  7749  000668  D746               	goto	i2l289
  7750  00066A  0A07               	xorlw	7	; case 4
  7751  00066C  B4D8               	btfsc	status,2,c
  7752  00066E  D748               	goto	i2l290
  7753  000670  0A01               	xorlw	1	; case 5
  7754  000672  B4D8               	btfsc	status,2,c
  7755  000674  D7A0               	goto	i2l4812
  7756  000676  0A02               	xorlw	2	; case 7
  7757  000678  B4D8               	btfsc	status,2,c
  7758  00067A  D7D1               	goto	i2l4824
  7759  00067C  0A0C               	xorlw	12	; case 11
  7760  00067E  B4D8               	btfsc	status,2,c
  7761  000680  D7D5               	goto	i2l4826
  7762  000682  0A07               	xorlw	7	; case 12
  7763  000684  B4D8               	btfsc	status,2,c
  7764  000686  D7BC               	goto	i2l292
  7765  000688  0A02               	xorlw	2	; case 14
  7766  00068A  B4D8               	btfsc	status,2,c
  7767  00068C  D7C1               	goto	i2l293
  7768  00068E                     i2l283:
  7769                           
  7770                           ;main.c: 174: INT1IF = 0;
  7771  00068E  90F0               	bcf	intcon3,0,c	;volatile
  7772                           
  7773                           ;main.c: 175: }
  7774  000690  D076               	goto	i2l304
  7775  000692                     i2l278:
  7776                           
  7777                           ;main.c: 176: else if (TMR0IF){
  7778  000692  A4F2               	btfss	intcon,2,c	;volatile
  7779  000694  D05A               	goto	i2l4854
  7780                           
  7781                           ;main.c: 177: LATAbits.LATA2 = 0;
  7782  000696  9489               	bcf	3977,2,c	;volatile
  7783                           
  7784                           ;main.c: 178: TMR0ON = 0;
  7785  000698  9ED5               	bcf	4053,7,c	;volatile
  7786                           
  7787                           ;main.c: 179: read_time();
  7788  00069A  EC68  F015         	call	_read_time	;wreg free
  7789                           
  7790                           ;main.c: 180: end_time[1] = time[1];
  7791  00069E  C093  F077         	movff	_time+1,_end_time+1
  7792                           
  7793                           ;main.c: 181: end_time[0] = time[0];
  7794  0006A2  C092  F076         	movff	_time,_end_time
  7795                           
  7796                           ;main.c: 182: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7797  0006A6  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7798  0006AA  6A64               	clrf	dec_to_hex@num+1,c
  7799  0006AC  EC34  F00D         	call	_dec_to_hex	;wreg free
  7800  0006B0  C063  F074         	movff	?_dec_to_hex,_isr$1371
  7801  0006B4  C064  F075         	movff	?_dec_to_hex+1,_isr$1371+1
  7802                           
  7803                           ;main.c: 182: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7804  0006B8  C074  F001         	movff	_isr$1371,i2___wmul@multiplier
  7805  0006BC  C075  F002         	movff	_isr$1371+1,i2___wmul@multiplier+1
  7806  0006C0  0E00               	movlw	0
  7807  0006C2  6E04               	movwf	i2___wmul@multiplicand+1,c
  7808  0006C4  0E3C               	movlw	60
  7809  0006C6  6E03               	movwf	i2___wmul@multiplicand,c
  7810  0006C8  EC09  F018         	call	i2___wmul	;wreg free
  7811  0006CC  C001  F0C8         	movff	?i2___wmul,??_isr
  7812  0006D0  C002  F0C9         	movff	?i2___wmul+1,??_isr+1
  7813  0006D4  C07A  F063         	movff	_start_time,dec_to_hex@num
  7814  0006D8  6A64               	clrf	dec_to_hex@num+1,c
  7815  0006DA  EC34  F00D         	call	_dec_to_hex	;wreg free
  7816  0006DE  5063               	movf	?_dec_to_hex,w,c
  7817  0006E0  0100               	movlb	0	; () banked
  7818  0006E2  25C8               	addwf	??_isr& (0+255),w,b
  7819  0006E4  6E7C               	movwf	_stime,c
  7820  0006E6  5064               	movf	?_dec_to_hex+1,w,c
  7821  0006E8  0100               	movlb	0	; () banked
  7822  0006EA  21C9               	addwfc	(??_isr+1)& (0+255),w,b
  7823  0006EC  6E7D               	movwf	_stime+1,c
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;main.c: 183: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7827  0006EE  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7828  0006F2  6A64               	clrf	dec_to_hex@num+1,c
  7829  0006F4  EC34  F00D         	call	_dec_to_hex	;wreg free
  7830  0006F8  C063  F074         	movff	?_dec_to_hex,_isr$1371
  7831  0006FC  C064  F075         	movff	?_dec_to_hex+1,_isr$1371+1
  7832                           
  7833                           ;main.c: 183: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7834  000700  C074  F001         	movff	_isr$1371,i2___wmul@multiplier
  7835  000704  C075  F002         	movff	_isr$1371+1,i2___wmul@multiplier+1
  7836  000708  0E00               	movlw	0
  7837  00070A  6E04               	movwf	i2___wmul@multiplicand+1,c
  7838  00070C  0E3C               	movlw	60
  7839  00070E  6E03               	movwf	i2___wmul@multiplicand,c
  7840  000710  EC09  F018         	call	i2___wmul	;wreg free
  7841  000714  C001  F0C8         	movff	?i2___wmul,??_isr
  7842  000718  C002  F0C9         	movff	?i2___wmul+1,??_isr+1
  7843  00071C  C076  F063         	movff	_end_time,dec_to_hex@num
  7844  000720  6A64               	clrf	dec_to_hex@num+1,c
  7845  000722  EC34  F00D         	call	_dec_to_hex	;wreg free
  7846  000726  5063               	movf	?_dec_to_hex,w,c
  7847  000728  0100               	movlb	0	; () banked
  7848  00072A  25C8               	addwf	??_isr& (0+255),w,b
  7849  00072C  0100               	movlb	0	; () banked
  7850  00072E  6FB3               	movwf	_etime& (0+255),b
  7851  000730  5064               	movf	?_dec_to_hex+1,w,c
  7852  000732  0100               	movlb	0	; () banked
  7853  000734  21C9               	addwfc	(??_isr+1)& (0+255),w,b
  7854  000736  0100               	movlb	0	; () banked
  7855  000738  6FB4               	movwf	(_etime+1)& (0+255),b
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;main.c: 184: curr_state = OPERATIONEND;
  7859  00073A  0E03               	movlw	3
  7860  00073C  0100               	movlb	0	; () banked
  7861  00073E  6FC7               	movwf	_curr_state& (0+255),b
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;main.c: 185: bottle_count_disp = -1;
  7865  000740  0100               	movlb	0	; () banked
  7866  000742  69ED               	setf	_bottle_count_disp& (0+255),b
  7867  000744  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 186: TMR0IF = 0;
  7871  000746  94F2               	bcf	intcon,2,c	;volatile
  7872                           
  7873                           ;main.c: 187: }
  7874  000748  D01A               	goto	i2l304
  7875  00074A                     i2l4854:
  7876                           
  7877                           ;main.c: 190: lcdInst(0b10000000);
  7878  00074A  0E80               	movlw	128
  7879  00074C  EC83  F018         	call	i2_lcdInst
  7880                           
  7881                           ;main.c: 191: printf("ERR: BAD ISR");
  7882  000750  0ED5               	movlw	low STR_4
  7883  000752  6E0D               	movwf	i2printf@f,c
  7884  000754  0EFF               	movlw	high STR_4
  7885  000756  6E0E               	movwf	i2printf@f+1,c
  7886  000758  ECAE  F005         	call	i2_printf	;wreg free
  7887                           
  7888                           ;main.c: 192: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  7889  00075C  0E00               	movlw	0
  7890  00075E  6E73               	movwf	isr@i,c
  7891  000760                     i2l4860:
  7892  000760  0E63               	movlw	99
  7893  000762  6473               	cpfsgt	isr@i,c
  7894  000764  D001               	goto	i2l4864
  7895  000766  D7F1               	goto	i2l4854
  7896  000768                     i2l4864:
  7897  000768  0E21               	movlw	33
  7898  00076A  0100               	movlb	0	; () banked
  7899  00076C  6FC8               	movwf	??_isr& (0+255),b
  7900  00076E  0E76               	movlw	118
  7901  000770                     i2u549_47:
  7902  000770  2EE8               	decfsz	wreg,f,c
  7903  000772  D7FE               	bra	i2u549_47
  7904  000774  2FC8               	decfsz	??_isr& (0+255),f,b
  7905  000776  D7FC               	bra	i2u549_47
  7906  000778  F000               	nop	
  7907  00077A  2A73               	incf	isr@i,f,c
  7908  00077C  D7F1               	goto	i2l4860
  7909  00077E                     i2l304:
  7910  00077E  C0D7  FFF5         	movff	??_isr+15,tablat
  7911  000782  C0D6  FFF8         	movff	??_isr+14,tblptru
  7912  000786  C0D5  FFF7         	movff	??_isr+13,tblptrh
  7913  00078A  C0D4  FFF6         	movff	??_isr+12,tblptrl
  7914  00078E  C0D3  FFF4         	movff	??_isr+11,prodh
  7915  000792  C0D2  FFF3         	movff	??_isr+10,prodl
  7916  000796  C0D1  FFDA         	movff	??_isr+9,fsr2h
  7917  00079A  C0D0  FFD9         	movff	??_isr+8,fsr2l
  7918  00079E  C0CF  FFE2         	movff	??_isr+7,fsr1h
  7919  0007A2  C0CE  FFE1         	movff	??_isr+6,fsr1l
  7920  0007A6  C0CD  FFEA         	movff	??_isr+5,fsr0h
  7921  0007AA  C0CC  FFE9         	movff	??_isr+4,fsr0l
  7922  0007AE  C0CB  FFFB         	movff	??_isr+3,pclatu
  7923  0007B2  C0CA  FFFA         	movff	??_isr+2,pclath
  7924  0007B6  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7925  0007B8  0011               	retfie		f
  7926  0007BA                     __end_of_isr:
  7927                           	opt stack 0
  7928                           pclatu	equ	0xFFB
  7929                           pclath	equ	0xFFA
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           intcon2	equ	0xFF1
  7938                           intcon3	equ	0xFF0
  7939                           postinc0	equ	0xFEE
  7940                           fsr0h	equ	0xFEA
  7941                           fsr0l	equ	0xFE9
  7942                           wreg	equ	0xFE8
  7943                           fsr1h	equ	0xFE2
  7944                           fsr1l	equ	0xFE1
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function i2_servo_rotate1 *****************
  7953 ;; Defined at:
  7954 ;;		line 436 in file "main.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  degree          2    0[COMRAM] int 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  servo_rotate    2    5[COMRAM] int 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  1    wreg      void 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2, status,0
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;Total ram usage:        7 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_isr
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text34
  7982  0026F2                     __ptext34:
  7983                           	opt stack 0
  7984  0026F2                     i2_servo_rotate1:
  7985                           	opt stack 25
  7986                           
  7987                           ;main.c: 441: int duty = degree;
  7988                           
  7989                           ;incstack = 0
  7990  0026F2  C001  F006         	movff	i2servo_rotate1@degree,i2servo_rotate1@duty
  7991  0026F6  C002  F007         	movff	i2servo_rotate1@degree+1,i2servo_rotate1@duty+1
  7992                           
  7993                           ;main.c: 442: for (i=0; i<20; i++) {
  7994  0026FA  0E00               	movlw	0
  7995  0026FC  6E79               	movwf	_i+1,c
  7996  0026FE  0E00               	movlw	0
  7997  002700  6E78               	movwf	_i,c
  7998  002702                     i2l4504:
  7999  002702  BE79               	btfsc	_i+1,7,c
  8000  002704  D006               	goto	i2l397
  8001  002706  5079               	movf	_i+1,w,c
  8002  002708  E147               	bnz	i2l405
  8003  00270A  0E14               	movlw	20
  8004  00270C  5C78               	subwf	_i,w,c
  8005  00270E  B0D8               	btfsc	status,0,c
  8006  002710  0012               	return	
  8007  002712                     i2l397:
  8008                           
  8009                           ;main.c: 443: LATCbits.LATC1 = 1;
  8010  002712  828B               	bsf	3979,1,c	;volatile
  8011                           
  8012                           ;main.c: 444: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8013  002714  0E00               	movlw	0
  8014  002716  0100               	movlb	0	; () banked
  8015  002718  6FC0               	movwf	(_j+1)& (0+255),b
  8016  00271A  0E00               	movlw	0
  8017  00271C  6FBF               	movwf	_j& (0+255),b
  8018  00271E  D007               	goto	i2l399
  8019  002720                     i2l4510:
  8020                           
  8021                           ; BSR set to: 0
  8022  002720  0E53               	movlw	83
  8023  002722                     i2u550_47:
  8024  002722  2EE8               	decfsz	wreg,f,c
  8025  002724  D7FE               	bra	i2u550_47
  8026  002726  F000               	nop	
  8027  002728  0100               	movlb	0	; () banked
  8028  00272A  4BBF               	infsnz	_j& (0+255),f,b
  8029  00272C  2BC0               	incf	(_j+1)& (0+255),f,b
  8030  00272E                     i2l399:
  8031                           
  8032                           ; BSR set to: 0
  8033  00272E  5006               	movf	i2servo_rotate1@duty,w,c
  8034  002730  0100               	movlb	0	; () banked
  8035  002732  5DBF               	subwf	_j& (0+255),w,b
  8036  002734  0100               	movlb	0	; () banked
  8037  002736  51C0               	movf	(_j+1)& (0+255),w,b
  8038  002738  0A80               	xorlw	128
  8039  00273A  6E03               	movwf	??i2_servo_rotate1& (0+255),c
  8040  00273C  5007               	movf	i2servo_rotate1@duty+1,w,c
  8041  00273E  0A80               	xorlw	128
  8042  002740  5803               	subwfb	??i2_servo_rotate1& (0+255),w,c
  8043  002742  A0D8               	btfss	status,0,c
  8044  002744  D7ED               	goto	i2l4510
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;main.c: 445: LATCbits.LATC1 = 0;
  8048  002746  928B               	bcf	3979,1,c	;volatile
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;main.c: 446: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8052  002748  0E00               	movlw	0
  8053  00274A  0100               	movlb	0	; () banked
  8054  00274C  6FC0               	movwf	(_j+1)& (0+255),b
  8055  00274E  0E00               	movlw	0
  8056  002750  6FBF               	movwf	_j& (0+255),b
  8057  002752  D007               	goto	i2l402
  8058  002754                     i2l4516:
  8059                           
  8060                           ; BSR set to: 0
  8061  002754  0E53               	movlw	83
  8062  002756                     i2u551_47:
  8063  002756  2EE8               	decfsz	wreg,f,c
  8064  002758  D7FE               	bra	i2u551_47
  8065  00275A  F000               	nop	
  8066  00275C  0100               	movlb	0	; () banked
  8067  00275E  4BBF               	infsnz	_j& (0+255),f,b
  8068  002760  2BC0               	incf	(_j+1)& (0+255),f,b
  8069  002762                     i2l402:
  8070                           
  8071                           ; BSR set to: 0
  8072  002762  C006  F003         	movff	i2servo_rotate1@duty,??i2_servo_rotate1
  8073  002766  C007  F004         	movff	i2servo_rotate1@duty+1,??i2_servo_rotate1+1
  8074  00276A  1E03               	comf	??i2_servo_rotate1,f,c
  8075  00276C  1E04               	comf	??i2_servo_rotate1+1,f,c
  8076  00276E  4A03               	infsnz	??i2_servo_rotate1,f,c
  8077  002770  2A04               	incf	??i2_servo_rotate1+1,f,c
  8078  002772  0EC8               	movlw	200
  8079  002774  2603               	addwf	??i2_servo_rotate1,f,c
  8080  002776  0E00               	movlw	0
  8081  002778  2204               	addwfc	??i2_servo_rotate1+1,f,c
  8082  00277A  5003               	movf	??i2_servo_rotate1,w,c
  8083  00277C  0100               	movlb	0	; () banked
  8084  00277E  5DBF               	subwf	_j& (0+255),w,b
  8085  002780  0100               	movlb	0	; () banked
  8086  002782  51C0               	movf	(_j+1)& (0+255),w,b
  8087  002784  0A80               	xorlw	128
  8088  002786  6E05               	movwf	(??i2_servo_rotate1+2)& (0+255),c
  8089  002788  5004               	movf	??i2_servo_rotate1+1,w,c
  8090  00278A  0A80               	xorlw	128
  8091  00278C  5805               	subwfb	(??i2_servo_rotate1+2)& (0+255),w,c
  8092  00278E  A0D8               	btfss	status,0,c
  8093  002790  D7E1               	goto	i2l4516
  8094                           
  8095                           ; BSR set to: 0
  8096                           
  8097                           ; BSR set to: 0
  8098  002792  4A78               	infsnz	_i,f,c
  8099  002794  2A79               	incf	_i+1,f,c
  8100  002796  D7B5               	goto	i2l4504
  8101  002798                     i2l405:
  8102  002798  0012               	return		;funcret
  8103  00279A                     __end_ofi2_servo_rotate1:
  8104                           	opt stack 0
  8105                           pclatu	equ	0xFFB
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           intcon2	equ	0xFF1
  8115                           intcon3	equ	0xFF0
  8116                           postinc0	equ	0xFEE
  8117                           fsr0h	equ	0xFEA
  8118                           fsr0l	equ	0xFE9
  8119                           wreg	equ	0xFE8
  8120                           fsr1h	equ	0xFE2
  8121                           fsr1l	equ	0xFE1
  8122                           indf2	equ	0xFDF
  8123                           postinc2	equ	0xFDE
  8124                           postdec2	equ	0xFDD
  8125                           fsr2h	equ	0xFDA
  8126                           fsr2l	equ	0xFD9
  8127                           status	equ	0xFD8
  8128                           
  8129 ;; *************** function i2_read_colorsensor *****************
  8130 ;; Defined at:
  8131 ;;		line 451 in file "main.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;		None
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;		None
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  1    wreg      void 
  8138 ;; Registers used:
  8139 ;;		wreg, status,2, status,0, cstack
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8149 ;;Total ram usage:        2 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    2
  8152 ;; This function calls:
  8153 ;;		i2_I2C_Master_Read
  8154 ;;		i2_I2C_Master_Start
  8155 ;;		i2_I2C_Master_Stop
  8156 ;;		i2_I2C_Master_Write
  8157 ;; This function is called by:
  8158 ;;		_isr
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text35
  8163  002008                     __ptext35:
  8164                           	opt stack 0
  8165  002008                     i2_read_colorsensor:
  8166                           	opt stack 23
  8167                           
  8168                           ;main.c: 470: I2C_Master_Start();
  8169                           
  8170                           ;incstack = 0
  8171  002008  EC9F  F018         	call	i2_I2C_Master_Start	;wreg free
  8172                           
  8173                           ;main.c: 471: I2C_Master_Write(0b01010011);
  8174  00200C  0E00               	movlw	0
  8175  00200E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8176  002010  0E53               	movlw	83
  8177  002012  6E02               	movwf	i2I2C_Master_Write@d,c
  8178  002014  EC8E  F018         	call	i2_I2C_Master_Write	;wreg free
  8179                           
  8180                           ;main.c: 472: color_low[0] = I2C_Master_Read(1);
  8181  002018  0E01               	movlw	1
  8182  00201A  ECF6  F017         	call	i2_I2C_Master_Read
  8183  00201E  0100               	movlb	0	; () banked
  8184  002020  6F9D               	movwf	_color_low& (0+255),b
  8185                           
  8186                           ;main.c: 473: color_high[0] = I2C_Master_Read(1);
  8187  002022  0E01               	movlw	1
  8188  002024  ECF6  F017         	call	i2_I2C_Master_Read
  8189  002028  0100               	movlb	0	; () banked
  8190  00202A  6F99               	movwf	_color_high& (0+255),b
  8191                           
  8192                           ;main.c: 474: color_low[1] = I2C_Master_Read(1);
  8193  00202C  0E01               	movlw	1
  8194  00202E  ECF6  F017         	call	i2_I2C_Master_Read
  8195  002032  0100               	movlb	0	; () banked
  8196  002034  6F9E               	movwf	(_color_low+1)& (0+255),b
  8197                           
  8198                           ;main.c: 475: color_high[1] = I2C_Master_Read(1);
  8199  002036  0E01               	movlw	1
  8200  002038  ECF6  F017         	call	i2_I2C_Master_Read
  8201  00203C  0100               	movlb	0	; () banked
  8202  00203E  6F9A               	movwf	(_color_high+1)& (0+255),b
  8203                           
  8204                           ;main.c: 476: color_low[2] = I2C_Master_Read(1);
  8205  002040  0E01               	movlw	1
  8206  002042  ECF6  F017         	call	i2_I2C_Master_Read
  8207  002046  0100               	movlb	0	; () banked
  8208  002048  6F9F               	movwf	(_color_low+2)& (0+255),b
  8209                           
  8210                           ;main.c: 477: color_high[2] = I2C_Master_Read(1);
  8211  00204A  0E01               	movlw	1
  8212  00204C  ECF6  F017         	call	i2_I2C_Master_Read
  8213  002050  0100               	movlb	0	; () banked
  8214  002052  6F9B               	movwf	(_color_high+2)& (0+255),b
  8215                           
  8216                           ;main.c: 478: color_low[3] = I2C_Master_Read(1);
  8217  002054  0E01               	movlw	1
  8218  002056  ECF6  F017         	call	i2_I2C_Master_Read
  8219  00205A  0100               	movlb	0	; () banked
  8220  00205C  6FA0               	movwf	(_color_low+3)& (0+255),b
  8221                           
  8222                           ;main.c: 479: color_high[3] = I2C_Master_Read(0);
  8223  00205E  0E00               	movlw	0
  8224  002060  ECF6  F017         	call	i2_I2C_Master_Read
  8225  002064  0100               	movlb	0	; () banked
  8226  002066  6F9C               	movwf	(_color_high+3)& (0+255),b
  8227                           
  8228                           ;main.c: 480: I2C_Master_Stop();
  8229  002068  EC9B  F018         	call	i2_I2C_Master_Stop	;wreg free
  8230                           
  8231                           ;main.c: 481: color[0] = (color_high[0] << 8)|(color_low[0]);
  8232  00206C  0100               	movlb	0	; () banked
  8233  00206E  519D               	movf	_color_low& (0+255),w,b
  8234  002070  C099  F004         	movff	_color_high,??i2_read_colorsensor
  8235  002074  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8236  002076  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  8237  00207A  6A04               	clrf	??i2_read_colorsensor,c
  8238  00207C  1004               	iorwf	??i2_read_colorsensor,w,c
  8239  00207E  0100               	movlb	0	; () banked
  8240  002080  6F8A               	movwf	_color& (0+255),b
  8241  002082  5005               	movf	??i2_read_colorsensor+1,w,c
  8242  002084  0100               	movlb	0	; () banked
  8243  002086  6F8B               	movwf	(_color+1)& (0+255),b
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;main.c: 482: color[1] = (color_high[1] << 8)|(color_low[1]);
  8247  002088  0100               	movlb	0	; () banked
  8248  00208A  519E               	movf	(_color_low+1)& (0+255),w,b
  8249  00208C  C09A  F004         	movff	_color_high+1,??i2_read_colorsensor
  8250  002090  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8251  002092  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  8252  002096  6A04               	clrf	??i2_read_colorsensor,c
  8253  002098  1004               	iorwf	??i2_read_colorsensor,w,c
  8254  00209A  0100               	movlb	0	; () banked
  8255  00209C  6F8C               	movwf	(_color+2)& (0+255),b
  8256  00209E  5005               	movf	??i2_read_colorsensor+1,w,c
  8257  0020A0  0100               	movlb	0	; () banked
  8258  0020A2  6F8D               	movwf	(_color+3)& (0+255),b
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;main.c: 483: color[2] = (color_high[2] << 8)|(color_low[2]);
  8262  0020A4  0100               	movlb	0	; () banked
  8263  0020A6  519F               	movf	(_color_low+2)& (0+255),w,b
  8264  0020A8  C09B  F004         	movff	_color_high+2,??i2_read_colorsensor
  8265  0020AC  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8266  0020AE  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  8267  0020B2  6A04               	clrf	??i2_read_colorsensor,c
  8268  0020B4  1004               	iorwf	??i2_read_colorsensor,w,c
  8269  0020B6  0100               	movlb	0	; () banked
  8270  0020B8  6F8E               	movwf	(_color+4)& (0+255),b
  8271  0020BA  5005               	movf	??i2_read_colorsensor+1,w,c
  8272  0020BC  0100               	movlb	0	; () banked
  8273  0020BE  6F8F               	movwf	(_color+5)& (0+255),b
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;main.c: 484: color[3] = (color_high[3] << 8)|(color_low[3]);
  8277  0020C0  0100               	movlb	0	; () banked
  8278  0020C2  51A0               	movf	(_color_low+3)& (0+255),w,b
  8279  0020C4  C09C  F004         	movff	_color_high+3,??i2_read_colorsensor
  8280  0020C8  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8281  0020CA  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  8282  0020CE  6A04               	clrf	??i2_read_colorsensor,c
  8283  0020D0  1004               	iorwf	??i2_read_colorsensor,w,c
  8284  0020D2  0100               	movlb	0	; () banked
  8285  0020D4  6F90               	movwf	(_color+6)& (0+255),b
  8286  0020D6  5005               	movf	??i2_read_colorsensor+1,w,c
  8287  0020D8  0100               	movlb	0	; () banked
  8288  0020DA  6F91               	movwf	(_color+7)& (0+255),b
  8289  0020DC  0012               	return	
  8290  0020DE                     __end_ofi2_read_colorsensor:
  8291                           	opt stack 0
  8292                           pclatu	equ	0xFFB
  8293                           pclath	equ	0xFFA
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           intcon	equ	0xFF2
  8301                           intcon2	equ	0xFF1
  8302                           intcon3	equ	0xFF0
  8303                           postinc0	equ	0xFEE
  8304                           fsr0h	equ	0xFEA
  8305                           fsr0l	equ	0xFE9
  8306                           wreg	equ	0xFE8
  8307                           fsr1h	equ	0xFE2
  8308                           fsr1l	equ	0xFE1
  8309                           indf2	equ	0xFDF
  8310                           postinc2	equ	0xFDE
  8311                           postdec2	equ	0xFDD
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function i2_printf *****************
  8317 ;; Defined at:
  8318 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8321 ;;		 -> STR_20(15), STR_19(16), STR_18(3), STR_17(18), 
  8322 ;;		 -> STR_16(23), STR_15(16), STR_14(17), STR_13(17), 
  8323 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  8324 ;;		 -> STR_8(23), STR_7(23), STR_6(9), STR_5(8), 
  8325 ;;		 -> STR_4(13), STR_3(24), STR_2(24), STR_1(8), 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  printf          4    0        struct .
  8328 ;;  printf          3    0        PTR const unsigned char 
  8329 ;;  printf          2   29[COMRAM] int 
  8330 ;;  printf          2   26[COMRAM] unsigned int 
  8331 ;;  printf          2   23[COMRAM] PTR void [1]
  8332 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8333 ;;  printf          2    0        unsigned int 
  8334 ;;  printf          1   31[COMRAM] char 
  8335 ;;  printf          1   28[COMRAM] unsigned char 
  8336 ;;  printf          1   25[COMRAM] char 
  8337 ;;  printf          1   22[COMRAM] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  2   12[COMRAM] int 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8347 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;Total ram usage:       20 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    2
  8354 ;; This function calls:
  8355 ;;		i2___lwdiv
  8356 ;;		i2___lwmod
  8357 ;;		i2___wmul
  8358 ;;		i2_isdigit
  8359 ;;		i2_putch
  8360 ;; This function is called by:
  8361 ;;		_isr
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           	psect	text36
  8366  000B5C                     __ptext36:
  8367                           	opt stack 0
  8368  000B5C                     i2_printf:
  8369                           	opt stack 23
  8370                           
  8371                           ;doprnt.c: 466: va_list ap;
  8372                           ;doprnt.c: 499: signed char c;
  8373                           ;doprnt.c: 501: int width;
  8374                           ;doprnt.c: 506: signed char prec;
  8375                           ;doprnt.c: 508: unsigned char flag;
  8376                           ;doprnt.c: 523: union {
  8377                           ;doprnt.c: 524: unsigned long vd;
  8378                           ;doprnt.c: 525: double integ;
  8379                           ;doprnt.c: 526: } tmpval;
  8380                           ;doprnt.c: 528: unsigned int val;
  8381                           ;doprnt.c: 529: unsigned len;
  8382                           ;doprnt.c: 530: const char * cp;
  8383                           ;doprnt.c: 533: *ap = __va_start();
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;incstack = 0
  8387  000B5C  0E0F               	movlw	low (?i2_printf+2)
  8388  000B5E  6E18               	movwf	i2printf@ap,c
  8389  000B60  0E00               	movlw	high (?i2_printf+2)
  8390  000B62  6E19               	movwf	i2printf@ap+1,c
  8391                           
  8392                           ;doprnt.c: 536: while(c = *f++) {
  8393  000B64  D184               	goto	i2l4668
  8394  000B66                     i2l4538:
  8395                           
  8396                           ;doprnt.c: 538: if(c != '%')
  8397  000B66  0E25               	movlw	37
  8398  000B68  1820               	xorwf	i2printf@c,w,c
  8399  000B6A  B4D8               	btfsc	status,2,c
  8400  000B6C  D004               	goto	i2l4542
  8401                           
  8402                           ;doprnt.c: 540: {
  8403                           ;doprnt.c: 541: (putch(c) );
  8404  000B6E  5020               	movf	i2printf@c,w,c
  8405  000B70  EC7D  F018         	call	i2_putch
  8406                           
  8407                           ;doprnt.c: 542: continue;
  8408  000B74  D17C               	goto	i2l4668
  8409  000B76                     i2l4542:
  8410                           
  8411                           ;doprnt.c: 543: }
  8412                           ;doprnt.c: 546: width = 0;
  8413  000B76  0E00               	movlw	0
  8414  000B78  6E1F               	movwf	i2printf@width+1,c
  8415  000B7A  0E00               	movlw	0
  8416  000B7C  6E1E               	movwf	i2printf@width,c
  8417                           
  8418                           ;doprnt.c: 548: flag = 0;
  8419  000B7E  0E00               	movlw	0
  8420  000B80  6E1D               	movwf	i2printf@flag,c
  8421                           
  8422                           ;doprnt.c: 551: switch(*f) {
  8423                           
  8424                           ;doprnt.c: 550: for(;;) {
  8425  000B82  D003               	goto	i2l4548
  8426  000B84                     i2l4544:
  8427                           
  8428                           ;doprnt.c: 580: flag |= 0x04;
  8429  000B84  841D               	bsf	i2printf@flag,2,c
  8430                           
  8431                           ;doprnt.c: 581: f++;
  8432  000B86  4A0D               	infsnz	i2printf@f,f,c
  8433  000B88  2A0E               	incf	i2printf@f+1,f,c
  8434  000B8A                     i2l4548:
  8435  000B8A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8436  000B8E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8437  000B92                     	if	0	;tblptru may be non-zero
  8438  000B92                     	endif
  8439  000B92                     	if	0	;tblptru may be non-zero
  8440  000B92                     	endif
  8441  000B92  0008               	tblrd		*
  8442  000B94  50F5               	movf	tablat,w,c
  8443                           
  8444                           ; Switch size 1, requested type "space"
  8445                           ; Number of cases is 1, Range of values is 48 to 48
  8446                           ; switch strategies available:
  8447                           ; Name         Instructions Cycles
  8448                           ; simple_byte            4     3 (average)
  8449                           ;	Chosen strategy is simple_byte
  8450  000B96  0A30               	xorlw	48	; case 48
  8451  000B98  B4D8               	btfsc	status,2,c
  8452  000B9A  D7F4               	goto	i2l4544
  8453                           
  8454                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8455                           
  8456                           ;doprnt.c: 586: }
  8457                           
  8458                           ;doprnt.c: 585: break;
  8459  000B9C  C00D  FFF6         	movff	i2printf@f,tblptrl
  8460  000BA0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8461  000BA4                     	if	0	;tblptru may be non-zero
  8462  000BA4                     	endif
  8463  000BA4                     	if	0	;tblptru may be non-zero
  8464  000BA4                     	endif
  8465  000BA4  0008               	tblrd		*
  8466  000BA6  50F5               	movf	tablat,w,c
  8467  000BA8  EC3F  F018         	call	i2_isdigit
  8468  000BAC  A0D8               	btfss	status,0,c
  8469  000BAE  D038               	goto	i2l4568
  8470                           
  8471                           ;doprnt.c: 598: width = 0;
  8472  000BB0  0E00               	movlw	0
  8473  000BB2  6E1F               	movwf	i2printf@width+1,c
  8474  000BB4  0E00               	movlw	0
  8475  000BB6  6E1E               	movwf	i2printf@width,c
  8476  000BB8                     i2l4554:
  8477                           
  8478                           ;doprnt.c: 600: width *= 10;
  8479  000BB8  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8480  000BBC  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8481  000BC0  0E00               	movlw	0
  8482  000BC2  6E04               	movwf	i2___wmul@multiplicand+1,c
  8483  000BC4  0E0A               	movlw	10
  8484  000BC6  6E03               	movwf	i2___wmul@multiplicand,c
  8485  000BC8  EC09  F018         	call	i2___wmul	;wreg free
  8486  000BCC  C001  F01E         	movff	?i2___wmul,i2printf@width
  8487  000BD0  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8488                           
  8489                           ;doprnt.c: 601: width += *f++ - '0';
  8490  000BD4  0ED0               	movlw	208
  8491  000BD6  6E13               	movwf	??i2_printf& (0+255),c
  8492  000BD8  0EFF               	movlw	255
  8493  000BDA  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8494  000BDC  C00D  FFF6         	movff	i2printf@f,tblptrl
  8495  000BE0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8496  000BE4                     	if	0	;tblptru may be non-zero
  8497  000BE4                     	endif
  8498  000BE4                     	if	0	;tblptru may be non-zero
  8499  000BE4                     	endif
  8500  000BE4  0008               	tblrd		*
  8501  000BE6  50F5               	movf	tablat,w,c
  8502  000BE8  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8503  000BEA  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8504  000BEC  5013               	movf	??i2_printf,w,c
  8505  000BEE  2615               	addwf	??i2_printf+2,f,c
  8506  000BF0  5014               	movf	??i2_printf+1,w,c
  8507  000BF2  2216               	addwfc	??i2_printf+3,f,c
  8508  000BF4  5015               	movf	??i2_printf+2,w,c
  8509  000BF6  261E               	addwf	i2printf@width,f,c
  8510  000BF8  5016               	movf	??i2_printf+3,w,c
  8511  000BFA  221F               	addwfc	i2printf@width+1,f,c
  8512  000BFC  4A0D               	infsnz	i2printf@f,f,c
  8513  000BFE  2A0E               	incf	i2printf@f+1,f,c
  8514                           
  8515                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8516  000C00  C00D  FFF6         	movff	i2printf@f,tblptrl
  8517  000C04  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8518  000C08                     	if	0	;tblptru may be non-zero
  8519  000C08                     	endif
  8520  000C08                     	if	0	;tblptru may be non-zero
  8521  000C08                     	endif
  8522  000C08  0008               	tblrd		*
  8523  000C0A  50F5               	movf	tablat,w,c
  8524  000C0C  EC3F  F018         	call	i2_isdigit
  8525  000C10  A0D8               	btfss	status,0,c
  8526  000C12  D006               	goto	i2l4568
  8527  000C14  D7D1               	goto	i2l4554
  8528  000C16                     i2l4562:
  8529                           
  8530                           ;doprnt.c: 721: flag |= 0x80;
  8531  000C16  8E1D               	bsf	i2printf@flag,7,c
  8532                           
  8533                           ;doprnt.c: 723: break;
  8534  000C18  D01D               	goto	i2l4570
  8535  000C1A                     i2l4564:
  8536                           
  8537                           ;doprnt.c: 818: flag |= 0xC0;
  8538  000C1A  0EC0               	movlw	192
  8539  000C1C  121D               	iorwf	i2printf@flag,f,c
  8540                           
  8541                           ;doprnt.c: 822: }
  8542                           
  8543                           ;doprnt.c: 819: break;
  8544  000C1E  D01A               	goto	i2l4570
  8545  000C20                     i2l4568:
  8546  000C20  C00D  FFF6         	movff	i2printf@f,tblptrl
  8547  000C24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8548  000C28  4A0D               	infsnz	i2printf@f,f,c
  8549  000C2A  2A0E               	incf	i2printf@f+1,f,c
  8550  000C2C                     	if	0	;tblptru may be non-zero
  8551  000C2C                     	endif
  8552  000C2C                     	if	0	;tblptru may be non-zero
  8553  000C2C                     	endif
  8554  000C2C  0008               	tblrd		*
  8555  000C2E  CFF5 F020          	movff	tablat,i2printf@c
  8556  000C32  5020               	movf	i2printf@c,w,c
  8557                           
  8558                           ; Switch size 1, requested type "space"
  8559                           ; Number of cases is 5, Range of values is 0 to 120
  8560                           ; switch strategies available:
  8561                           ; Name         Instructions Cycles
  8562                           ; simple_byte           16     9 (average)
  8563                           ;	Chosen strategy is simple_byte
  8564  000C34  0A00               	xorlw	0	; case 0
  8565  000C36  B4D8               	btfsc	status,2,c
  8566  000C38  0012               	return	
  8567  000C3A  0A64               	xorlw	100	; case 100
  8568  000C3C  B4D8               	btfsc	status,2,c
  8569  000C3E  D00A               	goto	i2l4570
  8570  000C40  0A0D               	xorlw	13	; case 105
  8571  000C42  B4D8               	btfsc	status,2,c
  8572  000C44  D007               	goto	i2l4570
  8573  000C46  0A1C               	xorlw	28	; case 117
  8574  000C48  B4D8               	btfsc	status,2,c
  8575  000C4A  D7E7               	goto	i2l4564
  8576  000C4C  0A0D               	xorlw	13	; case 120
  8577  000C4E  B4D8               	btfsc	status,2,c
  8578  000C50  D7E2               	goto	i2l4562
  8579  000C52  D10D               	goto	i2l4668
  8580  000C54                     i2l4570:
  8581                           
  8582                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8583  000C54  C01D  F013         	movff	i2printf@flag,??i2_printf
  8584  000C58  0EC0               	movlw	192
  8585  000C5A  1613               	andwf	??i2_printf,f,c
  8586  000C5C  A4D8               	btfss	status,2,c
  8587  000C5E  D015               	goto	i2l4582
  8588                           
  8589                           ;doprnt.c: 1253: {
  8590                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8591  000C60  C018  FFD9         	movff	i2printf@ap,fsr2l
  8592  000C64  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8593  000C68  CFDE F01B          	movff	postinc2,i2printf@val
  8594  000C6C  CFDD F01C          	movff	postdec2,i2printf@val+1
  8595  000C70  0E02               	movlw	2
  8596  000C72  2618               	addwf	i2printf@ap,f,c
  8597  000C74  0E00               	movlw	0
  8598  000C76  2219               	addwfc	i2printf@ap+1,f,c
  8599                           
  8600                           ;doprnt.c: 1261: if((int)val < 0) {
  8601  000C78  AE1C               	btfss	i2printf@val+1,7,c
  8602  000C7A  D044               	goto	i2l4616
  8603                           
  8604                           ;doprnt.c: 1262: flag |= 0x03;
  8605  000C7C  0E03               	movlw	3
  8606  000C7E  121D               	iorwf	i2printf@flag,f,c
  8607                           
  8608                           ;doprnt.c: 1263: val = -val;
  8609  000C80  6C1B               	negf	i2printf@val,c
  8610  000C82  1E1C               	comf	i2printf@val+1,f,c
  8611  000C84  B0D8               	btfsc	status,0,c
  8612  000C86  2A1C               	incf	i2printf@val+1,f,c
  8613                           
  8614                           ;doprnt.c: 1264: }
  8615                           ;doprnt.c: 1266: }
  8616  000C88  D03D               	goto	i2l4616
  8617  000C8A                     i2l4582:
  8618                           
  8619                           ;doprnt.c: 1268: else
  8620                           ;doprnt.c: 1273: {
  8621                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8622  000C8A  C018  FFD9         	movff	i2printf@ap,fsr2l
  8623  000C8E  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8624  000C92  CFDE F01B          	movff	postinc2,i2printf@val
  8625  000C96  CFDD F01C          	movff	postdec2,i2printf@val+1
  8626  000C9A  0E02               	movlw	2
  8627  000C9C  2618               	addwf	i2printf@ap,f,c
  8628  000C9E  0E00               	movlw	0
  8629  000CA0  2219               	addwfc	i2printf@ap+1,f,c
  8630                           
  8631                           ;doprnt.c: 1287: }
  8632                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8633  000CA2  D030               	goto	i2l4616
  8634  000CA4                     i2l4586:
  8635                           
  8636                           ;doprnt.c: 1302: case 0xC0:
  8637                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8638  000CA4  0E01               	movlw	1
  8639  000CA6  6E20               	movwf	i2printf@c,c
  8640  000CA8                     i2l4588:
  8641  000CA8  0E05               	movlw	5
  8642  000CAA  1820               	xorwf	i2printf@c,w,c
  8643  000CAC  B4D8               	btfsc	status,2,c
  8644  000CAE  D035               	goto	i2l4618
  8645                           
  8646                           ;doprnt.c: 1306: if(val < dpowers[c])
  8647  000CB0  5020               	movf	i2printf@c,w,c
  8648  000CB2  0D02               	mullw	2
  8649  000CB4  0E56               	movlw	low _dpowers
  8650  000CB6  24F3               	addwf	prodl,w,c
  8651  000CB8  6EF6               	movwf	tblptrl,c
  8652  000CBA  0EFE               	movlw	high _dpowers
  8653  000CBC  20F4               	addwfc	prodh,w,c
  8654  000CBE  6EF7               	movwf	tblptrh,c
  8655  000CC0                     	if	0	;There are less than 3 active tblptr bytes
  8656  000CC0                     	endif
  8657  000CC0  0009               	tblrd		*+
  8658  000CC2  50F5               	movf	tablat,w,c
  8659  000CC4  5C1B               	subwf	i2printf@val,w,c
  8660  000CC6  0009               	tblrd		*+
  8661  000CC8  50F5               	movf	tablat,w,c
  8662  000CCA  581C               	subwfb	i2printf@val+1,w,c
  8663  000CCC  A0D8               	btfss	status,0,c
  8664  000CCE  D025               	goto	i2l4618
  8665                           
  8666                           ;doprnt.c: 1307: break;
  8667  000CD0  2A20               	incf	i2printf@c,f,c
  8668  000CD2  D7EA               	goto	i2l4588
  8669  000CD4                     i2l4600:
  8670                           
  8671                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8672  000CD4  0E01               	movlw	1
  8673  000CD6  6E20               	movwf	i2printf@c,c
  8674  000CD8                     i2l4602:
  8675  000CD8  0E04               	movlw	4
  8676  000CDA  1820               	xorwf	i2printf@c,w,c
  8677  000CDC  B4D8               	btfsc	status,2,c
  8678  000CDE  D01D               	goto	i2l4618
  8679                           
  8680                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8681  000CE0  5020               	movf	i2printf@c,w,c
  8682  000CE2  0D02               	mullw	2
  8683  000CE4  0E60               	movlw	low _hexpowers
  8684  000CE6  24F3               	addwf	prodl,w,c
  8685  000CE8  6EF6               	movwf	tblptrl,c
  8686  000CEA  0EFE               	movlw	high _hexpowers
  8687  000CEC  20F4               	addwfc	prodh,w,c
  8688  000CEE  6EF7               	movwf	tblptrh,c
  8689  000CF0                     	if	0	;There are less than 3 active tblptr bytes
  8690  000CF0                     	endif
  8691  000CF0  0009               	tblrd		*+
  8692  000CF2  50F5               	movf	tablat,w,c
  8693  000CF4  5C1B               	subwf	i2printf@val,w,c
  8694  000CF6  0009               	tblrd		*+
  8695  000CF8  50F5               	movf	tablat,w,c
  8696  000CFA  581C               	subwfb	i2printf@val+1,w,c
  8697  000CFC  A0D8               	btfss	status,0,c
  8698  000CFE  D00D               	goto	i2l4618
  8699                           
  8700                           ;doprnt.c: 1318: break;
  8701  000D00  2A20               	incf	i2printf@c,f,c
  8702  000D02  D7EA               	goto	i2l4602
  8703  000D04                     i2l4616:
  8704  000D04  501D               	movf	i2printf@flag,w,c
  8705  000D06  0BC0               	andlw	192
  8706                           
  8707                           ; Switch size 1, requested type "space"
  8708                           ; Number of cases is 3, Range of values is 0 to 192
  8709                           ; switch strategies available:
  8710                           ; Name         Instructions Cycles
  8711                           ; simple_byte           10     6 (average)
  8712                           ;	Chosen strategy is simple_byte
  8713  000D08  0A00               	xorlw	0	; case 0
  8714  000D0A  B4D8               	btfsc	status,2,c
  8715  000D0C  D7CB               	goto	i2l4586
  8716  000D0E  0A80               	xorlw	128	; case 128
  8717  000D10  B4D8               	btfsc	status,2,c
  8718  000D12  D7E0               	goto	i2l4600
  8719  000D14  0A40               	xorlw	64	; case 192
  8720  000D16  B4D8               	btfsc	status,2,c
  8721  000D18  D7C5               	goto	i2l4586
  8722  000D1A                     i2l4618:
  8723                           
  8724                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8725  000D1A  501E               	movf	i2printf@width,w,c
  8726  000D1C  101F               	iorwf	i2printf@width+1,w,c
  8727  000D1E  B4D8               	btfsc	status,2,c
  8728  000D20  D009               	goto	i2l4624
  8729  000D22  C01D  F013         	movff	i2printf@flag,??i2_printf
  8730  000D26  0E03               	movlw	3
  8731  000D28  1613               	andwf	??i2_printf,f,c
  8732  000D2A  B4D8               	btfsc	status,2,c
  8733  000D2C  D003               	goto	i2l4624
  8734                           
  8735                           ;doprnt.c: 1346: width--;
  8736  000D2E  061E               	decf	i2printf@width,f,c
  8737  000D30  A0D8               	btfss	status,0,c
  8738  000D32  061F               	decf	i2printf@width+1,f,c
  8739  000D34                     i2l4624:
  8740                           
  8741                           ;doprnt.c: 1381: if(width > c)
  8742  000D34  0E80               	movlw	128
  8743  000D36  BE20               	btfsc	i2printf@c,7,c
  8744  000D38  0E7F               	movlw	127
  8745  000D3A  6E13               	movwf	??i2_printf& (0+255),c
  8746  000D3C  501E               	movf	i2printf@width,w,c
  8747  000D3E  5C20               	subwf	i2printf@c,w,c
  8748  000D40  501F               	movf	i2printf@width+1,w,c
  8749  000D42  0A80               	xorlw	128
  8750  000D44  5813               	subwfb	??i2_printf& (0+255),w,c
  8751  000D46  B0D8               	btfsc	status,0,c
  8752  000D48  D007               	goto	i2l4628
  8753                           
  8754                           ;doprnt.c: 1382: width -= c;
  8755  000D4A  5020               	movf	i2printf@c,w,c
  8756  000D4C  5E1E               	subwf	i2printf@width,f,c
  8757  000D4E  0E00               	movlw	0
  8758  000D50  BE20               	btfsc	i2printf@c,7,c
  8759  000D52  0EFF               	movlw	255
  8760  000D54  5A1F               	subwfb	i2printf@width+1,f,c
  8761  000D56  D004               	goto	i2l4630
  8762  000D58                     i2l4628:
  8763                           
  8764                           ;doprnt.c: 1383: else
  8765                           ;doprnt.c: 1384: width = 0;
  8766  000D58  0E00               	movlw	0
  8767  000D5A  6E1F               	movwf	i2printf@width+1,c
  8768  000D5C  0E00               	movlw	0
  8769  000D5E  6E1E               	movwf	i2printf@width,c
  8770  000D60                     i2l4630:
  8771                           
  8772                           ;doprnt.c: 1387: if(flag & 0x04) {
  8773  000D60  A41D               	btfss	i2printf@flag,2,c
  8774  000D62  D014               	goto	i2l4642
  8775                           
  8776                           ;doprnt.c: 1392: if(flag & 0x03)
  8777  000D64  C01D  F013         	movff	i2printf@flag,??i2_printf
  8778  000D68  0E03               	movlw	3
  8779  000D6A  1613               	andwf	??i2_printf,f,c
  8780  000D6C  B4D8               	btfsc	status,2,c
  8781  000D6E  D003               	goto	i2l4636
  8782                           
  8783                           ;doprnt.c: 1393: (putch('-') );
  8784  000D70  0E2D               	movlw	45
  8785  000D72  EC7D  F018         	call	i2_putch
  8786  000D76                     i2l4636:
  8787                           
  8788                           ;doprnt.c: 1415: if(width)
  8789  000D76  501E               	movf	i2printf@width,w,c
  8790  000D78  101F               	iorwf	i2printf@width+1,w,c
  8791  000D7A  B4D8               	btfsc	status,2,c
  8792  000D7C  D01E               	goto	i2l4652
  8793                           
  8794                           ;doprnt.c: 1417: (putch('0') );
  8795                           
  8796                           ;doprnt.c: 1416: do
  8797  000D7E  0E30               	movlw	48
  8798  000D80  EC7D  F018         	call	i2_putch
  8799                           
  8800                           ;doprnt.c: 1418: while(--width);
  8801  000D84  061E               	decf	i2printf@width,f,c
  8802  000D86  A0D8               	btfss	status,0,c
  8803  000D88  061F               	decf	i2printf@width+1,f,c
  8804  000D8A  D7F5               	goto	i2l4636
  8805  000D8C                     i2l4642:
  8806                           
  8807                           ;doprnt.c: 1422: {
  8808                           ;doprnt.c: 1424: if(width
  8809                           ;doprnt.c: 1428: )
  8810  000D8C  501E               	movf	i2printf@width,w,c
  8811  000D8E  101F               	iorwf	i2printf@width+1,w,c
  8812  000D90  B4D8               	btfsc	status,2,c
  8813  000D92  D00A               	goto	i2l4648
  8814  000D94                     i2l4644:
  8815                           
  8816                           ;doprnt.c: 1430: (putch(' ') );
  8817  000D94  0E20               	movlw	32
  8818  000D96  EC7D  F018         	call	i2_putch
  8819                           
  8820                           ;doprnt.c: 1431: while(--width);
  8821  000D9A  061E               	decf	i2printf@width,f,c
  8822  000D9C  A0D8               	btfss	status,0,c
  8823  000D9E  061F               	decf	i2printf@width+1,f,c
  8824  000DA0  501E               	movf	i2printf@width,w,c
  8825  000DA2  101F               	iorwf	i2printf@width+1,w,c
  8826  000DA4  A4D8               	btfss	status,2,c
  8827  000DA6  D7F6               	goto	i2l4644
  8828  000DA8                     i2l4648:
  8829                           
  8830                           ;doprnt.c: 1438: if(flag & 0x03)
  8831  000DA8  C01D  F013         	movff	i2printf@flag,??i2_printf
  8832  000DAC  0E03               	movlw	3
  8833  000DAE  1613               	andwf	??i2_printf,f,c
  8834  000DB0  B4D8               	btfsc	status,2,c
  8835  000DB2  D003               	goto	i2l4652
  8836                           
  8837                           ;doprnt.c: 1439: (putch('-') );
  8838  000DB4  0E2D               	movlw	45
  8839  000DB6  EC7D  F018         	call	i2_putch
  8840  000DBA                     i2l4652:
  8841                           
  8842                           ;doprnt.c: 1469: }
  8843                           ;doprnt.c: 1472: prec = c;
  8844  000DBA  C020  F01A         	movff	i2printf@c,i2printf@prec
  8845                           
  8846                           ;doprnt.c: 1474: while(prec--) {
  8847  000DBE  D053               	goto	i2l4666
  8848  000DC0                     i2l4654:
  8849                           
  8850                           ;doprnt.c: 1486: case 0xC0:
  8851                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8852  000DC0  501A               	movf	i2printf@prec,w,c
  8853  000DC2  0D02               	mullw	2
  8854  000DC4  0E56               	movlw	low _dpowers
  8855  000DC6  24F3               	addwf	prodl,w,c
  8856  000DC8  6EF6               	movwf	tblptrl,c
  8857  000DCA  0EFE               	movlw	high _dpowers
  8858  000DCC  20F4               	addwfc	prodh,w,c
  8859  000DCE  6EF7               	movwf	tblptrh,c
  8860  000DD0                     	if	0	;There are less than 3 active tblptr bytes
  8861  000DD0                     	endif
  8862  000DD0  0009               	tblrd		*+
  8863  000DD2  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8864  000DD6  000A               	tblrd		*-
  8865  000DD8  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8866  000DDC  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8867  000DE0  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8868  000DE4  EC5B  F016         	call	i2___lwdiv	;wreg free
  8869  000DE8  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8870  000DEC  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8871  000DF0  0E00               	movlw	0
  8872  000DF2  6E0B               	movwf	i2___lwmod@divisor+1,c
  8873  000DF4  0E0A               	movlw	10
  8874  000DF6  6E0A               	movwf	i2___lwmod@divisor,c
  8875  000DF8  EC1A  F017         	call	i2___lwmod	;wreg free
  8876  000DFC  5008               	movf	?i2___lwmod,w,c
  8877  000DFE  0F30               	addlw	48
  8878  000E00  6E20               	movwf	i2printf@c,c
  8879                           
  8880                           ;doprnt.c: 1491: break;
  8881  000E02  D02E               	goto	i2l4664
  8882  000E04                     i2l4656:
  8883                           
  8884                           ;doprnt.c: 1499: {
  8885                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8886  000E04  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8887  000E08  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8888  000E0C  501A               	movf	i2printf@prec,w,c
  8889  000E0E  0D02               	mullw	2
  8890  000E10  0E60               	movlw	low _hexpowers
  8891  000E12  24F3               	addwf	prodl,w,c
  8892  000E14  6EF6               	movwf	tblptrl,c
  8893  000E16  0EFE               	movlw	high _hexpowers
  8894  000E18  20F4               	addwfc	prodh,w,c
  8895  000E1A  6EF7               	movwf	tblptrh,c
  8896  000E1C                     	if	0	;There are less than 3 active tblptr bytes
  8897  000E1C                     	endif
  8898  000E1C  0009               	tblrd		*+
  8899  000E1E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8900  000E22  000A               	tblrd		*-
  8901  000E24  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8902  000E28  EC5B  F016         	call	i2___lwdiv	;wreg free
  8903  000E2C  5001               	movf	?i2___lwdiv,w,c
  8904  000E2E  0B0F               	andlw	15
  8905  000E30  6E17               	movwf	i2printf@idx,c
  8906                           
  8907                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8908  000E32  5017               	movf	i2printf@idx,w,c
  8909  000E34  0D01               	mullw	1
  8910  000E36  0E2F               	movlw	low STR_21
  8911  000E38  24F3               	addwf	prodl,w,c
  8912  000E3A  6EF6               	movwf	tblptrl,c
  8913  000E3C  0EFF               	movlw	high STR_21
  8914  000E3E  20F4               	addwfc	prodh,w,c
  8915  000E40  6EF7               	movwf	tblptrh,c
  8916  000E42                     	if	0	;There are less than 3 active tblptr bytes
  8917  000E42                     	endif
  8918  000E42  0008               	tblrd		*
  8919  000E44  CFF5 F020          	movff	tablat,i2printf@c
  8920                           
  8921                           ;doprnt.c: 1523: }
  8922                           
  8923                           ;doprnt.c: 1508: }
  8924                           ;doprnt.c: 1510: break;
  8925  000E48  D00B               	goto	i2l4664
  8926  000E4A                     i2l4662:
  8927  000E4A  501D               	movf	i2printf@flag,w,c
  8928  000E4C  0BC0               	andlw	192
  8929                           
  8930                           ; Switch size 1, requested type "space"
  8931                           ; Number of cases is 3, Range of values is 0 to 192
  8932                           ; switch strategies available:
  8933                           ; Name         Instructions Cycles
  8934                           ; simple_byte           10     6 (average)
  8935                           ;	Chosen strategy is simple_byte
  8936  000E4E  0A00               	xorlw	0	; case 0
  8937  000E50  B4D8               	btfsc	status,2,c
  8938  000E52  D7B6               	goto	i2l4654
  8939  000E54  0A80               	xorlw	128	; case 128
  8940  000E56  B4D8               	btfsc	status,2,c
  8941  000E58  D7D5               	goto	i2l4656
  8942  000E5A  0A40               	xorlw	64	; case 192
  8943  000E5C  B4D8               	btfsc	status,2,c
  8944  000E5E  D7B0               	goto	i2l4654
  8945  000E60                     i2l4664:
  8946                           
  8947                           ;doprnt.c: 1524: (putch(c) );
  8948  000E60  5020               	movf	i2printf@c,w,c
  8949  000E62  EC7D  F018         	call	i2_putch
  8950  000E66                     i2l4666:
  8951  000E66  061A               	decf	i2printf@prec,f,c
  8952  000E68  281A               	incf	i2printf@prec,w,c
  8953  000E6A  A4D8               	btfss	status,2,c
  8954  000E6C  D7EE               	goto	i2l4662
  8955  000E6E                     i2l4668:
  8956  000E6E  C00D  FFF6         	movff	i2printf@f,tblptrl
  8957  000E72  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8958  000E76  4A0D               	infsnz	i2printf@f,f,c
  8959  000E78  2A0E               	incf	i2printf@f+1,f,c
  8960  000E7A                     	if	0	;tblptru may be non-zero
  8961  000E7A                     	endif
  8962  000E7A                     	if	0	;tblptru may be non-zero
  8963  000E7A                     	endif
  8964  000E7A  0008               	tblrd		*
  8965  000E7C  CFF5 F020          	movff	tablat,i2printf@c
  8966  000E80  5020               	movf	i2printf@c,w,c
  8967  000E82  B4D8               	btfsc	status,2,c
  8968  000E84  0012               	return	
  8969  000E86  D66F               	goto	i2l4538
  8970  000E88                     __end_ofi2_printf:
  8971                           	opt stack 0
  8972                           pclatu	equ	0xFFB
  8973                           pclath	equ	0xFFA
  8974                           tblptru	equ	0xFF8
  8975                           tblptrh	equ	0xFF7
  8976                           tblptrl	equ	0xFF6
  8977                           tablat	equ	0xFF5
  8978                           prodh	equ	0xFF4
  8979                           prodl	equ	0xFF3
  8980                           intcon	equ	0xFF2
  8981                           intcon2	equ	0xFF1
  8982                           intcon3	equ	0xFF0
  8983                           postinc0	equ	0xFEE
  8984                           fsr0h	equ	0xFEA
  8985                           fsr0l	equ	0xFE9
  8986                           wreg	equ	0xFE8
  8987                           fsr1h	equ	0xFE2
  8988                           fsr1l	equ	0xFE1
  8989                           indf2	equ	0xFDF
  8990                           postinc2	equ	0xFDE
  8991                           postdec2	equ	0xFDD
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function i2_putch *****************
  8997 ;; Defined at:
  8998 ;;		line 31 in file "lcd.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;  data            1    wreg     unsigned char 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  data            1    2[COMRAM] unsigned char 
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  1    wreg      void 
  9005 ;; Registers used:
  9006 ;;		wreg, status,2, status,0, cstack
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;Total ram usage:        1 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    1
  9019 ;; This function calls:
  9020 ;;		i2_lcdNibble
  9021 ;; This function is called by:
  9022 ;;		i2_printf
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           	psect	text37
  9027  0030FA                     __ptext37:
  9028                           	opt stack 0
  9029  0030FA                     i2_putch:
  9030                           	opt stack 23
  9031                           
  9032                           ;incstack = 0
  9033                           ;i2putch@data stored from wreg
  9034  0030FA  6E03               	movwf	i2putch@data,c
  9035                           
  9036                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9037  0030FC  848C               	bsf	3980,2,c	;volatile
  9038                           
  9039                           ;lcd.c: 33: lcdNibble(data);
  9040  0030FE  5003               	movf	i2putch@data,w,c
  9041  003100  ECAC  F016         	call	i2_lcdNibble
  9042  003104  0012               	return		;funcret
  9043  003106                     __end_ofi2_putch:
  9044                           	opt stack 0
  9045                           pclatu	equ	0xFFB
  9046                           pclath	equ	0xFFA
  9047                           tblptru	equ	0xFF8
  9048                           tblptrh	equ	0xFF7
  9049                           tblptrl	equ	0xFF6
  9050                           tablat	equ	0xFF5
  9051                           prodh	equ	0xFF4
  9052                           prodl	equ	0xFF3
  9053                           intcon	equ	0xFF2
  9054                           intcon2	equ	0xFF1
  9055                           intcon3	equ	0xFF0
  9056                           postinc0	equ	0xFEE
  9057                           fsr0h	equ	0xFEA
  9058                           fsr0l	equ	0xFE9
  9059                           wreg	equ	0xFE8
  9060                           fsr1h	equ	0xFE2
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           postdec2	equ	0xFDD
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function i2_isdigit *****************
  9070 ;; Defined at:
  9071 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;  c               1    wreg     unsigned char 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  c               1    2[COMRAM] unsigned char 
  9076 ;; Return value:  Size  Location     Type
  9077 ;;		None               void
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;Total ram usage:        3 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		i2_printf
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text38
  9099  00307E                     __ptext38:
  9100                           	opt stack 0
  9101  00307E                     i2_isdigit:
  9102                           	opt stack 24
  9103                           
  9104                           ;incstack = 0
  9105                           ;i2isdigit@c stored from wreg
  9106  00307E  6E03               	movwf	i2isdigit@c,c
  9107  003080  0E00               	movlw	0
  9108  003082  6E02               	movwf	i2_isdigit$805,c
  9109  003084  0E3A               	movlw	58
  9110  003086  6003               	cpfslt	i2isdigit@c,c
  9111  003088  D005               	goto	i2l4170
  9112  00308A  0E2F               	movlw	47
  9113  00308C  6403               	cpfsgt	i2isdigit@c,c
  9114  00308E  D002               	goto	i2l4170
  9115  003090  0E01               	movlw	1
  9116  003092  6E02               	movwf	i2_isdigit$805,c
  9117  003094                     i2l4170:
  9118  003094  C002  F001         	movff	i2_isdigit$805,??i2_isdigit
  9119  003098  3001               	rrcf	??i2_isdigit,w,c
  9120  00309A  0012               	return	
  9121  00309C                     __end_ofi2_isdigit:
  9122                           	opt stack 0
  9123                           pclatu	equ	0xFFB
  9124                           pclath	equ	0xFFA
  9125                           tblptru	equ	0xFF8
  9126                           tblptrh	equ	0xFF7
  9127                           tblptrl	equ	0xFF6
  9128                           tablat	equ	0xFF5
  9129                           prodh	equ	0xFF4
  9130                           prodl	equ	0xFF3
  9131                           intcon	equ	0xFF2
  9132                           intcon2	equ	0xFF1
  9133                           intcon3	equ	0xFF0
  9134                           postinc0	equ	0xFEE
  9135                           fsr0h	equ	0xFEA
  9136                           fsr0l	equ	0xFE9
  9137                           wreg	equ	0xFE8
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147 ;; *************** function i2___lwmod *****************
  9148 ;; Defined at:
  9149 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  dividend        2    7[COMRAM] unsigned int 
  9152 ;;  divisor         2    9[COMRAM] unsigned int 
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  2    7[COMRAM] unsigned int 
  9157 ;; Registers used:
  9158 ;;		wreg, status,2, status,0
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;Total ram usage:        5 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		i2_printf
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           	psect	text39
  9178  002E34                     __ptext39:
  9179                           	opt stack 0
  9180  002E34                     i2___lwmod:
  9181                           	opt stack 24
  9182                           
  9183                           ;incstack = 0
  9184  002E34  500A               	movf	i2___lwmod@divisor,w,c
  9185  002E36  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9186  002E38  B4D8               	btfsc	status,2,c
  9187  002E3A  D018               	goto	i2l898
  9188  002E3C  0E01               	movlw	1
  9189  002E3E  6E0C               	movwf	i2___lwmod@counter,c
  9190  002E40  D004               	goto	i2l4202
  9191  002E42                     i2l4200:
  9192  002E42  90D8               	bcf	status,0,c
  9193  002E44  360A               	rlcf	i2___lwmod@divisor,f,c
  9194  002E46  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9195  002E48  2A0C               	incf	i2___lwmod@counter,f,c
  9196  002E4A                     i2l4202:
  9197  002E4A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9198  002E4C  D7FA               	goto	i2l4200
  9199  002E4E                     i2l4204:
  9200  002E4E  500A               	movf	i2___lwmod@divisor,w,c
  9201  002E50  5C08               	subwf	i2___lwmod@dividend,w,c
  9202  002E52  500B               	movf	i2___lwmod@divisor+1,w,c
  9203  002E54  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9204  002E56  A0D8               	btfss	status,0,c
  9205  002E58  D004               	goto	i2l4208
  9206  002E5A  500A               	movf	i2___lwmod@divisor,w,c
  9207  002E5C  5E08               	subwf	i2___lwmod@dividend,f,c
  9208  002E5E  500B               	movf	i2___lwmod@divisor+1,w,c
  9209  002E60  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9210  002E62                     i2l4208:
  9211  002E62  90D8               	bcf	status,0,c
  9212  002E64  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9213  002E66  320A               	rrcf	i2___lwmod@divisor,f,c
  9214  002E68  2E0C               	decfsz	i2___lwmod@counter,f,c
  9215  002E6A  D7F1               	goto	i2l4204
  9216  002E6C                     i2l898:
  9217  002E6C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9218  002E70  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9219  002E74  0012               	return		;funcret
  9220  002E76                     __end_ofi2___lwmod:
  9221                           	opt stack 0
  9222                           pclatu	equ	0xFFB
  9223                           pclath	equ	0xFFA
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           intcon	equ	0xFF2
  9231                           intcon2	equ	0xFF1
  9232                           intcon3	equ	0xFF0
  9233                           postinc0	equ	0xFEE
  9234                           fsr0h	equ	0xFEA
  9235                           fsr0l	equ	0xFE9
  9236                           wreg	equ	0xFE8
  9237                           fsr1h	equ	0xFE2
  9238                           fsr1l	equ	0xFE1
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function i2___lwdiv *****************
  9247 ;; Defined at:
  9248 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;  dividend        2    0[COMRAM] unsigned int 
  9251 ;;  divisor         2    2[COMRAM] unsigned int 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9254 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  2    0[COMRAM] unsigned int 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        7 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; This function calls:
  9271 ;;		Nothing
  9272 ;; This function is called by:
  9273 ;;		i2_printf
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           	psect	text40
  9278  002CB6                     __ptext40:
  9279                           	opt stack 0
  9280  002CB6                     i2___lwdiv:
  9281                           	opt stack 24
  9282                           
  9283                           ;incstack = 0
  9284  002CB6  0E00               	movlw	0
  9285  002CB8  6E06               	movwf	i2___lwdiv@quotient+1,c
  9286  002CBA  0E00               	movlw	0
  9287  002CBC  6E05               	movwf	i2___lwdiv@quotient,c
  9288  002CBE  5003               	movf	i2___lwdiv@divisor,w,c
  9289  002CC0  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9290  002CC2  B4D8               	btfsc	status,2,c
  9291  002CC4  D01C               	goto	i2l888
  9292  002CC6  0E01               	movlw	1
  9293  002CC8  6E07               	movwf	i2___lwdiv@counter,c
  9294  002CCA  D004               	goto	i2l4182
  9295  002CCC                     i2l4180:
  9296  002CCC  90D8               	bcf	status,0,c
  9297  002CCE  3603               	rlcf	i2___lwdiv@divisor,f,c
  9298  002CD0  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9299  002CD2  2A07               	incf	i2___lwdiv@counter,f,c
  9300  002CD4                     i2l4182:
  9301  002CD4  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9302  002CD6  D7FA               	goto	i2l4180
  9303  002CD8                     i2l4184:
  9304  002CD8  90D8               	bcf	status,0,c
  9305  002CDA  3605               	rlcf	i2___lwdiv@quotient,f,c
  9306  002CDC  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9307  002CDE  5003               	movf	i2___lwdiv@divisor,w,c
  9308  002CE0  5C01               	subwf	i2___lwdiv@dividend,w,c
  9309  002CE2  5004               	movf	i2___lwdiv@divisor+1,w,c
  9310  002CE4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9311  002CE6  A0D8               	btfss	status,0,c
  9312  002CE8  D005               	goto	i2l4192
  9313  002CEA  5003               	movf	i2___lwdiv@divisor,w,c
  9314  002CEC  5E01               	subwf	i2___lwdiv@dividend,f,c
  9315  002CEE  5004               	movf	i2___lwdiv@divisor+1,w,c
  9316  002CF0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9317  002CF2  8005               	bsf	i2___lwdiv@quotient,0,c
  9318  002CF4                     i2l4192:
  9319  002CF4  90D8               	bcf	status,0,c
  9320  002CF6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9321  002CF8  3203               	rrcf	i2___lwdiv@divisor,f,c
  9322  002CFA  2E07               	decfsz	i2___lwdiv@counter,f,c
  9323  002CFC  D7ED               	goto	i2l4184
  9324  002CFE                     i2l888:
  9325  002CFE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9326  002D02  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9327  002D06  0012               	return		;funcret
  9328  002D08                     __end_ofi2___lwdiv:
  9329                           	opt stack 0
  9330                           pclatu	equ	0xFFB
  9331                           pclath	equ	0xFFA
  9332                           tblptru	equ	0xFF8
  9333                           tblptrh	equ	0xFF7
  9334                           tblptrl	equ	0xFF6
  9335                           tablat	equ	0xFF5
  9336                           prodh	equ	0xFF4
  9337                           prodl	equ	0xFF3
  9338                           intcon	equ	0xFF2
  9339                           intcon2	equ	0xFF1
  9340                           intcon3	equ	0xFF0
  9341                           postinc0	equ	0xFEE
  9342                           fsr0h	equ	0xFEA
  9343                           fsr0l	equ	0xFE9
  9344                           wreg	equ	0xFE8
  9345                           fsr1h	equ	0xFE2
  9346                           fsr1l	equ	0xFE1
  9347                           indf2	equ	0xFDF
  9348                           postinc2	equ	0xFDE
  9349                           postdec2	equ	0xFDD
  9350                           fsr2h	equ	0xFDA
  9351                           fsr2l	equ	0xFD9
  9352                           status	equ	0xFD8
  9353                           
  9354 ;; *************** function i2_lcdInst *****************
  9355 ;; Defined at:
  9356 ;;		line 26 in file "lcd.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  data            1    wreg     unsigned char 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  data            1    2[COMRAM] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  1    wreg      void 
  9363 ;; Registers used:
  9364 ;;		wreg, status,2, status,0, cstack
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;Total ram usage:        1 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    1
  9377 ;; This function calls:
  9378 ;;		i2_lcdNibble
  9379 ;; This function is called by:
  9380 ;;		_isr
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text41
  9385  003106                     __ptext41:
  9386                           	opt stack 0
  9387  003106                     i2_lcdInst:
  9388                           	opt stack 24
  9389                           
  9390                           ;incstack = 0
  9391                           ;i2lcdInst@data stored from wreg
  9392  003106  6E03               	movwf	i2lcdInst@data,c
  9393                           
  9394                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  9395  003108  948C               	bcf	3980,2,c	;volatile
  9396                           
  9397                           ;lcd.c: 28: lcdNibble(data);
  9398  00310A  5003               	movf	i2lcdInst@data,w,c
  9399  00310C  ECAC  F016         	call	i2_lcdNibble
  9400  003110  0012               	return		;funcret
  9401  003112                     __end_ofi2_lcdInst:
  9402                           	opt stack 0
  9403                           pclatu	equ	0xFFB
  9404                           pclath	equ	0xFFA
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           intcon2	equ	0xFF1
  9413                           intcon3	equ	0xFF0
  9414                           postinc0	equ	0xFEE
  9415                           fsr0h	equ	0xFEA
  9416                           fsr0l	equ	0xFE9
  9417                           wreg	equ	0xFE8
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           indf2	equ	0xFDF
  9421                           postinc2	equ	0xFDE
  9422                           postdec2	equ	0xFDD
  9423                           fsr2h	equ	0xFDA
  9424                           fsr2l	equ	0xFD9
  9425                           status	equ	0xFD8
  9426                           
  9427 ;; *************** function i2_lcdNibble *****************
  9428 ;; Defined at:
  9429 ;;		line 36 in file "lcd.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  data            1    wreg     unsigned char 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  data            1    1[COMRAM] unsigned char 
  9434 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;                  1    wreg      void 
  9437 ;; Registers used:
  9438 ;;		wreg, status,2, status,0
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9448 ;;Total ram usage:        2 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; This function calls:
  9451 ;;		Nothing
  9452 ;; This function is called by:
  9453 ;;		i2_lcdInst
  9454 ;;		i2_putch
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text42
  9459  002D58                     __ptext42:
  9460                           	opt stack 0
  9461  002D58                     i2_lcdNibble:
  9462                           	opt stack 23
  9463                           
  9464                           ;incstack = 0
  9465                           ;i2lcdNibble@data stored from wreg
  9466  002D58  6E02               	movwf	i2lcdNibble@data,c
  9467                           
  9468                           ;lcd.c: 38: char temp = data & 0xF0;
  9469  002D5A  5002               	movf	i2lcdNibble@data,w,c
  9470  002D5C  0BF0               	andlw	240
  9471  002D5E  6E01               	movwf	i2lcdNibble@temp,c
  9472                           
  9473                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9474  002D60  508C               	movf	3980,w,c	;volatile
  9475  002D62  0B0F               	andlw	15
  9476  002D64  6E8C               	movwf	3980,c	;volatile
  9477                           
  9478                           ;lcd.c: 40: LATD = temp | LATD;
  9479  002D66  5001               	movf	i2lcdNibble@temp,w,c
  9480  002D68  108C               	iorwf	3980,w,c	;volatile
  9481  002D6A  6E8C               	movwf	3980,c	;volatile
  9482                           
  9483                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  9484  002D6C  968C               	bcf	3980,3,c	;volatile
  9485                           
  9486                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9487  002D6E  0E19               	movlw	25
  9488  002D70                     i2u552_47:
  9489  002D70  2EE8               	decfsz	wreg,f,c
  9490  002D72  D7FE               	bra	i2u552_47
  9491                           
  9492                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  9493  002D74  868C               	bsf	3980,3,c	;volatile
  9494                           
  9495                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9496  002D76  0E19               	movlw	25
  9497  002D78                     i2u553_47:
  9498  002D78  2EE8               	decfsz	wreg,f,c
  9499  002D7A  D7FE               	bra	i2u553_47
  9500                           
  9501                           ;lcd.c: 47: data = data << 4;
  9502  002D7C  3802               	swapf	i2lcdNibble@data,w,c
  9503  002D7E  0BF0               	andlw	240
  9504  002D80  6E02               	movwf	i2lcdNibble@data,c
  9505                           
  9506                           ;lcd.c: 49: temp = data & 0xF0;
  9507  002D82  5002               	movf	i2lcdNibble@data,w,c
  9508  002D84  0BF0               	andlw	240
  9509  002D86  6E01               	movwf	i2lcdNibble@temp,c
  9510                           
  9511                           ;lcd.c: 50: LATD = LATD & 0x0F;
  9512  002D88  508C               	movf	3980,w,c	;volatile
  9513  002D8A  0B0F               	andlw	15
  9514  002D8C  6E8C               	movwf	3980,c	;volatile
  9515                           
  9516                           ;lcd.c: 51: LATD = temp | LATD;
  9517  002D8E  5001               	movf	i2lcdNibble@temp,w,c
  9518  002D90  108C               	iorwf	3980,w,c	;volatile
  9519  002D92  6E8C               	movwf	3980,c	;volatile
  9520                           
  9521                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  9522  002D94  968C               	bcf	3980,3,c	;volatile
  9523                           
  9524                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9525  002D96  0E19               	movlw	25
  9526  002D98                     i2u554_47:
  9527  002D98  2EE8               	decfsz	wreg,f,c
  9528  002D9A  D7FE               	bra	i2u554_47
  9529                           
  9530                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  9531  002D9C  868C               	bsf	3980,3,c	;volatile
  9532                           
  9533                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9534  002D9E  0E19               	movlw	25
  9535  002DA0                     i2u555_47:
  9536  002DA0  2EE8               	decfsz	wreg,f,c
  9537  002DA2  D7FE               	bra	i2u555_47
  9538  002DA4  0012               	return		;funcret
  9539  002DA6                     __end_ofi2_lcdNibble:
  9540                           	opt stack 0
  9541                           pclatu	equ	0xFFB
  9542                           pclath	equ	0xFFA
  9543                           tblptru	equ	0xFF8
  9544                           tblptrh	equ	0xFF7
  9545                           tblptrl	equ	0xFF6
  9546                           tablat	equ	0xFF5
  9547                           prodh	equ	0xFF4
  9548                           prodl	equ	0xFF3
  9549                           intcon	equ	0xFF2
  9550                           intcon2	equ	0xFF1
  9551                           intcon3	equ	0xFF0
  9552                           postinc0	equ	0xFEE
  9553                           fsr0h	equ	0xFEA
  9554                           fsr0l	equ	0xFE9
  9555                           wreg	equ	0xFE8
  9556                           fsr1h	equ	0xFE2
  9557                           fsr1l	equ	0xFE1
  9558                           indf2	equ	0xFDF
  9559                           postinc2	equ	0xFDE
  9560                           postdec2	equ	0xFDD
  9561                           fsr2h	equ	0xFDA
  9562                           fsr2l	equ	0xFD9
  9563                           status	equ	0xFD8
  9564                           
  9565 ;; *************** function _read_time *****************
  9566 ;; Defined at:
  9567 ;;		line 254 in file "main.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  i               1    3[COMRAM] unsigned char 
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  1    wreg      void 
  9574 ;; Registers used:
  9575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;Total ram usage:        1 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    2
  9588 ;; This function calls:
  9589 ;;		i2_I2C_Master_Read
  9590 ;;		i2_I2C_Master_Start
  9591 ;;		i2_I2C_Master_Stop
  9592 ;;		i2_I2C_Master_Write
  9593 ;; This function is called by:
  9594 ;;		_isr
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text43
  9599  002AD0                     __ptext43:
  9600                           	opt stack 0
  9601  002AD0                     _read_time:
  9602                           	opt stack 23
  9603                           
  9604                           ;main.c: 256: I2C_Master_Start();
  9605                           
  9606                           ;incstack = 0
  9607  002AD0  EC9F  F018         	call	i2_I2C_Master_Start	;wreg free
  9608                           
  9609                           ;main.c: 257: I2C_Master_Write(0b11010000);
  9610  002AD4  0E00               	movlw	0
  9611  002AD6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9612  002AD8  0ED0               	movlw	208
  9613  002ADA  6E02               	movwf	i2I2C_Master_Write@d,c
  9614  002ADC  EC8E  F018         	call	i2_I2C_Master_Write	;wreg free
  9615                           
  9616                           ;main.c: 258: I2C_Master_Write(0x00);
  9617  002AE0  0E00               	movlw	0
  9618  002AE2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9619  002AE4  0E00               	movlw	0
  9620  002AE6  6E02               	movwf	i2I2C_Master_Write@d,c
  9621  002AE8  EC8E  F018         	call	i2_I2C_Master_Write	;wreg free
  9622                           
  9623                           ;main.c: 259: I2C_Master_Stop();
  9624  002AEC  EC9B  F018         	call	i2_I2C_Master_Stop	;wreg free
  9625                           
  9626                           ;main.c: 262: I2C_Master_Start();
  9627  002AF0  EC9F  F018         	call	i2_I2C_Master_Start	;wreg free
  9628                           
  9629                           ;main.c: 263: I2C_Master_Write(0b11010001);
  9630  002AF4  0E00               	movlw	0
  9631  002AF6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9632  002AF8  0ED1               	movlw	209
  9633  002AFA  6E02               	movwf	i2I2C_Master_Write@d,c
  9634  002AFC  EC8E  F018         	call	i2_I2C_Master_Write	;wreg free
  9635                           
  9636                           ;main.c: 264: for(unsigned char i=0;i<0x06;i++){
  9637  002B00  0E00               	movlw	0
  9638  002B02  6E04               	movwf	read_time@i,c
  9639  002B04                     i2l4464:
  9640  002B04  0E05               	movlw	5
  9641  002B06  6404               	cpfsgt	read_time@i,c
  9642  002B08  D001               	goto	i2l4468
  9643  002B0A  D00E               	goto	i2l4474
  9644  002B0C                     i2l4468:
  9645                           
  9646                           ;main.c: 265: time[i] = I2C_Master_Read(1);
  9647  002B0C  5004               	movf	read_time@i,w,c
  9648  002B0E  0D01               	mullw	1
  9649  002B10  0E92               	movlw	low _time
  9650  002B12  24F3               	addwf	prodl,w,c
  9651  002B14  6ED9               	movwf	fsr2l,c
  9652  002B16  0E00               	movlw	high _time
  9653  002B18  20F4               	addwfc	prodh,w,c
  9654  002B1A  6EDA               	movwf	fsr2h,c
  9655  002B1C  0E01               	movlw	1
  9656  002B1E  ECF6  F017         	call	i2_I2C_Master_Read
  9657  002B22  6EDF               	movwf	indf2,c
  9658  002B24  2A04               	incf	read_time@i,f,c
  9659  002B26  D7EE               	goto	i2l4464
  9660  002B28                     i2l4474:
  9661                           
  9662                           ;main.c: 266: }
  9663                           ;main.c: 267: time[6] = I2C_Master_Read(0);
  9664  002B28  0E00               	movlw	0
  9665  002B2A  ECF6  F017         	call	i2_I2C_Master_Read
  9666  002B2E  0100               	movlb	0	; () banked
  9667  002B30  6F98               	movwf	(_time+6)& (0+255),b
  9668                           
  9669                           ;main.c: 268: I2C_Master_Stop();
  9670  002B32  EC9B  F018         	call	i2_I2C_Master_Stop	;wreg free
  9671  002B36  0012               	return	
  9672  002B38                     __end_of_read_time:
  9673                           	opt stack 0
  9674                           pclatu	equ	0xFFB
  9675                           pclath	equ	0xFFA
  9676                           tblptru	equ	0xFF8
  9677                           tblptrh	equ	0xFF7
  9678                           tblptrl	equ	0xFF6
  9679                           tablat	equ	0xFF5
  9680                           prodh	equ	0xFF4
  9681                           prodl	equ	0xFF3
  9682                           intcon	equ	0xFF2
  9683                           intcon2	equ	0xFF1
  9684                           intcon3	equ	0xFF0
  9685                           postinc0	equ	0xFEE
  9686                           fsr0h	equ	0xFEA
  9687                           fsr0l	equ	0xFE9
  9688                           wreg	equ	0xFE8
  9689                           fsr1h	equ	0xFE2
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           postdec2	equ	0xFDD
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function i2_I2C_Master_Write *****************
  9699 ;; Defined at:
  9700 ;;		line 48 in file "I2C.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  d               2    1[COMRAM] unsigned int 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;		None
  9705 ;; Return value:  Size  Location     Type
  9706 ;;                  1    wreg      void 
  9707 ;; Registers used:
  9708 ;;		wreg, status,2, status,0, cstack
  9709 ;; Tracked objects:
  9710 ;;		On entry : 0/0
  9711 ;;		On exit  : 0/0
  9712 ;;		Unchanged: 0/0
  9713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;Total ram usage:        2 bytes
  9719 ;; Hardware stack levels used:    1
  9720 ;; Hardware stack levels required when called:    1
  9721 ;; This function calls:
  9722 ;;		i2_I2C_Master_Wait
  9723 ;; This function is called by:
  9724 ;;		_read_time
  9725 ;;		i2_read_colorsensor
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text44
  9730  00311C                     __ptext44:
  9731                           	opt stack 0
  9732  00311C                     i2_I2C_Master_Write:
  9733                           	opt stack 23
  9734                           
  9735                           ;I2C.c: 50: I2C_Master_Wait();
  9736                           
  9737                           ;incstack = 0
  9738  00311C  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9739                           
  9740                           ;I2C.c: 51: SSPBUF = d;
  9741  003120  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9742  003124  0012               	return		;funcret
  9743  003126                     __end_ofi2_I2C_Master_Write:
  9744                           	opt stack 0
  9745                           pclatu	equ	0xFFB
  9746                           pclath	equ	0xFFA
  9747                           tblptru	equ	0xFF8
  9748                           tblptrh	equ	0xFF7
  9749                           tblptrl	equ	0xFF6
  9750                           tablat	equ	0xFF5
  9751                           prodh	equ	0xFF4
  9752                           prodl	equ	0xFF3
  9753                           intcon	equ	0xFF2
  9754                           intcon2	equ	0xFF1
  9755                           intcon3	equ	0xFF0
  9756                           postinc0	equ	0xFEE
  9757                           fsr0h	equ	0xFEA
  9758                           fsr0l	equ	0xFE9
  9759                           wreg	equ	0xFE8
  9760                           fsr1h	equ	0xFE2
  9761                           fsr1l	equ	0xFE1
  9762                           indf2	equ	0xFDF
  9763                           postinc2	equ	0xFDE
  9764                           postdec2	equ	0xFDD
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function i2_I2C_Master_Stop *****************
  9770 ;; Defined at:
  9771 ;;		line 42 in file "I2C.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;		None
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, status,2, status,0, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;Total ram usage:        0 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    1
  9792 ;; This function calls:
  9793 ;;		i2_I2C_Master_Wait
  9794 ;; This function is called by:
  9795 ;;		_read_time
  9796 ;;		i2_read_colorsensor
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text45
  9801  003136                     __ptext45:
  9802                           	opt stack 0
  9803  003136                     i2_I2C_Master_Stop:
  9804                           	opt stack 23
  9805                           
  9806                           ;I2C.c: 44: I2C_Master_Wait();
  9807                           
  9808                           ;incstack = 0
  9809  003136  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9810                           
  9811                           ;I2C.c: 45: PEN = 1;
  9812  00313A  84C5               	bsf	4037,2,c	;volatile
  9813  00313C  0012               	return		;funcret
  9814  00313E                     __end_ofi2_I2C_Master_Stop:
  9815                           	opt stack 0
  9816                           pclatu	equ	0xFFB
  9817                           pclath	equ	0xFFA
  9818                           tblptru	equ	0xFF8
  9819                           tblptrh	equ	0xFF7
  9820                           tblptrl	equ	0xFF6
  9821                           tablat	equ	0xFF5
  9822                           prodh	equ	0xFF4
  9823                           prodl	equ	0xFF3
  9824                           intcon	equ	0xFF2
  9825                           intcon2	equ	0xFF1
  9826                           intcon3	equ	0xFF0
  9827                           postinc0	equ	0xFEE
  9828                           fsr0h	equ	0xFEA
  9829                           fsr0l	equ	0xFE9
  9830                           wreg	equ	0xFE8
  9831                           fsr1h	equ	0xFE2
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function i2_I2C_Master_Start *****************
  9841 ;; Defined at:
  9842 ;;		line 30 in file "I2C.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      void 
  9849 ;; Registers used:
  9850 ;;		wreg, status,2, status,0, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;Total ram usage:        0 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    1
  9863 ;; This function calls:
  9864 ;;		i2_I2C_Master_Wait
  9865 ;; This function is called by:
  9866 ;;		_read_time
  9867 ;;		i2_read_colorsensor
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text46
  9872  00313E                     __ptext46:
  9873                           	opt stack 0
  9874  00313E                     i2_I2C_Master_Start:
  9875                           	opt stack 23
  9876                           
  9877                           ;I2C.c: 32: I2C_Master_Wait();
  9878                           
  9879                           ;incstack = 0
  9880  00313E  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9881                           
  9882                           ;I2C.c: 33: SEN = 1;
  9883  003142  80C5               	bsf	4037,0,c	;volatile
  9884  003144  0012               	return		;funcret
  9885  003146                     __end_ofi2_I2C_Master_Start:
  9886                           	opt stack 0
  9887                           pclatu	equ	0xFFB
  9888                           pclath	equ	0xFFA
  9889                           tblptru	equ	0xFF8
  9890                           tblptrh	equ	0xFF7
  9891                           tblptrl	equ	0xFF6
  9892                           tablat	equ	0xFF5
  9893                           prodh	equ	0xFF4
  9894                           prodl	equ	0xFF3
  9895                           intcon	equ	0xFF2
  9896                           intcon2	equ	0xFF1
  9897                           intcon3	equ	0xFF0
  9898                           postinc0	equ	0xFEE
  9899                           fsr0h	equ	0xFEA
  9900                           fsr0l	equ	0xFE9
  9901                           wreg	equ	0xFE8
  9902                           fsr1h	equ	0xFE2
  9903                           fsr1l	equ	0xFE1
  9904                           indf2	equ	0xFDF
  9905                           postinc2	equ	0xFDE
  9906                           postdec2	equ	0xFDD
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function i2_I2C_Master_Read *****************
  9912 ;; Defined at:
  9913 ;;		line 110 in file "I2C.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  a               1    wreg     unsigned char 
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;  a               1    1[COMRAM] unsigned char 
  9918 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9919 ;; Return value:  Size  Location     Type
  9920 ;;                  1    wreg      unsigned char 
  9921 ;; Registers used:
  9922 ;;		wreg, status,2, status,0, cstack
  9923 ;; Tracked objects:
  9924 ;;		On entry : 0/0
  9925 ;;		On exit  : 0/0
  9926 ;;		Unchanged: 0/0
  9927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;Total ram usage:        2 bytes
  9933 ;; Hardware stack levels used:    1
  9934 ;; Hardware stack levels required when called:    1
  9935 ;; This function calls:
  9936 ;;		i2_I2C_Master_Wait
  9937 ;; This function is called by:
  9938 ;;		_read_time
  9939 ;;		i2_read_colorsensor
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	text47
  9944  002FEC                     __ptext47:
  9945                           	opt stack 0
  9946  002FEC                     i2_I2C_Master_Read:
  9947                           	opt stack 23
  9948                           
  9949                           ;incstack = 0
  9950                           ;i2I2C_Master_Read@a stored from wreg
  9951  002FEC  6E02               	movwf	i2I2C_Master_Read@a,c
  9952                           
  9953                           ;I2C.c: 112: unsigned char temp;
  9954                           ;I2C.c: 113: I2C_Master_Wait();
  9955  002FEE  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9956                           
  9957                           ;I2C.c: 114: RCEN = 1;
  9958  002FF2  86C5               	bsf	4037,3,c	;volatile
  9959                           
  9960                           ;I2C.c: 115: I2C_Master_Wait();
  9961  002FF4  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9962                           
  9963                           ;I2C.c: 116: temp = SSPBUF;
  9964  002FF8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9965                           
  9966                           ;I2C.c: 117: I2C_Master_Wait();
  9967  002FFC  EC64  F018         	call	i2_I2C_Master_Wait	;wreg free
  9968                           
  9969                           ;I2C.c: 118: ACKDT = (a)?0:1;
  9970  003000  5002               	movf	i2I2C_Master_Read@a,w,c
  9971  003002  A4D8               	btfss	status,2,c
  9972  003004  D002               	goto	i2u395_40
  9973  003006  8AC5               	bsf	4037,5,c	;volatile
  9974  003008  D001               	goto	i2l4152
  9975  00300A                     i2u395_40:
  9976  00300A  9AC5               	bcf	4037,5,c	;volatile
  9977  00300C                     i2l4152:
  9978                           
  9979                           ;I2C.c: 119: ACKEN = 1;
  9980  00300C  88C5               	bsf	4037,4,c	;volatile
  9981                           
  9982                           ;I2C.c: 120: return temp;
  9983  00300E  5003               	movf	i2I2C_Master_Read@temp,w,c
  9984  003010  0012               	return	
  9985  003012                     __end_ofi2_I2C_Master_Read:
  9986                           	opt stack 0
  9987                           pclatu	equ	0xFFB
  9988                           pclath	equ	0xFFA
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon2	equ	0xFF1
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           fsr0h	equ	0xFEA
 10000                           fsr0l	equ	0xFE9
 10001                           wreg	equ	0xFE8
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function i2_I2C_Master_Wait *****************
 10012 ;; Defined at:
 10013 ;;		line 25 in file "I2C.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;		None
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		wreg, status,2, status,0
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10031 ;;Total ram usage:        1 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		i2_I2C_Master_Start
 10037 ;;		i2_I2C_Master_Stop
 10038 ;;		i2_I2C_Master_Write
 10039 ;;		i2_I2C_Master_Read
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text48
 10044  0030C8                     __ptext48:
 10045                           	opt stack 0
 10046  0030C8                     i2_I2C_Master_Wait:
 10047                           	opt stack 23
 10048  0030C8                     i2l34:
 10049  0030C8  B4C7               	btfsc	4039,2,c	;volatile
 10050  0030CA  D7FE               	goto	i2l34
 10051  0030CC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10052  0030D0  0E1F               	movlw	31
 10053  0030D2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10054  0030D4  B4D8               	btfsc	status,2,c
 10055  0030D6  0012               	return	
 10056  0030D8  D7F7               	goto	i2l34
 10057  0030DA                     __end_ofi2_I2C_Master_Wait:
 10058                           	opt stack 0
 10059                           pclatu	equ	0xFFB
 10060                           pclath	equ	0xFFA
 10061                           tblptru	equ	0xFF8
 10062                           tblptrh	equ	0xFF7
 10063                           tblptrl	equ	0xFF6
 10064                           tablat	equ	0xFF5
 10065                           prodh	equ	0xFF4
 10066                           prodl	equ	0xFF3
 10067                           intcon	equ	0xFF2
 10068                           intcon2	equ	0xFF1
 10069                           intcon3	equ	0xFF0
 10070                           postinc0	equ	0xFEE
 10071                           fsr0h	equ	0xFEA
 10072                           fsr0l	equ	0xFE9
 10073                           wreg	equ	0xFE8
 10074                           fsr1h	equ	0xFE2
 10075                           fsr1l	equ	0xFE1
 10076                           indf2	equ	0xFDF
 10077                           postinc2	equ	0xFDE
 10078                           postdec2	equ	0xFDD
 10079                           fsr2h	equ	0xFDA
 10080                           fsr2l	equ	0xFD9
 10081                           status	equ	0xFD8
 10082                           
 10083 ;; *************** function _dec_to_hex *****************
 10084 ;; Defined at:
 10085 ;;		line 217 in file "main.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  num             2   98[COMRAM] int 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  quotient        2  112[COMRAM] int 
 10090 ;;  hexnum          2  110[COMRAM] int 
 10091 ;;  i               2  108[COMRAM] int 
 10092 ;;  temp            2  106[COMRAM] int 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  2   98[COMRAM] int 
 10095 ;; Registers used:
 10096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;Total ram usage:       16 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    5
 10109 ;; This function calls:
 10110 ;;		___awdiv
 10111 ;;		___ftadd
 10112 ;;		___ftmul
 10113 ;;		___fttol
 10114 ;;		_pow
 10115 ;;		i2___awtoft
 10116 ;; This function is called by:
 10117 ;;		_isr
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text49
 10122  001A68                     __ptext49:
 10123                           	opt stack 0
 10124  001A68                     _dec_to_hex:
 10125                           	opt stack 20
 10126                           
 10127                           ;main.c: 218: int i = 0, quotient = num, temp, hexnum = 0;
 10128                           
 10129                           ;incstack = 0
 10130  001A68  0E00               	movlw	0
 10131  001A6A  6E6E               	movwf	dec_to_hex@i+1,c
 10132  001A6C  0E00               	movlw	0
 10133  001A6E  6E6D               	movwf	dec_to_hex@i,c
 10134  001A70  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
 10135  001A74  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 10136  001A78  0E00               	movlw	0
 10137  001A7A  6E70               	movwf	dec_to_hex@hexnum+1,c
 10138  001A7C  0E00               	movlw	0
 10139  001A7E  6E6F               	movwf	dec_to_hex@hexnum,c
 10140                           
 10141                           ;main.c: 220: while (quotient != 0) {
 10142  001A80  D068               	goto	i2l4494
 10143  001A82                     i2l4482:
 10144                           
 10145                           ;main.c: 221: temp = quotient % 16;
 10146  001A82  0E0F               	movlw	15
 10147  001A84  1471               	andwf	dec_to_hex@quotient,w,c
 10148  001A86  6E6B               	movwf	dec_to_hex@temp,c
 10149  001A88  6A6C               	clrf	dec_to_hex@temp+1,c
 10150                           
 10151                           ;main.c: 222: hexnum += temp*pow(10,i);
 10152  001A8A  C06D  F009         	movff	dec_to_hex@i,i2___awtoft@c
 10153  001A8E  C06E  F00A         	movff	dec_to_hex@i+1,i2___awtoft@c+1
 10154  001A92  EC78  F017         	call	i2___awtoft	;wreg free
 10155  001A96  C009  F068         	movff	?i2___awtoft,_dec_to_hex$1372
 10156  001A9A  C00A  F069         	movff	?i2___awtoft+1,_dec_to_hex$1372+1
 10157  001A9E  C00B  F06A         	movff	?i2___awtoft+2,_dec_to_hex$1372+2
 10158                           
 10159                           ;main.c: 222: hexnum += temp*pow(10,i);
 10160  001AA2  C068  F055         	movff	_dec_to_hex$1372,pow@y
 10161  001AA6  C069  F056         	movff	_dec_to_hex$1372+1,pow@y+1
 10162  001AAA  C06A  F057         	movff	_dec_to_hex$1372+2,pow@y+2
 10163  001AAE  0E00               	movlw	0
 10164  001AB0  6E52               	movwf	pow@x,c
 10165  001AB2  0E20               	movlw	32
 10166  001AB4  6E53               	movwf	pow@x+1,c
 10167  001AB6  0E41               	movlw	65
 10168  001AB8  6E54               	movwf	pow@x+2,c
 10169  001ABA  EC0E  F009         	call	_pow	;wreg free
 10170  001ABE  C052  F065         	movff	?_pow,_dec_to_hex$1245
 10171  001AC2  C053  F066         	movff	?_pow+1,_dec_to_hex$1245+1
 10172  001AC6  C054  F067         	movff	?_pow+2,_dec_to_hex$1245+2
 10173                           
 10174                           ;main.c: 222: hexnum += temp*pow(10,i);
 10175  001ACA  C065  F010         	movff	_dec_to_hex$1245,___ftmul@f2
 10176  001ACE  C066  F011         	movff	_dec_to_hex$1245+1,___ftmul@f2+1
 10177  001AD2  C067  F012         	movff	_dec_to_hex$1245+2,___ftmul@f2+2
 10178  001AD6  C06B  F009         	movff	dec_to_hex@temp,i2___awtoft@c
 10179  001ADA  C06C  F00A         	movff	dec_to_hex@temp+1,i2___awtoft@c+1
 10180  001ADE  EC78  F017         	call	i2___awtoft	;wreg free
 10181  001AE2  C009  F00D         	movff	?i2___awtoft,___ftmul@f1
 10182  001AE6  C00A  F00E         	movff	?i2___awtoft+1,___ftmul@f1+1
 10183  001AEA  C00B  F00F         	movff	?i2___awtoft+2,___ftmul@f1+2
 10184  001AEE  ECA8  F00E         	call	___ftmul	;wreg free
 10185  001AF2  C00D  F01F         	movff	?___ftmul,___ftadd@f2
 10186  001AF6  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
 10187  001AFA  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
 10188  001AFE  C06F  F009         	movff	dec_to_hex@hexnum,i2___awtoft@c
 10189  001B02  C070  F00A         	movff	dec_to_hex@hexnum+1,i2___awtoft@c+1
 10190  001B06  EC78  F017         	call	i2___awtoft	;wreg free
 10191  001B0A  C009  F01C         	movff	?i2___awtoft,___ftadd@f1
 10192  001B0E  C00A  F01D         	movff	?i2___awtoft+1,___ftadd@f1+1
 10193  001B12  C00B  F01E         	movff	?i2___awtoft+2,___ftadd@f1+2
 10194  001B16  EC38  F008         	call	___ftadd	;wreg free
 10195  001B1A  C01C  F028         	movff	?___ftadd,___fttol@f1
 10196  001B1E  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
 10197  001B22  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
 10198  001B26  EC2E  F00E         	call	___fttol	;wreg free
 10199  001B2A  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
 10200  001B2E  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
 10201                           
 10202                           ;main.c: 223: quotient = quotient / 16;
 10203  001B32  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
 10204  001B36  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
 10205  001B3A  0E00               	movlw	0
 10206  001B3C  6E04               	movwf	___awdiv@divisor+1,c
 10207  001B3E  0E10               	movlw	16
 10208  001B40  6E03               	movwf	___awdiv@divisor,c
 10209  001B42  ECAE  F014         	call	___awdiv	;wreg free
 10210  001B46  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
 10211  001B4A  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
 10212                           
 10213                           ;main.c: 224: i += 1;
 10214  001B4E  4A6D               	infsnz	dec_to_hex@i,f,c
 10215  001B50  2A6E               	incf	dec_to_hex@i+1,f,c
 10216  001B52                     i2l4494:
 10217  001B52  5071               	movf	dec_to_hex@quotient,w,c
 10218  001B54  1072               	iorwf	dec_to_hex@quotient+1,w,c
 10219  001B56  A4D8               	btfss	status,2,c
 10220  001B58  D794               	goto	i2l4482
 10221                           
 10222                           ;main.c: 225: }
 10223                           ;main.c: 226: return hexnum;
 10224  001B5A  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
 10225  001B5E  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 10226  001B62  0012               	return		;funcret
 10227  001B64                     __end_of_dec_to_hex:
 10228                           	opt stack 0
 10229                           pclatu	equ	0xFFB
 10230                           pclath	equ	0xFFA
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           intcon2	equ	0xFF1
 10239                           intcon3	equ	0xFF0
 10240                           postinc0	equ	0xFEE
 10241                           fsr0h	equ	0xFEA
 10242                           fsr0l	equ	0xFE9
 10243                           wreg	equ	0xFE8
 10244                           fsr1h	equ	0xFE2
 10245                           fsr1l	equ	0xFE1
 10246                           indf2	equ	0xFDF
 10247                           postinc2	equ	0xFDE
 10248                           postdec2	equ	0xFDD
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           
 10253 ;; *************** function _pow *****************
 10254 ;; Defined at:
 10255 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  x               3   81[COMRAM] int 
 10258 ;;  y               3   84[COMRAM] int 
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  yi              4   94[COMRAM] unsigned long 
 10261 ;;  sign            1   93[COMRAM] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  3   81[COMRAM] unsigned char 
 10264 ;; Registers used:
 10265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10271 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10275 ;;Total ram usage:       17 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    4
 10278 ;; This function calls:
 10279 ;;		___ftmul
 10280 ;;		___ftneg
 10281 ;;		___fttol
 10282 ;;		___lltoft
 10283 ;;		_exp
 10284 ;;		_log
 10285 ;;		i2___ftge
 10286 ;; This function is called by:
 10287 ;;		_dec_to_hex
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           	psect	text50
 10292  00121C                     __ptext50:
 10293                           	opt stack 0
 10294  00121C                     _pow:
 10295                           	opt stack 20
 10296                           
 10297                           ;incstack = 0
 10298  00121C  0E00               	movlw	0
 10299  00121E  6E5E               	movwf	pow@sign,c
 10300  001220  5052               	movf	pow@x,w,c
 10301  001222  1053               	iorwf	pow@x+1,w,c
 10302  001224  1054               	iorwf	pow@x+2,w,c
 10303  001226  A4D8               	btfss	status,2,c
 10304  001228  D01C               	goto	i2l3900
 10305  00122A  0E00               	movlw	0
 10306  00122C  6E01               	movwf	i2___ftge@ff1,c
 10307  00122E  0E00               	movlw	0
 10308  001230  6E02               	movwf	i2___ftge@ff1+1,c
 10309  001232  0E00               	movlw	0
 10310  001234  6E03               	movwf	i2___ftge@ff1+2,c
 10311  001236  C055  F004         	movff	pow@y,i2___ftge@ff2
 10312  00123A  C056  F005         	movff	pow@y+1,i2___ftge@ff2+1
 10313  00123E  C057  F006         	movff	pow@y+2,i2___ftge@ff2+2
 10314  001242  EC1E  F014         	call	i2___ftge	;wreg free
 10315  001246  A0D8               	btfss	status,0,c
 10316  001248  D005               	goto	i2l920
 10317  00124A  0E00               	movlw	0
 10318  00124C  0100               	movlb	0	; () banked
 10319  00124E  6FB2               	movwf	(_errno+1)& (0+255),b
 10320  001250  0E21               	movlw	33
 10321  001252  6FB1               	movwf	_errno& (0+255),b
 10322  001254                     i2l920:
 10323  001254  0E00               	movlw	0
 10324  001256  6E52               	movwf	?_pow,c
 10325  001258  0E00               	movlw	0
 10326  00125A  6E53               	movwf	?_pow+1,c
 10327  00125C  0E00               	movlw	0
 10328  00125E  6E54               	movwf	?_pow+2,c
 10329  001260  0012               	return	
 10330  001262                     i2l3900:
 10331  001262  5055               	movf	pow@y,w,c
 10332  001264  1056               	iorwf	pow@y+1,w,c
 10333  001266  1057               	iorwf	pow@y+2,w,c
 10334  001268  A4D8               	btfss	status,2,c
 10335  00126A  D007               	goto	i2l3906
 10336  00126C  0E00               	movlw	0
 10337  00126E  6E52               	movwf	?_pow,c
 10338  001270  0E80               	movlw	128
 10339  001272  6E53               	movwf	?_pow+1,c
 10340  001274  0E3F               	movlw	63
 10341  001276  6E54               	movwf	?_pow+2,c
 10342  001278  0012               	return	
 10343  00127A                     i2l3906:
 10344  00127A  AE54               	btfss	pow@x+2,7,c
 10345  00127C  D041               	goto	i2l3918
 10346  00127E  C055  F028         	movff	pow@y,___fttol@f1
 10347  001282  C056  F029         	movff	pow@y+1,___fttol@f1+1
 10348  001286  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 10349  00128A  EC2E  F00E         	call	___fttol	;wreg free
 10350  00128E  C028  F05F         	movff	?___fttol,pow@yi
 10351  001292  C029  F060         	movff	?___fttol+1,pow@yi+1
 10352  001296  C02A  F061         	movff	?___fttol+2,pow@yi+2
 10353  00129A  C02B  F062         	movff	?___fttol+3,pow@yi+3
 10354  00129E  C05F  F009         	movff	pow@yi,___lltoft@c
 10355  0012A2  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 10356  0012A6  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 10357  0012AA  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 10358  0012AE  EC2D  F016         	call	___lltoft	;wreg free
 10359  0012B2  5055               	movf	pow@y,w,c
 10360  0012B4  1809               	xorwf	?___lltoft,w,c
 10361  0012B6  E107               	bnz	i2u365_40
 10362  0012B8  5056               	movf	pow@y+1,w,c
 10363  0012BA  180A               	xorwf	?___lltoft+1,w,c
 10364  0012BC  E104               	bnz	i2u365_40
 10365  0012BE  5057               	movf	pow@y+2,w,c
 10366  0012C0  180B               	xorwf	?___lltoft+2,w,c
 10367  0012C2  B4D8               	btfsc	status,2,c
 10368  0012C4  D00C               	goto	i2l3914
 10369  0012C6                     i2u365_40:
 10370  0012C6  0E00               	movlw	0
 10371  0012C8  0100               	movlb	0	; () banked
 10372  0012CA  6FB2               	movwf	(_errno+1)& (0+255),b
 10373  0012CC  0E21               	movlw	33
 10374  0012CE  6FB1               	movwf	_errno& (0+255),b
 10375  0012D0  0E00               	movlw	0
 10376  0012D2  6E52               	movwf	?_pow,c
 10377  0012D4  0E00               	movlw	0
 10378  0012D6  6E53               	movwf	?_pow+1,c
 10379  0012D8  0E00               	movlw	0
 10380  0012DA  6E54               	movwf	?_pow+2,c
 10381                           
 10382                           ; BSR set to: 0
 10383  0012DC  0012               	return	
 10384  0012DE                     i2l3914:
 10385  0012DE  505F               	movf	pow@yi,w,c
 10386  0012E0  0B01               	andlw	1
 10387  0012E2  6E5E               	movwf	pow@sign,c
 10388  0012E4  C052  F001         	movff	pow@x,___ftneg@f1
 10389  0012E8  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10390  0012EC  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10391  0012F0  EC1C  F018         	call	___ftneg	;wreg free
 10392  0012F4  C001  F052         	movff	?___ftneg,pow@x
 10393  0012F8  C002  F053         	movff	?___ftneg+1,pow@x+1
 10394  0012FC  C003  F054         	movff	?___ftneg+2,pow@x+2
 10395  001300                     i2l3918:
 10396  001300  C052  F034         	movff	pow@x,log@x
 10397  001304  C053  F035         	movff	pow@x+1,log@x+1
 10398  001308  C054  F036         	movff	pow@x+2,log@x+2
 10399  00130C  EC1E  F00B         	call	_log	;wreg free
 10400  001310  C034  F058         	movff	?_log,_pow$1246
 10401  001314  C035  F059         	movff	?_log+1,_pow$1246+1
 10402  001318  C036  F05A         	movff	?_log+2,_pow$1246+2
 10403  00131C  C058  F00D         	movff	_pow$1246,___ftmul@f1
 10404  001320  C059  F00E         	movff	_pow$1246+1,___ftmul@f1+1
 10405  001324  C05A  F00F         	movff	_pow$1246+2,___ftmul@f1+2
 10406  001328  C055  F010         	movff	pow@y,___ftmul@f2
 10407  00132C  C056  F011         	movff	pow@y+1,___ftmul@f2+1
 10408  001330  C057  F012         	movff	pow@y+2,___ftmul@f2+2
 10409  001334  ECA8  F00E         	call	___ftmul	;wreg free
 10410  001338  C00D  F05B         	movff	?___ftmul,_pow$1247
 10411  00133C  C00E  F05C         	movff	?___ftmul+1,_pow$1247+1
 10412  001340  C00F  F05D         	movff	?___ftmul+2,_pow$1247+2
 10413  001344  C05B  F049         	movff	_pow$1247,exp@x
 10414  001348  C05C  F04A         	movff	_pow$1247+1,exp@x+1
 10415  00134C  C05D  F04B         	movff	_pow$1247+2,exp@x+2
 10416  001350  EC44  F007         	call	_exp	;wreg free
 10417  001354  C049  F052         	movff	?_exp,pow@x
 10418  001358  C04A  F053         	movff	?_exp+1,pow@x+1
 10419  00135C  C04B  F054         	movff	?_exp+2,pow@x+2
 10420  001360  505E               	movf	pow@sign,w,c
 10421  001362  B4D8               	btfsc	status,2,c
 10422  001364  D00F               	goto	i2l925
 10423  001366  C052  F001         	movff	pow@x,___ftneg@f1
 10424  00136A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10425  00136E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10426  001372  EC1C  F018         	call	___ftneg	;wreg free
 10427  001376  C001  F052         	movff	?___ftneg,?_pow
 10428  00137A  C002  F053         	movff	?___ftneg+1,?_pow+1
 10429  00137E  C003  F054         	movff	?___ftneg+2,?_pow+2
 10430  001382  0012               	return	
 10431  001384                     i2l925:
 10432  001384  C052  F052         	movff	pow@x,?_pow
 10433  001388  C053  F053         	movff	pow@x+1,?_pow+1
 10434  00138C  C054  F054         	movff	pow@x+2,?_pow+2
 10435  001390  0012               	return		;funcret
 10436  001392                     __end_of_pow:
 10437                           	opt stack 0
 10438                           pclatu	equ	0xFFB
 10439                           pclath	equ	0xFFA
 10440                           tblptru	equ	0xFF8
 10441                           tblptrh	equ	0xFF7
 10442                           tblptrl	equ	0xFF6
 10443                           tablat	equ	0xFF5
 10444                           prodh	equ	0xFF4
 10445                           prodl	equ	0xFF3
 10446                           intcon	equ	0xFF2
 10447                           intcon2	equ	0xFF1
 10448                           intcon3	equ	0xFF0
 10449                           postinc0	equ	0xFEE
 10450                           fsr0h	equ	0xFEA
 10451                           fsr0l	equ	0xFE9
 10452                           wreg	equ	0xFE8
 10453                           fsr1h	equ	0xFE2
 10454                           fsr1l	equ	0xFE1
 10455                           indf2	equ	0xFDF
 10456                           postinc2	equ	0xFDE
 10457                           postdec2	equ	0xFDD
 10458                           fsr2h	equ	0xFDA
 10459                           fsr2l	equ	0xFD9
 10460                           status	equ	0xFD8
 10461                           
 10462 ;; *************** function _log *****************
 10463 ;; Defined at:
 10464 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;  x               3   51[COMRAM] unsigned char 
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  exponent        2   54[COMRAM] int 
 10469 ;; Return value:  Size  Location     Type
 10470 ;;                  3   51[COMRAM] int 
 10471 ;; Registers used:
 10472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10473 ;; Tracked objects:
 10474 ;;		On entry : 0/0
 10475 ;;		On exit  : 0/0
 10476 ;;		Unchanged: 0/0
 10477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10478 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;Total ram usage:        5 bytes
 10483 ;; Hardware stack levels used:    1
 10484 ;; Hardware stack levels required when called:    3
 10485 ;; This function calls:
 10486 ;;		___ftadd
 10487 ;;		___ftmul
 10488 ;;		_eval_poly
 10489 ;;		_frexp
 10490 ;;		i2___awtoft
 10491 ;; This function is called by:
 10492 ;;		_pow
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           	psect	text51
 10497  00163C                     __ptext51:
 10498                           	opt stack 0
 10499  00163C                     _log:
 10500                           	opt stack 20
 10501                           
 10502                           ;incstack = 0
 10503  00163C  AE36               	btfss	log@x+2,7,c
 10504  00163E  D00C               	goto	i2l3634
 10505  001640  0E00               	movlw	0
 10506  001642  0100               	movlb	0	; () banked
 10507  001644  6FB2               	movwf	(_errno+1)& (0+255),b
 10508  001646  0E21               	movlw	33
 10509  001648  6FB1               	movwf	_errno& (0+255),b
 10510  00164A  0E00               	movlw	0
 10511  00164C  6E34               	movwf	?_log,c
 10512  00164E  0E00               	movlw	0
 10513  001650  6E35               	movwf	?_log+1,c
 10514  001652  0E00               	movlw	0
 10515  001654  6E36               	movwf	?_log+2,c
 10516                           
 10517                           ; BSR set to: 0
 10518  001656  0012               	return	
 10519  001658                     i2l3634:
 10520  001658  5034               	movf	log@x,w,c
 10521  00165A  1035               	iorwf	log@x+1,w,c
 10522  00165C  1036               	iorwf	log@x+2,w,c
 10523  00165E  A4D8               	btfss	status,2,c
 10524  001660  D00C               	goto	i2l3640
 10525  001662  0E00               	movlw	0
 10526  001664  0100               	movlb	0	; () banked
 10527  001666  6FB2               	movwf	(_errno+1)& (0+255),b
 10528  001668  0E22               	movlw	34
 10529  00166A  6FB1               	movwf	_errno& (0+255),b
 10530  00166C  0E00               	movlw	0
 10531  00166E  6E34               	movwf	?_log,c
 10532  001670  0E00               	movlw	0
 10533  001672  6E35               	movwf	?_log+1,c
 10534  001674  0E00               	movlw	0
 10535  001676  6E36               	movwf	?_log+2,c
 10536                           
 10537                           ; BSR set to: 0
 10538  001678  0012               	return	
 10539  00167A                     i2l3640:
 10540  00167A  0E00               	movlw	0
 10541  00167C  6E10               	movwf	___ftmul@f2,c
 10542  00167E  0E00               	movlw	0
 10543  001680  6E11               	movwf	___ftmul@f2+1,c
 10544  001682  0E40               	movlw	64
 10545  001684  6E12               	movwf	___ftmul@f2+2,c
 10546  001686  0E37               	movlw	low log@exponent
 10547  001688  6E04               	movwf	frexp@eptr,c
 10548  00168A  0E00               	movlw	high log@exponent
 10549  00168C  6E05               	movwf	frexp@eptr+1,c
 10550  00168E  C034  F001         	movff	log@x,frexp@value
 10551  001692  C035  F002         	movff	log@x+1,frexp@value+1
 10552  001696  C036  F003         	movff	log@x+2,frexp@value+2
 10553  00169A  EC66  F014         	call	_frexp	;wreg free
 10554  00169E  C001  F00D         	movff	?_frexp,___ftmul@f1
 10555  0016A2  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10556  0016A6  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10557  0016AA  ECA8  F00E         	call	___ftmul	;wreg free
 10558  0016AE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10559  0016B2  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10560  0016B6  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10561  0016BA  0E00               	movlw	0
 10562  0016BC  6E1F               	movwf	___ftadd@f2,c
 10563  0016BE  0E80               	movlw	128
 10564  0016C0  6E20               	movwf	___ftadd@f2+1,c
 10565  0016C2  0EBF               	movlw	191
 10566  0016C4  6E21               	movwf	___ftadd@f2+2,c
 10567  0016C6  EC38  F008         	call	___ftadd	;wreg free
 10568  0016CA  C01C  F034         	movff	?___ftadd,log@x
 10569  0016CE  C01D  F035         	movff	?___ftadd+1,log@x+1
 10570  0016D2  C01E  F036         	movff	?___ftadd+2,log@x+2
 10571  0016D6  0637               	decf	log@exponent,f,c
 10572  0016D8  A0D8               	btfss	status,0,c
 10573  0016DA  0638               	decf	log@exponent+1,f,c
 10574  0016DC  C034  F028         	movff	log@x,eval_poly@x
 10575  0016E0  C035  F029         	movff	log@x+1,eval_poly@x+1
 10576  0016E4  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10577  0016E8  0E8D               	movlw	low log@coeff
 10578  0016EA  6E2B               	movwf	eval_poly@d,c
 10579  0016EC  0EFE               	movlw	high log@coeff
 10580  0016EE  6E2C               	movwf	eval_poly@d+1,c
 10581  0016F0  0E00               	movlw	0
 10582  0016F2  6E2E               	movwf	eval_poly@n+1,c
 10583  0016F4  0E08               	movlw	8
 10584  0016F6  6E2D               	movwf	eval_poly@n,c
 10585  0016F8  ECD8  F010         	call	_eval_poly	;wreg free
 10586  0016FC  C028  F034         	movff	?_eval_poly,log@x
 10587  001700  C029  F035         	movff	?_eval_poly+1,log@x+1
 10588  001704  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10589  001708  0E72               	movlw	114
 10590  00170A  6E10               	movwf	___ftmul@f2,c
 10591  00170C  0E31               	movlw	49
 10592  00170E  6E11               	movwf	___ftmul@f2+1,c
 10593  001710  0E3F               	movlw	63
 10594  001712  6E12               	movwf	___ftmul@f2+2,c
 10595  001714  C037  F009         	movff	log@exponent,i2___awtoft@c
 10596  001718  C038  F00A         	movff	log@exponent+1,i2___awtoft@c+1
 10597  00171C  EC78  F017         	call	i2___awtoft	;wreg free
 10598  001720  C009  F00D         	movff	?i2___awtoft,___ftmul@f1
 10599  001724  C00A  F00E         	movff	?i2___awtoft+1,___ftmul@f1+1
 10600  001728  C00B  F00F         	movff	?i2___awtoft+2,___ftmul@f1+2
 10601  00172C  ECA8  F00E         	call	___ftmul	;wreg free
 10602  001730  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10603  001734  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10604  001738  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10605  00173C  C034  F01F         	movff	log@x,___ftadd@f2
 10606  001740  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10607  001744  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10608  001748  EC38  F008         	call	___ftadd	;wreg free
 10609  00174C  C01C  F034         	movff	?___ftadd,?_log
 10610  001750  C01D  F035         	movff	?___ftadd+1,?_log+1
 10611  001754  C01E  F036         	movff	?___ftadd+2,?_log+2
 10612  001758  0012               	return	
 10613  00175A                     __end_of_log:
 10614                           	opt stack 0
 10615                           pclatu	equ	0xFFB
 10616                           pclath	equ	0xFFA
 10617                           tblptru	equ	0xFF8
 10618                           tblptrh	equ	0xFF7
 10619                           tblptrl	equ	0xFF6
 10620                           tablat	equ	0xFF5
 10621                           prodh	equ	0xFF4
 10622                           prodl	equ	0xFF3
 10623                           intcon	equ	0xFF2
 10624                           intcon2	equ	0xFF1
 10625                           intcon3	equ	0xFF0
 10626                           postinc0	equ	0xFEE
 10627                           fsr0h	equ	0xFEA
 10628                           fsr0l	equ	0xFE9
 10629                           wreg	equ	0xFE8
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function _exp *****************
 10640 ;; Defined at:
 10641 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  x               3   72[COMRAM] int 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  exponent        2   78[COMRAM] int 
 10646 ;;  sign            1   80[COMRAM] unsigned char 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;                  3   72[COMRAM] unsigned char 
 10649 ;; Registers used:
 10650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10656 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;Total ram usage:        9 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    3
 10663 ;; This function calls:
 10664 ;;		___ftmul
 10665 ;;		___ftneg
 10666 ;;		___ftsub
 10667 ;;		___fttol
 10668 ;;		_eval_poly
 10669 ;;		_floor
 10670 ;;		_ldexp
 10671 ;;		i2___awtoft
 10672 ;;		i2___ftdiv
 10673 ;;		i2___ftge
 10674 ;; This function is called by:
 10675 ;;		_pow
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text52
 10680  000E88                     __ptext52:
 10681                           	opt stack 0
 10682  000E88                     _exp:
 10683                           	opt stack 20
 10684                           
 10685                           ;incstack = 0
 10686  000E88  5049               	movf	exp@x,w,c
 10687  000E8A  104A               	iorwf	exp@x+1,w,c
 10688  000E8C  104B               	iorwf	exp@x+2,w,c
 10689  000E8E  A4D8               	btfss	status,2,c
 10690  000E90  D007               	goto	i2l3656
 10691  000E92  0E00               	movlw	0
 10692  000E94  6E49               	movwf	?_exp,c
 10693  000E96  0E80               	movlw	128
 10694  000E98  6E4A               	movwf	?_exp+1,c
 10695  000E9A  0E3F               	movlw	63
 10696  000E9C  6E4B               	movwf	?_exp+2,c
 10697  000E9E  0012               	return	
 10698  000EA0                     i2l3656:
 10699  000EA0  0E72               	movlw	114
 10700  000EA2  6E01               	movwf	i2___ftge@ff1,c
 10701  000EA4  0E31               	movlw	49
 10702  000EA6  6E02               	movwf	i2___ftge@ff1+1,c
 10703  000EA8  0E44               	movlw	68
 10704  000EAA  6E03               	movwf	i2___ftge@ff1+2,c
 10705  000EAC  C049  F004         	movff	exp@x,i2___ftge@ff2
 10706  000EB0  C04A  F005         	movff	exp@x+1,i2___ftge@ff2+1
 10707  000EB4  C04B  F006         	movff	exp@x+2,i2___ftge@ff2+2
 10708  000EB8  EC1E  F014         	call	i2___ftge	;wreg free
 10709  000EBC  B0D8               	btfsc	status,0,c
 10710  000EBE  D00C               	goto	i2l3662
 10711  000EC0  0E00               	movlw	0
 10712  000EC2  0100               	movlb	0	; () banked
 10713  000EC4  6FB2               	movwf	(_errno+1)& (0+255),b
 10714  000EC6  0E22               	movlw	34
 10715  000EC8  6FB1               	movwf	_errno& (0+255),b
 10716  000ECA  0EFF               	movlw	255
 10717  000ECC  6E49               	movwf	?_exp,c
 10718  000ECE  0E7F               	movlw	127
 10719  000ED0  6E4A               	movwf	?_exp+1,c
 10720  000ED2  0E7F               	movlw	127
 10721  000ED4  6E4B               	movwf	?_exp+2,c
 10722                           
 10723                           ; BSR set to: 0
 10724  000ED6  0012               	return	
 10725  000ED8                     i2l3662:
 10726  000ED8  C049  F001         	movff	exp@x,i2___ftge@ff1
 10727  000EDC  C04A  F002         	movff	exp@x+1,i2___ftge@ff1+1
 10728  000EE0  C04B  F003         	movff	exp@x+2,i2___ftge@ff1+2
 10729  000EE4  0E49               	movlw	73
 10730  000EE6  6E04               	movwf	i2___ftge@ff2,c
 10731  000EE8  0E3A               	movlw	58
 10732  000EEA  6E05               	movwf	i2___ftge@ff2+1,c
 10733  000EEC  0EC4               	movlw	196
 10734  000EEE  6E06               	movwf	i2___ftge@ff2+2,c
 10735  000EF0  EC1E  F014         	call	i2___ftge	;wreg free
 10736  000EF4  B0D8               	btfsc	status,0,c
 10737  000EF6  D00C               	goto	i2l3668
 10738  000EF8  0E00               	movlw	0
 10739  000EFA  0100               	movlb	0	; () banked
 10740  000EFC  6FB2               	movwf	(_errno+1)& (0+255),b
 10741  000EFE  0E22               	movlw	34
 10742  000F00  6FB1               	movwf	_errno& (0+255),b
 10743  000F02  0E00               	movlw	0
 10744  000F04  6E49               	movwf	?_exp,c
 10745  000F06  0E00               	movlw	0
 10746  000F08  6E4A               	movwf	?_exp+1,c
 10747  000F0A  0E00               	movlw	0
 10748  000F0C  6E4B               	movwf	?_exp+2,c
 10749                           
 10750                           ; BSR set to: 0
 10751  000F0E  0012               	return	
 10752  000F10                     i2l3668:
 10753  000F10  AE4B               	btfss	exp@x+2,7,c
 10754  000F12  D002               	goto	i2u327_40
 10755  000F14  0E01               	movlw	1
 10756  000F16  D001               	goto	i2u328_40
 10757  000F18                     i2u327_40:
 10758  000F18  0E00               	movlw	0
 10759  000F1A                     i2u328_40:
 10760  000F1A  6E51               	movwf	exp@sign,c
 10761  000F1C  5051               	movf	exp@sign,w,c
 10762  000F1E  B4D8               	btfsc	status,2,c
 10763  000F20  D00E               	goto	i2l1083
 10764  000F22  C049  F001         	movff	exp@x,___ftneg@f1
 10765  000F26  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10766  000F2A  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10767  000F2E  EC1C  F018         	call	___ftneg	;wreg free
 10768  000F32  C001  F049         	movff	?___ftneg,exp@x
 10769  000F36  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10770  000F3A  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10771  000F3E                     i2l1083:
 10772  000F3E  C049  F00D         	movff	exp@x,___ftmul@f1
 10773  000F42  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10774  000F46  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10775  000F4A  0EAA               	movlw	170
 10776  000F4C  6E10               	movwf	___ftmul@f2,c
 10777  000F4E  0EB8               	movlw	184
 10778  000F50  6E11               	movwf	___ftmul@f2+1,c
 10779  000F52  0E3F               	movlw	63
 10780  000F54  6E12               	movwf	___ftmul@f2+2,c
 10781  000F56  ECA8  F00E         	call	___ftmul	;wreg free
 10782  000F5A  C00D  F049         	movff	?___ftmul,exp@x
 10783  000F5E  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10784  000F62  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10785  000F66  C049  F041         	movff	exp@x,floor@x
 10786  000F6A  C04A  F042         	movff	exp@x+1,floor@x+1
 10787  000F6E  C04B  F043         	movff	exp@x+2,floor@x+2
 10788  000F72  EC95  F00F         	call	_floor	;wreg free
 10789  000F76  C041  F04C         	movff	?_floor,_exp$1248
 10790  000F7A  C042  F04D         	movff	?_floor+1,_exp$1248+1
 10791  000F7E  C043  F04E         	movff	?_floor+2,_exp$1248+2
 10792  000F82  C04C  F028         	movff	_exp$1248,___fttol@f1
 10793  000F86  C04D  F029         	movff	_exp$1248+1,___fttol@f1+1
 10794  000F8A  C04E  F02A         	movff	_exp$1248+2,___fttol@f1+2
 10795  000F8E  EC2E  F00E         	call	___fttol	;wreg free
 10796  000F92  C028  F04F         	movff	?___fttol,exp@exponent
 10797  000F96  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10798  000F9A  C049  F028         	movff	exp@x,___ftsub@f1
 10799  000F9E  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10800  000FA2  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10801  000FA6  C04F  F009         	movff	exp@exponent,i2___awtoft@c
 10802  000FAA  C050  F00A         	movff	exp@exponent+1,i2___awtoft@c+1
 10803  000FAE  EC78  F017         	call	i2___awtoft	;wreg free
 10804  000FB2  C009  F02B         	movff	?i2___awtoft,___ftsub@f2
 10805  000FB6  C00A  F02C         	movff	?i2___awtoft+1,___ftsub@f2+1
 10806  000FBA  C00B  F02D         	movff	?i2___awtoft+2,___ftsub@f2+2
 10807  000FBE  EC3B  F017         	call	___ftsub	;wreg free
 10808  000FC2  C028  F049         	movff	?___ftsub,exp@x
 10809  000FC6  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10810  000FCA  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10811  000FCE  C049  F028         	movff	exp@x,eval_poly@x
 10812  000FD2  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10813  000FD6  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10814  000FDA  0E6F               	movlw	low exp@coeff
 10815  000FDC  6E2B               	movwf	eval_poly@d,c
 10816  000FDE  0EFE               	movlw	high exp@coeff
 10817  000FE0  6E2C               	movwf	eval_poly@d+1,c
 10818  000FE2  0E00               	movlw	0
 10819  000FE4  6E2E               	movwf	eval_poly@n+1,c
 10820  000FE6  0E09               	movlw	9
 10821  000FE8  6E2D               	movwf	eval_poly@n,c
 10822  000FEA  ECD8  F010         	call	_eval_poly	;wreg free
 10823  000FEE  C028  F034         	movff	?_eval_poly,ldexp@value
 10824  000FF2  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10825  000FF6  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10826  000FFA  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10827  000FFE  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10828  001002  ECA5  F011         	call	_ldexp	;wreg free
 10829  001006  C034  F049         	movff	?_ldexp,exp@x
 10830  00100A  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10831  00100E  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10832  001012  5051               	movf	exp@sign,w,c
 10833  001014  B4D8               	btfsc	status,2,c
 10834  001016  D025               	goto	i2l1084
 10835  001018  2849               	incf	exp@x,w,c
 10836  00101A  E10E               	bnz	i2l3690
 10837  00101C  0E7F               	movlw	127
 10838  00101E  184A               	xorwf	exp@x+1,w,c
 10839  001020  E10B               	bnz	i2l3690
 10840  001022  0E7F               	movlw	127
 10841  001024  184B               	xorwf	exp@x+2,w,c
 10842  001026  A4D8               	btfss	status,2,c
 10843  001028  D007               	goto	i2l3690
 10844  00102A  0E00               	movlw	0
 10845  00102C  6E49               	movwf	?_exp,c
 10846  00102E  0E00               	movlw	0
 10847  001030  6E4A               	movwf	?_exp+1,c
 10848  001032  0E00               	movlw	0
 10849  001034  6E4B               	movwf	?_exp+2,c
 10850  001036  0012               	return	
 10851  001038                     i2l3690:
 10852  001038  0E00               	movlw	0
 10853  00103A  6E09               	movwf	i2___ftdiv@f1,c
 10854  00103C  0E80               	movlw	128
 10855  00103E  6E0A               	movwf	i2___ftdiv@f1+1,c
 10856  001040  0E3F               	movlw	63
 10857  001042  6E0B               	movwf	i2___ftdiv@f1+2,c
 10858  001044  C049  F00C         	movff	exp@x,i2___ftdiv@f2
 10859  001048  C04A  F00D         	movff	exp@x+1,i2___ftdiv@f2+1
 10860  00104C  C04B  F00E         	movff	exp@x+2,i2___ftdiv@f2+2
 10861  001050  EC22  F00F         	call	i2___ftdiv	;wreg free
 10862  001054  C009  F049         	movff	?i2___ftdiv,?_exp
 10863  001058  C00A  F04A         	movff	?i2___ftdiv+1,?_exp+1
 10864  00105C  C00B  F04B         	movff	?i2___ftdiv+2,?_exp+2
 10865  001060  0012               	return	
 10866  001062                     i2l1084:
 10867  001062  C049  F049         	movff	exp@x,?_exp
 10868  001066  C04A  F04A         	movff	exp@x+1,?_exp+1
 10869  00106A  C04B  F04B         	movff	exp@x+2,?_exp+2
 10870  00106E  0012               	return		;funcret
 10871  001070                     __end_of_exp:
 10872                           	opt stack 0
 10873                           pclatu	equ	0xFFB
 10874                           pclath	equ	0xFFA
 10875                           tblptru	equ	0xFF8
 10876                           tblptrh	equ	0xFF7
 10877                           tblptrl	equ	0xFF6
 10878                           tablat	equ	0xFF5
 10879                           prodh	equ	0xFF4
 10880                           prodl	equ	0xFF3
 10881                           intcon	equ	0xFF2
 10882                           intcon2	equ	0xFF1
 10883                           intcon3	equ	0xFF0
 10884                           postinc0	equ	0xFEE
 10885                           fsr0h	equ	0xFEA
 10886                           fsr0l	equ	0xFE9
 10887                           wreg	equ	0xFE8
 10888                           fsr1h	equ	0xFE2
 10889                           fsr1l	equ	0xFE1
 10890                           indf2	equ	0xFDF
 10891                           postinc2	equ	0xFDE
 10892                           postdec2	equ	0xFDD
 10893                           fsr2h	equ	0xFDA
 10894                           fsr2l	equ	0xFD9
 10895                           status	equ	0xFD8
 10896                           
 10897 ;; *************** function i2___ftdiv *****************
 10898 ;; Defined at:
 10899 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;  f1              3    8[COMRAM] float 
 10902 ;;  f2              3   11[COMRAM] float 
 10903 ;; Auto vars:     Size  Location     Type
 10904 ;;  __ftdiv         3   18[COMRAM] float 
 10905 ;;  __ftdiv         1   22[COMRAM] unsigned char 
 10906 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 10907 ;;  __ftdiv         1   17[COMRAM] unsigned char 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  3    8[COMRAM] float 
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, status,0, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10917 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10919 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;Total ram usage:       15 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    1
 10924 ;; This function calls:
 10925 ;;		i2___ftpack
 10926 ;; This function is called by:
 10927 ;;		_exp
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           	psect	text53
 10932  001E44                     __ptext53:
 10933                           	opt stack 0
 10934  001E44                     i2___ftdiv:
 10935                           	opt stack 21
 10936                           
 10937                           ;incstack = 0
 10938  001E44  C00B  F00F         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 10939  001E48  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 10940  001E4A  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 10941  001E4C  340A               	rlcf	i2___ftdiv@f1+1,w,c
 10942  001E4E  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 10943  001E50  E301               	bnc	u298_41
 10944  001E52  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10945  001E54                     u298_41:
 10946  001E54  500F               	movf	??i2___ftdiv,w,c
 10947  001E56  6E16               	movwf	i2___ftdiv@exp,c
 10948  001E58  5016               	movf	i2___ftdiv@exp,w,c
 10949  001E5A  A4D8               	btfss	status,2,c
 10950  001E5C  D007               	goto	i2l3456
 10951  001E5E  0E00               	movlw	0
 10952  001E60  6E09               	movwf	?i2___ftdiv,c
 10953  001E62  0E00               	movlw	0
 10954  001E64  6E0A               	movwf	?i2___ftdiv+1,c
 10955  001E66  0E00               	movlw	0
 10956  001E68  6E0B               	movwf	?i2___ftdiv+2,c
 10957  001E6A  0012               	return	
 10958  001E6C                     i2l3456:
 10959  001E6C  C00E  F00F         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 10960  001E70  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 10961  001E72  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 10962  001E74  340D               	rlcf	i2___ftdiv@f2+1,w,c
 10963  001E76  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 10964  001E78  E301               	bnc	u300_41
 10965  001E7A  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10966  001E7C                     u300_41:
 10967  001E7C  500F               	movf	??i2___ftdiv,w,c
 10968  001E7E  6E17               	movwf	i2___ftdiv@sign,c
 10969  001E80  5017               	movf	i2___ftdiv@sign,w,c
 10970  001E82  A4D8               	btfss	status,2,c
 10971  001E84  D007               	goto	i2l3462
 10972  001E86  0E00               	movlw	0
 10973  001E88  6E09               	movwf	?i2___ftdiv,c
 10974  001E8A  0E00               	movlw	0
 10975  001E8C  6E0A               	movwf	?i2___ftdiv+1,c
 10976  001E8E  0E00               	movlw	0
 10977  001E90  6E0B               	movwf	?i2___ftdiv+2,c
 10978  001E92  0012               	return	
 10979  001E94                     i2l3462:
 10980  001E94  0E00               	movlw	0
 10981  001E96  6E13               	movwf	i2___ftdiv@f3,c
 10982  001E98  0E00               	movlw	0
 10983  001E9A  6E14               	movwf	i2___ftdiv@f3+1,c
 10984  001E9C  0E00               	movlw	0
 10985  001E9E  6E15               	movwf	i2___ftdiv@f3+2,c
 10986  001EA0  5017               	movf	i2___ftdiv@sign,w,c
 10987  001EA2  0F89               	addlw	137
 10988  001EA4  5E16               	subwf	i2___ftdiv@exp,f,c
 10989  001EA6  C00B  F017         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 10990  001EAA  500E               	movf	i2___ftdiv@f2+2,w,c
 10991  001EAC  1A17               	xorwf	i2___ftdiv@sign,f,c
 10992  001EAE  0E80               	movlw	128
 10993  001EB0  1617               	andwf	i2___ftdiv@sign,f,c
 10994  001EB2  8E0A               	bsf	i2___ftdiv@f1+1,7,c
 10995  001EB4  0EFF               	movlw	255
 10996  001EB6  1609               	andwf	i2___ftdiv@f1,f,c
 10997  001EB8  0EFF               	movlw	255
 10998  001EBA  160A               	andwf	i2___ftdiv@f1+1,f,c
 10999  001EBC  0E00               	movlw	0
 11000  001EBE  160B               	andwf	i2___ftdiv@f1+2,f,c
 11001  001EC0  8E0D               	bsf	i2___ftdiv@f2+1,7,c
 11002  001EC2  0EFF               	movlw	255
 11003  001EC4  160C               	andwf	i2___ftdiv@f2,f,c
 11004  001EC6  0EFF               	movlw	255
 11005  001EC8  160D               	andwf	i2___ftdiv@f2+1,f,c
 11006  001ECA  0E00               	movlw	0
 11007  001ECC  160E               	andwf	i2___ftdiv@f2+2,f,c
 11008  001ECE  0E18               	movlw	24
 11009  001ED0  6E12               	movwf	i2___ftdiv@cntr,c
 11010  001ED2                     i2l3482:
 11011  001ED2  90D8               	bcf	status,0,c
 11012  001ED4  3613               	rlcf	i2___ftdiv@f3,f,c
 11013  001ED6  3614               	rlcf	i2___ftdiv@f3+1,f,c
 11014  001ED8  3615               	rlcf	i2___ftdiv@f3+2,f,c
 11015  001EDA  500C               	movf	i2___ftdiv@f2,w,c
 11016  001EDC  5C09               	subwf	i2___ftdiv@f1,w,c
 11017  001EDE  500D               	movf	i2___ftdiv@f2+1,w,c
 11018  001EE0  580A               	subwfb	i2___ftdiv@f1+1,w,c
 11019  001EE2  500E               	movf	i2___ftdiv@f2+2,w,c
 11020  001EE4  580B               	subwfb	i2___ftdiv@f1+2,w,c
 11021  001EE6  A0D8               	btfss	status,0,c
 11022  001EE8  D007               	goto	i2l763
 11023  001EEA  500C               	movf	i2___ftdiv@f2,w,c
 11024  001EEC  5E09               	subwf	i2___ftdiv@f1,f,c
 11025  001EEE  500D               	movf	i2___ftdiv@f2+1,w,c
 11026  001EF0  5A0A               	subwfb	i2___ftdiv@f1+1,f,c
 11027  001EF2  500E               	movf	i2___ftdiv@f2+2,w,c
 11028  001EF4  5A0B               	subwfb	i2___ftdiv@f1+2,f,c
 11029  001EF6  8013               	bsf	i2___ftdiv@f3,0,c
 11030  001EF8                     i2l763:
 11031  001EF8  90D8               	bcf	status,0,c
 11032  001EFA  3609               	rlcf	i2___ftdiv@f1,f,c
 11033  001EFC  360A               	rlcf	i2___ftdiv@f1+1,f,c
 11034  001EFE  360B               	rlcf	i2___ftdiv@f1+2,f,c
 11035  001F00  2E12               	decfsz	i2___ftdiv@cntr,f,c
 11036  001F02  D7E7               	goto	i2l3482
 11037  001F04  C013  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 11038  001F08  C014  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 11039  001F0C  C015  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 11040  001F10  C016  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 11041  001F14  C017  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 11042  001F18  EC22  F013         	call	i2___ftpack	;wreg free
 11043  001F1C  C001  F009         	movff	?i2___ftpack,?i2___ftdiv
 11044  001F20  C002  F00A         	movff	?i2___ftpack+1,?i2___ftdiv+1
 11045  001F24  C003  F00B         	movff	?i2___ftpack+2,?i2___ftdiv+2
 11046  001F28  0012               	return	
 11047  001F2A                     __end_ofi2___ftdiv:
 11048                           	opt stack 0
 11049                           pclatu	equ	0xFFB
 11050                           pclath	equ	0xFFA
 11051                           tblptru	equ	0xFF8
 11052                           tblptrh	equ	0xFF7
 11053                           tblptrl	equ	0xFF6
 11054                           tablat	equ	0xFF5
 11055                           prodh	equ	0xFF4
 11056                           prodl	equ	0xFF3
 11057                           intcon	equ	0xFF2
 11058                           intcon2	equ	0xFF1
 11059                           intcon3	equ	0xFF0
 11060                           postinc0	equ	0xFEE
 11061                           fsr0h	equ	0xFEA
 11062                           fsr0l	equ	0xFE9
 11063                           wreg	equ	0xFE8
 11064                           fsr1h	equ	0xFE2
 11065                           fsr1l	equ	0xFE1
 11066                           indf2	equ	0xFDF
 11067                           postinc2	equ	0xFDE
 11068                           postdec2	equ	0xFDD
 11069                           fsr2h	equ	0xFDA
 11070                           fsr2l	equ	0xFD9
 11071                           status	equ	0xFD8
 11072                           
 11073 ;; *************** function i2___awtoft *****************
 11074 ;; Defined at:
 11075 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  c               2    8[COMRAM] int 
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;  __awtoft        1   11[COMRAM] unsigned char 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  3    8[COMRAM] float 
 11082 ;; Registers used:
 11083 ;;		wreg, status,2, status,0, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11089 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;Total ram usage:        4 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    1
 11096 ;; This function calls:
 11097 ;;		i2___ftpack
 11098 ;; This function is called by:
 11099 ;;		_dec_to_hex
 11100 ;;		_exp
 11101 ;;		_log
 11102 ;; This function uses a non-reentrant model
 11103 ;;
 11104                           
 11105                           	psect	text54
 11106  002EF0                     __ptext54:
 11107                           	opt stack 0
 11108  002EF0                     i2___awtoft:
 11109                           	opt stack 23
 11110                           
 11111                           ;incstack = 0
 11112  002EF0  0E00               	movlw	0
 11113  002EF2  6E0C               	movwf	i2___awtoft@sign,c
 11114  002EF4  AE0A               	btfss	i2___awtoft@c+1,7,c
 11115  002EF6  D006               	goto	i2l3446
 11116  002EF8  6C09               	negf	i2___awtoft@c,c
 11117  002EFA  1E0A               	comf	i2___awtoft@c+1,f,c
 11118  002EFC  B0D8               	btfsc	status,0,c
 11119  002EFE  2A0A               	incf	i2___awtoft@c+1,f,c
 11120  002F00  0E01               	movlw	1
 11121  002F02  6E0C               	movwf	i2___awtoft@sign,c
 11122  002F04                     i2l3446:
 11123  002F04  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 11124  002F08  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 11125  002F0C  6A03               	clrf	i2___ftpack@arg+2,c
 11126  002F0E  0E8E               	movlw	142
 11127  002F10  6E04               	movwf	i2___ftpack@exp,c
 11128  002F12  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 11129  002F16  EC22  F013         	call	i2___ftpack	;wreg free
 11130  002F1A  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 11131  002F1E  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 11132  002F22  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 11133  002F26  0012               	return	
 11134  002F28                     __end_ofi2___awtoft:
 11135                           	opt stack 0
 11136                           pclatu	equ	0xFFB
 11137                           pclath	equ	0xFFA
 11138                           tblptru	equ	0xFF8
 11139                           tblptrh	equ	0xFF7
 11140                           tblptrl	equ	0xFF6
 11141                           tablat	equ	0xFF5
 11142                           prodh	equ	0xFF4
 11143                           prodl	equ	0xFF3
 11144                           intcon	equ	0xFF2
 11145                           intcon2	equ	0xFF1
 11146                           intcon3	equ	0xFF0
 11147                           postinc0	equ	0xFEE
 11148                           fsr0h	equ	0xFEA
 11149                           fsr0l	equ	0xFE9
 11150                           wreg	equ	0xFE8
 11151                           fsr1h	equ	0xFE2
 11152                           fsr1l	equ	0xFE1
 11153                           indf2	equ	0xFDF
 11154                           postinc2	equ	0xFDE
 11155                           postdec2	equ	0xFDD
 11156                           fsr2h	equ	0xFDA
 11157                           fsr2l	equ	0xFD9
 11158                           status	equ	0xFD8
 11159                           
 11160 ;; *************** function _ldexp *****************
 11161 ;; Defined at:
 11162 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;  value           3   51[COMRAM] float 
 11165 ;;  newexp          2   54[COMRAM] int 
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;		None
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  3   51[COMRAM] int 
 11170 ;; Registers used:
 11171 ;;		wreg, status,2, status,0
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11177 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11180 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11181 ;;Total ram usage:        7 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; This function calls:
 11184 ;;		Nothing
 11185 ;; This function is called by:
 11186 ;;		_exp
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           	psect	text55
 11191  00234A                     __ptext55:
 11192                           	opt stack 0
 11193  00234A                     _ldexp:
 11194                           	opt stack 22
 11195                           
 11196                           ;incstack = 0
 11197  00234A  5034               	movf	ldexp@value,w,c
 11198  00234C  1035               	iorwf	ldexp@value+1,w,c
 11199  00234E  1036               	iorwf	ldexp@value+2,w,c
 11200  002350  A4D8               	btfss	status,2,c
 11201  002352  D007               	goto	i2l3408
 11202  002354  0E00               	movlw	0
 11203  002356  6E34               	movwf	?_ldexp,c
 11204  002358  0E00               	movlw	0
 11205  00235A  6E35               	movwf	?_ldexp+1,c
 11206  00235C  0E00               	movlw	0
 11207  00235E  6E36               	movwf	?_ldexp+2,c
 11208  002360  0012               	return	
 11209  002362                     i2l3408:
 11210  002362  5036               	movf	ldexp@value+2,w,c
 11211  002364  0B7F               	andlw	127
 11212  002366  6E39               	movwf	??_ldexp& (0+255),c
 11213  002368  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 11214  00236A  90D8               	bcf	status,0,c
 11215  00236C  3639               	rlcf	??_ldexp,f,c
 11216  00236E  363A               	rlcf	??_ldexp+1,f,c
 11217  002370  5039               	movf	??_ldexp,w,c
 11218  002372  2637               	addwf	ldexp@newexp,f,c
 11219  002374  503A               	movf	??_ldexp+1,w,c
 11220  002376  2238               	addwfc	ldexp@newexp+1,f,c
 11221  002378  AE35               	btfss	ldexp@value+1,7,c
 11222  00237A  D003               	goto	i2u293_40
 11223  00237C  6A39               	clrf	??_ldexp& (0+255),c
 11224  00237E  2A39               	incf	??_ldexp& (0+255),f,c
 11225  002380  D001               	goto	i2u293_48
 11226  002382                     i2u293_40:
 11227  002382  6A39               	clrf	??_ldexp& (0+255),c
 11228  002384                     i2u293_48:
 11229  002384  5039               	movf	??_ldexp,w,c
 11230  002386  2637               	addwf	ldexp@newexp,f,c
 11231  002388  0E00               	movlw	0
 11232  00238A  2238               	addwfc	ldexp@newexp+1,f,c
 11233  00238C  AE38               	btfss	ldexp@newexp+1,7,c
 11234  00238E  D00C               	goto	i2l3416
 11235  002390  0E00               	movlw	0
 11236  002392  0100               	movlb	0	; () banked
 11237  002394  6FB2               	movwf	(_errno+1)& (0+255),b
 11238  002396  0E22               	movlw	34
 11239  002398  6FB1               	movwf	_errno& (0+255),b
 11240  00239A  0E00               	movlw	0
 11241  00239C  6E34               	movwf	?_ldexp,c
 11242  00239E  0E00               	movlw	0
 11243  0023A0  6E35               	movwf	?_ldexp+1,c
 11244  0023A2  0E00               	movlw	0
 11245  0023A4                     L15:
 11246  0023A4  6E36               	movwf	?_ldexp+2,c
 11247                           
 11248                           ; BSR set to: 0
 11249  0023A6  0012               	return	
 11250  0023A8                     i2l3416:
 11251  0023A8  BE38               	btfsc	ldexp@newexp+1,7,c
 11252  0023AA  D016               	goto	i2l3432
 11253  0023AC  0438               	decf	ldexp@newexp+1,w,c
 11254  0023AE  A0D8               	btfss	status,0,c
 11255  0023B0  D013               	goto	i2l3432
 11256  0023B2  0E00               	movlw	0
 11257  0023B4  0100               	movlb	0	; () banked
 11258  0023B6  6FB2               	movwf	(_errno+1)& (0+255),b
 11259  0023B8  0E22               	movlw	34
 11260  0023BA  6FB1               	movwf	_errno& (0+255),b
 11261                           
 11262                           ; BSR set to: 0
 11263  0023BC  AE36               	btfss	ldexp@value+2,7,c
 11264  0023BE  D006               	goto	i2l3428
 11265                           
 11266                           ; BSR set to: 0
 11267  0023C0  0EFF               	movlw	255
 11268  0023C2  6E34               	movwf	?_ldexp,c
 11269  0023C4  0E7F               	movlw	127
 11270  0023C6  6E35               	movwf	?_ldexp+1,c
 11271  0023C8  0EFF               	movlw	255
 11272  0023CA  D7EC               	goto	L15
 11273  0023CC                     i2l3428:
 11274                           
 11275                           ; BSR set to: 0
 11276  0023CC  0EFF               	movlw	255
 11277  0023CE  6E34               	movwf	?_ldexp,c
 11278  0023D0  0E7F               	movlw	127
 11279  0023D2  6E35               	movwf	?_ldexp+1,c
 11280  0023D4  0E7F               	movlw	127
 11281  0023D6  D7E6               	goto	L15
 11282  0023D8                     i2l3432:
 11283  0023D8  3438               	rlcf	ldexp@newexp+1,w,c
 11284  0023DA  3038               	rrcf	ldexp@newexp+1,w,c
 11285  0023DC  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 11286  0023DE  3037               	rrcf	ldexp@newexp,w,c
 11287  0023E0  6E39               	movwf	??_ldexp& (0+255),c
 11288  0023E2  5036               	movf	ldexp@value+2,w,c
 11289  0023E4  1839               	xorwf	??_ldexp,w,c
 11290  0023E6  0B80               	andlw	-128
 11291  0023E8  1839               	xorwf	??_ldexp,w,c
 11292  0023EA  6E36               	movwf	ldexp@value+2,c
 11293  0023EC  C037  F039         	movff	ldexp@newexp,??_ldexp
 11294  0023F0  0E01               	movlw	1
 11295  0023F2  1639               	andwf	??_ldexp,f,c
 11296  0023F4  3239               	rrcf	??_ldexp,f,c
 11297  0023F6  3239               	rrcf	??_ldexp,f,c
 11298  0023F8  5035               	movf	ldexp@value+1,w,c
 11299  0023FA  1839               	xorwf	??_ldexp,w,c
 11300  0023FC  0B7F               	andlw	-129
 11301  0023FE  1839               	xorwf	??_ldexp,w,c
 11302  002400  6E35               	movwf	ldexp@value+1,c
 11303  002402  C034  F034         	movff	ldexp@value,?_ldexp
 11304  002406  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 11305  00240A  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 11306  00240E  0012               	return	
 11307  002410                     __end_of_ldexp:
 11308                           	opt stack 0
 11309                           pclatu	equ	0xFFB
 11310                           pclath	equ	0xFFA
 11311                           tblptru	equ	0xFF8
 11312                           tblptrh	equ	0xFF7
 11313                           tblptrl	equ	0xFF6
 11314                           tablat	equ	0xFF5
 11315                           prodh	equ	0xFF4
 11316                           prodl	equ	0xFF3
 11317                           intcon	equ	0xFF2
 11318                           intcon2	equ	0xFF1
 11319                           intcon3	equ	0xFF0
 11320                           postinc0	equ	0xFEE
 11321                           fsr0h	equ	0xFEA
 11322                           fsr0l	equ	0xFE9
 11323                           wreg	equ	0xFE8
 11324                           fsr1h	equ	0xFE2
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           fsr2h	equ	0xFDA
 11330                           fsr2l	equ	0xFD9
 11331                           status	equ	0xFD8
 11332                           
 11333 ;; *************** function _floor *****************
 11334 ;; Defined at:
 11335 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;  x               3   64[COMRAM] int 
 11338 ;; Auto vars:     Size  Location     Type
 11339 ;;  i               3   67[COMRAM] int 
 11340 ;;  expon           2   70[COMRAM] int 
 11341 ;; Return value:  Size  Location     Type
 11342 ;;                  3   64[COMRAM] int 
 11343 ;; Registers used:
 11344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11345 ;; Tracked objects:
 11346 ;;		On entry : 0/0
 11347 ;;		On exit  : 0/0
 11348 ;;		Unchanged: 0/0
 11349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11350 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11354 ;;Total ram usage:        8 bytes
 11355 ;; Hardware stack levels used:    1
 11356 ;; Hardware stack levels required when called:    2
 11357 ;; This function calls:
 11358 ;;		___altoft
 11359 ;;		___ftadd
 11360 ;;		___fttol
 11361 ;;		_frexp
 11362 ;;		i2___ftge
 11363 ;; This function is called by:
 11364 ;;		_exp
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           	psect	text56
 11369  001F2A                     __ptext56:
 11370                           	opt stack 0
 11371  001F2A                     _floor:
 11372                           	opt stack 20
 11373                           
 11374                           ;incstack = 0
 11375  001F2A  C041  F001         	movff	floor@x,frexp@value
 11376  001F2E  C042  F002         	movff	floor@x+1,frexp@value+1
 11377  001F32  C043  F003         	movff	floor@x+2,frexp@value+2
 11378  001F36  0E47               	movlw	low floor@expon
 11379  001F38  6E04               	movwf	frexp@eptr,c
 11380  001F3A  0E00               	movlw	high floor@expon
 11381  001F3C  6E05               	movwf	frexp@eptr+1,c
 11382  001F3E  EC66  F014         	call	_frexp	;wreg free
 11383  001F42  AE48               	btfss	floor@expon+1,7,c
 11384  001F44  D010               	goto	i2l3386
 11385  001F46  AE43               	btfss	floor@x+2,7,c
 11386  001F48  D007               	goto	i2l3382
 11387  001F4A  0E00               	movlw	0
 11388  001F4C  6E41               	movwf	?_floor,c
 11389  001F4E  0E80               	movlw	128
 11390  001F50  6E42               	movwf	?_floor+1,c
 11391  001F52  0EBF               	movlw	191
 11392  001F54  6E43               	movwf	?_floor+2,c
 11393  001F56  0012               	return	
 11394  001F58                     i2l3382:
 11395  001F58  0E00               	movlw	0
 11396  001F5A  6E41               	movwf	?_floor,c
 11397  001F5C  0E00               	movlw	0
 11398  001F5E  6E42               	movwf	?_floor+1,c
 11399  001F60  0E00               	movlw	0
 11400  001F62  6E43               	movwf	?_floor+2,c
 11401  001F64  0012               	return	
 11402  001F66                     i2l3386:
 11403  001F66  5048               	movf	floor@expon+1,w,c
 11404  001F68  E104               	bnz	i2u289_40
 11405  001F6A  0E15               	movlw	21
 11406  001F6C  5C47               	subwf	floor@expon,w,c
 11407  001F6E  A0D8               	btfss	status,0,c
 11408  001F70  D007               	goto	i2l3390
 11409  001F72                     i2u289_40:
 11410  001F72  C041  F041         	movff	floor@x,?_floor
 11411  001F76  C042  F042         	movff	floor@x+1,?_floor+1
 11412  001F7A  C043  F043         	movff	floor@x+2,?_floor+2
 11413  001F7E  0012               	return	
 11414  001F80                     i2l3390:
 11415  001F80  C041  F028         	movff	floor@x,___fttol@f1
 11416  001F84  C042  F029         	movff	floor@x+1,___fttol@f1+1
 11417  001F88  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 11418  001F8C  EC2E  F00E         	call	___fttol	;wreg free
 11419  001F90  C028  F037         	movff	?___fttol,___altoft@c
 11420  001F94  C029  F038         	movff	?___fttol+1,___altoft@c+1
 11421  001F98  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 11422  001F9C  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 11423  001FA0  EC2C  F015         	call	___altoft	;wreg free
 11424  001FA4  C037  F044         	movff	?___altoft,floor@i
 11425  001FA8  C038  F045         	movff	?___altoft+1,floor@i+1
 11426  001FAC  C039  F046         	movff	?___altoft+2,floor@i+2
 11427  001FB0  C041  F001         	movff	floor@x,i2___ftge@ff1
 11428  001FB4  C042  F002         	movff	floor@x+1,i2___ftge@ff1+1
 11429  001FB8  C043  F003         	movff	floor@x+2,i2___ftge@ff1+2
 11430  001FBC  C044  F004         	movff	floor@i,i2___ftge@ff2
 11431  001FC0  C045  F005         	movff	floor@i+1,i2___ftge@ff2+1
 11432  001FC4  C046  F006         	movff	floor@i+2,i2___ftge@ff2+2
 11433  001FC8  EC1E  F014         	call	i2___ftge	;wreg free
 11434  001FCC  B0D8               	btfsc	status,0,c
 11435  001FCE  D015               	goto	i2l1094
 11436  001FD0  C044  F01C         	movff	floor@i,___ftadd@f1
 11437  001FD4  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 11438  001FD8  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 11439  001FDC  0E00               	movlw	0
 11440  001FDE  6E1F               	movwf	___ftadd@f2,c
 11441  001FE0  0E80               	movlw	128
 11442  001FE2  6E20               	movwf	___ftadd@f2+1,c
 11443  001FE4  0EBF               	movlw	191
 11444  001FE6  6E21               	movwf	___ftadd@f2+2,c
 11445  001FE8  EC38  F008         	call	___ftadd	;wreg free
 11446  001FEC  C01C  F041         	movff	?___ftadd,?_floor
 11447  001FF0  C01D  F042         	movff	?___ftadd+1,?_floor+1
 11448  001FF4  C01E  F043         	movff	?___ftadd+2,?_floor+2
 11449  001FF8  0012               	return	
 11450  001FFA                     i2l1094:
 11451  001FFA  C044  F041         	movff	floor@i,?_floor
 11452  001FFE  C045  F042         	movff	floor@i+1,?_floor+1
 11453  002002  C046  F043         	movff	floor@i+2,?_floor+2
 11454  002006  0012               	return		;funcret
 11455  002008                     __end_of_floor:
 11456                           	opt stack 0
 11457                           pclatu	equ	0xFFB
 11458                           pclath	equ	0xFFA
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           intcon	equ	0xFF2
 11466                           intcon2	equ	0xFF1
 11467                           intcon3	equ	0xFF0
 11468                           postinc0	equ	0xFEE
 11469                           fsr0h	equ	0xFEA
 11470                           fsr0l	equ	0xFE9
 11471                           wreg	equ	0xFE8
 11472                           fsr1h	equ	0xFE2
 11473                           fsr1l	equ	0xFE1
 11474                           indf2	equ	0xFDF
 11475                           postinc2	equ	0xFDE
 11476                           postdec2	equ	0xFDD
 11477                           fsr2h	equ	0xFDA
 11478                           fsr2l	equ	0xFD9
 11479                           status	equ	0xFD8
 11480                           
 11481 ;; *************** function i2___ftge *****************
 11482 ;; Defined at:
 11483 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;  ff1             3    0[COMRAM] float 
 11486 ;;  ff2             3    3[COMRAM] float 
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;		None               void
 11491 ;; Registers used:
 11492 ;;		wreg, status,2, status,0
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11498 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11500 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;Total ram usage:        9 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; This function calls:
 11505 ;;		Nothing
 11506 ;; This function is called by:
 11507 ;;		_pow
 11508 ;;		_exp
 11509 ;;		_floor
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text57
 11514  00283C                     __ptext57:
 11515                           	opt stack 0
 11516  00283C                     i2___ftge:
 11517                           	opt stack 23
 11518                           
 11519                           ;incstack = 0
 11520  00283C  AE03               	btfss	i2___ftge@ff1+2,7,c
 11521  00283E  D016               	goto	i2l3324
 11522  002840  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 11523  002844  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 11524  002848  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 11525  00284C  1E07               	comf	??i2___ftge,f,c
 11526  00284E  1E08               	comf	??i2___ftge+1,f,c
 11527  002850  1E09               	comf	??i2___ftge+2,f,c
 11528  002852  2A07               	incf	??i2___ftge,f,c
 11529  002854  0E00               	movlw	0
 11530  002856  2208               	addwfc	??i2___ftge+1,f,c
 11531  002858  2209               	addwfc	??i2___ftge+2,f,c
 11532  00285A  0E00               	movlw	0
 11533  00285C  2407               	addwf	??i2___ftge,w,c
 11534  00285E  6E01               	movwf	i2___ftge@ff1,c
 11535  002860  0E00               	movlw	0
 11536  002862  2008               	addwfc	??i2___ftge+1,w,c
 11537  002864  6E02               	movwf	i2___ftge@ff1+1,c
 11538  002866  0E80               	movlw	128
 11539  002868  2009               	addwfc	??i2___ftge+2,w,c
 11540  00286A  6E03               	movwf	i2___ftge@ff1+2,c
 11541  00286C                     i2l3324:
 11542  00286C  AE06               	btfss	i2___ftge@ff2+2,7,c
 11543  00286E  D016               	goto	i2l3328
 11544  002870  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 11545  002874  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 11546  002878  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 11547  00287C  1E07               	comf	??i2___ftge,f,c
 11548  00287E  1E08               	comf	??i2___ftge+1,f,c
 11549  002880  1E09               	comf	??i2___ftge+2,f,c
 11550  002882  2A07               	incf	??i2___ftge,f,c
 11551  002884  0E00               	movlw	0
 11552  002886  2208               	addwfc	??i2___ftge+1,f,c
 11553  002888  2209               	addwfc	??i2___ftge+2,f,c
 11554  00288A  0E00               	movlw	0
 11555  00288C  2407               	addwf	??i2___ftge,w,c
 11556  00288E  6E04               	movwf	i2___ftge@ff2,c
 11557  002890  0E00               	movlw	0
 11558  002892  2008               	addwfc	??i2___ftge+1,w,c
 11559  002894  6E05               	movwf	i2___ftge@ff2+1,c
 11560  002896  0E80               	movlw	128
 11561  002898  2009               	addwfc	??i2___ftge+2,w,c
 11562  00289A  6E06               	movwf	i2___ftge@ff2+2,c
 11563  00289C                     i2l3328:
 11564  00289C  0E00               	movlw	0
 11565  00289E  1A01               	xorwf	i2___ftge@ff1,f,c
 11566  0028A0  0E00               	movlw	0
 11567  0028A2  1A02               	xorwf	i2___ftge@ff1+1,f,c
 11568  0028A4  0E80               	movlw	128
 11569  0028A6  1A03               	xorwf	i2___ftge@ff1+2,f,c
 11570  0028A8  0E00               	movlw	0
 11571  0028AA  1A04               	xorwf	i2___ftge@ff2,f,c
 11572  0028AC  0E00               	movlw	0
 11573  0028AE  1A05               	xorwf	i2___ftge@ff2+1,f,c
 11574  0028B0  0E80               	movlw	128
 11575  0028B2  1A06               	xorwf	i2___ftge@ff2+2,f,c
 11576  0028B4  5004               	movf	i2___ftge@ff2,w,c
 11577  0028B6  5C01               	subwf	i2___ftge@ff1,w,c
 11578  0028B8  5005               	movf	i2___ftge@ff2+1,w,c
 11579  0028BA  5802               	subwfb	i2___ftge@ff1+1,w,c
 11580  0028BC  5006               	movf	i2___ftge@ff2+2,w,c
 11581  0028BE  5803               	subwfb	i2___ftge@ff1+2,w,c
 11582  0028C0  B0D8               	btfsc	status,0,c
 11583  0028C2  D002               	goto	i2l3334
 11584  0028C4  90D8               	bcf	status,0,c
 11585  0028C6  0012               	return	
 11586  0028C8                     i2l3334:
 11587  0028C8  80D8               	bsf	status,0,c
 11588  0028CA  0012               	return	
 11589  0028CC                     __end_ofi2___ftge:
 11590                           	opt stack 0
 11591                           pclatu	equ	0xFFB
 11592                           pclath	equ	0xFFA
 11593                           tblptru	equ	0xFF8
 11594                           tblptrh	equ	0xFF7
 11595                           tblptrl	equ	0xFF6
 11596                           tablat	equ	0xFF5
 11597                           prodh	equ	0xFF4
 11598                           prodl	equ	0xFF3
 11599                           intcon	equ	0xFF2
 11600                           intcon2	equ	0xFF1
 11601                           intcon3	equ	0xFF0
 11602                           postinc0	equ	0xFEE
 11603                           fsr0h	equ	0xFEA
 11604                           fsr0l	equ	0xFE9
 11605                           wreg	equ	0xFE8
 11606                           fsr1h	equ	0xFE2
 11607                           fsr1l	equ	0xFE1
 11608                           indf2	equ	0xFDF
 11609                           postinc2	equ	0xFDE
 11610                           postdec2	equ	0xFDD
 11611                           fsr2h	equ	0xFDA
 11612                           fsr2l	equ	0xFD9
 11613                           status	equ	0xFD8
 11614                           
 11615 ;; *************** function _frexp *****************
 11616 ;; Defined at:
 11617 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  value           3    0[COMRAM] float 
 11620 ;;  eptr            2    3[COMRAM] PTR int 
 11621 ;;		 -> log@exponent(2), floor@expon(2), 
 11622 ;; Auto vars:     Size  Location     Type
 11623 ;;		None
 11624 ;; Return value:  Size  Location     Type
 11625 ;;                  3    0[COMRAM] PTR int 
 11626 ;; Registers used:
 11627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11628 ;; Tracked objects:
 11629 ;;		On entry : 0/0
 11630 ;;		On exit  : 0/0
 11631 ;;		Unchanged: 0/0
 11632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11633 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11635 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11637 ;;Total ram usage:        7 bytes
 11638 ;; Hardware stack levels used:    1
 11639 ;; This function calls:
 11640 ;;		Nothing
 11641 ;; This function is called by:
 11642 ;;		_floor
 11643 ;;		_log
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           	psect	text58
 11648  0028CC                     __ptext58:
 11649                           	opt stack 0
 11650  0028CC                     _frexp:
 11651                           	opt stack 22
 11652                           
 11653                           ;incstack = 0
 11654  0028CC  5001               	movf	frexp@value,w,c
 11655  0028CE  1002               	iorwf	frexp@value+1,w,c
 11656  0028D0  1003               	iorwf	frexp@value+2,w,c
 11657  0028D2  A4D8               	btfss	status,2,c
 11658  0028D4  D00F               	goto	i2l3302
 11659  0028D6  C004  FFD9         	movff	frexp@eptr,fsr2l
 11660  0028DA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11661  0028DE  0E00               	movlw	0
 11662  0028E0  6EDE               	movwf	postinc2,c
 11663  0028E2  0E00               	movlw	0
 11664  0028E4  6EDD               	movwf	postdec2,c
 11665  0028E6  0E00               	movlw	0
 11666  0028E8  6E01               	movwf	?_frexp,c
 11667  0028EA  0E00               	movlw	0
 11668  0028EC  6E02               	movwf	?_frexp+1,c
 11669  0028EE  0E00               	movlw	0
 11670  0028F0  6E03               	movwf	?_frexp+2,c
 11671  0028F2  0012               	return	
 11672  0028F4                     i2l3302:
 11673  0028F4  5003               	movf	frexp@value+2,w,c
 11674  0028F6  0B7F               	andlw	127
 11675  0028F8  6E06               	movwf	??_frexp& (0+255),c
 11676  0028FA  6A07               	clrf	(??_frexp+1)& (0+255),c
 11677  0028FC  90D8               	bcf	status,0,c
 11678  0028FE  3606               	rlcf	??_frexp,f,c
 11679  002900  3607               	rlcf	??_frexp+1,f,c
 11680  002902  C004  FFD9         	movff	frexp@eptr,fsr2l
 11681  002906  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11682  00290A  C006  FFDE         	movff	??_frexp,postinc2
 11683  00290E  C007  FFDD         	movff	??_frexp+1,postdec2
 11684  002912  AE02               	btfss	frexp@value+1,7,c
 11685  002914  D003               	goto	i2u279_40
 11686  002916  6A06               	clrf	??_frexp& (0+255),c
 11687  002918  2A06               	incf	??_frexp& (0+255),f,c
 11688  00291A  D001               	goto	i2u279_48
 11689  00291C                     i2u279_40:
 11690  00291C  6A06               	clrf	??_frexp& (0+255),c
 11691  00291E                     i2u279_48:
 11692  00291E  5006               	movf	??_frexp,w,c
 11693  002920  C004  FFD9         	movff	frexp@eptr,fsr2l
 11694  002924  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11695  002928  12DE               	iorwf	postinc2,f,c
 11696  00292A  0E00               	movlw	0
 11697  00292C  12DD               	iorwf	postdec2,f,c
 11698  00292E  C004  FFD9         	movff	frexp@eptr,fsr2l
 11699  002932  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11700  002936  0E82               	movlw	130
 11701  002938  26DE               	addwf	postinc2,f,c
 11702  00293A  0EFF               	movlw	255
 11703  00293C  22DD               	addwfc	postdec2,f,c
 11704  00293E  8003               	bsf	frexp@value+2,0,c
 11705  002940  8203               	bsf	frexp@value+2,1,c
 11706  002942  8403               	bsf	frexp@value+2,2,c
 11707  002944  8603               	bsf	frexp@value+2,3,c
 11708  002946  8803               	bsf	frexp@value+2,4,c
 11709  002948  8A03               	bsf	frexp@value+2,5,c
 11710  00294A  9C03               	bcf	frexp@value+2,6,c
 11711  00294C  9E02               	bcf	frexp@value+1,7,c
 11712  00294E  C001  F001         	movff	frexp@value,?_frexp
 11713  002952  C002  F002         	movff	frexp@value+1,?_frexp+1
 11714  002956  C003  F003         	movff	frexp@value+2,?_frexp+2
 11715  00295A  0012               	return	
 11716  00295C                     __end_of_frexp:
 11717                           	opt stack 0
 11718                           pclatu	equ	0xFFB
 11719                           pclath	equ	0xFFA
 11720                           tblptru	equ	0xFF8
 11721                           tblptrh	equ	0xFF7
 11722                           tblptrl	equ	0xFF6
 11723                           tablat	equ	0xFF5
 11724                           prodh	equ	0xFF4
 11725                           prodl	equ	0xFF3
 11726                           intcon	equ	0xFF2
 11727                           intcon2	equ	0xFF1
 11728                           intcon3	equ	0xFF0
 11729                           postinc0	equ	0xFEE
 11730                           fsr0h	equ	0xFEA
 11731                           fsr0l	equ	0xFE9
 11732                           wreg	equ	0xFE8
 11733                           fsr1h	equ	0xFE2
 11734                           fsr1l	equ	0xFE1
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           postdec2	equ	0xFDD
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function ___fttol *****************
 11743 ;; Defined at:
 11744 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  f1              3   39[COMRAM] float 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  lval            4   49[COMRAM] unsigned long 
 11749 ;;  exp1            1   53[COMRAM] unsigned char 
 11750 ;;  sign1           1   48[COMRAM] unsigned char 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  4   39[COMRAM] long 
 11753 ;; Registers used:
 11754 ;;		wreg, status,2, status,0
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;Total ram usage:       15 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; This function calls:
 11767 ;;		Nothing
 11768 ;; This function is called by:
 11769 ;;		_dec_to_hex
 11770 ;;		_pow
 11771 ;;		_exp
 11772 ;;		_floor
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           	psect	text59
 11777  001C5C                     __ptext59:
 11778                           	opt stack 0
 11779  001C5C                     ___fttol:
 11780                           	opt stack 21
 11781                           
 11782                           ;incstack = 0
 11783  001C5C  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 11784  001C60  6A2D               	clrf	(??___fttol+1)& (0+255),c
 11785  001C62  6A2E               	clrf	(??___fttol+2)& (0+255),c
 11786  001C64  3429               	rlcf	___fttol@f1+1,w,c
 11787  001C66  362C               	rlcf	??___fttol& (0+255),f,c
 11788  001C68  E301               	bnc	u270_41
 11789  001C6A  802D               	bsf	(??___fttol+1)& (0+255),0,c
 11790  001C6C                     u270_41:
 11791  001C6C  502C               	movf	??___fttol,w,c
 11792  001C6E  6E36               	movwf	___fttol@exp1,c
 11793  001C70  5036               	movf	___fttol@exp1,w,c
 11794  001C72  A4D8               	btfss	status,2,c
 11795  001C74  D009               	goto	i2l3254
 11796  001C76  0E00               	movlw	0
 11797  001C78  6E28               	movwf	?___fttol,c
 11798  001C7A  0E00               	movlw	0
 11799  001C7C  6E29               	movwf	?___fttol+1,c
 11800  001C7E  0E00               	movlw	0
 11801  001C80  6E2A               	movwf	?___fttol+2,c
 11802  001C82  0E00               	movlw	0
 11803  001C84  6E2B               	movwf	?___fttol+3,c
 11804  001C86  0012               	return	
 11805  001C88                     i2l3254:
 11806  001C88  0E17               	movlw	23
 11807  001C8A  6E2C               	movwf	??___fttol& (0+255),c
 11808  001C8C  C028  F02D         	movff	___fttol@f1,??___fttol+1
 11809  001C90  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 11810  001C94  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 11811  001C98  282C               	incf	??___fttol,w,c
 11812  001C9A  6E30               	movwf	(??___fttol+4)& (0+255),c
 11813  001C9C  D004               	goto	i2u272_40
 11814  001C9E                     i2u272_45:
 11815  001C9E  90D8               	bcf	status,0,c
 11816  001CA0  322F               	rrcf	??___fttol+3,f,c
 11817  001CA2  322E               	rrcf	??___fttol+2,f,c
 11818  001CA4  322D               	rrcf	??___fttol+1,f,c
 11819  001CA6                     i2u272_40:
 11820  001CA6  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 11821  001CA8  D7FA               	goto	i2u272_45
 11822  001CAA  502D               	movf	??___fttol+1,w,c
 11823  001CAC  6E31               	movwf	___fttol@sign1,c
 11824  001CAE  8E29               	bsf	___fttol@f1+1,7,c
 11825  001CB0  0EFF               	movlw	255
 11826  001CB2  1628               	andwf	___fttol@f1,f,c
 11827  001CB4  0EFF               	movlw	255
 11828  001CB6  1629               	andwf	___fttol@f1+1,f,c
 11829  001CB8  0E00               	movlw	0
 11830  001CBA  162A               	andwf	___fttol@f1+2,f,c
 11831  001CBC  5028               	movf	___fttol@f1,w,c
 11832  001CBE  6E32               	movwf	___fttol@lval,c
 11833  001CC0  5029               	movf	___fttol@f1+1,w,c
 11834  001CC2  6E33               	movwf	___fttol@lval+1,c
 11835  001CC4  502A               	movf	___fttol@f1+2,w,c
 11836  001CC6  6E34               	movwf	___fttol@lval+2,c
 11837  001CC8  6A35               	clrf	___fttol@lval+3,c
 11838  001CCA  0E8E               	movlw	142
 11839  001CCC  5E36               	subwf	___fttol@exp1,f,c
 11840  001CCE  AE36               	btfss	___fttol@exp1,7,c
 11841  001CD0  D016               	goto	i2l3276
 11842  001CD2  5036               	movf	___fttol@exp1,w,c
 11843  001CD4  0A80               	xorlw	128
 11844  001CD6  0F8F               	addlw	143
 11845  001CD8  B0D8               	btfsc	status,0,c
 11846  001CDA  D009               	goto	i2l3272
 11847  001CDC  0E00               	movlw	0
 11848  001CDE  6E28               	movwf	?___fttol,c
 11849  001CE0  0E00               	movlw	0
 11850  001CE2  6E29               	movwf	?___fttol+1,c
 11851  001CE4  0E00               	movlw	0
 11852  001CE6  6E2A               	movwf	?___fttol+2,c
 11853  001CE8  0E00               	movlw	0
 11854  001CEA  6E2B               	movwf	?___fttol+3,c
 11855  001CEC  0012               	return	
 11856  001CEE                     i2l3272:
 11857  001CEE  90D8               	bcf	status,0,c
 11858  001CF0  3235               	rrcf	___fttol@lval+3,f,c
 11859  001CF2  3234               	rrcf	___fttol@lval+2,f,c
 11860  001CF4  3233               	rrcf	___fttol@lval+1,f,c
 11861  001CF6  3232               	rrcf	___fttol@lval,f,c
 11862  001CF8  3E36               	incfsz	___fttol@exp1,f,c
 11863  001CFA  D7F9               	goto	i2l3272
 11864  001CFC  D015               	goto	i2l3286
 11865  001CFE                     i2l3276:
 11866  001CFE  0E17               	movlw	23
 11867  001D00  6436               	cpfsgt	___fttol@exp1,c
 11868  001D02  D00F               	goto	i2l3284
 11869  001D04  0E00               	movlw	0
 11870  001D06  6E28               	movwf	?___fttol,c
 11871  001D08  0E00               	movlw	0
 11872  001D0A  6E29               	movwf	?___fttol+1,c
 11873  001D0C  0E00               	movlw	0
 11874  001D0E  6E2A               	movwf	?___fttol+2,c
 11875  001D10  0E00               	movlw	0
 11876  001D12  6E2B               	movwf	?___fttol+3,c
 11877  001D14  0012               	return	
 11878  001D16                     i2l3282:
 11879  001D16  90D8               	bcf	status,0,c
 11880  001D18  3632               	rlcf	___fttol@lval,f,c
 11881  001D1A  3633               	rlcf	___fttol@lval+1,f,c
 11882  001D1C  3634               	rlcf	___fttol@lval+2,f,c
 11883  001D1E  3635               	rlcf	___fttol@lval+3,f,c
 11884  001D20  0636               	decf	___fttol@exp1,f,c
 11885  001D22                     i2l3284:
 11886  001D22  5036               	movf	___fttol@exp1,w,c
 11887  001D24  A4D8               	btfss	status,2,c
 11888  001D26  D7F7               	goto	i2l3282
 11889  001D28                     i2l3286:
 11890  001D28  5031               	movf	___fttol@sign1,w,c
 11891  001D2A  B4D8               	btfsc	status,2,c
 11892  001D2C  D008               	goto	i2l3290
 11893  001D2E  1E35               	comf	___fttol@lval+3,f,c
 11894  001D30  1E34               	comf	___fttol@lval+2,f,c
 11895  001D32  1E33               	comf	___fttol@lval+1,f,c
 11896  001D34  6C32               	negf	___fttol@lval,c
 11897  001D36  0E00               	movlw	0
 11898  001D38  2233               	addwfc	___fttol@lval+1,f,c
 11899  001D3A  2234               	addwfc	___fttol@lval+2,f,c
 11900  001D3C  2235               	addwfc	___fttol@lval+3,f,c
 11901  001D3E                     i2l3290:
 11902  001D3E  C032  F028         	movff	___fttol@lval,?___fttol
 11903  001D42  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 11904  001D46  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 11905  001D4A  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 11906  001D4E  0012               	return	
 11907  001D50                     __end_of___fttol:
 11908                           	opt stack 0
 11909                           pclatu	equ	0xFFB
 11910                           pclath	equ	0xFFA
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           intcon	equ	0xFF2
 11918                           intcon2	equ	0xFF1
 11919                           intcon3	equ	0xFF0
 11920                           postinc0	equ	0xFEE
 11921                           fsr0h	equ	0xFEA
 11922                           fsr0l	equ	0xFE9
 11923                           wreg	equ	0xFE8
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function ___altoft *****************
 11934 ;; Defined at:
 11935 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  c               4   54[COMRAM] long 
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  sign            1   63[COMRAM] unsigned char 
 11940 ;;  exp             1   62[COMRAM] unsigned char 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  3   54[COMRAM] float 
 11943 ;; Registers used:
 11944 ;;		wreg, status,2, status,0, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;Total ram usage:       10 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    1
 11957 ;; This function calls:
 11958 ;;		i2___ftpack
 11959 ;; This function is called by:
 11960 ;;		_floor
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text60
 11965  002A58                     __ptext60:
 11966                           	opt stack 0
 11967  002A58                     ___altoft:
 11968                           	opt stack 20
 11969                           
 11970                           ;incstack = 0
 11971  002A58  0E00               	movlw	0
 11972  002A5A  6E40               	movwf	___altoft@sign,c
 11973  002A5C  0E8E               	movlw	142
 11974  002A5E  6E3F               	movwf	___altoft@exp,c
 11975  002A60  AE3A               	btfss	___altoft@c+3,7,c
 11976  002A62  D011               	goto	i2l3124
 11977  002A64  1E3A               	comf	___altoft@c+3,f,c
 11978  002A66  1E39               	comf	___altoft@c+2,f,c
 11979  002A68  1E38               	comf	___altoft@c+1,f,c
 11980  002A6A  6C37               	negf	___altoft@c,c
 11981  002A6C  0E00               	movlw	0
 11982  002A6E  2238               	addwfc	___altoft@c+1,f,c
 11983  002A70  2239               	addwfc	___altoft@c+2,f,c
 11984  002A72  223A               	addwfc	___altoft@c+3,f,c
 11985  002A74  0E01               	movlw	1
 11986  002A76  6E40               	movwf	___altoft@sign,c
 11987  002A78  D006               	goto	i2l3124
 11988  002A7A                     i2l3122:
 11989  002A7A  90D8               	bcf	status,0,c
 11990  002A7C  323A               	rrcf	___altoft@c+3,f,c
 11991  002A7E  3239               	rrcf	___altoft@c+2,f,c
 11992  002A80  3238               	rrcf	___altoft@c+1,f,c
 11993  002A82  3237               	rrcf	___altoft@c,f,c
 11994  002A84  2A3F               	incf	___altoft@exp,f,c
 11995  002A86                     i2l3124:
 11996  002A86  0E00               	movlw	0
 11997  002A88  1437               	andwf	___altoft@c,w,c
 11998  002A8A  6E3B               	movwf	??___altoft& (0+255),c
 11999  002A8C  0E00               	movlw	0
 12000  002A8E  1438               	andwf	___altoft@c+1,w,c
 12001  002A90  6E3C               	movwf	(??___altoft+1)& (0+255),c
 12002  002A92  0E00               	movlw	0
 12003  002A94  1439               	andwf	___altoft@c+2,w,c
 12004  002A96  6E3D               	movwf	(??___altoft+2)& (0+255),c
 12005  002A98  0EFF               	movlw	255
 12006  002A9A  143A               	andwf	___altoft@c+3,w,c
 12007  002A9C  6E3E               	movwf	(??___altoft+3)& (0+255),c
 12008  002A9E  503B               	movf	??___altoft,w,c
 12009  002AA0  103C               	iorwf	??___altoft+1,w,c
 12010  002AA2  103D               	iorwf	??___altoft+2,w,c
 12011  002AA4  103E               	iorwf	??___altoft+3,w,c
 12012  002AA6  A4D8               	btfss	status,2,c
 12013  002AA8  D7E8               	goto	i2l3122
 12014  002AAA  C037  F001         	movff	___altoft@c,i2___ftpack@arg
 12015  002AAE  C038  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 12016  002AB2  C039  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 12017  002AB6  C03F  F004         	movff	___altoft@exp,i2___ftpack@exp
 12018  002ABA  C040  F005         	movff	___altoft@sign,i2___ftpack@sign
 12019  002ABE  EC22  F013         	call	i2___ftpack	;wreg free
 12020  002AC2  C001  F037         	movff	?i2___ftpack,?___altoft
 12021  002AC6  C002  F038         	movff	?i2___ftpack+1,?___altoft+1
 12022  002ACA  C003  F039         	movff	?i2___ftpack+2,?___altoft+2
 12023  002ACE  0012               	return	
 12024  002AD0                     __end_of___altoft:
 12025                           	opt stack 0
 12026                           pclatu	equ	0xFFB
 12027                           pclath	equ	0xFFA
 12028                           tblptru	equ	0xFF8
 12029                           tblptrh	equ	0xFF7
 12030                           tblptrl	equ	0xFF6
 12031                           tablat	equ	0xFF5
 12032                           prodh	equ	0xFF4
 12033                           prodl	equ	0xFF3
 12034                           intcon	equ	0xFF2
 12035                           intcon2	equ	0xFF1
 12036                           intcon3	equ	0xFF0
 12037                           postinc0	equ	0xFEE
 12038                           fsr0h	equ	0xFEA
 12039                           fsr0l	equ	0xFE9
 12040                           wreg	equ	0xFE8
 12041                           fsr1h	equ	0xFE2
 12042                           fsr1l	equ	0xFE1
 12043                           indf2	equ	0xFDF
 12044                           postinc2	equ	0xFDE
 12045                           postdec2	equ	0xFDD
 12046                           fsr2h	equ	0xFDA
 12047                           fsr2l	equ	0xFD9
 12048                           status	equ	0xFD8
 12049                           
 12050 ;; *************** function _eval_poly *****************
 12051 ;; Defined at:
 12052 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 12053 ;; Parameters:    Size  Location     Type
 12054 ;;  x               3   39[COMRAM] float 
 12055 ;;  d               2   42[COMRAM] PTR const 
 12056 ;;		 -> log@coeff(27), exp@coeff(30), 
 12057 ;;  n               2   44[COMRAM] int 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  res             3   48[COMRAM] int 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  3   39[COMRAM] int 
 12062 ;; Registers used:
 12063 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12069 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12073 ;;Total ram usage:       12 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    2
 12076 ;; This function calls:
 12077 ;;		___ftadd
 12078 ;;		___ftmul
 12079 ;;		i2___wmul
 12080 ;; This function is called by:
 12081 ;;		_exp
 12082 ;;		_log
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           	psect	text61
 12087  0021B0                     __ptext61:
 12088                           	opt stack 0
 12089  0021B0                     _eval_poly:
 12090                           	opt stack 20
 12091                           
 12092                           ;incstack = 0
 12093  0021B0  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12094  0021B4  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12095  0021B8  0E00               	movlw	0
 12096  0021BA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12097  0021BC  0E03               	movlw	3
 12098  0021BE  6E03               	movwf	i2___wmul@multiplicand,c
 12099  0021C0  EC09  F018         	call	i2___wmul	;wreg free
 12100  0021C4  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12101  0021C8  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12102  0021CC  5001               	movf	?i2___wmul,w,c
 12103  0021CE  262F               	addwf	??_eval_poly,f,c
 12104  0021D0  5002               	movf	?i2___wmul+1,w,c
 12105  0021D2  2230               	addwfc	??_eval_poly+1,f,c
 12106  0021D4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12107  0021D8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12108  0021DC                     	if	0	;tblptru may be non-zero
 12109  0021DC                     	endif
 12110  0021DC                     	if	0	;tblptru may be non-zero
 12111  0021DC                     	endif
 12112  0021DC  0009               	tblrd		*+
 12113  0021DE  CFF5 F031          	movff	tablat,eval_poly@res
 12114  0021E2  0009               	tblrd		*+
 12115  0021E4  CFF5 F032          	movff	tablat,eval_poly@res+1
 12116  0021E8  000A               	tblrd		*-
 12117  0021EA  CFF5 F033          	movff	tablat,eval_poly@res+2
 12118  0021EE  D03E               	goto	i2l3400
 12119  0021F0                     i2l3398:
 12120  0021F0  C031  F010         	movff	eval_poly@res,___ftmul@f2
 12121  0021F4  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 12122  0021F8  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 12123  0021FC  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 12124  002200  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 12125  002204  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 12126  002208  ECA8  F00E         	call	___ftmul	;wreg free
 12127  00220C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 12128  002210  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 12129  002214  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 12130  002218  0E00               	movlw	0
 12131  00221A  6E04               	movwf	i2___wmul@multiplicand+1,c
 12132  00221C  0E03               	movlw	3
 12133  00221E  6E03               	movwf	i2___wmul@multiplicand,c
 12134  002220  062D               	decf	eval_poly@n,f,c
 12135  002222  A0D8               	btfss	status,0,c
 12136  002224  062E               	decf	eval_poly@n+1,f,c
 12137  002226  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12138  00222A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12139  00222E  EC09  F018         	call	i2___wmul	;wreg free
 12140  002232  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12141  002236  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12142  00223A  5001               	movf	?i2___wmul,w,c
 12143  00223C  262F               	addwf	??_eval_poly,f,c
 12144  00223E  5002               	movf	?i2___wmul+1,w,c
 12145  002240  2230               	addwfc	??_eval_poly+1,f,c
 12146  002242  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12147  002246  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12148  00224A                     	if	0	;tblptru may be non-zero
 12149  00224A                     	endif
 12150  00224A                     	if	0	;tblptru may be non-zero
 12151  00224A                     	endif
 12152  00224A  0009               	tblrd		*+
 12153  00224C  CFF5 F01F          	movff	tablat,___ftadd@f2
 12154  002250  0009               	tblrd		*+
 12155  002252  CFF5 F020          	movff	tablat,___ftadd@f2+1
 12156  002256  000A               	tblrd		*-
 12157  002258  CFF5 F021          	movff	tablat,___ftadd@f2+2
 12158  00225C  EC38  F008         	call	___ftadd	;wreg free
 12159  002260  C01C  F031         	movff	?___ftadd,eval_poly@res
 12160  002264  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 12161  002268  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 12162  00226C                     i2l3400:
 12163  00226C  502D               	movf	eval_poly@n,w,c
 12164  00226E  102E               	iorwf	eval_poly@n+1,w,c
 12165  002270  A4D8               	btfss	status,2,c
 12166  002272  D7BE               	goto	i2l3398
 12167  002274  C031  F028         	movff	eval_poly@res,?_eval_poly
 12168  002278  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 12169  00227C  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 12170  002280  0012               	return		;funcret
 12171  002282                     __end_of_eval_poly:
 12172                           	opt stack 0
 12173                           pclatu	equ	0xFFB
 12174                           pclath	equ	0xFFA
 12175                           tblptru	equ	0xFF8
 12176                           tblptrh	equ	0xFF7
 12177                           tblptrl	equ	0xFF6
 12178                           tablat	equ	0xFF5
 12179                           prodh	equ	0xFF4
 12180                           prodl	equ	0xFF3
 12181                           intcon	equ	0xFF2
 12182                           intcon2	equ	0xFF1
 12183                           intcon3	equ	0xFF0
 12184                           postinc0	equ	0xFEE
 12185                           fsr0h	equ	0xFEA
 12186                           fsr0l	equ	0xFE9
 12187                           wreg	equ	0xFE8
 12188                           fsr1h	equ	0xFE2
 12189                           fsr1l	equ	0xFE1
 12190                           indf2	equ	0xFDF
 12191                           postinc2	equ	0xFDE
 12192                           postdec2	equ	0xFDD
 12193                           fsr2h	equ	0xFDA
 12194                           fsr2l	equ	0xFD9
 12195                           status	equ	0xFD8
 12196                           
 12197 ;; *************** function i2___wmul *****************
 12198 ;; Defined at:
 12199 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;  multiplier      2    0[COMRAM] unsigned int 
 12202 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  __wmul          2    4[COMRAM] unsigned int 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  2    0[COMRAM] unsigned int 
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0, prodl, prodh
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12214 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;Total ram usage:        6 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		_isr
 12224 ;;		_eval_poly
 12225 ;;		i2_printf
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text62
 12230  003012                     __ptext62:
 12231                           	opt stack 0
 12232  003012                     i2___wmul:
 12233                           	opt stack 24
 12234                           
 12235                           ;incstack = 0
 12236  003012  5001               	movf	i2___wmul@multiplier,w,c
 12237  003014  0203               	mulwf	i2___wmul@multiplicand,c
 12238  003016  CFF3 F005          	movff	prodl,i2___wmul@product
 12239  00301A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12240  00301E  5001               	movf	i2___wmul@multiplier,w,c
 12241  003020  0204               	mulwf	i2___wmul@multiplicand+1,c
 12242  003022  50F3               	movf	prodl,w,c
 12243  003024  2606               	addwf	i2___wmul@product+1,f,c
 12244  003026  5002               	movf	i2___wmul@multiplier+1,w,c
 12245  003028  0203               	mulwf	i2___wmul@multiplicand,c
 12246  00302A  50F3               	movf	prodl,w,c
 12247  00302C  2606               	addwf	i2___wmul@product+1,f,c
 12248  00302E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12249  003032  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12250  003036  0012               	return	
 12251  003038                     __end_ofi2___wmul:
 12252                           	opt stack 0
 12253                           pclatu	equ	0xFFB
 12254                           pclath	equ	0xFFA
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           intcon	equ	0xFF2
 12262                           intcon2	equ	0xFF1
 12263                           intcon3	equ	0xFF0
 12264                           postinc0	equ	0xFEE
 12265                           fsr0h	equ	0xFEA
 12266                           fsr0l	equ	0xFE9
 12267                           wreg	equ	0xFE8
 12268                           fsr1h	equ	0xFE2
 12269                           fsr1l	equ	0xFE1
 12270                           indf2	equ	0xFDF
 12271                           postinc2	equ	0xFDE
 12272                           postdec2	equ	0xFDD
 12273                           fsr2h	equ	0xFDA
 12274                           fsr2l	equ	0xFD9
 12275                           status	equ	0xFD8
 12276                           
 12277 ;; *************** function ___ftmul *****************
 12278 ;; Defined at:
 12279 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12280 ;; Parameters:    Size  Location     Type
 12281 ;;  f1              3   12[COMRAM] float 
 12282 ;;  f2              3   15[COMRAM] float 
 12283 ;; Auto vars:     Size  Location     Type
 12284 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 12285 ;;  sign            1   26[COMRAM] unsigned char 
 12286 ;;  cntr            1   25[COMRAM] unsigned char 
 12287 ;;  exp             1   21[COMRAM] unsigned char 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  3   12[COMRAM] float 
 12290 ;; Registers used:
 12291 ;;		wreg, status,2, status,0, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12297 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;Total ram usage:       15 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    1
 12304 ;; This function calls:
 12305 ;;		i2___ftpack
 12306 ;; This function is called by:
 12307 ;;		_dec_to_hex
 12308 ;;		_pow
 12309 ;;		_exp
 12310 ;;		_log
 12311 ;;		_eval_poly
 12312 ;; This function uses a non-reentrant model
 12313 ;;
 12314                           
 12315                           	psect	text63
 12316  001D50                     __ptext63:
 12317                           	opt stack 0
 12318  001D50                     ___ftmul:
 12319                           	opt stack 20
 12320                           
 12321                           ;incstack = 0
 12322  001D50  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 12323  001D54  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12324  001D56  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12325  001D58  340E               	rlcf	___ftmul@f1+1,w,c
 12326  001D5A  3613               	rlcf	??___ftmul& (0+255),f,c
 12327  001D5C  E301               	bnc	u264_41
 12328  001D5E  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12329  001D60                     u264_41:
 12330  001D60  5013               	movf	??___ftmul,w,c
 12331  001D62  6E16               	movwf	___ftmul@exp,c
 12332  001D64  5016               	movf	___ftmul@exp,w,c
 12333  001D66  A4D8               	btfss	status,2,c
 12334  001D68  D007               	goto	i2l3206
 12335  001D6A  0E00               	movlw	0
 12336  001D6C  6E0D               	movwf	?___ftmul,c
 12337  001D6E  0E00               	movlw	0
 12338  001D70  6E0E               	movwf	?___ftmul+1,c
 12339  001D72  0E00               	movlw	0
 12340  001D74  6E0F               	movwf	?___ftmul+2,c
 12341  001D76  0012               	return	
 12342  001D78                     i2l3206:
 12343  001D78  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 12344  001D7C  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12345  001D7E  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12346  001D80  3411               	rlcf	___ftmul@f2+1,w,c
 12347  001D82  3613               	rlcf	??___ftmul& (0+255),f,c
 12348  001D84  E301               	bnc	u266_41
 12349  001D86  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12350  001D88                     u266_41:
 12351  001D88  5013               	movf	??___ftmul,w,c
 12352  001D8A  6E1B               	movwf	___ftmul@sign,c
 12353  001D8C  501B               	movf	___ftmul@sign,w,c
 12354  001D8E  A4D8               	btfss	status,2,c
 12355  001D90  D007               	goto	i2l3212
 12356  001D92  0E00               	movlw	0
 12357  001D94  6E0D               	movwf	?___ftmul,c
 12358  001D96  0E00               	movlw	0
 12359  001D98  6E0E               	movwf	?___ftmul+1,c
 12360  001D9A  0E00               	movlw	0
 12361  001D9C  6E0F               	movwf	?___ftmul+2,c
 12362  001D9E  0012               	return	
 12363  001DA0                     i2l3212:
 12364  001DA0  501B               	movf	___ftmul@sign,w,c
 12365  001DA2  0F7B               	addlw	123
 12366  001DA4  2616               	addwf	___ftmul@exp,f,c
 12367  001DA6  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 12368  001DAA  5012               	movf	___ftmul@f2+2,w,c
 12369  001DAC  1A1B               	xorwf	___ftmul@sign,f,c
 12370  001DAE  0E80               	movlw	128
 12371  001DB0  161B               	andwf	___ftmul@sign,f,c
 12372  001DB2  8E0E               	bsf	___ftmul@f1+1,7,c
 12373  001DB4  8E11               	bsf	___ftmul@f2+1,7,c
 12374  001DB6  0EFF               	movlw	255
 12375  001DB8  1610               	andwf	___ftmul@f2,f,c
 12376  001DBA  0EFF               	movlw	255
 12377  001DBC  1611               	andwf	___ftmul@f2+1,f,c
 12378  001DBE  0E00               	movlw	0
 12379  001DC0  1612               	andwf	___ftmul@f2+2,f,c
 12380  001DC2  0E00               	movlw	0
 12381  001DC4  6E17               	movwf	___ftmul@f3_as_product,c
 12382  001DC6  0E00               	movlw	0
 12383  001DC8  6E18               	movwf	___ftmul@f3_as_product+1,c
 12384  001DCA  0E00               	movlw	0
 12385  001DCC  6E19               	movwf	___ftmul@f3_as_product+2,c
 12386  001DCE  0E07               	movlw	7
 12387  001DD0  6E1A               	movwf	___ftmul@cntr,c
 12388  001DD2                     i2l3226:
 12389  001DD2  A00D               	btfss	___ftmul@f1,0,c
 12390  001DD4  D006               	goto	i2l3230
 12391  001DD6  5010               	movf	___ftmul@f2,w,c
 12392  001DD8  2617               	addwf	___ftmul@f3_as_product,f,c
 12393  001DDA  5011               	movf	___ftmul@f2+1,w,c
 12394  001DDC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12395  001DDE  5012               	movf	___ftmul@f2+2,w,c
 12396  001DE0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12397  001DE2                     i2l3230:
 12398  001DE2  90D8               	bcf	status,0,c
 12399  001DE4  320F               	rrcf	___ftmul@f1+2,f,c
 12400  001DE6  320E               	rrcf	___ftmul@f1+1,f,c
 12401  001DE8  320D               	rrcf	___ftmul@f1,f,c
 12402  001DEA  90D8               	bcf	status,0,c
 12403  001DEC  3610               	rlcf	___ftmul@f2,f,c
 12404  001DEE  3611               	rlcf	___ftmul@f2+1,f,c
 12405  001DF0  3612               	rlcf	___ftmul@f2+2,f,c
 12406  001DF2  2E1A               	decfsz	___ftmul@cntr,f,c
 12407  001DF4  D7EE               	goto	i2l3226
 12408  001DF6  0E09               	movlw	9
 12409  001DF8  6E1A               	movwf	___ftmul@cntr,c
 12410  001DFA                     i2l3236:
 12411  001DFA  A00D               	btfss	___ftmul@f1,0,c
 12412  001DFC  D006               	goto	i2l3240
 12413  001DFE  5010               	movf	___ftmul@f2,w,c
 12414  001E00  2617               	addwf	___ftmul@f3_as_product,f,c
 12415  001E02  5011               	movf	___ftmul@f2+1,w,c
 12416  001E04  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12417  001E06  5012               	movf	___ftmul@f2+2,w,c
 12418  001E08  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12419  001E0A                     i2l3240:
 12420  001E0A  90D8               	bcf	status,0,c
 12421  001E0C  320F               	rrcf	___ftmul@f1+2,f,c
 12422  001E0E  320E               	rrcf	___ftmul@f1+1,f,c
 12423  001E10  320D               	rrcf	___ftmul@f1,f,c
 12424  001E12  90D8               	bcf	status,0,c
 12425  001E14  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 12426  001E16  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 12427  001E18  3217               	rrcf	___ftmul@f3_as_product,f,c
 12428  001E1A  2E1A               	decfsz	___ftmul@cntr,f,c
 12429  001E1C  D7EE               	goto	i2l3236
 12430  001E1E  C017  F001         	movff	___ftmul@f3_as_product,i2___ftpack@arg
 12431  001E22  C018  F002         	movff	___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12432  001E26  C019  F003         	movff	___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12433  001E2A  C016  F004         	movff	___ftmul@exp,i2___ftpack@exp
 12434  001E2E  C01B  F005         	movff	___ftmul@sign,i2___ftpack@sign
 12435  001E32  EC22  F013         	call	i2___ftpack	;wreg free
 12436  001E36  C001  F00D         	movff	?i2___ftpack,?___ftmul
 12437  001E3A  C002  F00E         	movff	?i2___ftpack+1,?___ftmul+1
 12438  001E3E  C003  F00F         	movff	?i2___ftpack+2,?___ftmul+2
 12439  001E42  0012               	return	
 12440  001E44                     __end_of___ftmul:
 12441                           	opt stack 0
 12442                           pclatu	equ	0xFFB
 12443                           pclath	equ	0xFFA
 12444                           tblptru	equ	0xFF8
 12445                           tblptrh	equ	0xFF7
 12446                           tblptrl	equ	0xFF6
 12447                           tablat	equ	0xFF5
 12448                           prodh	equ	0xFF4
 12449                           prodl	equ	0xFF3
 12450                           intcon	equ	0xFF2
 12451                           intcon2	equ	0xFF1
 12452                           intcon3	equ	0xFF0
 12453                           postinc0	equ	0xFEE
 12454                           fsr0h	equ	0xFEA
 12455                           fsr0l	equ	0xFE9
 12456                           wreg	equ	0xFE8
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466 ;; *************** function ___ftsub *****************
 12467 ;; Defined at:
 12468 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  f1              3   39[COMRAM] float 
 12471 ;;  f2              3   42[COMRAM] float 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  3   39[COMRAM] float 
 12476 ;; Registers used:
 12477 ;;		wreg, status,2, status,0, cstack
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12483 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12487 ;;Total ram usage:        6 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    2
 12490 ;; This function calls:
 12491 ;;		___ftadd
 12492 ;; This function is called by:
 12493 ;;		_exp
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text64
 12498  002E76                     __ptext64:
 12499                           	opt stack 0
 12500  002E76                     ___ftsub:
 12501                           	opt stack 20
 12502                           
 12503                           ;incstack = 0
 12504  002E76  502B               	movf	___ftsub@f2,w,c
 12505  002E78  102C               	iorwf	___ftsub@f2+1,w,c
 12506  002E7A  102D               	iorwf	___ftsub@f2+2,w,c
 12507  002E7C  B4D8               	btfsc	status,2,c
 12508  002E7E  D006               	goto	i2l3364
 12509  002E80  0E00               	movlw	0
 12510  002E82  1A2B               	xorwf	___ftsub@f2,f,c
 12511  002E84  0E00               	movlw	0
 12512  002E86  1A2C               	xorwf	___ftsub@f2+1,f,c
 12513  002E88  0E80               	movlw	128
 12514  002E8A  1A2D               	xorwf	___ftsub@f2+2,f,c
 12515  002E8C                     i2l3364:
 12516  002E8C  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 12517  002E90  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 12518  002E94  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 12519  002E98  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 12520  002E9C  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 12521  002EA0  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 12522  002EA4  EC38  F008         	call	___ftadd	;wreg free
 12523  002EA8  C01C  F028         	movff	?___ftadd,?___ftsub
 12524  002EAC  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 12525  002EB0  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 12526  002EB4  0012               	return	
 12527  002EB6                     __end_of___ftsub:
 12528                           	opt stack 0
 12529                           pclatu	equ	0xFFB
 12530                           pclath	equ	0xFFA
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           intcon2	equ	0xFF1
 12539                           intcon3	equ	0xFF0
 12540                           postinc0	equ	0xFEE
 12541                           fsr0h	equ	0xFEA
 12542                           fsr0l	equ	0xFE9
 12543                           wreg	equ	0xFE8
 12544                           fsr1h	equ	0xFE2
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           fsr2h	equ	0xFDA
 12550                           fsr2l	equ	0xFD9
 12551                           status	equ	0xFD8
 12552                           
 12553 ;; *************** function ___ftadd *****************
 12554 ;; Defined at:
 12555 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;  f1              3   27[COMRAM] float 
 12558 ;;  f2              3   30[COMRAM] float 
 12559 ;; Auto vars:     Size  Location     Type
 12560 ;;  exp1            1   38[COMRAM] unsigned char 
 12561 ;;  exp2            1   37[COMRAM] unsigned char 
 12562 ;;  sign            1   36[COMRAM] unsigned char 
 12563 ;; Return value:  Size  Location     Type
 12564 ;;                  3   27[COMRAM] float 
 12565 ;; Registers used:
 12566 ;;		wreg, status,2, status,0, cstack
 12567 ;; Tracked objects:
 12568 ;;		On entry : 0/0
 12569 ;;		On exit  : 0/0
 12570 ;;		Unchanged: 0/0
 12571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12572 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;Total ram usage:       12 bytes
 12577 ;; Hardware stack levels used:    1
 12578 ;; Hardware stack levels required when called:    1
 12579 ;; This function calls:
 12580 ;;		i2___ftpack
 12581 ;; This function is called by:
 12582 ;;		_dec_to_hex
 12583 ;;		___ftsub
 12584 ;;		_floor
 12585 ;;		_log
 12586 ;;		_eval_poly
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text65
 12591  001070                     __ptext65:
 12592                           	opt stack 0
 12593  001070                     ___ftadd:
 12594                           	opt stack 20
 12595                           
 12596                           ;incstack = 0
 12597  001070  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 12598  001074  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12599  001076  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12600  001078  341D               	rlcf	___ftadd@f1+1,w,c
 12601  00107A  3622               	rlcf	??___ftadd& (0+255),f,c
 12602  00107C  E301               	bnc	u243_41
 12603  00107E  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12604  001080                     u243_41:
 12605  001080  5022               	movf	??___ftadd,w,c
 12606  001082  6E27               	movwf	___ftadd@exp1,c
 12607  001084  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 12608  001088  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12609  00108A  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12610  00108C  3420               	rlcf	___ftadd@f2+1,w,c
 12611  00108E  3622               	rlcf	??___ftadd& (0+255),f,c
 12612  001090  E301               	bnc	u244_41
 12613  001092  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12614  001094                     u244_41:
 12615  001094  5022               	movf	??___ftadd,w,c
 12616  001096  6E26               	movwf	___ftadd@exp2,c
 12617  001098  5027               	movf	___ftadd@exp1,w,c
 12618  00109A  B4D8               	btfsc	status,2,c
 12619  00109C  D00B               	goto	i2l728
 12620  00109E  5026               	movf	___ftadd@exp2,w,c
 12621  0010A0  5C27               	subwf	___ftadd@exp1,w,c
 12622  0010A2  B0D8               	btfsc	status,0,c
 12623  0010A4  D00E               	goto	i2l3138
 12624  0010A6  5027               	movf	___ftadd@exp1,w,c
 12625  0010A8  0800               	sublw	0
 12626  0010AA  2426               	addwf	___ftadd@exp2,w,c
 12627  0010AC  6E22               	movwf	??___ftadd& (0+255),c
 12628  0010AE  0E18               	movlw	24
 12629  0010B0  6422               	cpfsgt	??___ftadd,c
 12630  0010B2  D007               	goto	i2l3138
 12631  0010B4                     i2l728:
 12632  0010B4  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 12633  0010B8  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 12634  0010BC  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 12635  0010C0  0012               	return	
 12636  0010C2                     i2l3138:
 12637  0010C2  5026               	movf	___ftadd@exp2,w,c
 12638  0010C4  B4D8               	btfsc	status,2,c
 12639  0010C6  D00B               	goto	i2l732
 12640  0010C8  5027               	movf	___ftadd@exp1,w,c
 12641  0010CA  5C26               	subwf	___ftadd@exp2,w,c
 12642  0010CC  B0D8               	btfsc	status,0,c
 12643  0010CE  D00E               	goto	i2l3144
 12644  0010D0  5026               	movf	___ftadd@exp2,w,c
 12645  0010D2  0800               	sublw	0
 12646  0010D4  2427               	addwf	___ftadd@exp1,w,c
 12647  0010D6  6E22               	movwf	??___ftadd& (0+255),c
 12648  0010D8  0E18               	movlw	24
 12649  0010DA  6422               	cpfsgt	??___ftadd,c
 12650  0010DC  D007               	goto	i2l3144
 12651  0010DE                     i2l732:
 12652  0010DE  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 12653  0010E2  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 12654  0010E6  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 12655  0010EA  0012               	return	
 12656  0010EC                     i2l3144:
 12657  0010EC  0E06               	movlw	6
 12658  0010EE  6E25               	movwf	___ftadd@sign,c
 12659  0010F0  BE1E               	btfsc	___ftadd@f1+2,7,c
 12660  0010F2  8E25               	bsf	___ftadd@sign,7,c
 12661  0010F4  BE21               	btfsc	___ftadd@f2+2,7,c
 12662  0010F6  8C25               	bsf	___ftadd@sign,6,c
 12663  0010F8  8E1D               	bsf	___ftadd@f1+1,7,c
 12664  0010FA  0EFF               	movlw	255
 12665  0010FC  161C               	andwf	___ftadd@f1,f,c
 12666  0010FE  0EFF               	movlw	255
 12667  001100  161D               	andwf	___ftadd@f1+1,f,c
 12668  001102  0E00               	movlw	0
 12669  001104  161E               	andwf	___ftadd@f1+2,f,c
 12670  001106  8E20               	bsf	___ftadd@f2+1,7,c
 12671  001108  0EFF               	movlw	255
 12672  00110A  161F               	andwf	___ftadd@f2,f,c
 12673  00110C  0EFF               	movlw	255
 12674  00110E  1620               	andwf	___ftadd@f2+1,f,c
 12675  001110  0E00               	movlw	0
 12676  001112  1621               	andwf	___ftadd@f2+2,f,c
 12677  001114  5026               	movf	___ftadd@exp2,w,c
 12678  001116  5C27               	subwf	___ftadd@exp1,w,c
 12679  001118  B0D8               	btfsc	status,0,c
 12680  00111A  D01B               	goto	i2l3170
 12681  00111C                     i2l3160:
 12682  00111C  90D8               	bcf	status,0,c
 12683  00111E  361F               	rlcf	___ftadd@f2,f,c
 12684  001120  3620               	rlcf	___ftadd@f2+1,f,c
 12685  001122  3621               	rlcf	___ftadd@f2+2,f,c
 12686  001124  0626               	decf	___ftadd@exp2,f,c
 12687  001126  5027               	movf	___ftadd@exp1,w,c
 12688  001128  1826               	xorwf	___ftadd@exp2,w,c
 12689  00112A  B4D8               	btfsc	status,2,c
 12690  00112C  D00D               	goto	i2l3168
 12691  00112E  0625               	decf	___ftadd@sign,f,c
 12692  001130  C025  F022         	movff	___ftadd@sign,??___ftadd
 12693  001134  0E07               	movlw	7
 12694  001136  1622               	andwf	??___ftadd,f,c
 12695  001138  B4D8               	btfsc	status,2,c
 12696  00113A  D006               	goto	i2l3168
 12697  00113C  D7EF               	goto	i2l3160
 12698  00113E                     i2l3166:
 12699  00113E  90D8               	bcf	status,0,c
 12700  001140  321E               	rrcf	___ftadd@f1+2,f,c
 12701  001142  321D               	rrcf	___ftadd@f1+1,f,c
 12702  001144  321C               	rrcf	___ftadd@f1,f,c
 12703  001146  2A27               	incf	___ftadd@exp1,f,c
 12704  001148                     i2l3168:
 12705  001148  5026               	movf	___ftadd@exp2,w,c
 12706  00114A  1827               	xorwf	___ftadd@exp1,w,c
 12707  00114C  B4D8               	btfsc	status,2,c
 12708  00114E  D01F               	goto	i2l743
 12709  001150  D7F6               	goto	i2l3166
 12710  001152                     i2l3170:
 12711  001152  5027               	movf	___ftadd@exp1,w,c
 12712  001154  5C26               	subwf	___ftadd@exp2,w,c
 12713  001156  B0D8               	btfsc	status,0,c
 12714  001158  D01A               	goto	i2l743
 12715  00115A                     i2l3172:
 12716  00115A  90D8               	bcf	status,0,c
 12717  00115C  361C               	rlcf	___ftadd@f1,f,c
 12718  00115E  361D               	rlcf	___ftadd@f1+1,f,c
 12719  001160  361E               	rlcf	___ftadd@f1+2,f,c
 12720  001162  0627               	decf	___ftadd@exp1,f,c
 12721  001164  5027               	movf	___ftadd@exp1,w,c
 12722  001166  1826               	xorwf	___ftadd@exp2,w,c
 12723  001168  B4D8               	btfsc	status,2,c
 12724  00116A  D00D               	goto	i2l3180
 12725  00116C  0625               	decf	___ftadd@sign,f,c
 12726  00116E  C025  F022         	movff	___ftadd@sign,??___ftadd
 12727  001172  0E07               	movlw	7
 12728  001174  1622               	andwf	??___ftadd,f,c
 12729  001176  B4D8               	btfsc	status,2,c
 12730  001178  D006               	goto	i2l3180
 12731  00117A  D7EF               	goto	i2l3172
 12732  00117C                     i2l3178:
 12733  00117C  90D8               	bcf	status,0,c
 12734  00117E  3221               	rrcf	___ftadd@f2+2,f,c
 12735  001180  3220               	rrcf	___ftadd@f2+1,f,c
 12736  001182  321F               	rrcf	___ftadd@f2,f,c
 12737  001184  2A26               	incf	___ftadd@exp2,f,c
 12738  001186                     i2l3180:
 12739  001186  5026               	movf	___ftadd@exp2,w,c
 12740  001188  1827               	xorwf	___ftadd@exp1,w,c
 12741  00118A  A4D8               	btfss	status,2,c
 12742  00118C  D7F7               	goto	i2l3178
 12743  00118E                     i2l743:
 12744  00118E  AE25               	btfss	___ftadd@sign,7,c
 12745  001190  D00C               	goto	i2l752
 12746  001192  0EFF               	movlw	255
 12747  001194  1A1C               	xorwf	___ftadd@f1,f,c
 12748  001196  0EFF               	movlw	255
 12749  001198  1A1D               	xorwf	___ftadd@f1+1,f,c
 12750  00119A  0EFF               	movlw	255
 12751  00119C  1A1E               	xorwf	___ftadd@f1+2,f,c
 12752  00119E  0E01               	movlw	1
 12753  0011A0  261C               	addwf	___ftadd@f1,f,c
 12754  0011A2  0E00               	movlw	0
 12755  0011A4  221D               	addwfc	___ftadd@f1+1,f,c
 12756  0011A6  0E00               	movlw	0
 12757  0011A8  221E               	addwfc	___ftadd@f1+2,f,c
 12758  0011AA                     i2l752:
 12759  0011AA  AC25               	btfss	___ftadd@sign,6,c
 12760  0011AC  D00C               	goto	i2l3186
 12761  0011AE  0EFF               	movlw	255
 12762  0011B0  1A1F               	xorwf	___ftadd@f2,f,c
 12763  0011B2  0EFF               	movlw	255
 12764  0011B4  1A20               	xorwf	___ftadd@f2+1,f,c
 12765  0011B6  0EFF               	movlw	255
 12766  0011B8  1A21               	xorwf	___ftadd@f2+2,f,c
 12767  0011BA  0E01               	movlw	1
 12768  0011BC  261F               	addwf	___ftadd@f2,f,c
 12769  0011BE  0E00               	movlw	0
 12770  0011C0  2220               	addwfc	___ftadd@f2+1,f,c
 12771  0011C2  0E00               	movlw	0
 12772  0011C4  2221               	addwfc	___ftadd@f2+2,f,c
 12773  0011C6                     i2l3186:
 12774  0011C6  0E00               	movlw	0
 12775  0011C8  6E25               	movwf	___ftadd@sign,c
 12776  0011CA  501C               	movf	___ftadd@f1,w,c
 12777  0011CC  261F               	addwf	___ftadd@f2,f,c
 12778  0011CE  501D               	movf	___ftadd@f1+1,w,c
 12779  0011D0  2220               	addwfc	___ftadd@f2+1,f,c
 12780  0011D2  501E               	movf	___ftadd@f1+2,w,c
 12781  0011D4  2221               	addwfc	___ftadd@f2+2,f,c
 12782  0011D6  AE21               	btfss	___ftadd@f2+2,7,c
 12783  0011D8  D00E               	goto	i2l3196
 12784  0011DA  0EFF               	movlw	255
 12785  0011DC  1A1F               	xorwf	___ftadd@f2,f,c
 12786  0011DE  0EFF               	movlw	255
 12787  0011E0  1A20               	xorwf	___ftadd@f2+1,f,c
 12788  0011E2  0EFF               	movlw	255
 12789  0011E4  1A21               	xorwf	___ftadd@f2+2,f,c
 12790  0011E6  0E01               	movlw	1
 12791  0011E8  261F               	addwf	___ftadd@f2,f,c
 12792  0011EA  0E00               	movlw	0
 12793  0011EC  2220               	addwfc	___ftadd@f2+1,f,c
 12794  0011EE  0E00               	movlw	0
 12795  0011F0  2221               	addwfc	___ftadd@f2+2,f,c
 12796  0011F2  0E01               	movlw	1
 12797  0011F4  6E25               	movwf	___ftadd@sign,c
 12798  0011F6                     i2l3196:
 12799  0011F6  C01F  F001         	movff	___ftadd@f2,i2___ftpack@arg
 12800  0011FA  C020  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
 12801  0011FE  C021  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
 12802  001202  C027  F004         	movff	___ftadd@exp1,i2___ftpack@exp
 12803  001206  C025  F005         	movff	___ftadd@sign,i2___ftpack@sign
 12804  00120A  EC22  F013         	call	i2___ftpack	;wreg free
 12805  00120E  C001  F01C         	movff	?i2___ftpack,?___ftadd
 12806  001212  C002  F01D         	movff	?i2___ftpack+1,?___ftadd+1
 12807  001216  C003  F01E         	movff	?i2___ftpack+2,?___ftadd+2
 12808  00121A  0012               	return	
 12809  00121C                     __end_of___ftadd:
 12810                           	opt stack 0
 12811                           pclatu	equ	0xFFB
 12812                           pclath	equ	0xFFA
 12813                           tblptru	equ	0xFF8
 12814                           tblptrh	equ	0xFF7
 12815                           tblptrl	equ	0xFF6
 12816                           tablat	equ	0xFF5
 12817                           prodh	equ	0xFF4
 12818                           prodl	equ	0xFF3
 12819                           intcon	equ	0xFF2
 12820                           intcon2	equ	0xFF1
 12821                           intcon3	equ	0xFF0
 12822                           postinc0	equ	0xFEE
 12823                           fsr0h	equ	0xFEA
 12824                           fsr0l	equ	0xFE9
 12825                           wreg	equ	0xFE8
 12826                           fsr1h	equ	0xFE2
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           postdec2	equ	0xFDD
 12831                           fsr2h	equ	0xFDA
 12832                           fsr2l	equ	0xFD9
 12833                           status	equ	0xFD8
 12834                           
 12835 ;; *************** function ___ftneg *****************
 12836 ;; Defined at:
 12837 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;  f1              3    0[COMRAM] float 
 12840 ;; Auto vars:     Size  Location     Type
 12841 ;;		None
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  3    0[COMRAM] float 
 12844 ;; Registers used:
 12845 ;;		wreg, status,2, status,0
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        3 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; This function calls:
 12858 ;;		Nothing
 12859 ;; This function is called by:
 12860 ;;		_pow
 12861 ;;		_exp
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text66
 12866  003038                     __ptext66:
 12867                           	opt stack 0
 12868  003038                     ___ftneg:
 12869                           	opt stack 22
 12870                           
 12871                           ;incstack = 0
 12872  003038  5001               	movf	___ftneg@f1,w,c
 12873  00303A  1002               	iorwf	___ftneg@f1+1,w,c
 12874  00303C  1003               	iorwf	___ftneg@f1+2,w,c
 12875  00303E  B4D8               	btfsc	status,2,c
 12876  003040  D006               	goto	i2l785
 12877  003042  0E00               	movlw	0
 12878  003044  1A01               	xorwf	___ftneg@f1,f,c
 12879  003046  0E00               	movlw	0
 12880  003048  1A02               	xorwf	___ftneg@f1+1,f,c
 12881  00304A  0E80               	movlw	128
 12882  00304C  1A03               	xorwf	___ftneg@f1+2,f,c
 12883  00304E                     i2l785:
 12884  00304E  C001  F001         	movff	___ftneg@f1,?___ftneg
 12885  003052  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12886  003056  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12887  00305A  0012               	return		;funcret
 12888  00305C                     __end_of___ftneg:
 12889                           	opt stack 0
 12890                           pclatu	equ	0xFFB
 12891                           pclath	equ	0xFFA
 12892                           tblptru	equ	0xFF8
 12893                           tblptrh	equ	0xFF7
 12894                           tblptrl	equ	0xFF6
 12895                           tablat	equ	0xFF5
 12896                           prodh	equ	0xFF4
 12897                           prodl	equ	0xFF3
 12898                           intcon	equ	0xFF2
 12899                           intcon2	equ	0xFF1
 12900                           intcon3	equ	0xFF0
 12901                           postinc0	equ	0xFEE
 12902                           fsr0h	equ	0xFEA
 12903                           fsr0l	equ	0xFE9
 12904                           wreg	equ	0xFE8
 12905                           fsr1h	equ	0xFE2
 12906                           fsr1l	equ	0xFE1
 12907                           indf2	equ	0xFDF
 12908                           postinc2	equ	0xFDE
 12909                           postdec2	equ	0xFDD
 12910                           fsr2h	equ	0xFDA
 12911                           fsr2l	equ	0xFD9
 12912                           status	equ	0xFD8
 12913                           
 12914 ;; *************** function ___lltoft *****************
 12915 ;; Defined at:
 12916 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  c               4    8[COMRAM] unsigned long 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  exp             1   16[COMRAM] unsigned char 
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  3    8[COMRAM] float 
 12923 ;; Registers used:
 12924 ;;		wreg, status,2, status,0, cstack
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12930 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;Total ram usage:        9 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:    1
 12937 ;; This function calls:
 12938 ;;		i2___ftpack
 12939 ;; This function is called by:
 12940 ;;		_pow
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943                           
 12944                           	psect	text67
 12945  002C5A                     __ptext67:
 12946                           	opt stack 0
 12947  002C5A                     ___lltoft:
 12948                           	opt stack 22
 12949                           
 12950                           ;incstack = 0
 12951  002C5A  0E8E               	movlw	142
 12952  002C5C  6E11               	movwf	___lltoft@exp,c
 12953  002C5E  D006               	goto	i2l3584
 12954  002C60                     i2l3582:
 12955  002C60  90D8               	bcf	status,0,c
 12956  002C62  320C               	rrcf	___lltoft@c+3,f,c
 12957  002C64  320B               	rrcf	___lltoft@c+2,f,c
 12958  002C66  320A               	rrcf	___lltoft@c+1,f,c
 12959  002C68  3209               	rrcf	___lltoft@c,f,c
 12960  002C6A  2A11               	incf	___lltoft@exp,f,c
 12961  002C6C                     i2l3584:
 12962  002C6C  0E00               	movlw	0
 12963  002C6E  1409               	andwf	___lltoft@c,w,c
 12964  002C70  6E0D               	movwf	??___lltoft& (0+255),c
 12965  002C72  0E00               	movlw	0
 12966  002C74  140A               	andwf	___lltoft@c+1,w,c
 12967  002C76  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12968  002C78  0E00               	movlw	0
 12969  002C7A  140B               	andwf	___lltoft@c+2,w,c
 12970  002C7C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12971  002C7E  0EFF               	movlw	255
 12972  002C80  140C               	andwf	___lltoft@c+3,w,c
 12973  002C82  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12974  002C84  500D               	movf	??___lltoft,w,c
 12975  002C86  100E               	iorwf	??___lltoft+1,w,c
 12976  002C88  100F               	iorwf	??___lltoft+2,w,c
 12977  002C8A  1010               	iorwf	??___lltoft+3,w,c
 12978  002C8C  A4D8               	btfss	status,2,c
 12979  002C8E  D7E8               	goto	i2l3582
 12980  002C90  C009  F001         	movff	___lltoft@c,i2___ftpack@arg
 12981  002C94  C00A  F002         	movff	___lltoft@c+1,i2___ftpack@arg+1
 12982  002C98  C00B  F003         	movff	___lltoft@c+2,i2___ftpack@arg+2
 12983  002C9C  C011  F004         	movff	___lltoft@exp,i2___ftpack@exp
 12984  002CA0  0E00               	movlw	0
 12985  002CA2  6E05               	movwf	i2___ftpack@sign,c
 12986  002CA4  EC22  F013         	call	i2___ftpack	;wreg free
 12987  002CA8  C001  F009         	movff	?i2___ftpack,?___lltoft
 12988  002CAC  C002  F00A         	movff	?i2___ftpack+1,?___lltoft+1
 12989  002CB0  C003  F00B         	movff	?i2___ftpack+2,?___lltoft+2
 12990  002CB4  0012               	return	
 12991  002CB6                     __end_of___lltoft:
 12992                           	opt stack 0
 12993                           pclatu	equ	0xFFB
 12994                           pclath	equ	0xFFA
 12995                           tblptru	equ	0xFF8
 12996                           tblptrh	equ	0xFF7
 12997                           tblptrl	equ	0xFF6
 12998                           tablat	equ	0xFF5
 12999                           prodh	equ	0xFF4
 13000                           prodl	equ	0xFF3
 13001                           intcon	equ	0xFF2
 13002                           intcon2	equ	0xFF1
 13003                           intcon3	equ	0xFF0
 13004                           postinc0	equ	0xFEE
 13005                           fsr0h	equ	0xFEA
 13006                           fsr0l	equ	0xFE9
 13007                           wreg	equ	0xFE8
 13008                           fsr1h	equ	0xFE2
 13009                           fsr1l	equ	0xFE1
 13010                           indf2	equ	0xFDF
 13011                           postinc2	equ	0xFDE
 13012                           postdec2	equ	0xFDD
 13013                           fsr2h	equ	0xFDA
 13014                           fsr2l	equ	0xFD9
 13015                           status	equ	0xFD8
 13016                           
 13017 ;; *************** function i2___ftpack *****************
 13018 ;; Defined at:
 13019 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13020 ;; Parameters:    Size  Location     Type
 13021 ;;  arg             3    0[COMRAM] unsigned um
 13022 ;;  exp             1    3[COMRAM] unsigned char 
 13023 ;;  sign            1    4[COMRAM] unsigned char 
 13024 ;; Auto vars:     Size  Location     Type
 13025 ;;		None
 13026 ;; Return value:  Size  Location     Type
 13027 ;;                  3    0[COMRAM] float 
 13028 ;; Registers used:
 13029 ;;		wreg, status,2, status,0
 13030 ;; Tracked objects:
 13031 ;;		On entry : 0/0
 13032 ;;		On exit  : 0/0
 13033 ;;		Unchanged: 0/0
 13034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13035 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13037 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13039 ;;Total ram usage:        8 bytes
 13040 ;; Hardware stack levels used:    1
 13041 ;; This function calls:
 13042 ;;		Nothing
 13043 ;; This function is called by:
 13044 ;;		___altoft
 13045 ;;		___ftadd
 13046 ;;		___ftmul
 13047 ;;		___lltoft
 13048 ;;		i2___awtoft
 13049 ;;		i2___ftdiv
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           	psect	text68
 13054  002644                     __ptext68:
 13055                           	opt stack 0
 13056  002644                     i2___ftpack:
 13057                           	opt stack 23
 13058                           
 13059                           ;incstack = 0
 13060  002644  5004               	movf	i2___ftpack@exp,w,c
 13061  002646  B4D8               	btfsc	status,2,c
 13062  002648  D005               	goto	i2l3082
 13063  00264A  5001               	movf	i2___ftpack@arg,w,c
 13064  00264C  1002               	iorwf	i2___ftpack@arg+1,w,c
 13065  00264E  1003               	iorwf	i2___ftpack@arg+2,w,c
 13066  002650  A4D8               	btfss	status,2,c
 13067  002652  D00C               	goto	i2l3088
 13068  002654                     i2l3082:
 13069  002654  0E00               	movlw	0
 13070  002656  6E01               	movwf	?i2___ftpack,c
 13071  002658  0E00               	movlw	0
 13072  00265A  6E02               	movwf	?i2___ftpack+1,c
 13073  00265C  0E00               	movlw	0
 13074  00265E  6E03               	movwf	?i2___ftpack+2,c
 13075  002660  0012               	return	
 13076  002662                     i2l3086:
 13077  002662  2A04               	incf	i2___ftpack@exp,f,c
 13078  002664  90D8               	bcf	status,0,c
 13079  002666  3203               	rrcf	i2___ftpack@arg+2,f,c
 13080  002668  3202               	rrcf	i2___ftpack@arg+1,f,c
 13081  00266A  3201               	rrcf	i2___ftpack@arg,f,c
 13082  00266C                     i2l3088:
 13083  00266C  0E00               	movlw	0
 13084  00266E  1401               	andwf	i2___ftpack@arg,w,c
 13085  002670  6E06               	movwf	??i2___ftpack& (0+255),c
 13086  002672  0E00               	movlw	0
 13087  002674  1402               	andwf	i2___ftpack@arg+1,w,c
 13088  002676  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13089  002678  0EFE               	movlw	254
 13090  00267A  1403               	andwf	i2___ftpack@arg+2,w,c
 13091  00267C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13092  00267E  5006               	movf	??i2___ftpack,w,c
 13093  002680  1007               	iorwf	??i2___ftpack+1,w,c
 13094  002682  1008               	iorwf	??i2___ftpack+2,w,c
 13095  002684  B4D8               	btfsc	status,2,c
 13096  002686  D00C               	goto	i2l3094
 13097  002688  D7EC               	goto	i2l3086
 13098  00268A                     i2l3090:
 13099  00268A  2A04               	incf	i2___ftpack@exp,f,c
 13100  00268C  0E01               	movlw	1
 13101  00268E  2601               	addwf	i2___ftpack@arg,f,c
 13102  002690  0E00               	movlw	0
 13103  002692  2202               	addwfc	i2___ftpack@arg+1,f,c
 13104  002694  0E00               	movlw	0
 13105  002696  2203               	addwfc	i2___ftpack@arg+2,f,c
 13106  002698  90D8               	bcf	status,0,c
 13107  00269A  3203               	rrcf	i2___ftpack@arg+2,f,c
 13108  00269C  3202               	rrcf	i2___ftpack@arg+1,f,c
 13109  00269E  3201               	rrcf	i2___ftpack@arg,f,c
 13110  0026A0                     i2l3094:
 13111  0026A0  0E00               	movlw	0
 13112  0026A2  1401               	andwf	i2___ftpack@arg,w,c
 13113  0026A4  6E06               	movwf	??i2___ftpack& (0+255),c
 13114  0026A6  0E00               	movlw	0
 13115  0026A8  1402               	andwf	i2___ftpack@arg+1,w,c
 13116  0026AA  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13117  0026AC  0EFF               	movlw	255
 13118  0026AE  1403               	andwf	i2___ftpack@arg+2,w,c
 13119  0026B0  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13120  0026B2  5006               	movf	??i2___ftpack,w,c
 13121  0026B4  1007               	iorwf	??i2___ftpack+1,w,c
 13122  0026B6  1008               	iorwf	??i2___ftpack+2,w,c
 13123  0026B8  B4D8               	btfsc	status,2,c
 13124  0026BA  D006               	goto	i2l3098
 13125  0026BC  D7E6               	goto	i2l3090
 13126  0026BE                     i2l3096:
 13127  0026BE  0604               	decf	i2___ftpack@exp,f,c
 13128  0026C0  90D8               	bcf	status,0,c
 13129  0026C2  3601               	rlcf	i2___ftpack@arg,f,c
 13130  0026C4  3602               	rlcf	i2___ftpack@arg+1,f,c
 13131  0026C6  3603               	rlcf	i2___ftpack@arg+2,f,c
 13132  0026C8                     i2l3098:
 13133  0026C8  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13134  0026CA  D003               	goto	i2l705
 13135  0026CC  0E02               	movlw	2
 13136  0026CE  6004               	cpfslt	i2___ftpack@exp,c
 13137  0026D0  D7F6               	goto	i2l3096
 13138  0026D2                     i2l705:
 13139  0026D2  A004               	btfss	i2___ftpack@exp,0,c
 13140  0026D4  9E02               	bcf	i2___ftpack@arg+1,7,c
 13141  0026D6  90D8               	bcf	status,0,c
 13142  0026D8  3204               	rrcf	i2___ftpack@exp,f,c
 13143  0026DA  5004               	movf	i2___ftpack@exp,w,c
 13144  0026DC  1203               	iorwf	i2___ftpack@arg+2,f,c
 13145  0026DE  5005               	movf	i2___ftpack@sign,w,c
 13146  0026E0  A4D8               	btfss	status,2,c
 13147  0026E2  8E03               	bsf	i2___ftpack@arg+2,7,c
 13148  0026E4  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13149  0026E8  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13150  0026EC  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13151  0026F0  0012               	return	
 13152  0026F2                     __end_ofi2___ftpack:
 13153                           	opt stack 0
 13154                           pclatu	equ	0xFFB
 13155                           pclath	equ	0xFFA
 13156                           tblptru	equ	0xFF8
 13157                           tblptrh	equ	0xFF7
 13158                           tblptrl	equ	0xFF6
 13159                           tablat	equ	0xFF5
 13160                           prodh	equ	0xFF4
 13161                           prodl	equ	0xFF3
 13162                           intcon	equ	0xFF2
 13163                           intcon2	equ	0xFF1
 13164                           intcon3	equ	0xFF0
 13165                           postinc0	equ	0xFEE
 13166                           fsr0h	equ	0xFEA
 13167                           fsr0l	equ	0xFE9
 13168                           wreg	equ	0xFE8
 13169                           fsr1h	equ	0xFE2
 13170                           fsr1l	equ	0xFE1
 13171                           indf2	equ	0xFDF
 13172                           postinc2	equ	0xFDE
 13173                           postdec2	equ	0xFDD
 13174                           fsr2h	equ	0xFDA
 13175                           fsr2l	equ	0xFD9
 13176                           status	equ	0xFD8
 13177                           
 13178 ;; *************** function ___awdiv *****************
 13179 ;; Defined at:
 13180 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;  dividend        2    0[COMRAM] int 
 13183 ;;  divisor         2    2[COMRAM] int 
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;  quotient        2    6[COMRAM] int 
 13186 ;;  sign            1    5[COMRAM] unsigned char 
 13187 ;;  counter         1    4[COMRAM] unsigned char 
 13188 ;; Return value:  Size  Location     Type
 13189 ;;                  2    0[COMRAM] int 
 13190 ;; Registers used:
 13191 ;;		wreg, status,2, status,0
 13192 ;; Tracked objects:
 13193 ;;		On entry : 0/0
 13194 ;;		On exit  : 0/0
 13195 ;;		Unchanged: 0/0
 13196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13198 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13200 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13201 ;;Total ram usage:        8 bytes
 13202 ;; Hardware stack levels used:    1
 13203 ;; This function calls:
 13204 ;;		Nothing
 13205 ;; This function is called by:
 13206 ;;		_dec_to_hex
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text69
 13211  00295C                     __ptext69:
 13212                           	opt stack 0
 13213  00295C                     ___awdiv:
 13214                           	opt stack 24
 13215                           
 13216                           ;incstack = 0
 13217  00295C  0E00               	movlw	0
 13218  00295E  6E06               	movwf	___awdiv@sign,c
 13219  002960  AE04               	btfss	___awdiv@divisor+1,7,c
 13220  002962  D006               	goto	i2l4008
 13221  002964  6C03               	negf	___awdiv@divisor,c
 13222  002966  1E04               	comf	___awdiv@divisor+1,f,c
 13223  002968  B0D8               	btfsc	status,0,c
 13224  00296A  2A04               	incf	___awdiv@divisor+1,f,c
 13225  00296C  0E01               	movlw	1
 13226  00296E  6E06               	movwf	___awdiv@sign,c
 13227  002970                     i2l4008:
 13228  002970  AE02               	btfss	___awdiv@dividend+1,7,c
 13229  002972  D006               	goto	i2l4014
 13230  002974  6C01               	negf	___awdiv@dividend,c
 13231  002976  1E02               	comf	___awdiv@dividend+1,f,c
 13232  002978  B0D8               	btfsc	status,0,c
 13233  00297A  2A02               	incf	___awdiv@dividend+1,f,c
 13234  00297C  0E01               	movlw	1
 13235  00297E  1A06               	xorwf	___awdiv@sign,f,c
 13236  002980                     i2l4014:
 13237  002980  0E00               	movlw	0
 13238  002982  6E08               	movwf	___awdiv@quotient+1,c
 13239  002984  0E00               	movlw	0
 13240  002986  6E07               	movwf	___awdiv@quotient,c
 13241  002988  5003               	movf	___awdiv@divisor,w,c
 13242  00298A  1004               	iorwf	___awdiv@divisor+1,w,c
 13243  00298C  B4D8               	btfsc	status,2,c
 13244  00298E  D01C               	goto	i2l4036
 13245  002990  0E01               	movlw	1
 13246  002992  6E05               	movwf	___awdiv@counter,c
 13247  002994  D004               	goto	i2l4022
 13248  002996                     i2l4020:
 13249  002996  90D8               	bcf	status,0,c
 13250  002998  3603               	rlcf	___awdiv@divisor,f,c
 13251  00299A  3604               	rlcf	___awdiv@divisor+1,f,c
 13252  00299C  2A05               	incf	___awdiv@counter,f,c
 13253  00299E                     i2l4022:
 13254  00299E  AE04               	btfss	___awdiv@divisor+1,7,c
 13255  0029A0  D7FA               	goto	i2l4020
 13256  0029A2                     i2l4024:
 13257  0029A2  90D8               	bcf	status,0,c
 13258  0029A4  3607               	rlcf	___awdiv@quotient,f,c
 13259  0029A6  3608               	rlcf	___awdiv@quotient+1,f,c
 13260  0029A8  5003               	movf	___awdiv@divisor,w,c
 13261  0029AA  5C01               	subwf	___awdiv@dividend,w,c
 13262  0029AC  5004               	movf	___awdiv@divisor+1,w,c
 13263  0029AE  5802               	subwfb	___awdiv@dividend+1,w,c
 13264  0029B0  A0D8               	btfss	status,0,c
 13265  0029B2  D005               	goto	i2l4032
 13266  0029B4  5003               	movf	___awdiv@divisor,w,c
 13267  0029B6  5E01               	subwf	___awdiv@dividend,f,c
 13268  0029B8  5004               	movf	___awdiv@divisor+1,w,c
 13269  0029BA  5A02               	subwfb	___awdiv@dividend+1,f,c
 13270  0029BC  8007               	bsf	___awdiv@quotient,0,c
 13271  0029BE                     i2l4032:
 13272  0029BE  90D8               	bcf	status,0,c
 13273  0029C0  3204               	rrcf	___awdiv@divisor+1,f,c
 13274  0029C2  3203               	rrcf	___awdiv@divisor,f,c
 13275  0029C4  2E05               	decfsz	___awdiv@counter,f,c
 13276  0029C6  D7ED               	goto	i2l4024
 13277  0029C8                     i2l4036:
 13278  0029C8  5006               	movf	___awdiv@sign,w,c
 13279  0029CA  B4D8               	btfsc	status,2,c
 13280  0029CC  D004               	goto	i2l4040
 13281  0029CE  6C07               	negf	___awdiv@quotient,c
 13282  0029D0  1E08               	comf	___awdiv@quotient+1,f,c
 13283  0029D2  B0D8               	btfsc	status,0,c
 13284  0029D4  2A08               	incf	___awdiv@quotient+1,f,c
 13285  0029D6                     i2l4040:
 13286  0029D6  C007  F001         	movff	___awdiv@quotient,?___awdiv
 13287  0029DA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 13288  0029DE  0012               	return	
 13289  0029E0                     __end_of___awdiv:
 13290                           	opt stack 0
 13291                           pclatu	equ	0xFFB
 13292                           pclath	equ	0xFFA
 13293                           tblptru	equ	0xFF8
 13294                           tblptrh	equ	0xFF7
 13295                           tblptrl	equ	0xFF6
 13296                           tablat	equ	0xFF5
 13297                           prodh	equ	0xFF4
 13298                           prodl	equ	0xFF3
 13299                           intcon	equ	0xFF2
 13300                           intcon2	equ	0xFF1
 13301                           intcon3	equ	0xFF0
 13302                           postinc0	equ	0xFEE
 13303                           fsr0h	equ	0xFEA
 13304                           fsr0l	equ	0xFE9
 13305                           wreg	equ	0xFE8
 13306                           fsr1h	equ	0xFE2
 13307                           fsr1l	equ	0xFE1
 13308                           indf2	equ	0xFDF
 13309                           postinc2	equ	0xFDE
 13310                           postdec2	equ	0xFDD
 13311                           fsr2h	equ	0xFDA
 13312                           fsr2l	equ	0xFD9
 13313                           status	equ	0xFD8
 13314                           pclatu	equ	0xFFB
 13315                           pclath	equ	0xFFA
 13316                           tblptru	equ	0xFF8
 13317                           tblptrh	equ	0xFF7
 13318                           tblptrl	equ	0xFF6
 13319                           tablat	equ	0xFF5
 13320                           prodh	equ	0xFF4
 13321                           prodl	equ	0xFF3
 13322                           intcon	equ	0xFF2
 13323                           intcon2	equ	0xFF1
 13324                           intcon3	equ	0xFF0
 13325                           postinc0	equ	0xFEE
 13326                           fsr0h	equ	0xFEA
 13327                           fsr0l	equ	0xFE9
 13328                           wreg	equ	0xFE8
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338                           	psect	rparam
 13339  0000                     pclatu	equ	0xFFB
 13340                           pclath	equ	0xFFA
 13341                           tblptru	equ	0xFF8
 13342                           tblptrh	equ	0xFF7
 13343                           tblptrl	equ	0xFF6
 13344                           tablat	equ	0xFF5
 13345                           prodh	equ	0xFF4
 13346                           prodl	equ	0xFF3
 13347                           intcon	equ	0xFF2
 13348                           intcon2	equ	0xFF1
 13349                           intcon3	equ	0xFF0
 13350                           postinc0	equ	0xFEE
 13351                           fsr0h	equ	0xFEA
 13352                           fsr0l	equ	0xFE9
 13353                           wreg	equ	0xFE8
 13354                           fsr1h	equ	0xFE2
 13355                           fsr1l	equ	0xFE1
 13356                           indf2	equ	0xFDF
 13357                           postinc2	equ	0xFDE
 13358                           postdec2	equ	0xFDD
 13359                           fsr2h	equ	0xFDA
 13360                           fsr2l	equ	0xFD9
 13361                           status	equ	0xFD8
 13362                           
 13363                           	psect	temp
 13364  00007E                     btemp:
 13365                           	opt stack 0
 13366  00007E                     	ds	1
 13367  0000                     int$flags	set	btemp
 13368                           pclatu	equ	0xFFB
 13369                           pclath	equ	0xFFA
 13370                           tblptru	equ	0xFF8
 13371                           tblptrh	equ	0xFF7
 13372                           tblptrl	equ	0xFF6
 13373                           tablat	equ	0xFF5
 13374                           prodh	equ	0xFF4
 13375                           prodl	equ	0xFF3
 13376                           intcon	equ	0xFF2
 13377                           intcon2	equ	0xFF1
 13378                           intcon3	equ	0xFF0
 13379                           postinc0	equ	0xFEE
 13380                           fsr0h	equ	0xFEA
 13381                           fsr0l	equ	0xFE9
 13382                           wreg	equ	0xFE8
 13383                           fsr1h	equ	0xFE2
 13384                           fsr1l	equ	0xFE1
 13385                           indf2	equ	0xFDF
 13386                           postinc2	equ	0xFDE
 13387                           postdec2	equ	0xFDD
 13388                           fsr2h	equ	0xFDA
 13389                           fsr2l	equ	0xFD9
 13390                           status	equ	0xFD8


Data Sizes:
    Strings     342
    Constant    99
    Data        2
    BSS         94
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     37     111
    BANK1           256     16      30
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_20(CODE[15]), STR_19(CODE[16]), STR_18(CODE[3]), STR_17(CODE[18]), 
		 -> STR_16(CODE[23]), STR_15(CODE[16]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[23]), STR_7(CODE[23]), STR_6(CODE[9]), STR_5(CODE[8]), 
		 -> STR_4(CODE[13]), STR_3(CODE[24]), STR_2(CODE[24]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    i2___ftdiv->i2___ftpack
    i2___awtoft->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->i2___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___lltoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_I2C_Master_Init
    _main->_date_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->___ftge
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    ___ftge->___ftdiv
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    ___ftge->___ftdiv
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   51964
                                             14 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    6891
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5174
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            1     1      0   14720
                                             36 BANK0      1     1      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            _lcdInst
                             _printf
                   _read_colorsensor
                      _servo_rotate0
                      _servo_rotate1
 ---------------------------------------------------------------------------------
 (2) _servo_rotate1                                        7     5      2     271
                                             16 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) _servo_rotate0                                        7     5      2     195
                                             16 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                     2     2      0    1717
                                             19 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1150
                                             33 BANK0      3     3      0
                                              6 BANK1      6     0      6
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3398
                                             24 BANK0      9     3      6
                                              0 BANK1      6     6      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2815
                                             24 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2164
                                             16 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5174
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6990
                                             36 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5174
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    5598
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4979
                                             28 BANK0      8     0      8
                                              0 BANK1     14    14      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     896
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1672
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1672
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   45895
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
                    i2_servo_rotate1
 ---------------------------------------------------------------------------------
 (6) i2_servo_rotate1                                      7     5      2     119
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                   2     2      0     171
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2303
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     239
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     126
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   41993
                                             98 COMRAM    16    14      2
                            ___awdiv
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
                         i2___awtoft
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   34990
                                             81 COMRAM    17    11      6
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   11575
                                             51 COMRAM     5     2      3
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
                         i2___awtoft
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   19010
                                             72 COMRAM     9     6      3
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                         i2___awtoft
                          i2___ftdiv
                           i2___ftge
 ---------------------------------------------------------------------------------
 (9) i2___ftdiv                                           15     9      6    1031
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___awtoft                                           4     1      3     920
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    4957
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                            ___fttol
                              _frexp
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4     901
                                             54 COMRAM    10     6      4
                            ___fttol (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    5489
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    1997
                                             12 COMRAM    15     9      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    2706
                                             39 COMRAM     6     0      6
                            ___ftadd
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    2409
                                             27 COMRAM    12     6      6
                            ___ftmul (ARG)
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     832
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftpack
     ___ftge
       ___ftdiv (ARG)
         ___ftpack
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _servo_rotate0
     _servo_rotate1
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___ftadd
       ___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___wmul (ARG)
     ___ftmul
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___awtoft (ARG)
         i2___ftpack
     _pow
       ___ftmul
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___awtoft (ARG)
           i2___ftpack
       ___lltoft
         i2___ftpack
       _exp
         ___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         ___fttol
           ___ftadd (ARG)
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _floor
           ___altoft
             ___fttol (ARG)
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   _frexp (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
             i2___ftpack (ARG)
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___awtoft (ARG)
               i2___ftpack
           _frexp
           i2___ftge
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
             ___ftmul
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___wmul
         i2___awtoft
           i2___ftpack
         i2___ftdiv
           i2___ftpack
         i2___ftge
       _log
         ___ftadd
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
         ___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _frexp
         i2___awtoft
           i2___ftpack
       i2___ftge
     i2___awtoft
       i2___ftpack
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_servo_rotate1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      1E       7       11.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     25      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10A      34        0.0%
DATA                 0      0     10A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Apr 04 10:36:40 2017

               ___altoft@exp 003F                            _b 00A1                            _i 0078  
                          _j 00BF                            _r 00A7           i2_I2C_Master_Start 313E  
         i2_I2C_Master_Write 311C                ___altoft@sign 0040                           l34 30B4  
             ?_emergencystop 0001                 ___awdiv@sign 0006          ___wmul@multiplicand 00DA  
         i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000                   i2___awtoft 2EF0  
                 i2___ftpack 2644                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l402 2488                          l405 24CA                          l350 094A  
                        l380 307C                          l391 2544                          l705 1832  
                        l394 2586                          l386 24EC                          l388 2508  
                        l397 2430                          l399 244C                          l835 2632  
                        l763 1606                          l888 2A4E                          l898 2B90  
                        _GIE 007F97                 __CFG_CPB$OFF 000000          i2servo_rotate1@duty 0006  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001                          _b_p 00A4  
        ?i2_I2C_Master_Write 0002                          _exp 0E88                          _log 163C  
                        _r_p 00AA                          _isr 0008                          _pow 121C  
               ___awmod@sign 00DD                          prod 000FF3                          wreg 000FE8  
               ?_bottle_time 0001                 __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0100  
               ___ftdiv@sign 0105                 __CFG_WDT$OFF 000000                         l4120 25CC  
                       l5000 17E6                         l5010 183C                         l5002 1816  
                       l4116 25B6                         l4060 27DA                         l4052 27B6  
                       l5004 1824                         l4118 25C6                         l4062 27E6  
                       l5030 2A10                         l4128 2620                         l4064 27EC  
                       l4072 281E                         l4056 27C6                         l5112 019A  
                       l5016 1858                         l5026 29FE                         l5050 2B5E  
                       l5114 01A0                         l5202 152A                         l4076 2832  
                       l4068 2810                         l5028 2A0A                         l5108 017E  
                       l3516 2FBA                         l5038 2A40                         l5054 2B82  
                       l5046 2B4C                         l5150 024C                         l5126 01D6  
                       l5142 0212                         l5070 0046                         l5048 2B58  
                       l5128 01DC                         l5144 022A                         l5080 0080  
                       l5064 0020                         l5208 1564                         l5320 0820  
                       l5170 02D0                         l5162 02A8                         l5154 0284  
                       l5090 00FE                         l5074 0050                         l5250 2E0C  
                       l5180 0304                         l5156 028E                         l5068 0034  
                       l5412 211A                         l5228 15C4                         l5340 096A  
                       l5332 08E8                         l5324 0848                         l5182 0350  
                       l5190 03B6                         l5174 02EA                         l5094 0106  
                       l5422 2144                         l5262 2302                         l5350 0A42  
                       l5192 03BE                         l5168 02C4                         l5088 00F8  
                       l5096 013E                         l5432 1868                         l5416 2124  
                       l5336 0936                         l5352 0A58                         l5512 1422  
                       l5178 02FE                         l5194 03CA                         l5450 191A  
                       l5258 22C2                         l5370 0ABC                         l5362 0A8E  
                       l5346 09F4                         l5338 0954                         l5530 14A0  
                       l5522 1460                         l5514 1428                         l5188 039E  
                       l5444 18DC                         l5268 2346                         l3940 24FA  
                       l5380 0AF4                         l5508 1402                         l5438 189E  
                       l3934 24DC                         l3870 2420                         l5374 0AD2  
                       l5366 0AA4                         l5526 1480                         l5518 1440  
                       l5456 1932                         l5384 0B08                         l5536 14C0  
                       l3946 2536                         l3882 247A                         l3876 243E  
                       ?_exp 0049                         ?_log 0034                         l5398 0B58  
                       ?_isr 0001                         l4974 2FE2                         l4992 1788  
                       l4994 1796                         l4996 17C6                         l4988 1774  
                       ?_pow 0052           i2_read_colorsensor 2008                         STR_1 FFEB  
                       STR_2 FEC0                         STR_3 FEA8                         STR_4 FFD5  
                       STR_5 FFF3                         STR_6 FFE2                         STR_7 FEEF  
                       STR_8 FF06                         STR_9 FF51                         _T0CS 007EAD  
                       _LATA 000F89                         u3030 2FB8                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u4055 2C2A                         u5031 1506                         u5120 07F6  
                       u5051 1540                         u5150 085E                         u5317 1414  
                       u5407 2538                         u5191 0968                         u5327 1434  
                       u5417 2D10                         u5337 1452                         u5427 2D4C  
                       u5347 1472                         _RCEN 007E2B                         u5437 2BBA  
                       u5357 1492                         u5447 2BC2                         u5367 14B2  
                       u5457 2BEC                         u5377 2440                         i2l34 30C8  
                       u5467 2BF4                         u5387 247C                         u5477 19A4  
                       u5397 24FC                         _TMR0 000FD6                         _RSEN 007E29  
                       _main 1392                 ___ftpack@arg 00D8                         _keys FE45  
               ___ftpack@exp 00DB                         _time 0092                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007E                         exp@x 0049  
                       log@x 0034                         isr@i 0073         ??i2_I2C_Master_Start 0002  
               i2___ftge@ff1 0001                 i2___ftge@ff2 0004         ??i2_I2C_Master_Write 0004  
                       pow@x 0052                         pow@y 0055                         prodh 000FF4  
                       prodl 000FF3                         start 000E          ?i2_read_colorsensor 0001  
              __CFG_IESO$OFF 000000                 i2___ftdiv@f1 0009                 i2___ftdiv@f2 000C  
               i2___ftdiv@f3 0013              __end_ofi2_putch 3106                 i2___awtoft@c 0009  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A                 ___param_bank 000000  
               ___ftmul@sign 001B                  i2_lcdNibble 2D58                ?_bottle_count 0001  
               ___fttol@exp1 0036                        ??_exp 004C                        ??_log 0037  
               ___fttol@lval 0032                        ??_isr 00C8                        ??_pow 0058  
           ?_I2C_Master_Init 00E5             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
          ??i2_servo_rotate1 0003             ?_I2C_Master_Stop 0001        i2servo_rotate1@degree 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 29E0              __end_of___ftadd 121C                        STR_10 FF40  
                      STR_11 FF62                        STR_20 FFC6                        STR_12 FF73  
                      STR_13 FF84                        STR_21 FF2F                        STR_14 FF95  
                      STR_15 FFB6                        STR_16 FED8                        STR_17 FF1D  
                      STR_18 FFFB                        STR_19 FFA6              __end_of___awmod 283C  
            __end_of___ftdiv 163C              __end_of___ftneg 305C              __end_of___lldiv 2644  
            __end_of___ftmul 1E44              ___awdiv@divisor 0003              __end_of___ftsub 2EB6  
            __end_of___fttol 1D50                        _T0PS0 007EA8                        _T0PS1 007EA9  
                      _T0PS2 007EAA              __end_of___lwdiv 2A58              __end_of___lwmod 2B9A  
                      i2l304 077E                        i2l402 2762                        i2l405 2798  
                      i2l280 0428                        i2l290 0500                        i2l283 068E  
                      i2l292 0600                        i2l293 0610                        i2l278 0692  
                      i2l705 26D2                        i2l289 04F6                        i2l732 10DE  
                      i2l397 2712                        i2l743 118E                        i2l399 272E  
                      i2l752 11AA                        i2l728 10B4                        i2l920 1254  
                      i2l763 1EF8                        i2l925 1384                        i2l785 304E  
            ___awdiv@counter 0005                        i2l888 2CFE                        i2l898 2E6C  
       ??i2_read_colorsensor 0004                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96              ??_servo_rotate0 00DA              ??_servo_rotate1 00DA  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011  
            __end_of_lcdInst 30FA               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
                      _nRBPU 007F8F                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 2D58               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 00E3              __end_of_dpowers FE60  
                      _color 008A                        _floor 1F2A                        _etime 00B3  
                      _ldexp 234A                        _frexp 28CC                        _errno 00B1  
            __end_of_isdigit 2FEC                ___ftpack@sign 00DC                        _putch 30DA  
                      _stime 007C                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___ftge 28CC                        pow@yi 005F              __end_of_timeset FE6F  
           __end_ofi2___wmul 3038              __end_of_standby 2EF0                        status 000FD8  
              i2___ftdiv@exp 0016               __CFG_PBADEN$ON 000000                i2printf@width 001E  
         __size_ofi2___ftdiv 00E6                  exp@exponent 004F             __end_ofi2_printf 0E88  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042                  ldexp@newexp 0037  
            __initialization 2DA6                  log@exponent 0037           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00EC               ??_bottle_count 00EC                 __end_of_main 14F0  
               __end_of_keys FE56                   i2printf@ap 0018           __size_ofi2_isdigit 001E  
                ?i2___awtoft 0009                  ?i2___ftpack 0001                       ??_main 010E  
              ___fttol@sign1 0031                __activetblptr 000002            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 00D9           ??_I2C_Master_Start 00D9                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 00DB                       ?_floor 0041  
                     ?_ldexp 0034                       ?_frexp 0001             __end_of___altoft 2AD0  
                     _T08BIT 007EAE             ___awdiv@dividend 0001              i2lcdNibble@data 0002  
           __end_of___awtoft 2E34                       ?_putch 0001             __end_of___ftpack 1866  
            i2lcdNibble@temp 0001             __end_of___lltoft 2CB6                       _INT0IE 007F94  
                     _INT1IE 007F83                       _INT1IF 007F80                       _INT2IE 007F84  
                     i2l1083 0F3E                       i2l1084 1062                       i2l1094 1FFA  
                     i2l3122 2A7A                       i2l4020 2996                       i2l3212 1DA0  
                     i2l3124 2A86                       u300_41 1E7C                       i2l4022 299E  
                     i2l4014 2980                       i2l3230 1DE2                       i2l3206 1D78  
                     i2l3302 28F4                       i2l4040 29D6                       i2l4032 29BE  
                     i2l4024 29A2                       i2l4008 2970                       i2l3160 111C  
                     i2l3144 10EC                       i2l3240 1E0A                       i2l3400 226C  
                     i2l4200 2E42                       i2l3090 268A                       i2l3082 2654  
                     i2l3170 1152                       i2l3138 10C2                       i2l3226 1DD2  
                     i2l4202 2E4A                       i2l4036 29C8                       i2l3180 1186  
                     i2l3172 115A                       i2l3236 1DFA                       i2l3324 286C  
                     i2l4204 2E4E                       i2l3094 26A0                       i2l3086 2662  
                     i2l3166 113E                       i2l3254 1C88                       i2l3334 28C8  
                     i2l3096 26BE                       i2l3088 266C                       i2l3168 1148  
                     i2l3272 1CEE                       i2l3328 289C                       i2l3432 23D8  
                     i2l3416 23A8                       i2l3408 2362                       i2l4152 300C  
                     i2l4208 2E62                       i2l3098 26C8                       i2l3186 11C6  
                     i2l3178 117C                       i2l3290 1D3E                       i2l3282 1D16  
                     i2l4170 3094                       i2l3196 11F6                       i2l3364 2E8C  
                     i2l3284 1D22                       i2l3276 1CFE                       i2l3428 23CC  
                     i2l4180 2CCC                       i2l3286 1D28                       i2l3390 1F80  
                     i2l3382 1F58                       i2l3446 2F04                       i2l3462 1E94  
                     i2l4182 2CD4                       i2l4510 2720                       i2l3456 1E6C  
                     i2l3640 167A                       i2l4192 2CF4                       i2l4184 2CD8  
                     i2l4600 0CD4                       i2l4504 2702                       i2l3386 1F66  
                     i2l3482 1ED2                       i2l3634 1658                       i2l4602 0CD8  
                     i2l3900 1262                       i2l4516 2754                       i2l3582 2C60  
                     i2l3398 21F0                       i2l3662 0ED8                       i2l4630 0D60  
                     i2l4542 0B76                       i2l3584 2C6C                       i2l3656 0EA0  
                     i2l4464 2B04                       i2l4624 0D34                       i2l4616 0D04  
                     i2l4544 0B84                       i2l3690 1038                       i2l3914 12DE  
                     i2l3906 127A                       i2l4482 1A82                       i2l4474 2B28  
                     i2l4642 0D8C                       i2l4618 0D1A                       i2l4562 0C16  
                     i2l4570 0C54                       i2l4554 0BB8                       i2l4538 0B66  
                     i2l3668 0F10                       i2l4468 2B0C                       i2l4644 0D94  
                     i2l4652 0DBA                       i2l4636 0D76                       i2l4628 0D58  
                     i2l4564 0C1A                       i2l4548 0B8A                       i2l4812 05B6  
                     i2l3918 1300                       i2l4494 1B52                       i2l4654 0DC0  
                     i2l4662 0E4A                       i2l4582 0C8A                       i2l4830 063A  
                     i2l4656 0E04                       i2l4664 0E60                       i2l4648 0DA8  
                     i2l4568 0C20                       i2l4824 061E                       i2l4760 044E  
                     i2l4666 0E66                       i2l4586 0CA4                       i2l4826 062C  
                     i2l4588 0CA8                       i2l4668 0E6E                       i2l4860 0760  
                     i2l4756 043E                       i2l4854 074A                       i2l4782 04B8  
                     i2l4766 046E                       i2l4864 0768                       i2l4784 04C2  
                     i2l4778 04AC                       u243_41 1080                       u244_41 1094  
                     u270_41 1C6C                       u264_41 1D60                       u266_41 1D88  
                     u298_41 1E54                       _TMR0IE 007F95                       _TMR0IF 007F92  
                  ??i2_putch 0003                       _TMR0ON 007EAF                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000            ?_read_colorsensor 0001                       ___ftge 2282  
                     ___wmul 2F5E           ??_read_colorsensor 00DB                    ??___awdiv 0005  
                  ??___ftadd 0022               __CFG_STVREN$ON 000000                    ??___awmod 00DC  
                  ??___ftdiv 00E6                    ??___ftneg 0004                    ??___lldiv 00E0  
                  ??___ftmul 0013                    ??___ftsub 002E                    ??___fttol 002C  
                  ??___lwdiv 00DC                    ??___lwmod 00E3                dec_to_hex@num 0063  
                     clear_0 2DC4                       clear_1 2DD0                       clear_2 2DDC  
           ___awdiv@quotient 0007              ___awmod@divisor 00DA              ___awmod@counter 00DC  
                  ??_lcdInst 00DA                       _printf 0012                       floor@i 0044  
                     floor@x 0041        ___ftmul@f3_as_product 0017                    ??_initLCD 00DB  
                  ??_isdigit 00D8            __end_ofi2___ftdiv 1F2A            __end_ofi2___lwdiv 2D08  
               __mediumconst FE44            __end_ofi2___lwmod 2E76                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_standby 00EC  
          __end_ofi2_lcdInst 3112            __end_ofi2_isdigit 309C             __end_ofexp@coeff FE8D  
       __size_of_bottle_time 0036             __end_oflog@coeff FEA8               i2___ftdiv@cntr 0012  
                 __accesstop 0080      __end_of__initialization 2DE2                   ___altoft@c 0037  
             i2___ftdiv@sign 0017                   ___ftadd@f1 001C                   ___ftadd@f2 001F  
        __size_ofi2___awtoft 0038          __size_ofi2___ftpack 00AE                   ___ftge@ff1 0106  
                 ___ftge@ff2 0109                 eval_poly@res 0031                ___rparam_used 000001  
                 ___ftdiv@f1 00E0                   ___ftdiv@f2 00E3                   ___ftdiv@f3 0101  
                 ___ftneg@f1 0001                   ___awtoft@c 00E0               i2___ftpack@arg 0001  
             i2___ftpack@exp 0004                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
                 ___ftsub@f1 0028                   ___ftsub@f2 002B                   ___fttol@f1 0028  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 3146  
                 ___lltoft@c 0009                __end_of_floor 2008                __end_of_ldexp 2410  
              __end_of_frexp 295C                __end_of_putch 30EA                  i2printf@idx 0017  
                i2printf@val 001B           __size_of_date_time 00D2          servo_rotate0@degree 00D8  
                  ?i2___ftge 0001          servo_rotate1@degree 00D8                    ?i2___wmul 0001  
         __size_of_lcdNibble 0060                  i2putch@data 0003                    ?i2_printf 000D  
           _flag_bottle_high 00B7  __size_of_I2C_ColorSens_Init 00FE                      ??_floor 0044  
                    ??_ldexp 0039                      ??_frexp 0006         __end_of_bottle_count 196A  
                 _dec_to_hex 1A68                      ??_putch 00DA                   __pbssBANK0 0080  
                 __pbssBANK1 0110           __size_of_eval_poly 00D2            servo_rotate0@duty 00DD  
          servo_rotate1@duty 00DD              i2_servo_rotate1 26F2           __size_of_read_time 0068  
                    ?___ftge 0106                 ?i2_lcdNibble 0001                      ?___wmul 00D8  
                  ?___altoft 0037                    ?___awtoft 00E0                    ?___ftpack 00D8  
                    ?_printf 00E4           __size_of_operation 03A2                    ?___lltoft 0009  
                 _flag_yopNC 00BD              _bottle_read_bot 00AD                   ??i2___ftge 0007  
            _bottle_read_top 00AF                   ??i2___wmul 0005                   ??i2_printf 0013  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                   _color_high 0099  
                    _SSPSTAT 000FC7            __end_of_date_time 21B0                      i2_putch 30FA  
          _bottle_count_disp 00ED  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 2BFA  
__size_ofi2_I2C_Master_Write 000A                ?_operationend 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of___ftge 00C8                      ___awdiv 295C  
                    ___ftadd 1070                      ___awmod 279A                      ___ftdiv 14F0  
                    ___ftneg 3038                      ___lldiv 2588              __size_of___wmul 0036  
                    ___ftmul 1D50                      ___ftsub 2E76                      ___fttol 1C5C  
                    ___lwdiv 29E0                      ___lwmod 2B38                   _curr_state 00C7  
                 ??___altoft 003B                      __pcinit 2DA6                 ??i2___awtoft 000C  
               ??i2___ftpack 0006                   ??___awtoft 00E3                   ??___ftpack 00DD  
          __end_of_eval_poly 2282                      __ramtop 1000                      _lcdInst 30EA  
                 ??___lltoft 000D                      __ptext0 1392                      __ptext1 2EB6  
                    __ptext2 309C                      __ptext3 07BA                      __ptext4 2410  
                    __ptext5 24CC                      __ptext6 1B64                      __ptext7 2282  
                    __ptext8 14F0                      __ptext9 2DF0              __size_of_printf 03D6  
             dec_to_hex@temp 006B                      _initLCD 2D08            __end_of_hexpowers FE68  
              i2_isdigit$805 0002                      _dpowers FE56                 __size_of_exp 01E8  
               __size_of_log 011E                      _isdigit 2FC2                 __size_of_isr 07B2  
__size_ofi2_read_colorsensor 00D6                 __size_of_pow 0176             ___awmod@dividend 00D8  
          __end_of_read_time 2B38     __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E  
   __size_of_I2C_Master_Wait 0014                   date_time@i 00EC     __size_of_I2C_Master_Stop 0008  
      __end_of_servo_rotate0 2588        __end_of_servo_rotate1 24CC                      _timeset FE68  
                    _testint 0118                      _standby 2EB6                  ?_dec_to_hex 0063  
    __end_ofi2_servo_rotate1 279A               __pintcode_body 03E8         end_of_initialization 2DE2  
                    exp@sign 0051                __Lmediumconst FE44                      int_func 03E8  
        i2___wmul@multiplier 0001            __end_of_operation 0B5C               _operation_disp 00C1  
         __end_ofi2___awtoft 2F28           __end_ofi2___ftpack 26F2               _operation_time 00C3  
             ??_operationend 00EC    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 00DC                      pow@sign 005E              ___lldiv@counter 00E4  
                    printf@c 010D                      printf@f 00E4             I2C_Master_Init@c 00E5  
           I2C_Master_Read@a 00D9                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE        __end_of_emergencystop 307E                    _PORTAbits 000F80  
      __size_of_bottle_count 0104    __size_of_read_colorsensor 00F8            i2_I2C_Master_Read 2FEC  
          i2_I2C_Master_Wait 30C8            i2_I2C_Master_Stop 3136                    i2___ftdiv 1E44  
          i2___lwdiv@divisor 0003                    i2___lwdiv 2CB6                    i2___lwmod 2E34  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                   _start_time 007A                    i2_lcdInst 3106  
                ___ftdiv@exp 0104                  printf@width 010B              i2___awtoft@sign 000C  
        ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005                    i2_isdigit 307E  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002                  ___ftmul@exp 0016  
               _bottle_count 1866               __end_of___ftge 234A               __end_of___wmul 2F94  
        __size_of_dec_to_hex 00FC         __size_ofi2_lcdNibble 004E                i2lcdInst@data 0003  
                 floor@expon 0047             i2___wmul@product 0005               __end_of_printf 03E8  
               i2printf@flag 001D    __end_ofi2_I2C_Master_Read 3012    __end_ofi2_I2C_Master_Wait 30DA  
               i2printf@prec 001A          start_initialization 2DA6    __end_ofi2_I2C_Master_Stop 313E  
          __size_ofi2___ftge 0090                   eval_poly@d 002B                   eval_poly@n 002D  
                 eval_poly@x 0028            __size_ofi2___wmul 0026                   ldexp@value 0034  
                __end_of_exp 1070                  __end_of_log 175A                  __end_of_isr 07BA  
                __end_of_pow 1392                    i2printf@c 0020                    i2printf@f 000D  
              ??_bottle_time 00EC        i2I2C_Master_Read@temp 0003                   ?i2___ftdiv 0009  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008             ?i2_servo_rotate1 0001  
          __size_ofi2_printf 032C                   frexp@value 0001            ??_I2C_Master_Init 00E9  
          ??_I2C_Master_Read 00D9            ??_I2C_Master_Wait 00D8                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 00D9                   ?i2_isdigit 0001                     ??___ftge 00E9  
                   ??___wmul 00DC                  __pdataBANK0 00ED             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0100            __size_of___altoft 0078                   read_time@i 0004  
          __size_of___awtoft 0044            __size_of___ftpack 010C            __size_of___lltoft 005C  
 __end_of_I2C_ColorSens_Init 1A68                  __pbssCOMRAM 0076         __end_of_operationend 30B4  
              __pcstackBANK0 00C8                __pcstackBANK1 0100            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001          __end_of_bottle_time 2F5E  
           _I2C_Master_Start 312E          i2I2C_Master_Write@d 0002             _I2C_Master_Write 3112  
                  _date_time 20DE             ___lwdiv@dividend 00D8            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FE44                    _lcdNibble 2B9A  
                   ?___awdiv 0001                     ?___ftadd 001C                     ?___awmod 00D8  
                   ?___ftdiv 00E0                     ?___ftneg 0001                     ?___lldiv 00D8  
                   ?___ftmul 000D                     ?___ftsub 0028                     ?___fttol 0028  
                   ?___lwdiv 00D8                     ?___lwmod 00DF                     ?_lcdInst 0001  
           dec_to_hex@hexnum 006F                    _color_low 009D                     ?_initLCD 0001  
                  _colorprev 0110                     ?_isdigit 0001             _read_colorsensor 1B64  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 21B0  
 __size_ofi2_I2C_Master_Stop 0008                  _flag_bottle 00B5                  _flag_picbug 00B9  
                  _hexpowers FE60                     ?_standby 0001             ___lwdiv@quotient 00DD  
             __size_of_floor 00DE               __size_of_ldexp 00C6                  ??i2___ftdiv 000F  
             __size_of_frexp 0090                 ??_dec_to_hex 0065                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C                    _read_time 2AD0               __size_of_putch 0010  
 __end_ofi2_I2C_Master_Start 3146   __end_ofi2_I2C_Master_Write 3126                  ??i2_lcdInst 0003  
             ___wmul@product 00DC                     _LATAbits 000F89                     _LATCbits 000F8B  
                   _LATDbits 000F8C                  ??i2_isdigit 0001                   ?_date_time 0001  
                   i2u327_40 0F18                     i2u272_40 1CA6                     i2u328_40 0F1A  
                   i2u272_45 1C9E                     i2u293_40 2382                     i2u365_40 12C6  
                   i2u293_48 2384                     i2u550_47 2722                     i2u279_40 291C  
                   i2u551_47 2756                    _operation 07BA                     i2u279_48 291E  
                   i2u552_47 2D70                     i2u289_40 1F72                     i2u553_47 2D78  
                   i2u554_47 2D98                     i2u395_40 300A                     i2u555_47 2DA0  
                   i2u548_47 0482                     i2u549_47 0770             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001           __end_of_dec_to_hex 1B64   __end_ofi2_read_colorsensor 20DE  
          ___wmul@multiplier 00D8                     i2___ftge 283C                     i2___wmul 3012  
              lcdNibble@data 00D9                   printf@flag 010A                lcdNibble@temp 00D8  
                 printf@prec 0107                   ?_eval_poly 0028                     i2_printf 0B5C  
                _bottle_time 2F28          I2C_Master_Read@temp 00DA           _bottle_count_array 0080  
                 ?_read_time 0001           dec_to_hex@quotient 0071             __size_ofi2_putch 000C  
                  frexp@eptr 0004                     __Hrparam 0000                   ?_operation 0001  
                   __Lrparam 0000           __CFG_BOREN$SBORDIS 000000                  dec_to_hex@i 006D  
     __size_of_servo_rotate0 00BC       __size_of_servo_rotate1 00BC             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 00A2             __size_of___ftdiv 014C  
           __size_of___ftneg 0024        i2___wmul@multiplicand 0003             __size_of___lldiv 00BC  
                   ___altoft 2A58             __size_of___ftmul 00F4             __size_of___ftsub 0040  
           __size_of___fttol 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
      __size_of_operationend 0018                     ___awtoft 2DF0                     ___ftpack 175A  
                   ___lltoft 2C5A                _flag_top_read 00BB                  _isdigit$805 00D9  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010                     _exp$1248 004C  
            _I2C_Master_Init 2BFA              _I2C_Master_Read 2F94             __size_of_initLCD 0050  
            _I2C_Master_Wait 30B4              _I2C_Master_Stop 3126                     _isr$1371 0074  
           __size_of_isdigit 002A              ___lwdiv@divisor 00DA              ___lwdiv@counter 00DC  
                   __ptext10 175A                     __ptext11 2D08                     __ptext20 2F5E  
                   __ptext12 305C                     __ptext21 2B38                     __ptext13 20DE  
                   __ptext30 3126                     __ptext22 29E0                     __ptext14 2F94  
                   __ptext31 312E                     __ptext23 30EA                     __ptext15 2F28  
                   __ptext40 2CB6                     __ptext32 30B4                     __ptext24 2B9A  
                   __ptext16 1866                     __ptext41 3106                     __ptext25 279A  
                   __ptext17 0012                     __ptext50 121C                     __ptext42 2D58  
                   __ptext34 26F2                     __ptext26 2BFA                     __ptext18 30DA  
                   __ptext51 163C                     __ptext43 2AD0                     __ptext35 2008  
                   __ptext27 2588                     __ptext19 2FC2                     __ptext60 2A58  
                   __ptext52 0E88                     __ptext44 311C                     __ptext36 0B5C  
                   __ptext28 196A                     __ptext61 21B0                     __ptext53 1E44  
                   __ptext45 3136                     __ptext37 30FA                     __ptext29 3112  
                   __ptext62 3012                     __ptext54 2EF0                     __ptext46 313E  
                   __ptext38 307E                     __ptext63 1D50                     __ptext55 234A  
                   __ptext47 2FEC                     __ptext39 2E34                     __ptext64 2E76  
                   __ptext56 1F2A                     __ptext48 30C8                     __ptext65 1070  
                   __ptext57 283C                     __ptext49 1A68                     __ptext66 3038  
                   __ptext58 28CC                     __ptext67 2C5A                     __ptext59 1C5C  
                   __ptext68 2644                     __ptext69 295C                     _end_time 0076  
           __size_of_standby 003A                     _pow$1246 0058                     _pow$1247 005B  
     __size_of_emergencystop 0022                __size_of_main 015E              _dec_to_hex$1245 0065  
            _dec_to_hex$1372 0068                  ??_date_time 00EC                 _operationend 309C  
              ??i2_lcdNibble 0001                  ??_lcdNibble 00D8                     _testflag 00C5  
                   int$flags 007E                    printf@idx 0104                    printf@val 0108  
                   exp@coeff FE6F                     log@coeff FE8D                    putch@data 00DA  
   __end_of_I2C_Master_Start 3136     __end_of_I2C_Master_Write 311C                   _INTCONbits 000FF2  
                ??_eval_poly 002F                     isdigit@c 00DA                _servo_rotate0 24CC  
              _servo_rotate1 2410                  ??_read_time 0004                     intlevel2 0000  
           ___lwmod@dividend 00DF             ___lldiv@dividend 00D8           _I2C_ColorSens_Init 196A  
   __end_of_read_colorsensor 1C5C     __size_ofi2_servo_rotate1 00A8                  ??_operation 00EC  
        ?_I2C_ColorSens_Init 0001                     printf@ap 0105      __end_of_I2C_Master_Init 2C5A  
    __end_of_I2C_Master_Read 2FC2      __end_of_I2C_Master_Wait 30C8      __end_of_I2C_Master_Stop 312E  
                lcdInst@data 00DA                _emergencystop 305C          __end_ofi2_lcdNibble 2DA6  
           ___lldiv@quotient 00E0            I2C_Master_Write@d 00D9              ___lwmod@divisor 00E1  
            ___lwmod@counter 00E3         ??_I2C_ColorSens_Init 00DB               ?_servo_rotate0 00D8  
             ?_servo_rotate1 00D8  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 05 23:24:38 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.40
    44                           ; Generated 01/12/2016 GMT
    45                           ; 
    46                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4620 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  001000                     __psmallconst:
    80                           	opt stack 0
    81  001000  00                 	db	0
    82  001001                     _keys:
    83                           	opt stack 0
    84  001001  31                 	db	49
    85  001002  32                 	db	50
    86  001003  33                 	db	51
    87  001004  41                 	db	65
    88  001005  34                 	db	52
    89  001006  35                 	db	53
    90  001007  36                 	db	54
    91  001008  42                 	db	66
    92  001009  37                 	db	55
    93  00100A  38                 	db	56
    94  00100B  39                 	db	57
    95  00100C  43                 	db	67
    96  00100D  2A                 	db	42
    97  00100E  30                 	db	48
    98  00100F  23                 	db	35
    99  001010  44                 	db	68
   100  001011  00                 	db	0
   101  001012                     __end_of_keys:
   102                           	opt stack 0
   103  001012                     _dpowers:
   104                           	opt stack 0
   105  001012  0001               	dw	1
   106  001014  000A               	dw	10
   107  001016  0064               	dw	100
   108  001018  03E8               	dw	1000
   109  00101A  2710               	dw	10000
   110  00101C                     __end_of_dpowers:
   111                           	opt stack 0
   112  00101C                     _hexpowers:
   113                           	opt stack 0
   114  00101C  0001               	dw	1
   115  00101E  0010               	dw	16
   116  001020  0100               	dw	256
   117  001022  1000               	dw	4096
   118  001024                     __end_of_hexpowers:
   119                           	opt stack 0
   120  001024                     _timeset:
   121                           	opt stack 0
   122  001024  50                 	db	80
   123  001025  35                 	db	53
   124  001026  21                 	db	33
   125  001027  08                 	db	8
   126  001028  05                 	db	5
   127  001029  02                 	db	2
   128  00102A  17                 	db	23
   129  00102B                     __end_of_timeset:
   130                           	opt stack 0
   131  0000                     _ADCON0	set	4034
   132  0000                     _ADCON1	set	4033
   133  0000                     _INTCONbits	set	4082
   134  0000                     _LATA	set	3977
   135  0000                     _LATB	set	3978
   136  0000                     _LATC	set	3979
   137  0000                     _LATD	set	3980
   138  0000                     _LATDbits	set	3980
   139  0000                     _LATE	set	3981
   140  0000                     _PORTB	set	3969
   141  0000                     _SSPADD	set	4040
   142  0000                     _SSPBUF	set	4041
   143  0000                     _SSPCON1	set	4038
   144  0000                     _SSPCON2	set	4037
   145  0000                     _SSPSTAT	set	4039
   146  0000                     _TRISA	set	3986
   147  0000                     _TRISB	set	3987
   148  0000                     _TRISC	set	3988
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISE	set	3990
   151  0000                     _ACKDT	set	32301
   152  0000                     _ACKEN	set	32300
   153  0000                     _INT1IE	set	32643
   154  0000                     _INT1IF	set	32640
   155  0000                     _PEN	set	32298
   156  0000                     _RCEN	set	32299
   157  0000                     _RSEN	set	32297
   158  0000                     _SEN	set	32296
   159  0000                     _TRISC3	set	31907
   160  0000                     _TRISC4	set	31908
   161  0000                     _nRBPU	set	32655
   162  00102B                     STR_4:
   163  00102B  25                 	db	37
   164  00102C  30                 	db	48	;'0'
   165  00102D  32                 	db	50	;'2'
   166  00102E  78                 	db	120	;'x'
   167  00102F  2F                 	db	47
   168  001030  25                 	db	37
   169  001031  30                 	db	48	;'0'
   170  001032  32                 	db	50	;'2'
   171  001033  78                 	db	120	;'x'
   172  001034  2F                 	db	47
   173  001035  25                 	db	37
   174  001036  30                 	db	48	;'0'
   175  001037  32                 	db	50	;'2'
   176  001038  78                 	db	120	;'x'
   177  001039  20                 	db	32
   178  00103A  20                 	db	32
   179  00103B  20                 	db	32
   180  00103C  20                 	db	32
   181  00103D  20                 	db	32
   182  00103E  20                 	db	32
   183  00103F  20                 	db	32
   184  001040  20                 	db	32
   185  001041  00                 	db	0
   186  001042                     STR_5:
   187  001042  25                 	db	37
   188  001043  30                 	db	48	;'0'
   189  001044  32                 	db	50	;'2'
   190  001045  78                 	db	120	;'x'
   191  001046  3A                 	db	58	;':'
   192  001047  25                 	db	37
   193  001048  30                 	db	48	;'0'
   194  001049  32                 	db	50	;'2'
   195  00104A  78                 	db	120	;'x'
   196  00104B  3A                 	db	58	;':'
   197  00104C  25                 	db	37
   198  00104D  30                 	db	48	;'0'
   199  00104E  32                 	db	50	;'2'
   200  00104F  78                 	db	120	;'x'
   201  001050  20                 	db	32
   202  001051  20                 	db	32
   203  001052  20                 	db	32
   204  001053  20                 	db	32
   205  001054  20                 	db	32
   206  001055  20                 	db	32
   207  001056  20                 	db	32
   208  001057  20                 	db	32
   209  001058  00                 	db	0
   210  001059                     STR_6:
   211  001059  30                 	db	48	;'0'
   212  00105A  31                 	db	49	;'1'
   213  00105B  32                 	db	50	;'2'
   214  00105C  33                 	db	51	;'3'
   215  00105D  34                 	db	52	;'4'
   216  00105E  35                 	db	53	;'5'
   217  00105F  36                 	db	54	;'6'
   218  001060  37                 	db	55	;'7'
   219  001061  38                 	db	56	;'8'
   220  001062  39                 	db	57	;'9'
   221  001063  61                 	db	97	;'a'
   222  001064  62                 	db	98	;'b'
   223  001065  63                 	db	99	;'c'
   224  001066  64                 	db	100	;'d'
   225  001067  65                 	db	101	;'e'
   226  001068  66                 	db	102	;'f'
   227  001069  00                 	db	0
   228  00106A                     STR_1:
   229  00106A  62                 	db	98	;'b'
   230  00106B  61                 	db	97	;'a'
   231  00106C  64                 	db	100	;'d'
   232  00106D  20                 	db	32
   233  00106E  69                 	db	105	;'i'
   234  00106F  6E                 	db	110	;'n'
   235  001070  74                 	db	116	;'t'
   236  001071  65                 	db	101	;'e'
   237  001072  72                 	db	114	;'r'
   238  001073  72                 	db	114	;'r'
   239  001074  75                 	db	117	;'u'
   240  001075  70                 	db	112	;'p'
   241  001076  74                 	db	116	;'t'
   242  001077  00                 	db	0
   243  001078                     STR_3:
   244  001078  50                 	db	80	;'P'
   245  001079  4F                 	db	79	;'O'
   246  00107A  52                 	db	82	;'R'
   247  00107B  54                 	db	84	;'T'
   248  00107C  42                 	db	66	;'B'
   249  00107D  3A                 	db	58	;':'
   250  00107E  20                 	db	32
   251  00107F  25                 	db	37
   252  001080  64                 	db	100	;'d'
   253  001081  00                 	db	0
   254  001082                     STR_2:
   255  001082  73                 	db	115	;'s'
   256  001083  74                 	db	116	;'t'
   257  001084  61                 	db	97	;'a'
   258  001085  6E                 	db	110	;'n'
   259  001086  64                 	db	100	;'d'
   260  001087  62                 	db	98	;'b'
   261  001088  79                 	db	121	;'y'
   262  001089  00                 	db	0
   263                           
   264                           ; #config settings
   265  00108A  00                 	db	0	; dummy byte at the end
   266  0000                     
   267                           	psect	cinit
   268  001DF4                     __pcinit:
   269                           	opt stack 0
   270  001DF4                     start_initialization:
   271                           	opt stack 0
   272  001DF4                     __initialization:
   273                           	opt stack 0
   274  001DF4                     end_of_initialization:
   275                           	opt stack 0
   276  001DF4                     __end_of__initialization:
   277                           	opt stack 0
   278  001DF4  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   279  001DF6  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   280  001DF8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   281  001DFA  6EF8               	movwf	tblptru,c
   282  001DFC  0100               	movlb	0
   283  001DFE  EF8B  F00D         	goto	_main	;jump to C main() function
   284                           tblptru	equ	0xFF8
   285                           
   286                           	psect	cstackBANK0
   287  000080                     __pcstackBANK0:
   288                           	opt stack 0
   289  000080                     ?___lldiv:
   290                           	opt stack 0
   291  000080                     ___lwdiv@quotient:
   292                           	opt stack 0
   293  000080                     ___lldiv@dividend:
   294                           	opt stack 0
   295                           
   296                           ; 4 bytes @ 0x0
   297  000080                     	ds	2
   298  000082                     ___lwdiv@counter:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x2
   302  000082                     	ds	1
   303  000083                     ?___lwmod:
   304                           	opt stack 0
   305  000083                     ___lwmod@dividend:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x3
   309  000083                     	ds	1
   310  000084                     ___lldiv@divisor:
   311                           	opt stack 0
   312                           
   313                           ; 4 bytes @ 0x4
   314  000084                     	ds	1
   315  000085                     ___lwmod@divisor:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x5
   319  000085                     	ds	2
   320  000087                     ?_printf:
   321                           	opt stack 0
   322  000087                     printf@f:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x7
   326  000087                     	ds	1
   327  000088                     I2C_Master_Init@c:
   328                           	opt stack 0
   329                           
   330                           ; 4 bytes @ 0x8
   331  000088                     	ds	3
   332  00008B                     ??_printf:
   333                           
   334                           ; 1 bytes @ 0xB
   335  00008B                     	ds	1
   336  00008C                     ??_I2C_Master_Init:
   337                           
   338                           ; 1 bytes @ 0xC
   339  00008C                     	ds	3
   340  00008F                     printf@idx:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0xF
   344  00008F                     	ds	1
   345  000090                     printf@ap:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x10
   349  000090                     	ds	2
   350  000092                     printf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x12
   354  000092                     	ds	1
   355  000093                     printf@val:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x13
   359  000093                     	ds	2
   360  000095                     printf@flag:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x15
   364  000095                     	ds	1
   365  000096                     printf@width:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x16
   369  000096                     	ds	2
   370  000098                     printf@c:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x18
   374  000098                     	ds	1
   375  000099                     ??_standby:
   376                           
   377                           ; 1 bytes @ 0x19
   378  000099                     	ds	2
   379                           tblptru	equ	0xFF8
   380                           
   381                           	psect	cstackCOMRAM
   382  000001                     __pcstackCOMRAM:
   383                           	opt stack 0
   384  000001                     ??_I2C_Master_Wait:
   385  000001                     ??i2_isdigit:
   386  000001                     ?i2___wmul:
   387                           	opt stack 0
   388  000001                     ?i2___lwdiv:
   389                           	opt stack 0
   390  000001                     i2lcdNibble@temp:
   391                           	opt stack 0
   392  000001                     i2___wmul@multiplier:
   393                           	opt stack 0
   394  000001                     i2___lwdiv@dividend:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x0
   398  000001                     	ds	1
   399  000002                     I2C_Master_Read@a:
   400                           	opt stack 0
   401  000002                     i2lcdNibble@data:
   402                           	opt stack 0
   403  000002                     i2_isdigit$491:
   404                           	opt stack 0
   405  000002                     I2C_Master_Write@d:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x1
   409  000002                     	ds	1
   410  000003                     I2C_Master_Read@temp:
   411                           	opt stack 0
   412  000003                     i2lcdInst@data:
   413                           	opt stack 0
   414  000003                     i2putch@data:
   415                           	opt stack 0
   416  000003                     i2isdigit@c:
   417                           	opt stack 0
   418  000003                     i2___wmul@multiplicand:
   419                           	opt stack 0
   420  000003                     i2___lwdiv@divisor:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  000003                     	ds	1
   425  000004                     
   426                           ; 1 bytes @ 0x3
   427  000004                     	ds	1
   428  000005                     i2___wmul@product:
   429                           	opt stack 0
   430  000005                     i2___lwdiv@quotient:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x4
   434  000005                     	ds	2
   435  000007                     i2___lwdiv@counter:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     ?i2___lwmod:
   441                           	opt stack 0
   442  000008                     i2___lwmod@dividend:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x7
   446  000008                     	ds	2
   447  00000A                     i2___lwmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x9
   451  00000A                     	ds	2
   452  00000C                     i2___lwmod@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xB
   456  00000C                     	ds	1
   457  00000D                     ?i2_printf:
   458                           	opt stack 0
   459  00000D                     i2printf@f:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xC
   463  00000D                     	ds	8
   464  000015                     ??i2_printf:
   465                           
   466                           ; 1 bytes @ 0x14
   467  000015                     	ds	4
   468  000019                     i2printf@idx:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x18
   472  000019                     	ds	1
   473  00001A                     i2printf@ap:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x19
   477  00001A                     	ds	2
   478  00001C                     i2printf@prec:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x1B
   482  00001C                     	ds	1
   483  00001D                     i2printf@val:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x1C
   487  00001D                     	ds	2
   488  00001F                     i2printf@flag:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x1E
   492  00001F                     	ds	1
   493  000020                     i2printf@width:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x1F
   497  000020                     	ds	2
   498  000022                     i2printf@c:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x21
   502  000022                     	ds	1
   503  000023                     ??_disp_time:
   504  000023                     ??i2_standby:
   505                           
   506                           ; 1 bytes @ 0x22
   507  000023                     	ds	1
   508  000024                     disp_time@time:
   509                           	opt stack 0
   510                           
   511                           ; 7 bytes @ 0x23
   512  000024                     	ds	7
   513  00002B                     disp_time@i_241:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x2A
   517  00002B                     	ds	1
   518  00002C                     disp_time@i:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x2B
   522  00002C                     	ds	1
   523  00002D                     ??_isr:
   524                           
   525                           ; 1 bytes @ 0x2C
   526  00002D                     	ds	15
   527  00003C                     isr@i:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x3B
   531  00003C                     	ds	1
   532  00003D                     ??_isdigit:
   533  00003D                     ?___wmul:
   534                           	opt stack 0
   535  00003D                     ?___lwdiv:
   536                           	opt stack 0
   537  00003D                     lcdNibble@temp:
   538                           	opt stack 0
   539  00003D                     ___wmul@multiplier:
   540                           	opt stack 0
   541  00003D                     ___lwdiv@dividend:
   542                           	opt stack 0
   543  00003D                     ___lldiv@quotient:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0x3C
   547  00003D                     	ds	1
   548  00003E                     lcdNibble@data:
   549                           	opt stack 0
   550  00003E                     _isdigit$491:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x3D
   554  00003E                     	ds	1
   555  00003F                     lcdInst@data:
   556                           	opt stack 0
   557  00003F                     putch@data:
   558                           	opt stack 0
   559  00003F                     isdigit@c:
   560                           	opt stack 0
   561  00003F                     ___wmul@multiplicand:
   562                           	opt stack 0
   563  00003F                     ___lwdiv@divisor:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x3E
   567  00003F                     	ds	1
   568  000040                     ??_initLCD:
   569                           
   570                           ; 1 bytes @ 0x3F
   571  000040                     	ds	1
   572  000041                     ___lldiv@counter:
   573                           	opt stack 0
   574  000041                     ___lwmod@counter:
   575                           	opt stack 0
   576  000041                     ___wmul@product:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x40
   580  000041                     	ds	2
   581  000043                     tblptru	equ	0xFF8
   582                           
   583                           ; 1 bytes @ 0x42
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 27 in file "main.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels required when called:    9
   609 ;; This function calls:
   610 ;;		_I2C_Master_Init
   611 ;;		_initLCD
   612 ;;		_standby
   613 ;; This function is called by:
   614 ;;		Startup code after reset
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           	psect	text0
   619  001B16                     __ptext0:
   620                           	opt stack 0
   621  001B16                     _main:
   622                           	opt stack 22
   623                           
   624                           ;main.c: 31: TRISA = 0xFF;
   625                           
   626                           ;incstack = 0
   627  001B16  6892               	setf	3986,c	;volatile
   628                           
   629                           ;main.c: 32: TRISB = 0xFF;
   630  001B18  6893               	setf	3987,c	;volatile
   631                           
   632                           ;main.c: 33: TRISC = 0x00;
   633  001B1A  0E00               	movlw	0
   634  001B1C  6E94               	movwf	3988,c	;volatile
   635                           
   636                           ;main.c: 34: TRISD = 0x00;
   637  001B1E  0E00               	movlw	0
   638  001B20  6E95               	movwf	3989,c	;volatile
   639                           
   640                           ;main.c: 35: TRISE = 0x00;
   641  001B22  0E00               	movlw	0
   642  001B24  6E96               	movwf	3990,c	;volatile
   643                           
   644                           ;main.c: 37: LATA = 0x00;
   645  001B26  0E00               	movlw	0
   646  001B28  6E89               	movwf	3977,c	;volatile
   647                           
   648                           ;main.c: 38: LATB = 0x00;
   649  001B2A  0E00               	movlw	0
   650  001B2C  6E8A               	movwf	3978,c	;volatile
   651                           
   652                           ;main.c: 39: LATC = 0x00;
   653  001B2E  0E00               	movlw	0
   654  001B30  6E8B               	movwf	3979,c	;volatile
   655                           
   656                           ;main.c: 40: LATD = 0x00;
   657  001B32  0E00               	movlw	0
   658  001B34  6E8C               	movwf	3980,c	;volatile
   659                           
   660                           ;main.c: 41: LATE = 0x00;
   661  001B36  0E00               	movlw	0
   662  001B38  6E8D               	movwf	3981,c	;volatile
   663                           
   664                           ;main.c: 43: ADCON0 = 0x00;
   665  001B3A  0E00               	movlw	0
   666  001B3C  6EC2               	movwf	4034,c	;volatile
   667                           
   668                           ;main.c: 44: ADCON1 = 0xFF;
   669  001B3E  68C1               	setf	4033,c	;volatile
   670                           
   671                           ;main.c: 46: INT1IE = 1;
   672  001B40  86F0               	bsf	intcon3,3,c	;volatile
   673                           
   674                           ;main.c: 48: nRBPU = 0;
   675  001B42  9EF1               	bcf	intcon2,7,c	;volatile
   676                           
   677                           ;main.c: 50: initLCD();
   678  001B44  EC53  F00E         	call	_initLCD	;wreg free
   679                           
   680                           ;main.c: 51: I2C_Master_Init(10000);
   681  001B48  0E10               	movlw	16
   682  001B4A  0100               	movlb	0	; () banked
   683  001B4C  6F88               	movwf	I2C_Master_Init@c& (0+255),b
   684  001B4E  0E27               	movlw	39
   685  001B50  6F89               	movwf	(I2C_Master_Init@c+1)& (0+255),b
   686  001B52  0E00               	movlw	0
   687  001B54  6F8A               	movwf	(I2C_Master_Init@c+2)& (0+255),b
   688  001B56  0E00               	movlw	0
   689  001B58  6F8B               	movwf	(I2C_Master_Init@c+3)& (0+255),b
   690  001B5A  ECFE  F00C         	call	_I2C_Master_Init	;wreg free
   691                           
   692                           ;main.c: 55: (INTCONbits.GIE = 1);
   693  001B5E  8EF2               	bsf	intcon,7,c	;volatile
   694                           
   695                           ;main.c: 58: standby();
   696  001B60  ECCB  F00C         	call	_standby	;wreg free
   697                           
   698                           ;main.c: 60: return;
   699  001B64  EF07  F000         	goto	start
   700  001B68                     __end_of_main:
   701                           	opt stack 0
   702                           tblptru	equ	0xFF8
   703                           intcon	equ	0xFF2
   704                           intcon2	equ	0xFF1
   705                           intcon3	equ	0xFF0
   706                           
   707 ;; *************** function _standby *****************
   708 ;; Defined at:
   709 ;;		line 88 in file "main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;		None
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;Total ram usage:        2 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    8
   730 ;; This function calls:
   731 ;;		_lcdInst
   732 ;;		_printf
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text1
   739  001996                     __ptext1:
   740                           	opt stack 0
   741  001996                     _standby:
   742                           	opt stack 22
   743  001996                     
   744                           ;main.c: 90: lcdInst(0b10000000);
   745  001996  0E80               	movlw	128
   746  001998  EC07  F00F         	call	_lcdInst
   747                           
   748                           ;main.c: 91: printf("standby");
   749  00199C  0E82               	movlw	low STR_2
   750  00199E  0100               	movlb	0	; () banked
   751  0019A0  6F87               	movwf	printf@f& (0+255),b
   752  0019A2  0E10               	movlw	high STR_2
   753  0019A4  0100               	movlb	0	; () banked
   754  0019A6  6F88               	movwf	(printf@f+1)& (0+255),b
   755  0019A8  EC46  F008         	call	_printf	;wreg free
   756                           
   757                           ;main.c: 92: lcdInst(0b11000000);
   758  0019AC  0EC0               	movlw	192
   759  0019AE  EC07  F00F         	call	_lcdInst
   760                           
   761                           ;main.c: 93: printf("PORTB: %d", (PORTB & 0xF0) >> 4);
   762  0019B2  0E78               	movlw	low STR_3
   763  0019B4  0100               	movlb	0	; () banked
   764  0019B6  6F87               	movwf	printf@f& (0+255),b
   765  0019B8  0E10               	movlw	high STR_3
   766  0019BA  0100               	movlb	0	; () banked
   767  0019BC  6F88               	movwf	(printf@f+1)& (0+255),b
   768  0019BE  CF81 F099          	movff	3969,??_standby	;volatile
   769  0019C2  0100               	movlb	0	; () banked
   770  0019C4  3B99               	swapf	??_standby& (0+255),f,b
   771  0019C6  0E0F               	movlw	15
   772  0019C8  1799               	andwf	??_standby& (0+255),f,b
   773  0019CA  0E0F               	movlw	15
   774  0019CC  0100               	movlb	0	; () banked
   775  0019CE  1799               	andwf	??_standby& (0+255),f,b
   776  0019D0  0100               	movlb	0	; () banked
   777  0019D2  5199               	movf	??_standby& (0+255),w,b
   778  0019D4  0100               	movlb	0	; () banked
   779  0019D6  6F89               	movwf	(?_printf+2)& (0+255),b
   780  0019D8  6B8A               	clrf	(?_printf+3)& (0+255),b
   781  0019DA  EC46  F008         	call	_printf	;wreg free
   782                           
   783                           ;main.c: 94: _delay((unsigned long)((300)*(10000000/4000.0)));
   784  0019DE  0E04               	movlw	4
   785  0019E0  0100               	movlb	0	; () banked
   786  0019E2  6F9A               	movwf	(??_standby+1)& (0+255),b
   787  0019E4  0ECF               	movlw	207
   788  0019E6  0100               	movlb	0	; () banked
   789  0019E8  6F99               	movwf	??_standby& (0+255),b
   790  0019EA  0E01               	movlw	1
   791  0019EC                     u1587:
   792  0019EC  2EE8               	decfsz	wreg,f,c
   793  0019EE  D7FE               	bra	u1587
   794  0019F0  2F99               	decfsz	??_standby& (0+255),f,b
   795  0019F2  D7FC               	bra	u1587
   796  0019F4  2F9A               	decfsz	(??_standby+1)& (0+255),f,b
   797  0019F6  D7FA               	bra	u1587
   798  0019F8  D000               	nop2	
   799  0019FA  D7CD               	goto	l1965
   800  0019FC                     __end_of_standby:
   801                           	opt stack 0
   802                           tblptru	equ	0xFF8
   803                           intcon	equ	0xFF2
   804                           intcon2	equ	0xFF1
   805                           intcon3	equ	0xFF0
   806                           wreg	equ	0xFE8
   807                           
   808 ;; *************** function _printf *****************
   809 ;; Defined at:
   810 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  f               2    7[BANK0 ] PTR const unsigned char 
   813 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
   814 ;;		 -> STR_1(14), 
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  idx             1   15[BANK0 ] unsigned char 
   817 ;;  tmpval          4    0        struct .
   818 ;;  cp              3    0        PTR const unsigned char 
   819 ;;  width           2   22[BANK0 ] int 
   820 ;;  val             2   19[BANK0 ] unsigned int 
   821 ;;  ap              2   16[BANK0 ] PTR void [1]
   822 ;;		 -> ?i2_printf(2), ?_printf(2), 
   823 ;;  len             2    0        unsigned int 
   824 ;;  c               1   24[BANK0 ] char 
   825 ;;  flag            1   21[BANK0 ] unsigned char 
   826 ;;  prec            1   18[BANK0 ] char 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  2    7[BANK0 ] int 
   829 ;; Registers used:
   830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   836 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;Total ram usage:       18 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    7
   843 ;; This function calls:
   844 ;;		___lwdiv
   845 ;;		___lwmod
   846 ;;		___wmul
   847 ;;		_isdigit
   848 ;;		_putch
   849 ;; This function is called by:
   850 ;;		_standby
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           	psect	text2
   855  00108C                     __ptext2:
   856                           	opt stack 0
   857  00108C                     _printf:
   858                           	opt stack 22
   859                           
   860                           ;doprnt.c: 466: va_list ap;
   861                           ;doprnt.c: 499: signed char c;
   862                           ;doprnt.c: 501: int width;
   863                           ;doprnt.c: 506: signed char prec;
   864                           ;doprnt.c: 508: unsigned char flag;
   865                           ;doprnt.c: 523: union {
   866                           ;doprnt.c: 524: unsigned long vd;
   867                           ;doprnt.c: 525: double integ;
   868                           ;doprnt.c: 526: } tmpval;
   869                           ;doprnt.c: 528: unsigned int val;
   870                           ;doprnt.c: 529: unsigned len;
   871                           ;doprnt.c: 530: const char * cp;
   872                           ;doprnt.c: 533: *ap = __va_start();
   873                           
   874                           ;incstack = 0
   875  00108C  0E89               	movlw	low (?_printf+2)
   876  00108E  0100               	movlb	0	; () banked
   877  001090  6F90               	movwf	printf@ap& (0+255),b
   878  001092  0E00               	movlw	high (?_printf+2)
   879  001094  0100               	movlb	0	; () banked
   880  001096  6F91               	movwf	(printf@ap+1)& (0+255),b
   881                           
   882                           ;doprnt.c: 536: while(c = *f++) {
   883  001098  D1C2               	goto	l1781
   884  00109A                     l1655:
   885                           
   886                           ; BSR set to: 0
   887                           ;doprnt.c: 538: if(c != '%')
   888  00109A  0E25               	movlw	37
   889  00109C  0100               	movlb	0	; () banked
   890  00109E  1998               	xorwf	printf@c& (0+255),w,b
   891  0010A0  B4D8               	btfsc	status,2,c
   892  0010A2  D005               	goto	l1659
   893                           
   894                           ; BSR set to: 0
   895                           ;doprnt.c: 540: {
   896                           ;doprnt.c: 541: (putch(c) );
   897  0010A4  0100               	movlb	0	; () banked
   898  0010A6  5198               	movf	printf@c& (0+255),w,b
   899  0010A8  EC01  F00F         	call	_putch
   900                           
   901                           ;doprnt.c: 542: continue;
   902  0010AC  D1B8               	goto	l1781
   903  0010AE                     l1659:
   904                           
   905                           ;doprnt.c: 543: }
   906                           ;doprnt.c: 546: width = 0;
   907  0010AE  0E00               	movlw	0
   908  0010B0  0100               	movlb	0	; () banked
   909  0010B2  6F97               	movwf	(printf@width+1)& (0+255),b
   910  0010B4  0E00               	movlw	0
   911  0010B6  6F96               	movwf	printf@width& (0+255),b
   912                           
   913                           ;doprnt.c: 548: flag = 0;
   914  0010B8  0E00               	movlw	0
   915  0010BA  0100               	movlb	0	; () banked
   916  0010BC  6F95               	movwf	printf@flag& (0+255),b
   917                           
   918                           ; BSR set to: 0
   919                           ;doprnt.c: 551: switch(*f) {
   920                           
   921                           ;doprnt.c: 550: for(;;) {
   922  0010BE  D005               	goto	l1665
   923  0010C0                     l1661:
   924                           
   925                           ;doprnt.c: 580: flag |= 0x04;
   926  0010C0  0100               	movlb	0	; () banked
   927  0010C2  8595               	bsf	printf@flag& (0+255),2,b
   928                           
   929                           ;doprnt.c: 581: f++;
   930  0010C4  0100               	movlb	0	; () banked
   931  0010C6  4B87               	infsnz	printf@f& (0+255),f,b
   932  0010C8  2B88               	incf	(printf@f+1)& (0+255),f,b
   933  0010CA                     l1665:
   934  0010CA  C087  FFF6         	movff	printf@f,tblptrl
   935  0010CE  C088  FFF7         	movff	printf@f+1,tblptrh
   936  0010D2                     	if	0	;tblptru may be non-zero
   937  0010D2                     	endif
   938  0010D2                     	if	0	;tblptru may be non-zero
   939  0010D2                     	endif
   940  0010D2  0008               	tblrd		*
   941  0010D4  50F5               	movf	tablat,w,c
   942                           
   943                           ; Switch size 1, requested type "space"
   944                           ; Number of cases is 1, Range of values is 48 to 48
   945                           ; switch strategies available:
   946                           ; Name         Instructions Cycles
   947                           ; simple_byte            4     3 (average)
   948                           ;	Chosen strategy is simple_byte
   949  0010D6  0A30               	xorlw	48	; case 48
   950  0010D8  B4D8               	btfsc	status,2,c
   951  0010DA  D7F2               	goto	l1661
   952                           
   953                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   954                           
   955                           ;doprnt.c: 586: }
   956                           
   957                           ;doprnt.c: 585: break;
   958  0010DC  C087  FFF6         	movff	printf@f,tblptrl
   959  0010E0  C088  FFF7         	movff	printf@f+1,tblptrh
   960  0010E4                     	if	0	;tblptru may be non-zero
   961  0010E4                     	endif
   962  0010E4                     	if	0	;tblptru may be non-zero
   963  0010E4                     	endif
   964  0010E4  0008               	tblrd		*
   965  0010E6  50F5               	movf	tablat,w,c
   966  0010E8  ECD3  F00E         	call	_isdigit
   967  0010EC  A0D8               	btfss	status,0,c
   968  0010EE  D043               	goto	l1683
   969                           
   970                           ;doprnt.c: 598: width = 0;
   971  0010F0  0E00               	movlw	0
   972  0010F2  0100               	movlb	0	; () banked
   973  0010F4  6F97               	movwf	(printf@width+1)& (0+255),b
   974  0010F6  0E00               	movlw	0
   975  0010F8  6F96               	movwf	printf@width& (0+255),b
   976  0010FA                     l1671:
   977                           
   978                           ;doprnt.c: 600: width *= 10;
   979  0010FA  C096  F03D         	movff	printf@width,___wmul@multiplier
   980  0010FE  C097  F03E         	movff	printf@width+1,___wmul@multiplier+1
   981  001102  0E00               	movlw	0
   982  001104  6E40               	movwf	___wmul@multiplicand+1,c
   983  001106  0E0A               	movlw	10
   984  001108  6E3F               	movwf	___wmul@multiplicand,c
   985  00110A  EC9A  F00E         	call	___wmul	;wreg free
   986  00110E  C03D  F096         	movff	?___wmul,printf@width
   987  001112  C03E  F097         	movff	?___wmul+1,printf@width+1
   988                           
   989                           ;doprnt.c: 601: width += *f++ - '0';
   990  001116  0ED0               	movlw	208
   991  001118  0100               	movlb	0	; () banked
   992  00111A  6F8B               	movwf	??_printf& (0+255),b
   993  00111C  0EFF               	movlw	255
   994  00111E  0100               	movlb	0	; () banked
   995  001120  6F8C               	movwf	(??_printf+1)& (0+255),b
   996  001122  C087  FFF6         	movff	printf@f,tblptrl
   997  001126  C088  FFF7         	movff	printf@f+1,tblptrh
   998  00112A                     	if	0	;tblptru may be non-zero
   999  00112A                     	endif
  1000  00112A                     	if	0	;tblptru may be non-zero
  1001  00112A                     	endif
  1002  00112A  0008               	tblrd		*
  1003  00112C  50F5               	movf	tablat,w,c
  1004  00112E  0100               	movlb	0	; () banked
  1005  001130  6F8D               	movwf	(??_printf+2)& (0+255),b
  1006  001132  6B8E               	clrf	(??_printf+3)& (0+255),b
  1007  001134  0100               	movlb	0	; () banked
  1008  001136  518B               	movf	??_printf& (0+255),w,b
  1009  001138  0100               	movlb	0	; () banked
  1010  00113A  278D               	addwf	(??_printf+2)& (0+255),f,b
  1011  00113C  0100               	movlb	0	; () banked
  1012  00113E  518C               	movf	(??_printf+1)& (0+255),w,b
  1013  001140  0100               	movlb	0	; () banked
  1014  001142  238E               	addwfc	(??_printf+3)& (0+255),f,b
  1015  001144  0100               	movlb	0	; () banked
  1016  001146  518D               	movf	(??_printf+2)& (0+255),w,b
  1017  001148  0100               	movlb	0	; () banked
  1018  00114A  2796               	addwf	printf@width& (0+255),f,b
  1019  00114C  0100               	movlb	0	; () banked
  1020  00114E  518E               	movf	(??_printf+3)& (0+255),w,b
  1021  001150  0100               	movlb	0	; () banked
  1022  001152  2397               	addwfc	(printf@width+1)& (0+255),f,b
  1023                           
  1024                           ; BSR set to: 0
  1025  001154  0100               	movlb	0	; () banked
  1026  001156  4B87               	infsnz	printf@f& (0+255),f,b
  1027  001158  2B88               	incf	(printf@f+1)& (0+255),f,b
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1031  00115A  C087  FFF6         	movff	printf@f,tblptrl
  1032  00115E  C088  FFF7         	movff	printf@f+1,tblptrh
  1033  001162                     	if	0	;tblptru may be non-zero
  1034  001162                     	endif
  1035  001162                     	if	0	;tblptru may be non-zero
  1036  001162                     	endif
  1037  001162  0008               	tblrd		*
  1038  001164  50F5               	movf	tablat,w,c
  1039  001166  ECD3  F00E         	call	_isdigit
  1040  00116A  A0D8               	btfss	status,0,c
  1041  00116C  D004               	goto	l1683
  1042  00116E  D7C5               	goto	l1671
  1043  001170                     l1679:
  1044                           
  1045                           ;doprnt.c: 721: flag |= 0x80;
  1046  001170  0100               	movlb	0	; () banked
  1047  001172  8F95               	bsf	printf@flag& (0+255),7,b
  1048                           
  1049                           ;doprnt.c: 723: break;
  1050  001174  D019               	goto	l213
  1051  001176                     l1683:
  1052  001176  C087  FFF6         	movff	printf@f,tblptrl
  1053  00117A  C088  FFF7         	movff	printf@f+1,tblptrh
  1054  00117E  0100               	movlb	0	; () banked
  1055  001180  4B87               	infsnz	printf@f& (0+255),f,b
  1056  001182  2B88               	incf	(printf@f+1)& (0+255),f,b
  1057  001184                     	if	0	;tblptru may be non-zero
  1058  001184                     	endif
  1059  001184                     	if	0	;tblptru may be non-zero
  1060  001184                     	endif
  1061  001184  0008               	tblrd		*
  1062  001186  CFF5 F098          	movff	tablat,printf@c
  1063  00118A  0100               	movlb	0	; () banked
  1064  00118C  5198               	movf	printf@c& (0+255),w,b
  1065                           
  1066                           ; Switch size 1, requested type "space"
  1067                           ; Number of cases is 4, Range of values is 0 to 120
  1068                           ; switch strategies available:
  1069                           ; Name         Instructions Cycles
  1070                           ; simple_byte           13     7 (average)
  1071                           ;	Chosen strategy is simple_byte
  1072  00118E  0A00               	xorlw	0	; case 0
  1073  001190  B4D8               	btfsc	status,2,c
  1074  001192  0012               	return	
  1075  001194  0A64               	xorlw	100	; case 100
  1076  001196  B4D8               	btfsc	status,2,c
  1077  001198  D007               	goto	l213
  1078  00119A  0A0D               	xorlw	13	; case 105
  1079  00119C  B4D8               	btfsc	status,2,c
  1080  00119E  D004               	goto	l213
  1081  0011A0  0A11               	xorlw	17	; case 120
  1082  0011A2  B4D8               	btfsc	status,2,c
  1083  0011A4  D7E5               	goto	l1679
  1084  0011A6  D13B               	goto	l1781
  1085  0011A8                     l213:
  1086                           
  1087                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1088  0011A8  0100               	movlb	0	; () banked
  1089  0011AA  BF95               	btfsc	printf@flag& (0+255),7,b
  1090  0011AC  D019               	goto	l1695
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;doprnt.c: 1253: {
  1094                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1095  0011AE  C090  FFD9         	movff	printf@ap,fsr2l
  1096  0011B2  C091  FFDA         	movff	printf@ap+1,fsr2h
  1097  0011B6  CFDE F093          	movff	postinc2,printf@val
  1098  0011BA  CFDD F094          	movff	postdec2,printf@val+1
  1099                           
  1100                           ; BSR set to: 0
  1101  0011BE  0E02               	movlw	2
  1102  0011C0  0100               	movlb	0	; () banked
  1103  0011C2  2790               	addwf	printf@ap& (0+255),f,b
  1104  0011C4  0E00               	movlw	0
  1105  0011C6  2391               	addwfc	(printf@ap+1)& (0+255),f,b
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;doprnt.c: 1261: if((int)val < 0) {
  1109  0011C8  0100               	movlb	0	; () banked
  1110  0011CA  AF94               	btfss	(printf@val+1)& (0+255),7,b
  1111  0011CC  D053               	goto	l1729
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;doprnt.c: 1262: flag |= 0x03;
  1115  0011CE  0E03               	movlw	3
  1116  0011D0  0100               	movlb	0	; () banked
  1117  0011D2  1395               	iorwf	printf@flag& (0+255),f,b
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;doprnt.c: 1263: val = -val;
  1121  0011D4  0100               	movlb	0	; () banked
  1122  0011D6  6D93               	negf	printf@val& (0+255),b
  1123  0011D8  1F94               	comf	(printf@val+1)& (0+255),f,b
  1124  0011DA  B0D8               	btfsc	status,0,c
  1125  0011DC  2B94               	incf	(printf@val+1)& (0+255),f,b
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;doprnt.c: 1264: }
  1129                           ;doprnt.c: 1266: }
  1130  0011DE  D04A               	goto	l1729
  1131  0011E0                     l1695:
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;doprnt.c: 1268: else
  1135                           ;doprnt.c: 1273: {
  1136                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1137  0011E0  C090  FFD9         	movff	printf@ap,fsr2l
  1138  0011E4  C091  FFDA         	movff	printf@ap+1,fsr2h
  1139  0011E8  CFDE F093          	movff	postinc2,printf@val
  1140  0011EC  CFDD F094          	movff	postdec2,printf@val+1
  1141                           
  1142                           ; BSR set to: 0
  1143  0011F0  0E02               	movlw	2
  1144  0011F2  0100               	movlb	0	; () banked
  1145  0011F4  2790               	addwf	printf@ap& (0+255),f,b
  1146  0011F6  0E00               	movlw	0
  1147  0011F8  2391               	addwfc	(printf@ap+1)& (0+255),f,b
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;doprnt.c: 1287: }
  1151                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1152  0011FA  D03C               	goto	l1729
  1153  0011FC                     l1699:
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1157  0011FC  0E01               	movlw	1
  1158  0011FE  0100               	movlb	0	; () banked
  1159  001200  6F98               	movwf	printf@c& (0+255),b
  1160  001202                     l1701:
  1161                           
  1162                           ; BSR set to: 0
  1163  001202  0E05               	movlw	5
  1164  001204  0100               	movlb	0	; () banked
  1165  001206  1998               	xorwf	printf@c& (0+255),w,b
  1166  001208  B4D8               	btfsc	status,2,c
  1167  00120A  D03D               	goto	l1731
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;doprnt.c: 1306: if(val < dpowers[c])
  1171                           
  1172                           ; BSR set to: 0
  1173                           
  1174                           ; BSR set to: 0
  1175  00120C  0100               	movlb	0	; () banked
  1176  00120E  5198               	movf	printf@c& (0+255),w,b
  1177  001210  0D02               	mullw	2
  1178  001212  0E12               	movlw	low _dpowers
  1179  001214  24F3               	addwf	prodl,w,c
  1180  001216  6EF6               	movwf	tblptrl,c
  1181  001218  0E10               	movlw	high _dpowers
  1182  00121A  20F4               	addwfc	prodh,w,c
  1183  00121C  6EF7               	movwf	tblptrh,c
  1184  00121E                     	if	0	;There are less than 3 active tblptr bytes
  1185  00121E                     	endif
  1186  00121E  0009               	tblrd		*+
  1187  001220  50F5               	movf	tablat,w,c
  1188  001222  0100               	movlb	0	; () banked
  1189  001224  5D93               	subwf	printf@val& (0+255),w,b
  1190  001226  0009               	tblrd		*+
  1191  001228  50F5               	movf	tablat,w,c
  1192  00122A  0100               	movlb	0	; () banked
  1193  00122C  5994               	subwfb	(printf@val+1)& (0+255),w,b
  1194  00122E  A0D8               	btfss	status,0,c
  1195  001230  D02A               	goto	l1731
  1196                           
  1197                           ; BSR set to: 0
  1198                           
  1199                           ; BSR set to: 0
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 1307: break;
  1203  001232  0100               	movlb	0	; () banked
  1204  001234  2B98               	incf	printf@c& (0+255),f,b
  1205  001236  D7E5               	goto	l1701
  1206  001238                     l1713:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1210  001238  0E01               	movlw	1
  1211  00123A  0100               	movlb	0	; () banked
  1212  00123C  6F98               	movwf	printf@c& (0+255),b
  1213  00123E                     l1715:
  1214                           
  1215                           ; BSR set to: 0
  1216  00123E  0E04               	movlw	4
  1217  001240  0100               	movlb	0	; () banked
  1218  001242  1998               	xorwf	printf@c& (0+255),w,b
  1219  001244  B4D8               	btfsc	status,2,c
  1220  001246  D01F               	goto	l1731
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1224                           
  1225                           ; BSR set to: 0
  1226                           
  1227                           ; BSR set to: 0
  1228  001248  0100               	movlb	0	; () banked
  1229  00124A  5198               	movf	printf@c& (0+255),w,b
  1230  00124C  0D02               	mullw	2
  1231  00124E  0E1C               	movlw	low _hexpowers
  1232  001250  24F3               	addwf	prodl,w,c
  1233  001252  6EF6               	movwf	tblptrl,c
  1234  001254  0E10               	movlw	high _hexpowers
  1235  001256  20F4               	addwfc	prodh,w,c
  1236  001258  6EF7               	movwf	tblptrh,c
  1237  00125A                     	if	0	;There are less than 3 active tblptr bytes
  1238  00125A                     	endif
  1239  00125A  0009               	tblrd		*+
  1240  00125C  50F5               	movf	tablat,w,c
  1241  00125E  0100               	movlb	0	; () banked
  1242  001260  5D93               	subwf	printf@val& (0+255),w,b
  1243  001262  0009               	tblrd		*+
  1244  001264  50F5               	movf	tablat,w,c
  1245  001266  0100               	movlb	0	; () banked
  1246  001268  5994               	subwfb	(printf@val+1)& (0+255),w,b
  1247  00126A  A0D8               	btfss	status,0,c
  1248  00126C  D00C               	goto	l1731
  1249                           
  1250                           ; BSR set to: 0
  1251                           
  1252                           ; BSR set to: 0
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;doprnt.c: 1318: break;
  1256  00126E  0100               	movlb	0	; () banked
  1257  001270  2B98               	incf	printf@c& (0+255),f,b
  1258  001272  D7E5               	goto	l1715
  1259  001274                     l1729:
  1260                           
  1261                           ; BSR set to: 0
  1262  001274  0100               	movlb	0	; () banked
  1263  001276  5195               	movf	printf@flag& (0+255),w,b
  1264  001278  0B80               	andlw	128
  1265                           
  1266                           ; Switch size 1, requested type "space"
  1267                           ; Number of cases is 2, Range of values is 0 to 128
  1268                           ; switch strategies available:
  1269                           ; Name         Instructions Cycles
  1270                           ; simple_byte            7     4 (average)
  1271                           ;	Chosen strategy is simple_byte
  1272  00127A  0A00               	xorlw	0	; case 0
  1273  00127C  B4D8               	btfsc	status,2,c
  1274  00127E  D7BE               	goto	l1699
  1275  001280  0A80               	xorlw	128	; case 128
  1276  001282  B4D8               	btfsc	status,2,c
  1277  001284  D7D9               	goto	l1713
  1278  001286                     l1731:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1282  001286  0100               	movlb	0	; () banked
  1283  001288  5196               	movf	printf@width& (0+255),w,b
  1284  00128A  0100               	movlb	0	; () banked
  1285  00128C  1197               	iorwf	(printf@width+1)& (0+255),w,b
  1286  00128E  B4D8               	btfsc	status,2,c
  1287  001290  D00B               	goto	l1737
  1288                           
  1289                           ; BSR set to: 0
  1290  001292  C095  F08B         	movff	printf@flag,??_printf
  1291  001296  0E03               	movlw	3
  1292  001298  0100               	movlb	0	; () banked
  1293  00129A  178B               	andwf	??_printf& (0+255),f,b
  1294  00129C  B4D8               	btfsc	status,2,c
  1295  00129E  D004               	goto	l1737
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;doprnt.c: 1346: width--;
  1299  0012A0  0100               	movlb	0	; () banked
  1300  0012A2  0796               	decf	printf@width& (0+255),f,b
  1301  0012A4  A0D8               	btfss	status,0,c
  1302  0012A6  0797               	decf	(printf@width+1)& (0+255),f,b
  1303  0012A8                     l1737:
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 1381: if(width > c)
  1307  0012A8  0E80               	movlw	128
  1308  0012AA  0100               	movlb	0	; () banked
  1309  0012AC  BF98               	btfsc	printf@c& (0+255),7,b
  1310  0012AE  0E7F               	movlw	127
  1311  0012B0  0100               	movlb	0	; () banked
  1312  0012B2  6F8B               	movwf	??_printf& (0+255),b
  1313  0012B4  0100               	movlb	0	; () banked
  1314  0012B6  5196               	movf	printf@width& (0+255),w,b
  1315  0012B8  0100               	movlb	0	; () banked
  1316  0012BA  5D98               	subwf	printf@c& (0+255),w,b
  1317  0012BC  0100               	movlb	0	; () banked
  1318  0012BE  5197               	movf	(printf@width+1)& (0+255),w,b
  1319  0012C0  0A80               	xorlw	128
  1320  0012C2  0100               	movlb	0	; () banked
  1321  0012C4  598B               	subwfb	??_printf& (0+255),w,b
  1322  0012C6  B0D8               	btfsc	status,0,c
  1323  0012C8  D00B               	goto	l1741
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;doprnt.c: 1382: width -= c;
  1327  0012CA  0100               	movlb	0	; () banked
  1328  0012CC  5198               	movf	printf@c& (0+255),w,b
  1329  0012CE  0100               	movlb	0	; () banked
  1330  0012D0  5F96               	subwf	printf@width& (0+255),f,b
  1331  0012D2  0E00               	movlw	0
  1332  0012D4  0100               	movlb	0	; () banked
  1333  0012D6  BF98               	btfsc	printf@c& (0+255),7,b
  1334  0012D8  0EFF               	movlw	255
  1335  0012DA  0100               	movlb	0	; () banked
  1336  0012DC  5B97               	subwfb	(printf@width+1)& (0+255),f,b
  1337  0012DE  D005               	goto	l1743
  1338  0012E0                     l1741:
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;doprnt.c: 1383: else
  1342                           ;doprnt.c: 1384: width = 0;
  1343  0012E0  0E00               	movlw	0
  1344  0012E2  0100               	movlb	0	; () banked
  1345  0012E4  6F97               	movwf	(printf@width+1)& (0+255),b
  1346  0012E6  0E00               	movlw	0
  1347  0012E8  6F96               	movwf	printf@width& (0+255),b
  1348  0012EA                     l1743:
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;doprnt.c: 1387: if(flag & 0x04) {
  1352  0012EA  0100               	movlb	0	; () banked
  1353  0012EC  A595               	btfss	printf@flag& (0+255),2,b
  1354  0012EE  D018               	goto	l1755
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;doprnt.c: 1392: if(flag & 0x03)
  1358  0012F0  C095  F08B         	movff	printf@flag,??_printf
  1359  0012F4  0E03               	movlw	3
  1360  0012F6  0100               	movlb	0	; () banked
  1361  0012F8  178B               	andwf	??_printf& (0+255),f,b
  1362  0012FA  B4D8               	btfsc	status,2,c
  1363  0012FC  D003               	goto	l1749
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;doprnt.c: 1393: (putch('-') );
  1367  0012FE  0E2D               	movlw	45
  1368  001300  EC01  F00F         	call	_putch
  1369  001304                     l1749:
  1370                           
  1371                           ;doprnt.c: 1415: if(width)
  1372  001304  0100               	movlb	0	; () banked
  1373  001306  5196               	movf	printf@width& (0+255),w,b
  1374  001308  0100               	movlb	0	; () banked
  1375  00130A  1197               	iorwf	(printf@width+1)& (0+255),w,b
  1376  00130C  B4D8               	btfsc	status,2,c
  1377  00130E  D025               	goto	l1765
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;doprnt.c: 1417: (putch('0') );
  1381                           
  1382                           ; BSR set to: 0
  1383                           
  1384                           ;doprnt.c: 1416: do
  1385  001310  0E30               	movlw	48
  1386  001312  EC01  F00F         	call	_putch
  1387                           
  1388                           ;doprnt.c: 1418: while(--width);
  1389  001316  0100               	movlb	0	; () banked
  1390  001318  0796               	decf	printf@width& (0+255),f,b
  1391  00131A  A0D8               	btfss	status,0,c
  1392  00131C  0797               	decf	(printf@width+1)& (0+255),f,b
  1393  00131E  D7F2               	goto	l1749
  1394  001320                     l1755:
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;doprnt.c: 1422: {
  1398                           ;doprnt.c: 1424: if(width
  1399                           ;doprnt.c: 1428: )
  1400  001320  0100               	movlb	0	; () banked
  1401  001322  5196               	movf	printf@width& (0+255),w,b
  1402  001324  0100               	movlb	0	; () banked
  1403  001326  1197               	iorwf	(printf@width+1)& (0+255),w,b
  1404  001328  B4D8               	btfsc	status,2,c
  1405  00132A  D00D               	goto	l1761
  1406  00132C                     l1757:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;doprnt.c: 1430: (putch(' ') );
  1410  00132C  0E20               	movlw	32
  1411  00132E  EC01  F00F         	call	_putch
  1412                           
  1413                           ;doprnt.c: 1431: while(--width);
  1414  001332  0100               	movlb	0	; () banked
  1415  001334  0796               	decf	printf@width& (0+255),f,b
  1416  001336  A0D8               	btfss	status,0,c
  1417  001338  0797               	decf	(printf@width+1)& (0+255),f,b
  1418  00133A  0100               	movlb	0	; () banked
  1419  00133C  5196               	movf	printf@width& (0+255),w,b
  1420  00133E  0100               	movlb	0	; () banked
  1421  001340  1197               	iorwf	(printf@width+1)& (0+255),w,b
  1422  001342  A4D8               	btfss	status,2,c
  1423  001344  D7F3               	goto	l1757
  1424  001346                     l1761:
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 1438: if(flag & 0x03)
  1428  001346  C095  F08B         	movff	printf@flag,??_printf
  1429  00134A  0E03               	movlw	3
  1430  00134C  0100               	movlb	0	; () banked
  1431  00134E  178B               	andwf	??_printf& (0+255),f,b
  1432  001350  B4D8               	btfsc	status,2,c
  1433  001352  D003               	goto	l1765
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;doprnt.c: 1439: (putch('-') );
  1437  001354  0E2D               	movlw	45
  1438  001356  EC01  F00F         	call	_putch
  1439  00135A                     l1765:
  1440                           
  1441                           ;doprnt.c: 1469: }
  1442                           ;doprnt.c: 1472: prec = c;
  1443  00135A  C098  F092         	movff	printf@c,printf@prec
  1444                           
  1445                           ;doprnt.c: 1474: while(prec--) {
  1446  00135E  D059               	goto	l1779
  1447  001360                     l1767:
  1448                           
  1449                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1450  001360  0100               	movlb	0	; () banked
  1451  001362  5192               	movf	printf@prec& (0+255),w,b
  1452  001364  0D02               	mullw	2
  1453  001366  0E12               	movlw	low _dpowers
  1454  001368  24F3               	addwf	prodl,w,c
  1455  00136A  6EF6               	movwf	tblptrl,c
  1456  00136C  0E10               	movlw	high _dpowers
  1457  00136E  20F4               	addwfc	prodh,w,c
  1458  001370  6EF7               	movwf	tblptrh,c
  1459  001372                     	if	0	;There are less than 3 active tblptr bytes
  1460  001372                     	endif
  1461  001372  0009               	tblrd		*+
  1462  001374  CFF5 F03F          	movff	tablat,___lwdiv@divisor
  1463  001378  000A               	tblrd		*-
  1464  00137A  CFF5 F040          	movff	tablat,___lwdiv@divisor+1
  1465  00137E  C093  F03D         	movff	printf@val,___lwdiv@dividend
  1466  001382  C094  F03E         	movff	printf@val+1,___lwdiv@dividend+1
  1467  001386  EC2E  F00D         	call	___lwdiv	;wreg free
  1468  00138A  C03D  F083         	movff	?___lwdiv,___lwmod@dividend
  1469  00138E  C03E  F084         	movff	?___lwdiv+1,___lwmod@dividend+1
  1470  001392  0E00               	movlw	0
  1471  001394  0100               	movlb	0	; () banked
  1472  001396  6F86               	movwf	(___lwmod@divisor+1)& (0+255),b
  1473  001398  0E0A               	movlw	10
  1474  00139A  6F85               	movwf	___lwmod@divisor& (0+255),b
  1475  00139C  EC5D  F00D         	call	___lwmod	;wreg free
  1476  0013A0  0100               	movlb	0	; () banked
  1477  0013A2  5183               	movf	?___lwmod& (0+255),w,b
  1478  0013A4  0F30               	addlw	48
  1479  0013A6  0100               	movlb	0	; () banked
  1480  0013A8  6F98               	movwf	printf@c& (0+255),b
  1481                           
  1482                           ;doprnt.c: 1491: break;
  1483  0013AA  D02F               	goto	l1777
  1484  0013AC                     l1769:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;doprnt.c: 1499: {
  1488                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1489  0013AC  C093  F03D         	movff	printf@val,___lwdiv@dividend
  1490  0013B0  C094  F03E         	movff	printf@val+1,___lwdiv@dividend+1
  1491  0013B4  0100               	movlb	0	; () banked
  1492  0013B6  5192               	movf	printf@prec& (0+255),w,b
  1493  0013B8  0D02               	mullw	2
  1494  0013BA  0E1C               	movlw	low _hexpowers
  1495  0013BC  24F3               	addwf	prodl,w,c
  1496  0013BE  6EF6               	movwf	tblptrl,c
  1497  0013C0  0E10               	movlw	high _hexpowers
  1498  0013C2  20F4               	addwfc	prodh,w,c
  1499  0013C4  6EF7               	movwf	tblptrh,c
  1500  0013C6                     	if	0	;There are less than 3 active tblptr bytes
  1501  0013C6                     	endif
  1502  0013C6  0009               	tblrd		*+
  1503  0013C8  CFF5 F03F          	movff	tablat,___lwdiv@divisor
  1504  0013CC  000A               	tblrd		*-
  1505  0013CE  CFF5 F040          	movff	tablat,___lwdiv@divisor+1
  1506  0013D2  EC2E  F00D         	call	___lwdiv	;wreg free
  1507  0013D6  503D               	movf	?___lwdiv,w,c
  1508  0013D8  0B0F               	andlw	15
  1509  0013DA  0100               	movlb	0	; () banked
  1510  0013DC  6F8F               	movwf	printf@idx& (0+255),b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1514  0013DE  0100               	movlb	0	; () banked
  1515  0013E0  518F               	movf	printf@idx& (0+255),w,b
  1516  0013E2  0D01               	mullw	1
  1517  0013E4  0E59               	movlw	low STR_6
  1518  0013E6  24F3               	addwf	prodl,w,c
  1519  0013E8  6EF6               	movwf	tblptrl,c
  1520  0013EA  0E10               	movlw	high STR_6
  1521  0013EC  20F4               	addwfc	prodh,w,c
  1522  0013EE  6EF7               	movwf	tblptrh,c
  1523  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  1524  0013F0                     	endif
  1525  0013F0  0008               	tblrd		*
  1526  0013F2  CFF5 F098          	movff	tablat,printf@c
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;doprnt.c: 1523: }
  1530                           
  1531                           ;doprnt.c: 1508: }
  1532                           ;doprnt.c: 1510: break;
  1533  0013F6  D009               	goto	l1777
  1534  0013F8                     l1775:
  1535  0013F8  0100               	movlb	0	; () banked
  1536  0013FA  5195               	movf	printf@flag& (0+255),w,b
  1537  0013FC  0B80               	andlw	128
  1538                           
  1539                           ; Switch size 1, requested type "space"
  1540                           ; Number of cases is 2, Range of values is 0 to 128
  1541                           ; switch strategies available:
  1542                           ; Name         Instructions Cycles
  1543                           ; simple_byte            7     4 (average)
  1544                           ;	Chosen strategy is simple_byte
  1545  0013FE  0A00               	xorlw	0	; case 0
  1546  001400  B4D8               	btfsc	status,2,c
  1547  001402  D7AE               	goto	l1767
  1548  001404  0A80               	xorlw	128	; case 128
  1549  001406  B4D8               	btfsc	status,2,c
  1550  001408  D7D1               	goto	l1769
  1551  00140A                     l1777:
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;doprnt.c: 1524: (putch(c) );
  1555  00140A  0100               	movlb	0	; () banked
  1556  00140C  5198               	movf	printf@c& (0+255),w,b
  1557  00140E  EC01  F00F         	call	_putch
  1558  001412                     l1779:
  1559  001412  0100               	movlb	0	; () banked
  1560  001414  0792               	decf	printf@prec& (0+255),f,b
  1561  001416  0100               	movlb	0	; () banked
  1562  001418  2992               	incf	printf@prec& (0+255),w,b
  1563  00141A  A4D8               	btfss	status,2,c
  1564  00141C  D7ED               	goto	l1775
  1565  00141E                     l1781:
  1566  00141E  C087  FFF6         	movff	printf@f,tblptrl
  1567  001422  C088  FFF7         	movff	printf@f+1,tblptrh
  1568  001426  0100               	movlb	0	; () banked
  1569  001428  4B87               	infsnz	printf@f& (0+255),f,b
  1570  00142A  2B88               	incf	(printf@f+1)& (0+255),f,b
  1571  00142C                     	if	0	;tblptru may be non-zero
  1572  00142C                     	endif
  1573  00142C                     	if	0	;tblptru may be non-zero
  1574  00142C                     	endif
  1575  00142C  0008               	tblrd		*
  1576  00142E  CFF5 F098          	movff	tablat,printf@c
  1577  001432  0100               	movlb	0	; () banked
  1578  001434  5198               	movf	printf@c& (0+255),w,b
  1579  001436  B4D8               	btfsc	status,2,c
  1580  001438  0012               	return	
  1581  00143A  D62F               	goto	l1655
  1582  00143C                     __end_of_printf:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           prodh	equ	0xFF4
  1589                           prodl	equ	0xFF3
  1590                           intcon	equ	0xFF2
  1591                           intcon2	equ	0xFF1
  1592                           intcon3	equ	0xFF0
  1593                           wreg	equ	0xFE8
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _putch *****************
  1601 ;; Defined at:
  1602 ;;		line 31 in file "lcd.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  data            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  data            1   62[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;Total ram usage:        1 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    6
  1623 ;; This function calls:
  1624 ;;		_lcdNibble
  1625 ;; This function is called by:
  1626 ;;		_printf
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text3
  1631  001E02                     __ptext3:
  1632                           	opt stack 0
  1633  001E02                     _putch:
  1634                           	opt stack 22
  1635                           
  1636                           ;incstack = 0
  1637                           ;putch@data stored from wreg
  1638  001E02  6E3F               	movwf	putch@data,c
  1639                           
  1640                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1641  001E04  848C               	bsf	3980,2,c	;volatile
  1642                           
  1643                           ;lcd.c: 33: lcdNibble(data);
  1644  001E06  503F               	movf	putch@data,w,c
  1645  001E08  EC05  F00E         	call	_lcdNibble
  1646  001E0C  0012               	return		;funcret
  1647  001E0E                     __end_of_putch:
  1648                           	opt stack 0
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           prodh	equ	0xFF4
  1654                           prodl	equ	0xFF3
  1655                           intcon	equ	0xFF2
  1656                           intcon2	equ	0xFF1
  1657                           intcon3	equ	0xFF0
  1658                           wreg	equ	0xFE8
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _isdigit *****************
  1666 ;; Defined at:
  1667 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  c               1    wreg     unsigned char 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  c               1   62[COMRAM] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;		None               void
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1685 ;;Total ram usage:        3 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    5
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_printf
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           	psect	text4
  1696  001DA6                     __ptext4:
  1697                           	opt stack 0
  1698  001DA6                     _isdigit:
  1699                           	opt stack 23
  1700                           
  1701                           ;incstack = 0
  1702                           ;isdigit@c stored from wreg
  1703  001DA6  6E3F               	movwf	isdigit@c,c
  1704  001DA8  0E00               	movlw	0
  1705  001DAA  6E3E               	movwf	_isdigit$491,c
  1706  001DAC  0E3A               	movlw	58
  1707  001DAE  603F               	cpfslt	isdigit@c,c
  1708  001DB0  D005               	goto	l1537
  1709  001DB2  0E2F               	movlw	47
  1710  001DB4  643F               	cpfsgt	isdigit@c,c
  1711  001DB6  D002               	goto	l1537
  1712  001DB8  0E01               	movlw	1
  1713  001DBA  6E3E               	movwf	_isdigit$491,c
  1714  001DBC                     l1537:
  1715  001DBC  C03E  F03D         	movff	_isdigit$491,??_isdigit
  1716  001DC0  303D               	rrcf	??_isdigit,w,c
  1717  001DC2  0012               	return	
  1718  001DC4                     __end_of_isdigit:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           prodh	equ	0xFF4
  1725                           prodl	equ	0xFF3
  1726                           intcon	equ	0xFF2
  1727                           intcon2	equ	0xFF1
  1728                           intcon3	equ	0xFF0
  1729                           wreg	equ	0xFE8
  1730                           postinc2	equ	0xFDE
  1731                           postdec2	equ	0xFDD
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function ___wmul *****************
  1737 ;; Defined at:
  1738 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  multiplier      2   60[COMRAM] unsigned int 
  1741 ;;  multiplicand    2   62[COMRAM] unsigned int 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  product         2   64[COMRAM] unsigned int 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  2   60[COMRAM] unsigned int 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, prodl, prodh
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        6 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_printf
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text5
  1768  001D34                     __ptext5:
  1769                           	opt stack 0
  1770  001D34                     ___wmul:
  1771                           	opt stack 23
  1772                           
  1773                           ;incstack = 0
  1774  001D34  503D               	movf	___wmul@multiplier,w,c
  1775  001D36  023F               	mulwf	___wmul@multiplicand,c
  1776  001D38  CFF3 F041          	movff	prodl,___wmul@product
  1777  001D3C  CFF4 F042          	movff	prodh,___wmul@product+1
  1778  001D40  503D               	movf	___wmul@multiplier,w,c
  1779  001D42  0240               	mulwf	___wmul@multiplicand+1,c
  1780  001D44  50F3               	movf	prodl,w,c
  1781  001D46  2642               	addwf	___wmul@product+1,f,c
  1782  001D48  503E               	movf	___wmul@multiplier+1,w,c
  1783  001D4A  023F               	mulwf	___wmul@multiplicand,c
  1784  001D4C  50F3               	movf	prodl,w,c
  1785  001D4E  2642               	addwf	___wmul@product+1,f,c
  1786  001D50  C041  F03D         	movff	___wmul@product,?___wmul
  1787  001D54  C042  F03E         	movff	___wmul@product+1,?___wmul+1
  1788  001D58  0012               	return	
  1789  001D5A                     __end_of___wmul:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           prodh	equ	0xFF4
  1796                           prodl	equ	0xFF3
  1797                           intcon	equ	0xFF2
  1798                           intcon2	equ	0xFF1
  1799                           intcon3	equ	0xFF0
  1800                           wreg	equ	0xFE8
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           fsr2h	equ	0xFDA
  1804                           fsr2l	equ	0xFD9
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function ___lwmod *****************
  1808 ;; Defined at:
  1809 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  dividend        2    3[BANK0 ] unsigned int 
  1812 ;;  divisor         2    5[BANK0 ] unsigned int 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  counter         1   64[COMRAM] unsigned char 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    3[BANK0 ] unsigned int 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;Total ram usage:        5 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    5
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_printf
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text6
  1839  001ABA                     __ptext6:
  1840                           	opt stack 0
  1841  001ABA                     ___lwmod:
  1842                           	opt stack 23
  1843                           
  1844                           ;incstack = 0
  1845  001ABA  0100               	movlb	0	; () banked
  1846  001ABC  5185               	movf	___lwmod@divisor& (0+255),w,b
  1847  001ABE  0100               	movlb	0	; () banked
  1848  001AC0  1186               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1849  001AC2  B4D8               	btfsc	status,2,c
  1850  001AC4  D023               	goto	l668
  1851                           
  1852                           ; BSR set to: 0
  1853  001AC6  0E01               	movlw	1
  1854  001AC8  6E41               	movwf	___lwmod@counter,c
  1855  001ACA  D005               	goto	l1575
  1856  001ACC                     l1573:
  1857                           
  1858                           ; BSR set to: 0
  1859  001ACC  0100               	movlb	0	; () banked
  1860  001ACE  90D8               	bcf	status,0,c
  1861  001AD0  3785               	rlcf	___lwmod@divisor& (0+255),f,b
  1862  001AD2  3786               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1863  001AD4  2A41               	incf	___lwmod@counter,f,c
  1864  001AD6                     l1575:
  1865                           
  1866                           ; BSR set to: 0
  1867  001AD6  0100               	movlb	0	; () banked
  1868  001AD8  AF86               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1869  001ADA  D7F8               	goto	l1573
  1870  001ADC                     l1577:
  1871                           
  1872                           ; BSR set to: 0
  1873  001ADC  0100               	movlb	0	; () banked
  1874  001ADE  5185               	movf	___lwmod@divisor& (0+255),w,b
  1875  001AE0  0100               	movlb	0	; () banked
  1876  001AE2  5D83               	subwf	___lwmod@dividend& (0+255),w,b
  1877  001AE4  0100               	movlb	0	; () banked
  1878  001AE6  5186               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1879  001AE8  0100               	movlb	0	; () banked
  1880  001AEA  5984               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1881  001AEC  A0D8               	btfss	status,0,c
  1882  001AEE  D008               	goto	l1581
  1883                           
  1884                           ; BSR set to: 0
  1885  001AF0  0100               	movlb	0	; () banked
  1886  001AF2  5185               	movf	___lwmod@divisor& (0+255),w,b
  1887  001AF4  0100               	movlb	0	; () banked
  1888  001AF6  5F83               	subwf	___lwmod@dividend& (0+255),f,b
  1889  001AF8  0100               	movlb	0	; () banked
  1890  001AFA  5186               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1891  001AFC  0100               	movlb	0	; () banked
  1892  001AFE  5B84               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1893  001B00                     l1581:
  1894                           
  1895                           ; BSR set to: 0
  1896  001B00  0100               	movlb	0	; () banked
  1897  001B02  90D8               	bcf	status,0,c
  1898  001B04  3386               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1899  001B06  3385               	rrcf	___lwmod@divisor& (0+255),f,b
  1900                           
  1901                           ; BSR set to: 0
  1902  001B08  2E41               	decfsz	___lwmod@counter,f,c
  1903  001B0A  D7E8               	goto	l1577
  1904  001B0C                     l668:
  1905                           
  1906                           ; BSR set to: 0
  1907  001B0C  C083  F083         	movff	___lwmod@dividend,?___lwmod
  1908  001B10  C084  F084         	movff	___lwmod@dividend+1,?___lwmod+1
  1909                           
  1910                           ; BSR set to: 0
  1911  001B14  0012               	return		;funcret
  1912  001B16                     __end_of___lwmod:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           intcon2	equ	0xFF1
  1922                           intcon3	equ	0xFF0
  1923                           wreg	equ	0xFE8
  1924                           postinc2	equ	0xFDE
  1925                           postdec2	equ	0xFDD
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function ___lwdiv *****************
  1931 ;; Defined at:
  1932 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  dividend        2   60[COMRAM] unsigned int 
  1935 ;;  divisor         2   62[COMRAM] unsigned int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  quotient        2    0[BANK0 ] unsigned int 
  1938 ;;  counter         1    2[BANK0 ] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  2   60[COMRAM] unsigned int 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:        7 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    5
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_printf
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text7
  1963  001A5C                     __ptext7:
  1964                           	opt stack 0
  1965  001A5C                     ___lwdiv:
  1966                           	opt stack 23
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;incstack = 0
  1970  001A5C  0E00               	movlw	0
  1971  001A5E  0100               	movlb	0	; () banked
  1972  001A60  6F81               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1973  001A62  0E00               	movlw	0
  1974  001A64  6F80               	movwf	___lwdiv@quotient& (0+255),b
  1975                           
  1976                           ; BSR set to: 0
  1977  001A66  503F               	movf	___lwdiv@divisor,w,c
  1978  001A68  1040               	iorwf	___lwdiv@divisor+1,w,c
  1979  001A6A  B4D8               	btfsc	status,2,c
  1980  001A6C  D021               	goto	l658
  1981                           
  1982                           ; BSR set to: 0
  1983  001A6E  0E01               	movlw	1
  1984  001A70  0100               	movlb	0	; () banked
  1985  001A72  6F82               	movwf	___lwdiv@counter& (0+255),b
  1986  001A74  D005               	goto	l1555
  1987  001A76                     l1553:
  1988                           
  1989                           ; BSR set to: 0
  1990  001A76  90D8               	bcf	status,0,c
  1991  001A78  363F               	rlcf	___lwdiv@divisor,f,c
  1992  001A7A  3640               	rlcf	___lwdiv@divisor+1,f,c
  1993  001A7C  0100               	movlb	0	; () banked
  1994  001A7E  2B82               	incf	___lwdiv@counter& (0+255),f,b
  1995  001A80                     l1555:
  1996                           
  1997                           ; BSR set to: 0
  1998  001A80  AE40               	btfss	___lwdiv@divisor+1,7,c
  1999  001A82  D7F9               	goto	l1553
  2000  001A84                     l1557:
  2001                           
  2002                           ; BSR set to: 0
  2003  001A84  0100               	movlb	0	; () banked
  2004  001A86  90D8               	bcf	status,0,c
  2005  001A88  3780               	rlcf	___lwdiv@quotient& (0+255),f,b
  2006  001A8A  3781               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2007                           
  2008                           ; BSR set to: 0
  2009  001A8C  503F               	movf	___lwdiv@divisor,w,c
  2010  001A8E  5C3D               	subwf	___lwdiv@dividend,w,c
  2011  001A90  5040               	movf	___lwdiv@divisor+1,w,c
  2012  001A92  583E               	subwfb	___lwdiv@dividend+1,w,c
  2013  001A94  A0D8               	btfss	status,0,c
  2014  001A96  D006               	goto	l1565
  2015                           
  2016                           ; BSR set to: 0
  2017  001A98  503F               	movf	___lwdiv@divisor,w,c
  2018  001A9A  5E3D               	subwf	___lwdiv@dividend,f,c
  2019  001A9C  5040               	movf	___lwdiv@divisor+1,w,c
  2020  001A9E  5A3E               	subwfb	___lwdiv@dividend+1,f,c
  2021                           
  2022                           ; BSR set to: 0
  2023  001AA0  0100               	movlb	0	; () banked
  2024  001AA2  8180               	bsf	___lwdiv@quotient& (0+255),0,b
  2025  001AA4                     l1565:
  2026                           
  2027                           ; BSR set to: 0
  2028  001AA4  90D8               	bcf	status,0,c
  2029  001AA6  3240               	rrcf	___lwdiv@divisor+1,f,c
  2030  001AA8  323F               	rrcf	___lwdiv@divisor,f,c
  2031                           
  2032                           ; BSR set to: 0
  2033  001AAA  0100               	movlb	0	; () banked
  2034  001AAC  2F82               	decfsz	___lwdiv@counter& (0+255),f,b
  2035  001AAE  D7EA               	goto	l1557
  2036  001AB0                     l658:
  2037                           
  2038                           ; BSR set to: 0
  2039  001AB0  C080  F03D         	movff	___lwdiv@quotient,?___lwdiv
  2040  001AB4  C081  F03E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2041                           
  2042                           ; BSR set to: 0
  2043  001AB8  0012               	return		;funcret
  2044  001ABA                     __end_of___lwdiv:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           intcon2	equ	0xFF1
  2054                           intcon3	equ	0xFF0
  2055                           wreg	equ	0xFE8
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           status	equ	0xFD8
  2061                           
  2062 ;; *************** function _initLCD *****************
  2063 ;; Defined at:
  2064 ;;		line 14 in file "lcd.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;Total ram usage:        1 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    7
  2085 ;; This function calls:
  2086 ;;		_lcdInst
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text8
  2093  001CA6                     __ptext8:
  2094                           	opt stack 0
  2095  001CA6                     _initLCD:
  2096                           	opt stack 23
  2097                           
  2098                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;incstack = 0
  2102  001CA6  0E31               	movlw	49
  2103  001CA8  6E40               	movwf	??_initLCD& (0+255),c
  2104  001CAA  0EB2               	movlw	178
  2105  001CAC                     u1597:
  2106  001CAC  2EE8               	decfsz	wreg,f,c
  2107  001CAE  D7FE               	bra	u1597
  2108  001CB0  2E40               	decfsz	??_initLCD& (0+255),f,c
  2109  001CB2  D7FC               	bra	u1597
  2110  001CB4  D000               	nop2	
  2111                           
  2112                           ;lcd.c: 16: lcdInst(0b00110011);
  2113  001CB6  0E33               	movlw	51
  2114  001CB8  EC07  F00F         	call	_lcdInst
  2115                           
  2116                           ;lcd.c: 17: lcdInst(0b00110011);
  2117  001CBC  0E33               	movlw	51
  2118  001CBE  EC07  F00F         	call	_lcdInst
  2119                           
  2120                           ;lcd.c: 18: lcdInst(0b00110010);
  2121  001CC2  0E32               	movlw	50
  2122  001CC4  EC07  F00F         	call	_lcdInst
  2123                           
  2124                           ;lcd.c: 19: lcdInst(0b00101000);
  2125  001CC8  0E28               	movlw	40
  2126  001CCA  EC07  F00F         	call	_lcdInst
  2127                           
  2128                           ;lcd.c: 20: lcdInst(0b00001111);
  2129  001CCE  0E0F               	movlw	15
  2130  001CD0  EC07  F00F         	call	_lcdInst
  2131                           
  2132                           ;lcd.c: 21: lcdInst(0b00000110);
  2133  001CD4  0E06               	movlw	6
  2134  001CD6  EC07  F00F         	call	_lcdInst
  2135                           
  2136                           ;lcd.c: 22: lcdInst(0b00000001);
  2137  001CDA  0E01               	movlw	1
  2138  001CDC  EC07  F00F         	call	_lcdInst
  2139                           
  2140                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2141  001CE0  0E31               	movlw	49
  2142  001CE2  6E40               	movwf	??_initLCD& (0+255),c
  2143  001CE4  0EB2               	movlw	178
  2144  001CE6                     u1607:
  2145  001CE6  2EE8               	decfsz	wreg,f,c
  2146  001CE8  D7FE               	bra	u1607
  2147  001CEA  2E40               	decfsz	??_initLCD& (0+255),f,c
  2148  001CEC  D7FC               	bra	u1607
  2149  001CEE  D000               	nop2	
  2150  001CF0  0012               	return		;funcret
  2151  001CF2                     __end_of_initLCD:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           prodh	equ	0xFF4
  2158                           prodl	equ	0xFF3
  2159                           intcon	equ	0xFF2
  2160                           intcon2	equ	0xFF1
  2161                           intcon3	equ	0xFF0
  2162                           wreg	equ	0xFE8
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _lcdInst *****************
  2170 ;; Defined at:
  2171 ;;		line 26 in file "lcd.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  data            1    wreg     unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  data            1   62[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;Total ram usage:        1 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    6
  2192 ;; This function calls:
  2193 ;;		_lcdNibble
  2194 ;; This function is called by:
  2195 ;;		_initLCD
  2196 ;;		_standby
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text9
  2201  001E0E                     __ptext9:
  2202                           	opt stack 0
  2203  001E0E                     _lcdInst:
  2204                           	opt stack 23
  2205                           
  2206                           ;incstack = 0
  2207                           ;lcdInst@data stored from wreg
  2208  001E0E  6E3F               	movwf	lcdInst@data,c
  2209                           
  2210                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2211  001E10  948C               	bcf	3980,2,c	;volatile
  2212                           
  2213                           ;lcd.c: 28: lcdNibble(data);
  2214  001E12  503F               	movf	lcdInst@data,w,c
  2215  001E14  EC05  F00E         	call	_lcdNibble
  2216  001E18  0012               	return		;funcret
  2217  001E1A                     __end_of_lcdInst:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           prodh	equ	0xFF4
  2224                           prodl	equ	0xFF3
  2225                           intcon	equ	0xFF2
  2226                           intcon2	equ	0xFF1
  2227                           intcon3	equ	0xFF0
  2228                           wreg	equ	0xFE8
  2229                           postinc2	equ	0xFDE
  2230                           postdec2	equ	0xFDD
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _lcdNibble *****************
  2236 ;; Defined at:
  2237 ;;		line 36 in file "lcd.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  data            1    wreg     unsigned char 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  data            1   61[COMRAM] unsigned char 
  2242 ;;  temp            1   60[COMRAM] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;Total ram usage:        2 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    5
  2259 ;; This function calls:
  2260 ;;		Nothing
  2261 ;; This function is called by:
  2262 ;;		_lcdInst
  2263 ;;		_putch
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text10
  2268  001C0A                     __ptext10:
  2269                           	opt stack 0
  2270  001C0A                     _lcdNibble:
  2271                           	opt stack 22
  2272                           
  2273                           ;incstack = 0
  2274                           ;lcdNibble@data stored from wreg
  2275  001C0A  6E3E               	movwf	lcdNibble@data,c
  2276                           
  2277                           ;lcd.c: 38: char temp = data & 0xF0;
  2278  001C0C  503E               	movf	lcdNibble@data,w,c
  2279  001C0E  0BF0               	andlw	240
  2280  001C10  6E3D               	movwf	lcdNibble@temp,c
  2281                           
  2282                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2283  001C12  508C               	movf	3980,w,c	;volatile
  2284  001C14  0B0F               	andlw	15
  2285  001C16  6E8C               	movwf	3980,c	;volatile
  2286                           
  2287                           ;lcd.c: 40: LATD = temp | LATD;
  2288  001C18  503D               	movf	lcdNibble@temp,w,c
  2289  001C1A  108C               	iorwf	3980,w,c	;volatile
  2290  001C1C  6E8C               	movwf	3980,c	;volatile
  2291                           
  2292                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2293  001C1E  968C               	bcf	3980,3,c	;volatile
  2294                           
  2295                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2296  001C20  0E19               	movlw	25
  2297  001C22                     u1617:
  2298  001C22  2EE8               	decfsz	wreg,f,c
  2299  001C24  D7FE               	bra	u1617
  2300                           
  2301                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2302  001C26  868C               	bsf	3980,3,c	;volatile
  2303                           
  2304                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2305  001C28  0E19               	movlw	25
  2306  001C2A                     u1627:
  2307  001C2A  2EE8               	decfsz	wreg,f,c
  2308  001C2C  D7FE               	bra	u1627
  2309                           
  2310                           ;lcd.c: 47: data = data << 4;
  2311  001C2E  383E               	swapf	lcdNibble@data,w,c
  2312  001C30  0BF0               	andlw	240
  2313  001C32  6E3E               	movwf	lcdNibble@data,c
  2314                           
  2315                           ;lcd.c: 49: temp = data & 0xF0;
  2316  001C34  503E               	movf	lcdNibble@data,w,c
  2317  001C36  0BF0               	andlw	240
  2318  001C38  6E3D               	movwf	lcdNibble@temp,c
  2319                           
  2320                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2321  001C3A  508C               	movf	3980,w,c	;volatile
  2322  001C3C  0B0F               	andlw	15
  2323  001C3E  6E8C               	movwf	3980,c	;volatile
  2324                           
  2325                           ;lcd.c: 51: LATD = temp | LATD;
  2326  001C40  503D               	movf	lcdNibble@temp,w,c
  2327  001C42  108C               	iorwf	3980,w,c	;volatile
  2328  001C44  6E8C               	movwf	3980,c	;volatile
  2329                           
  2330                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2331  001C46  968C               	bcf	3980,3,c	;volatile
  2332                           
  2333                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2334  001C48  0E19               	movlw	25
  2335  001C4A                     u1637:
  2336  001C4A  2EE8               	decfsz	wreg,f,c
  2337  001C4C  D7FE               	bra	u1637
  2338                           
  2339                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2340  001C4E  868C               	bsf	3980,3,c	;volatile
  2341                           
  2342                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2343  001C50  0E19               	movlw	25
  2344  001C52                     u1647:
  2345  001C52  2EE8               	decfsz	wreg,f,c
  2346  001C54  D7FE               	bra	u1647
  2347  001C56  0012               	return		;funcret
  2348  001C58                     __end_of_lcdNibble:
  2349                           	opt stack 0
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           intcon	equ	0xFF2
  2357                           intcon2	equ	0xFF1
  2358                           intcon3	equ	0xFF0
  2359                           wreg	equ	0xFE8
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _I2C_Master_Init *****************
  2367 ;; Defined at:
  2368 ;;		line 13 in file "I2C.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  c               4    8[BANK0 ] const unsigned long 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        8 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    6
  2389 ;; This function calls:
  2390 ;;		___lldiv
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text11
  2397  0019FC                     __ptext11:
  2398                           	opt stack 0
  2399  0019FC                     _I2C_Master_Init:
  2400                           	opt stack 24
  2401                           
  2402                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  2403                           
  2404                           ;incstack = 0
  2405  0019FC  0E00               	movlw	0
  2406  0019FE  6EC7               	movwf	4039,c	;volatile
  2407                           
  2408                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  2409  001A00  0E28               	movlw	40
  2410  001A02  6EC6               	movwf	4038,c	;volatile
  2411                           
  2412                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  2413  001A04  0E00               	movlw	0
  2414  001A06  6EC5               	movwf	4037,c	;volatile
  2415                           
  2416                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  2417  001A08  0E80               	movlw	128
  2418  001A0A  0100               	movlb	0	; () banked
  2419  001A0C  6F80               	movwf	___lldiv@dividend& (0+255),b
  2420  001A0E  0E96               	movlw	150
  2421  001A10  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  2422  001A12  0E98               	movlw	152
  2423  001A14  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  2424  001A16  0E00               	movlw	0
  2425  001A18  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  2426  001A1A  C088  F08C         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2427  001A1E  C089  F08D         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2428  001A22  C08A  F08E         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2429  001A26  C08B  F08F         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2430  001A2A  0E02               	movlw	2
  2431  001A2C                     u1475:
  2432  001A2C  90D8               	bcf	status,0,c
  2433  001A2E  0100               	movlb	0	; () banked
  2434  001A30  378C               	rlcf	??_I2C_Master_Init& (0+255),f,b
  2435  001A32  378D               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  2436  001A34  378E               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  2437  001A36  378F               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  2438  001A38  2EE8               	decfsz	wreg,f,c
  2439  001A3A  D7F8               	goto	u1475
  2440  001A3C  C08C  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  2441  001A40  C08D  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2442  001A44  C08E  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2443  001A48  C08F  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2444  001A4C  EC73  F00C         	call	___lldiv	;wreg free
  2445  001A50  0100               	movlb	0	; () banked
  2446  001A52  0580               	decf	?___lldiv& (0+255),w,b
  2447  001A54  6EC8               	movwf	4040,c	;volatile
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;I2C.c: 20: TRISC3 = 1;
  2451  001A56  8694               	bsf	3988,3,c	;volatile
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;I2C.c: 21: TRISC4 = 1;
  2455  001A58  8894               	bsf	3988,4,c	;volatile
  2456                           
  2457                           ; BSR set to: 0
  2458  001A5A  0012               	return		;funcret
  2459  001A5C                     __end_of_I2C_Master_Init:
  2460                           	opt stack 0
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           intcon2	equ	0xFF1
  2469                           intcon3	equ	0xFF0
  2470                           wreg	equ	0xFE8
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function ___lldiv *****************
  2478 ;; Defined at:
  2479 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  dividend        4    0[BANK0 ] unsigned long 
  2482 ;;  divisor         4    4[BANK0 ] unsigned long 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  quotient        4   60[COMRAM] unsigned long 
  2485 ;;  counter         1   64[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  4    0[BANK0 ] unsigned long 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:         5       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:       13 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    5
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_I2C_Master_Init
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text12
  2510  0018E6                     __ptext12:
  2511                           	opt stack 0
  2512  0018E6                     ___lldiv:
  2513                           	opt stack 24
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;incstack = 0
  2517  0018E6  0E00               	movlw	0
  2518  0018E8  6E3D               	movwf	___lldiv@quotient,c
  2519  0018EA  0E00               	movlw	0
  2520  0018EC  6E3E               	movwf	___lldiv@quotient+1,c
  2521  0018EE  0E00               	movlw	0
  2522  0018F0  6E3F               	movwf	___lldiv@quotient+2,c
  2523  0018F2  0E00               	movlw	0
  2524  0018F4  6E40               	movwf	___lldiv@quotient+3,c
  2525  0018F6  0100               	movlb	0	; () banked
  2526  0018F8  5184               	movf	___lldiv@divisor& (0+255),w,b
  2527  0018FA  0100               	movlb	0	; () banked
  2528  0018FC  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2529  0018FE  0100               	movlb	0	; () banked
  2530  001900  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2531  001902  0100               	movlb	0	; () banked
  2532  001904  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2533  001906  B4D8               	btfsc	status,2,c
  2534  001908  D03D               	goto	l605
  2535                           
  2536                           ; BSR set to: 0
  2537  00190A  0E01               	movlw	1
  2538  00190C  6E41               	movwf	___lldiv@counter,c
  2539  00190E  D007               	goto	l1791
  2540  001910                     l1789:
  2541                           
  2542                           ; BSR set to: 0
  2543  001910  0100               	movlb	0	; () banked
  2544  001912  90D8               	bcf	status,0,c
  2545  001914  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  2546  001916  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2547  001918  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2548  00191A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2549  00191C  2A41               	incf	___lldiv@counter,f,c
  2550  00191E                     l1791:
  2551                           
  2552                           ; BSR set to: 0
  2553  00191E  0100               	movlb	0	; () banked
  2554  001920  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2555  001922  D7F6               	goto	l1789
  2556  001924                     l1793:
  2557                           
  2558                           ; BSR set to: 0
  2559  001924  90D8               	bcf	status,0,c
  2560  001926  363D               	rlcf	___lldiv@quotient,f,c
  2561  001928  363E               	rlcf	___lldiv@quotient+1,f,c
  2562  00192A  363F               	rlcf	___lldiv@quotient+2,f,c
  2563  00192C  3640               	rlcf	___lldiv@quotient+3,f,c
  2564                           
  2565                           ; BSR set to: 0
  2566  00192E  0100               	movlb	0	; () banked
  2567  001930  5184               	movf	___lldiv@divisor& (0+255),w,b
  2568  001932  0100               	movlb	0	; () banked
  2569  001934  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  2570  001936  0100               	movlb	0	; () banked
  2571  001938  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2572  00193A  0100               	movlb	0	; () banked
  2573  00193C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2574  00193E  0100               	movlb	0	; () banked
  2575  001940  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2576  001942  0100               	movlb	0	; () banked
  2577  001944  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2578  001946  0100               	movlb	0	; () banked
  2579  001948  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2580  00194A  0100               	movlb	0	; () banked
  2581  00194C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2582  00194E  A0D8               	btfss	status,0,c
  2583  001950  D011               	goto	l1801
  2584                           
  2585                           ; BSR set to: 0
  2586  001952  0100               	movlb	0	; () banked
  2587  001954  5184               	movf	___lldiv@divisor& (0+255),w,b
  2588  001956  0100               	movlb	0	; () banked
  2589  001958  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  2590  00195A  0100               	movlb	0	; () banked
  2591  00195C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2592  00195E  0100               	movlb	0	; () banked
  2593  001960  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2594  001962  0100               	movlb	0	; () banked
  2595  001964  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2596  001966  0100               	movlb	0	; () banked
  2597  001968  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2598  00196A  0100               	movlb	0	; () banked
  2599  00196C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2600  00196E  0100               	movlb	0	; () banked
  2601  001970  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2602                           
  2603                           ; BSR set to: 0
  2604  001972  803D               	bsf	___lldiv@quotient,0,c
  2605  001974                     l1801:
  2606                           
  2607                           ; BSR set to: 0
  2608  001974  0100               	movlb	0	; () banked
  2609  001976  90D8               	bcf	status,0,c
  2610  001978  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2611  00197A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2612  00197C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2613  00197E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  2614                           
  2615                           ; BSR set to: 0
  2616  001980  2E41               	decfsz	___lldiv@counter,f,c
  2617  001982  D7D0               	goto	l1793
  2618  001984                     l605:
  2619                           
  2620                           ; BSR set to: 0
  2621  001984  C03D  F080         	movff	___lldiv@quotient,?___lldiv
  2622  001988  C03E  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  2623  00198C  C03F  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  2624  001990  C040  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  2625                           
  2626                           ; BSR set to: 0
  2627  001994  0012               	return		;funcret
  2628  001996                     __end_of___lldiv:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           prodh	equ	0xFF4
  2635                           prodl	equ	0xFF3
  2636                           intcon	equ	0xFF2
  2637                           intcon2	equ	0xFF1
  2638                           intcon3	equ	0xFF0
  2639                           wreg	equ	0xFE8
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _isr *****************
  2647 ;; Defined at:
  2648 ;;		line 63 in file "main.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  i               1   59[COMRAM] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:       16 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    4
  2669 ;; This function calls:
  2670 ;;		_disp_time
  2671 ;;		i2_lcdInst
  2672 ;;		i2_printf
  2673 ;;		i2_standby
  2674 ;; This function is called by:
  2675 ;;		Interrupt level 2
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	intcode
  2680  000008                     __pintcode:
  2681                           	opt stack 0
  2682  000008                     _isr:
  2683                           	opt stack 22
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;incstack = 0
  2687  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2688  00000A  EDA4  F00B         	call	int_func,f	;refresh shadow registers
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           intcon2	equ	0xFF1
  2697                           intcon3	equ	0xFF0
  2698                           wreg	equ	0xFE8
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705                           	psect	intcode_body
  2706  001748                     __pintcode_body:
  2707                           	opt stack 22
  2708  001748                     int_func:
  2709                           	opt stack 22
  2710  001748  0006               	pop		; remove dummy address from shadow register refresh
  2711  00174A  CFFA F02E          	movff	pclath,??_isr+1
  2712  00174E  CFFB F02F          	movff	pclatu,??_isr+2
  2713  001752  CFE9 F030          	movff	fsr0l,??_isr+3
  2714  001756  CFEA F031          	movff	fsr0h,??_isr+4
  2715  00175A  CFE1 F032          	movff	fsr1l,??_isr+5
  2716  00175E  CFE2 F033          	movff	fsr1h,??_isr+6
  2717  001762  CFD9 F034          	movff	fsr2l,??_isr+7
  2718  001766  CFDA F035          	movff	fsr2h,??_isr+8
  2719  00176A  CFF3 F036          	movff	prodl,??_isr+9
  2720  00176E  CFF4 F037          	movff	prodh,??_isr+10
  2721  001772  CFF6 F038          	movff	tblptrl,??_isr+11
  2722  001776  CFF7 F039          	movff	tblptrh,??_isr+12
  2723  00177A  CFF8 F03A          	movff	tblptru,??_isr+13
  2724  00177E  CFF5 F03B          	movff	tablat,??_isr+14
  2725                           
  2726                           ;main.c: 64: if (INT1IF) {
  2727  001782  B0F0               	btfsc	intcon3,0,c	;volatile
  2728  001784  D00E               	goto	i2l147
  2729  001786  D010               	goto	i2l2043
  2730  001788                     i2l2035:
  2731                           
  2732                           ;main.c: 68: standby();
  2733  001788  ECDD  F00D         	call	i2_standby	;wreg free
  2734                           
  2735                           ;main.c: 69: break;
  2736  00178C  D00A               	goto	i2l147
  2737  00178E                     i2l2037:
  2738                           
  2739                           ;main.c: 71: disp_time();
  2740  00178E  EC0D  F00C         	call	_disp_time	;wreg free
  2741                           
  2742                           ;main.c: 73: }
  2743                           
  2744                           ;main.c: 72: break;
  2745  001792  D007               	goto	i2l147
  2746  001794                     i2l2041:
  2747  001794  5081               	movf	3969,w,c	;volatile
  2748                           
  2749                           ; Switch size 1, requested type "space"
  2750                           ; Number of cases is 2, Range of values is 15 to 63
  2751                           ; switch strategies available:
  2752                           ; Name         Instructions Cycles
  2753                           ; simple_byte            7     4 (average)
  2754                           ;	Chosen strategy is simple_byte
  2755  001796  0A0F               	xorlw	15	; case 15
  2756  001798  B4D8               	btfsc	status,2,c
  2757  00179A  D7F6               	goto	i2l2035
  2758  00179C  0A30               	xorlw	48	; case 63
  2759  00179E  B4D8               	btfsc	status,2,c
  2760  0017A0  D7F6               	goto	i2l2037
  2761  0017A2                     i2l147:
  2762  0017A2  A0F0               	btfss	intcon3,0,c	;volatile
  2763  0017A4  D01A               	goto	i2l154
  2764  0017A6  D7F6               	goto	i2l2041
  2765  0017A8                     i2l2043:
  2766                           
  2767                           ;main.c: 78: lcdInst(0b10000000);
  2768  0017A8  0E80               	movlw	128
  2769  0017AA  EC13  F00F         	call	i2_lcdInst
  2770                           
  2771                           ;main.c: 79: printf("bad interrupt");
  2772  0017AE  0E6A               	movlw	low STR_1
  2773  0017B0  6E0D               	movwf	i2printf@f,c
  2774  0017B2  0E10               	movlw	high STR_1
  2775  0017B4  6E0E               	movwf	i2printf@f+1,c
  2776  0017B6  EC1E  F00A         	call	i2_printf	;wreg free
  2777                           
  2778                           ;main.c: 80: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  2779  0017BA  0E00               	movlw	0
  2780  0017BC  6E3C               	movwf	isr@i,c
  2781  0017BE                     i2l2049:
  2782  0017BE  0E63               	movlw	99
  2783  0017C0  643C               	cpfsgt	isr@i,c
  2784  0017C2  D001               	goto	i2l2053
  2785  0017C4  D7F1               	goto	i2l2043
  2786  0017C6                     i2l2053:
  2787  0017C6  0E21               	movlw	33
  2788  0017C8  6E2D               	movwf	??_isr& (0+255),c
  2789  0017CA  0E76               	movlw	118
  2790  0017CC                     i2u165_47:
  2791  0017CC  2EE8               	decfsz	wreg,f,c
  2792  0017CE  D7FE               	bra	i2u165_47
  2793  0017D0  2E2D               	decfsz	??_isr& (0+255),f,c
  2794  0017D2  D7FC               	bra	i2u165_47
  2795  0017D4  D000               	nop2	
  2796  0017D6  2A3C               	incf	isr@i,f,c
  2797  0017D8  D7F2               	goto	i2l2049
  2798  0017DA                     i2l154:
  2799                           
  2800                           ;main.c: 81: }
  2801                           ;main.c: 82: }
  2802                           ;main.c: 83: INT1IF = 0;
  2803  0017DA  90F0               	bcf	intcon3,0,c	;volatile
  2804                           
  2805                           ;main.c: 84: INT1IE = 1;
  2806  0017DC  86F0               	bsf	intcon3,3,c	;volatile
  2807                           
  2808                           ;main.c: 85: return;
  2809  0017DE  C03B  FFF5         	movff	??_isr+14,tablat
  2810  0017E2  C03A  FFF8         	movff	??_isr+13,tblptru
  2811  0017E6  C039  FFF7         	movff	??_isr+12,tblptrh
  2812  0017EA  C038  FFF6         	movff	??_isr+11,tblptrl
  2813  0017EE  C037  FFF4         	movff	??_isr+10,prodh
  2814  0017F2  C036  FFF3         	movff	??_isr+9,prodl
  2815  0017F6  C035  FFDA         	movff	??_isr+8,fsr2h
  2816  0017FA  C034  FFD9         	movff	??_isr+7,fsr2l
  2817  0017FE  C033  FFE2         	movff	??_isr+6,fsr1h
  2818  001802  C032  FFE1         	movff	??_isr+5,fsr1l
  2819  001806  C031  FFEA         	movff	??_isr+4,fsr0h
  2820  00180A  C030  FFE9         	movff	??_isr+3,fsr0l
  2821  00180E  C02F  FFFB         	movff	??_isr+2,pclatu
  2822  001812  C02E  FFFA         	movff	??_isr+1,pclath
  2823  001816  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2824  001818  0011               	retfie		f
  2825  00181A                     __end_of_isr:
  2826                           	opt stack 0
  2827                           pclatu	equ	0xFFB
  2828                           pclath	equ	0xFFA
  2829                           tblptru	equ	0xFF8
  2830                           tblptrh	equ	0xFF7
  2831                           tblptrl	equ	0xFF6
  2832                           tablat	equ	0xFF5
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           intcon	equ	0xFF2
  2836                           intcon2	equ	0xFF1
  2837                           intcon3	equ	0xFF0
  2838                           fsr0h	equ	0xFEA
  2839                           fsr0l	equ	0xFE9
  2840                           wreg	equ	0xFE8
  2841                           fsr1h	equ	0xFE2
  2842                           fsr1l	equ	0xFE1
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function i2_standby *****************
  2850 ;; Defined at:
  2851 ;;		line 88 in file "main.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;Total ram usage:        2 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    3
  2872 ;; This function calls:
  2873 ;;		i2_lcdInst
  2874 ;;		i2_printf
  2875 ;; This function is called by:
  2876 ;;		_isr
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text14
  2881  001BBA                     __ptext14:
  2882                           	opt stack 0
  2883  001BBA                     i2_standby:
  2884                           	opt stack 22
  2885  001BBA                     
  2886                           ;main.c: 90: lcdInst(0b10000000);
  2887  001BBA  0E80               	movlw	128
  2888  001BBC  EC13  F00F         	call	i2_lcdInst
  2889                           
  2890                           ;main.c: 91: printf("standby");
  2891  001BC0  0E82               	movlw	low STR_2
  2892  001BC2  6E0D               	movwf	i2printf@f,c
  2893  001BC4  0E10               	movlw	high STR_2
  2894  001BC6  6E0E               	movwf	i2printf@f+1,c
  2895  001BC8  EC1E  F00A         	call	i2_printf	;wreg free
  2896                           
  2897                           ;main.c: 92: lcdInst(0b11000000);
  2898  001BCC  0EC0               	movlw	192
  2899  001BCE  EC13  F00F         	call	i2_lcdInst
  2900                           
  2901                           ;main.c: 93: printf("PORTB: %d", (PORTB & 0xF0) >> 4);
  2902  001BD2  0E78               	movlw	low STR_3
  2903  001BD4  6E0D               	movwf	i2printf@f,c
  2904  001BD6  0E10               	movlw	high STR_3
  2905  001BD8  6E0E               	movwf	i2printf@f+1,c
  2906  001BDA  CF81 F023          	movff	3969,??i2_standby	;volatile
  2907  001BDE  3A23               	swapf	??i2_standby,f,c
  2908  001BE0  0E0F               	movlw	15
  2909  001BE2  1623               	andwf	??i2_standby,f,c
  2910  001BE4  0E0F               	movlw	15
  2911  001BE6  1623               	andwf	??i2_standby,f,c
  2912  001BE8  5023               	movf	??i2_standby,w,c
  2913  001BEA  6E0F               	movwf	?i2_printf+2,c
  2914  001BEC  6A10               	clrf	?i2_printf+3,c
  2915  001BEE  EC1E  F00A         	call	i2_printf	;wreg free
  2916                           
  2917                           ;main.c: 94: _delay((unsigned long)((300)*(10000000/4000.0)));
  2918  001BF2  0E04               	movlw	4
  2919  001BF4  6E24               	movwf	(??i2_standby+1)& (0+255),c
  2920  001BF6  0ECF               	movlw	207
  2921  001BF8  6E23               	movwf	??i2_standby& (0+255),c
  2922  001BFA  0E02               	movlw	2
  2923  001BFC                     i2u166_47:
  2924  001BFC  2EE8               	decfsz	wreg,f,c
  2925  001BFE  D7FE               	bra	i2u166_47
  2926  001C00  2E23               	decfsz	??i2_standby& (0+255),f,c
  2927  001C02  D7FC               	bra	i2u166_47
  2928  001C04  2E24               	decfsz	(??i2_standby+1)& (0+255),f,c
  2929  001C06  D7FA               	bra	i2u166_47
  2930  001C08  D7D8               	goto	i2l2003
  2931  001C0A                     __end_ofi2_standby:
  2932                           	opt stack 0
  2933                           pclatu	equ	0xFFB
  2934                           pclath	equ	0xFFA
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           prodh	equ	0xFF4
  2940                           prodl	equ	0xFF3
  2941                           intcon	equ	0xFF2
  2942                           intcon2	equ	0xFF1
  2943                           intcon3	equ	0xFF0
  2944                           fsr0h	equ	0xFEA
  2945                           fsr0l	equ	0xFE9
  2946                           wreg	equ	0xFE8
  2947                           fsr1h	equ	0xFE2
  2948                           fsr1l	equ	0xFE1
  2949                           postinc2	equ	0xFDE
  2950                           postdec2	equ	0xFDD
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _disp_time *****************
  2956 ;; Defined at:
  2957 ;;		line 109 in file "main.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  i               1   42[COMRAM] unsigned char 
  2962 ;;  i               1   43[COMRAM] unsigned char 
  2963 ;;  time            7   35[COMRAM] unsigned char [7]
  2964 ;; Return value:  Size  Location     Type
  2965 ;;                  1    wreg      void 
  2966 ;; Registers used:
  2967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2968 ;; Tracked objects:
  2969 ;;		On entry : 0/0
  2970 ;;		On exit  : 0/0
  2971 ;;		Unchanged: 0/0
  2972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;Total ram usage:       10 bytes
  2978 ;; Hardware stack levels used:    1
  2979 ;; Hardware stack levels required when called:    3
  2980 ;; This function calls:
  2981 ;;		_I2C_Master_Read
  2982 ;;		_I2C_Master_Start
  2983 ;;		_I2C_Master_Stop
  2984 ;;		_I2C_Master_Write
  2985 ;;		i2_lcdInst
  2986 ;;		i2_printf
  2987 ;; This function is called by:
  2988 ;;		_isr
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text15
  2993  00181A                     __ptext15:
  2994                           	opt stack 0
  2995  00181A                     _disp_time:
  2996                           	opt stack 22
  2997  00181A                     
  2998                           ;main.c: 113: I2C_Master_Start();
  2999  00181A  EC22  F00F         	call	_I2C_Master_Start	;wreg free
  3000                           
  3001                           ;main.c: 114: I2C_Master_Write(0b11010000);
  3002  00181E  0E00               	movlw	0
  3003  001820  6E03               	movwf	I2C_Master_Write@d+1,c
  3004  001822  0ED0               	movlw	208
  3005  001824  6E02               	movwf	I2C_Master_Write@d,c
  3006  001826  EC19  F00F         	call	_I2C_Master_Write	;wreg free
  3007                           
  3008                           ;main.c: 115: I2C_Master_Write(0x00);
  3009  00182A  0E00               	movlw	0
  3010  00182C  6E03               	movwf	I2C_Master_Write@d+1,c
  3011  00182E  0E00               	movlw	0
  3012  001830  6E02               	movwf	I2C_Master_Write@d,c
  3013  001832  EC19  F00F         	call	_I2C_Master_Write	;wreg free
  3014                           
  3015                           ;main.c: 116: I2C_Master_Stop();
  3016  001836  EC1E  F00F         	call	_I2C_Master_Stop	;wreg free
  3017                           
  3018                           ;main.c: 119: I2C_Master_Start();
  3019  00183A  EC22  F00F         	call	_I2C_Master_Start	;wreg free
  3020                           
  3021                           ;main.c: 120: I2C_Master_Write(0b11010001);
  3022  00183E  0E00               	movlw	0
  3023  001840  6E03               	movwf	I2C_Master_Write@d+1,c
  3024  001842  0ED1               	movlw	209
  3025  001844  6E02               	movwf	I2C_Master_Write@d,c
  3026  001846  EC19  F00F         	call	_I2C_Master_Write	;wreg free
  3027                           
  3028                           ;main.c: 121: for(unsigned char i=0;i<0x06;i++){
  3029  00184A  0E00               	movlw	0
  3030  00184C  6E2C               	movwf	disp_time@i,c
  3031  00184E                     i2l1977:
  3032  00184E  0E05               	movlw	5
  3033  001850  642C               	cpfsgt	disp_time@i,c
  3034  001852  D001               	goto	i2l1981
  3035  001854  D00E               	goto	i2l1987
  3036  001856                     i2l1981:
  3037                           
  3038                           ;main.c: 122: time[i] = I2C_Master_Read(1);
  3039  001856  502C               	movf	disp_time@i,w,c
  3040  001858  0D01               	mullw	1
  3041  00185A  0E24               	movlw	low disp_time@time
  3042  00185C  24F3               	addwf	prodl,w,c
  3043  00185E  6ED9               	movwf	fsr2l,c
  3044  001860  0E00               	movlw	high disp_time@time
  3045  001862  20F4               	addwfc	prodh,w,c
  3046  001864  6EDA               	movwf	fsr2h,c
  3047  001866  0E01               	movlw	1
  3048  001868  ECC0  F00E         	call	_I2C_Master_Read
  3049  00186C  6EDF               	movwf	indf2,c
  3050  00186E  2A2C               	incf	disp_time@i,f,c
  3051  001870  D7EE               	goto	i2l1977
  3052  001872                     i2l1987:
  3053                           
  3054                           ;main.c: 123: }
  3055                           ;main.c: 124: time[6] = I2C_Master_Read(0);
  3056  001872  0E00               	movlw	0
  3057  001874  ECC0  F00E         	call	_I2C_Master_Read
  3058  001878  6E2A               	movwf	disp_time@time+6,c
  3059                           
  3060                           ;main.c: 125: I2C_Master_Stop();
  3061  00187A  EC1E  F00F         	call	_I2C_Master_Stop	;wreg free
  3062                           
  3063                           ;main.c: 128: lcdInst(0b10000000);
  3064  00187E  0E80               	movlw	128
  3065  001880  EC13  F00F         	call	i2_lcdInst
  3066                           
  3067                           ;main.c: 129: printf("%02x/%02x/%02x        ", time[5],time[4],time[6]);
  3068  001884  0E2B               	movlw	low STR_4
  3069  001886  6E0D               	movwf	i2printf@f,c
  3070  001888  0E10               	movlw	high STR_4
  3071  00188A  6E0E               	movwf	i2printf@f+1,c
  3072  00188C  C029  F00F         	movff	disp_time@time+5,?i2_printf+2
  3073  001890  6A10               	clrf	?i2_printf+3,c
  3074  001892  C028  F011         	movff	disp_time@time+4,?i2_printf+4
  3075  001896  6A12               	clrf	?i2_printf+5,c
  3076  001898  C02A  F013         	movff	disp_time@time+6,?i2_printf+6
  3077  00189C  6A14               	clrf	?i2_printf+7,c
  3078  00189E  EC1E  F00A         	call	i2_printf	;wreg free
  3079                           
  3080                           ;main.c: 130: lcdInst(0b11000000);
  3081  0018A2  0EC0               	movlw	192
  3082  0018A4  EC13  F00F         	call	i2_lcdInst
  3083                           
  3084                           ;main.c: 131: printf("%02x:%02x:%02x        ", time[2],time[1],time[0]);
  3085  0018A8  0E42               	movlw	low STR_5
  3086  0018AA  6E0D               	movwf	i2printf@f,c
  3087  0018AC  0E10               	movlw	high STR_5
  3088  0018AE  6E0E               	movwf	i2printf@f+1,c
  3089  0018B0  C026  F00F         	movff	disp_time@time+2,?i2_printf+2
  3090  0018B4  6A10               	clrf	?i2_printf+3,c
  3091  0018B6  C025  F011         	movff	disp_time@time+1,?i2_printf+4
  3092  0018BA  6A12               	clrf	?i2_printf+5,c
  3093  0018BC  C024  F013         	movff	disp_time@time,?i2_printf+6
  3094  0018C0  6A14               	clrf	?i2_printf+7,c
  3095  0018C2  EC1E  F00A         	call	i2_printf	;wreg free
  3096                           
  3097                           ;main.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  3098  0018C6  0E00               	movlw	0
  3099  0018C8  6E2B               	movwf	disp_time@i_241,c
  3100  0018CA                     i2l1995:
  3101  0018CA  0E63               	movlw	99
  3102  0018CC  642B               	cpfsgt	disp_time@i_241,c
  3103  0018CE  D001               	goto	i2l1999
  3104  0018D0  D7A4               	goto	i2l1973
  3105  0018D2                     i2l1999:
  3106  0018D2  0E21               	movlw	33
  3107  0018D4  6E23               	movwf	??_disp_time& (0+255),c
  3108  0018D6  0E76               	movlw	118
  3109  0018D8                     i2u167_47:
  3110  0018D8  2EE8               	decfsz	wreg,f,c
  3111  0018DA  D7FE               	bra	i2u167_47
  3112  0018DC  2E23               	decfsz	??_disp_time& (0+255),f,c
  3113  0018DE  D7FC               	bra	i2u167_47
  3114  0018E0  D000               	nop2	
  3115  0018E2  2A2B               	incf	disp_time@i_241,f,c
  3116  0018E4  D7F2               	goto	i2l1995
  3117  0018E6                     __end_of_disp_time:
  3118                           	opt stack 0
  3119                           pclatu	equ	0xFFB
  3120                           pclath	equ	0xFFA
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           intcon	equ	0xFF2
  3128                           intcon2	equ	0xFF1
  3129                           intcon3	equ	0xFF0
  3130                           fsr0h	equ	0xFEA
  3131                           fsr0l	equ	0xFE9
  3132                           wreg	equ	0xFE8
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function i2_printf *****************
  3143 ;; Defined at:
  3144 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3147 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
  3148 ;;		 -> STR_1(14), 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  printf          4    0        struct .
  3151 ;;  printf          3    0        PTR const unsigned char 
  3152 ;;  printf          2   31[COMRAM] int 
  3153 ;;  printf          2   28[COMRAM] unsigned int 
  3154 ;;  printf          2   25[COMRAM] PTR void [1]
  3155 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3156 ;;  printf          2    0        unsigned int 
  3157 ;;  printf          1   33[COMRAM] char 
  3158 ;;  printf          1   30[COMRAM] unsigned char 
  3159 ;;  printf          1   27[COMRAM] char 
  3160 ;;  printf          1   24[COMRAM] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  2   12[COMRAM] int 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3170 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;Total ram usage:       22 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; Hardware stack levels required when called:    2
  3177 ;; This function calls:
  3178 ;;		i2___lwdiv
  3179 ;;		i2___lwmod
  3180 ;;		i2___wmul
  3181 ;;		i2_isdigit
  3182 ;;		i2_putch
  3183 ;; This function is called by:
  3184 ;;		_isr
  3185 ;;		_disp_time
  3186 ;;		i2_standby
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           	psect	text16
  3191  00143C                     __ptext16:
  3192                           	opt stack 0
  3193  00143C                     i2_printf:
  3194                           	opt stack 22
  3195                           
  3196                           ;doprnt.c: 466: va_list ap;
  3197                           ;doprnt.c: 499: signed char c;
  3198                           ;doprnt.c: 501: int width;
  3199                           ;doprnt.c: 506: signed char prec;
  3200                           ;doprnt.c: 508: unsigned char flag;
  3201                           ;doprnt.c: 523: union {
  3202                           ;doprnt.c: 524: unsigned long vd;
  3203                           ;doprnt.c: 525: double integ;
  3204                           ;doprnt.c: 526: } tmpval;
  3205                           ;doprnt.c: 528: unsigned int val;
  3206                           ;doprnt.c: 529: unsigned len;
  3207                           ;doprnt.c: 530: const char * cp;
  3208                           ;doprnt.c: 533: *ap = __va_start();
  3209                           
  3210                           ;incstack = 0
  3211  00143C  0E0F               	movlw	low (?i2_printf+2)
  3212  00143E  6E1A               	movwf	i2printf@ap,c
  3213  001440  0E00               	movlw	high (?i2_printf+2)
  3214  001442  6E1B               	movwf	i2printf@ap+1,c
  3215                           
  3216                           ;doprnt.c: 536: while(c = *f++) {
  3217  001444  D174               	goto	i2l1937
  3218  001446                     i2l1811:
  3219                           
  3220                           ;doprnt.c: 538: if(c != '%')
  3221  001446  0E25               	movlw	37
  3222  001448  1822               	xorwf	i2printf@c,w,c
  3223  00144A  B4D8               	btfsc	status,2,c
  3224  00144C  D004               	goto	i2l1815
  3225                           
  3226                           ;doprnt.c: 540: {
  3227                           ;doprnt.c: 541: (putch(c) );
  3228  00144E  5022               	movf	i2printf@c,w,c
  3229  001450  EC0D  F00F         	call	i2_putch
  3230                           
  3231                           ;doprnt.c: 542: continue;
  3232  001454  D16C               	goto	i2l1937
  3233  001456                     i2l1815:
  3234                           
  3235                           ;doprnt.c: 543: }
  3236                           ;doprnt.c: 546: width = 0;
  3237  001456  0E00               	movlw	0
  3238  001458  6E21               	movwf	i2printf@width+1,c
  3239  00145A  0E00               	movlw	0
  3240  00145C  6E20               	movwf	i2printf@width,c
  3241                           
  3242                           ;doprnt.c: 548: flag = 0;
  3243  00145E  0E00               	movlw	0
  3244  001460  6E1F               	movwf	i2printf@flag,c
  3245                           
  3246                           ;doprnt.c: 551: switch(*f) {
  3247                           
  3248                           ;doprnt.c: 550: for(;;) {
  3249  001462  D003               	goto	i2l1821
  3250  001464                     i2l1817:
  3251                           
  3252                           ;doprnt.c: 580: flag |= 0x04;
  3253  001464  841F               	bsf	i2printf@flag,2,c
  3254                           
  3255                           ;doprnt.c: 581: f++;
  3256  001466  4A0D               	infsnz	i2printf@f,f,c
  3257  001468  2A0E               	incf	i2printf@f+1,f,c
  3258  00146A                     i2l1821:
  3259  00146A  C00D  FFF6         	movff	i2printf@f,tblptrl
  3260  00146E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3261  001472                     	if	0	;tblptru may be non-zero
  3262  001472                     	endif
  3263  001472                     	if	0	;tblptru may be non-zero
  3264  001472                     	endif
  3265  001472  0008               	tblrd		*
  3266  001474  50F5               	movf	tablat,w,c
  3267                           
  3268                           ; Switch size 1, requested type "space"
  3269                           ; Number of cases is 1, Range of values is 48 to 48
  3270                           ; switch strategies available:
  3271                           ; Name         Instructions Cycles
  3272                           ; simple_byte            4     3 (average)
  3273                           ;	Chosen strategy is simple_byte
  3274  001476  0A30               	xorlw	48	; case 48
  3275  001478  B4D8               	btfsc	status,2,c
  3276  00147A  D7F4               	goto	i2l1817
  3277                           
  3278                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3279                           
  3280                           ;doprnt.c: 586: }
  3281                           
  3282                           ;doprnt.c: 585: break;
  3283  00147C  C00D  FFF6         	movff	i2printf@f,tblptrl
  3284  001480  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3285  001484                     	if	0	;tblptru may be non-zero
  3286  001484                     	endif
  3287  001484                     	if	0	;tblptru may be non-zero
  3288  001484                     	endif
  3289  001484  0008               	tblrd		*
  3290  001486  50F5               	movf	tablat,w,c
  3291  001488  ECE2  F00E         	call	i2_isdigit
  3292  00148C  A0D8               	btfss	status,0,c
  3293  00148E  D035               	goto	i2l1839
  3294                           
  3295                           ;doprnt.c: 598: width = 0;
  3296  001490  0E00               	movlw	0
  3297  001492  6E21               	movwf	i2printf@width+1,c
  3298  001494  0E00               	movlw	0
  3299  001496  6E20               	movwf	i2printf@width,c
  3300  001498                     i2l1827:
  3301                           
  3302                           ;doprnt.c: 600: width *= 10;
  3303  001498  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
  3304  00149C  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3305  0014A0  0E00               	movlw	0
  3306  0014A2  6E04               	movwf	i2___wmul@multiplicand+1,c
  3307  0014A4  0E0A               	movlw	10
  3308  0014A6  6E03               	movwf	i2___wmul@multiplicand,c
  3309  0014A8  ECAD  F00E         	call	i2___wmul	;wreg free
  3310  0014AC  C001  F020         	movff	?i2___wmul,i2printf@width
  3311  0014B0  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
  3312                           
  3313                           ;doprnt.c: 601: width += *f++ - '0';
  3314  0014B4  0ED0               	movlw	208
  3315  0014B6  6E15               	movwf	??i2_printf& (0+255),c
  3316  0014B8  0EFF               	movlw	255
  3317  0014BA  6E16               	movwf	(??i2_printf+1)& (0+255),c
  3318  0014BC  C00D  FFF6         	movff	i2printf@f,tblptrl
  3319  0014C0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3320  0014C4                     	if	0	;tblptru may be non-zero
  3321  0014C4                     	endif
  3322  0014C4                     	if	0	;tblptru may be non-zero
  3323  0014C4                     	endif
  3324  0014C4  0008               	tblrd		*
  3325  0014C6  50F5               	movf	tablat,w,c
  3326  0014C8  6E17               	movwf	(??i2_printf+2)& (0+255),c
  3327  0014CA  6A18               	clrf	(??i2_printf+3)& (0+255),c
  3328  0014CC  5015               	movf	??i2_printf,w,c
  3329  0014CE  2617               	addwf	??i2_printf+2,f,c
  3330  0014D0  5016               	movf	??i2_printf+1,w,c
  3331  0014D2  2218               	addwfc	??i2_printf+3,f,c
  3332  0014D4  5017               	movf	??i2_printf+2,w,c
  3333  0014D6  2620               	addwf	i2printf@width,f,c
  3334  0014D8  5018               	movf	??i2_printf+3,w,c
  3335  0014DA  2221               	addwfc	i2printf@width+1,f,c
  3336  0014DC  4A0D               	infsnz	i2printf@f,f,c
  3337  0014DE  2A0E               	incf	i2printf@f+1,f,c
  3338                           
  3339                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3340  0014E0  C00D  FFF6         	movff	i2printf@f,tblptrl
  3341  0014E4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3342  0014E8                     	if	0	;tblptru may be non-zero
  3343  0014E8                     	endif
  3344  0014E8                     	if	0	;tblptru may be non-zero
  3345  0014E8                     	endif
  3346  0014E8  0008               	tblrd		*
  3347  0014EA  50F5               	movf	tablat,w,c
  3348  0014EC  ECE2  F00E         	call	i2_isdigit
  3349  0014F0  A0D8               	btfss	status,0,c
  3350  0014F2  D003               	goto	i2l1839
  3351  0014F4  D7D1               	goto	i2l1827
  3352  0014F6                     i2l1835:
  3353                           
  3354                           ;doprnt.c: 721: flag |= 0x80;
  3355  0014F6  8E1F               	bsf	i2printf@flag,7,c
  3356                           
  3357                           ;doprnt.c: 723: break;
  3358  0014F8  D017               	goto	i2l213
  3359  0014FA                     i2l1839:
  3360  0014FA  C00D  FFF6         	movff	i2printf@f,tblptrl
  3361  0014FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3362  001502  4A0D               	infsnz	i2printf@f,f,c
  3363  001504  2A0E               	incf	i2printf@f+1,f,c
  3364  001506                     	if	0	;tblptru may be non-zero
  3365  001506                     	endif
  3366  001506                     	if	0	;tblptru may be non-zero
  3367  001506                     	endif
  3368  001506  0008               	tblrd		*
  3369  001508  CFF5 F022          	movff	tablat,i2printf@c
  3370  00150C  5022               	movf	i2printf@c,w,c
  3371                           
  3372                           ; Switch size 1, requested type "space"
  3373                           ; Number of cases is 4, Range of values is 0 to 120
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; simple_byte           13     7 (average)
  3377                           ;	Chosen strategy is simple_byte
  3378  00150E  0A00               	xorlw	0	; case 0
  3379  001510  B4D8               	btfsc	status,2,c
  3380  001512  0012               	return	
  3381  001514  0A64               	xorlw	100	; case 100
  3382  001516  B4D8               	btfsc	status,2,c
  3383  001518  D007               	goto	i2l213
  3384  00151A  0A0D               	xorlw	13	; case 105
  3385  00151C  B4D8               	btfsc	status,2,c
  3386  00151E  D004               	goto	i2l213
  3387  001520  0A11               	xorlw	17	; case 120
  3388  001522  B4D8               	btfsc	status,2,c
  3389  001524  D7E8               	goto	i2l1835
  3390  001526  D103               	goto	i2l1937
  3391  001528                     i2l213:
  3392                           
  3393                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3394  001528  BE1F               	btfsc	i2printf@flag,7,c
  3395  00152A  D015               	goto	i2l1851
  3396                           
  3397                           ;doprnt.c: 1253: {
  3398                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3399  00152C  C01A  FFD9         	movff	i2printf@ap,fsr2l
  3400  001530  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
  3401  001534  CFDE F01D          	movff	postinc2,i2printf@val
  3402  001538  CFDD F01E          	movff	postdec2,i2printf@val+1
  3403  00153C  0E02               	movlw	2
  3404  00153E  261A               	addwf	i2printf@ap,f,c
  3405  001540  0E00               	movlw	0
  3406  001542  221B               	addwfc	i2printf@ap+1,f,c
  3407                           
  3408                           ;doprnt.c: 1261: if((int)val < 0) {
  3409  001544  AE1E               	btfss	i2printf@val+1,7,c
  3410  001546  D044               	goto	i2l1885
  3411                           
  3412                           ;doprnt.c: 1262: flag |= 0x03;
  3413  001548  0E03               	movlw	3
  3414  00154A  121F               	iorwf	i2printf@flag,f,c
  3415                           
  3416                           ;doprnt.c: 1263: val = -val;
  3417  00154C  6C1D               	negf	i2printf@val,c
  3418  00154E  1E1E               	comf	i2printf@val+1,f,c
  3419  001550  B0D8               	btfsc	status,0,c
  3420  001552  2A1E               	incf	i2printf@val+1,f,c
  3421                           
  3422                           ;doprnt.c: 1264: }
  3423                           ;doprnt.c: 1266: }
  3424  001554  D03D               	goto	i2l1885
  3425  001556                     i2l1851:
  3426                           
  3427                           ;doprnt.c: 1268: else
  3428                           ;doprnt.c: 1273: {
  3429                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3430  001556  C01A  FFD9         	movff	i2printf@ap,fsr2l
  3431  00155A  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
  3432  00155E  CFDE F01D          	movff	postinc2,i2printf@val
  3433  001562  CFDD F01E          	movff	postdec2,i2printf@val+1
  3434  001566  0E02               	movlw	2
  3435  001568  261A               	addwf	i2printf@ap,f,c
  3436  00156A  0E00               	movlw	0
  3437  00156C  221B               	addwfc	i2printf@ap+1,f,c
  3438                           
  3439                           ;doprnt.c: 1287: }
  3440                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3441  00156E  D030               	goto	i2l1885
  3442  001570                     i2l1855:
  3443                           
  3444                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3445  001570  0E01               	movlw	1
  3446  001572  6E22               	movwf	i2printf@c,c
  3447  001574                     i2l1857:
  3448  001574  0E05               	movlw	5
  3449  001576  1822               	xorwf	i2printf@c,w,c
  3450  001578  B4D8               	btfsc	status,2,c
  3451  00157A  D032               	goto	i2l1887
  3452                           
  3453                           ;doprnt.c: 1306: if(val < dpowers[c])
  3454  00157C  5022               	movf	i2printf@c,w,c
  3455  00157E  0D02               	mullw	2
  3456  001580  0E12               	movlw	low _dpowers
  3457  001582  24F3               	addwf	prodl,w,c
  3458  001584  6EF6               	movwf	tblptrl,c
  3459  001586  0E10               	movlw	high _dpowers
  3460  001588  20F4               	addwfc	prodh,w,c
  3461  00158A  6EF7               	movwf	tblptrh,c
  3462  00158C                     	if	0	;There are less than 3 active tblptr bytes
  3463  00158C                     	endif
  3464  00158C  0009               	tblrd		*+
  3465  00158E  50F5               	movf	tablat,w,c
  3466  001590  5C1D               	subwf	i2printf@val,w,c
  3467  001592  0009               	tblrd		*+
  3468  001594  50F5               	movf	tablat,w,c
  3469  001596  581E               	subwfb	i2printf@val+1,w,c
  3470  001598  A0D8               	btfss	status,0,c
  3471  00159A  D022               	goto	i2l1887
  3472                           
  3473                           ;doprnt.c: 1307: break;
  3474  00159C  2A22               	incf	i2printf@c,f,c
  3475  00159E  D7EA               	goto	i2l1857
  3476  0015A0                     i2l1869:
  3477                           
  3478                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3479  0015A0  0E01               	movlw	1
  3480  0015A2  6E22               	movwf	i2printf@c,c
  3481  0015A4                     i2l1871:
  3482  0015A4  0E04               	movlw	4
  3483  0015A6  1822               	xorwf	i2printf@c,w,c
  3484  0015A8  B4D8               	btfsc	status,2,c
  3485  0015AA  D01A               	goto	i2l1887
  3486                           
  3487                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3488  0015AC  5022               	movf	i2printf@c,w,c
  3489  0015AE  0D02               	mullw	2
  3490  0015B0  0E1C               	movlw	low _hexpowers
  3491  0015B2  24F3               	addwf	prodl,w,c
  3492  0015B4  6EF6               	movwf	tblptrl,c
  3493  0015B6  0E10               	movlw	high _hexpowers
  3494  0015B8  20F4               	addwfc	prodh,w,c
  3495  0015BA  6EF7               	movwf	tblptrh,c
  3496  0015BC                     	if	0	;There are less than 3 active tblptr bytes
  3497  0015BC                     	endif
  3498  0015BC  0009               	tblrd		*+
  3499  0015BE  50F5               	movf	tablat,w,c
  3500  0015C0  5C1D               	subwf	i2printf@val,w,c
  3501  0015C2  0009               	tblrd		*+
  3502  0015C4  50F5               	movf	tablat,w,c
  3503  0015C6  581E               	subwfb	i2printf@val+1,w,c
  3504  0015C8  A0D8               	btfss	status,0,c
  3505  0015CA  D00A               	goto	i2l1887
  3506                           
  3507                           ;doprnt.c: 1318: break;
  3508  0015CC  2A22               	incf	i2printf@c,f,c
  3509  0015CE  D7EA               	goto	i2l1871
  3510  0015D0                     i2l1885:
  3511  0015D0  501F               	movf	i2printf@flag,w,c
  3512  0015D2  0B80               	andlw	128
  3513                           
  3514                           ; Switch size 1, requested type "space"
  3515                           ; Number of cases is 2, Range of values is 0 to 128
  3516                           ; switch strategies available:
  3517                           ; Name         Instructions Cycles
  3518                           ; simple_byte            7     4 (average)
  3519                           ;	Chosen strategy is simple_byte
  3520  0015D4  0A00               	xorlw	0	; case 0
  3521  0015D6  B4D8               	btfsc	status,2,c
  3522  0015D8  D7CB               	goto	i2l1855
  3523  0015DA  0A80               	xorlw	128	; case 128
  3524  0015DC  B4D8               	btfsc	status,2,c
  3525  0015DE  D7E0               	goto	i2l1869
  3526  0015E0                     i2l1887:
  3527                           
  3528                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3529  0015E0  5020               	movf	i2printf@width,w,c
  3530  0015E2  1021               	iorwf	i2printf@width+1,w,c
  3531  0015E4  B4D8               	btfsc	status,2,c
  3532  0015E6  D009               	goto	i2l1893
  3533  0015E8  C01F  F015         	movff	i2printf@flag,??i2_printf
  3534  0015EC  0E03               	movlw	3
  3535  0015EE  1615               	andwf	??i2_printf,f,c
  3536  0015F0  B4D8               	btfsc	status,2,c
  3537  0015F2  D003               	goto	i2l1893
  3538                           
  3539                           ;doprnt.c: 1346: width--;
  3540  0015F4  0620               	decf	i2printf@width,f,c
  3541  0015F6  A0D8               	btfss	status,0,c
  3542  0015F8  0621               	decf	i2printf@width+1,f,c
  3543  0015FA                     i2l1893:
  3544                           
  3545                           ;doprnt.c: 1381: if(width > c)
  3546  0015FA  0E80               	movlw	128
  3547  0015FC  BE22               	btfsc	i2printf@c,7,c
  3548  0015FE  0E7F               	movlw	127
  3549  001600  6E15               	movwf	??i2_printf& (0+255),c
  3550  001602  5020               	movf	i2printf@width,w,c
  3551  001604  5C22               	subwf	i2printf@c,w,c
  3552  001606  5021               	movf	i2printf@width+1,w,c
  3553  001608  0A80               	xorlw	128
  3554  00160A  5815               	subwfb	??i2_printf& (0+255),w,c
  3555  00160C  B0D8               	btfsc	status,0,c
  3556  00160E  D007               	goto	i2l1897
  3557                           
  3558                           ;doprnt.c: 1382: width -= c;
  3559  001610  5022               	movf	i2printf@c,w,c
  3560  001612  5E20               	subwf	i2printf@width,f,c
  3561  001614  0E00               	movlw	0
  3562  001616  BE22               	btfsc	i2printf@c,7,c
  3563  001618  0EFF               	movlw	255
  3564  00161A  5A21               	subwfb	i2printf@width+1,f,c
  3565  00161C  D004               	goto	i2l1899
  3566  00161E                     i2l1897:
  3567                           
  3568                           ;doprnt.c: 1383: else
  3569                           ;doprnt.c: 1384: width = 0;
  3570  00161E  0E00               	movlw	0
  3571  001620  6E21               	movwf	i2printf@width+1,c
  3572  001622  0E00               	movlw	0
  3573  001624  6E20               	movwf	i2printf@width,c
  3574  001626                     i2l1899:
  3575                           
  3576                           ;doprnt.c: 1387: if(flag & 0x04) {
  3577  001626  A41F               	btfss	i2printf@flag,2,c
  3578  001628  D014               	goto	i2l1911
  3579                           
  3580                           ;doprnt.c: 1392: if(flag & 0x03)
  3581  00162A  C01F  F015         	movff	i2printf@flag,??i2_printf
  3582  00162E  0E03               	movlw	3
  3583  001630  1615               	andwf	??i2_printf,f,c
  3584  001632  B4D8               	btfsc	status,2,c
  3585  001634  D003               	goto	i2l1905
  3586                           
  3587                           ;doprnt.c: 1393: (putch('-') );
  3588  001636  0E2D               	movlw	45
  3589  001638  EC0D  F00F         	call	i2_putch
  3590  00163C                     i2l1905:
  3591                           
  3592                           ;doprnt.c: 1415: if(width)
  3593  00163C  5020               	movf	i2printf@width,w,c
  3594  00163E  1021               	iorwf	i2printf@width+1,w,c
  3595  001640  B4D8               	btfsc	status,2,c
  3596  001642  D01E               	goto	i2l1921
  3597                           
  3598                           ;doprnt.c: 1417: (putch('0') );
  3599                           
  3600                           ;doprnt.c: 1416: do
  3601  001644  0E30               	movlw	48
  3602  001646  EC0D  F00F         	call	i2_putch
  3603                           
  3604                           ;doprnt.c: 1418: while(--width);
  3605  00164A  0620               	decf	i2printf@width,f,c
  3606  00164C  A0D8               	btfss	status,0,c
  3607  00164E  0621               	decf	i2printf@width+1,f,c
  3608  001650  D7F5               	goto	i2l1905
  3609  001652                     i2l1911:
  3610                           
  3611                           ;doprnt.c: 1422: {
  3612                           ;doprnt.c: 1424: if(width
  3613                           ;doprnt.c: 1428: )
  3614  001652  5020               	movf	i2printf@width,w,c
  3615  001654  1021               	iorwf	i2printf@width+1,w,c
  3616  001656  B4D8               	btfsc	status,2,c
  3617  001658  D00A               	goto	i2l1917
  3618  00165A                     i2l1913:
  3619                           
  3620                           ;doprnt.c: 1430: (putch(' ') );
  3621  00165A  0E20               	movlw	32
  3622  00165C  EC0D  F00F         	call	i2_putch
  3623                           
  3624                           ;doprnt.c: 1431: while(--width);
  3625  001660  0620               	decf	i2printf@width,f,c
  3626  001662  A0D8               	btfss	status,0,c
  3627  001664  0621               	decf	i2printf@width+1,f,c
  3628  001666  5020               	movf	i2printf@width,w,c
  3629  001668  1021               	iorwf	i2printf@width+1,w,c
  3630  00166A  A4D8               	btfss	status,2,c
  3631  00166C  D7F6               	goto	i2l1913
  3632  00166E                     i2l1917:
  3633                           
  3634                           ;doprnt.c: 1438: if(flag & 0x03)
  3635  00166E  C01F  F015         	movff	i2printf@flag,??i2_printf
  3636  001672  0E03               	movlw	3
  3637  001674  1615               	andwf	??i2_printf,f,c
  3638  001676  B4D8               	btfsc	status,2,c
  3639  001678  D003               	goto	i2l1921
  3640                           
  3641                           ;doprnt.c: 1439: (putch('-') );
  3642  00167A  0E2D               	movlw	45
  3643  00167C  EC0D  F00F         	call	i2_putch
  3644  001680                     i2l1921:
  3645                           
  3646                           ;doprnt.c: 1469: }
  3647                           ;doprnt.c: 1472: prec = c;
  3648  001680  C022  F01C         	movff	i2printf@c,i2printf@prec
  3649                           
  3650                           ;doprnt.c: 1474: while(prec--) {
  3651  001684  D050               	goto	i2l1935
  3652  001686                     i2l1923:
  3653                           
  3654                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3655  001686  501C               	movf	i2printf@prec,w,c
  3656  001688  0D02               	mullw	2
  3657  00168A  0E12               	movlw	low _dpowers
  3658  00168C  24F3               	addwf	prodl,w,c
  3659  00168E  6EF6               	movwf	tblptrl,c
  3660  001690  0E10               	movlw	high _dpowers
  3661  001692  20F4               	addwfc	prodh,w,c
  3662  001694  6EF7               	movwf	tblptrh,c
  3663  001696                     	if	0	;There are less than 3 active tblptr bytes
  3664  001696                     	endif
  3665  001696  0009               	tblrd		*+
  3666  001698  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3667  00169C  000A               	tblrd		*-
  3668  00169E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3669  0016A2  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3670  0016A6  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3671  0016AA  ECB4  F00D         	call	i2___lwdiv	;wreg free
  3672  0016AE  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3673  0016B2  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3674  0016B6  0E00               	movlw	0
  3675  0016B8  6E0B               	movwf	i2___lwmod@divisor+1,c
  3676  0016BA  0E0A               	movlw	10
  3677  0016BC  6E0A               	movwf	i2___lwmod@divisor,c
  3678  0016BE  EC79  F00E         	call	i2___lwmod	;wreg free
  3679  0016C2  5008               	movf	?i2___lwmod,w,c
  3680  0016C4  0F30               	addlw	48
  3681  0016C6  6E22               	movwf	i2printf@c,c
  3682                           
  3683                           ;doprnt.c: 1491: break;
  3684  0016C8  D02B               	goto	i2l1933
  3685  0016CA                     i2l1925:
  3686                           
  3687                           ;doprnt.c: 1499: {
  3688                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3689  0016CA  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3690  0016CE  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3691  0016D2  501C               	movf	i2printf@prec,w,c
  3692  0016D4  0D02               	mullw	2
  3693  0016D6  0E1C               	movlw	low _hexpowers
  3694  0016D8  24F3               	addwf	prodl,w,c
  3695  0016DA  6EF6               	movwf	tblptrl,c
  3696  0016DC  0E10               	movlw	high _hexpowers
  3697  0016DE  20F4               	addwfc	prodh,w,c
  3698  0016E0  6EF7               	movwf	tblptrh,c
  3699  0016E2                     	if	0	;There are less than 3 active tblptr bytes
  3700  0016E2                     	endif
  3701  0016E2  0009               	tblrd		*+
  3702  0016E4  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3703  0016E8  000A               	tblrd		*-
  3704  0016EA  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3705  0016EE  ECB4  F00D         	call	i2___lwdiv	;wreg free
  3706  0016F2  5001               	movf	?i2___lwdiv,w,c
  3707  0016F4  0B0F               	andlw	15
  3708  0016F6  6E19               	movwf	i2printf@idx,c
  3709                           
  3710                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3711  0016F8  5019               	movf	i2printf@idx,w,c
  3712  0016FA  0D01               	mullw	1
  3713  0016FC  0E59               	movlw	low STR_6
  3714  0016FE  24F3               	addwf	prodl,w,c
  3715  001700  6EF6               	movwf	tblptrl,c
  3716  001702  0E10               	movlw	high STR_6
  3717  001704  20F4               	addwfc	prodh,w,c
  3718  001706  6EF7               	movwf	tblptrh,c
  3719  001708                     	if	0	;There are less than 3 active tblptr bytes
  3720  001708                     	endif
  3721  001708  0008               	tblrd		*
  3722  00170A  CFF5 F022          	movff	tablat,i2printf@c
  3723                           
  3724                           ;doprnt.c: 1523: }
  3725                           
  3726                           ;doprnt.c: 1508: }
  3727                           ;doprnt.c: 1510: break;
  3728  00170E  D008               	goto	i2l1933
  3729  001710                     i2l1931:
  3730  001710  501F               	movf	i2printf@flag,w,c
  3731  001712  0B80               	andlw	128
  3732                           
  3733                           ; Switch size 1, requested type "space"
  3734                           ; Number of cases is 2, Range of values is 0 to 128
  3735                           ; switch strategies available:
  3736                           ; Name         Instructions Cycles
  3737                           ; simple_byte            7     4 (average)
  3738                           ;	Chosen strategy is simple_byte
  3739  001714  0A00               	xorlw	0	; case 0
  3740  001716  B4D8               	btfsc	status,2,c
  3741  001718  D7B6               	goto	i2l1923
  3742  00171A  0A80               	xorlw	128	; case 128
  3743  00171C  B4D8               	btfsc	status,2,c
  3744  00171E  D7D5               	goto	i2l1925
  3745  001720                     i2l1933:
  3746                           
  3747                           ;doprnt.c: 1524: (putch(c) );
  3748  001720  5022               	movf	i2printf@c,w,c
  3749  001722  EC0D  F00F         	call	i2_putch
  3750  001726                     i2l1935:
  3751  001726  061C               	decf	i2printf@prec,f,c
  3752  001728  281C               	incf	i2printf@prec,w,c
  3753  00172A  A4D8               	btfss	status,2,c
  3754  00172C  D7F1               	goto	i2l1931
  3755  00172E                     i2l1937:
  3756  00172E  C00D  FFF6         	movff	i2printf@f,tblptrl
  3757  001732  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3758  001736  4A0D               	infsnz	i2printf@f,f,c
  3759  001738  2A0E               	incf	i2printf@f+1,f,c
  3760  00173A                     	if	0	;tblptru may be non-zero
  3761  00173A                     	endif
  3762  00173A                     	if	0	;tblptru may be non-zero
  3763  00173A                     	endif
  3764  00173A  0008               	tblrd		*
  3765  00173C  CFF5 F022          	movff	tablat,i2printf@c
  3766  001740  5022               	movf	i2printf@c,w,c
  3767  001742  B4D8               	btfsc	status,2,c
  3768  001744  0012               	return	
  3769  001746  D67F               	goto	i2l1811
  3770  001748                     __end_ofi2_printf:
  3771                           	opt stack 0
  3772                           pclatu	equ	0xFFB
  3773                           pclath	equ	0xFFA
  3774                           tblptru	equ	0xFF8
  3775                           tblptrh	equ	0xFF7
  3776                           tblptrl	equ	0xFF6
  3777                           tablat	equ	0xFF5
  3778                           prodh	equ	0xFF4
  3779                           prodl	equ	0xFF3
  3780                           intcon	equ	0xFF2
  3781                           intcon2	equ	0xFF1
  3782                           intcon3	equ	0xFF0
  3783                           fsr0h	equ	0xFEA
  3784                           fsr0l	equ	0xFE9
  3785                           wreg	equ	0xFE8
  3786                           fsr1h	equ	0xFE2
  3787                           fsr1l	equ	0xFE1
  3788                           indf2	equ	0xFDF
  3789                           postinc2	equ	0xFDE
  3790                           postdec2	equ	0xFDD
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function i2_putch *****************
  3796 ;; Defined at:
  3797 ;;		line 31 in file "lcd.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;  data            1    wreg     unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  data            1    2[COMRAM] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:        1 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    1
  3818 ;; This function calls:
  3819 ;;		i2_lcdNibble
  3820 ;; This function is called by:
  3821 ;;		i2_printf
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text17
  3826  001E1A                     __ptext17:
  3827                           	opt stack 0
  3828  001E1A                     i2_putch:
  3829                           	opt stack 22
  3830                           
  3831                           ;incstack = 0
  3832                           ;i2putch@data stored from wreg
  3833  001E1A  6E03               	movwf	i2putch@data,c
  3834                           
  3835                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3836  001E1C  848C               	bsf	3980,2,c	;volatile
  3837                           
  3838                           ;lcd.c: 33: lcdNibble(data);
  3839  001E1E  5003               	movf	i2putch@data,w,c
  3840  001E20  EC2C  F00E         	call	i2_lcdNibble
  3841  001E24  0012               	return		;funcret
  3842  001E26                     __end_ofi2_putch:
  3843                           	opt stack 0
  3844                           pclatu	equ	0xFFB
  3845                           pclath	equ	0xFFA
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           intcon2	equ	0xFF1
  3854                           intcon3	equ	0xFF0
  3855                           fsr0h	equ	0xFEA
  3856                           fsr0l	equ	0xFE9
  3857                           wreg	equ	0xFE8
  3858                           fsr1h	equ	0xFE2
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function i2_isdigit *****************
  3868 ;; Defined at:
  3869 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  c               1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  c               1    2[COMRAM] unsigned char 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;		None               void
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        3 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		i2_printf
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text18
  3897  001DC4                     __ptext18:
  3898                           	opt stack 0
  3899  001DC4                     i2_isdigit:
  3900                           	opt stack 23
  3901                           
  3902                           ;incstack = 0
  3903                           ;i2isdigit@c stored from wreg
  3904  001DC4  6E03               	movwf	i2isdigit@c,c
  3905  001DC6  0E00               	movlw	0
  3906  001DC8  6E02               	movwf	i2_isdigit$491,c
  3907  001DCA  0E3A               	movlw	58
  3908  001DCC  6003               	cpfslt	i2isdigit@c,c
  3909  001DCE  D005               	goto	i2l1603
  3910  001DD0  0E2F               	movlw	47
  3911  001DD2  6403               	cpfsgt	i2isdigit@c,c
  3912  001DD4  D002               	goto	i2l1603
  3913  001DD6  0E01               	movlw	1
  3914  001DD8  6E02               	movwf	i2_isdigit$491,c
  3915  001DDA                     i2l1603:
  3916  001DDA  C002  F001         	movff	i2_isdigit$491,??i2_isdigit
  3917  001DDE  3001               	rrcf	??i2_isdigit,w,c
  3918  001DE0  0012               	return	
  3919  001DE2                     __end_ofi2_isdigit:
  3920                           	opt stack 0
  3921                           pclatu	equ	0xFFB
  3922                           pclath	equ	0xFFA
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           intcon2	equ	0xFF1
  3931                           intcon3	equ	0xFF0
  3932                           fsr0h	equ	0xFEA
  3933                           fsr0l	equ	0xFE9
  3934                           wreg	equ	0xFE8
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function i2___wmul *****************
  3945 ;; Defined at:
  3946 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  multiplier      2    0[COMRAM] unsigned int 
  3949 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  __wmul          2    4[COMRAM] unsigned int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  2    0[COMRAM] unsigned int 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0, prodl, prodh
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;Total ram usage:        6 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		i2_printf
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text19
  3975  001D5A                     __ptext19:
  3976                           	opt stack 0
  3977  001D5A                     i2___wmul:
  3978                           	opt stack 23
  3979                           
  3980                           ;incstack = 0
  3981  001D5A  5001               	movf	i2___wmul@multiplier,w,c
  3982  001D5C  0203               	mulwf	i2___wmul@multiplicand,c
  3983  001D5E  CFF3 F005          	movff	prodl,i2___wmul@product
  3984  001D62  CFF4 F006          	movff	prodh,i2___wmul@product+1
  3985  001D66  5001               	movf	i2___wmul@multiplier,w,c
  3986  001D68  0204               	mulwf	i2___wmul@multiplicand+1,c
  3987  001D6A  50F3               	movf	prodl,w,c
  3988  001D6C  2606               	addwf	i2___wmul@product+1,f,c
  3989  001D6E  5002               	movf	i2___wmul@multiplier+1,w,c
  3990  001D70  0203               	mulwf	i2___wmul@multiplicand,c
  3991  001D72  50F3               	movf	prodl,w,c
  3992  001D74  2606               	addwf	i2___wmul@product+1,f,c
  3993  001D76  C005  F001         	movff	i2___wmul@product,?i2___wmul
  3994  001D7A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  3995  001D7E  0012               	return	
  3996  001D80                     __end_ofi2___wmul:
  3997                           	opt stack 0
  3998                           pclatu	equ	0xFFB
  3999                           pclath	equ	0xFFA
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           intcon3	equ	0xFF0
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           fsr1h	equ	0xFE2
  4013                           fsr1l	equ	0xFE1
  4014                           indf2	equ	0xFDF
  4015                           postinc2	equ	0xFDE
  4016                           postdec2	equ	0xFDD
  4017                           fsr2h	equ	0xFDA
  4018                           fsr2l	equ	0xFD9
  4019                           status	equ	0xFD8
  4020                           
  4021 ;; *************** function i2___lwmod *****************
  4022 ;; Defined at:
  4023 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  dividend        2    7[COMRAM] unsigned int 
  4026 ;;  divisor         2    9[COMRAM] unsigned int 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  2    7[COMRAM] unsigned int 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;Total ram usage:        5 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		i2_printf
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text20
  4052  001CF2                     __ptext20:
  4053                           	opt stack 0
  4054  001CF2                     i2___lwmod:
  4055                           	opt stack 23
  4056                           
  4057                           ;incstack = 0
  4058  001CF2  500A               	movf	i2___lwmod@divisor,w,c
  4059  001CF4  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4060  001CF6  B4D8               	btfsc	status,2,c
  4061  001CF8  D018               	goto	i2l668
  4062  001CFA  0E01               	movlw	1
  4063  001CFC  6E0C               	movwf	i2___lwmod@counter,c
  4064  001CFE  D004               	goto	i2l1635
  4065  001D00                     i2l1633:
  4066  001D00  90D8               	bcf	status,0,c
  4067  001D02  360A               	rlcf	i2___lwmod@divisor,f,c
  4068  001D04  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4069  001D06  2A0C               	incf	i2___lwmod@counter,f,c
  4070  001D08                     i2l1635:
  4071  001D08  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4072  001D0A  D7FA               	goto	i2l1633
  4073  001D0C                     i2l1637:
  4074  001D0C  500A               	movf	i2___lwmod@divisor,w,c
  4075  001D0E  5C08               	subwf	i2___lwmod@dividend,w,c
  4076  001D10  500B               	movf	i2___lwmod@divisor+1,w,c
  4077  001D12  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4078  001D14  A0D8               	btfss	status,0,c
  4079  001D16  D004               	goto	i2l1641
  4080  001D18  500A               	movf	i2___lwmod@divisor,w,c
  4081  001D1A  5E08               	subwf	i2___lwmod@dividend,f,c
  4082  001D1C  500B               	movf	i2___lwmod@divisor+1,w,c
  4083  001D1E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4084  001D20                     i2l1641:
  4085  001D20  90D8               	bcf	status,0,c
  4086  001D22  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4087  001D24  320A               	rrcf	i2___lwmod@divisor,f,c
  4088  001D26  2E0C               	decfsz	i2___lwmod@counter,f,c
  4089  001D28  D7F1               	goto	i2l1637
  4090  001D2A                     i2l668:
  4091  001D2A  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4092  001D2E  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4093  001D32  0012               	return		;funcret
  4094  001D34                     __end_ofi2___lwmod:
  4095                           	opt stack 0
  4096                           pclatu	equ	0xFFB
  4097                           pclath	equ	0xFFA
  4098                           tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           prodh	equ	0xFF4
  4103                           prodl	equ	0xFF3
  4104                           intcon	equ	0xFF2
  4105                           intcon2	equ	0xFF1
  4106                           intcon3	equ	0xFF0
  4107                           fsr0h	equ	0xFEA
  4108                           fsr0l	equ	0xFE9
  4109                           wreg	equ	0xFE8
  4110                           fsr1h	equ	0xFE2
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function i2___lwdiv *****************
  4120 ;; Defined at:
  4121 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  dividend        2    0[COMRAM] unsigned int 
  4124 ;;  divisor         2    2[COMRAM] unsigned int 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4127 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  2    0[COMRAM] unsigned int 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;Total ram usage:        7 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		i2_printf
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text21
  4151  001B68                     __ptext21:
  4152                           	opt stack 0
  4153  001B68                     i2___lwdiv:
  4154                           	opt stack 23
  4155                           
  4156                           ;incstack = 0
  4157  001B68  0E00               	movlw	0
  4158  001B6A  6E06               	movwf	i2___lwdiv@quotient+1,c
  4159  001B6C  0E00               	movlw	0
  4160  001B6E  6E05               	movwf	i2___lwdiv@quotient,c
  4161  001B70  5003               	movf	i2___lwdiv@divisor,w,c
  4162  001B72  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4163  001B74  B4D8               	btfsc	status,2,c
  4164  001B76  D01C               	goto	i2l658
  4165  001B78  0E01               	movlw	1
  4166  001B7A  6E07               	movwf	i2___lwdiv@counter,c
  4167  001B7C  D004               	goto	i2l1615
  4168  001B7E                     i2l1613:
  4169  001B7E  90D8               	bcf	status,0,c
  4170  001B80  3603               	rlcf	i2___lwdiv@divisor,f,c
  4171  001B82  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4172  001B84  2A07               	incf	i2___lwdiv@counter,f,c
  4173  001B86                     i2l1615:
  4174  001B86  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4175  001B88  D7FA               	goto	i2l1613
  4176  001B8A                     i2l1617:
  4177  001B8A  90D8               	bcf	status,0,c
  4178  001B8C  3605               	rlcf	i2___lwdiv@quotient,f,c
  4179  001B8E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4180  001B90  5003               	movf	i2___lwdiv@divisor,w,c
  4181  001B92  5C01               	subwf	i2___lwdiv@dividend,w,c
  4182  001B94  5004               	movf	i2___lwdiv@divisor+1,w,c
  4183  001B96  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4184  001B98  A0D8               	btfss	status,0,c
  4185  001B9A  D005               	goto	i2l1625
  4186  001B9C  5003               	movf	i2___lwdiv@divisor,w,c
  4187  001B9E  5E01               	subwf	i2___lwdiv@dividend,f,c
  4188  001BA0  5004               	movf	i2___lwdiv@divisor+1,w,c
  4189  001BA2  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4190  001BA4  8005               	bsf	i2___lwdiv@quotient,0,c
  4191  001BA6                     i2l1625:
  4192  001BA6  90D8               	bcf	status,0,c
  4193  001BA8  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4194  001BAA  3203               	rrcf	i2___lwdiv@divisor,f,c
  4195  001BAC  2E07               	decfsz	i2___lwdiv@counter,f,c
  4196  001BAE  D7ED               	goto	i2l1617
  4197  001BB0                     i2l658:
  4198  001BB0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4199  001BB4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4200  001BB8  0012               	return		;funcret
  4201  001BBA                     __end_ofi2___lwdiv:
  4202                           	opt stack 0
  4203                           pclatu	equ	0xFFB
  4204                           pclath	equ	0xFFA
  4205                           tblptru	equ	0xFF8
  4206                           tblptrh	equ	0xFF7
  4207                           tblptrl	equ	0xFF6
  4208                           tablat	equ	0xFF5
  4209                           prodh	equ	0xFF4
  4210                           prodl	equ	0xFF3
  4211                           intcon	equ	0xFF2
  4212                           intcon2	equ	0xFF1
  4213                           intcon3	equ	0xFF0
  4214                           fsr0h	equ	0xFEA
  4215                           fsr0l	equ	0xFE9
  4216                           wreg	equ	0xFE8
  4217                           fsr1h	equ	0xFE2
  4218                           fsr1l	equ	0xFE1
  4219                           indf2	equ	0xFDF
  4220                           postinc2	equ	0xFDE
  4221                           postdec2	equ	0xFDD
  4222                           fsr2h	equ	0xFDA
  4223                           fsr2l	equ	0xFD9
  4224                           status	equ	0xFD8
  4225                           
  4226 ;; *************** function i2_lcdInst *****************
  4227 ;; Defined at:
  4228 ;;		line 26 in file "lcd.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  data            1    wreg     unsigned char 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  data            1    2[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;Total ram usage:        1 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    1
  4249 ;; This function calls:
  4250 ;;		i2_lcdNibble
  4251 ;; This function is called by:
  4252 ;;		_isr
  4253 ;;		_disp_time
  4254 ;;		i2_standby
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text22
  4259  001E26                     __ptext22:
  4260                           	opt stack 0
  4261  001E26                     i2_lcdInst:
  4262                           	opt stack 23
  4263                           
  4264                           ;incstack = 0
  4265                           ;i2lcdInst@data stored from wreg
  4266  001E26  6E03               	movwf	i2lcdInst@data,c
  4267                           
  4268                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4269  001E28  948C               	bcf	3980,2,c	;volatile
  4270                           
  4271                           ;lcd.c: 28: lcdNibble(data);
  4272  001E2A  5003               	movf	i2lcdInst@data,w,c
  4273  001E2C  EC2C  F00E         	call	i2_lcdNibble
  4274  001E30  0012               	return		;funcret
  4275  001E32                     __end_ofi2_lcdInst:
  4276                           	opt stack 0
  4277                           pclatu	equ	0xFFB
  4278                           pclath	equ	0xFFA
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           intcon	equ	0xFF2
  4286                           intcon2	equ	0xFF1
  4287                           intcon3	equ	0xFF0
  4288                           fsr0h	equ	0xFEA
  4289                           fsr0l	equ	0xFE9
  4290                           wreg	equ	0xFE8
  4291                           fsr1h	equ	0xFE2
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           fsr2h	equ	0xFDA
  4297                           fsr2l	equ	0xFD9
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function i2_lcdNibble *****************
  4301 ;; Defined at:
  4302 ;;		line 36 in file "lcd.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  data            1    wreg     unsigned char 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  data            1    1[COMRAM] unsigned char 
  4307 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, status,2, status,0
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;Total ram usage:        2 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		i2_lcdInst
  4327 ;;		i2_putch
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text23
  4332  001C58                     __ptext23:
  4333                           	opt stack 0
  4334  001C58                     i2_lcdNibble:
  4335                           	opt stack 22
  4336                           
  4337                           ;incstack = 0
  4338                           ;i2lcdNibble@data stored from wreg
  4339  001C58  6E02               	movwf	i2lcdNibble@data,c
  4340                           
  4341                           ;lcd.c: 38: char temp = data & 0xF0;
  4342  001C5A  5002               	movf	i2lcdNibble@data,w,c
  4343  001C5C  0BF0               	andlw	240
  4344  001C5E  6E01               	movwf	i2lcdNibble@temp,c
  4345                           
  4346                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4347  001C60  508C               	movf	3980,w,c	;volatile
  4348  001C62  0B0F               	andlw	15
  4349  001C64  6E8C               	movwf	3980,c	;volatile
  4350                           
  4351                           ;lcd.c: 40: LATD = temp | LATD;
  4352  001C66  5001               	movf	i2lcdNibble@temp,w,c
  4353  001C68  108C               	iorwf	3980,w,c	;volatile
  4354  001C6A  6E8C               	movwf	3980,c	;volatile
  4355                           
  4356                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4357  001C6C  968C               	bcf	3980,3,c	;volatile
  4358                           
  4359                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4360  001C6E  0E19               	movlw	25
  4361  001C70                     i2u168_47:
  4362  001C70  2EE8               	decfsz	wreg,f,c
  4363  001C72  D7FE               	bra	i2u168_47
  4364                           
  4365                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4366  001C74  868C               	bsf	3980,3,c	;volatile
  4367                           
  4368                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4369  001C76  0E19               	movlw	25
  4370  001C78                     i2u169_47:
  4371  001C78  2EE8               	decfsz	wreg,f,c
  4372  001C7A  D7FE               	bra	i2u169_47
  4373                           
  4374                           ;lcd.c: 47: data = data << 4;
  4375  001C7C  3802               	swapf	i2lcdNibble@data,w,c
  4376  001C7E  0BF0               	andlw	240
  4377  001C80  6E02               	movwf	i2lcdNibble@data,c
  4378                           
  4379                           ;lcd.c: 49: temp = data & 0xF0;
  4380  001C82  5002               	movf	i2lcdNibble@data,w,c
  4381  001C84  0BF0               	andlw	240
  4382  001C86  6E01               	movwf	i2lcdNibble@temp,c
  4383                           
  4384                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4385  001C88  508C               	movf	3980,w,c	;volatile
  4386  001C8A  0B0F               	andlw	15
  4387  001C8C  6E8C               	movwf	3980,c	;volatile
  4388                           
  4389                           ;lcd.c: 51: LATD = temp | LATD;
  4390  001C8E  5001               	movf	i2lcdNibble@temp,w,c
  4391  001C90  108C               	iorwf	3980,w,c	;volatile
  4392  001C92  6E8C               	movwf	3980,c	;volatile
  4393                           
  4394                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4395  001C94  968C               	bcf	3980,3,c	;volatile
  4396                           
  4397                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4398  001C96  0E19               	movlw	25
  4399  001C98                     i2u170_47:
  4400  001C98  2EE8               	decfsz	wreg,f,c
  4401  001C9A  D7FE               	bra	i2u170_47
  4402                           
  4403                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4404  001C9C  868C               	bsf	3980,3,c	;volatile
  4405                           
  4406                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4407  001C9E  0E19               	movlw	25
  4408  001CA0                     i2u171_47:
  4409  001CA0  2EE8               	decfsz	wreg,f,c
  4410  001CA2  D7FE               	bra	i2u171_47
  4411  001CA4  0012               	return		;funcret
  4412  001CA6                     __end_ofi2_lcdNibble:
  4413                           	opt stack 0
  4414                           pclatu	equ	0xFFB
  4415                           pclath	equ	0xFFA
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           intcon2	equ	0xFF1
  4424                           intcon3	equ	0xFF0
  4425                           fsr0h	equ	0xFEA
  4426                           fsr0l	equ	0xFE9
  4427                           wreg	equ	0xFE8
  4428                           fsr1h	equ	0xFE2
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function _I2C_Master_Write *****************
  4438 ;; Defined at:
  4439 ;;		line 47 in file "I2C.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  d               2    1[COMRAM] unsigned int 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;Total ram usage:        2 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    1
  4460 ;; This function calls:
  4461 ;;		_I2C_Master_Wait
  4462 ;; This function is called by:
  4463 ;;		_disp_time
  4464 ;;		_set_time
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text24
  4469  001E32                     __ptext24:
  4470                           	opt stack 0
  4471  001E32                     _I2C_Master_Write:
  4472                           	opt stack 23
  4473                           
  4474                           ;I2C.c: 49: I2C_Master_Wait();
  4475                           
  4476                           ;incstack = 0
  4477  001E32  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4478                           
  4479                           ;I2C.c: 50: SSPBUF = d;
  4480  001E36  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4481  001E3A  0012               	return		;funcret
  4482  001E3C                     __end_of_I2C_Master_Write:
  4483                           	opt stack 0
  4484                           pclatu	equ	0xFFB
  4485                           pclath	equ	0xFFA
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           intcon	equ	0xFF2
  4493                           intcon2	equ	0xFF1
  4494                           intcon3	equ	0xFF0
  4495                           fsr0h	equ	0xFEA
  4496                           fsr0l	equ	0xFE9
  4497                           wreg	equ	0xFE8
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           postinc2	equ	0xFDE
  4502                           postdec2	equ	0xFDD
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _I2C_Master_Stop *****************
  4508 ;; Defined at:
  4509 ;;		line 41 in file "I2C.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        0 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    1
  4530 ;; This function calls:
  4531 ;;		_I2C_Master_Wait
  4532 ;; This function is called by:
  4533 ;;		_disp_time
  4534 ;;		_set_time
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text25
  4539  001E3C                     __ptext25:
  4540                           	opt stack 0
  4541  001E3C                     _I2C_Master_Stop:
  4542                           	opt stack 23
  4543                           
  4544                           ;I2C.c: 43: I2C_Master_Wait();
  4545                           
  4546                           ;incstack = 0
  4547  001E3C  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4548                           
  4549                           ;I2C.c: 44: PEN = 1;
  4550  001E40  84C5               	bsf	4037,2,c	;volatile
  4551  001E42  0012               	return		;funcret
  4552  001E44                     __end_of_I2C_Master_Stop:
  4553                           	opt stack 0
  4554                           pclatu	equ	0xFFB
  4555                           pclath	equ	0xFFA
  4556                           tblptru	equ	0xFF8
  4557                           tblptrh	equ	0xFF7
  4558                           tblptrl	equ	0xFF6
  4559                           tablat	equ	0xFF5
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           intcon2	equ	0xFF1
  4564                           intcon3	equ	0xFF0
  4565                           fsr0h	equ	0xFEA
  4566                           fsr0l	equ	0xFE9
  4567                           wreg	equ	0xFE8
  4568                           fsr1h	equ	0xFE2
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           fsr2h	equ	0xFDA
  4574                           fsr2l	equ	0xFD9
  4575                           status	equ	0xFD8
  4576                           
  4577 ;; *************** function _I2C_Master_Start *****************
  4578 ;; Defined at:
  4579 ;;		line 29 in file "I2C.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;		None
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;		None
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  1    wreg      void 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;Total ram usage:        0 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    1
  4600 ;; This function calls:
  4601 ;;		_I2C_Master_Wait
  4602 ;; This function is called by:
  4603 ;;		_disp_time
  4604 ;;		_set_time
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text26
  4609  001E44                     __ptext26:
  4610                           	opt stack 0
  4611  001E44                     _I2C_Master_Start:
  4612                           	opt stack 23
  4613                           
  4614                           ;I2C.c: 31: I2C_Master_Wait();
  4615                           
  4616                           ;incstack = 0
  4617  001E44  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4618                           
  4619                           ;I2C.c: 32: SEN = 1;
  4620  001E48  80C5               	bsf	4037,0,c	;volatile
  4621  001E4A  0012               	return		;funcret
  4622  001E4C                     __end_of_I2C_Master_Start:
  4623                           	opt stack 0
  4624                           pclatu	equ	0xFFB
  4625                           pclath	equ	0xFFA
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           intcon	equ	0xFF2
  4633                           intcon2	equ	0xFF1
  4634                           intcon3	equ	0xFF0
  4635                           fsr0h	equ	0xFEA
  4636                           fsr0l	equ	0xFE9
  4637                           wreg	equ	0xFE8
  4638                           fsr1h	equ	0xFE2
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function _I2C_Master_Read *****************
  4648 ;; Defined at:
  4649 ;;		line 53 in file "I2C.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  a               1    wreg     unsigned char 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  a               1    1[COMRAM] unsigned char 
  4654 ;;  temp            1    2[COMRAM] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      unsigned char 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;Total ram usage:        2 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    1
  4671 ;; This function calls:
  4672 ;;		_I2C_Master_Wait
  4673 ;; This function is called by:
  4674 ;;		_disp_time
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text27
  4679  001D80                     __ptext27:
  4680                           	opt stack 0
  4681  001D80                     _I2C_Master_Read:
  4682                           	opt stack 23
  4683                           
  4684                           ;incstack = 0
  4685                           ;I2C_Master_Read@a stored from wreg
  4686  001D80  6E02               	movwf	I2C_Master_Read@a,c
  4687                           
  4688                           ;I2C.c: 55: unsigned char temp;
  4689                           ;I2C.c: 56: I2C_Master_Wait();
  4690  001D82  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4691                           
  4692                           ;I2C.c: 57: RCEN = 1;
  4693  001D86  86C5               	bsf	4037,3,c	;volatile
  4694                           
  4695                           ;I2C.c: 58: I2C_Master_Wait();
  4696  001D88  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4697                           
  4698                           ;I2C.c: 59: temp = SSPBUF;
  4699  001D8C  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  4700                           
  4701                           ;I2C.c: 60: I2C_Master_Wait();
  4702  001D90  ECF1  F00E         	call	_I2C_Master_Wait	;wreg free
  4703                           
  4704                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4705  001D94  5002               	movf	I2C_Master_Read@a,w,c
  4706  001D96  A4D8               	btfss	status,2,c
  4707  001D98  D002               	goto	i2u19_40
  4708  001D9A  8AC5               	bsf	4037,5,c	;volatile
  4709  001D9C  D001               	goto	i2l1049
  4710  001D9E                     i2u19_40:
  4711  001D9E  9AC5               	bcf	4037,5,c	;volatile
  4712  001DA0                     i2l1049:
  4713                           
  4714                           ;I2C.c: 62: ACKEN = 1;
  4715  001DA0  88C5               	bsf	4037,4,c	;volatile
  4716                           
  4717                           ;I2C.c: 63: return temp;
  4718  001DA2  5003               	movf	I2C_Master_Read@temp,w,c
  4719  001DA4  0012               	return	
  4720  001DA6                     __end_of_I2C_Master_Read:
  4721                           	opt stack 0
  4722                           pclatu	equ	0xFFB
  4723                           pclath	equ	0xFFA
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           prodh	equ	0xFF4
  4729                           prodl	equ	0xFF3
  4730                           intcon	equ	0xFF2
  4731                           intcon2	equ	0xFF1
  4732                           intcon3	equ	0xFF0
  4733                           fsr0h	equ	0xFEA
  4734                           fsr0l	equ	0xFE9
  4735                           wreg	equ	0xFE8
  4736                           fsr1h	equ	0xFE2
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745 ;; *************** function _I2C_Master_Wait *****************
  4746 ;; Defined at:
  4747 ;;		line 24 in file "I2C.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;		None
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        1 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_I2C_Master_Start
  4771 ;;		_I2C_Master_Stop
  4772 ;;		_I2C_Master_Write
  4773 ;;		_I2C_Master_Read
  4774 ;;		_I2C_Master_RepeatedStart
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text28
  4779  001DE2                     __ptext28:
  4780                           	opt stack 0
  4781  001DE2                     _I2C_Master_Wait:
  4782                           	opt stack 23
  4783  001DE2                     i2l34:
  4784  001DE2  B4C7               	btfsc	4039,2,c	;volatile
  4785  001DE4  D7FE               	goto	i2l34
  4786  001DE6  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4787  001DEA  0E1F               	movlw	31
  4788  001DEC  1601               	andwf	??_I2C_Master_Wait,f,c
  4789  001DEE  B4D8               	btfsc	status,2,c
  4790  001DF0  0012               	return	
  4791  001DF2  D7F7               	goto	i2l34
  4792  001DF4                     __end_of_I2C_Master_Wait:
  4793                           	opt stack 0
  4794                           pclatu	equ	0xFFB
  4795                           pclath	equ	0xFFA
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           intcon2	equ	0xFF1
  4804                           intcon3	equ	0xFF0
  4805                           fsr0h	equ	0xFEA
  4806                           fsr0l	equ	0xFE9
  4807                           wreg	equ	0xFE8
  4808                           fsr1h	equ	0xFE2
  4809                           fsr1l	equ	0xFE1
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           pclatu	equ	0xFFB
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           intcon2	equ	0xFF1
  4826                           intcon3	equ	0xFF0
  4827                           fsr0h	equ	0xFEA
  4828                           fsr0l	equ	0xFE9
  4829                           wreg	equ	0xFE8
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839                           	psect	rparam
  4840  0000                     pclatu	equ	0xFFB
  4841                           pclath	equ	0xFFA
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           intcon2	equ	0xFF1
  4850                           intcon3	equ	0xFF0
  4851                           fsr0h	equ	0xFEA
  4852                           fsr0l	equ	0xFE9
  4853                           wreg	equ	0xFE8
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863                           	psect	temp
  4864  000043                     btemp:
  4865                           	opt stack 0
  4866  000043                     	ds	1
  4867  0000                     int$flags	set	btemp
  4868                           pclatu	equ	0xFFB
  4869                           pclath	equ	0xFFA
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           intcon	equ	0xFF2
  4877                           intcon2	equ	0xFF1
  4878                           intcon3	equ	0xFF0
  4879                           fsr0h	equ	0xFEA
  4880                           fsr0l	equ	0xFE9
  4881                           wreg	equ	0xFE8
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8


Data Sizes:
    Strings     95
    Constant    42
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      66
    BANK0           128     27      27
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _printf->___wmul
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->_disp_time
    i2_standby->i2_printf
    _disp_time->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_standby
    _standby->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3082
                    _I2C_Master_Init
                            _initLCD
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              2     2      0    2571
                                             25 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              27    23      4    2436
                                              7 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             62 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             60 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     289
                                             60 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             64 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             60 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             63 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             62 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             60 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                              8 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             60 COMRAM     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    7234
                                             44 COMRAM    16    16      0
                          _disp_time
                          i2_lcdInst
                           i2_printf
                          i2_standby
 ---------------------------------------------------------------------------------
 (6) i2_standby                                            2     2      0    2151
                                             34 COMRAM     2     2      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) _disp_time                                           10    10      0    2886
                                             34 COMRAM    10    10      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            31    23      8    2016
                                             12 COMRAM    22    14      8
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _disp_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_standby
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7E      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7E     42      42       1       52.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1B      1B       5       21.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 05 23:24:38 2017

      ___wmul@multiplicand 003F         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l213 11A8  
                      l605 1984                        l658 1AB0                        l668 1B0C  
             __CFG_CPB$OFF 000000                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        _isr 0008                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1701 1202                       l1801 1974                       l1553 1A76  
                     l1537 1DBC                       l1713 1238                       l1555 1A80  
                     l1715 123E                       l1731 1286                       l1565 1AA4  
                     l1557 1A84                       l1581 1B00                       l1573 1ACC  
                     l1741 12E0                       l1661 10C0                       l1575 1AD6  
                     l1743 12EA                       l1671 10FA                       l1655 109A  
                     l1577 1ADC                       l1761 1346                       l1737 12A8  
                     l1729 1274                       l1665 10CA                       l1755 1320  
                     l1683 1176                       l1659 10AE                       l1757 132C  
                     l1765 135A                       l1749 1304                       l1781 141E  
                     l1791 191E                       l1767 1360                       l1775 13F8  
                     l1695 11E0                       l1679 1170                       l1793 1924  
                     l1769 13AC                       l1777 140A                       l1779 1412  
                     l1699 11FC                       l1789 1910                       l1965 1996  
                     ?_isr 0001                       STR_1 106A                       STR_2 1082  
                     STR_3 1078                       STR_4 102B                       STR_5 1042  
                     STR_6 1059                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u1607 1CE6                       u1617 1C22                       u1475 1A2C  
                     u1627 1C2A                       u1637 1C4A                       u1647 1C52  
                     u1587 19EC                       u1597 1CAC                       _RCEN 007E2B  
                     i2l34 1DE2                       _RSEN 007E29                       _main 1B16  
                     _keys 1001                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0043                       isr@i 003C                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 1E26              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 1C58                      ??_isr 002D           ?_I2C_Master_Init 0088  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___lldiv 1996            __end_of___lwdiv 1ABA            __end_of___lwmod 1B16  
                    i2l213 1528                      i2l154 17DA                      i2l147 17A2  
                    i2l658 1BB0                      i2l668 1D2A                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 1E1A             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD 1CF2  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers 101C  
          __end_of_isdigit 1DC4                      _putch 1E02                      pclath 000FFA  
                    tablat 000FF5            __end_of_timeset 102B           __end_ofi2___wmul 1D80  
          __end_of_standby 19FC                      status 000FD8             __CFG_PBADEN$ON 000000  
            i2printf@width 0020           __end_ofi2_printf 1748         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042            __initialization 1DF4         __size_ofi2_lcdInst 000C  
             __end_of_main 1B68               __end_of_keys 1012                 i2printf@ap 001A  
       __size_ofi2_isdigit 001E                     ??_main 0043              __activetblptr 000002  
       __size_ofi2_standby 0050          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004              disp_time@time 0024            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2003 1BBA                     i2l1049 1DA0  
                   i2l2041 1794                     i2l2035 1788                     i2l2043 17A8  
                   i2l2053 17C6                     i2l2037 178E                     i2l2049 17BE  
                   i2l1603 1DDA                     i2l1613 1B7E                     i2l1615 1B86  
                   i2l1625 1BA6                     i2l1617 1B8A                     i2l1641 1D20  
                   i2l1633 1D00                     i2l1635 1D08                     i2l1811 1446  
                   i2l1637 1D0C                     i2l1821 146A                     i2l1911 1652  
                   i2l1815 1456                     i2l1913 165A                     i2l1921 1680  
                   i2l1905 163C                     i2l1817 1464                     i2l1923 1686  
                   i2l1931 1710                     i2l1851 1556                     i2l1835 14F6  
                   i2l1827 1498                     i2l1925 16CA                     i2l1933 1720  
                   i2l1917 166E                     i2l1935 1726                     i2l1871 15A4  
                   i2l1855 1570                     i2l1839 14FA                     i2l1857 1574  
                   i2l1937 172E                     i2l1893 15FA                     i2l1869 15A0  
                   i2l1885 15D0                     i2l1981 1856                     i2l1973 181A  
                   i2l1887 15E0                     i2l1897 161E                     i2l1977 184E  
                   i2l1899 1626                     i2l1995 18CA                     i2l1987 1872  
                   i2l1999 18D2                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 1D34             __CFG_STVREN$ON 000000  
                ??___lldiv 003D                  ??___lwdiv 0041                  ??___lwmod 0041  
                ??_lcdInst 003F                     _printf 108C                  ??_initLCD 0040  
                ??_isdigit 003D          __end_ofi2___lwdiv 1BBA               __mediumconst 0000  
        __end_ofi2___lwmod 1D34                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_standby 0099          __end_ofi2_lcdInst 1E32  
        __end_ofi2_isdigit 1DE2                 __accesstop 0080    __end_of__initialization 1DF4  
            ___rparam_used 000001          __end_ofi2_standby 1C0A         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_putch 1E0E                i2printf@idx 0019  
              i2printf@val 001D                  ?i2___wmul 0001         __size_of_lcdNibble 004E  
              i2putch@data 0003                  ?i2_printf 000D         __size_of_disp_time 00CC  
                  ??_putch 003F             disp_time@i_241 002B               ?i2_lcdNibble 0001  
                  ?___wmul 003D                    ?_printf 0087                 ??i2___wmul 0005  
                  i2u19_40 1D9E                 ??i2_printf 0015                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                    i2_putch 1E1A  
        __end_of_lcdNibble 1C58                    __Hparam 0000                    __Lparam 0000  
        __end_of_disp_time 18E6                    ___lldiv 18E6            __size_of___wmul 0026  
                  ___lwdiv 1A5C                    ___lwmod 1ABA               __psmallconst 1000  
                  __pcinit 1DF4                    __ramtop 1000                    _lcdInst 1E0E  
                  __ptext0 1B16                    __ptext1 1996                    __ptext2 108C  
                  __ptext3 1E02                    __ptext4 1DA6                    __ptext5 1D34  
                  __ptext6 1ABA                    __ptext7 1A5C                    __ptext8 1CA6  
                  __ptext9 1E0E            __size_of_printf 03B0                    _initLCD 1CA6  
        __end_of_hexpowers 1024              i2_isdigit$491 0002                    _dpowers 1012  
                  _isdigit 1DA6               __size_of_isr 1812   __size_of_I2C_Master_Init 0060  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
                  _timeset 1024                    _standby 1996             __pintcode_body 1748  
     end_of_initialization 1DF4              __Lmediumconst 0000                    int_func 1748  
      i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 0041                    printf@c 0098  
                  printf@f 0087           I2C_Master_Init@c 0088           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc2 000FDE          i2___lwdiv@divisor 0003  
                i2___lwdiv 1B68                  i2___lwmod 1CF2          i2___lwdiv@counter 0007  
                i2_lcdInst 1E26                 disp_time@i 002C                printf@width 0096  
                i2_isdigit 1DC4                  i2_standby 1BBA             __end_of___wmul 1D5A  
     __size_ofi2_lcdNibble 004E              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 143C               i2printf@flag 001F               i2printf@prec 001C  
      start_initialization 1DF4          __size_ofi2___wmul 0026                __end_of_isr 181A  
                i2printf@c 0022                  i2printf@f 000D                 ?i2___lwdiv 0001  
               ?i2___lwmod 0008          __size_ofi2_printf 030C          ??_I2C_Master_Init 008C  
        ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 0002                 ?i2_isdigit 0001                 ?i2_standby 0001  
                 ??___wmul 0041           __CFG_LPT1OSC$OFF 000000                   ??_printf 008B  
            __pcstackBANK0 0080          i2___lwmod@divisor 000A          i2___lwmod@counter 000C  
                 ?i2_putch 0001           _I2C_Master_Start 1E44           _I2C_Master_Write 1E32  
         ___lwdiv@dividend 003D          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                _lcdNibble 1C0A                   ?___lldiv 0080                   ?___lwdiv 003D  
                 ?___lwmod 0083                  _disp_time 181A                   ?_lcdInst 0001  
                 ?_initLCD 0001                __smallconst 1000                   ?_isdigit 0001  
                _hexpowers 101C                   ?_standby 0001           ___lwdiv@quotient 0080  
              ??i2___lwdiv 0005                ??i2___lwmod 000C             __size_of_putch 000C  
              ??i2_lcdInst 0003             ___wmul@product 0041                   _LATDbits 000F8C  
              ??i2_isdigit 0001                   i2u170_47 1C98                   i2u171_47 1CA0  
                 i2u165_47 17CC                   i2u166_47 1BFC                   i2u167_47 18D8  
                 i2u168_47 1C70                   i2u169_47 1C78           __CFG_WDTPS$32768 000000  
              ??i2_standby 0023                 ?_lcdNibble 0001                 ?_disp_time 0001  
        ___wmul@multiplier 003D                   i2___wmul 1D5A              lcdNibble@data 003E  
               printf@flag 0095              lcdNibble@temp 003D                 printf@prec 0092  
                 i2_printf 143C        I2C_Master_Read@temp 0003           __size_ofi2_putch 000C  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
    i2___wmul@multiplicand 0003           __size_of___lldiv 00B0           __size_of___lwdiv 005E  
         __size_of___lwmod 005C                _isdigit$491 003E           __size_of_lcdInst 000C  
          _I2C_Master_Init 19FC            _I2C_Master_Read 1D80           __size_of_initLCD 004C  
          _I2C_Master_Wait 1DE2            _I2C_Master_Stop 1E3C           __size_of_isdigit 001E  
          ___lwdiv@divisor 003F            ___lwdiv@counter 0082                   __ptext10 1C0A  
                 __ptext11 19FC                   __ptext20 1CF2                   __ptext12 18E6  
                 __ptext21 1B68                   __ptext22 1E26                   __ptext14 1BBA  
                 __ptext23 1C58                   __ptext15 181A                   __ptext24 1E32  
                 __ptext16 143C                   __ptext25 1E3C                   __ptext17 1E1A  
                 __ptext26 1E44                   __ptext18 1DC4                   __ptext27 1D80  
                 __ptext19 1D5A                   __ptext28 1DE2           __size_of_standby 0066  
            __size_of_main 0052              ??i2_lcdNibble 0001                ??_lcdNibble 003D  
                 int$flags 0043                  printf@idx 008F                  printf@val 0093  
              ??_disp_time 0023                  putch@data 003F   __end_of_I2C_Master_Start 1E4C  
 __end_of_I2C_Master_Write 1E3C                 _INTCONbits 000FF2                   isdigit@c 003F  
                 intlevel2 0000           ___lwmod@dividend 0083           ___lldiv@dividend 0080  
                 printf@ap 0090    __end_of_I2C_Master_Init 1A5C    __end_of_I2C_Master_Read 1DA6  
  __end_of_I2C_Master_Wait 1DF4    __end_of_I2C_Master_Stop 1E44                lcdInst@data 003F  
      __end_ofi2_lcdNibble 1CA6           ___lldiv@quotient 003D          I2C_Master_Write@d 0002  
          ___lwmod@divisor 0085            ___lwmod@counter 0041  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 28 05:02:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           ; Version 1.40
    87                           ; Generated 01/12/2016 GMT
    88                           ; 
    89                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC18F4620 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     
   121                           	psect	idataBANK0
   122  002F02                     __pidataBANK0:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _bottle_count_disp
   126  002F02  FFFF               	dw	65535
   127                           
   128                           	psect	mediumconst
   129  00FE0E                     __pmediumconst:
   130                           	opt stack 0
   131  00FE0E  00                 	db	0
   132  00FE0F                     _keys:
   133                           	opt stack 0
   134  00FE0F  31                 	db	49
   135  00FE10  32                 	db	50
   136  00FE11  33                 	db	51
   137  00FE12  41                 	db	65
   138  00FE13  34                 	db	52
   139  00FE14  35                 	db	53
   140  00FE15  36                 	db	54
   141  00FE16  42                 	db	66
   142  00FE17  37                 	db	55
   143  00FE18  38                 	db	56
   144  00FE19  39                 	db	57
   145  00FE1A  43                 	db	67
   146  00FE1B  2A                 	db	42
   147  00FE1C  30                 	db	48
   148  00FE1D  23                 	db	35
   149  00FE1E  44                 	db	68
   150  00FE1F  00                 	db	0
   151  00FE20                     __end_of_keys:
   152                           	opt stack 0
   153  00FE20                     _dpowers:
   154                           	opt stack 0
   155  00FE20  0001               	dw	1
   156  00FE22  000A               	dw	10
   157  00FE24  0064               	dw	100
   158  00FE26  03E8               	dw	1000
   159  00FE28  2710               	dw	10000
   160  00FE2A                     __end_of_dpowers:
   161                           	opt stack 0
   162  00FE2A                     _hexpowers:
   163                           	opt stack 0
   164  00FE2A  0001               	dw	1
   165  00FE2C  0010               	dw	16
   166  00FE2E  0100               	dw	256
   167  00FE30  1000               	dw	4096
   168  00FE32                     __end_of_hexpowers:
   169                           	opt stack 0
   170  00FE32                     _timeset:
   171                           	opt stack 0
   172  00FE32  50                 	db	80
   173  00FE33  35                 	db	53
   174  00FE34  21                 	db	33
   175  00FE35  08                 	db	8
   176  00FE36  05                 	db	5
   177  00FE37  02                 	db	2
   178  00FE38  17                 	db	23
   179  00FE39                     __end_of_timeset:
   180                           	opt stack 0
   181  00FE39                     exp@coeff:
   182                           	opt stack 0
   183  00FE39  00                 	db	0
   184  00FE3A  80                 	db	128
   185  00FE3B  3F                 	db	63
   186  00FE3C  72                 	db	114
   187  00FE3D  31                 	db	49
   188  00FE3E  3F                 	db	63
   189  00FE3F  FE                 	db	254
   190  00FE40  75                 	db	117
   191  00FE41  3E                 	db	62
   192  00FE42  58                 	db	88
   193  00FE43  63                 	db	99
   194  00FE44  3D                 	db	61
   195  00FE45  95                 	db	149
   196  00FE46  1D                 	db	29
   197  00FE47  3C                 	db	60
   198  00FE48  C5                 	db	197
   199  00FE49  AE                 	db	174
   200  00FE4A  3A                 	db	58
   201  00FE4B  79                 	db	121
   202  00FE4C  21                 	db	33
   203  00FE4D  39                 	db	57
   204  00FE4E  94                 	db	148
   205  00FE4F  80                 	db	128
   206  00FE50  37                 	db	55
   207  00FE51  93                 	db	147
   208  00FE52  A7                 	db	167
   209  00FE53  35                 	db	53
   210  00FE54  56                 	db	86
   211  00FE55  15                 	db	21
   212  00FE56  34                 	db	52
   213  00FE57                     __end_ofexp@coeff:
   214                           	opt stack 0
   215  00FE57                     log@coeff:
   216                           	opt stack 0
   217  00FE57  00                 	db	0
   218  00FE58  00                 	db	0
   219  00FE59  00                 	db	0
   220  00FE5A  00                 	db	0
   221  00FE5B  80                 	db	128
   222  00FE5C  3F                 	db	63
   223  00FE5D  F0                 	db	240
   224  00FE5E  FF                 	db	255
   225  00FE5F  BE                 	db	190
   226  00FE60  E2                 	db	226
   227  00FE61  A9                 	db	169
   228  00FE62  3E                 	db	62
   229  00FE63  83                 	db	131
   230  00FE64  76                 	db	118
   231  00FE65  BE                 	db	190
   232  00FE66  AE                 	db	174
   233  00FE67  2B                 	db	43
   234  00FE68  3E                 	db	62
   235  00FE69  3C                 	db	60
   236  00FE6A  C3                 	db	195
   237  00FE6B  BD                 	db	189
   238  00FE6C  D2                 	db	210
   239  00FE6D  13                 	db	19
   240  00FE6E  3D                 	db	61
   241  00FE6F  78                 	db	120
   242  00FE70  D3                 	db	211
   243  00FE71  BB                 	db	187
   244  00FE72                     __end_oflog@coeff:
   245                           	opt stack 0
   246  0000                     _TMR0	set	4054
   247  0000                     _ADCON0	set	4034
   248  0000                     _ADCON1	set	4033
   249  0000                     _INTCONbits	set	4082
   250  0000                     _LATA	set	3977
   251  0000                     _LATAbits	set	3977
   252  0000                     _LATB	set	3978
   253  0000                     _LATC	set	3979
   254  0000                     _LATCbits	set	3979
   255  0000                     _LATD	set	3980
   256  0000                     _LATDbits	set	3980
   257  0000                     _LATE	set	3981
   258  0000                     _PORTAbits	set	3968
   259  0000                     _PORTB	set	3969
   260  0000                     _SSPADD	set	4040
   261  0000                     _SSPBUF	set	4041
   262  0000                     _SSPCON1	set	4038
   263  0000                     _SSPCON2	set	4037
   264  0000                     _SSPSTAT	set	4039
   265  0000                     _TRISA	set	3986
   266  0000                     _TRISB	set	3987
   267  0000                     _TRISC	set	3988
   268  0000                     _TRISD	set	3989
   269  0000                     _TRISE	set	3990
   270  0000                     _ACKDT	set	32301
   271  0000                     _ACKEN	set	32300
   272  0000                     _GIE	set	32663
   273  0000                     _INT0IE	set	32660
   274  0000                     _INT1IE	set	32643
   275  0000                     _INT1IF	set	32640
   276  0000                     _INT2IE	set	32644
   277  0000                     _PEN	set	32298
   278  0000                     _PSA	set	32427
   279  0000                     _RCEN	set	32299
   280  0000                     _RSEN	set	32297
   281  0000                     _SEN	set	32296
   282  0000                     _T08BIT	set	32430
   283  0000                     _T0CS	set	32429
   284  0000                     _T0PS0	set	32424
   285  0000                     _T0PS1	set	32425
   286  0000                     _T0PS2	set	32426
   287  0000                     _TMR0IE	set	32661
   288  0000                     _TMR0IF	set	32658
   289  0000                     _TMR0ON	set	32431
   290  0000                     _TRISC3	set	31907
   291  0000                     _TRISC4	set	31908
   292  0000                     _nRBPU	set	32655
   293  00FE72                     STR_19:
   294  00FE72  52                 	db	82	;'R'
   295  00FE73  75                 	db	117	;'u'
   296  00FE74  6E                 	db	110	;'n'
   297  00FE75  6E                 	db	110	;'n'
   298  00FE76  69                 	db	105	;'i'
   299  00FE77  6E                 	db	110	;'n'
   300  00FE78  67                 	db	103	;'g'
   301  00FE79  7E                 	db	126
   302  00FE7A  7E                 	db	126
   303  00FE7B  7E                 	db	126
   304  00FE7C  20                 	db	32
   305  00FE7D  20                 	db	32
   306  00FE7E  20                 	db	32
   307  00FE7F  20                 	db	32
   308  00FE80  20                 	db	32
   309  00FE81  20                 	db	32
   310  00FE82  20                 	db	32
   311  00FE83  20                 	db	32
   312  00FE84  20                 	db	32
   313  00FE85  20                 	db	32
   314  00FE86  20                 	db	32
   315  00FE87  20                 	db	32
   316  00FE88  20                 	db	32
   317  00FE89  20                 	db	32
   318  00FE8A  00                 	db	0
   319  00FE8B                     STR_2:
   320  00FE8B  47                 	db	71	;'G'
   321  00FE8C  25                 	db	37
   322  00FE8D  75                 	db	117	;'u'
   323  00FE8E  20                 	db	32
   324  00FE8F  42                 	db	66	;'B'
   325  00FE90  25                 	db	37
   326  00FE91  75                 	db	117	;'u'
   327  00FE92  20                 	db	32
   328  00FE93  20                 	db	32
   329  00FE94  20                 	db	32
   330  00FE95  20                 	db	32
   331  00FE96  20                 	db	32
   332  00FE97  20                 	db	32
   333  00FE98  20                 	db	32
   334  00FE99  20                 	db	32
   335  00FE9A  20                 	db	32
   336  00FE9B  20                 	db	32
   337  00FE9C  20                 	db	32
   338  00FE9D  20                 	db	32
   339  00FE9E  20                 	db	32
   340  00FE9F  20                 	db	32
   341  00FEA0  20                 	db	32
   342  00FEA1  20                 	db	32
   343  00FEA2  00                 	db	0
   344  00FEA3                     STR_1:
   345  00FEA3  43                 	db	67	;'C'
   346  00FEA4  25                 	db	37
   347  00FEA5  75                 	db	117	;'u'
   348  00FEA6  20                 	db	32
   349  00FEA7  52                 	db	82	;'R'
   350  00FEA8  25                 	db	37
   351  00FEA9  75                 	db	117	;'u'
   352  00FEAA  20                 	db	32
   353  00FEAB  20                 	db	32
   354  00FEAC  20                 	db	32
   355  00FEAD  20                 	db	32
   356  00FEAE  20                 	db	32
   357  00FEAF  20                 	db	32
   358  00FEB0  20                 	db	32
   359  00FEB1  20                 	db	32
   360  00FEB2  20                 	db	32
   361  00FEB3  20                 	db	32
   362  00FEB4  20                 	db	32
   363  00FEB5  20                 	db	32
   364  00FEB6  20                 	db	32
   365  00FEB7  20                 	db	32
   366  00FEB8  20                 	db	32
   367  00FEB9  20                 	db	32
   368  00FEBA  00                 	db	0
   369  00FEBB                     STR_18:
   370  00FEBB  52                 	db	82	;'R'
   371  00FEBC  75                 	db	117	;'u'
   372  00FEBD  6E                 	db	110	;'n'
   373  00FEBE  6E                 	db	110	;'n'
   374  00FEBF  69                 	db	105	;'i'
   375  00FEC0  6E                 	db	110	;'n'
   376  00FEC1  67                 	db	103	;'g'
   377  00FEC2  7E                 	db	126
   378  00FEC3  7E                 	db	126
   379  00FEC4  20                 	db	32
   380  00FEC5  20                 	db	32
   381  00FEC6  20                 	db	32
   382  00FEC7  20                 	db	32
   383  00FEC8  20                 	db	32
   384  00FEC9  20                 	db	32
   385  00FECA  20                 	db	32
   386  00FECB  20                 	db	32
   387  00FECC  20                 	db	32
   388  00FECD  20                 	db	32
   389  00FECE  20                 	db	32
   390  00FECF  20                 	db	32
   391  00FED0  20                 	db	32
   392  00FED1  20                 	db	32
   393  00FED2  00                 	db	0
   394  00FED3                     STR_17:
   395  00FED3  52                 	db	82	;'R'
   396  00FED4  75                 	db	117	;'u'
   397  00FED5  6E                 	db	110	;'n'
   398  00FED6  6E                 	db	110	;'n'
   399  00FED7  69                 	db	105	;'i'
   400  00FED8  6E                 	db	110	;'n'
   401  00FED9  67                 	db	103	;'g'
   402  00FEDA  7E                 	db	126
   403  00FEDB  20                 	db	32
   404  00FEDC  20                 	db	32
   405  00FEDD  20                 	db	32
   406  00FEDE  20                 	db	32
   407  00FEDF  20                 	db	32
   408  00FEE0  20                 	db	32
   409  00FEE1  20                 	db	32
   410  00FEE2  20                 	db	32
   411  00FEE3  20                 	db	32
   412  00FEE4  20                 	db	32
   413  00FEE5  20                 	db	32
   414  00FEE6  20                 	db	32
   415  00FEE7  20                 	db	32
   416  00FEE8  20                 	db	32
   417  00FEE9  00                 	db	0
   418  00FEEA                     STR_15:
   419  00FEEA  54                 	db	84	;'T'
   420  00FEEB  6F                 	db	111	;'o'
   421  00FEEC  74                 	db	116	;'t'
   422  00FEED  61                 	db	97	;'a'
   423  00FEEE  6C                 	db	108	;'l'
   424  00FEEF  20                 	db	32
   425  00FEF0  4F                 	db	79	;'O'
   426  00FEF1  70                 	db	112	;'p'
   427  00FEF2  65                 	db	101	;'e'
   428  00FEF3  72                 	db	114	;'r'
   429  00FEF4  61                 	db	97	;'a'
   430  00FEF5  74                 	db	116	;'t'
   431  00FEF6  69                 	db	105	;'i'
   432  00FEF7  6F                 	db	111	;'o'
   433  00FEF8  6E                 	db	110	;'n'
   434  00FEF9  20                 	db	32
   435  00FEFA  20                 	db	32
   436  00FEFB  20                 	db	32
   437  00FEFC  20                 	db	32
   438  00FEFD  20                 	db	32
   439  00FEFE  20                 	db	32
   440  00FEFF  20                 	db	32
   441  00FF00  00                 	db	0
   442  00FF01                     STR_6:
   443  00FF01  44                 	db	68	;'D'
   444  00FF02  61                 	db	97	;'a'
   445  00FF03  74                 	db	116	;'t'
   446  00FF04  65                 	db	101	;'e'
   447  00FF05  3A                 	db	58	;':'
   448  00FF06  20                 	db	32
   449  00FF07  25                 	db	37
   450  00FF08  30                 	db	48	;'0'
   451  00FF09  32                 	db	50	;'2'
   452  00FF0A  78                 	db	120	;'x'
   453  00FF0B  2F                 	db	47
   454  00FF0C  25                 	db	37
   455  00FF0D  30                 	db	48	;'0'
   456  00FF0E  32                 	db	50	;'2'
   457  00FF0F  78                 	db	120	;'x'
   458  00FF10  2F                 	db	47
   459  00FF11  25                 	db	37
   460  00FF12  30                 	db	48	;'0'
   461  00FF13  32                 	db	50	;'2'
   462  00FF14  78                 	db	120	;'x'
   463  00FF15  20                 	db	32
   464  00FF16  20                 	db	32
   465  00FF17  00                 	db	0
   466  00FF18                     STR_7:
   467  00FF18  54                 	db	84	;'T'
   468  00FF19  69                 	db	105	;'i'
   469  00FF1A  6D                 	db	109	;'m'
   470  00FF1B  65                 	db	101	;'e'
   471  00FF1C  3A                 	db	58	;':'
   472  00FF1D  20                 	db	32
   473  00FF1E  25                 	db	37
   474  00FF1F  30                 	db	48	;'0'
   475  00FF20  32                 	db	50	;'2'
   476  00FF21  78                 	db	120	;'x'
   477  00FF22  3A                 	db	58	;':'
   478  00FF23  25                 	db	37
   479  00FF24  30                 	db	48	;'0'
   480  00FF25  32                 	db	50	;'2'
   481  00FF26  78                 	db	120	;'x'
   482  00FF27  3A                 	db	58	;':'
   483  00FF28  25                 	db	37
   484  00FF29  30                 	db	48	;'0'
   485  00FF2A  32                 	db	50	;'2'
   486  00FF2B  78                 	db	120	;'x'
   487  00FF2C  20                 	db	32
   488  00FF2D  20                 	db	32
   489  00FF2E  00                 	db	0
   490  00FF2F                     STR_16:
   491  00FF2F  54                 	db	84	;'T'
   492  00FF30  69                 	db	105	;'i'
   493  00FF31  6D                 	db	109	;'m'
   494  00FF32  65                 	db	101	;'e'
   495  00FF33  3A                 	db	58	;':'
   496  00FF34  20                 	db	32
   497  00FF35  25                 	db	37
   498  00FF36  64                 	db	100	;'d'
   499  00FF37  20                 	db	32
   500  00FF38  73                 	db	115	;'s'
   501  00FF39  20                 	db	32
   502  00FF3A  20                 	db	32
   503  00FF3B  20                 	db	32
   504  00FF3C  20                 	db	32
   505  00FF3D  20                 	db	32
   506  00FF3E  20                 	db	32
   507  00FF3F  20                 	db	32
   508  00FF40  00                 	db	0
   509  00FF41                     STR_22:
   510  00FF41  30                 	db	48	;'0'
   511  00FF42  31                 	db	49	;'1'
   512  00FF43  32                 	db	50	;'2'
   513  00FF44  33                 	db	51	;'3'
   514  00FF45  34                 	db	52	;'4'
   515  00FF46  35                 	db	53	;'5'
   516  00FF47  36                 	db	54	;'6'
   517  00FF48  37                 	db	55	;'7'
   518  00FF49  38                 	db	56	;'8'
   519  00FF4A  39                 	db	57	;'9'
   520  00FF4B  61                 	db	97	;'a'
   521  00FF4C  62                 	db	98	;'b'
   522  00FF4D  63                 	db	99	;'c'
   523  00FF4E  64                 	db	100	;'d'
   524  00FF4F  65                 	db	101	;'e'
   525  00FF50  66                 	db	102	;'f'
   526  00FF51  00                 	db	0
   527  00FF52                     STR_9:
   528  00FF52  54                 	db	84	;'T'
   529  00FF53  6F                 	db	111	;'o'
   530  00FF54  74                 	db	116	;'t'
   531  00FF55  61                 	db	97	;'a'
   532  00FF56  6C                 	db	108	;'l'
   533  00FF57  3A                 	db	58	;':'
   534  00FF58  20                 	db	32
   535  00FF59  25                 	db	37
   536  00FF5A  64                 	db	100	;'d'
   537  00FF5B  20                 	db	32
   538  00FF5C  20                 	db	32
   539  00FF5D  20                 	db	32
   540  00FF5E  20                 	db	32
   541  00FF5F  20                 	db	32
   542  00FF60  20                 	db	32
   543  00FF61  20                 	db	32
   544  00FF62  00                 	db	0
   545  00FF63                     STR_8:
   546  00FF63  42                 	db	66	;'B'
   547  00FF64  6F                 	db	111	;'o'
   548  00FF65  74                 	db	116	;'t'
   549  00FF66  74                 	db	116	;'t'
   550  00FF67  6C                 	db	108	;'l'
   551  00FF68  65                 	db	101	;'e'
   552  00FF69  20                 	db	32
   553  00FF6A  43                 	db	67	;'C'
   554  00FF6B  6F                 	db	111	;'o'
   555  00FF6C  75                 	db	117	;'u'
   556  00FF6D  6E                 	db	110	;'n'
   557  00FF6E  74                 	db	116	;'t'
   558  00FF6F  20                 	db	32
   559  00FF70  20                 	db	32
   560  00FF71  20                 	db	32
   561  00FF72  20                 	db	32
   562  00FF73  00                 	db	0
   563  00FF74                     STR_10:
   564  00FF74  59                 	db	89	;'Y'
   565  00FF75  4F                 	db	79	;'O'
   566  00FF76  50                 	db	80	;'P'
   567  00FF77  20                 	db	32
   568  00FF78  57                 	db	87	;'W'
   569  00FF79  2F                 	db	47
   570  00FF7A  20                 	db	32
   571  00FF7B  43                 	db	67	;'C'
   572  00FF7C  41                 	db	65	;'A'
   573  00FF7D  50                 	db	80	;'P'
   574  00FF7E  3A                 	db	58	;':'
   575  00FF7F  20                 	db	32
   576  00FF80  25                 	db	37
   577  00FF81  64                 	db	100	;'d'
   578  00FF82  20                 	db	32
   579  00FF83  20                 	db	32
   580  00FF84  00                 	db	0
   581  00FF85                     STR_11:
   582  00FF85  59                 	db	89	;'Y'
   583  00FF86  4F                 	db	79	;'O'
   584  00FF87  50                 	db	80	;'P'
   585  00FF88  20                 	db	32
   586  00FF89  4E                 	db	78	;'N'
   587  00FF8A  4F                 	db	79	;'O'
   588  00FF8B  20                 	db	32
   589  00FF8C  43                 	db	67	;'C'
   590  00FF8D  41                 	db	65	;'A'
   591  00FF8E  50                 	db	80	;'P'
   592  00FF8F  3A                 	db	58	;':'
   593  00FF90  20                 	db	32
   594  00FF91  25                 	db	37
   595  00FF92  64                 	db	100	;'d'
   596  00FF93  20                 	db	32
   597  00FF94  20                 	db	32
   598  00FF95  00                 	db	0
   599  00FF96                     STR_12:
   600  00FF96  45                 	db	69	;'E'
   601  00FF97  53                 	db	83	;'S'
   602  00FF98  4B                 	db	75	;'K'
   603  00FF99  41                 	db	65	;'A'
   604  00FF9A  20                 	db	32
   605  00FF9B  57                 	db	87	;'W'
   606  00FF9C  2F                 	db	47
   607  00FF9D  20                 	db	32
   608  00FF9E  43                 	db	67	;'C'
   609  00FF9F  41                 	db	65	;'A'
   610  00FFA0  50                 	db	80	;'P'
   611  00FFA1  3A                 	db	58	;':'
   612  00FFA2  20                 	db	32
   613  00FFA3  25                 	db	37
   614  00FFA4  64                 	db	100	;'d'
   615  00FFA5  20                 	db	32
   616  00FFA6  00                 	db	0
   617  00FFA7                     STR_13:
   618  00FFA7  45                 	db	69	;'E'
   619  00FFA8  53                 	db	83	;'S'
   620  00FFA9  4B                 	db	75	;'K'
   621  00FFAA  41                 	db	65	;'A'
   622  00FFAB  20                 	db	32
   623  00FFAC  4E                 	db	78	;'N'
   624  00FFAD  4F                 	db	79	;'O'
   625  00FFAE  20                 	db	32
   626  00FFAF  43                 	db	67	;'C'
   627  00FFB0  41                 	db	65	;'A'
   628  00FFB1  50                 	db	80	;'P'
   629  00FFB2  3A                 	db	58	;':'
   630  00FFB3  20                 	db	32
   631  00FFB4  25                 	db	37
   632  00FFB5  64                 	db	100	;'d'
   633  00FFB6  20                 	db	32
   634  00FFB7  00                 	db	0
   635  00FFB8                     STR_20:
   636  00FFB8  4F                 	db	79	;'O'
   637  00FFB9  70                 	db	112	;'p'
   638  00FFBA  65                 	db	101	;'e'
   639  00FFBB  72                 	db	114	;'r'
   640  00FFBC  61                 	db	97	;'a'
   641  00FFBD  74                 	db	116	;'t'
   642  00FFBE  69                 	db	105	;'i'
   643  00FFBF  6F                 	db	111	;'o'
   644  00FFC0  6E                 	db	110	;'n'
   645  00FFC1  20                 	db	32
   646  00FFC2  44                 	db	68	;'D'
   647  00FFC3  6F                 	db	111	;'o'
   648  00FFC4  6E                 	db	110	;'n'
   649  00FFC5  65                 	db	101	;'e'
   650  00FFC6  21                 	db	33
   651  00FFC7  00                 	db	0
   652  00FFC8                     STR_14:
   653  00FFC8  45                 	db	69	;'E'
   654  00FFC9  52                 	db	82	;'R'
   655  00FFCA  52                 	db	82	;'R'
   656  00FFCB  3A                 	db	58	;':'
   657  00FFCC  20                 	db	32
   658  00FFCD  42                 	db	66	;'B'
   659  00FFCE  41                 	db	65	;'A'
   660  00FFCF  44                 	db	68	;'D'
   661  00FFD0  20                 	db	32
   662  00FFD1  42                 	db	66	;'B'
   663  00FFD2  54                 	db	84	;'T'
   664  00FFD3  4C                 	db	76	;'L'
   665  00FFD4  43                 	db	67	;'C'
   666  00FFD5  4E                 	db	78	;'N'
   667  00FFD6  54                 	db	84	;'T'
   668  00FFD7  00                 	db	0
   669  00FFD8                     STR_21:
   670  00FFD8  45                 	db	69	;'E'
   671  00FFD9  4D                 	db	77	;'M'
   672  00FFDA  45                 	db	69	;'E'
   673  00FFDB  52                 	db	82	;'R'
   674  00FFDC  47                 	db	71	;'G'
   675  00FFDD  45                 	db	69	;'E'
   676  00FFDE  4E                 	db	78	;'N'
   677  00FFDF  43                 	db	67	;'C'
   678  00FFE0  59                 	db	89	;'Y'
   679  00FFE1  20                 	db	32
   680  00FFE2  53                 	db	83	;'S'
   681  00FFE3  54                 	db	84	;'T'
   682  00FFE4  4F                 	db	79	;'O'
   683  00FFE5  50                 	db	80	;'P'
   684  00FFE6  00                 	db	0
   685  00FFE7                     STR_3:
   686  00FFE7  45                 	db	69	;'E'
   687  00FFE8  52                 	db	82	;'R'
   688  00FFE9  52                 	db	82	;'R'
   689  00FFEA  3A                 	db	58	;':'
   690  00FFEB  20                 	db	32
   691  00FFEC  42                 	db	66	;'B'
   692  00FFED  41                 	db	65	;'A'
   693  00FFEE  44                 	db	68	;'D'
   694  00FFEF  20                 	db	32
   695  00FFF0  49                 	db	73	;'I'
   696  00FFF1  53                 	db	83	;'S'
   697  00FFF2  52                 	db	82	;'R'
   698  00FFF3  00                 	db	0
   699  00FFF4                     STR_4:
   700  00FFF4  73                 	db	115	;'s'
   701  00FFF5  74                 	db	116	;'t'
   702  00FFF6  61                 	db	97	;'a'
   703  00FFF7  6E                 	db	110	;'n'
   704  00FFF8  64                 	db	100	;'d'
   705  00FFF9  62                 	db	98	;'b'
   706  00FFFA  79                 	db	121	;'y'
   707  00FFFB  00                 	db	0
   708  00FFFC                     STR_5:
   709  00FFFC  25                 	db	37
   710  00FFFD  64                 	db	100	;'d'
   711  00FFFE  00                 	db	0
   712                           
   713                           ; #config settings
   714  00FFFF  00                 	db	0	; dummy byte at the end
   715  0000                     
   716                           	psect	cinit
   717  002C30                     __pcinit:
   718                           	opt stack 0
   719  002C30                     start_initialization:
   720                           	opt stack 0
   721  002C30                     __initialization:
   722                           	opt stack 0
   723                           
   724                           ; Initialize objects allocated to BANK0 (2 bytes)
   725                           ; load TBLPTR registers with __pidataBANK0
   726  002C30  0E02               	movlw	low __pidataBANK0
   727  002C32  6EF6               	movwf	tblptrl,c
   728  002C34  0E2F               	movlw	high __pidataBANK0
   729  002C36  6EF7               	movwf	tblptrh,c
   730  002C38  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   731  002C3A  6EF8               	movwf	tblptru,c
   732  002C3C  0009               	tblrd		*+	;fetch initializer
   733  002C3E  CFF5 F0ED          	movff	tablat,__pdataBANK0
   734  002C42  0009               	tblrd		*+	;fetch initializer
   735  002C44  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   736                           
   737                           ; Clear objects allocated to BANK0 (56 bytes)
   738  002C48  EE00  F080         	lfsr	0,__pbssBANK0
   739  002C4C  0E38               	movlw	56
   740  002C4E                     clear_0:
   741  002C4E  6AEE               	clrf	postinc0,c
   742  002C50  06E8               	decf	wreg,f,c
   743  002C52  E1FD               	bnz	clear_0
   744                           
   745                           ; Clear objects allocated to COMRAM (8 bytes)
   746  002C54  EE00  F076         	lfsr	0,__pbssCOMRAM
   747  002C58  0E08               	movlw	8
   748  002C5A                     clear_1:
   749  002C5A  6AEE               	clrf	postinc0,c
   750  002C5C  06E8               	decf	wreg,f,c
   751  002C5E  E1FD               	bnz	clear_1
   752  002C60                     end_of_initialization:
   753                           	opt stack 0
   754  002C60                     __end_of__initialization:
   755                           	opt stack 0
   756  002C60  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   757  002C62  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   758  002C64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   759  002C66  6EF8               	movwf	tblptru,c
   760  002C68  0100               	movlb	0
   761  002C6A  EF3D  F00F         	goto	_main	;jump to C main() function
   762                           tblptru	equ	0xFF8
   763                           tblptrh	equ	0xFF7
   764                           tblptrl	equ	0xFF6
   765                           tablat	equ	0xFF5
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           
   769                           	psect	bssCOMRAM
   770  000076                     __pbssCOMRAM:
   771                           	opt stack 0
   772  000076                     _end_time:
   773                           	opt stack 0
   774  000076                     	ds	2
   775  000078                     _etime:
   776                           	opt stack 0
   777  000078                     	ds	2
   778  00007A                     _start_time:
   779                           	opt stack 0
   780  00007A                     	ds	2
   781  00007C                     _stime:
   782                           	opt stack 0
   783  00007C                     	ds	2
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           
   791                           	psect	bssBANK0
   792  000080                     __pbssBANK0:
   793                           	opt stack 0
   794  000080                     _color:
   795                           	opt stack 0
   796  000080                     	ds	12
   797  00008C                     _bottle_count_array:
   798                           	opt stack 0
   799  00008C                     	ds	10
   800  000096                     _time:
   801                           	opt stack 0
   802  000096                     	ds	7
   803  00009D                     _testint:
   804                           	opt stack 0
   805  00009D                     	ds	6
   806  0000A3                     _bottle_read_bot:
   807                           	opt stack 0
   808  0000A3                     	ds	2
   809  0000A5                     _bottle_read_top:
   810                           	opt stack 0
   811  0000A5                     	ds	2
   812  0000A7                     _errno:
   813                           	opt stack 0
   814  0000A7                     	ds	2
   815  0000A9                     _flag_bottle:
   816                           	opt stack 0
   817  0000A9                     	ds	2
   818  0000AB                     _flag_bottle_high:
   819                           	opt stack 0
   820  0000AB                     	ds	2
   821  0000AD                     _flag_top_read:
   822                           	opt stack 0
   823  0000AD                     	ds	2
   824  0000AF                     _flag_yopNC:
   825                           	opt stack 0
   826  0000AF                     	ds	2
   827  0000B1                     _operation_disp:
   828                           	opt stack 0
   829  0000B1                     	ds	2
   830  0000B3                     _operation_time:
   831                           	opt stack 0
   832  0000B3                     	ds	2
   833  0000B5                     _testflag:
   834                           	opt stack 0
   835  0000B5                     	ds	2
   836  0000B7                     _curr_state:
   837                           	opt stack 0
   838  0000B7                     	ds	1
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           
   846                           	psect	dataBANK0
   847  0000ED                     __pdataBANK0:
   848                           	opt stack 0
   849  0000ED                     _bottle_count_disp:
   850                           	opt stack 0
   851  0000ED                     	ds	2
   852                           tblptru	equ	0xFF8
   853                           tblptrh	equ	0xFF7
   854                           tblptrl	equ	0xFF6
   855                           tablat	equ	0xFF5
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           
   859                           	psect	cstackBANK0
   860  0000B8                     __pcstackBANK0:
   861                           	opt stack 0
   862  0000B8                     ??_isr:
   863                           
   864                           ; 1 bytes @ 0x0
   865  0000B8                     	ds	16
   866  0000C8                     ??_isdigit:
   867  0000C8                     ??_I2C_Master_Wait:
   868  0000C8                     ?___wmul:
   869                           	opt stack 0
   870  0000C8                     ?___awmod:
   871                           	opt stack 0
   872  0000C8                     ?___lwdiv:
   873                           	opt stack 0
   874  0000C8                     ?___ftpack:
   875                           	opt stack 0
   876  0000C8                     ?___lldiv:
   877                           	opt stack 0
   878  0000C8                     lcdNibble@temp:
   879                           	opt stack 0
   880  0000C8                     ___wmul@multiplier:
   881                           	opt stack 0
   882  0000C8                     ___awmod@dividend:
   883                           	opt stack 0
   884  0000C8                     ___lwdiv@dividend:
   885                           	opt stack 0
   886  0000C8                     ___ftpack@arg:
   887                           	opt stack 0
   888  0000C8                     ___lldiv@dividend:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x10
   892  0000C8                     	ds	1
   893  0000C9                     I2C_Master_Read@a:
   894                           	opt stack 0
   895  0000C9                     lcdNibble@data:
   896                           	opt stack 0
   897  0000C9                     _isdigit$797:
   898                           	opt stack 0
   899  0000C9                     I2C_Master_Write@d:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x11
   903  0000C9                     	ds	1
   904  0000CA                     I2C_Master_Read@temp:
   905                           	opt stack 0
   906  0000CA                     lcdInst@data:
   907                           	opt stack 0
   908  0000CA                     putch@data:
   909                           	opt stack 0
   910  0000CA                     isdigit@c:
   911                           	opt stack 0
   912  0000CA                     ___wmul@multiplicand:
   913                           	opt stack 0
   914  0000CA                     ___awmod@divisor:
   915                           	opt stack 0
   916  0000CA                     ___lwdiv@divisor:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x12
   920  0000CA                     	ds	1
   921  0000CB                     ??_I2C_ColorSens_Init:
   922  0000CB                     ??_initLCD:
   923  0000CB                     ___ftpack@exp:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x13
   927  0000CB                     	ds	1
   928  0000CC                     ___awmod@counter:
   929                           	opt stack 0
   930  0000CC                     ___ftpack@sign:
   931                           	opt stack 0
   932  0000CC                     ___wmul@product:
   933                           	opt stack 0
   934  0000CC                     ___lwdiv@quotient:
   935                           	opt stack 0
   936  0000CC                     ___lldiv@divisor:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x14
   940  0000CC                     	ds	1
   941  0000CD                     ??___ftpack:
   942  0000CD                     ___awmod@sign:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x15
   946  0000CD                     	ds	1
   947  0000CE                     ___lwdiv@counter:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x16
   951  0000CE                     	ds	1
   952  0000CF                     ?___lwmod:
   953                           	opt stack 0
   954  0000CF                     ___lwmod@dividend:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x17
   958  0000CF                     	ds	1
   959  0000D0                     ?___ftdiv:
   960                           	opt stack 0
   961  0000D0                     ?___awtoft:
   962                           	opt stack 0
   963  0000D0                     ___awtoft@c:
   964                           	opt stack 0
   965  0000D0                     ___ftdiv@f1:
   966                           	opt stack 0
   967  0000D0                     ___lldiv@quotient:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0x18
   971  0000D0                     	ds	1
   972  0000D1                     ___lwmod@divisor:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x19
   976  0000D1                     	ds	2
   977  0000D3                     ___awtoft@sign:
   978                           	opt stack 0
   979  0000D3                     ___lwmod@counter:
   980                           	opt stack 0
   981  0000D3                     ___ftdiv@f2:
   982                           	opt stack 0
   983                           
   984                           ; 3 bytes @ 0x1B
   985  0000D3                     	ds	1
   986  0000D4                     ??_read_colorsensor:
   987  0000D4                     ?_printf:
   988                           	opt stack 0
   989  0000D4                     ___lldiv@counter:
   990                           	opt stack 0
   991  0000D4                     printf@f:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x1C
   995  0000D4                     	ds	1
   996  0000D5                     I2C_Master_Init@c:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x1D
  1000  0000D5                     	ds	1
  1001  0000D6                     ??___ftdiv:
  1002                           
  1003                           ; 1 bytes @ 0x1E
  1004  0000D6                     	ds	2
  1005  0000D8                     read_colorsensor@color_low:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0x20
  1009  0000D8                     	ds	1
  1010  0000D9                     ??_I2C_Master_Init:
  1011  0000D9                     ___ftdiv@cntr:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x21
  1015  0000D9                     	ds	1
  1016  0000DA                     ___ftdiv@f3:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x22
  1020  0000DA                     	ds	2
  1021  0000DC                     ??_printf:
  1022  0000DC                     read_colorsensor@color_high:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0x24
  1026  0000DC                     	ds	1
  1027  0000DD                     ___ftdiv@exp:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x25
  1031  0000DD                     	ds	1
  1032  0000DE                     ___ftdiv@sign:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x26
  1036  0000DE                     	ds	1
  1037  0000DF                     ___ftge@ff1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x27
  1041  0000DF                     	ds	1
  1042  0000E0                     printf@idx:
  1043                           	opt stack 0
  1044  0000E0                     read_colorsensor@i:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x28
  1048  0000E0                     	ds	1
  1049  0000E1                     printf@ap:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x29
  1053  0000E1                     	ds	1
  1054  0000E2                     ___ftge@ff2:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x2A
  1058  0000E2                     	ds	1
  1059  0000E3                     printf@prec:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x2B
  1063  0000E3                     	ds	1
  1064  0000E4                     printf@val:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x2C
  1068  0000E4                     	ds	1
  1069  0000E5                     ??___ftge:
  1070                           
  1071                           ; 1 bytes @ 0x2D
  1072  0000E5                     	ds	1
  1073  0000E6                     printf@flag:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x2E
  1077  0000E6                     	ds	1
  1078  0000E7                     printf@width:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x2F
  1082  0000E7                     	ds	2
  1083  0000E9                     printf@c:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x31
  1087  0000E9                     	ds	1
  1088  0000EA                     ??_operation:
  1089  0000EA                     date_time@i:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x32
  1093  0000EA                     	ds	2
  1094  0000EC                     ??_main:
  1095                           
  1096                           ; 1 bytes @ 0x34
  1097  0000EC                     	ds	1
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           
  1105                           	psect	cstackCOMRAM
  1106  000001                     __pcstackCOMRAM:
  1107                           	opt stack 0
  1108  000001                     ??i2_I2C_Master_Wait:
  1109  000001                     ??i2_isdigit:
  1110  000001                     ?___awdiv:
  1111                           	opt stack 0
  1112  000001                     ?i2___wmul:
  1113                           	opt stack 0
  1114  000001                     ?i2___lwdiv:
  1115                           	opt stack 0
  1116  000001                     ?_frexp:
  1117                           	opt stack 0
  1118  000001                     ?___ftneg:
  1119                           	opt stack 0
  1120  000001                     ?i2___ftpack:
  1121                           	opt stack 0
  1122  000001                     i2lcdNibble@temp:
  1123                           	opt stack 0
  1124  000001                     servo_rotate0@degree:
  1125                           	opt stack 0
  1126  000001                     ___awdiv@dividend:
  1127                           	opt stack 0
  1128  000001                     i2___wmul@multiplier:
  1129                           	opt stack 0
  1130  000001                     i2___lwdiv@dividend:
  1131                           	opt stack 0
  1132  000001                     ___ftneg@f1:
  1133                           	opt stack 0
  1134  000001                     frexp@value:
  1135                           	opt stack 0
  1136  000001                     i2___ftpack@arg:
  1137                           	opt stack 0
  1138  000001                     i2___ftge@ff1:
  1139                           	opt stack 0
  1140                           
  1141                           ; 3 bytes @ 0x0
  1142  000001                     	ds	1
  1143  000002                     i2I2C_Master_Read@a:
  1144                           	opt stack 0
  1145  000002                     i2lcdNibble@data:
  1146                           	opt stack 0
  1147  000002                     i2_isdigit$797:
  1148                           	opt stack 0
  1149  000002                     i2I2C_Master_Write@d:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x1
  1153  000002                     	ds	1
  1154  000003                     ??_servo_rotate0:
  1155  000003                     i2I2C_Master_Read@temp:
  1156                           	opt stack 0
  1157  000003                     i2lcdInst@data:
  1158                           	opt stack 0
  1159  000003                     i2putch@data:
  1160                           	opt stack 0
  1161  000003                     i2isdigit@c:
  1162                           	opt stack 0
  1163  000003                     ___awdiv@divisor:
  1164                           	opt stack 0
  1165  000003                     i2___wmul@multiplicand:
  1166                           	opt stack 0
  1167  000003                     i2___lwdiv@divisor:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x2
  1171  000003                     	ds	1
  1172  000004                     read_time@i:
  1173                           	opt stack 0
  1174  000004                     i2___ftpack@exp:
  1175                           	opt stack 0
  1176  000004                     frexp@eptr:
  1177                           	opt stack 0
  1178  000004                     i2___ftge@ff2:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x3
  1182  000004                     	ds	1
  1183  000005                     ___awdiv@counter:
  1184                           	opt stack 0
  1185  000005                     i2___ftpack@sign:
  1186                           	opt stack 0
  1187  000005                     servo_rotate0@duty:
  1188                           	opt stack 0
  1189  000005                     i2___wmul@product:
  1190                           	opt stack 0
  1191  000005                     i2___lwdiv@quotient:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x4
  1195  000005                     	ds	1
  1196  000006                     ??_frexp:
  1197  000006                     ??i2___ftpack:
  1198  000006                     ___awdiv@sign:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x5
  1202  000006                     	ds	1
  1203  000007                     ??i2___ftge:
  1204  000007                     i2___lwdiv@counter:
  1205                           	opt stack 0
  1206  000007                     servo_rotate0@i:
  1207                           	opt stack 0
  1208  000007                     ___awdiv@quotient:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x6
  1212  000007                     	ds	1
  1213  000008                     ?i2___lwmod:
  1214                           	opt stack 0
  1215  000008                     i2___lwmod@dividend:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x7
  1219  000008                     	ds	1
  1220  000009                     ?___lltoft:
  1221                           	opt stack 0
  1222  000009                     ?i2___awtoft:
  1223                           	opt stack 0
  1224  000009                     ?i2___ftdiv:
  1225                           	opt stack 0
  1226  000009                     servo_rotate0@j:
  1227                           	opt stack 0
  1228  000009                     i2___awtoft@c:
  1229                           	opt stack 0
  1230  000009                     i2___ftdiv@f1:
  1231                           	opt stack 0
  1232  000009                     ___lltoft@c:
  1233                           	opt stack 0
  1234                           
  1235                           ; 4 bytes @ 0x8
  1236  000009                     	ds	1
  1237  00000A                     i2___lwmod@divisor:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x9
  1241  00000A                     	ds	2
  1242  00000C                     i2___awtoft@sign:
  1243                           	opt stack 0
  1244  00000C                     i2___lwmod@counter:
  1245                           	opt stack 0
  1246  00000C                     i2___ftdiv@f2:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0xB
  1250  00000C                     	ds	1
  1251  00000D                     ??___lltoft:
  1252  00000D                     ??i2_read_colorsensor:
  1253  00000D                     ?i2_printf:
  1254                           	opt stack 0
  1255  00000D                     ?___ftmul:
  1256                           	opt stack 0
  1257  00000D                     i2printf@f:
  1258                           	opt stack 0
  1259  00000D                     ___ftmul@f1:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0xC
  1263  00000D                     	ds	2
  1264  00000F                     ??i2___ftdiv:
  1265                           
  1266                           ; 1 bytes @ 0xE
  1267  00000F                     	ds	1
  1268  000010                     ___ftmul@f2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0xF
  1272  000010                     	ds	1
  1273  000011                     ___lltoft@exp:
  1274                           	opt stack 0
  1275  000011                     i2read_colorsensor@color_low:
  1276                           	opt stack 0
  1277                           
  1278                           ; 4 bytes @ 0x10
  1279  000011                     	ds	1
  1280  000012                     i2___ftdiv@cntr:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x11
  1284  000012                     	ds	1
  1285  000013                     ??___ftmul:
  1286  000013                     i2___ftdiv@f3:
  1287                           	opt stack 0
  1288                           
  1289                           ; 3 bytes @ 0x12
  1290  000013                     	ds	2
  1291  000015                     ??i2_printf:
  1292  000015                     i2read_colorsensor@color_high:
  1293                           	opt stack 0
  1294                           
  1295                           ; 4 bytes @ 0x14
  1296  000015                     	ds	1
  1297  000016                     ___ftmul@exp:
  1298                           	opt stack 0
  1299  000016                     i2___ftdiv@exp:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x15
  1303  000016                     	ds	1
  1304  000017                     i2___ftdiv@sign:
  1305                           	opt stack 0
  1306  000017                     ___ftmul@f3_as_product:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x16
  1310  000017                     	ds	2
  1311  000019                     i2printf@idx:
  1312                           	opt stack 0
  1313  000019                     i2read_colorsensor@i:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x18
  1317  000019                     	ds	1
  1318  00001A                     ___ftmul@cntr:
  1319                           	opt stack 0
  1320  00001A                     i2printf@ap:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x19
  1324  00001A                     	ds	1
  1325  00001B                     ___ftmul@sign:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x1A
  1329  00001B                     	ds	1
  1330  00001C                     ?___ftadd:
  1331                           	opt stack 0
  1332  00001C                     i2printf@prec:
  1333                           	opt stack 0
  1334  00001C                     ___ftadd@f1:
  1335                           	opt stack 0
  1336                           
  1337                           ; 3 bytes @ 0x1B
  1338  00001C                     	ds	1
  1339  00001D                     i2printf@val:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1C
  1343  00001D                     	ds	2
  1344  00001F                     i2printf@flag:
  1345                           	opt stack 0
  1346  00001F                     ___ftadd@f2:
  1347                           	opt stack 0
  1348                           
  1349                           ; 3 bytes @ 0x1E
  1350  00001F                     	ds	1
  1351  000020                     i2printf@width:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x1F
  1355  000020                     	ds	2
  1356  000022                     ??___ftadd:
  1357  000022                     i2printf@c:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x21
  1361  000022                     	ds	3
  1362  000025                     ___ftadd@sign:
  1363                           	opt stack 0
  1364                           
  1365                           ; 1 bytes @ 0x24
  1366  000025                     	ds	1
  1367  000026                     ___ftadd@exp2:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x25
  1371  000026                     	ds	1
  1372  000027                     ___ftadd@exp1:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x26
  1376  000027                     	ds	1
  1377  000028                     ?___ftsub:
  1378                           	opt stack 0
  1379  000028                     ?_eval_poly:
  1380                           	opt stack 0
  1381  000028                     ?___fttol:
  1382                           	opt stack 0
  1383  000028                     ___ftsub@f1:
  1384                           	opt stack 0
  1385  000028                     ___fttol@f1:
  1386                           	opt stack 0
  1387  000028                     eval_poly@x:
  1388                           	opt stack 0
  1389                           
  1390                           ; 3 bytes @ 0x27
  1391  000028                     	ds	3
  1392  00002B                     eval_poly@d:
  1393                           	opt stack 0
  1394  00002B                     ___ftsub@f2:
  1395                           	opt stack 0
  1396                           
  1397                           ; 3 bytes @ 0x2A
  1398  00002B                     	ds	1
  1399  00002C                     ??___fttol:
  1400                           
  1401                           ; 1 bytes @ 0x2B
  1402  00002C                     	ds	1
  1403  00002D                     eval_poly@n:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x2C
  1407  00002D                     	ds	1
  1408  00002E                     
  1409                           ; 1 bytes @ 0x2D
  1410  00002E                     	ds	1
  1411  00002F                     ??_eval_poly:
  1412                           
  1413                           ; 1 bytes @ 0x2E
  1414  00002F                     	ds	2
  1415  000031                     ___fttol@sign1:
  1416                           	opt stack 0
  1417  000031                     eval_poly@res:
  1418                           	opt stack 0
  1419                           
  1420                           ; 3 bytes @ 0x30
  1421  000031                     	ds	1
  1422  000032                     ___fttol@lval:
  1423                           	opt stack 0
  1424                           
  1425                           ; 4 bytes @ 0x31
  1426  000032                     	ds	2
  1427  000034                     ?_log:
  1428                           	opt stack 0
  1429  000034                     ?_ldexp:
  1430                           	opt stack 0
  1431  000034                     ldexp@value:
  1432                           	opt stack 0
  1433  000034                     log@x:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x33
  1437  000034                     	ds	2
  1438  000036                     ___fttol@exp1:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x35
  1442  000036                     	ds	1
  1443  000037                     ?___altoft:
  1444                           	opt stack 0
  1445  000037                     ldexp@newexp:
  1446                           	opt stack 0
  1447  000037                     log@exponent:
  1448                           	opt stack 0
  1449  000037                     ___altoft@c:
  1450                           	opt stack 0
  1451                           
  1452                           ; 4 bytes @ 0x36
  1453  000037                     	ds	2
  1454  000039                     ??_ldexp:
  1455                           
  1456                           ; 1 bytes @ 0x38
  1457  000039                     	ds	2
  1458  00003B                     ??___altoft:
  1459                           
  1460                           ; 1 bytes @ 0x3A
  1461  00003B                     	ds	4
  1462  00003F                     ___altoft@exp:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x3E
  1466  00003F                     	ds	1
  1467  000040                     ___altoft@sign:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x3F
  1471  000040                     	ds	1
  1472  000041                     ?_floor:
  1473                           	opt stack 0
  1474  000041                     floor@x:
  1475                           	opt stack 0
  1476                           
  1477                           ; 3 bytes @ 0x40
  1478  000041                     	ds	3
  1479  000044                     floor@i:
  1480                           	opt stack 0
  1481                           
  1482                           ; 3 bytes @ 0x43
  1483  000044                     	ds	3
  1484  000047                     floor@expon:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x46
  1488  000047                     	ds	2
  1489  000049                     ?_exp:
  1490                           	opt stack 0
  1491  000049                     exp@x:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x48
  1495  000049                     	ds	3
  1496  00004C                     _exp$1240:
  1497                           	opt stack 0
  1498                           
  1499                           ; 3 bytes @ 0x4B
  1500  00004C                     	ds	3
  1501  00004F                     exp@exponent:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x4E
  1505  00004F                     	ds	2
  1506  000051                     exp@sign:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x50
  1510  000051                     	ds	1
  1511  000052                     ?_pow:
  1512                           	opt stack 0
  1513  000052                     pow@x:
  1514                           	opt stack 0
  1515                           
  1516                           ; 3 bytes @ 0x51
  1517  000052                     	ds	3
  1518  000055                     pow@y:
  1519                           	opt stack 0
  1520                           
  1521                           ; 3 bytes @ 0x54
  1522  000055                     	ds	3
  1523  000058                     _pow$1238:
  1524                           	opt stack 0
  1525                           
  1526                           ; 3 bytes @ 0x57
  1527  000058                     	ds	3
  1528  00005B                     _pow$1239:
  1529                           	opt stack 0
  1530                           
  1531                           ; 3 bytes @ 0x5A
  1532  00005B                     	ds	3
  1533  00005E                     pow@sign:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x5D
  1537  00005E                     	ds	1
  1538  00005F                     pow@yi:
  1539                           	opt stack 0
  1540                           
  1541                           ; 4 bytes @ 0x5E
  1542  00005F                     	ds	4
  1543  000063                     ?_dec_to_hex:
  1544                           	opt stack 0
  1545  000063                     dec_to_hex@num:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x62
  1549  000063                     	ds	2
  1550  000065                     _dec_to_hex$1237:
  1551                           	opt stack 0
  1552                           
  1553                           ; 3 bytes @ 0x64
  1554  000065                     	ds	3
  1555  000068                     _dec_to_hex$1361:
  1556                           	opt stack 0
  1557                           
  1558                           ; 3 bytes @ 0x67
  1559  000068                     	ds	3
  1560  00006B                     dec_to_hex@temp:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x6A
  1564  00006B                     	ds	2
  1565  00006D                     dec_to_hex@i:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x6C
  1569  00006D                     	ds	2
  1570  00006F                     dec_to_hex@hexnum:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x6E
  1574  00006F                     	ds	2
  1575  000071                     dec_to_hex@quotient:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x70
  1579  000071                     	ds	2
  1580  000073                     isr@i:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x72
  1584  000073                     	ds	1
  1585  000074                     _isr$1360:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x73
  1589  000074                     	ds	2
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           
  1597 ;;
  1598 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1599 ;;
  1600 ;; *************** function _main *****************
  1601 ;; Defined at:
  1602 ;;		line 16 in file "main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;Total ram usage:        1 bytes
  1621 ;; Hardware stack levels required when called:   11
  1622 ;; This function calls:
  1623 ;;		_I2C_ColorSens_Init
  1624 ;;		_I2C_Master_Init
  1625 ;;		_bottle_count
  1626 ;;		_bottle_time
  1627 ;;		_date_time
  1628 ;;		_emergencystop
  1629 ;;		_initLCD
  1630 ;;		_operation
  1631 ;;		_operationend
  1632 ;;		_standby
  1633 ;; This function is called by:
  1634 ;;		Startup code after reset
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text0
  1639  001E7A                     __ptext0:
  1640                           	opt stack 0
  1641  001E7A                     _main:
  1642                           	opt stack 20
  1643                           
  1644                           ;main.c: 23: TRISA = 0b11111011;
  1645                           
  1646                           ;incstack = 0
  1647  001E7A  0EFB               	movlw	251
  1648  001E7C  6E92               	movwf	3986,c	;volatile
  1649                           
  1650                           ;main.c: 24: TRISB = 0xFF;
  1651  001E7E  6893               	setf	3987,c	;volatile
  1652                           
  1653                           ;main.c: 25: TRISC = 0x00;
  1654  001E80  0E00               	movlw	0
  1655  001E82  6E94               	movwf	3988,c	;volatile
  1656                           
  1657                           ;main.c: 26: TRISD = 0x00;
  1658  001E84  0E00               	movlw	0
  1659  001E86  6E95               	movwf	3989,c	;volatile
  1660                           
  1661                           ;main.c: 27: TRISE = 0x00;
  1662  001E88  0E00               	movlw	0
  1663  001E8A  6E96               	movwf	3990,c	;volatile
  1664                           
  1665                           ;main.c: 29: LATA = 0x00;
  1666  001E8C  0E00               	movlw	0
  1667  001E8E  6E89               	movwf	3977,c	;volatile
  1668                           
  1669                           ;main.c: 30: LATB = 0x00;
  1670  001E90  0E00               	movlw	0
  1671  001E92  6E8A               	movwf	3978,c	;volatile
  1672                           
  1673                           ;main.c: 31: LATC = 0x00;
  1674  001E94  0E00               	movlw	0
  1675  001E96  6E8B               	movwf	3979,c	;volatile
  1676                           
  1677                           ;main.c: 32: LATD = 0x00;
  1678  001E98  0E00               	movlw	0
  1679  001E9A  6E8C               	movwf	3980,c	;volatile
  1680                           
  1681                           ;main.c: 33: LATE = 0x00;
  1682  001E9C  0E00               	movlw	0
  1683  001E9E  6E8D               	movwf	3981,c	;volatile
  1684                           
  1685                           ;main.c: 35: ADCON0 = 0x00;
  1686  001EA0  0E00               	movlw	0
  1687  001EA2  6EC2               	movwf	4034,c	;volatile
  1688                           
  1689                           ;main.c: 36: ADCON1 = 0xFF;
  1690  001EA4  68C1               	setf	4033,c	;volatile
  1691                           
  1692                           ;main.c: 39: GIE = 1;
  1693  001EA6  8EF2               	bsf	intcon,7,c	;volatile
  1694                           
  1695                           ;main.c: 40: INT1IE = 1;
  1696  001EA8  86F0               	bsf	intcon3,3,c	;volatile
  1697                           
  1698                           ;main.c: 41: INT0IE = 0;
  1699  001EAA  98F2               	bcf	intcon,4,c	;volatile
  1700                           
  1701                           ;main.c: 42: INT2IE = 0;
  1702  001EAC  98F0               	bcf	intcon3,4,c	;volatile
  1703                           
  1704                           ;main.c: 44: nRBPU = 0;
  1705  001EAE  9EF1               	bcf	intcon2,7,c	;volatile
  1706                           
  1707                           ;main.c: 46: initLCD();
  1708  001EB0  EC66  F015         	call	_initLCD	;wreg free
  1709                           
  1710                           ;main.c: 47: I2C_Master_Init(10000);
  1711  001EB4  0E10               	movlw	16
  1712  001EB6  0100               	movlb	0	; () banked
  1713  001EB8  6FD5               	movwf	I2C_Master_Init@c& (0+255),b
  1714  001EBA  0E27               	movlw	39
  1715  001EBC  6FD6               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1716  001EBE  0E00               	movlw	0
  1717  001EC0  6FD7               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1718  001EC2  0E00               	movlw	0
  1719  001EC4  6FD8               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1720  001EC6  ECDF  F014         	call	_I2C_Master_Init	;wreg free
  1721                           
  1722                           ;main.c: 48: I2C_ColorSens_Init();
  1723  001ECA  ECAB  F00F         	call	_I2C_ColorSens_Init	;wreg free
  1724                           
  1725                           ;main.c: 51: TMR0 = 0;
  1726  001ECE  0E00               	movlw	0
  1727  001ED0  6ED7               	movwf	4055,c	;volatile
  1728  001ED2  0E00               	movlw	0
  1729  001ED4  6ED6               	movwf	4054,c	;volatile
  1730                           
  1731                           ;main.c: 52: T08BIT = 0;
  1732  001ED6  9CD5               	bcf	4053,6,c	;volatile
  1733                           
  1734                           ;main.c: 53: T0CS = 0;
  1735  001ED8  9AD5               	bcf	4053,5,c	;volatile
  1736                           
  1737                           ;main.c: 54: PSA = 0;
  1738  001EDA  96D5               	bcf	4053,3,c	;volatile
  1739                           
  1740                           ;main.c: 55: T0PS2 = 1;
  1741  001EDC  84D5               	bsf	4053,2,c	;volatile
  1742                           
  1743                           ;main.c: 56: T0PS1 = 1;
  1744  001EDE  82D5               	bsf	4053,1,c	;volatile
  1745                           
  1746                           ;main.c: 57: T0PS0 = 1;
  1747  001EE0  80D5               	bsf	4053,0,c	;volatile
  1748                           
  1749                           ;main.c: 61: curr_state = STANDBY;
  1750  001EE2  0E00               	movlw	0
  1751  001EE4  0100               	movlb	0	; () banked
  1752  001EE6  6FB7               	movwf	_curr_state& (0+255),b
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 64: switch(curr_state){
  1756                           
  1757                           ;main.c: 63: while(1){
  1758  001EE8  D015               	goto	l4691
  1759  001EEA                     l4675:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 66: standby();
  1763  001EEA  EC37  F016         	call	_standby	;wreg free
  1764                           
  1765                           ;main.c: 67: break;
  1766  001EEE  D029               	goto	l4693
  1767  001EF0                     l4677:
  1768                           
  1769                           ;main.c: 69: emergencystop();
  1770  001EF0  EC0C  F017         	call	_emergencystop	;wreg free
  1771                           
  1772                           ;main.c: 70: break;
  1773  001EF4  D026               	goto	l4693
  1774  001EF6                     l4679:
  1775                           
  1776                           ;main.c: 72: operation();
  1777  001EF6  ECB5  F003         	call	_operation	;wreg free
  1778                           
  1779                           ;main.c: 73: break;
  1780  001EFA  D023               	goto	l4693
  1781  001EFC                     l4681:
  1782                           
  1783                           ;main.c: 75: operationend();
  1784  001EFC  EC2C  F017         	call	_operationend	;wreg free
  1785                           
  1786                           ;main.c: 76: break;
  1787  001F00  D020               	goto	l4693
  1788  001F02                     l4683:
  1789                           
  1790                           ;main.c: 78: date_time();
  1791  001F02  EC19  F010         	call	_date_time	;wreg free
  1792                           
  1793                           ;main.c: 79: break;
  1794  001F06  D01D               	goto	l4693
  1795  001F08                     l4685:
  1796                           
  1797                           ;main.c: 81: bottle_count();
  1798  001F08  EC67  F00C         	call	_bottle_count	;wreg free
  1799                           
  1800                           ;main.c: 82: break;
  1801  001F0C  D01A               	goto	l4693
  1802  001F0E                     l4687:
  1803                           
  1804                           ;main.c: 84: bottle_time();
  1805  001F0E  EC72  F016         	call	_bottle_time	;wreg free
  1806                           
  1807                           ;main.c: 86: }
  1808                           
  1809                           ;main.c: 85: break;
  1810  001F12  D017               	goto	l4693
  1811  001F14                     l4691:
  1812  001F14  0100               	movlb	0	; () banked
  1813  001F16  51B7               	movf	_curr_state& (0+255),w,b
  1814                           
  1815                           ; Switch size 1, requested type "space"
  1816                           ; Number of cases is 7, Range of values is 0 to 6
  1817                           ; switch strategies available:
  1818                           ; Name         Instructions Cycles
  1819                           ; simple_byte           22    12 (average)
  1820                           ;	Chosen strategy is simple_byte
  1821  001F18  0A00               	xorlw	0	; case 0
  1822  001F1A  B4D8               	btfsc	status,2,c
  1823  001F1C  D7E6               	goto	l4675
  1824  001F1E  0A01               	xorlw	1	; case 1
  1825  001F20  B4D8               	btfsc	status,2,c
  1826  001F22  D7E6               	goto	l4677
  1827  001F24  0A03               	xorlw	3	; case 2
  1828  001F26  B4D8               	btfsc	status,2,c
  1829  001F28  D7E6               	goto	l4679
  1830  001F2A  0A01               	xorlw	1	; case 3
  1831  001F2C  B4D8               	btfsc	status,2,c
  1832  001F2E  D7E6               	goto	l4681
  1833  001F30  0A07               	xorlw	7	; case 4
  1834  001F32  B4D8               	btfsc	status,2,c
  1835  001F34  D7E6               	goto	l4683
  1836  001F36  0A01               	xorlw	1	; case 5
  1837  001F38  B4D8               	btfsc	status,2,c
  1838  001F3A  D7E6               	goto	l4685
  1839  001F3C  0A03               	xorlw	3	; case 6
  1840  001F3E  B4D8               	btfsc	status,2,c
  1841  001F40  D7E6               	goto	l4687
  1842  001F42                     l4693:
  1843                           
  1844                           ;main.c: 87: _delay((unsigned long)((10)*(10000000/4000.0)));
  1845  001F42  0E21               	movlw	33
  1846  001F44  0100               	movlb	0	; () banked
  1847  001F46  6FEC               	movwf	??_main& (0+255),b
  1848  001F48  0E76               	movlw	118
  1849  001F4A                     u4627:
  1850  001F4A  2EE8               	decfsz	wreg,f,c
  1851  001F4C  D7FE               	bra	u4627
  1852  001F4E  2FEC               	decfsz	??_main& (0+255),f,b
  1853  001F50  D7FC               	bra	u4627
  1854  001F52  F000               	nop	
  1855  001F54  D7DF               	goto	l4691
  1856  001F56                     __end_of_main:
  1857                           	opt stack 0
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           intcon	equ	0xFF2
  1863                           intcon2	equ	0xFF1
  1864                           intcon3	equ	0xFF0
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           status	equ	0xFD8
  1868                           
  1869 ;; *************** function _standby *****************
  1870 ;; Defined at:
  1871 ;;		line 189 in file "main.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:   10
  1892 ;; This function calls:
  1893 ;;		_lcdInst
  1894 ;;		_printf
  1895 ;;		_read_colorsensor
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text1
  1902  002C6E                     __ptext1:
  1903                           	opt stack 0
  1904  002C6E                     _standby:
  1905                           	opt stack 20
  1906                           
  1907                           ;main.c: 190: lcdInst(0b10000000);
  1908                           
  1909                           ;incstack = 0
  1910  002C6E  0E80               	movlw	128
  1911  002C70  EC53  F017         	call	_lcdInst
  1912                           
  1913                           ;main.c: 191: printf("standby");
  1914  002C74  0EF4               	movlw	low STR_4
  1915  002C76  0100               	movlb	0	; () banked
  1916  002C78  6FD4               	movwf	printf@f& (0+255),b
  1917  002C7A  0EFF               	movlw	high STR_4
  1918  002C7C  0100               	movlb	0	; () banked
  1919  002C7E  6FD5               	movwf	(printf@f+1)& (0+255),b
  1920  002C80  EC09  F000         	call	_printf	;wreg free
  1921                           
  1922                           ;main.c: 192: lcdInst(0b11000000);
  1923  002C84  0EC0               	movlw	192
  1924  002C86  EC53  F017         	call	_lcdInst
  1925                           
  1926                           ;main.c: 193: read_colorsensor();
  1927  002C8A  EC83  F009         	call	_read_colorsensor	;wreg free
  1928                           
  1929                           ;main.c: 194: printf("%d", color[0]);
  1930  002C8E  0EFC               	movlw	low STR_5
  1931  002C90  0100               	movlb	0	; () banked
  1932  002C92  6FD4               	movwf	printf@f& (0+255),b
  1933  002C94  0EFF               	movlw	high STR_5
  1934  002C96  0100               	movlb	0	; () banked
  1935  002C98  6FD5               	movwf	(printf@f+1)& (0+255),b
  1936  002C9A  C080  F0D6         	movff	_color,?_printf+2
  1937  002C9E  C081  F0D7         	movff	_color+1,?_printf+3
  1938  002CA2  C082  F0D8         	movff	_color+2,?_printf+4
  1939  002CA6  EC09  F000         	call	_printf	;wreg free
  1940  002CAA  0012               	return	
  1941  002CAC                     __end_of_standby:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           intcon	equ	0xFF2
  1948                           intcon2	equ	0xFF1
  1949                           intcon3	equ	0xFF0
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           status	equ	0xFD8
  1953                           
  1954 ;; *************** function _operationend *****************
  1955 ;; Defined at:
  1956 ;;		line 366 in file "main.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;Total ram usage:        0 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:   10
  1977 ;; This function calls:
  1978 ;;		_lcdInst
  1979 ;;		_printf
  1980 ;; This function is called by:
  1981 ;;		_main
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text2
  1986  002E58                     __ptext2:
  1987                           	opt stack 0
  1988  002E58                     _operationend:
  1989                           	opt stack 20
  1990                           
  1991                           ;main.c: 367: lcdInst(0b10000000);
  1992                           
  1993                           ;incstack = 0
  1994  002E58  0E80               	movlw	128
  1995  002E5A  EC53  F017         	call	_lcdInst
  1996                           
  1997                           ;main.c: 368: printf("Operation Done!");
  1998  002E5E  0EB8               	movlw	low STR_20
  1999  002E60  0100               	movlb	0	; () banked
  2000  002E62  6FD4               	movwf	printf@f& (0+255),b
  2001  002E64  0EFF               	movlw	high STR_20
  2002  002E66  0100               	movlb	0	; () banked
  2003  002E68  6FD5               	movwf	(printf@f+1)& (0+255),b
  2004  002E6A  EC09  F000         	call	_printf	;wreg free
  2005  002E6E  0012               	return	
  2006  002E70                     __end_of_operationend:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           intcon	equ	0xFF2
  2013                           intcon2	equ	0xFF1
  2014                           intcon3	equ	0xFF0
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _operation *****************
  2020 ;; Defined at:
  2021 ;;		line 301 in file "main.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;Total ram usage:        2 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:   10
  2042 ;; This function calls:
  2043 ;;		___ftdiv
  2044 ;;		___ftge
  2045 ;;		_lcdInst
  2046 ;;		_printf
  2047 ;;		_read_colorsensor
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text3
  2054  00076A                     __ptext3:
  2055                           	opt stack 0
  2056  00076A                     _operation:
  2057                           	opt stack 20
  2058                           
  2059                           ;main.c: 302: switch(operation_disp){
  2060                           
  2061                           ;incstack = 0
  2062  00076A  D031               	goto	l4263
  2063  00076C                     l4243:
  2064                           
  2065                           ;main.c: 304: lcdInst(0b10000000);
  2066  00076C  0E80               	movlw	128
  2067  00076E  EC53  F017         	call	_lcdInst
  2068                           
  2069                           ;main.c: 305: printf("Running~              ");
  2070  000772  0ED3               	movlw	low STR_17
  2071  000774  0100               	movlb	0	; () banked
  2072  000776  6FD4               	movwf	printf@f& (0+255),b
  2073  000778  0EFE               	movlw	high STR_17
  2074  00077A  0100               	movlb	0	; () banked
  2075  00077C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2076  00077E  EC09  F000         	call	_printf	;wreg free
  2077                           
  2078                           ;main.c: 306: operation_disp = 1;
  2079  000782  0E00               	movlw	0
  2080  000784  0100               	movlb	0	; () banked
  2081  000786  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2082  000788  0E01               	movlw	1
  2083  00078A  D01F               	goto	L2
  2084  00078C                     l4249:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 309: lcdInst(0b10000000);
  2088  00078C  0E80               	movlw	128
  2089  00078E  EC53  F017         	call	_lcdInst
  2090                           
  2091                           ;main.c: 310: printf("Running~~              ");
  2092  000792  0EBB               	movlw	low STR_18
  2093  000794  0100               	movlb	0	; () banked
  2094  000796  6FD4               	movwf	printf@f& (0+255),b
  2095  000798  0EFE               	movlw	high STR_18
  2096  00079A  0100               	movlb	0	; () banked
  2097  00079C  6FD5               	movwf	(printf@f+1)& (0+255),b
  2098  00079E  EC09  F000         	call	_printf	;wreg free
  2099                           
  2100                           ;main.c: 311: operation_disp = 2;
  2101  0007A2  0E00               	movlw	0
  2102  0007A4  0100               	movlb	0	; () banked
  2103  0007A6  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2104  0007A8  0E02               	movlw	2
  2105  0007AA  D00F               	goto	L2
  2106  0007AC                     l4255:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;main.c: 314: lcdInst(0b10000000);
  2110  0007AC  0E80               	movlw	128
  2111  0007AE  EC53  F017         	call	_lcdInst
  2112                           
  2113                           ;main.c: 315: printf("Running~~~              ");
  2114  0007B2  0E72               	movlw	low STR_19
  2115  0007B4  0100               	movlb	0	; () banked
  2116  0007B6  6FD4               	movwf	printf@f& (0+255),b
  2117  0007B8  0EFE               	movlw	high STR_19
  2118  0007BA  0100               	movlb	0	; () banked
  2119  0007BC  6FD5               	movwf	(printf@f+1)& (0+255),b
  2120  0007BE  EC09  F000         	call	_printf	;wreg free
  2121                           
  2122                           ;main.c: 316: operation_disp = 0;
  2123  0007C2  0E00               	movlw	0
  2124  0007C4  0100               	movlb	0	; () banked
  2125  0007C6  6FB2               	movwf	(_operation_disp+1)& (0+255),b
  2126  0007C8  0E00               	movlw	0
  2127  0007CA                     L2:
  2128  0007CA  6FB1               	movwf	_operation_disp& (0+255),b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 318: }
  2132                           
  2133                           ;main.c: 317: break;
  2134  0007CC  D014               	goto	l4265
  2135  0007CE                     l4263:
  2136  0007CE  C0B1  F0EA         	movff	_operation_disp,??_operation
  2137  0007D2  C0B2  F0EB         	movff	_operation_disp+1,??_operation+1
  2138                           
  2139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2140                           ; Switch size 1, requested type "space"
  2141                           ; Number of cases is 1, Range of values is 0 to 0
  2142                           ; switch strategies available:
  2143                           ; Name         Instructions Cycles
  2144                           ; simple_byte            4     3 (average)
  2145                           ;	Chosen strategy is simple_byte
  2146  0007D6  0100               	movlb	0	; () banked
  2147  0007D8  51EB               	movf	(??_operation+1)& (0+255),w,b
  2148  0007DA  0A00               	xorlw	0	; case 0
  2149  0007DC  A4D8               	btfss	status,2,c
  2150  0007DE  D00B               	goto	l4265
  2151                           
  2152                           ; BSR set to: 0
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 3, Range of values is 0 to 2
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           10     6 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  0007E0  0100               	movlb	0	; () banked
  2160  0007E2  51EA               	movf	??_operation& (0+255),w,b
  2161  0007E4  0A00               	xorlw	0	; case 0
  2162  0007E6  B4D8               	btfsc	status,2,c
  2163  0007E8  D7C1               	goto	l4243
  2164  0007EA  0A01               	xorlw	1	; case 1
  2165  0007EC  B4D8               	btfsc	status,2,c
  2166  0007EE  D7CE               	goto	l4249
  2167  0007F0  0A03               	xorlw	3	; case 2
  2168  0007F2  B4D8               	btfsc	status,2,c
  2169  0007F4  D7DB               	goto	l4255
  2170  0007F6                     l4265:
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;main.c: 320: read_colorsensor();
  2174  0007F6  EC83  F009         	call	_read_colorsensor	;wreg free
  2175                           
  2176                           ;main.c: 321: if(color[0]>17){
  2177  0007FA  0E00               	movlw	0
  2178  0007FC  0100               	movlb	0	; () banked
  2179  0007FE  6FDF               	movwf	___ftge@ff1& (0+255),b
  2180  000800  0E88               	movlw	136
  2181  000802  0100               	movlb	0	; () banked
  2182  000804  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2183  000806  0E41               	movlw	65
  2184  000808  0100               	movlb	0	; () banked
  2185  00080A  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2186  00080C  C080  F0E2         	movff	_color,___ftge@ff2
  2187  000810  C081  F0E3         	movff	_color+1,___ftge@ff2+1
  2188  000814  C082  F0E4         	movff	_color+2,___ftge@ff2+2
  2189  000818  ECEB  F010         	call	___ftge	;wreg free
  2190  00081C  0100               	movlb	0	; () banked
  2191  00081E  B0D8               	btfsc	status,0,c
  2192  000820  D10A               	goto	l4303
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;main.c: 322: flag_bottle = 1;
  2196  000822  0E00               	movlw	0
  2197  000824  0100               	movlb	0	; () banked
  2198  000826  6FAA               	movwf	(_flag_bottle+1)& (0+255),b
  2199  000828  0E01               	movlw	1
  2200  00082A  6FA9               	movwf	_flag_bottle& (0+255),b
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;main.c: 323: if(color[0]>300)flag_yopNC = 1;
  2204  00082C  0E00               	movlw	0
  2205  00082E  0100               	movlb	0	; () banked
  2206  000830  6FDF               	movwf	___ftge@ff1& (0+255),b
  2207  000832  0E96               	movlw	150
  2208  000834  0100               	movlb	0	; () banked
  2209  000836  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2210  000838  0E43               	movlw	67
  2211  00083A  0100               	movlb	0	; () banked
  2212  00083C  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2213  00083E  C080  F0E2         	movff	_color,___ftge@ff2
  2214  000842  C081  F0E3         	movff	_color+1,___ftge@ff2+1
  2215  000846  C082  F0E4         	movff	_color+2,___ftge@ff2+2
  2216  00084A  ECEB  F010         	call	___ftge	;wreg free
  2217  00084E  0100               	movlb	0	; () banked
  2218  000850  B0D8               	btfsc	status,0,c
  2219  000852  D005               	goto	l4275
  2220                           
  2221                           ; BSR set to: 0
  2222  000854  0E00               	movlw	0
  2223  000856  0100               	movlb	0	; () banked
  2224  000858  6FB0               	movwf	(_flag_yopNC+1)& (0+255),b
  2225  00085A  0E01               	movlw	1
  2226  00085C  6FAF               	movwf	_flag_yopNC& (0+255),b
  2227  00085E                     l4275:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;main.c: 324: if(color[0]>30){
  2231  00085E  0E00               	movlw	0
  2232  000860  0100               	movlb	0	; () banked
  2233  000862  6FDF               	movwf	___ftge@ff1& (0+255),b
  2234  000864  0EF0               	movlw	240
  2235  000866  0100               	movlb	0	; () banked
  2236  000868  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2237  00086A  0E41               	movlw	65
  2238  00086C  0100               	movlb	0	; () banked
  2239  00086E  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2240  000870  C080  F0E2         	movff	_color,___ftge@ff2
  2241  000874  C081  F0E3         	movff	_color+1,___ftge@ff2+1
  2242  000878  C082  F0E4         	movff	_color+2,___ftge@ff2+2
  2243  00087C  ECEB  F010         	call	___ftge	;wreg free
  2244  000880  0100               	movlb	0	; () banked
  2245  000882  B0D8               	btfsc	status,0,c
  2246  000884  D064               	goto	l4289
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 325: if(!flag_top_read){
  2250  000886  0100               	movlb	0	; () banked
  2251  000888  51AD               	movf	_flag_top_read& (0+255),w,b
  2252  00088A  0100               	movlb	0	; () banked
  2253  00088C  11AE               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2254  00088E  A4D8               	btfss	status,2,c
  2255  000890  D058               	goto	l327
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;main.c: 326: if((color[1]/color[3]) > 1.5) bottle_read_top = 1;
  2259  000892  0E00               	movlw	0
  2260  000894  0100               	movlb	0	; () banked
  2261  000896  6FDF               	movwf	___ftge@ff1& (0+255),b
  2262  000898  0EC0               	movlw	192
  2263  00089A  0100               	movlb	0	; () banked
  2264  00089C  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2265  00089E  0E3F               	movlw	63
  2266  0008A0  0100               	movlb	0	; () banked
  2267  0008A2  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2268  0008A4  C089  F0D3         	movff	_color+9,___ftdiv@f2
  2269  0008A8  C08A  F0D4         	movff	_color+10,___ftdiv@f2+1
  2270  0008AC  C08B  F0D5         	movff	_color+11,___ftdiv@f2+2
  2271  0008B0  C083  F0D0         	movff	_color+3,___ftdiv@f1
  2272  0008B4  C084  F0D1         	movff	_color+4,___ftdiv@f1+1
  2273  0008B8  C085  F0D2         	movff	_color+5,___ftdiv@f1+2
  2274  0008BC  EC29  F00A         	call	___ftdiv	;wreg free
  2275  0008C0  C0D0  F0E2         	movff	?___ftdiv,___ftge@ff2
  2276  0008C4  C0D1  F0E3         	movff	?___ftdiv+1,___ftge@ff2+1
  2277  0008C8  C0D2  F0E4         	movff	?___ftdiv+2,___ftge@ff2+2
  2278  0008CC  ECEB  F010         	call	___ftge	;wreg free
  2279  0008D0  0100               	movlb	0	; () banked
  2280  0008D2  B0D8               	btfsc	status,0,c
  2281  0008D4  D005               	goto	l4283
  2282                           
  2283                           ; BSR set to: 0
  2284  0008D6  0E00               	movlw	0
  2285  0008D8  0100               	movlb	0	; () banked
  2286  0008DA  6FA6               	movwf	(_bottle_read_top+1)& (0+255),b
  2287  0008DC  0E01               	movlw	1
  2288  0008DE  D02B               	goto	L4
  2289  0008E0                     l4283:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 327: else if((color[1]/color[3]) <= 0.5) bottle_read_top = 2;
  2293  0008E0  0E00               	movlw	0
  2294  0008E2  0100               	movlb	0	; () banked
  2295  0008E4  6FDF               	movwf	___ftge@ff1& (0+255),b
  2296  0008E6  0E00               	movlw	0
  2297  0008E8  0100               	movlb	0	; () banked
  2298  0008EA  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2299  0008EC  0E3F               	movlw	63
  2300  0008EE  0100               	movlb	0	; () banked
  2301  0008F0  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2302  0008F2  C089  F0D3         	movff	_color+9,___ftdiv@f2
  2303  0008F6  C08A  F0D4         	movff	_color+10,___ftdiv@f2+1
  2304  0008FA  C08B  F0D5         	movff	_color+11,___ftdiv@f2+2
  2305  0008FE  C083  F0D0         	movff	_color+3,___ftdiv@f1
  2306  000902  C084  F0D1         	movff	_color+4,___ftdiv@f1+1
  2307  000906  C085  F0D2         	movff	_color+5,___ftdiv@f1+2
  2308  00090A  EC29  F00A         	call	___ftdiv	;wreg free
  2309  00090E  C0D0  F0E2         	movff	?___ftdiv,___ftge@ff2
  2310  000912  C0D1  F0E3         	movff	?___ftdiv+1,___ftge@ff2+1
  2311  000916  C0D2  F0E4         	movff	?___ftdiv+2,___ftge@ff2+2
  2312  00091A  ECEB  F010         	call	___ftge	;wreg free
  2313  00091E  0100               	movlb	0	; () banked
  2314  000920  A0D8               	btfss	status,0,c
  2315  000922  D005               	goto	l4287
  2316                           
  2317                           ; BSR set to: 0
  2318  000924  0E00               	movlw	0
  2319  000926  0100               	movlb	0	; () banked
  2320  000928  6FA6               	movwf	(_bottle_read_top+1)& (0+255),b
  2321  00092A  0E02               	movlw	2
  2322  00092C  D004               	goto	L4
  2323  00092E                     l4287:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 328: else bottle_read_top = 0;
  2327  00092E  0E00               	movlw	0
  2328  000930  0100               	movlb	0	; () banked
  2329  000932  6FA6               	movwf	(_bottle_read_top+1)& (0+255),b
  2330  000934  0E00               	movlw	0
  2331  000936                     L4:
  2332  000936  6FA5               	movwf	_bottle_read_top& (0+255),b
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 329: flag_top_read = 1;
  2336                           
  2337                           ; BSR set to: 0
  2338  000938  0E00               	movlw	0
  2339  00093A  0100               	movlb	0	; () banked
  2340  00093C  6FAE               	movwf	(_flag_top_read+1)& (0+255),b
  2341  00093E  0E01               	movlw	1
  2342  000940  6FAD               	movwf	_flag_top_read& (0+255),b
  2343  000942                     l327:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 330: }
  2347                           ;main.c: 331: flag_bottle_high = 1;
  2348  000942  0E00               	movlw	0
  2349  000944  0100               	movlb	0	; () banked
  2350  000946  6FAC               	movwf	(_flag_bottle_high+1)& (0+255),b
  2351  000948  0E01               	movlw	1
  2352  00094A  6FAB               	movwf	_flag_bottle_high& (0+255),b
  2353                           
  2354                           ;main.c: 332: }
  2355  00094C  0012               	return	
  2356  00094E                     l4289:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 333: else if(color[0]<30){
  2360  00094E  C080  F0DF         	movff	_color,___ftge@ff1
  2361  000952  C081  F0E0         	movff	_color+1,___ftge@ff1+1
  2362  000956  C082  F0E1         	movff	_color+2,___ftge@ff1+2
  2363  00095A  0E00               	movlw	0
  2364  00095C  0100               	movlb	0	; () banked
  2365  00095E  6FE2               	movwf	___ftge@ff2& (0+255),b
  2366  000960  0EF0               	movlw	240
  2367  000962  0100               	movlb	0	; () banked
  2368  000964  6FE3               	movwf	(___ftge@ff2+1)& (0+255),b
  2369  000966  0E41               	movlw	65
  2370  000968  0100               	movlb	0	; () banked
  2371  00096A  6FE4               	movwf	(___ftge@ff2+2)& (0+255),b
  2372  00096C  ECEB  F010         	call	___ftge	;wreg free
  2373  000970  0100               	movlb	0	; () banked
  2374  000972  B0D8               	btfsc	status,0,c
  2375  000974  0012               	return	
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 334: if(flag_bottle_high){
  2379  000976  0100               	movlb	0	; () banked
  2380  000978  51AB               	movf	_flag_bottle_high& (0+255),w,b
  2381  00097A  0100               	movlb	0	; () banked
  2382  00097C  11AC               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2383  00097E  B4D8               	btfsc	status,2,c
  2384  000980  0012               	return	
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 335: if((color[1]/color[3]) > 1.5) bottle_read_bot = 1;
  2388  000982  0E00               	movlw	0
  2389  000984  0100               	movlb	0	; () banked
  2390  000986  6FDF               	movwf	___ftge@ff1& (0+255),b
  2391  000988  0EC0               	movlw	192
  2392  00098A  0100               	movlb	0	; () banked
  2393  00098C  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2394  00098E  0E3F               	movlw	63
  2395  000990  0100               	movlb	0	; () banked
  2396  000992  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2397  000994  C089  F0D3         	movff	_color+9,___ftdiv@f2
  2398  000998  C08A  F0D4         	movff	_color+10,___ftdiv@f2+1
  2399  00099C  C08B  F0D5         	movff	_color+11,___ftdiv@f2+2
  2400  0009A0  C083  F0D0         	movff	_color+3,___ftdiv@f1
  2401  0009A4  C084  F0D1         	movff	_color+4,___ftdiv@f1+1
  2402  0009A8  C085  F0D2         	movff	_color+5,___ftdiv@f1+2
  2403  0009AC  EC29  F00A         	call	___ftdiv	;wreg free
  2404  0009B0  C0D0  F0E2         	movff	?___ftdiv,___ftge@ff2
  2405  0009B4  C0D1  F0E3         	movff	?___ftdiv+1,___ftge@ff2+1
  2406  0009B8  C0D2  F0E4         	movff	?___ftdiv+2,___ftge@ff2+2
  2407  0009BC  ECEB  F010         	call	___ftge	;wreg free
  2408  0009C0  0100               	movlb	0	; () banked
  2409  0009C2  B0D8               	btfsc	status,0,c
  2410  0009C4  D005               	goto	l4297
  2411                           
  2412                           ; BSR set to: 0
  2413  0009C6  0E00               	movlw	0
  2414  0009C8  0100               	movlb	0	; () banked
  2415  0009CA  6FA4               	movwf	(_bottle_read_bot+1)& (0+255),b
  2416  0009CC  0E01               	movlw	1
  2417  0009CE  D026               	goto	L5
  2418  0009D0                     l4297:
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 336: else if((color[1]/color[3]) <= 0.5) bottle_read_bot = 2;
  2422  0009D0  0E00               	movlw	0
  2423  0009D2  0100               	movlb	0	; () banked
  2424  0009D4  6FDF               	movwf	___ftge@ff1& (0+255),b
  2425  0009D6  0E00               	movlw	0
  2426  0009D8  0100               	movlb	0	; () banked
  2427  0009DA  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  2428  0009DC  0E3F               	movlw	63
  2429  0009DE  0100               	movlb	0	; () banked
  2430  0009E0  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  2431  0009E2  C089  F0D3         	movff	_color+9,___ftdiv@f2
  2432  0009E6  C08A  F0D4         	movff	_color+10,___ftdiv@f2+1
  2433  0009EA  C08B  F0D5         	movff	_color+11,___ftdiv@f2+2
  2434  0009EE  C083  F0D0         	movff	_color+3,___ftdiv@f1
  2435  0009F2  C084  F0D1         	movff	_color+4,___ftdiv@f1+1
  2436  0009F6  C085  F0D2         	movff	_color+5,___ftdiv@f1+2
  2437  0009FA  EC29  F00A         	call	___ftdiv	;wreg free
  2438  0009FE  C0D0  F0E2         	movff	?___ftdiv,___ftge@ff2
  2439  000A02  C0D1  F0E3         	movff	?___ftdiv+1,___ftge@ff2+1
  2440  000A06  C0D2  F0E4         	movff	?___ftdiv+2,___ftge@ff2+2
  2441  000A0A  ECEB  F010         	call	___ftge	;wreg free
  2442  000A0E  0100               	movlb	0	; () banked
  2443  000A10  A0D8               	btfss	status,0,c
  2444  000A12  D006               	goto	l4301
  2445                           
  2446                           ; BSR set to: 0
  2447  000A14  0E00               	movlw	0
  2448  000A16  0100               	movlb	0	; () banked
  2449  000A18  6FA4               	movwf	(_bottle_read_bot+1)& (0+255),b
  2450  000A1A  0E02               	movlw	2
  2451  000A1C                     L5:
  2452  000A1C  6FA3               	movwf	_bottle_read_bot& (0+255),b
  2453  000A1E  D005               	goto	l336
  2454  000A20                     l4301:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 337: else bottle_read_top = 0;
  2458  000A20  0E00               	movlw	0
  2459  000A22  0100               	movlb	0	; () banked
  2460  000A24  6FA6               	movwf	(_bottle_read_top+1)& (0+255),b
  2461  000A26  0E00               	movlw	0
  2462  000A28  6FA5               	movwf	_bottle_read_top& (0+255),b
  2463  000A2A                     l336:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;main.c: 338: flag_bottle_high = 0;
  2467  000A2A  0E00               	movlw	0
  2468  000A2C  0100               	movlb	0	; () banked
  2469  000A2E  6FAC               	movwf	(_flag_bottle_high+1)& (0+255),b
  2470  000A30  0E00               	movlw	0
  2471  000A32  6FAB               	movwf	_flag_bottle_high& (0+255),b
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;main.c: 339: }
  2475                           ;main.c: 340: }
  2476                           ;main.c: 341: }
  2477                           
  2478                           ; BSR set to: 0
  2479                           
  2480                           ; BSR set to: 0
  2481  000A34  0012               	return	
  2482  000A36                     l4303:
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;main.c: 343: else if(flag_bottle){
  2486  000A36  0100               	movlb	0	; () banked
  2487  000A38  51A9               	movf	_flag_bottle& (0+255),w,b
  2488  000A3A  0100               	movlb	0	; () banked
  2489  000A3C  11AA               	iorwf	(_flag_bottle+1)& (0+255),w,b
  2490  000A3E  B4D8               	btfsc	status,2,c
  2491  000A40  0012               	return	
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;main.c: 344: bottle_count_array[0] += 1;
  2495  000A42  0100               	movlb	0	; () banked
  2496  000A44  4B8C               	infsnz	_bottle_count_array& (0+255),f,b
  2497  000A46  2B8D               	incf	(_bottle_count_array+1)& (0+255),f,b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;main.c: 345: if(bottle_read_top == 1 || bottle_read_bot == 1){
  2501  000A48  0100               	movlb	0	; () banked
  2502  000A4A  05A5               	decf	_bottle_read_top& (0+255),w,b
  2503  000A4C  0100               	movlb	0	; () banked
  2504  000A4E  11A6               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2505  000A50  B4D8               	btfsc	status,2,c
  2506  000A52  D006               	goto	l4311
  2507                           
  2508                           ; BSR set to: 0
  2509  000A54  0100               	movlb	0	; () banked
  2510  000A56  05A3               	decf	_bottle_read_bot& (0+255),w,b
  2511  000A58  0100               	movlb	0	; () banked
  2512  000A5A  11A4               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2513  000A5C  A4D8               	btfss	status,2,c
  2514  000A5E  D004               	goto	l4313
  2515  000A60                     l4311:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 346: bottle_count_array[1] += 1;
  2519  000A60  0100               	movlb	0	; () banked
  2520  000A62  4B8E               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  2521  000A64  2B8F               	incf	(_bottle_count_array+3)& (0+255),f,b
  2522                           
  2523                           ;main.c: 348: }
  2524  000A66  D01F               	goto	l4325
  2525  000A68                     l4313:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;main.c: 349: else if(bottle_read_top == 2 || bottle_read_bot == 2){
  2529  000A68  0E02               	movlw	2
  2530  000A6A  0100               	movlb	0	; () banked
  2531  000A6C  19A5               	xorwf	_bottle_read_top& (0+255),w,b
  2532  000A6E  0100               	movlb	0	; () banked
  2533  000A70  11A6               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2534  000A72  B4D8               	btfsc	status,2,c
  2535  000A74  D007               	goto	l4317
  2536                           
  2537                           ; BSR set to: 0
  2538  000A76  0E02               	movlw	2
  2539  000A78  0100               	movlb	0	; () banked
  2540  000A7A  19A3               	xorwf	_bottle_read_bot& (0+255),w,b
  2541  000A7C  0100               	movlb	0	; () banked
  2542  000A7E  11A4               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2543  000A80  A4D8               	btfss	status,2,c
  2544  000A82  D004               	goto	l4319
  2545  000A84                     l4317:
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;main.c: 350: bottle_count_array[3] += 1;
  2549  000A84  0100               	movlb	0	; () banked
  2550  000A86  4B92               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  2551  000A88  2B93               	incf	(_bottle_count_array+7)& (0+255),f,b
  2552                           
  2553                           ;main.c: 351: }
  2554  000A8A  D00D               	goto	l4325
  2555  000A8C                     l4319:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 352: else if(flag_yopNC){
  2559  000A8C  0100               	movlb	0	; () banked
  2560  000A8E  51AF               	movf	_flag_yopNC& (0+255),w,b
  2561  000A90  0100               	movlb	0	; () banked
  2562  000A92  11B0               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  2563  000A94  B4D8               	btfsc	status,2,c
  2564  000A96  D004               	goto	l4323
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 353: bottle_count_array[2] += 1;
  2568  000A98  0100               	movlb	0	; () banked
  2569  000A9A  4B90               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  2570  000A9C  2B91               	incf	(_bottle_count_array+5)& (0+255),f,b
  2571                           
  2572                           ;main.c: 354: }
  2573  000A9E  D003               	goto	l4325
  2574  000AA0                     l4323:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 355: else{
  2578                           ;main.c: 356: bottle_count_array[4] += 1;
  2579  000AA0  0100               	movlb	0	; () banked
  2580  000AA2  4B94               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  2581  000AA4  2B95               	incf	(_bottle_count_array+9)& (0+255),f,b
  2582  000AA6                     l4325:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 357: }
  2586                           ;main.c: 358: flag_bottle = 0;
  2587  000AA6  0E00               	movlw	0
  2588  000AA8  0100               	movlb	0	; () banked
  2589  000AAA  6FAA               	movwf	(_flag_bottle+1)& (0+255),b
  2590  000AAC  0E00               	movlw	0
  2591  000AAE  6FA9               	movwf	_flag_bottle& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;main.c: 359: flag_bottle_high = 0;
  2595  000AB0  0E00               	movlw	0
  2596  000AB2  0100               	movlb	0	; () banked
  2597  000AB4  6FAC               	movwf	(_flag_bottle_high+1)& (0+255),b
  2598  000AB6  0E00               	movlw	0
  2599  000AB8  6FAB               	movwf	_flag_bottle_high& (0+255),b
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;main.c: 360: flag_top_read = 0;
  2603  000ABA  0E00               	movlw	0
  2604  000ABC  0100               	movlb	0	; () banked
  2605  000ABE  6FAE               	movwf	(_flag_top_read+1)& (0+255),b
  2606  000AC0  0E00               	movlw	0
  2607  000AC2  6FAD               	movwf	_flag_top_read& (0+255),b
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;main.c: 361: flag_yopNC = 0;
  2611  000AC4  0E00               	movlw	0
  2612  000AC6  0100               	movlb	0	; () banked
  2613  000AC8  6FB0               	movwf	(_flag_yopNC+1)& (0+255),b
  2614  000ACA  0E00               	movlw	0
  2615  000ACC  6FAF               	movwf	_flag_yopNC& (0+255),b
  2616                           
  2617                           ; BSR set to: 0
  2618                           
  2619                           ; BSR set to: 0
  2620  000ACE  0012               	return	
  2621  000AD0                     __end_of_operation:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           intcon	equ	0xFF2
  2628                           intcon2	equ	0xFF1
  2629                           intcon3	equ	0xFF0
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _read_colorsensor *****************
  2635 ;; Defined at:
  2636 ;;		line 408 in file "main.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  color_high      4   36[BANK0 ] unsigned char [4]
  2641 ;;  color_low       4   32[BANK0 ] unsigned char [4]
  2642 ;;  i               2   40[BANK0 ] int 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:       14 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    9
  2659 ;; This function calls:
  2660 ;;		_I2C_Master_Read
  2661 ;;		_I2C_Master_Start
  2662 ;;		_I2C_Master_Stop
  2663 ;;		_I2C_Master_Write
  2664 ;;		___awtoft
  2665 ;;		___wmul
  2666 ;; This function is called by:
  2667 ;;		_standby
  2668 ;;		_operation
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text4
  2673  001306                     __ptext4:
  2674                           	opt stack 0
  2675  001306                     _read_colorsensor:
  2676                           	opt stack 20
  2677                           
  2678                           ;main.c: 409: unsigned char color_low[4];
  2679                           ;main.c: 410: unsigned char color_high[4];
  2680                           ;main.c: 411: int i;
  2681                           ;main.c: 414: I2C_Master_Start();
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;incstack = 0
  2685  001306  EC75  F017         	call	_I2C_Master_Start	;wreg free
  2686                           
  2687                           ;main.c: 415: I2C_Master_Write(0b01010010);
  2688  00130A  0E00               	movlw	0
  2689  00130C  0100               	movlb	0	; () banked
  2690  00130E  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2691  001310  0E52               	movlw	82
  2692  001312  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  2693  001314  EC67  F017         	call	_I2C_Master_Write	;wreg free
  2694                           
  2695                           ;main.c: 416: I2C_Master_Write(0b10110100);
  2696  001318  0E00               	movlw	0
  2697  00131A  0100               	movlb	0	; () banked
  2698  00131C  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2699  00131E  0EB4               	movlw	180
  2700  001320  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  2701  001322  EC67  F017         	call	_I2C_Master_Write	;wreg free
  2702                           
  2703                           ;main.c: 417: I2C_Master_Start();
  2704  001326  EC75  F017         	call	_I2C_Master_Start	;wreg free
  2705                           
  2706                           ;main.c: 418: I2C_Master_Write(0b01010011);
  2707  00132A  0E00               	movlw	0
  2708  00132C  0100               	movlb	0	; () banked
  2709  00132E  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2710  001330  0E53               	movlw	83
  2711  001332  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  2712  001334  EC67  F017         	call	_I2C_Master_Write	;wreg free
  2713                           
  2714                           ;main.c: 419: for(i=0; i<3; i++){
  2715  001338  0E00               	movlw	0
  2716  00133A  0100               	movlb	0	; () banked
  2717  00133C  6FE1               	movwf	(read_colorsensor@i+1)& (0+255),b
  2718  00133E  0E00               	movlw	0
  2719  001340  6FE0               	movwf	read_colorsensor@i& (0+255),b
  2720  001342                     l3719:
  2721                           
  2722                           ; BSR set to: 0
  2723  001342  0100               	movlb	0	; () banked
  2724  001344  BFE1               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2725  001346  D008               	goto	l3723
  2726  001348  0100               	movlb	0	; () banked
  2727  00134A  51E1               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2728  00134C  E121               	bnz	l3729
  2729  00134E  0E03               	movlw	3
  2730  001350  0100               	movlb	0	; () banked
  2731  001352  5DE0               	subwf	read_colorsensor@i& (0+255),w,b
  2732  001354  B0D8               	btfsc	status,0,c
  2733  001356  D01C               	goto	l3729
  2734  001358                     l3723:
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 420: color_low[i] = I2C_Master_Read(1);
  2738  001358  0ED8               	movlw	low read_colorsensor@color_low
  2739  00135A  0100               	movlb	0	; () banked
  2740  00135C  25E0               	addwf	read_colorsensor@i& (0+255),w,b
  2741  00135E  6ED9               	movwf	fsr2l,c
  2742  001360  0E00               	movlw	high read_colorsensor@color_low
  2743  001362  0100               	movlb	0	; () banked
  2744  001364  21E1               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2745  001366  6EDA               	movwf	fsr2h,c
  2746  001368  0E01               	movlw	1
  2747  00136A  ECA8  F016         	call	_I2C_Master_Read
  2748  00136E  6EDF               	movwf	indf2,c
  2749                           
  2750                           ;main.c: 421: color_high[i] = I2C_Master_Read(1);
  2751  001370  0EDC               	movlw	low read_colorsensor@color_high
  2752  001372  0100               	movlb	0	; () banked
  2753  001374  25E0               	addwf	read_colorsensor@i& (0+255),w,b
  2754  001376  6ED9               	movwf	fsr2l,c
  2755  001378  0E00               	movlw	high read_colorsensor@color_high
  2756  00137A  0100               	movlb	0	; () banked
  2757  00137C  21E1               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2758  00137E  6EDA               	movwf	fsr2h,c
  2759  001380  0E01               	movlw	1
  2760  001382  ECA8  F016         	call	_I2C_Master_Read
  2761  001386  6EDF               	movwf	indf2,c
  2762  001388  0100               	movlb	0	; () banked
  2763  00138A  4BE0               	infsnz	read_colorsensor@i& (0+255),f,b
  2764  00138C  2BE1               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2765  00138E  D7D9               	goto	l3719
  2766  001390                     l3729:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 422: }
  2770                           ;main.c: 423: color_low[3] = I2C_Master_Read(1);
  2771  001390  0E01               	movlw	1
  2772  001392  ECA8  F016         	call	_I2C_Master_Read
  2773  001396  0100               	movlb	0	; () banked
  2774  001398  6FDB               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2775                           
  2776                           ;main.c: 424: color_high[3] = I2C_Master_Read(0);
  2777  00139A  0E00               	movlw	0
  2778  00139C  ECA8  F016         	call	_I2C_Master_Read
  2779  0013A0  0100               	movlb	0	; () banked
  2780  0013A2  6FDF               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2781                           
  2782                           ;main.c: 425: I2C_Master_Stop();
  2783  0013A4  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  2784                           
  2785                           ;main.c: 427: for(i=0; i<4; i++){
  2786  0013A8  0E00               	movlw	0
  2787  0013AA  0100               	movlb	0	; () banked
  2788  0013AC  6FE1               	movwf	(read_colorsensor@i+1)& (0+255),b
  2789  0013AE  0E00               	movlw	0
  2790  0013B0  6FE0               	movwf	read_colorsensor@i& (0+255),b
  2791  0013B2                     l3733:
  2792                           
  2793                           ; BSR set to: 0
  2794  0013B2  0100               	movlb	0	; () banked
  2795  0013B4  BFE1               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2796  0013B6  D008               	goto	l3737
  2797  0013B8  0100               	movlb	0	; () banked
  2798  0013BA  51E1               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2799  0013BC  E149               	bnz	l389
  2800  0013BE  0E04               	movlw	4
  2801  0013C0  0100               	movlb	0	; () banked
  2802  0013C2  5DE0               	subwf	read_colorsensor@i& (0+255),w,b
  2803  0013C4  B0D8               	btfsc	status,0,c
  2804  0013C6  0012               	return	
  2805  0013C8                     l3737:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 428: color[i] = (color_high[i] << 8)|(color_low[i]);
  2809  0013C8  C0E0  F0C8         	movff	read_colorsensor@i,___wmul@multiplier
  2810  0013CC  C0E1  F0C9         	movff	read_colorsensor@i+1,___wmul@multiplier+1
  2811  0013D0  0E00               	movlw	0
  2812  0013D2  0100               	movlb	0	; () banked
  2813  0013D4  6FCB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2814  0013D6  0E03               	movlw	3
  2815  0013D8  6FCA               	movwf	___wmul@multiplicand& (0+255),b
  2816  0013DA  EC8D  F016         	call	___wmul	;wreg free
  2817  0013DE  0E80               	movlw	low _color
  2818  0013E0  0100               	movlb	0	; () banked
  2819  0013E2  25C8               	addwf	?___wmul& (0+255),w,b
  2820  0013E4  6ED9               	movwf	fsr2l,c
  2821  0013E6  0E00               	movlw	high _color
  2822  0013E8  0100               	movlb	0	; () banked
  2823  0013EA  21C9               	addwfc	(?___wmul+1)& (0+255),w,b
  2824  0013EC  6EDA               	movwf	fsr2h,c
  2825  0013EE  0EDC               	movlw	low read_colorsensor@color_high
  2826  0013F0  0100               	movlb	0	; () banked
  2827  0013F2  25E0               	addwf	read_colorsensor@i& (0+255),w,b
  2828  0013F4  6EE1               	movwf	fsr1l,c
  2829  0013F6  0E00               	movlw	high read_colorsensor@color_high
  2830  0013F8  0100               	movlb	0	; () banked
  2831  0013FA  21E1               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2832  0013FC  6EE2               	movwf	fsr1h,c
  2833  0013FE  50E7               	movf	indf1,w,c
  2834  001400  0100               	movlb	0	; () banked
  2835  001402  6FD4               	movwf	??_read_colorsensor& (0+255),b
  2836  001404  0100               	movlb	0	; () banked
  2837  001406  51D4               	movf	??_read_colorsensor& (0+255),w,b
  2838  001408  0100               	movlb	0	; () banked
  2839  00140A  6FD6               	movwf	(??_read_colorsensor+2)& (0+255),b
  2840  00140C  6BD5               	clrf	(??_read_colorsensor+1)& (0+255),b
  2841  00140E  0ED8               	movlw	low read_colorsensor@color_low
  2842  001410  0100               	movlb	0	; () banked
  2843  001412  25E0               	addwf	read_colorsensor@i& (0+255),w,b
  2844  001414  6EE1               	movwf	fsr1l,c
  2845  001416  0E00               	movlw	high read_colorsensor@color_low
  2846  001418  0100               	movlb	0	; () banked
  2847  00141A  21E1               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2848  00141C  6EE2               	movwf	fsr1h,c
  2849  00141E  50E7               	movf	indf1,w,c
  2850  001420  0100               	movlb	0	; () banked
  2851  001422  6FD7               	movwf	(??_read_colorsensor+3)& (0+255),b
  2852  001424  0100               	movlb	0	; () banked
  2853  001426  51D7               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2854  001428  0100               	movlb	0	; () banked
  2855  00142A  11D5               	iorwf	(??_read_colorsensor+1)& (0+255),w,b
  2856  00142C  0100               	movlb	0	; () banked
  2857  00142E  6FD0               	movwf	___awtoft@c& (0+255),b
  2858  001430  0100               	movlb	0	; () banked
  2859  001432  51D6               	movf	(??_read_colorsensor+2)& (0+255),w,b
  2860  001434  0100               	movlb	0	; () banked
  2861  001436  6FD1               	movwf	(___awtoft@c+1)& (0+255),b
  2862  001438  ECB5  F015         	call	___awtoft	;wreg free
  2863  00143C  C0D0  FFDE         	movff	?___awtoft,postinc2
  2864  001440  C0D1  FFDE         	movff	?___awtoft+1,postinc2
  2865  001444  C0D2  FFDE         	movff	?___awtoft+2,postinc2
  2866  001448  0100               	movlb	0	; () banked
  2867  00144A  4BE0               	infsnz	read_colorsensor@i& (0+255),f,b
  2868  00144C  2BE1               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2869  00144E  D7B1               	goto	l3733
  2870  001450                     l389:
  2871                           
  2872                           ; BSR set to: 0
  2873  001450  0012               	return		;funcret
  2874  001452                     __end_of_read_colorsensor:
  2875                           	opt stack 0
  2876                           tblptru	equ	0xFF8
  2877                           tblptrh	equ	0xFF7
  2878                           tblptrl	equ	0xFF6
  2879                           tablat	equ	0xFF5
  2880                           intcon	equ	0xFF2
  2881                           intcon2	equ	0xFF1
  2882                           intcon3	equ	0xFF0
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           indf1	equ	0xFE7
  2886                           fsr1h	equ	0xFE2
  2887                           fsr1l	equ	0xFE1
  2888                           indf2	equ	0xFDF
  2889                           postinc2	equ	0xFDE
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function ___awtoft *****************
  2895 ;; Defined at:
  2896 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  c               2   24[BANK0 ] int 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  sign            1   27[BANK0 ] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  3   24[BANK0 ] float 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        4 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    8
  2917 ;; This function calls:
  2918 ;;		___ftpack
  2919 ;; This function is called by:
  2920 ;;		_read_colorsensor
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text5
  2925  002B6A                     __ptext5:
  2926                           	opt stack 0
  2927  002B6A                     ___awtoft:
  2928                           	opt stack 20
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;incstack = 0
  2932  002B6A  0E00               	movlw	0
  2933  002B6C  0100               	movlb	0	; () banked
  2934  002B6E  6FD3               	movwf	___awtoft@sign& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937  002B70  0100               	movlb	0	; () banked
  2938  002B72  AFD1               	btfss	(___awtoft@c+1)& (0+255),7,b
  2939  002B74  D008               	goto	l3571
  2940                           
  2941                           ; BSR set to: 0
  2942  002B76  0100               	movlb	0	; () banked
  2943  002B78  6DD0               	negf	___awtoft@c& (0+255),b
  2944  002B7A  1FD1               	comf	(___awtoft@c+1)& (0+255),f,b
  2945  002B7C  B0D8               	btfsc	status,0,c
  2946  002B7E  2BD1               	incf	(___awtoft@c+1)& (0+255),f,b
  2947                           
  2948                           ; BSR set to: 0
  2949  002B80  0E01               	movlw	1
  2950  002B82  0100               	movlb	0	; () banked
  2951  002B84  6FD3               	movwf	___awtoft@sign& (0+255),b
  2952  002B86                     l3571:
  2953                           
  2954                           ; BSR set to: 0
  2955  002B86  C0D0  F0C8         	movff	___awtoft@c,___ftpack@arg
  2956  002B8A  C0D1  F0C9         	movff	___awtoft@c+1,___ftpack@arg+1
  2957  002B8E  0100               	movlb	0	; () banked
  2958  002B90  6BCA               	clrf	(___ftpack@arg+2)& (0+255),b
  2959  002B92  0E8E               	movlw	142
  2960  002B94  0100               	movlb	0	; () banked
  2961  002B96  6FCB               	movwf	___ftpack@exp& (0+255),b
  2962  002B98  C0D3  F0CC         	movff	___awtoft@sign,___ftpack@sign
  2963  002B9C  EC5E  F00B         	call	___ftpack	;wreg free
  2964  002BA0  C0C8  F0D0         	movff	?___ftpack,?___awtoft
  2965  002BA4  C0C9  F0D1         	movff	?___ftpack+1,?___awtoft+1
  2966  002BA8  C0CA  F0D2         	movff	?___ftpack+2,?___awtoft+2
  2967  002BAC  0012               	return	
  2968  002BAE                     __end_of___awtoft:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           intcon	equ	0xFF2
  2975                           intcon2	equ	0xFF1
  2976                           intcon3	equ	0xFF0
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           indf1	equ	0xFE7
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function ___ftge *****************
  2989 ;; Defined at:
  2990 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  ff1             3   39[BANK0 ] float 
  2993 ;;  ff2             3   42[BANK0 ] float 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;		None               void
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:        9 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    7
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_operation
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text6
  3020  0021D6                     __ptext6:
  3021                           	opt stack 0
  3022  0021D6                     ___ftge:
  3023                           	opt stack 22
  3024                           
  3025                           ;incstack = 0
  3026  0021D6  0100               	movlb	0	; () banked
  3027  0021D8  AFE1               	btfss	(___ftge@ff1+2)& (0+255),7,b
  3028  0021DA  D01D               	goto	l4047
  3029                           
  3030                           ; BSR set to: 0
  3031  0021DC  C0DF  F0E5         	movff	___ftge@ff1,??___ftge
  3032  0021E0  C0E0  F0E6         	movff	___ftge@ff1+1,??___ftge+1
  3033  0021E4  C0E1  F0E7         	movff	___ftge@ff1+2,??___ftge+2
  3034  0021E8  0100               	movlb	0	; () banked
  3035  0021EA  1FE5               	comf	??___ftge& (0+255),f,b
  3036  0021EC  1FE6               	comf	(??___ftge+1)& (0+255),f,b
  3037  0021EE  1FE7               	comf	(??___ftge+2)& (0+255),f,b
  3038  0021F0  2BE5               	incf	??___ftge& (0+255),f,b
  3039  0021F2  0E00               	movlw	0
  3040  0021F4  23E6               	addwfc	(??___ftge+1)& (0+255),f,b
  3041  0021F6  23E7               	addwfc	(??___ftge+2)& (0+255),f,b
  3042  0021F8  0E00               	movlw	0
  3043  0021FA  0100               	movlb	0	; () banked
  3044  0021FC  25E5               	addwf	??___ftge& (0+255),w,b
  3045  0021FE  0100               	movlb	0	; () banked
  3046  002200  6FDF               	movwf	___ftge@ff1& (0+255),b
  3047  002202  0E00               	movlw	0
  3048  002204  0100               	movlb	0	; () banked
  3049  002206  21E6               	addwfc	(??___ftge+1)& (0+255),w,b
  3050  002208  0100               	movlb	0	; () banked
  3051  00220A  6FE0               	movwf	(___ftge@ff1+1)& (0+255),b
  3052  00220C  0E80               	movlw	128
  3053  00220E  0100               	movlb	0	; () banked
  3054  002210  21E7               	addwfc	(??___ftge+2)& (0+255),w,b
  3055  002212  0100               	movlb	0	; () banked
  3056  002214  6FE1               	movwf	(___ftge@ff1+2)& (0+255),b
  3057  002216                     l4047:
  3058                           
  3059                           ; BSR set to: 0
  3060  002216  0100               	movlb	0	; () banked
  3061  002218  AFE4               	btfss	(___ftge@ff2+2)& (0+255),7,b
  3062  00221A  D01D               	goto	l4051
  3063                           
  3064                           ; BSR set to: 0
  3065  00221C  C0E2  F0E5         	movff	___ftge@ff2,??___ftge
  3066  002220  C0E3  F0E6         	movff	___ftge@ff2+1,??___ftge+1
  3067  002224  C0E4  F0E7         	movff	___ftge@ff2+2,??___ftge+2
  3068  002228  0100               	movlb	0	; () banked
  3069  00222A  1FE5               	comf	??___ftge& (0+255),f,b
  3070  00222C  1FE6               	comf	(??___ftge+1)& (0+255),f,b
  3071  00222E  1FE7               	comf	(??___ftge+2)& (0+255),f,b
  3072  002230  2BE5               	incf	??___ftge& (0+255),f,b
  3073  002232  0E00               	movlw	0
  3074  002234  23E6               	addwfc	(??___ftge+1)& (0+255),f,b
  3075  002236  23E7               	addwfc	(??___ftge+2)& (0+255),f,b
  3076  002238  0E00               	movlw	0
  3077  00223A  0100               	movlb	0	; () banked
  3078  00223C  25E5               	addwf	??___ftge& (0+255),w,b
  3079  00223E  0100               	movlb	0	; () banked
  3080  002240  6FE2               	movwf	___ftge@ff2& (0+255),b
  3081  002242  0E00               	movlw	0
  3082  002244  0100               	movlb	0	; () banked
  3083  002246  21E6               	addwfc	(??___ftge+1)& (0+255),w,b
  3084  002248  0100               	movlb	0	; () banked
  3085  00224A  6FE3               	movwf	(___ftge@ff2+1)& (0+255),b
  3086  00224C  0E80               	movlw	128
  3087  00224E  0100               	movlb	0	; () banked
  3088  002250  21E7               	addwfc	(??___ftge+2)& (0+255),w,b
  3089  002252  0100               	movlb	0	; () banked
  3090  002254  6FE4               	movwf	(___ftge@ff2+2)& (0+255),b
  3091  002256                     l4051:
  3092                           
  3093                           ; BSR set to: 0
  3094  002256  0E00               	movlw	0
  3095  002258  0100               	movlb	0	; () banked
  3096  00225A  1BDF               	xorwf	___ftge@ff1& (0+255),f,b
  3097  00225C  0E00               	movlw	0
  3098  00225E  0100               	movlb	0	; () banked
  3099  002260  1BE0               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  3100  002262  0E80               	movlw	128
  3101  002264  0100               	movlb	0	; () banked
  3102  002266  1BE1               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  3103                           
  3104                           ; BSR set to: 0
  3105  002268  0E00               	movlw	0
  3106  00226A  0100               	movlb	0	; () banked
  3107  00226C  1BE2               	xorwf	___ftge@ff2& (0+255),f,b
  3108  00226E  0E00               	movlw	0
  3109  002270  0100               	movlb	0	; () banked
  3110  002272  1BE3               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  3111  002274  0E80               	movlw	128
  3112  002276  0100               	movlb	0	; () banked
  3113  002278  1BE4               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  3114  00227A  0100               	movlb	0	; () banked
  3115  00227C  51E2               	movf	___ftge@ff2& (0+255),w,b
  3116  00227E  0100               	movlb	0	; () banked
  3117  002280  5DDF               	subwf	___ftge@ff1& (0+255),w,b
  3118  002282  0100               	movlb	0	; () banked
  3119  002284  51E3               	movf	(___ftge@ff2+1)& (0+255),w,b
  3120  002286  0100               	movlb	0	; () banked
  3121  002288  59E0               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  3122  00228A  0100               	movlb	0	; () banked
  3123  00228C  51E4               	movf	(___ftge@ff2+2)& (0+255),w,b
  3124  00228E  0100               	movlb	0	; () banked
  3125  002290  59E1               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  3126  002292  B0D8               	btfsc	status,0,c
  3127  002294  D002               	goto	l4057
  3128                           
  3129                           ; BSR set to: 0
  3130  002296  90D8               	bcf	status,0,c
  3131  002298  0012               	return	
  3132  00229A                     l4057:
  3133                           
  3134                           ; BSR set to: 0
  3135  00229A  80D8               	bsf	status,0,c
  3136                           
  3137                           ; BSR set to: 0
  3138  00229C  0012               	return	
  3139  00229E                     __end_of___ftge:
  3140                           	opt stack 0
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           intcon	equ	0xFF2
  3146                           intcon2	equ	0xFF1
  3147                           intcon3	equ	0xFF0
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           indf1	equ	0xFE7
  3151                           fsr1h	equ	0xFE2
  3152                           fsr1l	equ	0xFE1
  3153                           indf2	equ	0xFDF
  3154                           postinc2	equ	0xFDE
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function ___ftdiv *****************
  3160 ;; Defined at:
  3161 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  f1              3   24[BANK0 ] float 
  3164 ;;  f2              3   27[BANK0 ] float 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  f3              3   34[BANK0 ] float 
  3167 ;;  sign            1   38[BANK0 ] unsigned char 
  3168 ;;  exp             1   37[BANK0 ] unsigned char 
  3169 ;;  cntr            1   33[BANK0 ] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  3   24[BANK0 ] float 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3179 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;Total ram usage:       15 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    8
  3186 ;; This function calls:
  3187 ;;		___ftpack
  3188 ;; This function is called by:
  3189 ;;		_operation
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text7
  3194  001452                     __ptext7:
  3195                           	opt stack 0
  3196  001452                     ___ftdiv:
  3197                           	opt stack 21
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;incstack = 0
  3201  001452  C0D2  F0D6         	movff	___ftdiv@f1+2,??___ftdiv
  3202  001456  0100               	movlb	0	; () banked
  3203  001458  6BD7               	clrf	(??___ftdiv+1)& (0+255),b
  3204  00145A  6BD8               	clrf	(??___ftdiv+2)& (0+255),b
  3205  00145C  0100               	movlb	0	; () banked
  3206  00145E  35D1               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3207  001460  0100               	movlb	0	; () banked
  3208  001462  37D6               	rlcf	??___ftdiv& (0+255),f,b
  3209  001464  E301               	bnc	u3691
  3210  001466  81D7               	bsf	(??___ftdiv+1)& (0+255),0,b
  3211  001468                     u3691:
  3212  001468  0100               	movlb	0	; () banked
  3213  00146A  51D6               	movf	??___ftdiv& (0+255),w,b
  3214  00146C  0100               	movlb	0	; () banked
  3215  00146E  6FDD               	movwf	___ftdiv@exp& (0+255),b
  3216  001470  0100               	movlb	0	; () banked
  3217  001472  51DD               	movf	___ftdiv@exp& (0+255),w,b
  3218  001474  A4D8               	btfss	status,2,c
  3219  001476  D00A               	goto	l3923
  3220                           
  3221                           ; BSR set to: 0
  3222  001478  0E00               	movlw	0
  3223  00147A  0100               	movlb	0	; () banked
  3224  00147C  6FD0               	movwf	?___ftdiv& (0+255),b
  3225  00147E  0E00               	movlw	0
  3226  001480  0100               	movlb	0	; () banked
  3227  001482  6FD1               	movwf	(?___ftdiv+1)& (0+255),b
  3228  001484  0E00               	movlw	0
  3229  001486  0100               	movlb	0	; () banked
  3230  001488  6FD2               	movwf	(?___ftdiv+2)& (0+255),b
  3231                           
  3232                           ; BSR set to: 0
  3233  00148A  0012               	return	
  3234  00148C                     l3923:
  3235                           
  3236                           ; BSR set to: 0
  3237  00148C  C0D5  F0D6         	movff	___ftdiv@f2+2,??___ftdiv
  3238  001490  0100               	movlb	0	; () banked
  3239  001492  6BD7               	clrf	(??___ftdiv+1)& (0+255),b
  3240  001494  6BD8               	clrf	(??___ftdiv+2)& (0+255),b
  3241  001496  0100               	movlb	0	; () banked
  3242  001498  35D4               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3243  00149A  0100               	movlb	0	; () banked
  3244  00149C  37D6               	rlcf	??___ftdiv& (0+255),f,b
  3245  00149E  E301               	bnc	u3711
  3246  0014A0  81D7               	bsf	(??___ftdiv+1)& (0+255),0,b
  3247  0014A2                     u3711:
  3248  0014A2  0100               	movlb	0	; () banked
  3249  0014A4  51D6               	movf	??___ftdiv& (0+255),w,b
  3250  0014A6  0100               	movlb	0	; () banked
  3251  0014A8  6FDE               	movwf	___ftdiv@sign& (0+255),b
  3252  0014AA  0100               	movlb	0	; () banked
  3253  0014AC  51DE               	movf	___ftdiv@sign& (0+255),w,b
  3254  0014AE  A4D8               	btfss	status,2,c
  3255  0014B0  D00A               	goto	l3929
  3256                           
  3257                           ; BSR set to: 0
  3258  0014B2  0E00               	movlw	0
  3259  0014B4  0100               	movlb	0	; () banked
  3260  0014B6  6FD0               	movwf	?___ftdiv& (0+255),b
  3261  0014B8  0E00               	movlw	0
  3262  0014BA  0100               	movlb	0	; () banked
  3263  0014BC  6FD1               	movwf	(?___ftdiv+1)& (0+255),b
  3264  0014BE  0E00               	movlw	0
  3265  0014C0  0100               	movlb	0	; () banked
  3266  0014C2  6FD2               	movwf	(?___ftdiv+2)& (0+255),b
  3267                           
  3268                           ; BSR set to: 0
  3269  0014C4  0012               	return	
  3270  0014C6                     l3929:
  3271                           
  3272                           ; BSR set to: 0
  3273  0014C6  0E00               	movlw	0
  3274  0014C8  0100               	movlb	0	; () banked
  3275  0014CA  6FDA               	movwf	___ftdiv@f3& (0+255),b
  3276  0014CC  0E00               	movlw	0
  3277  0014CE  0100               	movlb	0	; () banked
  3278  0014D0  6FDB               	movwf	(___ftdiv@f3+1)& (0+255),b
  3279  0014D2  0E00               	movlw	0
  3280  0014D4  0100               	movlb	0	; () banked
  3281  0014D6  6FDC               	movwf	(___ftdiv@f3+2)& (0+255),b
  3282                           
  3283                           ; BSR set to: 0
  3284  0014D8  0100               	movlb	0	; () banked
  3285  0014DA  51DE               	movf	___ftdiv@sign& (0+255),w,b
  3286  0014DC  0F89               	addlw	137
  3287  0014DE  0100               	movlb	0	; () banked
  3288  0014E0  5FDD               	subwf	___ftdiv@exp& (0+255),f,b
  3289                           
  3290                           ; BSR set to: 0
  3291  0014E2  C0D2  F0DE         	movff	___ftdiv@f1+2,___ftdiv@sign
  3292                           
  3293                           ; BSR set to: 0
  3294  0014E6  0100               	movlb	0	; () banked
  3295  0014E8  51D5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3296  0014EA  0100               	movlb	0	; () banked
  3297  0014EC  1BDE               	xorwf	___ftdiv@sign& (0+255),f,b
  3298                           
  3299                           ; BSR set to: 0
  3300  0014EE  0E80               	movlw	128
  3301  0014F0  0100               	movlb	0	; () banked
  3302  0014F2  17DE               	andwf	___ftdiv@sign& (0+255),f,b
  3303                           
  3304                           ; BSR set to: 0
  3305  0014F4  0100               	movlb	0	; () banked
  3306  0014F6  8FD1               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3307                           
  3308                           ; BSR set to: 0
  3309  0014F8  0EFF               	movlw	255
  3310  0014FA  0100               	movlb	0	; () banked
  3311  0014FC  17D0               	andwf	___ftdiv@f1& (0+255),f,b
  3312  0014FE  0EFF               	movlw	255
  3313  001500  0100               	movlb	0	; () banked
  3314  001502  17D1               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3315  001504  0E00               	movlw	0
  3316  001506  0100               	movlb	0	; () banked
  3317  001508  17D2               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3318                           
  3319                           ; BSR set to: 0
  3320  00150A  0100               	movlb	0	; () banked
  3321  00150C  8FD4               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3322                           
  3323                           ; BSR set to: 0
  3324  00150E  0EFF               	movlw	255
  3325  001510  0100               	movlb	0	; () banked
  3326  001512  17D3               	andwf	___ftdiv@f2& (0+255),f,b
  3327  001514  0EFF               	movlw	255
  3328  001516  0100               	movlb	0	; () banked
  3329  001518  17D4               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3330  00151A  0E00               	movlw	0
  3331  00151C  0100               	movlb	0	; () banked
  3332  00151E  17D5               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3333                           
  3334                           ; BSR set to: 0
  3335  001520  0E18               	movlw	24
  3336  001522  0100               	movlb	0	; () banked
  3337  001524  6FD9               	movwf	___ftdiv@cntr& (0+255),b
  3338  001526                     l3949:
  3339                           
  3340                           ; BSR set to: 0
  3341  001526  0100               	movlb	0	; () banked
  3342  001528  90D8               	bcf	status,0,c
  3343  00152A  37DA               	rlcf	___ftdiv@f3& (0+255),f,b
  3344  00152C  37DB               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3345  00152E  37DC               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3346                           
  3347                           ; BSR set to: 0
  3348  001530  0100               	movlb	0	; () banked
  3349  001532  51D3               	movf	___ftdiv@f2& (0+255),w,b
  3350  001534  0100               	movlb	0	; () banked
  3351  001536  5DD0               	subwf	___ftdiv@f1& (0+255),w,b
  3352  001538  0100               	movlb	0	; () banked
  3353  00153A  51D4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3354  00153C  0100               	movlb	0	; () banked
  3355  00153E  59D1               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3356  001540  0100               	movlb	0	; () banked
  3357  001542  51D5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3358  001544  0100               	movlb	0	; () banked
  3359  001546  59D2               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3360  001548  A0D8               	btfss	status,0,c
  3361  00154A  D00E               	goto	l744
  3362                           
  3363                           ; BSR set to: 0
  3364  00154C  0100               	movlb	0	; () banked
  3365  00154E  51D3               	movf	___ftdiv@f2& (0+255),w,b
  3366  001550  0100               	movlb	0	; () banked
  3367  001552  5FD0               	subwf	___ftdiv@f1& (0+255),f,b
  3368  001554  0100               	movlb	0	; () banked
  3369  001556  51D4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3370  001558  0100               	movlb	0	; () banked
  3371  00155A  5BD1               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3372  00155C  0100               	movlb	0	; () banked
  3373  00155E  51D5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3374  001560  0100               	movlb	0	; () banked
  3375  001562  5BD2               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3376                           
  3377                           ; BSR set to: 0
  3378  001564  0100               	movlb	0	; () banked
  3379  001566  81DA               	bsf	___ftdiv@f3& (0+255),0,b
  3380  001568                     l744:
  3381                           
  3382                           ; BSR set to: 0
  3383  001568  0100               	movlb	0	; () banked
  3384  00156A  90D8               	bcf	status,0,c
  3385  00156C  37D0               	rlcf	___ftdiv@f1& (0+255),f,b
  3386  00156E  37D1               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3387  001570  37D2               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3388                           
  3389                           ; BSR set to: 0
  3390  001572  0100               	movlb	0	; () banked
  3391  001574  2FD9               	decfsz	___ftdiv@cntr& (0+255),f,b
  3392  001576  D7D7               	goto	l3949
  3393                           
  3394                           ; BSR set to: 0
  3395                           
  3396                           ; BSR set to: 0
  3397  001578  C0DA  F0C8         	movff	___ftdiv@f3,___ftpack@arg
  3398  00157C  C0DB  F0C9         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3399  001580  C0DC  F0CA         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3400  001584  C0DD  F0CB         	movff	___ftdiv@exp,___ftpack@exp
  3401  001588  C0DE  F0CC         	movff	___ftdiv@sign,___ftpack@sign
  3402  00158C  EC5E  F00B         	call	___ftpack	;wreg free
  3403  001590  C0C8  F0D0         	movff	?___ftpack,?___ftdiv
  3404  001594  C0C9  F0D1         	movff	?___ftpack+1,?___ftdiv+1
  3405  001598  C0CA  F0D2         	movff	?___ftpack+2,?___ftdiv+2
  3406  00159C  0012               	return	
  3407  00159E                     __end_of___ftdiv:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           intcon	equ	0xFF2
  3414                           intcon2	equ	0xFF1
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           indf1	equ	0xFE7
  3419                           fsr1h	equ	0xFE2
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function ___ftpack *****************
  3428 ;; Defined at:
  3429 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  arg             3   16[BANK0 ] unsigned um
  3432 ;;  exp             1   19[BANK0 ] unsigned char 
  3433 ;;  sign            1   20[BANK0 ] unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  3   16[BANK0 ] float 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3445 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;Total ram usage:        8 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    7
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		___awtoft
  3456 ;;		___ftdiv
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text8
  3461  0016BC                     __ptext8:
  3462                           	opt stack 0
  3463  0016BC                     ___ftpack:
  3464                           	opt stack 20
  3465                           
  3466                           ;incstack = 0
  3467  0016BC  0100               	movlb	0	; () banked
  3468  0016BE  51CB               	movf	___ftpack@exp& (0+255),w,b
  3469  0016C0  0100               	movlb	0	; () banked
  3470  0016C2  B4D8               	btfsc	status,2,c
  3471  0016C4  D008               	goto	l3347
  3472                           
  3473                           ; BSR set to: 0
  3474  0016C6  0100               	movlb	0	; () banked
  3475  0016C8  51C8               	movf	___ftpack@arg& (0+255),w,b
  3476  0016CA  0100               	movlb	0	; () banked
  3477  0016CC  11C9               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3478  0016CE  0100               	movlb	0	; () banked
  3479  0016D0  11CA               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3480  0016D2  A4D8               	btfss	status,2,c
  3481  0016D4  D011               	goto	l3353
  3482  0016D6                     l3347:
  3483                           
  3484                           ; BSR set to: 0
  3485  0016D6  0E00               	movlw	0
  3486  0016D8  0100               	movlb	0	; () banked
  3487  0016DA  6FC8               	movwf	?___ftpack& (0+255),b
  3488  0016DC  0E00               	movlw	0
  3489  0016DE  0100               	movlb	0	; () banked
  3490  0016E0  6FC9               	movwf	(?___ftpack+1)& (0+255),b
  3491  0016E2  0E00               	movlw	0
  3492  0016E4  0100               	movlb	0	; () banked
  3493  0016E6  6FCA               	movwf	(?___ftpack+2)& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496  0016E8  0012               	return	
  3497  0016EA                     l3351:
  3498                           
  3499                           ; BSR set to: 0
  3500  0016EA  0100               	movlb	0	; () banked
  3501  0016EC  2BCB               	incf	___ftpack@exp& (0+255),f,b
  3502  0016EE  0100               	movlb	0	; () banked
  3503  0016F0  90D8               	bcf	status,0,c
  3504  0016F2  33CA               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3505  0016F4  33C9               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3506  0016F6  33C8               	rrcf	___ftpack@arg& (0+255),f,b
  3507  0016F8                     l3353:
  3508                           
  3509                           ; BSR set to: 0
  3510  0016F8  0E00               	movlw	0
  3511  0016FA  0100               	movlb	0	; () banked
  3512  0016FC  15C8               	andwf	___ftpack@arg& (0+255),w,b
  3513  0016FE  0100               	movlb	0	; () banked
  3514  001700  6FCD               	movwf	??___ftpack& (0+255),b
  3515  001702  0E00               	movlw	0
  3516  001704  0100               	movlb	0	; () banked
  3517  001706  15C9               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3518  001708  0100               	movlb	0	; () banked
  3519  00170A  6FCE               	movwf	(??___ftpack+1)& (0+255),b
  3520  00170C  0EFE               	movlw	254
  3521  00170E  0100               	movlb	0	; () banked
  3522  001710  15CA               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3523  001712  0100               	movlb	0	; () banked
  3524  001714  6FCF               	movwf	(??___ftpack+2)& (0+255),b
  3525  001716  0100               	movlb	0	; () banked
  3526  001718  51CD               	movf	??___ftpack& (0+255),w,b
  3527  00171A  0100               	movlb	0	; () banked
  3528  00171C  11CE               	iorwf	(??___ftpack+1)& (0+255),w,b
  3529  00171E  0100               	movlb	0	; () banked
  3530  001720  11CF               	iorwf	(??___ftpack+2)& (0+255),w,b
  3531  001722  B4D8               	btfsc	status,2,c
  3532  001724  D011               	goto	l3359
  3533  001726  D7E1               	goto	l3351
  3534  001728                     l3355:
  3535                           
  3536                           ; BSR set to: 0
  3537  001728  0100               	movlb	0	; () banked
  3538  00172A  2BCB               	incf	___ftpack@exp& (0+255),f,b
  3539                           
  3540                           ; BSR set to: 0
  3541  00172C  0E01               	movlw	1
  3542  00172E  0100               	movlb	0	; () banked
  3543  001730  27C8               	addwf	___ftpack@arg& (0+255),f,b
  3544  001732  0E00               	movlw	0
  3545  001734  0100               	movlb	0	; () banked
  3546  001736  23C9               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3547  001738  0E00               	movlw	0
  3548  00173A  0100               	movlb	0	; () banked
  3549  00173C  23CA               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3550  00173E  0100               	movlb	0	; () banked
  3551  001740  90D8               	bcf	status,0,c
  3552  001742  33CA               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3553  001744  33C9               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3554  001746  33C8               	rrcf	___ftpack@arg& (0+255),f,b
  3555  001748                     l3359:
  3556                           
  3557                           ; BSR set to: 0
  3558  001748  0E00               	movlw	0
  3559  00174A  0100               	movlb	0	; () banked
  3560  00174C  15C8               	andwf	___ftpack@arg& (0+255),w,b
  3561  00174E  0100               	movlb	0	; () banked
  3562  001750  6FCD               	movwf	??___ftpack& (0+255),b
  3563  001752  0E00               	movlw	0
  3564  001754  0100               	movlb	0	; () banked
  3565  001756  15C9               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3566  001758  0100               	movlb	0	; () banked
  3567  00175A  6FCE               	movwf	(??___ftpack+1)& (0+255),b
  3568  00175C  0EFF               	movlw	255
  3569  00175E  0100               	movlb	0	; () banked
  3570  001760  15CA               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3571  001762  0100               	movlb	0	; () banked
  3572  001764  6FCF               	movwf	(??___ftpack+2)& (0+255),b
  3573  001766  0100               	movlb	0	; () banked
  3574  001768  51CD               	movf	??___ftpack& (0+255),w,b
  3575  00176A  0100               	movlb	0	; () banked
  3576  00176C  11CE               	iorwf	(??___ftpack+1)& (0+255),w,b
  3577  00176E  0100               	movlb	0	; () banked
  3578  001770  11CF               	iorwf	(??___ftpack+2)& (0+255),w,b
  3579  001772  B4D8               	btfsc	status,2,c
  3580  001774  D008               	goto	l3363
  3581  001776  D7D8               	goto	l3355
  3582  001778                     l3361:
  3583                           
  3584                           ; BSR set to: 0
  3585  001778  0100               	movlb	0	; () banked
  3586  00177A  07CB               	decf	___ftpack@exp& (0+255),f,b
  3587  00177C  0100               	movlb	0	; () banked
  3588  00177E  90D8               	bcf	status,0,c
  3589  001780  37C8               	rlcf	___ftpack@arg& (0+255),f,b
  3590  001782  37C9               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3591  001784  37CA               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3592  001786                     l3363:
  3593                           
  3594                           ; BSR set to: 0
  3595  001786  0100               	movlb	0	; () banked
  3596  001788  BFC9               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3597  00178A  D004               	goto	l686
  3598                           
  3599                           ; BSR set to: 0
  3600  00178C  0E02               	movlw	2
  3601  00178E  0100               	movlb	0	; () banked
  3602  001790  61CB               	cpfslt	___ftpack@exp& (0+255),b
  3603  001792  D7F2               	goto	l3361
  3604  001794                     l686:
  3605                           
  3606                           ; BSR set to: 0
  3607  001794  0100               	movlb	0	; () banked
  3608  001796  B1CB               	btfsc	___ftpack@exp& (0+255),0,b
  3609  001798  D002               	goto	l3369
  3610                           
  3611                           ; BSR set to: 0
  3612  00179A  0100               	movlb	0	; () banked
  3613  00179C  9FC9               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3614  00179E                     l3369:
  3615                           
  3616                           ; BSR set to: 0
  3617  00179E  0100               	movlb	0	; () banked
  3618  0017A0  90D8               	bcf	status,0,c
  3619  0017A2  33CB               	rrcf	___ftpack@exp& (0+255),f,b
  3620  0017A4  0100               	movlb	0	; () banked
  3621  0017A6  51CB               	movf	___ftpack@exp& (0+255),w,b
  3622  0017A8  0100               	movlb	0	; () banked
  3623  0017AA  13CA               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3624                           
  3625                           ; BSR set to: 0
  3626  0017AC  0100               	movlb	0	; () banked
  3627  0017AE  51CC               	movf	___ftpack@sign& (0+255),w,b
  3628  0017B0  0100               	movlb	0	; () banked
  3629  0017B2  B4D8               	btfsc	status,2,c
  3630  0017B4  D002               	goto	l3375
  3631                           
  3632                           ; BSR set to: 0
  3633  0017B6  0100               	movlb	0	; () banked
  3634  0017B8  8FCA               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3635  0017BA                     l3375:
  3636                           
  3637                           ; BSR set to: 0
  3638  0017BA  C0C8  F0C8         	movff	___ftpack@arg,?___ftpack
  3639  0017BE  C0C9  F0C9         	movff	___ftpack@arg+1,?___ftpack+1
  3640  0017C2  C0CA  F0CA         	movff	___ftpack@arg+2,?___ftpack+2
  3641  0017C6  0012               	return	
  3642  0017C8                     __end_of___ftpack:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           intcon	equ	0xFF2
  3649                           intcon2	equ	0xFF1
  3650                           intcon3	equ	0xFF0
  3651                           postinc0	equ	0xFEE
  3652                           wreg	equ	0xFE8
  3653                           indf1	equ	0xFE7
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           indf2	equ	0xFDF
  3657                           postinc2	equ	0xFDE
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _initLCD *****************
  3663 ;; Defined at:
  3664 ;;		line 14 in file "lcd.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;		None
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;		None
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;Total ram usage:        1 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    9
  3685 ;; This function calls:
  3686 ;;		_lcdInst
  3687 ;; This function is called by:
  3688 ;;		_main
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text9
  3693  002ACC                     __ptext9:
  3694                           	opt stack 0
  3695  002ACC                     _initLCD:
  3696                           	opt stack 21
  3697                           
  3698                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;incstack = 0
  3702  002ACC  0E31               	movlw	49
  3703  002ACE  0100               	movlb	0	; () banked
  3704  002AD0  6FCB               	movwf	??_initLCD& (0+255),b
  3705  002AD2  0EB2               	movlw	178
  3706  002AD4                     u4637:
  3707  002AD4  2EE8               	decfsz	wreg,f,c
  3708  002AD6  D7FE               	bra	u4637
  3709  002AD8  2FCB               	decfsz	??_initLCD& (0+255),f,b
  3710  002ADA  D7FC               	bra	u4637
  3711  002ADC  F000               	nop	
  3712                           
  3713                           ;lcd.c: 16: lcdInst(0b00110011);
  3714  002ADE  0E33               	movlw	51
  3715  002AE0  EC53  F017         	call	_lcdInst
  3716                           
  3717                           ;lcd.c: 17: lcdInst(0b00110011);
  3718  002AE4  0E33               	movlw	51
  3719  002AE6  EC53  F017         	call	_lcdInst
  3720                           
  3721                           ;lcd.c: 18: lcdInst(0b00110010);
  3722  002AEA  0E32               	movlw	50
  3723  002AEC  EC53  F017         	call	_lcdInst
  3724                           
  3725                           ;lcd.c: 19: lcdInst(0b00101000);
  3726  002AF0  0E28               	movlw	40
  3727  002AF2  EC53  F017         	call	_lcdInst
  3728                           
  3729                           ;lcd.c: 20: lcdInst(0b00001111);
  3730  002AF6  0E0F               	movlw	15
  3731  002AF8  EC53  F017         	call	_lcdInst
  3732                           
  3733                           ;lcd.c: 21: lcdInst(0b00000110);
  3734  002AFC  0E06               	movlw	6
  3735  002AFE  EC53  F017         	call	_lcdInst
  3736                           
  3737                           ;lcd.c: 22: lcdInst(0b00000001);
  3738  002B02  0E01               	movlw	1
  3739  002B04  EC53  F017         	call	_lcdInst
  3740                           
  3741                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  3742  002B08  0E31               	movlw	49
  3743  002B0A  0100               	movlb	0	; () banked
  3744  002B0C  6FCB               	movwf	??_initLCD& (0+255),b
  3745  002B0E  0EB2               	movlw	178
  3746  002B10                     u4647:
  3747  002B10  2EE8               	decfsz	wreg,f,c
  3748  002B12  D7FE               	bra	u4647
  3749  002B14  2FCB               	decfsz	??_initLCD& (0+255),f,b
  3750  002B16  D7FC               	bra	u4647
  3751  002B18  F000               	nop	
  3752  002B1A  0012               	return		;funcret
  3753  002B1C                     __end_of_initLCD:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           intcon	equ	0xFF2
  3760                           intcon2	equ	0xFF1
  3761                           intcon3	equ	0xFF0
  3762                           postinc0	equ	0xFEE
  3763                           wreg	equ	0xFE8
  3764                           indf1	equ	0xFE7
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _emergencystop *****************
  3774 ;; Defined at:
  3775 ;;		line 372 in file "main.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:   10
  3796 ;; This function calls:
  3797 ;;		_lcdInst
  3798 ;;		_printf
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text10
  3805  002E18                     __ptext10:
  3806                           	opt stack 0
  3807  002E18                     _emergencystop:
  3808                           	opt stack 20
  3809                           
  3810                           ;main.c: 373: (INTCONbits.GIE = 0);
  3811                           
  3812                           ;incstack = 0
  3813  002E18  9EF2               	bcf	intcon,7,c	;volatile
  3814                           
  3815                           ;main.c: 374: PORTAbits.RA2 = 0;
  3816  002E1A  9480               	bcf	3968,2,c	;volatile
  3817                           
  3818                           ;main.c: 375: lcdInst(0b00000001);
  3819  002E1C  0E01               	movlw	1
  3820  002E1E  EC53  F017         	call	_lcdInst
  3821                           
  3822                           ;main.c: 376: lcdInst(0b10000000);
  3823  002E22  0E80               	movlw	128
  3824  002E24  EC53  F017         	call	_lcdInst
  3825                           
  3826                           ;main.c: 377: printf("EMERGENCY STOP");
  3827  002E28  0ED8               	movlw	low STR_21
  3828  002E2A  0100               	movlb	0	; () banked
  3829  002E2C  6FD4               	movwf	printf@f& (0+255),b
  3830  002E2E  0EFF               	movlw	high STR_21
  3831  002E30  0100               	movlb	0	; () banked
  3832  002E32  6FD5               	movwf	(printf@f+1)& (0+255),b
  3833  002E34  EC09  F000         	call	_printf	;wreg free
  3834  002E38                     l357:
  3835  002E38  D7FF               	goto	l357
  3836  002E3A                     __end_of_emergencystop:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           intcon	equ	0xFF2
  3843                           intcon2	equ	0xFF1
  3844                           intcon3	equ	0xFF0
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           indf1	equ	0xFE7
  3848                           fsr1h	equ	0xFE2
  3849                           fsr1l	equ	0xFE1
  3850                           indf2	equ	0xFDF
  3851                           postinc2	equ	0xFDE
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _date_time *****************
  3857 ;; Defined at:
  3858 ;;		line 220 in file "main.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  i               1   50[BANK0 ] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;Total ram usage:        1 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:   10
  3879 ;; This function calls:
  3880 ;;		_I2C_Master_Read
  3881 ;;		_I2C_Master_Start
  3882 ;;		_I2C_Master_Stop
  3883 ;;		_I2C_Master_Write
  3884 ;;		_lcdInst
  3885 ;;		_printf
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text11
  3892  002032                     __ptext11:
  3893                           	opt stack 0
  3894  002032                     _date_time:
  3895                           	opt stack 20
  3896                           
  3897                           ;main.c: 222: I2C_Master_Start();
  3898                           
  3899                           ;incstack = 0
  3900  002032  EC75  F017         	call	_I2C_Master_Start	;wreg free
  3901                           
  3902                           ;main.c: 223: I2C_Master_Write(0b11010000);
  3903  002036  0E00               	movlw	0
  3904  002038  0100               	movlb	0	; () banked
  3905  00203A  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3906  00203C  0ED0               	movlw	208
  3907  00203E  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  3908  002040  EC67  F017         	call	_I2C_Master_Write	;wreg free
  3909                           
  3910                           ;main.c: 224: I2C_Master_Write(0x00);
  3911  002044  0E00               	movlw	0
  3912  002046  0100               	movlb	0	; () banked
  3913  002048  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3914  00204A  0E00               	movlw	0
  3915  00204C  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  3916  00204E  EC67  F017         	call	_I2C_Master_Write	;wreg free
  3917                           
  3918                           ;main.c: 225: I2C_Master_Stop();
  3919  002052  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  3920                           
  3921                           ;main.c: 228: I2C_Master_Start();
  3922  002056  EC75  F017         	call	_I2C_Master_Start	;wreg free
  3923                           
  3924                           ;main.c: 229: I2C_Master_Write(0b11010001);
  3925  00205A  0E00               	movlw	0
  3926  00205C  0100               	movlb	0	; () banked
  3927  00205E  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3928  002060  0ED1               	movlw	209
  3929  002062  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  3930  002064  EC67  F017         	call	_I2C_Master_Write	;wreg free
  3931                           
  3932                           ;main.c: 230: for(unsigned char i=0;i<0x06;i++){
  3933  002068  0E00               	movlw	0
  3934  00206A  0100               	movlb	0	; () banked
  3935  00206C  6FEA               	movwf	date_time@i& (0+255),b
  3936  00206E                     l4349:
  3937                           
  3938                           ; BSR set to: 0
  3939  00206E  0E05               	movlw	5
  3940  002070  0100               	movlb	0	; () banked
  3941  002072  65EA               	cpfsgt	date_time@i& (0+255),b
  3942  002074  D001               	goto	l4353
  3943  002076  D010               	goto	l4359
  3944  002078                     l4353:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;main.c: 231: time[i] = I2C_Master_Read(1);
  3948  002078  0100               	movlb	0	; () banked
  3949  00207A  51EA               	movf	date_time@i& (0+255),w,b
  3950  00207C  0D01               	mullw	1
  3951  00207E  0E96               	movlw	low _time
  3952  002080  24F3               	addwf	prodl,w,c
  3953  002082  6ED9               	movwf	fsr2l,c
  3954  002084  0E00               	movlw	high _time
  3955  002086  20F4               	addwfc	prodh,w,c
  3956  002088  6EDA               	movwf	fsr2h,c
  3957  00208A  0E01               	movlw	1
  3958  00208C  ECA8  F016         	call	_I2C_Master_Read
  3959  002090  6EDF               	movwf	indf2,c
  3960  002092  0100               	movlb	0	; () banked
  3961  002094  2BEA               	incf	date_time@i& (0+255),f,b
  3962  002096  D7EB               	goto	l4349
  3963  002098                     l4359:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;main.c: 232: }
  3967                           ;main.c: 233: time[6] = I2C_Master_Read(0);
  3968  002098  0E00               	movlw	0
  3969  00209A  ECA8  F016         	call	_I2C_Master_Read
  3970  00209E  0100               	movlb	0	; () banked
  3971  0020A0  6F9C               	movwf	(_time+6)& (0+255),b
  3972                           
  3973                           ;main.c: 234: I2C_Master_Stop();
  3974  0020A2  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  3975                           
  3976                           ;main.c: 237: lcdInst(0b10000000);
  3977  0020A6  0E80               	movlw	128
  3978  0020A8  EC53  F017         	call	_lcdInst
  3979                           
  3980                           ;main.c: 238: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  3981  0020AC  0E01               	movlw	low STR_6
  3982  0020AE  0100               	movlb	0	; () banked
  3983  0020B0  6FD4               	movwf	printf@f& (0+255),b
  3984  0020B2  0EFF               	movlw	high STR_6
  3985  0020B4  0100               	movlb	0	; () banked
  3986  0020B6  6FD5               	movwf	(printf@f+1)& (0+255),b
  3987  0020B8  C09B  F0D6         	movff	_time+5,?_printf+2
  3988  0020BC  0100               	movlb	0	; () banked
  3989  0020BE  6BD7               	clrf	(?_printf+3)& (0+255),b
  3990  0020C0  C09A  F0D8         	movff	_time+4,?_printf+4
  3991  0020C4  0100               	movlb	0	; () banked
  3992  0020C6  6BD9               	clrf	(?_printf+5)& (0+255),b
  3993  0020C8  C09C  F0DA         	movff	_time+6,?_printf+6
  3994  0020CC  0100               	movlb	0	; () banked
  3995  0020CE  6BDB               	clrf	(?_printf+7)& (0+255),b
  3996  0020D0  EC09  F000         	call	_printf	;wreg free
  3997                           
  3998                           ;main.c: 239: lcdInst(0b11000000);
  3999  0020D4  0EC0               	movlw	192
  4000  0020D6  EC53  F017         	call	_lcdInst
  4001                           
  4002                           ;main.c: 240: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4003  0020DA  0E18               	movlw	low STR_7
  4004  0020DC  0100               	movlb	0	; () banked
  4005  0020DE  6FD4               	movwf	printf@f& (0+255),b
  4006  0020E0  0EFF               	movlw	high STR_7
  4007  0020E2  0100               	movlb	0	; () banked
  4008  0020E4  6FD5               	movwf	(printf@f+1)& (0+255),b
  4009  0020E6  C098  F0D6         	movff	_time+2,?_printf+2
  4010  0020EA  0100               	movlb	0	; () banked
  4011  0020EC  6BD7               	clrf	(?_printf+3)& (0+255),b
  4012  0020EE  C097  F0D8         	movff	_time+1,?_printf+4
  4013  0020F2  0100               	movlb	0	; () banked
  4014  0020F4  6BD9               	clrf	(?_printf+5)& (0+255),b
  4015  0020F6  C096  F0DA         	movff	_time,?_printf+6
  4016  0020FA  0100               	movlb	0	; () banked
  4017  0020FC  6BDB               	clrf	(?_printf+7)& (0+255),b
  4018  0020FE  EC09  F000         	call	_printf	;wreg free
  4019  002102  0012               	return	
  4020  002104                     __end_of_date_time:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           tblptrh	equ	0xFF7
  4024                           tblptrl	equ	0xFF6
  4025                           tablat	equ	0xFF5
  4026                           prodh	equ	0xFF4
  4027                           prodl	equ	0xFF3
  4028                           intcon	equ	0xFF2
  4029                           intcon2	equ	0xFF1
  4030                           intcon3	equ	0xFF0
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           indf1	equ	0xFE7
  4034                           fsr1h	equ	0xFE2
  4035                           fsr1l	equ	0xFE1
  4036                           indf2	equ	0xFDF
  4037                           postinc2	equ	0xFDE
  4038                           fsr2h	equ	0xFDA
  4039                           fsr2l	equ	0xFD9
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _I2C_Master_Read *****************
  4043 ;; Defined at:
  4044 ;;		line 105 in file "I2C.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  a               1    wreg     unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  a               1   17[BANK0 ] unsigned char 
  4049 ;;  temp            1   18[BANK0 ] unsigned char 
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      unsigned char 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        2 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    8
  4066 ;; This function calls:
  4067 ;;		_I2C_Master_Wait
  4068 ;; This function is called by:
  4069 ;;		_date_time
  4070 ;;		_read_colorsensor
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text12
  4075  002D50                     __ptext12:
  4076                           	opt stack 0
  4077  002D50                     _I2C_Master_Read:
  4078                           	opt stack 20
  4079                           
  4080                           ;incstack = 0
  4081                           ;I2C_Master_Read@a stored from wreg
  4082  002D50  0100               	movlb	0	; () banked
  4083  002D52  6FC9               	movwf	I2C_Master_Read@a& (0+255),b
  4084                           
  4085                           ;I2C.c: 107: unsigned char temp;
  4086                           ;I2C.c: 108: I2C_Master_Wait();
  4087  002D54  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  4088                           
  4089                           ;I2C.c: 109: RCEN = 1;
  4090  002D58  86C5               	bsf	4037,3,c	;volatile
  4091                           
  4092                           ;I2C.c: 110: I2C_Master_Wait();
  4093  002D5A  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  4094                           
  4095                           ;I2C.c: 111: temp = SSPBUF;
  4096  002D5E  CFC9 F0CA          	movff	4041,I2C_Master_Read@temp	;volatile
  4097                           
  4098                           ;I2C.c: 112: I2C_Master_Wait();
  4099  002D62  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  4100                           
  4101                           ;I2C.c: 113: ACKDT = (a)?0:1;
  4102  002D66  0100               	movlb	0	; () banked
  4103  002D68  51C9               	movf	I2C_Master_Read@a& (0+255),w,b
  4104  002D6A  0100               	movlb	0	; () banked
  4105  002D6C  A4D8               	btfss	status,2,c
  4106  002D6E  D002               	goto	u3120
  4107  002D70  8AC5               	bsf	4037,5,c	;volatile
  4108  002D72  D001               	goto	l3535
  4109  002D74                     u3120:
  4110  002D74  9AC5               	bcf	4037,5,c	;volatile
  4111  002D76                     l3535:
  4112                           
  4113                           ;I2C.c: 114: ACKEN = 1;
  4114  002D76  88C5               	bsf	4037,4,c	;volatile
  4115                           
  4116                           ;I2C.c: 115: return temp;
  4117  002D78  0100               	movlb	0	; () banked
  4118  002D7A  51CA               	movf	I2C_Master_Read@temp& (0+255),w,b
  4119  002D7C  0012               	return	
  4120  002D7E                     __end_of_I2C_Master_Read:
  4121                           	opt stack 0
  4122                           tblptru	equ	0xFF8
  4123                           tblptrh	equ	0xFF7
  4124                           tblptrl	equ	0xFF6
  4125                           tablat	equ	0xFF5
  4126                           prodh	equ	0xFF4
  4127                           prodl	equ	0xFF3
  4128                           intcon	equ	0xFF2
  4129                           intcon2	equ	0xFF1
  4130                           intcon3	equ	0xFF0
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           indf1	equ	0xFE7
  4134                           fsr1h	equ	0xFE2
  4135                           fsr1l	equ	0xFE1
  4136                           indf2	equ	0xFDF
  4137                           postinc2	equ	0xFDE
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _bottle_time *****************
  4143 ;; Defined at:
  4144 ;;		line 293 in file "main.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;		None
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;		None
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;Total ram usage:        0 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:   10
  4165 ;; This function calls:
  4166 ;;		_lcdInst
  4167 ;;		_printf
  4168 ;; This function is called by:
  4169 ;;		_main
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text13
  4174  002CE4                     __ptext13:
  4175                           	opt stack 0
  4176  002CE4                     _bottle_time:
  4177                           	opt stack 20
  4178                           
  4179                           ;main.c: 294: lcdInst(0b10000000);
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;incstack = 0
  4183  002CE4  0E80               	movlw	128
  4184  002CE6  EC53  F017         	call	_lcdInst
  4185                           
  4186                           ;main.c: 295: printf("Total Operation       ");
  4187  002CEA  0EEA               	movlw	low STR_15
  4188  002CEC  0100               	movlb	0	; () banked
  4189  002CEE  6FD4               	movwf	printf@f& (0+255),b
  4190  002CF0  0EFE               	movlw	high STR_15
  4191  002CF2  0100               	movlb	0	; () banked
  4192  002CF4  6FD5               	movwf	(printf@f+1)& (0+255),b
  4193  002CF6  EC09  F000         	call	_printf	;wreg free
  4194                           
  4195                           ;main.c: 296: lcdInst(0b11000000);
  4196  002CFA  0EC0               	movlw	192
  4197  002CFC  EC53  F017         	call	_lcdInst
  4198                           
  4199                           ;main.c: 297: printf("Time: %d s       ", operation_time);
  4200  002D00  0E2F               	movlw	low STR_16
  4201  002D02  0100               	movlb	0	; () banked
  4202  002D04  6FD4               	movwf	printf@f& (0+255),b
  4203  002D06  0EFF               	movlw	high STR_16
  4204  002D08  0100               	movlb	0	; () banked
  4205  002D0A  6FD5               	movwf	(printf@f+1)& (0+255),b
  4206  002D0C  C0B3  F0D6         	movff	_operation_time,?_printf+2
  4207  002D10  C0B4  F0D7         	movff	_operation_time+1,?_printf+3
  4208  002D14  EC09  F000         	call	_printf	;wreg free
  4209  002D18  0012               	return	
  4210  002D1A                     __end_of_bottle_time:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           intcon	equ	0xFF2
  4219                           intcon2	equ	0xFF1
  4220                           intcon3	equ	0xFF0
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           indf1	equ	0xFE7
  4224                           fsr1h	equ	0xFE2
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _bottle_count *****************
  4233 ;; Defined at:
  4234 ;;		line 263 in file "main.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;Total ram usage:        0 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:   10
  4255 ;; This function calls:
  4256 ;;		___awmod
  4257 ;;		_lcdInst
  4258 ;;		_printf
  4259 ;; This function is called by:
  4260 ;;		_main
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text14
  4265  0018CE                     __ptext14:
  4266                           	opt stack 0
  4267  0018CE                     _bottle_count:
  4268                           	opt stack 20
  4269                           
  4270                           ;main.c: 264: switch(bottle_count_disp % 3){
  4271                           
  4272                           ;incstack = 0
  4273  0018CE  D065               	goto	l4393
  4274  0018D0                     l4369:
  4275                           
  4276                           ;main.c: 266: lcdInst(0b10000000);
  4277  0018D0  0E80               	movlw	128
  4278  0018D2  EC53  F017         	call	_lcdInst
  4279                           
  4280                           ;main.c: 267: printf("Bottle Count    ");
  4281  0018D6  0E63               	movlw	low STR_8
  4282  0018D8  0100               	movlb	0	; () banked
  4283  0018DA  6FD4               	movwf	printf@f& (0+255),b
  4284  0018DC  0EFF               	movlw	high STR_8
  4285  0018DE  0100               	movlb	0	; () banked
  4286  0018E0  6FD5               	movwf	(printf@f+1)& (0+255),b
  4287  0018E2  EC09  F000         	call	_printf	;wreg free
  4288                           
  4289                           ;main.c: 268: lcdInst(0b11000000);
  4290  0018E6  0EC0               	movlw	192
  4291  0018E8  EC53  F017         	call	_lcdInst
  4292                           
  4293                           ;main.c: 269: printf("Total: %d       ", bottle_count_array[4]);
  4294  0018EC  0E52               	movlw	low STR_9
  4295  0018EE  0100               	movlb	0	; () banked
  4296  0018F0  6FD4               	movwf	printf@f& (0+255),b
  4297  0018F2  0EFF               	movlw	high STR_9
  4298  0018F4  0100               	movlb	0	; () banked
  4299  0018F6  6FD5               	movwf	(printf@f+1)& (0+255),b
  4300  0018F8  C094  F0D6         	movff	_bottle_count_array+8,?_printf+2
  4301  0018FC  C095  F0D7         	movff	_bottle_count_array+9,?_printf+3
  4302  001900  EC09  F000         	call	_printf	;wreg free
  4303                           
  4304                           ;main.c: 270: break;
  4305  001904  0012               	return	
  4306  001906                     l4375:
  4307                           
  4308                           ;main.c: 272: lcdInst(0b10000000);
  4309  001906  0E80               	movlw	128
  4310  001908  EC53  F017         	call	_lcdInst
  4311                           
  4312                           ;main.c: 273: printf("YOP W/ CAP: %d  ", bottle_count_array[0]);
  4313  00190C  0E74               	movlw	low STR_10
  4314  00190E  0100               	movlb	0	; () banked
  4315  001910  6FD4               	movwf	printf@f& (0+255),b
  4316  001912  0EFF               	movlw	high STR_10
  4317  001914  0100               	movlb	0	; () banked
  4318  001916  6FD5               	movwf	(printf@f+1)& (0+255),b
  4319  001918  C08C  F0D6         	movff	_bottle_count_array,?_printf+2
  4320  00191C  C08D  F0D7         	movff	_bottle_count_array+1,?_printf+3
  4321  001920  EC09  F000         	call	_printf	;wreg free
  4322                           
  4323                           ;main.c: 274: lcdInst(0b11000000);
  4324  001924  0EC0               	movlw	192
  4325  001926  EC53  F017         	call	_lcdInst
  4326                           
  4327                           ;main.c: 275: printf("YOP NO CAP: %d  ", bottle_count_array[1]);
  4328  00192A  0E85               	movlw	low STR_11
  4329  00192C  0100               	movlb	0	; () banked
  4330  00192E  6FD4               	movwf	printf@f& (0+255),b
  4331  001930  0EFF               	movlw	high STR_11
  4332  001932  0100               	movlb	0	; () banked
  4333  001934  6FD5               	movwf	(printf@f+1)& (0+255),b
  4334  001936  C08E  F0D6         	movff	_bottle_count_array+2,?_printf+2
  4335  00193A  C08F  F0D7         	movff	_bottle_count_array+3,?_printf+3
  4336  00193E  EC09  F000         	call	_printf	;wreg free
  4337                           
  4338                           ;main.c: 276: break;
  4339  001942  0012               	return	
  4340  001944                     l4381:
  4341                           
  4342                           ;main.c: 278: lcdInst(0b10000000);
  4343  001944  0E80               	movlw	128
  4344  001946  EC53  F017         	call	_lcdInst
  4345                           
  4346                           ;main.c: 279: printf("ESKA W/ CAP: %d ", bottle_count_array[2]);
  4347  00194A  0E96               	movlw	low STR_12
  4348  00194C  0100               	movlb	0	; () banked
  4349  00194E  6FD4               	movwf	printf@f& (0+255),b
  4350  001950  0EFF               	movlw	high STR_12
  4351  001952  0100               	movlb	0	; () banked
  4352  001954  6FD5               	movwf	(printf@f+1)& (0+255),b
  4353  001956  C090  F0D6         	movff	_bottle_count_array+4,?_printf+2
  4354  00195A  C091  F0D7         	movff	_bottle_count_array+5,?_printf+3
  4355  00195E  EC09  F000         	call	_printf	;wreg free
  4356                           
  4357                           ;main.c: 280: lcdInst(0b11000000);
  4358  001962  0EC0               	movlw	192
  4359  001964  EC53  F017         	call	_lcdInst
  4360                           
  4361                           ;main.c: 281: printf("ESKA NO CAP: %d ", bottle_count_array[3]);
  4362  001968  0EA7               	movlw	low STR_13
  4363  00196A  0100               	movlb	0	; () banked
  4364  00196C  6FD4               	movwf	printf@f& (0+255),b
  4365  00196E  0EFF               	movlw	high STR_13
  4366  001970  0100               	movlb	0	; () banked
  4367  001972  6FD5               	movwf	(printf@f+1)& (0+255),b
  4368  001974  C092  F0D6         	movff	_bottle_count_array+6,?_printf+2
  4369  001978  C093  F0D7         	movff	_bottle_count_array+7,?_printf+3
  4370  00197C  EC09  F000         	call	_printf	;wreg free
  4371                           
  4372                           ;main.c: 282: break;
  4373  001980  0012               	return	
  4374  001982                     l4387:
  4375                           
  4376                           ;main.c: 285: lcdInst(0b10000000);
  4377  001982  0E80               	movlw	128
  4378  001984  EC53  F017         	call	_lcdInst
  4379                           
  4380                           ;main.c: 286: printf("ERR: BAD BTLCNT");
  4381  001988  0EC8               	movlw	low STR_14
  4382  00198A  0100               	movlb	0	; () banked
  4383  00198C  6FD4               	movwf	printf@f& (0+255),b
  4384  00198E  0EFF               	movlw	high STR_14
  4385  001990  0100               	movlb	0	; () banked
  4386  001992  6FD5               	movwf	(printf@f+1)& (0+255),b
  4387  001994  EC09  F000         	call	_printf	;wreg free
  4388  001998  D7F4               	goto	l4387
  4389  00199A                     l4393:
  4390  00199A  C0ED  F0C8         	movff	_bottle_count_disp,___awmod@dividend
  4391  00199E  C0EE  F0C9         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4392  0019A2  0E00               	movlw	0
  4393  0019A4  0100               	movlb	0	; () banked
  4394  0019A6  6FCB               	movwf	(___awmod@divisor+1)& (0+255),b
  4395  0019A8  0E03               	movlw	3
  4396  0019AA  6FCA               	movwf	___awmod@divisor& (0+255),b
  4397  0019AC  EC67  F012         	call	___awmod	;wreg free
  4398                           
  4399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4400                           ; Switch size 1, requested type "space"
  4401                           ; Number of cases is 1, Range of values is 0 to 0
  4402                           ; switch strategies available:
  4403                           ; Name         Instructions Cycles
  4404                           ; simple_byte            4     3 (average)
  4405                           ;	Chosen strategy is simple_byte
  4406  0019B0  0100               	movlb	0	; () banked
  4407  0019B2  51C9               	movf	(?___awmod+1)& (0+255),w,b
  4408  0019B4  0A00               	xorlw	0	; case 0
  4409  0019B6  A4D8               	btfss	status,2,c
  4410  0019B8  D7E4               	goto	l4387
  4411                           
  4412                           ; BSR set to: 0
  4413                           ; Switch size 1, requested type "space"
  4414                           ; Number of cases is 3, Range of values is 0 to 2
  4415                           ; switch strategies available:
  4416                           ; Name         Instructions Cycles
  4417                           ; simple_byte           10     6 (average)
  4418                           ;	Chosen strategy is simple_byte
  4419  0019BA  0100               	movlb	0	; () banked
  4420  0019BC  51C8               	movf	?___awmod& (0+255),w,b
  4421  0019BE  0A00               	xorlw	0	; case 0
  4422  0019C0  B4D8               	btfsc	status,2,c
  4423  0019C2  D786               	goto	l4369
  4424  0019C4  0A01               	xorlw	1	; case 1
  4425  0019C6  B4D8               	btfsc	status,2,c
  4426  0019C8  D79E               	goto	l4375
  4427  0019CA  0A03               	xorlw	3	; case 2
  4428  0019CC  B4D8               	btfsc	status,2,c
  4429  0019CE  D7BA               	goto	l4381
  4430  0019D0  D7D8               	goto	l4387
  4431  0019D2                     __end_of_bottle_count:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           intcon	equ	0xFF2
  4440                           intcon2	equ	0xFF1
  4441                           intcon3	equ	0xFF0
  4442                           postinc0	equ	0xFEE
  4443                           wreg	equ	0xFE8
  4444                           indf1	equ	0xFE7
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           fsr2h	equ	0xFDA
  4450                           fsr2l	equ	0xFD9
  4451                           status	equ	0xFD8
  4452                           
  4453 ;; *************** function _printf *****************
  4454 ;; Defined at:
  4455 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  4458 ;;		 -> STR_21(15), STR_20(16), STR_19(25), STR_18(24), 
  4459 ;;		 -> STR_17(23), STR_16(18), STR_15(23), STR_14(16), 
  4460 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  4461 ;;		 -> STR_9(17), STR_8(17), STR_7(23), STR_6(23), 
  4462 ;;		 -> STR_5(3), STR_4(8), STR_3(13), STR_2(24), 
  4463 ;;		 -> STR_1(24), 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  idx             1   40[BANK0 ] unsigned char 
  4466 ;;  tmpval          4    0        struct .
  4467 ;;  cp              3    0        PTR const unsigned char 
  4468 ;;  width           2   47[BANK0 ] int 
  4469 ;;  val             2   44[BANK0 ] unsigned int 
  4470 ;;  ap              2   41[BANK0 ] PTR void [1]
  4471 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4472 ;;  len             2    0        unsigned int 
  4473 ;;  c               1   49[BANK0 ] char 
  4474 ;;  flag            1   46[BANK0 ] unsigned char 
  4475 ;;  prec            1   43[BANK0 ] char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2   28[BANK0 ] int 
  4478 ;; Registers used:
  4479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4485 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;Total ram usage:       22 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    9
  4492 ;; This function calls:
  4493 ;;		___lwdiv
  4494 ;;		___lwmod
  4495 ;;		___wmul
  4496 ;;		_isdigit
  4497 ;;		_putch
  4498 ;; This function is called by:
  4499 ;;		_standby
  4500 ;;		_date_time
  4501 ;;		_bottle_count
  4502 ;;		_bottle_time
  4503 ;;		_operation
  4504 ;;		_operationend
  4505 ;;		_emergencystop
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text15
  4510  000012                     __ptext15:
  4511                           	opt stack 0
  4512  000012                     _printf:
  4513                           	opt stack 20
  4514                           
  4515                           ;doprnt.c: 466: va_list ap;
  4516                           ;doprnt.c: 499: signed char c;
  4517                           ;doprnt.c: 501: int width;
  4518                           ;doprnt.c: 506: signed char prec;
  4519                           ;doprnt.c: 508: unsigned char flag;
  4520                           ;doprnt.c: 523: union {
  4521                           ;doprnt.c: 524: unsigned long vd;
  4522                           ;doprnt.c: 525: double integ;
  4523                           ;doprnt.c: 526: } tmpval;
  4524                           ;doprnt.c: 528: unsigned int val;
  4525                           ;doprnt.c: 529: unsigned len;
  4526                           ;doprnt.c: 530: const char * cp;
  4527                           ;doprnt.c: 533: *ap = __va_start();
  4528                           
  4529                           ;incstack = 0
  4530  000012  0ED6               	movlw	low (?_printf+2)
  4531  000014  0100               	movlb	0	; () banked
  4532  000016  6FE1               	movwf	printf@ap& (0+255),b
  4533  000018  0E00               	movlw	high (?_printf+2)
  4534  00001A  0100               	movlb	0	; () banked
  4535  00001C  6FE2               	movwf	(printf@ap+1)& (0+255),b
  4536                           
  4537                           ;doprnt.c: 536: while(c = *f++) {
  4538  00001E  D1D5               	goto	l3875
  4539  000020                     l3745:
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;doprnt.c: 538: if(c != '%')
  4543  000020  0E25               	movlw	37
  4544  000022  0100               	movlb	0	; () banked
  4545  000024  19E9               	xorwf	printf@c& (0+255),w,b
  4546  000026  B4D8               	btfsc	status,2,c
  4547  000028  D005               	goto	l3749
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;doprnt.c: 540: {
  4551                           ;doprnt.c: 541: (putch(c) );
  4552  00002A  0100               	movlb	0	; () banked
  4553  00002C  51E9               	movf	printf@c& (0+255),w,b
  4554  00002E  EC4B  F017         	call	_putch
  4555                           
  4556                           ;doprnt.c: 542: continue;
  4557  000032  D1CB               	goto	l3875
  4558  000034                     l3749:
  4559                           
  4560                           ;doprnt.c: 543: }
  4561                           ;doprnt.c: 546: width = 0;
  4562  000034  0E00               	movlw	0
  4563  000036  0100               	movlb	0	; () banked
  4564  000038  6FE8               	movwf	(printf@width+1)& (0+255),b
  4565  00003A  0E00               	movlw	0
  4566  00003C  6FE7               	movwf	printf@width& (0+255),b
  4567                           
  4568                           ;doprnt.c: 548: flag = 0;
  4569  00003E  0E00               	movlw	0
  4570  000040  0100               	movlb	0	; () banked
  4571  000042  6FE6               	movwf	printf@flag& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 551: switch(*f) {
  4575                           
  4576                           ;doprnt.c: 550: for(;;) {
  4577  000044  D005               	goto	l3755
  4578  000046                     l3751:
  4579                           
  4580                           ;doprnt.c: 580: flag |= 0x04;
  4581  000046  0100               	movlb	0	; () banked
  4582  000048  85E6               	bsf	printf@flag& (0+255),2,b
  4583                           
  4584                           ;doprnt.c: 581: f++;
  4585  00004A  0100               	movlb	0	; () banked
  4586  00004C  4BD4               	infsnz	printf@f& (0+255),f,b
  4587  00004E  2BD5               	incf	(printf@f+1)& (0+255),f,b
  4588  000050                     l3755:
  4589  000050  C0D4  FFF6         	movff	printf@f,tblptrl
  4590  000054  C0D5  FFF7         	movff	printf@f+1,tblptrh
  4591  000058                     	if	0	;tblptru may be non-zero
  4592  000058                     	endif
  4593  000058                     	if	0	;tblptru may be non-zero
  4594  000058                     	endif
  4595  000058  0008               	tblrd		*
  4596  00005A  50F5               	movf	tablat,w,c
  4597                           
  4598                           ; Switch size 1, requested type "space"
  4599                           ; Number of cases is 1, Range of values is 48 to 48
  4600                           ; switch strategies available:
  4601                           ; Name         Instructions Cycles
  4602                           ; simple_byte            4     3 (average)
  4603                           ;	Chosen strategy is simple_byte
  4604  00005C  0A30               	xorlw	48	; case 48
  4605  00005E  B4D8               	btfsc	status,2,c
  4606  000060  D7F2               	goto	l3751
  4607                           
  4608                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4609                           
  4610                           ;doprnt.c: 586: }
  4611                           
  4612                           ;doprnt.c: 585: break;
  4613  000062  C0D4  FFF6         	movff	printf@f,tblptrl
  4614  000066  C0D5  FFF7         	movff	printf@f+1,tblptrh
  4615  00006A                     	if	0	;tblptru may be non-zero
  4616  00006A                     	endif
  4617  00006A                     	if	0	;tblptru may be non-zero
  4618  00006A                     	endif
  4619  00006A  0008               	tblrd		*
  4620  00006C  50F5               	movf	tablat,w,c
  4621  00006E  ECBF  F016         	call	_isdigit
  4622  000072  A0D8               	btfss	status,0,c
  4623  000074  D048               	goto	l3775
  4624                           
  4625                           ;doprnt.c: 598: width = 0;
  4626  000076  0E00               	movlw	0
  4627  000078  0100               	movlb	0	; () banked
  4628  00007A  6FE8               	movwf	(printf@width+1)& (0+255),b
  4629  00007C  0E00               	movlw	0
  4630  00007E  6FE7               	movwf	printf@width& (0+255),b
  4631  000080                     l3761:
  4632                           
  4633                           ;doprnt.c: 600: width *= 10;
  4634  000080  C0E7  F0C8         	movff	printf@width,___wmul@multiplier
  4635  000084  C0E8  F0C9         	movff	printf@width+1,___wmul@multiplier+1
  4636  000088  0E00               	movlw	0
  4637  00008A  0100               	movlb	0	; () banked
  4638  00008C  6FCB               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4639  00008E  0E0A               	movlw	10
  4640  000090  6FCA               	movwf	___wmul@multiplicand& (0+255),b
  4641  000092  EC8D  F016         	call	___wmul	;wreg free
  4642  000096  C0C8  F0E7         	movff	?___wmul,printf@width
  4643  00009A  C0C9  F0E8         	movff	?___wmul+1,printf@width+1
  4644                           
  4645                           ;doprnt.c: 601: width += *f++ - '0';
  4646  00009E  0ED0               	movlw	208
  4647  0000A0  0100               	movlb	0	; () banked
  4648  0000A2  6FDC               	movwf	??_printf& (0+255),b
  4649  0000A4  0EFF               	movlw	255
  4650  0000A6  0100               	movlb	0	; () banked
  4651  0000A8  6FDD               	movwf	(??_printf+1)& (0+255),b
  4652  0000AA  C0D4  FFF6         	movff	printf@f,tblptrl
  4653  0000AE  C0D5  FFF7         	movff	printf@f+1,tblptrh
  4654  0000B2                     	if	0	;tblptru may be non-zero
  4655  0000B2                     	endif
  4656  0000B2                     	if	0	;tblptru may be non-zero
  4657  0000B2                     	endif
  4658  0000B2  0008               	tblrd		*
  4659  0000B4  50F5               	movf	tablat,w,c
  4660  0000B6  0100               	movlb	0	; () banked
  4661  0000B8  6FDE               	movwf	(??_printf+2)& (0+255),b
  4662  0000BA  6BDF               	clrf	(??_printf+3)& (0+255),b
  4663  0000BC  0100               	movlb	0	; () banked
  4664  0000BE  51DC               	movf	??_printf& (0+255),w,b
  4665  0000C0  0100               	movlb	0	; () banked
  4666  0000C2  27DE               	addwf	(??_printf+2)& (0+255),f,b
  4667  0000C4  0100               	movlb	0	; () banked
  4668  0000C6  51DD               	movf	(??_printf+1)& (0+255),w,b
  4669  0000C8  0100               	movlb	0	; () banked
  4670  0000CA  23DF               	addwfc	(??_printf+3)& (0+255),f,b
  4671  0000CC  0100               	movlb	0	; () banked
  4672  0000CE  51DE               	movf	(??_printf+2)& (0+255),w,b
  4673  0000D0  0100               	movlb	0	; () banked
  4674  0000D2  27E7               	addwf	printf@width& (0+255),f,b
  4675  0000D4  0100               	movlb	0	; () banked
  4676  0000D6  51DF               	movf	(??_printf+3)& (0+255),w,b
  4677  0000D8  0100               	movlb	0	; () banked
  4678  0000DA  23E8               	addwfc	(printf@width+1)& (0+255),f,b
  4679                           
  4680                           ; BSR set to: 0
  4681  0000DC  0100               	movlb	0	; () banked
  4682  0000DE  4BD4               	infsnz	printf@f& (0+255),f,b
  4683  0000E0  2BD5               	incf	(printf@f+1)& (0+255),f,b
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4687  0000E2  C0D4  FFF6         	movff	printf@f,tblptrl
  4688  0000E6  C0D5  FFF7         	movff	printf@f+1,tblptrh
  4689  0000EA                     	if	0	;tblptru may be non-zero
  4690  0000EA                     	endif
  4691  0000EA                     	if	0	;tblptru may be non-zero
  4692  0000EA                     	endif
  4693  0000EA  0008               	tblrd		*
  4694  0000EC  50F5               	movf	tablat,w,c
  4695  0000EE  ECBF  F016         	call	_isdigit
  4696  0000F2  A0D8               	btfss	status,0,c
  4697  0000F4  D008               	goto	l3775
  4698  0000F6  D7C4               	goto	l3761
  4699  0000F8                     l3769:
  4700                           
  4701                           ;doprnt.c: 721: flag |= 0x80;
  4702  0000F8  0100               	movlb	0	; () banked
  4703  0000FA  8FE6               	bsf	printf@flag& (0+255),7,b
  4704                           
  4705                           ;doprnt.c: 723: break;
  4706  0000FC  D020               	goto	l3777
  4707  0000FE                     l3771:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;doprnt.c: 818: flag |= 0xC0;
  4711  0000FE  0EC0               	movlw	192
  4712  000100  0100               	movlb	0	; () banked
  4713  000102  13E6               	iorwf	printf@flag& (0+255),f,b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;doprnt.c: 822: }
  4717                           
  4718                           ;doprnt.c: 819: break;
  4719  000104  D01C               	goto	l3777
  4720  000106                     l3775:
  4721  000106  C0D4  FFF6         	movff	printf@f,tblptrl
  4722  00010A  C0D5  FFF7         	movff	printf@f+1,tblptrh
  4723  00010E  0100               	movlb	0	; () banked
  4724  000110  4BD4               	infsnz	printf@f& (0+255),f,b
  4725  000112  2BD5               	incf	(printf@f+1)& (0+255),f,b
  4726  000114                     	if	0	;tblptru may be non-zero
  4727  000114                     	endif
  4728  000114                     	if	0	;tblptru may be non-zero
  4729  000114                     	endif
  4730  000114  0008               	tblrd		*
  4731  000116  CFF5 F0E9          	movff	tablat,printf@c
  4732  00011A  0100               	movlb	0	; () banked
  4733  00011C  51E9               	movf	printf@c& (0+255),w,b
  4734                           
  4735                           ; Switch size 1, requested type "space"
  4736                           ; Number of cases is 5, Range of values is 0 to 120
  4737                           ; switch strategies available:
  4738                           ; Name         Instructions Cycles
  4739                           ; simple_byte           16     9 (average)
  4740                           ;	Chosen strategy is simple_byte
  4741  00011E  0A00               	xorlw	0	; case 0
  4742  000120  B4D8               	btfsc	status,2,c
  4743  000122  0012               	return	
  4744  000124  0A64               	xorlw	100	; case 100
  4745  000126  B4D8               	btfsc	status,2,c
  4746  000128  D00A               	goto	l3777
  4747  00012A  0A0D               	xorlw	13	; case 105
  4748  00012C  B4D8               	btfsc	status,2,c
  4749  00012E  D007               	goto	l3777
  4750  000130  0A1C               	xorlw	28	; case 117
  4751  000132  B4D8               	btfsc	status,2,c
  4752  000134  D7E4               	goto	l3771
  4753  000136  0A0D               	xorlw	13	; case 120
  4754  000138  B4D8               	btfsc	status,2,c
  4755  00013A  D7DE               	goto	l3769
  4756  00013C  D146               	goto	l3875
  4757  00013E                     l3777:
  4758                           
  4759                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4760  00013E  C0E6  F0DC         	movff	printf@flag,??_printf
  4761  000142  0EC0               	movlw	192
  4762  000144  0100               	movlb	0	; () banked
  4763  000146  17DC               	andwf	??_printf& (0+255),f,b
  4764  000148  A4D8               	btfss	status,2,c
  4765  00014A  D019               	goto	l3789
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;doprnt.c: 1253: {
  4769                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4770  00014C  C0E1  FFD9         	movff	printf@ap,fsr2l
  4771  000150  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4772  000154  CFDE F0E4          	movff	postinc2,printf@val
  4773  000158  CFDD F0E5          	movff	postdec2,printf@val+1
  4774                           
  4775                           ; BSR set to: 0
  4776  00015C  0E02               	movlw	2
  4777  00015E  0100               	movlb	0	; () banked
  4778  000160  27E1               	addwf	printf@ap& (0+255),f,b
  4779  000162  0E00               	movlw	0
  4780  000164  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;doprnt.c: 1261: if((int)val < 0) {
  4784  000166  0100               	movlb	0	; () banked
  4785  000168  AFE5               	btfss	(printf@val+1)& (0+255),7,b
  4786  00016A  D053               	goto	l3823
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;doprnt.c: 1262: flag |= 0x03;
  4790  00016C  0E03               	movlw	3
  4791  00016E  0100               	movlb	0	; () banked
  4792  000170  13E6               	iorwf	printf@flag& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;doprnt.c: 1263: val = -val;
  4796  000172  0100               	movlb	0	; () banked
  4797  000174  6DE4               	negf	printf@val& (0+255),b
  4798  000176  1FE5               	comf	(printf@val+1)& (0+255),f,b
  4799  000178  B0D8               	btfsc	status,0,c
  4800  00017A  2BE5               	incf	(printf@val+1)& (0+255),f,b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 1264: }
  4804                           ;doprnt.c: 1266: }
  4805  00017C  D04A               	goto	l3823
  4806  00017E                     l3789:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1268: else
  4810                           ;doprnt.c: 1273: {
  4811                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4812  00017E  C0E1  FFD9         	movff	printf@ap,fsr2l
  4813  000182  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  4814  000186  CFDE F0E4          	movff	postinc2,printf@val
  4815  00018A  CFDD F0E5          	movff	postdec2,printf@val+1
  4816                           
  4817                           ; BSR set to: 0
  4818  00018E  0E02               	movlw	2
  4819  000190  0100               	movlb	0	; () banked
  4820  000192  27E1               	addwf	printf@ap& (0+255),f,b
  4821  000194  0E00               	movlw	0
  4822  000196  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 1287: }
  4826                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4827  000198  D03C               	goto	l3823
  4828  00019A                     l3793:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;doprnt.c: 1302: case 0xC0:
  4832                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4833  00019A  0E01               	movlw	1
  4834  00019C  0100               	movlb	0	; () banked
  4835  00019E  6FE9               	movwf	printf@c& (0+255),b
  4836  0001A0                     l3795:
  4837                           
  4838                           ; BSR set to: 0
  4839  0001A0  0E05               	movlw	5
  4840  0001A2  0100               	movlb	0	; () banked
  4841  0001A4  19E9               	xorwf	printf@c& (0+255),w,b
  4842  0001A6  B4D8               	btfsc	status,2,c
  4843  0001A8  D040               	goto	l3825
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;doprnt.c: 1306: if(val < dpowers[c])
  4847                           
  4848                           ; BSR set to: 0
  4849                           
  4850                           ; BSR set to: 0
  4851  0001AA  0100               	movlb	0	; () banked
  4852  0001AC  51E9               	movf	printf@c& (0+255),w,b
  4853  0001AE  0D02               	mullw	2
  4854  0001B0  0E20               	movlw	low _dpowers
  4855  0001B2  24F3               	addwf	prodl,w,c
  4856  0001B4  6EF6               	movwf	tblptrl,c
  4857  0001B6  0EFE               	movlw	high _dpowers
  4858  0001B8  20F4               	addwfc	prodh,w,c
  4859  0001BA  6EF7               	movwf	tblptrh,c
  4860  0001BC                     	if	0	;There are less than 3 active tblptr bytes
  4861  0001BC                     	endif
  4862  0001BC  0009               	tblrd		*+
  4863  0001BE  50F5               	movf	tablat,w,c
  4864  0001C0  0100               	movlb	0	; () banked
  4865  0001C2  5DE4               	subwf	printf@val& (0+255),w,b
  4866  0001C4  0009               	tblrd		*+
  4867  0001C6  50F5               	movf	tablat,w,c
  4868  0001C8  0100               	movlb	0	; () banked
  4869  0001CA  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  4870  0001CC  A0D8               	btfss	status,0,c
  4871  0001CE  D02D               	goto	l3825
  4872                           
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;doprnt.c: 1307: break;
  4879  0001D0  0100               	movlb	0	; () banked
  4880  0001D2  2BE9               	incf	printf@c& (0+255),f,b
  4881  0001D4  D7E5               	goto	l3795
  4882  0001D6                     l3807:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4886  0001D6  0E01               	movlw	1
  4887  0001D8  0100               	movlb	0	; () banked
  4888  0001DA  6FE9               	movwf	printf@c& (0+255),b
  4889  0001DC                     l3809:
  4890                           
  4891                           ; BSR set to: 0
  4892  0001DC  0E04               	movlw	4
  4893  0001DE  0100               	movlb	0	; () banked
  4894  0001E0  19E9               	xorwf	printf@c& (0+255),w,b
  4895  0001E2  B4D8               	btfsc	status,2,c
  4896  0001E4  D022               	goto	l3825
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4900                           
  4901                           ; BSR set to: 0
  4902                           
  4903                           ; BSR set to: 0
  4904  0001E6  0100               	movlb	0	; () banked
  4905  0001E8  51E9               	movf	printf@c& (0+255),w,b
  4906  0001EA  0D02               	mullw	2
  4907  0001EC  0E2A               	movlw	low _hexpowers
  4908  0001EE  24F3               	addwf	prodl,w,c
  4909  0001F0  6EF6               	movwf	tblptrl,c
  4910  0001F2  0EFE               	movlw	high _hexpowers
  4911  0001F4  20F4               	addwfc	prodh,w,c
  4912  0001F6  6EF7               	movwf	tblptrh,c
  4913  0001F8                     	if	0	;There are less than 3 active tblptr bytes
  4914  0001F8                     	endif
  4915  0001F8  0009               	tblrd		*+
  4916  0001FA  50F5               	movf	tablat,w,c
  4917  0001FC  0100               	movlb	0	; () banked
  4918  0001FE  5DE4               	subwf	printf@val& (0+255),w,b
  4919  000200  0009               	tblrd		*+
  4920  000202  50F5               	movf	tablat,w,c
  4921  000204  0100               	movlb	0	; () banked
  4922  000206  59E5               	subwfb	(printf@val+1)& (0+255),w,b
  4923  000208  A0D8               	btfss	status,0,c
  4924  00020A  D00F               	goto	l3825
  4925                           
  4926                           ; BSR set to: 0
  4927                           
  4928                           ; BSR set to: 0
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;doprnt.c: 1318: break;
  4932  00020C  0100               	movlb	0	; () banked
  4933  00020E  2BE9               	incf	printf@c& (0+255),f,b
  4934  000210  D7E5               	goto	l3809
  4935  000212                     l3823:
  4936                           
  4937                           ; BSR set to: 0
  4938  000212  0100               	movlb	0	; () banked
  4939  000214  51E6               	movf	printf@flag& (0+255),w,b
  4940  000216  0BC0               	andlw	192
  4941                           
  4942                           ; Switch size 1, requested type "space"
  4943                           ; Number of cases is 3, Range of values is 0 to 192
  4944                           ; switch strategies available:
  4945                           ; Name         Instructions Cycles
  4946                           ; simple_byte           10     6 (average)
  4947                           ;	Chosen strategy is simple_byte
  4948  000218  0A00               	xorlw	0	; case 0
  4949  00021A  B4D8               	btfsc	status,2,c
  4950  00021C  D7BE               	goto	l3793
  4951  00021E  0A80               	xorlw	128	; case 128
  4952  000220  B4D8               	btfsc	status,2,c
  4953  000222  D7D9               	goto	l3807
  4954  000224  0A40               	xorlw	64	; case 192
  4955  000226  B4D8               	btfsc	status,2,c
  4956  000228  D7B8               	goto	l3793
  4957  00022A                     l3825:
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4961  00022A  0100               	movlb	0	; () banked
  4962  00022C  51E7               	movf	printf@width& (0+255),w,b
  4963  00022E  0100               	movlb	0	; () banked
  4964  000230  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  4965  000232  B4D8               	btfsc	status,2,c
  4966  000234  D00B               	goto	l3831
  4967                           
  4968                           ; BSR set to: 0
  4969  000236  C0E6  F0DC         	movff	printf@flag,??_printf
  4970  00023A  0E03               	movlw	3
  4971  00023C  0100               	movlb	0	; () banked
  4972  00023E  17DC               	andwf	??_printf& (0+255),f,b
  4973  000240  B4D8               	btfsc	status,2,c
  4974  000242  D004               	goto	l3831
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;doprnt.c: 1346: width--;
  4978  000244  0100               	movlb	0	; () banked
  4979  000246  07E7               	decf	printf@width& (0+255),f,b
  4980  000248  A0D8               	btfss	status,0,c
  4981  00024A  07E8               	decf	(printf@width+1)& (0+255),f,b
  4982  00024C                     l3831:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;doprnt.c: 1381: if(width > c)
  4986  00024C  0E80               	movlw	128
  4987  00024E  0100               	movlb	0	; () banked
  4988  000250  BFE9               	btfsc	printf@c& (0+255),7,b
  4989  000252  0E7F               	movlw	127
  4990  000254  0100               	movlb	0	; () banked
  4991  000256  6FDC               	movwf	??_printf& (0+255),b
  4992  000258  0100               	movlb	0	; () banked
  4993  00025A  51E7               	movf	printf@width& (0+255),w,b
  4994  00025C  0100               	movlb	0	; () banked
  4995  00025E  5DE9               	subwf	printf@c& (0+255),w,b
  4996  000260  0100               	movlb	0	; () banked
  4997  000262  51E8               	movf	(printf@width+1)& (0+255),w,b
  4998  000264  0A80               	xorlw	128
  4999  000266  0100               	movlb	0	; () banked
  5000  000268  59DC               	subwfb	??_printf& (0+255),w,b
  5001  00026A  B0D8               	btfsc	status,0,c
  5002  00026C  D00B               	goto	l3835
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;doprnt.c: 1382: width -= c;
  5006  00026E  0100               	movlb	0	; () banked
  5007  000270  51E9               	movf	printf@c& (0+255),w,b
  5008  000272  0100               	movlb	0	; () banked
  5009  000274  5FE7               	subwf	printf@width& (0+255),f,b
  5010  000276  0E00               	movlw	0
  5011  000278  0100               	movlb	0	; () banked
  5012  00027A  BFE9               	btfsc	printf@c& (0+255),7,b
  5013  00027C  0EFF               	movlw	255
  5014  00027E  0100               	movlb	0	; () banked
  5015  000280  5BE8               	subwfb	(printf@width+1)& (0+255),f,b
  5016  000282  D005               	goto	l3837
  5017  000284                     l3835:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 1383: else
  5021                           ;doprnt.c: 1384: width = 0;
  5022  000284  0E00               	movlw	0
  5023  000286  0100               	movlb	0	; () banked
  5024  000288  6FE8               	movwf	(printf@width+1)& (0+255),b
  5025  00028A  0E00               	movlw	0
  5026  00028C  6FE7               	movwf	printf@width& (0+255),b
  5027  00028E                     l3837:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;doprnt.c: 1387: if(flag & 0x04) {
  5031  00028E  0100               	movlb	0	; () banked
  5032  000290  A5E6               	btfss	printf@flag& (0+255),2,b
  5033  000292  D018               	goto	l3849
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;doprnt.c: 1392: if(flag & 0x03)
  5037  000294  C0E6  F0DC         	movff	printf@flag,??_printf
  5038  000298  0E03               	movlw	3
  5039  00029A  0100               	movlb	0	; () banked
  5040  00029C  17DC               	andwf	??_printf& (0+255),f,b
  5041  00029E  B4D8               	btfsc	status,2,c
  5042  0002A0  D003               	goto	l3843
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;doprnt.c: 1393: (putch('-') );
  5046  0002A2  0E2D               	movlw	45
  5047  0002A4  EC4B  F017         	call	_putch
  5048  0002A8                     l3843:
  5049                           
  5050                           ;doprnt.c: 1415: if(width)
  5051  0002A8  0100               	movlb	0	; () banked
  5052  0002AA  51E7               	movf	printf@width& (0+255),w,b
  5053  0002AC  0100               	movlb	0	; () banked
  5054  0002AE  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  5055  0002B0  B4D8               	btfsc	status,2,c
  5056  0002B2  D025               	goto	l3859
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;doprnt.c: 1417: (putch('0') );
  5060                           
  5061                           ; BSR set to: 0
  5062                           
  5063                           ;doprnt.c: 1416: do
  5064  0002B4  0E30               	movlw	48
  5065  0002B6  EC4B  F017         	call	_putch
  5066                           
  5067                           ;doprnt.c: 1418: while(--width);
  5068  0002BA  0100               	movlb	0	; () banked
  5069  0002BC  07E7               	decf	printf@width& (0+255),f,b
  5070  0002BE  A0D8               	btfss	status,0,c
  5071  0002C0  07E8               	decf	(printf@width+1)& (0+255),f,b
  5072  0002C2  D7F2               	goto	l3843
  5073  0002C4                     l3849:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;doprnt.c: 1422: {
  5077                           ;doprnt.c: 1424: if(width
  5078                           ;doprnt.c: 1428: )
  5079  0002C4  0100               	movlb	0	; () banked
  5080  0002C6  51E7               	movf	printf@width& (0+255),w,b
  5081  0002C8  0100               	movlb	0	; () banked
  5082  0002CA  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  5083  0002CC  B4D8               	btfsc	status,2,c
  5084  0002CE  D00D               	goto	l3855
  5085  0002D0                     l3851:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;doprnt.c: 1430: (putch(' ') );
  5089  0002D0  0E20               	movlw	32
  5090  0002D2  EC4B  F017         	call	_putch
  5091                           
  5092                           ;doprnt.c: 1431: while(--width);
  5093  0002D6  0100               	movlb	0	; () banked
  5094  0002D8  07E7               	decf	printf@width& (0+255),f,b
  5095  0002DA  A0D8               	btfss	status,0,c
  5096  0002DC  07E8               	decf	(printf@width+1)& (0+255),f,b
  5097  0002DE  0100               	movlb	0	; () banked
  5098  0002E0  51E7               	movf	printf@width& (0+255),w,b
  5099  0002E2  0100               	movlb	0	; () banked
  5100  0002E4  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  5101  0002E6  A4D8               	btfss	status,2,c
  5102  0002E8  D7F3               	goto	l3851
  5103  0002EA                     l3855:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 1438: if(flag & 0x03)
  5107  0002EA  C0E6  F0DC         	movff	printf@flag,??_printf
  5108  0002EE  0E03               	movlw	3
  5109  0002F0  0100               	movlb	0	; () banked
  5110  0002F2  17DC               	andwf	??_printf& (0+255),f,b
  5111  0002F4  B4D8               	btfsc	status,2,c
  5112  0002F6  D003               	goto	l3859
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;doprnt.c: 1439: (putch('-') );
  5116  0002F8  0E2D               	movlw	45
  5117  0002FA  EC4B  F017         	call	_putch
  5118  0002FE                     l3859:
  5119                           
  5120                           ;doprnt.c: 1469: }
  5121                           ;doprnt.c: 1472: prec = c;
  5122  0002FE  C0E9  F0E3         	movff	printf@c,printf@prec
  5123                           
  5124                           ;doprnt.c: 1474: while(prec--) {
  5125  000302  D05D               	goto	l3873
  5126  000304                     l3861:
  5127                           
  5128                           ;doprnt.c: 1486: case 0xC0:
  5129                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5130  000304  0100               	movlb	0	; () banked
  5131  000306  51E3               	movf	printf@prec& (0+255),w,b
  5132  000308  0D02               	mullw	2
  5133  00030A  0E20               	movlw	low _dpowers
  5134  00030C  24F3               	addwf	prodl,w,c
  5135  00030E  6EF6               	movwf	tblptrl,c
  5136  000310  0EFE               	movlw	high _dpowers
  5137  000312  20F4               	addwfc	prodh,w,c
  5138  000314  6EF7               	movwf	tblptrh,c
  5139  000316                     	if	0	;There are less than 3 active tblptr bytes
  5140  000316                     	endif
  5141  000316  0009               	tblrd		*+
  5142  000318  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5143  00031C  000A               	tblrd		*-
  5144  00031E  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5145  000322  C0E4  F0C8         	movff	printf@val,___lwdiv@dividend
  5146  000326  C0E5  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5147  00032A  ECD2  F013         	call	___lwdiv	;wreg free
  5148  00032E  C0C8  F0CF         	movff	?___lwdiv,___lwmod@dividend
  5149  000332  C0C9  F0D0         	movff	?___lwdiv+1,___lwmod@dividend+1
  5150  000336  0E00               	movlw	0
  5151  000338  0100               	movlb	0	; () banked
  5152  00033A  6FD2               	movwf	(___lwmod@divisor+1)& (0+255),b
  5153  00033C  0E0A               	movlw	10
  5154  00033E  6FD1               	movwf	___lwmod@divisor& (0+255),b
  5155  000340  EC7E  F014         	call	___lwmod	;wreg free
  5156  000344  0100               	movlb	0	; () banked
  5157  000346  51CF               	movf	?___lwmod& (0+255),w,b
  5158  000348  0F30               	addlw	48
  5159  00034A  0100               	movlb	0	; () banked
  5160  00034C  6FE9               	movwf	printf@c& (0+255),b
  5161                           
  5162                           ;doprnt.c: 1491: break;
  5163  00034E  D033               	goto	l3871
  5164  000350                     l3863:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 1499: {
  5168                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5169  000350  C0E4  F0C8         	movff	printf@val,___lwdiv@dividend
  5170  000354  C0E5  F0C9         	movff	printf@val+1,___lwdiv@dividend+1
  5171  000358  0100               	movlb	0	; () banked
  5172  00035A  51E3               	movf	printf@prec& (0+255),w,b
  5173  00035C  0D02               	mullw	2
  5174  00035E  0E2A               	movlw	low _hexpowers
  5175  000360  24F3               	addwf	prodl,w,c
  5176  000362  6EF6               	movwf	tblptrl,c
  5177  000364  0EFE               	movlw	high _hexpowers
  5178  000366  20F4               	addwfc	prodh,w,c
  5179  000368  6EF7               	movwf	tblptrh,c
  5180  00036A                     	if	0	;There are less than 3 active tblptr bytes
  5181  00036A                     	endif
  5182  00036A  0009               	tblrd		*+
  5183  00036C  CFF5 F0CA          	movff	tablat,___lwdiv@divisor
  5184  000370  000A               	tblrd		*-
  5185  000372  CFF5 F0CB          	movff	tablat,___lwdiv@divisor+1
  5186  000376  ECD2  F013         	call	___lwdiv	;wreg free
  5187  00037A  0100               	movlb	0	; () banked
  5188  00037C  51C8               	movf	?___lwdiv& (0+255),w,b
  5189  00037E  0B0F               	andlw	15
  5190  000380  0100               	movlb	0	; () banked
  5191  000382  6FE0               	movwf	printf@idx& (0+255),b
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5195  000384  0100               	movlb	0	; () banked
  5196  000386  51E0               	movf	printf@idx& (0+255),w,b
  5197  000388  0D01               	mullw	1
  5198  00038A  0E41               	movlw	low STR_22
  5199  00038C  24F3               	addwf	prodl,w,c
  5200  00038E  6EF6               	movwf	tblptrl,c
  5201  000390  0EFF               	movlw	high STR_22
  5202  000392  20F4               	addwfc	prodh,w,c
  5203  000394  6EF7               	movwf	tblptrh,c
  5204  000396                     	if	0	;There are less than 3 active tblptr bytes
  5205  000396                     	endif
  5206  000396  0008               	tblrd		*
  5207  000398  CFF5 F0E9          	movff	tablat,printf@c
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;doprnt.c: 1523: }
  5211                           
  5212                           ;doprnt.c: 1508: }
  5213                           ;doprnt.c: 1510: break;
  5214  00039C  D00C               	goto	l3871
  5215  00039E                     l3869:
  5216  00039E  0100               	movlb	0	; () banked
  5217  0003A0  51E6               	movf	printf@flag& (0+255),w,b
  5218  0003A2  0BC0               	andlw	192
  5219                           
  5220                           ; Switch size 1, requested type "space"
  5221                           ; Number of cases is 3, Range of values is 0 to 192
  5222                           ; switch strategies available:
  5223                           ; Name         Instructions Cycles
  5224                           ; simple_byte           10     6 (average)
  5225                           ;	Chosen strategy is simple_byte
  5226  0003A4  0A00               	xorlw	0	; case 0
  5227  0003A6  B4D8               	btfsc	status,2,c
  5228  0003A8  D7AD               	goto	l3861
  5229  0003AA  0A80               	xorlw	128	; case 128
  5230  0003AC  B4D8               	btfsc	status,2,c
  5231  0003AE  D7D0               	goto	l3863
  5232  0003B0  0A40               	xorlw	64	; case 192
  5233  0003B2  B4D8               	btfsc	status,2,c
  5234  0003B4  D7A7               	goto	l3861
  5235  0003B6                     l3871:
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;doprnt.c: 1524: (putch(c) );
  5239  0003B6  0100               	movlb	0	; () banked
  5240  0003B8  51E9               	movf	printf@c& (0+255),w,b
  5241  0003BA  EC4B  F017         	call	_putch
  5242  0003BE                     l3873:
  5243  0003BE  0100               	movlb	0	; () banked
  5244  0003C0  07E3               	decf	printf@prec& (0+255),f,b
  5245  0003C2  0100               	movlb	0	; () banked
  5246  0003C4  29E3               	incf	printf@prec& (0+255),w,b
  5247  0003C6  A4D8               	btfss	status,2,c
  5248  0003C8  D7EA               	goto	l3869
  5249  0003CA                     l3875:
  5250  0003CA  C0D4  FFF6         	movff	printf@f,tblptrl
  5251  0003CE  C0D5  FFF7         	movff	printf@f+1,tblptrh
  5252  0003D2  0100               	movlb	0	; () banked
  5253  0003D4  4BD4               	infsnz	printf@f& (0+255),f,b
  5254  0003D6  2BD5               	incf	(printf@f+1)& (0+255),f,b
  5255  0003D8                     	if	0	;tblptru may be non-zero
  5256  0003D8                     	endif
  5257  0003D8                     	if	0	;tblptru may be non-zero
  5258  0003D8                     	endif
  5259  0003D8  0008               	tblrd		*
  5260  0003DA  CFF5 F0E9          	movff	tablat,printf@c
  5261  0003DE  0100               	movlb	0	; () banked
  5262  0003E0  51E9               	movf	printf@c& (0+255),w,b
  5263  0003E2  B4D8               	btfsc	status,2,c
  5264  0003E4  0012               	return	
  5265  0003E6  D61C               	goto	l3745
  5266  0003E8                     __end_of_printf:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           intcon3	equ	0xFF0
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _putch *****************
  5290 ;; Defined at:
  5291 ;;		line 31 in file "lcd.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;  data            1    wreg     unsigned char 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  data            1   18[BANK0 ] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;Total ram usage:        1 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    8
  5312 ;; This function calls:
  5313 ;;		_lcdNibble
  5314 ;; This function is called by:
  5315 ;;		_printf
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text16
  5320  002E96                     __ptext16:
  5321                           	opt stack 0
  5322  002E96                     _putch:
  5323                           	opt stack 20
  5324                           
  5325                           ;incstack = 0
  5326                           ;putch@data stored from wreg
  5327  002E96  0100               	movlb	0	; () banked
  5328  002E98  6FCA               	movwf	putch@data& (0+255),b
  5329                           
  5330                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5331  002E9A  848C               	bsf	3980,2,c	;volatile
  5332                           
  5333                           ;lcd.c: 33: lcdNibble(data);
  5334  002E9C  0100               	movlb	0	; () banked
  5335  002E9E  51CA               	movf	putch@data& (0+255),w,b
  5336  002EA0  ECAF  F014         	call	_lcdNibble
  5337  002EA4  0012               	return		;funcret
  5338  002EA6                     __end_of_putch:
  5339                           	opt stack 0
  5340                           tblptru	equ	0xFF8
  5341                           tblptrh	equ	0xFF7
  5342                           tblptrl	equ	0xFF6
  5343                           tablat	equ	0xFF5
  5344                           prodh	equ	0xFF4
  5345                           prodl	equ	0xFF3
  5346                           intcon	equ	0xFF2
  5347                           intcon2	equ	0xFF1
  5348                           intcon3	equ	0xFF0
  5349                           postinc0	equ	0xFEE
  5350                           wreg	equ	0xFE8
  5351                           indf1	equ	0xFE7
  5352                           fsr1h	equ	0xFE2
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _isdigit *****************
  5362 ;; Defined at:
  5363 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  c               1    wreg     unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  c               1   18[BANK0 ] unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        3 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    7
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_printf
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text17
  5392  002D7E                     __ptext17:
  5393                           	opt stack 0
  5394  002D7E                     _isdigit:
  5395                           	opt stack 21
  5396                           
  5397                           ;incstack = 0
  5398                           ;isdigit@c stored from wreg
  5399  002D7E  0100               	movlb	0	; () banked
  5400  002D80  6FCA               	movwf	isdigit@c& (0+255),b
  5401  002D82  0E00               	movlw	0
  5402  002D84  0100               	movlb	0	; () banked
  5403  002D86  6FC9               	movwf	_isdigit$797& (0+255),b
  5404                           
  5405                           ; BSR set to: 0
  5406  002D88  0E3A               	movlw	58
  5407  002D8A  0100               	movlb	0	; () banked
  5408  002D8C  61CA               	cpfslt	isdigit@c& (0+255),b
  5409  002D8E  D007               	goto	l3553
  5410                           
  5411                           ; BSR set to: 0
  5412  002D90  0E2F               	movlw	47
  5413  002D92  0100               	movlb	0	; () banked
  5414  002D94  65CA               	cpfsgt	isdigit@c& (0+255),b
  5415  002D96  D003               	goto	l3553
  5416                           
  5417                           ; BSR set to: 0
  5418  002D98  0E01               	movlw	1
  5419  002D9A  0100               	movlb	0	; () banked
  5420  002D9C  6FC9               	movwf	_isdigit$797& (0+255),b
  5421  002D9E                     l3553:
  5422                           
  5423                           ; BSR set to: 0
  5424  002D9E  C0C9  F0C8         	movff	_isdigit$797,??_isdigit
  5425  002DA2  0100               	movlb	0	; () banked
  5426  002DA4  31C8               	rrcf	??_isdigit& (0+255),w,b
  5427  002DA6  0012               	return	
  5428  002DA8                     __end_of_isdigit:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           intcon2	equ	0xFF1
  5438                           intcon3	equ	0xFF0
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           indf1	equ	0xFE7
  5442                           fsr1h	equ	0xFE2
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function ___wmul *****************
  5452 ;; Defined at:
  5453 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5456 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  product         2   20[BANK0 ] unsigned int 
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  2   16[BANK0 ] unsigned int 
  5461 ;; Registers used:
  5462 ;;		wreg, status,2, status,0, prodl, prodh
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;Total ram usage:        6 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    7
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_read_colorsensor
  5479 ;;		_printf
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text18
  5484  002D1A                     __ptext18:
  5485                           	opt stack 0
  5486  002D1A                     ___wmul:
  5487                           	opt stack 21
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;incstack = 0
  5491  002D1A  0100               	movlb	0	; () banked
  5492  002D1C  51C8               	movf	___wmul@multiplier& (0+255),w,b
  5493  002D1E  0100               	movlb	0	; () banked
  5494  002D20  03CA               	mulwf	___wmul@multiplicand& (0+255),b
  5495  002D22  CFF3 F0CC          	movff	prodl,___wmul@product
  5496  002D26  CFF4 F0CD          	movff	prodh,___wmul@product+1
  5497  002D2A  0100               	movlb	0	; () banked
  5498  002D2C  51C8               	movf	___wmul@multiplier& (0+255),w,b
  5499  002D2E  0100               	movlb	0	; () banked
  5500  002D30  03CB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5501  002D32  50F3               	movf	prodl,w,c
  5502  002D34  0100               	movlb	0	; () banked
  5503  002D36  27CD               	addwf	(___wmul@product+1)& (0+255),f,b
  5504  002D38  0100               	movlb	0	; () banked
  5505  002D3A  51C9               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5506  002D3C  0100               	movlb	0	; () banked
  5507  002D3E  03CA               	mulwf	___wmul@multiplicand& (0+255),b
  5508  002D40  50F3               	movf	prodl,w,c
  5509  002D42  0100               	movlb	0	; () banked
  5510  002D44  27CD               	addwf	(___wmul@product+1)& (0+255),f,b
  5511                           
  5512                           ; BSR set to: 0
  5513  002D46  C0CC  F0C8         	movff	___wmul@product,?___wmul
  5514  002D4A  C0CD  F0C9         	movff	___wmul@product+1,?___wmul+1
  5515  002D4E  0012               	return	
  5516  002D50                     __end_of___wmul:
  5517                           	opt stack 0
  5518                           tblptru	equ	0xFF8
  5519                           tblptrh	equ	0xFF7
  5520                           tblptrl	equ	0xFF6
  5521                           tablat	equ	0xFF5
  5522                           prodh	equ	0xFF4
  5523                           prodl	equ	0xFF3
  5524                           intcon	equ	0xFF2
  5525                           intcon2	equ	0xFF1
  5526                           intcon3	equ	0xFF0
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           indf2	equ	0xFDF
  5533                           postinc2	equ	0xFDE
  5534                           postdec2	equ	0xFDD
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function ___lwmod *****************
  5540 ;; Defined at:
  5541 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  dividend        2   23[BANK0 ] unsigned int 
  5544 ;;  divisor         2   25[BANK0 ] unsigned int 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  counter         1   27[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;                  2   23[BANK0 ] unsigned int 
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;Total ram usage:        5 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    7
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_printf
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           	psect	text19
  5571  0028FC                     __ptext19:
  5572                           	opt stack 0
  5573  0028FC                     ___lwmod:
  5574                           	opt stack 21
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;incstack = 0
  5578  0028FC  0100               	movlb	0	; () banked
  5579  0028FE  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5580  002900  0100               	movlb	0	; () banked
  5581  002902  11D2               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5582  002904  B4D8               	btfsc	status,2,c
  5583  002906  D026               	goto	l879
  5584                           
  5585                           ; BSR set to: 0
  5586  002908  0E01               	movlw	1
  5587  00290A  0100               	movlb	0	; () banked
  5588  00290C  6FD3               	movwf	___lwmod@counter& (0+255),b
  5589  00290E  D006               	goto	l3613
  5590  002910                     l3611:
  5591                           
  5592                           ; BSR set to: 0
  5593  002910  0100               	movlb	0	; () banked
  5594  002912  90D8               	bcf	status,0,c
  5595  002914  37D1               	rlcf	___lwmod@divisor& (0+255),f,b
  5596  002916  37D2               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5597  002918  0100               	movlb	0	; () banked
  5598  00291A  2BD3               	incf	___lwmod@counter& (0+255),f,b
  5599  00291C                     l3613:
  5600                           
  5601                           ; BSR set to: 0
  5602  00291C  0100               	movlb	0	; () banked
  5603  00291E  AFD2               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5604  002920  D7F7               	goto	l3611
  5605  002922                     l3615:
  5606                           
  5607                           ; BSR set to: 0
  5608  002922  0100               	movlb	0	; () banked
  5609  002924  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5610  002926  0100               	movlb	0	; () banked
  5611  002928  5DCF               	subwf	___lwmod@dividend& (0+255),w,b
  5612  00292A  0100               	movlb	0	; () banked
  5613  00292C  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5614  00292E  0100               	movlb	0	; () banked
  5615  002930  59D0               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5616  002932  A0D8               	btfss	status,0,c
  5617  002934  D008               	goto	l3619
  5618                           
  5619                           ; BSR set to: 0
  5620  002936  0100               	movlb	0	; () banked
  5621  002938  51D1               	movf	___lwmod@divisor& (0+255),w,b
  5622  00293A  0100               	movlb	0	; () banked
  5623  00293C  5FCF               	subwf	___lwmod@dividend& (0+255),f,b
  5624  00293E  0100               	movlb	0	; () banked
  5625  002940  51D2               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5626  002942  0100               	movlb	0	; () banked
  5627  002944  5BD0               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5628  002946                     l3619:
  5629                           
  5630                           ; BSR set to: 0
  5631  002946  0100               	movlb	0	; () banked
  5632  002948  90D8               	bcf	status,0,c
  5633  00294A  33D2               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5634  00294C  33D1               	rrcf	___lwmod@divisor& (0+255),f,b
  5635                           
  5636                           ; BSR set to: 0
  5637  00294E  0100               	movlb	0	; () banked
  5638  002950  2FD3               	decfsz	___lwmod@counter& (0+255),f,b
  5639  002952  D7E7               	goto	l3615
  5640  002954                     l879:
  5641                           
  5642                           ; BSR set to: 0
  5643  002954  C0CF  F0CF         	movff	___lwmod@dividend,?___lwmod
  5644  002958  C0D0  F0D0         	movff	___lwmod@dividend+1,?___lwmod+1
  5645                           
  5646                           ; BSR set to: 0
  5647  00295C  0012               	return		;funcret
  5648  00295E                     __end_of___lwmod:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           intcon	equ	0xFF2
  5657                           intcon2	equ	0xFF1
  5658                           intcon3	equ	0xFF0
  5659                           postinc0	equ	0xFEE
  5660                           wreg	equ	0xFE8
  5661                           indf1	equ	0xFE7
  5662                           fsr1h	equ	0xFE2
  5663                           fsr1l	equ	0xFE1
  5664                           indf2	equ	0xFDF
  5665                           postinc2	equ	0xFDE
  5666                           postdec2	equ	0xFDD
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           
  5671 ;; *************** function ___lwdiv *****************
  5672 ;; Defined at:
  5673 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  dividend        2   16[BANK0 ] unsigned int 
  5676 ;;  divisor         2   18[BANK0 ] unsigned int 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  quotient        2   20[BANK0 ] unsigned int 
  5679 ;;  counter         1   22[BANK0 ] unsigned char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  2   16[BANK0 ] unsigned int 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        7 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    7
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_printf
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text20
  5704  0027A4                     __ptext20:
  5705                           	opt stack 0
  5706  0027A4                     ___lwdiv:
  5707                           	opt stack 21
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;incstack = 0
  5711  0027A4  0E00               	movlw	0
  5712  0027A6  0100               	movlb	0	; () banked
  5713  0027A8  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5714  0027AA  0E00               	movlw	0
  5715  0027AC  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718  0027AE  0100               	movlb	0	; () banked
  5719  0027B0  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5720  0027B2  0100               	movlb	0	; () banked
  5721  0027B4  11CB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5722  0027B6  B4D8               	btfsc	status,2,c
  5723  0027B8  D02C               	goto	l869
  5724                           
  5725                           ; BSR set to: 0
  5726  0027BA  0E01               	movlw	1
  5727  0027BC  0100               	movlb	0	; () banked
  5728  0027BE  6FCE               	movwf	___lwdiv@counter& (0+255),b
  5729  0027C0  D006               	goto	l3593
  5730  0027C2                     l3591:
  5731                           
  5732                           ; BSR set to: 0
  5733  0027C2  0100               	movlb	0	; () banked
  5734  0027C4  90D8               	bcf	status,0,c
  5735  0027C6  37CA               	rlcf	___lwdiv@divisor& (0+255),f,b
  5736  0027C8  37CB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5737  0027CA  0100               	movlb	0	; () banked
  5738  0027CC  2BCE               	incf	___lwdiv@counter& (0+255),f,b
  5739  0027CE                     l3593:
  5740                           
  5741                           ; BSR set to: 0
  5742  0027CE  0100               	movlb	0	; () banked
  5743  0027D0  AFCB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5744  0027D2  D7F7               	goto	l3591
  5745  0027D4                     l3595:
  5746                           
  5747                           ; BSR set to: 0
  5748  0027D4  0100               	movlb	0	; () banked
  5749  0027D6  90D8               	bcf	status,0,c
  5750  0027D8  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  5751  0027DA  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5752                           
  5753                           ; BSR set to: 0
  5754  0027DC  0100               	movlb	0	; () banked
  5755  0027DE  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5756  0027E0  0100               	movlb	0	; () banked
  5757  0027E2  5DC8               	subwf	___lwdiv@dividend& (0+255),w,b
  5758  0027E4  0100               	movlb	0	; () banked
  5759  0027E6  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5760  0027E8  0100               	movlb	0	; () banked
  5761  0027EA  59C9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5762  0027EC  A0D8               	btfss	status,0,c
  5763  0027EE  D00A               	goto	l3603
  5764                           
  5765                           ; BSR set to: 0
  5766  0027F0  0100               	movlb	0	; () banked
  5767  0027F2  51CA               	movf	___lwdiv@divisor& (0+255),w,b
  5768  0027F4  0100               	movlb	0	; () banked
  5769  0027F6  5FC8               	subwf	___lwdiv@dividend& (0+255),f,b
  5770  0027F8  0100               	movlb	0	; () banked
  5771  0027FA  51CB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5772  0027FC  0100               	movlb	0	; () banked
  5773  0027FE  5BC9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5774                           
  5775                           ; BSR set to: 0
  5776  002800  0100               	movlb	0	; () banked
  5777  002802  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  5778  002804                     l3603:
  5779                           
  5780                           ; BSR set to: 0
  5781  002804  0100               	movlb	0	; () banked
  5782  002806  90D8               	bcf	status,0,c
  5783  002808  33CB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5784  00280A  33CA               	rrcf	___lwdiv@divisor& (0+255),f,b
  5785                           
  5786                           ; BSR set to: 0
  5787  00280C  0100               	movlb	0	; () banked
  5788  00280E  2FCE               	decfsz	___lwdiv@counter& (0+255),f,b
  5789  002810  D7E1               	goto	l3595
  5790  002812                     l869:
  5791                           
  5792                           ; BSR set to: 0
  5793  002812  C0CC  F0C8         	movff	___lwdiv@quotient,?___lwdiv
  5794  002816  C0CD  F0C9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5795                           
  5796                           ; BSR set to: 0
  5797  00281A  0012               	return		;funcret
  5798  00281C                     __end_of___lwdiv:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           intcon	equ	0xFF2
  5807                           intcon2	equ	0xFF1
  5808                           intcon3	equ	0xFF0
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           indf1	equ	0xFE7
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _lcdInst *****************
  5822 ;; Defined at:
  5823 ;;		line 26 in file "lcd.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  data            1    wreg     unsigned char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  data            1   18[BANK0 ] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        1 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    8
  5844 ;; This function calls:
  5845 ;;		_lcdNibble
  5846 ;; This function is called by:
  5847 ;;		_initLCD
  5848 ;;		_standby
  5849 ;;		_date_time
  5850 ;;		_bottle_count
  5851 ;;		_bottle_time
  5852 ;;		_operation
  5853 ;;		_operationend
  5854 ;;		_emergencystop
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text21
  5859  002EA6                     __ptext21:
  5860                           	opt stack 0
  5861  002EA6                     _lcdInst:
  5862                           	opt stack 21
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;incstack = 0
  5866                           ;lcdInst@data stored from wreg
  5867  002EA6  0100               	movlb	0	; () banked
  5868  002EA8  6FCA               	movwf	lcdInst@data& (0+255),b
  5869                           
  5870                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5871  002EAA  948C               	bcf	3980,2,c	;volatile
  5872                           
  5873                           ;lcd.c: 28: lcdNibble(data);
  5874  002EAC  0100               	movlb	0	; () banked
  5875  002EAE  51CA               	movf	lcdInst@data& (0+255),w,b
  5876  002EB0  ECAF  F014         	call	_lcdNibble
  5877  002EB4  0012               	return		;funcret
  5878  002EB6                     __end_of_lcdInst:
  5879                           	opt stack 0
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           intcon2	equ	0xFF1
  5888                           intcon3	equ	0xFF0
  5889                           postinc0	equ	0xFEE
  5890                           wreg	equ	0xFE8
  5891                           indf1	equ	0xFE7
  5892                           fsr1h	equ	0xFE2
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901 ;; *************** function _lcdNibble *****************
  5902 ;; Defined at:
  5903 ;;		line 36 in file "lcd.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  data            1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  data            1   17[BANK0 ] unsigned char 
  5908 ;;  temp            1   16[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;Total ram usage:        2 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    7
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_lcdInst
  5929 ;;		_putch
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text22
  5934  00295E                     __ptext22:
  5935                           	opt stack 0
  5936  00295E                     _lcdNibble:
  5937                           	opt stack 20
  5938                           
  5939                           ;incstack = 0
  5940                           ;lcdNibble@data stored from wreg
  5941  00295E  0100               	movlb	0	; () banked
  5942  002960  6FC9               	movwf	lcdNibble@data& (0+255),b
  5943                           
  5944                           ;lcd.c: 38: char temp = data & 0xF0;
  5945  002962  0100               	movlb	0	; () banked
  5946  002964  51C9               	movf	lcdNibble@data& (0+255),w,b
  5947  002966  0BF0               	andlw	240
  5948  002968  0100               	movlb	0	; () banked
  5949  00296A  6FC8               	movwf	lcdNibble@temp& (0+255),b
  5950                           
  5951                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5952  00296C  508C               	movf	3980,w,c	;volatile
  5953  00296E  0B0F               	andlw	15
  5954  002970  6E8C               	movwf	3980,c	;volatile
  5955                           
  5956                           ;lcd.c: 40: LATD = temp | LATD;
  5957  002972  0100               	movlb	0	; () banked
  5958  002974  51C8               	movf	lcdNibble@temp& (0+255),w,b
  5959  002976  108C               	iorwf	3980,w,c	;volatile
  5960  002978  6E8C               	movwf	3980,c	;volatile
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5964  00297A  968C               	bcf	3980,3,c	;volatile
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5968  00297C  0E19               	movlw	25
  5969  00297E                     u4657:
  5970  00297E  2EE8               	decfsz	wreg,f,c
  5971  002980  D7FE               	bra	u4657
  5972                           
  5973                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5974  002982  868C               	bsf	3980,3,c	;volatile
  5975                           
  5976                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5977  002984  0E19               	movlw	25
  5978  002986                     u4667:
  5979  002986  2EE8               	decfsz	wreg,f,c
  5980  002988  D7FE               	bra	u4667
  5981                           
  5982                           ;lcd.c: 47: data = data << 4;
  5983  00298A  0100               	movlb	0	; () banked
  5984  00298C  39C9               	swapf	lcdNibble@data& (0+255),w,b
  5985  00298E  0BF0               	andlw	240
  5986  002990  0100               	movlb	0	; () banked
  5987  002992  6FC9               	movwf	lcdNibble@data& (0+255),b
  5988                           
  5989                           ;lcd.c: 49: temp = data & 0xF0;
  5990  002994  0100               	movlb	0	; () banked
  5991  002996  51C9               	movf	lcdNibble@data& (0+255),w,b
  5992  002998  0BF0               	andlw	240
  5993  00299A  0100               	movlb	0	; () banked
  5994  00299C  6FC8               	movwf	lcdNibble@temp& (0+255),b
  5995                           
  5996                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5997  00299E  508C               	movf	3980,w,c	;volatile
  5998  0029A0  0B0F               	andlw	15
  5999  0029A2  6E8C               	movwf	3980,c	;volatile
  6000                           
  6001                           ;lcd.c: 51: LATD = temp | LATD;
  6002  0029A4  0100               	movlb	0	; () banked
  6003  0029A6  51C8               	movf	lcdNibble@temp& (0+255),w,b
  6004  0029A8  108C               	iorwf	3980,w,c	;volatile
  6005  0029AA  6E8C               	movwf	3980,c	;volatile
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6009  0029AC  968C               	bcf	3980,3,c	;volatile
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6013  0029AE  0E19               	movlw	25
  6014  0029B0                     u4677:
  6015  0029B0  2EE8               	decfsz	wreg,f,c
  6016  0029B2  D7FE               	bra	u4677
  6017                           
  6018                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6019  0029B4  868C               	bsf	3980,3,c	;volatile
  6020                           
  6021                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6022  0029B6  0E19               	movlw	25
  6023  0029B8                     u4687:
  6024  0029B8  2EE8               	decfsz	wreg,f,c
  6025  0029BA  D7FE               	bra	u4687
  6026  0029BC  0012               	return		;funcret
  6027  0029BE                     __end_of_lcdNibble:
  6028                           	opt stack 0
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           intcon3	equ	0xFF0
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           indf1	equ	0xFE7
  6041                           fsr1h	equ	0xFE2
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function ___awmod *****************
  6051 ;; Defined at:
  6052 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  dividend        2   16[BANK0 ] int 
  6055 ;;  divisor         2   18[BANK0 ] int 
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;  sign            1   21[BANK0 ] unsigned char 
  6058 ;;  counter         1   20[BANK0 ] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  2   16[BANK0 ] int 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;Total ram usage:        6 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    7
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_bottle_count
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text23
  6083  0024CE                     __ptext23:
  6084                           	opt stack 0
  6085  0024CE                     ___awmod:
  6086                           	opt stack 22
  6087                           
  6088                           ;incstack = 0
  6089  0024CE  0E00               	movlw	0
  6090  0024D0  0100               	movlb	0	; () banked
  6091  0024D2  6FCD               	movwf	___awmod@sign& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094  0024D4  0100               	movlb	0	; () banked
  6095  0024D6  AFC9               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6096  0024D8  D008               	goto	l4015
  6097                           
  6098                           ; BSR set to: 0
  6099  0024DA  0100               	movlb	0	; () banked
  6100  0024DC  6DC8               	negf	___awmod@dividend& (0+255),b
  6101  0024DE  1FC9               	comf	(___awmod@dividend+1)& (0+255),f,b
  6102  0024E0  B0D8               	btfsc	status,0,c
  6103  0024E2  2BC9               	incf	(___awmod@dividend+1)& (0+255),f,b
  6104                           
  6105                           ; BSR set to: 0
  6106  0024E4  0E01               	movlw	1
  6107  0024E6  0100               	movlb	0	; () banked
  6108  0024E8  6FCD               	movwf	___awmod@sign& (0+255),b
  6109  0024EA                     l4015:
  6110                           
  6111                           ; BSR set to: 0
  6112  0024EA  0100               	movlb	0	; () banked
  6113  0024EC  AFCB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6114  0024EE  D005               	goto	l4019
  6115                           
  6116                           ; BSR set to: 0
  6117  0024F0  0100               	movlb	0	; () banked
  6118  0024F2  6DCA               	negf	___awmod@divisor& (0+255),b
  6119  0024F4  1FCB               	comf	(___awmod@divisor+1)& (0+255),f,b
  6120  0024F6  B0D8               	btfsc	status,0,c
  6121  0024F8  2BCB               	incf	(___awmod@divisor+1)& (0+255),f,b
  6122  0024FA                     l4019:
  6123                           
  6124                           ; BSR set to: 0
  6125  0024FA  0100               	movlb	0	; () banked
  6126  0024FC  51CA               	movf	___awmod@divisor& (0+255),w,b
  6127  0024FE  0100               	movlb	0	; () banked
  6128  002500  11CB               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6129  002502  B4D8               	btfsc	status,2,c
  6130  002504  D026               	goto	l4035
  6131                           
  6132                           ; BSR set to: 0
  6133  002506  0E01               	movlw	1
  6134  002508  0100               	movlb	0	; () banked
  6135  00250A  6FCC               	movwf	___awmod@counter& (0+255),b
  6136  00250C  D006               	goto	l4025
  6137  00250E                     l4023:
  6138                           
  6139                           ; BSR set to: 0
  6140  00250E  0100               	movlb	0	; () banked
  6141  002510  90D8               	bcf	status,0,c
  6142  002512  37CA               	rlcf	___awmod@divisor& (0+255),f,b
  6143  002514  37CB               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6144  002516  0100               	movlb	0	; () banked
  6145  002518  2BCC               	incf	___awmod@counter& (0+255),f,b
  6146  00251A                     l4025:
  6147                           
  6148                           ; BSR set to: 0
  6149  00251A  0100               	movlb	0	; () banked
  6150  00251C  AFCB               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6151  00251E  D7F7               	goto	l4023
  6152  002520                     l4027:
  6153                           
  6154                           ; BSR set to: 0
  6155  002520  0100               	movlb	0	; () banked
  6156  002522  51CA               	movf	___awmod@divisor& (0+255),w,b
  6157  002524  0100               	movlb	0	; () banked
  6158  002526  5DC8               	subwf	___awmod@dividend& (0+255),w,b
  6159  002528  0100               	movlb	0	; () banked
  6160  00252A  51CB               	movf	(___awmod@divisor+1)& (0+255),w,b
  6161  00252C  0100               	movlb	0	; () banked
  6162  00252E  59C9               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6163  002530  A0D8               	btfss	status,0,c
  6164  002532  D008               	goto	l4031
  6165                           
  6166                           ; BSR set to: 0
  6167  002534  0100               	movlb	0	; () banked
  6168  002536  51CA               	movf	___awmod@divisor& (0+255),w,b
  6169  002538  0100               	movlb	0	; () banked
  6170  00253A  5FC8               	subwf	___awmod@dividend& (0+255),f,b
  6171  00253C  0100               	movlb	0	; () banked
  6172  00253E  51CB               	movf	(___awmod@divisor+1)& (0+255),w,b
  6173  002540  0100               	movlb	0	; () banked
  6174  002542  5BC9               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6175  002544                     l4031:
  6176                           
  6177                           ; BSR set to: 0
  6178  002544  0100               	movlb	0	; () banked
  6179  002546  90D8               	bcf	status,0,c
  6180  002548  33CB               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6181  00254A  33CA               	rrcf	___awmod@divisor& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 0
  6184  00254C  0100               	movlb	0	; () banked
  6185  00254E  2FCC               	decfsz	___awmod@counter& (0+255),f,b
  6186  002550  D7E7               	goto	l4027
  6187  002552                     l4035:
  6188                           
  6189                           ; BSR set to: 0
  6190  002552  0100               	movlb	0	; () banked
  6191  002554  51CD               	movf	___awmod@sign& (0+255),w,b
  6192  002556  0100               	movlb	0	; () banked
  6193  002558  B4D8               	btfsc	status,2,c
  6194  00255A  D005               	goto	l4039
  6195                           
  6196                           ; BSR set to: 0
  6197  00255C  0100               	movlb	0	; () banked
  6198  00255E  6DC8               	negf	___awmod@dividend& (0+255),b
  6199  002560  1FC9               	comf	(___awmod@dividend+1)& (0+255),f,b
  6200  002562  B0D8               	btfsc	status,0,c
  6201  002564  2BC9               	incf	(___awmod@dividend+1)& (0+255),f,b
  6202  002566                     l4039:
  6203                           
  6204                           ; BSR set to: 0
  6205  002566  C0C8  F0C8         	movff	___awmod@dividend,?___awmod
  6206  00256A  C0C9  F0C9         	movff	___awmod@dividend+1,?___awmod+1
  6207  00256E  0012               	return	
  6208  002570                     __end_of___awmod:
  6209                           	opt stack 0
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           intcon	equ	0xFF2
  6217                           intcon2	equ	0xFF1
  6218                           intcon3	equ	0xFF0
  6219                           postinc0	equ	0xFEE
  6220                           wreg	equ	0xFE8
  6221                           indf1	equ	0xFE7
  6222                           fsr1h	equ	0xFE2
  6223                           fsr1l	equ	0xFE1
  6224                           indf2	equ	0xFDF
  6225                           postinc2	equ	0xFDE
  6226                           postdec2	equ	0xFDD
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _I2C_Master_Init *****************
  6232 ;; Defined at:
  6233 ;;		line 14 in file "I2C.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  c               4   29[BANK0 ] const unsigned long 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;		None
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, status,2, status,0, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6247 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;Total ram usage:        8 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    8
  6254 ;; This function calls:
  6255 ;;		___lldiv
  6256 ;; This function is called by:
  6257 ;;		_main
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text24
  6262  0029BE                     __ptext24:
  6263                           	opt stack 0
  6264  0029BE                     _I2C_Master_Init:
  6265                           	opt stack 22
  6266                           
  6267                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;incstack = 0
  6271  0029BE  0E00               	movlw	0
  6272  0029C0  6EC7               	movwf	4039,c	;volatile
  6273                           
  6274                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  6275  0029C2  0E28               	movlw	40
  6276  0029C4  6EC6               	movwf	4038,c	;volatile
  6277                           
  6278                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  6279  0029C6  0E00               	movlw	0
  6280  0029C8  6EC5               	movwf	4037,c	;volatile
  6281                           
  6282                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  6283  0029CA  0E80               	movlw	128
  6284  0029CC  0100               	movlb	0	; () banked
  6285  0029CE  6FC8               	movwf	___lldiv@dividend& (0+255),b
  6286  0029D0  0E96               	movlw	150
  6287  0029D2  6FC9               	movwf	(___lldiv@dividend+1)& (0+255),b
  6288  0029D4  0E98               	movlw	152
  6289  0029D6  6FCA               	movwf	(___lldiv@dividend+2)& (0+255),b
  6290  0029D8  0E00               	movlw	0
  6291  0029DA  6FCB               	movwf	(___lldiv@dividend+3)& (0+255),b
  6292  0029DC  C0D5  F0D9         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6293  0029E0  C0D6  F0DA         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6294  0029E4  C0D7  F0DB         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6295  0029E8  C0D8  F0DC         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6296  0029EC  0E02               	movlw	2
  6297  0029EE                     u4025:
  6298  0029EE  90D8               	bcf	status,0,c
  6299  0029F0  0100               	movlb	0	; () banked
  6300  0029F2  37D9               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6301  0029F4  37DA               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6302  0029F6  37DB               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6303  0029F8  37DC               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6304  0029FA  2EE8               	decfsz	wreg,f,c
  6305  0029FC  D7F8               	goto	u4025
  6306  0029FE  C0D9  F0CC         	movff	??_I2C_Master_Init,___lldiv@divisor
  6307  002A02  C0DA  F0CD         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6308  002A06  C0DB  F0CE         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6309  002A0A  C0DC  F0CF         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6310  002A0E  ECB2  F011         	call	___lldiv	;wreg free
  6311  002A12  0100               	movlb	0	; () banked
  6312  002A14  05C8               	decf	?___lldiv& (0+255),w,b
  6313  002A16  6EC8               	movwf	4040,c	;volatile
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;I2C.c: 21: TRISC3 = 1;
  6317  002A18  8694               	bsf	3988,3,c	;volatile
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;I2C.c: 22: TRISC4 = 1;
  6321  002A1A  8894               	bsf	3988,4,c	;volatile
  6322                           
  6323                           ; BSR set to: 0
  6324  002A1C  0012               	return		;funcret
  6325  002A1E                     __end_of_I2C_Master_Init:
  6326                           	opt stack 0
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           intcon2	equ	0xFF1
  6335                           intcon3	equ	0xFF0
  6336                           postinc0	equ	0xFEE
  6337                           wreg	equ	0xFE8
  6338                           indf1	equ	0xFE7
  6339                           fsr1h	equ	0xFE2
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function ___lldiv *****************
  6349 ;; Defined at:
  6350 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  dividend        4   16[BANK0 ] unsigned long 
  6353 ;;  divisor         4   20[BANK0 ] unsigned long 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  quotient        4   24[BANK0 ] unsigned long 
  6356 ;;  counter         1   28[BANK0 ] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  4   16[BANK0 ] unsigned long 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:       13 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    7
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_I2C_Master_Init
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text25
  6381  002364                     __ptext25:
  6382                           	opt stack 0
  6383  002364                     ___lldiv:
  6384                           	opt stack 22
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;incstack = 0
  6388  002364  0E00               	movlw	0
  6389  002366  0100               	movlb	0	; () banked
  6390  002368  6FD0               	movwf	___lldiv@quotient& (0+255),b
  6391  00236A  0E00               	movlw	0
  6392  00236C  6FD1               	movwf	(___lldiv@quotient+1)& (0+255),b
  6393  00236E  0E00               	movlw	0
  6394  002370  6FD2               	movwf	(___lldiv@quotient+2)& (0+255),b
  6395  002372  0E00               	movlw	0
  6396  002374  6FD3               	movwf	(___lldiv@quotient+3)& (0+255),b
  6397                           
  6398                           ; BSR set to: 0
  6399  002376  0100               	movlb	0	; () banked
  6400  002378  51CC               	movf	___lldiv@divisor& (0+255),w,b
  6401  00237A  0100               	movlb	0	; () banked
  6402  00237C  11CD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6403  00237E  0100               	movlb	0	; () banked
  6404  002380  11CE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6405  002382  0100               	movlb	0	; () banked
  6406  002384  11CF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6407  002386  B4D8               	btfsc	status,2,c
  6408  002388  D042               	goto	l816
  6409                           
  6410                           ; BSR set to: 0
  6411  00238A  0E01               	movlw	1
  6412  00238C  0100               	movlb	0	; () banked
  6413  00238E  6FD4               	movwf	___lldiv@counter& (0+255),b
  6414  002390  D008               	goto	l4069
  6415  002392                     l4067:
  6416                           
  6417                           ; BSR set to: 0
  6418  002392  0100               	movlb	0	; () banked
  6419  002394  90D8               	bcf	status,0,c
  6420  002396  37CC               	rlcf	___lldiv@divisor& (0+255),f,b
  6421  002398  37CD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6422  00239A  37CE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6423  00239C  37CF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6424  00239E  0100               	movlb	0	; () banked
  6425  0023A0  2BD4               	incf	___lldiv@counter& (0+255),f,b
  6426  0023A2                     l4069:
  6427                           
  6428                           ; BSR set to: 0
  6429  0023A2  0100               	movlb	0	; () banked
  6430  0023A4  AFCF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6431  0023A6  D7F5               	goto	l4067
  6432  0023A8                     l4071:
  6433                           
  6434                           ; BSR set to: 0
  6435  0023A8  0100               	movlb	0	; () banked
  6436  0023AA  90D8               	bcf	status,0,c
  6437  0023AC  37D0               	rlcf	___lldiv@quotient& (0+255),f,b
  6438  0023AE  37D1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6439  0023B0  37D2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6440  0023B2  37D3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6441                           
  6442                           ; BSR set to: 0
  6443  0023B4  0100               	movlb	0	; () banked
  6444  0023B6  51CC               	movf	___lldiv@divisor& (0+255),w,b
  6445  0023B8  0100               	movlb	0	; () banked
  6446  0023BA  5DC8               	subwf	___lldiv@dividend& (0+255),w,b
  6447  0023BC  0100               	movlb	0	; () banked
  6448  0023BE  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6449  0023C0  0100               	movlb	0	; () banked
  6450  0023C2  59C9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6451  0023C4  0100               	movlb	0	; () banked
  6452  0023C6  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6453  0023C8  0100               	movlb	0	; () banked
  6454  0023CA  59CA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6455  0023CC  0100               	movlb	0	; () banked
  6456  0023CE  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6457  0023D0  0100               	movlb	0	; () banked
  6458  0023D2  59CB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6459  0023D4  A0D8               	btfss	status,0,c
  6460  0023D6  D012               	goto	l4079
  6461                           
  6462                           ; BSR set to: 0
  6463  0023D8  0100               	movlb	0	; () banked
  6464  0023DA  51CC               	movf	___lldiv@divisor& (0+255),w,b
  6465  0023DC  0100               	movlb	0	; () banked
  6466  0023DE  5FC8               	subwf	___lldiv@dividend& (0+255),f,b
  6467  0023E0  0100               	movlb	0	; () banked
  6468  0023E2  51CD               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6469  0023E4  0100               	movlb	0	; () banked
  6470  0023E6  5BC9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6471  0023E8  0100               	movlb	0	; () banked
  6472  0023EA  51CE               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6473  0023EC  0100               	movlb	0	; () banked
  6474  0023EE  5BCA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6475  0023F0  0100               	movlb	0	; () banked
  6476  0023F2  51CF               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6477  0023F4  0100               	movlb	0	; () banked
  6478  0023F6  5BCB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6479                           
  6480                           ; BSR set to: 0
  6481  0023F8  0100               	movlb	0	; () banked
  6482  0023FA  81D0               	bsf	___lldiv@quotient& (0+255),0,b
  6483  0023FC                     l4079:
  6484                           
  6485                           ; BSR set to: 0
  6486  0023FC  0100               	movlb	0	; () banked
  6487  0023FE  90D8               	bcf	status,0,c
  6488  002400  33CF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6489  002402  33CE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6490  002404  33CD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6491  002406  33CC               	rrcf	___lldiv@divisor& (0+255),f,b
  6492                           
  6493                           ; BSR set to: 0
  6494  002408  0100               	movlb	0	; () banked
  6495  00240A  2FD4               	decfsz	___lldiv@counter& (0+255),f,b
  6496  00240C  D7CD               	goto	l4071
  6497  00240E                     l816:
  6498                           
  6499                           ; BSR set to: 0
  6500  00240E  C0D0  F0C8         	movff	___lldiv@quotient,?___lldiv
  6501  002412  C0D1  F0C9         	movff	___lldiv@quotient+1,?___lldiv+1
  6502  002416  C0D2  F0CA         	movff	___lldiv@quotient+2,?___lldiv+2
  6503  00241A  C0D3  F0CB         	movff	___lldiv@quotient+3,?___lldiv+3
  6504                           
  6505                           ; BSR set to: 0
  6506  00241E  0012               	return		;funcret
  6507  002420                     __end_of___lldiv:
  6508                           	opt stack 0
  6509                           tblptru	equ	0xFF8
  6510                           tblptrh	equ	0xFF7
  6511                           tblptrl	equ	0xFF6
  6512                           tablat	equ	0xFF5
  6513                           prodh	equ	0xFF4
  6514                           prodl	equ	0xFF3
  6515                           intcon	equ	0xFF2
  6516                           intcon2	equ	0xFF1
  6517                           intcon3	equ	0xFF0
  6518                           postinc0	equ	0xFEE
  6519                           wreg	equ	0xFE8
  6520                           indf1	equ	0xFE7
  6521                           fsr1h	equ	0xFE2
  6522                           fsr1l	equ	0xFE1
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _I2C_ColorSens_Init *****************
  6531 ;; Defined at:
  6532 ;;		line 54 in file "I2C.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      void 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2, status,0, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;Total ram usage:        1 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    9
  6553 ;; This function calls:
  6554 ;;		_I2C_Master_Start
  6555 ;;		_I2C_Master_Stop
  6556 ;;		_I2C_Master_Write
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text26
  6563  001F56                     __ptext26:
  6564                           	opt stack 0
  6565  001F56                     _I2C_ColorSens_Init:
  6566                           	opt stack 21
  6567                           
  6568                           ;I2C.c: 55: I2C_Master_Start();
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;incstack = 0
  6572  001F56  EC75  F017         	call	_I2C_Master_Start	;wreg free
  6573                           
  6574                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  6575  001F5A  0E00               	movlw	0
  6576  001F5C  0100               	movlb	0	; () banked
  6577  001F5E  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6578  001F60  0E52               	movlw	82
  6579  001F62  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6580  001F64  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6581                           
  6582                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  6583  001F68  0E00               	movlw	0
  6584  001F6A  0100               	movlb	0	; () banked
  6585  001F6C  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6586  001F6E  0E80               	movlw	128
  6587  001F70  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6588  001F72  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6589                           
  6590                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  6591  001F76  0E00               	movlw	0
  6592  001F78  0100               	movlb	0	; () banked
  6593  001F7A  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6594  001F7C  0E01               	movlw	1
  6595  001F7E  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6596  001F80  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6597                           
  6598                           ;I2C.c: 59: I2C_Master_Stop();
  6599  001F84  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  6600                           
  6601                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  6602  001F88  0E0A               	movlw	10
  6603  001F8A  0100               	movlb	0	; () banked
  6604  001F8C  6FCB               	movwf	??_I2C_ColorSens_Init& (0+255),b
  6605  001F8E  0EBC               	movlw	188
  6606  001F90                     u4697:
  6607  001F90  2EE8               	decfsz	wreg,f,c
  6608  001F92  D7FE               	bra	u4697
  6609  001F94  2FCB               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  6610  001F96  D7FC               	bra	u4697
  6611  001F98  F000               	nop	
  6612                           
  6613                           ;I2C.c: 63: I2C_Master_Start();
  6614  001F9A  EC75  F017         	call	_I2C_Master_Start	;wreg free
  6615                           
  6616                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  6617  001F9E  0E00               	movlw	0
  6618  001FA0  0100               	movlb	0	; () banked
  6619  001FA2  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6620  001FA4  0E52               	movlw	82
  6621  001FA6  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6622  001FA8  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6623                           
  6624                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  6625  001FAC  0E00               	movlw	0
  6626  001FAE  0100               	movlb	0	; () banked
  6627  001FB0  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6628  001FB2  0E80               	movlw	128
  6629  001FB4  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6630  001FB6  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6631                           
  6632                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  6633  001FBA  0E00               	movlw	0
  6634  001FBC  0100               	movlb	0	; () banked
  6635  001FBE  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6636  001FC0  0E03               	movlw	3
  6637  001FC2  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6638  001FC4  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6639                           
  6640                           ;I2C.c: 67: I2C_Master_Stop();
  6641  001FC8  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  6642                           
  6643                           ;I2C.c: 69: I2C_Master_Start();
  6644  001FCC  EC75  F017         	call	_I2C_Master_Start	;wreg free
  6645                           
  6646                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  6647  001FD0  0E00               	movlw	0
  6648  001FD2  0100               	movlb	0	; () banked
  6649  001FD4  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6650  001FD6  0E52               	movlw	82
  6651  001FD8  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6652  001FDA  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6653                           
  6654                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  6655  001FDE  0E00               	movlw	0
  6656  001FE0  0100               	movlb	0	; () banked
  6657  001FE2  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6658  001FE4  0E8F               	movlw	143
  6659  001FE6  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6660  001FE8  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6661                           
  6662                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  6663  001FEC  0E00               	movlw	0
  6664  001FEE  0100               	movlb	0	; () banked
  6665  001FF0  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6666  001FF2  0E02               	movlw	2
  6667  001FF4  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6668  001FF6  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6669                           
  6670                           ;I2C.c: 73: I2C_Master_Stop();
  6671  001FFA  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  6672                           
  6673                           ;I2C.c: 90: I2C_Master_Start();
  6674  001FFE  EC75  F017         	call	_I2C_Master_Start	;wreg free
  6675                           
  6676                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  6677  002002  0E00               	movlw	0
  6678  002004  0100               	movlb	0	; () banked
  6679  002006  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6680  002008  0E52               	movlw	82
  6681  00200A  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6682  00200C  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6683                           
  6684                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  6685  002010  0E00               	movlw	0
  6686  002012  0100               	movlb	0	; () banked
  6687  002014  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6688  002016  0E81               	movlw	129
  6689  002018  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6690  00201A  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6691                           
  6692                           ;I2C.c: 93: I2C_Master_Write(0b11111110);
  6693  00201E  0E00               	movlw	0
  6694  002020  0100               	movlb	0	; () banked
  6695  002022  6FCA               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6696  002024  0EFE               	movlw	254
  6697  002026  6FC9               	movwf	I2C_Master_Write@d& (0+255),b
  6698  002028  EC67  F017         	call	_I2C_Master_Write	;wreg free
  6699                           
  6700                           ;I2C.c: 94: I2C_Master_Stop();
  6701  00202C  EC71  F017         	call	_I2C_Master_Stop	;wreg free
  6702  002030  0012               	return		;funcret
  6703  002032                     __end_of_I2C_ColorSens_Init:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           intcon2	equ	0xFF1
  6713                           intcon3	equ	0xFF0
  6714                           postinc0	equ	0xFEE
  6715                           wreg	equ	0xFE8
  6716                           indf1	equ	0xFE7
  6717                           fsr1h	equ	0xFE2
  6718                           fsr1l	equ	0xFE1
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           
  6726 ;; *************** function _I2C_Master_Write *****************
  6727 ;; Defined at:
  6728 ;;		line 48 in file "I2C.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  d               2   17[BANK0 ] unsigned int 
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      void 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0, cstack
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6742 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;Total ram usage:        2 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    8
  6749 ;; This function calls:
  6750 ;;		_I2C_Master_Wait
  6751 ;; This function is called by:
  6752 ;;		_I2C_ColorSens_Init
  6753 ;;		_date_time
  6754 ;;		_read_colorsensor
  6755 ;;		_set_time
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text27
  6760  002ECE                     __ptext27:
  6761                           	opt stack 0
  6762  002ECE                     _I2C_Master_Write:
  6763                           	opt stack 20
  6764                           
  6765                           ;I2C.c: 50: I2C_Master_Wait();
  6766                           
  6767                           ;incstack = 0
  6768  002ECE  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  6769                           
  6770                           ;I2C.c: 51: SSPBUF = d;
  6771  002ED2  C0C9  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6772  002ED6  0012               	return		;funcret
  6773  002ED8                     __end_of_I2C_Master_Write:
  6774                           	opt stack 0
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           intcon	equ	0xFF2
  6782                           intcon2	equ	0xFF1
  6783                           intcon3	equ	0xFF0
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           indf1	equ	0xFE7
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _I2C_Master_Stop *****************
  6797 ;; Defined at:
  6798 ;;		line 42 in file "I2C.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    8
  6819 ;; This function calls:
  6820 ;;		_I2C_Master_Wait
  6821 ;; This function is called by:
  6822 ;;		_I2C_ColorSens_Init
  6823 ;;		_date_time
  6824 ;;		_read_colorsensor
  6825 ;;		_set_time
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text28
  6830  002EE2                     __ptext28:
  6831                           	opt stack 0
  6832  002EE2                     _I2C_Master_Stop:
  6833                           	opt stack 20
  6834                           
  6835                           ;I2C.c: 44: I2C_Master_Wait();
  6836                           
  6837                           ;incstack = 0
  6838  002EE2  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  6839                           
  6840                           ;I2C.c: 45: PEN = 1;
  6841  002EE6  84C5               	bsf	4037,2,c	;volatile
  6842  002EE8  0012               	return		;funcret
  6843  002EEA                     __end_of_I2C_Master_Stop:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           indf1	equ	0xFE7
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8
  6865                           
  6866 ;; *************** function _I2C_Master_Start *****************
  6867 ;; Defined at:
  6868 ;;		line 30 in file "I2C.c"
  6869 ;; Parameters:    Size  Location     Type
  6870 ;;		None
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;		None
  6873 ;; Return value:  Size  Location     Type
  6874 ;;                  1    wreg      void 
  6875 ;; Registers used:
  6876 ;;		wreg, status,2, status,0, cstack
  6877 ;; Tracked objects:
  6878 ;;		On entry : 0/0
  6879 ;;		On exit  : 0/0
  6880 ;;		Unchanged: 0/0
  6881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;Total ram usage:        0 bytes
  6887 ;; Hardware stack levels used:    1
  6888 ;; Hardware stack levels required when called:    8
  6889 ;; This function calls:
  6890 ;;		_I2C_Master_Wait
  6891 ;; This function is called by:
  6892 ;;		_I2C_ColorSens_Init
  6893 ;;		_date_time
  6894 ;;		_read_colorsensor
  6895 ;;		_set_time
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text29
  6900  002EEA                     __ptext29:
  6901                           	opt stack 0
  6902  002EEA                     _I2C_Master_Start:
  6903                           	opt stack 20
  6904                           
  6905                           ;I2C.c: 32: I2C_Master_Wait();
  6906                           
  6907                           ;incstack = 0
  6908  002EEA  EC38  F017         	call	_I2C_Master_Wait	;wreg free
  6909                           
  6910                           ;I2C.c: 33: SEN = 1;
  6911  002EEE  80C5               	bsf	4037,0,c	;volatile
  6912  002EF0  0012               	return		;funcret
  6913  002EF2                     __end_of_I2C_Master_Start:
  6914                           	opt stack 0
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodh	equ	0xFF4
  6920                           prodl	equ	0xFF3
  6921                           intcon	equ	0xFF2
  6922                           intcon2	equ	0xFF1
  6923                           intcon3	equ	0xFF0
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           indf1	equ	0xFE7
  6927                           fsr1h	equ	0xFE2
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _I2C_Master_Wait *****************
  6937 ;; Defined at:
  6938 ;;		line 25 in file "I2C.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        1 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    7
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_I2C_Master_Start
  6963 ;;		_I2C_Master_Stop
  6964 ;;		_I2C_Master_Write
  6965 ;;		_I2C_Master_Read
  6966 ;;		_I2C_Master_RepeatedStart
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           	psect	text30
  6971  002E70                     __ptext30:
  6972                           	opt stack 0
  6973  002E70                     _I2C_Master_Wait:
  6974                           	opt stack 20
  6975  002E70                     l34:
  6976  002E70  B4C7               	btfsc	4039,2,c	;volatile
  6977  002E72  D7FE               	goto	l34
  6978  002E74  CFC5 F0C8          	movff	4037,??_I2C_Master_Wait	;volatile
  6979  002E78  0E1F               	movlw	31
  6980  002E7A  0100               	movlb	0	; () banked
  6981  002E7C  17C8               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6982  002E7E  B4D8               	btfsc	status,2,c
  6983  002E80  0012               	return	
  6984  002E82  D7F6               	goto	l34
  6985  002E84                     __end_of_I2C_Master_Wait:
  6986                           	opt stack 0
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           intcon2	equ	0xFF1
  6995                           intcon3	equ	0xFF0
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           indf1	equ	0xFE7
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function _isr *****************
  7009 ;; Defined at:
  7010 ;;		line 93 in file "main.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;		None
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  i               1  114[COMRAM] unsigned char 
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  1    wreg      void 
  7017 ;; Registers used:
  7018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;Total ram usage:       19 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    6
  7031 ;; This function calls:
  7032 ;;		_dec_to_hex
  7033 ;;		_read_time
  7034 ;;		_servo_rotate0
  7035 ;;		i2___wmul
  7036 ;;		i2_lcdInst
  7037 ;;		i2_printf
  7038 ;;		i2_read_colorsensor
  7039 ;; This function is called by:
  7040 ;;		Interrupt level 2
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	intcode
  7045  000008                     __pintcode:
  7046                           	opt stack 0
  7047  000008                     _isr:
  7048                           	opt stack 20
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;incstack = 0
  7052  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7053  00000A  EDF4  F001         	call	int_func,f	;refresh shadow registers
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           intcon2	equ	0xFF1
  7062                           intcon3	equ	0xFF0
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           indf1	equ	0xFE7
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075                           	psect	intcode_body
  7076  0003E8                     __pintcode_body:
  7077                           	opt stack 20
  7078  0003E8                     int_func:
  7079                           	opt stack 20
  7080  0003E8  0006               	pop		; remove dummy address from shadow register refresh
  7081  0003EA  CFFA F0BA          	movff	pclath,??_isr+2
  7082  0003EE  CFFB F0BB          	movff	pclatu,??_isr+3
  7083  0003F2  CFE9 F0BC          	movff	fsr0l,??_isr+4
  7084  0003F6  CFEA F0BD          	movff	fsr0h,??_isr+5
  7085  0003FA  CFE1 F0BE          	movff	fsr1l,??_isr+6
  7086  0003FE  CFE2 F0BF          	movff	fsr1h,??_isr+7
  7087  000402  CFD9 F0C0          	movff	fsr2l,??_isr+8
  7088  000406  CFDA F0C1          	movff	fsr2h,??_isr+9
  7089  00040A  CFF3 F0C2          	movff	prodl,??_isr+10
  7090  00040E  CFF4 F0C3          	movff	prodh,??_isr+11
  7091  000412  CFF6 F0C4          	movff	tblptrl,??_isr+12
  7092  000416  CFF7 F0C5          	movff	tblptrh,??_isr+13
  7093  00041A  CFF8 F0C6          	movff	tblptru,??_isr+14
  7094  00041E  CFF5 F0C7          	movff	tablat,??_isr+15
  7095                           
  7096                           ;main.c: 94: if (INT1IF) {
  7097  000422  B0F0               	btfsc	intcon3,0,c	;volatile
  7098  000424  D0E1               	goto	i2l4769
  7099  000426  D10C               	goto	i2l253
  7100  000428                     i2l255:
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;main.c: 97: LATAbits.LATA2 = 1;
  7104  000428  8489               	bsf	3977,2,c	;volatile
  7105                           
  7106                           ;main.c: 98: TMR0IE = 1;
  7107  00042A  8AF2               	bsf	intcon,5,c	;volatile
  7108                           
  7109                           ;main.c: 99: TMR0ON = 1;
  7110  00042C  8ED5               	bsf	4053,7,c	;volatile
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;main.c: 100: TMR0 = 0;
  7114  00042E  0E00               	movlw	0
  7115  000430  6ED7               	movwf	4055,c	;volatile
  7116  000432  0E00               	movlw	0
  7117  000434  6ED6               	movwf	4054,c	;volatile
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;main.c: 102: read_time();
  7121  000436  EC4A  F014         	call	_read_time	;wreg free
  7122                           
  7123                           ;main.c: 103: start_time[1] = time[1];
  7124  00043A  C097  F07B         	movff	_time+1,_start_time+1
  7125                           
  7126                           ;main.c: 104: start_time[0] = time[0];
  7127  00043E  C096  F07A         	movff	_time,_start_time
  7128                           
  7129                           ;main.c: 106: lcdInst(0b00000001);
  7130  000442  0E01               	movlw	1
  7131  000444  EC61  F017         	call	i2_lcdInst
  7132                           
  7133                           ;main.c: 107: bottle_count_disp = -1;
  7134  000448  0100               	movlb	0	; () banked
  7135  00044A  69ED               	setf	_bottle_count_disp& (0+255),b
  7136  00044C  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;main.c: 108: curr_state = OPERATION;
  7140  00044E  0E02               	movlw	2
  7141  000450  D0BA               	goto	L10
  7142  000452                     i2l4713:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;main.c: 111: bottle_count_disp += 1;
  7146  000452  0100               	movlb	0	; () banked
  7147  000454  4BED               	infsnz	_bottle_count_disp& (0+255),f,b
  7148  000456  2BEE               	incf	(_bottle_count_disp+1)& (0+255),f,b
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;main.c: 112: curr_state = BOTTLECOUNT;
  7152  000458  0E05               	movlw	5
  7153  00045A  0100               	movlb	0	; () banked
  7154  00045C  6FB7               	movwf	_curr_state& (0+255),b
  7155  00045E                     i2l4717:
  7156  00045E  0E1F               	movlw	31
  7157  000460  1881               	xorwf	3969,w,c	;volatile
  7158  000462  A4D8               	btfss	status,2,c
  7159  000464  D0EB               	goto	i2l256
  7160  000466  D7FB               	goto	i2l4717
  7161  000468                     i2l4719:
  7162                           
  7163                           ;main.c: 116: operation_time = etime - stime;
  7164  000468  C07C  F0B8         	movff	_stime,??_isr
  7165  00046C  C07D  F0B9         	movff	_stime+1,??_isr+1
  7166  000470  0100               	movlb	0	; () banked
  7167  000472  1FB8               	comf	??_isr& (0+255),f,b
  7168  000474  1FB9               	comf	(??_isr+1)& (0+255),f,b
  7169  000476  4BB8               	infsnz	??_isr& (0+255),f,b
  7170  000478  2BB9               	incf	(??_isr+1)& (0+255),f,b
  7171  00047A  5078               	movf	_etime,w,c
  7172  00047C  0100               	movlb	0	; () banked
  7173  00047E  25B8               	addwf	??_isr& (0+255),w,b
  7174  000480  0100               	movlb	0	; () banked
  7175  000482  6FB3               	movwf	_operation_time& (0+255),b
  7176  000484  5079               	movf	_etime+1,w,c
  7177  000486  0100               	movlb	0	; () banked
  7178  000488  21B9               	addwfc	(??_isr+1)& (0+255),w,b
  7179  00048A  0100               	movlb	0	; () banked
  7180  00048C  6FB4               	movwf	(_operation_time+1)& (0+255),b
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;main.c: 117: bottle_count_disp = -1;
  7184  00048E  0100               	movlb	0	; () banked
  7185  000490  69ED               	setf	_bottle_count_disp& (0+255),b
  7186  000492  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;main.c: 118: curr_state = BOTTLETIME;
  7190  000494  0E06               	movlw	6
  7191  000496  D097               	goto	L10
  7192  000498                     i2l262:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;main.c: 121: bottle_count_disp = -1;
  7196  000498  0100               	movlb	0	; () banked
  7197  00049A  69ED               	setf	_bottle_count_disp& (0+255),b
  7198  00049C  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;main.c: 122: curr_state = DATETIME;
  7202  00049E  0E04               	movlw	4
  7203  0004A0  D092               	goto	L10
  7204  0004A2                     i2l263:
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;main.c: 125: LATAbits.LATA2 = 0;
  7208  0004A2  9489               	bcf	3977,2,c	;volatile
  7209                           
  7210                           ;main.c: 126: TMR0IE = 0;
  7211  0004A4  9AF2               	bcf	intcon,5,c	;volatile
  7212                           
  7213                           ;main.c: 127: TMR0ON = 0;
  7214  0004A6  9ED5               	bcf	4053,7,c	;volatile
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;main.c: 129: read_time();
  7218  0004A8  EC4A  F014         	call	_read_time	;wreg free
  7219                           
  7220                           ;main.c: 130: end_time[1] = time[1];
  7221  0004AC  C097  F077         	movff	_time+1,_end_time+1
  7222                           
  7223                           ;main.c: 131: end_time[0] = time[0];
  7224  0004B0  C096  F076         	movff	_time,_end_time
  7225                           
  7226                           ;main.c: 132: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7227  0004B4  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7228  0004B8  6A64               	clrf	dec_to_hex@num+1,c
  7229  0004BA  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7230  0004BE  C063  F074         	movff	?_dec_to_hex,_isr$1360
  7231  0004C2  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  7232                           
  7233                           ;main.c: 132: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7234  0004C6  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  7235  0004CA  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  7236  0004CE  0E00               	movlw	0
  7237  0004D0  6E04               	movwf	i2___wmul@multiplicand+1,c
  7238  0004D2  0E3C               	movlw	60
  7239  0004D4  6E03               	movwf	i2___wmul@multiplicand,c
  7240  0004D6  ECE7  F016         	call	i2___wmul	;wreg free
  7241  0004DA  C001  F0B8         	movff	?i2___wmul,??_isr
  7242  0004DE  C002  F0B9         	movff	?i2___wmul+1,??_isr+1
  7243  0004E2  C07A  F063         	movff	_start_time,dec_to_hex@num
  7244  0004E6  6A64               	clrf	dec_to_hex@num+1,c
  7245  0004E8  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7246  0004EC  5063               	movf	?_dec_to_hex,w,c
  7247  0004EE  0100               	movlb	0	; () banked
  7248  0004F0  25B8               	addwf	??_isr& (0+255),w,b
  7249  0004F2  6E7C               	movwf	_stime,c
  7250  0004F4  5064               	movf	?_dec_to_hex+1,w,c
  7251  0004F6  0100               	movlb	0	; () banked
  7252  0004F8  21B9               	addwfc	(??_isr+1)& (0+255),w,b
  7253  0004FA  6E7D               	movwf	_stime+1,c
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;main.c: 133: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7257  0004FC  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7258  000500  6A64               	clrf	dec_to_hex@num+1,c
  7259  000502  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7260  000506  C063  F074         	movff	?_dec_to_hex,_isr$1360
  7261  00050A  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  7262                           
  7263                           ;main.c: 133: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7264  00050E  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  7265  000512  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  7266  000516  0E00               	movlw	0
  7267  000518  6E04               	movwf	i2___wmul@multiplicand+1,c
  7268  00051A  0E3C               	movlw	60
  7269  00051C  6E03               	movwf	i2___wmul@multiplicand,c
  7270  00051E  ECE7  F016         	call	i2___wmul	;wreg free
  7271  000522  C001  F0B8         	movff	?i2___wmul,??_isr
  7272  000526  C002  F0B9         	movff	?i2___wmul+1,??_isr+1
  7273  00052A  C076  F063         	movff	_end_time,dec_to_hex@num
  7274  00052E  6A64               	clrf	dec_to_hex@num+1,c
  7275  000530  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7276  000534  5063               	movf	?_dec_to_hex,w,c
  7277  000536  0100               	movlb	0	; () banked
  7278  000538  25B8               	addwf	??_isr& (0+255),w,b
  7279  00053A  6E78               	movwf	_etime,c
  7280  00053C  5064               	movf	?_dec_to_hex+1,w,c
  7281  00053E  0100               	movlb	0	; () banked
  7282  000540  21B9               	addwfc	(??_isr+1)& (0+255),w,b
  7283  000542  6E79               	movwf	_etime+1,c
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;main.c: 134: lcdInst(0b00000001);
  7287  000544  0E01               	movlw	1
  7288  000546  EC61  F017         	call	i2_lcdInst
  7289                           
  7290                           ;main.c: 135: bottle_count_disp = -1;
  7291  00054A  0100               	movlb	0	; () banked
  7292  00054C  69ED               	setf	_bottle_count_disp& (0+255),b
  7293  00054E  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;main.c: 136: curr_state = OPERATIONEND;
  7297  000550  0E03               	movlw	3
  7298  000552  D039               	goto	L10
  7299  000554                     i2l4747:
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;main.c: 139: read_colorsensor();
  7303  000554  ECE4  F00B         	call	i2_read_colorsensor	;wreg free
  7304                           
  7305                           ;main.c: 140: lcdInst(0b10000000);
  7306  000558  0E80               	movlw	128
  7307  00055A  EC61  F017         	call	i2_lcdInst
  7308                           
  7309                           ;main.c: 141: printf("C%u R%u                ", color[0], color[1]);
  7310  00055E  0EA3               	movlw	low STR_1
  7311  000560  6E0D               	movwf	i2printf@f,c
  7312  000562  0EFE               	movlw	high STR_1
  7313  000564  6E0E               	movwf	i2printf@f+1,c
  7314  000566  C080  F00F         	movff	_color,?i2_printf+2
  7315  00056A  C081  F010         	movff	_color+1,?i2_printf+3
  7316  00056E  C082  F011         	movff	_color+2,?i2_printf+4
  7317  000572  C083  F012         	movff	_color+3,?i2_printf+5
  7318  000576  C084  F013         	movff	_color+4,?i2_printf+6
  7319  00057A  C085  F014         	movff	_color+5,?i2_printf+7
  7320  00057E  EC68  F005         	call	i2_printf	;wreg free
  7321                           
  7322                           ;main.c: 142: lcdInst(0b11000000);
  7323  000582  0EC0               	movlw	192
  7324  000584  EC61  F017         	call	i2_lcdInst
  7325                           
  7326                           ;main.c: 143: printf("G%u B%u                ", color[2], color[3]);
  7327  000588  0E8B               	movlw	low STR_2
  7328  00058A  6E0D               	movwf	i2printf@f,c
  7329  00058C  0EFE               	movlw	high STR_2
  7330  00058E  6E0E               	movwf	i2printf@f+1,c
  7331  000590  C086  F00F         	movff	_color+6,?i2_printf+2
  7332  000594  C087  F010         	movff	_color+7,?i2_printf+3
  7333  000598  C088  F011         	movff	_color+8,?i2_printf+4
  7334  00059C  C089  F012         	movff	_color+9,?i2_printf+5
  7335  0005A0  C08A  F013         	movff	_color+10,?i2_printf+6
  7336  0005A4  C08B  F014         	movff	_color+11,?i2_printf+7
  7337  0005A8  EC68  F005         	call	i2_printf	;wreg free
  7338                           
  7339                           ;main.c: 144: break;
  7340  0005AC  D047               	goto	i2l256
  7341  0005AE                     i2l265:
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;main.c: 146: LATAbits.LATA2 = 0;
  7345  0005AE  9489               	bcf	3977,2,c	;volatile
  7346                           
  7347                           ;main.c: 147: (INTCONbits.GIE = 0);
  7348  0005B0  9EF2               	bcf	intcon,7,c	;volatile
  7349                           
  7350                           ;main.c: 148: TMR0ON = 0;
  7351  0005B2  9ED5               	bcf	4053,7,c	;volatile
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;main.c: 149: lcdInst(0b00000001);
  7355  0005B4  0E01               	movlw	1
  7356  0005B6  EC61  F017         	call	i2_lcdInst
  7357                           
  7358                           ;main.c: 150: curr_state = EMERGENCYSTOP;
  7359  0005BA  0E01               	movlw	1
  7360  0005BC  D004               	goto	L10
  7361  0005BE                     i2l266:
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;main.c: 153: bottle_count_disp = -1;
  7365  0005BE  0100               	movlb	0	; () banked
  7366  0005C0  69ED               	setf	_bottle_count_disp& (0+255),b
  7367  0005C2  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;main.c: 154: curr_state = STANDBY;
  7371  0005C4  0E00               	movlw	0
  7372  0005C6                     L10:
  7373  0005C6  0100               	movlb	0	; () banked
  7374  0005C8  6FB7               	movwf	_curr_state& (0+255),b
  7375                           
  7376                           ;main.c: 156: break;
  7377  0005CA  D038               	goto	i2l256
  7378  0005CC                     i2l4763:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 158: servo_rotate0(1);
  7382  0005CC  0E00               	movlw	0
  7383  0005CE  6E02               	movwf	servo_rotate0@degree+1,c
  7384  0005D0  0E01               	movlw	1
  7385  0005D2  6E01               	movwf	servo_rotate0@degree,c
  7386  0005D4  ECB8  F012         	call	_servo_rotate0	;wreg free
  7387                           
  7388                           ;main.c: 159: break;
  7389  0005D8  D031               	goto	i2l256
  7390  0005DA                     i2l4765:
  7391                           
  7392                           ;main.c: 161: servo_rotate0(2);
  7393  0005DA  0E00               	movlw	0
  7394  0005DC  6E02               	movwf	servo_rotate0@degree+1,c
  7395  0005DE  0E02               	movlw	2
  7396  0005E0  6E01               	movwf	servo_rotate0@degree,c
  7397  0005E2  ECB8  F012         	call	_servo_rotate0	;wreg free
  7398                           
  7399                           ;main.c: 163: }
  7400                           
  7401                           ;main.c: 162: break;
  7402  0005E6  D02A               	goto	i2l256
  7403  0005E8                     i2l4769:
  7404  0005E8  3881               	swapf	3969,w,c	;volatile
  7405  0005EA  0B0F               	andlw	15
  7406  0005EC  0100               	movlb	0	; () banked
  7407  0005EE  6FB8               	movwf	??_isr& (0+255),b
  7408  0005F0  6BB9               	clrf	(??_isr+1)& (0+255),b
  7409                           
  7410                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7411                           ; Switch size 1, requested type "space"
  7412                           ; Number of cases is 1, Range of values is 0 to 0
  7413                           ; switch strategies available:
  7414                           ; Name         Instructions Cycles
  7415                           ; simple_byte            4     3 (average)
  7416                           ;	Chosen strategy is simple_byte
  7417  0005F2  0100               	movlb	0	; () banked
  7418  0005F4  51B9               	movf	(??_isr+1)& (0+255),w,b
  7419  0005F6  0A00               	xorlw	0	; case 0
  7420  0005F8  A4D8               	btfss	status,2,c
  7421  0005FA  D020               	goto	i2l256
  7422                           
  7423                           ; BSR set to: 0
  7424                           ; Switch size 1, requested type "space"
  7425                           ; Number of cases is 10, Range of values is 0 to 14
  7426                           ; switch strategies available:
  7427                           ; Name         Instructions Cycles
  7428                           ; simple_byte           31    16 (average)
  7429                           ;	Chosen strategy is simple_byte
  7430  0005FC  0100               	movlb	0	; () banked
  7431  0005FE  51B8               	movf	??_isr& (0+255),w,b
  7432  000600  0A00               	xorlw	0	; case 0
  7433  000602  B4D8               	btfsc	status,2,c
  7434  000604  D711               	goto	i2l255
  7435  000606  0A01               	xorlw	1	; case 1
  7436  000608  B4D8               	btfsc	status,2,c
  7437  00060A  D723               	goto	i2l4713
  7438  00060C  0A03               	xorlw	3	; case 2
  7439  00060E  B4D8               	btfsc	status,2,c
  7440  000610  D72B               	goto	i2l4719
  7441  000612  0A01               	xorlw	1	; case 3
  7442  000614  B4D8               	btfsc	status,2,c
  7443  000616  D740               	goto	i2l262
  7444  000618  0A07               	xorlw	7	; case 4
  7445  00061A  B4D8               	btfsc	status,2,c
  7446  00061C  D742               	goto	i2l263
  7447  00061E  0A01               	xorlw	1	; case 5
  7448  000620  B4D8               	btfsc	status,2,c
  7449  000622  D798               	goto	i2l4747
  7450  000624  0A02               	xorlw	2	; case 7
  7451  000626  B4D8               	btfsc	status,2,c
  7452  000628  D7D1               	goto	i2l4763
  7453  00062A  0A0C               	xorlw	12	; case 11
  7454  00062C  B4D8               	btfsc	status,2,c
  7455  00062E  D7D5               	goto	i2l4765
  7456  000630  0A07               	xorlw	7	; case 12
  7457  000632  B4D8               	btfsc	status,2,c
  7458  000634  D7BC               	goto	i2l265
  7459  000636  0A02               	xorlw	2	; case 14
  7460  000638  B4D8               	btfsc	status,2,c
  7461  00063A  D7C1               	goto	i2l266
  7462  00063C                     i2l256:
  7463                           
  7464                           ;main.c: 164: INT1IF = 0;
  7465  00063C  90F0               	bcf	intcon3,0,c	;volatile
  7466                           
  7467                           ;main.c: 165: }
  7468  00063E  D077               	goto	i2l277
  7469  000640                     i2l253:
  7470                           
  7471                           ;main.c: 166: else if (TMR0IF){
  7472  000640  A4F2               	btfss	intcon,2,c	;volatile
  7473  000642  D05B               	goto	i2l4795
  7474                           
  7475                           ;main.c: 167: LATAbits.LATA2 = 0;
  7476  000644  9489               	bcf	3977,2,c	;volatile
  7477                           
  7478                           ;main.c: 168: TMR0ON = 0;
  7479  000646  9ED5               	bcf	4053,7,c	;volatile
  7480                           
  7481                           ;main.c: 169: read_time();
  7482  000648  EC4A  F014         	call	_read_time	;wreg free
  7483                           
  7484                           ;main.c: 170: end_time[1] = time[1];
  7485  00064C  C097  F077         	movff	_time+1,_end_time+1
  7486                           
  7487                           ;main.c: 171: end_time[0] = time[0];
  7488  000650  C096  F076         	movff	_time,_end_time
  7489                           
  7490                           ;main.c: 172: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7491  000654  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7492  000658  6A64               	clrf	dec_to_hex@num+1,c
  7493  00065A  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7494  00065E  C063  F074         	movff	?_dec_to_hex,_isr$1360
  7495  000662  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  7496                           
  7497                           ;main.c: 172: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7498  000666  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  7499  00066A  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  7500  00066E  0E00               	movlw	0
  7501  000670  6E04               	movwf	i2___wmul@multiplicand+1,c
  7502  000672  0E3C               	movlw	60
  7503  000674  6E03               	movwf	i2___wmul@multiplicand,c
  7504  000676  ECE7  F016         	call	i2___wmul	;wreg free
  7505  00067A  C001  F0B8         	movff	?i2___wmul,??_isr
  7506  00067E  C002  F0B9         	movff	?i2___wmul+1,??_isr+1
  7507  000682  C07A  F063         	movff	_start_time,dec_to_hex@num
  7508  000686  6A64               	clrf	dec_to_hex@num+1,c
  7509  000688  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7510  00068C  5063               	movf	?_dec_to_hex,w,c
  7511  00068E  0100               	movlb	0	; () banked
  7512  000690  25B8               	addwf	??_isr& (0+255),w,b
  7513  000692  6E7C               	movwf	_stime,c
  7514  000694  5064               	movf	?_dec_to_hex+1,w,c
  7515  000696  0100               	movlb	0	; () banked
  7516  000698  21B9               	addwfc	(??_isr+1)& (0+255),w,b
  7517  00069A  6E7D               	movwf	_stime+1,c
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;main.c: 173: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7521  00069C  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7522  0006A0  6A64               	clrf	dec_to_hex@num+1,c
  7523  0006A2  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7524  0006A6  C063  F074         	movff	?_dec_to_hex,_isr$1360
  7525  0006AA  C064  F075         	movff	?_dec_to_hex+1,_isr$1360+1
  7526                           
  7527                           ;main.c: 173: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7528  0006AE  C074  F001         	movff	_isr$1360,i2___wmul@multiplier
  7529  0006B2  C075  F002         	movff	_isr$1360+1,i2___wmul@multiplier+1
  7530  0006B6  0E00               	movlw	0
  7531  0006B8  6E04               	movwf	i2___wmul@multiplicand+1,c
  7532  0006BA  0E3C               	movlw	60
  7533  0006BC  6E03               	movwf	i2___wmul@multiplicand,c
  7534  0006BE  ECE7  F016         	call	i2___wmul	;wreg free
  7535  0006C2  C001  F0B8         	movff	?i2___wmul,??_isr
  7536  0006C6  C002  F0B9         	movff	?i2___wmul+1,??_isr+1
  7537  0006CA  C076  F063         	movff	_end_time,dec_to_hex@num
  7538  0006CE  6A64               	clrf	dec_to_hex@num+1,c
  7539  0006D0  ECE9  F00C         	call	_dec_to_hex	;wreg free
  7540  0006D4  5063               	movf	?_dec_to_hex,w,c
  7541  0006D6  0100               	movlb	0	; () banked
  7542  0006D8  25B8               	addwf	??_isr& (0+255),w,b
  7543  0006DA  6E78               	movwf	_etime,c
  7544  0006DC  5064               	movf	?_dec_to_hex+1,w,c
  7545  0006DE  0100               	movlb	0	; () banked
  7546  0006E0  21B9               	addwfc	(??_isr+1)& (0+255),w,b
  7547  0006E2  6E79               	movwf	_etime+1,c
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;main.c: 174: lcdInst(0b00000001);
  7551  0006E4  0E01               	movlw	1
  7552  0006E6  EC61  F017         	call	i2_lcdInst
  7553                           
  7554                           ;main.c: 175: curr_state = OPERATIONEND;
  7555  0006EA  0E03               	movlw	3
  7556  0006EC  0100               	movlb	0	; () banked
  7557  0006EE  6FB7               	movwf	_curr_state& (0+255),b
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;main.c: 176: bottle_count_disp = -1;
  7561  0006F0  0100               	movlb	0	; () banked
  7562  0006F2  69ED               	setf	_bottle_count_disp& (0+255),b
  7563  0006F4  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;main.c: 177: TMR0IF = 0;
  7567  0006F6  94F2               	bcf	intcon,2,c	;volatile
  7568                           
  7569                           ;main.c: 178: }
  7570  0006F8  D01A               	goto	i2l277
  7571  0006FA                     i2l4795:
  7572                           
  7573                           ;main.c: 181: lcdInst(0b10000000);
  7574  0006FA  0E80               	movlw	128
  7575  0006FC  EC61  F017         	call	i2_lcdInst
  7576                           
  7577                           ;main.c: 182: printf("ERR: BAD ISR");
  7578  000700  0EE7               	movlw	low STR_3
  7579  000702  6E0D               	movwf	i2printf@f,c
  7580  000704  0EFF               	movlw	high STR_3
  7581  000706  6E0E               	movwf	i2printf@f+1,c
  7582  000708  EC68  F005         	call	i2_printf	;wreg free
  7583                           
  7584                           ;main.c: 183: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  7585  00070C  0E00               	movlw	0
  7586  00070E  6E73               	movwf	isr@i,c
  7587  000710                     i2l4801:
  7588  000710  0E63               	movlw	99
  7589  000712  6473               	cpfsgt	isr@i,c
  7590  000714  D001               	goto	i2l4805
  7591  000716  D7F1               	goto	i2l4795
  7592  000718                     i2l4805:
  7593  000718  0E21               	movlw	33
  7594  00071A  0100               	movlb	0	; () banked
  7595  00071C  6FB8               	movwf	??_isr& (0+255),b
  7596  00071E  0E76               	movlw	118
  7597  000720                     i2u470_47:
  7598  000720  2EE8               	decfsz	wreg,f,c
  7599  000722  D7FE               	bra	i2u470_47
  7600  000724  2FB8               	decfsz	??_isr& (0+255),f,b
  7601  000726  D7FC               	bra	i2u470_47
  7602  000728  F000               	nop	
  7603  00072A  2A73               	incf	isr@i,f,c
  7604  00072C  D7F1               	goto	i2l4801
  7605  00072E                     i2l277:
  7606  00072E  C0C7  FFF5         	movff	??_isr+15,tablat
  7607  000732  C0C6  FFF8         	movff	??_isr+14,tblptru
  7608  000736  C0C5  FFF7         	movff	??_isr+13,tblptrh
  7609  00073A  C0C4  FFF6         	movff	??_isr+12,tblptrl
  7610  00073E  C0C3  FFF4         	movff	??_isr+11,prodh
  7611  000742  C0C2  FFF3         	movff	??_isr+10,prodl
  7612  000746  C0C1  FFDA         	movff	??_isr+9,fsr2h
  7613  00074A  C0C0  FFD9         	movff	??_isr+8,fsr2l
  7614  00074E  C0BF  FFE2         	movff	??_isr+7,fsr1h
  7615  000752  C0BE  FFE1         	movff	??_isr+6,fsr1l
  7616  000756  C0BD  FFEA         	movff	??_isr+5,fsr0h
  7617  00075A  C0BC  FFE9         	movff	??_isr+4,fsr0l
  7618  00075E  C0BB  FFFB         	movff	??_isr+3,pclatu
  7619  000762  C0BA  FFFA         	movff	??_isr+2,pclath
  7620  000766  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7621  000768  0011               	retfie		f
  7622  00076A                     __end_of_isr:
  7623                           	opt stack 0
  7624                           pclatu	equ	0xFFB
  7625                           pclath	equ	0xFFA
  7626                           tblptru	equ	0xFF8
  7627                           tblptrh	equ	0xFF7
  7628                           tblptrl	equ	0xFF6
  7629                           tablat	equ	0xFF5
  7630                           prodh	equ	0xFF4
  7631                           prodl	equ	0xFF3
  7632                           intcon	equ	0xFF2
  7633                           intcon2	equ	0xFF1
  7634                           intcon3	equ	0xFF0
  7635                           postinc0	equ	0xFEE
  7636                           fsr0h	equ	0xFEA
  7637                           fsr0l	equ	0xFE9
  7638                           wreg	equ	0xFE8
  7639                           indf1	equ	0xFE7
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function i2_read_colorsensor *****************
  7650 ;; Defined at:
  7651 ;;		line 408 in file "main.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;		None
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  read_colorse    4   20[COMRAM] unsigned char [4]
  7656 ;;  read_colorse    4   16[COMRAM] unsigned char [4]
  7657 ;;  read_colorse    2   24[COMRAM] int 
  7658 ;; Return value:  Size  Location     Type
  7659 ;;                  1    wreg      void 
  7660 ;; Registers used:
  7661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7662 ;; Tracked objects:
  7663 ;;		On entry : 0/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;Total ram usage:       14 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    2
  7674 ;; This function calls:
  7675 ;;		i2_I2C_Master_Read
  7676 ;;		i2_I2C_Master_Start
  7677 ;;		i2_I2C_Master_Stop
  7678 ;;		i2_I2C_Master_Write
  7679 ;;		i2___awtoft
  7680 ;;		i2___wmul
  7681 ;; This function is called by:
  7682 ;;		_isr
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text32
  7687  0017C8                     __ptext32:
  7688                           	opt stack 0
  7689  0017C8                     i2_read_colorsensor:
  7690                           	opt stack 23
  7691                           
  7692                           ;main.c: 409: unsigned char color_low[4];
  7693                           ;main.c: 410: unsigned char color_high[4];
  7694                           ;main.c: 411: int i;
  7695                           ;main.c: 414: I2C_Master_Start();
  7696                           
  7697                           ;incstack = 0
  7698  0017C8  EC7D  F017         	call	i2_I2C_Master_Start	;wreg free
  7699                           
  7700                           ;main.c: 415: I2C_Master_Write(0b01010010);
  7701  0017CC  0E00               	movlw	0
  7702  0017CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7703  0017D0  0E52               	movlw	82
  7704  0017D2  6E02               	movwf	i2I2C_Master_Write@d,c
  7705  0017D4  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  7706                           
  7707                           ;main.c: 416: I2C_Master_Write(0b10110100);
  7708  0017D8  0E00               	movlw	0
  7709  0017DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7710  0017DC  0EB4               	movlw	180
  7711  0017DE  6E02               	movwf	i2I2C_Master_Write@d,c
  7712  0017E0  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  7713                           
  7714                           ;main.c: 417: I2C_Master_Start();
  7715  0017E4  EC7D  F017         	call	i2_I2C_Master_Start	;wreg free
  7716                           
  7717                           ;main.c: 418: I2C_Master_Write(0b01010011);
  7718  0017E8  0E00               	movlw	0
  7719  0017EA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7720  0017EC  0E53               	movlw	83
  7721  0017EE  6E02               	movwf	i2I2C_Master_Write@d,c
  7722  0017F0  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  7723                           
  7724                           ;main.c: 419: for(i=0; i<3; i++){
  7725  0017F4  0E00               	movlw	0
  7726  0017F6  6E1A               	movwf	i2read_colorsensor@i+1,c
  7727  0017F8  0E00               	movlw	0
  7728  0017FA  6E19               	movwf	i2read_colorsensor@i,c
  7729  0017FC                     i2l4475:
  7730  0017FC  BE1A               	btfsc	i2read_colorsensor@i+1,7,c
  7731  0017FE  D006               	goto	i2l4479
  7732  001800  501A               	movf	i2read_colorsensor@i+1,w,c
  7733  001802  E11B               	bnz	i2l4485
  7734  001804  0E03               	movlw	3
  7735  001806  5C19               	subwf	i2read_colorsensor@i,w,c
  7736  001808  B0D8               	btfsc	status,0,c
  7737  00180A  D017               	goto	i2l4485
  7738  00180C                     i2l4479:
  7739                           
  7740                           ;main.c: 420: color_low[i] = I2C_Master_Read(1);
  7741  00180C  0E11               	movlw	low i2read_colorsensor@color_low
  7742  00180E  2419               	addwf	i2read_colorsensor@i,w,c
  7743  001810  6ED9               	movwf	fsr2l,c
  7744  001812  0E00               	movlw	high i2read_colorsensor@color_low
  7745  001814  201A               	addwfc	i2read_colorsensor@i+1,w,c
  7746  001816  6EDA               	movwf	fsr2h,c
  7747  001818  0E01               	movlw	1
  7748  00181A  ECD4  F016         	call	i2_I2C_Master_Read
  7749  00181E  6EDF               	movwf	indf2,c
  7750                           
  7751                           ;main.c: 421: color_high[i] = I2C_Master_Read(1);
  7752  001820  0E15               	movlw	low i2read_colorsensor@color_high
  7753  001822  2419               	addwf	i2read_colorsensor@i,w,c
  7754  001824  6ED9               	movwf	fsr2l,c
  7755  001826  0E00               	movlw	high i2read_colorsensor@color_high
  7756  001828  201A               	addwfc	i2read_colorsensor@i+1,w,c
  7757  00182A  6EDA               	movwf	fsr2h,c
  7758  00182C  0E01               	movlw	1
  7759  00182E  ECD4  F016         	call	i2_I2C_Master_Read
  7760  001832  6EDF               	movwf	indf2,c
  7761  001834  4A19               	infsnz	i2read_colorsensor@i,f,c
  7762  001836  2A1A               	incf	i2read_colorsensor@i+1,f,c
  7763  001838  D7E1               	goto	i2l4475
  7764  00183A                     i2l4485:
  7765                           
  7766                           ;main.c: 422: }
  7767                           ;main.c: 423: color_low[3] = I2C_Master_Read(1);
  7768  00183A  0E01               	movlw	1
  7769  00183C  ECD4  F016         	call	i2_I2C_Master_Read
  7770  001840  6E14               	movwf	i2read_colorsensor@color_low+3,c
  7771                           
  7772                           ;main.c: 424: color_high[3] = I2C_Master_Read(0);
  7773  001842  0E00               	movlw	0
  7774  001844  ECD4  F016         	call	i2_I2C_Master_Read
  7775  001848  6E18               	movwf	i2read_colorsensor@color_high+3,c
  7776                           
  7777                           ;main.c: 425: I2C_Master_Stop();
  7778  00184A  EC79  F017         	call	i2_I2C_Master_Stop	;wreg free
  7779                           
  7780                           ;main.c: 427: for(i=0; i<4; i++){
  7781  00184E  0E00               	movlw	0
  7782  001850  6E1A               	movwf	i2read_colorsensor@i+1,c
  7783  001852  0E00               	movlw	0
  7784  001854  6E19               	movwf	i2read_colorsensor@i,c
  7785  001856                     i2l4489:
  7786  001856  BE1A               	btfsc	i2read_colorsensor@i+1,7,c
  7787  001858  D006               	goto	i2l4493
  7788  00185A  501A               	movf	i2read_colorsensor@i+1,w,c
  7789  00185C  E137               	bnz	i2l389
  7790  00185E  0E04               	movlw	4
  7791  001860  5C19               	subwf	i2read_colorsensor@i,w,c
  7792  001862  B0D8               	btfsc	status,0,c
  7793  001864  0012               	return	
  7794  001866                     i2l4493:
  7795                           
  7796                           ;main.c: 428: color[i] = (color_high[i] << 8)|(color_low[i]);
  7797  001866  C019  F001         	movff	i2read_colorsensor@i,i2___wmul@multiplier
  7798  00186A  C01A  F002         	movff	i2read_colorsensor@i+1,i2___wmul@multiplier+1
  7799  00186E  0E00               	movlw	0
  7800  001870  6E04               	movwf	i2___wmul@multiplicand+1,c
  7801  001872  0E03               	movlw	3
  7802  001874  6E03               	movwf	i2___wmul@multiplicand,c
  7803  001876  ECE7  F016         	call	i2___wmul	;wreg free
  7804  00187A  0E80               	movlw	low _color
  7805  00187C  2401               	addwf	?i2___wmul,w,c
  7806  00187E  6ED9               	movwf	fsr2l,c
  7807  001880  0E00               	movlw	high _color
  7808  001882  2002               	addwfc	?i2___wmul+1,w,c
  7809  001884  6EDA               	movwf	fsr2h,c
  7810  001886  0E15               	movlw	low i2read_colorsensor@color_high
  7811  001888  2419               	addwf	i2read_colorsensor@i,w,c
  7812  00188A  6EE1               	movwf	fsr1l,c
  7813  00188C  0E00               	movlw	high i2read_colorsensor@color_high
  7814  00188E  201A               	addwfc	i2read_colorsensor@i+1,w,c
  7815  001890  6EE2               	movwf	fsr1h,c
  7816  001892  50E7               	movf	indf1,w,c
  7817  001894  6E0D               	movwf	??i2_read_colorsensor& (0+255),c
  7818  001896  500D               	movf	??i2_read_colorsensor,w,c
  7819  001898  6E0F               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  7820  00189A  6A0E               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  7821  00189C  0E11               	movlw	low i2read_colorsensor@color_low
  7822  00189E  2419               	addwf	i2read_colorsensor@i,w,c
  7823  0018A0  6EE1               	movwf	fsr1l,c
  7824  0018A2  0E00               	movlw	high i2read_colorsensor@color_low
  7825  0018A4  201A               	addwfc	i2read_colorsensor@i+1,w,c
  7826  0018A6  6EE2               	movwf	fsr1h,c
  7827  0018A8  50E7               	movf	indf1,w,c
  7828  0018AA  6E10               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  7829  0018AC  5010               	movf	??i2_read_colorsensor+3,w,c
  7830  0018AE  100E               	iorwf	??i2_read_colorsensor+1,w,c
  7831  0018B0  6E09               	movwf	i2___awtoft@c,c
  7832  0018B2  500F               	movf	??i2_read_colorsensor+2,w,c
  7833  0018B4  6E0A               	movwf	i2___awtoft@c+1,c
  7834  0018B6  EC56  F016         	call	i2___awtoft	;wreg free
  7835  0018BA  C009  FFDE         	movff	?i2___awtoft,postinc2
  7836  0018BE  C00A  FFDE         	movff	?i2___awtoft+1,postinc2
  7837  0018C2  C00B  FFDE         	movff	?i2___awtoft+2,postinc2
  7838  0018C6  4A19               	infsnz	i2read_colorsensor@i,f,c
  7839  0018C8  2A1A               	incf	i2read_colorsensor@i+1,f,c
  7840  0018CA  D7C5               	goto	i2l4489
  7841  0018CC                     i2l389:
  7842  0018CC  0012               	return		;funcret
  7843  0018CE                     __end_ofi2_read_colorsensor:
  7844                           	opt stack 0
  7845                           pclatu	equ	0xFFB
  7846                           pclath	equ	0xFFA
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           intcon2	equ	0xFF1
  7855                           intcon3	equ	0xFF0
  7856                           postinc0	equ	0xFEE
  7857                           fsr0h	equ	0xFEA
  7858                           fsr0l	equ	0xFE9
  7859                           wreg	equ	0xFE8
  7860                           indf1	equ	0xFE7
  7861                           fsr1h	equ	0xFE2
  7862                           fsr1l	equ	0xFE1
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           fsr2h	equ	0xFDA
  7867                           fsr2l	equ	0xFD9
  7868                           status	equ	0xFD8
  7869                           
  7870 ;; *************** function i2_printf *****************
  7871 ;; Defined at:
  7872 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7875 ;;		 -> STR_21(15), STR_20(16), STR_19(25), STR_18(24), 
  7876 ;;		 -> STR_17(23), STR_16(18), STR_15(23), STR_14(16), 
  7877 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  7878 ;;		 -> STR_9(17), STR_8(17), STR_7(23), STR_6(23), 
  7879 ;;		 -> STR_5(3), STR_4(8), STR_3(13), STR_2(24), 
  7880 ;;		 -> STR_1(24), 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  printf          4    0        struct .
  7883 ;;  printf          3    0        PTR const unsigned char 
  7884 ;;  printf          2   31[COMRAM] int 
  7885 ;;  printf          2   28[COMRAM] unsigned int 
  7886 ;;  printf          2   25[COMRAM] PTR void [1]
  7887 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7888 ;;  printf          2    0        unsigned int 
  7889 ;;  printf          1   33[COMRAM] char 
  7890 ;;  printf          1   30[COMRAM] unsigned char 
  7891 ;;  printf          1   27[COMRAM] char 
  7892 ;;  printf          1   24[COMRAM] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  2   12[COMRAM] int 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;Total ram usage:       22 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:    2
  7909 ;; This function calls:
  7910 ;;		i2___lwdiv
  7911 ;;		i2___lwmod
  7912 ;;		i2___wmul
  7913 ;;		i2_isdigit
  7914 ;;		i2_putch
  7915 ;; This function is called by:
  7916 ;;		_isr
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text33
  7921  000AD0                     __ptext33:
  7922                           	opt stack 0
  7923  000AD0                     i2_printf:
  7924                           	opt stack 23
  7925                           
  7926                           ;doprnt.c: 466: va_list ap;
  7927                           ;doprnt.c: 499: signed char c;
  7928                           ;doprnt.c: 501: int width;
  7929                           ;doprnt.c: 506: signed char prec;
  7930                           ;doprnt.c: 508: unsigned char flag;
  7931                           ;doprnt.c: 523: union {
  7932                           ;doprnt.c: 524: unsigned long vd;
  7933                           ;doprnt.c: 525: double integ;
  7934                           ;doprnt.c: 526: } tmpval;
  7935                           ;doprnt.c: 528: unsigned int val;
  7936                           ;doprnt.c: 529: unsigned len;
  7937                           ;doprnt.c: 530: const char * cp;
  7938                           ;doprnt.c: 533: *ap = __va_start();
  7939                           
  7940                           ;incstack = 0
  7941  000AD0  0E0F               	movlw	low (?i2_printf+2)
  7942  000AD2  6E1A               	movwf	i2printf@ap,c
  7943  000AD4  0E00               	movlw	high (?i2_printf+2)
  7944  000AD6  6E1B               	movwf	i2printf@ap+1,c
  7945                           
  7946                           ;doprnt.c: 536: while(c = *f++) {
  7947  000AD8  D184               	goto	i2l4631
  7948  000ADA                     i2l4501:
  7949                           
  7950                           ;doprnt.c: 538: if(c != '%')
  7951  000ADA  0E25               	movlw	37
  7952  000ADC  1822               	xorwf	i2printf@c,w,c
  7953  000ADE  B4D8               	btfsc	status,2,c
  7954  000AE0  D004               	goto	i2l4505
  7955                           
  7956                           ;doprnt.c: 540: {
  7957                           ;doprnt.c: 541: (putch(c) );
  7958  000AE2  5022               	movf	i2printf@c,w,c
  7959  000AE4  EC5B  F017         	call	i2_putch
  7960                           
  7961                           ;doprnt.c: 542: continue;
  7962  000AE8  D17C               	goto	i2l4631
  7963  000AEA                     i2l4505:
  7964                           
  7965                           ;doprnt.c: 543: }
  7966                           ;doprnt.c: 546: width = 0;
  7967  000AEA  0E00               	movlw	0
  7968  000AEC  6E21               	movwf	i2printf@width+1,c
  7969  000AEE  0E00               	movlw	0
  7970  000AF0  6E20               	movwf	i2printf@width,c
  7971                           
  7972                           ;doprnt.c: 548: flag = 0;
  7973  000AF2  0E00               	movlw	0
  7974  000AF4  6E1F               	movwf	i2printf@flag,c
  7975                           
  7976                           ;doprnt.c: 551: switch(*f) {
  7977                           
  7978                           ;doprnt.c: 550: for(;;) {
  7979  000AF6  D003               	goto	i2l4511
  7980  000AF8                     i2l4507:
  7981                           
  7982                           ;doprnt.c: 580: flag |= 0x04;
  7983  000AF8  841F               	bsf	i2printf@flag,2,c
  7984                           
  7985                           ;doprnt.c: 581: f++;
  7986  000AFA  4A0D               	infsnz	i2printf@f,f,c
  7987  000AFC  2A0E               	incf	i2printf@f+1,f,c
  7988  000AFE                     i2l4511:
  7989  000AFE  C00D  FFF6         	movff	i2printf@f,tblptrl
  7990  000B02  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7991  000B06                     	if	0	;tblptru may be non-zero
  7992  000B06                     	endif
  7993  000B06                     	if	0	;tblptru may be non-zero
  7994  000B06                     	endif
  7995  000B06  0008               	tblrd		*
  7996  000B08  50F5               	movf	tablat,w,c
  7997                           
  7998                           ; Switch size 1, requested type "space"
  7999                           ; Number of cases is 1, Range of values is 48 to 48
  8000                           ; switch strategies available:
  8001                           ; Name         Instructions Cycles
  8002                           ; simple_byte            4     3 (average)
  8003                           ;	Chosen strategy is simple_byte
  8004  000B0A  0A30               	xorlw	48	; case 48
  8005  000B0C  B4D8               	btfsc	status,2,c
  8006  000B0E  D7F4               	goto	i2l4507
  8007                           
  8008                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8009                           
  8010                           ;doprnt.c: 586: }
  8011                           
  8012                           ;doprnt.c: 585: break;
  8013  000B10  C00D  FFF6         	movff	i2printf@f,tblptrl
  8014  000B14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8015  000B18                     	if	0	;tblptru may be non-zero
  8016  000B18                     	endif
  8017  000B18                     	if	0	;tblptru may be non-zero
  8018  000B18                     	endif
  8019  000B18  0008               	tblrd		*
  8020  000B1A  50F5               	movf	tablat,w,c
  8021  000B1C  EC1D  F017         	call	i2_isdigit
  8022  000B20  A0D8               	btfss	status,0,c
  8023  000B22  D038               	goto	i2l4531
  8024                           
  8025                           ;doprnt.c: 598: width = 0;
  8026  000B24  0E00               	movlw	0
  8027  000B26  6E21               	movwf	i2printf@width+1,c
  8028  000B28  0E00               	movlw	0
  8029  000B2A  6E20               	movwf	i2printf@width,c
  8030  000B2C                     i2l4517:
  8031                           
  8032                           ;doprnt.c: 600: width *= 10;
  8033  000B2C  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
  8034  000B30  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8035  000B34  0E00               	movlw	0
  8036  000B36  6E04               	movwf	i2___wmul@multiplicand+1,c
  8037  000B38  0E0A               	movlw	10
  8038  000B3A  6E03               	movwf	i2___wmul@multiplicand,c
  8039  000B3C  ECE7  F016         	call	i2___wmul	;wreg free
  8040  000B40  C001  F020         	movff	?i2___wmul,i2printf@width
  8041  000B44  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
  8042                           
  8043                           ;doprnt.c: 601: width += *f++ - '0';
  8044  000B48  0ED0               	movlw	208
  8045  000B4A  6E15               	movwf	??i2_printf& (0+255),c
  8046  000B4C  0EFF               	movlw	255
  8047  000B4E  6E16               	movwf	(??i2_printf+1)& (0+255),c
  8048  000B50  C00D  FFF6         	movff	i2printf@f,tblptrl
  8049  000B54  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8050  000B58                     	if	0	;tblptru may be non-zero
  8051  000B58                     	endif
  8052  000B58                     	if	0	;tblptru may be non-zero
  8053  000B58                     	endif
  8054  000B58  0008               	tblrd		*
  8055  000B5A  50F5               	movf	tablat,w,c
  8056  000B5C  6E17               	movwf	(??i2_printf+2)& (0+255),c
  8057  000B5E  6A18               	clrf	(??i2_printf+3)& (0+255),c
  8058  000B60  5015               	movf	??i2_printf,w,c
  8059  000B62  2617               	addwf	??i2_printf+2,f,c
  8060  000B64  5016               	movf	??i2_printf+1,w,c
  8061  000B66  2218               	addwfc	??i2_printf+3,f,c
  8062  000B68  5017               	movf	??i2_printf+2,w,c
  8063  000B6A  2620               	addwf	i2printf@width,f,c
  8064  000B6C  5018               	movf	??i2_printf+3,w,c
  8065  000B6E  2221               	addwfc	i2printf@width+1,f,c
  8066  000B70  4A0D               	infsnz	i2printf@f,f,c
  8067  000B72  2A0E               	incf	i2printf@f+1,f,c
  8068                           
  8069                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8070  000B74  C00D  FFF6         	movff	i2printf@f,tblptrl
  8071  000B78  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8072  000B7C                     	if	0	;tblptru may be non-zero
  8073  000B7C                     	endif
  8074  000B7C                     	if	0	;tblptru may be non-zero
  8075  000B7C                     	endif
  8076  000B7C  0008               	tblrd		*
  8077  000B7E  50F5               	movf	tablat,w,c
  8078  000B80  EC1D  F017         	call	i2_isdigit
  8079  000B84  A0D8               	btfss	status,0,c
  8080  000B86  D006               	goto	i2l4531
  8081  000B88  D7D1               	goto	i2l4517
  8082  000B8A                     i2l4525:
  8083                           
  8084                           ;doprnt.c: 721: flag |= 0x80;
  8085  000B8A  8E1F               	bsf	i2printf@flag,7,c
  8086                           
  8087                           ;doprnt.c: 723: break;
  8088  000B8C  D01D               	goto	i2l4533
  8089  000B8E                     i2l4527:
  8090                           
  8091                           ;doprnt.c: 818: flag |= 0xC0;
  8092  000B8E  0EC0               	movlw	192
  8093  000B90  121F               	iorwf	i2printf@flag,f,c
  8094                           
  8095                           ;doprnt.c: 822: }
  8096                           
  8097                           ;doprnt.c: 819: break;
  8098  000B92  D01A               	goto	i2l4533
  8099  000B94                     i2l4531:
  8100  000B94  C00D  FFF6         	movff	i2printf@f,tblptrl
  8101  000B98  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8102  000B9C  4A0D               	infsnz	i2printf@f,f,c
  8103  000B9E  2A0E               	incf	i2printf@f+1,f,c
  8104  000BA0                     	if	0	;tblptru may be non-zero
  8105  000BA0                     	endif
  8106  000BA0                     	if	0	;tblptru may be non-zero
  8107  000BA0                     	endif
  8108  000BA0  0008               	tblrd		*
  8109  000BA2  CFF5 F022          	movff	tablat,i2printf@c
  8110  000BA6  5022               	movf	i2printf@c,w,c
  8111                           
  8112                           ; Switch size 1, requested type "space"
  8113                           ; Number of cases is 5, Range of values is 0 to 120
  8114                           ; switch strategies available:
  8115                           ; Name         Instructions Cycles
  8116                           ; simple_byte           16     9 (average)
  8117                           ;	Chosen strategy is simple_byte
  8118  000BA8  0A00               	xorlw	0	; case 0
  8119  000BAA  B4D8               	btfsc	status,2,c
  8120  000BAC  0012               	return	
  8121  000BAE  0A64               	xorlw	100	; case 100
  8122  000BB0  B4D8               	btfsc	status,2,c
  8123  000BB2  D00A               	goto	i2l4533
  8124  000BB4  0A0D               	xorlw	13	; case 105
  8125  000BB6  B4D8               	btfsc	status,2,c
  8126  000BB8  D007               	goto	i2l4533
  8127  000BBA  0A1C               	xorlw	28	; case 117
  8128  000BBC  B4D8               	btfsc	status,2,c
  8129  000BBE  D7E7               	goto	i2l4527
  8130  000BC0  0A0D               	xorlw	13	; case 120
  8131  000BC2  B4D8               	btfsc	status,2,c
  8132  000BC4  D7E2               	goto	i2l4525
  8133  000BC6  D10D               	goto	i2l4631
  8134  000BC8                     i2l4533:
  8135                           
  8136                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8137  000BC8  C01F  F015         	movff	i2printf@flag,??i2_printf
  8138  000BCC  0EC0               	movlw	192
  8139  000BCE  1615               	andwf	??i2_printf,f,c
  8140  000BD0  A4D8               	btfss	status,2,c
  8141  000BD2  D015               	goto	i2l4545
  8142                           
  8143                           ;doprnt.c: 1253: {
  8144                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8145  000BD4  C01A  FFD9         	movff	i2printf@ap,fsr2l
  8146  000BD8  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
  8147  000BDC  CFDE F01D          	movff	postinc2,i2printf@val
  8148  000BE0  CFDD F01E          	movff	postdec2,i2printf@val+1
  8149  000BE4  0E02               	movlw	2
  8150  000BE6  261A               	addwf	i2printf@ap,f,c
  8151  000BE8  0E00               	movlw	0
  8152  000BEA  221B               	addwfc	i2printf@ap+1,f,c
  8153                           
  8154                           ;doprnt.c: 1261: if((int)val < 0) {
  8155  000BEC  AE1E               	btfss	i2printf@val+1,7,c
  8156  000BEE  D044               	goto	i2l4579
  8157                           
  8158                           ;doprnt.c: 1262: flag |= 0x03;
  8159  000BF0  0E03               	movlw	3
  8160  000BF2  121F               	iorwf	i2printf@flag,f,c
  8161                           
  8162                           ;doprnt.c: 1263: val = -val;
  8163  000BF4  6C1D               	negf	i2printf@val,c
  8164  000BF6  1E1E               	comf	i2printf@val+1,f,c
  8165  000BF8  B0D8               	btfsc	status,0,c
  8166  000BFA  2A1E               	incf	i2printf@val+1,f,c
  8167                           
  8168                           ;doprnt.c: 1264: }
  8169                           ;doprnt.c: 1266: }
  8170  000BFC  D03D               	goto	i2l4579
  8171  000BFE                     i2l4545:
  8172                           
  8173                           ;doprnt.c: 1268: else
  8174                           ;doprnt.c: 1273: {
  8175                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8176  000BFE  C01A  FFD9         	movff	i2printf@ap,fsr2l
  8177  000C02  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
  8178  000C06  CFDE F01D          	movff	postinc2,i2printf@val
  8179  000C0A  CFDD F01E          	movff	postdec2,i2printf@val+1
  8180  000C0E  0E02               	movlw	2
  8181  000C10  261A               	addwf	i2printf@ap,f,c
  8182  000C12  0E00               	movlw	0
  8183  000C14  221B               	addwfc	i2printf@ap+1,f,c
  8184                           
  8185                           ;doprnt.c: 1287: }
  8186                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8187  000C16  D030               	goto	i2l4579
  8188  000C18                     i2l4549:
  8189                           
  8190                           ;doprnt.c: 1302: case 0xC0:
  8191                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8192  000C18  0E01               	movlw	1
  8193  000C1A  6E22               	movwf	i2printf@c,c
  8194  000C1C                     i2l4551:
  8195  000C1C  0E05               	movlw	5
  8196  000C1E  1822               	xorwf	i2printf@c,w,c
  8197  000C20  B4D8               	btfsc	status,2,c
  8198  000C22  D035               	goto	i2l4581
  8199                           
  8200                           ;doprnt.c: 1306: if(val < dpowers[c])
  8201  000C24  5022               	movf	i2printf@c,w,c
  8202  000C26  0D02               	mullw	2
  8203  000C28  0E20               	movlw	low _dpowers
  8204  000C2A  24F3               	addwf	prodl,w,c
  8205  000C2C  6EF6               	movwf	tblptrl,c
  8206  000C2E  0EFE               	movlw	high _dpowers
  8207  000C30  20F4               	addwfc	prodh,w,c
  8208  000C32  6EF7               	movwf	tblptrh,c
  8209  000C34                     	if	0	;There are less than 3 active tblptr bytes
  8210  000C34                     	endif
  8211  000C34  0009               	tblrd		*+
  8212  000C36  50F5               	movf	tablat,w,c
  8213  000C38  5C1D               	subwf	i2printf@val,w,c
  8214  000C3A  0009               	tblrd		*+
  8215  000C3C  50F5               	movf	tablat,w,c
  8216  000C3E  581E               	subwfb	i2printf@val+1,w,c
  8217  000C40  A0D8               	btfss	status,0,c
  8218  000C42  D025               	goto	i2l4581
  8219                           
  8220                           ;doprnt.c: 1307: break;
  8221  000C44  2A22               	incf	i2printf@c,f,c
  8222  000C46  D7EA               	goto	i2l4551
  8223  000C48                     i2l4563:
  8224                           
  8225                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8226  000C48  0E01               	movlw	1
  8227  000C4A  6E22               	movwf	i2printf@c,c
  8228  000C4C                     i2l4565:
  8229  000C4C  0E04               	movlw	4
  8230  000C4E  1822               	xorwf	i2printf@c,w,c
  8231  000C50  B4D8               	btfsc	status,2,c
  8232  000C52  D01D               	goto	i2l4581
  8233                           
  8234                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8235  000C54  5022               	movf	i2printf@c,w,c
  8236  000C56  0D02               	mullw	2
  8237  000C58  0E2A               	movlw	low _hexpowers
  8238  000C5A  24F3               	addwf	prodl,w,c
  8239  000C5C  6EF6               	movwf	tblptrl,c
  8240  000C5E  0EFE               	movlw	high _hexpowers
  8241  000C60  20F4               	addwfc	prodh,w,c
  8242  000C62  6EF7               	movwf	tblptrh,c
  8243  000C64                     	if	0	;There are less than 3 active tblptr bytes
  8244  000C64                     	endif
  8245  000C64  0009               	tblrd		*+
  8246  000C66  50F5               	movf	tablat,w,c
  8247  000C68  5C1D               	subwf	i2printf@val,w,c
  8248  000C6A  0009               	tblrd		*+
  8249  000C6C  50F5               	movf	tablat,w,c
  8250  000C6E  581E               	subwfb	i2printf@val+1,w,c
  8251  000C70  A0D8               	btfss	status,0,c
  8252  000C72  D00D               	goto	i2l4581
  8253                           
  8254                           ;doprnt.c: 1318: break;
  8255  000C74  2A22               	incf	i2printf@c,f,c
  8256  000C76  D7EA               	goto	i2l4565
  8257  000C78                     i2l4579:
  8258  000C78  501F               	movf	i2printf@flag,w,c
  8259  000C7A  0BC0               	andlw	192
  8260                           
  8261                           ; Switch size 1, requested type "space"
  8262                           ; Number of cases is 3, Range of values is 0 to 192
  8263                           ; switch strategies available:
  8264                           ; Name         Instructions Cycles
  8265                           ; simple_byte           10     6 (average)
  8266                           ;	Chosen strategy is simple_byte
  8267  000C7C  0A00               	xorlw	0	; case 0
  8268  000C7E  B4D8               	btfsc	status,2,c
  8269  000C80  D7CB               	goto	i2l4549
  8270  000C82  0A80               	xorlw	128	; case 128
  8271  000C84  B4D8               	btfsc	status,2,c
  8272  000C86  D7E0               	goto	i2l4563
  8273  000C88  0A40               	xorlw	64	; case 192
  8274  000C8A  B4D8               	btfsc	status,2,c
  8275  000C8C  D7C5               	goto	i2l4549
  8276  000C8E                     i2l4581:
  8277                           
  8278                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8279  000C8E  5020               	movf	i2printf@width,w,c
  8280  000C90  1021               	iorwf	i2printf@width+1,w,c
  8281  000C92  B4D8               	btfsc	status,2,c
  8282  000C94  D009               	goto	i2l4587
  8283  000C96  C01F  F015         	movff	i2printf@flag,??i2_printf
  8284  000C9A  0E03               	movlw	3
  8285  000C9C  1615               	andwf	??i2_printf,f,c
  8286  000C9E  B4D8               	btfsc	status,2,c
  8287  000CA0  D003               	goto	i2l4587
  8288                           
  8289                           ;doprnt.c: 1346: width--;
  8290  000CA2  0620               	decf	i2printf@width,f,c
  8291  000CA4  A0D8               	btfss	status,0,c
  8292  000CA6  0621               	decf	i2printf@width+1,f,c
  8293  000CA8                     i2l4587:
  8294                           
  8295                           ;doprnt.c: 1381: if(width > c)
  8296  000CA8  0E80               	movlw	128
  8297  000CAA  BE22               	btfsc	i2printf@c,7,c
  8298  000CAC  0E7F               	movlw	127
  8299  000CAE  6E15               	movwf	??i2_printf& (0+255),c
  8300  000CB0  5020               	movf	i2printf@width,w,c
  8301  000CB2  5C22               	subwf	i2printf@c,w,c
  8302  000CB4  5021               	movf	i2printf@width+1,w,c
  8303  000CB6  0A80               	xorlw	128
  8304  000CB8  5815               	subwfb	??i2_printf& (0+255),w,c
  8305  000CBA  B0D8               	btfsc	status,0,c
  8306  000CBC  D007               	goto	i2l4591
  8307                           
  8308                           ;doprnt.c: 1382: width -= c;
  8309  000CBE  5022               	movf	i2printf@c,w,c
  8310  000CC0  5E20               	subwf	i2printf@width,f,c
  8311  000CC2  0E00               	movlw	0
  8312  000CC4  BE22               	btfsc	i2printf@c,7,c
  8313  000CC6  0EFF               	movlw	255
  8314  000CC8  5A21               	subwfb	i2printf@width+1,f,c
  8315  000CCA  D004               	goto	i2l4593
  8316  000CCC                     i2l4591:
  8317                           
  8318                           ;doprnt.c: 1383: else
  8319                           ;doprnt.c: 1384: width = 0;
  8320  000CCC  0E00               	movlw	0
  8321  000CCE  6E21               	movwf	i2printf@width+1,c
  8322  000CD0  0E00               	movlw	0
  8323  000CD2  6E20               	movwf	i2printf@width,c
  8324  000CD4                     i2l4593:
  8325                           
  8326                           ;doprnt.c: 1387: if(flag & 0x04) {
  8327  000CD4  A41F               	btfss	i2printf@flag,2,c
  8328  000CD6  D014               	goto	i2l4605
  8329                           
  8330                           ;doprnt.c: 1392: if(flag & 0x03)
  8331  000CD8  C01F  F015         	movff	i2printf@flag,??i2_printf
  8332  000CDC  0E03               	movlw	3
  8333  000CDE  1615               	andwf	??i2_printf,f,c
  8334  000CE0  B4D8               	btfsc	status,2,c
  8335  000CE2  D003               	goto	i2l4599
  8336                           
  8337                           ;doprnt.c: 1393: (putch('-') );
  8338  000CE4  0E2D               	movlw	45
  8339  000CE6  EC5B  F017         	call	i2_putch
  8340  000CEA                     i2l4599:
  8341                           
  8342                           ;doprnt.c: 1415: if(width)
  8343  000CEA  5020               	movf	i2printf@width,w,c
  8344  000CEC  1021               	iorwf	i2printf@width+1,w,c
  8345  000CEE  B4D8               	btfsc	status,2,c
  8346  000CF0  D01E               	goto	i2l4615
  8347                           
  8348                           ;doprnt.c: 1417: (putch('0') );
  8349                           
  8350                           ;doprnt.c: 1416: do
  8351  000CF2  0E30               	movlw	48
  8352  000CF4  EC5B  F017         	call	i2_putch
  8353                           
  8354                           ;doprnt.c: 1418: while(--width);
  8355  000CF8  0620               	decf	i2printf@width,f,c
  8356  000CFA  A0D8               	btfss	status,0,c
  8357  000CFC  0621               	decf	i2printf@width+1,f,c
  8358  000CFE  D7F5               	goto	i2l4599
  8359  000D00                     i2l4605:
  8360                           
  8361                           ;doprnt.c: 1422: {
  8362                           ;doprnt.c: 1424: if(width
  8363                           ;doprnt.c: 1428: )
  8364  000D00  5020               	movf	i2printf@width,w,c
  8365  000D02  1021               	iorwf	i2printf@width+1,w,c
  8366  000D04  B4D8               	btfsc	status,2,c
  8367  000D06  D00A               	goto	i2l4611
  8368  000D08                     i2l4607:
  8369                           
  8370                           ;doprnt.c: 1430: (putch(' ') );
  8371  000D08  0E20               	movlw	32
  8372  000D0A  EC5B  F017         	call	i2_putch
  8373                           
  8374                           ;doprnt.c: 1431: while(--width);
  8375  000D0E  0620               	decf	i2printf@width,f,c
  8376  000D10  A0D8               	btfss	status,0,c
  8377  000D12  0621               	decf	i2printf@width+1,f,c
  8378  000D14  5020               	movf	i2printf@width,w,c
  8379  000D16  1021               	iorwf	i2printf@width+1,w,c
  8380  000D18  A4D8               	btfss	status,2,c
  8381  000D1A  D7F6               	goto	i2l4607
  8382  000D1C                     i2l4611:
  8383                           
  8384                           ;doprnt.c: 1438: if(flag & 0x03)
  8385  000D1C  C01F  F015         	movff	i2printf@flag,??i2_printf
  8386  000D20  0E03               	movlw	3
  8387  000D22  1615               	andwf	??i2_printf,f,c
  8388  000D24  B4D8               	btfsc	status,2,c
  8389  000D26  D003               	goto	i2l4615
  8390                           
  8391                           ;doprnt.c: 1439: (putch('-') );
  8392  000D28  0E2D               	movlw	45
  8393  000D2A  EC5B  F017         	call	i2_putch
  8394  000D2E                     i2l4615:
  8395                           
  8396                           ;doprnt.c: 1469: }
  8397                           ;doprnt.c: 1472: prec = c;
  8398  000D2E  C022  F01C         	movff	i2printf@c,i2printf@prec
  8399                           
  8400                           ;doprnt.c: 1474: while(prec--) {
  8401  000D32  D053               	goto	i2l4629
  8402  000D34                     i2l4617:
  8403                           
  8404                           ;doprnt.c: 1486: case 0xC0:
  8405                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8406  000D34  501C               	movf	i2printf@prec,w,c
  8407  000D36  0D02               	mullw	2
  8408  000D38  0E20               	movlw	low _dpowers
  8409  000D3A  24F3               	addwf	prodl,w,c
  8410  000D3C  6EF6               	movwf	tblptrl,c
  8411  000D3E  0EFE               	movlw	high _dpowers
  8412  000D40  20F4               	addwfc	prodh,w,c
  8413  000D42  6EF7               	movwf	tblptrh,c
  8414  000D44                     	if	0	;There are less than 3 active tblptr bytes
  8415  000D44                     	endif
  8416  000D44  0009               	tblrd		*+
  8417  000D46  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8418  000D4A  000A               	tblrd		*-
  8419  000D4C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8420  000D50  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8421  000D54  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8422  000D58  EC3D  F015         	call	i2___lwdiv	;wreg free
  8423  000D5C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8424  000D60  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8425  000D64  0E00               	movlw	0
  8426  000D66  6E0B               	movwf	i2___lwmod@divisor+1,c
  8427  000D68  0E0A               	movlw	10
  8428  000D6A  6E0A               	movwf	i2___lwmod@divisor,c
  8429  000D6C  ECD7  F015         	call	i2___lwmod	;wreg free
  8430  000D70  5008               	movf	?i2___lwmod,w,c
  8431  000D72  0F30               	addlw	48
  8432  000D74  6E22               	movwf	i2printf@c,c
  8433                           
  8434                           ;doprnt.c: 1491: break;
  8435  000D76  D02E               	goto	i2l4627
  8436  000D78                     i2l4619:
  8437                           
  8438                           ;doprnt.c: 1499: {
  8439                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8440  000D78  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8441  000D7C  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8442  000D80  501C               	movf	i2printf@prec,w,c
  8443  000D82  0D02               	mullw	2
  8444  000D84  0E2A               	movlw	low _hexpowers
  8445  000D86  24F3               	addwf	prodl,w,c
  8446  000D88  6EF6               	movwf	tblptrl,c
  8447  000D8A  0EFE               	movlw	high _hexpowers
  8448  000D8C  20F4               	addwfc	prodh,w,c
  8449  000D8E  6EF7               	movwf	tblptrh,c
  8450  000D90                     	if	0	;There are less than 3 active tblptr bytes
  8451  000D90                     	endif
  8452  000D90  0009               	tblrd		*+
  8453  000D92  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8454  000D96  000A               	tblrd		*-
  8455  000D98  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8456  000D9C  EC3D  F015         	call	i2___lwdiv	;wreg free
  8457  000DA0  5001               	movf	?i2___lwdiv,w,c
  8458  000DA2  0B0F               	andlw	15
  8459  000DA4  6E19               	movwf	i2printf@idx,c
  8460                           
  8461                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8462  000DA6  5019               	movf	i2printf@idx,w,c
  8463  000DA8  0D01               	mullw	1
  8464  000DAA  0E41               	movlw	low STR_22
  8465  000DAC  24F3               	addwf	prodl,w,c
  8466  000DAE  6EF6               	movwf	tblptrl,c
  8467  000DB0  0EFF               	movlw	high STR_22
  8468  000DB2  20F4               	addwfc	prodh,w,c
  8469  000DB4  6EF7               	movwf	tblptrh,c
  8470  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  8471  000DB6                     	endif
  8472  000DB6  0008               	tblrd		*
  8473  000DB8  CFF5 F022          	movff	tablat,i2printf@c
  8474                           
  8475                           ;doprnt.c: 1523: }
  8476                           
  8477                           ;doprnt.c: 1508: }
  8478                           ;doprnt.c: 1510: break;
  8479  000DBC  D00B               	goto	i2l4627
  8480  000DBE                     i2l4625:
  8481  000DBE  501F               	movf	i2printf@flag,w,c
  8482  000DC0  0BC0               	andlw	192
  8483                           
  8484                           ; Switch size 1, requested type "space"
  8485                           ; Number of cases is 3, Range of values is 0 to 192
  8486                           ; switch strategies available:
  8487                           ; Name         Instructions Cycles
  8488                           ; simple_byte           10     6 (average)
  8489                           ;	Chosen strategy is simple_byte
  8490  000DC2  0A00               	xorlw	0	; case 0
  8491  000DC4  B4D8               	btfsc	status,2,c
  8492  000DC6  D7B6               	goto	i2l4617
  8493  000DC8  0A80               	xorlw	128	; case 128
  8494  000DCA  B4D8               	btfsc	status,2,c
  8495  000DCC  D7D5               	goto	i2l4619
  8496  000DCE  0A40               	xorlw	64	; case 192
  8497  000DD0  B4D8               	btfsc	status,2,c
  8498  000DD2  D7B0               	goto	i2l4617
  8499  000DD4                     i2l4627:
  8500                           
  8501                           ;doprnt.c: 1524: (putch(c) );
  8502  000DD4  5022               	movf	i2printf@c,w,c
  8503  000DD6  EC5B  F017         	call	i2_putch
  8504  000DDA                     i2l4629:
  8505  000DDA  061C               	decf	i2printf@prec,f,c
  8506  000DDC  281C               	incf	i2printf@prec,w,c
  8507  000DDE  A4D8               	btfss	status,2,c
  8508  000DE0  D7EE               	goto	i2l4625
  8509  000DE2                     i2l4631:
  8510  000DE2  C00D  FFF6         	movff	i2printf@f,tblptrl
  8511  000DE6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8512  000DEA  4A0D               	infsnz	i2printf@f,f,c
  8513  000DEC  2A0E               	incf	i2printf@f+1,f,c
  8514  000DEE                     	if	0	;tblptru may be non-zero
  8515  000DEE                     	endif
  8516  000DEE                     	if	0	;tblptru may be non-zero
  8517  000DEE                     	endif
  8518  000DEE  0008               	tblrd		*
  8519  000DF0  CFF5 F022          	movff	tablat,i2printf@c
  8520  000DF4  5022               	movf	i2printf@c,w,c
  8521  000DF6  B4D8               	btfsc	status,2,c
  8522  000DF8  0012               	return	
  8523  000DFA  D66F               	goto	i2l4501
  8524  000DFC                     __end_ofi2_printf:
  8525                           	opt stack 0
  8526                           pclatu	equ	0xFFB
  8527                           pclath	equ	0xFFA
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           intcon3	equ	0xFF0
  8537                           postinc0	equ	0xFEE
  8538                           fsr0h	equ	0xFEA
  8539                           fsr0l	equ	0xFE9
  8540                           wreg	equ	0xFE8
  8541                           indf1	equ	0xFE7
  8542                           fsr1h	equ	0xFE2
  8543                           fsr1l	equ	0xFE1
  8544                           indf2	equ	0xFDF
  8545                           postinc2	equ	0xFDE
  8546                           postdec2	equ	0xFDD
  8547                           fsr2h	equ	0xFDA
  8548                           fsr2l	equ	0xFD9
  8549                           status	equ	0xFD8
  8550                           
  8551 ;; *************** function i2_putch *****************
  8552 ;; Defined at:
  8553 ;;		line 31 in file "lcd.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;  data            1    wreg     unsigned char 
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;  data            1    2[COMRAM] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      void 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:        1 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    1
  8574 ;; This function calls:
  8575 ;;		i2_lcdNibble
  8576 ;; This function is called by:
  8577 ;;		i2_printf
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text34
  8582  002EB6                     __ptext34:
  8583                           	opt stack 0
  8584  002EB6                     i2_putch:
  8585                           	opt stack 23
  8586                           
  8587                           ;incstack = 0
  8588                           ;i2putch@data stored from wreg
  8589  002EB6  6E03               	movwf	i2putch@data,c
  8590                           
  8591                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8592  002EB8  848C               	bsf	3980,2,c	;volatile
  8593                           
  8594                           ;lcd.c: 33: lcdNibble(data);
  8595  002EBA  5003               	movf	i2putch@data,w,c
  8596  002EBC  EC8E  F015         	call	i2_lcdNibble
  8597  002EC0  0012               	return		;funcret
  8598  002EC2                     __end_ofi2_putch:
  8599                           	opt stack 0
  8600                           pclatu	equ	0xFFB
  8601                           pclath	equ	0xFFA
  8602                           tblptru	equ	0xFF8
  8603                           tblptrh	equ	0xFF7
  8604                           tblptrl	equ	0xFF6
  8605                           tablat	equ	0xFF5
  8606                           prodh	equ	0xFF4
  8607                           prodl	equ	0xFF3
  8608                           intcon	equ	0xFF2
  8609                           intcon2	equ	0xFF1
  8610                           intcon3	equ	0xFF0
  8611                           postinc0	equ	0xFEE
  8612                           fsr0h	equ	0xFEA
  8613                           fsr0l	equ	0xFE9
  8614                           wreg	equ	0xFE8
  8615                           indf1	equ	0xFE7
  8616                           fsr1h	equ	0xFE2
  8617                           fsr1l	equ	0xFE1
  8618                           indf2	equ	0xFDF
  8619                           postinc2	equ	0xFDE
  8620                           postdec2	equ	0xFDD
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8
  8624                           
  8625 ;; *************** function i2_isdigit *****************
  8626 ;; Defined at:
  8627 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  c               1    wreg     unsigned char 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  c               1    2[COMRAM] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg, status,2, status,0
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;Total ram usage:        3 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		i2_printf
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text35
  8655  002E3A                     __ptext35:
  8656                           	opt stack 0
  8657  002E3A                     i2_isdigit:
  8658                           	opt stack 24
  8659                           
  8660                           ;incstack = 0
  8661                           ;i2isdigit@c stored from wreg
  8662  002E3A  6E03               	movwf	i2isdigit@c,c
  8663  002E3C  0E00               	movlw	0
  8664  002E3E  6E02               	movwf	i2_isdigit$797,c
  8665  002E40  0E3A               	movlw	58
  8666  002E42  6003               	cpfslt	i2isdigit@c,c
  8667  002E44  D005               	goto	i2l4121
  8668  002E46  0E2F               	movlw	47
  8669  002E48  6403               	cpfsgt	i2isdigit@c,c
  8670  002E4A  D002               	goto	i2l4121
  8671  002E4C  0E01               	movlw	1
  8672  002E4E  6E02               	movwf	i2_isdigit$797,c
  8673  002E50                     i2l4121:
  8674  002E50  C002  F001         	movff	i2_isdigit$797,??i2_isdigit
  8675  002E54  3001               	rrcf	??i2_isdigit,w,c
  8676  002E56  0012               	return	
  8677  002E58                     __end_ofi2_isdigit:
  8678                           	opt stack 0
  8679                           pclatu	equ	0xFFB
  8680                           pclath	equ	0xFFA
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           intcon2	equ	0xFF1
  8689                           intcon3	equ	0xFF0
  8690                           postinc0	equ	0xFEE
  8691                           fsr0h	equ	0xFEA
  8692                           fsr0l	equ	0xFE9
  8693                           wreg	equ	0xFE8
  8694                           indf1	equ	0xFE7
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function i2___lwmod *****************
  8705 ;; Defined at:
  8706 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  dividend        2    7[COMRAM] unsigned int 
  8709 ;;  divisor         2    9[COMRAM] unsigned int 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  2    7[COMRAM] unsigned int 
  8714 ;; Registers used:
  8715 ;;		wreg, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8721 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;Total ram usage:        5 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		i2_printf
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text36
  8735  002BAE                     __ptext36:
  8736                           	opt stack 0
  8737  002BAE                     i2___lwmod:
  8738                           	opt stack 24
  8739                           
  8740                           ;incstack = 0
  8741  002BAE  500A               	movf	i2___lwmod@divisor,w,c
  8742  002BB0  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8743  002BB2  B4D8               	btfsc	status,2,c
  8744  002BB4  D018               	goto	i2l879
  8745  002BB6  0E01               	movlw	1
  8746  002BB8  6E0C               	movwf	i2___lwmod@counter,c
  8747  002BBA  D004               	goto	i2l4153
  8748  002BBC                     i2l4151:
  8749  002BBC  90D8               	bcf	status,0,c
  8750  002BBE  360A               	rlcf	i2___lwmod@divisor,f,c
  8751  002BC0  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8752  002BC2  2A0C               	incf	i2___lwmod@counter,f,c
  8753  002BC4                     i2l4153:
  8754  002BC4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8755  002BC6  D7FA               	goto	i2l4151
  8756  002BC8                     i2l4155:
  8757  002BC8  500A               	movf	i2___lwmod@divisor,w,c
  8758  002BCA  5C08               	subwf	i2___lwmod@dividend,w,c
  8759  002BCC  500B               	movf	i2___lwmod@divisor+1,w,c
  8760  002BCE  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8761  002BD0  A0D8               	btfss	status,0,c
  8762  002BD2  D004               	goto	i2l4159
  8763  002BD4  500A               	movf	i2___lwmod@divisor,w,c
  8764  002BD6  5E08               	subwf	i2___lwmod@dividend,f,c
  8765  002BD8  500B               	movf	i2___lwmod@divisor+1,w,c
  8766  002BDA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  8767  002BDC                     i2l4159:
  8768  002BDC  90D8               	bcf	status,0,c
  8769  002BDE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  8770  002BE0  320A               	rrcf	i2___lwmod@divisor,f,c
  8771  002BE2  2E0C               	decfsz	i2___lwmod@counter,f,c
  8772  002BE4  D7F1               	goto	i2l4155
  8773  002BE6                     i2l879:
  8774  002BE6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  8775  002BEA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  8776  002BEE  0012               	return		;funcret
  8777  002BF0                     __end_ofi2___lwmod:
  8778                           	opt stack 0
  8779                           pclatu	equ	0xFFB
  8780                           pclath	equ	0xFFA
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           intcon2	equ	0xFF1
  8789                           intcon3	equ	0xFF0
  8790                           postinc0	equ	0xFEE
  8791                           fsr0h	equ	0xFEA
  8792                           fsr0l	equ	0xFE9
  8793                           wreg	equ	0xFE8
  8794                           indf1	equ	0xFE7
  8795                           fsr1h	equ	0xFE2
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function i2___lwdiv *****************
  8805 ;; Defined at:
  8806 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  dividend        2    0[COMRAM] unsigned int 
  8809 ;;  divisor         2    2[COMRAM] unsigned int 
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  8812 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  2    0[COMRAM] unsigned int 
  8815 ;; Registers used:
  8816 ;;		wreg, status,2, status,0
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:        7 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		i2_printf
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text37
  8836  002A7A                     __ptext37:
  8837                           	opt stack 0
  8838  002A7A                     i2___lwdiv:
  8839                           	opt stack 24
  8840                           
  8841                           ;incstack = 0
  8842  002A7A  0E00               	movlw	0
  8843  002A7C  6E06               	movwf	i2___lwdiv@quotient+1,c
  8844  002A7E  0E00               	movlw	0
  8845  002A80  6E05               	movwf	i2___lwdiv@quotient,c
  8846  002A82  5003               	movf	i2___lwdiv@divisor,w,c
  8847  002A84  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  8848  002A86  B4D8               	btfsc	status,2,c
  8849  002A88  D01C               	goto	i2l869
  8850  002A8A  0E01               	movlw	1
  8851  002A8C  6E07               	movwf	i2___lwdiv@counter,c
  8852  002A8E  D004               	goto	i2l4133
  8853  002A90                     i2l4131:
  8854  002A90  90D8               	bcf	status,0,c
  8855  002A92  3603               	rlcf	i2___lwdiv@divisor,f,c
  8856  002A94  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  8857  002A96  2A07               	incf	i2___lwdiv@counter,f,c
  8858  002A98                     i2l4133:
  8859  002A98  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  8860  002A9A  D7FA               	goto	i2l4131
  8861  002A9C                     i2l4135:
  8862  002A9C  90D8               	bcf	status,0,c
  8863  002A9E  3605               	rlcf	i2___lwdiv@quotient,f,c
  8864  002AA0  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  8865  002AA2  5003               	movf	i2___lwdiv@divisor,w,c
  8866  002AA4  5C01               	subwf	i2___lwdiv@dividend,w,c
  8867  002AA6  5004               	movf	i2___lwdiv@divisor+1,w,c
  8868  002AA8  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  8869  002AAA  A0D8               	btfss	status,0,c
  8870  002AAC  D005               	goto	i2l4143
  8871  002AAE  5003               	movf	i2___lwdiv@divisor,w,c
  8872  002AB0  5E01               	subwf	i2___lwdiv@dividend,f,c
  8873  002AB2  5004               	movf	i2___lwdiv@divisor+1,w,c
  8874  002AB4  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  8875  002AB6  8005               	bsf	i2___lwdiv@quotient,0,c
  8876  002AB8                     i2l4143:
  8877  002AB8  90D8               	bcf	status,0,c
  8878  002ABA  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  8879  002ABC  3203               	rrcf	i2___lwdiv@divisor,f,c
  8880  002ABE  2E07               	decfsz	i2___lwdiv@counter,f,c
  8881  002AC0  D7ED               	goto	i2l4135
  8882  002AC2                     i2l869:
  8883  002AC2  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  8884  002AC6  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  8885  002ACA  0012               	return		;funcret
  8886  002ACC                     __end_ofi2___lwdiv:
  8887                           	opt stack 0
  8888                           pclatu	equ	0xFFB
  8889                           pclath	equ	0xFFA
  8890                           tblptru	equ	0xFF8
  8891                           tblptrh	equ	0xFF7
  8892                           tblptrl	equ	0xFF6
  8893                           tablat	equ	0xFF5
  8894                           prodh	equ	0xFF4
  8895                           prodl	equ	0xFF3
  8896                           intcon	equ	0xFF2
  8897                           intcon2	equ	0xFF1
  8898                           intcon3	equ	0xFF0
  8899                           postinc0	equ	0xFEE
  8900                           fsr0h	equ	0xFEA
  8901                           fsr0l	equ	0xFE9
  8902                           wreg	equ	0xFE8
  8903                           indf1	equ	0xFE7
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function i2_lcdInst *****************
  8914 ;; Defined at:
  8915 ;;		line 26 in file "lcd.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  data            1    wreg     unsigned char 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  data            1    2[COMRAM] unsigned char 
  8920 ;; Return value:  Size  Location     Type
  8921 ;;                  1    wreg      void 
  8922 ;; Registers used:
  8923 ;;		wreg, status,2, status,0, cstack
  8924 ;; Tracked objects:
  8925 ;;		On entry : 0/0
  8926 ;;		On exit  : 0/0
  8927 ;;		Unchanged: 0/0
  8928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;Total ram usage:        1 bytes
  8934 ;; Hardware stack levels used:    1
  8935 ;; Hardware stack levels required when called:    1
  8936 ;; This function calls:
  8937 ;;		i2_lcdNibble
  8938 ;; This function is called by:
  8939 ;;		_isr
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           	psect	text38
  8944  002EC2                     __ptext38:
  8945                           	opt stack 0
  8946  002EC2                     i2_lcdInst:
  8947                           	opt stack 24
  8948                           
  8949                           ;incstack = 0
  8950                           ;i2lcdInst@data stored from wreg
  8951  002EC2  6E03               	movwf	i2lcdInst@data,c
  8952                           
  8953                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  8954  002EC4  948C               	bcf	3980,2,c	;volatile
  8955                           
  8956                           ;lcd.c: 28: lcdNibble(data);
  8957  002EC6  5003               	movf	i2lcdInst@data,w,c
  8958  002EC8  EC8E  F015         	call	i2_lcdNibble
  8959  002ECC  0012               	return		;funcret
  8960  002ECE                     __end_ofi2_lcdInst:
  8961                           	opt stack 0
  8962                           pclatu	equ	0xFFB
  8963                           pclath	equ	0xFFA
  8964                           tblptru	equ	0xFF8
  8965                           tblptrh	equ	0xFF7
  8966                           tblptrl	equ	0xFF6
  8967                           tablat	equ	0xFF5
  8968                           prodh	equ	0xFF4
  8969                           prodl	equ	0xFF3
  8970                           intcon	equ	0xFF2
  8971                           intcon2	equ	0xFF1
  8972                           intcon3	equ	0xFF0
  8973                           postinc0	equ	0xFEE
  8974                           fsr0h	equ	0xFEA
  8975                           fsr0l	equ	0xFE9
  8976                           wreg	equ	0xFE8
  8977                           indf1	equ	0xFE7
  8978                           fsr1h	equ	0xFE2
  8979                           fsr1l	equ	0xFE1
  8980                           indf2	equ	0xFDF
  8981                           postinc2	equ	0xFDE
  8982                           postdec2	equ	0xFDD
  8983                           fsr2h	equ	0xFDA
  8984                           fsr2l	equ	0xFD9
  8985                           status	equ	0xFD8
  8986                           
  8987 ;; *************** function i2_lcdNibble *****************
  8988 ;; Defined at:
  8989 ;;		line 36 in file "lcd.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;  data            1    wreg     unsigned char 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  data            1    1[COMRAM] unsigned char 
  8994 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  8995 ;; Return value:  Size  Location     Type
  8996 ;;                  1    wreg      void 
  8997 ;; Registers used:
  8998 ;;		wreg, status,2, status,0
  8999 ;; Tracked objects:
  9000 ;;		On entry : 0/0
  9001 ;;		On exit  : 0/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;Total ram usage:        2 bytes
  9009 ;; Hardware stack levels used:    1
  9010 ;; This function calls:
  9011 ;;		Nothing
  9012 ;; This function is called by:
  9013 ;;		i2_lcdInst
  9014 ;;		i2_putch
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           	psect	text39
  9019  002B1C                     __ptext39:
  9020                           	opt stack 0
  9021  002B1C                     i2_lcdNibble:
  9022                           	opt stack 23
  9023                           
  9024                           ;incstack = 0
  9025                           ;i2lcdNibble@data stored from wreg
  9026  002B1C  6E02               	movwf	i2lcdNibble@data,c
  9027                           
  9028                           ;lcd.c: 38: char temp = data & 0xF0;
  9029  002B1E  5002               	movf	i2lcdNibble@data,w,c
  9030  002B20  0BF0               	andlw	240
  9031  002B22  6E01               	movwf	i2lcdNibble@temp,c
  9032                           
  9033                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9034  002B24  508C               	movf	3980,w,c	;volatile
  9035  002B26  0B0F               	andlw	15
  9036  002B28  6E8C               	movwf	3980,c	;volatile
  9037                           
  9038                           ;lcd.c: 40: LATD = temp | LATD;
  9039  002B2A  5001               	movf	i2lcdNibble@temp,w,c
  9040  002B2C  108C               	iorwf	3980,w,c	;volatile
  9041  002B2E  6E8C               	movwf	3980,c	;volatile
  9042                           
  9043                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  9044  002B30  968C               	bcf	3980,3,c	;volatile
  9045                           
  9046                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9047  002B32  0E19               	movlw	25
  9048  002B34                     i2u471_47:
  9049  002B34  2EE8               	decfsz	wreg,f,c
  9050  002B36  D7FE               	bra	i2u471_47
  9051                           
  9052                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  9053  002B38  868C               	bsf	3980,3,c	;volatile
  9054                           
  9055                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9056  002B3A  0E19               	movlw	25
  9057  002B3C                     i2u472_47:
  9058  002B3C  2EE8               	decfsz	wreg,f,c
  9059  002B3E  D7FE               	bra	i2u472_47
  9060                           
  9061                           ;lcd.c: 47: data = data << 4;
  9062  002B40  3802               	swapf	i2lcdNibble@data,w,c
  9063  002B42  0BF0               	andlw	240
  9064  002B44  6E02               	movwf	i2lcdNibble@data,c
  9065                           
  9066                           ;lcd.c: 49: temp = data & 0xF0;
  9067  002B46  5002               	movf	i2lcdNibble@data,w,c
  9068  002B48  0BF0               	andlw	240
  9069  002B4A  6E01               	movwf	i2lcdNibble@temp,c
  9070                           
  9071                           ;lcd.c: 50: LATD = LATD & 0x0F;
  9072  002B4C  508C               	movf	3980,w,c	;volatile
  9073  002B4E  0B0F               	andlw	15
  9074  002B50  6E8C               	movwf	3980,c	;volatile
  9075                           
  9076                           ;lcd.c: 51: LATD = temp | LATD;
  9077  002B52  5001               	movf	i2lcdNibble@temp,w,c
  9078  002B54  108C               	iorwf	3980,w,c	;volatile
  9079  002B56  6E8C               	movwf	3980,c	;volatile
  9080                           
  9081                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  9082  002B58  968C               	bcf	3980,3,c	;volatile
  9083                           
  9084                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9085  002B5A  0E19               	movlw	25
  9086  002B5C                     i2u473_47:
  9087  002B5C  2EE8               	decfsz	wreg,f,c
  9088  002B5E  D7FE               	bra	i2u473_47
  9089                           
  9090                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  9091  002B60  868C               	bsf	3980,3,c	;volatile
  9092                           
  9093                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9094  002B62  0E19               	movlw	25
  9095  002B64                     i2u474_47:
  9096  002B64  2EE8               	decfsz	wreg,f,c
  9097  002B66  D7FE               	bra	i2u474_47
  9098  002B68  0012               	return		;funcret
  9099  002B6A                     __end_ofi2_lcdNibble:
  9100                           	opt stack 0
  9101                           pclatu	equ	0xFFB
  9102                           pclath	equ	0xFFA
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           intcon	equ	0xFF2
  9110                           intcon2	equ	0xFF1
  9111                           intcon3	equ	0xFF0
  9112                           postinc0	equ	0xFEE
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           indf1	equ	0xFE7
  9117                           fsr1h	equ	0xFE2
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           postdec2	equ	0xFDD
  9122                           fsr2h	equ	0xFDA
  9123                           fsr2l	equ	0xFD9
  9124                           status	equ	0xFD8
  9125                           
  9126 ;; *************** function _servo_rotate0 *****************
  9127 ;; Defined at:
  9128 ;;		line 382 in file "main.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  degree          2    0[COMRAM] int 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;  j               2    8[COMRAM] unsigned int 
  9133 ;;  i               2    6[COMRAM] unsigned int 
  9134 ;;  duty            2    4[COMRAM] int 
  9135 ;; Return value:  Size  Location     Type
  9136 ;;                  1    wreg      void 
  9137 ;; Registers used:
  9138 ;;		wreg, status,2, status,0
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;Total ram usage:       10 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; This function calls:
  9151 ;;		Nothing
  9152 ;; This function is called by:
  9153 ;;		_isr
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text40
  9158  002570                     __ptext40:
  9159                           	opt stack 0
  9160  002570                     _servo_rotate0:
  9161                           	opt stack 25
  9162                           
  9163                           ;main.c: 383: unsigned int i;
  9164                           ;main.c: 384: unsigned int j;
  9165                           ;main.c: 385: int duty = degree;
  9166                           
  9167                           ;incstack = 0
  9168  002570  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  9169  002574  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  9170                           
  9171                           ;main.c: 386: for (i=0; i<50; i++) {
  9172  002578  0E00               	movlw	0
  9173  00257A  6E08               	movwf	servo_rotate0@i+1,c
  9174  00257C  0E00               	movlw	0
  9175  00257E  6E07               	movwf	servo_rotate0@i,c
  9176  002580                     i2l4447:
  9177  002580  5008               	movf	servo_rotate0@i+1,w,c
  9178  002582  E13D               	bnz	i2l371
  9179  002584  0E32               	movlw	50
  9180  002586  5C07               	subwf	servo_rotate0@i,w,c
  9181  002588  B0D8               	btfsc	status,0,c
  9182  00258A  0012               	return	
  9183                           
  9184                           ;main.c: 387: LATCbits.LATC0 = 1;
  9185  00258C  808B               	bsf	3979,0,c	;volatile
  9186                           
  9187                           ;main.c: 388: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  9188  00258E  0E00               	movlw	0
  9189  002590  6E0A               	movwf	servo_rotate0@j+1,c
  9190  002592  0E00               	movlw	0
  9191  002594  6E09               	movwf	servo_rotate0@j,c
  9192  002596  D009               	goto	i2l365
  9193  002598                     i2l4453:
  9194  002598  0E04               	movlw	4
  9195  00259A  6E03               	movwf	??_servo_rotate0& (0+255),c
  9196  00259C  0E3E               	movlw	62
  9197  00259E                     i2u475_47:
  9198  00259E  2EE8               	decfsz	wreg,f,c
  9199  0025A0  D7FE               	bra	i2u475_47
  9200  0025A2  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  9201  0025A4  D7FC               	bra	i2u475_47
  9202  0025A6  4A09               	infsnz	servo_rotate0@j,f,c
  9203  0025A8  2A0A               	incf	servo_rotate0@j+1,f,c
  9204  0025AA                     i2l365:
  9205  0025AA  5005               	movf	servo_rotate0@duty,w,c
  9206  0025AC  5C09               	subwf	servo_rotate0@j,w,c
  9207  0025AE  5006               	movf	servo_rotate0@duty+1,w,c
  9208  0025B0  580A               	subwfb	servo_rotate0@j+1,w,c
  9209  0025B2  A0D8               	btfss	status,0,c
  9210  0025B4  D7F1               	goto	i2l4453
  9211                           
  9212                           ;main.c: 389: LATCbits.LATC0 = 0;
  9213  0025B6  908B               	bcf	3979,0,c	;volatile
  9214                           
  9215                           ;main.c: 390: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  9216  0025B8  0E00               	movlw	0
  9217  0025BA  6E0A               	movwf	servo_rotate0@j+1,c
  9218  0025BC  0E00               	movlw	0
  9219  0025BE  6E09               	movwf	servo_rotate0@j,c
  9220  0025C0  D009               	goto	i2l368
  9221  0025C2                     i2l4459:
  9222  0025C2  0E04               	movlw	4
  9223  0025C4  6E03               	movwf	??_servo_rotate0& (0+255),c
  9224  0025C6  0E3E               	movlw	62
  9225  0025C8                     i2u476_47:
  9226  0025C8  2EE8               	decfsz	wreg,f,c
  9227  0025CA  D7FE               	bra	i2u476_47
  9228  0025CC  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  9229  0025CE  D7FC               	bra	i2u476_47
  9230  0025D0  4A09               	infsnz	servo_rotate0@j,f,c
  9231  0025D2  2A0A               	incf	servo_rotate0@j+1,f,c
  9232  0025D4                     i2l368:
  9233  0025D4  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  9234  0025D8  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  9235  0025DC  1E03               	comf	??_servo_rotate0,f,c
  9236  0025DE  1E04               	comf	??_servo_rotate0+1,f,c
  9237  0025E0  4A03               	infsnz	??_servo_rotate0,f,c
  9238  0025E2  2A04               	incf	??_servo_rotate0+1,f,c
  9239  0025E4  0E14               	movlw	20
  9240  0025E6  2603               	addwf	??_servo_rotate0,f,c
  9241  0025E8  0E00               	movlw	0
  9242  0025EA  2204               	addwfc	??_servo_rotate0+1,f,c
  9243  0025EC  5003               	movf	??_servo_rotate0,w,c
  9244  0025EE  5C09               	subwf	servo_rotate0@j,w,c
  9245  0025F0  5004               	movf	??_servo_rotate0+1,w,c
  9246  0025F2  580A               	subwfb	servo_rotate0@j+1,w,c
  9247  0025F4  A0D8               	btfss	status,0,c
  9248  0025F6  D7E5               	goto	i2l4459
  9249  0025F8  4A07               	infsnz	servo_rotate0@i,f,c
  9250  0025FA  2A08               	incf	servo_rotate0@i+1,f,c
  9251  0025FC  D7C1               	goto	i2l4447
  9252  0025FE                     i2l371:
  9253  0025FE  0012               	return		;funcret
  9254  002600                     __end_of_servo_rotate0:
  9255                           	opt stack 0
  9256                           pclatu	equ	0xFFB
  9257                           pclath	equ	0xFFA
  9258                           tblptru	equ	0xFF8
  9259                           tblptrh	equ	0xFF7
  9260                           tblptrl	equ	0xFF6
  9261                           tablat	equ	0xFF5
  9262                           prodh	equ	0xFF4
  9263                           prodl	equ	0xFF3
  9264                           intcon	equ	0xFF2
  9265                           intcon2	equ	0xFF1
  9266                           intcon3	equ	0xFF0
  9267                           postinc0	equ	0xFEE
  9268                           fsr0h	equ	0xFEA
  9269                           fsr0l	equ	0xFE9
  9270                           wreg	equ	0xFE8
  9271                           indf1	equ	0xFE7
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function _read_time *****************
  9282 ;; Defined at:
  9283 ;;		line 245 in file "main.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;		None
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  i               1    3[COMRAM] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      void 
  9290 ;; Registers used:
  9291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;Total ram usage:        1 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    2
  9304 ;; This function calls:
  9305 ;;		i2_I2C_Master_Read
  9306 ;;		i2_I2C_Master_Start
  9307 ;;		i2_I2C_Master_Stop
  9308 ;;		i2_I2C_Master_Write
  9309 ;; This function is called by:
  9310 ;;		_isr
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text41
  9315  002894                     __ptext41:
  9316                           	opt stack 0
  9317  002894                     _read_time:
  9318                           	opt stack 23
  9319                           
  9320                           ;main.c: 247: I2C_Master_Start();
  9321                           
  9322                           ;incstack = 0
  9323  002894  EC7D  F017         	call	i2_I2C_Master_Start	;wreg free
  9324                           
  9325                           ;main.c: 248: I2C_Master_Write(0b11010000);
  9326  002898  0E00               	movlw	0
  9327  00289A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9328  00289C  0ED0               	movlw	208
  9329  00289E  6E02               	movwf	i2I2C_Master_Write@d,c
  9330  0028A0  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  9331                           
  9332                           ;main.c: 249: I2C_Master_Write(0x00);
  9333  0028A4  0E00               	movlw	0
  9334  0028A6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9335  0028A8  0E00               	movlw	0
  9336  0028AA  6E02               	movwf	i2I2C_Master_Write@d,c
  9337  0028AC  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  9338                           
  9339                           ;main.c: 250: I2C_Master_Stop();
  9340  0028B0  EC79  F017         	call	i2_I2C_Master_Stop	;wreg free
  9341                           
  9342                           ;main.c: 253: I2C_Master_Start();
  9343  0028B4  EC7D  F017         	call	i2_I2C_Master_Start	;wreg free
  9344                           
  9345                           ;main.c: 254: I2C_Master_Write(0b11010001);
  9346  0028B8  0E00               	movlw	0
  9347  0028BA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9348  0028BC  0ED1               	movlw	209
  9349  0028BE  6E02               	movwf	i2I2C_Master_Write@d,c
  9350  0028C0  EC6C  F017         	call	i2_I2C_Master_Write	;wreg free
  9351                           
  9352                           ;main.c: 255: for(unsigned char i=0;i<0x06;i++){
  9353  0028C4  0E00               	movlw	0
  9354  0028C6  6E04               	movwf	read_time@i,c
  9355  0028C8                     i2l4411:
  9356  0028C8  0E05               	movlw	5
  9357  0028CA  6404               	cpfsgt	read_time@i,c
  9358  0028CC  D001               	goto	i2l4415
  9359  0028CE  D00E               	goto	i2l4421
  9360  0028D0                     i2l4415:
  9361                           
  9362                           ;main.c: 256: time[i] = I2C_Master_Read(1);
  9363  0028D0  5004               	movf	read_time@i,w,c
  9364  0028D2  0D01               	mullw	1
  9365  0028D4  0E96               	movlw	low _time
  9366  0028D6  24F3               	addwf	prodl,w,c
  9367  0028D8  6ED9               	movwf	fsr2l,c
  9368  0028DA  0E00               	movlw	high _time
  9369  0028DC  20F4               	addwfc	prodh,w,c
  9370  0028DE  6EDA               	movwf	fsr2h,c
  9371  0028E0  0E01               	movlw	1
  9372  0028E2  ECD4  F016         	call	i2_I2C_Master_Read
  9373  0028E6  6EDF               	movwf	indf2,c
  9374  0028E8  2A04               	incf	read_time@i,f,c
  9375  0028EA  D7EE               	goto	i2l4411
  9376  0028EC                     i2l4421:
  9377                           
  9378                           ;main.c: 257: }
  9379                           ;main.c: 258: time[6] = I2C_Master_Read(0);
  9380  0028EC  0E00               	movlw	0
  9381  0028EE  ECD4  F016         	call	i2_I2C_Master_Read
  9382  0028F2  0100               	movlb	0	; () banked
  9383  0028F4  6F9C               	movwf	(_time+6)& (0+255),b
  9384                           
  9385                           ;main.c: 259: I2C_Master_Stop();
  9386  0028F6  EC79  F017         	call	i2_I2C_Master_Stop	;wreg free
  9387  0028FA  0012               	return	
  9388  0028FC                     __end_of_read_time:
  9389                           	opt stack 0
  9390                           pclatu	equ	0xFFB
  9391                           pclath	equ	0xFFA
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           prodh	equ	0xFF4
  9397                           prodl	equ	0xFF3
  9398                           intcon	equ	0xFF2
  9399                           intcon2	equ	0xFF1
  9400                           intcon3	equ	0xFF0
  9401                           postinc0	equ	0xFEE
  9402                           fsr0h	equ	0xFEA
  9403                           fsr0l	equ	0xFE9
  9404                           wreg	equ	0xFE8
  9405                           indf1	equ	0xFE7
  9406                           fsr1h	equ	0xFE2
  9407                           fsr1l	equ	0xFE1
  9408                           indf2	equ	0xFDF
  9409                           postinc2	equ	0xFDE
  9410                           postdec2	equ	0xFDD
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8
  9414                           
  9415 ;; *************** function i2_I2C_Master_Write *****************
  9416 ;; Defined at:
  9417 ;;		line 48 in file "I2C.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  d               2    1[COMRAM] unsigned int 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;		None
  9422 ;; Return value:  Size  Location     Type
  9423 ;;                  1    wreg      void 
  9424 ;; Registers used:
  9425 ;;		wreg, status,2, status,0, cstack
  9426 ;; Tracked objects:
  9427 ;;		On entry : 0/0
  9428 ;;		On exit  : 0/0
  9429 ;;		Unchanged: 0/0
  9430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;Total ram usage:        2 bytes
  9436 ;; Hardware stack levels used:    1
  9437 ;; Hardware stack levels required when called:    1
  9438 ;; This function calls:
  9439 ;;		i2_I2C_Master_Wait
  9440 ;; This function is called by:
  9441 ;;		_read_time
  9442 ;;		i2_read_colorsensor
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text42
  9447  002ED8                     __ptext42:
  9448                           	opt stack 0
  9449  002ED8                     i2_I2C_Master_Write:
  9450                           	opt stack 23
  9451                           
  9452                           ;I2C.c: 50: I2C_Master_Wait();
  9453                           
  9454                           ;incstack = 0
  9455  002ED8  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9456                           
  9457                           ;I2C.c: 51: SSPBUF = d;
  9458  002EDC  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9459  002EE0  0012               	return		;funcret
  9460  002EE2                     __end_ofi2_I2C_Master_Write:
  9461                           	opt stack 0
  9462                           pclatu	equ	0xFFB
  9463                           pclath	equ	0xFFA
  9464                           tblptru	equ	0xFF8
  9465                           tblptrh	equ	0xFF7
  9466                           tblptrl	equ	0xFF6
  9467                           tablat	equ	0xFF5
  9468                           prodh	equ	0xFF4
  9469                           prodl	equ	0xFF3
  9470                           intcon	equ	0xFF2
  9471                           intcon2	equ	0xFF1
  9472                           intcon3	equ	0xFF0
  9473                           postinc0	equ	0xFEE
  9474                           fsr0h	equ	0xFEA
  9475                           fsr0l	equ	0xFE9
  9476                           wreg	equ	0xFE8
  9477                           indf1	equ	0xFE7
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           fsr2h	equ	0xFDA
  9484                           fsr2l	equ	0xFD9
  9485                           status	equ	0xFD8
  9486                           
  9487 ;; *************** function i2_I2C_Master_Stop *****************
  9488 ;; Defined at:
  9489 ;;		line 42 in file "I2C.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;		None
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      void 
  9496 ;; Registers used:
  9497 ;;		wreg, status,2, status,0, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;Total ram usage:        0 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    1
  9510 ;; This function calls:
  9511 ;;		i2_I2C_Master_Wait
  9512 ;; This function is called by:
  9513 ;;		_read_time
  9514 ;;		i2_read_colorsensor
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text43
  9519  002EF2                     __ptext43:
  9520                           	opt stack 0
  9521  002EF2                     i2_I2C_Master_Stop:
  9522                           	opt stack 23
  9523                           
  9524                           ;I2C.c: 44: I2C_Master_Wait();
  9525                           
  9526                           ;incstack = 0
  9527  002EF2  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9528                           
  9529                           ;I2C.c: 45: PEN = 1;
  9530  002EF6  84C5               	bsf	4037,2,c	;volatile
  9531  002EF8  0012               	return		;funcret
  9532  002EFA                     __end_ofi2_I2C_Master_Stop:
  9533                           	opt stack 0
  9534                           pclatu	equ	0xFFB
  9535                           pclath	equ	0xFFA
  9536                           tblptru	equ	0xFF8
  9537                           tblptrh	equ	0xFF7
  9538                           tblptrl	equ	0xFF6
  9539                           tablat	equ	0xFF5
  9540                           prodh	equ	0xFF4
  9541                           prodl	equ	0xFF3
  9542                           intcon	equ	0xFF2
  9543                           intcon2	equ	0xFF1
  9544                           intcon3	equ	0xFF0
  9545                           postinc0	equ	0xFEE
  9546                           fsr0h	equ	0xFEA
  9547                           fsr0l	equ	0xFE9
  9548                           wreg	equ	0xFE8
  9549                           indf1	equ	0xFE7
  9550                           fsr1h	equ	0xFE2
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function i2_I2C_Master_Start *****************
  9560 ;; Defined at:
  9561 ;;		line 30 in file "I2C.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      void 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;Total ram usage:        0 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    1
  9582 ;; This function calls:
  9583 ;;		i2_I2C_Master_Wait
  9584 ;; This function is called by:
  9585 ;;		_read_time
  9586 ;;		i2_read_colorsensor
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text44
  9591  002EFA                     __ptext44:
  9592                           	opt stack 0
  9593  002EFA                     i2_I2C_Master_Start:
  9594                           	opt stack 23
  9595                           
  9596                           ;I2C.c: 32: I2C_Master_Wait();
  9597                           
  9598                           ;incstack = 0
  9599  002EFA  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9600                           
  9601                           ;I2C.c: 33: SEN = 1;
  9602  002EFE  80C5               	bsf	4037,0,c	;volatile
  9603  002F00  0012               	return		;funcret
  9604  002F02                     __end_ofi2_I2C_Master_Start:
  9605                           	opt stack 0
  9606                           pclatu	equ	0xFFB
  9607                           pclath	equ	0xFFA
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           intcon2	equ	0xFF1
  9616                           intcon3	equ	0xFF0
  9617                           postinc0	equ	0xFEE
  9618                           fsr0h	equ	0xFEA
  9619                           fsr0l	equ	0xFE9
  9620                           wreg	equ	0xFE8
  9621                           indf1	equ	0xFE7
  9622                           fsr1h	equ	0xFE2
  9623                           fsr1l	equ	0xFE1
  9624                           indf2	equ	0xFDF
  9625                           postinc2	equ	0xFDE
  9626                           postdec2	equ	0xFDD
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function i2_I2C_Master_Read *****************
  9632 ;; Defined at:
  9633 ;;		line 105 in file "I2C.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  a               1    wreg     unsigned char 
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;  a               1    1[COMRAM] unsigned char 
  9638 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      unsigned char 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;Total ram usage:        2 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    1
  9655 ;; This function calls:
  9656 ;;		i2_I2C_Master_Wait
  9657 ;; This function is called by:
  9658 ;;		_read_time
  9659 ;;		i2_read_colorsensor
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text45
  9664  002DA8                     __ptext45:
  9665                           	opt stack 0
  9666  002DA8                     i2_I2C_Master_Read:
  9667                           	opt stack 23
  9668                           
  9669                           ;incstack = 0
  9670                           ;i2I2C_Master_Read@a stored from wreg
  9671  002DA8  6E02               	movwf	i2I2C_Master_Read@a,c
  9672                           
  9673                           ;I2C.c: 107: unsigned char temp;
  9674                           ;I2C.c: 108: I2C_Master_Wait();
  9675  002DAA  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9676                           
  9677                           ;I2C.c: 109: RCEN = 1;
  9678  002DAE  86C5               	bsf	4037,3,c	;volatile
  9679                           
  9680                           ;I2C.c: 110: I2C_Master_Wait();
  9681  002DB0  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9682                           
  9683                           ;I2C.c: 111: temp = SSPBUF;
  9684  002DB4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9685                           
  9686                           ;I2C.c: 112: I2C_Master_Wait();
  9687  002DB8  EC42  F017         	call	i2_I2C_Master_Wait	;wreg free
  9688                           
  9689                           ;I2C.c: 113: ACKDT = (a)?0:1;
  9690  002DBC  5002               	movf	i2I2C_Master_Read@a,w,c
  9691  002DBE  A4D8               	btfss	status,2,c
  9692  002DC0  D002               	goto	i2u392_40
  9693  002DC2  8AC5               	bsf	4037,5,c	;volatile
  9694  002DC4  D001               	goto	i2l4103
  9695  002DC6                     i2u392_40:
  9696  002DC6  9AC5               	bcf	4037,5,c	;volatile
  9697  002DC8                     i2l4103:
  9698                           
  9699                           ;I2C.c: 114: ACKEN = 1;
  9700  002DC8  88C5               	bsf	4037,4,c	;volatile
  9701                           
  9702                           ;I2C.c: 115: return temp;
  9703  002DCA  5003               	movf	i2I2C_Master_Read@temp,w,c
  9704  002DCC  0012               	return	
  9705  002DCE                     __end_ofi2_I2C_Master_Read:
  9706                           	opt stack 0
  9707                           pclatu	equ	0xFFB
  9708                           pclath	equ	0xFFA
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           intcon	equ	0xFF2
  9716                           intcon2	equ	0xFF1
  9717                           intcon3	equ	0xFF0
  9718                           postinc0	equ	0xFEE
  9719                           fsr0h	equ	0xFEA
  9720                           fsr0l	equ	0xFE9
  9721                           wreg	equ	0xFE8
  9722                           indf1	equ	0xFE7
  9723                           fsr1h	equ	0xFE2
  9724                           fsr1l	equ	0xFE1
  9725                           indf2	equ	0xFDF
  9726                           postinc2	equ	0xFDE
  9727                           postdec2	equ	0xFDD
  9728                           fsr2h	equ	0xFDA
  9729                           fsr2l	equ	0xFD9
  9730                           status	equ	0xFD8
  9731                           
  9732 ;; *************** function i2_I2C_Master_Wait *****************
  9733 ;; Defined at:
  9734 ;;		line 25 in file "I2C.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      void 
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;Total ram usage:        1 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; This function calls:
  9755 ;;		Nothing
  9756 ;; This function is called by:
  9757 ;;		i2_I2C_Master_Start
  9758 ;;		i2_I2C_Master_Stop
  9759 ;;		i2_I2C_Master_Write
  9760 ;;		i2_I2C_Master_Read
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text46
  9765  002E84                     __ptext46:
  9766                           	opt stack 0
  9767  002E84                     i2_I2C_Master_Wait:
  9768                           	opt stack 23
  9769  002E84                     i2l34:
  9770  002E84  B4C7               	btfsc	4039,2,c	;volatile
  9771  002E86  D7FE               	goto	i2l34
  9772  002E88  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  9773  002E8C  0E1F               	movlw	31
  9774  002E8E  1601               	andwf	??i2_I2C_Master_Wait,f,c
  9775  002E90  B4D8               	btfsc	status,2,c
  9776  002E92  0012               	return	
  9777  002E94  D7F7               	goto	i2l34
  9778  002E96                     __end_ofi2_I2C_Master_Wait:
  9779                           	opt stack 0
  9780                           pclatu	equ	0xFFB
  9781                           pclath	equ	0xFFA
  9782                           tblptru	equ	0xFF8
  9783                           tblptrh	equ	0xFF7
  9784                           tblptrl	equ	0xFF6
  9785                           tablat	equ	0xFF5
  9786                           prodh	equ	0xFF4
  9787                           prodl	equ	0xFF3
  9788                           intcon	equ	0xFF2
  9789                           intcon2	equ	0xFF1
  9790                           intcon3	equ	0xFF0
  9791                           postinc0	equ	0xFEE
  9792                           fsr0h	equ	0xFEA
  9793                           fsr0l	equ	0xFE9
  9794                           wreg	equ	0xFE8
  9795                           indf1	equ	0xFE7
  9796                           fsr1h	equ	0xFE2
  9797                           fsr1l	equ	0xFE1
  9798                           indf2	equ	0xFDF
  9799                           postinc2	equ	0xFDE
  9800                           postdec2	equ	0xFDD
  9801                           fsr2h	equ	0xFDA
  9802                           fsr2l	equ	0xFD9
  9803                           status	equ	0xFD8
  9804                           
  9805 ;; *************** function _dec_to_hex *****************
  9806 ;; Defined at:
  9807 ;;		line 208 in file "main.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  num             2   98[COMRAM] int 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;  quotient        2  112[COMRAM] int 
  9812 ;;  hexnum          2  110[COMRAM] int 
  9813 ;;  i               2  108[COMRAM] int 
  9814 ;;  temp            2  106[COMRAM] int 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  2   98[COMRAM] int 
  9817 ;; Registers used:
  9818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;Total ram usage:       16 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    5
  9831 ;; This function calls:
  9832 ;;		___awdiv
  9833 ;;		___ftadd
  9834 ;;		___ftmul
  9835 ;;		___fttol
  9836 ;;		_pow
  9837 ;;		i2___awtoft
  9838 ;; This function is called by:
  9839 ;;		_isr
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text47
  9844  0019D2                     __ptext47:
  9845                           	opt stack 0
  9846  0019D2                     _dec_to_hex:
  9847                           	opt stack 20
  9848                           
  9849                           ;main.c: 209: int i = 0, quotient = num, temp, hexnum = 0;
  9850                           
  9851                           ;incstack = 0
  9852  0019D2  0E00               	movlw	0
  9853  0019D4  6E6E               	movwf	dec_to_hex@i+1,c
  9854  0019D6  0E00               	movlw	0
  9855  0019D8  6E6D               	movwf	dec_to_hex@i,c
  9856  0019DA  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  9857  0019DE  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  9858  0019E2  0E00               	movlw	0
  9859  0019E4  6E70               	movwf	dec_to_hex@hexnum+1,c
  9860  0019E6  0E00               	movlw	0
  9861  0019E8  6E6F               	movwf	dec_to_hex@hexnum,c
  9862                           
  9863                           ;main.c: 211: while (quotient != 0) {
  9864  0019EA  D068               	goto	i2l4441
  9865  0019EC                     i2l4429:
  9866                           
  9867                           ;main.c: 212: temp = quotient % 16;
  9868  0019EC  0E0F               	movlw	15
  9869  0019EE  1471               	andwf	dec_to_hex@quotient,w,c
  9870  0019F0  6E6B               	movwf	dec_to_hex@temp,c
  9871  0019F2  6A6C               	clrf	dec_to_hex@temp+1,c
  9872                           
  9873                           ;main.c: 213: hexnum += temp*pow(10,i);
  9874  0019F4  C06D  F009         	movff	dec_to_hex@i,i2___awtoft@c
  9875  0019F8  C06E  F00A         	movff	dec_to_hex@i+1,i2___awtoft@c+1
  9876  0019FC  EC56  F016         	call	i2___awtoft	;wreg free
  9877  001A00  C009  F068         	movff	?i2___awtoft,_dec_to_hex$1361
  9878  001A04  C00A  F069         	movff	?i2___awtoft+1,_dec_to_hex$1361+1
  9879  001A08  C00B  F06A         	movff	?i2___awtoft+2,_dec_to_hex$1361+2
  9880                           
  9881                           ;main.c: 213: hexnum += temp*pow(10,i);
  9882  001A0C  C068  F055         	movff	_dec_to_hex$1361,pow@y
  9883  001A10  C069  F056         	movff	_dec_to_hex$1361+1,pow@y+1
  9884  001A14  C06A  F057         	movff	_dec_to_hex$1361+2,pow@y+2
  9885  001A18  0E00               	movlw	0
  9886  001A1A  6E52               	movwf	pow@x,c
  9887  001A1C  0E20               	movlw	32
  9888  001A1E  6E53               	movwf	pow@x+1,c
  9889  001A20  0E41               	movlw	65
  9890  001A22  6E54               	movwf	pow@x+2,c
  9891  001A24  ECC8  F008         	call	_pow	;wreg free
  9892  001A28  C052  F065         	movff	?_pow,_dec_to_hex$1237
  9893  001A2C  C053  F066         	movff	?_pow+1,_dec_to_hex$1237+1
  9894  001A30  C054  F067         	movff	?_pow+2,_dec_to_hex$1237+2
  9895                           
  9896                           ;main.c: 213: hexnum += temp*pow(10,i);
  9897  001A34  C065  F010         	movff	_dec_to_hex$1237,___ftmul@f2
  9898  001A38  C066  F011         	movff	_dec_to_hex$1237+1,___ftmul@f2+1
  9899  001A3C  C067  F012         	movff	_dec_to_hex$1237+2,___ftmul@f2+2
  9900  001A40  C06B  F009         	movff	dec_to_hex@temp,i2___awtoft@c
  9901  001A44  C06C  F00A         	movff	dec_to_hex@temp+1,i2___awtoft@c+1
  9902  001A48  EC56  F016         	call	i2___awtoft	;wreg free
  9903  001A4C  C009  F00D         	movff	?i2___awtoft,___ftmul@f1
  9904  001A50  C00A  F00E         	movff	?i2___awtoft+1,___ftmul@f1+1
  9905  001A54  C00B  F00F         	movff	?i2___awtoft+2,___ftmul@f1+2
  9906  001A58  ECE1  F00D         	call	___ftmul	;wreg free
  9907  001A5C  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  9908  001A60  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  9909  001A64  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  9910  001A68  C06F  F009         	movff	dec_to_hex@hexnum,i2___awtoft@c
  9911  001A6C  C070  F00A         	movff	dec_to_hex@hexnum+1,i2___awtoft@c+1
  9912  001A70  EC56  F016         	call	i2___awtoft	;wreg free
  9913  001A74  C009  F01C         	movff	?i2___awtoft,___ftadd@f1
  9914  001A78  C00A  F01D         	movff	?i2___awtoft+1,___ftadd@f1+1
  9915  001A7C  C00B  F01E         	movff	?i2___awtoft+2,___ftadd@f1+2
  9916  001A80  ECF2  F007         	call	___ftadd	;wreg free
  9917  001A84  C01C  F028         	movff	?___ftadd,___fttol@f1
  9918  001A88  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  9919  001A8C  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  9920  001A90  EC67  F00D         	call	___fttol	;wreg free
  9921  001A94  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  9922  001A98  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  9923                           
  9924                           ;main.c: 214: quotient = quotient / 16;
  9925  001A9C  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  9926  001AA0  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  9927  001AA4  0E00               	movlw	0
  9928  001AA6  6E04               	movwf	___awdiv@divisor+1,c
  9929  001AA8  0E10               	movlw	16
  9930  001AAA  6E03               	movwf	___awdiv@divisor,c
  9931  001AAC  EC90  F013         	call	___awdiv	;wreg free
  9932  001AB0  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  9933  001AB4  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  9934                           
  9935                           ;main.c: 215: i += 1;
  9936  001AB8  4A6D               	infsnz	dec_to_hex@i,f,c
  9937  001ABA  2A6E               	incf	dec_to_hex@i+1,f,c
  9938  001ABC                     i2l4441:
  9939  001ABC  5071               	movf	dec_to_hex@quotient,w,c
  9940  001ABE  1072               	iorwf	dec_to_hex@quotient+1,w,c
  9941  001AC0  A4D8               	btfss	status,2,c
  9942  001AC2  D794               	goto	i2l4429
  9943                           
  9944                           ;main.c: 216: }
  9945                           ;main.c: 217: return hexnum;
  9946  001AC4  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  9947  001AC8  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  9948  001ACC  0012               	return		;funcret
  9949  001ACE                     __end_of_dec_to_hex:
  9950                           	opt stack 0
  9951                           pclatu	equ	0xFFB
  9952                           pclath	equ	0xFFA
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           intcon2	equ	0xFF1
  9961                           intcon3	equ	0xFF0
  9962                           postinc0	equ	0xFEE
  9963                           fsr0h	equ	0xFEA
  9964                           fsr0l	equ	0xFE9
  9965                           wreg	equ	0xFE8
  9966                           indf1	equ	0xFE7
  9967                           fsr1h	equ	0xFE2
  9968                           fsr1l	equ	0xFE1
  9969                           indf2	equ	0xFDF
  9970                           postinc2	equ	0xFDE
  9971                           postdec2	equ	0xFDD
  9972                           fsr2h	equ	0xFDA
  9973                           fsr2l	equ	0xFD9
  9974                           status	equ	0xFD8
  9975                           
  9976 ;; *************** function _pow *****************
  9977 ;; Defined at:
  9978 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  x               3   81[COMRAM] int 
  9981 ;;  y               3   84[COMRAM] int 
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;  yi              4   94[COMRAM] unsigned long 
  9984 ;;  sign            1   93[COMRAM] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;                  3   81[COMRAM] unsigned char 
  9987 ;; Registers used:
  9988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9994 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9995 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;Total ram usage:       17 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    4
 10001 ;; This function calls:
 10002 ;;		___ftmul
 10003 ;;		___ftneg
 10004 ;;		___fttol
 10005 ;;		___lltoft
 10006 ;;		_exp
 10007 ;;		_log
 10008 ;;		i2___ftge
 10009 ;; This function is called by:
 10010 ;;		_dec_to_hex
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           	psect	text48
 10015  001190                     __ptext48:
 10016                           	opt stack 0
 10017  001190                     _pow:
 10018                           	opt stack 20
 10019                           
 10020                           ;incstack = 0
 10021  001190  0E00               	movlw	0
 10022  001192  6E5E               	movwf	pow@sign,c
 10023  001194  5052               	movf	pow@x,w,c
 10024  001196  1053               	iorwf	pow@x+1,w,c
 10025  001198  1054               	iorwf	pow@x+2,w,c
 10026  00119A  A4D8               	btfss	status,2,c
 10027  00119C  D01C               	goto	i2l3887
 10028  00119E  0E00               	movlw	0
 10029  0011A0  6E01               	movwf	i2___ftge@ff1,c
 10030  0011A2  0E00               	movlw	0
 10031  0011A4  6E02               	movwf	i2___ftge@ff1+1,c
 10032  0011A6  0E00               	movlw	0
 10033  0011A8  6E03               	movwf	i2___ftge@ff1+2,c
 10034  0011AA  C055  F004         	movff	pow@y,i2___ftge@ff2
 10035  0011AE  C056  F005         	movff	pow@y+1,i2___ftge@ff2+1
 10036  0011B2  C057  F006         	movff	pow@y+2,i2___ftge@ff2+2
 10037  0011B6  EC00  F013         	call	i2___ftge	;wreg free
 10038  0011BA  A0D8               	btfss	status,0,c
 10039  0011BC  D005               	goto	i2l901
 10040  0011BE  0E00               	movlw	0
 10041  0011C0  0100               	movlb	0	; () banked
 10042  0011C2  6FA8               	movwf	(_errno+1)& (0+255),b
 10043  0011C4  0E21               	movlw	33
 10044  0011C6  6FA7               	movwf	_errno& (0+255),b
 10045  0011C8                     i2l901:
 10046  0011C8  0E00               	movlw	0
 10047  0011CA  6E52               	movwf	?_pow,c
 10048  0011CC  0E00               	movlw	0
 10049  0011CE  6E53               	movwf	?_pow+1,c
 10050  0011D0  0E00               	movlw	0
 10051  0011D2  6E54               	movwf	?_pow+2,c
 10052  0011D4  0012               	return	
 10053  0011D6                     i2l3887:
 10054  0011D6  5055               	movf	pow@y,w,c
 10055  0011D8  1056               	iorwf	pow@y+1,w,c
 10056  0011DA  1057               	iorwf	pow@y+2,w,c
 10057  0011DC  A4D8               	btfss	status,2,c
 10058  0011DE  D007               	goto	i2l3893
 10059  0011E0  0E00               	movlw	0
 10060  0011E2  6E52               	movwf	?_pow,c
 10061  0011E4  0E80               	movlw	128
 10062  0011E6  6E53               	movwf	?_pow+1,c
 10063  0011E8  0E3F               	movlw	63
 10064  0011EA  6E54               	movwf	?_pow+2,c
 10065  0011EC  0012               	return	
 10066  0011EE                     i2l3893:
 10067  0011EE  AE54               	btfss	pow@x+2,7,c
 10068  0011F0  D041               	goto	i2l3905
 10069  0011F2  C055  F028         	movff	pow@y,___fttol@f1
 10070  0011F6  C056  F029         	movff	pow@y+1,___fttol@f1+1
 10071  0011FA  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 10072  0011FE  EC67  F00D         	call	___fttol	;wreg free
 10073  001202  C028  F05F         	movff	?___fttol,pow@yi
 10074  001206  C029  F060         	movff	?___fttol+1,pow@yi+1
 10075  00120A  C02A  F061         	movff	?___fttol+2,pow@yi+2
 10076  00120E  C02B  F062         	movff	?___fttol+3,pow@yi+3
 10077  001212  C05F  F009         	movff	pow@yi,___lltoft@c
 10078  001216  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 10079  00121A  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 10080  00121E  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 10081  001222  EC0F  F015         	call	___lltoft	;wreg free
 10082  001226  5055               	movf	pow@y,w,c
 10083  001228  1809               	xorwf	?___lltoft,w,c
 10084  00122A  E107               	bnz	i2u367_40
 10085  00122C  5056               	movf	pow@y+1,w,c
 10086  00122E  180A               	xorwf	?___lltoft+1,w,c
 10087  001230  E104               	bnz	i2u367_40
 10088  001232  5057               	movf	pow@y+2,w,c
 10089  001234  180B               	xorwf	?___lltoft+2,w,c
 10090  001236  B4D8               	btfsc	status,2,c
 10091  001238  D00C               	goto	i2l3901
 10092  00123A                     i2u367_40:
 10093  00123A  0E00               	movlw	0
 10094  00123C  0100               	movlb	0	; () banked
 10095  00123E  6FA8               	movwf	(_errno+1)& (0+255),b
 10096  001240  0E21               	movlw	33
 10097  001242  6FA7               	movwf	_errno& (0+255),b
 10098  001244  0E00               	movlw	0
 10099  001246  6E52               	movwf	?_pow,c
 10100  001248  0E00               	movlw	0
 10101  00124A  6E53               	movwf	?_pow+1,c
 10102  00124C  0E00               	movlw	0
 10103  00124E  6E54               	movwf	?_pow+2,c
 10104                           
 10105                           ; BSR set to: 0
 10106  001250  0012               	return	
 10107  001252                     i2l3901:
 10108  001252  505F               	movf	pow@yi,w,c
 10109  001254  0B01               	andlw	1
 10110  001256  6E5E               	movwf	pow@sign,c
 10111  001258  C052  F001         	movff	pow@x,___ftneg@f1
 10112  00125C  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10113  001260  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10114  001264  ECFA  F016         	call	___ftneg	;wreg free
 10115  001268  C001  F052         	movff	?___ftneg,pow@x
 10116  00126C  C002  F053         	movff	?___ftneg+1,pow@x+1
 10117  001270  C003  F054         	movff	?___ftneg+2,pow@x+2
 10118  001274                     i2l3905:
 10119  001274  C052  F034         	movff	pow@x,log@x
 10120  001278  C053  F035         	movff	pow@x+1,log@x+1
 10121  00127C  C054  F036         	movff	pow@x+2,log@x+2
 10122  001280  ECCF  F00A         	call	_log	;wreg free
 10123  001284  C034  F058         	movff	?_log,_pow$1238
 10124  001288  C035  F059         	movff	?_log+1,_pow$1238+1
 10125  00128C  C036  F05A         	movff	?_log+2,_pow$1238+2
 10126  001290  C058  F00D         	movff	_pow$1238,___ftmul@f1
 10127  001294  C059  F00E         	movff	_pow$1238+1,___ftmul@f1+1
 10128  001298  C05A  F00F         	movff	_pow$1238+2,___ftmul@f1+2
 10129  00129C  C055  F010         	movff	pow@y,___ftmul@f2
 10130  0012A0  C056  F011         	movff	pow@y+1,___ftmul@f2+1
 10131  0012A4  C057  F012         	movff	pow@y+2,___ftmul@f2+2
 10132  0012A8  ECE1  F00D         	call	___ftmul	;wreg free
 10133  0012AC  C00D  F05B         	movff	?___ftmul,_pow$1239
 10134  0012B0  C00E  F05C         	movff	?___ftmul+1,_pow$1239+1
 10135  0012B4  C00F  F05D         	movff	?___ftmul+2,_pow$1239+2
 10136  0012B8  C05B  F049         	movff	_pow$1239,exp@x
 10137  0012BC  C05C  F04A         	movff	_pow$1239+1,exp@x+1
 10138  0012C0  C05D  F04B         	movff	_pow$1239+2,exp@x+2
 10139  0012C4  ECFE  F006         	call	_exp	;wreg free
 10140  0012C8  C049  F052         	movff	?_exp,pow@x
 10141  0012CC  C04A  F053         	movff	?_exp+1,pow@x+1
 10142  0012D0  C04B  F054         	movff	?_exp+2,pow@x+2
 10143  0012D4  505E               	movf	pow@sign,w,c
 10144  0012D6  B4D8               	btfsc	status,2,c
 10145  0012D8  D00F               	goto	i2l906
 10146  0012DA  C052  F001         	movff	pow@x,___ftneg@f1
 10147  0012DE  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10148  0012E2  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10149  0012E6  ECFA  F016         	call	___ftneg	;wreg free
 10150  0012EA  C001  F052         	movff	?___ftneg,?_pow
 10151  0012EE  C002  F053         	movff	?___ftneg+1,?_pow+1
 10152  0012F2  C003  F054         	movff	?___ftneg+2,?_pow+2
 10153  0012F6  0012               	return	
 10154  0012F8                     i2l906:
 10155  0012F8  C052  F052         	movff	pow@x,?_pow
 10156  0012FC  C053  F053         	movff	pow@x+1,?_pow+1
 10157  001300  C054  F054         	movff	pow@x+2,?_pow+2
 10158  001304  0012               	return		;funcret
 10159  001306                     __end_of_pow:
 10160                           	opt stack 0
 10161                           pclatu	equ	0xFFB
 10162                           pclath	equ	0xFFA
 10163                           tblptru	equ	0xFF8
 10164                           tblptrh	equ	0xFF7
 10165                           tblptrl	equ	0xFF6
 10166                           tablat	equ	0xFF5
 10167                           prodh	equ	0xFF4
 10168                           prodl	equ	0xFF3
 10169                           intcon	equ	0xFF2
 10170                           intcon2	equ	0xFF1
 10171                           intcon3	equ	0xFF0
 10172                           postinc0	equ	0xFEE
 10173                           fsr0h	equ	0xFEA
 10174                           fsr0l	equ	0xFE9
 10175                           wreg	equ	0xFE8
 10176                           indf1	equ	0xFE7
 10177                           fsr1h	equ	0xFE2
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function _log *****************
 10187 ;; Defined at:
 10188 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  x               3   51[COMRAM] unsigned char 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  exponent        2   54[COMRAM] int 
 10193 ;; Return value:  Size  Location     Type
 10194 ;;                  3   51[COMRAM] int 
 10195 ;; Registers used:
 10196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10197 ;; Tracked objects:
 10198 ;;		On entry : 0/0
 10199 ;;		On exit  : 0/0
 10200 ;;		Unchanged: 0/0
 10201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10202 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;Total ram usage:        5 bytes
 10207 ;; Hardware stack levels used:    1
 10208 ;; Hardware stack levels required when called:    3
 10209 ;; This function calls:
 10210 ;;		___ftadd
 10211 ;;		___ftmul
 10212 ;;		_eval_poly
 10213 ;;		_frexp
 10214 ;;		i2___awtoft
 10215 ;; This function is called by:
 10216 ;;		_pow
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           	psect	text49
 10221  00159E                     __ptext49:
 10222                           	opt stack 0
 10223  00159E                     _log:
 10224                           	opt stack 20
 10225                           
 10226                           ;incstack = 0
 10227  00159E  AE36               	btfss	log@x+2,7,c
 10228  0015A0  D00C               	goto	i2l3629
 10229  0015A2  0E00               	movlw	0
 10230  0015A4  0100               	movlb	0	; () banked
 10231  0015A6  6FA8               	movwf	(_errno+1)& (0+255),b
 10232  0015A8  0E21               	movlw	33
 10233  0015AA  6FA7               	movwf	_errno& (0+255),b
 10234  0015AC  0E00               	movlw	0
 10235  0015AE  6E34               	movwf	?_log,c
 10236  0015B0  0E00               	movlw	0
 10237  0015B2  6E35               	movwf	?_log+1,c
 10238  0015B4  0E00               	movlw	0
 10239  0015B6  6E36               	movwf	?_log+2,c
 10240                           
 10241                           ; BSR set to: 0
 10242  0015B8  0012               	return	
 10243  0015BA                     i2l3629:
 10244  0015BA  5034               	movf	log@x,w,c
 10245  0015BC  1035               	iorwf	log@x+1,w,c
 10246  0015BE  1036               	iorwf	log@x+2,w,c
 10247  0015C0  A4D8               	btfss	status,2,c
 10248  0015C2  D00C               	goto	i2l3635
 10249  0015C4  0E00               	movlw	0
 10250  0015C6  0100               	movlb	0	; () banked
 10251  0015C8  6FA8               	movwf	(_errno+1)& (0+255),b
 10252  0015CA  0E22               	movlw	34
 10253  0015CC  6FA7               	movwf	_errno& (0+255),b
 10254  0015CE  0E00               	movlw	0
 10255  0015D0  6E34               	movwf	?_log,c
 10256  0015D2  0E00               	movlw	0
 10257  0015D4  6E35               	movwf	?_log+1,c
 10258  0015D6  0E00               	movlw	0
 10259  0015D8  6E36               	movwf	?_log+2,c
 10260                           
 10261                           ; BSR set to: 0
 10262  0015DA  0012               	return	
 10263  0015DC                     i2l3635:
 10264  0015DC  0E00               	movlw	0
 10265  0015DE  6E10               	movwf	___ftmul@f2,c
 10266  0015E0  0E00               	movlw	0
 10267  0015E2  6E11               	movwf	___ftmul@f2+1,c
 10268  0015E4  0E40               	movlw	64
 10269  0015E6  6E12               	movwf	___ftmul@f2+2,c
 10270  0015E8  0E37               	movlw	low log@exponent
 10271  0015EA  6E04               	movwf	frexp@eptr,c
 10272  0015EC  0E00               	movlw	high log@exponent
 10273  0015EE  6E05               	movwf	frexp@eptr+1,c
 10274  0015F0  C034  F001         	movff	log@x,frexp@value
 10275  0015F4  C035  F002         	movff	log@x+1,frexp@value+1
 10276  0015F8  C036  F003         	movff	log@x+2,frexp@value+2
 10277  0015FC  EC48  F013         	call	_frexp	;wreg free
 10278  001600  C001  F00D         	movff	?_frexp,___ftmul@f1
 10279  001604  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10280  001608  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10281  00160C  ECE1  F00D         	call	___ftmul	;wreg free
 10282  001610  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10283  001614  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10284  001618  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10285  00161C  0E00               	movlw	0
 10286  00161E  6E1F               	movwf	___ftadd@f2,c
 10287  001620  0E80               	movlw	128
 10288  001622  6E20               	movwf	___ftadd@f2+1,c
 10289  001624  0EBF               	movlw	191
 10290  001626  6E21               	movwf	___ftadd@f2+2,c
 10291  001628  ECF2  F007         	call	___ftadd	;wreg free
 10292  00162C  C01C  F034         	movff	?___ftadd,log@x
 10293  001630  C01D  F035         	movff	?___ftadd+1,log@x+1
 10294  001634  C01E  F036         	movff	?___ftadd+2,log@x+2
 10295  001638  0637               	decf	log@exponent,f,c
 10296  00163A  A0D8               	btfss	status,0,c
 10297  00163C  0638               	decf	log@exponent+1,f,c
 10298  00163E  C034  F028         	movff	log@x,eval_poly@x
 10299  001642  C035  F029         	movff	log@x+1,eval_poly@x+1
 10300  001646  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10301  00164A  0E57               	movlw	low log@coeff
 10302  00164C  6E2B               	movwf	eval_poly@d,c
 10303  00164E  0EFE               	movlw	high log@coeff
 10304  001650  6E2C               	movwf	eval_poly@d+1,c
 10305  001652  0E00               	movlw	0
 10306  001654  6E2E               	movwf	eval_poly@n+1,c
 10307  001656  0E08               	movlw	8
 10308  001658  6E2D               	movwf	eval_poly@n,c
 10309  00165A  EC82  F010         	call	_eval_poly	;wreg free
 10310  00165E  C028  F034         	movff	?_eval_poly,log@x
 10311  001662  C029  F035         	movff	?_eval_poly+1,log@x+1
 10312  001666  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10313  00166A  0E72               	movlw	114
 10314  00166C  6E10               	movwf	___ftmul@f2,c
 10315  00166E  0E31               	movlw	49
 10316  001670  6E11               	movwf	___ftmul@f2+1,c
 10317  001672  0E3F               	movlw	63
 10318  001674  6E12               	movwf	___ftmul@f2+2,c
 10319  001676  C037  F009         	movff	log@exponent,i2___awtoft@c
 10320  00167A  C038  F00A         	movff	log@exponent+1,i2___awtoft@c+1
 10321  00167E  EC56  F016         	call	i2___awtoft	;wreg free
 10322  001682  C009  F00D         	movff	?i2___awtoft,___ftmul@f1
 10323  001686  C00A  F00E         	movff	?i2___awtoft+1,___ftmul@f1+1
 10324  00168A  C00B  F00F         	movff	?i2___awtoft+2,___ftmul@f1+2
 10325  00168E  ECE1  F00D         	call	___ftmul	;wreg free
 10326  001692  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10327  001696  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10328  00169A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10329  00169E  C034  F01F         	movff	log@x,___ftadd@f2
 10330  0016A2  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10331  0016A6  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10332  0016AA  ECF2  F007         	call	___ftadd	;wreg free
 10333  0016AE  C01C  F034         	movff	?___ftadd,?_log
 10334  0016B2  C01D  F035         	movff	?___ftadd+1,?_log+1
 10335  0016B6  C01E  F036         	movff	?___ftadd+2,?_log+2
 10336  0016BA  0012               	return	
 10337  0016BC                     __end_of_log:
 10338                           	opt stack 0
 10339                           pclatu	equ	0xFFB
 10340                           pclath	equ	0xFFA
 10341                           tblptru	equ	0xFF8
 10342                           tblptrh	equ	0xFF7
 10343                           tblptrl	equ	0xFF6
 10344                           tablat	equ	0xFF5
 10345                           prodh	equ	0xFF4
 10346                           prodl	equ	0xFF3
 10347                           intcon	equ	0xFF2
 10348                           intcon2	equ	0xFF1
 10349                           intcon3	equ	0xFF0
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           fsr1h	equ	0xFE2
 10356                           fsr1l	equ	0xFE1
 10357                           indf2	equ	0xFDF
 10358                           postinc2	equ	0xFDE
 10359                           postdec2	equ	0xFDD
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function _exp *****************
 10365 ;; Defined at:
 10366 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  x               3   72[COMRAM] int 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;  exponent        2   78[COMRAM] int 
 10371 ;;  sign            1   80[COMRAM] unsigned char 
 10372 ;; Return value:  Size  Location     Type
 10373 ;;                  3   72[COMRAM] unsigned char 
 10374 ;; Registers used:
 10375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10381 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;Total ram usage:        9 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    3
 10388 ;; This function calls:
 10389 ;;		___ftmul
 10390 ;;		___ftneg
 10391 ;;		___ftsub
 10392 ;;		___fttol
 10393 ;;		_eval_poly
 10394 ;;		_floor
 10395 ;;		_ldexp
 10396 ;;		i2___awtoft
 10397 ;;		i2___ftdiv
 10398 ;;		i2___ftge
 10399 ;; This function is called by:
 10400 ;;		_pow
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404                           	psect	text50
 10405  000DFC                     __ptext50:
 10406                           	opt stack 0
 10407  000DFC                     _exp:
 10408                           	opt stack 20
 10409                           
 10410                           ;incstack = 0
 10411  000DFC  5049               	movf	exp@x,w,c
 10412  000DFE  104A               	iorwf	exp@x+1,w,c
 10413  000E00  104B               	iorwf	exp@x+2,w,c
 10414  000E02  A4D8               	btfss	status,2,c
 10415  000E04  D007               	goto	i2l3651
 10416  000E06  0E00               	movlw	0
 10417  000E08  6E49               	movwf	?_exp,c
 10418  000E0A  0E80               	movlw	128
 10419  000E0C  6E4A               	movwf	?_exp+1,c
 10420  000E0E  0E3F               	movlw	63
 10421  000E10  6E4B               	movwf	?_exp+2,c
 10422  000E12  0012               	return	
 10423  000E14                     i2l3651:
 10424  000E14  0E72               	movlw	114
 10425  000E16  6E01               	movwf	i2___ftge@ff1,c
 10426  000E18  0E31               	movlw	49
 10427  000E1A  6E02               	movwf	i2___ftge@ff1+1,c
 10428  000E1C  0E44               	movlw	68
 10429  000E1E  6E03               	movwf	i2___ftge@ff1+2,c
 10430  000E20  C049  F004         	movff	exp@x,i2___ftge@ff2
 10431  000E24  C04A  F005         	movff	exp@x+1,i2___ftge@ff2+1
 10432  000E28  C04B  F006         	movff	exp@x+2,i2___ftge@ff2+2
 10433  000E2C  EC00  F013         	call	i2___ftge	;wreg free
 10434  000E30  B0D8               	btfsc	status,0,c
 10435  000E32  D00C               	goto	i2l3657
 10436  000E34  0E00               	movlw	0
 10437  000E36  0100               	movlb	0	; () banked
 10438  000E38  6FA8               	movwf	(_errno+1)& (0+255),b
 10439  000E3A  0E22               	movlw	34
 10440  000E3C  6FA7               	movwf	_errno& (0+255),b
 10441  000E3E  0EFF               	movlw	255
 10442  000E40  6E49               	movwf	?_exp,c
 10443  000E42  0E7F               	movlw	127
 10444  000E44  6E4A               	movwf	?_exp+1,c
 10445  000E46  0E7F               	movlw	127
 10446  000E48  6E4B               	movwf	?_exp+2,c
 10447                           
 10448                           ; BSR set to: 0
 10449  000E4A  0012               	return	
 10450  000E4C                     i2l3657:
 10451  000E4C  C049  F001         	movff	exp@x,i2___ftge@ff1
 10452  000E50  C04A  F002         	movff	exp@x+1,i2___ftge@ff1+1
 10453  000E54  C04B  F003         	movff	exp@x+2,i2___ftge@ff1+2
 10454  000E58  0E49               	movlw	73
 10455  000E5A  6E04               	movwf	i2___ftge@ff2,c
 10456  000E5C  0E3A               	movlw	58
 10457  000E5E  6E05               	movwf	i2___ftge@ff2+1,c
 10458  000E60  0EC4               	movlw	196
 10459  000E62  6E06               	movwf	i2___ftge@ff2+2,c
 10460  000E64  EC00  F013         	call	i2___ftge	;wreg free
 10461  000E68  B0D8               	btfsc	status,0,c
 10462  000E6A  D00C               	goto	i2l3663
 10463  000E6C  0E00               	movlw	0
 10464  000E6E  0100               	movlb	0	; () banked
 10465  000E70  6FA8               	movwf	(_errno+1)& (0+255),b
 10466  000E72  0E22               	movlw	34
 10467  000E74  6FA7               	movwf	_errno& (0+255),b
 10468  000E76  0E00               	movlw	0
 10469  000E78  6E49               	movwf	?_exp,c
 10470  000E7A  0E00               	movlw	0
 10471  000E7C  6E4A               	movwf	?_exp+1,c
 10472  000E7E  0E00               	movlw	0
 10473  000E80  6E4B               	movwf	?_exp+2,c
 10474                           
 10475                           ; BSR set to: 0
 10476  000E82  0012               	return	
 10477  000E84                     i2l3663:
 10478  000E84  AE4B               	btfss	exp@x+2,7,c
 10479  000E86  D002               	goto	i2u329_40
 10480  000E88  0E01               	movlw	1
 10481  000E8A  D001               	goto	i2u330_40
 10482  000E8C                     i2u329_40:
 10483  000E8C  0E00               	movlw	0
 10484  000E8E                     i2u330_40:
 10485  000E8E  6E51               	movwf	exp@sign,c
 10486  000E90  5051               	movf	exp@sign,w,c
 10487  000E92  B4D8               	btfsc	status,2,c
 10488  000E94  D00E               	goto	i2l1064
 10489  000E96  C049  F001         	movff	exp@x,___ftneg@f1
 10490  000E9A  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10491  000E9E  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10492  000EA2  ECFA  F016         	call	___ftneg	;wreg free
 10493  000EA6  C001  F049         	movff	?___ftneg,exp@x
 10494  000EAA  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10495  000EAE  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10496  000EB2                     i2l1064:
 10497  000EB2  C049  F00D         	movff	exp@x,___ftmul@f1
 10498  000EB6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10499  000EBA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10500  000EBE  0EAA               	movlw	170
 10501  000EC0  6E10               	movwf	___ftmul@f2,c
 10502  000EC2  0EB8               	movlw	184
 10503  000EC4  6E11               	movwf	___ftmul@f2+1,c
 10504  000EC6  0E3F               	movlw	63
 10505  000EC8  6E12               	movwf	___ftmul@f2+2,c
 10506  000ECA  ECE1  F00D         	call	___ftmul	;wreg free
 10507  000ECE  C00D  F049         	movff	?___ftmul,exp@x
 10508  000ED2  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10509  000ED6  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10510  000EDA  C049  F041         	movff	exp@x,floor@x
 10511  000EDE  C04A  F042         	movff	exp@x+1,floor@x+1
 10512  000EE2  C04B  F043         	movff	exp@x+2,floor@x+2
 10513  000EE6  ECCE  F00E         	call	_floor	;wreg free
 10514  000EEA  C041  F04C         	movff	?_floor,_exp$1240
 10515  000EEE  C042  F04D         	movff	?_floor+1,_exp$1240+1
 10516  000EF2  C043  F04E         	movff	?_floor+2,_exp$1240+2
 10517  000EF6  C04C  F028         	movff	_exp$1240,___fttol@f1
 10518  000EFA  C04D  F029         	movff	_exp$1240+1,___fttol@f1+1
 10519  000EFE  C04E  F02A         	movff	_exp$1240+2,___fttol@f1+2
 10520  000F02  EC67  F00D         	call	___fttol	;wreg free
 10521  000F06  C028  F04F         	movff	?___fttol,exp@exponent
 10522  000F0A  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10523  000F0E  C049  F028         	movff	exp@x,___ftsub@f1
 10524  000F12  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10525  000F16  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10526  000F1A  C04F  F009         	movff	exp@exponent,i2___awtoft@c
 10527  000F1E  C050  F00A         	movff	exp@exponent+1,i2___awtoft@c+1
 10528  000F22  EC56  F016         	call	i2___awtoft	;wreg free
 10529  000F26  C009  F02B         	movff	?i2___awtoft,___ftsub@f2
 10530  000F2A  C00A  F02C         	movff	?i2___awtoft+1,___ftsub@f2+1
 10531  000F2E  C00B  F02D         	movff	?i2___awtoft+2,___ftsub@f2+2
 10532  000F32  ECF8  F015         	call	___ftsub	;wreg free
 10533  000F36  C028  F049         	movff	?___ftsub,exp@x
 10534  000F3A  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10535  000F3E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10536  000F42  C049  F028         	movff	exp@x,eval_poly@x
 10537  000F46  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10538  000F4A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10539  000F4E  0E39               	movlw	low exp@coeff
 10540  000F50  6E2B               	movwf	eval_poly@d,c
 10541  000F52  0EFE               	movlw	high exp@coeff
 10542  000F54  6E2C               	movwf	eval_poly@d+1,c
 10543  000F56  0E00               	movlw	0
 10544  000F58  6E2E               	movwf	eval_poly@n+1,c
 10545  000F5A  0E09               	movlw	9
 10546  000F5C  6E2D               	movwf	eval_poly@n,c
 10547  000F5E  EC82  F010         	call	_eval_poly	;wreg free
 10548  000F62  C028  F034         	movff	?_eval_poly,ldexp@value
 10549  000F66  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10550  000F6A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10551  000F6E  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10552  000F72  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10553  000F76  EC4F  F011         	call	_ldexp	;wreg free
 10554  000F7A  C034  F049         	movff	?_ldexp,exp@x
 10555  000F7E  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10556  000F82  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10557  000F86  5051               	movf	exp@sign,w,c
 10558  000F88  B4D8               	btfsc	status,2,c
 10559  000F8A  D025               	goto	i2l1065
 10560  000F8C  2849               	incf	exp@x,w,c
 10561  000F8E  E10E               	bnz	i2l3685
 10562  000F90  0E7F               	movlw	127
 10563  000F92  184A               	xorwf	exp@x+1,w,c
 10564  000F94  E10B               	bnz	i2l3685
 10565  000F96  0E7F               	movlw	127
 10566  000F98  184B               	xorwf	exp@x+2,w,c
 10567  000F9A  A4D8               	btfss	status,2,c
 10568  000F9C  D007               	goto	i2l3685
 10569  000F9E  0E00               	movlw	0
 10570  000FA0  6E49               	movwf	?_exp,c
 10571  000FA2  0E00               	movlw	0
 10572  000FA4  6E4A               	movwf	?_exp+1,c
 10573  000FA6  0E00               	movlw	0
 10574  000FA8  6E4B               	movwf	?_exp+2,c
 10575  000FAA  0012               	return	
 10576  000FAC                     i2l3685:
 10577  000FAC  0E00               	movlw	0
 10578  000FAE  6E09               	movwf	i2___ftdiv@f1,c
 10579  000FB0  0E80               	movlw	128
 10580  000FB2  6E0A               	movwf	i2___ftdiv@f1+1,c
 10581  000FB4  0E3F               	movlw	63
 10582  000FB6  6E0B               	movwf	i2___ftdiv@f1+2,c
 10583  000FB8  C049  F00C         	movff	exp@x,i2___ftdiv@f2
 10584  000FBC  C04A  F00D         	movff	exp@x+1,i2___ftdiv@f2+1
 10585  000FC0  C04B  F00E         	movff	exp@x+2,i2___ftdiv@f2+2
 10586  000FC4  EC5B  F00E         	call	i2___ftdiv	;wreg free
 10587  000FC8  C009  F049         	movff	?i2___ftdiv,?_exp
 10588  000FCC  C00A  F04A         	movff	?i2___ftdiv+1,?_exp+1
 10589  000FD0  C00B  F04B         	movff	?i2___ftdiv+2,?_exp+2
 10590  000FD4  0012               	return	
 10591  000FD6                     i2l1065:
 10592  000FD6  C049  F049         	movff	exp@x,?_exp
 10593  000FDA  C04A  F04A         	movff	exp@x+1,?_exp+1
 10594  000FDE  C04B  F04B         	movff	exp@x+2,?_exp+2
 10595  000FE2  0012               	return		;funcret
 10596  000FE4                     __end_of_exp:
 10597                           	opt stack 0
 10598                           pclatu	equ	0xFFB
 10599                           pclath	equ	0xFFA
 10600                           tblptru	equ	0xFF8
 10601                           tblptrh	equ	0xFF7
 10602                           tblptrl	equ	0xFF6
 10603                           tablat	equ	0xFF5
 10604                           prodh	equ	0xFF4
 10605                           prodl	equ	0xFF3
 10606                           intcon	equ	0xFF2
 10607                           intcon2	equ	0xFF1
 10608                           intcon3	equ	0xFF0
 10609                           postinc0	equ	0xFEE
 10610                           fsr0h	equ	0xFEA
 10611                           fsr0l	equ	0xFE9
 10612                           wreg	equ	0xFE8
 10613                           indf1	equ	0xFE7
 10614                           fsr1h	equ	0xFE2
 10615                           fsr1l	equ	0xFE1
 10616                           indf2	equ	0xFDF
 10617                           postinc2	equ	0xFDE
 10618                           postdec2	equ	0xFDD
 10619                           fsr2h	equ	0xFDA
 10620                           fsr2l	equ	0xFD9
 10621                           status	equ	0xFD8
 10622                           
 10623 ;; *************** function i2___ftdiv *****************
 10624 ;; Defined at:
 10625 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  f1              3    8[COMRAM] float 
 10628 ;;  f2              3   11[COMRAM] float 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;  __ftdiv         3   18[COMRAM] float 
 10631 ;;  __ftdiv         1   22[COMRAM] unsigned char 
 10632 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 10633 ;;  __ftdiv         1   17[COMRAM] unsigned char 
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  3    8[COMRAM] float 
 10636 ;; Registers used:
 10637 ;;		wreg, status,2, status,0, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10643 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;Total ram usage:       15 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    1
 10650 ;; This function calls:
 10651 ;;		i2___ftpack
 10652 ;; This function is called by:
 10653 ;;		_exp
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           	psect	text51
 10658  001CB6                     __ptext51:
 10659                           	opt stack 0
 10660  001CB6                     i2___ftdiv:
 10661                           	opt stack 21
 10662                           
 10663                           ;incstack = 0
 10664  001CB6  C00B  F00F         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 10665  001CBA  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 10666  001CBC  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 10667  001CBE  340A               	rlcf	i2___ftdiv@f1+1,w,c
 10668  001CC0  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 10669  001CC2  E301               	bnc	u307_41
 10670  001CC4  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10671  001CC6                     u307_41:
 10672  001CC6  500F               	movf	??i2___ftdiv,w,c
 10673  001CC8  6E16               	movwf	i2___ftdiv@exp,c
 10674  001CCA  5016               	movf	i2___ftdiv@exp,w,c
 10675  001CCC  A4D8               	btfss	status,2,c
 10676  001CCE  D007               	goto	i2l3475
 10677  001CD0  0E00               	movlw	0
 10678  001CD2  6E09               	movwf	?i2___ftdiv,c
 10679  001CD4  0E00               	movlw	0
 10680  001CD6  6E0A               	movwf	?i2___ftdiv+1,c
 10681  001CD8  0E00               	movlw	0
 10682  001CDA  6E0B               	movwf	?i2___ftdiv+2,c
 10683  001CDC  0012               	return	
 10684  001CDE                     i2l3475:
 10685  001CDE  C00E  F00F         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 10686  001CE2  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 10687  001CE4  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 10688  001CE6  340D               	rlcf	i2___ftdiv@f2+1,w,c
 10689  001CE8  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 10690  001CEA  E301               	bnc	u309_41
 10691  001CEC  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 10692  001CEE                     u309_41:
 10693  001CEE  500F               	movf	??i2___ftdiv,w,c
 10694  001CF0  6E17               	movwf	i2___ftdiv@sign,c
 10695  001CF2  5017               	movf	i2___ftdiv@sign,w,c
 10696  001CF4  A4D8               	btfss	status,2,c
 10697  001CF6  D007               	goto	i2l3481
 10698  001CF8  0E00               	movlw	0
 10699  001CFA  6E09               	movwf	?i2___ftdiv,c
 10700  001CFC  0E00               	movlw	0
 10701  001CFE  6E0A               	movwf	?i2___ftdiv+1,c
 10702  001D00  0E00               	movlw	0
 10703  001D02  6E0B               	movwf	?i2___ftdiv+2,c
 10704  001D04  0012               	return	
 10705  001D06                     i2l3481:
 10706  001D06  0E00               	movlw	0
 10707  001D08  6E13               	movwf	i2___ftdiv@f3,c
 10708  001D0A  0E00               	movlw	0
 10709  001D0C  6E14               	movwf	i2___ftdiv@f3+1,c
 10710  001D0E  0E00               	movlw	0
 10711  001D10  6E15               	movwf	i2___ftdiv@f3+2,c
 10712  001D12  5017               	movf	i2___ftdiv@sign,w,c
 10713  001D14  0F89               	addlw	137
 10714  001D16  5E16               	subwf	i2___ftdiv@exp,f,c
 10715  001D18  C00B  F017         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 10716  001D1C  500E               	movf	i2___ftdiv@f2+2,w,c
 10717  001D1E  1A17               	xorwf	i2___ftdiv@sign,f,c
 10718  001D20  0E80               	movlw	128
 10719  001D22  1617               	andwf	i2___ftdiv@sign,f,c
 10720  001D24  8E0A               	bsf	i2___ftdiv@f1+1,7,c
 10721  001D26  0EFF               	movlw	255
 10722  001D28  1609               	andwf	i2___ftdiv@f1,f,c
 10723  001D2A  0EFF               	movlw	255
 10724  001D2C  160A               	andwf	i2___ftdiv@f1+1,f,c
 10725  001D2E  0E00               	movlw	0
 10726  001D30  160B               	andwf	i2___ftdiv@f1+2,f,c
 10727  001D32  8E0D               	bsf	i2___ftdiv@f2+1,7,c
 10728  001D34  0EFF               	movlw	255
 10729  001D36  160C               	andwf	i2___ftdiv@f2,f,c
 10730  001D38  0EFF               	movlw	255
 10731  001D3A  160D               	andwf	i2___ftdiv@f2+1,f,c
 10732  001D3C  0E00               	movlw	0
 10733  001D3E  160E               	andwf	i2___ftdiv@f2+2,f,c
 10734  001D40  0E18               	movlw	24
 10735  001D42  6E12               	movwf	i2___ftdiv@cntr,c
 10736  001D44                     i2l3501:
 10737  001D44  90D8               	bcf	status,0,c
 10738  001D46  3613               	rlcf	i2___ftdiv@f3,f,c
 10739  001D48  3614               	rlcf	i2___ftdiv@f3+1,f,c
 10740  001D4A  3615               	rlcf	i2___ftdiv@f3+2,f,c
 10741  001D4C  500C               	movf	i2___ftdiv@f2,w,c
 10742  001D4E  5C09               	subwf	i2___ftdiv@f1,w,c
 10743  001D50  500D               	movf	i2___ftdiv@f2+1,w,c
 10744  001D52  580A               	subwfb	i2___ftdiv@f1+1,w,c
 10745  001D54  500E               	movf	i2___ftdiv@f2+2,w,c
 10746  001D56  580B               	subwfb	i2___ftdiv@f1+2,w,c
 10747  001D58  A0D8               	btfss	status,0,c
 10748  001D5A  D007               	goto	i2l744
 10749  001D5C  500C               	movf	i2___ftdiv@f2,w,c
 10750  001D5E  5E09               	subwf	i2___ftdiv@f1,f,c
 10751  001D60  500D               	movf	i2___ftdiv@f2+1,w,c
 10752  001D62  5A0A               	subwfb	i2___ftdiv@f1+1,f,c
 10753  001D64  500E               	movf	i2___ftdiv@f2+2,w,c
 10754  001D66  5A0B               	subwfb	i2___ftdiv@f1+2,f,c
 10755  001D68  8013               	bsf	i2___ftdiv@f3,0,c
 10756  001D6A                     i2l744:
 10757  001D6A  90D8               	bcf	status,0,c
 10758  001D6C  3609               	rlcf	i2___ftdiv@f1,f,c
 10759  001D6E  360A               	rlcf	i2___ftdiv@f1+1,f,c
 10760  001D70  360B               	rlcf	i2___ftdiv@f1+2,f,c
 10761  001D72  2E12               	decfsz	i2___ftdiv@cntr,f,c
 10762  001D74  D7E7               	goto	i2l3501
 10763  001D76  C013  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 10764  001D7A  C014  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 10765  001D7E  C015  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 10766  001D82  C016  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 10767  001D86  C017  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 10768  001D8A  EC10  F012         	call	i2___ftpack	;wreg free
 10769  001D8E  C001  F009         	movff	?i2___ftpack,?i2___ftdiv
 10770  001D92  C002  F00A         	movff	?i2___ftpack+1,?i2___ftdiv+1
 10771  001D96  C003  F00B         	movff	?i2___ftpack+2,?i2___ftdiv+2
 10772  001D9A  0012               	return	
 10773  001D9C                     __end_ofi2___ftdiv:
 10774                           	opt stack 0
 10775                           pclatu	equ	0xFFB
 10776                           pclath	equ	0xFFA
 10777                           tblptru	equ	0xFF8
 10778                           tblptrh	equ	0xFF7
 10779                           tblptrl	equ	0xFF6
 10780                           tablat	equ	0xFF5
 10781                           prodh	equ	0xFF4
 10782                           prodl	equ	0xFF3
 10783                           intcon	equ	0xFF2
 10784                           intcon2	equ	0xFF1
 10785                           intcon3	equ	0xFF0
 10786                           postinc0	equ	0xFEE
 10787                           fsr0h	equ	0xFEA
 10788                           fsr0l	equ	0xFE9
 10789                           wreg	equ	0xFE8
 10790                           indf1	equ	0xFE7
 10791                           fsr1h	equ	0xFE2
 10792                           fsr1l	equ	0xFE1
 10793                           indf2	equ	0xFDF
 10794                           postinc2	equ	0xFDE
 10795                           postdec2	equ	0xFDD
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function i2___awtoft *****************
 10801 ;; Defined at:
 10802 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  c               2    8[COMRAM] int 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  __awtoft        1   11[COMRAM] unsigned char 
 10807 ;; Return value:  Size  Location     Type
 10808 ;;                  3    8[COMRAM] float 
 10809 ;; Registers used:
 10810 ;;		wreg, status,2, status,0, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 0/0
 10813 ;;		On exit  : 0/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10816 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;Total ram usage:        4 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    1
 10823 ;; This function calls:
 10824 ;;		i2___ftpack
 10825 ;; This function is called by:
 10826 ;;		_dec_to_hex
 10827 ;;		_exp
 10828 ;;		_log
 10829 ;;		i2_read_colorsensor
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           	psect	text52
 10834  002CAC                     __ptext52:
 10835                           	opt stack 0
 10836  002CAC                     i2___awtoft:
 10837                           	opt stack 23
 10838                           
 10839                           ;incstack = 0
 10840  002CAC  0E00               	movlw	0
 10841  002CAE  6E0C               	movwf	i2___awtoft@sign,c
 10842  002CB0  AE0A               	btfss	i2___awtoft@c+1,7,c
 10843  002CB2  D006               	goto	i2l3465
 10844  002CB4  6C09               	negf	i2___awtoft@c,c
 10845  002CB6  1E0A               	comf	i2___awtoft@c+1,f,c
 10846  002CB8  B0D8               	btfsc	status,0,c
 10847  002CBA  2A0A               	incf	i2___awtoft@c+1,f,c
 10848  002CBC  0E01               	movlw	1
 10849  002CBE  6E0C               	movwf	i2___awtoft@sign,c
 10850  002CC0                     i2l3465:
 10851  002CC0  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 10852  002CC4  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 10853  002CC8  6A03               	clrf	i2___ftpack@arg+2,c
 10854  002CCA  0E8E               	movlw	142
 10855  002CCC  6E04               	movwf	i2___ftpack@exp,c
 10856  002CCE  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 10857  002CD2  EC10  F012         	call	i2___ftpack	;wreg free
 10858  002CD6  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 10859  002CDA  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 10860  002CDE  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 10861  002CE2  0012               	return	
 10862  002CE4                     __end_ofi2___awtoft:
 10863                           	opt stack 0
 10864                           pclatu	equ	0xFFB
 10865                           pclath	equ	0xFFA
 10866                           tblptru	equ	0xFF8
 10867                           tblptrh	equ	0xFF7
 10868                           tblptrl	equ	0xFF6
 10869                           tablat	equ	0xFF5
 10870                           prodh	equ	0xFF4
 10871                           prodl	equ	0xFF3
 10872                           intcon	equ	0xFF2
 10873                           intcon2	equ	0xFF1
 10874                           intcon3	equ	0xFF0
 10875                           postinc0	equ	0xFEE
 10876                           fsr0h	equ	0xFEA
 10877                           fsr0l	equ	0xFE9
 10878                           wreg	equ	0xFE8
 10879                           indf1	equ	0xFE7
 10880                           fsr1h	equ	0xFE2
 10881                           fsr1l	equ	0xFE1
 10882                           indf2	equ	0xFDF
 10883                           postinc2	equ	0xFDE
 10884                           postdec2	equ	0xFDD
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _ldexp *****************
 10890 ;; Defined at:
 10891 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  value           3   51[COMRAM] float 
 10894 ;;  newexp          2   54[COMRAM] int 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  3   51[COMRAM] int 
 10899 ;; Registers used:
 10900 ;;		wreg, status,2, status,0
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:        7 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; This function calls:
 10913 ;;		Nothing
 10914 ;; This function is called by:
 10915 ;;		_exp
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           	psect	text53
 10920  00229E                     __ptext53:
 10921                           	opt stack 0
 10922  00229E                     _ldexp:
 10923                           	opt stack 22
 10924                           
 10925                           ;incstack = 0
 10926  00229E  5034               	movf	ldexp@value,w,c
 10927  0022A0  1035               	iorwf	ldexp@value+1,w,c
 10928  0022A2  1036               	iorwf	ldexp@value+2,w,c
 10929  0022A4  A4D8               	btfss	status,2,c
 10930  0022A6  D007               	goto	i2l3427
 10931  0022A8  0E00               	movlw	0
 10932  0022AA  6E34               	movwf	?_ldexp,c
 10933  0022AC  0E00               	movlw	0
 10934  0022AE  6E35               	movwf	?_ldexp+1,c
 10935  0022B0  0E00               	movlw	0
 10936  0022B2  6E36               	movwf	?_ldexp+2,c
 10937  0022B4  0012               	return	
 10938  0022B6                     i2l3427:
 10939  0022B6  5036               	movf	ldexp@value+2,w,c
 10940  0022B8  0B7F               	andlw	127
 10941  0022BA  6E39               	movwf	??_ldexp& (0+255),c
 10942  0022BC  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10943  0022BE  90D8               	bcf	status,0,c
 10944  0022C0  3639               	rlcf	??_ldexp,f,c
 10945  0022C2  363A               	rlcf	??_ldexp+1,f,c
 10946  0022C4  5039               	movf	??_ldexp,w,c
 10947  0022C6  2637               	addwf	ldexp@newexp,f,c
 10948  0022C8  503A               	movf	??_ldexp+1,w,c
 10949  0022CA  2238               	addwfc	ldexp@newexp+1,f,c
 10950  0022CC  AE35               	btfss	ldexp@value+1,7,c
 10951  0022CE  D003               	goto	i2u302_40
 10952  0022D0  6A39               	clrf	??_ldexp& (0+255),c
 10953  0022D2  2A39               	incf	??_ldexp& (0+255),f,c
 10954  0022D4  D001               	goto	i2u302_48
 10955  0022D6                     i2u302_40:
 10956  0022D6  6A39               	clrf	??_ldexp& (0+255),c
 10957  0022D8                     i2u302_48:
 10958  0022D8  5039               	movf	??_ldexp,w,c
 10959  0022DA  2637               	addwf	ldexp@newexp,f,c
 10960  0022DC  0E00               	movlw	0
 10961  0022DE  2238               	addwfc	ldexp@newexp+1,f,c
 10962  0022E0  AE38               	btfss	ldexp@newexp+1,7,c
 10963  0022E2  D00C               	goto	i2l3435
 10964  0022E4  0E00               	movlw	0
 10965  0022E6  0100               	movlb	0	; () banked
 10966  0022E8  6FA8               	movwf	(_errno+1)& (0+255),b
 10967  0022EA  0E22               	movlw	34
 10968  0022EC  6FA7               	movwf	_errno& (0+255),b
 10969  0022EE  0E00               	movlw	0
 10970  0022F0  6E34               	movwf	?_ldexp,c
 10971  0022F2  0E00               	movlw	0
 10972  0022F4  6E35               	movwf	?_ldexp+1,c
 10973  0022F6  0E00               	movlw	0
 10974  0022F8                     L11:
 10975  0022F8  6E36               	movwf	?_ldexp+2,c
 10976                           
 10977                           ; BSR set to: 0
 10978  0022FA  0012               	return	
 10979  0022FC                     i2l3435:
 10980  0022FC  BE38               	btfsc	ldexp@newexp+1,7,c
 10981  0022FE  D016               	goto	i2l3451
 10982  002300  0438               	decf	ldexp@newexp+1,w,c
 10983  002302  A0D8               	btfss	status,0,c
 10984  002304  D013               	goto	i2l3451
 10985  002306  0E00               	movlw	0
 10986  002308  0100               	movlb	0	; () banked
 10987  00230A  6FA8               	movwf	(_errno+1)& (0+255),b
 10988  00230C  0E22               	movlw	34
 10989  00230E  6FA7               	movwf	_errno& (0+255),b
 10990                           
 10991                           ; BSR set to: 0
 10992  002310  AE36               	btfss	ldexp@value+2,7,c
 10993  002312  D006               	goto	i2l3447
 10994                           
 10995                           ; BSR set to: 0
 10996  002314  0EFF               	movlw	255
 10997  002316  6E34               	movwf	?_ldexp,c
 10998  002318  0E7F               	movlw	127
 10999  00231A  6E35               	movwf	?_ldexp+1,c
 11000  00231C  0EFF               	movlw	255
 11001  00231E  D7EC               	goto	L11
 11002  002320                     i2l3447:
 11003                           
 11004                           ; BSR set to: 0
 11005  002320  0EFF               	movlw	255
 11006  002322  6E34               	movwf	?_ldexp,c
 11007  002324  0E7F               	movlw	127
 11008  002326  6E35               	movwf	?_ldexp+1,c
 11009  002328  0E7F               	movlw	127
 11010  00232A  D7E6               	goto	L11
 11011  00232C                     i2l3451:
 11012  00232C  3438               	rlcf	ldexp@newexp+1,w,c
 11013  00232E  3038               	rrcf	ldexp@newexp+1,w,c
 11014  002330  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 11015  002332  3037               	rrcf	ldexp@newexp,w,c
 11016  002334  6E39               	movwf	??_ldexp& (0+255),c
 11017  002336  5036               	movf	ldexp@value+2,w,c
 11018  002338  1839               	xorwf	??_ldexp,w,c
 11019  00233A  0B80               	andlw	-128
 11020  00233C  1839               	xorwf	??_ldexp,w,c
 11021  00233E  6E36               	movwf	ldexp@value+2,c
 11022  002340  C037  F039         	movff	ldexp@newexp,??_ldexp
 11023  002344  0E01               	movlw	1
 11024  002346  1639               	andwf	??_ldexp,f,c
 11025  002348  3239               	rrcf	??_ldexp,f,c
 11026  00234A  3239               	rrcf	??_ldexp,f,c
 11027  00234C  5035               	movf	ldexp@value+1,w,c
 11028  00234E  1839               	xorwf	??_ldexp,w,c
 11029  002350  0B7F               	andlw	-129
 11030  002352  1839               	xorwf	??_ldexp,w,c
 11031  002354  6E35               	movwf	ldexp@value+1,c
 11032  002356  C034  F034         	movff	ldexp@value,?_ldexp
 11033  00235A  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 11034  00235E  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 11035  002362  0012               	return	
 11036  002364                     __end_of_ldexp:
 11037                           	opt stack 0
 11038                           pclatu	equ	0xFFB
 11039                           pclath	equ	0xFFA
 11040                           tblptru	equ	0xFF8
 11041                           tblptrh	equ	0xFF7
 11042                           tblptrl	equ	0xFF6
 11043                           tablat	equ	0xFF5
 11044                           prodh	equ	0xFF4
 11045                           prodl	equ	0xFF3
 11046                           intcon	equ	0xFF2
 11047                           intcon2	equ	0xFF1
 11048                           intcon3	equ	0xFF0
 11049                           postinc0	equ	0xFEE
 11050                           fsr0h	equ	0xFEA
 11051                           fsr0l	equ	0xFE9
 11052                           wreg	equ	0xFE8
 11053                           indf1	equ	0xFE7
 11054                           fsr1h	equ	0xFE2
 11055                           fsr1l	equ	0xFE1
 11056                           indf2	equ	0xFDF
 11057                           postinc2	equ	0xFDE
 11058                           postdec2	equ	0xFDD
 11059                           fsr2h	equ	0xFDA
 11060                           fsr2l	equ	0xFD9
 11061                           status	equ	0xFD8
 11062                           
 11063 ;; *************** function _floor *****************
 11064 ;; Defined at:
 11065 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 11066 ;; Parameters:    Size  Location     Type
 11067 ;;  x               3   64[COMRAM] int 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  i               3   67[COMRAM] int 
 11070 ;;  expon           2   70[COMRAM] int 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  3   64[COMRAM] int 
 11073 ;; Registers used:
 11074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11080 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11083 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11084 ;;Total ram usage:        8 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    2
 11087 ;; This function calls:
 11088 ;;		___altoft
 11089 ;;		___ftadd
 11090 ;;		___fttol
 11091 ;;		_frexp
 11092 ;;		i2___ftge
 11093 ;; This function is called by:
 11094 ;;		_exp
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           	psect	text54
 11099  001D9C                     __ptext54:
 11100                           	opt stack 0
 11101  001D9C                     _floor:
 11102                           	opt stack 20
 11103                           
 11104                           ;incstack = 0
 11105  001D9C  C041  F001         	movff	floor@x,frexp@value
 11106  001DA0  C042  F002         	movff	floor@x+1,frexp@value+1
 11107  001DA4  C043  F003         	movff	floor@x+2,frexp@value+2
 11108  001DA8  0E47               	movlw	low floor@expon
 11109  001DAA  6E04               	movwf	frexp@eptr,c
 11110  001DAC  0E00               	movlw	high floor@expon
 11111  001DAE  6E05               	movwf	frexp@eptr+1,c
 11112  001DB0  EC48  F013         	call	_frexp	;wreg free
 11113  001DB4  AE48               	btfss	floor@expon+1,7,c
 11114  001DB6  D010               	goto	i2l3405
 11115  001DB8  AE43               	btfss	floor@x+2,7,c
 11116  001DBA  D007               	goto	i2l3401
 11117  001DBC  0E00               	movlw	0
 11118  001DBE  6E41               	movwf	?_floor,c
 11119  001DC0  0E80               	movlw	128
 11120  001DC2  6E42               	movwf	?_floor+1,c
 11121  001DC4  0EBF               	movlw	191
 11122  001DC6  6E43               	movwf	?_floor+2,c
 11123  001DC8  0012               	return	
 11124  001DCA                     i2l3401:
 11125  001DCA  0E00               	movlw	0
 11126  001DCC  6E41               	movwf	?_floor,c
 11127  001DCE  0E00               	movlw	0
 11128  001DD0  6E42               	movwf	?_floor+1,c
 11129  001DD2  0E00               	movlw	0
 11130  001DD4  6E43               	movwf	?_floor+2,c
 11131  001DD6  0012               	return	
 11132  001DD8                     i2l3405:
 11133  001DD8  5048               	movf	floor@expon+1,w,c
 11134  001DDA  E104               	bnz	i2u298_40
 11135  001DDC  0E15               	movlw	21
 11136  001DDE  5C47               	subwf	floor@expon,w,c
 11137  001DE0  A0D8               	btfss	status,0,c
 11138  001DE2  D007               	goto	i2l3409
 11139  001DE4                     i2u298_40:
 11140  001DE4  C041  F041         	movff	floor@x,?_floor
 11141  001DE8  C042  F042         	movff	floor@x+1,?_floor+1
 11142  001DEC  C043  F043         	movff	floor@x+2,?_floor+2
 11143  001DF0  0012               	return	
 11144  001DF2                     i2l3409:
 11145  001DF2  C041  F028         	movff	floor@x,___fttol@f1
 11146  001DF6  C042  F029         	movff	floor@x+1,___fttol@f1+1
 11147  001DFA  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 11148  001DFE  EC67  F00D         	call	___fttol	;wreg free
 11149  001E02  C028  F037         	movff	?___fttol,___altoft@c
 11150  001E06  C029  F038         	movff	?___fttol+1,___altoft@c+1
 11151  001E0A  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 11152  001E0E  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 11153  001E12  EC0E  F014         	call	___altoft	;wreg free
 11154  001E16  C037  F044         	movff	?___altoft,floor@i
 11155  001E1A  C038  F045         	movff	?___altoft+1,floor@i+1
 11156  001E1E  C039  F046         	movff	?___altoft+2,floor@i+2
 11157  001E22  C041  F001         	movff	floor@x,i2___ftge@ff1
 11158  001E26  C042  F002         	movff	floor@x+1,i2___ftge@ff1+1
 11159  001E2A  C043  F003         	movff	floor@x+2,i2___ftge@ff1+2
 11160  001E2E  C044  F004         	movff	floor@i,i2___ftge@ff2
 11161  001E32  C045  F005         	movff	floor@i+1,i2___ftge@ff2+1
 11162  001E36  C046  F006         	movff	floor@i+2,i2___ftge@ff2+2
 11163  001E3A  EC00  F013         	call	i2___ftge	;wreg free
 11164  001E3E  B0D8               	btfsc	status,0,c
 11165  001E40  D015               	goto	i2l1075
 11166  001E42  C044  F01C         	movff	floor@i,___ftadd@f1
 11167  001E46  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 11168  001E4A  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 11169  001E4E  0E00               	movlw	0
 11170  001E50  6E1F               	movwf	___ftadd@f2,c
 11171  001E52  0E80               	movlw	128
 11172  001E54  6E20               	movwf	___ftadd@f2+1,c
 11173  001E56  0EBF               	movlw	191
 11174  001E58  6E21               	movwf	___ftadd@f2+2,c
 11175  001E5A  ECF2  F007         	call	___ftadd	;wreg free
 11176  001E5E  C01C  F041         	movff	?___ftadd,?_floor
 11177  001E62  C01D  F042         	movff	?___ftadd+1,?_floor+1
 11178  001E66  C01E  F043         	movff	?___ftadd+2,?_floor+2
 11179  001E6A  0012               	return	
 11180  001E6C                     i2l1075:
 11181  001E6C  C044  F041         	movff	floor@i,?_floor
 11182  001E70  C045  F042         	movff	floor@i+1,?_floor+1
 11183  001E74  C046  F043         	movff	floor@i+2,?_floor+2
 11184  001E78  0012               	return		;funcret
 11185  001E7A                     __end_of_floor:
 11186                           	opt stack 0
 11187                           pclatu	equ	0xFFB
 11188                           pclath	equ	0xFFA
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           intcon2	equ	0xFF1
 11197                           intcon3	equ	0xFF0
 11198                           postinc0	equ	0xFEE
 11199                           fsr0h	equ	0xFEA
 11200                           fsr0l	equ	0xFE9
 11201                           wreg	equ	0xFE8
 11202                           indf1	equ	0xFE7
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function i2___ftge *****************
 11213 ;; Defined at:
 11214 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  ff1             3    0[COMRAM] float 
 11217 ;;  ff2             3    3[COMRAM] float 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;		None
 11220 ;; Return value:  Size  Location     Type
 11221 ;;		None               void
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11229 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11232 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11233 ;;Total ram usage:        9 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; This function calls:
 11236 ;;		Nothing
 11237 ;; This function is called by:
 11238 ;;		_pow
 11239 ;;		_exp
 11240 ;;		_floor
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           	psect	text55
 11245  002600                     __ptext55:
 11246                           	opt stack 0
 11247  002600                     i2___ftge:
 11248                           	opt stack 23
 11249                           
 11250                           ;incstack = 0
 11251  002600  AE03               	btfss	i2___ftge@ff1+2,7,c
 11252  002602  D016               	goto	i2l3307
 11253  002604  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 11254  002608  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 11255  00260C  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 11256  002610  1E07               	comf	??i2___ftge,f,c
 11257  002612  1E08               	comf	??i2___ftge+1,f,c
 11258  002614  1E09               	comf	??i2___ftge+2,f,c
 11259  002616  2A07               	incf	??i2___ftge,f,c
 11260  002618  0E00               	movlw	0
 11261  00261A  2208               	addwfc	??i2___ftge+1,f,c
 11262  00261C  2209               	addwfc	??i2___ftge+2,f,c
 11263  00261E  0E00               	movlw	0
 11264  002620  2407               	addwf	??i2___ftge,w,c
 11265  002622  6E01               	movwf	i2___ftge@ff1,c
 11266  002624  0E00               	movlw	0
 11267  002626  2008               	addwfc	??i2___ftge+1,w,c
 11268  002628  6E02               	movwf	i2___ftge@ff1+1,c
 11269  00262A  0E80               	movlw	128
 11270  00262C  2009               	addwfc	??i2___ftge+2,w,c
 11271  00262E  6E03               	movwf	i2___ftge@ff1+2,c
 11272  002630                     i2l3307:
 11273  002630  AE06               	btfss	i2___ftge@ff2+2,7,c
 11274  002632  D016               	goto	i2l3311
 11275  002634  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 11276  002638  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 11277  00263C  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 11278  002640  1E07               	comf	??i2___ftge,f,c
 11279  002642  1E08               	comf	??i2___ftge+1,f,c
 11280  002644  1E09               	comf	??i2___ftge+2,f,c
 11281  002646  2A07               	incf	??i2___ftge,f,c
 11282  002648  0E00               	movlw	0
 11283  00264A  2208               	addwfc	??i2___ftge+1,f,c
 11284  00264C  2209               	addwfc	??i2___ftge+2,f,c
 11285  00264E  0E00               	movlw	0
 11286  002650  2407               	addwf	??i2___ftge,w,c
 11287  002652  6E04               	movwf	i2___ftge@ff2,c
 11288  002654  0E00               	movlw	0
 11289  002656  2008               	addwfc	??i2___ftge+1,w,c
 11290  002658  6E05               	movwf	i2___ftge@ff2+1,c
 11291  00265A  0E80               	movlw	128
 11292  00265C  2009               	addwfc	??i2___ftge+2,w,c
 11293  00265E  6E06               	movwf	i2___ftge@ff2+2,c
 11294  002660                     i2l3311:
 11295  002660  0E00               	movlw	0
 11296  002662  1A01               	xorwf	i2___ftge@ff1,f,c
 11297  002664  0E00               	movlw	0
 11298  002666  1A02               	xorwf	i2___ftge@ff1+1,f,c
 11299  002668  0E80               	movlw	128
 11300  00266A  1A03               	xorwf	i2___ftge@ff1+2,f,c
 11301  00266C  0E00               	movlw	0
 11302  00266E  1A04               	xorwf	i2___ftge@ff2,f,c
 11303  002670  0E00               	movlw	0
 11304  002672  1A05               	xorwf	i2___ftge@ff2+1,f,c
 11305  002674  0E80               	movlw	128
 11306  002676  1A06               	xorwf	i2___ftge@ff2+2,f,c
 11307  002678  5004               	movf	i2___ftge@ff2,w,c
 11308  00267A  5C01               	subwf	i2___ftge@ff1,w,c
 11309  00267C  5005               	movf	i2___ftge@ff2+1,w,c
 11310  00267E  5802               	subwfb	i2___ftge@ff1+1,w,c
 11311  002680  5006               	movf	i2___ftge@ff2+2,w,c
 11312  002682  5803               	subwfb	i2___ftge@ff1+2,w,c
 11313  002684  B0D8               	btfsc	status,0,c
 11314  002686  D002               	goto	i2l3317
 11315  002688  90D8               	bcf	status,0,c
 11316  00268A  0012               	return	
 11317  00268C                     i2l3317:
 11318  00268C  80D8               	bsf	status,0,c
 11319  00268E  0012               	return	
 11320  002690                     __end_ofi2___ftge:
 11321                           	opt stack 0
 11322                           pclatu	equ	0xFFB
 11323                           pclath	equ	0xFFA
 11324                           tblptru	equ	0xFF8
 11325                           tblptrh	equ	0xFF7
 11326                           tblptrl	equ	0xFF6
 11327                           tablat	equ	0xFF5
 11328                           prodh	equ	0xFF4
 11329                           prodl	equ	0xFF3
 11330                           intcon	equ	0xFF2
 11331                           intcon2	equ	0xFF1
 11332                           intcon3	equ	0xFF0
 11333                           postinc0	equ	0xFEE
 11334                           fsr0h	equ	0xFEA
 11335                           fsr0l	equ	0xFE9
 11336                           wreg	equ	0xFE8
 11337                           indf1	equ	0xFE7
 11338                           fsr1h	equ	0xFE2
 11339                           fsr1l	equ	0xFE1
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           fsr2h	equ	0xFDA
 11344                           fsr2l	equ	0xFD9
 11345                           status	equ	0xFD8
 11346                           
 11347 ;; *************** function _frexp *****************
 11348 ;; Defined at:
 11349 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  value           3    0[COMRAM] float 
 11352 ;;  eptr            2    3[COMRAM] PTR int 
 11353 ;;		 -> log@exponent(2), floor@expon(2), 
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;		None
 11356 ;; Return value:  Size  Location     Type
 11357 ;;                  3    0[COMRAM] PTR int 
 11358 ;; Registers used:
 11359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11360 ;; Tracked objects:
 11361 ;;		On entry : 0/0
 11362 ;;		On exit  : 0/0
 11363 ;;		Unchanged: 0/0
 11364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11365 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;Total ram usage:        7 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; This function calls:
 11372 ;;		Nothing
 11373 ;; This function is called by:
 11374 ;;		_floor
 11375 ;;		_log
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           	psect	text56
 11380  002690                     __ptext56:
 11381                           	opt stack 0
 11382  002690                     _frexp:
 11383                           	opt stack 22
 11384                           
 11385                           ;incstack = 0
 11386  002690  5001               	movf	frexp@value,w,c
 11387  002692  1002               	iorwf	frexp@value+1,w,c
 11388  002694  1003               	iorwf	frexp@value+2,w,c
 11389  002696  A4D8               	btfss	status,2,c
 11390  002698  D00F               	goto	i2l3285
 11391  00269A  C004  FFD9         	movff	frexp@eptr,fsr2l
 11392  00269E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11393  0026A2  0E00               	movlw	0
 11394  0026A4  6EDE               	movwf	postinc2,c
 11395  0026A6  0E00               	movlw	0
 11396  0026A8  6EDD               	movwf	postdec2,c
 11397  0026AA  0E00               	movlw	0
 11398  0026AC  6E01               	movwf	?_frexp,c
 11399  0026AE  0E00               	movlw	0
 11400  0026B0  6E02               	movwf	?_frexp+1,c
 11401  0026B2  0E00               	movlw	0
 11402  0026B4  6E03               	movwf	?_frexp+2,c
 11403  0026B6  0012               	return	
 11404  0026B8                     i2l3285:
 11405  0026B8  5003               	movf	frexp@value+2,w,c
 11406  0026BA  0B7F               	andlw	127
 11407  0026BC  6E06               	movwf	??_frexp& (0+255),c
 11408  0026BE  6A07               	clrf	(??_frexp+1)& (0+255),c
 11409  0026C0  90D8               	bcf	status,0,c
 11410  0026C2  3606               	rlcf	??_frexp,f,c
 11411  0026C4  3607               	rlcf	??_frexp+1,f,c
 11412  0026C6  C004  FFD9         	movff	frexp@eptr,fsr2l
 11413  0026CA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11414  0026CE  C006  FFDE         	movff	??_frexp,postinc2
 11415  0026D2  C007  FFDD         	movff	??_frexp+1,postdec2
 11416  0026D6  AE02               	btfss	frexp@value+1,7,c
 11417  0026D8  D003               	goto	i2u280_40
 11418  0026DA  6A06               	clrf	??_frexp& (0+255),c
 11419  0026DC  2A06               	incf	??_frexp& (0+255),f,c
 11420  0026DE  D001               	goto	i2u280_48
 11421  0026E0                     i2u280_40:
 11422  0026E0  6A06               	clrf	??_frexp& (0+255),c
 11423  0026E2                     i2u280_48:
 11424  0026E2  5006               	movf	??_frexp,w,c
 11425  0026E4  C004  FFD9         	movff	frexp@eptr,fsr2l
 11426  0026E8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11427  0026EC  12DE               	iorwf	postinc2,f,c
 11428  0026EE  0E00               	movlw	0
 11429  0026F0  12DD               	iorwf	postdec2,f,c
 11430  0026F2  C004  FFD9         	movff	frexp@eptr,fsr2l
 11431  0026F6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11432  0026FA  0E82               	movlw	130
 11433  0026FC  26DE               	addwf	postinc2,f,c
 11434  0026FE  0EFF               	movlw	255
 11435  002700  22DD               	addwfc	postdec2,f,c
 11436  002702  8003               	bsf	frexp@value+2,0,c
 11437  002704  8203               	bsf	frexp@value+2,1,c
 11438  002706  8403               	bsf	frexp@value+2,2,c
 11439  002708  8603               	bsf	frexp@value+2,3,c
 11440  00270A  8803               	bsf	frexp@value+2,4,c
 11441  00270C  8A03               	bsf	frexp@value+2,5,c
 11442  00270E  9C03               	bcf	frexp@value+2,6,c
 11443  002710  9E02               	bcf	frexp@value+1,7,c
 11444  002712  C001  F001         	movff	frexp@value,?_frexp
 11445  002716  C002  F002         	movff	frexp@value+1,?_frexp+1
 11446  00271A  C003  F003         	movff	frexp@value+2,?_frexp+2
 11447  00271E  0012               	return	
 11448  002720                     __end_of_frexp:
 11449                           	opt stack 0
 11450                           pclatu	equ	0xFFB
 11451                           pclath	equ	0xFFA
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon2	equ	0xFF1
 11460                           intcon3	equ	0xFF0
 11461                           postinc0	equ	0xFEE
 11462                           fsr0h	equ	0xFEA
 11463                           fsr0l	equ	0xFE9
 11464                           wreg	equ	0xFE8
 11465                           indf1	equ	0xFE7
 11466                           fsr1h	equ	0xFE2
 11467                           fsr1l	equ	0xFE1
 11468                           indf2	equ	0xFDF
 11469                           postinc2	equ	0xFDE
 11470                           postdec2	equ	0xFDD
 11471                           fsr2h	equ	0xFDA
 11472                           fsr2l	equ	0xFD9
 11473                           status	equ	0xFD8
 11474                           
 11475 ;; *************** function ___fttol *****************
 11476 ;; Defined at:
 11477 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;  f1              3   39[COMRAM] float 
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;  lval            4   49[COMRAM] unsigned long 
 11482 ;;  exp1            1   53[COMRAM] unsigned char 
 11483 ;;  sign1           1   48[COMRAM] unsigned char 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  4   39[COMRAM] long 
 11486 ;; Registers used:
 11487 ;;		wreg, status,2, status,0
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;Total ram usage:       15 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; This function calls:
 11500 ;;		Nothing
 11501 ;; This function is called by:
 11502 ;;		_dec_to_hex
 11503 ;;		_pow
 11504 ;;		_exp
 11505 ;;		_floor
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text57
 11510  001ACE                     __ptext57:
 11511                           	opt stack 0
 11512  001ACE                     ___fttol:
 11513                           	opt stack 21
 11514                           
 11515                           ;incstack = 0
 11516  001ACE  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 11517  001AD2  6A2D               	clrf	(??___fttol+1)& (0+255),c
 11518  001AD4  6A2E               	clrf	(??___fttol+2)& (0+255),c
 11519  001AD6  3429               	rlcf	___fttol@f1+1,w,c
 11520  001AD8  362C               	rlcf	??___fttol& (0+255),f,c
 11521  001ADA  E301               	bnc	u271_41
 11522  001ADC  802D               	bsf	(??___fttol+1)& (0+255),0,c
 11523  001ADE                     u271_41:
 11524  001ADE  502C               	movf	??___fttol,w,c
 11525  001AE0  6E36               	movwf	___fttol@exp1,c
 11526  001AE2  5036               	movf	___fttol@exp1,w,c
 11527  001AE4  A4D8               	btfss	status,2,c
 11528  001AE6  D009               	goto	i2l3237
 11529  001AE8  0E00               	movlw	0
 11530  001AEA  6E28               	movwf	?___fttol,c
 11531  001AEC  0E00               	movlw	0
 11532  001AEE  6E29               	movwf	?___fttol+1,c
 11533  001AF0  0E00               	movlw	0
 11534  001AF2  6E2A               	movwf	?___fttol+2,c
 11535  001AF4  0E00               	movlw	0
 11536  001AF6  6E2B               	movwf	?___fttol+3,c
 11537  001AF8  0012               	return	
 11538  001AFA                     i2l3237:
 11539  001AFA  0E17               	movlw	23
 11540  001AFC  6E2C               	movwf	??___fttol& (0+255),c
 11541  001AFE  C028  F02D         	movff	___fttol@f1,??___fttol+1
 11542  001B02  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 11543  001B06  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 11544  001B0A  282C               	incf	??___fttol,w,c
 11545  001B0C  6E30               	movwf	(??___fttol+4)& (0+255),c
 11546  001B0E  D004               	goto	i2u273_40
 11547  001B10                     i2u273_45:
 11548  001B10  90D8               	bcf	status,0,c
 11549  001B12  322F               	rrcf	??___fttol+3,f,c
 11550  001B14  322E               	rrcf	??___fttol+2,f,c
 11551  001B16  322D               	rrcf	??___fttol+1,f,c
 11552  001B18                     i2u273_40:
 11553  001B18  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 11554  001B1A  D7FA               	goto	i2u273_45
 11555  001B1C  502D               	movf	??___fttol+1,w,c
 11556  001B1E  6E31               	movwf	___fttol@sign1,c
 11557  001B20  8E29               	bsf	___fttol@f1+1,7,c
 11558  001B22  0EFF               	movlw	255
 11559  001B24  1628               	andwf	___fttol@f1,f,c
 11560  001B26  0EFF               	movlw	255
 11561  001B28  1629               	andwf	___fttol@f1+1,f,c
 11562  001B2A  0E00               	movlw	0
 11563  001B2C  162A               	andwf	___fttol@f1+2,f,c
 11564  001B2E  5028               	movf	___fttol@f1,w,c
 11565  001B30  6E32               	movwf	___fttol@lval,c
 11566  001B32  5029               	movf	___fttol@f1+1,w,c
 11567  001B34  6E33               	movwf	___fttol@lval+1,c
 11568  001B36  502A               	movf	___fttol@f1+2,w,c
 11569  001B38  6E34               	movwf	___fttol@lval+2,c
 11570  001B3A  6A35               	clrf	___fttol@lval+3,c
 11571  001B3C  0E8E               	movlw	142
 11572  001B3E  5E36               	subwf	___fttol@exp1,f,c
 11573  001B40  AE36               	btfss	___fttol@exp1,7,c
 11574  001B42  D016               	goto	i2l3259
 11575  001B44  5036               	movf	___fttol@exp1,w,c
 11576  001B46  0A80               	xorlw	128
 11577  001B48  0F8F               	addlw	143
 11578  001B4A  B0D8               	btfsc	status,0,c
 11579  001B4C  D009               	goto	i2l3255
 11580  001B4E  0E00               	movlw	0
 11581  001B50  6E28               	movwf	?___fttol,c
 11582  001B52  0E00               	movlw	0
 11583  001B54  6E29               	movwf	?___fttol+1,c
 11584  001B56  0E00               	movlw	0
 11585  001B58  6E2A               	movwf	?___fttol+2,c
 11586  001B5A  0E00               	movlw	0
 11587  001B5C  6E2B               	movwf	?___fttol+3,c
 11588  001B5E  0012               	return	
 11589  001B60                     i2l3255:
 11590  001B60  90D8               	bcf	status,0,c
 11591  001B62  3235               	rrcf	___fttol@lval+3,f,c
 11592  001B64  3234               	rrcf	___fttol@lval+2,f,c
 11593  001B66  3233               	rrcf	___fttol@lval+1,f,c
 11594  001B68  3232               	rrcf	___fttol@lval,f,c
 11595  001B6A  3E36               	incfsz	___fttol@exp1,f,c
 11596  001B6C  D7F9               	goto	i2l3255
 11597  001B6E  D015               	goto	i2l3269
 11598  001B70                     i2l3259:
 11599  001B70  0E17               	movlw	23
 11600  001B72  6436               	cpfsgt	___fttol@exp1,c
 11601  001B74  D00F               	goto	i2l3267
 11602  001B76  0E00               	movlw	0
 11603  001B78  6E28               	movwf	?___fttol,c
 11604  001B7A  0E00               	movlw	0
 11605  001B7C  6E29               	movwf	?___fttol+1,c
 11606  001B7E  0E00               	movlw	0
 11607  001B80  6E2A               	movwf	?___fttol+2,c
 11608  001B82  0E00               	movlw	0
 11609  001B84  6E2B               	movwf	?___fttol+3,c
 11610  001B86  0012               	return	
 11611  001B88                     i2l3265:
 11612  001B88  90D8               	bcf	status,0,c
 11613  001B8A  3632               	rlcf	___fttol@lval,f,c
 11614  001B8C  3633               	rlcf	___fttol@lval+1,f,c
 11615  001B8E  3634               	rlcf	___fttol@lval+2,f,c
 11616  001B90  3635               	rlcf	___fttol@lval+3,f,c
 11617  001B92  0636               	decf	___fttol@exp1,f,c
 11618  001B94                     i2l3267:
 11619  001B94  5036               	movf	___fttol@exp1,w,c
 11620  001B96  A4D8               	btfss	status,2,c
 11621  001B98  D7F7               	goto	i2l3265
 11622  001B9A                     i2l3269:
 11623  001B9A  5031               	movf	___fttol@sign1,w,c
 11624  001B9C  B4D8               	btfsc	status,2,c
 11625  001B9E  D008               	goto	i2l3273
 11626  001BA0  1E35               	comf	___fttol@lval+3,f,c
 11627  001BA2  1E34               	comf	___fttol@lval+2,f,c
 11628  001BA4  1E33               	comf	___fttol@lval+1,f,c
 11629  001BA6  6C32               	negf	___fttol@lval,c
 11630  001BA8  0E00               	movlw	0
 11631  001BAA  2233               	addwfc	___fttol@lval+1,f,c
 11632  001BAC  2234               	addwfc	___fttol@lval+2,f,c
 11633  001BAE  2235               	addwfc	___fttol@lval+3,f,c
 11634  001BB0                     i2l3273:
 11635  001BB0  C032  F028         	movff	___fttol@lval,?___fttol
 11636  001BB4  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 11637  001BB8  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 11638  001BBC  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 11639  001BC0  0012               	return	
 11640  001BC2                     __end_of___fttol:
 11641                           	opt stack 0
 11642                           pclatu	equ	0xFFB
 11643                           pclath	equ	0xFFA
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           intcon2	equ	0xFF1
 11652                           intcon3	equ	0xFF0
 11653                           postinc0	equ	0xFEE
 11654                           fsr0h	equ	0xFEA
 11655                           fsr0l	equ	0xFE9
 11656                           wreg	equ	0xFE8
 11657                           indf1	equ	0xFE7
 11658                           fsr1h	equ	0xFE2
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function ___altoft *****************
 11668 ;; Defined at:
 11669 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  c               4   54[COMRAM] long 
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  sign            1   63[COMRAM] unsigned char 
 11674 ;;  exp             1   62[COMRAM] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  3   54[COMRAM] float 
 11677 ;; Registers used:
 11678 ;;		wreg, status,2, status,0, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;Total ram usage:       10 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    1
 11691 ;; This function calls:
 11692 ;;		i2___ftpack
 11693 ;; This function is called by:
 11694 ;;		_floor
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text58
 11699  00281C                     __ptext58:
 11700                           	opt stack 0
 11701  00281C                     ___altoft:
 11702                           	opt stack 20
 11703                           
 11704                           ;incstack = 0
 11705  00281C  0E00               	movlw	0
 11706  00281E  6E40               	movwf	___altoft@sign,c
 11707  002820  0E8E               	movlw	142
 11708  002822  6E3F               	movwf	___altoft@exp,c
 11709  002824  AE3A               	btfss	___altoft@c+3,7,c
 11710  002826  D011               	goto	i2l3107
 11711  002828  1E3A               	comf	___altoft@c+3,f,c
 11712  00282A  1E39               	comf	___altoft@c+2,f,c
 11713  00282C  1E38               	comf	___altoft@c+1,f,c
 11714  00282E  6C37               	negf	___altoft@c,c
 11715  002830  0E00               	movlw	0
 11716  002832  2238               	addwfc	___altoft@c+1,f,c
 11717  002834  2239               	addwfc	___altoft@c+2,f,c
 11718  002836  223A               	addwfc	___altoft@c+3,f,c
 11719  002838  0E01               	movlw	1
 11720  00283A  6E40               	movwf	___altoft@sign,c
 11721  00283C  D006               	goto	i2l3107
 11722  00283E                     i2l3105:
 11723  00283E  90D8               	bcf	status,0,c
 11724  002840  323A               	rrcf	___altoft@c+3,f,c
 11725  002842  3239               	rrcf	___altoft@c+2,f,c
 11726  002844  3238               	rrcf	___altoft@c+1,f,c
 11727  002846  3237               	rrcf	___altoft@c,f,c
 11728  002848  2A3F               	incf	___altoft@exp,f,c
 11729  00284A                     i2l3107:
 11730  00284A  0E00               	movlw	0
 11731  00284C  1437               	andwf	___altoft@c,w,c
 11732  00284E  6E3B               	movwf	??___altoft& (0+255),c
 11733  002850  0E00               	movlw	0
 11734  002852  1438               	andwf	___altoft@c+1,w,c
 11735  002854  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11736  002856  0E00               	movlw	0
 11737  002858  1439               	andwf	___altoft@c+2,w,c
 11738  00285A  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11739  00285C  0EFF               	movlw	255
 11740  00285E  143A               	andwf	___altoft@c+3,w,c
 11741  002860  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11742  002862  503B               	movf	??___altoft,w,c
 11743  002864  103C               	iorwf	??___altoft+1,w,c
 11744  002866  103D               	iorwf	??___altoft+2,w,c
 11745  002868  103E               	iorwf	??___altoft+3,w,c
 11746  00286A  A4D8               	btfss	status,2,c
 11747  00286C  D7E8               	goto	i2l3105
 11748  00286E  C037  F001         	movff	___altoft@c,i2___ftpack@arg
 11749  002872  C038  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 11750  002876  C039  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 11751  00287A  C03F  F004         	movff	___altoft@exp,i2___ftpack@exp
 11752  00287E  C040  F005         	movff	___altoft@sign,i2___ftpack@sign
 11753  002882  EC10  F012         	call	i2___ftpack	;wreg free
 11754  002886  C001  F037         	movff	?i2___ftpack,?___altoft
 11755  00288A  C002  F038         	movff	?i2___ftpack+1,?___altoft+1
 11756  00288E  C003  F039         	movff	?i2___ftpack+2,?___altoft+2
 11757  002892  0012               	return	
 11758  002894                     __end_of___altoft:
 11759                           	opt stack 0
 11760                           pclatu	equ	0xFFB
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           intcon2	equ	0xFF1
 11770                           intcon3	equ	0xFF0
 11771                           postinc0	equ	0xFEE
 11772                           fsr0h	equ	0xFEA
 11773                           fsr0l	equ	0xFE9
 11774                           wreg	equ	0xFE8
 11775                           indf1	equ	0xFE7
 11776                           fsr1h	equ	0xFE2
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8
 11784                           
 11785 ;; *************** function _eval_poly *****************
 11786 ;; Defined at:
 11787 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11788 ;; Parameters:    Size  Location     Type
 11789 ;;  x               3   39[COMRAM] float 
 11790 ;;  d               2   42[COMRAM] PTR const 
 11791 ;;		 -> log@coeff(27), exp@coeff(30), 
 11792 ;;  n               2   44[COMRAM] int 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  res             3   48[COMRAM] int 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  3   39[COMRAM] int 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11804 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;Total ram usage:       12 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    2
 11811 ;; This function calls:
 11812 ;;		___ftadd
 11813 ;;		___ftmul
 11814 ;;		i2___wmul
 11815 ;; This function is called by:
 11816 ;;		_exp
 11817 ;;		_log
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           	psect	text59
 11822  002104                     __ptext59:
 11823                           	opt stack 0
 11824  002104                     _eval_poly:
 11825                           	opt stack 20
 11826                           
 11827                           ;incstack = 0
 11828  002104  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11829  002108  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11830  00210C  0E00               	movlw	0
 11831  00210E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11832  002110  0E03               	movlw	3
 11833  002112  6E03               	movwf	i2___wmul@multiplicand,c
 11834  002114  ECE7  F016         	call	i2___wmul	;wreg free
 11835  002118  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11836  00211C  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11837  002120  5001               	movf	?i2___wmul,w,c
 11838  002122  262F               	addwf	??_eval_poly,f,c
 11839  002124  5002               	movf	?i2___wmul+1,w,c
 11840  002126  2230               	addwfc	??_eval_poly+1,f,c
 11841  002128  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11842  00212C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11843  002130                     	if	0	;tblptru may be non-zero
 11844  002130                     	endif
 11845  002130                     	if	0	;tblptru may be non-zero
 11846  002130                     	endif
 11847  002130  0009               	tblrd		*+
 11848  002132  CFF5 F031          	movff	tablat,eval_poly@res
 11849  002136  0009               	tblrd		*+
 11850  002138  CFF5 F032          	movff	tablat,eval_poly@res+1
 11851  00213C  000A               	tblrd		*-
 11852  00213E  CFF5 F033          	movff	tablat,eval_poly@res+2
 11853  002142  D03E               	goto	i2l3419
 11854  002144                     i2l3417:
 11855  002144  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11856  002148  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11857  00214C  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11858  002150  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11859  002154  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11860  002158  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11861  00215C  ECE1  F00D         	call	___ftmul	;wreg free
 11862  002160  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11863  002164  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11864  002168  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11865  00216C  0E00               	movlw	0
 11866  00216E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11867  002170  0E03               	movlw	3
 11868  002172  6E03               	movwf	i2___wmul@multiplicand,c
 11869  002174  062D               	decf	eval_poly@n,f,c
 11870  002176  A0D8               	btfss	status,0,c
 11871  002178  062E               	decf	eval_poly@n+1,f,c
 11872  00217A  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11873  00217E  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11874  002182  ECE7  F016         	call	i2___wmul	;wreg free
 11875  002186  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11876  00218A  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11877  00218E  5001               	movf	?i2___wmul,w,c
 11878  002190  262F               	addwf	??_eval_poly,f,c
 11879  002192  5002               	movf	?i2___wmul+1,w,c
 11880  002194  2230               	addwfc	??_eval_poly+1,f,c
 11881  002196  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11882  00219A  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11883  00219E                     	if	0	;tblptru may be non-zero
 11884  00219E                     	endif
 11885  00219E                     	if	0	;tblptru may be non-zero
 11886  00219E                     	endif
 11887  00219E  0009               	tblrd		*+
 11888  0021A0  CFF5 F01F          	movff	tablat,___ftadd@f2
 11889  0021A4  0009               	tblrd		*+
 11890  0021A6  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11891  0021AA  000A               	tblrd		*-
 11892  0021AC  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11893  0021B0  ECF2  F007         	call	___ftadd	;wreg free
 11894  0021B4  C01C  F031         	movff	?___ftadd,eval_poly@res
 11895  0021B8  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11896  0021BC  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11897  0021C0                     i2l3419:
 11898  0021C0  502D               	movf	eval_poly@n,w,c
 11899  0021C2  102E               	iorwf	eval_poly@n+1,w,c
 11900  0021C4  A4D8               	btfss	status,2,c
 11901  0021C6  D7BE               	goto	i2l3417
 11902  0021C8  C031  F028         	movff	eval_poly@res,?_eval_poly
 11903  0021CC  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11904  0021D0  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11905  0021D4  0012               	return		;funcret
 11906  0021D6                     __end_of_eval_poly:
 11907                           	opt stack 0
 11908                           pclatu	equ	0xFFB
 11909                           pclath	equ	0xFFA
 11910                           tblptru	equ	0xFF8
 11911                           tblptrh	equ	0xFF7
 11912                           tblptrl	equ	0xFF6
 11913                           tablat	equ	0xFF5
 11914                           prodh	equ	0xFF4
 11915                           prodl	equ	0xFF3
 11916                           intcon	equ	0xFF2
 11917                           intcon2	equ	0xFF1
 11918                           intcon3	equ	0xFF0
 11919                           postinc0	equ	0xFEE
 11920                           fsr0h	equ	0xFEA
 11921                           fsr0l	equ	0xFE9
 11922                           wreg	equ	0xFE8
 11923                           indf1	equ	0xFE7
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function i2___wmul *****************
 11934 ;; Defined at:
 11935 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  multiplier      2    0[COMRAM] unsigned int 
 11938 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  __wmul          2    4[COMRAM] unsigned int 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  2    0[COMRAM] unsigned int 
 11943 ;; Registers used:
 11944 ;;		wreg, status,2, status,0, prodl, prodh
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11950 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;Total ram usage:        6 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; This function calls:
 11957 ;;		Nothing
 11958 ;; This function is called by:
 11959 ;;		_isr
 11960 ;;		_eval_poly
 11961 ;;		i2_read_colorsensor
 11962 ;;		i2_printf
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           	psect	text60
 11967  002DCE                     __ptext60:
 11968                           	opt stack 0
 11969  002DCE                     i2___wmul:
 11970                           	opt stack 24
 11971                           
 11972                           ;incstack = 0
 11973  002DCE  5001               	movf	i2___wmul@multiplier,w,c
 11974  002DD0  0203               	mulwf	i2___wmul@multiplicand,c
 11975  002DD2  CFF3 F005          	movff	prodl,i2___wmul@product
 11976  002DD6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11977  002DDA  5001               	movf	i2___wmul@multiplier,w,c
 11978  002DDC  0204               	mulwf	i2___wmul@multiplicand+1,c
 11979  002DDE  50F3               	movf	prodl,w,c
 11980  002DE0  2606               	addwf	i2___wmul@product+1,f,c
 11981  002DE2  5002               	movf	i2___wmul@multiplier+1,w,c
 11982  002DE4  0203               	mulwf	i2___wmul@multiplicand,c
 11983  002DE6  50F3               	movf	prodl,w,c
 11984  002DE8  2606               	addwf	i2___wmul@product+1,f,c
 11985  002DEA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11986  002DEE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11987  002DF2  0012               	return	
 11988  002DF4                     __end_ofi2___wmul:
 11989                           	opt stack 0
 11990                           pclatu	equ	0xFFB
 11991                           pclath	equ	0xFFA
 11992                           tblptru	equ	0xFF8
 11993                           tblptrh	equ	0xFF7
 11994                           tblptrl	equ	0xFF6
 11995                           tablat	equ	0xFF5
 11996                           prodh	equ	0xFF4
 11997                           prodl	equ	0xFF3
 11998                           intcon	equ	0xFF2
 11999                           intcon2	equ	0xFF1
 12000                           intcon3	equ	0xFF0
 12001                           postinc0	equ	0xFEE
 12002                           fsr0h	equ	0xFEA
 12003                           fsr0l	equ	0xFE9
 12004                           wreg	equ	0xFE8
 12005                           indf1	equ	0xFE7
 12006                           fsr1h	equ	0xFE2
 12007                           fsr1l	equ	0xFE1
 12008                           indf2	equ	0xFDF
 12009                           postinc2	equ	0xFDE
 12010                           postdec2	equ	0xFDD
 12011                           fsr2h	equ	0xFDA
 12012                           fsr2l	equ	0xFD9
 12013                           status	equ	0xFD8
 12014                           
 12015 ;; *************** function ___ftmul *****************
 12016 ;; Defined at:
 12017 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;  f1              3   12[COMRAM] float 
 12020 ;;  f2              3   15[COMRAM] float 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 12023 ;;  sign            1   26[COMRAM] unsigned char 
 12024 ;;  cntr            1   25[COMRAM] unsigned char 
 12025 ;;  exp             1   21[COMRAM] unsigned char 
 12026 ;; Return value:  Size  Location     Type
 12027 ;;                  3   12[COMRAM] float 
 12028 ;; Registers used:
 12029 ;;		wreg, status,2, status,0, cstack
 12030 ;; Tracked objects:
 12031 ;;		On entry : 0/0
 12032 ;;		On exit  : 0/0
 12033 ;;		Unchanged: 0/0
 12034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12035 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12036 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12037 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12038 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12039 ;;Total ram usage:       15 bytes
 12040 ;; Hardware stack levels used:    1
 12041 ;; Hardware stack levels required when called:    1
 12042 ;; This function calls:
 12043 ;;		i2___ftpack
 12044 ;; This function is called by:
 12045 ;;		_dec_to_hex
 12046 ;;		_pow
 12047 ;;		_exp
 12048 ;;		_log
 12049 ;;		_eval_poly
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text61
 12054  001BC2                     __ptext61:
 12055                           	opt stack 0
 12056  001BC2                     ___ftmul:
 12057                           	opt stack 20
 12058                           
 12059                           ;incstack = 0
 12060  001BC2  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 12061  001BC6  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12062  001BC8  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12063  001BCA  340E               	rlcf	___ftmul@f1+1,w,c
 12064  001BCC  3613               	rlcf	??___ftmul& (0+255),f,c
 12065  001BCE  E301               	bnc	u265_41
 12066  001BD0  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12067  001BD2                     u265_41:
 12068  001BD2  5013               	movf	??___ftmul,w,c
 12069  001BD4  6E16               	movwf	___ftmul@exp,c
 12070  001BD6  5016               	movf	___ftmul@exp,w,c
 12071  001BD8  A4D8               	btfss	status,2,c
 12072  001BDA  D007               	goto	i2l3189
 12073  001BDC  0E00               	movlw	0
 12074  001BDE  6E0D               	movwf	?___ftmul,c
 12075  001BE0  0E00               	movlw	0
 12076  001BE2  6E0E               	movwf	?___ftmul+1,c
 12077  001BE4  0E00               	movlw	0
 12078  001BE6  6E0F               	movwf	?___ftmul+2,c
 12079  001BE8  0012               	return	
 12080  001BEA                     i2l3189:
 12081  001BEA  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 12082  001BEE  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12083  001BF0  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12084  001BF2  3411               	rlcf	___ftmul@f2+1,w,c
 12085  001BF4  3613               	rlcf	??___ftmul& (0+255),f,c
 12086  001BF6  E301               	bnc	u267_41
 12087  001BF8  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12088  001BFA                     u267_41:
 12089  001BFA  5013               	movf	??___ftmul,w,c
 12090  001BFC  6E1B               	movwf	___ftmul@sign,c
 12091  001BFE  501B               	movf	___ftmul@sign,w,c
 12092  001C00  A4D8               	btfss	status,2,c
 12093  001C02  D007               	goto	i2l3195
 12094  001C04  0E00               	movlw	0
 12095  001C06  6E0D               	movwf	?___ftmul,c
 12096  001C08  0E00               	movlw	0
 12097  001C0A  6E0E               	movwf	?___ftmul+1,c
 12098  001C0C  0E00               	movlw	0
 12099  001C0E  6E0F               	movwf	?___ftmul+2,c
 12100  001C10  0012               	return	
 12101  001C12                     i2l3195:
 12102  001C12  501B               	movf	___ftmul@sign,w,c
 12103  001C14  0F7B               	addlw	123
 12104  001C16  2616               	addwf	___ftmul@exp,f,c
 12105  001C18  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 12106  001C1C  5012               	movf	___ftmul@f2+2,w,c
 12107  001C1E  1A1B               	xorwf	___ftmul@sign,f,c
 12108  001C20  0E80               	movlw	128
 12109  001C22  161B               	andwf	___ftmul@sign,f,c
 12110  001C24  8E0E               	bsf	___ftmul@f1+1,7,c
 12111  001C26  8E11               	bsf	___ftmul@f2+1,7,c
 12112  001C28  0EFF               	movlw	255
 12113  001C2A  1610               	andwf	___ftmul@f2,f,c
 12114  001C2C  0EFF               	movlw	255
 12115  001C2E  1611               	andwf	___ftmul@f2+1,f,c
 12116  001C30  0E00               	movlw	0
 12117  001C32  1612               	andwf	___ftmul@f2+2,f,c
 12118  001C34  0E00               	movlw	0
 12119  001C36  6E17               	movwf	___ftmul@f3_as_product,c
 12120  001C38  0E00               	movlw	0
 12121  001C3A  6E18               	movwf	___ftmul@f3_as_product+1,c
 12122  001C3C  0E00               	movlw	0
 12123  001C3E  6E19               	movwf	___ftmul@f3_as_product+2,c
 12124  001C40  0E07               	movlw	7
 12125  001C42  6E1A               	movwf	___ftmul@cntr,c
 12126  001C44                     i2l3209:
 12127  001C44  A00D               	btfss	___ftmul@f1,0,c
 12128  001C46  D006               	goto	i2l3213
 12129  001C48  5010               	movf	___ftmul@f2,w,c
 12130  001C4A  2617               	addwf	___ftmul@f3_as_product,f,c
 12131  001C4C  5011               	movf	___ftmul@f2+1,w,c
 12132  001C4E  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12133  001C50  5012               	movf	___ftmul@f2+2,w,c
 12134  001C52  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12135  001C54                     i2l3213:
 12136  001C54  90D8               	bcf	status,0,c
 12137  001C56  320F               	rrcf	___ftmul@f1+2,f,c
 12138  001C58  320E               	rrcf	___ftmul@f1+1,f,c
 12139  001C5A  320D               	rrcf	___ftmul@f1,f,c
 12140  001C5C  90D8               	bcf	status,0,c
 12141  001C5E  3610               	rlcf	___ftmul@f2,f,c
 12142  001C60  3611               	rlcf	___ftmul@f2+1,f,c
 12143  001C62  3612               	rlcf	___ftmul@f2+2,f,c
 12144  001C64  2E1A               	decfsz	___ftmul@cntr,f,c
 12145  001C66  D7EE               	goto	i2l3209
 12146  001C68  0E09               	movlw	9
 12147  001C6A  6E1A               	movwf	___ftmul@cntr,c
 12148  001C6C                     i2l3219:
 12149  001C6C  A00D               	btfss	___ftmul@f1,0,c
 12150  001C6E  D006               	goto	i2l3223
 12151  001C70  5010               	movf	___ftmul@f2,w,c
 12152  001C72  2617               	addwf	___ftmul@f3_as_product,f,c
 12153  001C74  5011               	movf	___ftmul@f2+1,w,c
 12154  001C76  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12155  001C78  5012               	movf	___ftmul@f2+2,w,c
 12156  001C7A  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12157  001C7C                     i2l3223:
 12158  001C7C  90D8               	bcf	status,0,c
 12159  001C7E  320F               	rrcf	___ftmul@f1+2,f,c
 12160  001C80  320E               	rrcf	___ftmul@f1+1,f,c
 12161  001C82  320D               	rrcf	___ftmul@f1,f,c
 12162  001C84  90D8               	bcf	status,0,c
 12163  001C86  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 12164  001C88  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 12165  001C8A  3217               	rrcf	___ftmul@f3_as_product,f,c
 12166  001C8C  2E1A               	decfsz	___ftmul@cntr,f,c
 12167  001C8E  D7EE               	goto	i2l3219
 12168  001C90  C017  F001         	movff	___ftmul@f3_as_product,i2___ftpack@arg
 12169  001C94  C018  F002         	movff	___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12170  001C98  C019  F003         	movff	___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12171  001C9C  C016  F004         	movff	___ftmul@exp,i2___ftpack@exp
 12172  001CA0  C01B  F005         	movff	___ftmul@sign,i2___ftpack@sign
 12173  001CA4  EC10  F012         	call	i2___ftpack	;wreg free
 12174  001CA8  C001  F00D         	movff	?i2___ftpack,?___ftmul
 12175  001CAC  C002  F00E         	movff	?i2___ftpack+1,?___ftmul+1
 12176  001CB0  C003  F00F         	movff	?i2___ftpack+2,?___ftmul+2
 12177  001CB4  0012               	return	
 12178  001CB6                     __end_of___ftmul:
 12179                           	opt stack 0
 12180                           pclatu	equ	0xFFB
 12181                           pclath	equ	0xFFA
 12182                           tblptru	equ	0xFF8
 12183                           tblptrh	equ	0xFF7
 12184                           tblptrl	equ	0xFF6
 12185                           tablat	equ	0xFF5
 12186                           prodh	equ	0xFF4
 12187                           prodl	equ	0xFF3
 12188                           intcon	equ	0xFF2
 12189                           intcon2	equ	0xFF1
 12190                           intcon3	equ	0xFF0
 12191                           postinc0	equ	0xFEE
 12192                           fsr0h	equ	0xFEA
 12193                           fsr0l	equ	0xFE9
 12194                           wreg	equ	0xFE8
 12195                           indf1	equ	0xFE7
 12196                           fsr1h	equ	0xFE2
 12197                           fsr1l	equ	0xFE1
 12198                           indf2	equ	0xFDF
 12199                           postinc2	equ	0xFDE
 12200                           postdec2	equ	0xFDD
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function ___ftsub *****************
 12206 ;; Defined at:
 12207 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  f1              3   39[COMRAM] float 
 12210 ;;  f2              3   42[COMRAM] float 
 12211 ;; Auto vars:     Size  Location     Type
 12212 ;;		None
 12213 ;; Return value:  Size  Location     Type
 12214 ;;                  3   39[COMRAM] float 
 12215 ;; Registers used:
 12216 ;;		wreg, status,2, status,0, cstack
 12217 ;; Tracked objects:
 12218 ;;		On entry : 0/0
 12219 ;;		On exit  : 0/0
 12220 ;;		Unchanged: 0/0
 12221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12222 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12225 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12226 ;;Total ram usage:        6 bytes
 12227 ;; Hardware stack levels used:    1
 12228 ;; Hardware stack levels required when called:    2
 12229 ;; This function calls:
 12230 ;;		___ftadd
 12231 ;; This function is called by:
 12232 ;;		_exp
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           	psect	text62
 12237  002BF0                     __ptext62:
 12238                           	opt stack 0
 12239  002BF0                     ___ftsub:
 12240                           	opt stack 20
 12241                           
 12242                           ;incstack = 0
 12243  002BF0  502B               	movf	___ftsub@f2,w,c
 12244  002BF2  102C               	iorwf	___ftsub@f2+1,w,c
 12245  002BF4  102D               	iorwf	___ftsub@f2+2,w,c
 12246  002BF6  B4D8               	btfsc	status,2,c
 12247  002BF8  D006               	goto	i2l3383
 12248  002BFA  0E00               	movlw	0
 12249  002BFC  1A2B               	xorwf	___ftsub@f2,f,c
 12250  002BFE  0E00               	movlw	0
 12251  002C00  1A2C               	xorwf	___ftsub@f2+1,f,c
 12252  002C02  0E80               	movlw	128
 12253  002C04  1A2D               	xorwf	___ftsub@f2+2,f,c
 12254  002C06                     i2l3383:
 12255  002C06  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 12256  002C0A  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 12257  002C0E  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 12258  002C12  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 12259  002C16  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 12260  002C1A  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 12261  002C1E  ECF2  F007         	call	___ftadd	;wreg free
 12262  002C22  C01C  F028         	movff	?___ftadd,?___ftsub
 12263  002C26  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 12264  002C2A  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 12265  002C2E  0012               	return	
 12266  002C30                     __end_of___ftsub:
 12267                           	opt stack 0
 12268                           pclatu	equ	0xFFB
 12269                           pclath	equ	0xFFA
 12270                           tblptru	equ	0xFF8
 12271                           tblptrh	equ	0xFF7
 12272                           tblptrl	equ	0xFF6
 12273                           tablat	equ	0xFF5
 12274                           prodh	equ	0xFF4
 12275                           prodl	equ	0xFF3
 12276                           intcon	equ	0xFF2
 12277                           intcon2	equ	0xFF1
 12278                           intcon3	equ	0xFF0
 12279                           postinc0	equ	0xFEE
 12280                           fsr0h	equ	0xFEA
 12281                           fsr0l	equ	0xFE9
 12282                           wreg	equ	0xFE8
 12283                           indf1	equ	0xFE7
 12284                           fsr1h	equ	0xFE2
 12285                           fsr1l	equ	0xFE1
 12286                           indf2	equ	0xFDF
 12287                           postinc2	equ	0xFDE
 12288                           postdec2	equ	0xFDD
 12289                           fsr2h	equ	0xFDA
 12290                           fsr2l	equ	0xFD9
 12291                           status	equ	0xFD8
 12292                           
 12293 ;; *************** function ___ftadd *****************
 12294 ;; Defined at:
 12295 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  f1              3   27[COMRAM] float 
 12298 ;;  f2              3   30[COMRAM] float 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;  exp1            1   38[COMRAM] unsigned char 
 12301 ;;  exp2            1   37[COMRAM] unsigned char 
 12302 ;;  sign            1   36[COMRAM] unsigned char 
 12303 ;; Return value:  Size  Location     Type
 12304 ;;                  3   27[COMRAM] float 
 12305 ;; Registers used:
 12306 ;;		wreg, status,2, status,0, cstack
 12307 ;; Tracked objects:
 12308 ;;		On entry : 0/0
 12309 ;;		On exit  : 0/0
 12310 ;;		Unchanged: 0/0
 12311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12312 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;Total ram usage:       12 bytes
 12317 ;; Hardware stack levels used:    1
 12318 ;; Hardware stack levels required when called:    1
 12319 ;; This function calls:
 12320 ;;		i2___ftpack
 12321 ;; This function is called by:
 12322 ;;		_dec_to_hex
 12323 ;;		___ftsub
 12324 ;;		_floor
 12325 ;;		_log
 12326 ;;		_eval_poly
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text63
 12331  000FE4                     __ptext63:
 12332                           	opt stack 0
 12333  000FE4                     ___ftadd:
 12334                           	opt stack 20
 12335                           
 12336                           ;incstack = 0
 12337  000FE4  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 12338  000FE8  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12339  000FEA  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12340  000FEC  341D               	rlcf	___ftadd@f1+1,w,c
 12341  000FEE  3622               	rlcf	??___ftadd& (0+255),f,c
 12342  000FF0  E301               	bnc	u244_41
 12343  000FF2  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12344  000FF4                     u244_41:
 12345  000FF4  5022               	movf	??___ftadd,w,c
 12346  000FF6  6E27               	movwf	___ftadd@exp1,c
 12347  000FF8  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 12348  000FFC  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12349  000FFE  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12350  001000  3420               	rlcf	___ftadd@f2+1,w,c
 12351  001002  3622               	rlcf	??___ftadd& (0+255),f,c
 12352  001004  E301               	bnc	u245_41
 12353  001006  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12354  001008                     u245_41:
 12355  001008  5022               	movf	??___ftadd,w,c
 12356  00100A  6E26               	movwf	___ftadd@exp2,c
 12357  00100C  5027               	movf	___ftadd@exp1,w,c
 12358  00100E  B4D8               	btfsc	status,2,c
 12359  001010  D00B               	goto	i2l709
 12360  001012  5026               	movf	___ftadd@exp2,w,c
 12361  001014  5C27               	subwf	___ftadd@exp1,w,c
 12362  001016  B0D8               	btfsc	status,0,c
 12363  001018  D00E               	goto	i2l3121
 12364  00101A  5027               	movf	___ftadd@exp1,w,c
 12365  00101C  0800               	sublw	0
 12366  00101E  2426               	addwf	___ftadd@exp2,w,c
 12367  001020  6E22               	movwf	??___ftadd& (0+255),c
 12368  001022  0E18               	movlw	24
 12369  001024  6422               	cpfsgt	??___ftadd,c
 12370  001026  D007               	goto	i2l3121
 12371  001028                     i2l709:
 12372  001028  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 12373  00102C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 12374  001030  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 12375  001034  0012               	return	
 12376  001036                     i2l3121:
 12377  001036  5026               	movf	___ftadd@exp2,w,c
 12378  001038  B4D8               	btfsc	status,2,c
 12379  00103A  D00B               	goto	i2l713
 12380  00103C  5027               	movf	___ftadd@exp1,w,c
 12381  00103E  5C26               	subwf	___ftadd@exp2,w,c
 12382  001040  B0D8               	btfsc	status,0,c
 12383  001042  D00E               	goto	i2l3127
 12384  001044  5026               	movf	___ftadd@exp2,w,c
 12385  001046  0800               	sublw	0
 12386  001048  2427               	addwf	___ftadd@exp1,w,c
 12387  00104A  6E22               	movwf	??___ftadd& (0+255),c
 12388  00104C  0E18               	movlw	24
 12389  00104E  6422               	cpfsgt	??___ftadd,c
 12390  001050  D007               	goto	i2l3127
 12391  001052                     i2l713:
 12392  001052  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 12393  001056  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 12394  00105A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 12395  00105E  0012               	return	
 12396  001060                     i2l3127:
 12397  001060  0E06               	movlw	6
 12398  001062  6E25               	movwf	___ftadd@sign,c
 12399  001064  BE1E               	btfsc	___ftadd@f1+2,7,c
 12400  001066  8E25               	bsf	___ftadd@sign,7,c
 12401  001068  BE21               	btfsc	___ftadd@f2+2,7,c
 12402  00106A  8C25               	bsf	___ftadd@sign,6,c
 12403  00106C  8E1D               	bsf	___ftadd@f1+1,7,c
 12404  00106E  0EFF               	movlw	255
 12405  001070  161C               	andwf	___ftadd@f1,f,c
 12406  001072  0EFF               	movlw	255
 12407  001074  161D               	andwf	___ftadd@f1+1,f,c
 12408  001076  0E00               	movlw	0
 12409  001078  161E               	andwf	___ftadd@f1+2,f,c
 12410  00107A  8E20               	bsf	___ftadd@f2+1,7,c
 12411  00107C  0EFF               	movlw	255
 12412  00107E  161F               	andwf	___ftadd@f2,f,c
 12413  001080  0EFF               	movlw	255
 12414  001082  1620               	andwf	___ftadd@f2+1,f,c
 12415  001084  0E00               	movlw	0
 12416  001086  1621               	andwf	___ftadd@f2+2,f,c
 12417  001088  5026               	movf	___ftadd@exp2,w,c
 12418  00108A  5C27               	subwf	___ftadd@exp1,w,c
 12419  00108C  B0D8               	btfsc	status,0,c
 12420  00108E  D01B               	goto	i2l3153
 12421  001090                     i2l3143:
 12422  001090  90D8               	bcf	status,0,c
 12423  001092  361F               	rlcf	___ftadd@f2,f,c
 12424  001094  3620               	rlcf	___ftadd@f2+1,f,c
 12425  001096  3621               	rlcf	___ftadd@f2+2,f,c
 12426  001098  0626               	decf	___ftadd@exp2,f,c
 12427  00109A  5027               	movf	___ftadd@exp1,w,c
 12428  00109C  1826               	xorwf	___ftadd@exp2,w,c
 12429  00109E  B4D8               	btfsc	status,2,c
 12430  0010A0  D00D               	goto	i2l3151
 12431  0010A2  0625               	decf	___ftadd@sign,f,c
 12432  0010A4  C025  F022         	movff	___ftadd@sign,??___ftadd
 12433  0010A8  0E07               	movlw	7
 12434  0010AA  1622               	andwf	??___ftadd,f,c
 12435  0010AC  B4D8               	btfsc	status,2,c
 12436  0010AE  D006               	goto	i2l3151
 12437  0010B0  D7EF               	goto	i2l3143
 12438  0010B2                     i2l3149:
 12439  0010B2  90D8               	bcf	status,0,c
 12440  0010B4  321E               	rrcf	___ftadd@f1+2,f,c
 12441  0010B6  321D               	rrcf	___ftadd@f1+1,f,c
 12442  0010B8  321C               	rrcf	___ftadd@f1,f,c
 12443  0010BA  2A27               	incf	___ftadd@exp1,f,c
 12444  0010BC                     i2l3151:
 12445  0010BC  5026               	movf	___ftadd@exp2,w,c
 12446  0010BE  1827               	xorwf	___ftadd@exp1,w,c
 12447  0010C0  B4D8               	btfsc	status,2,c
 12448  0010C2  D01F               	goto	i2l724
 12449  0010C4  D7F6               	goto	i2l3149
 12450  0010C6                     i2l3153:
 12451  0010C6  5027               	movf	___ftadd@exp1,w,c
 12452  0010C8  5C26               	subwf	___ftadd@exp2,w,c
 12453  0010CA  B0D8               	btfsc	status,0,c
 12454  0010CC  D01A               	goto	i2l724
 12455  0010CE                     i2l3155:
 12456  0010CE  90D8               	bcf	status,0,c
 12457  0010D0  361C               	rlcf	___ftadd@f1,f,c
 12458  0010D2  361D               	rlcf	___ftadd@f1+1,f,c
 12459  0010D4  361E               	rlcf	___ftadd@f1+2,f,c
 12460  0010D6  0627               	decf	___ftadd@exp1,f,c
 12461  0010D8  5027               	movf	___ftadd@exp1,w,c
 12462  0010DA  1826               	xorwf	___ftadd@exp2,w,c
 12463  0010DC  B4D8               	btfsc	status,2,c
 12464  0010DE  D00D               	goto	i2l3163
 12465  0010E0  0625               	decf	___ftadd@sign,f,c
 12466  0010E2  C025  F022         	movff	___ftadd@sign,??___ftadd
 12467  0010E6  0E07               	movlw	7
 12468  0010E8  1622               	andwf	??___ftadd,f,c
 12469  0010EA  B4D8               	btfsc	status,2,c
 12470  0010EC  D006               	goto	i2l3163
 12471  0010EE  D7EF               	goto	i2l3155
 12472  0010F0                     i2l3161:
 12473  0010F0  90D8               	bcf	status,0,c
 12474  0010F2  3221               	rrcf	___ftadd@f2+2,f,c
 12475  0010F4  3220               	rrcf	___ftadd@f2+1,f,c
 12476  0010F6  321F               	rrcf	___ftadd@f2,f,c
 12477  0010F8  2A26               	incf	___ftadd@exp2,f,c
 12478  0010FA                     i2l3163:
 12479  0010FA  5026               	movf	___ftadd@exp2,w,c
 12480  0010FC  1827               	xorwf	___ftadd@exp1,w,c
 12481  0010FE  A4D8               	btfss	status,2,c
 12482  001100  D7F7               	goto	i2l3161
 12483  001102                     i2l724:
 12484  001102  AE25               	btfss	___ftadd@sign,7,c
 12485  001104  D00C               	goto	i2l733
 12486  001106  0EFF               	movlw	255
 12487  001108  1A1C               	xorwf	___ftadd@f1,f,c
 12488  00110A  0EFF               	movlw	255
 12489  00110C  1A1D               	xorwf	___ftadd@f1+1,f,c
 12490  00110E  0EFF               	movlw	255
 12491  001110  1A1E               	xorwf	___ftadd@f1+2,f,c
 12492  001112  0E01               	movlw	1
 12493  001114  261C               	addwf	___ftadd@f1,f,c
 12494  001116  0E00               	movlw	0
 12495  001118  221D               	addwfc	___ftadd@f1+1,f,c
 12496  00111A  0E00               	movlw	0
 12497  00111C  221E               	addwfc	___ftadd@f1+2,f,c
 12498  00111E                     i2l733:
 12499  00111E  AC25               	btfss	___ftadd@sign,6,c
 12500  001120  D00C               	goto	i2l3169
 12501  001122  0EFF               	movlw	255
 12502  001124  1A1F               	xorwf	___ftadd@f2,f,c
 12503  001126  0EFF               	movlw	255
 12504  001128  1A20               	xorwf	___ftadd@f2+1,f,c
 12505  00112A  0EFF               	movlw	255
 12506  00112C  1A21               	xorwf	___ftadd@f2+2,f,c
 12507  00112E  0E01               	movlw	1
 12508  001130  261F               	addwf	___ftadd@f2,f,c
 12509  001132  0E00               	movlw	0
 12510  001134  2220               	addwfc	___ftadd@f2+1,f,c
 12511  001136  0E00               	movlw	0
 12512  001138  2221               	addwfc	___ftadd@f2+2,f,c
 12513  00113A                     i2l3169:
 12514  00113A  0E00               	movlw	0
 12515  00113C  6E25               	movwf	___ftadd@sign,c
 12516  00113E  501C               	movf	___ftadd@f1,w,c
 12517  001140  261F               	addwf	___ftadd@f2,f,c
 12518  001142  501D               	movf	___ftadd@f1+1,w,c
 12519  001144  2220               	addwfc	___ftadd@f2+1,f,c
 12520  001146  501E               	movf	___ftadd@f1+2,w,c
 12521  001148  2221               	addwfc	___ftadd@f2+2,f,c
 12522  00114A  AE21               	btfss	___ftadd@f2+2,7,c
 12523  00114C  D00E               	goto	i2l3179
 12524  00114E  0EFF               	movlw	255
 12525  001150  1A1F               	xorwf	___ftadd@f2,f,c
 12526  001152  0EFF               	movlw	255
 12527  001154  1A20               	xorwf	___ftadd@f2+1,f,c
 12528  001156  0EFF               	movlw	255
 12529  001158  1A21               	xorwf	___ftadd@f2+2,f,c
 12530  00115A  0E01               	movlw	1
 12531  00115C  261F               	addwf	___ftadd@f2,f,c
 12532  00115E  0E00               	movlw	0
 12533  001160  2220               	addwfc	___ftadd@f2+1,f,c
 12534  001162  0E00               	movlw	0
 12535  001164  2221               	addwfc	___ftadd@f2+2,f,c
 12536  001166  0E01               	movlw	1
 12537  001168  6E25               	movwf	___ftadd@sign,c
 12538  00116A                     i2l3179:
 12539  00116A  C01F  F001         	movff	___ftadd@f2,i2___ftpack@arg
 12540  00116E  C020  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
 12541  001172  C021  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
 12542  001176  C027  F004         	movff	___ftadd@exp1,i2___ftpack@exp
 12543  00117A  C025  F005         	movff	___ftadd@sign,i2___ftpack@sign
 12544  00117E  EC10  F012         	call	i2___ftpack	;wreg free
 12545  001182  C001  F01C         	movff	?i2___ftpack,?___ftadd
 12546  001186  C002  F01D         	movff	?i2___ftpack+1,?___ftadd+1
 12547  00118A  C003  F01E         	movff	?i2___ftpack+2,?___ftadd+2
 12548  00118E  0012               	return	
 12549  001190                     __end_of___ftadd:
 12550                           	opt stack 0
 12551                           pclatu	equ	0xFFB
 12552                           pclath	equ	0xFFA
 12553                           tblptru	equ	0xFF8
 12554                           tblptrh	equ	0xFF7
 12555                           tblptrl	equ	0xFF6
 12556                           tablat	equ	0xFF5
 12557                           prodh	equ	0xFF4
 12558                           prodl	equ	0xFF3
 12559                           intcon	equ	0xFF2
 12560                           intcon2	equ	0xFF1
 12561                           intcon3	equ	0xFF0
 12562                           postinc0	equ	0xFEE
 12563                           fsr0h	equ	0xFEA
 12564                           fsr0l	equ	0xFE9
 12565                           wreg	equ	0xFE8
 12566                           indf1	equ	0xFE7
 12567                           fsr1h	equ	0xFE2
 12568                           fsr1l	equ	0xFE1
 12569                           indf2	equ	0xFDF
 12570                           postinc2	equ	0xFDE
 12571                           postdec2	equ	0xFDD
 12572                           fsr2h	equ	0xFDA
 12573                           fsr2l	equ	0xFD9
 12574                           status	equ	0xFD8
 12575                           
 12576 ;; *************** function ___ftneg *****************
 12577 ;; Defined at:
 12578 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;  f1              3    0[COMRAM] float 
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;		None
 12583 ;; Return value:  Size  Location     Type
 12584 ;;                  3    0[COMRAM] float 
 12585 ;; Registers used:
 12586 ;;		wreg, status,2, status,0
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12592 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;Total ram usage:        3 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; This function calls:
 12599 ;;		Nothing
 12600 ;; This function is called by:
 12601 ;;		_pow
 12602 ;;		_exp
 12603 ;; This function uses a non-reentrant model
 12604 ;;
 12605                           
 12606                           	psect	text64
 12607  002DF4                     __ptext64:
 12608                           	opt stack 0
 12609  002DF4                     ___ftneg:
 12610                           	opt stack 22
 12611                           
 12612                           ;incstack = 0
 12613  002DF4  5001               	movf	___ftneg@f1,w,c
 12614  002DF6  1002               	iorwf	___ftneg@f1+1,w,c
 12615  002DF8  1003               	iorwf	___ftneg@f1+2,w,c
 12616  002DFA  B4D8               	btfsc	status,2,c
 12617  002DFC  D006               	goto	i2l766
 12618  002DFE  0E00               	movlw	0
 12619  002E00  1A01               	xorwf	___ftneg@f1,f,c
 12620  002E02  0E00               	movlw	0
 12621  002E04  1A02               	xorwf	___ftneg@f1+1,f,c
 12622  002E06  0E80               	movlw	128
 12623  002E08  1A03               	xorwf	___ftneg@f1+2,f,c
 12624  002E0A                     i2l766:
 12625  002E0A  C001  F001         	movff	___ftneg@f1,?___ftneg
 12626  002E0E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12627  002E12  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12628  002E16  0012               	return		;funcret
 12629  002E18                     __end_of___ftneg:
 12630                           	opt stack 0
 12631                           pclatu	equ	0xFFB
 12632                           pclath	equ	0xFFA
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           intcon3	equ	0xFF0
 12642                           postinc0	equ	0xFEE
 12643                           fsr0h	equ	0xFEA
 12644                           fsr0l	equ	0xFE9
 12645                           wreg	equ	0xFE8
 12646                           indf1	equ	0xFE7
 12647                           fsr1h	equ	0xFE2
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           postdec2	equ	0xFDD
 12652                           fsr2h	equ	0xFDA
 12653                           fsr2l	equ	0xFD9
 12654                           status	equ	0xFD8
 12655                           
 12656 ;; *************** function ___lltoft *****************
 12657 ;; Defined at:
 12658 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;  c               4    8[COMRAM] unsigned long 
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  exp             1   16[COMRAM] unsigned char 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  3    8[COMRAM] float 
 12665 ;; Registers used:
 12666 ;;		wreg, status,2, status,0, cstack
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12676 ;;Total ram usage:        9 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    1
 12679 ;; This function calls:
 12680 ;;		i2___ftpack
 12681 ;; This function is called by:
 12682 ;;		_pow
 12683 ;; This function uses a non-reentrant model
 12684 ;;
 12685                           
 12686                           	psect	text65
 12687  002A1E                     __ptext65:
 12688                           	opt stack 0
 12689  002A1E                     ___lltoft:
 12690                           	opt stack 22
 12691                           
 12692                           ;incstack = 0
 12693  002A1E  0E8E               	movlw	142
 12694  002A20  6E11               	movwf	___lltoft@exp,c
 12695  002A22  D006               	goto	i2l3579
 12696  002A24                     i2l3577:
 12697  002A24  90D8               	bcf	status,0,c
 12698  002A26  320C               	rrcf	___lltoft@c+3,f,c
 12699  002A28  320B               	rrcf	___lltoft@c+2,f,c
 12700  002A2A  320A               	rrcf	___lltoft@c+1,f,c
 12701  002A2C  3209               	rrcf	___lltoft@c,f,c
 12702  002A2E  2A11               	incf	___lltoft@exp,f,c
 12703  002A30                     i2l3579:
 12704  002A30  0E00               	movlw	0
 12705  002A32  1409               	andwf	___lltoft@c,w,c
 12706  002A34  6E0D               	movwf	??___lltoft& (0+255),c
 12707  002A36  0E00               	movlw	0
 12708  002A38  140A               	andwf	___lltoft@c+1,w,c
 12709  002A3A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12710  002A3C  0E00               	movlw	0
 12711  002A3E  140B               	andwf	___lltoft@c+2,w,c
 12712  002A40  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12713  002A42  0EFF               	movlw	255
 12714  002A44  140C               	andwf	___lltoft@c+3,w,c
 12715  002A46  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12716  002A48  500D               	movf	??___lltoft,w,c
 12717  002A4A  100E               	iorwf	??___lltoft+1,w,c
 12718  002A4C  100F               	iorwf	??___lltoft+2,w,c
 12719  002A4E  1010               	iorwf	??___lltoft+3,w,c
 12720  002A50  A4D8               	btfss	status,2,c
 12721  002A52  D7E8               	goto	i2l3577
 12722  002A54  C009  F001         	movff	___lltoft@c,i2___ftpack@arg
 12723  002A58  C00A  F002         	movff	___lltoft@c+1,i2___ftpack@arg+1
 12724  002A5C  C00B  F003         	movff	___lltoft@c+2,i2___ftpack@arg+2
 12725  002A60  C011  F004         	movff	___lltoft@exp,i2___ftpack@exp
 12726  002A64  0E00               	movlw	0
 12727  002A66  6E05               	movwf	i2___ftpack@sign,c
 12728  002A68  EC10  F012         	call	i2___ftpack	;wreg free
 12729  002A6C  C001  F009         	movff	?i2___ftpack,?___lltoft
 12730  002A70  C002  F00A         	movff	?i2___ftpack+1,?___lltoft+1
 12731  002A74  C003  F00B         	movff	?i2___ftpack+2,?___lltoft+2
 12732  002A78  0012               	return	
 12733  002A7A                     __end_of___lltoft:
 12734                           	opt stack 0
 12735                           pclatu	equ	0xFFB
 12736                           pclath	equ	0xFFA
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           intcon2	equ	0xFF1
 12745                           intcon3	equ	0xFF0
 12746                           postinc0	equ	0xFEE
 12747                           fsr0h	equ	0xFEA
 12748                           fsr0l	equ	0xFE9
 12749                           wreg	equ	0xFE8
 12750                           indf1	equ	0xFE7
 12751                           fsr1h	equ	0xFE2
 12752                           fsr1l	equ	0xFE1
 12753                           indf2	equ	0xFDF
 12754                           postinc2	equ	0xFDE
 12755                           postdec2	equ	0xFDD
 12756                           fsr2h	equ	0xFDA
 12757                           fsr2l	equ	0xFD9
 12758                           status	equ	0xFD8
 12759                           
 12760 ;; *************** function i2___ftpack *****************
 12761 ;; Defined at:
 12762 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;  arg             3    0[COMRAM] unsigned um
 12765 ;;  exp             1    3[COMRAM] unsigned char 
 12766 ;;  sign            1    4[COMRAM] unsigned char 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;		None
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  3    0[COMRAM] float 
 12771 ;; Registers used:
 12772 ;;		wreg, status,2, status,0
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12778 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;Total ram usage:        8 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		___altoft
 12788 ;;		___ftadd
 12789 ;;		___ftmul
 12790 ;;		___lltoft
 12791 ;;		i2___awtoft
 12792 ;;		i2___ftdiv
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           	psect	text66
 12797  002420                     __ptext66:
 12798                           	opt stack 0
 12799  002420                     i2___ftpack:
 12800                           	opt stack 23
 12801                           
 12802                           ;incstack = 0
 12803  002420  5004               	movf	i2___ftpack@exp,w,c
 12804  002422  B4D8               	btfsc	status,2,c
 12805  002424  D005               	goto	i2l3065
 12806  002426  5001               	movf	i2___ftpack@arg,w,c
 12807  002428  1002               	iorwf	i2___ftpack@arg+1,w,c
 12808  00242A  1003               	iorwf	i2___ftpack@arg+2,w,c
 12809  00242C  A4D8               	btfss	status,2,c
 12810  00242E  D00C               	goto	i2l3071
 12811  002430                     i2l3065:
 12812  002430  0E00               	movlw	0
 12813  002432  6E01               	movwf	?i2___ftpack,c
 12814  002434  0E00               	movlw	0
 12815  002436  6E02               	movwf	?i2___ftpack+1,c
 12816  002438  0E00               	movlw	0
 12817  00243A  6E03               	movwf	?i2___ftpack+2,c
 12818  00243C  0012               	return	
 12819  00243E                     i2l3069:
 12820  00243E  2A04               	incf	i2___ftpack@exp,f,c
 12821  002440  90D8               	bcf	status,0,c
 12822  002442  3203               	rrcf	i2___ftpack@arg+2,f,c
 12823  002444  3202               	rrcf	i2___ftpack@arg+1,f,c
 12824  002446  3201               	rrcf	i2___ftpack@arg,f,c
 12825  002448                     i2l3071:
 12826  002448  0E00               	movlw	0
 12827  00244A  1401               	andwf	i2___ftpack@arg,w,c
 12828  00244C  6E06               	movwf	??i2___ftpack& (0+255),c
 12829  00244E  0E00               	movlw	0
 12830  002450  1402               	andwf	i2___ftpack@arg+1,w,c
 12831  002452  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12832  002454  0EFE               	movlw	254
 12833  002456  1403               	andwf	i2___ftpack@arg+2,w,c
 12834  002458  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12835  00245A  5006               	movf	??i2___ftpack,w,c
 12836  00245C  1007               	iorwf	??i2___ftpack+1,w,c
 12837  00245E  1008               	iorwf	??i2___ftpack+2,w,c
 12838  002460  B4D8               	btfsc	status,2,c
 12839  002462  D00C               	goto	i2l3077
 12840  002464  D7EC               	goto	i2l3069
 12841  002466                     i2l3073:
 12842  002466  2A04               	incf	i2___ftpack@exp,f,c
 12843  002468  0E01               	movlw	1
 12844  00246A  2601               	addwf	i2___ftpack@arg,f,c
 12845  00246C  0E00               	movlw	0
 12846  00246E  2202               	addwfc	i2___ftpack@arg+1,f,c
 12847  002470  0E00               	movlw	0
 12848  002472  2203               	addwfc	i2___ftpack@arg+2,f,c
 12849  002474  90D8               	bcf	status,0,c
 12850  002476  3203               	rrcf	i2___ftpack@arg+2,f,c
 12851  002478  3202               	rrcf	i2___ftpack@arg+1,f,c
 12852  00247A  3201               	rrcf	i2___ftpack@arg,f,c
 12853  00247C                     i2l3077:
 12854  00247C  0E00               	movlw	0
 12855  00247E  1401               	andwf	i2___ftpack@arg,w,c
 12856  002480  6E06               	movwf	??i2___ftpack& (0+255),c
 12857  002482  0E00               	movlw	0
 12858  002484  1402               	andwf	i2___ftpack@arg+1,w,c
 12859  002486  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12860  002488  0EFF               	movlw	255
 12861  00248A  1403               	andwf	i2___ftpack@arg+2,w,c
 12862  00248C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12863  00248E  5006               	movf	??i2___ftpack,w,c
 12864  002490  1007               	iorwf	??i2___ftpack+1,w,c
 12865  002492  1008               	iorwf	??i2___ftpack+2,w,c
 12866  002494  B4D8               	btfsc	status,2,c
 12867  002496  D006               	goto	i2l3081
 12868  002498  D7E6               	goto	i2l3073
 12869  00249A                     i2l3079:
 12870  00249A  0604               	decf	i2___ftpack@exp,f,c
 12871  00249C  90D8               	bcf	status,0,c
 12872  00249E  3601               	rlcf	i2___ftpack@arg,f,c
 12873  0024A0  3602               	rlcf	i2___ftpack@arg+1,f,c
 12874  0024A2  3603               	rlcf	i2___ftpack@arg+2,f,c
 12875  0024A4                     i2l3081:
 12876  0024A4  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12877  0024A6  D003               	goto	i2l686
 12878  0024A8  0E02               	movlw	2
 12879  0024AA  6004               	cpfslt	i2___ftpack@exp,c
 12880  0024AC  D7F6               	goto	i2l3079
 12881  0024AE                     i2l686:
 12882  0024AE  A004               	btfss	i2___ftpack@exp,0,c
 12883  0024B0  9E02               	bcf	i2___ftpack@arg+1,7,c
 12884  0024B2  90D8               	bcf	status,0,c
 12885  0024B4  3204               	rrcf	i2___ftpack@exp,f,c
 12886  0024B6  5004               	movf	i2___ftpack@exp,w,c
 12887  0024B8  1203               	iorwf	i2___ftpack@arg+2,f,c
 12888  0024BA  5005               	movf	i2___ftpack@sign,w,c
 12889  0024BC  A4D8               	btfss	status,2,c
 12890  0024BE  8E03               	bsf	i2___ftpack@arg+2,7,c
 12891  0024C0  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12892  0024C4  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12893  0024C8  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12894  0024CC  0012               	return	
 12895  0024CE                     __end_ofi2___ftpack:
 12896                           	opt stack 0
 12897                           pclatu	equ	0xFFB
 12898                           pclath	equ	0xFFA
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           intcon2	equ	0xFF1
 12907                           intcon3	equ	0xFF0
 12908                           postinc0	equ	0xFEE
 12909                           fsr0h	equ	0xFEA
 12910                           fsr0l	equ	0xFE9
 12911                           wreg	equ	0xFE8
 12912                           indf1	equ	0xFE7
 12913                           fsr1h	equ	0xFE2
 12914                           fsr1l	equ	0xFE1
 12915                           indf2	equ	0xFDF
 12916                           postinc2	equ	0xFDE
 12917                           postdec2	equ	0xFDD
 12918                           fsr2h	equ	0xFDA
 12919                           fsr2l	equ	0xFD9
 12920                           status	equ	0xFD8
 12921                           
 12922 ;; *************** function ___awdiv *****************
 12923 ;; Defined at:
 12924 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;  dividend        2    0[COMRAM] int 
 12927 ;;  divisor         2    2[COMRAM] int 
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;  quotient        2    6[COMRAM] int 
 12930 ;;  sign            1    5[COMRAM] unsigned char 
 12931 ;;  counter         1    4[COMRAM] unsigned char 
 12932 ;; Return value:  Size  Location     Type
 12933 ;;                  2    0[COMRAM] int 
 12934 ;; Registers used:
 12935 ;;		wreg, status,2, status,0
 12936 ;; Tracked objects:
 12937 ;;		On entry : 0/0
 12938 ;;		On exit  : 0/0
 12939 ;;		Unchanged: 0/0
 12940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12941 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12942 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;Total ram usage:        8 bytes
 12946 ;; Hardware stack levels used:    1
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_dec_to_hex
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           	psect	text67
 12955  002720                     __ptext67:
 12956                           	opt stack 0
 12957  002720                     ___awdiv:
 12958                           	opt stack 24
 12959                           
 12960                           ;incstack = 0
 12961  002720  0E00               	movlw	0
 12962  002722  6E06               	movwf	___awdiv@sign,c
 12963  002724  AE04               	btfss	___awdiv@divisor+1,7,c
 12964  002726  D006               	goto	i2l3971
 12965  002728  6C03               	negf	___awdiv@divisor,c
 12966  00272A  1E04               	comf	___awdiv@divisor+1,f,c
 12967  00272C  B0D8               	btfsc	status,0,c
 12968  00272E  2A04               	incf	___awdiv@divisor+1,f,c
 12969  002730  0E01               	movlw	1
 12970  002732  6E06               	movwf	___awdiv@sign,c
 12971  002734                     i2l3971:
 12972  002734  AE02               	btfss	___awdiv@dividend+1,7,c
 12973  002736  D006               	goto	i2l3977
 12974  002738  6C01               	negf	___awdiv@dividend,c
 12975  00273A  1E02               	comf	___awdiv@dividend+1,f,c
 12976  00273C  B0D8               	btfsc	status,0,c
 12977  00273E  2A02               	incf	___awdiv@dividend+1,f,c
 12978  002740  0E01               	movlw	1
 12979  002742  1A06               	xorwf	___awdiv@sign,f,c
 12980  002744                     i2l3977:
 12981  002744  0E00               	movlw	0
 12982  002746  6E08               	movwf	___awdiv@quotient+1,c
 12983  002748  0E00               	movlw	0
 12984  00274A  6E07               	movwf	___awdiv@quotient,c
 12985  00274C  5003               	movf	___awdiv@divisor,w,c
 12986  00274E  1004               	iorwf	___awdiv@divisor+1,w,c
 12987  002750  B4D8               	btfsc	status,2,c
 12988  002752  D01C               	goto	i2l3999
 12989  002754  0E01               	movlw	1
 12990  002756  6E05               	movwf	___awdiv@counter,c
 12991  002758  D004               	goto	i2l3985
 12992  00275A                     i2l3983:
 12993  00275A  90D8               	bcf	status,0,c
 12994  00275C  3603               	rlcf	___awdiv@divisor,f,c
 12995  00275E  3604               	rlcf	___awdiv@divisor+1,f,c
 12996  002760  2A05               	incf	___awdiv@counter,f,c
 12997  002762                     i2l3985:
 12998  002762  AE04               	btfss	___awdiv@divisor+1,7,c
 12999  002764  D7FA               	goto	i2l3983
 13000  002766                     i2l3987:
 13001  002766  90D8               	bcf	status,0,c
 13002  002768  3607               	rlcf	___awdiv@quotient,f,c
 13003  00276A  3608               	rlcf	___awdiv@quotient+1,f,c
 13004  00276C  5003               	movf	___awdiv@divisor,w,c
 13005  00276E  5C01               	subwf	___awdiv@dividend,w,c
 13006  002770  5004               	movf	___awdiv@divisor+1,w,c
 13007  002772  5802               	subwfb	___awdiv@dividend+1,w,c
 13008  002774  A0D8               	btfss	status,0,c
 13009  002776  D005               	goto	i2l3995
 13010  002778  5003               	movf	___awdiv@divisor,w,c
 13011  00277A  5E01               	subwf	___awdiv@dividend,f,c
 13012  00277C  5004               	movf	___awdiv@divisor+1,w,c
 13013  00277E  5A02               	subwfb	___awdiv@dividend+1,f,c
 13014  002780  8007               	bsf	___awdiv@quotient,0,c
 13015  002782                     i2l3995:
 13016  002782  90D8               	bcf	status,0,c
 13017  002784  3204               	rrcf	___awdiv@divisor+1,f,c
 13018  002786  3203               	rrcf	___awdiv@divisor,f,c
 13019  002788  2E05               	decfsz	___awdiv@counter,f,c
 13020  00278A  D7ED               	goto	i2l3987
 13021  00278C                     i2l3999:
 13022  00278C  5006               	movf	___awdiv@sign,w,c
 13023  00278E  B4D8               	btfsc	status,2,c
 13024  002790  D004               	goto	i2l4003
 13025  002792  6C07               	negf	___awdiv@quotient,c
 13026  002794  1E08               	comf	___awdiv@quotient+1,f,c
 13027  002796  B0D8               	btfsc	status,0,c
 13028  002798  2A08               	incf	___awdiv@quotient+1,f,c
 13029  00279A                     i2l4003:
 13030  00279A  C007  F001         	movff	___awdiv@quotient,?___awdiv
 13031  00279E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 13032  0027A2  0012               	return	
 13033  0027A4                     __end_of___awdiv:
 13034                           	opt stack 0
 13035                           pclatu	equ	0xFFB
 13036                           pclath	equ	0xFFA
 13037                           tblptru	equ	0xFF8
 13038                           tblptrh	equ	0xFF7
 13039                           tblptrl	equ	0xFF6
 13040                           tablat	equ	0xFF5
 13041                           prodh	equ	0xFF4
 13042                           prodl	equ	0xFF3
 13043                           intcon	equ	0xFF2
 13044                           intcon2	equ	0xFF1
 13045                           intcon3	equ	0xFF0
 13046                           postinc0	equ	0xFEE
 13047                           fsr0h	equ	0xFEA
 13048                           fsr0l	equ	0xFE9
 13049                           wreg	equ	0xFE8
 13050                           indf1	equ	0xFE7
 13051                           fsr1h	equ	0xFE2
 13052                           fsr1l	equ	0xFE1
 13053                           indf2	equ	0xFDF
 13054                           postinc2	equ	0xFDE
 13055                           postdec2	equ	0xFDD
 13056                           fsr2h	equ	0xFDA
 13057                           fsr2l	equ	0xFD9
 13058                           status	equ	0xFD8
 13059                           pclatu	equ	0xFFB
 13060                           pclath	equ	0xFFA
 13061                           tblptru	equ	0xFF8
 13062                           tblptrh	equ	0xFF7
 13063                           tblptrl	equ	0xFF6
 13064                           tablat	equ	0xFF5
 13065                           prodh	equ	0xFF4
 13066                           prodl	equ	0xFF3
 13067                           intcon	equ	0xFF2
 13068                           intcon2	equ	0xFF1
 13069                           intcon3	equ	0xFF0
 13070                           postinc0	equ	0xFEE
 13071                           fsr0h	equ	0xFEA
 13072                           fsr0l	equ	0xFE9
 13073                           wreg	equ	0xFE8
 13074                           indf1	equ	0xFE7
 13075                           fsr1h	equ	0xFE2
 13076                           fsr1l	equ	0xFE1
 13077                           indf2	equ	0xFDF
 13078                           postinc2	equ	0xFDE
 13079                           postdec2	equ	0xFDD
 13080                           fsr2h	equ	0xFDA
 13081                           fsr2l	equ	0xFD9
 13082                           status	equ	0xFD8
 13083                           
 13084                           	psect	rparam
 13085  0000                     pclatu	equ	0xFFB
 13086                           pclath	equ	0xFFA
 13087                           tblptru	equ	0xFF8
 13088                           tblptrh	equ	0xFF7
 13089                           tblptrl	equ	0xFF6
 13090                           tablat	equ	0xFF5
 13091                           prodh	equ	0xFF4
 13092                           prodl	equ	0xFF3
 13093                           intcon	equ	0xFF2
 13094                           intcon2	equ	0xFF1
 13095                           intcon3	equ	0xFF0
 13096                           postinc0	equ	0xFEE
 13097                           fsr0h	equ	0xFEA
 13098                           fsr0l	equ	0xFE9
 13099                           wreg	equ	0xFE8
 13100                           indf1	equ	0xFE7
 13101                           fsr1h	equ	0xFE2
 13102                           fsr1l	equ	0xFE1
 13103                           indf2	equ	0xFDF
 13104                           postinc2	equ	0xFDE
 13105                           postdec2	equ	0xFDD
 13106                           fsr2h	equ	0xFDA
 13107                           fsr2l	equ	0xFD9
 13108                           status	equ	0xFD8
 13109                           
 13110                           	psect	temp
 13111  00007E                     btemp:
 13112                           	opt stack 0
 13113  00007E                     	ds	1
 13114  0000                     int$flags	set	btemp
 13115                           pclatu	equ	0xFFB
 13116                           pclath	equ	0xFFA
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           intcon2	equ	0xFF1
 13125                           intcon3	equ	0xFF0
 13126                           postinc0	equ	0xFEE
 13127                           fsr0h	equ	0xFEA
 13128                           fsr0l	equ	0xFE9
 13129                           wreg	equ	0xFE8
 13130                           indf1	equ	0xFE7
 13131                           fsr1h	equ	0xFE2
 13132                           fsr1l	equ	0xFE1
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           fsr2h	equ	0xFDA
 13137                           fsr2l	equ	0xFD9
 13138                           status	equ	0xFD8


Data Sizes:
    Strings     397
    Constant    99
    Data        2
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     53     111
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[25]), STR_18(CODE[24]), 
		 -> STR_17(CODE[23]), STR_16(CODE[18]), STR_15(CODE[23]), STR_14(CODE[16]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[23]), STR_6(CODE[23]), 
		 -> STR_5(CODE[3]), STR_4(CODE[8]), STR_3(CODE[13]), STR_2(CODE[24]), 
		 -> STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2___awtoft
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    i2___ftdiv->i2___ftpack
    i2___awtoft->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->i2___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___lltoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->___awtoft
    ___awtoft->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftpack
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   47404
                                             52 BANK0      1     1      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    9113
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4180
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0   13383
                                             50 BANK0      2     2      0
                            ___ftdiv
                             ___ftge
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    4933
                                             28 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2181
                                             24 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1464
                                             39 BANK0      9     3      6
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2806
                                             24 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1836
                                             16 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4180
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    5773
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    4180
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4604
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4045
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     873
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1480
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1480
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   48282
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0    2076
                                             12 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
                         i2___awtoft
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            31    23      8    2329
                                             12 COMRAM    22    14      8
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     289
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   42175
                                             98 COMRAM    16    14      2
                            ___awdiv
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
                         i2___awtoft
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   35146
                                             81 COMRAM    17    11      6
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   11653
                                             51 COMRAM     5     2      3
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
                         i2___awtoft
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   19088
                                             72 COMRAM     9     6      3
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
                         i2___awtoft
                          i2___ftdiv
                           i2___ftge
 ---------------------------------------------------------------------------------
 (9) i2___ftdiv                                           15     9      6    1031
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (7) i2___awtoft                                           4     1      3     946
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    4957
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                            ___fttol
                              _frexp
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4     901
                                             54 COMRAM    10     6      4
                            ___fttol (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    5541
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     573
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    1997
                                             12 COMRAM    15     9      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    2706
                                             39 COMRAM     6     0      6
                            ___ftadd
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    2409
                                             27 COMRAM    12     6      6
                            ___ftmul (ARG)
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     832
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___ftdiv
       ___ftpack
     ___ftge
       ___ftdiv (ARG)
         ___ftpack
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
       ___awtoft
         ___ftpack
       ___wmul
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
       ___awtoft
         ___ftpack
       ___wmul

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___ftadd
       ___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___wmul (ARG)
     ___ftmul
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___awtoft (ARG)
         i2___ftpack
     _pow
       ___ftmul
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___awtoft (ARG)
           i2___ftpack
       ___lltoft
         i2___ftpack
       _exp
         ___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         ___fttol
           ___ftadd (ARG)
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _floor
           ___altoft
             ___fttol (ARG)
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   _frexp (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
             i2___ftpack (ARG)
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___awtoft (ARG)
               i2___ftpack
           _frexp
           i2___ftge
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
             ___ftmul
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___wmul
         _log (ARG)
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           _eval_poly
             ___ftadd
               ___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
             ___ftmul
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___wmul
           _frexp
           i2___awtoft
             i2___ftpack
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftdiv (ARG)
           i2___ftpack
         i2___ftge (ARG)
       _log
         ___ftadd
           ___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
         ___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _frexp
         i2___awtoft
           i2___ftpack
       i2___ftge
     i2___awtoft
       i2___ftpack
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
     i2___awtoft
       i2___ftpack
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EC      34        0.0%
DATA                 0      0      EC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 28 05:02:07 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 2EFA            i2_I2C_Master_Write 2ED8  
               ___altoft@sign 0040                            l34 2E70                ?_emergencystop 0001  
                ___awdiv@sign 0006           ___wmul@multiplicand 00CA            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                    i2___awtoft 2CAC                    i2___ftpack 2420  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000                  ___ftadd@exp1 0027  
                ___ftadd@exp2 0026                  ___ftadd@sign 0025                           l327 0942  
                         l336 0A2A                           l357 2E38                           l389 1450  
                         l816 240E                           l744 1568                           l686 1794  
                         l869 2812                           l879 2954                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0DFC                           _log 159E  
                         _isr 0008                           _pow 1190                  ___awmod@sign 00CD  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 00D9                  ___ftdiv@sign 00DE  
                __CFG_WDT$OFF 000000                          l4031 2544                          l4023 250E  
                        l4015 24EA                          l4025 251A                          l4027 2520  
                        l4035 2552                          l4019 24FA                          l4051 2256  
                        l4301 0A20                          l4071 23A8                          l4039 2566  
                        l3351 16EA                          l4047 2216                          l4311 0A60  
                        l4303 0A36                          l3361 1778                          l3353 16F8  
                        l4057 229A                          l4313 0A68                          l4067 2392  
                        l3603 2804                          l3611 2910                          l3363 1786  
                        l3355 1728                          l3347 16D6                          l4323 0AA0  
                        l4243 076C                          l4069 23A2                          l3613 291C  
                        l4317 0A84                          l4325 0AA6                          l4079 23FC  
                        l3615 2922                          l3535 2D76                          l3375 17BA  
                        l3359 1748                          l4319 0A8C                          l4255 07AC  
                        l4263 07CE                          l3553 2D9E                          l4353 2078  
                        l3369 179E                          l4249 078C                          l4265 07F6  
                        l3619 2946                          l3571 2B86                          l3723 1358  
                        l4283 08E0                          l4275 085E                          l4381 1944  
                        l4349 206E                          l3733 13B2                          l3591 27C2  
                        l3831 024C                          l3807 01D6                          l3823 0212  
                        l3751 0046                          l4375 1906                          l4359 2098  
                        l3719 1342                          l4287 092E                          l3593 27CE  
                        l3809 01DC                          l3825 022A                          l3761 0080  
                        l3745 0020                          l4369 18D0                          l4393 199A  
                        l3737 13C8                          l3729 1390                          l4297 09D0  
                        l4289 094E                          l3595 27D4                          l3851 02D0  
                        l3843 02A8                          l3835 0284                          l3771 00FE  
                        l3755 0050                          l4387 1982                          l3923 148C  
                        l3861 0304                          l3837 028E                          l3749 0034  
                        l3863 0350                          l3871 03B6                          l3855 02EA  
                        l3775 0106                          l3873 03BE                          l3849 02C4  
                        l3793 019A                          l3769 00F8                          l3777 013E  
                        l3929 14C6                          l4681 1EFC                          l3859 02FE  
                        l3795 01A0                          l3875 03CA                          l4683 1F02  
                        l4675 1EEA                          l4691 1F14                          ?_exp 0049  
                        l3869 039E                          l3789 017E                          l3949 1526  
                        l4685 1F08                          l4677 1EF0                          l4693 1F42  
                        ?_log 0034                          l4687 1F0E                          l4679 1EF6  
                        ?_isr 0001                          ?_pow 0052            i2_read_colorsensor 17C8  
                        STR_1 FEA3                          STR_2 FE8B                          STR_3 FFE7  
                        STR_4 FFF4                          STR_5 FFFC                          STR_6 FF01  
                        STR_7 FF18                          STR_8 FF63                          STR_9 FF52  
                        _T0CS 007EAD                          _LATA 000F89                          _LATB 000F8A  
                        _LATC 000F8B                          u3120 2D74                          _LATD 000F8C  
                        _LATE 000F8D                          u4025 29EE                          u3711 14A2  
                        u3691 1468                          u4627 1F4A                          _RCEN 007E2B  
                        u4637 2AD4                          u4647 2B10                          u4657 297E  
                        i2l34 2E84                          u4667 2986                          u4677 29B0  
                        u4687 29B8                          u4697 1F90                          _TMR0 000FD6  
                        _RSEN 007E29                          _main 1E7A                  ___ftpack@arg 00C8  
                        _keys FE0F                  ___ftpack@exp 00CB                          _time 0096  
                        fsr0h 000FEA                          fsr1h 000FE2            i2___lwdiv@quotient 0005  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 007E                          exp@x 0049                          log@x 0034  
                        isr@i 0073          ??i2_I2C_Master_Start 0002                  i2___ftge@ff1 0001  
                i2___ftge@ff2 0004          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
                i2___ftdiv@f1 0009                  i2___ftdiv@f2 000C                  i2___ftdiv@f3 0013  
             __end_ofi2_putch 2EC2                  i2___awtoft@c 0009                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 001A                  ___param_bank 000000                  ___ftmul@sign 001B  
                 i2_lcdNibble 2B1C                 ?_bottle_count 0001                  ___fttol@exp1 0036  
                       ??_exp 004C                         ??_log 0037                  ___fttol@lval 0032  
                       ??_isr 00B8                         ??_pow 0058              ?_I2C_Master_Init 00D5  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 27A4               __end_of___ftadd 1190                         STR_10 FF74  
                       STR_11 FF85                         STR_20 FFB8                         STR_12 FF96  
                       STR_21 FFD8                         STR_13 FFA7                         STR_14 FFC8  
                       STR_22 FF41                         STR_15 FEEA                         STR_16 FF2F  
                       STR_17 FED3                         STR_18 FEBB                         STR_19 FE72  
             __end_of___awmod 2570               __end_of___ftdiv 159E               __end_of___ftneg 2E18  
             __end_of___lldiv 2420               __end_of___ftmul 1CB6               ___awdiv@divisor 0003  
             __end_of___ftsub 2C30               __end_of___fttol 1BC2                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA               __end_of___lwdiv 281C  
             __end_of___lwmod 295E                         i2l253 0640                         i2l262 0498  
                       i2l263 04A2                         i2l255 0428                         i2l256 063C  
                       i2l265 05AE                         i2l266 05BE                         i2l371 25FE  
                       i2l365 25AA                         i2l277 072E                         i2l368 25D4  
                       i2l713 1052                         i2l724 1102                         i2l733 111E  
                       i2l709 1028                         i2l901 11C8                         i2l389 18CC  
                       i2l744 1D6A                         i2l906 12F8                         i2l686 24AE  
                       i2l766 2E0A               ___awdiv@counter 0005                         i2l869 2AC2  
                       i2l879 2BE6          ??i2_read_colorsensor 000D                         _PORTB 000F81  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96               ??_servo_rotate0 0003  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
           read_colorsensor@i 00E0                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0011               __end_of_lcdInst 2EB6                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                         _nRBPU 007F8F                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000               __end_of_initLCD 2B1C  
              __CFG_EBTRB$OFF 000000                    i2isdigit@c 0003                 ___awtoft@sign 00D3  
             __end_of_dpowers FE2A                         _color 0080                         _floor 1D9C  
                       _etime 0078                         _ldexp 229E                         _frexp 2690  
                       _errno 00A7               __end_of_isdigit 2DA8                 ___ftpack@sign 00CC  
                       _putch 2E96                         _stime 007C                         pclath 000FFA  
                       tablat 000FF5              __end_ofi2___ftge 2690                         pow@yi 005F  
             __end_of_timeset FE39              __end_ofi2___wmul 2DF4               __end_of_standby 2CAC  
                       status 000FD8                 i2___ftdiv@exp 0016                __CFG_PBADEN$ON 000000  
               i2printf@width 0020            __size_ofi2___ftdiv 00E6                   exp@exponent 004F  
            __end_ofi2_printf 0DFC            __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042  
                 ldexp@newexp 0037               __initialization 2C30                   log@exponent 0037  
          __size_ofi2_lcdInst 000C               ??_emergencystop 00EA                ??_bottle_count 00EA  
                __end_of_main 1F56                  __end_of_keys FE20                    i2printf@ap 001A  
          __size_ofi2_isdigit 001E                   ?i2___awtoft 0009                   ?i2___ftpack 0001  
                      ??_main 00EC                 ___fttol@sign1 0031                 __activetblptr 000002  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 00C9                servo_rotate0@i 0007  
              servo_rotate0@j 0009            ??_I2C_Master_Start 00C9                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 00CB                        ?_floor 0041  
                      ?_ldexp 0034                        ?_frexp 0001              __end_of___altoft 2894  
                      _T08BIT 007EAE              ___awdiv@dividend 0001               i2lcdNibble@data 0002  
            __end_of___awtoft 2BAE                        ?_putch 0001              __end_of___ftpack 17C8  
             i2lcdNibble@temp 0001              __end_of___lltoft 2A7A                        _INT0IE 007F94  
                      _INT1IE 007F83                        _INT1IF 007F80                        _INT2IE 007F84  
                      i2l1064 0EB2                        i2l1065 0FD6                        i2l1075 1E6C  
                      i2l3121 1036                        i2l3105 283E                        i2l4003 279A  
                      i2l3107 284A                        i2l3213 1C54                        i2l3071 2448  
                      i2l3151 10BC                        i2l3143 1090                        i2l3127 1060  
                      i2l3223 1C7C                        i2l3311 2660                        i2l4103 2DC8  
                      i2l3081 24A4                        i2l3073 2466                        i2l3065 2430  
                      i2l3161 10F0                        i2l3153 10C6                        i2l3209 1C44  
                      i2l3401 1DCA                        i2l4121 2E50                        i2l3163 10FA  
                      i2l3155 10CE                        i2l3219 1C6C                        i2l3307 2630  
                      i2l4131 2A90                        i2l3077 247C                        i2l3069 243E  
                      i2l3149 10B2                        i2l3237 1AFA                        i2l3317 268C  
                      i2l3405 1DD8                        i2l3501 1D44                        i2l4133 2A98  
                      i2l3079 249A                        i2l3255 1B60                        i2l4143 2AB8  
                      i2l4135 2A9C                        i2l4151 2BBC                        i2l3169 113A  
                      i2l3417 2144                        i2l3273 1BB0                        i2l3265 1B88  
                      i2l3409 1DF2                        i2l4153 2BC4                        i2l3179 116A  
                      i2l3195 1C12                        i2l3419 21C0                        i2l3267 1B94  
                      i2l3259 1B70                        i2l3451 232C                        i2l3435 22FC  
                      i2l3427 22B6                        i2l4411 28C8                        i2l4155 2BC8  
                      i2l3189 1BEA                        i2l3269 1B9A                        i2l3285 26B8  
                      i2l4421 28EC                        i2l4501 0ADA                        i2l3383 2C06  
                      i2l3447 2320                        i2l4415 28D0                        i2l4159 2BDC  
                      i2l4511 0AFE                        i2l3465 2CC0                        i2l3481 1D06  
                      i2l4441 1ABC                        i2l4505 0AEA                        i2l3475 1CDE  
                      i2l3651 0E14                        i2l3635 15DC                        i2l4611 0D1C  
                      i2l4531 0B94                        i2l4507 0AF8                        i2l3629 15BA  
                      i2l3901 1252                        i2l4429 19EC                        i2l4453 2598  
                      i2l4605 0D00                        i2l4525 0B8A                        i2l4533 0BC8  
                      i2l4517 0B2C                        i2l3663 0E84                        i2l4447 2580  
                      i2l4607 0D08                        i2l4615 0D2E                        i2l4551 0C1C  
                      i2l4527 0B8E                        i2l4631 0DE2                        i2l3577 2A24  
                      i2l3657 0E4C                        i2l3905 1274                        i2l4617 0D34  
                      i2l4625 0DBE                        i2l4545 0BFE                        i2l4801 0710  
                      i2l4713 0452                        i2l3579 2A30                        i2l4459 25C2  
                      i2l4619 0D78                        i2l4627 0DD4                        i2l4563 0C48  
                      i2l4475 17FC                        i2l3685 0FAC                        i2l4629 0DDA  
                      i2l4565 0C4C                        i2l4581 0C8E                        i2l4549 0C18  
                      i2l4493 1866                        i2l4485 183A                        i2l4805 0718  
                      i2l4717 045E                        i2l4591 0CCC                        i2l4479 180C  
                      i2l4719 0468                        i2l4593 0CD4                        i2l4489 1856  
                      i2l3971 2734                        i2l4587 0CA8                        i2l4579 0C78  
                      i2l4763 05CC                        i2l4747 0554                        i2l3893 11EE  
                      i2l4765 05DA                        i2l3983 275A                        i2l3887 11D6  
                      i2l4599 0CEA                        i2l3985 2762                        i2l3977 2744  
                      i2l4769 05E8                        i2l3995 2782                        i2l3987 2766  
                      i2l4795 06FA                        i2l3999 278C                        u307_41 1CC6  
                      u244_41 0FF4                        u245_41 1008                        u309_41 1CEE  
                      u271_41 1ADE                        u265_41 1BD2                        u267_41 1BFA  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 21D6                        ___wmul 2D1A  
          ??_read_colorsensor 00D4                     ??___awdiv 0005                     ??___ftadd 0022  
              __CFG_STVREN$ON 000000                     ??___awmod 00CC                     ??___ftdiv 00D6  
                   ??___ftneg 0004                     ??___lldiv 00D0                     ??___ftmul 0013  
                   ??___ftsub 002E                     ??___fttol 002C                     ??___lwdiv 00CC  
                   ??___lwmod 00D3                 dec_to_hex@num 0063                        clear_0 2C4E  
                      clear_1 2C5A              ___awdiv@quotient 0007               ___awmod@divisor 00CA  
             ___awmod@counter 00CC                     ??_lcdInst 00CA                        _printf 0012  
                      floor@i 0044                        floor@x 0041         ___ftmul@f3_as_product 0017  
                   ??_initLCD 00CB                     ??_isdigit 00C8             __end_ofi2___ftdiv 1D9C  
           __end_ofi2___lwdiv 2ACC                  __mediumconst FE0E             __end_ofi2___lwmod 2BF0  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_standby 00EA             __end_ofi2_lcdInst 2ECE             __end_ofi2_isdigit 2E58  
            __end_ofexp@coeff FE57          __size_of_bottle_time 0036              __end_oflog@coeff FE72  
              i2___ftdiv@cntr 0012                    __accesstop 0080       __end_of__initialization 2C60  
                  ___altoft@c 0037                i2___ftdiv@sign 0017                    ___ftadd@f1 001C  
                  ___ftadd@f2 001F           __size_ofi2___awtoft 0038           __size_ofi2___ftpack 00AE  
                  ___ftge@ff1 00DF                    ___ftge@ff2 00E2                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 00D0                    ___ftdiv@f2 00D3  
                  ___ftdiv@f3 00DA                    ___ftneg@f1 0001                    ___awtoft@c 00D0  
              i2___ftpack@arg 0001                i2___ftpack@exp 0004                    ___ftmul@f1 000D  
                  ___ftmul@f2 0010                    ___ftsub@f1 0028                    ___ftsub@f2 002B  
                  ___fttol@f1 0028            i2___lwmod@dividend 0008                __pcstackCOMRAM 0001  
                __pidataBANK0 2F02                    ___lltoft@c 0009                 __end_of_floor 1E7A  
               __end_of_ldexp 2364                 __end_of_frexp 2720                 __end_of_putch 2EA6  
                 i2printf@idx 0019                   i2printf@val 001D            __size_of_date_time 00D2  
         servo_rotate0@degree 0001                     ?i2___ftge 0001                     ?i2___wmul 0001  
          __size_of_lcdNibble 0060                   i2putch@data 0003                     ?i2_printf 000D  
            _flag_bottle_high 00AB   __size_of_I2C_ColorSens_Init 00DC                       ??_floor 0044  
                     ??_ldexp 0039                       ??_frexp 0006          __end_of_bottle_count 19D2  
                  _dec_to_hex 19D2                       ??_putch 00CA                    __pbssBANK0 0080  
          __size_of_eval_poly 00D2             servo_rotate0@duty 0005            __size_of_read_time 0068  
                     ?___ftge 00DF                  ?i2_lcdNibble 0001                       ?___wmul 00C8  
                   ?___altoft 0037                     ?___awtoft 00D0                     ?___ftpack 00C8  
                     ?_printf 00D4            __size_of_operation 0366                     ?___lltoft 0009  
                  _flag_yopNC 00AF               _bottle_read_bot 00A3                    ??i2___ftge 0007  
             _bottle_read_top 00A5                    ??i2___wmul 0005                    ??i2_printf 0015  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
           __end_of_date_time 2104                       i2_putch 2EB6             _bottle_count_disp 00ED  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 29BE   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 00C8                       ___awdiv 2720                       ___ftadd 0FE4  
                     ___awmod 24CE                       ___ftdiv 1452                       ___ftneg 2DF4  
                     ___lldiv 2364               __size_of___wmul 0036                       ___ftmul 1BC2  
                     ___ftsub 2BF0                       ___fttol 1ACE                       ___lwdiv 27A4  
                     ___lwmod 28FC                    _curr_state 00B7                    ??___altoft 003B  
                     __pcinit 2C30                  ??i2___awtoft 000C                  ??i2___ftpack 0006  
                  ??___awtoft 00D3                    ??___ftpack 00CD             __end_of_eval_poly 21D6  
                     __ramtop 1000                       _lcdInst 2EA6                    ??___lltoft 000D  
                     __ptext0 1E7A                       __ptext1 2C6E                       __ptext2 2E58  
                     __ptext3 076A                       __ptext4 1306                       __ptext5 2B6A  
                     __ptext6 21D6                       __ptext7 1452                       __ptext8 16BC  
                     __ptext9 2ACC               __size_of_printf 03D6                dec_to_hex@temp 006B  
                     _initLCD 2ACC             __end_of_hexpowers FE32                 i2_isdigit$797 0002  
                     _dpowers FE20                  __size_of_exp 01E8                  __size_of_log 011E  
                     _isdigit 2D7E                  __size_of_isr 0762   __size_ofi2_read_colorsensor 0106  
                __size_of_pow 0176              ___awmod@dividend 00C8             __end_of_read_time 28FC  
    __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E      __size_of_I2C_Master_Wait 0014  
                  date_time@i 00EA      __size_of_I2C_Master_Stop 0008         __end_of_servo_rotate0 2600  
                     _timeset FE32                       _testint 009D                       _standby 2C6E  
                 ?_dec_to_hex 0063                __pintcode_body 03E8          end_of_initialization 2C60  
                     exp@sign 0051                 __Lmediumconst FE0E                       int_func 03E8  
         i2___wmul@multiplier 0001             __end_of_operation 0AD0                _operation_disp 00B1  
          __end_ofi2___awtoft 2CE4            __end_ofi2___ftpack 24CE                _operation_time 00B3  
              ??_operationend 00EA     __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A  
             ___lldiv@divisor 00CC                       pow@sign 005E               ___lldiv@counter 00D4  
                     printf@c 00E9                       printf@f 00D4              I2C_Master_Init@c 00D5  
            I2C_Master_Read@a 00C9                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         __end_of_emergencystop 2E3A                     _PORTAbits 000F80  
       __size_of_bottle_count 0104     __size_of_read_colorsensor 014C     read_colorsensor@color_low 00D8  
           i2_I2C_Master_Read 2DA8             i2_I2C_Master_Wait 2E84             i2_I2C_Master_Stop 2EF2  
                   i2___ftdiv 1CB6             i2___lwdiv@divisor 0003                     i2___lwdiv 2A7A  
                   i2___lwmod 2BAE             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_high 0015            ?i2_I2C_Master_Stop 0001  
                  _start_time 007A                     i2_lcdInst 2EC2                   ___ftdiv@exp 00DD  
                 printf@width 00E7               i2___awtoft@sign 000C           ??i2_I2C_Master_Read 0002  
             i2___ftpack@sign 0005                     i2_isdigit 2E3A           ??i2_I2C_Master_Wait 0001  
         ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 0016                  _bottle_count 18CE  
              __end_of___ftge 229E                __end_of___wmul 2D50           __size_of_dec_to_hex 00FC  
        __size_ofi2_lcdNibble 004E                 i2lcdInst@data 0003                    floor@expon 0047  
            i2___wmul@product 0005                __end_of_printf 03E8                  i2printf@flag 001F  
   __end_ofi2_I2C_Master_Read 2DCE     __end_ofi2_I2C_Master_Wait 2E96                  i2printf@prec 001C  
         start_initialization 2C30     __end_ofi2_I2C_Master_Stop 2EFA             __size_ofi2___ftge 0090  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 0FE4  
                 __end_of_log 16BC                   __end_of_isr 076A                   __end_of_pow 1306  
                   i2printf@c 0022                     i2printf@f 000D                 ??_bottle_time 00EA  
       i2I2C_Master_Read@temp 0003                    ?i2___ftdiv 0009                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008             __size_ofi2_printf 032C                    frexp@value 0001  
           ??_I2C_Master_Init 00D9             ??_I2C_Master_Read 00C9             ??_I2C_Master_Wait 00C8  
                  ?i2_lcdInst 0001             ??_I2C_Master_Stop 00C9    read_colorsensor@color_high 00DC  
                  ?i2_isdigit 0001                      ??___ftge 00E5                      ??___wmul 00CC  
                 __pdataBANK0 00ED              __CFG_LPT1OSC$OFF 000000                      ??_printf 00DC  
           __size_of___altoft 0078                    read_time@i 0004             __size_of___awtoft 0044  
           __size_of___ftpack 010C             __size_of___lltoft 005C    __end_of_I2C_ColorSens_Init 2032  
                 __pbssCOMRAM 0076          __end_of_operationend 2E70                 __pcstackBANK0 00B8  
           i2___lwmod@divisor 000A             i2___lwmod@counter 000C                      ?i2_putch 0001  
         __end_of_bottle_time 2D1A              _I2C_Master_Start 2EEA           i2I2C_Master_Write@d 0002  
            _I2C_Master_Write 2ECE                     _date_time 2032              ___lwdiv@dividend 00C8  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008                 __pmediumconst FE0E  
                   _lcdNibble 295E                      ?___awdiv 0001                      ?___ftadd 001C  
                    ?___awmod 00C8                      ?___ftdiv 00D0                      ?___ftneg 0001  
                    ?___lldiv 00C8                      ?___ftmul 000D                      ?___ftsub 0028  
                    ?___fttol 0028                      ?___lwdiv 00C8                      ?___lwmod 00CF  
                    ?_lcdInst 0001              dec_to_hex@hexnum 006F                      ?_initLCD 0001  
                    ?_isdigit 0001              _read_colorsensor 1306    __size_ofi2_I2C_Master_Read 0026  
  __size_ofi2_I2C_Master_Wait 0012                     _eval_poly 2104    __size_ofi2_I2C_Master_Stop 0008  
                 _flag_bottle 00A9                     _hexpowers FE2A                      ?_standby 0001  
            ___lwdiv@quotient 00CC                __size_of_floor 00DE                __size_of_ldexp 00C6  
                 ??i2___ftdiv 000F                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 2894  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 2F02    __end_ofi2_I2C_Master_Write 2EE2  
                 ??i2_lcdInst 0003                ___wmul@product 00CC                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                   ??i2_isdigit 0001  
                  ?_date_time 0001                      i2u302_40 22D6                      i2u302_48 22D8  
                    i2u330_40 0E8E                      i2u280_40 26E0                      i2u273_40 1B18  
                    i2u280_48 26E2                      i2u329_40 0E8C                      i2u273_45 1B10  
                    i2u470_47 0720                      i2u367_40 123A                      i2u471_47 2B34  
                   _operation 076A                      i2u392_40 2DC6                      i2u472_47 2B3C  
                    i2u473_47 2B5C                      i2u298_40 1DE4                      i2u474_47 2B64  
                    i2u475_47 259E                      i2u476_47 25C8              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 1ACE    __end_ofi2_read_colorsensor 18CE  
           ___wmul@multiplier 00C8                      i2___ftge 2600                      i2___wmul 2DCE  
               lcdNibble@data 00C9                    printf@flag 00E6                 lcdNibble@temp 00C8  
                  printf@prec 00E3                    ?_eval_poly 0028                      i2_printf 0AD0  
                 _bottle_time 2CE4           I2C_Master_Read@temp 00CA            _bottle_count_array 008C  
                  ?_read_time 0001            dec_to_hex@quotient 0071              __size_ofi2_putch 000C  
                   frexp@eptr 0004                      __Hrparam 0000           i2read_colorsensor@i 0019  
                  ?_operation 0001                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
                 dec_to_hex@i 006D        __size_of_servo_rotate0 0090              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 00A2              __size_of___ftdiv 014C  
            __size_of___ftneg 0024         i2___wmul@multiplicand 0003              __size_of___lldiv 00BC  
                    ___altoft 281C              __size_of___ftmul 00F4              __size_of___ftsub 0040  
            __size_of___fttol 00F4              __size_of___lwdiv 0078              __size_of___lwmod 0062  
       __size_of_operationend 0018                      ___awtoft 2B6A                      ___ftpack 16BC  
                    ___lltoft 2A1E                 _flag_top_read 00AD                   _isdigit$797 00C9  
          i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010                      _exp$1240 004C  
             _I2C_Master_Init 29BE               _I2C_Master_Read 2D50              __size_of_initLCD 0050  
             _I2C_Master_Wait 2E70               _I2C_Master_Stop 2EE2                      _isr$1360 0074  
            __size_of_isdigit 002A               ___lwdiv@divisor 00CA               ___lwdiv@counter 00CE  
                    __ptext10 2E18                      __ptext11 2032                      __ptext20 27A4  
                    __ptext12 2D50                      __ptext21 2EA6                      __ptext13 2CE4  
                    __ptext30 2E70                      __ptext22 295E                      __ptext14 18CE  
                    __ptext23 24CE                      __ptext15 0012                      __ptext40 2570  
                    __ptext32 17C8                      __ptext24 29BE                      __ptext16 2E96  
                    __ptext41 2894                      __ptext33 0AD0                      __ptext25 2364  
                    __ptext17 2D7E                      __ptext50 0DFC                      __ptext42 2ED8  
                    __ptext34 2EB6                      __ptext26 1F56                      __ptext18 2D1A  
                    __ptext51 1CB6                      __ptext43 2EF2                      __ptext35 2E3A  
                    __ptext27 2ECE                      __ptext19 28FC                      __ptext60 2DCE  
                    __ptext52 2CAC                      __ptext44 2EFA                      __ptext36 2BAE  
                    __ptext28 2EE2                      __ptext61 1BC2                      __ptext53 229E  
                    __ptext45 2DA8                      __ptext37 2A7A                      __ptext29 2EEA  
                    __ptext62 2BF0                      __ptext54 1D9C                      __ptext46 2E84  
                    __ptext38 2EC2                      __ptext63 0FE4                      __ptext55 2600  
                    __ptext47 19D2                      __ptext39 2B1C                      __ptext64 2DF4  
                    __ptext56 2690                      __ptext48 1190                      __ptext65 2A1E  
                    __ptext57 1ACE                      __ptext49 159E                      __ptext66 2420  
                    __ptext58 281C                      __ptext67 2720                      __ptext59 2104  
                    _end_time 0076              __size_of_standby 003E                      _pow$1238 0058  
                    _pow$1239 005B        __size_of_emergencystop 0022                 __size_of_main 00DC  
             _dec_to_hex$1237 0065               _dec_to_hex$1361 0068                   ??_date_time 00EA  
                _operationend 2E58                 ??i2_lcdNibble 0001                   ??_lcdNibble 00C8  
                    _testflag 00B5                      int$flags 007E                     printf@idx 00E0  
                   printf@val 00E4                      exp@coeff FE39                      log@coeff FE57  
                   putch@data 00CA      __end_of_I2C_Master_Start 2EF2      __end_of_I2C_Master_Write 2ED8  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00CA  
               _servo_rotate0 2570                   ??_read_time 0004                      intlevel2 0000  
            ___lwmod@dividend 00CF              ___lldiv@dividend 00C8            _I2C_ColorSens_Init 1F56  
    __end_of_read_colorsensor 1452                   ??_operation 00EA           ?_I2C_ColorSens_Init 0001  
                    printf@ap 00E1       __end_of_I2C_Master_Init 2A1E       __end_of_I2C_Master_Read 2D7E  
     __end_of_I2C_Master_Wait 2E84       __end_of_I2C_Master_Stop 2EEA                   lcdInst@data 00CA  
               _emergencystop 2E18           __end_ofi2_lcdNibble 2B6A              ___lldiv@quotient 00D0  
           I2C_Master_Write@d 00C9               ___lwmod@divisor 00D1   i2read_colorsensor@color_low 0011  
             ___lwmod@counter 00D3          ??_I2C_ColorSens_Init 00CB                ?_servo_rotate0 0001  

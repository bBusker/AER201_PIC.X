

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 14 05:01:02 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  002B52                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _bottle_count_disp
   125  002B52  FFFF               	dw	65535
   126                           
   127                           	psect	mediumconst
   128  00FDA4                     __pmediumconst:
   129                           	opt stack 0
   130  00FDA4  00                 	db	0
   131  00FDA5                     _keys:
   132                           	opt stack 0
   133  00FDA5  31                 	db	49
   134  00FDA6  32                 	db	50
   135  00FDA7  33                 	db	51
   136  00FDA8  41                 	db	65
   137  00FDA9  34                 	db	52
   138  00FDAA  35                 	db	53
   139  00FDAB  36                 	db	54
   140  00FDAC  42                 	db	66
   141  00FDAD  37                 	db	55
   142  00FDAE  38                 	db	56
   143  00FDAF  39                 	db	57
   144  00FDB0  43                 	db	67
   145  00FDB1  2A                 	db	42
   146  00FDB2  30                 	db	48
   147  00FDB3  23                 	db	35
   148  00FDB4  44                 	db	68
   149  00FDB5  00                 	db	0
   150  00FDB6                     __end_of_keys:
   151                           	opt stack 0
   152  00FDB6                     _dpowers:
   153                           	opt stack 0
   154  00FDB6  0001               	dw	1
   155  00FDB8  000A               	dw	10
   156  00FDBA  0064               	dw	100
   157  00FDBC  03E8               	dw	1000
   158  00FDBE  2710               	dw	10000
   159  00FDC0                     __end_of_dpowers:
   160                           	opt stack 0
   161  00FDC0                     _hexpowers:
   162                           	opt stack 0
   163  00FDC0  0001               	dw	1
   164  00FDC2  0010               	dw	16
   165  00FDC4  0100               	dw	256
   166  00FDC6  1000               	dw	4096
   167  00FDC8                     __end_of_hexpowers:
   168                           	opt stack 0
   169  00FDC8                     _timeset:
   170                           	opt stack 0
   171  00FDC8  50                 	db	80
   172  00FDC9  35                 	db	53
   173  00FDCA  21                 	db	33
   174  00FDCB  08                 	db	8
   175  00FDCC  05                 	db	5
   176  00FDCD  02                 	db	2
   177  00FDCE  17                 	db	23
   178  00FDCF                     __end_of_timeset:
   179                           	opt stack 0
   180  00FDCF                     exp@coeff:
   181                           	opt stack 0
   182  00FDCF  00                 	db	0
   183  00FDD0  80                 	db	128
   184  00FDD1  3F                 	db	63
   185  00FDD2  72                 	db	114
   186  00FDD3  31                 	db	49
   187  00FDD4  3F                 	db	63
   188  00FDD5  FE                 	db	254
   189  00FDD6  75                 	db	117
   190  00FDD7  3E                 	db	62
   191  00FDD8  58                 	db	88
   192  00FDD9  63                 	db	99
   193  00FDDA  3D                 	db	61
   194  00FDDB  95                 	db	149
   195  00FDDC  1D                 	db	29
   196  00FDDD  3C                 	db	60
   197  00FDDE  C5                 	db	197
   198  00FDDF  AE                 	db	174
   199  00FDE0  3A                 	db	58
   200  00FDE1  79                 	db	121
   201  00FDE2  21                 	db	33
   202  00FDE3  39                 	db	57
   203  00FDE4  94                 	db	148
   204  00FDE5  80                 	db	128
   205  00FDE6  37                 	db	55
   206  00FDE7  93                 	db	147
   207  00FDE8  A7                 	db	167
   208  00FDE9  35                 	db	53
   209  00FDEA  56                 	db	86
   210  00FDEB  15                 	db	21
   211  00FDEC  34                 	db	52
   212  00FDED                     __end_ofexp@coeff:
   213                           	opt stack 0
   214  00FDED                     log@coeff:
   215                           	opt stack 0
   216  00FDED  00                 	db	0
   217  00FDEE  00                 	db	0
   218  00FDEF  00                 	db	0
   219  00FDF0  00                 	db	0
   220  00FDF1  80                 	db	128
   221  00FDF2  3F                 	db	63
   222  00FDF3  F0                 	db	240
   223  00FDF4  FF                 	db	255
   224  00FDF5  BE                 	db	190
   225  00FDF6  E2                 	db	226
   226  00FDF7  A9                 	db	169
   227  00FDF8  3E                 	db	62
   228  00FDF9  83                 	db	131
   229  00FDFA  76                 	db	118
   230  00FDFB  BE                 	db	190
   231  00FDFC  AE                 	db	174
   232  00FDFD  2B                 	db	43
   233  00FDFE  3E                 	db	62
   234  00FDFF  3C                 	db	60
   235  00FE00  C3                 	db	195
   236  00FE01  BD                 	db	189
   237  00FE02  D2                 	db	210
   238  00FE03  13                 	db	19
   239  00FE04  3D                 	db	61
   240  00FE05  78                 	db	120
   241  00FE06  D3                 	db	211
   242  00FE07  BB                 	db	187
   243  00FE08                     __end_oflog@coeff:
   244                           	opt stack 0
   245  0000                     _TMR0	set	4054
   246  0000                     _ADCON0	set	4034
   247  0000                     _ADCON1	set	4033
   248  0000                     _INTCONbits	set	4082
   249  0000                     _LATA	set	3977
   250  0000                     _LATAbits	set	3977
   251  0000                     _LATB	set	3978
   252  0000                     _LATC	set	3979
   253  0000                     _LATCbits	set	3979
   254  0000                     _LATD	set	3980
   255  0000                     _LATDbits	set	3980
   256  0000                     _LATE	set	3981
   257  0000                     _PORTAbits	set	3968
   258  0000                     _PORTB	set	3969
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON2	set	4037
   263  0000                     _SSPSTAT	set	4039
   264  0000                     _TRISA	set	3986
   265  0000                     _TRISB	set	3987
   266  0000                     _TRISC	set	3988
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISE	set	3990
   269  0000                     _ACKDT	set	32301
   270  0000                     _ACKEN	set	32300
   271  0000                     _GIE	set	32663
   272  0000                     _INT0IE	set	32660
   273  0000                     _INT1IE	set	32643
   274  0000                     _INT1IF	set	32640
   275  0000                     _INT2IE	set	32644
   276  0000                     _INT2IF	set	32641
   277  0000                     _INTEDG2	set	32652
   278  0000                     _PEN	set	32298
   279  0000                     _PSA	set	32427
   280  0000                     _RCEN	set	32299
   281  0000                     _RSEN	set	32297
   282  0000                     _SEN	set	32296
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _T0PS0	set	32424
   286  0000                     _T0PS1	set	32425
   287  0000                     _T0PS2	set	32426
   288  0000                     _TMR0IE	set	32661
   289  0000                     _TMR0IF	set	32658
   290  0000                     _TMR0ON	set	32431
   291  0000                     _TRISC3	set	31907
   292  0000                     _TRISC4	set	31908
   293  0000                     _nRBPU	set	32655
   294  00FE08                     STR_26:
   295  00FE08  52                 	db	82	;'R'
   296  00FE09  25                 	db	37
   297  00FE0A  64                 	db	100	;'d'
   298  00FE0B  20                 	db	32
   299  00FE0C  47                 	db	71	;'G'
   300  00FE0D  25                 	db	37
   301  00FE0E  64                 	db	100	;'d'
   302  00FE0F  20                 	db	32
   303  00FE10  42                 	db	66	;'B'
   304  00FE11  25                 	db	37
   305  00FE12  64                 	db	100	;'d'
   306  00FE13  20                 	db	32
   307  00FE14  20                 	db	32
   308  00FE15  20                 	db	32
   309  00FE16  20                 	db	32
   310  00FE17  20                 	db	32
   311  00FE18  20                 	db	32
   312  00FE19  20                 	db	32
   313  00FE1A  20                 	db	32
   314  00FE1B  20                 	db	32
   315  00FE1C  20                 	db	32
   316  00FE1D  20                 	db	32
   317  00FE1E  20                 	db	32
   318  00FE1F  20                 	db	32
   319  00FE20  20                 	db	32
   320  00FE21  20                 	db	32
   321  00FE22  20                 	db	32
   322  00FE23  00                 	db	0
   323  00FE24                     STR_25:
   324  00FE24  52                 	db	82	;'R'
   325  00FE25  75                 	db	117	;'u'
   326  00FE26  6E                 	db	110	;'n'
   327  00FE27  6E                 	db	110	;'n'
   328  00FE28  69                 	db	105	;'i'
   329  00FE29  6E                 	db	110	;'n'
   330  00FE2A  67                 	db	103	;'g'
   331  00FE2B  7E                 	db	126
   332  00FE2C  7E                 	db	126
   333  00FE2D  7E                 	db	126
   334  00FE2E  20                 	db	32
   335  00FE2F  20                 	db	32
   336  00FE30  20                 	db	32
   337  00FE31  20                 	db	32
   338  00FE32  20                 	db	32
   339  00FE33  20                 	db	32
   340  00FE34  20                 	db	32
   341  00FE35  20                 	db	32
   342  00FE36  20                 	db	32
   343  00FE37  20                 	db	32
   344  00FE38  20                 	db	32
   345  00FE39  20                 	db	32
   346  00FE3A  20                 	db	32
   347  00FE3B  20                 	db	32
   348  00FE3C  00                 	db	0
   349  00FE3D                     STR_2:
   350  00FE3D  47                 	db	71	;'G'
   351  00FE3E  25                 	db	37
   352  00FE3F  75                 	db	117	;'u'
   353  00FE40  20                 	db	32
   354  00FE41  42                 	db	66	;'B'
   355  00FE42  25                 	db	37
   356  00FE43  75                 	db	117	;'u'
   357  00FE44  20                 	db	32
   358  00FE45  20                 	db	32
   359  00FE46  20                 	db	32
   360  00FE47  20                 	db	32
   361  00FE48  20                 	db	32
   362  00FE49  20                 	db	32
   363  00FE4A  20                 	db	32
   364  00FE4B  20                 	db	32
   365  00FE4C  20                 	db	32
   366  00FE4D  20                 	db	32
   367  00FE4E  20                 	db	32
   368  00FE4F  20                 	db	32
   369  00FE50  20                 	db	32
   370  00FE51  20                 	db	32
   371  00FE52  20                 	db	32
   372  00FE53  20                 	db	32
   373  00FE54  00                 	db	0
   374  00FE55                     STR_1:
   375  00FE55  43                 	db	67	;'C'
   376  00FE56  25                 	db	37
   377  00FE57  75                 	db	117	;'u'
   378  00FE58  20                 	db	32
   379  00FE59  52                 	db	82	;'R'
   380  00FE5A  25                 	db	37
   381  00FE5B  75                 	db	117	;'u'
   382  00FE5C  20                 	db	32
   383  00FE5D  20                 	db	32
   384  00FE5E  20                 	db	32
   385  00FE5F  20                 	db	32
   386  00FE60  20                 	db	32
   387  00FE61  20                 	db	32
   388  00FE62  20                 	db	32
   389  00FE63  20                 	db	32
   390  00FE64  20                 	db	32
   391  00FE65  20                 	db	32
   392  00FE66  20                 	db	32
   393  00FE67  20                 	db	32
   394  00FE68  20                 	db	32
   395  00FE69  20                 	db	32
   396  00FE6A  20                 	db	32
   397  00FE6B  20                 	db	32
   398  00FE6C  00                 	db	0
   399  00FE6D                     STR_24:
   400  00FE6D  52                 	db	82	;'R'
   401  00FE6E  75                 	db	117	;'u'
   402  00FE6F  6E                 	db	110	;'n'
   403  00FE70  6E                 	db	110	;'n'
   404  00FE71  69                 	db	105	;'i'
   405  00FE72  6E                 	db	110	;'n'
   406  00FE73  67                 	db	103	;'g'
   407  00FE74  7E                 	db	126
   408  00FE75  7E                 	db	126
   409  00FE76  20                 	db	32
   410  00FE77  20                 	db	32
   411  00FE78  20                 	db	32
   412  00FE79  20                 	db	32
   413  00FE7A  20                 	db	32
   414  00FE7B  20                 	db	32
   415  00FE7C  20                 	db	32
   416  00FE7D  20                 	db	32
   417  00FE7E  20                 	db	32
   418  00FE7F  20                 	db	32
   419  00FE80  20                 	db	32
   420  00FE81  20                 	db	32
   421  00FE82  20                 	db	32
   422  00FE83  20                 	db	32
   423  00FE84  00                 	db	0
   424  00FE85                     STR_23:
   425  00FE85  52                 	db	82	;'R'
   426  00FE86  75                 	db	117	;'u'
   427  00FE87  6E                 	db	110	;'n'
   428  00FE88  6E                 	db	110	;'n'
   429  00FE89  69                 	db	105	;'i'
   430  00FE8A  6E                 	db	110	;'n'
   431  00FE8B  67                 	db	103	;'g'
   432  00FE8C  7E                 	db	126
   433  00FE8D  20                 	db	32
   434  00FE8E  20                 	db	32
   435  00FE8F  20                 	db	32
   436  00FE90  20                 	db	32
   437  00FE91  20                 	db	32
   438  00FE92  20                 	db	32
   439  00FE93  20                 	db	32
   440  00FE94  20                 	db	32
   441  00FE95  20                 	db	32
   442  00FE96  20                 	db	32
   443  00FE97  20                 	db	32
   444  00FE98  20                 	db	32
   445  00FE99  20                 	db	32
   446  00FE9A  20                 	db	32
   447  00FE9B  00                 	db	0
   448  00FE9C                     STR_21:
   449  00FE9C  54                 	db	84	;'T'
   450  00FE9D  6F                 	db	111	;'o'
   451  00FE9E  74                 	db	116	;'t'
   452  00FE9F  61                 	db	97	;'a'
   453  00FEA0  6C                 	db	108	;'l'
   454  00FEA1  20                 	db	32
   455  00FEA2  4F                 	db	79	;'O'
   456  00FEA3  70                 	db	112	;'p'
   457  00FEA4  65                 	db	101	;'e'
   458  00FEA5  72                 	db	114	;'r'
   459  00FEA6  61                 	db	97	;'a'
   460  00FEA7  74                 	db	116	;'t'
   461  00FEA8  69                 	db	105	;'i'
   462  00FEA9  6F                 	db	111	;'o'
   463  00FEAA  6E                 	db	110	;'n'
   464  00FEAB  20                 	db	32
   465  00FEAC  20                 	db	32
   466  00FEAD  20                 	db	32
   467  00FEAE  20                 	db	32
   468  00FEAF  20                 	db	32
   469  00FEB0  20                 	db	32
   470  00FEB1  20                 	db	32
   471  00FEB2  00                 	db	0
   472  00FEB3                     STR_8:
   473  00FEB3  44                 	db	68	;'D'
   474  00FEB4  61                 	db	97	;'a'
   475  00FEB5  74                 	db	116	;'t'
   476  00FEB6  65                 	db	101	;'e'
   477  00FEB7  3A                 	db	58	;':'
   478  00FEB8  20                 	db	32
   479  00FEB9  25                 	db	37
   480  00FEBA  30                 	db	48	;'0'
   481  00FEBB  32                 	db	50	;'2'
   482  00FEBC  78                 	db	120	;'x'
   483  00FEBD  2F                 	db	47
   484  00FEBE  25                 	db	37
   485  00FEBF  30                 	db	48	;'0'
   486  00FEC0  32                 	db	50	;'2'
   487  00FEC1  78                 	db	120	;'x'
   488  00FEC2  2F                 	db	47
   489  00FEC3  25                 	db	37
   490  00FEC4  30                 	db	48	;'0'
   491  00FEC5  32                 	db	50	;'2'
   492  00FEC6  78                 	db	120	;'x'
   493  00FEC7  20                 	db	32
   494  00FEC8  20                 	db	32
   495  00FEC9  00                 	db	0
   496  00FECA                     STR_9:
   497  00FECA  54                 	db	84	;'T'
   498  00FECB  69                 	db	105	;'i'
   499  00FECC  6D                 	db	109	;'m'
   500  00FECD  65                 	db	101	;'e'
   501  00FECE  3A                 	db	58	;':'
   502  00FECF  20                 	db	32
   503  00FED0  25                 	db	37
   504  00FED1  30                 	db	48	;'0'
   505  00FED2  32                 	db	50	;'2'
   506  00FED3  78                 	db	120	;'x'
   507  00FED4  3A                 	db	58	;':'
   508  00FED5  25                 	db	37
   509  00FED6  30                 	db	48	;'0'
   510  00FED7  32                 	db	50	;'2'
   511  00FED8  78                 	db	120	;'x'
   512  00FED9  3A                 	db	58	;':'
   513  00FEDA  25                 	db	37
   514  00FEDB  30                 	db	48	;'0'
   515  00FEDC  32                 	db	50	;'2'
   516  00FEDD  78                 	db	120	;'x'
   517  00FEDE  20                 	db	32
   518  00FEDF  20                 	db	32
   519  00FEE0  00                 	db	0
   520  00FEE1                     STR_22:
   521  00FEE1  54                 	db	84	;'T'
   522  00FEE2  69                 	db	105	;'i'
   523  00FEE3  6D                 	db	109	;'m'
   524  00FEE4  65                 	db	101	;'e'
   525  00FEE5  3A                 	db	58	;':'
   526  00FEE6  20                 	db	32
   527  00FEE7  25                 	db	37
   528  00FEE8  64                 	db	100	;'d'
   529  00FEE9  20                 	db	32
   530  00FEEA  73                 	db	115	;'s'
   531  00FEEB  20                 	db	32
   532  00FEEC  20                 	db	32
   533  00FEED  20                 	db	32
   534  00FEEE  20                 	db	32
   535  00FEEF  20                 	db	32
   536  00FEF0  20                 	db	32
   537  00FEF1  20                 	db	32
   538  00FEF2  00                 	db	0
   539  00FEF3                     STR_12:
   540  00FEF3  59                 	db	89	;'Y'
   541  00FEF4  4F                 	db	79	;'O'
   542  00FEF5  50                 	db	80	;'P'
   543  00FEF6  2B                 	db	43
   544  00FEF7  43                 	db	67	;'C'
   545  00FEF8  41                 	db	65	;'A'
   546  00FEF9  50                 	db	80	;'P'
   547  00FEFA  2B                 	db	43
   548  00FEFB  4C                 	db	76	;'L'
   549  00FEFC  42                 	db	66	;'B'
   550  00FEFD  4C                 	db	76	;'L'
   551  00FEFE  3A                 	db	58	;':'
   552  00FEFF  20                 	db	32
   553  00FF00  25                 	db	37
   554  00FF01  64                 	db	100	;'d'
   555  00FF02  20                 	db	32
   556  00FF03  20                 	db	32
   557  00FF04  00                 	db	0
   558  00FF05                     STR_14:
   559  00FF05  59                 	db	89	;'Y'
   560  00FF06  4F                 	db	79	;'O'
   561  00FF07  50                 	db	80	;'P'
   562  00FF08  2D                 	db	45
   563  00FF09  43                 	db	67	;'C'
   564  00FF0A  41                 	db	65	;'A'
   565  00FF0B  50                 	db	80	;'P'
   566  00FF0C  2B                 	db	43
   567  00FF0D  4C                 	db	76	;'L'
   568  00FF0E  42                 	db	66	;'B'
   569  00FF0F  4C                 	db	76	;'L'
   570  00FF10  3A                 	db	58	;':'
   571  00FF11  20                 	db	32
   572  00FF12  25                 	db	37
   573  00FF13  64                 	db	100	;'d'
   574  00FF14  20                 	db	32
   575  00FF15  20                 	db	32
   576  00FF16  00                 	db	0
   577  00FF17                     STR_13:
   578  00FF17  59                 	db	89	;'Y'
   579  00FF18  4F                 	db	79	;'O'
   580  00FF19  50                 	db	80	;'P'
   581  00FF1A  2B                 	db	43
   582  00FF1B  43                 	db	67	;'C'
   583  00FF1C  41                 	db	65	;'A'
   584  00FF1D  50                 	db	80	;'P'
   585  00FF1E  2D                 	db	45
   586  00FF1F  4C                 	db	76	;'L'
   587  00FF20  42                 	db	66	;'B'
   588  00FF21  4C                 	db	76	;'L'
   589  00FF22  3A                 	db	58	;':'
   590  00FF23  20                 	db	32
   591  00FF24  25                 	db	37
   592  00FF25  64                 	db	100	;'d'
   593  00FF26  20                 	db	32
   594  00FF27  20                 	db	32
   595  00FF28  00                 	db	0
   596  00FF29                     STR_15:
   597  00FF29  59                 	db	89	;'Y'
   598  00FF2A  4F                 	db	79	;'O'
   599  00FF2B  50                 	db	80	;'P'
   600  00FF2C  2D                 	db	45
   601  00FF2D  43                 	db	67	;'C'
   602  00FF2E  41                 	db	65	;'A'
   603  00FF2F  50                 	db	80	;'P'
   604  00FF30  2D                 	db	45
   605  00FF31  4C                 	db	76	;'L'
   606  00FF32  42                 	db	66	;'B'
   607  00FF33  4C                 	db	76	;'L'
   608  00FF34  3A                 	db	58	;':'
   609  00FF35  20                 	db	32
   610  00FF36  25                 	db	37
   611  00FF37  64                 	db	100	;'d'
   612  00FF38  20                 	db	32
   613  00FF39  20                 	db	32
   614  00FF3A  00                 	db	0
   615  00FF3B                     STR_16:
   616  00FF3B  45                 	db	69	;'E'
   617  00FF3C  53                 	db	83	;'S'
   618  00FF3D  4B                 	db	75	;'K'
   619  00FF3E  41                 	db	65	;'A'
   620  00FF3F  2B                 	db	43
   621  00FF40  43                 	db	67	;'C'
   622  00FF41  41                 	db	65	;'A'
   623  00FF42  50                 	db	80	;'P'
   624  00FF43  2B                 	db	43
   625  00FF44  4C                 	db	76	;'L'
   626  00FF45  42                 	db	66	;'B'
   627  00FF46  4C                 	db	76	;'L'
   628  00FF47  3A                 	db	58	;':'
   629  00FF48  20                 	db	32
   630  00FF49  25                 	db	37
   631  00FF4A  64                 	db	100	;'d'
   632  00FF4B  20                 	db	32
   633  00FF4C  00                 	db	0
   634  00FF4D                     STR_18:
   635  00FF4D  45                 	db	69	;'E'
   636  00FF4E  53                 	db	83	;'S'
   637  00FF4F  4B                 	db	75	;'K'
   638  00FF50  41                 	db	65	;'A'
   639  00FF51  2D                 	db	45
   640  00FF52  43                 	db	67	;'C'
   641  00FF53  41                 	db	65	;'A'
   642  00FF54  50                 	db	80	;'P'
   643  00FF55  2B                 	db	43
   644  00FF56  4C                 	db	76	;'L'
   645  00FF57  42                 	db	66	;'B'
   646  00FF58  4C                 	db	76	;'L'
   647  00FF59  3A                 	db	58	;':'
   648  00FF5A  20                 	db	32
   649  00FF5B  25                 	db	37
   650  00FF5C  64                 	db	100	;'d'
   651  00FF5D  20                 	db	32
   652  00FF5E  00                 	db	0
   653  00FF5F                     STR_17:
   654  00FF5F  45                 	db	69	;'E'
   655  00FF60  53                 	db	83	;'S'
   656  00FF61  4B                 	db	75	;'K'
   657  00FF62  41                 	db	65	;'A'
   658  00FF63  2B                 	db	43
   659  00FF64  43                 	db	67	;'C'
   660  00FF65  41                 	db	65	;'A'
   661  00FF66  50                 	db	80	;'P'
   662  00FF67  2D                 	db	45
   663  00FF68  4C                 	db	76	;'L'
   664  00FF69  42                 	db	66	;'B'
   665  00FF6A  4C                 	db	76	;'L'
   666  00FF6B  3A                 	db	58	;':'
   667  00FF6C  20                 	db	32
   668  00FF6D  25                 	db	37
   669  00FF6E  64                 	db	100	;'d'
   670  00FF6F  20                 	db	32
   671  00FF70  00                 	db	0
   672  00FF71                     STR_19:
   673  00FF71  45                 	db	69	;'E'
   674  00FF72  53                 	db	83	;'S'
   675  00FF73  4B                 	db	75	;'K'
   676  00FF74  41                 	db	65	;'A'
   677  00FF75  2D                 	db	45
   678  00FF76  43                 	db	67	;'C'
   679  00FF77  41                 	db	65	;'A'
   680  00FF78  50                 	db	80	;'P'
   681  00FF79  2D                 	db	45
   682  00FF7A  4C                 	db	76	;'L'
   683  00FF7B  42                 	db	66	;'B'
   684  00FF7C  4C                 	db	76	;'L'
   685  00FF7D  3A                 	db	58	;':'
   686  00FF7E  20                 	db	32
   687  00FF7F  25                 	db	37
   688  00FF80  64                 	db	100	;'d'
   689  00FF81  20                 	db	32
   690  00FF82  00                 	db	0
   691  00FF83                     STR_29:
   692  00FF83  30                 	db	48	;'0'
   693  00FF84  31                 	db	49	;'1'
   694  00FF85  32                 	db	50	;'2'
   695  00FF86  33                 	db	51	;'3'
   696  00FF87  34                 	db	52	;'4'
   697  00FF88  35                 	db	53	;'5'
   698  00FF89  36                 	db	54	;'6'
   699  00FF8A  37                 	db	55	;'7'
   700  00FF8B  38                 	db	56	;'8'
   701  00FF8C  39                 	db	57	;'9'
   702  00FF8D  61                 	db	97	;'a'
   703  00FF8E  62                 	db	98	;'b'
   704  00FF8F  63                 	db	99	;'c'
   705  00FF90  64                 	db	100	;'d'
   706  00FF91  65                 	db	101	;'e'
   707  00FF92  66                 	db	102	;'f'
   708  00FF93  00                 	db	0
   709  00FF94                     STR_11:
   710  00FF94  54                 	db	84	;'T'
   711  00FF95  6F                 	db	111	;'o'
   712  00FF96  74                 	db	116	;'t'
   713  00FF97  61                 	db	97	;'a'
   714  00FF98  6C                 	db	108	;'l'
   715  00FF99  3A                 	db	58	;':'
   716  00FF9A  20                 	db	32
   717  00FF9B  25                 	db	37
   718  00FF9C  64                 	db	100	;'d'
   719  00FF9D  20                 	db	32
   720  00FF9E  20                 	db	32
   721  00FF9F  20                 	db	32
   722  00FFA0  20                 	db	32
   723  00FFA1  20                 	db	32
   724  00FFA2  20                 	db	32
   725  00FFA3  20                 	db	32
   726  00FFA4  00                 	db	0
   727  00FFA5                     STR_10:
   728  00FFA5  42                 	db	66	;'B'
   729  00FFA6  6F                 	db	111	;'o'
   730  00FFA7  74                 	db	116	;'t'
   731  00FFA8  74                 	db	116	;'t'
   732  00FFA9  6C                 	db	108	;'l'
   733  00FFAA  65                 	db	101	;'e'
   734  00FFAB  20                 	db	32
   735  00FFAC  43                 	db	67	;'C'
   736  00FFAD  6F                 	db	111	;'o'
   737  00FFAE  75                 	db	117	;'u'
   738  00FFAF  6E                 	db	110	;'n'
   739  00FFB0  74                 	db	116	;'t'
   740  00FFB1  20                 	db	32
   741  00FFB2  20                 	db	32
   742  00FFB3  20                 	db	32
   743  00FFB4  20                 	db	32
   744  00FFB5  00                 	db	0
   745  00FFB6                     STR_27:
   746  00FFB6  4F                 	db	79	;'O'
   747  00FFB7  70                 	db	112	;'p'
   748  00FFB8  65                 	db	101	;'e'
   749  00FFB9  72                 	db	114	;'r'
   750  00FFBA  61                 	db	97	;'a'
   751  00FFBB  74                 	db	116	;'t'
   752  00FFBC  69                 	db	105	;'i'
   753  00FFBD  6F                 	db	111	;'o'
   754  00FFBE  6E                 	db	110	;'n'
   755  00FFBF  20                 	db	32
   756  00FFC0  44                 	db	68	;'D'
   757  00FFC1  6F                 	db	111	;'o'
   758  00FFC2  6E                 	db	110	;'n'
   759  00FFC3  65                 	db	101	;'e'
   760  00FFC4  21                 	db	33
   761  00FFC5  00                 	db	0
   762  00FFC6                     STR_28:
   763  00FFC6  45                 	db	69	;'E'
   764  00FFC7  4D                 	db	77	;'M'
   765  00FFC8  45                 	db	69	;'E'
   766  00FFC9  52                 	db	82	;'R'
   767  00FFCA  47                 	db	71	;'G'
   768  00FFCB  45                 	db	69	;'E'
   769  00FFCC  4E                 	db	78	;'N'
   770  00FFCD  43                 	db	67	;'C'
   771  00FFCE  59                 	db	89	;'Y'
   772  00FFCF  20                 	db	32
   773  00FFD0  53                 	db	83	;'S'
   774  00FFD1  54                 	db	84	;'T'
   775  00FFD2  4F                 	db	79	;'O'
   776  00FFD3  50                 	db	80	;'P'
   777  00FFD4  00                 	db	0
   778  00FFD5                     STR_6:
   779  00FFD5  62                 	db	98	;'b'
   780  00FFD6  61                 	db	97	;'a'
   781  00FFD7  64                 	db	100	;'d'
   782  00FFD8  20                 	db	32
   783  00FFD9  69                 	db	105	;'i'
   784  00FFDA  6E                 	db	110	;'n'
   785  00FFDB  74                 	db	116	;'t'
   786  00FFDC  65                 	db	101	;'e'
   787  00FFDD  72                 	db	114	;'r'
   788  00FFDE  72                 	db	114	;'r'
   789  00FFDF  75                 	db	117	;'u'
   790  00FFE0  70                 	db	112	;'p'
   791  00FFE1  74                 	db	116	;'t'
   792  00FFE2  00                 	db	0
   793  00FFE3                     STR_7:
   794  00FFE3  50                 	db	80	;'P'
   795  00FFE4  4F                 	db	79	;'O'
   796  00FFE5  52                 	db	82	;'R'
   797  00FFE6  54                 	db	84	;'T'
   798  00FFE7  42                 	db	66	;'B'
   799  00FFE8  3A                 	db	58	;':'
   800  00FFE9  20                 	db	32
   801  00FFEA  25                 	db	37
   802  00FFEB  64                 	db	100	;'d'
   803  00FFEC  00                 	db	0
   804  00FFED                     STR_20:
   805  00FFED  45                 	db	69	;'E'
   806  00FFEE  52                 	db	82	;'R'
   807  00FFEF  52                 	db	82	;'R'
   808  00FFF0  4F                 	db	79	;'O'
   809  00FFF1  52                 	db	82	;'R'
   810  00FFF2  3A                 	db	58	;':'
   811  00FFF3  20                 	db	32
   812  00FFF4  25                 	db	37
   813  00FFF5  64                 	db	100	;'d'
   814  00FFF6  00                 	db	0
   815  00FFF7                     STR_5:
   816  00FFF7  49                 	db	73	;'I'
   817  00FFF8  4E                 	db	78	;'N'
   818  00FFF9  54                 	db	84	;'T'
   819  00FFFA  32                 	db	50	;'2'
   820  00FFFB  49                 	db	73	;'I'
   821  00FFFC  46                 	db	70	;'F'
   822  00FFFD  00                 	db	0
   823  0000                     
   824                           ; #config settings
   825  00FFFE  00                 	db	0	; dummy byte at the end
   826  0000                     
   827                           	psect	cinit
   828  00286A                     __pcinit:
   829                           	opt stack 0
   830  00286A                     start_initialization:
   831                           	opt stack 0
   832  00286A                     __initialization:
   833                           	opt stack 0
   834                           
   835                           ; Initialize objects allocated to BANK0 (2 bytes)
   836                           ; load TBLPTR registers with __pidataBANK0
   837  00286A  0E52               	movlw	low __pidataBANK0
   838  00286C  6EF6               	movwf	tblptrl,c
   839  00286E  0E2B               	movlw	high __pidataBANK0
   840  002870  6EF7               	movwf	tblptrh,c
   841  002872  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   842  002874  6EF8               	movwf	tblptru,c
   843  002876  0009               	tblrd		*+	;fetch initializer
   844  002878  CFF5 F0EE          	movff	tablat,__pdataBANK0
   845  00287C  0009               	tblrd		*+	;fetch initializer
   846  00287E  CFF5 F0EF          	movff	tablat,__pdataBANK0+1
   847                           
   848                           ; Clear objects allocated to BANK0 (68 bytes)
   849  002882  EE00  F080         	lfsr	0,__pbssBANK0
   850  002886  0E44               	movlw	68
   851  002888                     clear_0:
   852  002888  6AEE               	clrf	postinc0,c
   853  00288A  06E8               	decf	wreg,f,c
   854  00288C  E1FD               	bnz	clear_0
   855                           
   856                           ; Clear objects allocated to COMRAM (8 bytes)
   857  00288E  EE00  F076         	lfsr	0,__pbssCOMRAM
   858  002892  0E08               	movlw	8
   859  002894                     clear_1:
   860  002894  6AEE               	clrf	postinc0,c
   861  002896  06E8               	decf	wreg,f,c
   862  002898  E1FD               	bnz	clear_1
   863  00289A                     end_of_initialization:
   864                           	opt stack 0
   865  00289A                     __end_of__initialization:
   866                           	opt stack 0
   867  00289A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   868  00289C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   869  00289E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   870  0028A0  6EF8               	movwf	tblptru,c
   871  0028A2  0100               	movlb	0
   872  0028A4  EF06  F00D         	goto	_main	;jump to C main() function
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           
   880                           	psect	bssCOMRAM
   881  000076                     __pbssCOMRAM:
   882                           	opt stack 0
   883  000076                     _end_time:
   884                           	opt stack 0
   885  000076                     	ds	2
   886  000078                     _etime:
   887                           	opt stack 0
   888  000078                     	ds	2
   889  00007A                     _start_time:
   890                           	opt stack 0
   891  00007A                     	ds	2
   892  00007C                     _stime:
   893                           	opt stack 0
   894  00007C                     	ds	2
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           
   902                           	psect	bssBANK0
   903  000080                     __pbssBANK0:
   904                           	opt stack 0
   905  000080                     _bottlequeue:
   906                           	opt stack 0
   907  000080                     	ds	22
   908  000096                     _color:
   909                           	opt stack 0
   910  000096                     	ds	8
   911  00009E                     _time:
   912                           	opt stack 0
   913  00009E                     	ds	7
   914  0000A5                     _bottlequeue_head:
   915                           	opt stack 0
   916  0000A5                     	ds	2
   917  0000A7                     _bottlequeue_tail:
   918                           	opt stack 0
   919  0000A7                     	ds	2
   920  0000A9                     _errno:
   921                           	opt stack 0
   922  0000A9                     	ds	2
   923  0000AB                     _eska_count:
   924                           	opt stack 0
   925  0000AB                     	ds	2
   926  0000AD                     _eskacap_count:
   927                           	opt stack 0
   928  0000AD                     	ds	2
   929  0000AF                     _eskacaplbl_count:
   930                           	opt stack 0
   931  0000AF                     	ds	2
   932  0000B1                     _eskalbl_count:
   933                           	opt stack 0
   934  0000B1                     	ds	2
   935  0000B3                     _nodedata:
   936                           	opt stack 0
   937  0000B3                     	ds	2
   938  0000B5                     _operation_disp:
   939                           	opt stack 0
   940  0000B5                     	ds	2
   941  0000B7                     _operation_time:
   942                           	opt stack 0
   943  0000B7                     	ds	2
   944  0000B9                     _total_bottle_count:
   945                           	opt stack 0
   946  0000B9                     	ds	2
   947  0000BB                     _yop_count:
   948                           	opt stack 0
   949  0000BB                     	ds	2
   950  0000BD                     _yopcap_count:
   951                           	opt stack 0
   952  0000BD                     	ds	2
   953  0000BF                     _yopcaplbl_count:
   954                           	opt stack 0
   955  0000BF                     	ds	2
   956  0000C1                     _yoplbl_count:
   957                           	opt stack 0
   958  0000C1                     	ds	2
   959  0000C3                     _curr_state:
   960                           	opt stack 0
   961  0000C3                     	ds	1
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           postinc0	equ	0xFEE
   967                           wreg	equ	0xFE8
   968                           
   969                           	psect	dataBANK0
   970  0000EE                     __pdataBANK0:
   971                           	opt stack 0
   972  0000EE                     _bottle_count_disp:
   973                           	opt stack 0
   974  0000EE                     	ds	2
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           
   982                           	psect	cstackBANK1
   983  000100                     __pcstackBANK1:
   984                           	opt stack 0
   985  000100                     printf@idx:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x0
   989  000100                     	ds	1
   990  000101                     printf@ap:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x1
   994  000101                     	ds	2
   995  000103                     printf@prec:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x3
   999  000103                     	ds	1
  1000  000104                     printf@val:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x4
  1004  000104                     	ds	2
  1005  000106                     printf@flag:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x6
  1009  000106                     	ds	1
  1010  000107                     printf@width:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x7
  1014  000107                     	ds	2
  1015  000109                     printf@c:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x9
  1019  000109                     	ds	1
  1020  00010A                     ??_main:
  1021                           
  1022                           ; 1 bytes @ 0xA
  1023  00010A                     	ds	2
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           
  1031                           	psect	cstackBANK0
  1032  0000C4                     __pcstackBANK0:
  1033                           	opt stack 0
  1034  0000C4                     ??_isr:
  1035                           
  1036                           ; 1 bytes @ 0x0
  1037  0000C4                     	ds	16
  1038  0000D4                     ??_isdigit:
  1039  0000D4                     ??_I2C_Master_Wait:
  1040  0000D4                     ?___wmul:
  1041                           	opt stack 0
  1042  0000D4                     ?___awmod:
  1043                           	opt stack 0
  1044  0000D4                     ?___lwdiv:
  1045                           	opt stack 0
  1046  0000D4                     ?___lldiv:
  1047                           	opt stack 0
  1048  0000D4                     lcdNibble@temp:
  1049                           	opt stack 0
  1050  0000D4                     ___wmul@multiplier:
  1051                           	opt stack 0
  1052  0000D4                     ___awmod@dividend:
  1053                           	opt stack 0
  1054  0000D4                     ___lwdiv@dividend:
  1055                           	opt stack 0
  1056  0000D4                     ___lldiv@dividend:
  1057                           	opt stack 0
  1058                           
  1059                           ; 4 bytes @ 0x10
  1060  0000D4                     	ds	1
  1061  0000D5                     I2C_Master_Read@a:
  1062                           	opt stack 0
  1063  0000D5                     lcdNibble@data:
  1064                           	opt stack 0
  1065  0000D5                     _isdigit$819:
  1066                           	opt stack 0
  1067  0000D5                     I2C_Master_Write@d:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x11
  1071  0000D5                     	ds	1
  1072  0000D6                     I2C_Master_Read@temp:
  1073                           	opt stack 0
  1074  0000D6                     lcdInst@data:
  1075                           	opt stack 0
  1076  0000D6                     putch@data:
  1077                           	opt stack 0
  1078  0000D6                     isdigit@c:
  1079                           	opt stack 0
  1080  0000D6                     ___wmul@multiplicand:
  1081                           	opt stack 0
  1082  0000D6                     ___awmod@divisor:
  1083                           	opt stack 0
  1084  0000D6                     ___lwdiv@divisor:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x12
  1088  0000D6                     	ds	1
  1089  0000D7                     ??_read_colorsensor:
  1090  0000D7                     ??_I2C_ColorSens_Init:
  1091  0000D7                     ??_initLCD:
  1092                           
  1093                           ; 1 bytes @ 0x13
  1094  0000D7                     	ds	1
  1095  0000D8                     ___awmod@counter:
  1096                           	opt stack 0
  1097  0000D8                     ___lwdiv@counter:
  1098                           	opt stack 0
  1099  0000D8                     ___wmul@product:
  1100                           	opt stack 0
  1101  0000D8                     ___lldiv@divisor:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x14
  1105  0000D8                     	ds	1
  1106  0000D9                     ___awmod@sign:
  1107                           	opt stack 0
  1108  0000D9                     ___lwdiv@quotient:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x15
  1112  0000D9                     	ds	2
  1113  0000DB                     ?___lwmod:
  1114                           	opt stack 0
  1115  0000DB                     ___lwmod@dividend:
  1116                           	opt stack 0
  1117  0000DB                     read_colorsensor@color_low:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0x17
  1121  0000DB                     	ds	1
  1122  0000DC                     ___lldiv@quotient:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x18
  1126  0000DC                     	ds	1
  1127  0000DD                     ___lwmod@divisor:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x19
  1131  0000DD                     	ds	2
  1132  0000DF                     ___lwmod@counter:
  1133                           	opt stack 0
  1134  0000DF                     read_colorsensor@color_high:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x1B
  1138  0000DF                     	ds	1
  1139  0000E0                     ?_printf:
  1140                           	opt stack 0
  1141  0000E0                     ___lldiv@counter:
  1142                           	opt stack 0
  1143  0000E0                     printf@f:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x1C
  1147  0000E0                     	ds	1
  1148  0000E1                     I2C_Master_Init@c:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x1D
  1152  0000E1                     	ds	2
  1153  0000E3                     read_colorsensor@i:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x1F
  1157  0000E3                     	ds	2
  1158  0000E5                     ??_I2C_Master_Init:
  1159                           
  1160                           ; 1 bytes @ 0x21
  1161  0000E5                     	ds	3
  1162  0000E8                     ??_printf:
  1163                           
  1164                           ; 1 bytes @ 0x24
  1165  0000E8                     	ds	4
  1166  0000EC                     ??_operation:
  1167  0000EC                     date_time@i:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x28
  1171  0000EC                     	ds	2
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           postinc0	equ	0xFEE
  1177                           wreg	equ	0xFE8
  1178                           
  1179                           	psect	cstackCOMRAM
  1180  000001                     __pcstackCOMRAM:
  1181                           	opt stack 0
  1182  000001                     ??i2_I2C_Master_Wait:
  1183  000001                     ??i2_isdigit:
  1184  000001                     ?___awdiv:
  1185                           	opt stack 0
  1186  000001                     ?i2___wmul:
  1187                           	opt stack 0
  1188  000001                     ?i2___lwdiv:
  1189                           	opt stack 0
  1190  000001                     ?___ftpack:
  1191                           	opt stack 0
  1192  000001                     ?_frexp:
  1193                           	opt stack 0
  1194  000001                     ?___ftneg:
  1195                           	opt stack 0
  1196  000001                     i2lcdNibble@temp:
  1197                           	opt stack 0
  1198  000001                     servo_rotate0@degree:
  1199                           	opt stack 0
  1200  000001                     ___awdiv@dividend:
  1201                           	opt stack 0
  1202  000001                     i2___wmul@multiplier:
  1203                           	opt stack 0
  1204  000001                     i2___lwdiv@dividend:
  1205                           	opt stack 0
  1206  000001                     ___ftpack@arg:
  1207                           	opt stack 0
  1208  000001                     ___ftge@ff1:
  1209                           	opt stack 0
  1210  000001                     ___ftneg@f1:
  1211                           	opt stack 0
  1212  000001                     frexp@value:
  1213                           	opt stack 0
  1214                           
  1215                           ; 3 bytes @ 0x0
  1216  000001                     	ds	1
  1217  000002                     i2I2C_Master_Read@a:
  1218                           	opt stack 0
  1219  000002                     i2lcdNibble@data:
  1220                           	opt stack 0
  1221  000002                     i2_isdigit$819:
  1222                           	opt stack 0
  1223  000002                     i2I2C_Master_Write@d:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x1
  1227  000002                     	ds	1
  1228  000003                     ??_servo_rotate0:
  1229  000003                     i2I2C_Master_Read@temp:
  1230                           	opt stack 0
  1231  000003                     i2lcdInst@data:
  1232                           	opt stack 0
  1233  000003                     i2putch@data:
  1234                           	opt stack 0
  1235  000003                     i2isdigit@c:
  1236                           	opt stack 0
  1237  000003                     ___awdiv@divisor:
  1238                           	opt stack 0
  1239  000003                     i2___wmul@multiplicand:
  1240                           	opt stack 0
  1241  000003                     i2___lwdiv@divisor:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x2
  1245  000003                     	ds	1
  1246  000004                     ??i2_I2C_ColorSens_Init:
  1247  000004                     ??i2_read_colorsensor:
  1248  000004                     read_time@i:
  1249                           	opt stack 0
  1250  000004                     ___ftpack@exp:
  1251                           	opt stack 0
  1252  000004                     frexp@eptr:
  1253                           	opt stack 0
  1254  000004                     ___ftge@ff2:
  1255                           	opt stack 0
  1256                           
  1257                           ; 3 bytes @ 0x3
  1258  000004                     	ds	1
  1259  000005                     ___awdiv@counter:
  1260                           	opt stack 0
  1261  000005                     ___ftpack@sign:
  1262                           	opt stack 0
  1263  000005                     servo_rotate0@duty:
  1264                           	opt stack 0
  1265  000005                     i2___wmul@product:
  1266                           	opt stack 0
  1267  000005                     i2___lwdiv@quotient:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x4
  1271  000005                     	ds	1
  1272  000006                     ??___ftpack:
  1273  000006                     ??_frexp:
  1274  000006                     ___awdiv@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x5
  1278  000006                     	ds	1
  1279  000007                     ??___ftge:
  1280  000007                     i2___lwdiv@counter:
  1281                           	opt stack 0
  1282  000007                     servo_rotate0@i:
  1283                           	opt stack 0
  1284  000007                     ___awdiv@quotient:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x6
  1288  000007                     	ds	1
  1289  000008                     ?i2___lwmod:
  1290                           	opt stack 0
  1291  000008                     i2___lwmod@dividend:
  1292                           	opt stack 0
  1293  000008                     i2read_colorsensor@color_low:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x7
  1297  000008                     	ds	1
  1298  000009                     ?___ftdiv:
  1299                           	opt stack 0
  1300  000009                     ?___awtoft:
  1301                           	opt stack 0
  1302  000009                     ?___lltoft:
  1303                           	opt stack 0
  1304  000009                     servo_rotate0@j:
  1305                           	opt stack 0
  1306  000009                     ___awtoft@c:
  1307                           	opt stack 0
  1308  000009                     ___ftdiv@f1:
  1309                           	opt stack 0
  1310  000009                     ___lltoft@c:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x8
  1314  000009                     	ds	1
  1315  00000A                     i2___lwmod@divisor:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x9
  1319  00000A                     	ds	2
  1320  00000C                     ___awtoft@sign:
  1321                           	opt stack 0
  1322  00000C                     i2___lwmod@counter:
  1323                           	opt stack 0
  1324  00000C                     ___ftdiv@f2:
  1325                           	opt stack 0
  1326  00000C                     i2read_colorsensor@color_high:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0xB
  1330  00000C                     	ds	1
  1331  00000D                     ??___lltoft:
  1332  00000D                     ?i2_printf:
  1333                           	opt stack 0
  1334  00000D                     ?___ftmul:
  1335                           	opt stack 0
  1336  00000D                     i2printf@f:
  1337                           	opt stack 0
  1338  00000D                     ___ftmul@f1:
  1339                           	opt stack 0
  1340                           
  1341                           ; 3 bytes @ 0xC
  1342  00000D                     	ds	2
  1343  00000F                     ??___ftdiv:
  1344                           
  1345                           ; 1 bytes @ 0xE
  1346  00000F                     	ds	1
  1347  000010                     i2read_colorsensor@i:
  1348                           	opt stack 0
  1349  000010                     ___ftmul@f2:
  1350                           	opt stack 0
  1351                           
  1352                           ; 3 bytes @ 0xF
  1353  000010                     	ds	1
  1354  000011                     ___lltoft@exp:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x10
  1358  000011                     	ds	1
  1359  000012                     ___ftdiv@cntr:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x11
  1363  000012                     	ds	1
  1364  000013                     ??___ftmul:
  1365  000013                     ??i2_printf:
  1366  000013                     ___ftdiv@f3:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x12
  1370  000013                     	ds	3
  1371  000016                     ___ftdiv@exp:
  1372                           	opt stack 0
  1373  000016                     ___ftmul@exp:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x15
  1377  000016                     	ds	1
  1378  000017                     ___ftdiv@sign:
  1379                           	opt stack 0
  1380  000017                     i2printf@idx:
  1381                           	opt stack 0
  1382  000017                     ___ftmul@f3_as_product:
  1383                           	opt stack 0
  1384                           
  1385                           ; 3 bytes @ 0x16
  1386  000017                     	ds	1
  1387  000018                     i2printf@ap:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x17
  1391  000018                     	ds	2
  1392  00001A                     ___ftmul@cntr:
  1393                           	opt stack 0
  1394  00001A                     i2printf@prec:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x19
  1398  00001A                     	ds	1
  1399  00001B                     ___ftmul@sign:
  1400                           	opt stack 0
  1401  00001B                     i2printf@val:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x1A
  1405  00001B                     	ds	1
  1406  00001C                     ?___ftadd:
  1407                           	opt stack 0
  1408  00001C                     ___ftadd@f1:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x1B
  1412  00001C                     	ds	1
  1413  00001D                     i2printf@flag:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x1C
  1417  00001D                     	ds	1
  1418  00001E                     i2printf@width:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x1D
  1422  00001E                     	ds	1
  1423  00001F                     ___ftadd@f2:
  1424                           	opt stack 0
  1425                           
  1426                           ; 3 bytes @ 0x1E
  1427  00001F                     	ds	1
  1428  000020                     i2printf@c:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x1F
  1432  000020                     	ds	2
  1433  000022                     ??___ftadd:
  1434                           
  1435                           ; 1 bytes @ 0x21
  1436  000022                     	ds	3
  1437  000025                     ___ftadd@sign:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x24
  1441  000025                     	ds	1
  1442  000026                     ___ftadd@exp2:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x25
  1446  000026                     	ds	1
  1447  000027                     ___ftadd@exp1:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x26
  1451  000027                     	ds	1
  1452  000028                     ?___ftsub:
  1453                           	opt stack 0
  1454  000028                     ?_eval_poly:
  1455                           	opt stack 0
  1456  000028                     ?___fttol:
  1457                           	opt stack 0
  1458  000028                     ___ftsub@f1:
  1459                           	opt stack 0
  1460  000028                     ___fttol@f1:
  1461                           	opt stack 0
  1462  000028                     eval_poly@x:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x27
  1466  000028                     	ds	3
  1467  00002B                     eval_poly@d:
  1468                           	opt stack 0
  1469  00002B                     ___ftsub@f2:
  1470                           	opt stack 0
  1471                           
  1472                           ; 3 bytes @ 0x2A
  1473  00002B                     	ds	1
  1474  00002C                     ??___fttol:
  1475                           
  1476                           ; 1 bytes @ 0x2B
  1477  00002C                     	ds	1
  1478  00002D                     eval_poly@n:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x2C
  1482  00002D                     	ds	1
  1483  00002E                     
  1484                           ; 1 bytes @ 0x2D
  1485  00002E                     	ds	1
  1486  00002F                     ??_eval_poly:
  1487                           
  1488                           ; 1 bytes @ 0x2E
  1489  00002F                     	ds	2
  1490  000031                     ___fttol@sign1:
  1491                           	opt stack 0
  1492  000031                     eval_poly@res:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0x30
  1496  000031                     	ds	1
  1497  000032                     ___fttol@lval:
  1498                           	opt stack 0
  1499                           
  1500                           ; 4 bytes @ 0x31
  1501  000032                     	ds	2
  1502  000034                     ?_log:
  1503                           	opt stack 0
  1504  000034                     ?_ldexp:
  1505                           	opt stack 0
  1506  000034                     ldexp@value:
  1507                           	opt stack 0
  1508  000034                     log@x:
  1509                           	opt stack 0
  1510                           
  1511                           ; 3 bytes @ 0x33
  1512  000034                     	ds	2
  1513  000036                     ___fttol@exp1:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x35
  1517  000036                     	ds	1
  1518  000037                     ?___altoft:
  1519                           	opt stack 0
  1520  000037                     ldexp@newexp:
  1521                           	opt stack 0
  1522  000037                     log@exponent:
  1523                           	opt stack 0
  1524  000037                     ___altoft@c:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x36
  1528  000037                     	ds	2
  1529  000039                     ??_ldexp:
  1530                           
  1531                           ; 1 bytes @ 0x38
  1532  000039                     	ds	2
  1533  00003B                     ??___altoft:
  1534                           
  1535                           ; 1 bytes @ 0x3A
  1536  00003B                     	ds	4
  1537  00003F                     ___altoft@exp:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3E
  1541  00003F                     	ds	1
  1542  000040                     ___altoft@sign:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x3F
  1546  000040                     	ds	1
  1547  000041                     ?_floor:
  1548                           	opt stack 0
  1549  000041                     floor@x:
  1550                           	opt stack 0
  1551                           
  1552                           ; 3 bytes @ 0x40
  1553  000041                     	ds	3
  1554  000044                     floor@i:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x43
  1558  000044                     	ds	3
  1559  000047                     floor@expon:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x46
  1563  000047                     	ds	2
  1564  000049                     ?_exp:
  1565                           	opt stack 0
  1566  000049                     exp@x:
  1567                           	opt stack 0
  1568                           
  1569                           ; 3 bytes @ 0x48
  1570  000049                     	ds	3
  1571  00004C                     _exp$1267:
  1572                           	opt stack 0
  1573                           
  1574                           ; 3 bytes @ 0x4B
  1575  00004C                     	ds	3
  1576  00004F                     exp@exponent:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x4E
  1580  00004F                     	ds	2
  1581  000051                     exp@sign:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x50
  1585  000051                     	ds	1
  1586  000052                     ?_pow:
  1587                           	opt stack 0
  1588  000052                     pow@x:
  1589                           	opt stack 0
  1590                           
  1591                           ; 3 bytes @ 0x51
  1592  000052                     	ds	3
  1593  000055                     pow@y:
  1594                           	opt stack 0
  1595                           
  1596                           ; 3 bytes @ 0x54
  1597  000055                     	ds	3
  1598  000058                     _pow$1265:
  1599                           	opt stack 0
  1600                           
  1601                           ; 3 bytes @ 0x57
  1602  000058                     	ds	3
  1603  00005B                     _pow$1266:
  1604                           	opt stack 0
  1605                           
  1606                           ; 3 bytes @ 0x5A
  1607  00005B                     	ds	3
  1608  00005E                     pow@sign:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x5D
  1612  00005E                     	ds	1
  1613  00005F                     pow@yi:
  1614                           	opt stack 0
  1615                           
  1616                           ; 4 bytes @ 0x5E
  1617  00005F                     	ds	4
  1618  000063                     ?_dec_to_hex:
  1619                           	opt stack 0
  1620  000063                     dec_to_hex@num:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x62
  1624  000063                     	ds	2
  1625  000065                     _dec_to_hex$1263:
  1626                           	opt stack 0
  1627                           
  1628                           ; 3 bytes @ 0x64
  1629  000065                     	ds	3
  1630  000068                     _dec_to_hex$1264:
  1631                           	opt stack 0
  1632                           
  1633                           ; 3 bytes @ 0x67
  1634  000068                     	ds	3
  1635  00006B                     dec_to_hex@temp:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x6A
  1639  00006B                     	ds	2
  1640  00006D                     dec_to_hex@i:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x6C
  1644  00006D                     	ds	2
  1645  00006F                     dec_to_hex@hexnum:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x6E
  1649  00006F                     	ds	2
  1650  000071                     dec_to_hex@quotient:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x70
  1654  000071                     	ds	2
  1655  000073                     isr@i:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0x72
  1659  000073                     	ds	1
  1660  000074                     _isr$1362:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x73
  1664  000074                     	ds	2
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           postinc0	equ	0xFEE
  1670                           wreg	equ	0xFE8
  1671                           
  1672 ;;
  1673 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1674 ;;
  1675 ;; *************** function _main *****************
  1676 ;; Defined at:
  1677 ;;		line 87 in file "main.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;Total ram usage:        2 bytes
  1696 ;; Hardware stack levels required when called:   11
  1697 ;; This function calls:
  1698 ;;		_I2C_ColorSens_Init
  1699 ;;		_I2C_Master_Init
  1700 ;;		_bottle_count
  1701 ;;		_bottle_time
  1702 ;;		_date_time
  1703 ;;		_emergencystop
  1704 ;;		_initLCD
  1705 ;;		_operation
  1706 ;;		_operationend
  1707 ;;		_standby
  1708 ;; This function is called by:
  1709 ;;		Startup code after reset
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text0
  1714  001A0C                     __ptext0:
  1715                           	opt stack 0
  1716  001A0C                     _main:
  1717                           	opt stack 20
  1718                           
  1719                           ;main.c: 94: TRISA = 0b11111011;
  1720                           
  1721                           ;incstack = 0
  1722  001A0C  0EFB               	movlw	251
  1723  001A0E  6E92               	movwf	3986,c	;volatile
  1724                           
  1725                           ;main.c: 95: TRISB = 0xFF;
  1726  001A10  6893               	setf	3987,c	;volatile
  1727                           
  1728                           ;main.c: 96: TRISC = 0x00;
  1729  001A12  0E00               	movlw	0
  1730  001A14  6E94               	movwf	3988,c	;volatile
  1731                           
  1732                           ;main.c: 97: TRISD = 0x00;
  1733  001A16  0E00               	movlw	0
  1734  001A18  6E95               	movwf	3989,c	;volatile
  1735                           
  1736                           ;main.c: 98: TRISE = 0x00;
  1737  001A1A  0E00               	movlw	0
  1738  001A1C  6E96               	movwf	3990,c	;volatile
  1739                           
  1740                           ;main.c: 100: LATA = 0x00;
  1741  001A1E  0E00               	movlw	0
  1742  001A20  6E89               	movwf	3977,c	;volatile
  1743                           
  1744                           ;main.c: 101: LATB = 0x00;
  1745  001A22  0E00               	movlw	0
  1746  001A24  6E8A               	movwf	3978,c	;volatile
  1747                           
  1748                           ;main.c: 102: LATC = 0x00;
  1749  001A26  0E00               	movlw	0
  1750  001A28  6E8B               	movwf	3979,c	;volatile
  1751                           
  1752                           ;main.c: 103: LATD = 0x00;
  1753  001A2A  0E00               	movlw	0
  1754  001A2C  6E8C               	movwf	3980,c	;volatile
  1755                           
  1756                           ;main.c: 104: LATE = 0x00;
  1757  001A2E  0E00               	movlw	0
  1758  001A30  6E8D               	movwf	3981,c	;volatile
  1759                           
  1760                           ;main.c: 106: ADCON0 = 0x00;
  1761  001A32  0E00               	movlw	0
  1762  001A34  6EC2               	movwf	4034,c	;volatile
  1763                           
  1764                           ;main.c: 107: ADCON1 = 0xFF;
  1765  001A36  68C1               	setf	4033,c	;volatile
  1766                           
  1767                           ;main.c: 110: GIE = 1;
  1768  001A38  8EF2               	bsf	intcon,7,c	;volatile
  1769                           
  1770                           ;main.c: 111: INT1IE = 1;
  1771  001A3A  86F0               	bsf	intcon3,3,c	;volatile
  1772                           
  1773                           ;main.c: 112: INT0IE = 0;
  1774  001A3C  98F2               	bcf	intcon,4,c	;volatile
  1775                           
  1776                           ;main.c: 113: INTEDG2 = 1;
  1777  001A3E  88F1               	bsf	intcon2,4,c	;volatile
  1778                           
  1779                           ;main.c: 114: INT2IE = 1;
  1780  001A40  88F0               	bsf	intcon3,4,c	;volatile
  1781                           
  1782                           ;main.c: 116: nRBPU = 0;
  1783  001A42  9EF1               	bcf	intcon2,7,c	;volatile
  1784                           
  1785                           ;main.c: 118: initLCD();
  1786  001A44  ECA5  F013         	call	_initLCD	;wreg free
  1787                           
  1788                           ;main.c: 119: I2C_Master_Init(10000);
  1789  001A48  0E10               	movlw	16
  1790  001A4A  0100               	movlb	0	; () banked
  1791  001A4C  6FE1               	movwf	I2C_Master_Init@c& (0+255),b
  1792  001A4E  0E27               	movlw	39
  1793  001A50  6FE2               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1794  001A52  0E00               	movlw	0
  1795  001A54  6FE3               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1796  001A56  0E00               	movlw	0
  1797  001A58  6FE4               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1798  001A5A  EC1E  F013         	call	_I2C_Master_Init	;wreg free
  1799                           
  1800                           ;main.c: 120: I2C_ColorSens_Init();
  1801  001A5E  ECD3  F008         	call	_I2C_ColorSens_Init	;wreg free
  1802                           
  1803                           ;main.c: 123: TMR0 = 0;
  1804  001A62  0E00               	movlw	0
  1805  001A64  6ED7               	movwf	4055,c	;volatile
  1806  001A66  0E00               	movlw	0
  1807  001A68  6ED6               	movwf	4054,c	;volatile
  1808                           
  1809                           ;main.c: 124: T08BIT = 0;
  1810  001A6A  9CD5               	bcf	4053,6,c	;volatile
  1811                           
  1812                           ;main.c: 125: T0CS = 0;
  1813  001A6C  9AD5               	bcf	4053,5,c	;volatile
  1814                           
  1815                           ;main.c: 126: PSA = 0;
  1816  001A6E  96D5               	bcf	4053,3,c	;volatile
  1817                           
  1818                           ;main.c: 127: T0PS2 = 1;
  1819  001A70  84D5               	bsf	4053,2,c	;volatile
  1820                           
  1821                           ;main.c: 128: T0PS1 = 1;
  1822  001A72  82D5               	bsf	4053,1,c	;volatile
  1823                           
  1824                           ;main.c: 129: T0PS0 = 1;
  1825  001A74  80D5               	bsf	4053,0,c	;volatile
  1826                           
  1827                           ;main.c: 133: curr_state = STANDBY;
  1828  001A76  0E00               	movlw	0
  1829  001A78  0100               	movlb	0	; () banked
  1830  001A7A  6FC3               	movwf	_curr_state& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 136: switch(curr_state){
  1834                           
  1835                           ;main.c: 135: while(1){
  1836  001A7C  D015               	goto	l5162
  1837  001A7E                     l5146:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 138: standby();
  1841  001A7E  ECE9  F014         	call	_standby	;wreg free
  1842                           
  1843                           ;main.c: 139: break;
  1844  001A82  D029               	goto	l5164
  1845  001A84                     l5148:
  1846                           
  1847                           ;main.c: 141: emergencystop();
  1848  001A84  EC34  F015         	call	_emergencystop	;wreg free
  1849                           
  1850                           ;main.c: 142: break;
  1851  001A88  D026               	goto	l5164
  1852  001A8A                     l5150:
  1853                           
  1854                           ;main.c: 144: operation();
  1855  001A8A  EC91  F00F         	call	_operation	;wreg free
  1856                           
  1857                           ;main.c: 145: break;
  1858  001A8E  D023               	goto	l5164
  1859  001A90                     l5152:
  1860                           
  1861                           ;main.c: 147: operationend();
  1862  001A90  EC54  F015         	call	_operationend	;wreg free
  1863                           
  1864                           ;main.c: 148: break;
  1865  001A94  D020               	goto	l5164
  1866  001A96                     l5154:
  1867                           
  1868                           ;main.c: 150: date_time();
  1869  001A96  EC5C  F00E         	call	_date_time	;wreg free
  1870                           
  1871                           ;main.c: 151: break;
  1872  001A9A  D01D               	goto	l5164
  1873  001A9C                     l5156:
  1874                           
  1875                           ;main.c: 153: bottle_count();
  1876  001A9C  EC4E  F007         	call	_bottle_count	;wreg free
  1877                           
  1878                           ;main.c: 154: break;
  1879  001AA0  D01A               	goto	l5164
  1880  001AA2                     l5158:
  1881                           
  1882                           ;main.c: 156: bottle_time();
  1883  001AA2  EC70  F014         	call	_bottle_time	;wreg free
  1884                           
  1885                           ;main.c: 158: }
  1886                           
  1887                           ;main.c: 157: break;
  1888  001AA6  D017               	goto	l5164
  1889  001AA8                     l5162:
  1890  001AA8  0100               	movlb	0	; () banked
  1891  001AAA  51C3               	movf	_curr_state& (0+255),w,b
  1892                           
  1893                           ; Switch size 1, requested type "space"
  1894                           ; Number of cases is 7, Range of values is 0 to 6
  1895                           ; switch strategies available:
  1896                           ; Name         Instructions Cycles
  1897                           ; simple_byte           22    12 (average)
  1898                           ;	Chosen strategy is simple_byte
  1899  001AAC  0A00               	xorlw	0	; case 0
  1900  001AAE  B4D8               	btfsc	status,2,c
  1901  001AB0  D7E6               	goto	l5146
  1902  001AB2  0A01               	xorlw	1	; case 1
  1903  001AB4  B4D8               	btfsc	status,2,c
  1904  001AB6  D7E6               	goto	l5148
  1905  001AB8  0A03               	xorlw	3	; case 2
  1906  001ABA  B4D8               	btfsc	status,2,c
  1907  001ABC  D7E6               	goto	l5150
  1908  001ABE  0A01               	xorlw	1	; case 3
  1909  001AC0  B4D8               	btfsc	status,2,c
  1910  001AC2  D7E6               	goto	l5152
  1911  001AC4  0A07               	xorlw	7	; case 4
  1912  001AC6  B4D8               	btfsc	status,2,c
  1913  001AC8  D7E6               	goto	l5154
  1914  001ACA  0A01               	xorlw	1	; case 5
  1915  001ACC  B4D8               	btfsc	status,2,c
  1916  001ACE  D7E6               	goto	l5156
  1917  001AD0  0A03               	xorlw	3	; case 6
  1918  001AD2  B4D8               	btfsc	status,2,c
  1919  001AD4  D7E6               	goto	l5158
  1920  001AD6                     l5164:
  1921                           
  1922                           ;main.c: 159: _delay((unsigned long)((200)*(10000000/4000.0)));
  1923  001AD6  0E03               	movlw	3
  1924  001AD8  0101               	movlb	1	; () banked
  1925  001ADA  6F0B               	movwf	(??_main+1)& (0+255),b
  1926  001ADC  0E8A               	movlw	138
  1927  001ADE  0101               	movlb	1	; () banked
  1928  001AE0  6F0A               	movwf	??_main& (0+255),b
  1929  001AE2  0E55               	movlw	85
  1930  001AE4                     u4517:
  1931  001AE4  2EE8               	decfsz	wreg,f,c
  1932  001AE6  D7FE               	bra	u4517
  1933  001AE8  2F0A               	decfsz	??_main& (0+255),f,b
  1934  001AEA  D7FC               	bra	u4517
  1935  001AEC  2F0B               	decfsz	(??_main+1)& (0+255),f,b
  1936  001AEE  D7FA               	bra	u4517
  1937  001AF0  D000               	nop2	
  1938  001AF2  D7DA               	goto	l5162
  1939  001AF4                     __end_of_main:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           intcon	equ	0xFF2
  1946                           intcon2	equ	0xFF1
  1947                           intcon3	equ	0xFF0
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           status	equ	0xFD8
  1951                           
  1952 ;; *************** function _standby *****************
  1953 ;; Defined at:
  1954 ;;		line 373 in file "main.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:   10
  1975 ;; This function calls:
  1976 ;;		_lcdInst
  1977 ;;		_printf
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text1
  1984  0029D2                     __ptext1:
  1985                           	opt stack 0
  1986  0029D2                     _standby:
  1987                           	opt stack 20
  1988                           
  1989                           ;main.c: 374: lcdInst(0b10000000);
  1990                           
  1991                           ;incstack = 0
  1992  0029D2  0E80               	movlw	128
  1993  0029D4  EC7B  F015         	call	_lcdInst
  1994                           
  1995                           ;main.c: 376: lcdInst(0b11000000);
  1996  0029D8  0EC0               	movlw	192
  1997  0029DA  EC7B  F015         	call	_lcdInst
  1998                           
  1999                           ;main.c: 377: printf("PORTB: %d", PORTB);
  2000  0029DE  0EE3               	movlw	low STR_7
  2001  0029E0  0100               	movlb	0	; () banked
  2002  0029E2  6FE0               	movwf	printf@f& (0+255),b
  2003  0029E4  0EFF               	movlw	high STR_7
  2004  0029E6  0100               	movlb	0	; () banked
  2005  0029E8  6FE1               	movwf	(printf@f+1)& (0+255),b
  2006  0029EA  CF81 F0E2          	movff	3969,?_printf+2	;volatile
  2007  0029EE  0100               	movlb	0	; () banked
  2008  0029F0  6BE3               	clrf	(?_printf+3)& (0+255),b
  2009  0029F2  EC03  F002         	call	_printf	;wreg free
  2010  0029F6  0012               	return	
  2011  0029F8                     __end_of_standby:
  2012                           	opt stack 0
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           intcon	equ	0xFF2
  2018                           intcon2	equ	0xFF1
  2019                           intcon3	equ	0xFF0
  2020                           postinc0	equ	0xFEE
  2021                           wreg	equ	0xFE8
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _operationend *****************
  2025 ;; Defined at:
  2026 ;;		line 523 in file "main.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:   10
  2047 ;; This function calls:
  2048 ;;		_lcdInst
  2049 ;;		_printf
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text2
  2056  002AA8                     __ptext2:
  2057                           	opt stack 0
  2058  002AA8                     _operationend:
  2059                           	opt stack 20
  2060                           
  2061                           ;main.c: 524: lcdInst(0b10000000);
  2062                           
  2063                           ;incstack = 0
  2064  002AA8  0E80               	movlw	128
  2065  002AAA  EC7B  F015         	call	_lcdInst
  2066                           
  2067                           ;main.c: 525: printf("Operation Done!");
  2068  002AAE  0EB6               	movlw	low STR_27
  2069  002AB0  0100               	movlb	0	; () banked
  2070  002AB2  6FE0               	movwf	printf@f& (0+255),b
  2071  002AB4  0EFF               	movlw	high STR_27
  2072  002AB6  0100               	movlb	0	; () banked
  2073  002AB8  6FE1               	movwf	(printf@f+1)& (0+255),b
  2074  002ABA  EC03  F002         	call	_printf	;wreg free
  2075  002ABE  0012               	return	
  2076  002AC0                     __end_of_operationend:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           intcon	equ	0xFF2
  2083                           intcon2	equ	0xFF1
  2084                           intcon3	equ	0xFF0
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _operation *****************
  2090 ;; Defined at:
  2091 ;;		line 498 in file "main.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;Total ram usage:        2 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:   10
  2112 ;; This function calls:
  2113 ;;		_lcdInst
  2114 ;;		_printf
  2115 ;;		_read_colorsensor
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text3
  2122  001F22                     __ptext3:
  2123                           	opt stack 0
  2124  001F22                     _operation:
  2125                           	opt stack 20
  2126                           
  2127                           ;main.c: 499: switch(operation_disp){
  2128                           
  2129                           ;incstack = 0
  2130  001F22  D031               	goto	l5012
  2131  001F24                     l4992:
  2132                           
  2133                           ;main.c: 501: lcdInst(0b10000000);
  2134  001F24  0E80               	movlw	128
  2135  001F26  EC7B  F015         	call	_lcdInst
  2136                           
  2137                           ;main.c: 502: printf("Running~              ");
  2138  001F2A  0E85               	movlw	low STR_23
  2139  001F2C  0100               	movlb	0	; () banked
  2140  001F2E  6FE0               	movwf	printf@f& (0+255),b
  2141  001F30  0EFE               	movlw	high STR_23
  2142  001F32  0100               	movlb	0	; () banked
  2143  001F34  6FE1               	movwf	(printf@f+1)& (0+255),b
  2144  001F36  EC03  F002         	call	_printf	;wreg free
  2145                           
  2146                           ;main.c: 503: operation_disp = 1;
  2147  001F3A  0E00               	movlw	0
  2148  001F3C  0100               	movlb	0	; () banked
  2149  001F3E  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2150  001F40  0E01               	movlw	1
  2151  001F42  D01F               	goto	L2
  2152  001F44                     l4998:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;main.c: 506: lcdInst(0b10000000);
  2156  001F44  0E80               	movlw	128
  2157  001F46  EC7B  F015         	call	_lcdInst
  2158                           
  2159                           ;main.c: 507: printf("Running~~              ");
  2160  001F4A  0E6D               	movlw	low STR_24
  2161  001F4C  0100               	movlb	0	; () banked
  2162  001F4E  6FE0               	movwf	printf@f& (0+255),b
  2163  001F50  0EFE               	movlw	high STR_24
  2164  001F52  0100               	movlb	0	; () banked
  2165  001F54  6FE1               	movwf	(printf@f+1)& (0+255),b
  2166  001F56  EC03  F002         	call	_printf	;wreg free
  2167                           
  2168                           ;main.c: 508: operation_disp = 2;
  2169  001F5A  0E00               	movlw	0
  2170  001F5C  0100               	movlb	0	; () banked
  2171  001F5E  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2172  001F60  0E02               	movlw	2
  2173  001F62  D00F               	goto	L2
  2174  001F64                     l5004:
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 511: lcdInst(0b10000000);
  2178  001F64  0E80               	movlw	128
  2179  001F66  EC7B  F015         	call	_lcdInst
  2180                           
  2181                           ;main.c: 512: printf("Running~~~              ");
  2182  001F6A  0E24               	movlw	low STR_25
  2183  001F6C  0100               	movlb	0	; () banked
  2184  001F6E  6FE0               	movwf	printf@f& (0+255),b
  2185  001F70  0EFE               	movlw	high STR_25
  2186  001F72  0100               	movlb	0	; () banked
  2187  001F74  6FE1               	movwf	(printf@f+1)& (0+255),b
  2188  001F76  EC03  F002         	call	_printf	;wreg free
  2189                           
  2190                           ;main.c: 513: operation_disp = 0;
  2191  001F7A  0E00               	movlw	0
  2192  001F7C  0100               	movlb	0	; () banked
  2193  001F7E  6FB6               	movwf	(_operation_disp+1)& (0+255),b
  2194  001F80  0E00               	movlw	0
  2195  001F82                     L2:
  2196  001F82  6FB5               	movwf	_operation_disp& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;main.c: 515: }
  2200                           
  2201                           ;main.c: 514: break;
  2202  001F84  D014               	goto	l5014
  2203  001F86                     l5012:
  2204  001F86  C0B5  F0EC         	movff	_operation_disp,??_operation
  2205  001F8A  C0B6  F0ED         	movff	_operation_disp+1,??_operation+1
  2206                           
  2207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2208                           ; Switch size 1, requested type "space"
  2209                           ; Number of cases is 1, Range of values is 0 to 0
  2210                           ; switch strategies available:
  2211                           ; Name         Instructions Cycles
  2212                           ; simple_byte            4     3 (average)
  2213                           ;	Chosen strategy is simple_byte
  2214  001F8E  0100               	movlb	0	; () banked
  2215  001F90  51ED               	movf	(??_operation+1)& (0+255),w,b
  2216  001F92  0A00               	xorlw	0	; case 0
  2217  001F94  A4D8               	btfss	status,2,c
  2218  001F96  D00B               	goto	l5014
  2219                           
  2220                           ; BSR set to: 0
  2221                           ; Switch size 1, requested type "space"
  2222                           ; Number of cases is 3, Range of values is 0 to 2
  2223                           ; switch strategies available:
  2224                           ; Name         Instructions Cycles
  2225                           ; simple_byte           10     6 (average)
  2226                           ;	Chosen strategy is simple_byte
  2227  001F98  0100               	movlb	0	; () banked
  2228  001F9A  51EC               	movf	??_operation& (0+255),w,b
  2229  001F9C  0A00               	xorlw	0	; case 0
  2230  001F9E  B4D8               	btfsc	status,2,c
  2231  001FA0  D7C1               	goto	l4992
  2232  001FA2  0A01               	xorlw	1	; case 1
  2233  001FA4  B4D8               	btfsc	status,2,c
  2234  001FA6  D7CE               	goto	l4998
  2235  001FA8  0A03               	xorlw	3	; case 2
  2236  001FAA  B4D8               	btfsc	status,2,c
  2237  001FAC  D7DB               	goto	l5004
  2238  001FAE                     l5014:
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;main.c: 517: lcdInst(0b11000000);
  2242  001FAE  0EC0               	movlw	192
  2243  001FB0  EC7B  F015         	call	_lcdInst
  2244                           
  2245                           ;main.c: 518: read_colorsensor();
  2246  001FB4  EC6F  F009         	call	_read_colorsensor	;wreg free
  2247                           
  2248                           ;main.c: 519: printf("R%d G%d B%d                ", color[1], color[2], color[3]);
  2249  001FB8  0E08               	movlw	low STR_26
  2250  001FBA  0100               	movlb	0	; () banked
  2251  001FBC  6FE0               	movwf	printf@f& (0+255),b
  2252  001FBE  0EFE               	movlw	high STR_26
  2253  001FC0  0100               	movlb	0	; () banked
  2254  001FC2  6FE1               	movwf	(printf@f+1)& (0+255),b
  2255  001FC4  C098  F0E2         	movff	_color+2,?_printf+2
  2256  001FC8  C099  F0E3         	movff	_color+3,?_printf+3
  2257  001FCC  C09A  F0E4         	movff	_color+4,?_printf+4
  2258  001FD0  C09B  F0E5         	movff	_color+5,?_printf+5
  2259  001FD4  C09C  F0E6         	movff	_color+6,?_printf+6
  2260  001FD8  C09D  F0E7         	movff	_color+7,?_printf+7
  2261  001FDC  EC03  F002         	call	_printf	;wreg free
  2262  001FE0  0012               	return	
  2263  001FE2                     __end_of_operation:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           intcon	equ	0xFF2
  2270                           intcon2	equ	0xFF1
  2271                           intcon3	equ	0xFF0
  2272                           postinc0	equ	0xFEE
  2273                           wreg	equ	0xFE8
  2274                           status	equ	0xFD8
  2275                           
  2276 ;; *************** function _read_colorsensor *****************
  2277 ;; Defined at:
  2278 ;;		line 578 in file "main.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  2283 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  2284 ;;  i               2   31[BANK0 ] int 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      void 
  2287 ;; Registers used:
  2288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;Total ram usage:       14 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    9
  2301 ;; This function calls:
  2302 ;;		_I2C_Master_Read
  2303 ;;		_I2C_Master_Start
  2304 ;;		_I2C_Master_Stop
  2305 ;;		_I2C_Master_Write
  2306 ;; This function is called by:
  2307 ;;		_operation
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text4
  2312  0012DE                     __ptext4:
  2313                           	opt stack 0
  2314  0012DE                     _read_colorsensor:
  2315                           	opt stack 20
  2316                           
  2317                           ;main.c: 583: unsigned char color_low[4];
  2318                           ;main.c: 584: unsigned char color_high[4];
  2319                           ;main.c: 585: int i;
  2320                           ;main.c: 588: I2C_Master_Start();
  2321                           
  2322                           ;incstack = 0
  2323  0012DE  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  2324                           
  2325                           ;main.c: 589: I2C_Master_Write(0b01010010);
  2326  0012E2  0E00               	movlw	0
  2327  0012E4  0100               	movlb	0	; () banked
  2328  0012E6  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2329  0012E8  0E52               	movlw	82
  2330  0012EA  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2331  0012EC  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2332                           
  2333                           ;main.c: 590: I2C_Master_Write(0b10110100);
  2334  0012F0  0E00               	movlw	0
  2335  0012F2  0100               	movlb	0	; () banked
  2336  0012F4  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2337  0012F6  0EB4               	movlw	180
  2338  0012F8  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2339  0012FA  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2340                           
  2341                           ;main.c: 591: I2C_Master_Start();
  2342  0012FE  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  2343                           
  2344                           ;main.c: 592: I2C_Master_Write(0b01010011);
  2345  001302  0E00               	movlw	0
  2346  001304  0100               	movlb	0	; () banked
  2347  001306  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2348  001308  0E53               	movlw	83
  2349  00130A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2350  00130C  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2351                           
  2352                           ;main.c: 593: for(i=0; i<3; i++){
  2353  001310  0E00               	movlw	0
  2354  001312  0100               	movlb	0	; () banked
  2355  001314  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2356  001316  0E00               	movlw	0
  2357  001318  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2358  00131A                     l3578:
  2359                           
  2360                           ; BSR set to: 0
  2361  00131A  0100               	movlb	0	; () banked
  2362  00131C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2363  00131E  D008               	goto	l3582
  2364  001320  0100               	movlb	0	; () banked
  2365  001322  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2366  001324  E121               	bnz	l3588
  2367  001326  0E03               	movlw	3
  2368  001328  0100               	movlb	0	; () banked
  2369  00132A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2370  00132C  B0D8               	btfsc	status,0,c
  2371  00132E  D01C               	goto	l3588
  2372  001330                     l3582:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;main.c: 594: color_low[i] = I2C_Master_Read(1);
  2376  001330  0EDB               	movlw	low read_colorsensor@color_low
  2377  001332  0100               	movlb	0	; () banked
  2378  001334  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2379  001336  6ED9               	movwf	fsr2l,c
  2380  001338  0E00               	movlw	high read_colorsensor@color_low
  2381  00133A  0100               	movlb	0	; () banked
  2382  00133C  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2383  00133E  6EDA               	movwf	fsr2h,c
  2384  001340  0E01               	movlw	1
  2385  001342  ECA6  F014         	call	_I2C_Master_Read
  2386  001346  6EDF               	movwf	indf2,c
  2387                           
  2388                           ;main.c: 595: color_high[i] = I2C_Master_Read(1);
  2389  001348  0EDF               	movlw	low read_colorsensor@color_high
  2390  00134A  0100               	movlb	0	; () banked
  2391  00134C  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2392  00134E  6ED9               	movwf	fsr2l,c
  2393  001350  0E00               	movlw	high read_colorsensor@color_high
  2394  001352  0100               	movlb	0	; () banked
  2395  001354  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2396  001356  6EDA               	movwf	fsr2h,c
  2397  001358  0E01               	movlw	1
  2398  00135A  ECA6  F014         	call	_I2C_Master_Read
  2399  00135E  6EDF               	movwf	indf2,c
  2400  001360  0100               	movlb	0	; () banked
  2401  001362  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2402  001364  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2403  001366  D7D9               	goto	l3578
  2404  001368                     l3588:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;main.c: 596: }
  2408                           ;main.c: 597: color_low[3] = I2C_Master_Read(1);
  2409  001368  0E01               	movlw	1
  2410  00136A  ECA6  F014         	call	_I2C_Master_Read
  2411  00136E  0100               	movlb	0	; () banked
  2412  001370  6FDE               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  2413                           
  2414                           ;main.c: 598: color_high[3] = I2C_Master_Read(0);
  2415  001372  0E00               	movlw	0
  2416  001374  ECA6  F014         	call	_I2C_Master_Read
  2417  001378  0100               	movlb	0	; () banked
  2418  00137A  6FE2               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  2419                           
  2420                           ;main.c: 599: I2C_Master_Stop();
  2421  00137C  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  2422                           
  2423                           ;main.c: 601: for(i=0; i<4; i++){
  2424  001380  0E00               	movlw	0
  2425  001382  0100               	movlb	0	; () banked
  2426  001384  6FE4               	movwf	(read_colorsensor@i+1)& (0+255),b
  2427  001386  0E00               	movlw	0
  2428  001388  6FE3               	movwf	read_colorsensor@i& (0+255),b
  2429  00138A                     l3592:
  2430                           
  2431                           ; BSR set to: 0
  2432  00138A  0100               	movlb	0	; () banked
  2433  00138C  BFE4               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2434  00138E  D008               	goto	l3596
  2435  001390  0100               	movlb	0	; () banked
  2436  001392  51E4               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2437  001394  E139               	bnz	l396
  2438  001396  0E04               	movlw	4
  2439  001398  0100               	movlb	0	; () banked
  2440  00139A  5DE3               	subwf	read_colorsensor@i& (0+255),w,b
  2441  00139C  B0D8               	btfsc	status,0,c
  2442  00139E  0012               	return	
  2443  0013A0                     l3596:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;main.c: 602: color[i] = (color_high[i] << 8)|(color_low[i]);
  2447  0013A0  0EDF               	movlw	low read_colorsensor@color_high
  2448  0013A2  0100               	movlb	0	; () banked
  2449  0013A4  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2450  0013A6  6ED9               	movwf	fsr2l,c
  2451  0013A8  0E00               	movlw	high read_colorsensor@color_high
  2452  0013AA  0100               	movlb	0	; () banked
  2453  0013AC  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2454  0013AE  6EDA               	movwf	fsr2h,c
  2455  0013B0  50DF               	movf	indf2,w,c
  2456  0013B2  0100               	movlb	0	; () banked
  2457  0013B4  6FD7               	movwf	??_read_colorsensor& (0+255),b
  2458  0013B6  0100               	movlb	0	; () banked
  2459  0013B8  51D7               	movf	??_read_colorsensor& (0+255),w,b
  2460  0013BA  0100               	movlb	0	; () banked
  2461  0013BC  6FD9               	movwf	(??_read_colorsensor+2)& (0+255),b
  2462  0013BE  6BD8               	clrf	(??_read_colorsensor+1)& (0+255),b
  2463  0013C0  0EDB               	movlw	low read_colorsensor@color_low
  2464  0013C2  0100               	movlb	0	; () banked
  2465  0013C4  25E3               	addwf	read_colorsensor@i& (0+255),w,b
  2466  0013C6  6ED9               	movwf	fsr2l,c
  2467  0013C8  0E00               	movlw	high read_colorsensor@color_low
  2468  0013CA  0100               	movlb	0	; () banked
  2469  0013CC  21E4               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  2470  0013CE  6EDA               	movwf	fsr2h,c
  2471  0013D0  50DF               	movf	indf2,w,c
  2472  0013D2  0100               	movlb	0	; () banked
  2473  0013D4  6FDA               	movwf	(??_read_colorsensor+3)& (0+255),b
  2474  0013D6  0100               	movlb	0	; () banked
  2475  0013D8  51DA               	movf	(??_read_colorsensor+3)& (0+255),w,b
  2476  0013DA  0100               	movlb	0	; () banked
  2477  0013DC  13D8               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  2478  0013DE  0E00               	movlw	0
  2479  0013E0  13D9               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  2480  0013E2  90D8               	bcf	status,0,c
  2481  0013E4  0100               	movlb	0	; () banked
  2482  0013E6  35E3               	rlcf	read_colorsensor@i& (0+255),w,b
  2483  0013E8  6ED9               	movwf	fsr2l,c
  2484  0013EA  0100               	movlb	0	; () banked
  2485  0013EC  35E4               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2486  0013EE  6EDA               	movwf	fsr2h,c
  2487  0013F0  0E96               	movlw	low _color
  2488  0013F2  26D9               	addwf	fsr2l,f,c
  2489  0013F4  0E00               	movlw	high _color
  2490  0013F6  22DA               	addwfc	fsr2h,f,c
  2491  0013F8  C0D8  FFDE         	movff	??_read_colorsensor+1,postinc2
  2492  0013FC  C0D9  FFDD         	movff	??_read_colorsensor+2,postdec2
  2493                           
  2494                           ; BSR set to: 0
  2495  001400  0100               	movlb	0	; () banked
  2496  001402  4BE3               	infsnz	read_colorsensor@i& (0+255),f,b
  2497  001404  2BE4               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2498  001406  D7C1               	goto	l3592
  2499  001408                     l396:
  2500                           
  2501                           ; BSR set to: 0
  2502  001408  0012               	return		;funcret
  2503  00140A                     __end_of_read_colorsensor:
  2504                           	opt stack 0
  2505                           tblptru	equ	0xFF8
  2506                           tblptrh	equ	0xFF7
  2507                           tblptrl	equ	0xFF6
  2508                           tablat	equ	0xFF5
  2509                           intcon	equ	0xFF2
  2510                           intcon2	equ	0xFF1
  2511                           intcon3	equ	0xFF0
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           indf2	equ	0xFDF
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           fsr2h	equ	0xFDA
  2518                           fsr2l	equ	0xFD9
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _initLCD *****************
  2522 ;; Defined at:
  2523 ;;		line 14 in file "lcd.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;Total ram usage:        1 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    9
  2544 ;; This function calls:
  2545 ;;		_lcdInst
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text5
  2552  00274A                     __ptext5:
  2553                           	opt stack 0
  2554  00274A                     _initLCD:
  2555                           	opt stack 21
  2556                           
  2557                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;incstack = 0
  2561  00274A  0E31               	movlw	49
  2562  00274C  0100               	movlb	0	; () banked
  2563  00274E  6FD7               	movwf	??_initLCD& (0+255),b
  2564  002750  0EB2               	movlw	178
  2565  002752                     u4527:
  2566  002752  2EE8               	decfsz	wreg,f,c
  2567  002754  D7FE               	bra	u4527
  2568  002756  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2569  002758  D7FC               	bra	u4527
  2570  00275A  F000               	nop	
  2571                           
  2572                           ;lcd.c: 16: lcdInst(0b00110011);
  2573  00275C  0E33               	movlw	51
  2574  00275E  EC7B  F015         	call	_lcdInst
  2575                           
  2576                           ;lcd.c: 17: lcdInst(0b00110011);
  2577  002762  0E33               	movlw	51
  2578  002764  EC7B  F015         	call	_lcdInst
  2579                           
  2580                           ;lcd.c: 18: lcdInst(0b00110010);
  2581  002768  0E32               	movlw	50
  2582  00276A  EC7B  F015         	call	_lcdInst
  2583                           
  2584                           ;lcd.c: 19: lcdInst(0b00101000);
  2585  00276E  0E28               	movlw	40
  2586  002770  EC7B  F015         	call	_lcdInst
  2587                           
  2588                           ;lcd.c: 20: lcdInst(0b00001111);
  2589  002774  0E0F               	movlw	15
  2590  002776  EC7B  F015         	call	_lcdInst
  2591                           
  2592                           ;lcd.c: 21: lcdInst(0b00000110);
  2593  00277A  0E06               	movlw	6
  2594  00277C  EC7B  F015         	call	_lcdInst
  2595                           
  2596                           ;lcd.c: 22: lcdInst(0b00000001);
  2597  002780  0E01               	movlw	1
  2598  002782  EC7B  F015         	call	_lcdInst
  2599                           
  2600                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2601  002786  0E31               	movlw	49
  2602  002788  0100               	movlb	0	; () banked
  2603  00278A  6FD7               	movwf	??_initLCD& (0+255),b
  2604  00278C  0EB2               	movlw	178
  2605  00278E                     u4537:
  2606  00278E  2EE8               	decfsz	wreg,f,c
  2607  002790  D7FE               	bra	u4537
  2608  002792  2FD7               	decfsz	??_initLCD& (0+255),f,b
  2609  002794  D7FC               	bra	u4537
  2610  002796  F000               	nop	
  2611  002798  0012               	return		;funcret
  2612  00279A                     __end_of_initLCD:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           intcon	equ	0xFF2
  2619                           intcon2	equ	0xFF1
  2620                           intcon3	equ	0xFF0
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           indf2	equ	0xFDF
  2624                           postinc2	equ	0xFDE
  2625                           postdec2	equ	0xFDD
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _emergencystop *****************
  2631 ;; Defined at:
  2632 ;;		line 529 in file "main.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;Total ram usage:        0 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:   10
  2653 ;; This function calls:
  2654 ;;		_lcdInst
  2655 ;;		_printf
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text6
  2662  002A68                     __ptext6:
  2663                           	opt stack 0
  2664  002A68                     _emergencystop:
  2665                           	opt stack 20
  2666                           
  2667                           ;main.c: 530: (INTCONbits.GIE = 0);
  2668                           
  2669                           ;incstack = 0
  2670  002A68  9EF2               	bcf	intcon,7,c	;volatile
  2671                           
  2672                           ;main.c: 531: PORTAbits.RA2 = 0;
  2673  002A6A  9480               	bcf	3968,2,c	;volatile
  2674                           
  2675                           ;main.c: 532: lcdInst(0b00000001);
  2676  002A6C  0E01               	movlw	1
  2677  002A6E  EC7B  F015         	call	_lcdInst
  2678                           
  2679                           ;main.c: 533: lcdInst(0b10000000);
  2680  002A72  0E80               	movlw	128
  2681  002A74  EC7B  F015         	call	_lcdInst
  2682                           
  2683                           ;main.c: 534: printf("EMERGENCY STOP");
  2684  002A78  0EC6               	movlw	low STR_28
  2685  002A7A  0100               	movlb	0	; () banked
  2686  002A7C  6FE0               	movwf	printf@f& (0+255),b
  2687  002A7E  0EFF               	movlw	high STR_28
  2688  002A80  0100               	movlb	0	; () banked
  2689  002A82  6FE1               	movwf	(printf@f+1)& (0+255),b
  2690  002A84  EC03  F002         	call	_printf	;wreg free
  2691  002A88                     l353:
  2692  002A88  D7FF               	goto	l353
  2693  002A8A                     __end_of_emergencystop:
  2694                           	opt stack 0
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           intcon	equ	0xFF2
  2700                           intcon2	equ	0xFF1
  2701                           intcon3	equ	0xFF0
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           postdec2	equ	0xFDD
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _date_time *****************
  2712 ;; Defined at:
  2713 ;;		line 405 in file "main.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;		None
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  i               1   40[BANK0 ] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:        1 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:   10
  2734 ;; This function calls:
  2735 ;;		_I2C_Master_Read
  2736 ;;		_I2C_Master_Start
  2737 ;;		_I2C_Master_Stop
  2738 ;;		_I2C_Master_Write
  2739 ;;		_lcdInst
  2740 ;;		_printf
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text7
  2747  001CB8                     __ptext7:
  2748                           	opt stack 0
  2749  001CB8                     _date_time:
  2750                           	opt stack 20
  2751                           
  2752                           ;main.c: 407: I2C_Master_Start();
  2753                           
  2754                           ;incstack = 0
  2755  001CB8  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  2756                           
  2757                           ;main.c: 408: I2C_Master_Write(0b11010000);
  2758  001CBC  0E00               	movlw	0
  2759  001CBE  0100               	movlb	0	; () banked
  2760  001CC0  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2761  001CC2  0ED0               	movlw	208
  2762  001CC4  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2763  001CC6  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2764                           
  2765                           ;main.c: 409: I2C_Master_Write(0x00);
  2766  001CCA  0E00               	movlw	0
  2767  001CCC  0100               	movlb	0	; () banked
  2768  001CCE  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2769  001CD0  0E00               	movlw	0
  2770  001CD2  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2771  001CD4  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2772                           
  2773                           ;main.c: 410: I2C_Master_Stop();
  2774  001CD8  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  2775                           
  2776                           ;main.c: 413: I2C_Master_Start();
  2777  001CDC  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  2778                           
  2779                           ;main.c: 414: I2C_Master_Write(0b11010001);
  2780  001CE0  0E00               	movlw	0
  2781  001CE2  0100               	movlb	0	; () banked
  2782  001CE4  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2783  001CE6  0ED1               	movlw	209
  2784  001CE8  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  2785  001CEA  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  2786                           
  2787                           ;main.c: 415: for(unsigned char i=0;i<0x06;i++){
  2788  001CEE  0E00               	movlw	0
  2789  001CF0  0100               	movlb	0	; () banked
  2790  001CF2  6FEC               	movwf	date_time@i& (0+255),b
  2791  001CF4                     l5036:
  2792                           
  2793                           ; BSR set to: 0
  2794  001CF4  0E05               	movlw	5
  2795  001CF6  0100               	movlb	0	; () banked
  2796  001CF8  65EC               	cpfsgt	date_time@i& (0+255),b
  2797  001CFA  D001               	goto	l5040
  2798  001CFC  D010               	goto	l5046
  2799  001CFE                     l5040:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 416: time[i] = I2C_Master_Read(1);
  2803  001CFE  0100               	movlb	0	; () banked
  2804  001D00  51EC               	movf	date_time@i& (0+255),w,b
  2805  001D02  0D01               	mullw	1
  2806  001D04  0E9E               	movlw	low _time
  2807  001D06  24F3               	addwf	prodl,w,c
  2808  001D08  6ED9               	movwf	fsr2l,c
  2809  001D0A  0E00               	movlw	high _time
  2810  001D0C  20F4               	addwfc	prodh,w,c
  2811  001D0E  6EDA               	movwf	fsr2h,c
  2812  001D10  0E01               	movlw	1
  2813  001D12  ECA6  F014         	call	_I2C_Master_Read
  2814  001D16  6EDF               	movwf	indf2,c
  2815  001D18  0100               	movlb	0	; () banked
  2816  001D1A  2BEC               	incf	date_time@i& (0+255),f,b
  2817  001D1C  D7EB               	goto	l5036
  2818  001D1E                     l5046:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 417: }
  2822                           ;main.c: 418: time[6] = I2C_Master_Read(0);
  2823  001D1E  0E00               	movlw	0
  2824  001D20  ECA6  F014         	call	_I2C_Master_Read
  2825  001D24  0100               	movlb	0	; () banked
  2826  001D26  6FA4               	movwf	(_time+6)& (0+255),b
  2827                           
  2828                           ;main.c: 419: I2C_Master_Stop();
  2829  001D28  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  2830                           
  2831                           ;main.c: 422: lcdInst(0b10000000);
  2832  001D2C  0E80               	movlw	128
  2833  001D2E  EC7B  F015         	call	_lcdInst
  2834                           
  2835                           ;main.c: 423: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2836  001D32  0EB3               	movlw	low STR_8
  2837  001D34  0100               	movlb	0	; () banked
  2838  001D36  6FE0               	movwf	printf@f& (0+255),b
  2839  001D38  0EFE               	movlw	high STR_8
  2840  001D3A  0100               	movlb	0	; () banked
  2841  001D3C  6FE1               	movwf	(printf@f+1)& (0+255),b
  2842  001D3E  C0A3  F0E2         	movff	_time+5,?_printf+2
  2843  001D42  0100               	movlb	0	; () banked
  2844  001D44  6BE3               	clrf	(?_printf+3)& (0+255),b
  2845  001D46  C0A2  F0E4         	movff	_time+4,?_printf+4
  2846  001D4A  0100               	movlb	0	; () banked
  2847  001D4C  6BE5               	clrf	(?_printf+5)& (0+255),b
  2848  001D4E  C0A4  F0E6         	movff	_time+6,?_printf+6
  2849  001D52  0100               	movlb	0	; () banked
  2850  001D54  6BE7               	clrf	(?_printf+7)& (0+255),b
  2851  001D56  EC03  F002         	call	_printf	;wreg free
  2852                           
  2853                           ;main.c: 424: lcdInst(0b11000000);
  2854  001D5A  0EC0               	movlw	192
  2855  001D5C  EC7B  F015         	call	_lcdInst
  2856                           
  2857                           ;main.c: 425: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2858  001D60  0ECA               	movlw	low STR_9
  2859  001D62  0100               	movlb	0	; () banked
  2860  001D64  6FE0               	movwf	printf@f& (0+255),b
  2861  001D66  0EFE               	movlw	high STR_9
  2862  001D68  0100               	movlb	0	; () banked
  2863  001D6A  6FE1               	movwf	(printf@f+1)& (0+255),b
  2864  001D6C  C0A0  F0E2         	movff	_time+2,?_printf+2
  2865  001D70  0100               	movlb	0	; () banked
  2866  001D72  6BE3               	clrf	(?_printf+3)& (0+255),b
  2867  001D74  C09F  F0E4         	movff	_time+1,?_printf+4
  2868  001D78  0100               	movlb	0	; () banked
  2869  001D7A  6BE5               	clrf	(?_printf+5)& (0+255),b
  2870  001D7C  C09E  F0E6         	movff	_time,?_printf+6
  2871  001D80  0100               	movlb	0	; () banked
  2872  001D82  6BE7               	clrf	(?_printf+7)& (0+255),b
  2873  001D84  EC03  F002         	call	_printf	;wreg free
  2874  001D88  0012               	return	
  2875  001D8A                     __end_of_date_time:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           intcon	equ	0xFF2
  2884                           intcon2	equ	0xFF1
  2885                           intcon3	equ	0xFF0
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           indf2	equ	0xFDF
  2889                           postinc2	equ	0xFDE
  2890                           postdec2	equ	0xFDD
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _I2C_Master_Read *****************
  2896 ;; Defined at:
  2897 ;;		line 100 in file "I2C.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  a               1    wreg     unsigned char 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  a               1   17[BANK0 ] unsigned char 
  2902 ;;  temp            1   18[BANK0 ] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      unsigned char 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;Total ram usage:        2 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    8
  2919 ;; This function calls:
  2920 ;;		_I2C_Master_Wait
  2921 ;; This function is called by:
  2922 ;;		_date_time
  2923 ;;		_read_colorsensor
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text8
  2928  00294C                     __ptext8:
  2929                           	opt stack 0
  2930  00294C                     _I2C_Master_Read:
  2931                           	opt stack 20
  2932                           
  2933                           ;incstack = 0
  2934                           ;I2C_Master_Read@a stored from wreg
  2935  00294C  0100               	movlb	0	; () banked
  2936  00294E  6FD5               	movwf	I2C_Master_Read@a& (0+255),b
  2937                           
  2938                           ;I2C.c: 102: unsigned char temp;
  2939                           ;I2C.c: 103: I2C_Master_Wait();
  2940  002950  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  2941                           
  2942                           ;I2C.c: 104: RCEN = 1;
  2943  002954  86C5               	bsf	4037,3,c	;volatile
  2944                           
  2945                           ;I2C.c: 105: I2C_Master_Wait();
  2946  002956  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  2947                           
  2948                           ;I2C.c: 106: temp = SSPBUF;
  2949  00295A  CFC9 F0D6          	movff	4041,I2C_Master_Read@temp	;volatile
  2950                           
  2951                           ;I2C.c: 107: I2C_Master_Wait();
  2952  00295E  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  2953                           
  2954                           ;I2C.c: 108: ACKDT = (a)?0:1;
  2955  002962  0100               	movlb	0	; () banked
  2956  002964  51D5               	movf	I2C_Master_Read@a& (0+255),w,b
  2957  002966  0100               	movlb	0	; () banked
  2958  002968  A4D8               	btfss	status,2,c
  2959  00296A  D002               	goto	u2760
  2960  00296C  8AC5               	bsf	4037,5,c	;volatile
  2961  00296E  D001               	goto	l3406
  2962  002970                     u2760:
  2963  002970  9AC5               	bcf	4037,5,c	;volatile
  2964  002972                     l3406:
  2965                           
  2966                           ;I2C.c: 109: ACKEN = 1;
  2967  002972  88C5               	bsf	4037,4,c	;volatile
  2968                           
  2969                           ;I2C.c: 110: return temp;
  2970  002974  0100               	movlb	0	; () banked
  2971  002976  51D6               	movf	I2C_Master_Read@temp& (0+255),w,b
  2972  002978  0012               	return	
  2973  00297A                     __end_of_I2C_Master_Read:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           intcon3	equ	0xFF0
  2984                           postinc0	equ	0xFEE
  2985                           wreg	equ	0xFE8
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _bottle_time *****************
  2994 ;; Defined at:
  2995 ;;		line 490 in file "main.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:   10
  3016 ;; This function calls:
  3017 ;;		_lcdInst
  3018 ;;		_printf
  3019 ;; This function is called by:
  3020 ;;		_main
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text9
  3025  0028E0                     __ptext9:
  3026                           	opt stack 0
  3027  0028E0                     _bottle_time:
  3028                           	opt stack 20
  3029                           
  3030                           ;main.c: 491: lcdInst(0b10000000);
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;incstack = 0
  3034  0028E0  0E80               	movlw	128
  3035  0028E2  EC7B  F015         	call	_lcdInst
  3036                           
  3037                           ;main.c: 492: printf("Total Operation       ");
  3038  0028E6  0E9C               	movlw	low STR_21
  3039  0028E8  0100               	movlb	0	; () banked
  3040  0028EA  6FE0               	movwf	printf@f& (0+255),b
  3041  0028EC  0EFE               	movlw	high STR_21
  3042  0028EE  0100               	movlb	0	; () banked
  3043  0028F0  6FE1               	movwf	(printf@f+1)& (0+255),b
  3044  0028F2  EC03  F002         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 493: lcdInst(0b11000000);
  3047  0028F6  0EC0               	movlw	192
  3048  0028F8  EC7B  F015         	call	_lcdInst
  3049                           
  3050                           ;main.c: 494: printf("Time: %d s       ", operation_time);
  3051  0028FC  0EE1               	movlw	low STR_22
  3052  0028FE  0100               	movlb	0	; () banked
  3053  002900  6FE0               	movwf	printf@f& (0+255),b
  3054  002902  0EFE               	movlw	high STR_22
  3055  002904  0100               	movlb	0	; () banked
  3056  002906  6FE1               	movwf	(printf@f+1)& (0+255),b
  3057  002908  C0B7  F0E2         	movff	_operation_time,?_printf+2
  3058  00290C  C0B8  F0E3         	movff	_operation_time+1,?_printf+3
  3059  002910  EC03  F002         	call	_printf	;wreg free
  3060  002914  0012               	return	
  3061  002916                     __end_of_bottle_time:
  3062                           	opt stack 0
  3063                           tblptru	equ	0xFF8
  3064                           tblptrh	equ	0xFF7
  3065                           tblptrl	equ	0xFF6
  3066                           tablat	equ	0xFF5
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           intcon	equ	0xFF2
  3070                           intcon2	equ	0xFF1
  3071                           intcon3	equ	0xFF0
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _bottle_count *****************
  3082 ;; Defined at:
  3083 ;;		line 448 in file "main.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;		None
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;		None
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;Total ram usage:        0 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:   10
  3104 ;; This function calls:
  3105 ;;		___awmod
  3106 ;;		_lcdInst
  3107 ;;		_printf
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text10
  3114  000E9C                     __ptext10:
  3115                           	opt stack 0
  3116  000E9C                     _bottle_count:
  3117                           	opt stack 20
  3118                           
  3119                           ;main.c: 449: switch(bottle_count_disp % 5){
  3120                           
  3121                           ;incstack = 0
  3122  000E9C  D0A7               	goto	l5092
  3123  000E9E                     l5056:
  3124                           
  3125                           ;main.c: 451: lcdInst(0b10000000);
  3126  000E9E  0E80               	movlw	128
  3127  000EA0  EC7B  F015         	call	_lcdInst
  3128                           
  3129                           ;main.c: 452: printf("Bottle Count    ");
  3130  000EA4  0EA5               	movlw	low STR_10
  3131  000EA6  0100               	movlb	0	; () banked
  3132  000EA8  6FE0               	movwf	printf@f& (0+255),b
  3133  000EAA  0EFF               	movlw	high STR_10
  3134  000EAC  0100               	movlb	0	; () banked
  3135  000EAE  6FE1               	movwf	(printf@f+1)& (0+255),b
  3136  000EB0  EC03  F002         	call	_printf	;wreg free
  3137                           
  3138                           ;main.c: 453: lcdInst(0b11000000);
  3139  000EB4  0EC0               	movlw	192
  3140  000EB6  EC7B  F015         	call	_lcdInst
  3141                           
  3142                           ;main.c: 454: printf("Total: %d       ", total_bottle_count);
  3143  000EBA  0E94               	movlw	low STR_11
  3144  000EBC  0100               	movlb	0	; () banked
  3145  000EBE  6FE0               	movwf	printf@f& (0+255),b
  3146  000EC0  0EFF               	movlw	high STR_11
  3147  000EC2  0100               	movlb	0	; () banked
  3148  000EC4  6FE1               	movwf	(printf@f+1)& (0+255),b
  3149  000EC6  C0B9  F0E2         	movff	_total_bottle_count,?_printf+2
  3150  000ECA  C0BA  F0E3         	movff	_total_bottle_count+1,?_printf+3
  3151  000ECE  EC03  F002         	call	_printf	;wreg free
  3152                           
  3153                           ;main.c: 455: break;
  3154  000ED2  0012               	return	
  3155  000ED4                     l5062:
  3156                           
  3157                           ;main.c: 457: lcdInst(0b10000000);
  3158  000ED4  0E80               	movlw	128
  3159  000ED6  EC7B  F015         	call	_lcdInst
  3160                           
  3161                           ;main.c: 458: printf("YOP+CAP+LBL: %d  ", yopcaplbl_count);
  3162  000EDA  0EF3               	movlw	low STR_12
  3163  000EDC  0100               	movlb	0	; () banked
  3164  000EDE  6FE0               	movwf	printf@f& (0+255),b
  3165  000EE0  0EFE               	movlw	high STR_12
  3166  000EE2  0100               	movlb	0	; () banked
  3167  000EE4  6FE1               	movwf	(printf@f+1)& (0+255),b
  3168  000EE6  C0BF  F0E2         	movff	_yopcaplbl_count,?_printf+2
  3169  000EEA  C0C0  F0E3         	movff	_yopcaplbl_count+1,?_printf+3
  3170  000EEE  EC03  F002         	call	_printf	;wreg free
  3171                           
  3172                           ;main.c: 459: lcdInst(0b11000000);
  3173  000EF2  0EC0               	movlw	192
  3174  000EF4  EC7B  F015         	call	_lcdInst
  3175                           
  3176                           ;main.c: 460: printf("YOP+CAP-LBL: %d  ", yopcap_count);
  3177  000EF8  0E17               	movlw	low STR_13
  3178  000EFA  0100               	movlb	0	; () banked
  3179  000EFC  6FE0               	movwf	printf@f& (0+255),b
  3180  000EFE  0EFF               	movlw	high STR_13
  3181  000F00  0100               	movlb	0	; () banked
  3182  000F02  6FE1               	movwf	(printf@f+1)& (0+255),b
  3183  000F04  C0BD  F0E2         	movff	_yopcap_count,?_printf+2
  3184  000F08  C0BE  F0E3         	movff	_yopcap_count+1,?_printf+3
  3185  000F0C  EC03  F002         	call	_printf	;wreg free
  3186                           
  3187                           ;main.c: 461: break;
  3188  000F10  0012               	return	
  3189  000F12                     l5068:
  3190                           
  3191                           ;main.c: 463: lcdInst(0b10000000);
  3192  000F12  0E80               	movlw	128
  3193  000F14  EC7B  F015         	call	_lcdInst
  3194                           
  3195                           ;main.c: 464: printf("YOP-CAP+LBL: %d  ", yoplbl_count);
  3196  000F18  0E05               	movlw	low STR_14
  3197  000F1A  0100               	movlb	0	; () banked
  3198  000F1C  6FE0               	movwf	printf@f& (0+255),b
  3199  000F1E  0EFF               	movlw	high STR_14
  3200  000F20  0100               	movlb	0	; () banked
  3201  000F22  6FE1               	movwf	(printf@f+1)& (0+255),b
  3202  000F24  C0C1  F0E2         	movff	_yoplbl_count,?_printf+2
  3203  000F28  C0C2  F0E3         	movff	_yoplbl_count+1,?_printf+3
  3204  000F2C  EC03  F002         	call	_printf	;wreg free
  3205                           
  3206                           ;main.c: 465: lcdInst(0b11000000);
  3207  000F30  0EC0               	movlw	192
  3208  000F32  EC7B  F015         	call	_lcdInst
  3209                           
  3210                           ;main.c: 466: printf("YOP-CAP-LBL: %d  ", yop_count);
  3211  000F36  0E29               	movlw	low STR_15
  3212  000F38  0100               	movlb	0	; () banked
  3213  000F3A  6FE0               	movwf	printf@f& (0+255),b
  3214  000F3C  0EFF               	movlw	high STR_15
  3215  000F3E  0100               	movlb	0	; () banked
  3216  000F40  6FE1               	movwf	(printf@f+1)& (0+255),b
  3217  000F42  C0BB  F0E2         	movff	_yop_count,?_printf+2
  3218  000F46  C0BC  F0E3         	movff	_yop_count+1,?_printf+3
  3219  000F4A  EC03  F002         	call	_printf	;wreg free
  3220                           
  3221                           ;main.c: 467: break;
  3222  000F4E  0012               	return	
  3223  000F50                     l5074:
  3224                           
  3225                           ;main.c: 469: lcdInst(0b10000000);
  3226  000F50  0E80               	movlw	128
  3227  000F52  EC7B  F015         	call	_lcdInst
  3228                           
  3229                           ;main.c: 470: printf("ESKA+CAP+LBL: %d ", eskacaplbl_count);
  3230  000F56  0E3B               	movlw	low STR_16
  3231  000F58  0100               	movlb	0	; () banked
  3232  000F5A  6FE0               	movwf	printf@f& (0+255),b
  3233  000F5C  0EFF               	movlw	high STR_16
  3234  000F5E  0100               	movlb	0	; () banked
  3235  000F60  6FE1               	movwf	(printf@f+1)& (0+255),b
  3236  000F62  C0AF  F0E2         	movff	_eskacaplbl_count,?_printf+2
  3237  000F66  C0B0  F0E3         	movff	_eskacaplbl_count+1,?_printf+3
  3238  000F6A  EC03  F002         	call	_printf	;wreg free
  3239                           
  3240                           ;main.c: 471: lcdInst(0b11000000);
  3241  000F6E  0EC0               	movlw	192
  3242  000F70  EC7B  F015         	call	_lcdInst
  3243                           
  3244                           ;main.c: 472: printf("ESKA+CAP-LBL: %d ", eskacap_count);
  3245  000F74  0E5F               	movlw	low STR_17
  3246  000F76  0100               	movlb	0	; () banked
  3247  000F78  6FE0               	movwf	printf@f& (0+255),b
  3248  000F7A  0EFF               	movlw	high STR_17
  3249  000F7C  0100               	movlb	0	; () banked
  3250  000F7E  6FE1               	movwf	(printf@f+1)& (0+255),b
  3251  000F80  C0AD  F0E2         	movff	_eskacap_count,?_printf+2
  3252  000F84  C0AE  F0E3         	movff	_eskacap_count+1,?_printf+3
  3253  000F88  EC03  F002         	call	_printf	;wreg free
  3254                           
  3255                           ;main.c: 473: break;
  3256  000F8C  0012               	return	
  3257  000F8E                     l5080:
  3258                           
  3259                           ;main.c: 475: lcdInst(0b10000000);
  3260  000F8E  0E80               	movlw	128
  3261  000F90  EC7B  F015         	call	_lcdInst
  3262                           
  3263                           ;main.c: 476: printf("ESKA-CAP+LBL: %d ", eskalbl_count);
  3264  000F94  0E4D               	movlw	low STR_18
  3265  000F96  0100               	movlb	0	; () banked
  3266  000F98  6FE0               	movwf	printf@f& (0+255),b
  3267  000F9A  0EFF               	movlw	high STR_18
  3268  000F9C  0100               	movlb	0	; () banked
  3269  000F9E  6FE1               	movwf	(printf@f+1)& (0+255),b
  3270  000FA0  C0B1  F0E2         	movff	_eskalbl_count,?_printf+2
  3271  000FA4  C0B2  F0E3         	movff	_eskalbl_count+1,?_printf+3
  3272  000FA8  EC03  F002         	call	_printf	;wreg free
  3273                           
  3274                           ;main.c: 477: lcdInst(0b11000000);
  3275  000FAC  0EC0               	movlw	192
  3276  000FAE  EC7B  F015         	call	_lcdInst
  3277                           
  3278                           ;main.c: 478: printf("ESKA-CAP-LBL: %d ", eska_count);
  3279  000FB2  0E71               	movlw	low STR_19
  3280  000FB4  0100               	movlb	0	; () banked
  3281  000FB6  6FE0               	movwf	printf@f& (0+255),b
  3282  000FB8  0EFF               	movlw	high STR_19
  3283  000FBA  0100               	movlb	0	; () banked
  3284  000FBC  6FE1               	movwf	(printf@f+1)& (0+255),b
  3285  000FBE  C0AB  F0E2         	movff	_eska_count,?_printf+2
  3286  000FC2  C0AC  F0E3         	movff	_eska_count+1,?_printf+3
  3287  000FC6  EC03  F002         	call	_printf	;wreg free
  3288                           
  3289                           ;main.c: 479: break;
  3290  000FCA  0012               	return	
  3291  000FCC                     l5086:
  3292                           
  3293                           ;main.c: 482: lcdInst(0b10000000);
  3294  000FCC  0E80               	movlw	128
  3295  000FCE  EC7B  F015         	call	_lcdInst
  3296                           
  3297                           ;main.c: 483: printf("ERROR: %d", bottle_count_disp);
  3298  000FD2  0EED               	movlw	low STR_20
  3299  000FD4  0100               	movlb	0	; () banked
  3300  000FD6  6FE0               	movwf	printf@f& (0+255),b
  3301  000FD8  0EFF               	movlw	high STR_20
  3302  000FDA  0100               	movlb	0	; () banked
  3303  000FDC  6FE1               	movwf	(printf@f+1)& (0+255),b
  3304  000FDE  C0EE  F0E2         	movff	_bottle_count_disp,?_printf+2
  3305  000FE2  C0EF  F0E3         	movff	_bottle_count_disp+1,?_printf+3
  3306  000FE6  EC03  F002         	call	_printf	;wreg free
  3307  000FEA  D7F0               	goto	l5086
  3308  000FEC                     l5092:
  3309  000FEC  C0EE  F0D4         	movff	_bottle_count_disp,___awmod@dividend
  3310  000FF0  C0EF  F0D5         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3311  000FF4  0E00               	movlw	0
  3312  000FF6  0100               	movlb	0	; () banked
  3313  000FF8  6FD7               	movwf	(___awmod@divisor+1)& (0+255),b
  3314  000FFA  0E05               	movlw	5
  3315  000FFC  6FD6               	movwf	___awmod@divisor& (0+255),b
  3316  000FFE  ECA6  F010         	call	___awmod	;wreg free
  3317                           
  3318                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3319                           ; Switch size 1, requested type "space"
  3320                           ; Number of cases is 1, Range of values is 0 to 0
  3321                           ; switch strategies available:
  3322                           ; Name         Instructions Cycles
  3323                           ; simple_byte            4     3 (average)
  3324                           ;	Chosen strategy is simple_byte
  3325  001002  0100               	movlb	0	; () banked
  3326  001004  51D5               	movf	(?___awmod+1)& (0+255),w,b
  3327  001006  0A00               	xorlw	0	; case 0
  3328  001008  A4D8               	btfss	status,2,c
  3329  00100A  D7E0               	goto	l5086
  3330                           
  3331                           ; BSR set to: 0
  3332                           ; Switch size 1, requested type "space"
  3333                           ; Number of cases is 5, Range of values is 0 to 4
  3334                           ; switch strategies available:
  3335                           ; Name         Instructions Cycles
  3336                           ; simple_byte           16     9 (average)
  3337                           ;	Chosen strategy is simple_byte
  3338  00100C  0100               	movlb	0	; () banked
  3339  00100E  51D4               	movf	?___awmod& (0+255),w,b
  3340  001010  0A00               	xorlw	0	; case 0
  3341  001012  B4D8               	btfsc	status,2,c
  3342  001014  D744               	goto	l5056
  3343  001016  0A01               	xorlw	1	; case 1
  3344  001018  B4D8               	btfsc	status,2,c
  3345  00101A  D75C               	goto	l5062
  3346  00101C  0A03               	xorlw	3	; case 2
  3347  00101E  B4D8               	btfsc	status,2,c
  3348  001020  D778               	goto	l5068
  3349  001022  0A01               	xorlw	1	; case 3
  3350  001024  B4D8               	btfsc	status,2,c
  3351  001026  D794               	goto	l5074
  3352  001028  0A07               	xorlw	7	; case 4
  3353  00102A  B4D8               	btfsc	status,2,c
  3354  00102C  D7B0               	goto	l5080
  3355  00102E  D7CE               	goto	l5086
  3356  001030                     __end_of_bottle_count:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           intcon3	equ	0xFF0
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _printf *****************
  3377 ;; Defined at:
  3378 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3381 ;;		 -> STR_28(15), STR_27(16), STR_26(28), STR_25(25), 
  3382 ;;		 -> STR_24(24), STR_23(23), STR_22(18), STR_21(23), 
  3383 ;;		 -> STR_20(10), STR_19(18), STR_18(18), STR_17(18), 
  3384 ;;		 -> STR_16(18), STR_15(18), STR_14(18), STR_13(18), 
  3385 ;;		 -> STR_12(18), STR_11(17), STR_10(17), STR_9(23), 
  3386 ;;		 -> STR_8(23), STR_7(10), STR_6(14), STR_5(7), 
  3387 ;;		 -> STR_4(24), STR_3(24), STR_2(24), STR_1(24), 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  idx             1    0[BANK1 ] unsigned char 
  3390 ;;  tmpval          4    0        struct .
  3391 ;;  cp              3    0        PTR const unsigned char 
  3392 ;;  width           2    7[BANK1 ] int 
  3393 ;;  val             2    4[BANK1 ] unsigned int 
  3394 ;;  ap              2    1[BANK1 ] PTR void [1]
  3395 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3396 ;;  len             2    0        unsigned int 
  3397 ;;  c               1    9[BANK1 ] char 
  3398 ;;  flag            1    6[BANK1 ] unsigned char 
  3399 ;;  prec            1    3[BANK1 ] char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  2   28[BANK0 ] int 
  3402 ;; Registers used:
  3403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:       22 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    9
  3416 ;; This function calls:
  3417 ;;		___lwdiv
  3418 ;;		___lwmod
  3419 ;;		___wmul
  3420 ;;		_isdigit
  3421 ;;		_putch
  3422 ;; This function is called by:
  3423 ;;		_standby
  3424 ;;		_date_time
  3425 ;;		_bottle_count
  3426 ;;		_bottle_time
  3427 ;;		_operation
  3428 ;;		_operationend
  3429 ;;		_emergencystop
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text11
  3434  000406                     __ptext11:
  3435                           	opt stack 0
  3436  000406                     _printf:
  3437                           	opt stack 20
  3438                           
  3439                           ;doprnt.c: 466: va_list ap;
  3440                           ;doprnt.c: 499: signed char c;
  3441                           ;doprnt.c: 501: int width;
  3442                           ;doprnt.c: 506: signed char prec;
  3443                           ;doprnt.c: 508: unsigned char flag;
  3444                           ;doprnt.c: 523: union {
  3445                           ;doprnt.c: 524: unsigned long vd;
  3446                           ;doprnt.c: 525: double integ;
  3447                           ;doprnt.c: 526: } tmpval;
  3448                           ;doprnt.c: 528: unsigned int val;
  3449                           ;doprnt.c: 529: unsigned len;
  3450                           ;doprnt.c: 530: const char * cp;
  3451                           ;doprnt.c: 533: *ap = __va_start();
  3452                           
  3453                           ;incstack = 0
  3454  000406  0EE2               	movlw	low (?_printf+2)
  3455  000408  0101               	movlb	1	; () banked
  3456  00040A  6F01               	movwf	printf@ap& (0+255),b
  3457  00040C  0E00               	movlw	high (?_printf+2)
  3458  00040E  0101               	movlb	1	; () banked
  3459  000410  6F02               	movwf	(printf@ap+1)& (0+255),b
  3460                           
  3461                           ;doprnt.c: 536: while(c = *f++) {
  3462  000412  D1D5               	goto	l4958
  3463  000414                     l4828:
  3464                           
  3465                           ; BSR set to: 1
  3466                           ;doprnt.c: 538: if(c != '%')
  3467  000414  0E25               	movlw	37
  3468  000416  0101               	movlb	1	; () banked
  3469  000418  1909               	xorwf	printf@c& (0+255),w,b
  3470  00041A  B4D8               	btfsc	status,2,c
  3471  00041C  D005               	goto	l4832
  3472                           
  3473                           ; BSR set to: 1
  3474                           ;doprnt.c: 540: {
  3475                           ;doprnt.c: 541: (putch(c) );
  3476  00041E  0101               	movlb	1	; () banked
  3477  000420  5109               	movf	printf@c& (0+255),w,b
  3478  000422  EC73  F015         	call	_putch
  3479                           
  3480                           ;doprnt.c: 542: continue;
  3481  000426  D1CB               	goto	l4958
  3482  000428                     l4832:
  3483                           
  3484                           ;doprnt.c: 543: }
  3485                           ;doprnt.c: 546: width = 0;
  3486  000428  0E00               	movlw	0
  3487  00042A  0101               	movlb	1	; () banked
  3488  00042C  6F08               	movwf	(printf@width+1)& (0+255),b
  3489  00042E  0E00               	movlw	0
  3490  000430  6F07               	movwf	printf@width& (0+255),b
  3491                           
  3492                           ;doprnt.c: 548: flag = 0;
  3493  000432  0E00               	movlw	0
  3494  000434  0101               	movlb	1	; () banked
  3495  000436  6F06               	movwf	printf@flag& (0+255),b
  3496                           
  3497                           ; BSR set to: 1
  3498                           ;doprnt.c: 551: switch(*f) {
  3499                           
  3500                           ;doprnt.c: 550: for(;;) {
  3501  000438  D005               	goto	l4838
  3502  00043A                     l4834:
  3503                           
  3504                           ;doprnt.c: 580: flag |= 0x04;
  3505  00043A  0101               	movlb	1	; () banked
  3506  00043C  8506               	bsf	printf@flag& (0+255),2,b
  3507                           
  3508                           ;doprnt.c: 581: f++;
  3509  00043E  0100               	movlb	0	; () banked
  3510  000440  4BE0               	infsnz	printf@f& (0+255),f,b
  3511  000442  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3512  000444                     l4838:
  3513  000444  C0E0  FFF6         	movff	printf@f,tblptrl
  3514  000448  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3515  00044C                     	if	0	;tblptru may be non-zero
  3516  00044C                     	endif
  3517  00044C                     	if	0	;tblptru may be non-zero
  3518  00044C                     	endif
  3519  00044C  0008               	tblrd		*
  3520  00044E  50F5               	movf	tablat,w,c
  3521                           
  3522                           ; Switch size 1, requested type "space"
  3523                           ; Number of cases is 1, Range of values is 48 to 48
  3524                           ; switch strategies available:
  3525                           ; Name         Instructions Cycles
  3526                           ; simple_byte            4     3 (average)
  3527                           ;	Chosen strategy is simple_byte
  3528  000450  0A30               	xorlw	48	; case 48
  3529  000452  B4D8               	btfsc	status,2,c
  3530  000454  D7F2               	goto	l4834
  3531                           
  3532                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3533                           
  3534                           ;doprnt.c: 586: }
  3535                           
  3536                           ;doprnt.c: 585: break;
  3537  000456  C0E0  FFF6         	movff	printf@f,tblptrl
  3538  00045A  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3539  00045E                     	if	0	;tblptru may be non-zero
  3540  00045E                     	endif
  3541  00045E                     	if	0	;tblptru may be non-zero
  3542  00045E                     	endif
  3543  00045E  0008               	tblrd		*
  3544  000460  50F5               	movf	tablat,w,c
  3545  000462  ECD4  F014         	call	_isdigit
  3546  000466  A0D8               	btfss	status,0,c
  3547  000468  D048               	goto	l4858
  3548                           
  3549                           ;doprnt.c: 598: width = 0;
  3550  00046A  0E00               	movlw	0
  3551  00046C  0101               	movlb	1	; () banked
  3552  00046E  6F08               	movwf	(printf@width+1)& (0+255),b
  3553  000470  0E00               	movlw	0
  3554  000472  6F07               	movwf	printf@width& (0+255),b
  3555  000474                     l4844:
  3556                           
  3557                           ;doprnt.c: 600: width *= 10;
  3558  000474  C107  F0D4         	movff	printf@width,___wmul@multiplier
  3559  000478  C108  F0D5         	movff	printf@width+1,___wmul@multiplier+1
  3560  00047C  0E00               	movlw	0
  3561  00047E  0100               	movlb	0	; () banked
  3562  000480  6FD7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3563  000482  0E0A               	movlw	10
  3564  000484  6FD6               	movwf	___wmul@multiplicand& (0+255),b
  3565  000486  EC8B  F014         	call	___wmul	;wreg free
  3566  00048A  C0D4  F107         	movff	?___wmul,printf@width
  3567  00048E  C0D5  F108         	movff	?___wmul+1,printf@width+1
  3568                           
  3569                           ;doprnt.c: 601: width += *f++ - '0';
  3570  000492  0ED0               	movlw	208
  3571  000494  0100               	movlb	0	; () banked
  3572  000496  6FE8               	movwf	??_printf& (0+255),b
  3573  000498  0EFF               	movlw	255
  3574  00049A  0100               	movlb	0	; () banked
  3575  00049C  6FE9               	movwf	(??_printf+1)& (0+255),b
  3576  00049E  C0E0  FFF6         	movff	printf@f,tblptrl
  3577  0004A2  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3578  0004A6                     	if	0	;tblptru may be non-zero
  3579  0004A6                     	endif
  3580  0004A6                     	if	0	;tblptru may be non-zero
  3581  0004A6                     	endif
  3582  0004A6  0008               	tblrd		*
  3583  0004A8  50F5               	movf	tablat,w,c
  3584  0004AA  0100               	movlb	0	; () banked
  3585  0004AC  6FEA               	movwf	(??_printf+2)& (0+255),b
  3586  0004AE  6BEB               	clrf	(??_printf+3)& (0+255),b
  3587  0004B0  0100               	movlb	0	; () banked
  3588  0004B2  51E8               	movf	??_printf& (0+255),w,b
  3589  0004B4  0100               	movlb	0	; () banked
  3590  0004B6  27EA               	addwf	(??_printf+2)& (0+255),f,b
  3591  0004B8  0100               	movlb	0	; () banked
  3592  0004BA  51E9               	movf	(??_printf+1)& (0+255),w,b
  3593  0004BC  0100               	movlb	0	; () banked
  3594  0004BE  23EB               	addwfc	(??_printf+3)& (0+255),f,b
  3595  0004C0  0100               	movlb	0	; () banked
  3596  0004C2  51EA               	movf	(??_printf+2)& (0+255),w,b
  3597  0004C4  0101               	movlb	1	; () banked
  3598  0004C6  2707               	addwf	printf@width& (0+255),f,b
  3599  0004C8  0100               	movlb	0	; () banked
  3600  0004CA  51EB               	movf	(??_printf+3)& (0+255),w,b
  3601  0004CC  0101               	movlb	1	; () banked
  3602  0004CE  2308               	addwfc	(printf@width+1)& (0+255),f,b
  3603                           
  3604                           ; BSR set to: 1
  3605  0004D0  0100               	movlb	0	; () banked
  3606  0004D2  4BE0               	infsnz	printf@f& (0+255),f,b
  3607  0004D4  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3611  0004D6  C0E0  FFF6         	movff	printf@f,tblptrl
  3612  0004DA  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3613  0004DE                     	if	0	;tblptru may be non-zero
  3614  0004DE                     	endif
  3615  0004DE                     	if	0	;tblptru may be non-zero
  3616  0004DE                     	endif
  3617  0004DE  0008               	tblrd		*
  3618  0004E0  50F5               	movf	tablat,w,c
  3619  0004E2  ECD4  F014         	call	_isdigit
  3620  0004E6  A0D8               	btfss	status,0,c
  3621  0004E8  D008               	goto	l4858
  3622  0004EA  D7C4               	goto	l4844
  3623  0004EC                     l4852:
  3624                           
  3625                           ;doprnt.c: 721: flag |= 0x80;
  3626  0004EC  0101               	movlb	1	; () banked
  3627  0004EE  8F06               	bsf	printf@flag& (0+255),7,b
  3628                           
  3629                           ;doprnt.c: 723: break;
  3630  0004F0  D020               	goto	l4860
  3631  0004F2                     l4854:
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;doprnt.c: 818: flag |= 0xC0;
  3635  0004F2  0EC0               	movlw	192
  3636  0004F4  0101               	movlb	1	; () banked
  3637  0004F6  1306               	iorwf	printf@flag& (0+255),f,b
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;doprnt.c: 822: }
  3641                           
  3642                           ;doprnt.c: 819: break;
  3643  0004F8  D01C               	goto	l4860
  3644  0004FA                     l4858:
  3645  0004FA  C0E0  FFF6         	movff	printf@f,tblptrl
  3646  0004FE  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3647  000502  0100               	movlb	0	; () banked
  3648  000504  4BE0               	infsnz	printf@f& (0+255),f,b
  3649  000506  2BE1               	incf	(printf@f+1)& (0+255),f,b
  3650  000508                     	if	0	;tblptru may be non-zero
  3651  000508                     	endif
  3652  000508                     	if	0	;tblptru may be non-zero
  3653  000508                     	endif
  3654  000508  0008               	tblrd		*
  3655  00050A  CFF5 F109          	movff	tablat,printf@c
  3656  00050E  0101               	movlb	1	; () banked
  3657  000510  5109               	movf	printf@c& (0+255),w,b
  3658                           
  3659                           ; Switch size 1, requested type "space"
  3660                           ; Number of cases is 5, Range of values is 0 to 120
  3661                           ; switch strategies available:
  3662                           ; Name         Instructions Cycles
  3663                           ; simple_byte           16     9 (average)
  3664                           ;	Chosen strategy is simple_byte
  3665  000512  0A00               	xorlw	0	; case 0
  3666  000514  B4D8               	btfsc	status,2,c
  3667  000516  0012               	return	
  3668  000518  0A64               	xorlw	100	; case 100
  3669  00051A  B4D8               	btfsc	status,2,c
  3670  00051C  D00A               	goto	l4860
  3671  00051E  0A0D               	xorlw	13	; case 105
  3672  000520  B4D8               	btfsc	status,2,c
  3673  000522  D007               	goto	l4860
  3674  000524  0A1C               	xorlw	28	; case 117
  3675  000526  B4D8               	btfsc	status,2,c
  3676  000528  D7E4               	goto	l4854
  3677  00052A  0A0D               	xorlw	13	; case 120
  3678  00052C  B4D8               	btfsc	status,2,c
  3679  00052E  D7DE               	goto	l4852
  3680  000530  D146               	goto	l4958
  3681  000532                     l4860:
  3682                           
  3683                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3684  000532  C106  F0E8         	movff	printf@flag,??_printf
  3685  000536  0EC0               	movlw	192
  3686  000538  0100               	movlb	0	; () banked
  3687  00053A  17E8               	andwf	??_printf& (0+255),f,b
  3688  00053C  A4D8               	btfss	status,2,c
  3689  00053E  D019               	goto	l4872
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;doprnt.c: 1253: {
  3693                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3694  000540  C101  FFD9         	movff	printf@ap,fsr2l
  3695  000544  C102  FFDA         	movff	printf@ap+1,fsr2h
  3696  000548  CFDE F104          	movff	postinc2,printf@val
  3697  00054C  CFDD F105          	movff	postdec2,printf@val+1
  3698                           
  3699                           ; BSR set to: 0
  3700  000550  0E02               	movlw	2
  3701  000552  0101               	movlb	1	; () banked
  3702  000554  2701               	addwf	printf@ap& (0+255),f,b
  3703  000556  0E00               	movlw	0
  3704  000558  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3705                           
  3706                           ; BSR set to: 1
  3707                           ;doprnt.c: 1261: if((int)val < 0) {
  3708  00055A  0101               	movlb	1	; () banked
  3709  00055C  AF05               	btfss	(printf@val+1)& (0+255),7,b
  3710  00055E  D053               	goto	l4906
  3711                           
  3712                           ; BSR set to: 1
  3713                           ;doprnt.c: 1262: flag |= 0x03;
  3714  000560  0E03               	movlw	3
  3715  000562  0101               	movlb	1	; () banked
  3716  000564  1306               	iorwf	printf@flag& (0+255),f,b
  3717                           
  3718                           ; BSR set to: 1
  3719                           ;doprnt.c: 1263: val = -val;
  3720  000566  0101               	movlb	1	; () banked
  3721  000568  6D04               	negf	printf@val& (0+255),b
  3722  00056A  1F05               	comf	(printf@val+1)& (0+255),f,b
  3723  00056C  B0D8               	btfsc	status,0,c
  3724  00056E  2B05               	incf	(printf@val+1)& (0+255),f,b
  3725                           
  3726                           ; BSR set to: 1
  3727                           ;doprnt.c: 1264: }
  3728                           ;doprnt.c: 1266: }
  3729  000570  D04A               	goto	l4906
  3730  000572                     l4872:
  3731                           
  3732                           ;doprnt.c: 1268: else
  3733                           ;doprnt.c: 1273: {
  3734                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3735  000572  C101  FFD9         	movff	printf@ap,fsr2l
  3736  000576  C102  FFDA         	movff	printf@ap+1,fsr2h
  3737  00057A  CFDE F104          	movff	postinc2,printf@val
  3738  00057E  CFDD F105          	movff	postdec2,printf@val+1
  3739  000582  0E02               	movlw	2
  3740  000584  0101               	movlb	1	; () banked
  3741  000586  2701               	addwf	printf@ap& (0+255),f,b
  3742  000588  0E00               	movlw	0
  3743  00058A  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  3744                           
  3745                           ; BSR set to: 1
  3746                           ;doprnt.c: 1287: }
  3747                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3748  00058C  D03C               	goto	l4906
  3749  00058E                     l4876:
  3750                           
  3751                           ; BSR set to: 1
  3752                           ;doprnt.c: 1302: case 0xC0:
  3753                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3754  00058E  0E01               	movlw	1
  3755  000590  0101               	movlb	1	; () banked
  3756  000592  6F09               	movwf	printf@c& (0+255),b
  3757  000594                     l4878:
  3758                           
  3759                           ; BSR set to: 1
  3760  000594  0E05               	movlw	5
  3761  000596  0101               	movlb	1	; () banked
  3762  000598  1909               	xorwf	printf@c& (0+255),w,b
  3763  00059A  B4D8               	btfsc	status,2,c
  3764  00059C  D040               	goto	l4908
  3765                           
  3766                           ; BSR set to: 1
  3767                           ;doprnt.c: 1306: if(val < dpowers[c])
  3768                           
  3769                           ; BSR set to: 1
  3770                           
  3771                           ; BSR set to: 1
  3772  00059E  0101               	movlb	1	; () banked
  3773  0005A0  5109               	movf	printf@c& (0+255),w,b
  3774  0005A2  0D02               	mullw	2
  3775  0005A4  0EB6               	movlw	low _dpowers
  3776  0005A6  24F3               	addwf	prodl,w,c
  3777  0005A8  6EF6               	movwf	tblptrl,c
  3778  0005AA  0EFD               	movlw	high _dpowers
  3779  0005AC  20F4               	addwfc	prodh,w,c
  3780  0005AE  6EF7               	movwf	tblptrh,c
  3781  0005B0                     	if	0	;There are less than 3 active tblptr bytes
  3782  0005B0                     	endif
  3783  0005B0  0009               	tblrd		*+
  3784  0005B2  50F5               	movf	tablat,w,c
  3785  0005B4  0101               	movlb	1	; () banked
  3786  0005B6  5D04               	subwf	printf@val& (0+255),w,b
  3787  0005B8  0009               	tblrd		*+
  3788  0005BA  50F5               	movf	tablat,w,c
  3789  0005BC  0101               	movlb	1	; () banked
  3790  0005BE  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3791  0005C0  A0D8               	btfss	status,0,c
  3792  0005C2  D02D               	goto	l4908
  3793                           
  3794                           ; BSR set to: 1
  3795                           
  3796                           ; BSR set to: 1
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;doprnt.c: 1307: break;
  3800  0005C4  0101               	movlb	1	; () banked
  3801  0005C6  2B09               	incf	printf@c& (0+255),f,b
  3802  0005C8  D7E5               	goto	l4878
  3803  0005CA                     l4890:
  3804                           
  3805                           ; BSR set to: 1
  3806                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3807  0005CA  0E01               	movlw	1
  3808  0005CC  0101               	movlb	1	; () banked
  3809  0005CE  6F09               	movwf	printf@c& (0+255),b
  3810  0005D0                     l4892:
  3811                           
  3812                           ; BSR set to: 1
  3813  0005D0  0E04               	movlw	4
  3814  0005D2  0101               	movlb	1	; () banked
  3815  0005D4  1909               	xorwf	printf@c& (0+255),w,b
  3816  0005D6  B4D8               	btfsc	status,2,c
  3817  0005D8  D022               	goto	l4908
  3818                           
  3819                           ; BSR set to: 1
  3820                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3821                           
  3822                           ; BSR set to: 1
  3823                           
  3824                           ; BSR set to: 1
  3825  0005DA  0101               	movlb	1	; () banked
  3826  0005DC  5109               	movf	printf@c& (0+255),w,b
  3827  0005DE  0D02               	mullw	2
  3828  0005E0  0EC0               	movlw	low _hexpowers
  3829  0005E2  24F3               	addwf	prodl,w,c
  3830  0005E4  6EF6               	movwf	tblptrl,c
  3831  0005E6  0EFD               	movlw	high _hexpowers
  3832  0005E8  20F4               	addwfc	prodh,w,c
  3833  0005EA  6EF7               	movwf	tblptrh,c
  3834  0005EC                     	if	0	;There are less than 3 active tblptr bytes
  3835  0005EC                     	endif
  3836  0005EC  0009               	tblrd		*+
  3837  0005EE  50F5               	movf	tablat,w,c
  3838  0005F0  0101               	movlb	1	; () banked
  3839  0005F2  5D04               	subwf	printf@val& (0+255),w,b
  3840  0005F4  0009               	tblrd		*+
  3841  0005F6  50F5               	movf	tablat,w,c
  3842  0005F8  0101               	movlb	1	; () banked
  3843  0005FA  5905               	subwfb	(printf@val+1)& (0+255),w,b
  3844  0005FC  A0D8               	btfss	status,0,c
  3845  0005FE  D00F               	goto	l4908
  3846                           
  3847                           ; BSR set to: 1
  3848                           
  3849                           ; BSR set to: 1
  3850                           
  3851                           ; BSR set to: 1
  3852                           ;doprnt.c: 1318: break;
  3853  000600  0101               	movlb	1	; () banked
  3854  000602  2B09               	incf	printf@c& (0+255),f,b
  3855  000604  D7E5               	goto	l4892
  3856  000606                     l4906:
  3857                           
  3858                           ; BSR set to: 1
  3859  000606  0101               	movlb	1	; () banked
  3860  000608  5106               	movf	printf@flag& (0+255),w,b
  3861  00060A  0BC0               	andlw	192
  3862                           
  3863                           ; Switch size 1, requested type "space"
  3864                           ; Number of cases is 3, Range of values is 0 to 192
  3865                           ; switch strategies available:
  3866                           ; Name         Instructions Cycles
  3867                           ; simple_byte           10     6 (average)
  3868                           ;	Chosen strategy is simple_byte
  3869  00060C  0A00               	xorlw	0	; case 0
  3870  00060E  B4D8               	btfsc	status,2,c
  3871  000610  D7BE               	goto	l4876
  3872  000612  0A80               	xorlw	128	; case 128
  3873  000614  B4D8               	btfsc	status,2,c
  3874  000616  D7D9               	goto	l4890
  3875  000618  0A40               	xorlw	64	; case 192
  3876  00061A  B4D8               	btfsc	status,2,c
  3877  00061C  D7B8               	goto	l4876
  3878  00061E                     l4908:
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3882  00061E  0101               	movlb	1	; () banked
  3883  000620  5107               	movf	printf@width& (0+255),w,b
  3884  000622  0101               	movlb	1	; () banked
  3885  000624  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3886  000626  B4D8               	btfsc	status,2,c
  3887  000628  D00B               	goto	l4914
  3888                           
  3889                           ; BSR set to: 1
  3890  00062A  C106  F0E8         	movff	printf@flag,??_printf
  3891  00062E  0E03               	movlw	3
  3892  000630  0100               	movlb	0	; () banked
  3893  000632  17E8               	andwf	??_printf& (0+255),f,b
  3894  000634  B4D8               	btfsc	status,2,c
  3895  000636  D004               	goto	l4914
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;doprnt.c: 1346: width--;
  3899  000638  0101               	movlb	1	; () banked
  3900  00063A  0707               	decf	printf@width& (0+255),f,b
  3901  00063C  A0D8               	btfss	status,0,c
  3902  00063E  0708               	decf	(printf@width+1)& (0+255),f,b
  3903  000640                     l4914:
  3904                           
  3905                           ;doprnt.c: 1381: if(width > c)
  3906  000640  0E80               	movlw	128
  3907  000642  0101               	movlb	1	; () banked
  3908  000644  BF09               	btfsc	printf@c& (0+255),7,b
  3909  000646  0E7F               	movlw	127
  3910  000648  0100               	movlb	0	; () banked
  3911  00064A  6FE8               	movwf	??_printf& (0+255),b
  3912  00064C  0101               	movlb	1	; () banked
  3913  00064E  5107               	movf	printf@width& (0+255),w,b
  3914  000650  0101               	movlb	1	; () banked
  3915  000652  5D09               	subwf	printf@c& (0+255),w,b
  3916  000654  0101               	movlb	1	; () banked
  3917  000656  5108               	movf	(printf@width+1)& (0+255),w,b
  3918  000658  0A80               	xorlw	128
  3919  00065A  0100               	movlb	0	; () banked
  3920  00065C  59E8               	subwfb	??_printf& (0+255),w,b
  3921  00065E  B0D8               	btfsc	status,0,c
  3922  000660  D00B               	goto	l4918
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 1382: width -= c;
  3926  000662  0101               	movlb	1	; () banked
  3927  000664  5109               	movf	printf@c& (0+255),w,b
  3928  000666  0101               	movlb	1	; () banked
  3929  000668  5F07               	subwf	printf@width& (0+255),f,b
  3930  00066A  0E00               	movlw	0
  3931  00066C  0101               	movlb	1	; () banked
  3932  00066E  BF09               	btfsc	printf@c& (0+255),7,b
  3933  000670  0EFF               	movlw	255
  3934  000672  0101               	movlb	1	; () banked
  3935  000674  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  3936  000676  D005               	goto	l4920
  3937  000678                     l4918:
  3938                           
  3939                           ;doprnt.c: 1383: else
  3940                           ;doprnt.c: 1384: width = 0;
  3941  000678  0E00               	movlw	0
  3942  00067A  0101               	movlb	1	; () banked
  3943  00067C  6F08               	movwf	(printf@width+1)& (0+255),b
  3944  00067E  0E00               	movlw	0
  3945  000680  6F07               	movwf	printf@width& (0+255),b
  3946  000682                     l4920:
  3947                           
  3948                           ; BSR set to: 1
  3949                           ;doprnt.c: 1387: if(flag & 0x04) {
  3950  000682  0101               	movlb	1	; () banked
  3951  000684  A506               	btfss	printf@flag& (0+255),2,b
  3952  000686  D018               	goto	l4932
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;doprnt.c: 1392: if(flag & 0x03)
  3956  000688  C106  F0E8         	movff	printf@flag,??_printf
  3957  00068C  0E03               	movlw	3
  3958  00068E  0100               	movlb	0	; () banked
  3959  000690  17E8               	andwf	??_printf& (0+255),f,b
  3960  000692  B4D8               	btfsc	status,2,c
  3961  000694  D003               	goto	l4926
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1393: (putch('-') );
  3965  000696  0E2D               	movlw	45
  3966  000698  EC73  F015         	call	_putch
  3967  00069C                     l4926:
  3968                           
  3969                           ;doprnt.c: 1415: if(width)
  3970  00069C  0101               	movlb	1	; () banked
  3971  00069E  5107               	movf	printf@width& (0+255),w,b
  3972  0006A0  0101               	movlb	1	; () banked
  3973  0006A2  1108               	iorwf	(printf@width+1)& (0+255),w,b
  3974  0006A4  B4D8               	btfsc	status,2,c
  3975  0006A6  D025               	goto	l4942
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;doprnt.c: 1417: (putch('0') );
  3979                           
  3980                           ; BSR set to: 1
  3981                           
  3982                           ;doprnt.c: 1416: do
  3983  0006A8  0E30               	movlw	48
  3984  0006AA  EC73  F015         	call	_putch
  3985                           
  3986                           ;doprnt.c: 1418: while(--width);
  3987  0006AE  0101               	movlb	1	; () banked
  3988  0006B0  0707               	decf	printf@width& (0+255),f,b
  3989  0006B2  A0D8               	btfss	status,0,c
  3990  0006B4  0708               	decf	(printf@width+1)& (0+255),f,b
  3991  0006B6  D7F2               	goto	l4926
  3992  0006B8                     l4932:
  3993                           
  3994                           ; BSR set to: 1
  3995                           ;doprnt.c: 1422: {
  3996                           ;doprnt.c: 1424: if(width
  3997                           ;doprnt.c: 1428: )
  3998  0006B8  0101               	movlb	1	; () banked
  3999  0006BA  5107               	movf	printf@width& (0+255),w,b
  4000  0006BC  0101               	movlb	1	; () banked
  4001  0006BE  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4002  0006C0  B4D8               	btfsc	status,2,c
  4003  0006C2  D00D               	goto	l4938
  4004  0006C4                     l4934:
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;doprnt.c: 1430: (putch(' ') );
  4008  0006C4  0E20               	movlw	32
  4009  0006C6  EC73  F015         	call	_putch
  4010                           
  4011                           ;doprnt.c: 1431: while(--width);
  4012  0006CA  0101               	movlb	1	; () banked
  4013  0006CC  0707               	decf	printf@width& (0+255),f,b
  4014  0006CE  A0D8               	btfss	status,0,c
  4015  0006D0  0708               	decf	(printf@width+1)& (0+255),f,b
  4016  0006D2  0101               	movlb	1	; () banked
  4017  0006D4  5107               	movf	printf@width& (0+255),w,b
  4018  0006D6  0101               	movlb	1	; () banked
  4019  0006D8  1108               	iorwf	(printf@width+1)& (0+255),w,b
  4020  0006DA  A4D8               	btfss	status,2,c
  4021  0006DC  D7F3               	goto	l4934
  4022  0006DE                     l4938:
  4023                           
  4024                           ; BSR set to: 1
  4025                           ;doprnt.c: 1438: if(flag & 0x03)
  4026  0006DE  C106  F0E8         	movff	printf@flag,??_printf
  4027  0006E2  0E03               	movlw	3
  4028  0006E4  0100               	movlb	0	; () banked
  4029  0006E6  17E8               	andwf	??_printf& (0+255),f,b
  4030  0006E8  B4D8               	btfsc	status,2,c
  4031  0006EA  D003               	goto	l4942
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;doprnt.c: 1439: (putch('-') );
  4035  0006EC  0E2D               	movlw	45
  4036  0006EE  EC73  F015         	call	_putch
  4037  0006F2                     l4942:
  4038                           
  4039                           ;doprnt.c: 1469: }
  4040                           ;doprnt.c: 1472: prec = c;
  4041  0006F2  C109  F103         	movff	printf@c,printf@prec
  4042                           
  4043                           ;doprnt.c: 1474: while(prec--) {
  4044  0006F6  D05D               	goto	l4956
  4045  0006F8                     l4944:
  4046                           
  4047                           ;doprnt.c: 1486: case 0xC0:
  4048                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4049  0006F8  0101               	movlb	1	; () banked
  4050  0006FA  5103               	movf	printf@prec& (0+255),w,b
  4051  0006FC  0D02               	mullw	2
  4052  0006FE  0EB6               	movlw	low _dpowers
  4053  000700  24F3               	addwf	prodl,w,c
  4054  000702  6EF6               	movwf	tblptrl,c
  4055  000704  0EFD               	movlw	high _dpowers
  4056  000706  20F4               	addwfc	prodh,w,c
  4057  000708  6EF7               	movwf	tblptrh,c
  4058  00070A                     	if	0	;There are less than 3 active tblptr bytes
  4059  00070A                     	endif
  4060  00070A  0009               	tblrd		*+
  4061  00070C  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4062  000710  000A               	tblrd		*-
  4063  000712  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4064  000716  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4065  00071A  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4066  00071E  EC11  F012         	call	___lwdiv	;wreg free
  4067  000722  C0D4  F0DB         	movff	?___lwdiv,___lwmod@dividend
  4068  000726  C0D5  F0DC         	movff	?___lwdiv+1,___lwmod@dividend+1
  4069  00072A  0E00               	movlw	0
  4070  00072C  0100               	movlb	0	; () banked
  4071  00072E  6FDE               	movwf	(___lwmod@divisor+1)& (0+255),b
  4072  000730  0E0A               	movlw	10
  4073  000732  6FDD               	movwf	___lwmod@divisor& (0+255),b
  4074  000734  ECBD  F012         	call	___lwmod	;wreg free
  4075  000738  0100               	movlb	0	; () banked
  4076  00073A  51DB               	movf	?___lwmod& (0+255),w,b
  4077  00073C  0F30               	addlw	48
  4078  00073E  0101               	movlb	1	; () banked
  4079  000740  6F09               	movwf	printf@c& (0+255),b
  4080                           
  4081                           ;doprnt.c: 1491: break;
  4082  000742  D033               	goto	l4954
  4083  000744                     l4946:
  4084                           
  4085                           ; BSR set to: 1
  4086                           ;doprnt.c: 1499: {
  4087                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4088  000744  C104  F0D4         	movff	printf@val,___lwdiv@dividend
  4089  000748  C105  F0D5         	movff	printf@val+1,___lwdiv@dividend+1
  4090  00074C  0101               	movlb	1	; () banked
  4091  00074E  5103               	movf	printf@prec& (0+255),w,b
  4092  000750  0D02               	mullw	2
  4093  000752  0EC0               	movlw	low _hexpowers
  4094  000754  24F3               	addwf	prodl,w,c
  4095  000756  6EF6               	movwf	tblptrl,c
  4096  000758  0EFD               	movlw	high _hexpowers
  4097  00075A  20F4               	addwfc	prodh,w,c
  4098  00075C  6EF7               	movwf	tblptrh,c
  4099  00075E                     	if	0	;There are less than 3 active tblptr bytes
  4100  00075E                     	endif
  4101  00075E  0009               	tblrd		*+
  4102  000760  CFF5 F0D6          	movff	tablat,___lwdiv@divisor
  4103  000764  000A               	tblrd		*-
  4104  000766  CFF5 F0D7          	movff	tablat,___lwdiv@divisor+1
  4105  00076A  EC11  F012         	call	___lwdiv	;wreg free
  4106  00076E  0100               	movlb	0	; () banked
  4107  000770  51D4               	movf	?___lwdiv& (0+255),w,b
  4108  000772  0B0F               	andlw	15
  4109  000774  0101               	movlb	1	; () banked
  4110  000776  6F00               	movwf	printf@idx& (0+255),b
  4111                           
  4112                           ; BSR set to: 1
  4113                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4114  000778  0101               	movlb	1	; () banked
  4115  00077A  5100               	movf	printf@idx& (0+255),w,b
  4116  00077C  0D01               	mullw	1
  4117  00077E  0E83               	movlw	low STR_29
  4118  000780  24F3               	addwf	prodl,w,c
  4119  000782  6EF6               	movwf	tblptrl,c
  4120  000784  0EFF               	movlw	high STR_29
  4121  000786  20F4               	addwfc	prodh,w,c
  4122  000788  6EF7               	movwf	tblptrh,c
  4123  00078A                     	if	0	;There are less than 3 active tblptr bytes
  4124  00078A                     	endif
  4125  00078A  0008               	tblrd		*
  4126  00078C  CFF5 F109          	movff	tablat,printf@c
  4127                           
  4128                           ; BSR set to: 1
  4129                           ;doprnt.c: 1523: }
  4130                           
  4131                           ;doprnt.c: 1508: }
  4132                           ;doprnt.c: 1510: break;
  4133  000790  D00C               	goto	l4954
  4134  000792                     l4952:
  4135  000792  0101               	movlb	1	; () banked
  4136  000794  5106               	movf	printf@flag& (0+255),w,b
  4137  000796  0BC0               	andlw	192
  4138                           
  4139                           ; Switch size 1, requested type "space"
  4140                           ; Number of cases is 3, Range of values is 0 to 192
  4141                           ; switch strategies available:
  4142                           ; Name         Instructions Cycles
  4143                           ; simple_byte           10     6 (average)
  4144                           ;	Chosen strategy is simple_byte
  4145  000798  0A00               	xorlw	0	; case 0
  4146  00079A  B4D8               	btfsc	status,2,c
  4147  00079C  D7AD               	goto	l4944
  4148  00079E  0A80               	xorlw	128	; case 128
  4149  0007A0  B4D8               	btfsc	status,2,c
  4150  0007A2  D7D0               	goto	l4946
  4151  0007A4  0A40               	xorlw	64	; case 192
  4152  0007A6  B4D8               	btfsc	status,2,c
  4153  0007A8  D7A7               	goto	l4944
  4154  0007AA                     l4954:
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;doprnt.c: 1524: (putch(c) );
  4158  0007AA  0101               	movlb	1	; () banked
  4159  0007AC  5109               	movf	printf@c& (0+255),w,b
  4160  0007AE  EC73  F015         	call	_putch
  4161  0007B2                     l4956:
  4162  0007B2  0101               	movlb	1	; () banked
  4163  0007B4  0703               	decf	printf@prec& (0+255),f,b
  4164  0007B6  0101               	movlb	1	; () banked
  4165  0007B8  2903               	incf	printf@prec& (0+255),w,b
  4166  0007BA  A4D8               	btfss	status,2,c
  4167  0007BC  D7EA               	goto	l4952
  4168  0007BE                     l4958:
  4169  0007BE  C0E0  FFF6         	movff	printf@f,tblptrl
  4170  0007C2  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4171  0007C6  0100               	movlb	0	; () banked
  4172  0007C8  4BE0               	infsnz	printf@f& (0+255),f,b
  4173  0007CA  2BE1               	incf	(printf@f+1)& (0+255),f,b
  4174  0007CC                     	if	0	;tblptru may be non-zero
  4175  0007CC                     	endif
  4176  0007CC                     	if	0	;tblptru may be non-zero
  4177  0007CC                     	endif
  4178  0007CC  0008               	tblrd		*
  4179  0007CE  CFF5 F109          	movff	tablat,printf@c
  4180  0007D2  0101               	movlb	1	; () banked
  4181  0007D4  5109               	movf	printf@c& (0+255),w,b
  4182  0007D6  B4D8               	btfsc	status,2,c
  4183  0007D8  0012               	return	
  4184  0007DA  D61C               	goto	l4828
  4185  0007DC                     __end_of_printf:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           intcon2	equ	0xFF1
  4195                           intcon3	equ	0xFF0
  4196                           postinc0	equ	0xFEE
  4197                           wreg	equ	0xFE8
  4198                           indf2	equ	0xFDF
  4199                           postinc2	equ	0xFDE
  4200                           postdec2	equ	0xFDD
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _putch *****************
  4206 ;; Defined at:
  4207 ;;		line 31 in file "lcd.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  data            1    wreg     unsigned char 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  data            1   18[BANK0 ] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;Total ram usage:        1 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    8
  4228 ;; This function calls:
  4229 ;;		_lcdNibble
  4230 ;; This function is called by:
  4231 ;;		_printf
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text12
  4236  002AE6                     __ptext12:
  4237                           	opt stack 0
  4238  002AE6                     _putch:
  4239                           	opt stack 20
  4240                           
  4241                           ;incstack = 0
  4242                           ;putch@data stored from wreg
  4243  002AE6  0100               	movlb	0	; () banked
  4244  002AE8  6FD6               	movwf	putch@data& (0+255),b
  4245                           
  4246                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4247  002AEA  848C               	bsf	3980,2,c	;volatile
  4248                           
  4249                           ;lcd.c: 33: lcdNibble(data);
  4250  002AEC  0100               	movlb	0	; () banked
  4251  002AEE  51D6               	movf	putch@data& (0+255),w,b
  4252  002AF0  ECEE  F012         	call	_lcdNibble
  4253  002AF4  0012               	return		;funcret
  4254  002AF6                     __end_of_putch:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           intcon2	equ	0xFF1
  4264                           intcon3	equ	0xFF0
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _isdigit *****************
  4275 ;; Defined at:
  4276 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  c               1    wreg     unsigned char 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  c               1   18[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;		None               void
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;Total ram usage:        3 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    7
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_printf
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text13
  4305  0029A8                     __ptext13:
  4306                           	opt stack 0
  4307  0029A8                     _isdigit:
  4308                           	opt stack 21
  4309                           
  4310                           ;incstack = 0
  4311                           ;isdigit@c stored from wreg
  4312  0029A8  0100               	movlb	0	; () banked
  4313  0029AA  6FD6               	movwf	isdigit@c& (0+255),b
  4314  0029AC  0E00               	movlw	0
  4315  0029AE  0100               	movlb	0	; () banked
  4316  0029B0  6FD5               	movwf	_isdigit$819& (0+255),b
  4317                           
  4318                           ; BSR set to: 0
  4319  0029B2  0E3A               	movlw	58
  4320  0029B4  0100               	movlb	0	; () banked
  4321  0029B6  61D6               	cpfslt	isdigit@c& (0+255),b
  4322  0029B8  D007               	goto	l4774
  4323                           
  4324                           ; BSR set to: 0
  4325  0029BA  0E2F               	movlw	47
  4326  0029BC  0100               	movlb	0	; () banked
  4327  0029BE  65D6               	cpfsgt	isdigit@c& (0+255),b
  4328  0029C0  D003               	goto	l4774
  4329                           
  4330                           ; BSR set to: 0
  4331  0029C2  0E01               	movlw	1
  4332  0029C4  0100               	movlb	0	; () banked
  4333  0029C6  6FD5               	movwf	_isdigit$819& (0+255),b
  4334  0029C8                     l4774:
  4335                           
  4336                           ; BSR set to: 0
  4337  0029C8  C0D5  F0D4         	movff	_isdigit$819,??_isdigit
  4338  0029CC  0100               	movlb	0	; () banked
  4339  0029CE  31D4               	rrcf	??_isdigit& (0+255),w,b
  4340  0029D0  0012               	return	
  4341  0029D2                     __end_of_isdigit:
  4342                           	opt stack 0
  4343                           tblptru	equ	0xFF8
  4344                           tblptrh	equ	0xFF7
  4345                           tblptrl	equ	0xFF6
  4346                           tablat	equ	0xFF5
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           intcon2	equ	0xFF1
  4351                           intcon3	equ	0xFF0
  4352                           postinc0	equ	0xFEE
  4353                           wreg	equ	0xFE8
  4354                           indf2	equ	0xFDF
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function ___wmul *****************
  4362 ;; Defined at:
  4363 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4366 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  product         2   20[BANK0 ] unsigned int 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  2   16[BANK0 ] unsigned int 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, prodl, prodh
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        6 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    7
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_printf
  4389 ;;		_servo_rotate1
  4390 ;;		_servo_rotate2
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           	psect	text14
  4395  002916                     __ptext14:
  4396                           	opt stack 0
  4397  002916                     ___wmul:
  4398                           	opt stack 21
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;incstack = 0
  4402  002916  0100               	movlb	0	; () banked
  4403  002918  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4404  00291A  0100               	movlb	0	; () banked
  4405  00291C  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4406  00291E  CFF3 F0D8          	movff	prodl,___wmul@product
  4407  002922  CFF4 F0D9          	movff	prodh,___wmul@product+1
  4408  002926  0100               	movlb	0	; () banked
  4409  002928  51D4               	movf	___wmul@multiplier& (0+255),w,b
  4410  00292A  0100               	movlb	0	; () banked
  4411  00292C  03D7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4412  00292E  50F3               	movf	prodl,w,c
  4413  002930  0100               	movlb	0	; () banked
  4414  002932  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4415  002934  0100               	movlb	0	; () banked
  4416  002936  51D5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4417  002938  0100               	movlb	0	; () banked
  4418  00293A  03D6               	mulwf	___wmul@multiplicand& (0+255),b
  4419  00293C  50F3               	movf	prodl,w,c
  4420  00293E  0100               	movlb	0	; () banked
  4421  002940  27D9               	addwf	(___wmul@product+1)& (0+255),f,b
  4422                           
  4423                           ; BSR set to: 0
  4424  002942  C0D8  F0D4         	movff	___wmul@product,?___wmul
  4425  002946  C0D9  F0D5         	movff	___wmul@product+1,?___wmul+1
  4426  00294A  0012               	return	
  4427  00294C                     __end_of___wmul:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           prodh	equ	0xFF4
  4434                           prodl	equ	0xFF3
  4435                           intcon	equ	0xFF2
  4436                           intcon2	equ	0xFF1
  4437                           intcon3	equ	0xFF0
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           postdec2	equ	0xFDD
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function ___lwmod *****************
  4448 ;; Defined at:
  4449 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  dividend        2   23[BANK0 ] unsigned int 
  4452 ;;  divisor         2   25[BANK0 ] unsigned int 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  counter         1   27[BANK0 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  2   23[BANK0 ] unsigned int 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:        5 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    7
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_printf
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text15
  4479  00257A                     __ptext15:
  4480                           	opt stack 0
  4481  00257A                     ___lwmod:
  4482                           	opt stack 21
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;incstack = 0
  4486  00257A  0100               	movlb	0	; () banked
  4487  00257C  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4488  00257E  0100               	movlb	0	; () banked
  4489  002580  11DE               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4490  002582  B4D8               	btfsc	status,2,c
  4491  002584  D026               	goto	l886
  4492                           
  4493                           ; BSR set to: 0
  4494  002586  0E01               	movlw	1
  4495  002588  0100               	movlb	0	; () banked
  4496  00258A  6FDF               	movwf	___lwmod@counter& (0+255),b
  4497  00258C  D006               	goto	l4812
  4498  00258E                     l4810:
  4499                           
  4500                           ; BSR set to: 0
  4501  00258E  0100               	movlb	0	; () banked
  4502  002590  90D8               	bcf	status,0,c
  4503  002592  37DD               	rlcf	___lwmod@divisor& (0+255),f,b
  4504  002594  37DE               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4505  002596  0100               	movlb	0	; () banked
  4506  002598  2BDF               	incf	___lwmod@counter& (0+255),f,b
  4507  00259A                     l4812:
  4508                           
  4509                           ; BSR set to: 0
  4510  00259A  0100               	movlb	0	; () banked
  4511  00259C  AFDE               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4512  00259E  D7F7               	goto	l4810
  4513  0025A0                     l4814:
  4514                           
  4515                           ; BSR set to: 0
  4516  0025A0  0100               	movlb	0	; () banked
  4517  0025A2  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4518  0025A4  0100               	movlb	0	; () banked
  4519  0025A6  5DDB               	subwf	___lwmod@dividend& (0+255),w,b
  4520  0025A8  0100               	movlb	0	; () banked
  4521  0025AA  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4522  0025AC  0100               	movlb	0	; () banked
  4523  0025AE  59DC               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4524  0025B0  A0D8               	btfss	status,0,c
  4525  0025B2  D008               	goto	l4818
  4526                           
  4527                           ; BSR set to: 0
  4528  0025B4  0100               	movlb	0	; () banked
  4529  0025B6  51DD               	movf	___lwmod@divisor& (0+255),w,b
  4530  0025B8  0100               	movlb	0	; () banked
  4531  0025BA  5FDB               	subwf	___lwmod@dividend& (0+255),f,b
  4532  0025BC  0100               	movlb	0	; () banked
  4533  0025BE  51DE               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4534  0025C0  0100               	movlb	0	; () banked
  4535  0025C2  5BDC               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4536  0025C4                     l4818:
  4537                           
  4538                           ; BSR set to: 0
  4539  0025C4  0100               	movlb	0	; () banked
  4540  0025C6  90D8               	bcf	status,0,c
  4541  0025C8  33DE               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4542  0025CA  33DD               	rrcf	___lwmod@divisor& (0+255),f,b
  4543                           
  4544                           ; BSR set to: 0
  4545  0025CC  0100               	movlb	0	; () banked
  4546  0025CE  2FDF               	decfsz	___lwmod@counter& (0+255),f,b
  4547  0025D0  D7E7               	goto	l4814
  4548  0025D2                     l886:
  4549                           
  4550                           ; BSR set to: 0
  4551  0025D2  C0DB  F0DB         	movff	___lwmod@dividend,?___lwmod
  4552  0025D6  C0DC  F0DC         	movff	___lwmod@dividend+1,?___lwmod+1
  4553                           
  4554                           ; BSR set to: 0
  4555  0025DA  0012               	return		;funcret
  4556  0025DC                     __end_of___lwmod:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           intcon	equ	0xFF2
  4565                           intcon2	equ	0xFF1
  4566                           intcon3	equ	0xFF0
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function ___lwdiv *****************
  4577 ;; Defined at:
  4578 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  dividend        2   16[BANK0 ] unsigned int 
  4581 ;;  divisor         2   18[BANK0 ] unsigned int 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  quotient        2   21[BANK0 ] unsigned int 
  4584 ;;  counter         1   20[BANK0 ] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  2   16[BANK0 ] unsigned int 
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:        7 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    7
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_printf
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           	psect	text16
  4609  002422                     __ptext16:
  4610                           	opt stack 0
  4611  002422                     ___lwdiv:
  4612                           	opt stack 21
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;incstack = 0
  4616  002422  0E00               	movlw	0
  4617  002424  0100               	movlb	0	; () banked
  4618  002426  6FDA               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4619  002428  0E00               	movlw	0
  4620  00242A  6FD9               	movwf	___lwdiv@quotient& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623  00242C  0100               	movlb	0	; () banked
  4624  00242E  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4625  002430  0100               	movlb	0	; () banked
  4626  002432  11D7               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4627  002434  B4D8               	btfsc	status,2,c
  4628  002436  D02C               	goto	l876
  4629                           
  4630                           ; BSR set to: 0
  4631  002438  0E01               	movlw	1
  4632  00243A  0100               	movlb	0	; () banked
  4633  00243C  6FD8               	movwf	___lwdiv@counter& (0+255),b
  4634  00243E  D006               	goto	l4792
  4635  002440                     l4790:
  4636                           
  4637                           ; BSR set to: 0
  4638  002440  0100               	movlb	0	; () banked
  4639  002442  90D8               	bcf	status,0,c
  4640  002444  37D6               	rlcf	___lwdiv@divisor& (0+255),f,b
  4641  002446  37D7               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4642  002448  0100               	movlb	0	; () banked
  4643  00244A  2BD8               	incf	___lwdiv@counter& (0+255),f,b
  4644  00244C                     l4792:
  4645                           
  4646                           ; BSR set to: 0
  4647  00244C  0100               	movlb	0	; () banked
  4648  00244E  AFD7               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4649  002450  D7F7               	goto	l4790
  4650  002452                     l4794:
  4651                           
  4652                           ; BSR set to: 0
  4653  002452  0100               	movlb	0	; () banked
  4654  002454  90D8               	bcf	status,0,c
  4655  002456  37D9               	rlcf	___lwdiv@quotient& (0+255),f,b
  4656  002458  37DA               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4657                           
  4658                           ; BSR set to: 0
  4659  00245A  0100               	movlb	0	; () banked
  4660  00245C  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4661  00245E  0100               	movlb	0	; () banked
  4662  002460  5DD4               	subwf	___lwdiv@dividend& (0+255),w,b
  4663  002462  0100               	movlb	0	; () banked
  4664  002464  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4665  002466  0100               	movlb	0	; () banked
  4666  002468  59D5               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4667  00246A  A0D8               	btfss	status,0,c
  4668  00246C  D00A               	goto	l4802
  4669                           
  4670                           ; BSR set to: 0
  4671  00246E  0100               	movlb	0	; () banked
  4672  002470  51D6               	movf	___lwdiv@divisor& (0+255),w,b
  4673  002472  0100               	movlb	0	; () banked
  4674  002474  5FD4               	subwf	___lwdiv@dividend& (0+255),f,b
  4675  002476  0100               	movlb	0	; () banked
  4676  002478  51D7               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4677  00247A  0100               	movlb	0	; () banked
  4678  00247C  5BD5               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4679                           
  4680                           ; BSR set to: 0
  4681  00247E  0100               	movlb	0	; () banked
  4682  002480  81D9               	bsf	___lwdiv@quotient& (0+255),0,b
  4683  002482                     l4802:
  4684                           
  4685                           ; BSR set to: 0
  4686  002482  0100               	movlb	0	; () banked
  4687  002484  90D8               	bcf	status,0,c
  4688  002486  33D7               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4689  002488  33D6               	rrcf	___lwdiv@divisor& (0+255),f,b
  4690                           
  4691                           ; BSR set to: 0
  4692  00248A  0100               	movlb	0	; () banked
  4693  00248C  2FD8               	decfsz	___lwdiv@counter& (0+255),f,b
  4694  00248E  D7E1               	goto	l4794
  4695  002490                     l876:
  4696                           
  4697                           ; BSR set to: 0
  4698  002490  C0D9  F0D4         	movff	___lwdiv@quotient,?___lwdiv
  4699  002494  C0DA  F0D5         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4700                           
  4701                           ; BSR set to: 0
  4702  002498  0012               	return		;funcret
  4703  00249A                     __end_of___lwdiv:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           intcon2	equ	0xFF1
  4713                           intcon3	equ	0xFF0
  4714                           postinc0	equ	0xFEE
  4715                           wreg	equ	0xFE8
  4716                           indf2	equ	0xFDF
  4717                           postinc2	equ	0xFDE
  4718                           postdec2	equ	0xFDD
  4719                           fsr2h	equ	0xFDA
  4720                           fsr2l	equ	0xFD9
  4721                           status	equ	0xFD8
  4722                           
  4723 ;; *************** function _lcdInst *****************
  4724 ;; Defined at:
  4725 ;;		line 26 in file "lcd.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  data            1    wreg     unsigned char 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;  data            1   18[BANK0 ] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, status,2, status,0, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;Total ram usage:        1 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    8
  4746 ;; This function calls:
  4747 ;;		_lcdNibble
  4748 ;; This function is called by:
  4749 ;;		_initLCD
  4750 ;;		_standby
  4751 ;;		_date_time
  4752 ;;		_bottle_count
  4753 ;;		_bottle_time
  4754 ;;		_operation
  4755 ;;		_operationend
  4756 ;;		_emergencystop
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text17
  4761  002AF6                     __ptext17:
  4762                           	opt stack 0
  4763  002AF6                     _lcdInst:
  4764                           	opt stack 21
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;incstack = 0
  4768                           ;lcdInst@data stored from wreg
  4769  002AF6  0100               	movlb	0	; () banked
  4770  002AF8  6FD6               	movwf	lcdInst@data& (0+255),b
  4771                           
  4772                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4773  002AFA  948C               	bcf	3980,2,c	;volatile
  4774                           
  4775                           ;lcd.c: 28: lcdNibble(data);
  4776  002AFC  0100               	movlb	0	; () banked
  4777  002AFE  51D6               	movf	lcdInst@data& (0+255),w,b
  4778  002B00  ECEE  F012         	call	_lcdNibble
  4779  002B04  0012               	return		;funcret
  4780  002B06                     __end_of_lcdInst:
  4781                           	opt stack 0
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           intcon	equ	0xFF2
  4789                           intcon2	equ	0xFF1
  4790                           intcon3	equ	0xFF0
  4791                           postinc0	equ	0xFEE
  4792                           wreg	equ	0xFE8
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _lcdNibble *****************
  4801 ;; Defined at:
  4802 ;;		line 36 in file "lcd.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  data            1    wreg     unsigned char 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  data            1   17[BANK0 ] unsigned char 
  4807 ;;  temp            1   16[BANK0 ] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      void 
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;Total ram usage:        2 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    7
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_lcdInst
  4828 ;;		_putch
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text18
  4833  0025DC                     __ptext18:
  4834                           	opt stack 0
  4835  0025DC                     _lcdNibble:
  4836                           	opt stack 20
  4837                           
  4838                           ;incstack = 0
  4839                           ;lcdNibble@data stored from wreg
  4840  0025DC  0100               	movlb	0	; () banked
  4841  0025DE  6FD5               	movwf	lcdNibble@data& (0+255),b
  4842                           
  4843                           ;lcd.c: 38: char temp = data & 0xF0;
  4844  0025E0  0100               	movlb	0	; () banked
  4845  0025E2  51D5               	movf	lcdNibble@data& (0+255),w,b
  4846  0025E4  0BF0               	andlw	240
  4847  0025E6  0100               	movlb	0	; () banked
  4848  0025E8  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4849                           
  4850                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4851  0025EA  508C               	movf	3980,w,c	;volatile
  4852  0025EC  0B0F               	andlw	15
  4853  0025EE  6E8C               	movwf	3980,c	;volatile
  4854                           
  4855                           ;lcd.c: 40: LATD = temp | LATD;
  4856  0025F0  0100               	movlb	0	; () banked
  4857  0025F2  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4858  0025F4  108C               	iorwf	3980,w,c	;volatile
  4859  0025F6  6E8C               	movwf	3980,c	;volatile
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4863  0025F8  968C               	bcf	3980,3,c	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4867  0025FA  0E19               	movlw	25
  4868  0025FC                     u4547:
  4869  0025FC  2EE8               	decfsz	wreg,f,c
  4870  0025FE  D7FE               	bra	u4547
  4871                           
  4872                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4873  002600  868C               	bsf	3980,3,c	;volatile
  4874                           
  4875                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4876  002602  0E19               	movlw	25
  4877  002604                     u4557:
  4878  002604  2EE8               	decfsz	wreg,f,c
  4879  002606  D7FE               	bra	u4557
  4880                           
  4881                           ;lcd.c: 47: data = data << 4;
  4882  002608  0100               	movlb	0	; () banked
  4883  00260A  39D5               	swapf	lcdNibble@data& (0+255),w,b
  4884  00260C  0BF0               	andlw	240
  4885  00260E  0100               	movlb	0	; () banked
  4886  002610  6FD5               	movwf	lcdNibble@data& (0+255),b
  4887                           
  4888                           ;lcd.c: 49: temp = data & 0xF0;
  4889  002612  0100               	movlb	0	; () banked
  4890  002614  51D5               	movf	lcdNibble@data& (0+255),w,b
  4891  002616  0BF0               	andlw	240
  4892  002618  0100               	movlb	0	; () banked
  4893  00261A  6FD4               	movwf	lcdNibble@temp& (0+255),b
  4894                           
  4895                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4896  00261C  508C               	movf	3980,w,c	;volatile
  4897  00261E  0B0F               	andlw	15
  4898  002620  6E8C               	movwf	3980,c	;volatile
  4899                           
  4900                           ;lcd.c: 51: LATD = temp | LATD;
  4901  002622  0100               	movlb	0	; () banked
  4902  002624  51D4               	movf	lcdNibble@temp& (0+255),w,b
  4903  002626  108C               	iorwf	3980,w,c	;volatile
  4904  002628  6E8C               	movwf	3980,c	;volatile
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4908  00262A  968C               	bcf	3980,3,c	;volatile
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4912  00262C  0E19               	movlw	25
  4913  00262E                     u4567:
  4914  00262E  2EE8               	decfsz	wreg,f,c
  4915  002630  D7FE               	bra	u4567
  4916                           
  4917                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4918  002632  868C               	bsf	3980,3,c	;volatile
  4919                           
  4920                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4921  002634  0E19               	movlw	25
  4922  002636                     u4577:
  4923  002636  2EE8               	decfsz	wreg,f,c
  4924  002638  D7FE               	bra	u4577
  4925  00263A  0012               	return		;funcret
  4926  00263C                     __end_of_lcdNibble:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           intcon2	equ	0xFF1
  4936                           intcon3	equ	0xFF0
  4937                           postinc0	equ	0xFEE
  4938                           wreg	equ	0xFE8
  4939                           indf2	equ	0xFDF
  4940                           postinc2	equ	0xFDE
  4941                           postdec2	equ	0xFDD
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function ___awmod *****************
  4947 ;; Defined at:
  4948 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  dividend        2   16[BANK0 ] int 
  4951 ;;  divisor         2   18[BANK0 ] int 
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  sign            1   21[BANK0 ] unsigned char 
  4954 ;;  counter         1   20[BANK0 ] unsigned char 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  2   16[BANK0 ] int 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2, status,0
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;Total ram usage:        6 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    7
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_bottle_count
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text19
  4979  00214C                     __ptext19:
  4980                           	opt stack 0
  4981  00214C                     ___awmod:
  4982                           	opt stack 22
  4983                           
  4984                           ;incstack = 0
  4985  00214C  0E00               	movlw	0
  4986  00214E  0100               	movlb	0	; () banked
  4987  002150  6FD9               	movwf	___awmod@sign& (0+255),b
  4988                           
  4989                           ; BSR set to: 0
  4990  002152  0100               	movlb	0	; () banked
  4991  002154  AFD5               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4992  002156  D008               	goto	l3828
  4993                           
  4994                           ; BSR set to: 0
  4995  002158  0100               	movlb	0	; () banked
  4996  00215A  6DD4               	negf	___awmod@dividend& (0+255),b
  4997  00215C  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  4998  00215E  B0D8               	btfsc	status,0,c
  4999  002160  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5000                           
  5001                           ; BSR set to: 0
  5002  002162  0E01               	movlw	1
  5003  002164  0100               	movlb	0	; () banked
  5004  002166  6FD9               	movwf	___awmod@sign& (0+255),b
  5005  002168                     l3828:
  5006                           
  5007                           ; BSR set to: 0
  5008  002168  0100               	movlb	0	; () banked
  5009  00216A  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5010  00216C  D005               	goto	l3832
  5011                           
  5012                           ; BSR set to: 0
  5013  00216E  0100               	movlb	0	; () banked
  5014  002170  6DD6               	negf	___awmod@divisor& (0+255),b
  5015  002172  1FD7               	comf	(___awmod@divisor+1)& (0+255),f,b
  5016  002174  B0D8               	btfsc	status,0,c
  5017  002176  2BD7               	incf	(___awmod@divisor+1)& (0+255),f,b
  5018  002178                     l3832:
  5019                           
  5020                           ; BSR set to: 0
  5021  002178  0100               	movlb	0	; () banked
  5022  00217A  51D6               	movf	___awmod@divisor& (0+255),w,b
  5023  00217C  0100               	movlb	0	; () banked
  5024  00217E  11D7               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5025  002180  B4D8               	btfsc	status,2,c
  5026  002182  D026               	goto	l3848
  5027                           
  5028                           ; BSR set to: 0
  5029  002184  0E01               	movlw	1
  5030  002186  0100               	movlb	0	; () banked
  5031  002188  6FD8               	movwf	___awmod@counter& (0+255),b
  5032  00218A  D006               	goto	l3838
  5033  00218C                     l3836:
  5034                           
  5035                           ; BSR set to: 0
  5036  00218C  0100               	movlb	0	; () banked
  5037  00218E  90D8               	bcf	status,0,c
  5038  002190  37D6               	rlcf	___awmod@divisor& (0+255),f,b
  5039  002192  37D7               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5040  002194  0100               	movlb	0	; () banked
  5041  002196  2BD8               	incf	___awmod@counter& (0+255),f,b
  5042  002198                     l3838:
  5043                           
  5044                           ; BSR set to: 0
  5045  002198  0100               	movlb	0	; () banked
  5046  00219A  AFD7               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5047  00219C  D7F7               	goto	l3836
  5048  00219E                     l3840:
  5049                           
  5050                           ; BSR set to: 0
  5051  00219E  0100               	movlb	0	; () banked
  5052  0021A0  51D6               	movf	___awmod@divisor& (0+255),w,b
  5053  0021A2  0100               	movlb	0	; () banked
  5054  0021A4  5DD4               	subwf	___awmod@dividend& (0+255),w,b
  5055  0021A6  0100               	movlb	0	; () banked
  5056  0021A8  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5057  0021AA  0100               	movlb	0	; () banked
  5058  0021AC  59D5               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5059  0021AE  A0D8               	btfss	status,0,c
  5060  0021B0  D008               	goto	l3844
  5061                           
  5062                           ; BSR set to: 0
  5063  0021B2  0100               	movlb	0	; () banked
  5064  0021B4  51D6               	movf	___awmod@divisor& (0+255),w,b
  5065  0021B6  0100               	movlb	0	; () banked
  5066  0021B8  5FD4               	subwf	___awmod@dividend& (0+255),f,b
  5067  0021BA  0100               	movlb	0	; () banked
  5068  0021BC  51D7               	movf	(___awmod@divisor+1)& (0+255),w,b
  5069  0021BE  0100               	movlb	0	; () banked
  5070  0021C0  5BD5               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5071  0021C2                     l3844:
  5072                           
  5073                           ; BSR set to: 0
  5074  0021C2  0100               	movlb	0	; () banked
  5075  0021C4  90D8               	bcf	status,0,c
  5076  0021C6  33D7               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5077  0021C8  33D6               	rrcf	___awmod@divisor& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 0
  5080  0021CA  0100               	movlb	0	; () banked
  5081  0021CC  2FD8               	decfsz	___awmod@counter& (0+255),f,b
  5082  0021CE  D7E7               	goto	l3840
  5083  0021D0                     l3848:
  5084                           
  5085                           ; BSR set to: 0
  5086  0021D0  0100               	movlb	0	; () banked
  5087  0021D2  51D9               	movf	___awmod@sign& (0+255),w,b
  5088  0021D4  0100               	movlb	0	; () banked
  5089  0021D6  B4D8               	btfsc	status,2,c
  5090  0021D8  D005               	goto	l3852
  5091                           
  5092                           ; BSR set to: 0
  5093  0021DA  0100               	movlb	0	; () banked
  5094  0021DC  6DD4               	negf	___awmod@dividend& (0+255),b
  5095  0021DE  1FD5               	comf	(___awmod@dividend+1)& (0+255),f,b
  5096  0021E0  B0D8               	btfsc	status,0,c
  5097  0021E2  2BD5               	incf	(___awmod@dividend+1)& (0+255),f,b
  5098  0021E4                     l3852:
  5099                           
  5100                           ; BSR set to: 0
  5101  0021E4  C0D4  F0D4         	movff	___awmod@dividend,?___awmod
  5102  0021E8  C0D5  F0D5         	movff	___awmod@dividend+1,?___awmod+1
  5103  0021EC  0012               	return	
  5104  0021EE                     __end_of___awmod:
  5105                           	opt stack 0
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           intcon	equ	0xFF2
  5113                           intcon2	equ	0xFF1
  5114                           intcon3	equ	0xFF0
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           indf2	equ	0xFDF
  5118                           postinc2	equ	0xFDE
  5119                           postdec2	equ	0xFDD
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _I2C_Master_Init *****************
  5125 ;; Defined at:
  5126 ;;		line 14 in file "I2C.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  c               4   29[BANK0 ] const unsigned long 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2, status,0, cstack
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;Total ram usage:        8 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    8
  5147 ;; This function calls:
  5148 ;;		___lldiv
  5149 ;; This function is called by:
  5150 ;;		_main
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text20
  5155  00263C                     __ptext20:
  5156                           	opt stack 0
  5157  00263C                     _I2C_Master_Init:
  5158                           	opt stack 22
  5159                           
  5160                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;incstack = 0
  5164  00263C  0E00               	movlw	0
  5165  00263E  6EC7               	movwf	4039,c	;volatile
  5166                           
  5167                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  5168  002640  0E28               	movlw	40
  5169  002642  6EC6               	movwf	4038,c	;volatile
  5170                           
  5171                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  5172  002644  0E00               	movlw	0
  5173  002646  6EC5               	movwf	4037,c	;volatile
  5174                           
  5175                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  5176  002648  0E80               	movlw	128
  5177  00264A  0100               	movlb	0	; () banked
  5178  00264C  6FD4               	movwf	___lldiv@dividend& (0+255),b
  5179  00264E  0E96               	movlw	150
  5180  002650  6FD5               	movwf	(___lldiv@dividend+1)& (0+255),b
  5181  002652  0E98               	movlw	152
  5182  002654  6FD6               	movwf	(___lldiv@dividend+2)& (0+255),b
  5183  002656  0E00               	movlw	0
  5184  002658  6FD7               	movwf	(___lldiv@dividend+3)& (0+255),b
  5185  00265A  C0E1  F0E5         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5186  00265E  C0E2  F0E6         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5187  002662  C0E3  F0E7         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5188  002666  C0E4  F0E8         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5189  00266A  0E02               	movlw	2
  5190  00266C                     u3575:
  5191  00266C  90D8               	bcf	status,0,c
  5192  00266E  0100               	movlb	0	; () banked
  5193  002670  37E5               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5194  002672  37E6               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5195  002674  37E7               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5196  002676  37E8               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5197  002678  2EE8               	decfsz	wreg,f,c
  5198  00267A  D7F8               	goto	u3575
  5199  00267C  C0E5  F0D8         	movff	??_I2C_Master_Init,___lldiv@divisor
  5200  002680  C0E6  F0D9         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5201  002684  C0E7  F0DA         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5202  002688  C0E8  F0DB         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5203  00268C  ECF1  F00F         	call	___lldiv	;wreg free
  5204  002690  0100               	movlb	0	; () banked
  5205  002692  05D4               	decf	?___lldiv& (0+255),w,b
  5206  002694  6EC8               	movwf	4040,c	;volatile
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;I2C.c: 21: TRISC3 = 1;
  5210  002696  8694               	bsf	3988,3,c	;volatile
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;I2C.c: 22: TRISC4 = 1;
  5214  002698  8894               	bsf	3988,4,c	;volatile
  5215                           
  5216                           ; BSR set to: 0
  5217  00269A  0012               	return		;funcret
  5218  00269C                     __end_of_I2C_Master_Init:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           intcon2	equ	0xFF1
  5228                           intcon3	equ	0xFF0
  5229                           postinc0	equ	0xFEE
  5230                           wreg	equ	0xFE8
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           fsr2h	equ	0xFDA
  5235                           fsr2l	equ	0xFD9
  5236                           status	equ	0xFD8
  5237                           
  5238 ;; *************** function ___lldiv *****************
  5239 ;; Defined at:
  5240 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;  dividend        4   16[BANK0 ] unsigned long 
  5243 ;;  divisor         4   20[BANK0 ] unsigned long 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  quotient        4   24[BANK0 ] unsigned long 
  5246 ;;  counter         1   28[BANK0 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  4   16[BANK0 ] unsigned long 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5256 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;Total ram usage:       13 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    7
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_I2C_Master_Init
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text21
  5271  001FE2                     __ptext21:
  5272                           	opt stack 0
  5273  001FE2                     ___lldiv:
  5274                           	opt stack 22
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;incstack = 0
  5278  001FE2  0E00               	movlw	0
  5279  001FE4  0100               	movlb	0	; () banked
  5280  001FE6  6FDC               	movwf	___lldiv@quotient& (0+255),b
  5281  001FE8  0E00               	movlw	0
  5282  001FEA  6FDD               	movwf	(___lldiv@quotient+1)& (0+255),b
  5283  001FEC  0E00               	movlw	0
  5284  001FEE  6FDE               	movwf	(___lldiv@quotient+2)& (0+255),b
  5285  001FF0  0E00               	movlw	0
  5286  001FF2  6FDF               	movwf	(___lldiv@quotient+3)& (0+255),b
  5287                           
  5288                           ; BSR set to: 0
  5289  001FF4  0100               	movlb	0	; () banked
  5290  001FF6  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5291  001FF8  0100               	movlb	0	; () banked
  5292  001FFA  11D9               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5293  001FFC  0100               	movlb	0	; () banked
  5294  001FFE  11DA               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5295  002000  0100               	movlb	0	; () banked
  5296  002002  11DB               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5297  002004  B4D8               	btfsc	status,2,c
  5298  002006  D042               	goto	l823
  5299                           
  5300                           ; BSR set to: 0
  5301  002008  0E01               	movlw	1
  5302  00200A  0100               	movlb	0	; () banked
  5303  00200C  6FE0               	movwf	___lldiv@counter& (0+255),b
  5304  00200E  D008               	goto	l3864
  5305  002010                     l3862:
  5306                           
  5307                           ; BSR set to: 0
  5308  002010  0100               	movlb	0	; () banked
  5309  002012  90D8               	bcf	status,0,c
  5310  002014  37D8               	rlcf	___lldiv@divisor& (0+255),f,b
  5311  002016  37D9               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5312  002018  37DA               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5313  00201A  37DB               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5314  00201C  0100               	movlb	0	; () banked
  5315  00201E  2BE0               	incf	___lldiv@counter& (0+255),f,b
  5316  002020                     l3864:
  5317                           
  5318                           ; BSR set to: 0
  5319  002020  0100               	movlb	0	; () banked
  5320  002022  AFDB               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5321  002024  D7F5               	goto	l3862
  5322  002026                     l3866:
  5323                           
  5324                           ; BSR set to: 0
  5325  002026  0100               	movlb	0	; () banked
  5326  002028  90D8               	bcf	status,0,c
  5327  00202A  37DC               	rlcf	___lldiv@quotient& (0+255),f,b
  5328  00202C  37DD               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5329  00202E  37DE               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5330  002030  37DF               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5331                           
  5332                           ; BSR set to: 0
  5333  002032  0100               	movlb	0	; () banked
  5334  002034  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5335  002036  0100               	movlb	0	; () banked
  5336  002038  5DD4               	subwf	___lldiv@dividend& (0+255),w,b
  5337  00203A  0100               	movlb	0	; () banked
  5338  00203C  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5339  00203E  0100               	movlb	0	; () banked
  5340  002040  59D5               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5341  002042  0100               	movlb	0	; () banked
  5342  002044  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5343  002046  0100               	movlb	0	; () banked
  5344  002048  59D6               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5345  00204A  0100               	movlb	0	; () banked
  5346  00204C  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5347  00204E  0100               	movlb	0	; () banked
  5348  002050  59D7               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5349  002052  A0D8               	btfss	status,0,c
  5350  002054  D012               	goto	l3874
  5351                           
  5352                           ; BSR set to: 0
  5353  002056  0100               	movlb	0	; () banked
  5354  002058  51D8               	movf	___lldiv@divisor& (0+255),w,b
  5355  00205A  0100               	movlb	0	; () banked
  5356  00205C  5FD4               	subwf	___lldiv@dividend& (0+255),f,b
  5357  00205E  0100               	movlb	0	; () banked
  5358  002060  51D9               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5359  002062  0100               	movlb	0	; () banked
  5360  002064  5BD5               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5361  002066  0100               	movlb	0	; () banked
  5362  002068  51DA               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5363  00206A  0100               	movlb	0	; () banked
  5364  00206C  5BD6               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5365  00206E  0100               	movlb	0	; () banked
  5366  002070  51DB               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5367  002072  0100               	movlb	0	; () banked
  5368  002074  5BD7               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5369                           
  5370                           ; BSR set to: 0
  5371  002076  0100               	movlb	0	; () banked
  5372  002078  81DC               	bsf	___lldiv@quotient& (0+255),0,b
  5373  00207A                     l3874:
  5374                           
  5375                           ; BSR set to: 0
  5376  00207A  0100               	movlb	0	; () banked
  5377  00207C  90D8               	bcf	status,0,c
  5378  00207E  33DB               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5379  002080  33DA               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5380  002082  33D9               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5381  002084  33D8               	rrcf	___lldiv@divisor& (0+255),f,b
  5382                           
  5383                           ; BSR set to: 0
  5384  002086  0100               	movlb	0	; () banked
  5385  002088  2FE0               	decfsz	___lldiv@counter& (0+255),f,b
  5386  00208A  D7CD               	goto	l3866
  5387  00208C                     l823:
  5388                           
  5389                           ; BSR set to: 0
  5390  00208C  C0DC  F0D4         	movff	___lldiv@quotient,?___lldiv
  5391  002090  C0DD  F0D5         	movff	___lldiv@quotient+1,?___lldiv+1
  5392  002094  C0DE  F0D6         	movff	___lldiv@quotient+2,?___lldiv+2
  5393  002098  C0DF  F0D7         	movff	___lldiv@quotient+3,?___lldiv+3
  5394                           
  5395                           ; BSR set to: 0
  5396  00209C  0012               	return		;funcret
  5397  00209E                     __end_of___lldiv:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon	equ	0xFF2
  5406                           intcon2	equ	0xFF1
  5407                           intcon3	equ	0xFF0
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           indf2	equ	0xFDF
  5411                           postinc2	equ	0xFDE
  5412                           postdec2	equ	0xFDD
  5413                           fsr2h	equ	0xFDA
  5414                           fsr2l	equ	0xFD9
  5415                           status	equ	0xFD8
  5416                           
  5417 ;; *************** function _I2C_ColorSens_Init *****************
  5418 ;; Defined at:
  5419 ;;		line 54 in file "I2C.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;Total ram usage:        1 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    9
  5440 ;; This function calls:
  5441 ;;		_I2C_Master_Start
  5442 ;;		_I2C_Master_Stop
  5443 ;;		_I2C_Master_Write
  5444 ;; This function is called by:
  5445 ;;		_main
  5446 ;; This function uses a non-reentrant model
  5447 ;;
  5448                           
  5449                           	psect	text22
  5450  0011A6                     __ptext22:
  5451                           	opt stack 0
  5452  0011A6                     _I2C_ColorSens_Init:
  5453                           	opt stack 21
  5454                           
  5455                           ;I2C.c: 55: I2C_Master_Start();
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;incstack = 0
  5459  0011A6  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  5460                           
  5461                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  5462  0011AA  0E00               	movlw	0
  5463  0011AC  0100               	movlb	0	; () banked
  5464  0011AE  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5465  0011B0  0E52               	movlw	82
  5466  0011B2  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5467  0011B4  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5468                           
  5469                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  5470  0011B8  0E00               	movlw	0
  5471  0011BA  0100               	movlb	0	; () banked
  5472  0011BC  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5473  0011BE  0E80               	movlw	128
  5474  0011C0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5475  0011C2  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5476                           
  5477                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  5478  0011C6  0E00               	movlw	0
  5479  0011C8  0100               	movlb	0	; () banked
  5480  0011CA  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5481  0011CC  0E01               	movlw	1
  5482  0011CE  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5483  0011D0  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5484                           
  5485                           ;I2C.c: 59: I2C_Master_Stop();
  5486  0011D4  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  5487                           
  5488                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  5489  0011D8  0E0A               	movlw	10
  5490  0011DA  0100               	movlb	0	; () banked
  5491  0011DC  6FD7               	movwf	??_I2C_ColorSens_Init& (0+255),b
  5492  0011DE  0EBC               	movlw	188
  5493  0011E0                     u4587:
  5494  0011E0  2EE8               	decfsz	wreg,f,c
  5495  0011E2  D7FE               	bra	u4587
  5496  0011E4  2FD7               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  5497  0011E6  D7FC               	bra	u4587
  5498  0011E8  F000               	nop	
  5499                           
  5500                           ;I2C.c: 63: I2C_Master_Start();
  5501  0011EA  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  5502                           
  5503                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  5504  0011EE  0E00               	movlw	0
  5505  0011F0  0100               	movlb	0	; () banked
  5506  0011F2  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5507  0011F4  0E52               	movlw	82
  5508  0011F6  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5509  0011F8  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5510                           
  5511                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  5512  0011FC  0E00               	movlw	0
  5513  0011FE  0100               	movlb	0	; () banked
  5514  001200  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5515  001202  0E80               	movlw	128
  5516  001204  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5517  001206  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5518                           
  5519                           ;I2C.c: 66: I2C_Master_Write(0b00010011);
  5520  00120A  0E00               	movlw	0
  5521  00120C  0100               	movlb	0	; () banked
  5522  00120E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5523  001210  0E13               	movlw	19
  5524  001212  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5525  001214  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5526                           
  5527                           ;I2C.c: 67: I2C_Master_Stop();
  5528  001218  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  5529                           
  5530                           ;I2C.c: 69: I2C_Master_Start();
  5531  00121C  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  5532                           
  5533                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  5534  001220  0E00               	movlw	0
  5535  001222  0100               	movlb	0	; () banked
  5536  001224  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5537  001226  0E52               	movlw	82
  5538  001228  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5539  00122A  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5540                           
  5541                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  5542  00122E  0E00               	movlw	0
  5543  001230  0100               	movlb	0	; () banked
  5544  001232  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5545  001234  0E8F               	movlw	143
  5546  001236  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5547  001238  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5548                           
  5549                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  5550  00123C  0E00               	movlw	0
  5551  00123E  0100               	movlb	0	; () banked
  5552  001240  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5553  001242  0E02               	movlw	2
  5554  001244  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5555  001246  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5556                           
  5557                           ;I2C.c: 73: I2C_Master_Stop();
  5558  00124A  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  5559                           
  5560                           ;I2C.c: 75: I2C_Master_Start();
  5561  00124E  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  5562                           
  5563                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  5564  001252  0E00               	movlw	0
  5565  001254  0100               	movlb	0	; () banked
  5566  001256  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5567  001258  0E52               	movlw	82
  5568  00125A  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5569  00125C  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5570                           
  5571                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  5572  001260  0E00               	movlw	0
  5573  001262  0100               	movlb	0	; () banked
  5574  001264  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5575  001266  0EA4               	movlw	164
  5576  001268  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5577  00126A  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5578                           
  5579                           ;I2C.c: 78: I2C_Master_Write(0x00);
  5580  00126E  0E00               	movlw	0
  5581  001270  0100               	movlb	0	; () banked
  5582  001272  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5583  001274  0E00               	movlw	0
  5584  001276  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5585  001278  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5586                           
  5587                           ;I2C.c: 79: I2C_Master_Write(0x00);
  5588  00127C  0E00               	movlw	0
  5589  00127E  0100               	movlb	0	; () banked
  5590  001280  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5591  001282  0E00               	movlw	0
  5592  001284  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5593  001286  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5594                           
  5595                           ;I2C.c: 80: I2C_Master_Write(0x00);
  5596  00128A  0E00               	movlw	0
  5597  00128C  0100               	movlb	0	; () banked
  5598  00128E  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5599  001290  0E00               	movlw	0
  5600  001292  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5601  001294  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5602                           
  5603                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  5604  001298  0E00               	movlw	0
  5605  00129A  0100               	movlb	0	; () banked
  5606  00129C  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5607  00129E  0E4A               	movlw	74
  5608  0012A0  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5609  0012A2  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5610                           
  5611                           ;I2C.c: 82: I2C_Master_Stop();
  5612  0012A6  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  5613                           
  5614                           ;I2C.c: 84: I2C_Master_Start();
  5615  0012AA  EC9D  F015         	call	_I2C_Master_Start	;wreg free
  5616                           
  5617                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  5618  0012AE  0E00               	movlw	0
  5619  0012B0  0100               	movlb	0	; () banked
  5620  0012B2  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5621  0012B4  0E52               	movlw	82
  5622  0012B6  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5623  0012B8  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5624                           
  5625                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  5626  0012BC  0E00               	movlw	0
  5627  0012BE  0100               	movlb	0	; () banked
  5628  0012C0  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5629  0012C2  0E8C               	movlw	140
  5630  0012C4  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5631  0012C6  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5632                           
  5633                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  5634  0012CA  0E00               	movlw	0
  5635  0012CC  0100               	movlb	0	; () banked
  5636  0012CE  6FD6               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5637  0012D0  0E01               	movlw	1
  5638  0012D2  6FD5               	movwf	I2C_Master_Write@d& (0+255),b
  5639  0012D4  EC8F  F015         	call	_I2C_Master_Write	;wreg free
  5640                           
  5641                           ;I2C.c: 88: I2C_Master_Stop();
  5642  0012D8  EC99  F015         	call	_I2C_Master_Stop	;wreg free
  5643  0012DC  0012               	return		;funcret
  5644  0012DE                     __end_of_I2C_ColorSens_Init:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           intcon2	equ	0xFF1
  5654                           intcon3	equ	0xFF0
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           indf2	equ	0xFDF
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           fsr2h	equ	0xFDA
  5661                           fsr2l	equ	0xFD9
  5662                           status	equ	0xFD8
  5663                           
  5664 ;; *************** function _I2C_Master_Write *****************
  5665 ;; Defined at:
  5666 ;;		line 48 in file "I2C.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  d               2   17[BANK0 ] unsigned int 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;		None
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5680 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;Total ram usage:        2 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    8
  5687 ;; This function calls:
  5688 ;;		_I2C_Master_Wait
  5689 ;; This function is called by:
  5690 ;;		_I2C_ColorSens_Init
  5691 ;;		_date_time
  5692 ;;		_read_colorsensor
  5693 ;;		_set_time
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text23
  5698  002B1E                     __ptext23:
  5699                           	opt stack 0
  5700  002B1E                     _I2C_Master_Write:
  5701                           	opt stack 20
  5702                           
  5703                           ;I2C.c: 50: I2C_Master_Wait();
  5704                           
  5705                           ;incstack = 0
  5706  002B1E  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  5707                           
  5708                           ;I2C.c: 51: SSPBUF = d;
  5709  002B22  C0D5  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5710  002B26  0012               	return		;funcret
  5711  002B28                     __end_of_I2C_Master_Write:
  5712                           	opt stack 0
  5713                           tblptru	equ	0xFF8
  5714                           tblptrh	equ	0xFF7
  5715                           tblptrl	equ	0xFF6
  5716                           tablat	equ	0xFF5
  5717                           prodh	equ	0xFF4
  5718                           prodl	equ	0xFF3
  5719                           intcon	equ	0xFF2
  5720                           intcon2	equ	0xFF1
  5721                           intcon3	equ	0xFF0
  5722                           postinc0	equ	0xFEE
  5723                           wreg	equ	0xFE8
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function _I2C_Master_Stop *****************
  5732 ;; Defined at:
  5733 ;;		line 42 in file "I2C.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;		None
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;		None
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  1    wreg      void 
  5740 ;; Registers used:
  5741 ;;		wreg, status,2, status,0, cstack
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;Total ram usage:        0 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    8
  5754 ;; This function calls:
  5755 ;;		_I2C_Master_Wait
  5756 ;; This function is called by:
  5757 ;;		_I2C_ColorSens_Init
  5758 ;;		_date_time
  5759 ;;		_read_colorsensor
  5760 ;;		_set_time
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text24
  5765  002B32                     __ptext24:
  5766                           	opt stack 0
  5767  002B32                     _I2C_Master_Stop:
  5768                           	opt stack 20
  5769                           
  5770                           ;I2C.c: 44: I2C_Master_Wait();
  5771                           
  5772                           ;incstack = 0
  5773  002B32  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  5774                           
  5775                           ;I2C.c: 45: PEN = 1;
  5776  002B36  84C5               	bsf	4037,2,c	;volatile
  5777  002B38  0012               	return		;funcret
  5778  002B3A                     __end_of_I2C_Master_Stop:
  5779                           	opt stack 0
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           intcon2	equ	0xFF1
  5788                           intcon3	equ	0xFF0
  5789                           postinc0	equ	0xFEE
  5790                           wreg	equ	0xFE8
  5791                           indf2	equ	0xFDF
  5792                           postinc2	equ	0xFDE
  5793                           postdec2	equ	0xFDD
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _I2C_Master_Start *****************
  5799 ;; Defined at:
  5800 ;;		line 30 in file "I2C.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      void 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;Total ram usage:        0 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    8
  5821 ;; This function calls:
  5822 ;;		_I2C_Master_Wait
  5823 ;; This function is called by:
  5824 ;;		_I2C_ColorSens_Init
  5825 ;;		_date_time
  5826 ;;		_read_colorsensor
  5827 ;;		_set_time
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text25
  5832  002B3A                     __ptext25:
  5833                           	opt stack 0
  5834  002B3A                     _I2C_Master_Start:
  5835                           	opt stack 20
  5836                           
  5837                           ;I2C.c: 32: I2C_Master_Wait();
  5838                           
  5839                           ;incstack = 0
  5840  002B3A  EC60  F015         	call	_I2C_Master_Wait	;wreg free
  5841                           
  5842                           ;I2C.c: 33: SEN = 1;
  5843  002B3E  80C5               	bsf	4037,0,c	;volatile
  5844  002B40  0012               	return		;funcret
  5845  002B42                     __end_of_I2C_Master_Start:
  5846                           	opt stack 0
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           intcon2	equ	0xFF1
  5855                           intcon3	equ	0xFF0
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _I2C_Master_Wait *****************
  5866 ;; Defined at:
  5867 ;;		line 25 in file "I2C.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;Total ram usage:        1 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    7
  5888 ;; This function calls:
  5889 ;;		Nothing
  5890 ;; This function is called by:
  5891 ;;		_I2C_Master_Start
  5892 ;;		_I2C_Master_Stop
  5893 ;;		_I2C_Master_Write
  5894 ;;		_I2C_Master_Read
  5895 ;;		_I2C_Master_RepeatedStart
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text26
  5900  002AC0                     __ptext26:
  5901                           	opt stack 0
  5902  002AC0                     _I2C_Master_Wait:
  5903                           	opt stack 20
  5904  002AC0                     l34:
  5905  002AC0  B4C7               	btfsc	4039,2,c	;volatile
  5906  002AC2  D7FE               	goto	l34
  5907  002AC4  CFC5 F0D4          	movff	4037,??_I2C_Master_Wait	;volatile
  5908  002AC8  0E1F               	movlw	31
  5909  002ACA  0100               	movlb	0	; () banked
  5910  002ACC  17D4               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5911  002ACE  B4D8               	btfsc	status,2,c
  5912  002AD0  0012               	return	
  5913  002AD2  D7F6               	goto	l34
  5914  002AD4                     __end_of_I2C_Master_Wait:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           intcon2	equ	0xFF1
  5924                           intcon3	equ	0xFF0
  5925                           postinc0	equ	0xFEE
  5926                           wreg	equ	0xFE8
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _isr *****************
  5935 ;; Defined at:
  5936 ;;		line 165 in file "main.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  i               1  114[COMRAM] unsigned char 
  5941 ;;  tempcase        2    0        int 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;Total ram usage:       19 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    6
  5958 ;; This function calls:
  5959 ;;		_I2C_ColorSens_ClearInt
  5960 ;;		_dec_to_hex
  5961 ;;		_read_time
  5962 ;;		_servo_rotate0
  5963 ;;		i2_I2C_ColorSens_Init
  5964 ;;		i2___wmul
  5965 ;;		i2_lcdInst
  5966 ;;		i2_printf
  5967 ;;		i2_read_colorsensor
  5968 ;; This function is called by:
  5969 ;;		Interrupt level 2
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	intcode
  5974  000008                     __pintcode:
  5975                           	opt stack 0
  5976  000008                     _isr:
  5977                           	opt stack 20
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;incstack = 0
  5981  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5982  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           intcon3	equ	0xFF0
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001                           	psect	intcode_body
  6002  000012                     __pintcode_body:
  6003                           	opt stack 20
  6004  000012                     int_func:
  6005                           	opt stack 20
  6006  000012  0006               	pop		; remove dummy address from shadow register refresh
  6007  000014  CFFA F0C6          	movff	pclath,??_isr+2
  6008  000018  CFFB F0C7          	movff	pclatu,??_isr+3
  6009  00001C  CFE9 F0C8          	movff	fsr0l,??_isr+4
  6010  000020  CFEA F0C9          	movff	fsr0h,??_isr+5
  6011  000024  CFE1 F0CA          	movff	fsr1l,??_isr+6
  6012  000028  CFE2 F0CB          	movff	fsr1h,??_isr+7
  6013  00002C  CFD9 F0CC          	movff	fsr2l,??_isr+8
  6014  000030  CFDA F0CD          	movff	fsr2h,??_isr+9
  6015  000034  CFF3 F0CE          	movff	prodl,??_isr+10
  6016  000038  CFF4 F0CF          	movff	prodh,??_isr+11
  6017  00003C  CFF6 F0D0          	movff	tblptrl,??_isr+12
  6018  000040  CFF7 F0D1          	movff	tblptrh,??_isr+13
  6019  000044  CFF8 F0D2          	movff	tblptru,??_isr+14
  6020  000048  CFF5 F0D3          	movff	tablat,??_isr+15
  6021                           
  6022                           ;main.c: 166: if (INT1IF) {
  6023  00004C  B0F0               	btfsc	intcon3,0,c	;volatile
  6024  00004E  D112               	goto	i2l4594
  6025  000050  D138               	goto	i2l270
  6026  000052                     i2l272:
  6027                           
  6028                           ;main.c: 169: bottle_count_disp = -1;
  6029  000052  0100               	movlb	0	; () banked
  6030  000054  69EE               	setf	_bottle_count_disp& (0+255),b
  6031  000056  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;main.c: 170: curr_state = STANDBY;
  6035  000058  0E00               	movlw	0
  6036  00005A  0100               	movlb	0	; () banked
  6037  00005C  6FC3               	movwf	_curr_state& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;main.c: 171: I2C_ColorSens_Init();
  6041  00005E  EC94  F00A         	call	i2_I2C_ColorSens_Init	;wreg free
  6042                           
  6043                           ;main.c: 172: break;
  6044  000062  D12D               	goto	i2l273
  6045  000064                     i2l274:
  6046                           
  6047                           ;main.c: 174: LATAbits.LATA2 = 1;
  6048  000064  8489               	bsf	3977,2,c	;volatile
  6049                           
  6050                           ;main.c: 175: INT0IE = 0;
  6051  000066  98F2               	bcf	intcon,4,c	;volatile
  6052                           
  6053                           ;main.c: 176: INT2IE = 1;
  6054  000068  88F0               	bsf	intcon3,4,c	;volatile
  6055                           
  6056                           ;main.c: 177: TMR0IE = 1;
  6057  00006A  8AF2               	bsf	intcon,5,c	;volatile
  6058                           
  6059                           ;main.c: 178: TMR0ON = 1;
  6060  00006C  8ED5               	bsf	4053,7,c	;volatile
  6061                           
  6062                           ;main.c: 179: TMR0 = 0;
  6063  00006E  0E00               	movlw	0
  6064  000070  6ED7               	movwf	4055,c	;volatile
  6065  000072  0E00               	movlw	0
  6066  000074  6ED6               	movwf	4054,c	;volatile
  6067                           
  6068                           ;main.c: 181: read_time();
  6069  000076  EC89  F012         	call	_read_time	;wreg free
  6070                           
  6071                           ;main.c: 182: start_time[1] = time[1];
  6072  00007A  C09F  F07B         	movff	_time+1,_start_time+1
  6073                           
  6074                           ;main.c: 183: start_time[0] = time[0];
  6075  00007E  C09E  F07A         	movff	_time,_start_time
  6076                           
  6077                           ;main.c: 185: bottlequeue_head = bottlequeue_tail = 0;
  6078  000082  0E00               	movlw	0
  6079  000084  0100               	movlb	0	; () banked
  6080  000086  6FA8               	movwf	(_bottlequeue_tail+1)& (0+255),b
  6081  000088  0E00               	movlw	0
  6082  00008A  6FA7               	movwf	_bottlequeue_tail& (0+255),b
  6083  00008C  C0A7  F0A5         	movff	_bottlequeue_tail,_bottlequeue_head
  6084  000090  C0A8  F0A6         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;main.c: 187: lcdInst(0b00000001);
  6088  000094  0E01               	movlw	1
  6089  000096  EC89  F015         	call	i2_lcdInst
  6090                           
  6091                           ;main.c: 188: bottle_count_disp = -1;
  6092  00009A  0100               	movlb	0	; () banked
  6093  00009C  69EE               	setf	_bottle_count_disp& (0+255),b
  6094  00009E  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;main.c: 189: curr_state = OPERATION;
  6098  0000A0  0E02               	movlw	2
  6099  0000A2  D0D7               	goto	L6
  6100  0000A4                     i2l4528:
  6101                           
  6102                           ;main.c: 192: bottle_count_disp += 1;
  6103  0000A4  0100               	movlb	0	; () banked
  6104  0000A6  4BEE               	infsnz	_bottle_count_disp& (0+255),f,b
  6105  0000A8  2BEF               	incf	(_bottle_count_disp+1)& (0+255),f,b
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;main.c: 193: curr_state = BOTTLECOUNT;
  6109  0000AA  0E05               	movlw	5
  6110  0000AC  0100               	movlb	0	; () banked
  6111  0000AE  6FC3               	movwf	_curr_state& (0+255),b
  6112  0000B0                     i2l4532:
  6113  0000B0  0E1F               	movlw	31
  6114  0000B2  1881               	xorwf	3969,w,c	;volatile
  6115  0000B4  A4D8               	btfss	status,2,c
  6116  0000B6  D103               	goto	i2l273
  6117  0000B8  D7FB               	goto	i2l4532
  6118  0000BA                     i2l4534:
  6119                           
  6120                           ;main.c: 197: operation_time = etime - stime;
  6121  0000BA  C07C  F0C4         	movff	_stime,??_isr
  6122  0000BE  C07D  F0C5         	movff	_stime+1,??_isr+1
  6123  0000C2  0100               	movlb	0	; () banked
  6124  0000C4  1FC4               	comf	??_isr& (0+255),f,b
  6125  0000C6  1FC5               	comf	(??_isr+1)& (0+255),f,b
  6126  0000C8  4BC4               	infsnz	??_isr& (0+255),f,b
  6127  0000CA  2BC5               	incf	(??_isr+1)& (0+255),f,b
  6128  0000CC  5078               	movf	_etime,w,c
  6129  0000CE  0100               	movlb	0	; () banked
  6130  0000D0  25C4               	addwf	??_isr& (0+255),w,b
  6131  0000D2  0100               	movlb	0	; () banked
  6132  0000D4  6FB7               	movwf	_operation_time& (0+255),b
  6133  0000D6  5079               	movf	_etime+1,w,c
  6134  0000D8  0100               	movlb	0	; () banked
  6135  0000DA  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6136  0000DC  0100               	movlb	0	; () banked
  6137  0000DE  6FB8               	movwf	(_operation_time+1)& (0+255),b
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;main.c: 198: bottle_count_disp = -1;
  6141  0000E0  0100               	movlb	0	; () banked
  6142  0000E2  69EE               	setf	_bottle_count_disp& (0+255),b
  6143  0000E4  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;main.c: 199: curr_state = BOTTLETIME;
  6147  0000E6  0E06               	movlw	6
  6148  0000E8  D0B4               	goto	L6
  6149  0000EA                     i2l280:
  6150                           
  6151                           ;main.c: 202: bottle_count_disp = -1;
  6152  0000EA  0100               	movlb	0	; () banked
  6153  0000EC  69EE               	setf	_bottle_count_disp& (0+255),b
  6154  0000EE  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 203: curr_state = DATETIME;
  6158  0000F0  0E04               	movlw	4
  6159  0000F2  D0AF               	goto	L6
  6160  0000F4                     i2l281:
  6161                           
  6162                           ;main.c: 206: LATAbits.LATA2 = 0;
  6163  0000F4  9489               	bcf	3977,2,c	;volatile
  6164                           
  6165                           ;main.c: 207: INT0IE = 0;
  6166  0000F6  98F2               	bcf	intcon,4,c	;volatile
  6167                           
  6168                           ;main.c: 208: INT2IE = 0;
  6169  0000F8  98F0               	bcf	intcon3,4,c	;volatile
  6170                           
  6171                           ;main.c: 209: TMR0IE = 0;
  6172  0000FA  9AF2               	bcf	intcon,5,c	;volatile
  6173                           
  6174                           ;main.c: 210: TMR0ON = 0;
  6175  0000FC  9ED5               	bcf	4053,7,c	;volatile
  6176                           
  6177                           ;main.c: 212: read_time();
  6178  0000FE  EC89  F012         	call	_read_time	;wreg free
  6179                           
  6180                           ;main.c: 213: end_time[1] = time[1];
  6181  000102  C09F  F077         	movff	_time+1,_end_time+1
  6182                           
  6183                           ;main.c: 214: end_time[0] = time[0];
  6184  000106  C09E  F076         	movff	_time,_end_time
  6185                           
  6186                           ;main.c: 215: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6187  00010A  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6188  00010E  6A64               	clrf	dec_to_hex@num+1,c
  6189  000110  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6190  000114  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6191  000118  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6192                           
  6193                           ;main.c: 215: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6194  00011C  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6195  000120  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6196  000124  0E00               	movlw	0
  6197  000126  6E04               	movwf	i2___wmul@multiplicand+1,c
  6198  000128  0E3C               	movlw	60
  6199  00012A  6E03               	movwf	i2___wmul@multiplicand,c
  6200  00012C  EC0F  F015         	call	i2___wmul	;wreg free
  6201  000130  C001  F0C4         	movff	?i2___wmul,??_isr
  6202  000134  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6203  000138  C07A  F063         	movff	_start_time,dec_to_hex@num
  6204  00013C  6A64               	clrf	dec_to_hex@num+1,c
  6205  00013E  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6206  000142  5063               	movf	?_dec_to_hex,w,c
  6207  000144  0100               	movlb	0	; () banked
  6208  000146  25C4               	addwf	??_isr& (0+255),w,b
  6209  000148  6E7C               	movwf	_stime,c
  6210  00014A  5064               	movf	?_dec_to_hex+1,w,c
  6211  00014C  0100               	movlb	0	; () banked
  6212  00014E  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6213  000150  6E7D               	movwf	_stime+1,c
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;main.c: 216: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6217  000152  C077  F063         	movff	_end_time+1,dec_to_hex@num
  6218  000156  6A64               	clrf	dec_to_hex@num+1,c
  6219  000158  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6220  00015C  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6221  000160  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6222                           
  6223                           ;main.c: 216: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6224  000164  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6225  000168  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6226  00016C  0E00               	movlw	0
  6227  00016E  6E04               	movwf	i2___wmul@multiplicand+1,c
  6228  000170  0E3C               	movlw	60
  6229  000172  6E03               	movwf	i2___wmul@multiplicand,c
  6230  000174  EC0F  F015         	call	i2___wmul	;wreg free
  6231  000178  C001  F0C4         	movff	?i2___wmul,??_isr
  6232  00017C  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6233  000180  C076  F063         	movff	_end_time,dec_to_hex@num
  6234  000184  6A64               	clrf	dec_to_hex@num+1,c
  6235  000186  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6236  00018A  5063               	movf	?_dec_to_hex,w,c
  6237  00018C  0100               	movlb	0	; () banked
  6238  00018E  25C4               	addwf	??_isr& (0+255),w,b
  6239  000190  6E78               	movwf	_etime,c
  6240  000192  5064               	movf	?_dec_to_hex+1,w,c
  6241  000194  0100               	movlb	0	; () banked
  6242  000196  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6243  000198  6E79               	movwf	_etime+1,c
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;main.c: 217: lcdInst(0b00000001);
  6247  00019A  0E01               	movlw	1
  6248  00019C  EC89  F015         	call	i2_lcdInst
  6249                           
  6250                           ;main.c: 218: bottle_count_disp = -1;
  6251  0001A0  0100               	movlb	0	; () banked
  6252  0001A2  69EE               	setf	_bottle_count_disp& (0+255),b
  6253  0001A4  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;main.c: 219: curr_state = OPERATIONEND;
  6257  0001A6  0E03               	movlw	3
  6258  0001A8  D054               	goto	L6
  6259  0001AA                     i2l4562:
  6260                           
  6261                           ;main.c: 222: read_colorsensor();
  6262  0001AA  EC8F  F00C         	call	i2_read_colorsensor	;wreg free
  6263                           
  6264                           ;main.c: 223: lcdInst(0b10000000);
  6265  0001AE  0E80               	movlw	128
  6266  0001B0  EC89  F015         	call	i2_lcdInst
  6267                           
  6268                           ;main.c: 224: printf("C%u R%u                ", color[0], color[1]);
  6269  0001B4  0E55               	movlw	low STR_1
  6270  0001B6  6E0D               	movwf	i2printf@f,c
  6271  0001B8  0EFE               	movlw	high STR_1
  6272  0001BA  6E0E               	movwf	i2printf@f+1,c
  6273  0001BC  C096  F00F         	movff	_color,?i2_printf+2
  6274  0001C0  C097  F010         	movff	_color+1,?i2_printf+3
  6275  0001C4  C098  F011         	movff	_color+2,?i2_printf+4
  6276  0001C8  C099  F012         	movff	_color+3,?i2_printf+5
  6277  0001CC  ECEE  F003         	call	i2_printf	;wreg free
  6278                           
  6279                           ;main.c: 225: lcdInst(0b11000000);
  6280  0001D0  0EC0               	movlw	192
  6281  0001D2  EC89  F015         	call	i2_lcdInst
  6282                           
  6283                           ;main.c: 226: printf("G%u B%u                ", color[2], color[3]);
  6284  0001D6  0E3D               	movlw	low STR_2
  6285  0001D8  6E0D               	movwf	i2printf@f,c
  6286  0001DA  0EFE               	movlw	high STR_2
  6287  0001DC  6E0E               	movwf	i2printf@f+1,c
  6288  0001DE  C09A  F00F         	movff	_color+4,?i2_printf+2
  6289  0001E2  C09B  F010         	movff	_color+5,?i2_printf+3
  6290  0001E6  C09C  F011         	movff	_color+6,?i2_printf+4
  6291  0001EA  C09D  F012         	movff	_color+7,?i2_printf+5
  6292  0001EE  ECEE  F003         	call	i2_printf	;wreg free
  6293                           
  6294                           ;main.c: 227: break;
  6295  0001F2  D065               	goto	i2l273
  6296  0001F4                     i2l4572:
  6297                           
  6298                           ;main.c: 229: read_colorsensor();
  6299  0001F4  EC8F  F00C         	call	i2_read_colorsensor	;wreg free
  6300                           
  6301                           ;main.c: 230: lcdInst(0b10000000);
  6302  0001F8  0E80               	movlw	128
  6303  0001FA  EC89  F015         	call	i2_lcdInst
  6304                           
  6305                           ;main.c: 231: printf("C%u R%u                ", color[0], color[1]);
  6306  0001FE  0E55               	movlw	low STR_1
  6307  000200  6E0D               	movwf	i2printf@f,c
  6308  000202  0EFE               	movlw	high STR_1
  6309  000204  6E0E               	movwf	i2printf@f+1,c
  6310  000206  C096  F00F         	movff	_color,?i2_printf+2
  6311  00020A  C097  F010         	movff	_color+1,?i2_printf+3
  6312  00020E  C098  F011         	movff	_color+2,?i2_printf+4
  6313  000212  C099  F012         	movff	_color+3,?i2_printf+5
  6314  000216  ECEE  F003         	call	i2_printf	;wreg free
  6315                           
  6316                           ;main.c: 232: lcdInst(0b11000000);
  6317  00021A  0EC0               	movlw	192
  6318  00021C  EC89  F015         	call	i2_lcdInst
  6319                           
  6320                           ;main.c: 233: printf("G%u B%u                ", color[2], color[3]);
  6321  000220  0E3D               	movlw	low STR_2
  6322  000222  6E0D               	movwf	i2printf@f,c
  6323  000224  0EFE               	movlw	high STR_2
  6324  000226  6E0E               	movwf	i2printf@f+1,c
  6325  000228  C09A  F00F         	movff	_color+4,?i2_printf+2
  6326  00022C  C09B  F010         	movff	_color+5,?i2_printf+3
  6327  000230  C09C  F011         	movff	_color+6,?i2_printf+4
  6328  000234  C09D  F012         	movff	_color+7,?i2_printf+5
  6329  000238  ECEE  F003         	call	i2_printf	;wreg free
  6330                           
  6331                           ;main.c: 234: break;
  6332  00023C  D040               	goto	i2l273
  6333  00023E                     i2l4582:
  6334                           
  6335                           ;main.c: 236: I2C_ColorSens_ClearInt();
  6336  00023E  ECBD  F014         	call	_I2C_ColorSens_ClearInt	;wreg free
  6337                           
  6338                           ;main.c: 237: break;
  6339  000242  D03D               	goto	i2l273
  6340  000244                     i2l285:
  6341                           
  6342                           ;main.c: 239: LATAbits.LATA2 = 0;
  6343  000244  9489               	bcf	3977,2,c	;volatile
  6344                           
  6345                           ;main.c: 240: (INTCONbits.GIE = 0);
  6346  000246  9EF2               	bcf	intcon,7,c	;volatile
  6347                           
  6348                           ;main.c: 241: TMR0ON = 0;
  6349  000248  9ED5               	bcf	4053,7,c	;volatile
  6350                           
  6351                           ;main.c: 242: lcdInst(0b00000001);
  6352  00024A  0E01               	movlw	1
  6353  00024C  EC89  F015         	call	i2_lcdInst
  6354                           
  6355                           ;main.c: 243: curr_state = EMERGENCYSTOP;
  6356  000250  0E01               	movlw	1
  6357  000252                     L6:
  6358  000252  0100               	movlb	0	; () banked
  6359  000254  6FC3               	movwf	_curr_state& (0+255),b
  6360                           
  6361                           ;main.c: 244: break;
  6362  000256  D033               	goto	i2l273
  6363  000258                     i2l4588:
  6364                           
  6365                           ;main.c: 246: servo_rotate0(1);
  6366  000258  0E00               	movlw	0
  6367  00025A  6E02               	movwf	servo_rotate0@degree+1,c
  6368  00025C  0E01               	movlw	1
  6369  00025E  6E01               	movwf	servo_rotate0@degree,c
  6370  000260  ECF7  F010         	call	_servo_rotate0	;wreg free
  6371                           
  6372                           ;main.c: 247: break;
  6373  000264  D02C               	goto	i2l273
  6374  000266                     i2l4590:
  6375                           
  6376                           ;main.c: 249: servo_rotate0(2);
  6377  000266  0E00               	movlw	0
  6378  000268  6E02               	movwf	servo_rotate0@degree+1,c
  6379  00026A  0E02               	movlw	2
  6380  00026C  6E01               	movwf	servo_rotate0@degree,c
  6381  00026E  ECF7  F010         	call	_servo_rotate0	;wreg free
  6382                           
  6383                           ;main.c: 251: }
  6384                           
  6385                           ;main.c: 250: break;
  6386  000272  D025               	goto	i2l273
  6387  000274                     i2l4594:
  6388  000274  5081               	movf	3969,w,c	;volatile
  6389                           
  6390                           ; Switch size 1, requested type "space"
  6391                           ; Number of cases is 12, Range of values is 15 to 239
  6392                           ; switch strategies available:
  6393                           ; Name         Instructions Cycles
  6394                           ; simple_byte           37    19 (average)
  6395                           ;	Chosen strategy is simple_byte
  6396  000276  0A0F               	xorlw	15	; case 15
  6397  000278  B4D8               	btfsc	status,2,c
  6398  00027A  D6F4               	goto	i2l274
  6399  00027C  0A10               	xorlw	16	; case 31
  6400  00027E  B4D8               	btfsc	status,2,c
  6401  000280  D711               	goto	i2l4528
  6402  000282  0A30               	xorlw	48	; case 47
  6403  000284  B4D8               	btfsc	status,2,c
  6404  000286  D719               	goto	i2l4534
  6405  000288  0A10               	xorlw	16	; case 63
  6406  00028A  B4D8               	btfsc	status,2,c
  6407  00028C  D72E               	goto	i2l280
  6408  00028E  0A70               	xorlw	112	; case 79
  6409  000290  B4D8               	btfsc	status,2,c
  6410  000292  D730               	goto	i2l281
  6411  000294  0A14               	xorlw	20	; case 91
  6412  000296  B4D8               	btfsc	status,2,c
  6413  000298  D7AD               	goto	i2l4572
  6414  00029A  0A04               	xorlw	4	; case 95
  6415  00029C  B4D8               	btfsc	status,2,c
  6416  00029E  D785               	goto	i2l4562
  6417  0002A0  0A20               	xorlw	32	; case 127
  6418  0002A2  B4D8               	btfsc	status,2,c
  6419  0002A4  D7D9               	goto	i2l4588
  6420  0002A6  0AC0               	xorlw	192	; case 191
  6421  0002A8  B4D8               	btfsc	status,2,c
  6422  0002AA  D7DD               	goto	i2l4590
  6423  0002AC  0A70               	xorlw	112	; case 207
  6424  0002AE  B4D8               	btfsc	status,2,c
  6425  0002B0  D7C9               	goto	i2l285
  6426  0002B2  0A24               	xorlw	36	; case 235
  6427  0002B4  B4D8               	btfsc	status,2,c
  6428  0002B6  D7C3               	goto	i2l4582
  6429  0002B8  0A04               	xorlw	4	; case 239
  6430  0002BA  B4D8               	btfsc	status,2,c
  6431  0002BC  D6CA               	goto	i2l272
  6432  0002BE                     i2l273:
  6433                           
  6434                           ;main.c: 252: INT1IF = 0;
  6435  0002BE  90F0               	bcf	intcon3,0,c	;volatile
  6436                           
  6437                           ;main.c: 253: }
  6438  0002C0  D084               	goto	i2l298
  6439  0002C2                     i2l270:
  6440                           
  6441                           ;main.c: 254: else if (INT2IF){
  6442  0002C2  A2F0               	btfss	intcon3,1,c	;volatile
  6443  0002C4  D00B               	goto	i2l289
  6444                           
  6445                           ;main.c: 255: int tempcase;
  6446                           ;main.c: 256: lcdInst(0b10000000);
  6447  0002C6  0E80               	movlw	128
  6448  0002C8  EC89  F015         	call	i2_lcdInst
  6449                           
  6450                           ;main.c: 257: printf("INT2IF");
  6451  0002CC  0EF7               	movlw	low STR_5
  6452  0002CE  6E0D               	movwf	i2printf@f,c
  6453  0002D0  0EFF               	movlw	high STR_5
  6454  0002D2  6E0E               	movwf	i2printf@f+1,c
  6455  0002D4  ECEE  F003         	call	i2_printf	;wreg free
  6456                           
  6457                           ;main.c: 297: INT2IF = 0;
  6458  0002D8  92F0               	bcf	intcon3,1,c	;volatile
  6459                           
  6460                           ;main.c: 299: }
  6461  0002DA  D077               	goto	i2l298
  6462  0002DC                     i2l289:
  6463                           
  6464                           ;main.c: 350: else if (TMR0IF){
  6465  0002DC  A4F2               	btfss	intcon,2,c	;volatile
  6466  0002DE  D05B               	goto	i2l4626
  6467                           
  6468                           ;main.c: 351: LATAbits.LATA2 = 0;
  6469  0002E0  9489               	bcf	3977,2,c	;volatile
  6470                           
  6471                           ;main.c: 352: TMR0ON = 0;
  6472  0002E2  9ED5               	bcf	4053,7,c	;volatile
  6473                           
  6474                           ;main.c: 353: read_time();
  6475  0002E4  EC89  F012         	call	_read_time	;wreg free
  6476                           
  6477                           ;main.c: 354: end_time[1] = time[1];
  6478  0002E8  C09F  F077         	movff	_time+1,_end_time+1
  6479                           
  6480                           ;main.c: 355: end_time[0] = time[0];
  6481  0002EC  C09E  F076         	movff	_time,_end_time
  6482                           
  6483                           ;main.c: 356: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6484  0002F0  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  6485  0002F4  6A64               	clrf	dec_to_hex@num+1,c
  6486  0002F6  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6487  0002FA  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6488  0002FE  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6489                           
  6490                           ;main.c: 356: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6491  000302  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6492  000306  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6493  00030A  0E00               	movlw	0
  6494  00030C  6E04               	movwf	i2___wmul@multiplicand+1,c
  6495  00030E  0E3C               	movlw	60
  6496  000310  6E03               	movwf	i2___wmul@multiplicand,c
  6497  000312  EC0F  F015         	call	i2___wmul	;wreg free
  6498  000316  C001  F0C4         	movff	?i2___wmul,??_isr
  6499  00031A  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6500  00031E  C07A  F063         	movff	_start_time,dec_to_hex@num
  6501  000322  6A64               	clrf	dec_to_hex@num+1,c
  6502  000324  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6503  000328  5063               	movf	?_dec_to_hex,w,c
  6504  00032A  0100               	movlb	0	; () banked
  6505  00032C  25C4               	addwf	??_isr& (0+255),w,b
  6506  00032E  6E7C               	movwf	_stime,c
  6507  000330  5064               	movf	?_dec_to_hex+1,w,c
  6508  000332  0100               	movlb	0	; () banked
  6509  000334  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6510  000336  6E7D               	movwf	_stime+1,c
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;main.c: 357: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6514  000338  C077  F063         	movff	_end_time+1,dec_to_hex@num
  6515  00033C  6A64               	clrf	dec_to_hex@num+1,c
  6516  00033E  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6517  000342  C063  F074         	movff	?_dec_to_hex,_isr$1362
  6518  000346  C064  F075         	movff	?_dec_to_hex+1,_isr$1362+1
  6519                           
  6520                           ;main.c: 357: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6521  00034A  C074  F001         	movff	_isr$1362,i2___wmul@multiplier
  6522  00034E  C075  F002         	movff	_isr$1362+1,i2___wmul@multiplier+1
  6523  000352  0E00               	movlw	0
  6524  000354  6E04               	movwf	i2___wmul@multiplicand+1,c
  6525  000356  0E3C               	movlw	60
  6526  000358  6E03               	movwf	i2___wmul@multiplicand,c
  6527  00035A  EC0F  F015         	call	i2___wmul	;wreg free
  6528  00035E  C001  F0C4         	movff	?i2___wmul,??_isr
  6529  000362  C002  F0C5         	movff	?i2___wmul+1,??_isr+1
  6530  000366  C076  F063         	movff	_end_time,dec_to_hex@num
  6531  00036A  6A64               	clrf	dec_to_hex@num+1,c
  6532  00036C  EC1D  F00B         	call	_dec_to_hex	;wreg free
  6533  000370  5063               	movf	?_dec_to_hex,w,c
  6534  000372  0100               	movlb	0	; () banked
  6535  000374  25C4               	addwf	??_isr& (0+255),w,b
  6536  000376  6E78               	movwf	_etime,c
  6537  000378  5064               	movf	?_dec_to_hex+1,w,c
  6538  00037A  0100               	movlb	0	; () banked
  6539  00037C  21C5               	addwfc	(??_isr+1)& (0+255),w,b
  6540  00037E  6E79               	movwf	_etime+1,c
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;main.c: 358: lcdInst(0b00000001);
  6544  000380  0E01               	movlw	1
  6545  000382  EC89  F015         	call	i2_lcdInst
  6546                           
  6547                           ;main.c: 359: curr_state = OPERATIONEND;
  6548  000386  0E03               	movlw	3
  6549  000388  0100               	movlb	0	; () banked
  6550  00038A  6FC3               	movwf	_curr_state& (0+255),b
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 360: bottle_count_disp = -1;
  6554  00038C  0100               	movlb	0	; () banked
  6555  00038E  69EE               	setf	_bottle_count_disp& (0+255),b
  6556  000390  69EF               	setf	(_bottle_count_disp+1)& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 361: TMR0IF = 0;
  6560  000392  94F2               	bcf	intcon,2,c	;volatile
  6561                           
  6562                           ;main.c: 362: }
  6563  000394  D01A               	goto	i2l298
  6564  000396                     i2l4626:
  6565                           
  6566                           ;main.c: 365: lcdInst(0b10000000);
  6567  000396  0E80               	movlw	128
  6568  000398  EC89  F015         	call	i2_lcdInst
  6569                           
  6570                           ;main.c: 366: printf("bad interrupt");
  6571  00039C  0ED5               	movlw	low STR_6
  6572  00039E  6E0D               	movwf	i2printf@f,c
  6573  0003A0  0EFF               	movlw	high STR_6
  6574  0003A2  6E0E               	movwf	i2printf@f+1,c
  6575  0003A4  ECEE  F003         	call	i2_printf	;wreg free
  6576                           
  6577                           ;main.c: 367: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6578  0003A8  0E00               	movlw	0
  6579  0003AA  6E73               	movwf	isr@i,c
  6580  0003AC                     i2l4632:
  6581  0003AC  0E63               	movlw	99
  6582  0003AE  6473               	cpfsgt	isr@i,c
  6583  0003B0  D001               	goto	i2l4636
  6584  0003B2  D7F1               	goto	i2l4626
  6585  0003B4                     i2l4636:
  6586  0003B4  0E21               	movlw	33
  6587  0003B6  0100               	movlb	0	; () banked
  6588  0003B8  6FC4               	movwf	??_isr& (0+255),b
  6589  0003BA  0E76               	movlw	118
  6590  0003BC                     i2u459_47:
  6591  0003BC  2EE8               	decfsz	wreg,f,c
  6592  0003BE  D7FE               	bra	i2u459_47
  6593  0003C0  2FC4               	decfsz	??_isr& (0+255),f,b
  6594  0003C2  D7FC               	bra	i2u459_47
  6595  0003C4  F000               	nop	
  6596  0003C6  2A73               	incf	isr@i,f,c
  6597  0003C8  D7F1               	goto	i2l4632
  6598  0003CA                     i2l298:
  6599  0003CA  C0D3  FFF5         	movff	??_isr+15,tablat
  6600  0003CE  C0D2  FFF8         	movff	??_isr+14,tblptru
  6601  0003D2  C0D1  FFF7         	movff	??_isr+13,tblptrh
  6602  0003D6  C0D0  FFF6         	movff	??_isr+12,tblptrl
  6603  0003DA  C0CF  FFF4         	movff	??_isr+11,prodh
  6604  0003DE  C0CE  FFF3         	movff	??_isr+10,prodl
  6605  0003E2  C0CD  FFDA         	movff	??_isr+9,fsr2h
  6606  0003E6  C0CC  FFD9         	movff	??_isr+8,fsr2l
  6607  0003EA  C0CB  FFE2         	movff	??_isr+7,fsr1h
  6608  0003EE  C0CA  FFE1         	movff	??_isr+6,fsr1l
  6609  0003F2  C0C9  FFEA         	movff	??_isr+5,fsr0h
  6610  0003F6  C0C8  FFE9         	movff	??_isr+4,fsr0l
  6611  0003FA  C0C7  FFFB         	movff	??_isr+3,pclatu
  6612  0003FE  C0C6  FFFA         	movff	??_isr+2,pclath
  6613  000402  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6614  000404  0011               	retfie		f
  6615  000406                     __end_of_isr:
  6616                           	opt stack 0
  6617                           pclatu	equ	0xFFB
  6618                           pclath	equ	0xFFA
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           intcon2	equ	0xFF1
  6627                           intcon3	equ	0xFF0
  6628                           postinc0	equ	0xFEE
  6629                           fsr0h	equ	0xFEA
  6630                           fsr0l	equ	0xFE9
  6631                           wreg	equ	0xFE8
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function i2_read_colorsensor *****************
  6642 ;; Defined at:
  6643 ;;		line 578 in file "main.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  6648 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  6649 ;;  read_colorse    2   15[COMRAM] int 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;Total ram usage:       14 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    2
  6666 ;; This function calls:
  6667 ;;		i2_I2C_Master_Read
  6668 ;;		i2_I2C_Master_Start
  6669 ;;		i2_I2C_Master_Stop
  6670 ;;		i2_I2C_Master_Write
  6671 ;; This function is called by:
  6672 ;;		_isr
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text28
  6677  00191E                     __ptext28:
  6678                           	opt stack 0
  6679  00191E                     i2_read_colorsensor:
  6680                           	opt stack 23
  6681                           
  6682                           ;main.c: 583: unsigned char color_low[4];
  6683                           ;main.c: 584: unsigned char color_high[4];
  6684                           ;main.c: 585: int i;
  6685                           ;main.c: 588: I2C_Master_Start();
  6686                           
  6687                           ;incstack = 0
  6688  00191E  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  6689                           
  6690                           ;main.c: 589: I2C_Master_Write(0b01010010);
  6691  001922  0E00               	movlw	0
  6692  001924  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6693  001926  0E52               	movlw	82
  6694  001928  6E02               	movwf	i2I2C_Master_Write@d,c
  6695  00192A  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  6696                           
  6697                           ;main.c: 590: I2C_Master_Write(0b10110100);
  6698  00192E  0E00               	movlw	0
  6699  001930  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6700  001932  0EB4               	movlw	180
  6701  001934  6E02               	movwf	i2I2C_Master_Write@d,c
  6702  001936  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  6703                           
  6704                           ;main.c: 591: I2C_Master_Start();
  6705  00193A  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  6706                           
  6707                           ;main.c: 592: I2C_Master_Write(0b01010011);
  6708  00193E  0E00               	movlw	0
  6709  001940  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6710  001942  0E53               	movlw	83
  6711  001944  6E02               	movwf	i2I2C_Master_Write@d,c
  6712  001946  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  6713                           
  6714                           ;main.c: 593: for(i=0; i<3; i++){
  6715  00194A  0E00               	movlw	0
  6716  00194C  6E11               	movwf	i2read_colorsensor@i+1,c
  6717  00194E  0E00               	movlw	0
  6718  001950  6E10               	movwf	i2read_colorsensor@i,c
  6719  001952                     i2l4282:
  6720  001952  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6721  001954  D006               	goto	i2l4286
  6722  001956  5011               	movf	i2read_colorsensor@i+1,w,c
  6723  001958  E11B               	bnz	i2l4292
  6724  00195A  0E03               	movlw	3
  6725  00195C  5C10               	subwf	i2read_colorsensor@i,w,c
  6726  00195E  B0D8               	btfsc	status,0,c
  6727  001960  D017               	goto	i2l4292
  6728  001962                     i2l4286:
  6729                           
  6730                           ;main.c: 594: color_low[i] = I2C_Master_Read(1);
  6731  001962  0E08               	movlw	low i2read_colorsensor@color_low
  6732  001964  2410               	addwf	i2read_colorsensor@i,w,c
  6733  001966  6ED9               	movwf	fsr2l,c
  6734  001968  0E00               	movlw	high i2read_colorsensor@color_low
  6735  00196A  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6736  00196C  6EDA               	movwf	fsr2h,c
  6737  00196E  0E01               	movlw	1
  6738  001970  ECFC  F014         	call	i2_I2C_Master_Read
  6739  001974  6EDF               	movwf	indf2,c
  6740                           
  6741                           ;main.c: 595: color_high[i] = I2C_Master_Read(1);
  6742  001976  0E0C               	movlw	low i2read_colorsensor@color_high
  6743  001978  2410               	addwf	i2read_colorsensor@i,w,c
  6744  00197A  6ED9               	movwf	fsr2l,c
  6745  00197C  0E00               	movlw	high i2read_colorsensor@color_high
  6746  00197E  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6747  001980  6EDA               	movwf	fsr2h,c
  6748  001982  0E01               	movlw	1
  6749  001984  ECFC  F014         	call	i2_I2C_Master_Read
  6750  001988  6EDF               	movwf	indf2,c
  6751  00198A  4A10               	infsnz	i2read_colorsensor@i,f,c
  6752  00198C  2A11               	incf	i2read_colorsensor@i+1,f,c
  6753  00198E  D7E1               	goto	i2l4282
  6754  001990                     i2l4292:
  6755                           
  6756                           ;main.c: 596: }
  6757                           ;main.c: 597: color_low[3] = I2C_Master_Read(1);
  6758  001990  0E01               	movlw	1
  6759  001992  ECFC  F014         	call	i2_I2C_Master_Read
  6760  001996  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  6761                           
  6762                           ;main.c: 598: color_high[3] = I2C_Master_Read(0);
  6763  001998  0E00               	movlw	0
  6764  00199A  ECFC  F014         	call	i2_I2C_Master_Read
  6765  00199E  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  6766                           
  6767                           ;main.c: 599: I2C_Master_Stop();
  6768  0019A0  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  6769                           
  6770                           ;main.c: 601: for(i=0; i<4; i++){
  6771  0019A4  0E00               	movlw	0
  6772  0019A6  6E11               	movwf	i2read_colorsensor@i+1,c
  6773  0019A8  0E00               	movlw	0
  6774  0019AA  6E10               	movwf	i2read_colorsensor@i,c
  6775  0019AC                     i2l4296:
  6776  0019AC  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  6777  0019AE  D006               	goto	i2l4300
  6778  0019B0  5011               	movf	i2read_colorsensor@i+1,w,c
  6779  0019B2  E12B               	bnz	i2l396
  6780  0019B4  0E04               	movlw	4
  6781  0019B6  5C10               	subwf	i2read_colorsensor@i,w,c
  6782  0019B8  B0D8               	btfsc	status,0,c
  6783  0019BA  0012               	return	
  6784  0019BC                     i2l4300:
  6785                           
  6786                           ;main.c: 602: color[i] = (color_high[i] << 8)|(color_low[i]);
  6787  0019BC  0E0C               	movlw	low i2read_colorsensor@color_high
  6788  0019BE  2410               	addwf	i2read_colorsensor@i,w,c
  6789  0019C0  6ED9               	movwf	fsr2l,c
  6790  0019C2  0E00               	movlw	high i2read_colorsensor@color_high
  6791  0019C4  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6792  0019C6  6EDA               	movwf	fsr2h,c
  6793  0019C8  50DF               	movf	indf2,w,c
  6794  0019CA  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6795  0019CC  5004               	movf	??i2_read_colorsensor,w,c
  6796  0019CE  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  6797  0019D0  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  6798  0019D2  0E08               	movlw	low i2read_colorsensor@color_low
  6799  0019D4  2410               	addwf	i2read_colorsensor@i,w,c
  6800  0019D6  6ED9               	movwf	fsr2l,c
  6801  0019D8  0E00               	movlw	high i2read_colorsensor@color_low
  6802  0019DA  2011               	addwfc	i2read_colorsensor@i+1,w,c
  6803  0019DC  6EDA               	movwf	fsr2h,c
  6804  0019DE  50DF               	movf	indf2,w,c
  6805  0019E0  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  6806  0019E2  5007               	movf	??i2_read_colorsensor+3,w,c
  6807  0019E4  1205               	iorwf	??i2_read_colorsensor+1,f,c
  6808  0019E6  0E00               	movlw	0
  6809  0019E8  1206               	iorwf	??i2_read_colorsensor+2,f,c
  6810  0019EA  90D8               	bcf	status,0,c
  6811  0019EC  3410               	rlcf	i2read_colorsensor@i,w,c
  6812  0019EE  6ED9               	movwf	fsr2l,c
  6813  0019F0  3411               	rlcf	i2read_colorsensor@i+1,w,c
  6814  0019F2  6EDA               	movwf	fsr2h,c
  6815  0019F4  0E96               	movlw	low _color
  6816  0019F6  26D9               	addwf	fsr2l,f,c
  6817  0019F8  0E00               	movlw	high _color
  6818  0019FA  22DA               	addwfc	fsr2h,f,c
  6819  0019FC  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  6820  001A00  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  6821  001A04  4A10               	infsnz	i2read_colorsensor@i,f,c
  6822  001A06  2A11               	incf	i2read_colorsensor@i+1,f,c
  6823  001A08  D7D1               	goto	i2l4296
  6824  001A0A                     i2l396:
  6825  001A0A  0012               	return		;funcret
  6826  001A0C                     __end_ofi2_read_colorsensor:
  6827                           	opt stack 0
  6828                           pclatu	equ	0xFFB
  6829                           pclath	equ	0xFFA
  6830                           tblptru	equ	0xFF8
  6831                           tblptrh	equ	0xFF7
  6832                           tblptrl	equ	0xFF6
  6833                           tablat	equ	0xFF5
  6834                           prodh	equ	0xFF4
  6835                           prodl	equ	0xFF3
  6836                           intcon	equ	0xFF2
  6837                           intcon2	equ	0xFF1
  6838                           intcon3	equ	0xFF0
  6839                           postinc0	equ	0xFEE
  6840                           fsr0h	equ	0xFEA
  6841                           fsr0l	equ	0xFE9
  6842                           wreg	equ	0xFE8
  6843                           fsr1h	equ	0xFE2
  6844                           fsr1l	equ	0xFE1
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852 ;; *************** function i2_printf *****************
  6853 ;; Defined at:
  6854 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6855 ;; Parameters:    Size  Location     Type
  6856 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6857 ;;		 -> STR_28(15), STR_27(16), STR_26(28), STR_25(25), 
  6858 ;;		 -> STR_24(24), STR_23(23), STR_22(18), STR_21(23), 
  6859 ;;		 -> STR_20(10), STR_19(18), STR_18(18), STR_17(18), 
  6860 ;;		 -> STR_16(18), STR_15(18), STR_14(18), STR_13(18), 
  6861 ;;		 -> STR_12(18), STR_11(17), STR_10(17), STR_9(23), 
  6862 ;;		 -> STR_8(23), STR_7(10), STR_6(14), STR_5(7), 
  6863 ;;		 -> STR_4(24), STR_3(24), STR_2(24), STR_1(24), 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  printf          4    0        struct .
  6866 ;;  printf          3    0        PTR const unsigned char 
  6867 ;;  printf          2   29[COMRAM] int 
  6868 ;;  printf          2   26[COMRAM] unsigned int 
  6869 ;;  printf          2   23[COMRAM] PTR void [1]
  6870 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6871 ;;  printf          2    0        unsigned int 
  6872 ;;  printf          1   31[COMRAM] char 
  6873 ;;  printf          1   28[COMRAM] unsigned char 
  6874 ;;  printf          1   25[COMRAM] char 
  6875 ;;  printf          1   22[COMRAM] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  2   12[COMRAM] int 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6885 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;Total ram usage:       20 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		i2___lwdiv
  6894 ;;		i2___lwmod
  6895 ;;		i2___wmul
  6896 ;;		i2_isdigit
  6897 ;;		i2_putch
  6898 ;; This function is called by:
  6899 ;;		_isr
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text29
  6904  0007DC                     __ptext29:
  6905                           	opt stack 0
  6906  0007DC                     i2_printf:
  6907                           	opt stack 23
  6908                           
  6909                           ;doprnt.c: 466: va_list ap;
  6910                           ;doprnt.c: 499: signed char c;
  6911                           ;doprnt.c: 501: int width;
  6912                           ;doprnt.c: 506: signed char prec;
  6913                           ;doprnt.c: 508: unsigned char flag;
  6914                           ;doprnt.c: 523: union {
  6915                           ;doprnt.c: 524: unsigned long vd;
  6916                           ;doprnt.c: 525: double integ;
  6917                           ;doprnt.c: 526: } tmpval;
  6918                           ;doprnt.c: 528: unsigned int val;
  6919                           ;doprnt.c: 529: unsigned len;
  6920                           ;doprnt.c: 530: const char * cp;
  6921                           ;doprnt.c: 533: *ap = __va_start();
  6922                           
  6923                           ;incstack = 0
  6924  0007DC  0E0F               	movlw	low (?i2_printf+2)
  6925  0007DE  6E18               	movwf	i2printf@ap,c
  6926  0007E0  0E00               	movlw	high (?i2_printf+2)
  6927  0007E2  6E19               	movwf	i2printf@ap+1,c
  6928                           
  6929                           ;doprnt.c: 536: while(c = *f++) {
  6930  0007E4  D184               	goto	i2l4438
  6931  0007E6                     i2l4308:
  6932                           
  6933                           ;doprnt.c: 538: if(c != '%')
  6934  0007E6  0E25               	movlw	37
  6935  0007E8  1820               	xorwf	i2printf@c,w,c
  6936  0007EA  B4D8               	btfsc	status,2,c
  6937  0007EC  D004               	goto	i2l4312
  6938                           
  6939                           ;doprnt.c: 540: {
  6940                           ;doprnt.c: 541: (putch(c) );
  6941  0007EE  5020               	movf	i2printf@c,w,c
  6942  0007F0  EC83  F015         	call	i2_putch
  6943                           
  6944                           ;doprnt.c: 542: continue;
  6945  0007F4  D17C               	goto	i2l4438
  6946  0007F6                     i2l4312:
  6947                           
  6948                           ;doprnt.c: 543: }
  6949                           ;doprnt.c: 546: width = 0;
  6950  0007F6  0E00               	movlw	0
  6951  0007F8  6E1F               	movwf	i2printf@width+1,c
  6952  0007FA  0E00               	movlw	0
  6953  0007FC  6E1E               	movwf	i2printf@width,c
  6954                           
  6955                           ;doprnt.c: 548: flag = 0;
  6956  0007FE  0E00               	movlw	0
  6957  000800  6E1D               	movwf	i2printf@flag,c
  6958                           
  6959                           ;doprnt.c: 551: switch(*f) {
  6960                           
  6961                           ;doprnt.c: 550: for(;;) {
  6962  000802  D003               	goto	i2l4318
  6963  000804                     i2l4314:
  6964                           
  6965                           ;doprnt.c: 580: flag |= 0x04;
  6966  000804  841D               	bsf	i2printf@flag,2,c
  6967                           
  6968                           ;doprnt.c: 581: f++;
  6969  000806  4A0D               	infsnz	i2printf@f,f,c
  6970  000808  2A0E               	incf	i2printf@f+1,f,c
  6971  00080A                     i2l4318:
  6972  00080A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6973  00080E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6974  000812                     	if	0	;tblptru may be non-zero
  6975  000812                     	endif
  6976  000812                     	if	0	;tblptru may be non-zero
  6977  000812                     	endif
  6978  000812  0008               	tblrd		*
  6979  000814  50F5               	movf	tablat,w,c
  6980                           
  6981                           ; Switch size 1, requested type "space"
  6982                           ; Number of cases is 1, Range of values is 48 to 48
  6983                           ; switch strategies available:
  6984                           ; Name         Instructions Cycles
  6985                           ; simple_byte            4     3 (average)
  6986                           ;	Chosen strategy is simple_byte
  6987  000816  0A30               	xorlw	48	; case 48
  6988  000818  B4D8               	btfsc	status,2,c
  6989  00081A  D7F4               	goto	i2l4314
  6990                           
  6991                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6992                           
  6993                           ;doprnt.c: 586: }
  6994                           
  6995                           ;doprnt.c: 585: break;
  6996  00081C  C00D  FFF6         	movff	i2printf@f,tblptrl
  6997  000820  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6998  000824                     	if	0	;tblptru may be non-zero
  6999  000824                     	endif
  7000  000824                     	if	0	;tblptru may be non-zero
  7001  000824                     	endif
  7002  000824  0008               	tblrd		*
  7003  000826  50F5               	movf	tablat,w,c
  7004  000828  EC45  F015         	call	i2_isdigit
  7005  00082C  A0D8               	btfss	status,0,c
  7006  00082E  D038               	goto	i2l4338
  7007                           
  7008                           ;doprnt.c: 598: width = 0;
  7009  000830  0E00               	movlw	0
  7010  000832  6E1F               	movwf	i2printf@width+1,c
  7011  000834  0E00               	movlw	0
  7012  000836  6E1E               	movwf	i2printf@width,c
  7013  000838                     i2l4324:
  7014                           
  7015                           ;doprnt.c: 600: width *= 10;
  7016  000838  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  7017  00083C  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7018  000840  0E00               	movlw	0
  7019  000842  6E04               	movwf	i2___wmul@multiplicand+1,c
  7020  000844  0E0A               	movlw	10
  7021  000846  6E03               	movwf	i2___wmul@multiplicand,c
  7022  000848  EC0F  F015         	call	i2___wmul	;wreg free
  7023  00084C  C001  F01E         	movff	?i2___wmul,i2printf@width
  7024  000850  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  7025                           
  7026                           ;doprnt.c: 601: width += *f++ - '0';
  7027  000854  0ED0               	movlw	208
  7028  000856  6E13               	movwf	??i2_printf& (0+255),c
  7029  000858  0EFF               	movlw	255
  7030  00085A  6E14               	movwf	(??i2_printf+1)& (0+255),c
  7031  00085C  C00D  FFF6         	movff	i2printf@f,tblptrl
  7032  000860  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7033  000864                     	if	0	;tblptru may be non-zero
  7034  000864                     	endif
  7035  000864                     	if	0	;tblptru may be non-zero
  7036  000864                     	endif
  7037  000864  0008               	tblrd		*
  7038  000866  50F5               	movf	tablat,w,c
  7039  000868  6E15               	movwf	(??i2_printf+2)& (0+255),c
  7040  00086A  6A16               	clrf	(??i2_printf+3)& (0+255),c
  7041  00086C  5013               	movf	??i2_printf,w,c
  7042  00086E  2615               	addwf	??i2_printf+2,f,c
  7043  000870  5014               	movf	??i2_printf+1,w,c
  7044  000872  2216               	addwfc	??i2_printf+3,f,c
  7045  000874  5015               	movf	??i2_printf+2,w,c
  7046  000876  261E               	addwf	i2printf@width,f,c
  7047  000878  5016               	movf	??i2_printf+3,w,c
  7048  00087A  221F               	addwfc	i2printf@width+1,f,c
  7049  00087C  4A0D               	infsnz	i2printf@f,f,c
  7050  00087E  2A0E               	incf	i2printf@f+1,f,c
  7051                           
  7052                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7053  000880  C00D  FFF6         	movff	i2printf@f,tblptrl
  7054  000884  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7055  000888                     	if	0	;tblptru may be non-zero
  7056  000888                     	endif
  7057  000888                     	if	0	;tblptru may be non-zero
  7058  000888                     	endif
  7059  000888  0008               	tblrd		*
  7060  00088A  50F5               	movf	tablat,w,c
  7061  00088C  EC45  F015         	call	i2_isdigit
  7062  000890  A0D8               	btfss	status,0,c
  7063  000892  D006               	goto	i2l4338
  7064  000894  D7D1               	goto	i2l4324
  7065  000896                     i2l4332:
  7066                           
  7067                           ;doprnt.c: 721: flag |= 0x80;
  7068  000896  8E1D               	bsf	i2printf@flag,7,c
  7069                           
  7070                           ;doprnt.c: 723: break;
  7071  000898  D01D               	goto	i2l4340
  7072  00089A                     i2l4334:
  7073                           
  7074                           ;doprnt.c: 818: flag |= 0xC0;
  7075  00089A  0EC0               	movlw	192
  7076  00089C  121D               	iorwf	i2printf@flag,f,c
  7077                           
  7078                           ;doprnt.c: 822: }
  7079                           
  7080                           ;doprnt.c: 819: break;
  7081  00089E  D01A               	goto	i2l4340
  7082  0008A0                     i2l4338:
  7083  0008A0  C00D  FFF6         	movff	i2printf@f,tblptrl
  7084  0008A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7085  0008A8  4A0D               	infsnz	i2printf@f,f,c
  7086  0008AA  2A0E               	incf	i2printf@f+1,f,c
  7087  0008AC                     	if	0	;tblptru may be non-zero
  7088  0008AC                     	endif
  7089  0008AC                     	if	0	;tblptru may be non-zero
  7090  0008AC                     	endif
  7091  0008AC  0008               	tblrd		*
  7092  0008AE  CFF5 F020          	movff	tablat,i2printf@c
  7093  0008B2  5020               	movf	i2printf@c,w,c
  7094                           
  7095                           ; Switch size 1, requested type "space"
  7096                           ; Number of cases is 5, Range of values is 0 to 120
  7097                           ; switch strategies available:
  7098                           ; Name         Instructions Cycles
  7099                           ; simple_byte           16     9 (average)
  7100                           ;	Chosen strategy is simple_byte
  7101  0008B4  0A00               	xorlw	0	; case 0
  7102  0008B6  B4D8               	btfsc	status,2,c
  7103  0008B8  0012               	return	
  7104  0008BA  0A64               	xorlw	100	; case 100
  7105  0008BC  B4D8               	btfsc	status,2,c
  7106  0008BE  D00A               	goto	i2l4340
  7107  0008C0  0A0D               	xorlw	13	; case 105
  7108  0008C2  B4D8               	btfsc	status,2,c
  7109  0008C4  D007               	goto	i2l4340
  7110  0008C6  0A1C               	xorlw	28	; case 117
  7111  0008C8  B4D8               	btfsc	status,2,c
  7112  0008CA  D7E7               	goto	i2l4334
  7113  0008CC  0A0D               	xorlw	13	; case 120
  7114  0008CE  B4D8               	btfsc	status,2,c
  7115  0008D0  D7E2               	goto	i2l4332
  7116  0008D2  D10D               	goto	i2l4438
  7117  0008D4                     i2l4340:
  7118                           
  7119                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7120  0008D4  C01D  F013         	movff	i2printf@flag,??i2_printf
  7121  0008D8  0EC0               	movlw	192
  7122  0008DA  1613               	andwf	??i2_printf,f,c
  7123  0008DC  A4D8               	btfss	status,2,c
  7124  0008DE  D015               	goto	i2l4352
  7125                           
  7126                           ;doprnt.c: 1253: {
  7127                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7128  0008E0  C018  FFD9         	movff	i2printf@ap,fsr2l
  7129  0008E4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7130  0008E8  CFDE F01B          	movff	postinc2,i2printf@val
  7131  0008EC  CFDD F01C          	movff	postdec2,i2printf@val+1
  7132  0008F0  0E02               	movlw	2
  7133  0008F2  2618               	addwf	i2printf@ap,f,c
  7134  0008F4  0E00               	movlw	0
  7135  0008F6  2219               	addwfc	i2printf@ap+1,f,c
  7136                           
  7137                           ;doprnt.c: 1261: if((int)val < 0) {
  7138  0008F8  AE1C               	btfss	i2printf@val+1,7,c
  7139  0008FA  D044               	goto	i2l4386
  7140                           
  7141                           ;doprnt.c: 1262: flag |= 0x03;
  7142  0008FC  0E03               	movlw	3
  7143  0008FE  121D               	iorwf	i2printf@flag,f,c
  7144                           
  7145                           ;doprnt.c: 1263: val = -val;
  7146  000900  6C1B               	negf	i2printf@val,c
  7147  000902  1E1C               	comf	i2printf@val+1,f,c
  7148  000904  B0D8               	btfsc	status,0,c
  7149  000906  2A1C               	incf	i2printf@val+1,f,c
  7150                           
  7151                           ;doprnt.c: 1264: }
  7152                           ;doprnt.c: 1266: }
  7153  000908  D03D               	goto	i2l4386
  7154  00090A                     i2l4352:
  7155                           
  7156                           ;doprnt.c: 1268: else
  7157                           ;doprnt.c: 1273: {
  7158                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7159  00090A  C018  FFD9         	movff	i2printf@ap,fsr2l
  7160  00090E  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  7161  000912  CFDE F01B          	movff	postinc2,i2printf@val
  7162  000916  CFDD F01C          	movff	postdec2,i2printf@val+1
  7163  00091A  0E02               	movlw	2
  7164  00091C  2618               	addwf	i2printf@ap,f,c
  7165  00091E  0E00               	movlw	0
  7166  000920  2219               	addwfc	i2printf@ap+1,f,c
  7167                           
  7168                           ;doprnt.c: 1287: }
  7169                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7170  000922  D030               	goto	i2l4386
  7171  000924                     i2l4356:
  7172                           
  7173                           ;doprnt.c: 1302: case 0xC0:
  7174                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7175  000924  0E01               	movlw	1
  7176  000926  6E20               	movwf	i2printf@c,c
  7177  000928                     i2l4358:
  7178  000928  0E05               	movlw	5
  7179  00092A  1820               	xorwf	i2printf@c,w,c
  7180  00092C  B4D8               	btfsc	status,2,c
  7181  00092E  D035               	goto	i2l4388
  7182                           
  7183                           ;doprnt.c: 1306: if(val < dpowers[c])
  7184  000930  5020               	movf	i2printf@c,w,c
  7185  000932  0D02               	mullw	2
  7186  000934  0EB6               	movlw	low _dpowers
  7187  000936  24F3               	addwf	prodl,w,c
  7188  000938  6EF6               	movwf	tblptrl,c
  7189  00093A  0EFD               	movlw	high _dpowers
  7190  00093C  20F4               	addwfc	prodh,w,c
  7191  00093E  6EF7               	movwf	tblptrh,c
  7192  000940                     	if	0	;There are less than 3 active tblptr bytes
  7193  000940                     	endif
  7194  000940  0009               	tblrd		*+
  7195  000942  50F5               	movf	tablat,w,c
  7196  000944  5C1B               	subwf	i2printf@val,w,c
  7197  000946  0009               	tblrd		*+
  7198  000948  50F5               	movf	tablat,w,c
  7199  00094A  581C               	subwfb	i2printf@val+1,w,c
  7200  00094C  A0D8               	btfss	status,0,c
  7201  00094E  D025               	goto	i2l4388
  7202                           
  7203                           ;doprnt.c: 1307: break;
  7204  000950  2A20               	incf	i2printf@c,f,c
  7205  000952  D7EA               	goto	i2l4358
  7206  000954                     i2l4370:
  7207                           
  7208                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7209  000954  0E01               	movlw	1
  7210  000956  6E20               	movwf	i2printf@c,c
  7211  000958                     i2l4372:
  7212  000958  0E04               	movlw	4
  7213  00095A  1820               	xorwf	i2printf@c,w,c
  7214  00095C  B4D8               	btfsc	status,2,c
  7215  00095E  D01D               	goto	i2l4388
  7216                           
  7217                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7218  000960  5020               	movf	i2printf@c,w,c
  7219  000962  0D02               	mullw	2
  7220  000964  0EC0               	movlw	low _hexpowers
  7221  000966  24F3               	addwf	prodl,w,c
  7222  000968  6EF6               	movwf	tblptrl,c
  7223  00096A  0EFD               	movlw	high _hexpowers
  7224  00096C  20F4               	addwfc	prodh,w,c
  7225  00096E  6EF7               	movwf	tblptrh,c
  7226  000970                     	if	0	;There are less than 3 active tblptr bytes
  7227  000970                     	endif
  7228  000970  0009               	tblrd		*+
  7229  000972  50F5               	movf	tablat,w,c
  7230  000974  5C1B               	subwf	i2printf@val,w,c
  7231  000976  0009               	tblrd		*+
  7232  000978  50F5               	movf	tablat,w,c
  7233  00097A  581C               	subwfb	i2printf@val+1,w,c
  7234  00097C  A0D8               	btfss	status,0,c
  7235  00097E  D00D               	goto	i2l4388
  7236                           
  7237                           ;doprnt.c: 1318: break;
  7238  000980  2A20               	incf	i2printf@c,f,c
  7239  000982  D7EA               	goto	i2l4372
  7240  000984                     i2l4386:
  7241  000984  501D               	movf	i2printf@flag,w,c
  7242  000986  0BC0               	andlw	192
  7243                           
  7244                           ; Switch size 1, requested type "space"
  7245                           ; Number of cases is 3, Range of values is 0 to 192
  7246                           ; switch strategies available:
  7247                           ; Name         Instructions Cycles
  7248                           ; simple_byte           10     6 (average)
  7249                           ;	Chosen strategy is simple_byte
  7250  000988  0A00               	xorlw	0	; case 0
  7251  00098A  B4D8               	btfsc	status,2,c
  7252  00098C  D7CB               	goto	i2l4356
  7253  00098E  0A80               	xorlw	128	; case 128
  7254  000990  B4D8               	btfsc	status,2,c
  7255  000992  D7E0               	goto	i2l4370
  7256  000994  0A40               	xorlw	64	; case 192
  7257  000996  B4D8               	btfsc	status,2,c
  7258  000998  D7C5               	goto	i2l4356
  7259  00099A                     i2l4388:
  7260                           
  7261                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7262  00099A  501E               	movf	i2printf@width,w,c
  7263  00099C  101F               	iorwf	i2printf@width+1,w,c
  7264  00099E  B4D8               	btfsc	status,2,c
  7265  0009A0  D009               	goto	i2l4394
  7266  0009A2  C01D  F013         	movff	i2printf@flag,??i2_printf
  7267  0009A6  0E03               	movlw	3
  7268  0009A8  1613               	andwf	??i2_printf,f,c
  7269  0009AA  B4D8               	btfsc	status,2,c
  7270  0009AC  D003               	goto	i2l4394
  7271                           
  7272                           ;doprnt.c: 1346: width--;
  7273  0009AE  061E               	decf	i2printf@width,f,c
  7274  0009B0  A0D8               	btfss	status,0,c
  7275  0009B2  061F               	decf	i2printf@width+1,f,c
  7276  0009B4                     i2l4394:
  7277                           
  7278                           ;doprnt.c: 1381: if(width > c)
  7279  0009B4  0E80               	movlw	128
  7280  0009B6  BE20               	btfsc	i2printf@c,7,c
  7281  0009B8  0E7F               	movlw	127
  7282  0009BA  6E13               	movwf	??i2_printf& (0+255),c
  7283  0009BC  501E               	movf	i2printf@width,w,c
  7284  0009BE  5C20               	subwf	i2printf@c,w,c
  7285  0009C0  501F               	movf	i2printf@width+1,w,c
  7286  0009C2  0A80               	xorlw	128
  7287  0009C4  5813               	subwfb	??i2_printf& (0+255),w,c
  7288  0009C6  B0D8               	btfsc	status,0,c
  7289  0009C8  D007               	goto	i2l4398
  7290                           
  7291                           ;doprnt.c: 1382: width -= c;
  7292  0009CA  5020               	movf	i2printf@c,w,c
  7293  0009CC  5E1E               	subwf	i2printf@width,f,c
  7294  0009CE  0E00               	movlw	0
  7295  0009D0  BE20               	btfsc	i2printf@c,7,c
  7296  0009D2  0EFF               	movlw	255
  7297  0009D4  5A1F               	subwfb	i2printf@width+1,f,c
  7298  0009D6  D004               	goto	i2l4400
  7299  0009D8                     i2l4398:
  7300                           
  7301                           ;doprnt.c: 1383: else
  7302                           ;doprnt.c: 1384: width = 0;
  7303  0009D8  0E00               	movlw	0
  7304  0009DA  6E1F               	movwf	i2printf@width+1,c
  7305  0009DC  0E00               	movlw	0
  7306  0009DE  6E1E               	movwf	i2printf@width,c
  7307  0009E0                     i2l4400:
  7308                           
  7309                           ;doprnt.c: 1387: if(flag & 0x04) {
  7310  0009E0  A41D               	btfss	i2printf@flag,2,c
  7311  0009E2  D014               	goto	i2l4412
  7312                           
  7313                           ;doprnt.c: 1392: if(flag & 0x03)
  7314  0009E4  C01D  F013         	movff	i2printf@flag,??i2_printf
  7315  0009E8  0E03               	movlw	3
  7316  0009EA  1613               	andwf	??i2_printf,f,c
  7317  0009EC  B4D8               	btfsc	status,2,c
  7318  0009EE  D003               	goto	i2l4406
  7319                           
  7320                           ;doprnt.c: 1393: (putch('-') );
  7321  0009F0  0E2D               	movlw	45
  7322  0009F2  EC83  F015         	call	i2_putch
  7323  0009F6                     i2l4406:
  7324                           
  7325                           ;doprnt.c: 1415: if(width)
  7326  0009F6  501E               	movf	i2printf@width,w,c
  7327  0009F8  101F               	iorwf	i2printf@width+1,w,c
  7328  0009FA  B4D8               	btfsc	status,2,c
  7329  0009FC  D01E               	goto	i2l4422
  7330                           
  7331                           ;doprnt.c: 1417: (putch('0') );
  7332                           
  7333                           ;doprnt.c: 1416: do
  7334  0009FE  0E30               	movlw	48
  7335  000A00  EC83  F015         	call	i2_putch
  7336                           
  7337                           ;doprnt.c: 1418: while(--width);
  7338  000A04  061E               	decf	i2printf@width,f,c
  7339  000A06  A0D8               	btfss	status,0,c
  7340  000A08  061F               	decf	i2printf@width+1,f,c
  7341  000A0A  D7F5               	goto	i2l4406
  7342  000A0C                     i2l4412:
  7343                           
  7344                           ;doprnt.c: 1422: {
  7345                           ;doprnt.c: 1424: if(width
  7346                           ;doprnt.c: 1428: )
  7347  000A0C  501E               	movf	i2printf@width,w,c
  7348  000A0E  101F               	iorwf	i2printf@width+1,w,c
  7349  000A10  B4D8               	btfsc	status,2,c
  7350  000A12  D00A               	goto	i2l4418
  7351  000A14                     i2l4414:
  7352                           
  7353                           ;doprnt.c: 1430: (putch(' ') );
  7354  000A14  0E20               	movlw	32
  7355  000A16  EC83  F015         	call	i2_putch
  7356                           
  7357                           ;doprnt.c: 1431: while(--width);
  7358  000A1A  061E               	decf	i2printf@width,f,c
  7359  000A1C  A0D8               	btfss	status,0,c
  7360  000A1E  061F               	decf	i2printf@width+1,f,c
  7361  000A20  501E               	movf	i2printf@width,w,c
  7362  000A22  101F               	iorwf	i2printf@width+1,w,c
  7363  000A24  A4D8               	btfss	status,2,c
  7364  000A26  D7F6               	goto	i2l4414
  7365  000A28                     i2l4418:
  7366                           
  7367                           ;doprnt.c: 1438: if(flag & 0x03)
  7368  000A28  C01D  F013         	movff	i2printf@flag,??i2_printf
  7369  000A2C  0E03               	movlw	3
  7370  000A2E  1613               	andwf	??i2_printf,f,c
  7371  000A30  B4D8               	btfsc	status,2,c
  7372  000A32  D003               	goto	i2l4422
  7373                           
  7374                           ;doprnt.c: 1439: (putch('-') );
  7375  000A34  0E2D               	movlw	45
  7376  000A36  EC83  F015         	call	i2_putch
  7377  000A3A                     i2l4422:
  7378                           
  7379                           ;doprnt.c: 1469: }
  7380                           ;doprnt.c: 1472: prec = c;
  7381  000A3A  C020  F01A         	movff	i2printf@c,i2printf@prec
  7382                           
  7383                           ;doprnt.c: 1474: while(prec--) {
  7384  000A3E  D053               	goto	i2l4436
  7385  000A40                     i2l4424:
  7386                           
  7387                           ;doprnt.c: 1486: case 0xC0:
  7388                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7389  000A40  501A               	movf	i2printf@prec,w,c
  7390  000A42  0D02               	mullw	2
  7391  000A44  0EB6               	movlw	low _dpowers
  7392  000A46  24F3               	addwf	prodl,w,c
  7393  000A48  6EF6               	movwf	tblptrl,c
  7394  000A4A  0EFD               	movlw	high _dpowers
  7395  000A4C  20F4               	addwfc	prodh,w,c
  7396  000A4E  6EF7               	movwf	tblptrh,c
  7397  000A50                     	if	0	;There are less than 3 active tblptr bytes
  7398  000A50                     	endif
  7399  000A50  0009               	tblrd		*+
  7400  000A52  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7401  000A56  000A               	tblrd		*-
  7402  000A58  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7403  000A5C  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7404  000A60  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7405  000A64  EC7C  F013         	call	i2___lwdiv	;wreg free
  7406  000A68  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7407  000A6C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7408  000A70  0E00               	movlw	0
  7409  000A72  6E0B               	movwf	i2___lwmod@divisor+1,c
  7410  000A74  0E0A               	movlw	10
  7411  000A76  6E0A               	movwf	i2___lwmod@divisor,c
  7412  000A78  ECF4  F013         	call	i2___lwmod	;wreg free
  7413  000A7C  5008               	movf	?i2___lwmod,w,c
  7414  000A7E  0F30               	addlw	48
  7415  000A80  6E20               	movwf	i2printf@c,c
  7416                           
  7417                           ;doprnt.c: 1491: break;
  7418  000A82  D02E               	goto	i2l4434
  7419  000A84                     i2l4426:
  7420                           
  7421                           ;doprnt.c: 1499: {
  7422                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7423  000A84  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7424  000A88  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7425  000A8C  501A               	movf	i2printf@prec,w,c
  7426  000A8E  0D02               	mullw	2
  7427  000A90  0EC0               	movlw	low _hexpowers
  7428  000A92  24F3               	addwf	prodl,w,c
  7429  000A94  6EF6               	movwf	tblptrl,c
  7430  000A96  0EFD               	movlw	high _hexpowers
  7431  000A98  20F4               	addwfc	prodh,w,c
  7432  000A9A  6EF7               	movwf	tblptrh,c
  7433  000A9C                     	if	0	;There are less than 3 active tblptr bytes
  7434  000A9C                     	endif
  7435  000A9C  0009               	tblrd		*+
  7436  000A9E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7437  000AA2  000A               	tblrd		*-
  7438  000AA4  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7439  000AA8  EC7C  F013         	call	i2___lwdiv	;wreg free
  7440  000AAC  5001               	movf	?i2___lwdiv,w,c
  7441  000AAE  0B0F               	andlw	15
  7442  000AB0  6E17               	movwf	i2printf@idx,c
  7443                           
  7444                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7445  000AB2  5017               	movf	i2printf@idx,w,c
  7446  000AB4  0D01               	mullw	1
  7447  000AB6  0E83               	movlw	low STR_29
  7448  000AB8  24F3               	addwf	prodl,w,c
  7449  000ABA  6EF6               	movwf	tblptrl,c
  7450  000ABC  0EFF               	movlw	high STR_29
  7451  000ABE  20F4               	addwfc	prodh,w,c
  7452  000AC0  6EF7               	movwf	tblptrh,c
  7453  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  7454  000AC2                     	endif
  7455  000AC2  0008               	tblrd		*
  7456  000AC4  CFF5 F020          	movff	tablat,i2printf@c
  7457                           
  7458                           ;doprnt.c: 1523: }
  7459                           
  7460                           ;doprnt.c: 1508: }
  7461                           ;doprnt.c: 1510: break;
  7462  000AC8  D00B               	goto	i2l4434
  7463  000ACA                     i2l4432:
  7464  000ACA  501D               	movf	i2printf@flag,w,c
  7465  000ACC  0BC0               	andlw	192
  7466                           
  7467                           ; Switch size 1, requested type "space"
  7468                           ; Number of cases is 3, Range of values is 0 to 192
  7469                           ; switch strategies available:
  7470                           ; Name         Instructions Cycles
  7471                           ; simple_byte           10     6 (average)
  7472                           ;	Chosen strategy is simple_byte
  7473  000ACE  0A00               	xorlw	0	; case 0
  7474  000AD0  B4D8               	btfsc	status,2,c
  7475  000AD2  D7B6               	goto	i2l4424
  7476  000AD4  0A80               	xorlw	128	; case 128
  7477  000AD6  B4D8               	btfsc	status,2,c
  7478  000AD8  D7D5               	goto	i2l4426
  7479  000ADA  0A40               	xorlw	64	; case 192
  7480  000ADC  B4D8               	btfsc	status,2,c
  7481  000ADE  D7B0               	goto	i2l4424
  7482  000AE0                     i2l4434:
  7483                           
  7484                           ;doprnt.c: 1524: (putch(c) );
  7485  000AE0  5020               	movf	i2printf@c,w,c
  7486  000AE2  EC83  F015         	call	i2_putch
  7487  000AE6                     i2l4436:
  7488  000AE6  061A               	decf	i2printf@prec,f,c
  7489  000AE8  281A               	incf	i2printf@prec,w,c
  7490  000AEA  A4D8               	btfss	status,2,c
  7491  000AEC  D7EE               	goto	i2l4432
  7492  000AEE                     i2l4438:
  7493  000AEE  C00D  FFF6         	movff	i2printf@f,tblptrl
  7494  000AF2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7495  000AF6  4A0D               	infsnz	i2printf@f,f,c
  7496  000AF8  2A0E               	incf	i2printf@f+1,f,c
  7497  000AFA                     	if	0	;tblptru may be non-zero
  7498  000AFA                     	endif
  7499  000AFA                     	if	0	;tblptru may be non-zero
  7500  000AFA                     	endif
  7501  000AFA  0008               	tblrd		*
  7502  000AFC  CFF5 F020          	movff	tablat,i2printf@c
  7503  000B00  5020               	movf	i2printf@c,w,c
  7504  000B02  B4D8               	btfsc	status,2,c
  7505  000B04  0012               	return	
  7506  000B06  D66F               	goto	i2l4308
  7507  000B08                     __end_ofi2_printf:
  7508                           	opt stack 0
  7509                           pclatu	equ	0xFFB
  7510                           pclath	equ	0xFFA
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           intcon3	equ	0xFF0
  7520                           postinc0	equ	0xFEE
  7521                           fsr0h	equ	0xFEA
  7522                           fsr0l	equ	0xFE9
  7523                           wreg	equ	0xFE8
  7524                           fsr1h	equ	0xFE2
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function i2_putch *****************
  7534 ;; Defined at:
  7535 ;;		line 31 in file "lcd.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  data            1    wreg     unsigned char 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  data            1    2[COMRAM] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      void 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0, cstack
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;Total ram usage:        1 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    1
  7556 ;; This function calls:
  7557 ;;		i2_lcdNibble
  7558 ;; This function is called by:
  7559 ;;		i2_printf
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text30
  7564  002B06                     __ptext30:
  7565                           	opt stack 0
  7566  002B06                     i2_putch:
  7567                           	opt stack 23
  7568                           
  7569                           ;incstack = 0
  7570                           ;i2putch@data stored from wreg
  7571  002B06  6E03               	movwf	i2putch@data,c
  7572                           
  7573                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7574  002B08  848C               	bsf	3980,2,c	;volatile
  7575                           
  7576                           ;lcd.c: 33: lcdNibble(data);
  7577  002B0A  5003               	movf	i2putch@data,w,c
  7578  002B0C  ECCD  F013         	call	i2_lcdNibble
  7579  002B10  0012               	return		;funcret
  7580  002B12                     __end_ofi2_putch:
  7581                           	opt stack 0
  7582                           pclatu	equ	0xFFB
  7583                           pclath	equ	0xFFA
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           intcon3	equ	0xFF0
  7593                           postinc0	equ	0xFEE
  7594                           fsr0h	equ	0xFEA
  7595                           fsr0l	equ	0xFE9
  7596                           wreg	equ	0xFE8
  7597                           fsr1h	equ	0xFE2
  7598                           fsr1l	equ	0xFE1
  7599                           indf2	equ	0xFDF
  7600                           postinc2	equ	0xFDE
  7601                           postdec2	equ	0xFDD
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8
  7605                           
  7606 ;; *************** function i2_isdigit *****************
  7607 ;; Defined at:
  7608 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  c               1    wreg     unsigned char 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  c               1    2[COMRAM] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;		None               void
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;Total ram usage:        3 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		i2_printf
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text31
  7636  002A8A                     __ptext31:
  7637                           	opt stack 0
  7638  002A8A                     i2_isdigit:
  7639                           	opt stack 24
  7640                           
  7641                           ;incstack = 0
  7642                           ;i2isdigit@c stored from wreg
  7643  002A8A  6E03               	movwf	i2isdigit@c,c
  7644  002A8C  0E00               	movlw	0
  7645  002A8E  6E02               	movwf	i2_isdigit$819,c
  7646  002A90  0E3A               	movlw	58
  7647  002A92  6003               	cpfslt	i2isdigit@c,c
  7648  002A94  D005               	goto	i2l3916
  7649  002A96  0E2F               	movlw	47
  7650  002A98  6403               	cpfsgt	i2isdigit@c,c
  7651  002A9A  D002               	goto	i2l3916
  7652  002A9C  0E01               	movlw	1
  7653  002A9E  6E02               	movwf	i2_isdigit$819,c
  7654  002AA0                     i2l3916:
  7655  002AA0  C002  F001         	movff	i2_isdigit$819,??i2_isdigit
  7656  002AA4  3001               	rrcf	??i2_isdigit,w,c
  7657  002AA6  0012               	return	
  7658  002AA8                     __end_ofi2_isdigit:
  7659                           	opt stack 0
  7660                           pclatu	equ	0xFFB
  7661                           pclath	equ	0xFFA
  7662                           tblptru	equ	0xFF8
  7663                           tblptrh	equ	0xFF7
  7664                           tblptrl	equ	0xFF6
  7665                           tablat	equ	0xFF5
  7666                           prodh	equ	0xFF4
  7667                           prodl	equ	0xFF3
  7668                           intcon	equ	0xFF2
  7669                           intcon2	equ	0xFF1
  7670                           intcon3	equ	0xFF0
  7671                           postinc0	equ	0xFEE
  7672                           fsr0h	equ	0xFEA
  7673                           fsr0l	equ	0xFE9
  7674                           wreg	equ	0xFE8
  7675                           fsr1h	equ	0xFE2
  7676                           fsr1l	equ	0xFE1
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           fsr2h	equ	0xFDA
  7681                           fsr2l	equ	0xFD9
  7682                           status	equ	0xFD8
  7683                           
  7684 ;; *************** function i2___lwmod *****************
  7685 ;; Defined at:
  7686 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  dividend        2    7[COMRAM] unsigned int 
  7689 ;;  divisor         2    9[COMRAM] unsigned int 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  2    7[COMRAM] unsigned int 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;Total ram usage:        5 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		i2_printf
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text32
  7715  0027E8                     __ptext32:
  7716                           	opt stack 0
  7717  0027E8                     i2___lwmod:
  7718                           	opt stack 24
  7719                           
  7720                           ;incstack = 0
  7721  0027E8  500A               	movf	i2___lwmod@divisor,w,c
  7722  0027EA  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7723  0027EC  B4D8               	btfsc	status,2,c
  7724  0027EE  D018               	goto	i2l886
  7725  0027F0  0E01               	movlw	1
  7726  0027F2  6E0C               	movwf	i2___lwmod@counter,c
  7727  0027F4  D004               	goto	i2l3948
  7728  0027F6                     i2l3946:
  7729  0027F6  90D8               	bcf	status,0,c
  7730  0027F8  360A               	rlcf	i2___lwmod@divisor,f,c
  7731  0027FA  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7732  0027FC  2A0C               	incf	i2___lwmod@counter,f,c
  7733  0027FE                     i2l3948:
  7734  0027FE  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7735  002800  D7FA               	goto	i2l3946
  7736  002802                     i2l3950:
  7737  002802  500A               	movf	i2___lwmod@divisor,w,c
  7738  002804  5C08               	subwf	i2___lwmod@dividend,w,c
  7739  002806  500B               	movf	i2___lwmod@divisor+1,w,c
  7740  002808  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7741  00280A  A0D8               	btfss	status,0,c
  7742  00280C  D004               	goto	i2l3954
  7743  00280E  500A               	movf	i2___lwmod@divisor,w,c
  7744  002810  5E08               	subwf	i2___lwmod@dividend,f,c
  7745  002812  500B               	movf	i2___lwmod@divisor+1,w,c
  7746  002814  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7747  002816                     i2l3954:
  7748  002816  90D8               	bcf	status,0,c
  7749  002818  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7750  00281A  320A               	rrcf	i2___lwmod@divisor,f,c
  7751  00281C  2E0C               	decfsz	i2___lwmod@counter,f,c
  7752  00281E  D7F1               	goto	i2l3950
  7753  002820                     i2l886:
  7754  002820  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7755  002824  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7756  002828  0012               	return		;funcret
  7757  00282A                     __end_ofi2___lwmod:
  7758                           	opt stack 0
  7759                           pclatu	equ	0xFFB
  7760                           pclath	equ	0xFFA
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           intcon	equ	0xFF2
  7768                           intcon2	equ	0xFF1
  7769                           intcon3	equ	0xFF0
  7770                           postinc0	equ	0xFEE
  7771                           fsr0h	equ	0xFEA
  7772                           fsr0l	equ	0xFE9
  7773                           wreg	equ	0xFE8
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function i2___lwdiv *****************
  7784 ;; Defined at:
  7785 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  dividend        2    0[COMRAM] unsigned int 
  7788 ;;  divisor         2    2[COMRAM] unsigned int 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7791 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  2    0[COMRAM] unsigned int 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:        7 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		i2_printf
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text33
  7815  0026F8                     __ptext33:
  7816                           	opt stack 0
  7817  0026F8                     i2___lwdiv:
  7818                           	opt stack 24
  7819                           
  7820                           ;incstack = 0
  7821  0026F8  0E00               	movlw	0
  7822  0026FA  6E06               	movwf	i2___lwdiv@quotient+1,c
  7823  0026FC  0E00               	movlw	0
  7824  0026FE  6E05               	movwf	i2___lwdiv@quotient,c
  7825  002700  5003               	movf	i2___lwdiv@divisor,w,c
  7826  002702  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7827  002704  B4D8               	btfsc	status,2,c
  7828  002706  D01C               	goto	i2l876
  7829  002708  0E01               	movlw	1
  7830  00270A  6E07               	movwf	i2___lwdiv@counter,c
  7831  00270C  D004               	goto	i2l3928
  7832  00270E                     i2l3926:
  7833  00270E  90D8               	bcf	status,0,c
  7834  002710  3603               	rlcf	i2___lwdiv@divisor,f,c
  7835  002712  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7836  002714  2A07               	incf	i2___lwdiv@counter,f,c
  7837  002716                     i2l3928:
  7838  002716  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7839  002718  D7FA               	goto	i2l3926
  7840  00271A                     i2l3930:
  7841  00271A  90D8               	bcf	status,0,c
  7842  00271C  3605               	rlcf	i2___lwdiv@quotient,f,c
  7843  00271E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7844  002720  5003               	movf	i2___lwdiv@divisor,w,c
  7845  002722  5C01               	subwf	i2___lwdiv@dividend,w,c
  7846  002724  5004               	movf	i2___lwdiv@divisor+1,w,c
  7847  002726  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7848  002728  A0D8               	btfss	status,0,c
  7849  00272A  D005               	goto	i2l3938
  7850  00272C  5003               	movf	i2___lwdiv@divisor,w,c
  7851  00272E  5E01               	subwf	i2___lwdiv@dividend,f,c
  7852  002730  5004               	movf	i2___lwdiv@divisor+1,w,c
  7853  002732  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7854  002734  8005               	bsf	i2___lwdiv@quotient,0,c
  7855  002736                     i2l3938:
  7856  002736  90D8               	bcf	status,0,c
  7857  002738  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7858  00273A  3203               	rrcf	i2___lwdiv@divisor,f,c
  7859  00273C  2E07               	decfsz	i2___lwdiv@counter,f,c
  7860  00273E  D7ED               	goto	i2l3930
  7861  002740                     i2l876:
  7862  002740  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7863  002744  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7864  002748  0012               	return		;funcret
  7865  00274A                     __end_ofi2___lwdiv:
  7866                           	opt stack 0
  7867                           pclatu	equ	0xFFB
  7868                           pclath	equ	0xFFA
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           intcon3	equ	0xFF0
  7878                           postinc0	equ	0xFEE
  7879                           fsr0h	equ	0xFEA
  7880                           fsr0l	equ	0xFE9
  7881                           wreg	equ	0xFE8
  7882                           fsr1h	equ	0xFE2
  7883                           fsr1l	equ	0xFE1
  7884                           indf2	equ	0xFDF
  7885                           postinc2	equ	0xFDE
  7886                           postdec2	equ	0xFDD
  7887                           fsr2h	equ	0xFDA
  7888                           fsr2l	equ	0xFD9
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function i2_lcdInst *****************
  7892 ;; Defined at:
  7893 ;;		line 26 in file "lcd.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  data            1    wreg     unsigned char 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  data            1    2[COMRAM] unsigned char 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;Total ram usage:        1 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    1
  7914 ;; This function calls:
  7915 ;;		i2_lcdNibble
  7916 ;; This function is called by:
  7917 ;;		_isr
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text34
  7922  002B12                     __ptext34:
  7923                           	opt stack 0
  7924  002B12                     i2_lcdInst:
  7925                           	opt stack 24
  7926                           
  7927                           ;incstack = 0
  7928                           ;i2lcdInst@data stored from wreg
  7929  002B12  6E03               	movwf	i2lcdInst@data,c
  7930                           
  7931                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7932  002B14  948C               	bcf	3980,2,c	;volatile
  7933                           
  7934                           ;lcd.c: 28: lcdNibble(data);
  7935  002B16  5003               	movf	i2lcdInst@data,w,c
  7936  002B18  ECCD  F013         	call	i2_lcdNibble
  7937  002B1C  0012               	return		;funcret
  7938  002B1E                     __end_ofi2_lcdInst:
  7939                           	opt stack 0
  7940                           pclatu	equ	0xFFB
  7941                           pclath	equ	0xFFA
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           intcon	equ	0xFF2
  7949                           intcon2	equ	0xFF1
  7950                           intcon3	equ	0xFF0
  7951                           postinc0	equ	0xFEE
  7952                           fsr0h	equ	0xFEA
  7953                           fsr0l	equ	0xFE9
  7954                           wreg	equ	0xFE8
  7955                           fsr1h	equ	0xFE2
  7956                           fsr1l	equ	0xFE1
  7957                           indf2	equ	0xFDF
  7958                           postinc2	equ	0xFDE
  7959                           postdec2	equ	0xFDD
  7960                           fsr2h	equ	0xFDA
  7961                           fsr2l	equ	0xFD9
  7962                           status	equ	0xFD8
  7963                           
  7964 ;; *************** function i2_lcdNibble *****************
  7965 ;; Defined at:
  7966 ;;		line 36 in file "lcd.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  data            1    wreg     unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  data            1    1[COMRAM] unsigned char 
  7971 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  1    wreg      void 
  7974 ;; Registers used:
  7975 ;;		wreg, status,2, status,0
  7976 ;; Tracked objects:
  7977 ;;		On entry : 0/0
  7978 ;;		On exit  : 0/0
  7979 ;;		Unchanged: 0/0
  7980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;Total ram usage:        2 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; This function calls:
  7988 ;;		Nothing
  7989 ;; This function is called by:
  7990 ;;		i2_lcdInst
  7991 ;;		i2_putch
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text35
  7996  00279A                     __ptext35:
  7997                           	opt stack 0
  7998  00279A                     i2_lcdNibble:
  7999                           	opt stack 23
  8000                           
  8001                           ;incstack = 0
  8002                           ;i2lcdNibble@data stored from wreg
  8003  00279A  6E02               	movwf	i2lcdNibble@data,c
  8004                           
  8005                           ;lcd.c: 38: char temp = data & 0xF0;
  8006  00279C  5002               	movf	i2lcdNibble@data,w,c
  8007  00279E  0BF0               	andlw	240
  8008  0027A0  6E01               	movwf	i2lcdNibble@temp,c
  8009                           
  8010                           ;lcd.c: 39: LATD = LATD & 0x0F;
  8011  0027A2  508C               	movf	3980,w,c	;volatile
  8012  0027A4  0B0F               	andlw	15
  8013  0027A6  6E8C               	movwf	3980,c	;volatile
  8014                           
  8015                           ;lcd.c: 40: LATD = temp | LATD;
  8016  0027A8  5001               	movf	i2lcdNibble@temp,w,c
  8017  0027AA  108C               	iorwf	3980,w,c	;volatile
  8018  0027AC  6E8C               	movwf	3980,c	;volatile
  8019                           
  8020                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  8021  0027AE  968C               	bcf	3980,3,c	;volatile
  8022                           
  8023                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8024  0027B0  0E19               	movlw	25
  8025  0027B2                     i2u460_47:
  8026  0027B2  2EE8               	decfsz	wreg,f,c
  8027  0027B4  D7FE               	bra	i2u460_47
  8028                           
  8029                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  8030  0027B6  868C               	bsf	3980,3,c	;volatile
  8031                           
  8032                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8033  0027B8  0E19               	movlw	25
  8034  0027BA                     i2u461_47:
  8035  0027BA  2EE8               	decfsz	wreg,f,c
  8036  0027BC  D7FE               	bra	i2u461_47
  8037                           
  8038                           ;lcd.c: 47: data = data << 4;
  8039  0027BE  3802               	swapf	i2lcdNibble@data,w,c
  8040  0027C0  0BF0               	andlw	240
  8041  0027C2  6E02               	movwf	i2lcdNibble@data,c
  8042                           
  8043                           ;lcd.c: 49: temp = data & 0xF0;
  8044  0027C4  5002               	movf	i2lcdNibble@data,w,c
  8045  0027C6  0BF0               	andlw	240
  8046  0027C8  6E01               	movwf	i2lcdNibble@temp,c
  8047                           
  8048                           ;lcd.c: 50: LATD = LATD & 0x0F;
  8049  0027CA  508C               	movf	3980,w,c	;volatile
  8050  0027CC  0B0F               	andlw	15
  8051  0027CE  6E8C               	movwf	3980,c	;volatile
  8052                           
  8053                           ;lcd.c: 51: LATD = temp | LATD;
  8054  0027D0  5001               	movf	i2lcdNibble@temp,w,c
  8055  0027D2  108C               	iorwf	3980,w,c	;volatile
  8056  0027D4  6E8C               	movwf	3980,c	;volatile
  8057                           
  8058                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  8059  0027D6  968C               	bcf	3980,3,c	;volatile
  8060                           
  8061                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8062  0027D8  0E19               	movlw	25
  8063  0027DA                     i2u462_47:
  8064  0027DA  2EE8               	decfsz	wreg,f,c
  8065  0027DC  D7FE               	bra	i2u462_47
  8066                           
  8067                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  8068  0027DE  868C               	bsf	3980,3,c	;volatile
  8069                           
  8070                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  8071  0027E0  0E19               	movlw	25
  8072  0027E2                     i2u463_47:
  8073  0027E2  2EE8               	decfsz	wreg,f,c
  8074  0027E4  D7FE               	bra	i2u463_47
  8075  0027E6  0012               	return		;funcret
  8076  0027E8                     __end_ofi2_lcdNibble:
  8077                           	opt stack 0
  8078                           pclatu	equ	0xFFB
  8079                           pclath	equ	0xFFA
  8080                           tblptru	equ	0xFF8
  8081                           tblptrh	equ	0xFF7
  8082                           tblptrl	equ	0xFF6
  8083                           tablat	equ	0xFF5
  8084                           prodh	equ	0xFF4
  8085                           prodl	equ	0xFF3
  8086                           intcon	equ	0xFF2
  8087                           intcon2	equ	0xFF1
  8088                           intcon3	equ	0xFF0
  8089                           postinc0	equ	0xFEE
  8090                           fsr0h	equ	0xFEA
  8091                           fsr0l	equ	0xFE9
  8092                           wreg	equ	0xFE8
  8093                           fsr1h	equ	0xFE2
  8094                           fsr1l	equ	0xFE1
  8095                           indf2	equ	0xFDF
  8096                           postinc2	equ	0xFDE
  8097                           postdec2	equ	0xFDD
  8098                           fsr2h	equ	0xFDA
  8099                           fsr2l	equ	0xFD9
  8100                           status	equ	0xFD8
  8101                           
  8102 ;; *************** function i2_I2C_ColorSens_Init *****************
  8103 ;; Defined at:
  8104 ;;		line 54 in file "I2C.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;		None
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;		None
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  1    wreg      void 
  8111 ;; Registers used:
  8112 ;;		wreg, status,2, status,0, cstack
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;Total ram usage:        1 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    2
  8125 ;; This function calls:
  8126 ;;		i2_I2C_Master_Start
  8127 ;;		i2_I2C_Master_Stop
  8128 ;;		i2_I2C_Master_Write
  8129 ;; This function is called by:
  8130 ;;		_isr
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text36
  8135  001528                     __ptext36:
  8136                           	opt stack 0
  8137  001528                     i2_I2C_ColorSens_Init:
  8138                           	opt stack 23
  8139                           
  8140                           ;I2C.c: 55: I2C_Master_Start();
  8141                           
  8142                           ;incstack = 0
  8143  001528  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8144                           
  8145                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  8146  00152C  0E00               	movlw	0
  8147  00152E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8148  001530  0E52               	movlw	82
  8149  001532  6E02               	movwf	i2I2C_Master_Write@d,c
  8150  001534  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8151                           
  8152                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  8153  001538  0E00               	movlw	0
  8154  00153A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8155  00153C  0E80               	movlw	128
  8156  00153E  6E02               	movwf	i2I2C_Master_Write@d,c
  8157  001540  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8158                           
  8159                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  8160  001544  0E00               	movlw	0
  8161  001546  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8162  001548  0E01               	movlw	1
  8163  00154A  6E02               	movwf	i2I2C_Master_Write@d,c
  8164  00154C  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8165                           
  8166                           ;I2C.c: 59: I2C_Master_Stop();
  8167  001550  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8168                           
  8169                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  8170  001554  0E0A               	movlw	10
  8171  001556  6E04               	movwf	??i2_I2C_ColorSens_Init& (0+255),c
  8172  001558  0EBC               	movlw	188
  8173  00155A                     i2u464_47:
  8174  00155A  2EE8               	decfsz	wreg,f,c
  8175  00155C  D7FE               	bra	i2u464_47
  8176  00155E  2E04               	decfsz	??i2_I2C_ColorSens_Init& (0+255),f,c
  8177  001560  D7FC               	bra	i2u464_47
  8178  001562  D000               	nop2	
  8179                           
  8180                           ;I2C.c: 63: I2C_Master_Start();
  8181  001564  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8182                           
  8183                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  8184  001568  0E00               	movlw	0
  8185  00156A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8186  00156C  0E52               	movlw	82
  8187  00156E  6E02               	movwf	i2I2C_Master_Write@d,c
  8188  001570  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8189                           
  8190                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  8191  001574  0E00               	movlw	0
  8192  001576  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8193  001578  0E80               	movlw	128
  8194  00157A  6E02               	movwf	i2I2C_Master_Write@d,c
  8195  00157C  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8196                           
  8197                           ;I2C.c: 66: I2C_Master_Write(0b00010011);
  8198  001580  0E00               	movlw	0
  8199  001582  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8200  001584  0E13               	movlw	19
  8201  001586  6E02               	movwf	i2I2C_Master_Write@d,c
  8202  001588  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8203                           
  8204                           ;I2C.c: 67: I2C_Master_Stop();
  8205  00158C  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8206                           
  8207                           ;I2C.c: 69: I2C_Master_Start();
  8208  001590  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8209                           
  8210                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  8211  001594  0E00               	movlw	0
  8212  001596  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8213  001598  0E52               	movlw	82
  8214  00159A  6E02               	movwf	i2I2C_Master_Write@d,c
  8215  00159C  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8216                           
  8217                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  8218  0015A0  0E00               	movlw	0
  8219  0015A2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8220  0015A4  0E8F               	movlw	143
  8221  0015A6  6E02               	movwf	i2I2C_Master_Write@d,c
  8222  0015A8  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8223                           
  8224                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  8225  0015AC  0E00               	movlw	0
  8226  0015AE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8227  0015B0  0E02               	movlw	2
  8228  0015B2  6E02               	movwf	i2I2C_Master_Write@d,c
  8229  0015B4  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8230                           
  8231                           ;I2C.c: 73: I2C_Master_Stop();
  8232  0015B8  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8233                           
  8234                           ;I2C.c: 75: I2C_Master_Start();
  8235  0015BC  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8236                           
  8237                           ;I2C.c: 76: I2C_Master_Write(0b01010010);
  8238  0015C0  0E00               	movlw	0
  8239  0015C2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8240  0015C4  0E52               	movlw	82
  8241  0015C6  6E02               	movwf	i2I2C_Master_Write@d,c
  8242  0015C8  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8243                           
  8244                           ;I2C.c: 77: I2C_Master_Write(0b10100100);
  8245  0015CC  0E00               	movlw	0
  8246  0015CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8247  0015D0  0EA4               	movlw	164
  8248  0015D2  6E02               	movwf	i2I2C_Master_Write@d,c
  8249  0015D4  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8250                           
  8251                           ;I2C.c: 78: I2C_Master_Write(0x00);
  8252  0015D8  0E00               	movlw	0
  8253  0015DA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8254  0015DC  0E00               	movlw	0
  8255  0015DE  6E02               	movwf	i2I2C_Master_Write@d,c
  8256  0015E0  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8257                           
  8258                           ;I2C.c: 79: I2C_Master_Write(0x00);
  8259  0015E4  0E00               	movlw	0
  8260  0015E6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8261  0015E8  0E00               	movlw	0
  8262  0015EA  6E02               	movwf	i2I2C_Master_Write@d,c
  8263  0015EC  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8264                           
  8265                           ;I2C.c: 80: I2C_Master_Write(0x00);
  8266  0015F0  0E00               	movlw	0
  8267  0015F2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8268  0015F4  0E00               	movlw	0
  8269  0015F6  6E02               	movwf	i2I2C_Master_Write@d,c
  8270  0015F8  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8271                           
  8272                           ;I2C.c: 81: I2C_Master_Write(0b01001010);
  8273  0015FC  0E00               	movlw	0
  8274  0015FE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8275  001600  0E4A               	movlw	74
  8276  001602  6E02               	movwf	i2I2C_Master_Write@d,c
  8277  001604  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8278                           
  8279                           ;I2C.c: 82: I2C_Master_Stop();
  8280  001608  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8281                           
  8282                           ;I2C.c: 84: I2C_Master_Start();
  8283  00160C  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8284                           
  8285                           ;I2C.c: 85: I2C_Master_Write(0b01010010);
  8286  001610  0E00               	movlw	0
  8287  001612  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8288  001614  0E52               	movlw	82
  8289  001616  6E02               	movwf	i2I2C_Master_Write@d,c
  8290  001618  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8291                           
  8292                           ;I2C.c: 86: I2C_Master_Write(0b10001100);
  8293  00161C  0E00               	movlw	0
  8294  00161E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8295  001620  0E8C               	movlw	140
  8296  001622  6E02               	movwf	i2I2C_Master_Write@d,c
  8297  001624  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8298                           
  8299                           ;I2C.c: 87: I2C_Master_Write(0b00000001);
  8300  001628  0E00               	movlw	0
  8301  00162A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8302  00162C  0E01               	movlw	1
  8303  00162E  6E02               	movwf	i2I2C_Master_Write@d,c
  8304  001630  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8305                           
  8306                           ;I2C.c: 88: I2C_Master_Stop();
  8307  001634  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8308  001638  0012               	return		;funcret
  8309  00163A                     __end_ofi2_I2C_ColorSens_Init:
  8310                           	opt stack 0
  8311                           pclatu	equ	0xFFB
  8312                           pclath	equ	0xFFA
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           intcon2	equ	0xFF1
  8321                           intcon3	equ	0xFF0
  8322                           postinc0	equ	0xFEE
  8323                           fsr0h	equ	0xFEA
  8324                           fsr0l	equ	0xFE9
  8325                           wreg	equ	0xFE8
  8326                           fsr1h	equ	0xFE2
  8327                           fsr1l	equ	0xFE1
  8328                           indf2	equ	0xFDF
  8329                           postinc2	equ	0xFDE
  8330                           postdec2	equ	0xFDD
  8331                           fsr2h	equ	0xFDA
  8332                           fsr2l	equ	0xFD9
  8333                           status	equ	0xFD8
  8334                           
  8335 ;; *************** function _servo_rotate0 *****************
  8336 ;; Defined at:
  8337 ;;		line 539 in file "main.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;  degree          2    0[COMRAM] int 
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;  j               2    8[COMRAM] unsigned int 
  8342 ;;  i               2    6[COMRAM] unsigned int 
  8343 ;;  duty            2    4[COMRAM] int 
  8344 ;; Return value:  Size  Location     Type
  8345 ;;                  1    wreg      void 
  8346 ;; Registers used:
  8347 ;;		wreg, status,2, status,0
  8348 ;; Tracked objects:
  8349 ;;		On entry : 0/0
  8350 ;;		On exit  : 0/0
  8351 ;;		Unchanged: 0/0
  8352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8356 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;Total ram usage:       10 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; This function calls:
  8360 ;;		Nothing
  8361 ;; This function is called by:
  8362 ;;		_isr
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text37
  8367  0021EE                     __ptext37:
  8368                           	opt stack 0
  8369  0021EE                     _servo_rotate0:
  8370                           	opt stack 25
  8371                           
  8372                           ;main.c: 540: unsigned int i;
  8373                           ;main.c: 541: unsigned int j;
  8374                           ;main.c: 542: int duty = degree;
  8375                           
  8376                           ;incstack = 0
  8377  0021EE  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
  8378  0021F2  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  8379                           
  8380                           ;main.c: 543: for (i=0; i<50; i++) {
  8381  0021F6  0E00               	movlw	0
  8382  0021F8  6E08               	movwf	servo_rotate0@i+1,c
  8383  0021FA  0E00               	movlw	0
  8384  0021FC  6E07               	movwf	servo_rotate0@i,c
  8385  0021FE                     i2l4204:
  8386  0021FE  5008               	movf	servo_rotate0@i+1,w,c
  8387  002200  E13D               	bnz	i2l367
  8388  002202  0E32               	movlw	50
  8389  002204  5C07               	subwf	servo_rotate0@i,w,c
  8390  002206  B0D8               	btfsc	status,0,c
  8391  002208  0012               	return	
  8392                           
  8393                           ;main.c: 544: LATCbits.LATC0 = 1;
  8394  00220A  808B               	bsf	3979,0,c	;volatile
  8395                           
  8396                           ;main.c: 545: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
  8397  00220C  0E00               	movlw	0
  8398  00220E  6E0A               	movwf	servo_rotate0@j+1,c
  8399  002210  0E00               	movlw	0
  8400  002212  6E09               	movwf	servo_rotate0@j,c
  8401  002214  D009               	goto	i2l361
  8402  002216                     i2l4210:
  8403  002216  0E04               	movlw	4
  8404  002218  6E03               	movwf	??_servo_rotate0& (0+255),c
  8405  00221A  0E3E               	movlw	62
  8406  00221C                     i2u465_47:
  8407  00221C  2EE8               	decfsz	wreg,f,c
  8408  00221E  D7FE               	bra	i2u465_47
  8409  002220  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8410  002222  D7FC               	bra	i2u465_47
  8411  002224  4A09               	infsnz	servo_rotate0@j,f,c
  8412  002226  2A0A               	incf	servo_rotate0@j+1,f,c
  8413  002228                     i2l361:
  8414  002228  5005               	movf	servo_rotate0@duty,w,c
  8415  00222A  5C09               	subwf	servo_rotate0@j,w,c
  8416  00222C  5006               	movf	servo_rotate0@duty+1,w,c
  8417  00222E  580A               	subwfb	servo_rotate0@j+1,w,c
  8418  002230  A0D8               	btfss	status,0,c
  8419  002232  D7F1               	goto	i2l4210
  8420                           
  8421                           ;main.c: 546: LATCbits.LATC0 = 0;
  8422  002234  908B               	bcf	3979,0,c	;volatile
  8423                           
  8424                           ;main.c: 547: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
  8425  002236  0E00               	movlw	0
  8426  002238  6E0A               	movwf	servo_rotate0@j+1,c
  8427  00223A  0E00               	movlw	0
  8428  00223C  6E09               	movwf	servo_rotate0@j,c
  8429  00223E  D009               	goto	i2l364
  8430  002240                     i2l4216:
  8431  002240  0E04               	movlw	4
  8432  002242  6E03               	movwf	??_servo_rotate0& (0+255),c
  8433  002244  0E3E               	movlw	62
  8434  002246                     i2u466_47:
  8435  002246  2EE8               	decfsz	wreg,f,c
  8436  002248  D7FE               	bra	i2u466_47
  8437  00224A  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
  8438  00224C  D7FC               	bra	i2u466_47
  8439  00224E  4A09               	infsnz	servo_rotate0@j,f,c
  8440  002250  2A0A               	incf	servo_rotate0@j+1,f,c
  8441  002252                     i2l364:
  8442  002252  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
  8443  002256  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  8444  00225A  1E03               	comf	??_servo_rotate0,f,c
  8445  00225C  1E04               	comf	??_servo_rotate0+1,f,c
  8446  00225E  4A03               	infsnz	??_servo_rotate0,f,c
  8447  002260  2A04               	incf	??_servo_rotate0+1,f,c
  8448  002262  0E14               	movlw	20
  8449  002264  2603               	addwf	??_servo_rotate0,f,c
  8450  002266  0E00               	movlw	0
  8451  002268  2204               	addwfc	??_servo_rotate0+1,f,c
  8452  00226A  5003               	movf	??_servo_rotate0,w,c
  8453  00226C  5C09               	subwf	servo_rotate0@j,w,c
  8454  00226E  5004               	movf	??_servo_rotate0+1,w,c
  8455  002270  580A               	subwfb	servo_rotate0@j+1,w,c
  8456  002272  A0D8               	btfss	status,0,c
  8457  002274  D7E5               	goto	i2l4216
  8458  002276  4A07               	infsnz	servo_rotate0@i,f,c
  8459  002278  2A08               	incf	servo_rotate0@i+1,f,c
  8460  00227A  D7C1               	goto	i2l4204
  8461  00227C                     i2l367:
  8462  00227C  0012               	return		;funcret
  8463  00227E                     __end_of_servo_rotate0:
  8464                           	opt stack 0
  8465                           pclatu	equ	0xFFB
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           intcon2	equ	0xFF1
  8475                           intcon3	equ	0xFF0
  8476                           postinc0	equ	0xFEE
  8477                           fsr0h	equ	0xFEA
  8478                           fsr0l	equ	0xFE9
  8479                           wreg	equ	0xFE8
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _read_time *****************
  8490 ;; Defined at:
  8491 ;;		line 430 in file "main.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;		None
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;  i               1    3[COMRAM] unsigned char 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;Total ram usage:        1 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    2
  8512 ;; This function calls:
  8513 ;;		i2_I2C_Master_Read
  8514 ;;		i2_I2C_Master_Start
  8515 ;;		i2_I2C_Master_Stop
  8516 ;;		i2_I2C_Master_Write
  8517 ;; This function is called by:
  8518 ;;		_isr
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text38
  8523  002512                     __ptext38:
  8524                           	opt stack 0
  8525  002512                     _read_time:
  8526                           	opt stack 23
  8527                           
  8528                           ;main.c: 432: I2C_Master_Start();
  8529                           
  8530                           ;incstack = 0
  8531  002512  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8532                           
  8533                           ;main.c: 433: I2C_Master_Write(0b11010000);
  8534  002516  0E00               	movlw	0
  8535  002518  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8536  00251A  0ED0               	movlw	208
  8537  00251C  6E02               	movwf	i2I2C_Master_Write@d,c
  8538  00251E  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8539                           
  8540                           ;main.c: 434: I2C_Master_Write(0x00);
  8541  002522  0E00               	movlw	0
  8542  002524  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8543  002526  0E00               	movlw	0
  8544  002528  6E02               	movwf	i2I2C_Master_Write@d,c
  8545  00252A  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8546                           
  8547                           ;main.c: 435: I2C_Master_Stop();
  8548  00252E  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8549                           
  8550                           ;main.c: 438: I2C_Master_Start();
  8551  002532  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
  8552                           
  8553                           ;main.c: 439: I2C_Master_Write(0b11010001);
  8554  002536  0E00               	movlw	0
  8555  002538  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8556  00253A  0ED1               	movlw	209
  8557  00253C  6E02               	movwf	i2I2C_Master_Write@d,c
  8558  00253E  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
  8559                           
  8560                           ;main.c: 440: for(unsigned char i=0;i<0x06;i++){
  8561  002542  0E00               	movlw	0
  8562  002544  6E04               	movwf	read_time@i,c
  8563  002546                     i2l4168:
  8564  002546  0E05               	movlw	5
  8565  002548  6404               	cpfsgt	read_time@i,c
  8566  00254A  D001               	goto	i2l4172
  8567  00254C  D00E               	goto	i2l4178
  8568  00254E                     i2l4172:
  8569                           
  8570                           ;main.c: 441: time[i] = I2C_Master_Read(1);
  8571  00254E  5004               	movf	read_time@i,w,c
  8572  002550  0D01               	mullw	1
  8573  002552  0E9E               	movlw	low _time
  8574  002554  24F3               	addwf	prodl,w,c
  8575  002556  6ED9               	movwf	fsr2l,c
  8576  002558  0E00               	movlw	high _time
  8577  00255A  20F4               	addwfc	prodh,w,c
  8578  00255C  6EDA               	movwf	fsr2h,c
  8579  00255E  0E01               	movlw	1
  8580  002560  ECFC  F014         	call	i2_I2C_Master_Read
  8581  002564  6EDF               	movwf	indf2,c
  8582  002566  2A04               	incf	read_time@i,f,c
  8583  002568  D7EE               	goto	i2l4168
  8584  00256A                     i2l4178:
  8585                           
  8586                           ;main.c: 442: }
  8587                           ;main.c: 443: time[6] = I2C_Master_Read(0);
  8588  00256A  0E00               	movlw	0
  8589  00256C  ECFC  F014         	call	i2_I2C_Master_Read
  8590  002570  0100               	movlb	0	; () banked
  8591  002572  6FA4               	movwf	(_time+6)& (0+255),b
  8592                           
  8593                           ;main.c: 444: I2C_Master_Stop();
  8594  002574  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
  8595  002578  0012               	return	
  8596  00257A                     __end_of_read_time:
  8597                           	opt stack 0
  8598                           pclatu	equ	0xFFB
  8599                           pclath	equ	0xFFA
  8600                           tblptru	equ	0xFF8
  8601                           tblptrh	equ	0xFF7
  8602                           tblptrl	equ	0xFF6
  8603                           tablat	equ	0xFF5
  8604                           prodh	equ	0xFF4
  8605                           prodl	equ	0xFF3
  8606                           intcon	equ	0xFF2
  8607                           intcon2	equ	0xFF1
  8608                           intcon3	equ	0xFF0
  8609                           postinc0	equ	0xFEE
  8610                           fsr0h	equ	0xFEA
  8611                           fsr0l	equ	0xFE9
  8612                           wreg	equ	0xFE8
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function i2_I2C_Master_Read *****************
  8623 ;; Defined at:
  8624 ;;		line 100 in file "I2C.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;  a               1    wreg     unsigned char 
  8627 ;; Auto vars:     Size  Location     Type
  8628 ;;  a               1    1[COMRAM] unsigned char 
  8629 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      unsigned char 
  8632 ;; Registers used:
  8633 ;;		wreg, status,2, status,0, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;Total ram usage:        2 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    1
  8646 ;; This function calls:
  8647 ;;		i2_I2C_Master_Wait
  8648 ;; This function is called by:
  8649 ;;		_read_time
  8650 ;;		i2_read_colorsensor
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text39
  8655  0029F8                     __ptext39:
  8656                           	opt stack 0
  8657  0029F8                     i2_I2C_Master_Read:
  8658                           	opt stack 23
  8659                           
  8660                           ;incstack = 0
  8661                           ;i2I2C_Master_Read@a stored from wreg
  8662  0029F8  6E02               	movwf	i2I2C_Master_Read@a,c
  8663                           
  8664                           ;I2C.c: 102: unsigned char temp;
  8665                           ;I2C.c: 103: I2C_Master_Wait();
  8666  0029FA  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
  8667                           
  8668                           ;I2C.c: 104: RCEN = 1;
  8669  0029FE  86C5               	bsf	4037,3,c	;volatile
  8670                           
  8671                           ;I2C.c: 105: I2C_Master_Wait();
  8672  002A00  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
  8673                           
  8674                           ;I2C.c: 106: temp = SSPBUF;
  8675  002A04  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  8676                           
  8677                           ;I2C.c: 107: I2C_Master_Wait();
  8678  002A08  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
  8679                           
  8680                           ;I2C.c: 108: ACKDT = (a)?0:1;
  8681  002A0C  5002               	movf	i2I2C_Master_Read@a,w,c
  8682  002A0E  A4D8               	btfss	status,2,c
  8683  002A10  D002               	goto	i2u347_40
  8684  002A12  8AC5               	bsf	4037,5,c	;volatile
  8685  002A14  D001               	goto	i2l3898
  8686  002A16                     i2u347_40:
  8687  002A16  9AC5               	bcf	4037,5,c	;volatile
  8688  002A18                     i2l3898:
  8689                           
  8690                           ;I2C.c: 109: ACKEN = 1;
  8691  002A18  88C5               	bsf	4037,4,c	;volatile
  8692                           
  8693                           ;I2C.c: 110: return temp;
  8694  002A1A  5003               	movf	i2I2C_Master_Read@temp,w,c
  8695  002A1C  0012               	return	
  8696  002A1E                     __end_ofi2_I2C_Master_Read:
  8697                           	opt stack 0
  8698                           pclatu	equ	0xFFB
  8699                           pclath	equ	0xFFA
  8700                           tblptru	equ	0xFF8
  8701                           tblptrh	equ	0xFF7
  8702                           tblptrl	equ	0xFF6
  8703                           tablat	equ	0xFF5
  8704                           prodh	equ	0xFF4
  8705                           prodl	equ	0xFF3
  8706                           intcon	equ	0xFF2
  8707                           intcon2	equ	0xFF1
  8708                           intcon3	equ	0xFF0
  8709                           postinc0	equ	0xFEE
  8710                           fsr0h	equ	0xFEA
  8711                           fsr0l	equ	0xFE9
  8712                           wreg	equ	0xFE8
  8713                           fsr1h	equ	0xFE2
  8714                           fsr1l	equ	0xFE1
  8715                           indf2	equ	0xFDF
  8716                           postinc2	equ	0xFDE
  8717                           postdec2	equ	0xFDD
  8718                           fsr2h	equ	0xFDA
  8719                           fsr2l	equ	0xFD9
  8720                           status	equ	0xFD8
  8721                           
  8722 ;; *************** function _dec_to_hex *****************
  8723 ;; Defined at:
  8724 ;;		line 391 in file "main.c"
  8725 ;; Parameters:    Size  Location     Type
  8726 ;;  num             2   98[COMRAM] int 
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;  quotient        2  112[COMRAM] int 
  8729 ;;  hexnum          2  110[COMRAM] int 
  8730 ;;  i               2  108[COMRAM] int 
  8731 ;;  temp            2  106[COMRAM] int 
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  2   98[COMRAM] int 
  8734 ;; Registers used:
  8735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;Total ram usage:       16 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    5
  8748 ;; This function calls:
  8749 ;;		___awdiv
  8750 ;;		___awtoft
  8751 ;;		___ftadd
  8752 ;;		___ftmul
  8753 ;;		___fttol
  8754 ;;		_pow
  8755 ;; This function is called by:
  8756 ;;		_isr
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text40
  8761  00163A                     __ptext40:
  8762                           	opt stack 0
  8763  00163A                     _dec_to_hex:
  8764                           	opt stack 20
  8765                           
  8766                           ;main.c: 392: int i = 0, quotient = num, temp, hexnum = 0;
  8767                           
  8768                           ;incstack = 0
  8769  00163A  0E00               	movlw	0
  8770  00163C  6E6E               	movwf	dec_to_hex@i+1,c
  8771  00163E  0E00               	movlw	0
  8772  001640  6E6D               	movwf	dec_to_hex@i,c
  8773  001642  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  8774  001646  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  8775  00164A  0E00               	movlw	0
  8776  00164C  6E70               	movwf	dec_to_hex@hexnum+1,c
  8777  00164E  0E00               	movlw	0
  8778  001650  6E6F               	movwf	dec_to_hex@hexnum,c
  8779                           
  8780                           ;main.c: 394: while (quotient != 0) {
  8781  001652  D068               	goto	i2l4198
  8782  001654                     i2l4186:
  8783                           
  8784                           ;main.c: 395: temp = quotient % 16;
  8785  001654  0E0F               	movlw	15
  8786  001656  1471               	andwf	dec_to_hex@quotient,w,c
  8787  001658  6E6B               	movwf	dec_to_hex@temp,c
  8788  00165A  6A6C               	clrf	dec_to_hex@temp+1,c
  8789                           
  8790                           ;main.c: 397: hexnum += temp*pow(10,i);
  8791  00165C  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  8792  001660  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  8793  001664  EC54  F014         	call	___awtoft	;wreg free
  8794  001668  C009  F065         	movff	?___awtoft,_dec_to_hex$1263
  8795  00166C  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1263+1
  8796  001670  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1263+2
  8797                           
  8798                           ;main.c: 397: hexnum += temp*pow(10,i);
  8799  001674  C065  F055         	movff	_dec_to_hex$1263,pow@y
  8800  001678  C066  F056         	movff	_dec_to_hex$1263+1,pow@y+1
  8801  00167C  C067  F057         	movff	_dec_to_hex$1263+2,pow@y+2
  8802  001680  0E00               	movlw	0
  8803  001682  6E52               	movwf	pow@x,c
  8804  001684  0E20               	movlw	32
  8805  001686  6E53               	movwf	pow@x+1,c
  8806  001688  0E41               	movlw	65
  8807  00168A  6E54               	movwf	pow@x+2,c
  8808  00168C  EC18  F008         	call	_pow	;wreg free
  8809  001690  C052  F068         	movff	?_pow,_dec_to_hex$1264
  8810  001694  C053  F069         	movff	?_pow+1,_dec_to_hex$1264+1
  8811  001698  C054  F06A         	movff	?_pow+2,_dec_to_hex$1264+2
  8812                           
  8813                           ;main.c: 397: hexnum += temp*pow(10,i);
  8814  00169C  C068  F010         	movff	_dec_to_hex$1264,___ftmul@f2
  8815  0016A0  C069  F011         	movff	_dec_to_hex$1264+1,___ftmul@f2+1
  8816  0016A4  C06A  F012         	movff	_dec_to_hex$1264+2,___ftmul@f2+2
  8817  0016A8  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  8818  0016AC  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  8819  0016B0  EC54  F014         	call	___awtoft	;wreg free
  8820  0016B4  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8821  0016B8  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8822  0016BC  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8823  0016C0  EC15  F00C         	call	___ftmul	;wreg free
  8824  0016C4  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  8825  0016C8  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  8826  0016CC  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  8827  0016D0  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  8828  0016D4  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  8829  0016D8  EC54  F014         	call	___awtoft	;wreg free
  8830  0016DC  C009  F01C         	movff	?___awtoft,___ftadd@f1
  8831  0016E0  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  8832  0016E4  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  8833  0016E8  EC78  F006         	call	___ftadd	;wreg free
  8834  0016EC  C01C  F028         	movff	?___ftadd,___fttol@f1
  8835  0016F0  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  8836  0016F4  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  8837  0016F8  EC9B  F00B         	call	___fttol	;wreg free
  8838  0016FC  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  8839  001700  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  8840                           
  8841                           ;main.c: 399: quotient = quotient / 16;
  8842  001704  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  8843  001708  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  8844  00170C  0E00               	movlw	0
  8845  00170E  6E04               	movwf	___awdiv@divisor+1,c
  8846  001710  0E10               	movlw	16
  8847  001712  6E03               	movwf	___awdiv@divisor,c
  8848  001714  ECCF  F011         	call	___awdiv	;wreg free
  8849  001718  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  8850  00171C  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  8851                           
  8852                           ;main.c: 400: i += 1;
  8853  001720  4A6D               	infsnz	dec_to_hex@i,f,c
  8854  001722  2A6E               	incf	dec_to_hex@i+1,f,c
  8855  001724                     i2l4198:
  8856  001724  5071               	movf	dec_to_hex@quotient,w,c
  8857  001726  1072               	iorwf	dec_to_hex@quotient+1,w,c
  8858  001728  A4D8               	btfss	status,2,c
  8859  00172A  D794               	goto	i2l4186
  8860                           
  8861                           ;main.c: 401: }
  8862                           ;main.c: 402: return hexnum;
  8863  00172C  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  8864  001730  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  8865  001734  0012               	return		;funcret
  8866  001736                     __end_of_dec_to_hex:
  8867                           	opt stack 0
  8868                           pclatu	equ	0xFFB
  8869                           pclath	equ	0xFFA
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           intcon2	equ	0xFF1
  8878                           intcon3	equ	0xFF0
  8879                           postinc0	equ	0xFEE
  8880                           fsr0h	equ	0xFEA
  8881                           fsr0l	equ	0xFE9
  8882                           wreg	equ	0xFE8
  8883                           fsr1h	equ	0xFE2
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _pow *****************
  8893 ;; Defined at:
  8894 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  x               3   81[COMRAM] int 
  8897 ;;  y               3   84[COMRAM] int 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  yi              4   94[COMRAM] unsigned long 
  8900 ;;  sign            1   93[COMRAM] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  3   81[COMRAM] unsigned char 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:       17 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    4
  8917 ;; This function calls:
  8918 ;;		___ftge
  8919 ;;		___ftmul
  8920 ;;		___ftneg
  8921 ;;		___fttol
  8922 ;;		___lltoft
  8923 ;;		_exp
  8924 ;;		_log
  8925 ;; This function is called by:
  8926 ;;		_dec_to_hex
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           	psect	text41
  8931  001030                     __ptext41:
  8932                           	opt stack 0
  8933  001030                     _pow:
  8934                           	opt stack 20
  8935                           
  8936                           ;incstack = 0
  8937  001030  0E00               	movlw	0
  8938  001032  6E5E               	movwf	pow@sign,c
  8939  001034  5052               	movf	pow@x,w,c
  8940  001036  1053               	iorwf	pow@x+1,w,c
  8941  001038  1054               	iorwf	pow@x+2,w,c
  8942  00103A  A4D8               	btfss	status,2,c
  8943  00103C  D01C               	goto	i2l3746
  8944  00103E  0E00               	movlw	0
  8945  001040  6E01               	movwf	___ftge@ff1,c
  8946  001042  0E00               	movlw	0
  8947  001044  6E02               	movwf	___ftge@ff1+1,c
  8948  001046  0E00               	movlw	0
  8949  001048  6E03               	movwf	___ftge@ff1+2,c
  8950  00104A  C055  F004         	movff	pow@y,___ftge@ff2
  8951  00104E  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  8952  001052  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  8953  001056  EC87  F011         	call	___ftge	;wreg free
  8954  00105A  A0D8               	btfss	status,0,c
  8955  00105C  D005               	goto	i2l908
  8956  00105E  0E00               	movlw	0
  8957  001060  0100               	movlb	0	; () banked
  8958  001062  6FAA               	movwf	(_errno+1)& (0+255),b
  8959  001064  0E21               	movlw	33
  8960  001066  6FA9               	movwf	_errno& (0+255),b
  8961  001068                     i2l908:
  8962  001068  0E00               	movlw	0
  8963  00106A  6E52               	movwf	?_pow,c
  8964  00106C  0E00               	movlw	0
  8965  00106E  6E53               	movwf	?_pow+1,c
  8966  001070  0E00               	movlw	0
  8967  001072  6E54               	movwf	?_pow+2,c
  8968  001074  0012               	return	
  8969  001076                     i2l3746:
  8970  001076  5055               	movf	pow@y,w,c
  8971  001078  1056               	iorwf	pow@y+1,w,c
  8972  00107A  1057               	iorwf	pow@y+2,w,c
  8973  00107C  A4D8               	btfss	status,2,c
  8974  00107E  D007               	goto	i2l3752
  8975  001080  0E00               	movlw	0
  8976  001082  6E52               	movwf	?_pow,c
  8977  001084  0E80               	movlw	128
  8978  001086  6E53               	movwf	?_pow+1,c
  8979  001088  0E3F               	movlw	63
  8980  00108A  6E54               	movwf	?_pow+2,c
  8981  00108C  0012               	return	
  8982  00108E                     i2l3752:
  8983  00108E  AE54               	btfss	pow@x+2,7,c
  8984  001090  D041               	goto	i2l3764
  8985  001092  C055  F028         	movff	pow@y,___fttol@f1
  8986  001096  C056  F029         	movff	pow@y+1,___fttol@f1+1
  8987  00109A  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  8988  00109E  EC9B  F00B         	call	___fttol	;wreg free
  8989  0010A2  C028  F05F         	movff	?___fttol,pow@yi
  8990  0010A6  C029  F060         	movff	?___fttol+1,pow@yi+1
  8991  0010AA  C02A  F061         	movff	?___fttol+2,pow@yi+2
  8992  0010AE  C02B  F062         	movff	?___fttol+3,pow@yi+3
  8993  0010B2  C05F  F009         	movff	pow@yi,___lltoft@c
  8994  0010B6  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  8995  0010BA  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  8996  0010BE  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  8997  0010C2  EC4E  F013         	call	___lltoft	;wreg free
  8998  0010C6  5055               	movf	pow@y,w,c
  8999  0010C8  1809               	xorwf	?___lltoft,w,c
  9000  0010CA  E107               	bnz	i2u330_40
  9001  0010CC  5056               	movf	pow@y+1,w,c
  9002  0010CE  180A               	xorwf	?___lltoft+1,w,c
  9003  0010D0  E104               	bnz	i2u330_40
  9004  0010D2  5057               	movf	pow@y+2,w,c
  9005  0010D4  180B               	xorwf	?___lltoft+2,w,c
  9006  0010D6  B4D8               	btfsc	status,2,c
  9007  0010D8  D00C               	goto	i2l3760
  9008  0010DA                     i2u330_40:
  9009  0010DA  0E00               	movlw	0
  9010  0010DC  0100               	movlb	0	; () banked
  9011  0010DE  6FAA               	movwf	(_errno+1)& (0+255),b
  9012  0010E0  0E21               	movlw	33
  9013  0010E2  6FA9               	movwf	_errno& (0+255),b
  9014  0010E4  0E00               	movlw	0
  9015  0010E6  6E52               	movwf	?_pow,c
  9016  0010E8  0E00               	movlw	0
  9017  0010EA  6E53               	movwf	?_pow+1,c
  9018  0010EC  0E00               	movlw	0
  9019  0010EE  6E54               	movwf	?_pow+2,c
  9020                           
  9021                           ; BSR set to: 0
  9022  0010F0  0012               	return	
  9023  0010F2                     i2l3760:
  9024  0010F2  505F               	movf	pow@yi,w,c
  9025  0010F4  0B01               	andlw	1
  9026  0010F6  6E5E               	movwf	pow@sign,c
  9027  0010F8  C052  F001         	movff	pow@x,___ftneg@f1
  9028  0010FC  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9029  001100  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9030  001104  EC22  F015         	call	___ftneg	;wreg free
  9031  001108  C001  F052         	movff	?___ftneg,pow@x
  9032  00110C  C002  F053         	movff	?___ftneg+1,pow@x+1
  9033  001110  C003  F054         	movff	?___ftneg+2,pow@x+2
  9034  001114                     i2l3764:
  9035  001114  C052  F034         	movff	pow@x,log@x
  9036  001118  C053  F035         	movff	pow@x+1,log@x+1
  9037  00111C  C054  F036         	movff	pow@x+2,log@x+2
  9038  001120  EC05  F00A         	call	_log	;wreg free
  9039  001124  C034  F058         	movff	?_log,_pow$1265
  9040  001128  C035  F059         	movff	?_log+1,_pow$1265+1
  9041  00112C  C036  F05A         	movff	?_log+2,_pow$1265+2
  9042  001130  C058  F00D         	movff	_pow$1265,___ftmul@f1
  9043  001134  C059  F00E         	movff	_pow$1265+1,___ftmul@f1+1
  9044  001138  C05A  F00F         	movff	_pow$1265+2,___ftmul@f1+2
  9045  00113C  C055  F010         	movff	pow@y,___ftmul@f2
  9046  001140  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  9047  001144  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  9048  001148  EC15  F00C         	call	___ftmul	;wreg free
  9049  00114C  C00D  F05B         	movff	?___ftmul,_pow$1266
  9050  001150  C00E  F05C         	movff	?___ftmul+1,_pow$1266+1
  9051  001154  C00F  F05D         	movff	?___ftmul+2,_pow$1266+2
  9052  001158  C05B  F049         	movff	_pow$1266,exp@x
  9053  00115C  C05C  F04A         	movff	_pow$1266+1,exp@x+1
  9054  001160  C05D  F04B         	movff	_pow$1266+2,exp@x+2
  9055  001164  EC84  F005         	call	_exp	;wreg free
  9056  001168  C049  F052         	movff	?_exp,pow@x
  9057  00116C  C04A  F053         	movff	?_exp+1,pow@x+1
  9058  001170  C04B  F054         	movff	?_exp+2,pow@x+2
  9059  001174  505E               	movf	pow@sign,w,c
  9060  001176  B4D8               	btfsc	status,2,c
  9061  001178  D00F               	goto	i2l913
  9062  00117A  C052  F001         	movff	pow@x,___ftneg@f1
  9063  00117E  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  9064  001182  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  9065  001186  EC22  F015         	call	___ftneg	;wreg free
  9066  00118A  C001  F052         	movff	?___ftneg,?_pow
  9067  00118E  C002  F053         	movff	?___ftneg+1,?_pow+1
  9068  001192  C003  F054         	movff	?___ftneg+2,?_pow+2
  9069  001196  0012               	return	
  9070  001198                     i2l913:
  9071  001198  C052  F052         	movff	pow@x,?_pow
  9072  00119C  C053  F053         	movff	pow@x+1,?_pow+1
  9073  0011A0  C054  F054         	movff	pow@x+2,?_pow+2
  9074  0011A4  0012               	return		;funcret
  9075  0011A6                     __end_of_pow:
  9076                           	opt stack 0
  9077                           pclatu	equ	0xFFB
  9078                           pclath	equ	0xFFA
  9079                           tblptru	equ	0xFF8
  9080                           tblptrh	equ	0xFF7
  9081                           tblptrl	equ	0xFF6
  9082                           tablat	equ	0xFF5
  9083                           prodh	equ	0xFF4
  9084                           prodl	equ	0xFF3
  9085                           intcon	equ	0xFF2
  9086                           intcon2	equ	0xFF1
  9087                           intcon3	equ	0xFF0
  9088                           postinc0	equ	0xFEE
  9089                           fsr0h	equ	0xFEA
  9090                           fsr0l	equ	0xFE9
  9091                           wreg	equ	0xFE8
  9092                           fsr1h	equ	0xFE2
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _log *****************
  9102 ;; Defined at:
  9103 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  x               3   51[COMRAM] unsigned char 
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;  exponent        2   54[COMRAM] int 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  3   51[COMRAM] int 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9117 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;Total ram usage:        5 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    3
  9124 ;; This function calls:
  9125 ;;		___awtoft
  9126 ;;		___ftadd
  9127 ;;		___ftmul
  9128 ;;		_eval_poly
  9129 ;;		_frexp
  9130 ;; This function is called by:
  9131 ;;		_pow
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text42
  9136  00140A                     __ptext42:
  9137                           	opt stack 0
  9138  00140A                     _log:
  9139                           	opt stack 20
  9140                           
  9141                           ;incstack = 0
  9142  00140A  AE36               	btfss	log@x+2,7,c
  9143  00140C  D00C               	goto	i2l3488
  9144  00140E  0E00               	movlw	0
  9145  001410  0100               	movlb	0	; () banked
  9146  001412  6FAA               	movwf	(_errno+1)& (0+255),b
  9147  001414  0E21               	movlw	33
  9148  001416  6FA9               	movwf	_errno& (0+255),b
  9149  001418  0E00               	movlw	0
  9150  00141A  6E34               	movwf	?_log,c
  9151  00141C  0E00               	movlw	0
  9152  00141E  6E35               	movwf	?_log+1,c
  9153  001420  0E00               	movlw	0
  9154  001422  6E36               	movwf	?_log+2,c
  9155                           
  9156                           ; BSR set to: 0
  9157  001424  0012               	return	
  9158  001426                     i2l3488:
  9159  001426  5034               	movf	log@x,w,c
  9160  001428  1035               	iorwf	log@x+1,w,c
  9161  00142A  1036               	iorwf	log@x+2,w,c
  9162  00142C  A4D8               	btfss	status,2,c
  9163  00142E  D00C               	goto	i2l3494
  9164  001430  0E00               	movlw	0
  9165  001432  0100               	movlb	0	; () banked
  9166  001434  6FAA               	movwf	(_errno+1)& (0+255),b
  9167  001436  0E22               	movlw	34
  9168  001438  6FA9               	movwf	_errno& (0+255),b
  9169  00143A  0E00               	movlw	0
  9170  00143C  6E34               	movwf	?_log,c
  9171  00143E  0E00               	movlw	0
  9172  001440  6E35               	movwf	?_log+1,c
  9173  001442  0E00               	movlw	0
  9174  001444  6E36               	movwf	?_log+2,c
  9175                           
  9176                           ; BSR set to: 0
  9177  001446  0012               	return	
  9178  001448                     i2l3494:
  9179  001448  0E00               	movlw	0
  9180  00144A  6E10               	movwf	___ftmul@f2,c
  9181  00144C  0E00               	movlw	0
  9182  00144E  6E11               	movwf	___ftmul@f2+1,c
  9183  001450  0E40               	movlw	64
  9184  001452  6E12               	movwf	___ftmul@f2+2,c
  9185  001454  0E37               	movlw	low log@exponent
  9186  001456  6E04               	movwf	frexp@eptr,c
  9187  001458  0E00               	movlw	high log@exponent
  9188  00145A  6E05               	movwf	frexp@eptr+1,c
  9189  00145C  C034  F001         	movff	log@x,frexp@value
  9190  001460  C035  F002         	movff	log@x+1,frexp@value+1
  9191  001464  C036  F003         	movff	log@x+2,frexp@value+2
  9192  001468  EC3F  F011         	call	_frexp	;wreg free
  9193  00146C  C001  F00D         	movff	?_frexp,___ftmul@f1
  9194  001470  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  9195  001474  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  9196  001478  EC15  F00C         	call	___ftmul	;wreg free
  9197  00147C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9198  001480  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9199  001484  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9200  001488  0E00               	movlw	0
  9201  00148A  6E1F               	movwf	___ftadd@f2,c
  9202  00148C  0E80               	movlw	128
  9203  00148E  6E20               	movwf	___ftadd@f2+1,c
  9204  001490  0EBF               	movlw	191
  9205  001492  6E21               	movwf	___ftadd@f2+2,c
  9206  001494  EC78  F006         	call	___ftadd	;wreg free
  9207  001498  C01C  F034         	movff	?___ftadd,log@x
  9208  00149C  C01D  F035         	movff	?___ftadd+1,log@x+1
  9209  0014A0  C01E  F036         	movff	?___ftadd+2,log@x+2
  9210  0014A4  0637               	decf	log@exponent,f,c
  9211  0014A6  A0D8               	btfss	status,0,c
  9212  0014A8  0638               	decf	log@exponent+1,f,c
  9213  0014AA  C034  F028         	movff	log@x,eval_poly@x
  9214  0014AE  C035  F029         	movff	log@x+1,eval_poly@x+1
  9215  0014B2  C036  F02A         	movff	log@x+2,eval_poly@x+2
  9216  0014B6  0EED               	movlw	low log@coeff
  9217  0014B8  6E2B               	movwf	eval_poly@d,c
  9218  0014BA  0EFD               	movlw	high log@coeff
  9219  0014BC  6E2C               	movwf	eval_poly@d+1,c
  9220  0014BE  0E00               	movlw	0
  9221  0014C0  6E2E               	movwf	eval_poly@n+1,c
  9222  0014C2  0E08               	movlw	8
  9223  0014C4  6E2D               	movwf	eval_poly@n,c
  9224  0014C6  ECC5  F00E         	call	_eval_poly	;wreg free
  9225  0014CA  C028  F034         	movff	?_eval_poly,log@x
  9226  0014CE  C029  F035         	movff	?_eval_poly+1,log@x+1
  9227  0014D2  C02A  F036         	movff	?_eval_poly+2,log@x+2
  9228  0014D6  0E72               	movlw	114
  9229  0014D8  6E10               	movwf	___ftmul@f2,c
  9230  0014DA  0E31               	movlw	49
  9231  0014DC  6E11               	movwf	___ftmul@f2+1,c
  9232  0014DE  0E3F               	movlw	63
  9233  0014E0  6E12               	movwf	___ftmul@f2+2,c
  9234  0014E2  C037  F009         	movff	log@exponent,___awtoft@c
  9235  0014E6  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  9236  0014EA  EC54  F014         	call	___awtoft	;wreg free
  9237  0014EE  C009  F00D         	movff	?___awtoft,___ftmul@f1
  9238  0014F2  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  9239  0014F6  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  9240  0014FA  EC15  F00C         	call	___ftmul	;wreg free
  9241  0014FE  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9242  001502  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9243  001506  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9244  00150A  C034  F01F         	movff	log@x,___ftadd@f2
  9245  00150E  C035  F020         	movff	log@x+1,___ftadd@f2+1
  9246  001512  C036  F021         	movff	log@x+2,___ftadd@f2+2
  9247  001516  EC78  F006         	call	___ftadd	;wreg free
  9248  00151A  C01C  F034         	movff	?___ftadd,?_log
  9249  00151E  C01D  F035         	movff	?___ftadd+1,?_log+1
  9250  001522  C01E  F036         	movff	?___ftadd+2,?_log+2
  9251  001526  0012               	return	
  9252  001528                     __end_of_log:
  9253                           	opt stack 0
  9254                           pclatu	equ	0xFFB
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           intcon2	equ	0xFF1
  9264                           intcon3	equ	0xFF0
  9265                           postinc0	equ	0xFEE
  9266                           fsr0h	equ	0xFEA
  9267                           fsr0l	equ	0xFE9
  9268                           wreg	equ	0xFE8
  9269                           fsr1h	equ	0xFE2
  9270                           fsr1l	equ	0xFE1
  9271                           indf2	equ	0xFDF
  9272                           postinc2	equ	0xFDE
  9273                           postdec2	equ	0xFDD
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function _exp *****************
  9279 ;; Defined at:
  9280 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  x               3   72[COMRAM] int 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  exponent        2   78[COMRAM] int 
  9285 ;;  sign            1   80[COMRAM] unsigned char 
  9286 ;; Return value:  Size  Location     Type
  9287 ;;                  3   72[COMRAM] unsigned char 
  9288 ;; Registers used:
  9289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 0/0
  9292 ;;		On exit  : 0/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9295 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;Total ram usage:        9 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:    3
  9302 ;; This function calls:
  9303 ;;		___awtoft
  9304 ;;		___ftdiv
  9305 ;;		___ftge
  9306 ;;		___ftmul
  9307 ;;		___ftneg
  9308 ;;		___ftsub
  9309 ;;		___fttol
  9310 ;;		_eval_poly
  9311 ;;		_floor
  9312 ;;		_ldexp
  9313 ;; This function is called by:
  9314 ;;		_pow
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           	psect	text43
  9319  000B08                     __ptext43:
  9320                           	opt stack 0
  9321  000B08                     _exp:
  9322                           	opt stack 20
  9323                           
  9324                           ;incstack = 0
  9325  000B08  5049               	movf	exp@x,w,c
  9326  000B0A  104A               	iorwf	exp@x+1,w,c
  9327  000B0C  104B               	iorwf	exp@x+2,w,c
  9328  000B0E  A4D8               	btfss	status,2,c
  9329  000B10  D007               	goto	i2l3510
  9330  000B12  0E00               	movlw	0
  9331  000B14  6E49               	movwf	?_exp,c
  9332  000B16  0E80               	movlw	128
  9333  000B18  6E4A               	movwf	?_exp+1,c
  9334  000B1A  0E3F               	movlw	63
  9335  000B1C  6E4B               	movwf	?_exp+2,c
  9336  000B1E  0012               	return	
  9337  000B20                     i2l3510:
  9338  000B20  0E72               	movlw	114
  9339  000B22  6E01               	movwf	___ftge@ff1,c
  9340  000B24  0E31               	movlw	49
  9341  000B26  6E02               	movwf	___ftge@ff1+1,c
  9342  000B28  0E44               	movlw	68
  9343  000B2A  6E03               	movwf	___ftge@ff1+2,c
  9344  000B2C  C049  F004         	movff	exp@x,___ftge@ff2
  9345  000B30  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  9346  000B34  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  9347  000B38  EC87  F011         	call	___ftge	;wreg free
  9348  000B3C  B0D8               	btfsc	status,0,c
  9349  000B3E  D00C               	goto	i2l3516
  9350  000B40  0E00               	movlw	0
  9351  000B42  0100               	movlb	0	; () banked
  9352  000B44  6FAA               	movwf	(_errno+1)& (0+255),b
  9353  000B46  0E22               	movlw	34
  9354  000B48  6FA9               	movwf	_errno& (0+255),b
  9355  000B4A  0EFF               	movlw	255
  9356  000B4C  6E49               	movwf	?_exp,c
  9357  000B4E  0E7F               	movlw	127
  9358  000B50  6E4A               	movwf	?_exp+1,c
  9359  000B52  0E7F               	movlw	127
  9360  000B54  6E4B               	movwf	?_exp+2,c
  9361                           
  9362                           ; BSR set to: 0
  9363  000B56  0012               	return	
  9364  000B58                     i2l3516:
  9365  000B58  C049  F001         	movff	exp@x,___ftge@ff1
  9366  000B5C  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  9367  000B60  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  9368  000B64  0E49               	movlw	73
  9369  000B66  6E04               	movwf	___ftge@ff2,c
  9370  000B68  0E3A               	movlw	58
  9371  000B6A  6E05               	movwf	___ftge@ff2+1,c
  9372  000B6C  0EC4               	movlw	196
  9373  000B6E  6E06               	movwf	___ftge@ff2+2,c
  9374  000B70  EC87  F011         	call	___ftge	;wreg free
  9375  000B74  B0D8               	btfsc	status,0,c
  9376  000B76  D00C               	goto	i2l3522
  9377  000B78  0E00               	movlw	0
  9378  000B7A  0100               	movlb	0	; () banked
  9379  000B7C  6FAA               	movwf	(_errno+1)& (0+255),b
  9380  000B7E  0E22               	movlw	34
  9381  000B80  6FA9               	movwf	_errno& (0+255),b
  9382  000B82  0E00               	movlw	0
  9383  000B84  6E49               	movwf	?_exp,c
  9384  000B86  0E00               	movlw	0
  9385  000B88  6E4A               	movwf	?_exp+1,c
  9386  000B8A  0E00               	movlw	0
  9387  000B8C  6E4B               	movwf	?_exp+2,c
  9388                           
  9389                           ; BSR set to: 0
  9390  000B8E  0012               	return	
  9391  000B90                     i2l3522:
  9392  000B90  AE4B               	btfss	exp@x+2,7,c
  9393  000B92  D002               	goto	i2u292_40
  9394  000B94  0E01               	movlw	1
  9395  000B96  D001               	goto	i2u293_40
  9396  000B98                     i2u292_40:
  9397  000B98  0E00               	movlw	0
  9398  000B9A                     i2u293_40:
  9399  000B9A  6E51               	movwf	exp@sign,c
  9400  000B9C  5051               	movf	exp@sign,w,c
  9401  000B9E  B4D8               	btfsc	status,2,c
  9402  000BA0  D00E               	goto	i2l1071
  9403  000BA2  C049  F001         	movff	exp@x,___ftneg@f1
  9404  000BA6  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  9405  000BAA  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  9406  000BAE  EC22  F015         	call	___ftneg	;wreg free
  9407  000BB2  C001  F049         	movff	?___ftneg,exp@x
  9408  000BB6  C002  F04A         	movff	?___ftneg+1,exp@x+1
  9409  000BBA  C003  F04B         	movff	?___ftneg+2,exp@x+2
  9410  000BBE                     i2l1071:
  9411  000BBE  C049  F00D         	movff	exp@x,___ftmul@f1
  9412  000BC2  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  9413  000BC6  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  9414  000BCA  0EAA               	movlw	170
  9415  000BCC  6E10               	movwf	___ftmul@f2,c
  9416  000BCE  0EB8               	movlw	184
  9417  000BD0  6E11               	movwf	___ftmul@f2+1,c
  9418  000BD2  0E3F               	movlw	63
  9419  000BD4  6E12               	movwf	___ftmul@f2+2,c
  9420  000BD6  EC15  F00C         	call	___ftmul	;wreg free
  9421  000BDA  C00D  F049         	movff	?___ftmul,exp@x
  9422  000BDE  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  9423  000BE2  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  9424  000BE6  C049  F041         	movff	exp@x,floor@x
  9425  000BEA  C04A  F042         	movff	exp@x+1,floor@x+1
  9426  000BEE  C04B  F043         	movff	exp@x+2,floor@x+2
  9427  000BF2  ECED  F00D         	call	_floor	;wreg free
  9428  000BF6  C041  F04C         	movff	?_floor,_exp$1267
  9429  000BFA  C042  F04D         	movff	?_floor+1,_exp$1267+1
  9430  000BFE  C043  F04E         	movff	?_floor+2,_exp$1267+2
  9431  000C02  C04C  F028         	movff	_exp$1267,___fttol@f1
  9432  000C06  C04D  F029         	movff	_exp$1267+1,___fttol@f1+1
  9433  000C0A  C04E  F02A         	movff	_exp$1267+2,___fttol@f1+2
  9434  000C0E  EC9B  F00B         	call	___fttol	;wreg free
  9435  000C12  C028  F04F         	movff	?___fttol,exp@exponent
  9436  000C16  C029  F050         	movff	?___fttol+1,exp@exponent+1
  9437  000C1A  C049  F028         	movff	exp@x,___ftsub@f1
  9438  000C1E  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  9439  000C22  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  9440  000C26  C04F  F009         	movff	exp@exponent,___awtoft@c
  9441  000C2A  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  9442  000C2E  EC54  F014         	call	___awtoft	;wreg free
  9443  000C32  C009  F02B         	movff	?___awtoft,___ftsub@f2
  9444  000C36  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  9445  000C3A  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  9446  000C3E  EC15  F014         	call	___ftsub	;wreg free
  9447  000C42  C028  F049         	movff	?___ftsub,exp@x
  9448  000C46  C029  F04A         	movff	?___ftsub+1,exp@x+1
  9449  000C4A  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  9450  000C4E  C049  F028         	movff	exp@x,eval_poly@x
  9451  000C52  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  9452  000C56  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  9453  000C5A  0ECF               	movlw	low exp@coeff
  9454  000C5C  6E2B               	movwf	eval_poly@d,c
  9455  000C5E  0EFD               	movlw	high exp@coeff
  9456  000C60  6E2C               	movwf	eval_poly@d+1,c
  9457  000C62  0E00               	movlw	0
  9458  000C64  6E2E               	movwf	eval_poly@n+1,c
  9459  000C66  0E09               	movlw	9
  9460  000C68  6E2D               	movwf	eval_poly@n,c
  9461  000C6A  ECC5  F00E         	call	_eval_poly	;wreg free
  9462  000C6E  C028  F034         	movff	?_eval_poly,ldexp@value
  9463  000C72  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  9464  000C76  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  9465  000C7A  C04F  F037         	movff	exp@exponent,ldexp@newexp
  9466  000C7E  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  9467  000C82  EC2E  F00F         	call	_ldexp	;wreg free
  9468  000C86  C034  F049         	movff	?_ldexp,exp@x
  9469  000C8A  C035  F04A         	movff	?_ldexp+1,exp@x+1
  9470  000C8E  C036  F04B         	movff	?_ldexp+2,exp@x+2
  9471  000C92  5051               	movf	exp@sign,w,c
  9472  000C94  B4D8               	btfsc	status,2,c
  9473  000C96  D025               	goto	i2l1072
  9474  000C98  2849               	incf	exp@x,w,c
  9475  000C9A  E10E               	bnz	i2l3544
  9476  000C9C  0E7F               	movlw	127
  9477  000C9E  184A               	xorwf	exp@x+1,w,c
  9478  000CA0  E10B               	bnz	i2l3544
  9479  000CA2  0E7F               	movlw	127
  9480  000CA4  184B               	xorwf	exp@x+2,w,c
  9481  000CA6  A4D8               	btfss	status,2,c
  9482  000CA8  D007               	goto	i2l3544
  9483  000CAA  0E00               	movlw	0
  9484  000CAC  6E49               	movwf	?_exp,c
  9485  000CAE  0E00               	movlw	0
  9486  000CB0  6E4A               	movwf	?_exp+1,c
  9487  000CB2  0E00               	movlw	0
  9488  000CB4  6E4B               	movwf	?_exp+2,c
  9489  000CB6  0012               	return	
  9490  000CB8                     i2l3544:
  9491  000CB8  0E00               	movlw	0
  9492  000CBA  6E09               	movwf	___ftdiv@f1,c
  9493  000CBC  0E80               	movlw	128
  9494  000CBE  6E0A               	movwf	___ftdiv@f1+1,c
  9495  000CC0  0E3F               	movlw	63
  9496  000CC2  6E0B               	movwf	___ftdiv@f1+2,c
  9497  000CC4  C049  F00C         	movff	exp@x,___ftdiv@f2
  9498  000CC8  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  9499  000CCC  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  9500  000CD0  EC7A  F00D         	call	___ftdiv	;wreg free
  9501  000CD4  C009  F049         	movff	?___ftdiv,?_exp
  9502  000CD8  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  9503  000CDC  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  9504  000CE0  0012               	return	
  9505  000CE2                     i2l1072:
  9506  000CE2  C049  F049         	movff	exp@x,?_exp
  9507  000CE6  C04A  F04A         	movff	exp@x+1,?_exp+1
  9508  000CEA  C04B  F04B         	movff	exp@x+2,?_exp+2
  9509  000CEE  0012               	return		;funcret
  9510  000CF0                     __end_of_exp:
  9511                           	opt stack 0
  9512                           pclatu	equ	0xFFB
  9513                           pclath	equ	0xFFA
  9514                           tblptru	equ	0xFF8
  9515                           tblptrh	equ	0xFF7
  9516                           tblptrl	equ	0xFF6
  9517                           tablat	equ	0xFF5
  9518                           prodh	equ	0xFF4
  9519                           prodl	equ	0xFF3
  9520                           intcon	equ	0xFF2
  9521                           intcon2	equ	0xFF1
  9522                           intcon3	equ	0xFF0
  9523                           postinc0	equ	0xFEE
  9524                           fsr0h	equ	0xFEA
  9525                           fsr0l	equ	0xFE9
  9526                           wreg	equ	0xFE8
  9527                           fsr1h	equ	0xFE2
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           postdec2	equ	0xFDD
  9532                           fsr2h	equ	0xFDA
  9533                           fsr2l	equ	0xFD9
  9534                           status	equ	0xFD8
  9535                           
  9536 ;; *************** function _ldexp *****************
  9537 ;; Defined at:
  9538 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9539 ;; Parameters:    Size  Location     Type
  9540 ;;  value           3   51[COMRAM] unsigned char 
  9541 ;;  newexp          2   54[COMRAM] int 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  3   51[COMRAM] int 
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9553 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;Total ram usage:        7 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; This function calls:
  9560 ;;		Nothing
  9561 ;; This function is called by:
  9562 ;;		_exp
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           	psect	text44
  9567  001E5C                     __ptext44:
  9568                           	opt stack 0
  9569  001E5C                     _ldexp:
  9570                           	opt stack 22
  9571                           
  9572                           ;incstack = 0
  9573  001E5C  5034               	movf	ldexp@value,w,c
  9574  001E5E  1035               	iorwf	ldexp@value+1,w,c
  9575  001E60  1036               	iorwf	ldexp@value+2,w,c
  9576  001E62  A4D8               	btfss	status,2,c
  9577  001E64  D007               	goto	i2l3356
  9578  001E66  0E00               	movlw	0
  9579  001E68  6E34               	movwf	?_ldexp,c
  9580  001E6A  0E00               	movlw	0
  9581  001E6C  6E35               	movwf	?_ldexp+1,c
  9582  001E6E  0E00               	movlw	0
  9583  001E70  6E36               	movwf	?_ldexp+2,c
  9584  001E72  0012               	return	
  9585  001E74                     i2l3356:
  9586  001E74  5036               	movf	ldexp@value+2,w,c
  9587  001E76  0B7F               	andlw	127
  9588  001E78  6E39               	movwf	??_ldexp& (0+255),c
  9589  001E7A  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  9590  001E7C  90D8               	bcf	status,0,c
  9591  001E7E  3639               	rlcf	??_ldexp,f,c
  9592  001E80  363A               	rlcf	??_ldexp+1,f,c
  9593  001E82  5039               	movf	??_ldexp,w,c
  9594  001E84  2637               	addwf	ldexp@newexp,f,c
  9595  001E86  503A               	movf	??_ldexp+1,w,c
  9596  001E88  2238               	addwfc	ldexp@newexp+1,f,c
  9597  001E8A  AE35               	btfss	ldexp@value+1,7,c
  9598  001E8C  D003               	goto	i2u272_40
  9599  001E8E  6A39               	clrf	??_ldexp& (0+255),c
  9600  001E90  2A39               	incf	??_ldexp& (0+255),f,c
  9601  001E92  D001               	goto	i2u272_48
  9602  001E94                     i2u272_40:
  9603  001E94  6A39               	clrf	??_ldexp& (0+255),c
  9604  001E96                     i2u272_48:
  9605  001E96  5039               	movf	??_ldexp,w,c
  9606  001E98  2637               	addwf	ldexp@newexp,f,c
  9607  001E9A  0E00               	movlw	0
  9608  001E9C  2238               	addwfc	ldexp@newexp+1,f,c
  9609  001E9E  AE38               	btfss	ldexp@newexp+1,7,c
  9610  001EA0  D00C               	goto	i2l3364
  9611  001EA2  0E00               	movlw	0
  9612  001EA4  0100               	movlb	0	; () banked
  9613  001EA6  6FAA               	movwf	(_errno+1)& (0+255),b
  9614  001EA8  0E22               	movlw	34
  9615  001EAA  6FA9               	movwf	_errno& (0+255),b
  9616  001EAC  0E00               	movlw	0
  9617  001EAE  6E34               	movwf	?_ldexp,c
  9618  001EB0  0E00               	movlw	0
  9619  001EB2  6E35               	movwf	?_ldexp+1,c
  9620  001EB4  0E00               	movlw	0
  9621  001EB6                     L7:
  9622  001EB6  6E36               	movwf	?_ldexp+2,c
  9623                           
  9624                           ; BSR set to: 0
  9625  001EB8  0012               	return	
  9626  001EBA                     i2l3364:
  9627  001EBA  BE38               	btfsc	ldexp@newexp+1,7,c
  9628  001EBC  D016               	goto	i2l3380
  9629  001EBE  0438               	decf	ldexp@newexp+1,w,c
  9630  001EC0  A0D8               	btfss	status,0,c
  9631  001EC2  D013               	goto	i2l3380
  9632  001EC4  0E00               	movlw	0
  9633  001EC6  0100               	movlb	0	; () banked
  9634  001EC8  6FAA               	movwf	(_errno+1)& (0+255),b
  9635  001ECA  0E22               	movlw	34
  9636  001ECC  6FA9               	movwf	_errno& (0+255),b
  9637                           
  9638                           ; BSR set to: 0
  9639  001ECE  AE36               	btfss	ldexp@value+2,7,c
  9640  001ED0  D006               	goto	i2l3376
  9641                           
  9642                           ; BSR set to: 0
  9643  001ED2  0EFF               	movlw	255
  9644  001ED4  6E34               	movwf	?_ldexp,c
  9645  001ED6  0E7F               	movlw	127
  9646  001ED8  6E35               	movwf	?_ldexp+1,c
  9647  001EDA  0EFF               	movlw	255
  9648  001EDC  D7EC               	goto	L7
  9649  001EDE                     i2l3376:
  9650                           
  9651                           ; BSR set to: 0
  9652  001EDE  0EFF               	movlw	255
  9653  001EE0  6E34               	movwf	?_ldexp,c
  9654  001EE2  0E7F               	movlw	127
  9655  001EE4  6E35               	movwf	?_ldexp+1,c
  9656  001EE6  0E7F               	movlw	127
  9657  001EE8  D7E6               	goto	L7
  9658  001EEA                     i2l3380:
  9659  001EEA  3438               	rlcf	ldexp@newexp+1,w,c
  9660  001EEC  3038               	rrcf	ldexp@newexp+1,w,c
  9661  001EEE  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  9662  001EF0  3037               	rrcf	ldexp@newexp,w,c
  9663  001EF2  6E39               	movwf	??_ldexp& (0+255),c
  9664  001EF4  5036               	movf	ldexp@value+2,w,c
  9665  001EF6  1839               	xorwf	??_ldexp,w,c
  9666  001EF8  0B80               	andlw	-128
  9667  001EFA  1839               	xorwf	??_ldexp,w,c
  9668  001EFC  6E36               	movwf	ldexp@value+2,c
  9669  001EFE  C037  F039         	movff	ldexp@newexp,??_ldexp
  9670  001F02  0E01               	movlw	1
  9671  001F04  1639               	andwf	??_ldexp,f,c
  9672  001F06  3239               	rrcf	??_ldexp,f,c
  9673  001F08  3239               	rrcf	??_ldexp,f,c
  9674  001F0A  5035               	movf	ldexp@value+1,w,c
  9675  001F0C  1839               	xorwf	??_ldexp,w,c
  9676  001F0E  0B7F               	andlw	-129
  9677  001F10  1839               	xorwf	??_ldexp,w,c
  9678  001F12  6E35               	movwf	ldexp@value+1,c
  9679  001F14  C034  F034         	movff	ldexp@value,?_ldexp
  9680  001F18  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  9681  001F1C  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  9682  001F20  0012               	return	
  9683  001F22                     __end_of_ldexp:
  9684                           	opt stack 0
  9685                           pclatu	equ	0xFFB
  9686                           pclath	equ	0xFFA
  9687                           tblptru	equ	0xFF8
  9688                           tblptrh	equ	0xFF7
  9689                           tblptrl	equ	0xFF6
  9690                           tablat	equ	0xFF5
  9691                           prodh	equ	0xFF4
  9692                           prodl	equ	0xFF3
  9693                           intcon	equ	0xFF2
  9694                           intcon2	equ	0xFF1
  9695                           intcon3	equ	0xFF0
  9696                           postinc0	equ	0xFEE
  9697                           fsr0h	equ	0xFEA
  9698                           fsr0l	equ	0xFE9
  9699                           wreg	equ	0xFE8
  9700                           fsr1h	equ	0xFE2
  9701                           fsr1l	equ	0xFE1
  9702                           indf2	equ	0xFDF
  9703                           postinc2	equ	0xFDE
  9704                           postdec2	equ	0xFDD
  9705                           fsr2h	equ	0xFDA
  9706                           fsr2l	equ	0xFD9
  9707                           status	equ	0xFD8
  9708                           
  9709 ;; *************** function _floor *****************
  9710 ;; Defined at:
  9711 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  x               3   64[COMRAM] int 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  i               3   67[COMRAM] int 
  9716 ;;  expon           2   70[COMRAM] int 
  9717 ;; Return value:  Size  Location     Type
  9718 ;;                  3   64[COMRAM] int 
  9719 ;; Registers used:
  9720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9721 ;; Tracked objects:
  9722 ;;		On entry : 0/0
  9723 ;;		On exit  : 0/0
  9724 ;;		Unchanged: 0/0
  9725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9726 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;Total ram usage:        8 bytes
  9731 ;; Hardware stack levels used:    1
  9732 ;; Hardware stack levels required when called:    2
  9733 ;; This function calls:
  9734 ;;		___altoft
  9735 ;;		___ftadd
  9736 ;;		___ftge
  9737 ;;		___fttol
  9738 ;;		_frexp
  9739 ;; This function is called by:
  9740 ;;		_exp
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text45
  9745  001BDA                     __ptext45:
  9746                           	opt stack 0
  9747  001BDA                     _floor:
  9748                           	opt stack 20
  9749                           
  9750                           ;incstack = 0
  9751  001BDA  C041  F001         	movff	floor@x,frexp@value
  9752  001BDE  C042  F002         	movff	floor@x+1,frexp@value+1
  9753  001BE2  C043  F003         	movff	floor@x+2,frexp@value+2
  9754  001BE6  0E47               	movlw	low floor@expon
  9755  001BE8  6E04               	movwf	frexp@eptr,c
  9756  001BEA  0E00               	movlw	high floor@expon
  9757  001BEC  6E05               	movwf	frexp@eptr+1,c
  9758  001BEE  EC3F  F011         	call	_frexp	;wreg free
  9759  001BF2  AE48               	btfss	floor@expon+1,7,c
  9760  001BF4  D010               	goto	i2l3334
  9761  001BF6  AE43               	btfss	floor@x+2,7,c
  9762  001BF8  D007               	goto	i2l3330
  9763  001BFA  0E00               	movlw	0
  9764  001BFC  6E41               	movwf	?_floor,c
  9765  001BFE  0E80               	movlw	128
  9766  001C00  6E42               	movwf	?_floor+1,c
  9767  001C02  0EBF               	movlw	191
  9768  001C04  6E43               	movwf	?_floor+2,c
  9769  001C06  0012               	return	
  9770  001C08                     i2l3330:
  9771  001C08  0E00               	movlw	0
  9772  001C0A  6E41               	movwf	?_floor,c
  9773  001C0C  0E00               	movlw	0
  9774  001C0E  6E42               	movwf	?_floor+1,c
  9775  001C10  0E00               	movlw	0
  9776  001C12  6E43               	movwf	?_floor+2,c
  9777  001C14  0012               	return	
  9778  001C16                     i2l3334:
  9779  001C16  5048               	movf	floor@expon+1,w,c
  9780  001C18  E104               	bnz	i2u268_40
  9781  001C1A  0E15               	movlw	21
  9782  001C1C  5C47               	subwf	floor@expon,w,c
  9783  001C1E  A0D8               	btfss	status,0,c
  9784  001C20  D007               	goto	i2l3338
  9785  001C22                     i2u268_40:
  9786  001C22  C041  F041         	movff	floor@x,?_floor
  9787  001C26  C042  F042         	movff	floor@x+1,?_floor+1
  9788  001C2A  C043  F043         	movff	floor@x+2,?_floor+2
  9789  001C2E  0012               	return	
  9790  001C30                     i2l3338:
  9791  001C30  C041  F028         	movff	floor@x,___fttol@f1
  9792  001C34  C042  F029         	movff	floor@x+1,___fttol@f1+1
  9793  001C38  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  9794  001C3C  EC9B  F00B         	call	___fttol	;wreg free
  9795  001C40  C028  F037         	movff	?___fttol,___altoft@c
  9796  001C44  C029  F038         	movff	?___fttol+1,___altoft@c+1
  9797  001C48  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  9798  001C4C  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  9799  001C50  EC4D  F012         	call	___altoft	;wreg free
  9800  001C54  C037  F044         	movff	?___altoft,floor@i
  9801  001C58  C038  F045         	movff	?___altoft+1,floor@i+1
  9802  001C5C  C039  F046         	movff	?___altoft+2,floor@i+2
  9803  001C60  C041  F001         	movff	floor@x,___ftge@ff1
  9804  001C64  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  9805  001C68  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  9806  001C6C  C044  F004         	movff	floor@i,___ftge@ff2
  9807  001C70  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  9808  001C74  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  9809  001C78  EC87  F011         	call	___ftge	;wreg free
  9810  001C7C  B0D8               	btfsc	status,0,c
  9811  001C7E  D015               	goto	i2l1082
  9812  001C80  C044  F01C         	movff	floor@i,___ftadd@f1
  9813  001C84  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  9814  001C88  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  9815  001C8C  0E00               	movlw	0
  9816  001C8E  6E1F               	movwf	___ftadd@f2,c
  9817  001C90  0E80               	movlw	128
  9818  001C92  6E20               	movwf	___ftadd@f2+1,c
  9819  001C94  0EBF               	movlw	191
  9820  001C96  6E21               	movwf	___ftadd@f2+2,c
  9821  001C98  EC78  F006         	call	___ftadd	;wreg free
  9822  001C9C  C01C  F041         	movff	?___ftadd,?_floor
  9823  001CA0  C01D  F042         	movff	?___ftadd+1,?_floor+1
  9824  001CA4  C01E  F043         	movff	?___ftadd+2,?_floor+2
  9825  001CA8  0012               	return	
  9826  001CAA                     i2l1082:
  9827  001CAA  C044  F041         	movff	floor@i,?_floor
  9828  001CAE  C045  F042         	movff	floor@i+1,?_floor+1
  9829  001CB2  C046  F043         	movff	floor@i+2,?_floor+2
  9830  001CB6  0012               	return		;funcret
  9831  001CB8                     __end_of_floor:
  9832                           	opt stack 0
  9833                           pclatu	equ	0xFFB
  9834                           pclath	equ	0xFFA
  9835                           tblptru	equ	0xFF8
  9836                           tblptrh	equ	0xFF7
  9837                           tblptrl	equ	0xFF6
  9838                           tablat	equ	0xFF5
  9839                           prodh	equ	0xFF4
  9840                           prodl	equ	0xFF3
  9841                           intcon	equ	0xFF2
  9842                           intcon2	equ	0xFF1
  9843                           intcon3	equ	0xFF0
  9844                           postinc0	equ	0xFEE
  9845                           fsr0h	equ	0xFEA
  9846                           fsr0l	equ	0xFE9
  9847                           wreg	equ	0xFE8
  9848                           fsr1h	equ	0xFE2
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _frexp *****************
  9858 ;; Defined at:
  9859 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  value           3    0[COMRAM] int 
  9862 ;;  eptr            2    3[COMRAM] PTR int 
  9863 ;;		 -> log@exponent(2), floor@expon(2), 
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;		None
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  3    0[COMRAM] PTR int 
  9868 ;; Registers used:
  9869 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:        7 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; This function calls:
  9882 ;;		Nothing
  9883 ;; This function is called by:
  9884 ;;		_floor
  9885 ;;		_log
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text46
  9890  00227E                     __ptext46:
  9891                           	opt stack 0
  9892  00227E                     _frexp:
  9893                           	opt stack 22
  9894                           
  9895                           ;incstack = 0
  9896  00227E  5001               	movf	frexp@value,w,c
  9897  002280  1002               	iorwf	frexp@value+1,w,c
  9898  002282  1003               	iorwf	frexp@value+2,w,c
  9899  002284  A4D8               	btfss	status,2,c
  9900  002286  D00F               	goto	i2l3210
  9901  002288  C004  FFD9         	movff	frexp@eptr,fsr2l
  9902  00228C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9903  002290  0E00               	movlw	0
  9904  002292  6EDE               	movwf	postinc2,c
  9905  002294  0E00               	movlw	0
  9906  002296  6EDD               	movwf	postdec2,c
  9907  002298  0E00               	movlw	0
  9908  00229A  6E01               	movwf	?_frexp,c
  9909  00229C  0E00               	movlw	0
  9910  00229E  6E02               	movwf	?_frexp+1,c
  9911  0022A0  0E00               	movlw	0
  9912  0022A2  6E03               	movwf	?_frexp+2,c
  9913  0022A4  0012               	return	
  9914  0022A6                     i2l3210:
  9915  0022A6  5003               	movf	frexp@value+2,w,c
  9916  0022A8  0B7F               	andlw	127
  9917  0022AA  6E06               	movwf	??_frexp& (0+255),c
  9918  0022AC  6A07               	clrf	(??_frexp+1)& (0+255),c
  9919  0022AE  90D8               	bcf	status,0,c
  9920  0022B0  3606               	rlcf	??_frexp,f,c
  9921  0022B2  3607               	rlcf	??_frexp+1,f,c
  9922  0022B4  C004  FFD9         	movff	frexp@eptr,fsr2l
  9923  0022B8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9924  0022BC  C006  FFDE         	movff	??_frexp,postinc2
  9925  0022C0  C007  FFDD         	movff	??_frexp+1,postdec2
  9926  0022C4  AE02               	btfss	frexp@value+1,7,c
  9927  0022C6  D003               	goto	i2u255_40
  9928  0022C8  6A06               	clrf	??_frexp& (0+255),c
  9929  0022CA  2A06               	incf	??_frexp& (0+255),f,c
  9930  0022CC  D001               	goto	i2u255_48
  9931  0022CE                     i2u255_40:
  9932  0022CE  6A06               	clrf	??_frexp& (0+255),c
  9933  0022D0                     i2u255_48:
  9934  0022D0  5006               	movf	??_frexp,w,c
  9935  0022D2  C004  FFD9         	movff	frexp@eptr,fsr2l
  9936  0022D6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9937  0022DA  12DE               	iorwf	postinc2,f,c
  9938  0022DC  0E00               	movlw	0
  9939  0022DE  12DD               	iorwf	postdec2,f,c
  9940  0022E0  C004  FFD9         	movff	frexp@eptr,fsr2l
  9941  0022E4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9942  0022E8  0E82               	movlw	130
  9943  0022EA  26DE               	addwf	postinc2,f,c
  9944  0022EC  0EFF               	movlw	255
  9945  0022EE  22DD               	addwfc	postdec2,f,c
  9946  0022F0  8003               	bsf	frexp@value+2,0,c
  9947  0022F2  8203               	bsf	frexp@value+2,1,c
  9948  0022F4  8403               	bsf	frexp@value+2,2,c
  9949  0022F6  8603               	bsf	frexp@value+2,3,c
  9950  0022F8  8803               	bsf	frexp@value+2,4,c
  9951  0022FA  8A03               	bsf	frexp@value+2,5,c
  9952  0022FC  9C03               	bcf	frexp@value+2,6,c
  9953  0022FE  9E02               	bcf	frexp@value+1,7,c
  9954  002300  C001  F001         	movff	frexp@value,?_frexp
  9955  002304  C002  F002         	movff	frexp@value+1,?_frexp+1
  9956  002308  C003  F003         	movff	frexp@value+2,?_frexp+2
  9957  00230C  0012               	return	
  9958  00230E                     __end_of_frexp:
  9959                           	opt stack 0
  9960                           pclatu	equ	0xFFB
  9961                           pclath	equ	0xFFA
  9962                           tblptru	equ	0xFF8
  9963                           tblptrh	equ	0xFF7
  9964                           tblptrl	equ	0xFF6
  9965                           tablat	equ	0xFF5
  9966                           prodh	equ	0xFF4
  9967                           prodl	equ	0xFF3
  9968                           intcon	equ	0xFF2
  9969                           intcon2	equ	0xFF1
  9970                           intcon3	equ	0xFF0
  9971                           postinc0	equ	0xFEE
  9972                           fsr0h	equ	0xFEA
  9973                           fsr0l	equ	0xFE9
  9974                           wreg	equ	0xFE8
  9975                           fsr1h	equ	0xFE2
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function ___fttol *****************
  9985 ;; Defined at:
  9986 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;  f1              3   39[COMRAM] float 
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  lval            4   49[COMRAM] unsigned long 
  9991 ;;  exp1            1   53[COMRAM] unsigned char 
  9992 ;;  sign1           1   48[COMRAM] unsigned char 
  9993 ;; Return value:  Size  Location     Type
  9994 ;;                  4   39[COMRAM] long 
  9995 ;; Registers used:
  9996 ;;		wreg, status,2, status,0
  9997 ;; Tracked objects:
  9998 ;;		On entry : 0/0
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;Total ram usage:       15 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; This function calls:
 10009 ;;		Nothing
 10010 ;; This function is called by:
 10011 ;;		_dec_to_hex
 10012 ;;		_pow
 10013 ;;		_exp
 10014 ;;		_floor
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text47
 10019  001736                     __ptext47:
 10020                           	opt stack 0
 10021  001736                     ___fttol:
 10022                           	opt stack 21
 10023                           
 10024                           ;incstack = 0
 10025  001736  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 10026  00173A  6A2D               	clrf	(??___fttol+1)& (0+255),c
 10027  00173C  6A2E               	clrf	(??___fttol+2)& (0+255),c
 10028  00173E  3429               	rlcf	___fttol@f1+1,w,c
 10029  001740  362C               	rlcf	??___fttol& (0+255),f,c
 10030  001742  E301               	bnc	u246_41
 10031  001744  802D               	bsf	(??___fttol+1)& (0+255),0,c
 10032  001746                     u246_41:
 10033  001746  502C               	movf	??___fttol,w,c
 10034  001748  6E36               	movwf	___fttol@exp1,c
 10035  00174A  5036               	movf	___fttol@exp1,w,c
 10036  00174C  A4D8               	btfss	status,2,c
 10037  00174E  D009               	goto	i2l3162
 10038  001750  0E00               	movlw	0
 10039  001752  6E28               	movwf	?___fttol,c
 10040  001754  0E00               	movlw	0
 10041  001756  6E29               	movwf	?___fttol+1,c
 10042  001758  0E00               	movlw	0
 10043  00175A  6E2A               	movwf	?___fttol+2,c
 10044  00175C  0E00               	movlw	0
 10045  00175E  6E2B               	movwf	?___fttol+3,c
 10046  001760  0012               	return	
 10047  001762                     i2l3162:
 10048  001762  0E17               	movlw	23
 10049  001764  6E2C               	movwf	??___fttol& (0+255),c
 10050  001766  C028  F02D         	movff	___fttol@f1,??___fttol+1
 10051  00176A  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 10052  00176E  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 10053  001772  282C               	incf	??___fttol,w,c
 10054  001774  6E30               	movwf	(??___fttol+4)& (0+255),c
 10055  001776  D004               	goto	i2u248_40
 10056  001778                     i2u248_45:
 10057  001778  90D8               	bcf	status,0,c
 10058  00177A  322F               	rrcf	??___fttol+3,f,c
 10059  00177C  322E               	rrcf	??___fttol+2,f,c
 10060  00177E  322D               	rrcf	??___fttol+1,f,c
 10061  001780                     i2u248_40:
 10062  001780  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 10063  001782  D7FA               	goto	i2u248_45
 10064  001784  502D               	movf	??___fttol+1,w,c
 10065  001786  6E31               	movwf	___fttol@sign1,c
 10066  001788  8E29               	bsf	___fttol@f1+1,7,c
 10067  00178A  0EFF               	movlw	255
 10068  00178C  1628               	andwf	___fttol@f1,f,c
 10069  00178E  0EFF               	movlw	255
 10070  001790  1629               	andwf	___fttol@f1+1,f,c
 10071  001792  0E00               	movlw	0
 10072  001794  162A               	andwf	___fttol@f1+2,f,c
 10073  001796  5028               	movf	___fttol@f1,w,c
 10074  001798  6E32               	movwf	___fttol@lval,c
 10075  00179A  5029               	movf	___fttol@f1+1,w,c
 10076  00179C  6E33               	movwf	___fttol@lval+1,c
 10077  00179E  502A               	movf	___fttol@f1+2,w,c
 10078  0017A0  6E34               	movwf	___fttol@lval+2,c
 10079  0017A2  6A35               	clrf	___fttol@lval+3,c
 10080  0017A4  0E8E               	movlw	142
 10081  0017A6  5E36               	subwf	___fttol@exp1,f,c
 10082  0017A8  AE36               	btfss	___fttol@exp1,7,c
 10083  0017AA  D016               	goto	i2l3184
 10084  0017AC  5036               	movf	___fttol@exp1,w,c
 10085  0017AE  0A80               	xorlw	128
 10086  0017B0  0F8F               	addlw	143
 10087  0017B2  B0D8               	btfsc	status,0,c
 10088  0017B4  D009               	goto	i2l3180
 10089  0017B6  0E00               	movlw	0
 10090  0017B8  6E28               	movwf	?___fttol,c
 10091  0017BA  0E00               	movlw	0
 10092  0017BC  6E29               	movwf	?___fttol+1,c
 10093  0017BE  0E00               	movlw	0
 10094  0017C0  6E2A               	movwf	?___fttol+2,c
 10095  0017C2  0E00               	movlw	0
 10096  0017C4  6E2B               	movwf	?___fttol+3,c
 10097  0017C6  0012               	return	
 10098  0017C8                     i2l3180:
 10099  0017C8  90D8               	bcf	status,0,c
 10100  0017CA  3235               	rrcf	___fttol@lval+3,f,c
 10101  0017CC  3234               	rrcf	___fttol@lval+2,f,c
 10102  0017CE  3233               	rrcf	___fttol@lval+1,f,c
 10103  0017D0  3232               	rrcf	___fttol@lval,f,c
 10104  0017D2  3E36               	incfsz	___fttol@exp1,f,c
 10105  0017D4  D7F9               	goto	i2l3180
 10106  0017D6  D015               	goto	i2l3194
 10107  0017D8                     i2l3184:
 10108  0017D8  0E17               	movlw	23
 10109  0017DA  6436               	cpfsgt	___fttol@exp1,c
 10110  0017DC  D00F               	goto	i2l3192
 10111  0017DE  0E00               	movlw	0
 10112  0017E0  6E28               	movwf	?___fttol,c
 10113  0017E2  0E00               	movlw	0
 10114  0017E4  6E29               	movwf	?___fttol+1,c
 10115  0017E6  0E00               	movlw	0
 10116  0017E8  6E2A               	movwf	?___fttol+2,c
 10117  0017EA  0E00               	movlw	0
 10118  0017EC  6E2B               	movwf	?___fttol+3,c
 10119  0017EE  0012               	return	
 10120  0017F0                     i2l3190:
 10121  0017F0  90D8               	bcf	status,0,c
 10122  0017F2  3632               	rlcf	___fttol@lval,f,c
 10123  0017F4  3633               	rlcf	___fttol@lval+1,f,c
 10124  0017F6  3634               	rlcf	___fttol@lval+2,f,c
 10125  0017F8  3635               	rlcf	___fttol@lval+3,f,c
 10126  0017FA  0636               	decf	___fttol@exp1,f,c
 10127  0017FC                     i2l3192:
 10128  0017FC  5036               	movf	___fttol@exp1,w,c
 10129  0017FE  A4D8               	btfss	status,2,c
 10130  001800  D7F7               	goto	i2l3190
 10131  001802                     i2l3194:
 10132  001802  5031               	movf	___fttol@sign1,w,c
 10133  001804  B4D8               	btfsc	status,2,c
 10134  001806  D008               	goto	i2l3198
 10135  001808  1E35               	comf	___fttol@lval+3,f,c
 10136  00180A  1E34               	comf	___fttol@lval+2,f,c
 10137  00180C  1E33               	comf	___fttol@lval+1,f,c
 10138  00180E  6C32               	negf	___fttol@lval,c
 10139  001810  0E00               	movlw	0
 10140  001812  2233               	addwfc	___fttol@lval+1,f,c
 10141  001814  2234               	addwfc	___fttol@lval+2,f,c
 10142  001816  2235               	addwfc	___fttol@lval+3,f,c
 10143  001818                     i2l3198:
 10144  001818  C032  F028         	movff	___fttol@lval,?___fttol
 10145  00181C  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 10146  001820  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 10147  001824  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 10148  001828  0012               	return	
 10149  00182A                     __end_of___fttol:
 10150                           	opt stack 0
 10151                           pclatu	equ	0xFFB
 10152                           pclath	equ	0xFFA
 10153                           tblptru	equ	0xFF8
 10154                           tblptrh	equ	0xFF7
 10155                           tblptrl	equ	0xFF6
 10156                           tablat	equ	0xFF5
 10157                           prodh	equ	0xFF4
 10158                           prodl	equ	0xFF3
 10159                           intcon	equ	0xFF2
 10160                           intcon2	equ	0xFF1
 10161                           intcon3	equ	0xFF0
 10162                           postinc0	equ	0xFEE
 10163                           fsr0h	equ	0xFEA
 10164                           fsr0l	equ	0xFE9
 10165                           wreg	equ	0xFE8
 10166                           fsr1h	equ	0xFE2
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           fsr2h	equ	0xFDA
 10172                           fsr2l	equ	0xFD9
 10173                           status	equ	0xFD8
 10174                           
 10175 ;; *************** function ___ftge *****************
 10176 ;; Defined at:
 10177 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10178 ;; Parameters:    Size  Location     Type
 10179 ;;  ff1             3    0[COMRAM] float 
 10180 ;;  ff2             3    3[COMRAM] float 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;		None
 10183 ;; Return value:  Size  Location     Type
 10184 ;;		None               void
 10185 ;; Registers used:
 10186 ;;		wreg, status,2, status,0
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10192 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;Total ram usage:        9 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_pow
 10202 ;;		_exp
 10203 ;;		_floor
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text48
 10208  00230E                     __ptext48:
 10209                           	opt stack 0
 10210  00230E                     ___ftge:
 10211                           	opt stack 21
 10212                           
 10213                           ;incstack = 0
 10214  00230E  AE03               	btfss	___ftge@ff1+2,7,c
 10215  002310  D016               	goto	i2l3142
 10216  002312  C001  F007         	movff	___ftge@ff1,??___ftge
 10217  002316  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10218  00231A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10219  00231E  1E07               	comf	??___ftge,f,c
 10220  002320  1E08               	comf	??___ftge+1,f,c
 10221  002322  1E09               	comf	??___ftge+2,f,c
 10222  002324  2A07               	incf	??___ftge,f,c
 10223  002326  0E00               	movlw	0
 10224  002328  2208               	addwfc	??___ftge+1,f,c
 10225  00232A  2209               	addwfc	??___ftge+2,f,c
 10226  00232C  0E00               	movlw	0
 10227  00232E  2407               	addwf	??___ftge,w,c
 10228  002330  6E01               	movwf	___ftge@ff1,c
 10229  002332  0E00               	movlw	0
 10230  002334  2008               	addwfc	??___ftge+1,w,c
 10231  002336  6E02               	movwf	___ftge@ff1+1,c
 10232  002338  0E80               	movlw	128
 10233  00233A  2009               	addwfc	??___ftge+2,w,c
 10234  00233C  6E03               	movwf	___ftge@ff1+2,c
 10235  00233E                     i2l3142:
 10236  00233E  AE06               	btfss	___ftge@ff2+2,7,c
 10237  002340  D016               	goto	i2l3146
 10238  002342  C004  F007         	movff	___ftge@ff2,??___ftge
 10239  002346  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10240  00234A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10241  00234E  1E07               	comf	??___ftge,f,c
 10242  002350  1E08               	comf	??___ftge+1,f,c
 10243  002352  1E09               	comf	??___ftge+2,f,c
 10244  002354  2A07               	incf	??___ftge,f,c
 10245  002356  0E00               	movlw	0
 10246  002358  2208               	addwfc	??___ftge+1,f,c
 10247  00235A  2209               	addwfc	??___ftge+2,f,c
 10248  00235C  0E00               	movlw	0
 10249  00235E  2407               	addwf	??___ftge,w,c
 10250  002360  6E04               	movwf	___ftge@ff2,c
 10251  002362  0E00               	movlw	0
 10252  002364  2008               	addwfc	??___ftge+1,w,c
 10253  002366  6E05               	movwf	___ftge@ff2+1,c
 10254  002368  0E80               	movlw	128
 10255  00236A  2009               	addwfc	??___ftge+2,w,c
 10256  00236C  6E06               	movwf	___ftge@ff2+2,c
 10257  00236E                     i2l3146:
 10258  00236E  0E00               	movlw	0
 10259  002370  1A01               	xorwf	___ftge@ff1,f,c
 10260  002372  0E00               	movlw	0
 10261  002374  1A02               	xorwf	___ftge@ff1+1,f,c
 10262  002376  0E80               	movlw	128
 10263  002378  1A03               	xorwf	___ftge@ff1+2,f,c
 10264  00237A  0E00               	movlw	0
 10265  00237C  1A04               	xorwf	___ftge@ff2,f,c
 10266  00237E  0E00               	movlw	0
 10267  002380  1A05               	xorwf	___ftge@ff2+1,f,c
 10268  002382  0E80               	movlw	128
 10269  002384  1A06               	xorwf	___ftge@ff2+2,f,c
 10270  002386  5004               	movf	___ftge@ff2,w,c
 10271  002388  5C01               	subwf	___ftge@ff1,w,c
 10272  00238A  5005               	movf	___ftge@ff2+1,w,c
 10273  00238C  5802               	subwfb	___ftge@ff1+1,w,c
 10274  00238E  5006               	movf	___ftge@ff2+2,w,c
 10275  002390  5803               	subwfb	___ftge@ff1+2,w,c
 10276  002392  B0D8               	btfsc	status,0,c
 10277  002394  D002               	goto	i2l3152
 10278  002396  90D8               	bcf	status,0,c
 10279  002398  0012               	return	
 10280  00239A                     i2l3152:
 10281  00239A  80D8               	bsf	status,0,c
 10282  00239C  0012               	return	
 10283  00239E                     __end_of___ftge:
 10284                           	opt stack 0
 10285                           pclatu	equ	0xFFB
 10286                           pclath	equ	0xFFA
 10287                           tblptru	equ	0xFF8
 10288                           tblptrh	equ	0xFF7
 10289                           tblptrl	equ	0xFF6
 10290                           tablat	equ	0xFF5
 10291                           prodh	equ	0xFF4
 10292                           prodl	equ	0xFF3
 10293                           intcon	equ	0xFF2
 10294                           intcon2	equ	0xFF1
 10295                           intcon3	equ	0xFF0
 10296                           postinc0	equ	0xFEE
 10297                           fsr0h	equ	0xFEA
 10298                           fsr0l	equ	0xFE9
 10299                           wreg	equ	0xFE8
 10300                           fsr1h	equ	0xFE2
 10301                           fsr1l	equ	0xFE1
 10302                           indf2	equ	0xFDF
 10303                           postinc2	equ	0xFDE
 10304                           postdec2	equ	0xFDD
 10305                           fsr2h	equ	0xFDA
 10306                           fsr2l	equ	0xFD9
 10307                           status	equ	0xFD8
 10308                           
 10309 ;; *************** function ___altoft *****************
 10310 ;; Defined at:
 10311 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;  c               4   54[COMRAM] long 
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;  sign            1   63[COMRAM] unsigned char 
 10316 ;;  exp             1   62[COMRAM] unsigned char 
 10317 ;; Return value:  Size  Location     Type
 10318 ;;                  3   54[COMRAM] float 
 10319 ;; Registers used:
 10320 ;;		wreg, status,2, status,0, cstack
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10327 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10328 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10329 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10330 ;;Total ram usage:       10 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    1
 10333 ;; This function calls:
 10334 ;;		___ftpack
 10335 ;; This function is called by:
 10336 ;;		_floor
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           	psect	text49
 10341  00249A                     __ptext49:
 10342                           	opt stack 0
 10343  00249A                     ___altoft:
 10344                           	opt stack 20
 10345                           
 10346                           ;incstack = 0
 10347  00249A  0E00               	movlw	0
 10348  00249C  6E40               	movwf	___altoft@sign,c
 10349  00249E  0E8E               	movlw	142
 10350  0024A0  6E3F               	movwf	___altoft@exp,c
 10351  0024A2  AE3A               	btfss	___altoft@c+3,7,c
 10352  0024A4  D011               	goto	i2l3014
 10353  0024A6  1E3A               	comf	___altoft@c+3,f,c
 10354  0024A8  1E39               	comf	___altoft@c+2,f,c
 10355  0024AA  1E38               	comf	___altoft@c+1,f,c
 10356  0024AC  6C37               	negf	___altoft@c,c
 10357  0024AE  0E00               	movlw	0
 10358  0024B0  2238               	addwfc	___altoft@c+1,f,c
 10359  0024B2  2239               	addwfc	___altoft@c+2,f,c
 10360  0024B4  223A               	addwfc	___altoft@c+3,f,c
 10361  0024B6  0E01               	movlw	1
 10362  0024B8  6E40               	movwf	___altoft@sign,c
 10363  0024BA  D006               	goto	i2l3014
 10364  0024BC                     i2l3012:
 10365  0024BC  90D8               	bcf	status,0,c
 10366  0024BE  323A               	rrcf	___altoft@c+3,f,c
 10367  0024C0  3239               	rrcf	___altoft@c+2,f,c
 10368  0024C2  3238               	rrcf	___altoft@c+1,f,c
 10369  0024C4  3237               	rrcf	___altoft@c,f,c
 10370  0024C6  2A3F               	incf	___altoft@exp,f,c
 10371  0024C8                     i2l3014:
 10372  0024C8  0E00               	movlw	0
 10373  0024CA  1437               	andwf	___altoft@c,w,c
 10374  0024CC  6E3B               	movwf	??___altoft& (0+255),c
 10375  0024CE  0E00               	movlw	0
 10376  0024D0  1438               	andwf	___altoft@c+1,w,c
 10377  0024D2  6E3C               	movwf	(??___altoft+1)& (0+255),c
 10378  0024D4  0E00               	movlw	0
 10379  0024D6  1439               	andwf	___altoft@c+2,w,c
 10380  0024D8  6E3D               	movwf	(??___altoft+2)& (0+255),c
 10381  0024DA  0EFF               	movlw	255
 10382  0024DC  143A               	andwf	___altoft@c+3,w,c
 10383  0024DE  6E3E               	movwf	(??___altoft+3)& (0+255),c
 10384  0024E0  503B               	movf	??___altoft,w,c
 10385  0024E2  103C               	iorwf	??___altoft+1,w,c
 10386  0024E4  103D               	iorwf	??___altoft+2,w,c
 10387  0024E6  103E               	iorwf	??___altoft+3,w,c
 10388  0024E8  A4D8               	btfss	status,2,c
 10389  0024EA  D7E8               	goto	i2l3012
 10390  0024EC  C037  F001         	movff	___altoft@c,___ftpack@arg
 10391  0024F0  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 10392  0024F4  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 10393  0024F8  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 10394  0024FC  C040  F005         	movff	___altoft@sign,___ftpack@sign
 10395  002500  EC4F  F010         	call	___ftpack	;wreg free
 10396  002504  C001  F037         	movff	?___ftpack,?___altoft
 10397  002508  C002  F038         	movff	?___ftpack+1,?___altoft+1
 10398  00250C  C003  F039         	movff	?___ftpack+2,?___altoft+2
 10399  002510  0012               	return	
 10400  002512                     __end_of___altoft:
 10401                           	opt stack 0
 10402                           pclatu	equ	0xFFB
 10403                           pclath	equ	0xFFA
 10404                           tblptru	equ	0xFF8
 10405                           tblptrh	equ	0xFF7
 10406                           tblptrl	equ	0xFF6
 10407                           tablat	equ	0xFF5
 10408                           prodh	equ	0xFF4
 10409                           prodl	equ	0xFF3
 10410                           intcon	equ	0xFF2
 10411                           intcon2	equ	0xFF1
 10412                           intcon3	equ	0xFF0
 10413                           postinc0	equ	0xFEE
 10414                           fsr0h	equ	0xFEA
 10415                           fsr0l	equ	0xFE9
 10416                           wreg	equ	0xFE8
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function _eval_poly *****************
 10427 ;; Defined at:
 10428 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  x               3   39[COMRAM] float 
 10431 ;;  d               2   42[COMRAM] PTR const 
 10432 ;;		 -> log@coeff(27), exp@coeff(30), 
 10433 ;;  n               2   44[COMRAM] int 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  res             3   48[COMRAM] int 
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  3   39[COMRAM] int 
 10438 ;; Registers used:
 10439 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10445 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;Total ram usage:       12 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:    2
 10452 ;; This function calls:
 10453 ;;		___ftadd
 10454 ;;		___ftmul
 10455 ;;		i2___wmul
 10456 ;; This function is called by:
 10457 ;;		_exp
 10458 ;;		_log
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           	psect	text50
 10463  001D8A                     __ptext50:
 10464                           	opt stack 0
 10465  001D8A                     _eval_poly:
 10466                           	opt stack 20
 10467                           
 10468                           ;incstack = 0
 10469  001D8A  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10470  001D8E  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10471  001D92  0E00               	movlw	0
 10472  001D94  6E04               	movwf	i2___wmul@multiplicand+1,c
 10473  001D96  0E03               	movlw	3
 10474  001D98  6E03               	movwf	i2___wmul@multiplicand,c
 10475  001D9A  EC0F  F015         	call	i2___wmul	;wreg free
 10476  001D9E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10477  001DA2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10478  001DA6  5001               	movf	?i2___wmul,w,c
 10479  001DA8  262F               	addwf	??_eval_poly,f,c
 10480  001DAA  5002               	movf	?i2___wmul+1,w,c
 10481  001DAC  2230               	addwfc	??_eval_poly+1,f,c
 10482  001DAE  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10483  001DB2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10484  001DB6                     	if	0	;tblptru may be non-zero
 10485  001DB6                     	endif
 10486  001DB6                     	if	0	;tblptru may be non-zero
 10487  001DB6                     	endif
 10488  001DB6  0009               	tblrd		*+
 10489  001DB8  CFF5 F031          	movff	tablat,eval_poly@res
 10490  001DBC  0009               	tblrd		*+
 10491  001DBE  CFF5 F032          	movff	tablat,eval_poly@res+1
 10492  001DC2  000A               	tblrd		*-
 10493  001DC4  CFF5 F033          	movff	tablat,eval_poly@res+2
 10494  001DC8  D03E               	goto	i2l3348
 10495  001DCA                     i2l3346:
 10496  001DCA  C031  F010         	movff	eval_poly@res,___ftmul@f2
 10497  001DCE  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 10498  001DD2  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 10499  001DD6  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 10500  001DDA  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 10501  001DDE  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 10502  001DE2  EC15  F00C         	call	___ftmul	;wreg free
 10503  001DE6  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10504  001DEA  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10505  001DEE  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10506  001DF2  0E00               	movlw	0
 10507  001DF4  6E04               	movwf	i2___wmul@multiplicand+1,c
 10508  001DF6  0E03               	movlw	3
 10509  001DF8  6E03               	movwf	i2___wmul@multiplicand,c
 10510  001DFA  062D               	decf	eval_poly@n,f,c
 10511  001DFC  A0D8               	btfss	status,0,c
 10512  001DFE  062E               	decf	eval_poly@n+1,f,c
 10513  001E00  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 10514  001E04  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 10515  001E08  EC0F  F015         	call	i2___wmul	;wreg free
 10516  001E0C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 10517  001E10  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 10518  001E14  5001               	movf	?i2___wmul,w,c
 10519  001E16  262F               	addwf	??_eval_poly,f,c
 10520  001E18  5002               	movf	?i2___wmul+1,w,c
 10521  001E1A  2230               	addwfc	??_eval_poly+1,f,c
 10522  001E1C  C02F  FFF6         	movff	??_eval_poly,tblptrl
 10523  001E20  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 10524  001E24                     	if	0	;tblptru may be non-zero
 10525  001E24                     	endif
 10526  001E24                     	if	0	;tblptru may be non-zero
 10527  001E24                     	endif
 10528  001E24  0009               	tblrd		*+
 10529  001E26  CFF5 F01F          	movff	tablat,___ftadd@f2
 10530  001E2A  0009               	tblrd		*+
 10531  001E2C  CFF5 F020          	movff	tablat,___ftadd@f2+1
 10532  001E30  000A               	tblrd		*-
 10533  001E32  CFF5 F021          	movff	tablat,___ftadd@f2+2
 10534  001E36  EC78  F006         	call	___ftadd	;wreg free
 10535  001E3A  C01C  F031         	movff	?___ftadd,eval_poly@res
 10536  001E3E  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 10537  001E42  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 10538  001E46                     i2l3348:
 10539  001E46  502D               	movf	eval_poly@n,w,c
 10540  001E48  102E               	iorwf	eval_poly@n+1,w,c
 10541  001E4A  A4D8               	btfss	status,2,c
 10542  001E4C  D7BE               	goto	i2l3346
 10543  001E4E  C031  F028         	movff	eval_poly@res,?_eval_poly
 10544  001E52  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 10545  001E56  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 10546  001E5A  0012               	return		;funcret
 10547  001E5C                     __end_of_eval_poly:
 10548                           	opt stack 0
 10549                           pclatu	equ	0xFFB
 10550                           pclath	equ	0xFFA
 10551                           tblptru	equ	0xFF8
 10552                           tblptrh	equ	0xFF7
 10553                           tblptrl	equ	0xFF6
 10554                           tablat	equ	0xFF5
 10555                           prodh	equ	0xFF4
 10556                           prodl	equ	0xFF3
 10557                           intcon	equ	0xFF2
 10558                           intcon2	equ	0xFF1
 10559                           intcon3	equ	0xFF0
 10560                           postinc0	equ	0xFEE
 10561                           fsr0h	equ	0xFEA
 10562                           fsr0l	equ	0xFE9
 10563                           wreg	equ	0xFE8
 10564                           fsr1h	equ	0xFE2
 10565                           fsr1l	equ	0xFE1
 10566                           indf2	equ	0xFDF
 10567                           postinc2	equ	0xFDE
 10568                           postdec2	equ	0xFDD
 10569                           fsr2h	equ	0xFDA
 10570                           fsr2l	equ	0xFD9
 10571                           status	equ	0xFD8
 10572                           
 10573 ;; *************** function i2___wmul *****************
 10574 ;; Defined at:
 10575 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  multiplier      2    0[COMRAM] unsigned int 
 10578 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  __wmul          2    4[COMRAM] unsigned int 
 10581 ;; Return value:  Size  Location     Type
 10582 ;;                  2    0[COMRAM] unsigned int 
 10583 ;; Registers used:
 10584 ;;		wreg, status,2, status,0, prodl, prodh
 10585 ;; Tracked objects:
 10586 ;;		On entry : 0/0
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;Total ram usage:        6 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; This function calls:
 10597 ;;		Nothing
 10598 ;; This function is called by:
 10599 ;;		_isr
 10600 ;;		_eval_poly
 10601 ;;		i2_printf
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           	psect	text51
 10606  002A1E                     __ptext51:
 10607                           	opt stack 0
 10608  002A1E                     i2___wmul:
 10609                           	opt stack 24
 10610                           
 10611                           ;incstack = 0
 10612  002A1E  5001               	movf	i2___wmul@multiplier,w,c
 10613  002A20  0203               	mulwf	i2___wmul@multiplicand,c
 10614  002A22  CFF3 F005          	movff	prodl,i2___wmul@product
 10615  002A26  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10616  002A2A  5001               	movf	i2___wmul@multiplier,w,c
 10617  002A2C  0204               	mulwf	i2___wmul@multiplicand+1,c
 10618  002A2E  50F3               	movf	prodl,w,c
 10619  002A30  2606               	addwf	i2___wmul@product+1,f,c
 10620  002A32  5002               	movf	i2___wmul@multiplier+1,w,c
 10621  002A34  0203               	mulwf	i2___wmul@multiplicand,c
 10622  002A36  50F3               	movf	prodl,w,c
 10623  002A38  2606               	addwf	i2___wmul@product+1,f,c
 10624  002A3A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10625  002A3E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10626  002A42  0012               	return	
 10627  002A44                     __end_ofi2___wmul:
 10628                           	opt stack 0
 10629                           pclatu	equ	0xFFB
 10630                           pclath	equ	0xFFA
 10631                           tblptru	equ	0xFF8
 10632                           tblptrh	equ	0xFF7
 10633                           tblptrl	equ	0xFF6
 10634                           tablat	equ	0xFF5
 10635                           prodh	equ	0xFF4
 10636                           prodl	equ	0xFF3
 10637                           intcon	equ	0xFF2
 10638                           intcon2	equ	0xFF1
 10639                           intcon3	equ	0xFF0
 10640                           postinc0	equ	0xFEE
 10641                           fsr0h	equ	0xFEA
 10642                           fsr0l	equ	0xFE9
 10643                           wreg	equ	0xFE8
 10644                           fsr1h	equ	0xFE2
 10645                           fsr1l	equ	0xFE1
 10646                           indf2	equ	0xFDF
 10647                           postinc2	equ	0xFDE
 10648                           postdec2	equ	0xFDD
 10649                           fsr2h	equ	0xFDA
 10650                           fsr2l	equ	0xFD9
 10651                           status	equ	0xFD8
 10652                           
 10653 ;; *************** function ___ftmul *****************
 10654 ;; Defined at:
 10655 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  f1              3   12[COMRAM] float 
 10658 ;;  f2              3   15[COMRAM] float 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 10661 ;;  sign            1   26[COMRAM] unsigned char 
 10662 ;;  cntr            1   25[COMRAM] unsigned char 
 10663 ;;  exp             1   21[COMRAM] unsigned char 
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  3   12[COMRAM] float 
 10666 ;; Registers used:
 10667 ;;		wreg, status,2, status,0, cstack
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10673 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;Total ram usage:       15 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    1
 10680 ;; This function calls:
 10681 ;;		___ftpack
 10682 ;; This function is called by:
 10683 ;;		_dec_to_hex
 10684 ;;		_pow
 10685 ;;		_exp
 10686 ;;		_log
 10687 ;;		_eval_poly
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text52
 10692  00182A                     __ptext52:
 10693                           	opt stack 0
 10694  00182A                     ___ftmul:
 10695                           	opt stack 20
 10696                           
 10697                           ;incstack = 0
 10698  00182A  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 10699  00182E  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10700  001830  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10701  001832  340E               	rlcf	___ftmul@f1+1,w,c
 10702  001834  3613               	rlcf	??___ftmul& (0+255),f,c
 10703  001836  E301               	bnc	u237_41
 10704  001838  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10705  00183A                     u237_41:
 10706  00183A  5013               	movf	??___ftmul,w,c
 10707  00183C  6E16               	movwf	___ftmul@exp,c
 10708  00183E  5016               	movf	___ftmul@exp,w,c
 10709  001840  A4D8               	btfss	status,2,c
 10710  001842  D007               	goto	i2l3096
 10711  001844  0E00               	movlw	0
 10712  001846  6E0D               	movwf	?___ftmul,c
 10713  001848  0E00               	movlw	0
 10714  00184A  6E0E               	movwf	?___ftmul+1,c
 10715  00184C  0E00               	movlw	0
 10716  00184E  6E0F               	movwf	?___ftmul+2,c
 10717  001850  0012               	return	
 10718  001852                     i2l3096:
 10719  001852  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 10720  001856  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10721  001858  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10722  00185A  3411               	rlcf	___ftmul@f2+1,w,c
 10723  00185C  3613               	rlcf	??___ftmul& (0+255),f,c
 10724  00185E  E301               	bnc	u239_41
 10725  001860  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10726  001862                     u239_41:
 10727  001862  5013               	movf	??___ftmul,w,c
 10728  001864  6E1B               	movwf	___ftmul@sign,c
 10729  001866  501B               	movf	___ftmul@sign,w,c
 10730  001868  A4D8               	btfss	status,2,c
 10731  00186A  D007               	goto	i2l3102
 10732  00186C  0E00               	movlw	0
 10733  00186E  6E0D               	movwf	?___ftmul,c
 10734  001870  0E00               	movlw	0
 10735  001872  6E0E               	movwf	?___ftmul+1,c
 10736  001874  0E00               	movlw	0
 10737  001876  6E0F               	movwf	?___ftmul+2,c
 10738  001878  0012               	return	
 10739  00187A                     i2l3102:
 10740  00187A  501B               	movf	___ftmul@sign,w,c
 10741  00187C  0F7B               	addlw	123
 10742  00187E  2616               	addwf	___ftmul@exp,f,c
 10743  001880  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 10744  001884  5012               	movf	___ftmul@f2+2,w,c
 10745  001886  1A1B               	xorwf	___ftmul@sign,f,c
 10746  001888  0E80               	movlw	128
 10747  00188A  161B               	andwf	___ftmul@sign,f,c
 10748  00188C  8E0E               	bsf	___ftmul@f1+1,7,c
 10749  00188E  8E11               	bsf	___ftmul@f2+1,7,c
 10750  001890  0EFF               	movlw	255
 10751  001892  1610               	andwf	___ftmul@f2,f,c
 10752  001894  0EFF               	movlw	255
 10753  001896  1611               	andwf	___ftmul@f2+1,f,c
 10754  001898  0E00               	movlw	0
 10755  00189A  1612               	andwf	___ftmul@f2+2,f,c
 10756  00189C  0E00               	movlw	0
 10757  00189E  6E17               	movwf	___ftmul@f3_as_product,c
 10758  0018A0  0E00               	movlw	0
 10759  0018A2  6E18               	movwf	___ftmul@f3_as_product+1,c
 10760  0018A4  0E00               	movlw	0
 10761  0018A6  6E19               	movwf	___ftmul@f3_as_product+2,c
 10762  0018A8  0E07               	movlw	7
 10763  0018AA  6E1A               	movwf	___ftmul@cntr,c
 10764  0018AC                     i2l3116:
 10765  0018AC  A00D               	btfss	___ftmul@f1,0,c
 10766  0018AE  D006               	goto	i2l3120
 10767  0018B0  5010               	movf	___ftmul@f2,w,c
 10768  0018B2  2617               	addwf	___ftmul@f3_as_product,f,c
 10769  0018B4  5011               	movf	___ftmul@f2+1,w,c
 10770  0018B6  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10771  0018B8  5012               	movf	___ftmul@f2+2,w,c
 10772  0018BA  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10773  0018BC                     i2l3120:
 10774  0018BC  90D8               	bcf	status,0,c
 10775  0018BE  320F               	rrcf	___ftmul@f1+2,f,c
 10776  0018C0  320E               	rrcf	___ftmul@f1+1,f,c
 10777  0018C2  320D               	rrcf	___ftmul@f1,f,c
 10778  0018C4  90D8               	bcf	status,0,c
 10779  0018C6  3610               	rlcf	___ftmul@f2,f,c
 10780  0018C8  3611               	rlcf	___ftmul@f2+1,f,c
 10781  0018CA  3612               	rlcf	___ftmul@f2+2,f,c
 10782  0018CC  2E1A               	decfsz	___ftmul@cntr,f,c
 10783  0018CE  D7EE               	goto	i2l3116
 10784  0018D0  0E09               	movlw	9
 10785  0018D2  6E1A               	movwf	___ftmul@cntr,c
 10786  0018D4                     i2l3126:
 10787  0018D4  A00D               	btfss	___ftmul@f1,0,c
 10788  0018D6  D006               	goto	i2l3130
 10789  0018D8  5010               	movf	___ftmul@f2,w,c
 10790  0018DA  2617               	addwf	___ftmul@f3_as_product,f,c
 10791  0018DC  5011               	movf	___ftmul@f2+1,w,c
 10792  0018DE  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10793  0018E0  5012               	movf	___ftmul@f2+2,w,c
 10794  0018E2  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10795  0018E4                     i2l3130:
 10796  0018E4  90D8               	bcf	status,0,c
 10797  0018E6  320F               	rrcf	___ftmul@f1+2,f,c
 10798  0018E8  320E               	rrcf	___ftmul@f1+1,f,c
 10799  0018EA  320D               	rrcf	___ftmul@f1,f,c
 10800  0018EC  90D8               	bcf	status,0,c
 10801  0018EE  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 10802  0018F0  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 10803  0018F2  3217               	rrcf	___ftmul@f3_as_product,f,c
 10804  0018F4  2E1A               	decfsz	___ftmul@cntr,f,c
 10805  0018F6  D7EE               	goto	i2l3126
 10806  0018F8  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10807  0018FC  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10808  001900  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10809  001904  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 10810  001908  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 10811  00190C  EC4F  F010         	call	___ftpack	;wreg free
 10812  001910  C001  F00D         	movff	?___ftpack,?___ftmul
 10813  001914  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 10814  001918  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 10815  00191C  0012               	return	
 10816  00191E                     __end_of___ftmul:
 10817                           	opt stack 0
 10818                           pclatu	equ	0xFFB
 10819                           pclath	equ	0xFFA
 10820                           tblptru	equ	0xFF8
 10821                           tblptrh	equ	0xFF7
 10822                           tblptrl	equ	0xFF6
 10823                           tablat	equ	0xFF5
 10824                           prodh	equ	0xFF4
 10825                           prodl	equ	0xFF3
 10826                           intcon	equ	0xFF2
 10827                           intcon2	equ	0xFF1
 10828                           intcon3	equ	0xFF0
 10829                           postinc0	equ	0xFEE
 10830                           fsr0h	equ	0xFEA
 10831                           fsr0l	equ	0xFE9
 10832                           wreg	equ	0xFE8
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           postdec2	equ	0xFDD
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function ___ftsub *****************
 10843 ;; Defined at:
 10844 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  f1              3   39[COMRAM] float 
 10847 ;;  f2              3   42[COMRAM] float 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  3   39[COMRAM] float 
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;Total ram usage:        6 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    2
 10866 ;; This function calls:
 10867 ;;		___ftadd
 10868 ;; This function is called by:
 10869 ;;		_exp
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text53
 10874  00282A                     __ptext53:
 10875                           	opt stack 0
 10876  00282A                     ___ftsub:
 10877                           	opt stack 20
 10878                           
 10879                           ;incstack = 0
 10880  00282A  502B               	movf	___ftsub@f2,w,c
 10881  00282C  102C               	iorwf	___ftsub@f2+1,w,c
 10882  00282E  102D               	iorwf	___ftsub@f2+2,w,c
 10883  002830  B4D8               	btfsc	status,2,c
 10884  002832  D006               	goto	i2l3300
 10885  002834  0E00               	movlw	0
 10886  002836  1A2B               	xorwf	___ftsub@f2,f,c
 10887  002838  0E00               	movlw	0
 10888  00283A  1A2C               	xorwf	___ftsub@f2+1,f,c
 10889  00283C  0E80               	movlw	128
 10890  00283E  1A2D               	xorwf	___ftsub@f2+2,f,c
 10891  002840                     i2l3300:
 10892  002840  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 10893  002844  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 10894  002848  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 10895  00284C  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 10896  002850  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 10897  002854  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 10898  002858  EC78  F006         	call	___ftadd	;wreg free
 10899  00285C  C01C  F028         	movff	?___ftadd,?___ftsub
 10900  002860  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 10901  002864  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 10902  002868  0012               	return	
 10903  00286A                     __end_of___ftsub:
 10904                           	opt stack 0
 10905                           pclatu	equ	0xFFB
 10906                           pclath	equ	0xFFA
 10907                           tblptru	equ	0xFF8
 10908                           tblptrh	equ	0xFF7
 10909                           tblptrl	equ	0xFF6
 10910                           tablat	equ	0xFF5
 10911                           prodh	equ	0xFF4
 10912                           prodl	equ	0xFF3
 10913                           intcon	equ	0xFF2
 10914                           intcon2	equ	0xFF1
 10915                           intcon3	equ	0xFF0
 10916                           postinc0	equ	0xFEE
 10917                           fsr0h	equ	0xFEA
 10918                           fsr0l	equ	0xFE9
 10919                           wreg	equ	0xFE8
 10920                           fsr1h	equ	0xFE2
 10921                           fsr1l	equ	0xFE1
 10922                           indf2	equ	0xFDF
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           fsr2h	equ	0xFDA
 10926                           fsr2l	equ	0xFD9
 10927                           status	equ	0xFD8
 10928                           
 10929 ;; *************** function ___ftadd *****************
 10930 ;; Defined at:
 10931 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;  f1              3   27[COMRAM] float 
 10934 ;;  f2              3   30[COMRAM] float 
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  exp1            1   38[COMRAM] unsigned char 
 10937 ;;  exp2            1   37[COMRAM] unsigned char 
 10938 ;;  sign            1   36[COMRAM] unsigned char 
 10939 ;; Return value:  Size  Location     Type
 10940 ;;                  3   27[COMRAM] float 
 10941 ;; Registers used:
 10942 ;;		wreg, status,2, status,0, cstack
 10943 ;; Tracked objects:
 10944 ;;		On entry : 0/0
 10945 ;;		On exit  : 0/0
 10946 ;;		Unchanged: 0/0
 10947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10948 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10949 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10950 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;Total ram usage:       12 bytes
 10953 ;; Hardware stack levels used:    1
 10954 ;; Hardware stack levels required when called:    1
 10955 ;; This function calls:
 10956 ;;		___ftpack
 10957 ;; This function is called by:
 10958 ;;		_dec_to_hex
 10959 ;;		___ftsub
 10960 ;;		_floor
 10961 ;;		_log
 10962 ;;		_eval_poly
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text54
 10967  000CF0                     __ptext54:
 10968                           	opt stack 0
 10969  000CF0                     ___ftadd:
 10970                           	opt stack 20
 10971                           
 10972                           ;incstack = 0
 10973  000CF0  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 10974  000CF4  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10975  000CF6  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10976  000CF8  341D               	rlcf	___ftadd@f1+1,w,c
 10977  000CFA  3622               	rlcf	??___ftadd& (0+255),f,c
 10978  000CFC  E301               	bnc	u216_41
 10979  000CFE  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10980  000D00                     u216_41:
 10981  000D00  5022               	movf	??___ftadd,w,c
 10982  000D02  6E27               	movwf	___ftadd@exp1,c
 10983  000D04  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 10984  000D08  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10985  000D0A  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10986  000D0C  3420               	rlcf	___ftadd@f2+1,w,c
 10987  000D0E  3622               	rlcf	??___ftadd& (0+255),f,c
 10988  000D10  E301               	bnc	u217_41
 10989  000D12  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10990  000D14                     u217_41:
 10991  000D14  5022               	movf	??___ftadd,w,c
 10992  000D16  6E26               	movwf	___ftadd@exp2,c
 10993  000D18  5027               	movf	___ftadd@exp1,w,c
 10994  000D1A  B4D8               	btfsc	status,2,c
 10995  000D1C  D00B               	goto	i2l716
 10996  000D1E  5026               	movf	___ftadd@exp2,w,c
 10997  000D20  5C27               	subwf	___ftadd@exp1,w,c
 10998  000D22  B0D8               	btfsc	status,0,c
 10999  000D24  D00E               	goto	i2l3028
 11000  000D26  5027               	movf	___ftadd@exp1,w,c
 11001  000D28  0800               	sublw	0
 11002  000D2A  2426               	addwf	___ftadd@exp2,w,c
 11003  000D2C  6E22               	movwf	??___ftadd& (0+255),c
 11004  000D2E  0E18               	movlw	24
 11005  000D30  6422               	cpfsgt	??___ftadd,c
 11006  000D32  D007               	goto	i2l3028
 11007  000D34                     i2l716:
 11008  000D34  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 11009  000D38  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 11010  000D3C  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 11011  000D40  0012               	return	
 11012  000D42                     i2l3028:
 11013  000D42  5026               	movf	___ftadd@exp2,w,c
 11014  000D44  B4D8               	btfsc	status,2,c
 11015  000D46  D00B               	goto	i2l720
 11016  000D48  5027               	movf	___ftadd@exp1,w,c
 11017  000D4A  5C26               	subwf	___ftadd@exp2,w,c
 11018  000D4C  B0D8               	btfsc	status,0,c
 11019  000D4E  D00E               	goto	i2l3034
 11020  000D50  5026               	movf	___ftadd@exp2,w,c
 11021  000D52  0800               	sublw	0
 11022  000D54  2427               	addwf	___ftadd@exp1,w,c
 11023  000D56  6E22               	movwf	??___ftadd& (0+255),c
 11024  000D58  0E18               	movlw	24
 11025  000D5A  6422               	cpfsgt	??___ftadd,c
 11026  000D5C  D007               	goto	i2l3034
 11027  000D5E                     i2l720:
 11028  000D5E  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 11029  000D62  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 11030  000D66  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 11031  000D6A  0012               	return	
 11032  000D6C                     i2l3034:
 11033  000D6C  0E06               	movlw	6
 11034  000D6E  6E25               	movwf	___ftadd@sign,c
 11035  000D70  BE1E               	btfsc	___ftadd@f1+2,7,c
 11036  000D72  8E25               	bsf	___ftadd@sign,7,c
 11037  000D74  BE21               	btfsc	___ftadd@f2+2,7,c
 11038  000D76  8C25               	bsf	___ftadd@sign,6,c
 11039  000D78  8E1D               	bsf	___ftadd@f1+1,7,c
 11040  000D7A  0EFF               	movlw	255
 11041  000D7C  161C               	andwf	___ftadd@f1,f,c
 11042  000D7E  0EFF               	movlw	255
 11043  000D80  161D               	andwf	___ftadd@f1+1,f,c
 11044  000D82  0E00               	movlw	0
 11045  000D84  161E               	andwf	___ftadd@f1+2,f,c
 11046  000D86  8E20               	bsf	___ftadd@f2+1,7,c
 11047  000D88  0EFF               	movlw	255
 11048  000D8A  161F               	andwf	___ftadd@f2,f,c
 11049  000D8C  0EFF               	movlw	255
 11050  000D8E  1620               	andwf	___ftadd@f2+1,f,c
 11051  000D90  0E00               	movlw	0
 11052  000D92  1621               	andwf	___ftadd@f2+2,f,c
 11053  000D94  5026               	movf	___ftadd@exp2,w,c
 11054  000D96  5C27               	subwf	___ftadd@exp1,w,c
 11055  000D98  B0D8               	btfsc	status,0,c
 11056  000D9A  D01B               	goto	i2l3060
 11057  000D9C                     i2l3050:
 11058  000D9C  90D8               	bcf	status,0,c
 11059  000D9E  361F               	rlcf	___ftadd@f2,f,c
 11060  000DA0  3620               	rlcf	___ftadd@f2+1,f,c
 11061  000DA2  3621               	rlcf	___ftadd@f2+2,f,c
 11062  000DA4  0626               	decf	___ftadd@exp2,f,c
 11063  000DA6  5027               	movf	___ftadd@exp1,w,c
 11064  000DA8  1826               	xorwf	___ftadd@exp2,w,c
 11065  000DAA  B4D8               	btfsc	status,2,c
 11066  000DAC  D00D               	goto	i2l3058
 11067  000DAE  0625               	decf	___ftadd@sign,f,c
 11068  000DB0  C025  F022         	movff	___ftadd@sign,??___ftadd
 11069  000DB4  0E07               	movlw	7
 11070  000DB6  1622               	andwf	??___ftadd,f,c
 11071  000DB8  B4D8               	btfsc	status,2,c
 11072  000DBA  D006               	goto	i2l3058
 11073  000DBC  D7EF               	goto	i2l3050
 11074  000DBE                     i2l3056:
 11075  000DBE  90D8               	bcf	status,0,c
 11076  000DC0  321E               	rrcf	___ftadd@f1+2,f,c
 11077  000DC2  321D               	rrcf	___ftadd@f1+1,f,c
 11078  000DC4  321C               	rrcf	___ftadd@f1,f,c
 11079  000DC6  2A27               	incf	___ftadd@exp1,f,c
 11080  000DC8                     i2l3058:
 11081  000DC8  5026               	movf	___ftadd@exp2,w,c
 11082  000DCA  1827               	xorwf	___ftadd@exp1,w,c
 11083  000DCC  B4D8               	btfsc	status,2,c
 11084  000DCE  D01F               	goto	i2l731
 11085  000DD0  D7F6               	goto	i2l3056
 11086  000DD2                     i2l3060:
 11087  000DD2  5027               	movf	___ftadd@exp1,w,c
 11088  000DD4  5C26               	subwf	___ftadd@exp2,w,c
 11089  000DD6  B0D8               	btfsc	status,0,c
 11090  000DD8  D01A               	goto	i2l731
 11091  000DDA                     i2l3062:
 11092  000DDA  90D8               	bcf	status,0,c
 11093  000DDC  361C               	rlcf	___ftadd@f1,f,c
 11094  000DDE  361D               	rlcf	___ftadd@f1+1,f,c
 11095  000DE0  361E               	rlcf	___ftadd@f1+2,f,c
 11096  000DE2  0627               	decf	___ftadd@exp1,f,c
 11097  000DE4  5027               	movf	___ftadd@exp1,w,c
 11098  000DE6  1826               	xorwf	___ftadd@exp2,w,c
 11099  000DE8  B4D8               	btfsc	status,2,c
 11100  000DEA  D00D               	goto	i2l3070
 11101  000DEC  0625               	decf	___ftadd@sign,f,c
 11102  000DEE  C025  F022         	movff	___ftadd@sign,??___ftadd
 11103  000DF2  0E07               	movlw	7
 11104  000DF4  1622               	andwf	??___ftadd,f,c
 11105  000DF6  B4D8               	btfsc	status,2,c
 11106  000DF8  D006               	goto	i2l3070
 11107  000DFA  D7EF               	goto	i2l3062
 11108  000DFC                     i2l3068:
 11109  000DFC  90D8               	bcf	status,0,c
 11110  000DFE  3221               	rrcf	___ftadd@f2+2,f,c
 11111  000E00  3220               	rrcf	___ftadd@f2+1,f,c
 11112  000E02  321F               	rrcf	___ftadd@f2,f,c
 11113  000E04  2A26               	incf	___ftadd@exp2,f,c
 11114  000E06                     i2l3070:
 11115  000E06  5026               	movf	___ftadd@exp2,w,c
 11116  000E08  1827               	xorwf	___ftadd@exp1,w,c
 11117  000E0A  A4D8               	btfss	status,2,c
 11118  000E0C  D7F7               	goto	i2l3068
 11119  000E0E                     i2l731:
 11120  000E0E  AE25               	btfss	___ftadd@sign,7,c
 11121  000E10  D00C               	goto	i2l740
 11122  000E12  0EFF               	movlw	255
 11123  000E14  1A1C               	xorwf	___ftadd@f1,f,c
 11124  000E16  0EFF               	movlw	255
 11125  000E18  1A1D               	xorwf	___ftadd@f1+1,f,c
 11126  000E1A  0EFF               	movlw	255
 11127  000E1C  1A1E               	xorwf	___ftadd@f1+2,f,c
 11128  000E1E  0E01               	movlw	1
 11129  000E20  261C               	addwf	___ftadd@f1,f,c
 11130  000E22  0E00               	movlw	0
 11131  000E24  221D               	addwfc	___ftadd@f1+1,f,c
 11132  000E26  0E00               	movlw	0
 11133  000E28  221E               	addwfc	___ftadd@f1+2,f,c
 11134  000E2A                     i2l740:
 11135  000E2A  AC25               	btfss	___ftadd@sign,6,c
 11136  000E2C  D00C               	goto	i2l3076
 11137  000E2E  0EFF               	movlw	255
 11138  000E30  1A1F               	xorwf	___ftadd@f2,f,c
 11139  000E32  0EFF               	movlw	255
 11140  000E34  1A20               	xorwf	___ftadd@f2+1,f,c
 11141  000E36  0EFF               	movlw	255
 11142  000E38  1A21               	xorwf	___ftadd@f2+2,f,c
 11143  000E3A  0E01               	movlw	1
 11144  000E3C  261F               	addwf	___ftadd@f2,f,c
 11145  000E3E  0E00               	movlw	0
 11146  000E40  2220               	addwfc	___ftadd@f2+1,f,c
 11147  000E42  0E00               	movlw	0
 11148  000E44  2221               	addwfc	___ftadd@f2+2,f,c
 11149  000E46                     i2l3076:
 11150  000E46  0E00               	movlw	0
 11151  000E48  6E25               	movwf	___ftadd@sign,c
 11152  000E4A  501C               	movf	___ftadd@f1,w,c
 11153  000E4C  261F               	addwf	___ftadd@f2,f,c
 11154  000E4E  501D               	movf	___ftadd@f1+1,w,c
 11155  000E50  2220               	addwfc	___ftadd@f2+1,f,c
 11156  000E52  501E               	movf	___ftadd@f1+2,w,c
 11157  000E54  2221               	addwfc	___ftadd@f2+2,f,c
 11158  000E56  AE21               	btfss	___ftadd@f2+2,7,c
 11159  000E58  D00E               	goto	i2l3086
 11160  000E5A  0EFF               	movlw	255
 11161  000E5C  1A1F               	xorwf	___ftadd@f2,f,c
 11162  000E5E  0EFF               	movlw	255
 11163  000E60  1A20               	xorwf	___ftadd@f2+1,f,c
 11164  000E62  0EFF               	movlw	255
 11165  000E64  1A21               	xorwf	___ftadd@f2+2,f,c
 11166  000E66  0E01               	movlw	1
 11167  000E68  261F               	addwf	___ftadd@f2,f,c
 11168  000E6A  0E00               	movlw	0
 11169  000E6C  2220               	addwfc	___ftadd@f2+1,f,c
 11170  000E6E  0E00               	movlw	0
 11171  000E70  2221               	addwfc	___ftadd@f2+2,f,c
 11172  000E72  0E01               	movlw	1
 11173  000E74  6E25               	movwf	___ftadd@sign,c
 11174  000E76                     i2l3086:
 11175  000E76  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 11176  000E7A  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11177  000E7E  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11178  000E82  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 11179  000E86  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 11180  000E8A  EC4F  F010         	call	___ftpack	;wreg free
 11181  000E8E  C001  F01C         	movff	?___ftpack,?___ftadd
 11182  000E92  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 11183  000E96  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 11184  000E9A  0012               	return	
 11185  000E9C                     __end_of___ftadd:
 11186                           	opt stack 0
 11187                           pclatu	equ	0xFFB
 11188                           pclath	equ	0xFFA
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           intcon2	equ	0xFF1
 11197                           intcon3	equ	0xFF0
 11198                           postinc0	equ	0xFEE
 11199                           fsr0h	equ	0xFEA
 11200                           fsr0l	equ	0xFE9
 11201                           wreg	equ	0xFE8
 11202                           fsr1h	equ	0xFE2
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function ___ftneg *****************
 11212 ;; Defined at:
 11213 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  f1              3    0[COMRAM] float 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;		None
 11218 ;; Return value:  Size  Location     Type
 11219 ;;                  3    0[COMRAM] float 
 11220 ;; Registers used:
 11221 ;;		wreg, status,2, status,0
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11231 ;;Total ram usage:        3 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; This function calls:
 11234 ;;		Nothing
 11235 ;; This function is called by:
 11236 ;;		_pow
 11237 ;;		_exp
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           	psect	text55
 11242  002A44                     __ptext55:
 11243                           	opt stack 0
 11244  002A44                     ___ftneg:
 11245                           	opt stack 22
 11246                           
 11247                           ;incstack = 0
 11248  002A44  5001               	movf	___ftneg@f1,w,c
 11249  002A46  1002               	iorwf	___ftneg@f1+1,w,c
 11250  002A48  1003               	iorwf	___ftneg@f1+2,w,c
 11251  002A4A  B4D8               	btfsc	status,2,c
 11252  002A4C  D006               	goto	i2l773
 11253  002A4E  0E00               	movlw	0
 11254  002A50  1A01               	xorwf	___ftneg@f1,f,c
 11255  002A52  0E00               	movlw	0
 11256  002A54  1A02               	xorwf	___ftneg@f1+1,f,c
 11257  002A56  0E80               	movlw	128
 11258  002A58  1A03               	xorwf	___ftneg@f1+2,f,c
 11259  002A5A                     i2l773:
 11260  002A5A  C001  F001         	movff	___ftneg@f1,?___ftneg
 11261  002A5E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11262  002A62  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11263  002A66  0012               	return		;funcret
 11264  002A68                     __end_of___ftneg:
 11265                           	opt stack 0
 11266                           pclatu	equ	0xFFB
 11267                           pclath	equ	0xFFA
 11268                           tblptru	equ	0xFF8
 11269                           tblptrh	equ	0xFF7
 11270                           tblptrl	equ	0xFF6
 11271                           tablat	equ	0xFF5
 11272                           prodh	equ	0xFF4
 11273                           prodl	equ	0xFF3
 11274                           intcon	equ	0xFF2
 11275                           intcon2	equ	0xFF1
 11276                           intcon3	equ	0xFF0
 11277                           postinc0	equ	0xFEE
 11278                           fsr0h	equ	0xFEA
 11279                           fsr0l	equ	0xFE9
 11280                           wreg	equ	0xFE8
 11281                           fsr1h	equ	0xFE2
 11282                           fsr1l	equ	0xFE1
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function ___ftdiv *****************
 11291 ;; Defined at:
 11292 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  f1              3    8[COMRAM] float 
 11295 ;;  f2              3   11[COMRAM] float 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  f3              3   18[COMRAM] float 
 11298 ;;  sign            1   22[COMRAM] unsigned char 
 11299 ;;  exp             1   21[COMRAM] unsigned char 
 11300 ;;  cntr            1   17[COMRAM] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  3    8[COMRAM] float 
 11303 ;; Registers used:
 11304 ;;		wreg, status,2, status,0, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11310 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;Total ram usage:       15 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    1
 11317 ;; This function calls:
 11318 ;;		___ftpack
 11319 ;; This function is called by:
 11320 ;;		_exp
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text56
 11325  001AF4                     __ptext56:
 11326                           	opt stack 0
 11327  001AF4                     ___ftdiv:
 11328                           	opt stack 21
 11329                           
 11330                           ;incstack = 0
 11331  001AF4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 11332  001AF8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11333  001AFA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11334  001AFC  340A               	rlcf	___ftdiv@f1+1,w,c
 11335  001AFE  360F               	rlcf	??___ftdiv& (0+255),f,c
 11336  001B00  E301               	bnc	u258_41
 11337  001B02  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11338  001B04                     u258_41:
 11339  001B04  500F               	movf	??___ftdiv,w,c
 11340  001B06  6E16               	movwf	___ftdiv@exp,c
 11341  001B08  5016               	movf	___ftdiv@exp,w,c
 11342  001B0A  A4D8               	btfss	status,2,c
 11343  001B0C  D007               	goto	i2l3256
 11344  001B0E  0E00               	movlw	0
 11345  001B10  6E09               	movwf	?___ftdiv,c
 11346  001B12  0E00               	movlw	0
 11347  001B14  6E0A               	movwf	?___ftdiv+1,c
 11348  001B16  0E00               	movlw	0
 11349  001B18  6E0B               	movwf	?___ftdiv+2,c
 11350  001B1A  0012               	return	
 11351  001B1C                     i2l3256:
 11352  001B1C  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 11353  001B20  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 11354  001B22  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 11355  001B24  340D               	rlcf	___ftdiv@f2+1,w,c
 11356  001B26  360F               	rlcf	??___ftdiv& (0+255),f,c
 11357  001B28  E301               	bnc	u260_41
 11358  001B2A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 11359  001B2C                     u260_41:
 11360  001B2C  500F               	movf	??___ftdiv,w,c
 11361  001B2E  6E17               	movwf	___ftdiv@sign,c
 11362  001B30  5017               	movf	___ftdiv@sign,w,c
 11363  001B32  A4D8               	btfss	status,2,c
 11364  001B34  D007               	goto	i2l3262
 11365  001B36  0E00               	movlw	0
 11366  001B38  6E09               	movwf	?___ftdiv,c
 11367  001B3A  0E00               	movlw	0
 11368  001B3C  6E0A               	movwf	?___ftdiv+1,c
 11369  001B3E  0E00               	movlw	0
 11370  001B40  6E0B               	movwf	?___ftdiv+2,c
 11371  001B42  0012               	return	
 11372  001B44                     i2l3262:
 11373  001B44  0E00               	movlw	0
 11374  001B46  6E13               	movwf	___ftdiv@f3,c
 11375  001B48  0E00               	movlw	0
 11376  001B4A  6E14               	movwf	___ftdiv@f3+1,c
 11377  001B4C  0E00               	movlw	0
 11378  001B4E  6E15               	movwf	___ftdiv@f3+2,c
 11379  001B50  5017               	movf	___ftdiv@sign,w,c
 11380  001B52  0F89               	addlw	137
 11381  001B54  5E16               	subwf	___ftdiv@exp,f,c
 11382  001B56  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 11383  001B5A  500E               	movf	___ftdiv@f2+2,w,c
 11384  001B5C  1A17               	xorwf	___ftdiv@sign,f,c
 11385  001B5E  0E80               	movlw	128
 11386  001B60  1617               	andwf	___ftdiv@sign,f,c
 11387  001B62  8E0A               	bsf	___ftdiv@f1+1,7,c
 11388  001B64  0EFF               	movlw	255
 11389  001B66  1609               	andwf	___ftdiv@f1,f,c
 11390  001B68  0EFF               	movlw	255
 11391  001B6A  160A               	andwf	___ftdiv@f1+1,f,c
 11392  001B6C  0E00               	movlw	0
 11393  001B6E  160B               	andwf	___ftdiv@f1+2,f,c
 11394  001B70  8E0D               	bsf	___ftdiv@f2+1,7,c
 11395  001B72  0EFF               	movlw	255
 11396  001B74  160C               	andwf	___ftdiv@f2,f,c
 11397  001B76  0EFF               	movlw	255
 11398  001B78  160D               	andwf	___ftdiv@f2+1,f,c
 11399  001B7A  0E00               	movlw	0
 11400  001B7C  160E               	andwf	___ftdiv@f2+2,f,c
 11401  001B7E  0E18               	movlw	24
 11402  001B80  6E12               	movwf	___ftdiv@cntr,c
 11403  001B82                     i2l3282:
 11404  001B82  90D8               	bcf	status,0,c
 11405  001B84  3613               	rlcf	___ftdiv@f3,f,c
 11406  001B86  3614               	rlcf	___ftdiv@f3+1,f,c
 11407  001B88  3615               	rlcf	___ftdiv@f3+2,f,c
 11408  001B8A  500C               	movf	___ftdiv@f2,w,c
 11409  001B8C  5C09               	subwf	___ftdiv@f1,w,c
 11410  001B8E  500D               	movf	___ftdiv@f2+1,w,c
 11411  001B90  580A               	subwfb	___ftdiv@f1+1,w,c
 11412  001B92  500E               	movf	___ftdiv@f2+2,w,c
 11413  001B94  580B               	subwfb	___ftdiv@f1+2,w,c
 11414  001B96  A0D8               	btfss	status,0,c
 11415  001B98  D007               	goto	i2l751
 11416  001B9A  500C               	movf	___ftdiv@f2,w,c
 11417  001B9C  5E09               	subwf	___ftdiv@f1,f,c
 11418  001B9E  500D               	movf	___ftdiv@f2+1,w,c
 11419  001BA0  5A0A               	subwfb	___ftdiv@f1+1,f,c
 11420  001BA2  500E               	movf	___ftdiv@f2+2,w,c
 11421  001BA4  5A0B               	subwfb	___ftdiv@f1+2,f,c
 11422  001BA6  8013               	bsf	___ftdiv@f3,0,c
 11423  001BA8                     i2l751:
 11424  001BA8  90D8               	bcf	status,0,c
 11425  001BAA  3609               	rlcf	___ftdiv@f1,f,c
 11426  001BAC  360A               	rlcf	___ftdiv@f1+1,f,c
 11427  001BAE  360B               	rlcf	___ftdiv@f1+2,f,c
 11428  001BB0  2E12               	decfsz	___ftdiv@cntr,f,c
 11429  001BB2  D7E7               	goto	i2l3282
 11430  001BB4  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 11431  001BB8  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11432  001BBC  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11433  001BC0  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 11434  001BC4  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 11435  001BC8  EC4F  F010         	call	___ftpack	;wreg free
 11436  001BCC  C001  F009         	movff	?___ftpack,?___ftdiv
 11437  001BD0  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 11438  001BD4  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 11439  001BD8  0012               	return	
 11440  001BDA                     __end_of___ftdiv:
 11441                           	opt stack 0
 11442                           pclatu	equ	0xFFB
 11443                           pclath	equ	0xFFA
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           intcon3	equ	0xFF0
 11453                           postinc0	equ	0xFEE
 11454                           fsr0h	equ	0xFEA
 11455                           fsr0l	equ	0xFE9
 11456                           wreg	equ	0xFE8
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function ___awtoft *****************
 11467 ;; Defined at:
 11468 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  c               2    8[COMRAM] int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  sign            1   11[COMRAM] unsigned char 
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  3    8[COMRAM] float 
 11475 ;; Registers used:
 11476 ;;		wreg, status,2, status,0, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11482 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;Total ram usage:        4 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:    1
 11489 ;; This function calls:
 11490 ;;		___ftpack
 11491 ;; This function is called by:
 11492 ;;		_dec_to_hex
 11493 ;;		_exp
 11494 ;;		_log
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           	psect	text57
 11499  0028A8                     __ptext57:
 11500                           	opt stack 0
 11501  0028A8                     ___awtoft:
 11502                           	opt stack 21
 11503                           
 11504                           ;incstack = 0
 11505  0028A8  0E00               	movlw	0
 11506  0028AA  6E0C               	movwf	___awtoft@sign,c
 11507  0028AC  AE0A               	btfss	___awtoft@c+1,7,c
 11508  0028AE  D006               	goto	i2l3312
 11509  0028B0  6C09               	negf	___awtoft@c,c
 11510  0028B2  1E0A               	comf	___awtoft@c+1,f,c
 11511  0028B4  B0D8               	btfsc	status,0,c
 11512  0028B6  2A0A               	incf	___awtoft@c+1,f,c
 11513  0028B8  0E01               	movlw	1
 11514  0028BA  6E0C               	movwf	___awtoft@sign,c
 11515  0028BC                     i2l3312:
 11516  0028BC  C009  F001         	movff	___awtoft@c,___ftpack@arg
 11517  0028C0  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 11518  0028C4  6A03               	clrf	___ftpack@arg+2,c
 11519  0028C6  0E8E               	movlw	142
 11520  0028C8  6E04               	movwf	___ftpack@exp,c
 11521  0028CA  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 11522  0028CE  EC4F  F010         	call	___ftpack	;wreg free
 11523  0028D2  C001  F009         	movff	?___ftpack,?___awtoft
 11524  0028D6  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 11525  0028DA  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 11526  0028DE  0012               	return	
 11527  0028E0                     __end_of___awtoft:
 11528                           	opt stack 0
 11529                           pclatu	equ	0xFFB
 11530                           pclath	equ	0xFFA
 11531                           tblptru	equ	0xFF8
 11532                           tblptrh	equ	0xFF7
 11533                           tblptrl	equ	0xFF6
 11534                           tablat	equ	0xFF5
 11535                           prodh	equ	0xFF4
 11536                           prodl	equ	0xFF3
 11537                           intcon	equ	0xFF2
 11538                           intcon2	equ	0xFF1
 11539                           intcon3	equ	0xFF0
 11540                           postinc0	equ	0xFEE
 11541                           fsr0h	equ	0xFEA
 11542                           fsr0l	equ	0xFE9
 11543                           wreg	equ	0xFE8
 11544                           fsr1h	equ	0xFE2
 11545                           fsr1l	equ	0xFE1
 11546                           indf2	equ	0xFDF
 11547                           postinc2	equ	0xFDE
 11548                           postdec2	equ	0xFDD
 11549                           fsr2h	equ	0xFDA
 11550                           fsr2l	equ	0xFD9
 11551                           status	equ	0xFD8
 11552                           
 11553 ;; *************** function ___lltoft *****************
 11554 ;; Defined at:
 11555 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;  c               4    8[COMRAM] unsigned long 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  exp             1   16[COMRAM] unsigned char 
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  3    8[COMRAM] float 
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11569 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;Total ram usage:        9 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    1
 11576 ;; This function calls:
 11577 ;;		___ftpack
 11578 ;; This function is called by:
 11579 ;;		_pow
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text58
 11584  00269C                     __ptext58:
 11585                           	opt stack 0
 11586  00269C                     ___lltoft:
 11587                           	opt stack 22
 11588                           
 11589                           ;incstack = 0
 11590  00269C  0E8E               	movlw	142
 11591  00269E  6E11               	movwf	___lltoft@exp,c
 11592  0026A0  D006               	goto	i2l3438
 11593  0026A2                     i2l3436:
 11594  0026A2  90D8               	bcf	status,0,c
 11595  0026A4  320C               	rrcf	___lltoft@c+3,f,c
 11596  0026A6  320B               	rrcf	___lltoft@c+2,f,c
 11597  0026A8  320A               	rrcf	___lltoft@c+1,f,c
 11598  0026AA  3209               	rrcf	___lltoft@c,f,c
 11599  0026AC  2A11               	incf	___lltoft@exp,f,c
 11600  0026AE                     i2l3438:
 11601  0026AE  0E00               	movlw	0
 11602  0026B0  1409               	andwf	___lltoft@c,w,c
 11603  0026B2  6E0D               	movwf	??___lltoft& (0+255),c
 11604  0026B4  0E00               	movlw	0
 11605  0026B6  140A               	andwf	___lltoft@c+1,w,c
 11606  0026B8  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 11607  0026BA  0E00               	movlw	0
 11608  0026BC  140B               	andwf	___lltoft@c+2,w,c
 11609  0026BE  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 11610  0026C0  0EFF               	movlw	255
 11611  0026C2  140C               	andwf	___lltoft@c+3,w,c
 11612  0026C4  6E10               	movwf	(??___lltoft+3)& (0+255),c
 11613  0026C6  500D               	movf	??___lltoft,w,c
 11614  0026C8  100E               	iorwf	??___lltoft+1,w,c
 11615  0026CA  100F               	iorwf	??___lltoft+2,w,c
 11616  0026CC  1010               	iorwf	??___lltoft+3,w,c
 11617  0026CE  A4D8               	btfss	status,2,c
 11618  0026D0  D7E8               	goto	i2l3436
 11619  0026D2  C009  F001         	movff	___lltoft@c,___ftpack@arg
 11620  0026D6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 11621  0026DA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 11622  0026DE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 11623  0026E2  0E00               	movlw	0
 11624  0026E4  6E05               	movwf	___ftpack@sign,c
 11625  0026E6  EC4F  F010         	call	___ftpack	;wreg free
 11626  0026EA  C001  F009         	movff	?___ftpack,?___lltoft
 11627  0026EE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 11628  0026F2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 11629  0026F6  0012               	return	
 11630  0026F8                     __end_of___lltoft:
 11631                           	opt stack 0
 11632                           pclatu	equ	0xFFB
 11633                           pclath	equ	0xFFA
 11634                           tblptru	equ	0xFF8
 11635                           tblptrh	equ	0xFF7
 11636                           tblptrl	equ	0xFF6
 11637                           tablat	equ	0xFF5
 11638                           prodh	equ	0xFF4
 11639                           prodl	equ	0xFF3
 11640                           intcon	equ	0xFF2
 11641                           intcon2	equ	0xFF1
 11642                           intcon3	equ	0xFF0
 11643                           postinc0	equ	0xFEE
 11644                           fsr0h	equ	0xFEA
 11645                           fsr0l	equ	0xFE9
 11646                           wreg	equ	0xFE8
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           fsr2h	equ	0xFDA
 11653                           fsr2l	equ	0xFD9
 11654                           status	equ	0xFD8
 11655                           
 11656 ;; *************** function ___ftpack *****************
 11657 ;; Defined at:
 11658 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;  arg             3    0[COMRAM] unsigned um
 11661 ;;  exp             1    3[COMRAM] unsigned char 
 11662 ;;  sign            1    4[COMRAM] unsigned char 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  3    0[COMRAM] float 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11674 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;Total ram usage:        8 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; This function calls:
 11681 ;;		Nothing
 11682 ;; This function is called by:
 11683 ;;		___altoft
 11684 ;;		___awtoft
 11685 ;;		___ftadd
 11686 ;;		___ftdiv
 11687 ;;		___ftmul
 11688 ;;		___lltoft
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           	psect	text59
 11693  00209E                     __ptext59:
 11694                           	opt stack 0
 11695  00209E                     ___ftpack:
 11696                           	opt stack 20
 11697                           
 11698                           ;incstack = 0
 11699  00209E  5004               	movf	___ftpack@exp,w,c
 11700  0020A0  B4D8               	btfsc	status,2,c
 11701  0020A2  D005               	goto	i2l2972
 11702  0020A4  5001               	movf	___ftpack@arg,w,c
 11703  0020A6  1002               	iorwf	___ftpack@arg+1,w,c
 11704  0020A8  1003               	iorwf	___ftpack@arg+2,w,c
 11705  0020AA  A4D8               	btfss	status,2,c
 11706  0020AC  D00C               	goto	i2l2978
 11707  0020AE                     i2l2972:
 11708  0020AE  0E00               	movlw	0
 11709  0020B0  6E01               	movwf	?___ftpack,c
 11710  0020B2  0E00               	movlw	0
 11711  0020B4  6E02               	movwf	?___ftpack+1,c
 11712  0020B6  0E00               	movlw	0
 11713  0020B8  6E03               	movwf	?___ftpack+2,c
 11714  0020BA  0012               	return	
 11715  0020BC                     i2l2976:
 11716  0020BC  2A04               	incf	___ftpack@exp,f,c
 11717  0020BE  90D8               	bcf	status,0,c
 11718  0020C0  3203               	rrcf	___ftpack@arg+2,f,c
 11719  0020C2  3202               	rrcf	___ftpack@arg+1,f,c
 11720  0020C4  3201               	rrcf	___ftpack@arg,f,c
 11721  0020C6                     i2l2978:
 11722  0020C6  0E00               	movlw	0
 11723  0020C8  1401               	andwf	___ftpack@arg,w,c
 11724  0020CA  6E06               	movwf	??___ftpack& (0+255),c
 11725  0020CC  0E00               	movlw	0
 11726  0020CE  1402               	andwf	___ftpack@arg+1,w,c
 11727  0020D0  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11728  0020D2  0EFE               	movlw	254
 11729  0020D4  1403               	andwf	___ftpack@arg+2,w,c
 11730  0020D6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11731  0020D8  5006               	movf	??___ftpack,w,c
 11732  0020DA  1007               	iorwf	??___ftpack+1,w,c
 11733  0020DC  1008               	iorwf	??___ftpack+2,w,c
 11734  0020DE  B4D8               	btfsc	status,2,c
 11735  0020E0  D00C               	goto	i2l2984
 11736  0020E2  D7EC               	goto	i2l2976
 11737  0020E4                     i2l2980:
 11738  0020E4  2A04               	incf	___ftpack@exp,f,c
 11739  0020E6  0E01               	movlw	1
 11740  0020E8  2601               	addwf	___ftpack@arg,f,c
 11741  0020EA  0E00               	movlw	0
 11742  0020EC  2202               	addwfc	___ftpack@arg+1,f,c
 11743  0020EE  0E00               	movlw	0
 11744  0020F0  2203               	addwfc	___ftpack@arg+2,f,c
 11745  0020F2  90D8               	bcf	status,0,c
 11746  0020F4  3203               	rrcf	___ftpack@arg+2,f,c
 11747  0020F6  3202               	rrcf	___ftpack@arg+1,f,c
 11748  0020F8  3201               	rrcf	___ftpack@arg,f,c
 11749  0020FA                     i2l2984:
 11750  0020FA  0E00               	movlw	0
 11751  0020FC  1401               	andwf	___ftpack@arg,w,c
 11752  0020FE  6E06               	movwf	??___ftpack& (0+255),c
 11753  002100  0E00               	movlw	0
 11754  002102  1402               	andwf	___ftpack@arg+1,w,c
 11755  002104  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11756  002106  0EFF               	movlw	255
 11757  002108  1403               	andwf	___ftpack@arg+2,w,c
 11758  00210A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11759  00210C  5006               	movf	??___ftpack,w,c
 11760  00210E  1007               	iorwf	??___ftpack+1,w,c
 11761  002110  1008               	iorwf	??___ftpack+2,w,c
 11762  002112  B4D8               	btfsc	status,2,c
 11763  002114  D006               	goto	i2l2988
 11764  002116  D7E6               	goto	i2l2980
 11765  002118                     i2l2986:
 11766  002118  0604               	decf	___ftpack@exp,f,c
 11767  00211A  90D8               	bcf	status,0,c
 11768  00211C  3601               	rlcf	___ftpack@arg,f,c
 11769  00211E  3602               	rlcf	___ftpack@arg+1,f,c
 11770  002120  3603               	rlcf	___ftpack@arg+2,f,c
 11771  002122                     i2l2988:
 11772  002122  BE02               	btfsc	___ftpack@arg+1,7,c
 11773  002124  D003               	goto	i2l693
 11774  002126  0E02               	movlw	2
 11775  002128  6004               	cpfslt	___ftpack@exp,c
 11776  00212A  D7F6               	goto	i2l2986
 11777  00212C                     i2l693:
 11778  00212C  A004               	btfss	___ftpack@exp,0,c
 11779  00212E  9E02               	bcf	___ftpack@arg+1,7,c
 11780  002130  90D8               	bcf	status,0,c
 11781  002132  3204               	rrcf	___ftpack@exp,f,c
 11782  002134  5004               	movf	___ftpack@exp,w,c
 11783  002136  1203               	iorwf	___ftpack@arg+2,f,c
 11784  002138  5005               	movf	___ftpack@sign,w,c
 11785  00213A  A4D8               	btfss	status,2,c
 11786  00213C  8E03               	bsf	___ftpack@arg+2,7,c
 11787  00213E  C001  F001         	movff	___ftpack@arg,?___ftpack
 11788  002142  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11789  002146  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11790  00214A  0012               	return	
 11791  00214C                     __end_of___ftpack:
 11792                           	opt stack 0
 11793                           pclatu	equ	0xFFB
 11794                           pclath	equ	0xFFA
 11795                           tblptru	equ	0xFF8
 11796                           tblptrh	equ	0xFF7
 11797                           tblptrl	equ	0xFF6
 11798                           tablat	equ	0xFF5
 11799                           prodh	equ	0xFF4
 11800                           prodl	equ	0xFF3
 11801                           intcon	equ	0xFF2
 11802                           intcon2	equ	0xFF1
 11803                           intcon3	equ	0xFF0
 11804                           postinc0	equ	0xFEE
 11805                           fsr0h	equ	0xFEA
 11806                           fsr0l	equ	0xFE9
 11807                           wreg	equ	0xFE8
 11808                           fsr1h	equ	0xFE2
 11809                           fsr1l	equ	0xFE1
 11810                           indf2	equ	0xFDF
 11811                           postinc2	equ	0xFDE
 11812                           postdec2	equ	0xFDD
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function ___awdiv *****************
 11818 ;; Defined at:
 11819 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  dividend        2    0[COMRAM] int 
 11822 ;;  divisor         2    2[COMRAM] int 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  quotient        2    6[COMRAM] int 
 11825 ;;  sign            1    5[COMRAM] unsigned char 
 11826 ;;  counter         1    4[COMRAM] unsigned char 
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  2    0[COMRAM] int 
 11829 ;; Registers used:
 11830 ;;		wreg, status,2, status,0
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11839 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11840 ;;Total ram usage:        8 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_dec_to_hex
 11846 ;;		_servo_rotate1
 11847 ;;		_servo_rotate2
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text60
 11852  00239E                     __ptext60:
 11853                           	opt stack 0
 11854  00239E                     ___awdiv:
 11855                           	opt stack 24
 11856                           
 11857                           ;incstack = 0
 11858  00239E  0E00               	movlw	0
 11859  0023A0  6E06               	movwf	___awdiv@sign,c
 11860  0023A2  AE04               	btfss	___awdiv@divisor+1,7,c
 11861  0023A4  D006               	goto	i2l3784
 11862  0023A6  6C03               	negf	___awdiv@divisor,c
 11863  0023A8  1E04               	comf	___awdiv@divisor+1,f,c
 11864  0023AA  B0D8               	btfsc	status,0,c
 11865  0023AC  2A04               	incf	___awdiv@divisor+1,f,c
 11866  0023AE  0E01               	movlw	1
 11867  0023B0  6E06               	movwf	___awdiv@sign,c
 11868  0023B2                     i2l3784:
 11869  0023B2  AE02               	btfss	___awdiv@dividend+1,7,c
 11870  0023B4  D006               	goto	i2l3790
 11871  0023B6  6C01               	negf	___awdiv@dividend,c
 11872  0023B8  1E02               	comf	___awdiv@dividend+1,f,c
 11873  0023BA  B0D8               	btfsc	status,0,c
 11874  0023BC  2A02               	incf	___awdiv@dividend+1,f,c
 11875  0023BE  0E01               	movlw	1
 11876  0023C0  1A06               	xorwf	___awdiv@sign,f,c
 11877  0023C2                     i2l3790:
 11878  0023C2  0E00               	movlw	0
 11879  0023C4  6E08               	movwf	___awdiv@quotient+1,c
 11880  0023C6  0E00               	movlw	0
 11881  0023C8  6E07               	movwf	___awdiv@quotient,c
 11882  0023CA  5003               	movf	___awdiv@divisor,w,c
 11883  0023CC  1004               	iorwf	___awdiv@divisor+1,w,c
 11884  0023CE  B4D8               	btfsc	status,2,c
 11885  0023D0  D01C               	goto	i2l3812
 11886  0023D2  0E01               	movlw	1
 11887  0023D4  6E05               	movwf	___awdiv@counter,c
 11888  0023D6  D004               	goto	i2l3798
 11889  0023D8                     i2l3796:
 11890  0023D8  90D8               	bcf	status,0,c
 11891  0023DA  3603               	rlcf	___awdiv@divisor,f,c
 11892  0023DC  3604               	rlcf	___awdiv@divisor+1,f,c
 11893  0023DE  2A05               	incf	___awdiv@counter,f,c
 11894  0023E0                     i2l3798:
 11895  0023E0  AE04               	btfss	___awdiv@divisor+1,7,c
 11896  0023E2  D7FA               	goto	i2l3796
 11897  0023E4                     i2l3800:
 11898  0023E4  90D8               	bcf	status,0,c
 11899  0023E6  3607               	rlcf	___awdiv@quotient,f,c
 11900  0023E8  3608               	rlcf	___awdiv@quotient+1,f,c
 11901  0023EA  5003               	movf	___awdiv@divisor,w,c
 11902  0023EC  5C01               	subwf	___awdiv@dividend,w,c
 11903  0023EE  5004               	movf	___awdiv@divisor+1,w,c
 11904  0023F0  5802               	subwfb	___awdiv@dividend+1,w,c
 11905  0023F2  A0D8               	btfss	status,0,c
 11906  0023F4  D005               	goto	i2l3808
 11907  0023F6  5003               	movf	___awdiv@divisor,w,c
 11908  0023F8  5E01               	subwf	___awdiv@dividend,f,c
 11909  0023FA  5004               	movf	___awdiv@divisor+1,w,c
 11910  0023FC  5A02               	subwfb	___awdiv@dividend+1,f,c
 11911  0023FE  8007               	bsf	___awdiv@quotient,0,c
 11912  002400                     i2l3808:
 11913  002400  90D8               	bcf	status,0,c
 11914  002402  3204               	rrcf	___awdiv@divisor+1,f,c
 11915  002404  3203               	rrcf	___awdiv@divisor,f,c
 11916  002406  2E05               	decfsz	___awdiv@counter,f,c
 11917  002408  D7ED               	goto	i2l3800
 11918  00240A                     i2l3812:
 11919  00240A  5006               	movf	___awdiv@sign,w,c
 11920  00240C  B4D8               	btfsc	status,2,c
 11921  00240E  D004               	goto	i2l3816
 11922  002410  6C07               	negf	___awdiv@quotient,c
 11923  002412  1E08               	comf	___awdiv@quotient+1,f,c
 11924  002414  B0D8               	btfsc	status,0,c
 11925  002416  2A08               	incf	___awdiv@quotient+1,f,c
 11926  002418                     i2l3816:
 11927  002418  C007  F001         	movff	___awdiv@quotient,?___awdiv
 11928  00241C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 11929  002420  0012               	return	
 11930  002422                     __end_of___awdiv:
 11931                           	opt stack 0
 11932                           pclatu	equ	0xFFB
 11933                           pclath	equ	0xFFA
 11934                           tblptru	equ	0xFF8
 11935                           tblptrh	equ	0xFF7
 11936                           tblptrl	equ	0xFF6
 11937                           tablat	equ	0xFF5
 11938                           prodh	equ	0xFF4
 11939                           prodl	equ	0xFF3
 11940                           intcon	equ	0xFF2
 11941                           intcon2	equ	0xFF1
 11942                           intcon3	equ	0xFF0
 11943                           postinc0	equ	0xFEE
 11944                           fsr0h	equ	0xFEA
 11945                           fsr0l	equ	0xFE9
 11946                           wreg	equ	0xFE8
 11947                           fsr1h	equ	0xFE2
 11948                           fsr1l	equ	0xFE1
 11949                           indf2	equ	0xFDF
 11950                           postinc2	equ	0xFDE
 11951                           postdec2	equ	0xFDD
 11952                           fsr2h	equ	0xFDA
 11953                           fsr2l	equ	0xFD9
 11954                           status	equ	0xFD8
 11955                           
 11956 ;; *************** function _I2C_ColorSens_ClearInt *****************
 11957 ;; Defined at:
 11958 ;;		line 92 in file "I2C.c"
 11959 ;; Parameters:    Size  Location     Type
 11960 ;;		None
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;		None
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  1    wreg      void 
 11965 ;; Registers used:
 11966 ;;		wreg, status,2, status,0, cstack
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11976 ;;Total ram usage:        0 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; Hardware stack levels required when called:    2
 11979 ;; This function calls:
 11980 ;;		i2_I2C_Master_Start
 11981 ;;		i2_I2C_Master_Stop
 11982 ;;		i2_I2C_Master_Write
 11983 ;; This function is called by:
 11984 ;;		_isr
 11985 ;; This function uses a non-reentrant model
 11986 ;;
 11987                           
 11988                           	psect	text61
 11989  00297A                     __ptext61:
 11990                           	opt stack 0
 11991  00297A                     _I2C_ColorSens_ClearInt:
 11992                           	opt stack 23
 11993                           
 11994                           ;I2C.c: 93: I2C_Master_Start();
 11995                           
 11996                           ;incstack = 0
 11997  00297A  ECA5  F015         	call	i2_I2C_Master_Start	;wreg free
 11998                           
 11999                           ;I2C.c: 94: I2C_Master_Write(0b01010010);
 12000  00297E  0E00               	movlw	0
 12001  002980  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12002  002982  0E52               	movlw	82
 12003  002984  6E02               	movwf	i2I2C_Master_Write@d,c
 12004  002986  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
 12005                           
 12006                           ;I2C.c: 95: I2C_Master_Write(0b11100110);
 12007  00298A  0E00               	movlw	0
 12008  00298C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12009  00298E  0EE6               	movlw	230
 12010  002990  6E02               	movwf	i2I2C_Master_Write@d,c
 12011  002992  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
 12012                           
 12013                           ;I2C.c: 96: I2C_Master_Write(0b11100110);
 12014  002996  0E00               	movlw	0
 12015  002998  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12016  00299A  0EE6               	movlw	230
 12017  00299C  6E02               	movwf	i2I2C_Master_Write@d,c
 12018  00299E  EC94  F015         	call	i2_I2C_Master_Write	;wreg free
 12019                           
 12020                           ;I2C.c: 97: I2C_Master_Stop();
 12021  0029A2  ECA1  F015         	call	i2_I2C_Master_Stop	;wreg free
 12022  0029A6  0012               	return		;funcret
 12023  0029A8                     __end_of_I2C_ColorSens_ClearInt:
 12024                           	opt stack 0
 12025                           pclatu	equ	0xFFB
 12026                           pclath	equ	0xFFA
 12027                           tblptru	equ	0xFF8
 12028                           tblptrh	equ	0xFF7
 12029                           tblptrl	equ	0xFF6
 12030                           tablat	equ	0xFF5
 12031                           prodh	equ	0xFF4
 12032                           prodl	equ	0xFF3
 12033                           intcon	equ	0xFF2
 12034                           intcon2	equ	0xFF1
 12035                           intcon3	equ	0xFF0
 12036                           postinc0	equ	0xFEE
 12037                           fsr0h	equ	0xFEA
 12038                           fsr0l	equ	0xFE9
 12039                           wreg	equ	0xFE8
 12040                           fsr1h	equ	0xFE2
 12041                           fsr1l	equ	0xFE1
 12042                           indf2	equ	0xFDF
 12043                           postinc2	equ	0xFDE
 12044                           postdec2	equ	0xFDD
 12045                           fsr2h	equ	0xFDA
 12046                           fsr2l	equ	0xFD9
 12047                           status	equ	0xFD8
 12048                           
 12049 ;; *************** function i2_I2C_Master_Write *****************
 12050 ;; Defined at:
 12051 ;;		line 48 in file "I2C.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;  d               2    1[COMRAM] unsigned int 
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;		None
 12056 ;; Return value:  Size  Location     Type
 12057 ;;                  1    wreg      void 
 12058 ;; Registers used:
 12059 ;;		wreg, status,2, status,0, cstack
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;Total ram usage:        2 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:    1
 12072 ;; This function calls:
 12073 ;;		i2_I2C_Master_Wait
 12074 ;; This function is called by:
 12075 ;;		_I2C_ColorSens_ClearInt
 12076 ;;		_read_time
 12077 ;;		i2_I2C_ColorSens_Init
 12078 ;;		i2_read_colorsensor
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           	psect	text62
 12083  002B28                     __ptext62:
 12084                           	opt stack 0
 12085  002B28                     i2_I2C_Master_Write:
 12086                           	opt stack 23
 12087                           
 12088                           ;I2C.c: 50: I2C_Master_Wait();
 12089                           
 12090                           ;incstack = 0
 12091  002B28  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
 12092                           
 12093                           ;I2C.c: 51: SSPBUF = d;
 12094  002B2C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 12095  002B30  0012               	return		;funcret
 12096  002B32                     __end_ofi2_I2C_Master_Write:
 12097                           	opt stack 0
 12098                           pclatu	equ	0xFFB
 12099                           pclath	equ	0xFFA
 12100                           tblptru	equ	0xFF8
 12101                           tblptrh	equ	0xFF7
 12102                           tblptrl	equ	0xFF6
 12103                           tablat	equ	0xFF5
 12104                           prodh	equ	0xFF4
 12105                           prodl	equ	0xFF3
 12106                           intcon	equ	0xFF2
 12107                           intcon2	equ	0xFF1
 12108                           intcon3	equ	0xFF0
 12109                           postinc0	equ	0xFEE
 12110                           fsr0h	equ	0xFEA
 12111                           fsr0l	equ	0xFE9
 12112                           wreg	equ	0xFE8
 12113                           fsr1h	equ	0xFE2
 12114                           fsr1l	equ	0xFE1
 12115                           indf2	equ	0xFDF
 12116                           postinc2	equ	0xFDE
 12117                           postdec2	equ	0xFDD
 12118                           fsr2h	equ	0xFDA
 12119                           fsr2l	equ	0xFD9
 12120                           status	equ	0xFD8
 12121                           
 12122 ;; *************** function i2_I2C_Master_Stop *****************
 12123 ;; Defined at:
 12124 ;;		line 42 in file "I2C.c"
 12125 ;; Parameters:    Size  Location     Type
 12126 ;;		None
 12127 ;; Auto vars:     Size  Location     Type
 12128 ;;		None
 12129 ;; Return value:  Size  Location     Type
 12130 ;;                  1    wreg      void 
 12131 ;; Registers used:
 12132 ;;		wreg, status,2, status,0, cstack
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;Total ram usage:        0 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    1
 12145 ;; This function calls:
 12146 ;;		i2_I2C_Master_Wait
 12147 ;; This function is called by:
 12148 ;;		_I2C_ColorSens_ClearInt
 12149 ;;		_read_time
 12150 ;;		i2_I2C_ColorSens_Init
 12151 ;;		i2_read_colorsensor
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           	psect	text63
 12156  002B42                     __ptext63:
 12157                           	opt stack 0
 12158  002B42                     i2_I2C_Master_Stop:
 12159                           	opt stack 23
 12160                           
 12161                           ;I2C.c: 44: I2C_Master_Wait();
 12162                           
 12163                           ;incstack = 0
 12164  002B42  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
 12165                           
 12166                           ;I2C.c: 45: PEN = 1;
 12167  002B46  84C5               	bsf	4037,2,c	;volatile
 12168  002B48  0012               	return		;funcret
 12169  002B4A                     __end_ofi2_I2C_Master_Stop:
 12170                           	opt stack 0
 12171                           pclatu	equ	0xFFB
 12172                           pclath	equ	0xFFA
 12173                           tblptru	equ	0xFF8
 12174                           tblptrh	equ	0xFF7
 12175                           tblptrl	equ	0xFF6
 12176                           tablat	equ	0xFF5
 12177                           prodh	equ	0xFF4
 12178                           prodl	equ	0xFF3
 12179                           intcon	equ	0xFF2
 12180                           intcon2	equ	0xFF1
 12181                           intcon3	equ	0xFF0
 12182                           postinc0	equ	0xFEE
 12183                           fsr0h	equ	0xFEA
 12184                           fsr0l	equ	0xFE9
 12185                           wreg	equ	0xFE8
 12186                           fsr1h	equ	0xFE2
 12187                           fsr1l	equ	0xFE1
 12188                           indf2	equ	0xFDF
 12189                           postinc2	equ	0xFDE
 12190                           postdec2	equ	0xFDD
 12191                           fsr2h	equ	0xFDA
 12192                           fsr2l	equ	0xFD9
 12193                           status	equ	0xFD8
 12194                           
 12195 ;; *************** function i2_I2C_Master_Start *****************
 12196 ;; Defined at:
 12197 ;;		line 30 in file "I2C.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;		None
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;		None
 12202 ;; Return value:  Size  Location     Type
 12203 ;;                  1    wreg      void 
 12204 ;; Registers used:
 12205 ;;		wreg, status,2, status,0, cstack
 12206 ;; Tracked objects:
 12207 ;;		On entry : 0/0
 12208 ;;		On exit  : 0/0
 12209 ;;		Unchanged: 0/0
 12210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;Total ram usage:        0 bytes
 12216 ;; Hardware stack levels used:    1
 12217 ;; Hardware stack levels required when called:    1
 12218 ;; This function calls:
 12219 ;;		i2_I2C_Master_Wait
 12220 ;; This function is called by:
 12221 ;;		_I2C_ColorSens_ClearInt
 12222 ;;		_read_time
 12223 ;;		i2_I2C_ColorSens_Init
 12224 ;;		i2_read_colorsensor
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           	psect	text64
 12229  002B4A                     __ptext64:
 12230                           	opt stack 0
 12231  002B4A                     i2_I2C_Master_Start:
 12232                           	opt stack 23
 12233                           
 12234                           ;I2C.c: 32: I2C_Master_Wait();
 12235                           
 12236                           ;incstack = 0
 12237  002B4A  EC6A  F015         	call	i2_I2C_Master_Wait	;wreg free
 12238                           
 12239                           ;I2C.c: 33: SEN = 1;
 12240  002B4E  80C5               	bsf	4037,0,c	;volatile
 12241  002B50  0012               	return		;funcret
 12242  002B52                     __end_ofi2_I2C_Master_Start:
 12243                           	opt stack 0
 12244                           pclatu	equ	0xFFB
 12245                           pclath	equ	0xFFA
 12246                           tblptru	equ	0xFF8
 12247                           tblptrh	equ	0xFF7
 12248                           tblptrl	equ	0xFF6
 12249                           tablat	equ	0xFF5
 12250                           prodh	equ	0xFF4
 12251                           prodl	equ	0xFF3
 12252                           intcon	equ	0xFF2
 12253                           intcon2	equ	0xFF1
 12254                           intcon3	equ	0xFF0
 12255                           postinc0	equ	0xFEE
 12256                           fsr0h	equ	0xFEA
 12257                           fsr0l	equ	0xFE9
 12258                           wreg	equ	0xFE8
 12259                           fsr1h	equ	0xFE2
 12260                           fsr1l	equ	0xFE1
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function i2_I2C_Master_Wait *****************
 12269 ;; Defined at:
 12270 ;;		line 25 in file "I2C.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, status,2, status,0
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;Total ram usage:        1 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; This function calls:
 12291 ;;		Nothing
 12292 ;; This function is called by:
 12293 ;;		i2_I2C_Master_Start
 12294 ;;		i2_I2C_Master_Stop
 12295 ;;		i2_I2C_Master_Write
 12296 ;;		i2_I2C_Master_Read
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text65
 12301  002AD4                     __ptext65:
 12302                           	opt stack 0
 12303  002AD4                     i2_I2C_Master_Wait:
 12304                           	opt stack 23
 12305  002AD4                     i2l34:
 12306  002AD4  B4C7               	btfsc	4039,2,c	;volatile
 12307  002AD6  D7FE               	goto	i2l34
 12308  002AD8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 12309  002ADC  0E1F               	movlw	31
 12310  002ADE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 12311  002AE0  B4D8               	btfsc	status,2,c
 12312  002AE2  0012               	return	
 12313  002AE4  D7F7               	goto	i2l34
 12314  002AE6                     __end_ofi2_I2C_Master_Wait:
 12315                           	opt stack 0
 12316                           pclatu	equ	0xFFB
 12317                           pclath	equ	0xFFA
 12318                           tblptru	equ	0xFF8
 12319                           tblptrh	equ	0xFF7
 12320                           tblptrl	equ	0xFF6
 12321                           tablat	equ	0xFF5
 12322                           prodh	equ	0xFF4
 12323                           prodl	equ	0xFF3
 12324                           intcon	equ	0xFF2
 12325                           intcon2	equ	0xFF1
 12326                           intcon3	equ	0xFF0
 12327                           postinc0	equ	0xFEE
 12328                           fsr0h	equ	0xFEA
 12329                           fsr0l	equ	0xFE9
 12330                           wreg	equ	0xFE8
 12331                           fsr1h	equ	0xFE2
 12332                           fsr1l	equ	0xFE1
 12333                           indf2	equ	0xFDF
 12334                           postinc2	equ	0xFDE
 12335                           postdec2	equ	0xFDD
 12336                           fsr2h	equ	0xFDA
 12337                           fsr2l	equ	0xFD9
 12338                           status	equ	0xFD8
 12339                           pclatu	equ	0xFFB
 12340                           pclath	equ	0xFFA
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           intcon2	equ	0xFF1
 12349                           intcon3	equ	0xFF0
 12350                           postinc0	equ	0xFEE
 12351                           fsr0h	equ	0xFEA
 12352                           fsr0l	equ	0xFE9
 12353                           wreg	equ	0xFE8
 12354                           fsr1h	equ	0xFE2
 12355                           fsr1l	equ	0xFE1
 12356                           indf2	equ	0xFDF
 12357                           postinc2	equ	0xFDE
 12358                           postdec2	equ	0xFDD
 12359                           fsr2h	equ	0xFDA
 12360                           fsr2l	equ	0xFD9
 12361                           status	equ	0xFD8
 12362                           
 12363                           	psect	rparam
 12364  0000                     pclatu	equ	0xFFB
 12365                           pclath	equ	0xFFA
 12366                           tblptru	equ	0xFF8
 12367                           tblptrh	equ	0xFF7
 12368                           tblptrl	equ	0xFF6
 12369                           tablat	equ	0xFF5
 12370                           prodh	equ	0xFF4
 12371                           prodl	equ	0xFF3
 12372                           intcon	equ	0xFF2
 12373                           intcon2	equ	0xFF1
 12374                           intcon3	equ	0xFF0
 12375                           postinc0	equ	0xFEE
 12376                           fsr0h	equ	0xFEA
 12377                           fsr0l	equ	0xFE9
 12378                           wreg	equ	0xFE8
 12379                           fsr1h	equ	0xFE2
 12380                           fsr1l	equ	0xFE1
 12381                           indf2	equ	0xFDF
 12382                           postinc2	equ	0xFDE
 12383                           postdec2	equ	0xFDD
 12384                           fsr2h	equ	0xFDA
 12385                           fsr2l	equ	0xFD9
 12386                           status	equ	0xFD8
 12387                           
 12388                           	psect	temp
 12389  00007E                     btemp:
 12390                           	opt stack 0
 12391  00007E                     	ds	1
 12392  0000                     int$flags	set	btemp
 12393                           pclatu	equ	0xFFB
 12394                           pclath	equ	0xFFA
 12395                           tblptru	equ	0xFF8
 12396                           tblptrh	equ	0xFF7
 12397                           tblptrl	equ	0xFF6
 12398                           tablat	equ	0xFF5
 12399                           prodh	equ	0xFF4
 12400                           prodl	equ	0xFF3
 12401                           intcon	equ	0xFF2
 12402                           intcon2	equ	0xFF1
 12403                           intcon3	equ	0xFF0
 12404                           postinc0	equ	0xFEE
 12405                           fsr0h	equ	0xFEA
 12406                           fsr0l	equ	0xFE9
 12407                           wreg	equ	0xFE8
 12408                           fsr1h	equ	0xFE2
 12409                           fsr1l	equ	0xFE1
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8


Data Sizes:
    Strings     502
    Constant    99
    Data        2
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     42     112
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_28(CODE[15]), STR_27(CODE[16]), STR_26(CODE[28]), STR_25(CODE[25]), 
		 -> STR_24(CODE[24]), STR_23(CODE[23]), STR_22(CODE[18]), STR_21(CODE[23]), 
		 -> STR_20(CODE[10]), STR_19(CODE[18]), STR_18(CODE[18]), STR_17(CODE[18]), 
		 -> STR_16(CODE[18]), STR_15(CODE[18]), STR_14(CODE[18]), STR_13(CODE[18]), 
		 -> STR_12(CODE[18]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[23]), 
		 -> STR_8(CODE[23]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[7]), 
		 -> STR_4(CODE[24]), STR_3(CODE[24]), STR_2(CODE[24]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2_I2C_ColorSens_Init->i2_I2C_Master_Write
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _I2C_ColorSens_ClearInt->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49668
                                             10 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    6028
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    6028
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    8405
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    2377
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    6028
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    8150
                                             40 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    6028
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6452
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5833
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1204
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1978
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1978
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 27    27      0   77093
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
             _I2C_ColorSens_ClearInt
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
               i2_I2C_ColorSens_Init
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0    1103
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2355
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) i2_I2C_ColorSens_Init                                 1     1      0     724
                                              3 COMRAM     1     1      0
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     289
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     837
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69991
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58195
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19010
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31578
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8387
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _I2C_ColorSens_ClearInt                               0     0      0     724
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     724
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _I2C_ColorSens_ClearInt
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   i2_I2C_ColorSens_Init
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      70       5       87.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F9      34        0.0%
DATA                 0      0      F9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 14 05:01:02 2017

                   ___altoft@exp 003F               i2_I2C_Master_Start 2B4A  
             i2_I2C_Master_Write 2B28                    ___altoft@sign 0040  
                             l34 2AC0                   ?_emergencystop 0001  
                   ___awdiv@sign 0006              ___wmul@multiplicand 00D6  
             i2___lwdiv@dividend 0001                      __CFG_BORV$3 000000  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                    __CFG_OSC$HS 000000                     ___ftadd@exp1 0027  
                   ___ftadd@exp2 0026                     ___ftadd@sign 0025  
                            l353 2A88                              l396 1408  
                            l823 208C                              l876 2490  
                            l886 25D2                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                              _PEN 007E2A  
                   __CFG_CPD$OFF 000000                              _SEN 007E28  
                            _PSA 007EAB              ?i2_I2C_Master_Start 0001  
            ?i2_I2C_Master_Write 0002                              _exp 0B08  
                            _log 140A                              _isr 0008  
                            _pow 1030                     ___awmod@sign 00D9  
                            prod 000FF3                              wreg 000FE8  
 __end_of_I2C_ColorSens_ClearInt 29A8                     ?_bottle_time 0001  
                   __CFG_LVP$OFF 000000                     ___ftdiv@cntr 0012  
                   ___ftdiv@sign 0017                     __CFG_WDT$OFF 000000  
                           l5004 1F64                             l5012 1F86  
                           l3406 2972                             l5014 1FAE  
                           l5040 1CFE                             l5036 1CF4  
                           l5062 0ED4                             l5046 1D1E  
                           l5150 1A8A                             l5080 0F8E  
                           l5056 0E9E                             l5152 1A90  
                           l5074 0F50                             l5154 1A96  
                           l5146 1A7E                             l5162 1AA8  
                           l5068 0F12                             l5092 0FEC  
                           l5156 1A9C                             l5148 1A84  
                           l5164 1AD6                             l5086 0FCC  
                           l3582 1330                             l5158 1AA2  
                           l3840 219E                             l3832 2178  
                           l3592 138A                             l4802 2482  
                           l4810 258E                             l3578 131A  
                           l3852 21E4                             l3844 21C2  
                           l3836 218C                             l3828 2168  
                           l4812 259A                             l3596 13A0  
                           l3588 1368                             l3862 2010  
                           l3838 2198                             l4814 25A0  
                           l3864 2020                             l3848 21D0  
                           l4920 0682                             l4832 0428  
                           l3874 207A                             l3866 2026  
                           l4818 25C4                             l4914 0640  
                           l4906 0606                             l4834 043A  
                           l4932 06B8                             l4908 061E  
                           l4852 04EC                             l4860 0532  
                           l4844 0474                             l4828 0414  
                           ?_exp 0049                             ?_log 0034  
                           l4790 2440                             l4774 29C8  
                           l4934 06C4                             l4942 06F2  
                           l4926 069C                             l4918 0678  
                           l4854 04F2                             l4838 0444  
                           l4792 244C                             l4944 06F8  
                           l4952 0792                             l4872 0572  
                           l4794 2452                             l4946 0744  
                           l4954 07AA                             l4938 06DE  
                           l4890 05CA                             l4858 04FA  
                           l4956 07B2                             l4892 05D0  
                           l4876 058E                             ?_isr 0001  
                           l4878 0594                             l4958 07BE  
                           l4992 1F24                             l4998 1F44  
                           ?_pow 0052               i2_read_colorsensor 191E  
                           STR_1 FE55                             STR_2 FE3D  
                           STR_3 FE55                             STR_4 FE3D  
                           STR_5 FFF7                             STR_6 FFD5  
                           STR_7 FFE3                             STR_8 FEB3  
                           STR_9 FECA                             _T0CS 007EAD  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u2760 2970  
                           u4517 1AE4                             u3575 266C  
                           u4527 2752                             u4537 278E  
                           u4547 25FC                             _RCEN 007E2B  
                           u4557 2604                             u4567 262E  
                           u4577 2636                             i2l34 2AD4  
                           u4587 11E0                             _TMR0 000FD6  
                           _RSEN 007E29                             _main 1A0C  
                   ___ftpack@arg 0001                             _keys FDA5  
                   ___ftpack@exp 0004                             _time 009E  
                           fsr0h 000FEA                             fsr1h 000FE2  
             i2___lwdiv@quotient 0005                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 007E                             exp@x 0049  
                           log@x 0034                             isr@i 0073  
           ??i2_I2C_Master_Start 0002             ??i2_I2C_Master_Write 0004  
                           pow@x 0052                             pow@y 0055  
                           prodh 000FF4                             prodl 000FF3  
                           start 000E              ?i2_read_colorsensor 0001  
                  __CFG_IESO$OFF 000000                  __end_ofi2_putch 2B12  
                  __CFG_MCLRE$ON 000000                     ___ftmul@cntr 001A  
                   ___param_bank 000000                     ___ftmul@sign 001B  
                    i2_lcdNibble 279A                    ?_bottle_count 0001  
                   ___fttol@exp1 0036                            ??_exp 004C  
                          ??_log 0037                     ___fttol@lval 0032  
                          ??_isr 00C4                            ??_pow 0058  
                  _eskacap_count 00AD                 ?_I2C_Master_Init 00E1  
               ?_I2C_Master_Read 0001                 ?_I2C_Master_Wait 0001  
               ?_I2C_Master_Stop 0001                            ?_main 0001  
                          _ACKEN 007E2C                            _ACKDT 007E2D  
                __end_of___awdiv 2422                  __end_of___ftadd 0E9C  
                          STR_10 FFA5                            STR_11 FF94  
                          STR_20 FFED                            STR_12 FEF3  
                          STR_13 FF17                            STR_21 FE9C  
                          STR_14 FF05                            STR_22 FEE1  
                          STR_15 FF29                            STR_23 FE85  
                          STR_16 FF3B                            STR_24 FE6D  
                          STR_17 FF5F                            STR_25 FE24  
                          STR_18 FF4D                            STR_26 FE08  
                          STR_27 FFB6                            STR_19 FF71  
                          STR_28 FFC6                  __end_of___awmod 21EE  
                          STR_29 FF83                  __end_of___ftdiv 1BDA  
                __end_of___ftneg 2A68                  __end_of___lldiv 209E  
                __end_of___ftmul 191E                  ___awdiv@divisor 0003  
                __end_of___ftsub 286A                  __end_of___fttol 182A  
                          _T0PS0 007EA8                            _T0PS1 007EA9  
                          _T0PS2 007EAA                  __end_of___lwdiv 249A  
                __end_of___lwmod 25DC                            i2l270 02C2  
                          i2l280 00EA                            i2l272 0052  
                          i2l361 2228                            i2l281 00F4  
                          i2l273 02BE                            i2l274 0064  
                          i2l364 2252                            i2l285 0244  
                          i2l367 227C                            i2l720 0D5E  
                          i2l289 02DC                            i2l298 03CA  
                          i2l731 0E0E                            i2l740 0E2A  
                          i2l716 0D34                            i2l396 1A0A  
                          i2l751 1BA8                            i2l913 1198  
                          i2l908 1068                            i2l693 212C  
                          i2l773 2A5A                            i2l876 2740  
                ___awdiv@counter 0005                            i2l886 2820  
           ??i2_read_colorsensor 0004                            _PORTB 000F81  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  ??_servo_rotate0 0003  
                  __CFG_PWRT$OFF 000000                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                read_colorsensor@i 00E3  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                   ___lltoft@exp 0011                  __end_of_lcdInst 2B06  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                            _nRBPU 007F8F  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                  __end_of_initLCD 279A  
                 __CFG_EBTRB$OFF 000000                       i2isdigit@c 0003  
                  ___awtoft@sign 000C                  __end_of_dpowers FDC0  
                          _color 0096                            _floor 1BDA  
                          _etime 0078                            _ldexp 1E5C  
                          _frexp 227E                            _errno 00A9  
                __end_of_isdigit 29D2                    ___ftpack@sign 0005  
                          _putch 2AE6                            _stime 007C  
                          pclath 000FFA                            tablat 000FF5  
                  _eskalbl_count 00B1                            pow@yi 005F  
                __end_of_timeset FDCF                 __end_ofi2___wmul 2A44  
                __end_of_standby 29F8                            status 000FD8  
                 __CFG_PBADEN$ON 000000                    i2printf@width 001E  
                    exp@exponent 004F                 __end_ofi2_printf 0B08  
             __size_ofi2___lwdiv 0052               __size_ofi2___lwmod 0042  
                    ldexp@newexp 0037                  __initialization 286A  
                    log@exponent 0037               __size_ofi2_lcdInst 000C  
                ??_emergencystop 00EC                   ??_bottle_count 00EC  
                   __end_of_main 1AF4                     __end_of_keys FDB6  
                     i2printf@ap 0018               __size_ofi2_isdigit 001E  
   __end_ofi2_I2C_ColorSens_Init 163A                           ??_main 010A  
                  ___fttol@sign1 0031                    __activetblptr 000002  
              ?_I2C_Master_Start 0001                ?_I2C_Master_Write 00D5  
                 servo_rotate0@i 0007                   servo_rotate0@j 0009  
             ??_I2C_Master_Start 00D5                           _ADCON0 000FC2  
                         _ADCON1 000FC1               ??_I2C_Master_Write 00D7  
                         ?_floor 0041                           ?_ldexp 0034  
                         ?_frexp 0001                 __end_of___altoft 2512  
                         _T08BIT 007EAE                 ___awdiv@dividend 0001  
                i2lcdNibble@data 0002                 __end_of___awtoft 28E0  
                         ?_putch 0001                 __end_of___ftpack 214C  
                i2lcdNibble@temp 0001                 __end_of___lltoft 26F8  
                         _INT0IE 007F94                           _INT1IE 007F83  
                         _INT1IF 007F80                           _INT2IE 007F84  
                         _INT2IF 007F81                           i2l1071 0BBE  
                         i2l1072 0CE2                           i2l1082 1CAA  
                         i2l3012 24BC                           i2l3102 187A  
                         i2l3014 24C8                           i2l3120 18BC  
                         i2l3050 0D9C                           i2l3034 0D6C  
                         i2l3130 18E4                           i2l3210 22A6  
                         i2l3060 0DD2                           i2l3028 0D42  
                         i2l3300 2840                           i2l3116 18AC  
                         i2l3070 0E06                           i2l3062 0DDA  
                         i2l3126 18D4                           i2l3142 233E  
                         i2l3312 28BC                           i2l3056 0DBE  
                         i2l3152 239A                           i2l3058 0DC8  
                         i2l3146 236E                           i2l3162 1762  
                         i2l3330 1C08                           i2l4210 2216  
                         i2l3076 0E46                           i2l3068 0DFC  
                         i2l3180 17C8                           i2l4204 21FE  
                         i2l4300 19BC                           i2l3262 1B44  
                         i2l3086 0E76                           i2l3190 17F0  
                         i2l3334 1C16                           i2l3510 0B20  
                         i2l3256 1B1C                           i2l3096 1852  
                         i2l3192 17FC                           i2l3184 17D8  
                         i2l4216 2240                           i2l4400 09E0  
                         i2l4312 07F6                           i2l3282 1B82  
                         i2l3346 1DCA                           i2l3194 1802  
                         i2l3338 1C30                           i2l3522 0B90  
                         i2l4314 0804                           i2l3436 26A2  
                         i2l3348 1E46                           i2l3380 1EEA  
                         i2l3364 1EBA                           i2l3356 1E74  
                         i2l3516 0B58                           i2l4172 254E  
                         i2l4412 0A0C                           i2l4332 0896  
                         i2l4340 08D4                           i2l4324 0838  
                         i2l4308 07E6                           i2l3438 26AE  
                         i2l3198 1818                           i2l4414 0A14  
                         i2l4422 0A3A                           i2l4406 09F6  
                         i2l4334 089A                           i2l4318 080A  
                         i2l3800 23E4                           i2l3376 1EDE  
                         i2l3544 0CB8                           i2l4168 2546  
                         i2l4424 0A40                           i2l4432 0ACA  
                         i2l4352 090A                           i2l4186 1654  
                         i2l4178 256A                           i2l4426 0A84  
                         i2l4434 0AE0                           i2l4418 0A28  
                         i2l4370 0954                           i2l4338 08A0  
                         i2l4282 1952                           i2l3812 240A  
                         i2l4436 0AE6                           i2l4372 0958  
                         i2l4356 0924                           i2l4292 1990  
                         i2l4532 00B0                           i2l3494 1448  
                         i2l4198 1724                           i2l4358 0928  
                         i2l4438 0AEE                           i2l4286 1962  
                         i2l4534 00BA                           i2l3816 2418  
                         i2l3808 2400                           i2l3488 1426  
                         i2l3760 10F2                           i2l3752 108E  
                         i2l4296 19AC                           i2l4632 03AC  
                         i2l4528 00A4                           i2l3746 1076  
                         i2l3930 271A                           i2l4394 09B4  
                         i2l4386 0984                           i2l4626 0396  
                         i2l4562 01AA                           i2l2980 20E4  
                         i2l2972 20AE                           i2l3764 1114  
                         i2l3916 2AA0                           i2l4388 099A  
                         i2l4636 03B4                           i2l4572 01F4  
                         u216_41 0D00                           i2l3790 23C2  
                         i2l3926 270E                           i2l3950 2802  
                         i2l4398 09D8                           i2l4590 0266  
                         i2l4582 023E                           i2l3784 23B2  
                         i2l2984 20FA                           i2l2976 20BC  
                         i2l3928 2716                           i2l2986 2118  
                         i2l2978 20C6                           i2l3938 2736  
                         i2l3954 2816                           i2l3946 27F6  
                         i2l4594 0274                           i2l3796 23D8  
                         i2l2988 2122                           i2l3948 27FE  
                         i2l4588 0258                           u217_41 0D14  
                         i2l3798 23E0                           i2l3898 2A18  
                         u260_41 1B2C                           u237_41 183A  
                         u246_41 1746                           u239_41 1862  
                         u258_41 1B04                           _TMR0IE 007F95  
                         _TMR0IF 007F92                        ??i2_putch 0003  
                         _TMR0ON 007EAF                           _SSPADD 000FC8  
                         _TRISC3 007CA3                           _TRISC4 007CA4  
                         _SSPBUF 000FC9                   __CFG_XINST$OFF 000000  
              ?_read_colorsensor 0001                           ___ftge 230E  
                   _yopcap_count 00BD                           ___wmul 2916  
             ??_read_colorsensor 00D7                        ??___awdiv 0005  
                      ??___ftadd 0022                   __CFG_STVREN$ON 000000  
                      ??___awmod 00D8                        ??___ftdiv 000F  
                      ??___ftneg 0004                        ??___lldiv 00DC  
                      ??___ftmul 0013                        ??___ftsub 002E  
                      ??___fttol 002C                        ??___lwdiv 00D8  
                      ??___lwmod 00DF                    dec_to_hex@num 0063  
                         clear_0 2888                           clear_1 2894  
               ___awdiv@quotient 0007                  ___awmod@divisor 00D6  
                ___awmod@counter 00D8                        ??_lcdInst 00D6  
                         _printf 0406                           floor@i 0044  
                         floor@x 0041            ___ftmul@f3_as_product 0017  
                      ??_initLCD 00D7                        ??_isdigit 00D4  
              __end_ofi2___lwdiv 274A                     __mediumconst FDA4  
              __end_ofi2___lwmod 282A                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ??_standby 00EC                __end_ofi2_lcdInst 2B1E  
                   _yoplbl_count 00C1                __end_ofi2_isdigit 2AA8  
               __end_ofexp@coeff FDED             __size_of_bottle_time 0036  
               __end_oflog@coeff FE08                       __accesstop 0080  
        __end_of__initialization 289A                       ___altoft@c 0037  
                     ___ftadd@f1 001C                       ___ftadd@f2 001F  
                     ___ftge@ff1 0001                       ___ftge@ff2 0004  
                   eval_poly@res 0031                    ___rparam_used 000001  
                     ___ftdiv@f1 0009                       ___ftdiv@f2 000C  
                     ___ftdiv@f3 0013                       ___ftneg@f1 0001  
                     ___awtoft@c 0009                       ___ftmul@f1 000D  
                     ___ftmul@f2 0010                       ___ftsub@f1 0028  
                     ___ftsub@f2 002B                       ___fttol@f1 0028  
             i2___lwmod@dividend 0008                   __pcstackCOMRAM 0001  
                   __pidataBANK0 2B52                       ___lltoft@c 0009  
                  __end_of_floor 1CB8                    __end_of_ldexp 1F22  
                  __end_of_frexp 230E                    __end_of_putch 2AF6  
                    i2printf@idx 0017                      i2printf@val 001B  
             __size_of_date_time 00D2              servo_rotate0@degree 0001  
                      ?i2___wmul 0001               __size_of_lcdNibble 0060  
                    i2putch@data 0003                        ?i2_printf 000D  
    __size_of_I2C_ColorSens_Init 0138                          ??_floor 0044  
                        ??_ldexp 0039                          ??_frexp 0006  
           __end_of_bottle_count 1030                       _dec_to_hex 163A  
                        ??_putch 00D6                       __pbssBANK0 0080  
             __size_of_eval_poly 00D2             i2_I2C_ColorSens_Init 1528  
              servo_rotate0@duty 0005               __size_of_read_time 0068  
                        ?___ftge 0001                     ?i2_lcdNibble 0001  
                        ?___wmul 00D4                        ?___altoft 0037  
                      ?___awtoft 0009                        ?___ftpack 0001  
                        ?_printf 00E0               __size_of_operation 00C0  
                      ?___lltoft 0009                       ??i2___wmul 0005  
                        _INTEDG2 007F8C                       ??i2_printf 0013  
                        _SSPCON1 000FC6                          _SSPCON2 000FC5  
                        _SSPSTAT 000FC7                __end_of_date_time 1D8A  
          ?i2_I2C_ColorSens_Init 0001                       _eska_count 00AB  
                        i2_putch 2B06                _bottle_count_disp 00EE  
    __size_ofi2_I2C_Master_Start 0008                __end_of_lcdNibble 263C  
    __size_ofi2_I2C_Master_Write 000A                    ?_operationend 0001  
                        __Hparam 0000                          __Lparam 0000  
                __size_of___ftge 0090                          ___awdiv 239E  
                        ___ftadd 0CF0                          ___awmod 214C  
                        ___ftdiv 1AF4                          ___ftneg 2A44  
                        ___lldiv 1FE2                  __size_of___wmul 0036  
                        ___ftmul 182A                          ___ftsub 282A  
                        ___fttol 1736                          ___lwdiv 2422  
                        ___lwmod 257A                       _curr_state 00C3  
                     ??___altoft 003B                          __pcinit 286A  
                     ??___awtoft 000C                       ??___ftpack 0006  
              __end_of_eval_poly 1E5C                          __ramtop 1000  
                        _lcdInst 2AF6                       ??___lltoft 000D  
                        __ptext0 1A0C                          __ptext1 29D2  
                        __ptext2 2AA8                          __ptext3 1F22  
                        __ptext4 12DE                          __ptext5 274A  
                        __ptext6 2A68                          __ptext7 1CB8  
                        __ptext8 294C                          __ptext9 28E0  
                __size_of_printf 03D6                   dec_to_hex@temp 006B  
                        _initLCD 274A                __end_of_hexpowers FDC8  
                  i2_isdigit$819 0002                          _dpowers FDB6  
                   __size_of_exp 01E8                     __size_of_log 011E  
                        _isdigit 29A8                     __size_of_isr 03FE  
    __size_ofi2_read_colorsensor 00EE                     __size_of_pow 0176  
               ___awmod@dividend 00D4                __end_of_read_time 257A  
       __size_of_I2C_Master_Init 0060         __size_of_I2C_Master_Read 002E  
       __size_of_I2C_Master_Wait 0014                       date_time@i 00EC  
       __size_of_I2C_Master_Stop 0008            __end_of_servo_rotate0 227E  
                        _timeset FDC8                          _standby 29D2  
                    ?_dec_to_hex 0063                   __pintcode_body 0012  
           end_of_initialization 289A                          exp@sign 0051  
                  __Lmediumconst FDA4                          int_func 0012  
            i2___wmul@multiplier 0001                __end_of_operation 1FE2  
                 _operation_disp 00B5                   _operation_time 00B7  
                 ??_operationend 00EC        __size_of_I2C_Master_Start 0008  
      __size_of_I2C_Master_Write 000A                  ___lldiv@divisor 00D8  
                        pow@sign 005E                  ___lldiv@counter 00E0  
                        printf@c 0109                          printf@f 00E0  
               I2C_Master_Init@c 00E1                 I2C_Master_Read@a 00D5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE            __end_of_emergencystop 2A8A  
                      _PORTAbits 000F80         ??_I2C_ColorSens_ClearInt 0004  
          __size_of_bottle_count 0194        __size_of_read_colorsensor 012C  
      read_colorsensor@color_low 00DB                i2_I2C_Master_Read 29F8  
              i2_I2C_Master_Wait 2AD4                i2_I2C_Master_Stop 2B42  
              i2___lwdiv@divisor 0003                        i2___lwdiv 26F8  
                      i2___lwmod 27E8                i2___lwdiv@counter 0007  
             ?i2_I2C_Master_Read 0001               ?i2_I2C_Master_Wait 0001  
         ??i2_I2C_ColorSens_Init 0004     i2read_colorsensor@color_high 000C  
             ?i2_I2C_Master_Stop 0001                       _start_time 007A  
                      i2_lcdInst 2B12                      ___ftdiv@exp 0016  
                    printf@width 0107              ??i2_I2C_Master_Read 0002  
                      i2_isdigit 2A8A              ??i2_I2C_Master_Wait 0001  
            ??i2_I2C_Master_Stop 0002                      ___ftmul@exp 0016  
                   _bottle_count 0E9C                   __end_of___ftge 239E  
                 __end_of___wmul 294C              __size_of_dec_to_hex 00FC  
           __size_ofi2_lcdNibble 004E               _total_bottle_count 00B9  
                  i2lcdInst@data 0003                       floor@expon 0047  
               i2___wmul@product 0005                   __end_of_printf 07DC  
                   i2printf@flag 001D        __end_ofi2_I2C_Master_Read 2A1E  
      __end_ofi2_I2C_Master_Wait 2AE6                     i2printf@prec 001A  
            start_initialization 286A        __end_ofi2_I2C_Master_Stop 2B4A  
                     eval_poly@d 002B                       eval_poly@n 002D  
                     eval_poly@x 0028                __size_ofi2___wmul 0026  
                     ldexp@value 0034                      __end_of_exp 0CF0  
                    __end_of_log 1528                      __end_of_isr 0406  
                    __end_of_pow 11A6                        i2printf@c 0020  
                      i2printf@f 000D                    ??_bottle_time 00EC  
          i2I2C_Master_Read@temp 0003                       ?i2___lwdiv 0001  
                     ?i2___lwmod 0008                __size_ofi2_printf 032C  
                     frexp@value 0001                ??_I2C_Master_Init 00E5  
              ??_I2C_Master_Read 00D5                ??_I2C_Master_Wait 00D4  
                     ?i2_lcdInst 0001                ??_I2C_Master_Stop 00D5  
     read_colorsensor@color_high 00DF                       ?i2_isdigit 0001  
                       ??___ftge 0007                         ??___wmul 00D8  
                    __pdataBANK0 00EE                 __CFG_LPT1OSC$OFF 000000  
                       ??_printf 00E8                __size_of___altoft 0078  
                     read_time@i 0004  __size_of_I2C_ColorSens_ClearInt 002E  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C       __end_of_I2C_ColorSens_Init 12DE  
                    __pbssCOMRAM 0076             __end_of_operationend 2AC0  
                  __pcstackBANK0 00C4                    __pcstackBANK1 0100  
              i2___lwmod@divisor 000A                i2___lwmod@counter 000C  
                       ?i2_putch 0001              __end_of_bottle_time 2916  
               _I2C_Master_Start 2B3A              i2I2C_Master_Write@d 0002  
               _I2C_Master_Write 2B1E                 _eskacaplbl_count 00AF  
                      _date_time 1CB8                 ___lwdiv@dividend 00D4  
              __CFG_CCP2MX$PORTC 000000                        __pintcode 0008  
                  __pmediumconst FDA4                        _lcdNibble 25DC  
                _yopcaplbl_count 00BF                         ?___awdiv 0001  
                       ?___ftadd 001C                         ?___awmod 00D4  
                       ?___ftdiv 0009                         ?___ftneg 0001  
                       ?___lldiv 00D4                         ?___ftmul 000D  
                       ?___ftsub 0028                         ?___fttol 0028  
                       ?___lwdiv 00D4                         ?___lwmod 00DB  
                       ?_lcdInst 0001                 dec_to_hex@hexnum 006F  
                       ?_initLCD 0001                         ?_isdigit 0001  
               _read_colorsensor 12DE       __size_ofi2_I2C_Master_Read 0026  
     __size_ofi2_I2C_Master_Wait 0012                        _eval_poly 1D8A  
     __size_ofi2_I2C_Master_Stop 0008                        _hexpowers FDC0  
                       ?_standby 0001                 ___lwdiv@quotient 00D9  
                 __size_of_floor 00DE                   __size_of_ldexp 00C6  
                 __size_of_frexp 0090                     ??_dec_to_hex 0065  
                    ??i2___lwdiv 0005                      ??i2___lwmod 000C  
                      _read_time 2512                   __size_of_putch 0010  
     __end_ofi2_I2C_Master_Start 2B52       __end_ofi2_I2C_Master_Write 2B32  
                    ??i2_lcdInst 0003                   ___wmul@product 00D8  
                       _LATAbits 000F89           _I2C_ColorSens_ClearInt 297A  
                       _LATCbits 000F8B                         _LATDbits 000F8C  
                    ??i2_isdigit 0001                       ?_date_time 0001  
                       i2u330_40 10DA                         i2u255_40 22CE  
                       i2u248_40 1780                         i2u255_48 22D0  
                       i2u272_40 1E94                         i2u248_45 1778  
                       i2u272_48 1E96                         i2u347_40 2A16  
                       i2u268_40 1C22                         i2u292_40 0B98  
                       i2u460_47 27B2                         i2u293_40 0B9A  
                       i2u461_47 27BA                         i2u462_47 27DA  
                       i2u463_47 27E2                        _operation 1F22  
                       i2u464_47 155A                         i2u465_47 221C  
                       i2u466_47 2246                         i2u459_47 03BC  
               __CFG_WDTPS$32768 000000                       ?_lcdNibble 0001  
             __end_of_dec_to_hex 1736       __end_ofi2_read_colorsensor 1A0C  
              ___wmul@multiplier 00D4                         i2___wmul 2A1E  
                  lcdNibble@data 00D5                       printf@flag 0106  
                  lcdNibble@temp 00D4                       printf@prec 0103  
                     ?_eval_poly 0028                         i2_printf 07DC  
                    _bottle_time 28E0              I2C_Master_Read@temp 00D6  
                      _yop_count 00BB                       ?_read_time 0001  
             dec_to_hex@quotient 0071                      _bottlequeue 0080  
               __size_ofi2_putch 000C                        frexp@eptr 0004  
                       __Hrparam 0000              i2read_colorsensor@i 0010  
                     ?_operation 0001                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                      dec_to_hex@i 006D  
         __size_of_servo_rotate0 0090                 __size_of___awdiv 0084  
               __size_of___ftadd 01AC                 __size_of___awmod 00A2  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
          i2___wmul@multiplicand 0003                 __size_of___lldiv 00BC  
                       ___altoft 249A                 __size_of___ftmul 00F4  
               __size_of___ftsub 0040                 __size_of___fttol 00F4  
               __size_of___lwdiv 0078                 __size_of___lwmod 0062  
          __size_of_operationend 0018                         ___awtoft 28A8  
                       ___ftpack 209E                         ___lltoft 269C  
                    _isdigit$819 00D5               i2I2C_Master_Read@a 0002  
               __size_of_lcdInst 0010                         _exp$1267 004C  
                _I2C_Master_Init 263C                  _I2C_Master_Read 294C  
               __size_of_initLCD 0050                  _I2C_Master_Wait 2AC0  
                _I2C_Master_Stop 2B32                         _isr$1362 0074  
               __size_of_isdigit 002A                  ___lwdiv@divisor 00D6  
                ___lwdiv@counter 00D8                         __ptext10 0E9C  
                       __ptext11 0406                         __ptext20 263C  
                       __ptext12 2AE6                         __ptext21 1FE2  
                       __ptext13 29A8                         __ptext30 2B06  
                       __ptext22 11A6                         __ptext14 2916  
                       __ptext31 2A8A                         __ptext23 2B1E  
                       __ptext15 257A                         __ptext40 163A  
                       __ptext32 27E8                         __ptext24 2B32  
                       __ptext16 2422                         __ptext41 1030  
                       __ptext33 26F8                         __ptext25 2B3A  
                       __ptext17 2AF6                         __ptext50 1D8A  
                       __ptext42 140A                         __ptext34 2B12  
                       __ptext26 2AC0                         __ptext18 25DC  
                       __ptext51 2A1E                         __ptext43 0B08  
                       __ptext35 279A                         __ptext19 214C  
                       __ptext60 239E                         __ptext52 182A  
                       __ptext44 1E5C                         __ptext36 1528  
                       __ptext28 191E                         __ptext61 297A  
                       __ptext53 282A                         __ptext45 1BDA  
                       __ptext37 21EE                         __ptext29 07DC  
                       __ptext62 2B28                         __ptext54 0CF0  
                       __ptext46 227E                         __ptext38 2512  
                       __ptext63 2B42                         __ptext55 2A44  
                       __ptext47 1736                         __ptext39 29F8  
                       __ptext64 2B4A                         __ptext56 1AF4  
                       __ptext48 230E                         __ptext65 2AD4  
                       __ptext57 28A8                         __ptext49 249A  
                       __ptext58 269C                         __ptext59 209E  
                       _end_time 0076                 __size_of_standby 0026  
                       _pow$1265 0058                         _pow$1266 005B  
         __size_of_emergencystop 0022                    __size_of_main 00E8  
  __size_ofi2_I2C_ColorSens_Init 0112                         _nodedata 00B3  
                _dec_to_hex$1263 0065                  _dec_to_hex$1264 0068  
                    ??_date_time 00EC                     _operationend 2AA8  
                  ??i2_lcdNibble 0001                      ??_lcdNibble 00D4  
                       int$flags 007E                        printf@idx 0100  
                      printf@val 0104                         exp@coeff FDCF  
                       log@coeff FDED                 _bottlequeue_head 00A5  
                      putch@data 00D6         __end_of_I2C_Master_Start 2B42  
               _bottlequeue_tail 00A7         __end_of_I2C_Master_Write 2B28  
                     _INTCONbits 000FF2                      ??_eval_poly 002F  
                       isdigit@c 00D6                    _servo_rotate0 21EE  
                    ??_read_time 0004                         intlevel2 0000  
               ___lwmod@dividend 00DB                 ___lldiv@dividend 00D4  
             _I2C_ColorSens_Init 11A6         __end_of_read_colorsensor 140A  
                    ??_operation 00EC              ?_I2C_ColorSens_Init 0001  
                       printf@ap 0101          __end_of_I2C_Master_Init 269C  
        __end_of_I2C_Master_Read 297A          __end_of_I2C_Master_Wait 2AD4  
        __end_of_I2C_Master_Stop 2B3A                      lcdInst@data 00D6  
                  _emergencystop 2A68              __end_ofi2_lcdNibble 27E8  
               ___lldiv@quotient 00DC                I2C_Master_Write@d 00D5  
                ___lwmod@divisor 00DD      i2read_colorsensor@color_low 0008  
                ___lwmod@counter 00DF             ??_I2C_ColorSens_Init 00D7  
                 ?_servo_rotate0 0001          ?_I2C_ColorSens_ClearInt 0001  

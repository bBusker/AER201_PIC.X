

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 28 16:44:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 1.40
    90                           ; Generated 01/12/2016 GMT
    91                           ; 
    92                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4620 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	idataBANK0
   125  003136                     __pidataBANK0:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _bottle_count_disp
   129  003136  FFFF               	dw	65535
   130                           
   131                           	psect	mediumconst
   132  00FE36                     __pmediumconst:
   133                           	opt stack 0
   134  00FE36  00                 	db	0
   135  00FE37                     _keys:
   136                           	opt stack 0
   137  00FE37  31                 	db	49
   138  00FE38  32                 	db	50
   139  00FE39  33                 	db	51
   140  00FE3A  41                 	db	65
   141  00FE3B  34                 	db	52
   142  00FE3C  35                 	db	53
   143  00FE3D  36                 	db	54
   144  00FE3E  42                 	db	66
   145  00FE3F  37                 	db	55
   146  00FE40  38                 	db	56
   147  00FE41  39                 	db	57
   148  00FE42  43                 	db	67
   149  00FE43  2A                 	db	42
   150  00FE44  30                 	db	48
   151  00FE45  23                 	db	35
   152  00FE46  44                 	db	68
   153  00FE47  00                 	db	0
   154  00FE48                     __end_of_keys:
   155                           	opt stack 0
   156  00FE48                     _dpowers:
   157                           	opt stack 0
   158  00FE48  0001               	dw	1
   159  00FE4A  000A               	dw	10
   160  00FE4C  0064               	dw	100
   161  00FE4E  03E8               	dw	1000
   162  00FE50  2710               	dw	10000
   163  00FE52                     __end_of_dpowers:
   164                           	opt stack 0
   165  00FE52                     _hexpowers:
   166                           	opt stack 0
   167  00FE52  0001               	dw	1
   168  00FE54  0010               	dw	16
   169  00FE56  0100               	dw	256
   170  00FE58  1000               	dw	4096
   171  00FE5A                     __end_of_hexpowers:
   172                           	opt stack 0
   173  00FE5A                     _timeset:
   174                           	opt stack 0
   175  00FE5A  50                 	db	80
   176  00FE5B  35                 	db	53
   177  00FE5C  21                 	db	33
   178  00FE5D  08                 	db	8
   179  00FE5E  05                 	db	5
   180  00FE5F  02                 	db	2
   181  00FE60  17                 	db	23
   182  00FE61                     __end_of_timeset:
   183                           	opt stack 0
   184  00FE61                     exp@coeff:
   185                           	opt stack 0
   186  00FE61  00                 	db	0
   187  00FE62  80                 	db	128
   188  00FE63  3F                 	db	63
   189  00FE64  72                 	db	114
   190  00FE65  31                 	db	49
   191  00FE66  3F                 	db	63
   192  00FE67  FE                 	db	254
   193  00FE68  75                 	db	117
   194  00FE69  3E                 	db	62
   195  00FE6A  58                 	db	88
   196  00FE6B  63                 	db	99
   197  00FE6C  3D                 	db	61
   198  00FE6D  95                 	db	149
   199  00FE6E  1D                 	db	29
   200  00FE6F  3C                 	db	60
   201  00FE70  C5                 	db	197
   202  00FE71  AE                 	db	174
   203  00FE72  3A                 	db	58
   204  00FE73  79                 	db	121
   205  00FE74  21                 	db	33
   206  00FE75  39                 	db	57
   207  00FE76  94                 	db	148
   208  00FE77  80                 	db	128
   209  00FE78  37                 	db	55
   210  00FE79  93                 	db	147
   211  00FE7A  A7                 	db	167
   212  00FE7B  35                 	db	53
   213  00FE7C  56                 	db	86
   214  00FE7D  15                 	db	21
   215  00FE7E  34                 	db	52
   216  00FE7F                     __end_ofexp@coeff:
   217                           	opt stack 0
   218  00FE7F                     log@coeff:
   219                           	opt stack 0
   220  00FE7F  00                 	db	0
   221  00FE80  00                 	db	0
   222  00FE81  00                 	db	0
   223  00FE82  00                 	db	0
   224  00FE83  80                 	db	128
   225  00FE84  3F                 	db	63
   226  00FE85  F0                 	db	240
   227  00FE86  FF                 	db	255
   228  00FE87  BE                 	db	190
   229  00FE88  E2                 	db	226
   230  00FE89  A9                 	db	169
   231  00FE8A  3E                 	db	62
   232  00FE8B  83                 	db	131
   233  00FE8C  76                 	db	118
   234  00FE8D  BE                 	db	190
   235  00FE8E  AE                 	db	174
   236  00FE8F  2B                 	db	43
   237  00FE90  3E                 	db	62
   238  00FE91  3C                 	db	60
   239  00FE92  C3                 	db	195
   240  00FE93  BD                 	db	189
   241  00FE94  D2                 	db	210
   242  00FE95  13                 	db	19
   243  00FE96  3D                 	db	61
   244  00FE97  78                 	db	120
   245  00FE98  D3                 	db	211
   246  00FE99  BB                 	db	187
   247  00FE9A                     __end_oflog@coeff:
   248                           	opt stack 0
   249  0000                     _TMR0	set	4054
   250  0000                     _ADCON0	set	4034
   251  0000                     _ADCON1	set	4033
   252  0000                     _INTCONbits	set	4082
   253  0000                     _LATA	set	3977
   254  0000                     _LATAbits	set	3977
   255  0000                     _LATB	set	3978
   256  0000                     _LATC	set	3979
   257  0000                     _LATCbits	set	3979
   258  0000                     _LATD	set	3980
   259  0000                     _LATDbits	set	3980
   260  0000                     _LATE	set	3981
   261  0000                     _PORTAbits	set	3968
   262  0000                     _PORTB	set	3969
   263  0000                     _SSPADD	set	4040
   264  0000                     _SSPBUF	set	4041
   265  0000                     _SSPCON1	set	4038
   266  0000                     _SSPCON2	set	4037
   267  0000                     _SSPSTAT	set	4039
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISB	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _TRISD	set	3989
   272  0000                     _TRISE	set	3990
   273  0000                     _ACKDT	set	32301
   274  0000                     _ACKEN	set	32300
   275  0000                     _GIE	set	32663
   276  0000                     _INT0IE	set	32660
   277  0000                     _INT1IE	set	32643
   278  0000                     _INT1IF	set	32640
   279  0000                     _INT2IE	set	32644
   280  0000                     _PEN	set	32298
   281  0000                     _PSA	set	32427
   282  0000                     _RCEN	set	32299
   283  0000                     _RSEN	set	32297
   284  0000                     _SEN	set	32296
   285  0000                     _T08BIT	set	32430
   286  0000                     _T0CS	set	32429
   287  0000                     _T0PS0	set	32424
   288  0000                     _T0PS1	set	32425
   289  0000                     _T0PS2	set	32426
   290  0000                     _TMR0IE	set	32661
   291  0000                     _TMR0IF	set	32658
   292  0000                     _TMR0ON	set	32431
   293  0000                     _TRISC3	set	31907
   294  0000                     _TRISC4	set	31908
   295  0000                     _nRBPU	set	32655
   296  00FE9A                     STR_3:
   297  00FE9A  47                 	db	71	;'G'
   298  00FE9B  25                 	db	37
   299  00FE9C  75                 	db	117	;'u'
   300  00FE9D  20                 	db	32
   301  00FE9E  42                 	db	66	;'B'
   302  00FE9F  25                 	db	37
   303  00FEA0  75                 	db	117	;'u'
   304  00FEA1  20                 	db	32
   305  00FEA2  20                 	db	32
   306  00FEA3  20                 	db	32
   307  00FEA4  20                 	db	32
   308  00FEA5  20                 	db	32
   309  00FEA6  20                 	db	32
   310  00FEA7  20                 	db	32
   311  00FEA8  20                 	db	32
   312  00FEA9  20                 	db	32
   313  00FEAA  20                 	db	32
   314  00FEAB  20                 	db	32
   315  00FEAC  20                 	db	32
   316  00FEAD  20                 	db	32
   317  00FEAE  20                 	db	32
   318  00FEAF  20                 	db	32
   319  00FEB0  20                 	db	32
   320  00FEB1  00                 	db	0
   321  00FEB2                     STR_2:
   322  00FEB2  43                 	db	67	;'C'
   323  00FEB3  25                 	db	37
   324  00FEB4  75                 	db	117	;'u'
   325  00FEB5  20                 	db	32
   326  00FEB6  52                 	db	82	;'R'
   327  00FEB7  25                 	db	37
   328  00FEB8  75                 	db	117	;'u'
   329  00FEB9  20                 	db	32
   330  00FEBA  20                 	db	32
   331  00FEBB  20                 	db	32
   332  00FEBC  20                 	db	32
   333  00FEBD  20                 	db	32
   334  00FEBE  20                 	db	32
   335  00FEBF  20                 	db	32
   336  00FEC0  20                 	db	32
   337  00FEC1  20                 	db	32
   338  00FEC2  20                 	db	32
   339  00FEC3  20                 	db	32
   340  00FEC4  20                 	db	32
   341  00FEC5  20                 	db	32
   342  00FEC6  20                 	db	32
   343  00FEC7  20                 	db	32
   344  00FEC8  20                 	db	32
   345  00FEC9  00                 	db	0
   346  00FECA                     STR_17:
   347  00FECA  54                 	db	84	;'T'
   348  00FECB  6F                 	db	111	;'o'
   349  00FECC  74                 	db	116	;'t'
   350  00FECD  61                 	db	97	;'a'
   351  00FECE  6C                 	db	108	;'l'
   352  00FECF  20                 	db	32
   353  00FED0  4F                 	db	79	;'O'
   354  00FED1  70                 	db	112	;'p'
   355  00FED2  65                 	db	101	;'e'
   356  00FED3  72                 	db	114	;'r'
   357  00FED4  61                 	db	97	;'a'
   358  00FED5  74                 	db	116	;'t'
   359  00FED6  69                 	db	105	;'i'
   360  00FED7  6F                 	db	111	;'o'
   361  00FED8  6E                 	db	110	;'n'
   362  00FED9  20                 	db	32
   363  00FEDA  20                 	db	32
   364  00FEDB  20                 	db	32
   365  00FEDC  20                 	db	32
   366  00FEDD  20                 	db	32
   367  00FEDE  20                 	db	32
   368  00FEDF  20                 	db	32
   369  00FEE0  00                 	db	0
   370  00FEE1                     STR_8:
   371  00FEE1  44                 	db	68	;'D'
   372  00FEE2  61                 	db	97	;'a'
   373  00FEE3  74                 	db	116	;'t'
   374  00FEE4  65                 	db	101	;'e'
   375  00FEE5  3A                 	db	58	;':'
   376  00FEE6  20                 	db	32
   377  00FEE7  25                 	db	37
   378  00FEE8  30                 	db	48	;'0'
   379  00FEE9  32                 	db	50	;'2'
   380  00FEEA  78                 	db	120	;'x'
   381  00FEEB  2F                 	db	47
   382  00FEEC  25                 	db	37
   383  00FEED  30                 	db	48	;'0'
   384  00FEEE  32                 	db	50	;'2'
   385  00FEEF  78                 	db	120	;'x'
   386  00FEF0  2F                 	db	47
   387  00FEF1  25                 	db	37
   388  00FEF2  30                 	db	48	;'0'
   389  00FEF3  32                 	db	50	;'2'
   390  00FEF4  78                 	db	120	;'x'
   391  00FEF5  20                 	db	32
   392  00FEF6  20                 	db	32
   393  00FEF7  00                 	db	0
   394  00FEF8                     STR_9:
   395  00FEF8  54                 	db	84	;'T'
   396  00FEF9  69                 	db	105	;'i'
   397  00FEFA  6D                 	db	109	;'m'
   398  00FEFB  65                 	db	101	;'e'
   399  00FEFC  3A                 	db	58	;':'
   400  00FEFD  20                 	db	32
   401  00FEFE  25                 	db	37
   402  00FEFF  30                 	db	48	;'0'
   403  00FF00  32                 	db	50	;'2'
   404  00FF01  78                 	db	120	;'x'
   405  00FF02  3A                 	db	58	;':'
   406  00FF03  25                 	db	37
   407  00FF04  30                 	db	48	;'0'
   408  00FF05  32                 	db	50	;'2'
   409  00FF06  78                 	db	120	;'x'
   410  00FF07  3A                 	db	58	;':'
   411  00FF08  25                 	db	37
   412  00FF09  30                 	db	48	;'0'
   413  00FF0A  32                 	db	50	;'2'
   414  00FF0B  78                 	db	120	;'x'
   415  00FF0C  20                 	db	32
   416  00FF0D  20                 	db	32
   417  00FF0E  00                 	db	0
   418  00FF0F                     STR_18:
   419  00FF0F  54                 	db	84	;'T'
   420  00FF10  69                 	db	105	;'i'
   421  00FF11  6D                 	db	109	;'m'
   422  00FF12  65                 	db	101	;'e'
   423  00FF13  3A                 	db	58	;':'
   424  00FF14  20                 	db	32
   425  00FF15  25                 	db	37
   426  00FF16  64                 	db	100	;'d'
   427  00FF17  20                 	db	32
   428  00FF18  73                 	db	115	;'s'
   429  00FF19  20                 	db	32
   430  00FF1A  20                 	db	32
   431  00FF1B  20                 	db	32
   432  00FF1C  20                 	db	32
   433  00FF1D  20                 	db	32
   434  00FF1E  20                 	db	32
   435  00FF1F  20                 	db	32
   436  00FF20  00                 	db	0
   437  00FF21                     STR_22:
   438  00FF21  30                 	db	48	;'0'
   439  00FF22  31                 	db	49	;'1'
   440  00FF23  32                 	db	50	;'2'
   441  00FF24  33                 	db	51	;'3'
   442  00FF25  34                 	db	52	;'4'
   443  00FF26  35                 	db	53	;'5'
   444  00FF27  36                 	db	54	;'6'
   445  00FF28  37                 	db	55	;'7'
   446  00FF29  38                 	db	56	;'8'
   447  00FF2A  39                 	db	57	;'9'
   448  00FF2B  61                 	db	97	;'a'
   449  00FF2C  62                 	db	98	;'b'
   450  00FF2D  63                 	db	99	;'c'
   451  00FF2E  64                 	db	100	;'d'
   452  00FF2F  65                 	db	101	;'e'
   453  00FF30  66                 	db	102	;'f'
   454  00FF31  00                 	db	0
   455  00FF32                     STR_11:
   456  00FF32  54                 	db	84	;'T'
   457  00FF33  6F                 	db	111	;'o'
   458  00FF34  74                 	db	116	;'t'
   459  00FF35  61                 	db	97	;'a'
   460  00FF36  6C                 	db	108	;'l'
   461  00FF37  3A                 	db	58	;':'
   462  00FF38  20                 	db	32
   463  00FF39  25                 	db	37
   464  00FF3A  64                 	db	100	;'d'
   465  00FF3B  20                 	db	32
   466  00FF3C  20                 	db	32
   467  00FF3D  20                 	db	32
   468  00FF3E  20                 	db	32
   469  00FF3F  20                 	db	32
   470  00FF40  20                 	db	32
   471  00FF41  20                 	db	32
   472  00FF42  00                 	db	0
   473  00FF43                     STR_10:
   474  00FF43  42                 	db	66	;'B'
   475  00FF44  6F                 	db	111	;'o'
   476  00FF45  74                 	db	116	;'t'
   477  00FF46  74                 	db	116	;'t'
   478  00FF47  6C                 	db	108	;'l'
   479  00FF48  65                 	db	101	;'e'
   480  00FF49  20                 	db	32
   481  00FF4A  43                 	db	67	;'C'
   482  00FF4B  6F                 	db	111	;'o'
   483  00FF4C  75                 	db	117	;'u'
   484  00FF4D  6E                 	db	110	;'n'
   485  00FF4E  74                 	db	116	;'t'
   486  00FF4F  20                 	db	32
   487  00FF50  20                 	db	32
   488  00FF51  20                 	db	32
   489  00FF52  20                 	db	32
   490  00FF53  00                 	db	0
   491  00FF54                     STR_12:
   492  00FF54  59                 	db	89	;'Y'
   493  00FF55  4F                 	db	79	;'O'
   494  00FF56  50                 	db	80	;'P'
   495  00FF57  20                 	db	32
   496  00FF58  57                 	db	87	;'W'
   497  00FF59  2F                 	db	47
   498  00FF5A  20                 	db	32
   499  00FF5B  43                 	db	67	;'C'
   500  00FF5C  41                 	db	65	;'A'
   501  00FF5D  50                 	db	80	;'P'
   502  00FF5E  3A                 	db	58	;':'
   503  00FF5F  20                 	db	32
   504  00FF60  25                 	db	37
   505  00FF61  64                 	db	100	;'d'
   506  00FF62  20                 	db	32
   507  00FF63  20                 	db	32
   508  00FF64  00                 	db	0
   509  00FF65                     STR_13:
   510  00FF65  59                 	db	89	;'Y'
   511  00FF66  4F                 	db	79	;'O'
   512  00FF67  50                 	db	80	;'P'
   513  00FF68  20                 	db	32
   514  00FF69  4E                 	db	78	;'N'
   515  00FF6A  4F                 	db	79	;'O'
   516  00FF6B  20                 	db	32
   517  00FF6C  43                 	db	67	;'C'
   518  00FF6D  41                 	db	65	;'A'
   519  00FF6E  50                 	db	80	;'P'
   520  00FF6F  3A                 	db	58	;':'
   521  00FF70  20                 	db	32
   522  00FF71  25                 	db	37
   523  00FF72  64                 	db	100	;'d'
   524  00FF73  20                 	db	32
   525  00FF74  20                 	db	32
   526  00FF75  00                 	db	0
   527  00FF76                     STR_14:
   528  00FF76  45                 	db	69	;'E'
   529  00FF77  53                 	db	83	;'S'
   530  00FF78  4B                 	db	75	;'K'
   531  00FF79  41                 	db	65	;'A'
   532  00FF7A  20                 	db	32
   533  00FF7B  57                 	db	87	;'W'
   534  00FF7C  2F                 	db	47
   535  00FF7D  20                 	db	32
   536  00FF7E  43                 	db	67	;'C'
   537  00FF7F  41                 	db	65	;'A'
   538  00FF80  50                 	db	80	;'P'
   539  00FF81  3A                 	db	58	;':'
   540  00FF82  20                 	db	32
   541  00FF83  25                 	db	37
   542  00FF84  64                 	db	100	;'d'
   543  00FF85  20                 	db	32
   544  00FF86  00                 	db	0
   545  00FF87                     STR_15:
   546  00FF87  45                 	db	69	;'E'
   547  00FF88  53                 	db	83	;'S'
   548  00FF89  4B                 	db	75	;'K'
   549  00FF8A  41                 	db	65	;'A'
   550  00FF8B  20                 	db	32
   551  00FF8C  4E                 	db	78	;'N'
   552  00FF8D  4F                 	db	79	;'O'
   553  00FF8E  20                 	db	32
   554  00FF8F  43                 	db	67	;'C'
   555  00FF90  41                 	db	65	;'A'
   556  00FF91  50                 	db	80	;'P'
   557  00FF92  3A                 	db	58	;':'
   558  00FF93  20                 	db	32
   559  00FF94  25                 	db	37
   560  00FF95  64                 	db	100	;'d'
   561  00FF96  20                 	db	32
   562  00FF97  00                 	db	0
   563  00FF98                     STR_20:
   564  00FF98  4F                 	db	79	;'O'
   565  00FF99  70                 	db	112	;'p'
   566  00FF9A  65                 	db	101	;'e'
   567  00FF9B  72                 	db	114	;'r'
   568  00FF9C  61                 	db	97	;'a'
   569  00FF9D  74                 	db	116	;'t'
   570  00FF9E  69                 	db	105	;'i'
   571  00FF9F  6F                 	db	111	;'o'
   572  00FFA0  6E                 	db	110	;'n'
   573  00FFA1  20                 	db	32
   574  00FFA2  44                 	db	68	;'D'
   575  00FFA3  6F                 	db	111	;'o'
   576  00FFA4  6E                 	db	110	;'n'
   577  00FFA5  65                 	db	101	;'e'
   578  00FFA6  21                 	db	33
   579  00FFA7  00                 	db	0
   580  00FFA8                     STR_16:
   581  00FFA8  45                 	db	69	;'E'
   582  00FFA9  52                 	db	82	;'R'
   583  00FFAA  52                 	db	82	;'R'
   584  00FFAB  3A                 	db	58	;':'
   585  00FFAC  20                 	db	32
   586  00FFAD  42                 	db	66	;'B'
   587  00FFAE  41                 	db	65	;'A'
   588  00FFAF  44                 	db	68	;'D'
   589  00FFB0  20                 	db	32
   590  00FFB1  42                 	db	66	;'B'
   591  00FFB2  54                 	db	84	;'T'
   592  00FFB3  4C                 	db	76	;'L'
   593  00FFB4  43                 	db	67	;'C'
   594  00FFB5  4E                 	db	78	;'N'
   595  00FFB6  54                 	db	84	;'T'
   596  00FFB7  00                 	db	0
   597  00FFB8                     STR_21:
   598  00FFB8  45                 	db	69	;'E'
   599  00FFB9  4D                 	db	77	;'M'
   600  00FFBA  45                 	db	69	;'E'
   601  00FFBB  52                 	db	82	;'R'
   602  00FFBC  47                 	db	71	;'G'
   603  00FFBD  45                 	db	69	;'E'
   604  00FFBE  4E                 	db	78	;'N'
   605  00FFBF  43                 	db	67	;'C'
   606  00FFC0  59                 	db	89	;'Y'
   607  00FFC1  20                 	db	32
   608  00FFC2  53                 	db	83	;'S'
   609  00FFC3  54                 	db	84	;'T'
   610  00FFC4  4F                 	db	79	;'O'
   611  00FFC5  50                 	db	80	;'P'
   612  00FFC6  00                 	db	0
   613  00FFC7                     STR_5:
   614  00FFC7  45                 	db	69	;'E'
   615  00FFC8  52                 	db	82	;'R'
   616  00FFC9  52                 	db	82	;'R'
   617  00FFCA  3A                 	db	58	;':'
   618  00FFCB  20                 	db	32
   619  00FFCC  42                 	db	66	;'B'
   620  00FFCD  41                 	db	65	;'A'
   621  00FFCE  44                 	db	68	;'D'
   622  00FFCF  20                 	db	32
   623  00FFD0  49                 	db	73	;'I'
   624  00FFD1  53                 	db	83	;'S'
   625  00FFD2  52                 	db	82	;'R'
   626  00FFD3  00                 	db	0
   627  00FFD4                     STR_19:
   628  00FFD4  25                 	db	37
   629  00FFD5  64                 	db	100	;'d'
   630  00FFD6  2C                 	db	44
   631  00FFD7  20                 	db	32
   632  00FFD8  25                 	db	37
   633  00FFD9  64                 	db	100	;'d'
   634  00FFDA  2C                 	db	44
   635  00FFDB  20                 	db	32
   636  00FFDC  25                 	db	37
   637  00FFDD  64                 	db	100	;'d'
   638  00FFDE  00                 	db	0
   639  00FFDF                     STR_7:
   640  00FFDF  25                 	db	37
   641  00FFE0  64                 	db	100	;'d'
   642  00FFE1  20                 	db	32
   643  00FFE2  20                 	db	32
   644  00FFE3  20                 	db	32
   645  00FFE4  20                 	db	32
   646  00FFE5  20                 	db	32
   647  00FFE6  20                 	db	32
   648  00FFE7  00                 	db	0
   649  00FFE8                     STR_1:
   650  00FFE8  72                 	db	114	;'r'
   651  00FFE9  75                 	db	117	;'u'
   652  00FFEA  6E                 	db	110	;'n'
   653  00FFEB  6E                 	db	110	;'n'
   654  00FFEC  69                 	db	105	;'i'
   655  00FFED  6E                 	db	110	;'n'
   656  00FFEE  67                 	db	103	;'g'
   657  00FFEF  00                 	db	0
   658  00FFF0                     STR_6:
   659  00FFF0  73                 	db	115	;'s'
   660  00FFF1  74                 	db	116	;'t'
   661  00FFF2  61                 	db	97	;'a'
   662  00FFF3  6E                 	db	110	;'n'
   663  00FFF4  64                 	db	100	;'d'
   664  00FFF5  62                 	db	98	;'b'
   665  00FFF6  79                 	db	121	;'y'
   666  00FFF7  00                 	db	0
   667  00FFF8                     STR_4:
   668  00FFF8  64                 	db	100	;'d'
   669  00FFF9  65                 	db	101	;'e'
   670  00FFFA  62                 	db	98	;'b'
   671  00FFFB  75                 	db	117	;'u'
   672  00FFFC  67                 	db	103	;'g'
   673  00FFFD  31                 	db	49	;'1'
   674  00FFFE  00                 	db	0
   675                           
   676                           ; #config settings
   677  00FFFF  00                 	db	0	; dummy byte at the end
   678  0000                     
   679                           	psect	cinit
   680  002EA2                     __pcinit:
   681                           	opt stack 0
   682  002EA2                     start_initialization:
   683                           	opt stack 0
   684  002EA2                     __initialization:
   685                           	opt stack 0
   686                           
   687                           ; Initialize objects allocated to BANK0 (2 bytes)
   688                           ; load TBLPTR registers with __pidataBANK0
   689  002EA2  0E36               	movlw	low __pidataBANK0
   690  002EA4  6EF6               	movwf	tblptrl,c
   691  002EA6  0E31               	movlw	high __pidataBANK0
   692  002EA8  6EF7               	movwf	tblptrh,c
   693  002EAA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   694  002EAC  6EF8               	movwf	tblptru,c
   695  002EAE  0009               	tblrd		*+	;fetch initializer
   696  002EB0  CFF5 F0ED          	movff	tablat,__pdataBANK0
   697  002EB4  0009               	tblrd		*+	;fetch initializer
   698  002EB6  CFF5 F0EE          	movff	tablat,__pdataBANK0+1
   699                           
   700                           ; Clear objects allocated to BANK0 (62 bytes)
   701  002EBA  EE00  F080         	lfsr	0,__pbssBANK0
   702  002EBE  0E3E               	movlw	62
   703  002EC0                     clear_0:
   704  002EC0  6AEE               	clrf	postinc0,c
   705  002EC2  06E8               	decf	wreg,f,c
   706  002EC4  E1FD               	bnz	clear_0
   707                           
   708                           ; Clear objects allocated to COMRAM (8 bytes)
   709  002EC6  EE00  F076         	lfsr	0,__pbssCOMRAM
   710  002ECA  0E08               	movlw	8
   711  002ECC                     clear_1:
   712  002ECC  6AEE               	clrf	postinc0,c
   713  002ECE  06E8               	decf	wreg,f,c
   714  002ED0  E1FD               	bnz	clear_1
   715  002ED2                     end_of_initialization:
   716                           	opt stack 0
   717  002ED2                     __end_of__initialization:
   718                           	opt stack 0
   719  002ED2  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   720  002ED4  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   721  002ED6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   722  002ED8  6EF8               	movwf	tblptru,c
   723  002EDA  0100               	movlb	0
   724  002EDC  EFC0  F00E         	goto	_main	;jump to C main() function
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732                           	psect	bssCOMRAM
   733  000076                     __pbssCOMRAM:
   734                           	opt stack 0
   735  000076                     _end_time:
   736                           	opt stack 0
   737  000076                     	ds	2
   738  000078                     _etime:
   739                           	opt stack 0
   740  000078                     	ds	2
   741  00007A                     _start_time:
   742                           	opt stack 0
   743  00007A                     	ds	2
   744  00007C                     _stime:
   745                           	opt stack 0
   746  00007C                     	ds	2
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           
   754                           	psect	bssBANK0
   755  000080                     __pbssBANK0:
   756                           	opt stack 0
   757  000080                     _bottle_count_array:
   758                           	opt stack 0
   759  000080                     	ds	10
   760  00008A                     _color:
   761                           	opt stack 0
   762  00008A                     	ds	8
   763  000092                     _colorprev:
   764                           	opt stack 0
   765  000092                     	ds	8
   766  00009A                     _time:
   767                           	opt stack 0
   768  00009A                     	ds	7
   769  0000A1                     _testint:
   770                           	opt stack 0
   771  0000A1                     	ds	6
   772  0000A7                     _bottle_read_bot:
   773                           	opt stack 0
   774  0000A7                     	ds	2
   775  0000A9                     _bottle_read_top:
   776                           	opt stack 0
   777  0000A9                     	ds	2
   778  0000AB                     _errno:
   779                           	opt stack 0
   780  0000AB                     	ds	2
   781  0000AD                     _flag_bottle:
   782                           	opt stack 0
   783  0000AD                     	ds	2
   784  0000AF                     _flag_bottle_high:
   785                           	opt stack 0
   786  0000AF                     	ds	2
   787  0000B1                     _flag_picbug:
   788                           	opt stack 0
   789  0000B1                     	ds	2
   790  0000B3                     _flag_top_read:
   791                           	opt stack 0
   792  0000B3                     	ds	2
   793  0000B5                     _flag_yopNC:
   794                           	opt stack 0
   795  0000B5                     	ds	2
   796  0000B7                     _operation_disp:
   797                           	opt stack 0
   798  0000B7                     	ds	2
   799  0000B9                     _operation_time:
   800                           	opt stack 0
   801  0000B9                     	ds	2
   802  0000BB                     _testflag:
   803                           	opt stack 0
   804  0000BB                     	ds	2
   805  0000BD                     _curr_state:
   806                           	opt stack 0
   807  0000BD                     	ds	1
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           
   815                           	psect	dataBANK0
   816  0000ED                     __pdataBANK0:
   817                           	opt stack 0
   818  0000ED                     _bottle_count_disp:
   819                           	opt stack 0
   820  0000ED                     	ds	2
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           
   828                           	psect	cstackBANK1
   829  000100                     __pcstackBANK1:
   830                           	opt stack 0
   831  000100                     printf@idx:
   832                           	opt stack 0
   833  000100                     ___ftge@ff1:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x0
   837  000100                     	ds	1
   838  000101                     printf@ap:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x1
   842  000101                     	ds	2
   843  000103                     printf@prec:
   844                           	opt stack 0
   845  000103                     ___ftge@ff2:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x3
   849  000103                     	ds	1
   850  000104                     printf@val:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x4
   854  000104                     	ds	2
   855  000106                     printf@flag:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x6
   859  000106                     	ds	1
   860  000107                     printf@width:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x7
   864  000107                     	ds	2
   865  000109                     printf@c:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x9
   869  000109                     	ds	1
   870  00010A                     operation@i:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xA
   874  00010A                     	ds	2
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882                           	psect	cstackBANK0
   883  0000BE                     __pcstackBANK0:
   884                           	opt stack 0
   885  0000BE                     ??_isr:
   886                           
   887                           ; 1 bytes @ 0x0
   888  0000BE                     	ds	16
   889  0000CE                     ??_isdigit:
   890  0000CE                     ??_I2C_Master_Wait:
   891  0000CE                     ?___wmul:
   892                           	opt stack 0
   893  0000CE                     ?___awmod:
   894                           	opt stack 0
   895  0000CE                     ?___lwdiv:
   896                           	opt stack 0
   897  0000CE                     ?___ftpack:
   898                           	opt stack 0
   899  0000CE                     ?___lldiv:
   900                           	opt stack 0
   901  0000CE                     lcdNibble@temp:
   902                           	opt stack 0
   903  0000CE                     servo_rotate0@degree:
   904                           	opt stack 0
   905  0000CE                     servo_rotate1@degree:
   906                           	opt stack 0
   907  0000CE                     ___wmul@multiplier:
   908                           	opt stack 0
   909  0000CE                     ___awmod@dividend:
   910                           	opt stack 0
   911  0000CE                     ___lwdiv@dividend:
   912                           	opt stack 0
   913  0000CE                     ___ftpack@arg:
   914                           	opt stack 0
   915  0000CE                     ___lldiv@dividend:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x10
   919  0000CE                     	ds	1
   920  0000CF                     I2C_Master_Read@a:
   921                           	opt stack 0
   922  0000CF                     lcdNibble@data:
   923                           	opt stack 0
   924  0000CF                     _isdigit$806:
   925                           	opt stack 0
   926  0000CF                     I2C_Master_Write@d:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x11
   930  0000CF                     	ds	1
   931  0000D0                     ??_servo_rotate1:
   932  0000D0                     ??_servo_rotate0:
   933  0000D0                     I2C_Master_Read@temp:
   934                           	opt stack 0
   935  0000D0                     lcdInst@data:
   936                           	opt stack 0
   937  0000D0                     putch@data:
   938                           	opt stack 0
   939  0000D0                     isdigit@c:
   940                           	opt stack 0
   941  0000D0                     ___wmul@multiplicand:
   942                           	opt stack 0
   943  0000D0                     ___awmod@divisor:
   944                           	opt stack 0
   945  0000D0                     ___lwdiv@divisor:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x12
   949  0000D0                     	ds	1
   950  0000D1                     ??_read_colorsensor:
   951  0000D1                     ??_I2C_ColorSens_Init:
   952  0000D1                     ??_initLCD:
   953  0000D1                     ___ftpack@exp:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x13
   957  0000D1                     	ds	1
   958  0000D2                     ___awmod@counter:
   959                           	opt stack 0
   960  0000D2                     ___ftpack@sign:
   961                           	opt stack 0
   962  0000D2                     ___lwdiv@counter:
   963                           	opt stack 0
   964  0000D2                     servo_rotate0@duty:
   965                           	opt stack 0
   966  0000D2                     servo_rotate1@duty:
   967                           	opt stack 0
   968  0000D2                     ___wmul@product:
   969                           	opt stack 0
   970  0000D2                     ___lldiv@divisor:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x14
   974  0000D2                     	ds	1
   975  0000D3                     ??___ftpack:
   976  0000D3                     ___awmod@sign:
   977                           	opt stack 0
   978  0000D3                     ___lwdiv@quotient:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x15
   982  0000D3                     	ds	1
   983  0000D4                     servo_rotate0@i:
   984                           	opt stack 0
   985  0000D4                     servo_rotate1@i:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x16
   989  0000D4                     	ds	1
   990  0000D5                     ?___lwmod:
   991                           	opt stack 0
   992  0000D5                     ___lwmod@dividend:
   993                           	opt stack 0
   994  0000D5                     read_colorsensor@color_low:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x17
   998  0000D5                     	ds	1
   999  0000D6                     ?___awtoft:
  1000                           	opt stack 0
  1001  0000D6                     servo_rotate0@j:
  1002                           	opt stack 0
  1003  0000D6                     servo_rotate1@j:
  1004                           	opt stack 0
  1005  0000D6                     ___awtoft@c:
  1006                           	opt stack 0
  1007  0000D6                     ___lldiv@quotient:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x18
  1011  0000D6                     	ds	1
  1012  0000D7                     ___lwmod@divisor:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x19
  1016  0000D7                     	ds	2
  1017  0000D9                     ___awtoft@sign:
  1018                           	opt stack 0
  1019  0000D9                     ___lwmod@counter:
  1020                           	opt stack 0
  1021  0000D9                     read_colorsensor@color_high:
  1022                           	opt stack 0
  1023                           
  1024                           ; 4 bytes @ 0x1B
  1025  0000D9                     	ds	1
  1026  0000DA                     ?_printf:
  1027                           	opt stack 0
  1028  0000DA                     ?___ftmul:
  1029                           	opt stack 0
  1030  0000DA                     ___lldiv@counter:
  1031                           	opt stack 0
  1032  0000DA                     printf@f:
  1033                           	opt stack 0
  1034  0000DA                     ___ftmul@f1:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x1C
  1038  0000DA                     	ds	1
  1039  0000DB                     I2C_Master_Init@c:
  1040                           	opt stack 0
  1041                           
  1042                           ; 4 bytes @ 0x1D
  1043  0000DB                     	ds	2
  1044  0000DD                     read_colorsensor@i:
  1045                           	opt stack 0
  1046  0000DD                     ___ftmul@f2:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x1F
  1050  0000DD                     	ds	2
  1051  0000DF                     ??_I2C_Master_Init:
  1052                           
  1053                           ; 1 bytes @ 0x21
  1054  0000DF                     	ds	1
  1055  0000E0                     ??___ftmul:
  1056                           
  1057                           ; 1 bytes @ 0x22
  1058  0000E0                     	ds	2
  1059  0000E2                     ??_printf:
  1060                           
  1061                           ; 1 bytes @ 0x24
  1062  0000E2                     	ds	1
  1063  0000E3                     ___ftmul@exp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x25
  1067  0000E3                     	ds	1
  1068  0000E4                     ___ftmul@f3_as_product:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x26
  1072  0000E4                     	ds	2
  1073  0000E6                     ??_standby:
  1074  0000E6                     ??_date_time:
  1075  0000E6                     ??_bottle_count:
  1076  0000E6                     
  1077                           ; 1 bytes @ 0x28
  1078  0000E6                     	ds	1
  1079  0000E7                     ___ftmul@cntr:
  1080                           	opt stack 0
  1081                           
  1082                           ; 1 bytes @ 0x29
  1083  0000E7                     	ds	1
  1084  0000E8                     date_time@i:
  1085                           	opt stack 0
  1086  0000E8                     ___ftmul@sign:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x2A
  1090  0000E8                     	ds	1
  1091  0000E9                     ??___ftge:
  1092                           
  1093                           ; 1 bytes @ 0x2B
  1094  0000E9                     	ds	3
  1095  0000EC                     ??_operation:
  1096                           
  1097                           ; 1 bytes @ 0x2E
  1098  0000EC                     	ds	1
  1099  0000ED                     tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           
  1106                           ; 1 bytes @ 0x2F
  1107                           
  1108                           	psect	cstackCOMRAM
  1109  000001                     __pcstackCOMRAM:
  1110                           	opt stack 0
  1111  000001                     ??i2_I2C_Master_Wait:
  1112  000001                     ??i2_isdigit:
  1113  000001                     ?___awdiv:
  1114                           	opt stack 0
  1115  000001                     ?i2___wmul:
  1116                           	opt stack 0
  1117  000001                     ?i2___lwdiv:
  1118                           	opt stack 0
  1119  000001                     ?_frexp:
  1120                           	opt stack 0
  1121  000001                     ?___ftneg:
  1122                           	opt stack 0
  1123  000001                     ?i2___ftpack:
  1124                           	opt stack 0
  1125  000001                     i2lcdNibble@temp:
  1126                           	opt stack 0
  1127  000001                     ___awdiv@dividend:
  1128                           	opt stack 0
  1129  000001                     i2servo_rotate1@degree:
  1130                           	opt stack 0
  1131  000001                     i2___wmul@multiplier:
  1132                           	opt stack 0
  1133  000001                     i2___lwdiv@dividend:
  1134                           	opt stack 0
  1135  000001                     ___ftneg@f1:
  1136                           	opt stack 0
  1137  000001                     frexp@value:
  1138                           	opt stack 0
  1139  000001                     i2___ftpack@arg:
  1140                           	opt stack 0
  1141  000001                     i2___ftge@ff1:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x0
  1145  000001                     	ds	1
  1146  000002                     i2I2C_Master_Read@a:
  1147                           	opt stack 0
  1148  000002                     i2lcdNibble@data:
  1149                           	opt stack 0
  1150  000002                     i2_isdigit$806:
  1151                           	opt stack 0
  1152  000002                     i2I2C_Master_Write@d:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x1
  1156  000002                     	ds	1
  1157  000003                     ??i2_servo_rotate1:
  1158  000003                     i2I2C_Master_Read@temp:
  1159                           	opt stack 0
  1160  000003                     i2lcdInst@data:
  1161                           	opt stack 0
  1162  000003                     i2putch@data:
  1163                           	opt stack 0
  1164  000003                     i2isdigit@c:
  1165                           	opt stack 0
  1166  000003                     ___awdiv@divisor:
  1167                           	opt stack 0
  1168  000003                     i2___wmul@multiplicand:
  1169                           	opt stack 0
  1170  000003                     i2___lwdiv@divisor:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2
  1174  000003                     	ds	1
  1175  000004                     ??i2_read_colorsensor:
  1176  000004                     read_time@i:
  1177                           	opt stack 0
  1178  000004                     i2___ftpack@exp:
  1179                           	opt stack 0
  1180  000004                     frexp@eptr:
  1181                           	opt stack 0
  1182  000004                     i2___ftge@ff2:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x3
  1186  000004                     	ds	1
  1187  000005                     ___awdiv@counter:
  1188                           	opt stack 0
  1189  000005                     i2___ftpack@sign:
  1190                           	opt stack 0
  1191  000005                     i2servo_rotate1@duty:
  1192                           	opt stack 0
  1193  000005                     i2___wmul@product:
  1194                           	opt stack 0
  1195  000005                     i2___lwdiv@quotient:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x4
  1199  000005                     	ds	1
  1200  000006                     ??_frexp:
  1201  000006                     ??i2___ftpack:
  1202  000006                     ___awdiv@sign:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x5
  1206  000006                     	ds	1
  1207  000007                     ??i2___ftge:
  1208  000007                     i2___lwdiv@counter:
  1209                           	opt stack 0
  1210  000007                     ___awdiv@quotient:
  1211                           	opt stack 0
  1212  000007                     i2servo_rotate1@i:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x6
  1216  000007                     	ds	1
  1217  000008                     ?i2___lwmod:
  1218                           	opt stack 0
  1219  000008                     i2___lwmod@dividend:
  1220                           	opt stack 0
  1221  000008                     i2read_colorsensor@color_low:
  1222                           	opt stack 0
  1223                           
  1224                           ; 4 bytes @ 0x7
  1225  000008                     	ds	1
  1226  000009                     ?___ftdiv:
  1227                           	opt stack 0
  1228  000009                     ?___lltoft:
  1229                           	opt stack 0
  1230  000009                     ?i2___awtoft:
  1231                           	opt stack 0
  1232  000009                     i2servo_rotate1@j:
  1233                           	opt stack 0
  1234  000009                     i2___awtoft@c:
  1235                           	opt stack 0
  1236  000009                     ___ftdiv@f1:
  1237                           	opt stack 0
  1238  000009                     ___lltoft@c:
  1239                           	opt stack 0
  1240                           
  1241                           ; 4 bytes @ 0x8
  1242  000009                     	ds	1
  1243  00000A                     i2___lwmod@divisor:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x9
  1247  00000A                     	ds	2
  1248  00000C                     i2___awtoft@sign:
  1249                           	opt stack 0
  1250  00000C                     i2___lwmod@counter:
  1251                           	opt stack 0
  1252  00000C                     ___ftdiv@f2:
  1253                           	opt stack 0
  1254  00000C                     i2read_colorsensor@color_high:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0xB
  1258  00000C                     	ds	1
  1259  00000D                     ??___lltoft:
  1260  00000D                     ?i2_printf:
  1261                           	opt stack 0
  1262  00000D                     ?i2___ftmul:
  1263                           	opt stack 0
  1264  00000D                     i2printf@f:
  1265                           	opt stack 0
  1266  00000D                     i2___ftmul@f1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0xC
  1270  00000D                     	ds	2
  1271  00000F                     ??___ftdiv:
  1272                           
  1273                           ; 1 bytes @ 0xE
  1274  00000F                     	ds	1
  1275  000010                     i2read_colorsensor@i:
  1276                           	opt stack 0
  1277  000010                     i2___ftmul@f2:
  1278                           	opt stack 0
  1279                           
  1280                           ; 3 bytes @ 0xF
  1281  000010                     	ds	1
  1282  000011                     ___lltoft@exp:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x10
  1286  000011                     	ds	1
  1287  000012                     ___ftdiv@cntr:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x11
  1291  000012                     	ds	1
  1292  000013                     ??i2_printf:
  1293  000013                     ??i2___ftmul:
  1294  000013                     ___ftdiv@f3:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x12
  1298  000013                     	ds	3
  1299  000016                     ___ftdiv@exp:
  1300                           	opt stack 0
  1301  000016                     i2___ftmul@exp:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x15
  1305  000016                     	ds	1
  1306  000017                     ___ftdiv@sign:
  1307                           	opt stack 0
  1308  000017                     i2printf@idx:
  1309                           	opt stack 0
  1310  000017                     i2___ftmul@f3_as_product:
  1311                           	opt stack 0
  1312                           
  1313                           ; 3 bytes @ 0x16
  1314  000017                     	ds	1
  1315  000018                     i2printf@ap:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x17
  1319  000018                     	ds	2
  1320  00001A                     i2printf@prec:
  1321                           	opt stack 0
  1322  00001A                     i2___ftmul@cntr:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x19
  1326  00001A                     	ds	1
  1327  00001B                     i2___ftmul@sign:
  1328                           	opt stack 0
  1329  00001B                     i2printf@val:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x1A
  1333  00001B                     	ds	1
  1334  00001C                     ?___ftadd:
  1335                           	opt stack 0
  1336  00001C                     ___ftadd@f1:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0x1B
  1340  00001C                     	ds	1
  1341  00001D                     i2printf@flag:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x1C
  1345  00001D                     	ds	1
  1346  00001E                     i2printf@width:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x1D
  1350  00001E                     	ds	1
  1351  00001F                     ___ftadd@f2:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x1E
  1355  00001F                     	ds	1
  1356  000020                     i2printf@c:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x1F
  1360  000020                     	ds	2
  1361  000022                     ??___ftadd:
  1362                           
  1363                           ; 1 bytes @ 0x21
  1364  000022                     	ds	3
  1365  000025                     ___ftadd@sign:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x24
  1369  000025                     	ds	1
  1370  000026                     ___ftadd@exp2:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x25
  1374  000026                     	ds	1
  1375  000027                     ___ftadd@exp1:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x26
  1379  000027                     	ds	1
  1380  000028                     ?___ftsub:
  1381                           	opt stack 0
  1382  000028                     ?_eval_poly:
  1383                           	opt stack 0
  1384  000028                     ?___fttol:
  1385                           	opt stack 0
  1386  000028                     ___ftsub@f1:
  1387                           	opt stack 0
  1388  000028                     ___fttol@f1:
  1389                           	opt stack 0
  1390  000028                     eval_poly@x:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x27
  1394  000028                     	ds	3
  1395  00002B                     eval_poly@d:
  1396                           	opt stack 0
  1397  00002B                     ___ftsub@f2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x2A
  1401  00002B                     	ds	1
  1402  00002C                     ??___fttol:
  1403                           
  1404                           ; 1 bytes @ 0x2B
  1405  00002C                     	ds	1
  1406  00002D                     eval_poly@n:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x2C
  1410  00002D                     	ds	1
  1411  00002E                     
  1412                           ; 1 bytes @ 0x2D
  1413  00002E                     	ds	1
  1414  00002F                     ??_eval_poly:
  1415                           
  1416                           ; 1 bytes @ 0x2E
  1417  00002F                     	ds	2
  1418  000031                     ___fttol@sign1:
  1419                           	opt stack 0
  1420  000031                     eval_poly@res:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x30
  1424  000031                     	ds	1
  1425  000032                     ___fttol@lval:
  1426                           	opt stack 0
  1427                           
  1428                           ; 4 bytes @ 0x31
  1429  000032                     	ds	2
  1430  000034                     ?_log:
  1431                           	opt stack 0
  1432  000034                     ?_ldexp:
  1433                           	opt stack 0
  1434  000034                     ldexp@value:
  1435                           	opt stack 0
  1436  000034                     log@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 3 bytes @ 0x33
  1440  000034                     	ds	2
  1441  000036                     ___fttol@exp1:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x35
  1445  000036                     	ds	1
  1446  000037                     ?___altoft:
  1447                           	opt stack 0
  1448  000037                     ldexp@newexp:
  1449                           	opt stack 0
  1450  000037                     log@exponent:
  1451                           	opt stack 0
  1452  000037                     ___altoft@c:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x36
  1456  000037                     	ds	2
  1457  000039                     ??_ldexp:
  1458                           
  1459                           ; 1 bytes @ 0x38
  1460  000039                     	ds	2
  1461  00003B                     ??___altoft:
  1462                           
  1463                           ; 1 bytes @ 0x3A
  1464  00003B                     	ds	4
  1465  00003F                     ___altoft@exp:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x3E
  1469  00003F                     	ds	1
  1470  000040                     ___altoft@sign:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x3F
  1474  000040                     	ds	1
  1475  000041                     ?_floor:
  1476                           	opt stack 0
  1477  000041                     floor@x:
  1478                           	opt stack 0
  1479                           
  1480                           ; 3 bytes @ 0x40
  1481  000041                     	ds	3
  1482  000044                     floor@i:
  1483                           	opt stack 0
  1484                           
  1485                           ; 3 bytes @ 0x43
  1486  000044                     	ds	3
  1487  000047                     floor@expon:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x46
  1491  000047                     	ds	2
  1492  000049                     ?_exp:
  1493                           	opt stack 0
  1494  000049                     exp@x:
  1495                           	opt stack 0
  1496                           
  1497                           ; 3 bytes @ 0x48
  1498  000049                     	ds	3
  1499  00004C                     _exp$1249:
  1500                           	opt stack 0
  1501                           
  1502                           ; 3 bytes @ 0x4B
  1503  00004C                     	ds	3
  1504  00004F                     exp@exponent:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x4E
  1508  00004F                     	ds	2
  1509  000051                     exp@sign:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x50
  1513  000051                     	ds	1
  1514  000052                     ?_pow:
  1515                           	opt stack 0
  1516  000052                     pow@x:
  1517                           	opt stack 0
  1518                           
  1519                           ; 3 bytes @ 0x51
  1520  000052                     	ds	3
  1521  000055                     pow@y:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x54
  1525  000055                     	ds	3
  1526  000058                     _pow$1380:
  1527                           	opt stack 0
  1528                           
  1529                           ; 3 bytes @ 0x57
  1530  000058                     	ds	3
  1531  00005B                     _pow$1381:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x5A
  1535  00005B                     	ds	3
  1536  00005E                     pow@sign:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x5D
  1540  00005E                     	ds	1
  1541  00005F                     pow@yi:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x5E
  1545  00005F                     	ds	4
  1546  000063                     ?_dec_to_hex:
  1547                           	opt stack 0
  1548  000063                     dec_to_hex@num:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x62
  1552  000063                     	ds	2
  1553  000065                     _dec_to_hex$1378:
  1554                           	opt stack 0
  1555                           
  1556                           ; 3 bytes @ 0x64
  1557  000065                     	ds	3
  1558  000068                     _dec_to_hex$1379:
  1559                           	opt stack 0
  1560                           
  1561                           ; 3 bytes @ 0x67
  1562  000068                     	ds	3
  1563  00006B                     dec_to_hex@temp:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x6A
  1567  00006B                     	ds	2
  1568  00006D                     dec_to_hex@i:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x6C
  1572  00006D                     	ds	2
  1573  00006F                     dec_to_hex@hexnum:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x6E
  1577  00006F                     	ds	2
  1578  000071                     dec_to_hex@quotient:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x70
  1582  000071                     	ds	2
  1583  000073                     isr@i:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x72
  1587  000073                     	ds	1
  1588  000074                     _isr$1377:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x73
  1592  000074                     	ds	2
  1593                           tblptru	equ	0xFF8
  1594                           tblptrh	equ	0xFF7
  1595                           tblptrl	equ	0xFF6
  1596                           tablat	equ	0xFF5
  1597                           postinc0	equ	0xFEE
  1598                           wreg	equ	0xFE8
  1599                           
  1600 ;;
  1601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1602 ;;
  1603 ;; *************** function _main *****************
  1604 ;; Defined at:
  1605 ;;		line 16 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels required when called:   11
  1625 ;; This function calls:
  1626 ;;		_I2C_ColorSens_Init
  1627 ;;		_I2C_Master_Init
  1628 ;;		_I2C_Master_Start
  1629 ;;		_I2C_Master_Stop
  1630 ;;		_I2C_Master_Write
  1631 ;;		_bottle_count
  1632 ;;		_bottle_time
  1633 ;;		_date_time
  1634 ;;		_emergencystop
  1635 ;;		_initLCD
  1636 ;;		_operation
  1637 ;;		_operationend
  1638 ;;		_standby
  1639 ;; This function is called by:
  1640 ;;		Startup code after reset
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text0
  1645  001D80                     __ptext0:
  1646                           	opt stack 0
  1647  001D80                     _main:
  1648                           	opt stack 20
  1649                           
  1650                           ;main.c: 23: TRISA = 0b11111011;
  1651                           
  1652                           ;incstack = 0
  1653  001D80  0EFB               	movlw	251
  1654  001D82  6E92               	movwf	3986,c	;volatile
  1655                           
  1656                           ;main.c: 24: TRISB = 0xFF;
  1657  001D84  6893               	setf	3987,c	;volatile
  1658                           
  1659                           ;main.c: 25: TRISC = 0x00;
  1660  001D86  0E00               	movlw	0
  1661  001D88  6E94               	movwf	3988,c	;volatile
  1662                           
  1663                           ;main.c: 26: TRISD = 0x00;
  1664  001D8A  0E00               	movlw	0
  1665  001D8C  6E95               	movwf	3989,c	;volatile
  1666                           
  1667                           ;main.c: 27: TRISE = 0x00;
  1668  001D8E  0E00               	movlw	0
  1669  001D90  6E96               	movwf	3990,c	;volatile
  1670                           
  1671                           ;main.c: 29: LATA = 0x00;
  1672  001D92  0E00               	movlw	0
  1673  001D94  6E89               	movwf	3977,c	;volatile
  1674                           
  1675                           ;main.c: 30: LATB = 0x00;
  1676  001D96  0E00               	movlw	0
  1677  001D98  6E8A               	movwf	3978,c	;volatile
  1678                           
  1679                           ;main.c: 31: LATC = 0x00;
  1680  001D9A  0E00               	movlw	0
  1681  001D9C  6E8B               	movwf	3979,c	;volatile
  1682                           
  1683                           ;main.c: 32: LATD = 0x00;
  1684  001D9E  0E00               	movlw	0
  1685  001DA0  6E8C               	movwf	3980,c	;volatile
  1686                           
  1687                           ;main.c: 33: LATE = 0x00;
  1688  001DA2  0E00               	movlw	0
  1689  001DA4  6E8D               	movwf	3981,c	;volatile
  1690                           
  1691                           ;main.c: 35: ADCON0 = 0x00;
  1692  001DA6  0E00               	movlw	0
  1693  001DA8  6EC2               	movwf	4034,c	;volatile
  1694                           
  1695                           ;main.c: 36: ADCON1 = 0xFF;
  1696  001DAA  68C1               	setf	4033,c	;volatile
  1697                           
  1698                           ;main.c: 39: GIE = 1;
  1699  001DAC  8EF2               	bsf	intcon,7,c	;volatile
  1700                           
  1701                           ;main.c: 40: INT1IE = 1;
  1702  001DAE  86F0               	bsf	intcon3,3,c	;volatile
  1703                           
  1704                           ;main.c: 41: INT0IE = 0;
  1705  001DB0  98F2               	bcf	intcon,4,c	;volatile
  1706                           
  1707                           ;main.c: 42: INT2IE = 0;
  1708  001DB2  98F0               	bcf	intcon3,4,c	;volatile
  1709                           
  1710                           ;main.c: 44: nRBPU = 0;
  1711  001DB4  9EF1               	bcf	intcon2,7,c	;volatile
  1712                           
  1713                           ;main.c: 46: initLCD();
  1714  001DB6  EC9F  F016         	call	_initLCD	;wreg free
  1715                           
  1716                           ;main.c: 47: I2C_Master_Init(10000);
  1717  001DBA  0E10               	movlw	16
  1718  001DBC  0100               	movlb	0	; () banked
  1719  001DBE  6FDB               	movwf	I2C_Master_Init@c& (0+255),b
  1720  001DC0  0E27               	movlw	39
  1721  001DC2  6FDC               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1722  001DC4  0E00               	movlw	0
  1723  001DC6  6FDD               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1724  001DC8  0E00               	movlw	0
  1725  001DCA  6FDE               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1726  001DCC  ECED  F015         	call	_I2C_Master_Init	;wreg free
  1727                           
  1728                           ;main.c: 48: I2C_ColorSens_Init();
  1729  001DD0  EC18  F010         	call	_I2C_ColorSens_Init	;wreg free
  1730                           
  1731                           ;main.c: 50: I2C_Master_Start();
  1732  001DD4  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  1733                           
  1734                           ;main.c: 51: I2C_Master_Write(0b01010010);
  1735  001DD8  0E00               	movlw	0
  1736  001DDA  0100               	movlb	0	; () banked
  1737  001DDC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1738  001DDE  0E52               	movlw	82
  1739  001DE0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  1740  001DE2  EC81  F018         	call	_I2C_Master_Write	;wreg free
  1741                           
  1742                           ;main.c: 52: I2C_Master_Write(0b10110100);
  1743  001DE6  0E00               	movlw	0
  1744  001DE8  0100               	movlb	0	; () banked
  1745  001DEA  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  1746  001DEC  0EB4               	movlw	180
  1747  001DEE  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  1748  001DF0  EC81  F018         	call	_I2C_Master_Write	;wreg free
  1749                           
  1750                           ;main.c: 53: I2C_Master_Stop();
  1751  001DF4  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  1752                           
  1753                           ;main.c: 56: TMR0 = 0;
  1754  001DF8  0E00               	movlw	0
  1755  001DFA  6ED7               	movwf	4055,c	;volatile
  1756  001DFC  0E00               	movlw	0
  1757  001DFE  6ED6               	movwf	4054,c	;volatile
  1758                           
  1759                           ;main.c: 57: T08BIT = 0;
  1760  001E00  9CD5               	bcf	4053,6,c	;volatile
  1761                           
  1762                           ;main.c: 58: T0CS = 0;
  1763  001E02  9AD5               	bcf	4053,5,c	;volatile
  1764                           
  1765                           ;main.c: 59: PSA = 0;
  1766  001E04  96D5               	bcf	4053,3,c	;volatile
  1767                           
  1768                           ;main.c: 60: T0PS2 = 1;
  1769  001E06  84D5               	bsf	4053,2,c	;volatile
  1770                           
  1771                           ;main.c: 61: T0PS1 = 1;
  1772  001E08  82D5               	bsf	4053,1,c	;volatile
  1773                           
  1774                           ;main.c: 62: T0PS0 = 1;
  1775  001E0A  80D5               	bsf	4053,0,c	;volatile
  1776                           
  1777                           ;main.c: 65: curr_state = STANDBY;
  1778  001E0C  0E00               	movlw	0
  1779  001E0E  0100               	movlb	0	; () banked
  1780  001E10  6FBD               	movwf	_curr_state& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 68: switch(curr_state){
  1784                           
  1785                           ;main.c: 67: while(1){
  1786  001E12  D014               	goto	l5778
  1787  001E14                     l5762:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 70: standby();
  1791  001E14  EC4B  F016         	call	_standby	;wreg free
  1792                           
  1793                           ;main.c: 71: break;
  1794  001E18  D011               	goto	l5778
  1795  001E1A                     l5764:
  1796                           
  1797                           ;main.c: 73: emergencystop();
  1798  001E1A  EC26  F018         	call	_emergencystop	;wreg free
  1799                           
  1800                           ;main.c: 74: break;
  1801  001E1E  D00E               	goto	l5778
  1802  001E20                     l5766:
  1803                           
  1804                           ;main.c: 76: operation();
  1805  001E20  EC09  F000         	call	_operation	;wreg free
  1806                           
  1807                           ;main.c: 77: break;
  1808  001E24  D00B               	goto	l5778
  1809  001E26                     l5768:
  1810                           
  1811                           ;main.c: 79: operationend();
  1812  001E26  EC46  F018         	call	_operationend	;wreg free
  1813                           
  1814                           ;main.c: 80: break;
  1815  001E2A  D008               	goto	l5778
  1816  001E2C                     l5770:
  1817                           
  1818                           ;main.c: 82: date_time();
  1819  001E2C  EC49  F00E         	call	_date_time	;wreg free
  1820                           
  1821                           ;main.c: 83: break;
  1822  001E30  D005               	goto	l5778
  1823  001E32                     l5772:
  1824                           
  1825                           ;main.c: 85: bottle_count();
  1826  001E32  ECAB  F00A         	call	_bottle_count	;wreg free
  1827                           
  1828                           ;main.c: 86: break;
  1829  001E36  D002               	goto	l5778
  1830  001E38                     l5774:
  1831                           
  1832                           ;main.c: 88: bottle_time();
  1833  001E38  EC8C  F017         	call	_bottle_time	;wreg free
  1834  001E3C                     l5778:
  1835  001E3C  0100               	movlb	0	; () banked
  1836  001E3E  51BD               	movf	_curr_state& (0+255),w,b
  1837                           
  1838                           ; Switch size 1, requested type "space"
  1839                           ; Number of cases is 7, Range of values is 0 to 6
  1840                           ; switch strategies available:
  1841                           ; Name         Instructions Cycles
  1842                           ; simple_byte           22    12 (average)
  1843                           ;	Chosen strategy is simple_byte
  1844  001E40  0A00               	xorlw	0	; case 0
  1845  001E42  B4D8               	btfsc	status,2,c
  1846  001E44  D7E7               	goto	l5762
  1847  001E46  0A01               	xorlw	1	; case 1
  1848  001E48  B4D8               	btfsc	status,2,c
  1849  001E4A  D7E7               	goto	l5764
  1850  001E4C  0A03               	xorlw	3	; case 2
  1851  001E4E  B4D8               	btfsc	status,2,c
  1852  001E50  D7E7               	goto	l5766
  1853  001E52  0A01               	xorlw	1	; case 3
  1854  001E54  B4D8               	btfsc	status,2,c
  1855  001E56  D7E7               	goto	l5768
  1856  001E58  0A07               	xorlw	7	; case 4
  1857  001E5A  B4D8               	btfsc	status,2,c
  1858  001E5C  D7E7               	goto	l5770
  1859  001E5E  0A01               	xorlw	1	; case 5
  1860  001E60  B4D8               	btfsc	status,2,c
  1861  001E62  D7E7               	goto	l5772
  1862  001E64  0A03               	xorlw	3	; case 6
  1863  001E66  B4D8               	btfsc	status,2,c
  1864  001E68  D7E7               	goto	l5774
  1865                           
  1866                           ; BSR set to: 0
  1867                           
  1868                           ; BSR set to: 0
  1869  001E6A  D7E8               	goto	l5778
  1870  001E6C                     __end_of_main:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           intcon	equ	0xFF2
  1877                           intcon2	equ	0xFF1
  1878                           intcon3	equ	0xFF0
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _standby *****************
  1884 ;; Defined at:
  1885 ;;		line 202 in file "main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;Total ram usage:        2 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:   10
  1906 ;; This function calls:
  1907 ;;		_lcdInst
  1908 ;;		_printf
  1909 ;;		_read_colorsensor
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text1
  1916  002C96                     __ptext1:
  1917                           	opt stack 0
  1918  002C96                     _standby:
  1919                           	opt stack 20
  1920                           
  1921                           ;main.c: 203: lcdInst(0b10000000);
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;incstack = 0
  1925  002C96  0E80               	movlw	128
  1926  002C98  EC6D  F018         	call	_lcdInst
  1927                           
  1928                           ;main.c: 204: printf("standby");
  1929  002C9C  0EF0               	movlw	low STR_6
  1930  002C9E  0100               	movlb	0	; () banked
  1931  002CA0  6FDA               	movwf	printf@f& (0+255),b
  1932  002CA2  0EFF               	movlw	high STR_6
  1933  002CA4  0100               	movlb	0	; () banked
  1934  002CA6  6FDB               	movwf	(printf@f+1)& (0+255),b
  1935  002CA8  ECF6  F003         	call	_printf	;wreg free
  1936                           
  1937                           ;main.c: 205: lcdInst(0b11000000);
  1938  002CAC  0EC0               	movlw	192
  1939  002CAE  EC6D  F018         	call	_lcdInst
  1940                           
  1941                           ;main.c: 206: read_colorsensor();
  1942  002CB2  ECCB  F00B         	call	_read_colorsensor	;wreg free
  1943                           
  1944                           ;main.c: 207: printf("%d      ", color[0]);
  1945  002CB6  0EDF               	movlw	low STR_7
  1946  002CB8  0100               	movlb	0	; () banked
  1947  002CBA  6FDA               	movwf	printf@f& (0+255),b
  1948  002CBC  0EFF               	movlw	high STR_7
  1949  002CBE  0100               	movlb	0	; () banked
  1950  002CC0  6FDB               	movwf	(printf@f+1)& (0+255),b
  1951  002CC2  C08A  F0DC         	movff	_color,?_printf+2
  1952  002CC6  C08B  F0DD         	movff	_color+1,?_printf+3
  1953  002CCA  ECF6  F003         	call	_printf	;wreg free
  1954                           
  1955                           ;main.c: 208: _delay((unsigned long)((500)*(10000000/4000.0)));
  1956  002CCE  0E07               	movlw	7
  1957  002CD0  0100               	movlb	0	; () banked
  1958  002CD2  6FE7               	movwf	(??_standby+1)& (0+255),b
  1959  002CD4  0E58               	movlw	88
  1960  002CD6  0100               	movlb	0	; () banked
  1961  002CD8  6FE6               	movwf	??_standby& (0+255),b
  1962  002CDA  0E59               	movlw	89
  1963  002CDC                     u5707:
  1964  002CDC  2EE8               	decfsz	wreg,f,c
  1965  002CDE  D7FE               	bra	u5707
  1966  002CE0  2FE6               	decfsz	??_standby& (0+255),f,b
  1967  002CE2  D7FC               	bra	u5707
  1968  002CE4  2FE7               	decfsz	(??_standby+1)& (0+255),f,b
  1969  002CE6  D7FA               	bra	u5707
  1970  002CE8  D000               	nop2	
  1971  002CEA  0012               	return	
  1972  002CEC                     __end_of_standby:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           intcon	equ	0xFF2
  1979                           intcon2	equ	0xFF1
  1980                           intcon3	equ	0xFF0
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _operationend *****************
  1986 ;; Defined at:
  1987 ;;		line 405 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        0 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:   10
  2008 ;; This function calls:
  2009 ;;		_lcdInst
  2010 ;;		_printf
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text2
  2017  00308C                     __ptext2:
  2018                           	opt stack 0
  2019  00308C                     _operationend:
  2020                           	opt stack 20
  2021                           
  2022                           ;main.c: 406: lcdInst(0b10000000);
  2023                           
  2024                           ;incstack = 0
  2025  00308C  0E80               	movlw	128
  2026  00308E  EC6D  F018         	call	_lcdInst
  2027                           
  2028                           ;main.c: 407: printf("Operation Done!");
  2029  003092  0E98               	movlw	low STR_20
  2030  003094  0100               	movlb	0	; () banked
  2031  003096  6FDA               	movwf	printf@f& (0+255),b
  2032  003098  0EFF               	movlw	high STR_20
  2033  00309A  0100               	movlb	0	; () banked
  2034  00309C  6FDB               	movwf	(printf@f+1)& (0+255),b
  2035  00309E  ECF6  F003         	call	_printf	;wreg free
  2036  0030A2  0012               	return	
  2037  0030A4                     __end_of_operationend:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           intcon	equ	0xFF2
  2044                           intcon2	equ	0xFF1
  2045                           intcon3	equ	0xFF0
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _operation *****************
  2051 ;; Defined at:
  2052 ;;		line 317 in file "main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  i               2   10[BANK1 ] int 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;Total ram usage:        3 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:   10
  2073 ;; This function calls:
  2074 ;;		___awtoft
  2075 ;;		___ftge
  2076 ;;		___ftmul
  2077 ;;		_lcdInst
  2078 ;;		_printf
  2079 ;;		_read_colorsensor
  2080 ;;		_servo_rotate0
  2081 ;;		_servo_rotate1
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text3
  2088  000012                     __ptext3:
  2089                           	opt stack 0
  2090  000012                     _operation:
  2091                           	opt stack 20
  2092                           
  2093                           ;main.c: 335: int i;
  2094                           ;main.c: 336: for(i=0; i<4; i++){
  2095                           
  2096                           ;incstack = 0
  2097  000012  0E00               	movlw	0
  2098  000014  0101               	movlb	1	; () banked
  2099  000016  6F0B               	movwf	(operation@i+1)& (0+255),b
  2100  000018  0E00               	movlw	0
  2101  00001A  6F0A               	movwf	operation@i& (0+255),b
  2102                           
  2103                           ; BSR set to: 1
  2104  00001C  0101               	movlb	1	; () banked
  2105  00001E  BF0B               	btfsc	(operation@i+1)& (0+255),7,b
  2106  000020  D008               	goto	l5538
  2107  000022  0101               	movlb	1	; () banked
  2108  000024  510B               	movf	(operation@i+1)& (0+255),w,b
  2109  000026  E129               	bnz	l329
  2110  000028  0E04               	movlw	4
  2111  00002A  0101               	movlb	1	; () banked
  2112  00002C  5D0A               	subwf	operation@i& (0+255),w,b
  2113  00002E  B0D8               	btfsc	status,0,c
  2114  000030  D024               	goto	l329
  2115  000032                     l5538:
  2116                           
  2117                           ; BSR set to: 1
  2118                           ;main.c: 337: colorprev[i] = color[i];
  2119  000032  90D8               	bcf	status,0,c
  2120  000034  0101               	movlb	1	; () banked
  2121  000036  350A               	rlcf	operation@i& (0+255),w,b
  2122  000038  6ED9               	movwf	fsr2l,c
  2123  00003A  0101               	movlb	1	; () banked
  2124  00003C  350B               	rlcf	(operation@i+1)& (0+255),w,b
  2125  00003E  6EDA               	movwf	fsr2h,c
  2126  000040  0E8A               	movlw	low _color
  2127  000042  26D9               	addwf	fsr2l,f,c
  2128  000044  0E00               	movlw	high _color
  2129  000046  22DA               	addwfc	fsr2h,f,c
  2130  000048  90D8               	bcf	status,0,c
  2131  00004A  0101               	movlb	1	; () banked
  2132  00004C  350A               	rlcf	operation@i& (0+255),w,b
  2133  00004E  6EE1               	movwf	fsr1l,c
  2134  000050  0101               	movlb	1	; () banked
  2135  000052  350B               	rlcf	(operation@i+1)& (0+255),w,b
  2136  000054  6EE2               	movwf	fsr1h,c
  2137  000056  0E92               	movlw	low _colorprev
  2138  000058  26E1               	addwf	fsr1l,f,c
  2139  00005A  0E00               	movlw	high _colorprev
  2140  00005C  22E2               	addwfc	fsr1h,f,c
  2141  00005E  CFDE FFE6          	movff	postinc2,postinc1
  2142  000062  CFDD FFE5          	movff	postdec2,postdec1
  2143                           
  2144                           ; BSR set to: 1
  2145  000066  0101               	movlb	1	; () banked
  2146  000068  4B0A               	infsnz	operation@i& (0+255),f,b
  2147  00006A  2B0B               	incf	(operation@i+1)& (0+255),f,b
  2148                           
  2149                           ; BSR set to: 1
  2150  00006C  0101               	movlb	1	; () banked
  2151  00006E  BF0B               	btfsc	(operation@i+1)& (0+255),7,b
  2152  000070  D7E0               	goto	l5538
  2153  000072  0101               	movlb	1	; () banked
  2154  000074  510B               	movf	(operation@i+1)& (0+255),w,b
  2155  000076  E101               	bnz	u5480
  2156  000078  D7D7               	goto	L1
  2157  00007A                     u5480:
  2158  00007A                     l329:
  2159                           
  2160                           ; BSR set to: 1
  2161                           ;main.c: 338: }
  2162                           ;main.c: 339: GIE = 0;
  2163  00007A  9EF2               	bcf	intcon,7,c	;volatile
  2164                           
  2165                           ; BSR set to: 1
  2166                           ;main.c: 340: read_colorsensor();
  2167  00007C  ECCB  F00B         	call	_read_colorsensor	;wreg free
  2168                           
  2169                           ;main.c: 341: lcdInst(0b10000000);
  2170  000080  0E80               	movlw	128
  2171  000082  EC6D  F018         	call	_lcdInst
  2172                           
  2173                           ;main.c: 342: printf("%d, %d, %d", color[1], color[2], color[3]);
  2174  000086  0ED4               	movlw	low STR_19
  2175  000088  0100               	movlb	0	; () banked
  2176  00008A  6FDA               	movwf	printf@f& (0+255),b
  2177  00008C  0EFF               	movlw	high STR_19
  2178  00008E  0100               	movlb	0	; () banked
  2179  000090  6FDB               	movwf	(printf@f+1)& (0+255),b
  2180  000092  C08C  F0DC         	movff	_color+2,?_printf+2
  2181  000096  C08D  F0DD         	movff	_color+3,?_printf+3
  2182  00009A  C08E  F0DE         	movff	_color+4,?_printf+4
  2183  00009E  C08F  F0DF         	movff	_color+5,?_printf+5
  2184  0000A2  C090  F0E0         	movff	_color+6,?_printf+6
  2185  0000A6  C091  F0E1         	movff	_color+7,?_printf+7
  2186  0000AA  ECF6  F003         	call	_printf	;wreg free
  2187                           
  2188                           ;main.c: 343: if(color[0]>22){
  2189  0000AE  0100               	movlb	0	; () banked
  2190  0000B0  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2191  0000B2  D12B               	goto	l5586
  2192  0000B4  0100               	movlb	0	; () banked
  2193  0000B6  518B               	movf	(_color+1)& (0+255),w,b
  2194  0000B8  E105               	bnz	u5490
  2195  0000BA  0E17               	movlw	23
  2196  0000BC  0100               	movlb	0	; () banked
  2197  0000BE  5D8A               	subwf	_color& (0+255),w,b
  2198  0000C0  A0D8               	btfss	status,0,c
  2199  0000C2  D123               	goto	l5586
  2200  0000C4                     u5490:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;main.c: 344: flag_bottle = 1;
  2204  0000C4  0E00               	movlw	0
  2205  0000C6  0100               	movlb	0	; () banked
  2206  0000C8  6FAE               	movwf	(_flag_bottle+1)& (0+255),b
  2207  0000CA  0E01               	movlw	1
  2208  0000CC  6FAD               	movwf	_flag_bottle& (0+255),b
  2209                           
  2210                           ;main.c: 345: flag_picbug = 0;
  2211  0000CE  0E00               	movlw	0
  2212  0000D0  0100               	movlb	0	; () banked
  2213  0000D2  6FB2               	movwf	(_flag_picbug+1)& (0+255),b
  2214  0000D4  0E00               	movlw	0
  2215  0000D6  6FB1               	movwf	_flag_picbug& (0+255),b
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;main.c: 346: if(color[0]>300)flag_yopNC = 1;
  2219  0000D8  0100               	movlb	0	; () banked
  2220  0000DA  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2221  0000DC  D00D               	goto	l5558
  2222  0000DE  0E2D               	movlw	45
  2223  0000E0  0100               	movlb	0	; () banked
  2224  0000E2  5D8A               	subwf	_color& (0+255),w,b
  2225  0000E4  0E01               	movlw	1
  2226  0000E6  0100               	movlb	0	; () banked
  2227  0000E8  598B               	subwfb	(_color+1)& (0+255),w,b
  2228  0000EA  A0D8               	btfss	status,0,c
  2229  0000EC  D005               	goto	l5558
  2230                           
  2231                           ; BSR set to: 0
  2232  0000EE  0E00               	movlw	0
  2233  0000F0  0100               	movlb	0	; () banked
  2234  0000F2  6FB6               	movwf	(_flag_yopNC+1)& (0+255),b
  2235  0000F4  0E01               	movlw	1
  2236  0000F6  6FB5               	movwf	_flag_yopNC& (0+255),b
  2237  0000F8                     l5558:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;main.c: 347: if(color[0]>30){
  2241  0000F8  0100               	movlb	0	; () banked
  2242  0000FA  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2243  0000FC  D083               	goto	l5572
  2244  0000FE  0100               	movlb	0	; () banked
  2245  000100  518B               	movf	(_color+1)& (0+255),w,b
  2246  000102  E105               	bnz	u5510
  2247  000104  0E1F               	movlw	31
  2248  000106  0100               	movlb	0	; () banked
  2249  000108  5D8A               	subwf	_color& (0+255),w,b
  2250  00010A  A0D8               	btfss	status,0,c
  2251  00010C  D07B               	goto	l5572
  2252  00010E                     u5510:
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;main.c: 348: if(!flag_top_read){
  2256  00010E  0100               	movlb	0	; () banked
  2257  000110  51B3               	movf	_flag_top_read& (0+255),w,b
  2258  000112  0100               	movlb	0	; () banked
  2259  000114  11B4               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2260  000116  A4D8               	btfss	status,2,c
  2261  000118  D070               	goto	l333
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 351: if(color[1] > 1.5*color[3]) bottle_read_top = 1;
  2265  00011A  0E00               	movlw	0
  2266  00011C  0100               	movlb	0	; () banked
  2267  00011E  6FDD               	movwf	___ftmul@f2& (0+255),b
  2268  000120  0EC0               	movlw	192
  2269  000122  0100               	movlb	0	; () banked
  2270  000124  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2271  000126  0E3F               	movlw	63
  2272  000128  0100               	movlb	0	; () banked
  2273  00012A  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2274  00012C  C090  F0D6         	movff	_color+6,___awtoft@c
  2275  000130  C091  F0D7         	movff	_color+7,___awtoft@c+1
  2276  000134  ECEE  F016         	call	___awtoft	;wreg free
  2277  000138  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2278  00013C  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2279  000140  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2280  000144  ECFC  F009         	call	___ftmul	;wreg free
  2281  000148  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2282  00014C  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2283  000150  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2284  000154  C08C  F0D6         	movff	_color+2,___awtoft@c
  2285  000158  C08D  F0D7         	movff	_color+3,___awtoft@c+1
  2286  00015C  ECEE  F016         	call	___awtoft	;wreg free
  2287  000160  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2288  000164  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2289  000168  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2290  00016C  EC57  F011         	call	___ftge	;wreg free
  2291  000170  0101               	movlb	1	; () banked
  2292  000172  B0D8               	btfsc	status,0,c
  2293  000174  D005               	goto	l5566
  2294                           
  2295                           ; BSR set to: 1
  2296  000176  0E00               	movlw	0
  2297  000178  0100               	movlb	0	; () banked
  2298  00017A  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2299  00017C  0E01               	movlw	1
  2300  00017E  D037               	goto	L3
  2301  000180                     l5566:
  2302                           
  2303                           ;main.c: 352: else if(color[1] <= 0.75*color[3]) bottle_read_top = 2;
  2304  000180  0E00               	movlw	0
  2305  000182  0100               	movlb	0	; () banked
  2306  000184  6FDD               	movwf	___ftmul@f2& (0+255),b
  2307  000186  0E40               	movlw	64
  2308  000188  0100               	movlb	0	; () banked
  2309  00018A  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2310  00018C  0E3F               	movlw	63
  2311  00018E  0100               	movlb	0	; () banked
  2312  000190  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2313  000192  C090  F0D6         	movff	_color+6,___awtoft@c
  2314  000196  C091  F0D7         	movff	_color+7,___awtoft@c+1
  2315  00019A  ECEE  F016         	call	___awtoft	;wreg free
  2316  00019E  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2317  0001A2  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2318  0001A6  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2319  0001AA  ECFC  F009         	call	___ftmul	;wreg free
  2320  0001AE  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2321  0001B2  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2322  0001B6  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2323  0001BA  C08C  F0D6         	movff	_color+2,___awtoft@c
  2324  0001BE  C08D  F0D7         	movff	_color+3,___awtoft@c+1
  2325  0001C2  ECEE  F016         	call	___awtoft	;wreg free
  2326  0001C6  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2327  0001CA  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2328  0001CE  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2329  0001D2  EC57  F011         	call	___ftge	;wreg free
  2330  0001D6  0101               	movlb	1	; () banked
  2331  0001D8  A0D8               	btfss	status,0,c
  2332  0001DA  D005               	goto	l5570
  2333                           
  2334                           ; BSR set to: 1
  2335  0001DC  0E00               	movlw	0
  2336  0001DE  0100               	movlb	0	; () banked
  2337  0001E0  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2338  0001E2  0E02               	movlw	2
  2339  0001E4  D004               	goto	L3
  2340  0001E6                     l5570:
  2341                           
  2342                           ;main.c: 353: else bottle_read_top = 0;
  2343  0001E6  0E00               	movlw	0
  2344  0001E8  0100               	movlb	0	; () banked
  2345  0001EA  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2346  0001EC  0E00               	movlw	0
  2347  0001EE                     L3:
  2348  0001EE  6FA9               	movwf	_bottle_read_top& (0+255),b
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 354: flag_top_read = 1;
  2352                           
  2353                           ; BSR set to: 0
  2354  0001F0  0E00               	movlw	0
  2355  0001F2  0100               	movlb	0	; () banked
  2356  0001F4  6FB4               	movwf	(_flag_top_read+1)& (0+255),b
  2357  0001F6  0E01               	movlw	1
  2358  0001F8  6FB3               	movwf	_flag_top_read& (0+255),b
  2359  0001FA                     l333:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;main.c: 355: }
  2363                           ;main.c: 356: flag_bottle_high = 1;
  2364  0001FA  0E00               	movlw	0
  2365  0001FC  0100               	movlb	0	; () banked
  2366  0001FE  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2367  000200  0E01               	movlw	1
  2368  000202  D081               	goto	L4
  2369  000204                     l5572:
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 358: else if(color[0]<30){
  2373  000204  0100               	movlb	0	; () banked
  2374  000206  BF8B               	btfsc	(_color+1)& (0+255),7,b
  2375  000208  D008               	goto	l5574
  2376  00020A  0100               	movlb	0	; () banked
  2377  00020C  518B               	movf	(_color+1)& (0+255),w,b
  2378  00020E  E104               	bnz	u5551
  2379  000210  0E1E               	movlw	30
  2380  000212  0100               	movlb	0	; () banked
  2381  000214  5D8A               	subwf	_color& (0+255),w,b
  2382  000216  B0D8               	btfsc	status,0,c
  2383  000218                     u5551:
  2384  000218  D0F2               	goto	l5630
  2385  00021A                     l5574:
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;main.c: 359: if(flag_bottle_high){
  2389  00021A  0100               	movlb	0	; () banked
  2390  00021C  51AF               	movf	_flag_bottle_high& (0+255),w,b
  2391  00021E  0100               	movlb	0	; () banked
  2392  000220  11B0               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2393  000222  B4D8               	btfsc	status,2,c
  2394  000224  D0EC               	goto	l5630
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 362: if(colorprev[1] > 1.5*colorprev[3]) bottle_read_bot = 1;
  2398  000226  0E00               	movlw	0
  2399  000228  0100               	movlb	0	; () banked
  2400  00022A  6FDD               	movwf	___ftmul@f2& (0+255),b
  2401  00022C  0EC0               	movlw	192
  2402  00022E  0100               	movlb	0	; () banked
  2403  000230  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2404  000232  0E3F               	movlw	63
  2405  000234  0100               	movlb	0	; () banked
  2406  000236  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2407  000238  C098  F0D6         	movff	_colorprev+6,___awtoft@c
  2408  00023C  C099  F0D7         	movff	_colorprev+7,___awtoft@c+1
  2409  000240  ECEE  F016         	call	___awtoft	;wreg free
  2410  000244  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2411  000248  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2412  00024C  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2413  000250  ECFC  F009         	call	___ftmul	;wreg free
  2414  000254  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2415  000258  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2416  00025C  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2417  000260  C094  F0D6         	movff	_colorprev+2,___awtoft@c
  2418  000264  C095  F0D7         	movff	_colorprev+3,___awtoft@c+1
  2419  000268  ECEE  F016         	call	___awtoft	;wreg free
  2420  00026C  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2421  000270  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2422  000274  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2423  000278  EC57  F011         	call	___ftge	;wreg free
  2424  00027C  0101               	movlb	1	; () banked
  2425  00027E  B0D8               	btfsc	status,0,c
  2426  000280  D005               	goto	l5580
  2427                           
  2428                           ; BSR set to: 1
  2429  000282  0E00               	movlw	0
  2430  000284  0100               	movlb	0	; () banked
  2431  000286  6FA8               	movwf	(_bottle_read_bot+1)& (0+255),b
  2432  000288  0E01               	movlw	1
  2433  00028A  D032               	goto	L5
  2434  00028C                     l5580:
  2435                           
  2436                           ;main.c: 363: else if(colorprev[1] <= 0.75*colorprev[3]) bottle_read_bot = 2;
  2437  00028C  0E00               	movlw	0
  2438  00028E  0100               	movlb	0	; () banked
  2439  000290  6FDD               	movwf	___ftmul@f2& (0+255),b
  2440  000292  0E40               	movlw	64
  2441  000294  0100               	movlb	0	; () banked
  2442  000296  6FDE               	movwf	(___ftmul@f2+1)& (0+255),b
  2443  000298  0E3F               	movlw	63
  2444  00029A  0100               	movlb	0	; () banked
  2445  00029C  6FDF               	movwf	(___ftmul@f2+2)& (0+255),b
  2446  00029E  C098  F0D6         	movff	_colorprev+6,___awtoft@c
  2447  0002A2  C099  F0D7         	movff	_colorprev+7,___awtoft@c+1
  2448  0002A6  ECEE  F016         	call	___awtoft	;wreg free
  2449  0002AA  C0D6  F0DA         	movff	?___awtoft,___ftmul@f1
  2450  0002AE  C0D7  F0DB         	movff	?___awtoft+1,___ftmul@f1+1
  2451  0002B2  C0D8  F0DC         	movff	?___awtoft+2,___ftmul@f1+2
  2452  0002B6  ECFC  F009         	call	___ftmul	;wreg free
  2453  0002BA  C0DA  F100         	movff	?___ftmul,___ftge@ff1
  2454  0002BE  C0DB  F101         	movff	?___ftmul+1,___ftge@ff1+1
  2455  0002C2  C0DC  F102         	movff	?___ftmul+2,___ftge@ff1+2
  2456  0002C6  C094  F0D6         	movff	_colorprev+2,___awtoft@c
  2457  0002CA  C095  F0D7         	movff	_colorprev+3,___awtoft@c+1
  2458  0002CE  ECEE  F016         	call	___awtoft	;wreg free
  2459  0002D2  C0D6  F103         	movff	?___awtoft,___ftge@ff2
  2460  0002D6  C0D7  F104         	movff	?___awtoft+1,___ftge@ff2+1
  2461  0002DA  C0D8  F105         	movff	?___awtoft+2,___ftge@ff2+2
  2462  0002DE  EC57  F011         	call	___ftge	;wreg free
  2463  0002E2  0101               	movlb	1	; () banked
  2464  0002E4  A0D8               	btfss	status,0,c
  2465  0002E6  D006               	goto	l5584
  2466                           
  2467                           ; BSR set to: 1
  2468  0002E8  0E00               	movlw	0
  2469  0002EA  0100               	movlb	0	; () banked
  2470  0002EC  6FA8               	movwf	(_bottle_read_bot+1)& (0+255),b
  2471  0002EE  0E02               	movlw	2
  2472  0002F0                     L5:
  2473  0002F0  6FA7               	movwf	_bottle_read_bot& (0+255),b
  2474  0002F2  D005               	goto	l342
  2475  0002F4                     l5584:
  2476                           
  2477                           ;main.c: 364: else bottle_read_top = 0;
  2478  0002F4  0E00               	movlw	0
  2479  0002F6  0100               	movlb	0	; () banked
  2480  0002F8  6FAA               	movwf	(_bottle_read_top+1)& (0+255),b
  2481  0002FA  0E00               	movlw	0
  2482  0002FC  6FA9               	movwf	_bottle_read_top& (0+255),b
  2483  0002FE                     l342:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 365: flag_bottle_high = 0;
  2487  0002FE  0E00               	movlw	0
  2488  000300  0100               	movlb	0	; () banked
  2489  000302  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2490  000304  0E00               	movlw	0
  2491  000306                     L4:
  2492  000306  6FAF               	movwf	_flag_bottle_high& (0+255),b
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 366: }
  2496                           ;main.c: 367: }
  2497                           ;main.c: 368: }
  2498                           
  2499                           ; BSR set to: 0
  2500                           
  2501                           ; BSR set to: 0
  2502  000308  D07A               	goto	l5630
  2503  00030A                     l5586:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 370: else if(flag_bottle){
  2507  00030A  0100               	movlb	0	; () banked
  2508  00030C  51AD               	movf	_flag_bottle& (0+255),w,b
  2509  00030E  0100               	movlb	0	; () banked
  2510  000310  11AE               	iorwf	(_flag_bottle+1)& (0+255),w,b
  2511  000312  B4D8               	btfsc	status,2,c
  2512  000314  D074               	goto	l5630
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;main.c: 371: flag_picbug += 1;
  2516  000316  0100               	movlb	0	; () banked
  2517  000318  4BB1               	infsnz	_flag_picbug& (0+255),f,b
  2518  00031A  2BB2               	incf	(_flag_picbug+1)& (0+255),f,b
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;main.c: 372: if(flag_picbug>7){
  2522  00031C  0100               	movlb	0	; () banked
  2523  00031E  BFB2               	btfsc	(_flag_picbug+1)& (0+255),7,b
  2524  000320  D06E               	goto	l5630
  2525  000322  0100               	movlb	0	; () banked
  2526  000324  51B2               	movf	(_flag_picbug+1)& (0+255),w,b
  2527  000326  E105               	bnz	u5600
  2528  000328  0E08               	movlw	8
  2529  00032A  0100               	movlb	0	; () banked
  2530  00032C  5DB1               	subwf	_flag_picbug& (0+255),w,b
  2531  00032E  A0D8               	btfss	status,0,c
  2532  000330  D066               	goto	l5630
  2533  000332                     u5600:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 373: bottle_count_array[0] += 1;
  2537  000332  0100               	movlb	0	; () banked
  2538  000334  4B80               	infsnz	_bottle_count_array& (0+255),f,b
  2539  000336  2B81               	incf	(_bottle_count_array+1)& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;main.c: 374: TMR0 = 0;
  2543  000338  0E00               	movlw	0
  2544  00033A  6ED7               	movwf	4055,c	;volatile
  2545  00033C  0E00               	movlw	0
  2546  00033E  6ED6               	movwf	4054,c	;volatile
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 375: if(bottle_read_top == 1 || bottle_read_bot == 1){
  2550  000340  0100               	movlb	0	; () banked
  2551  000342  05A9               	decf	_bottle_read_top& (0+255),w,b
  2552  000344  0100               	movlb	0	; () banked
  2553  000346  11AA               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2554  000348  B4D8               	btfsc	status,2,c
  2555  00034A  D006               	goto	l5600
  2556                           
  2557                           ; BSR set to: 0
  2558  00034C  0100               	movlb	0	; () banked
  2559  00034E  05A7               	decf	_bottle_read_bot& (0+255),w,b
  2560  000350  0100               	movlb	0	; () banked
  2561  000352  11A8               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2562  000354  A4D8               	btfss	status,2,c
  2563  000356  D00B               	goto	l5604
  2564  000358                     l5600:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 376: bottle_count_array[1] += 1;
  2568  000358  0100               	movlb	0	; () banked
  2569  00035A  4B82               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  2570  00035C  2B83               	incf	(_bottle_count_array+3)& (0+255),f,b
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 377: servo_rotate0(8);
  2574  00035E  0E00               	movlw	0
  2575  000360  0100               	movlb	0	; () banked
  2576  000362  6FCF               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2577  000364  0E08               	movlw	8
  2578  000366  6FCE               	movwf	servo_rotate0@degree& (0+255),b
  2579  000368  EC27  F013         	call	_servo_rotate0	;wreg free
  2580                           
  2581                           ;main.c: 378: }
  2582  00036C  D034               	goto	l5622
  2583  00036E                     l5604:
  2584                           
  2585                           ;main.c: 379: else if(bottle_read_top == 2 || bottle_read_bot == 2){
  2586  00036E  0E02               	movlw	2
  2587  000370  0100               	movlb	0	; () banked
  2588  000372  19A9               	xorwf	_bottle_read_top& (0+255),w,b
  2589  000374  0100               	movlb	0	; () banked
  2590  000376  11AA               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  2591  000378  B4D8               	btfsc	status,2,c
  2592  00037A  D007               	goto	l5608
  2593                           
  2594                           ; BSR set to: 0
  2595  00037C  0E02               	movlw	2
  2596  00037E  0100               	movlb	0	; () banked
  2597  000380  19A7               	xorwf	_bottle_read_bot& (0+255),w,b
  2598  000382  0100               	movlb	0	; () banked
  2599  000384  11A8               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  2600  000386  A4D8               	btfss	status,2,c
  2601  000388  D00B               	goto	l5612
  2602  00038A                     l5608:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 380: bottle_count_array[3] += 1;
  2606  00038A  0100               	movlb	0	; () banked
  2607  00038C  4B86               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  2608  00038E  2B87               	incf	(_bottle_count_array+7)& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 381: servo_rotate1(8);
  2612  000390  0E00               	movlw	0
  2613  000392  0100               	movlb	0	; () banked
  2614  000394  6FCF               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2615  000396  0E08               	movlw	8
  2616  000398  6FCE               	movwf	servo_rotate1@degree& (0+255),b
  2617  00039A  ECD3  F012         	call	_servo_rotate1	;wreg free
  2618                           
  2619                           ;main.c: 382: }
  2620  00039E  D01B               	goto	l5622
  2621  0003A0                     l5612:
  2622                           
  2623                           ;main.c: 383: else if(flag_yopNC){
  2624  0003A0  0100               	movlb	0	; () banked
  2625  0003A2  51B5               	movf	_flag_yopNC& (0+255),w,b
  2626  0003A4  0100               	movlb	0	; () banked
  2627  0003A6  11B6               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  2628  0003A8  B4D8               	btfsc	status,2,c
  2629  0003AA  D00B               	goto	l5618
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 384: bottle_count_array[2] += 1;
  2633  0003AC  0100               	movlb	0	; () banked
  2634  0003AE  4B84               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  2635  0003B0  2B85               	incf	(_bottle_count_array+5)& (0+255),f,b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 385: servo_rotate0(18);
  2639  0003B2  0E00               	movlw	0
  2640  0003B4  0100               	movlb	0	; () banked
  2641  0003B6  6FCF               	movwf	(servo_rotate0@degree+1)& (0+255),b
  2642  0003B8  0E12               	movlw	18
  2643  0003BA  6FCE               	movwf	servo_rotate0@degree& (0+255),b
  2644  0003BC  EC27  F013         	call	_servo_rotate0	;wreg free
  2645                           
  2646                           ;main.c: 386: }
  2647  0003C0  D00A               	goto	l5622
  2648  0003C2                     l5618:
  2649                           
  2650                           ;main.c: 387: else{
  2651                           ;main.c: 388: bottle_count_array[4] += 1;
  2652  0003C2  0100               	movlb	0	; () banked
  2653  0003C4  4B88               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  2654  0003C6  2B89               	incf	(_bottle_count_array+9)& (0+255),f,b
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 389: servo_rotate1(18);
  2658  0003C8  0E00               	movlw	0
  2659  0003CA  0100               	movlb	0	; () banked
  2660  0003CC  6FCF               	movwf	(servo_rotate1@degree+1)& (0+255),b
  2661  0003CE  0E12               	movlw	18
  2662  0003D0  6FCE               	movwf	servo_rotate1@degree& (0+255),b
  2663  0003D2  ECD3  F012         	call	_servo_rotate1	;wreg free
  2664  0003D6                     l5622:
  2665                           
  2666                           ;main.c: 390: }
  2667                           ;main.c: 391: flag_bottle = 0;
  2668  0003D6  0E00               	movlw	0
  2669  0003D8  0100               	movlb	0	; () banked
  2670  0003DA  6FAE               	movwf	(_flag_bottle+1)& (0+255),b
  2671  0003DC  0E00               	movlw	0
  2672  0003DE  6FAD               	movwf	_flag_bottle& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 392: flag_bottle_high = 0;
  2676  0003E0  0E00               	movlw	0
  2677  0003E2  0100               	movlb	0	; () banked
  2678  0003E4  6FB0               	movwf	(_flag_bottle_high+1)& (0+255),b
  2679  0003E6  0E00               	movlw	0
  2680  0003E8  6FAF               	movwf	_flag_bottle_high& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 393: flag_top_read = 0;
  2684  0003EA  0E00               	movlw	0
  2685  0003EC  0100               	movlb	0	; () banked
  2686  0003EE  6FB4               	movwf	(_flag_top_read+1)& (0+255),b
  2687  0003F0  0E00               	movlw	0
  2688  0003F2  6FB3               	movwf	_flag_top_read& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 394: flag_yopNC = 0;
  2692  0003F4  0E00               	movlw	0
  2693  0003F6  0100               	movlb	0	; () banked
  2694  0003F8  6FB6               	movwf	(_flag_yopNC+1)& (0+255),b
  2695  0003FA  0E00               	movlw	0
  2696  0003FC  6FB5               	movwf	_flag_yopNC& (0+255),b
  2697  0003FE                     l5630:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 398: }
  2701                           ;main.c: 399: }
  2702                           ;main.c: 400: GIE = 1;
  2703  0003FE  8EF2               	bsf	intcon,7,c	;volatile
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 401: _delay((unsigned long)((3)*(10000000/4000.0)));
  2707  000400  0E0A               	movlw	10
  2708  000402  0100               	movlb	0	; () banked
  2709  000404  6FEC               	movwf	??_operation& (0+255),b
  2710  000406  0EBC               	movlw	188
  2711  000408                     u5717:
  2712  000408  2EE8               	decfsz	wreg,f,c
  2713  00040A  D7FE               	bra	u5717
  2714  00040C  2FEC               	decfsz	??_operation& (0+255),f,b
  2715  00040E  D7FC               	bra	u5717
  2716  000410  F000               	nop	
  2717  000412  0012               	return	
  2718  000414                     __end_of_operation:
  2719                           	opt stack 0
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           intcon	equ	0xFF2
  2725                           intcon2	equ	0xFF1
  2726                           intcon3	equ	0xFF0
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postinc1	equ	0xFE6
  2730                           postdec1	equ	0xFE5
  2731                           fsr1h	equ	0xFE2
  2732                           fsr1l	equ	0xFE1
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function _servo_rotate1 *****************
  2740 ;; Defined at:
  2741 ;;		line 440 in file "main.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  degree          2   16[BANK0 ] int 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  j               2   24[BANK0 ] unsigned int 
  2746 ;;  i               2   22[BANK0 ] unsigned int 
  2747 ;;  duty            2   20[BANK0 ] int 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:       10 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    7
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_operation
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text4
  2772  0025A6                     __ptext4:
  2773                           	opt stack 0
  2774  0025A6                     _servo_rotate1:
  2775                           	opt stack 22
  2776                           
  2777                           ;main.c: 445: unsigned int i;
  2778                           ;main.c: 446: unsigned int j;
  2779                           ;main.c: 447: int duty = degree;
  2780                           
  2781                           ;incstack = 0
  2782  0025A6  C0CE  F0D2         	movff	servo_rotate1@degree,servo_rotate1@duty
  2783  0025AA  C0CF  F0D3         	movff	servo_rotate1@degree+1,servo_rotate1@duty+1
  2784                           
  2785                           ;main.c: 448: for (i=0; i<10; i++) {
  2786  0025AE  0E00               	movlw	0
  2787  0025B0  0100               	movlb	0	; () banked
  2788  0025B2  6FD5               	movwf	(servo_rotate1@i+1)& (0+255),b
  2789  0025B4  0E00               	movlw	0
  2790  0025B6  6FD4               	movwf	servo_rotate1@i& (0+255),b
  2791  0025B8                     l5338:
  2792                           
  2793                           ; BSR set to: 0
  2794  0025B8  0100               	movlb	0	; () banked
  2795  0025BA  51D5               	movf	(servo_rotate1@i+1)& (0+255),w,b
  2796  0025BC  E147               	bnz	l389
  2797  0025BE  0E0A               	movlw	10
  2798  0025C0  0100               	movlb	0	; () banked
  2799  0025C2  5DD4               	subwf	servo_rotate1@i& (0+255),w,b
  2800  0025C4  B0D8               	btfsc	status,0,c
  2801  0025C6  0012               	return	
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 449: LATCbits.LATC1` = 1;
  2805                           
  2806                           ; BSR set to: 0
  2807  0025C8  828B               	bsf	3979,1,c	;volatile
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 450: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2811  0025CA  0E00               	movlw	0
  2812  0025CC  0100               	movlb	0	; () banked
  2813  0025CE  6FD7               	movwf	(servo_rotate1@j+1)& (0+255),b
  2814  0025D0  0E00               	movlw	0
  2815  0025D2  6FD6               	movwf	servo_rotate1@j& (0+255),b
  2816  0025D4  D007               	goto	l383
  2817  0025D6                     l5344:
  2818                           
  2819                           ; BSR set to: 0
  2820  0025D6  0E53               	movlw	83
  2821  0025D8                     u5727:
  2822  0025D8  2EE8               	decfsz	wreg,f,c
  2823  0025DA  D7FE               	bra	u5727
  2824  0025DC  F000               	nop	
  2825  0025DE  0100               	movlb	0	; () banked
  2826  0025E0  4BD6               	infsnz	servo_rotate1@j& (0+255),f,b
  2827  0025E2  2BD7               	incf	(servo_rotate1@j+1)& (0+255),f,b
  2828  0025E4                     l383:
  2829                           
  2830                           ; BSR set to: 0
  2831  0025E4  0100               	movlb	0	; () banked
  2832  0025E6  51D2               	movf	servo_rotate1@duty& (0+255),w,b
  2833  0025E8  0100               	movlb	0	; () banked
  2834  0025EA  5DD6               	subwf	servo_rotate1@j& (0+255),w,b
  2835  0025EC  0100               	movlb	0	; () banked
  2836  0025EE  51D3               	movf	(servo_rotate1@duty+1)& (0+255),w,b
  2837  0025F0  0100               	movlb	0	; () banked
  2838  0025F2  59D7               	subwfb	(servo_rotate1@j+1)& (0+255),w,b
  2839  0025F4  A0D8               	btfss	status,0,c
  2840  0025F6  D7EF               	goto	l5344
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 451: LATCbits.LATC1 = 0;
  2844  0025F8  928B               	bcf	3979,1,c	;volatile
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 452: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  2848  0025FA  0E00               	movlw	0
  2849  0025FC  0100               	movlb	0	; () banked
  2850  0025FE  6FD7               	movwf	(servo_rotate1@j+1)& (0+255),b
  2851  002600  0E00               	movlw	0
  2852  002602  6FD6               	movwf	servo_rotate1@j& (0+255),b
  2853  002604  D007               	goto	l386
  2854  002606                     l5350:
  2855                           
  2856                           ; BSR set to: 0
  2857  002606  0E53               	movlw	83
  2858  002608                     u5737:
  2859  002608  2EE8               	decfsz	wreg,f,c
  2860  00260A  D7FE               	bra	u5737
  2861  00260C  F000               	nop	
  2862  00260E  0100               	movlb	0	; () banked
  2863  002610  4BD6               	infsnz	servo_rotate1@j& (0+255),f,b
  2864  002612  2BD7               	incf	(servo_rotate1@j+1)& (0+255),f,b
  2865  002614                     l386:
  2866                           
  2867                           ; BSR set to: 0
  2868  002614  C0D2  F0D0         	movff	servo_rotate1@duty,??_servo_rotate1
  2869  002618  C0D3  F0D1         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
  2870  00261C  0100               	movlb	0	; () banked
  2871  00261E  1FD0               	comf	??_servo_rotate1& (0+255),f,b
  2872  002620  1FD1               	comf	(??_servo_rotate1+1)& (0+255),f,b
  2873  002622  4BD0               	infsnz	??_servo_rotate1& (0+255),f,b
  2874  002624  2BD1               	incf	(??_servo_rotate1+1)& (0+255),f,b
  2875  002626  0EC8               	movlw	200
  2876  002628  0100               	movlb	0	; () banked
  2877  00262A  27D0               	addwf	??_servo_rotate1& (0+255),f,b
  2878  00262C  0E00               	movlw	0
  2879  00262E  23D1               	addwfc	(??_servo_rotate1+1)& (0+255),f,b
  2880  002630  0100               	movlb	0	; () banked
  2881  002632  51D0               	movf	??_servo_rotate1& (0+255),w,b
  2882  002634  0100               	movlb	0	; () banked
  2883  002636  5DD6               	subwf	servo_rotate1@j& (0+255),w,b
  2884  002638  0100               	movlb	0	; () banked
  2885  00263A  51D1               	movf	(??_servo_rotate1+1)& (0+255),w,b
  2886  00263C  0100               	movlb	0	; () banked
  2887  00263E  59D7               	subwfb	(servo_rotate1@j+1)& (0+255),w,b
  2888  002640  A0D8               	btfss	status,0,c
  2889  002642  D7E1               	goto	l5350
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  002644  0100               	movlb	0	; () banked
  2895  002646  4BD4               	infsnz	servo_rotate1@i& (0+255),f,b
  2896  002648  2BD5               	incf	(servo_rotate1@i+1)& (0+255),f,b
  2897  00264A  D7B6               	goto	l5338
  2898  00264C                     l389:
  2899                           
  2900                           ; BSR set to: 0
  2901  00264C  0012               	return		;funcret
  2902  00264E                     __end_of_servo_rotate1:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           intcon	equ	0xFF2
  2909                           intcon2	equ	0xFF1
  2910                           intcon3	equ	0xFF0
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postinc1	equ	0xFE6
  2914                           postdec1	equ	0xFE5
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _servo_rotate0 *****************
  2924 ;; Defined at:
  2925 ;;		line 421 in file "main.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  degree          2   16[BANK0 ] int 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  j               2   24[BANK0 ] unsigned int 
  2930 ;;  i               2   22[BANK0 ] unsigned int 
  2931 ;;  duty            2   20[BANK0 ] int 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, status,2, status,0
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2941 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;Total ram usage:       10 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    7
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_operation
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           	psect	text5
  2956  00264E                     __ptext5:
  2957                           	opt stack 0
  2958  00264E                     _servo_rotate0:
  2959                           	opt stack 22
  2960                           
  2961                           ;main.c: 428: unsigned int i;
  2962                           ;main.c: 429: unsigned int j;
  2963                           ;main.c: 430: int duty = degree;
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;incstack = 0
  2967  00264E  C0CE  F0D2         	movff	servo_rotate0@degree,servo_rotate0@duty
  2968  002652  C0CF  F0D3         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
  2969                           
  2970                           ;main.c: 431: for (i=0; i<10; i++) {
  2971  002656  0E00               	movlw	0
  2972  002658  0100               	movlb	0	; () banked
  2973  00265A  6FD5               	movwf	(servo_rotate0@i+1)& (0+255),b
  2974  00265C  0E00               	movlw	0
  2975  00265E  6FD4               	movwf	servo_rotate0@i& (0+255),b
  2976  002660                     l5362:
  2977                           
  2978                           ; BSR set to: 0
  2979  002660  0100               	movlb	0	; () banked
  2980  002662  51D5               	movf	(servo_rotate0@i+1)& (0+255),w,b
  2981  002664  E147               	bnz	l378
  2982  002666  0E0A               	movlw	10
  2983  002668  0100               	movlb	0	; () banked
  2984  00266A  5DD4               	subwf	servo_rotate0@i& (0+255),w,b
  2985  00266C  B0D8               	btfsc	status,0,c
  2986  00266E  0012               	return	
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 432: LATCbits.LATC0 = 1;
  2990                           
  2991                           ; BSR set to: 0
  2992  002670  808B               	bsf	3979,0,c	;volatile
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 433: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  2996  002672  0E00               	movlw	0
  2997  002674  0100               	movlb	0	; () banked
  2998  002676  6FD7               	movwf	(servo_rotate0@j+1)& (0+255),b
  2999  002678  0E00               	movlw	0
  3000  00267A  6FD6               	movwf	servo_rotate0@j& (0+255),b
  3001  00267C  D007               	goto	l372
  3002  00267E                     l5368:
  3003                           
  3004                           ; BSR set to: 0
  3005  00267E  0E53               	movlw	83
  3006  002680                     u5747:
  3007  002680  2EE8               	decfsz	wreg,f,c
  3008  002682  D7FE               	bra	u5747
  3009  002684  F000               	nop	
  3010  002686  0100               	movlb	0	; () banked
  3011  002688  4BD6               	infsnz	servo_rotate0@j& (0+255),f,b
  3012  00268A  2BD7               	incf	(servo_rotate0@j+1)& (0+255),f,b
  3013  00268C                     l372:
  3014                           
  3015                           ; BSR set to: 0
  3016  00268C  0100               	movlb	0	; () banked
  3017  00268E  51D2               	movf	servo_rotate0@duty& (0+255),w,b
  3018  002690  0100               	movlb	0	; () banked
  3019  002692  5DD6               	subwf	servo_rotate0@j& (0+255),w,b
  3020  002694  0100               	movlb	0	; () banked
  3021  002696  51D3               	movf	(servo_rotate0@duty+1)& (0+255),w,b
  3022  002698  0100               	movlb	0	; () banked
  3023  00269A  59D7               	subwfb	(servo_rotate0@j+1)& (0+255),w,b
  3024  00269C  A0D8               	btfss	status,0,c
  3025  00269E  D7EF               	goto	l5368
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 434: LATCbits.LATC0 = 0;
  3029  0026A0  908B               	bcf	3979,0,c	;volatile
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;main.c: 435: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  3033  0026A2  0E00               	movlw	0
  3034  0026A4  0100               	movlb	0	; () banked
  3035  0026A6  6FD7               	movwf	(servo_rotate0@j+1)& (0+255),b
  3036  0026A8  0E00               	movlw	0
  3037  0026AA  6FD6               	movwf	servo_rotate0@j& (0+255),b
  3038  0026AC  D007               	goto	l375
  3039  0026AE                     l5374:
  3040                           
  3041                           ; BSR set to: 0
  3042  0026AE  0E53               	movlw	83
  3043  0026B0                     u5757:
  3044  0026B0  2EE8               	decfsz	wreg,f,c
  3045  0026B2  D7FE               	bra	u5757
  3046  0026B4  F000               	nop	
  3047  0026B6  0100               	movlb	0	; () banked
  3048  0026B8  4BD6               	infsnz	servo_rotate0@j& (0+255),f,b
  3049  0026BA  2BD7               	incf	(servo_rotate0@j+1)& (0+255),f,b
  3050  0026BC                     l375:
  3051                           
  3052                           ; BSR set to: 0
  3053  0026BC  C0D2  F0D0         	movff	servo_rotate0@duty,??_servo_rotate0
  3054  0026C0  C0D3  F0D1         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  3055  0026C4  0100               	movlb	0	; () banked
  3056  0026C6  1FD0               	comf	??_servo_rotate0& (0+255),f,b
  3057  0026C8  1FD1               	comf	(??_servo_rotate0+1)& (0+255),f,b
  3058  0026CA  4BD0               	infsnz	??_servo_rotate0& (0+255),f,b
  3059  0026CC  2BD1               	incf	(??_servo_rotate0+1)& (0+255),f,b
  3060  0026CE  0EC8               	movlw	200
  3061  0026D0  0100               	movlb	0	; () banked
  3062  0026D2  27D0               	addwf	??_servo_rotate0& (0+255),f,b
  3063  0026D4  0E00               	movlw	0
  3064  0026D6  23D1               	addwfc	(??_servo_rotate0+1)& (0+255),f,b
  3065  0026D8  0100               	movlb	0	; () banked
  3066  0026DA  51D0               	movf	??_servo_rotate0& (0+255),w,b
  3067  0026DC  0100               	movlb	0	; () banked
  3068  0026DE  5DD6               	subwf	servo_rotate0@j& (0+255),w,b
  3069  0026E0  0100               	movlb	0	; () banked
  3070  0026E2  51D1               	movf	(??_servo_rotate0+1)& (0+255),w,b
  3071  0026E4  0100               	movlb	0	; () banked
  3072  0026E6  59D7               	subwfb	(servo_rotate0@j+1)& (0+255),w,b
  3073  0026E8  A0D8               	btfss	status,0,c
  3074  0026EA  D7E1               	goto	l5374
  3075                           
  3076                           ; BSR set to: 0
  3077                           
  3078                           ; BSR set to: 0
  3079  0026EC  0100               	movlb	0	; () banked
  3080  0026EE  4BD4               	infsnz	servo_rotate0@i& (0+255),f,b
  3081  0026F0  2BD5               	incf	(servo_rotate0@i+1)& (0+255),f,b
  3082  0026F2  D7B6               	goto	l5362
  3083  0026F4                     l378:
  3084                           
  3085                           ; BSR set to: 0
  3086  0026F4  0012               	return		;funcret
  3087  0026F6                     __end_of_servo_rotate0:
  3088                           	opt stack 0
  3089                           tblptru	equ	0xFF8
  3090                           tblptrh	equ	0xFF7
  3091                           tblptrl	equ	0xFF6
  3092                           tablat	equ	0xFF5
  3093                           intcon	equ	0xFF2
  3094                           intcon2	equ	0xFF1
  3095                           intcon3	equ	0xFF0
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           postinc1	equ	0xFE6
  3099                           postdec1	equ	0xFE5
  3100                           fsr1h	equ	0xFE2
  3101                           fsr1l	equ	0xFE1
  3102                           postinc2	equ	0xFDE
  3103                           postdec2	equ	0xFDD
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           
  3108 ;; *************** function _read_colorsensor *****************
  3109 ;; Defined at:
  3110 ;;		line 457 in file "main.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  color_high      4   27[BANK0 ] unsigned char [4]
  3115 ;;  color_low       4   23[BANK0 ] unsigned char [4]
  3116 ;;  i               2   31[BANK0 ] int 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;Total ram usage:       14 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    9
  3133 ;; This function calls:
  3134 ;;		_I2C_Master_Read
  3135 ;;		_I2C_Master_Start
  3136 ;;		_I2C_Master_Stop
  3137 ;;		_I2C_Master_Write
  3138 ;; This function is called by:
  3139 ;;		_standby
  3140 ;;		_operation
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           	psect	text6
  3145  001796                     __ptext6:
  3146                           	opt stack 0
  3147  001796                     _read_colorsensor:
  3148                           	opt stack 20
  3149                           
  3150                           ;main.c: 458: unsigned char color_low[4];
  3151                           ;main.c: 459: unsigned char color_high[4];
  3152                           ;main.c: 460: int i;
  3153                           ;main.c: 482: I2C_Master_Start();
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;incstack = 0
  3157  001796  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  3158                           
  3159                           ;main.c: 483: I2C_Master_Write(0b01010011);
  3160  00179A  0E00               	movlw	0
  3161  00179C  0100               	movlb	0	; () banked
  3162  00179E  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3163  0017A0  0E53               	movlw	83
  3164  0017A2  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  3165  0017A4  EC81  F018         	call	_I2C_Master_Write	;wreg free
  3166                           
  3167                           ;main.c: 484: for(i=0; i<3; i++){
  3168  0017A8  0E00               	movlw	0
  3169  0017AA  0100               	movlb	0	; () banked
  3170  0017AC  6FDE               	movwf	(read_colorsensor@i+1)& (0+255),b
  3171  0017AE  0E00               	movlw	0
  3172  0017B0  6FDD               	movwf	read_colorsensor@i& (0+255),b
  3173  0017B2                     l5310:
  3174                           
  3175                           ; BSR set to: 0
  3176  0017B2  0100               	movlb	0	; () banked
  3177  0017B4  BFDE               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  3178  0017B6  D008               	goto	l5314
  3179  0017B8  0100               	movlb	0	; () banked
  3180  0017BA  51DE               	movf	(read_colorsensor@i+1)& (0+255),w,b
  3181  0017BC  E121               	bnz	l5320
  3182  0017BE  0E03               	movlw	3
  3183  0017C0  0100               	movlb	0	; () banked
  3184  0017C2  5DDD               	subwf	read_colorsensor@i& (0+255),w,b
  3185  0017C4  B0D8               	btfsc	status,0,c
  3186  0017C6  D01C               	goto	l5320
  3187  0017C8                     l5314:
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;main.c: 485: color_low[i] = I2C_Master_Read(1);
  3191  0017C8  0ED5               	movlw	low read_colorsensor@color_low
  3192  0017CA  0100               	movlb	0	; () banked
  3193  0017CC  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3194  0017CE  6ED9               	movwf	fsr2l,c
  3195  0017D0  0E00               	movlw	high read_colorsensor@color_low
  3196  0017D2  0100               	movlb	0	; () banked
  3197  0017D4  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3198  0017D6  6EDA               	movwf	fsr2h,c
  3199  0017D8  0E01               	movlw	1
  3200  0017DA  ECC2  F017         	call	_I2C_Master_Read
  3201  0017DE  6EDF               	movwf	indf2,c
  3202                           
  3203                           ;main.c: 486: color_high[i] = I2C_Master_Read(1);
  3204  0017E0  0ED9               	movlw	low read_colorsensor@color_high
  3205  0017E2  0100               	movlb	0	; () banked
  3206  0017E4  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3207  0017E6  6ED9               	movwf	fsr2l,c
  3208  0017E8  0E00               	movlw	high read_colorsensor@color_high
  3209  0017EA  0100               	movlb	0	; () banked
  3210  0017EC  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3211  0017EE  6EDA               	movwf	fsr2h,c
  3212  0017F0  0E01               	movlw	1
  3213  0017F2  ECC2  F017         	call	_I2C_Master_Read
  3214  0017F6  6EDF               	movwf	indf2,c
  3215  0017F8  0100               	movlb	0	; () banked
  3216  0017FA  4BDD               	infsnz	read_colorsensor@i& (0+255),f,b
  3217  0017FC  2BDE               	incf	(read_colorsensor@i+1)& (0+255),f,b
  3218  0017FE  D7D9               	goto	l5310
  3219  001800                     l5320:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 487: }
  3223                           ;main.c: 488: color_low[3] = I2C_Master_Read(1);
  3224  001800  0E01               	movlw	1
  3225  001802  ECC2  F017         	call	_I2C_Master_Read
  3226  001806  0100               	movlb	0	; () banked
  3227  001808  6FD8               	movwf	(read_colorsensor@color_low+3)& (0+255),b
  3228                           
  3229                           ;main.c: 489: color_high[3] = I2C_Master_Read(0);
  3230  00180A  0E00               	movlw	0
  3231  00180C  ECC2  F017         	call	_I2C_Master_Read
  3232  001810  0100               	movlb	0	; () banked
  3233  001812  6FDC               	movwf	(read_colorsensor@color_high+3)& (0+255),b
  3234                           
  3235                           ;main.c: 490: I2C_Master_Stop();
  3236  001814  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  3237                           
  3238                           ;main.c: 491: for(i=0; i<4; i++){
  3239  001818  0E00               	movlw	0
  3240  00181A  0100               	movlb	0	; () banked
  3241  00181C  6FDE               	movwf	(read_colorsensor@i+1)& (0+255),b
  3242  00181E  0E00               	movlw	0
  3243  001820  6FDD               	movwf	read_colorsensor@i& (0+255),b
  3244  001822                     l5324:
  3245                           
  3246                           ; BSR set to: 0
  3247  001822  0100               	movlb	0	; () banked
  3248  001824  BFDE               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  3249  001826  D008               	goto	l5328
  3250  001828  0100               	movlb	0	; () banked
  3251  00182A  51DE               	movf	(read_colorsensor@i+1)& (0+255),w,b
  3252  00182C  E139               	bnz	l396
  3253  00182E  0E04               	movlw	4
  3254  001830  0100               	movlb	0	; () banked
  3255  001832  5DDD               	subwf	read_colorsensor@i& (0+255),w,b
  3256  001834  B0D8               	btfsc	status,0,c
  3257  001836  0012               	return	
  3258  001838                     l5328:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 492: color[i] = (color_high[i] << 8)|(color_low[i]);
  3262  001838  0ED9               	movlw	low read_colorsensor@color_high
  3263  00183A  0100               	movlb	0	; () banked
  3264  00183C  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3265  00183E  6ED9               	movwf	fsr2l,c
  3266  001840  0E00               	movlw	high read_colorsensor@color_high
  3267  001842  0100               	movlb	0	; () banked
  3268  001844  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3269  001846  6EDA               	movwf	fsr2h,c
  3270  001848  50DF               	movf	indf2,w,c
  3271  00184A  0100               	movlb	0	; () banked
  3272  00184C  6FD1               	movwf	??_read_colorsensor& (0+255),b
  3273  00184E  0100               	movlb	0	; () banked
  3274  001850  51D1               	movf	??_read_colorsensor& (0+255),w,b
  3275  001852  0100               	movlb	0	; () banked
  3276  001854  6FD3               	movwf	(??_read_colorsensor+2)& (0+255),b
  3277  001856  6BD2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3278  001858  0ED5               	movlw	low read_colorsensor@color_low
  3279  00185A  0100               	movlb	0	; () banked
  3280  00185C  25DD               	addwf	read_colorsensor@i& (0+255),w,b
  3281  00185E  6ED9               	movwf	fsr2l,c
  3282  001860  0E00               	movlw	high read_colorsensor@color_low
  3283  001862  0100               	movlb	0	; () banked
  3284  001864  21DE               	addwfc	(read_colorsensor@i+1)& (0+255),w,b
  3285  001866  6EDA               	movwf	fsr2h,c
  3286  001868  50DF               	movf	indf2,w,c
  3287  00186A  0100               	movlb	0	; () banked
  3288  00186C  6FD4               	movwf	(??_read_colorsensor+3)& (0+255),b
  3289  00186E  0100               	movlb	0	; () banked
  3290  001870  51D4               	movf	(??_read_colorsensor+3)& (0+255),w,b
  3291  001872  0100               	movlb	0	; () banked
  3292  001874  13D2               	iorwf	(??_read_colorsensor+1)& (0+255),f,b
  3293  001876  0E00               	movlw	0
  3294  001878  13D3               	iorwf	(??_read_colorsensor+2)& (0+255),f,b
  3295  00187A  90D8               	bcf	status,0,c
  3296  00187C  0100               	movlb	0	; () banked
  3297  00187E  35DD               	rlcf	read_colorsensor@i& (0+255),w,b
  3298  001880  6ED9               	movwf	fsr2l,c
  3299  001882  0100               	movlb	0	; () banked
  3300  001884  35DE               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  3301  001886  6EDA               	movwf	fsr2h,c
  3302  001888  0E8A               	movlw	low _color
  3303  00188A  26D9               	addwf	fsr2l,f,c
  3304  00188C  0E00               	movlw	high _color
  3305  00188E  22DA               	addwfc	fsr2h,f,c
  3306  001890  C0D2  FFDE         	movff	??_read_colorsensor+1,postinc2
  3307  001894  C0D3  FFDD         	movff	??_read_colorsensor+2,postdec2
  3308                           
  3309                           ; BSR set to: 0
  3310  001898  0100               	movlb	0	; () banked
  3311  00189A  4BDD               	infsnz	read_colorsensor@i& (0+255),f,b
  3312  00189C  2BDE               	incf	(read_colorsensor@i+1)& (0+255),f,b
  3313  00189E  D7C1               	goto	l5324
  3314  0018A0                     l396:
  3315                           
  3316                           ; BSR set to: 0
  3317  0018A0  0012               	return		;funcret
  3318  0018A2                     __end_of_read_colorsensor:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           intcon	equ	0xFF2
  3325                           intcon2	equ	0xFF1
  3326                           intcon3	equ	0xFF0
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           postinc1	equ	0xFE6
  3330                           postdec1	equ	0xFE5
  3331                           fsr1h	equ	0xFE2
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           postinc2	equ	0xFDE
  3335                           postdec2	equ	0xFDD
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function ___ftmul *****************
  3341 ;; Defined at:
  3342 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  f1              3   28[BANK0 ] float 
  3345 ;;  f2              3   31[BANK0 ] float 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  f3_as_produc    3   38[BANK0 ] unsigned um
  3348 ;;  sign            1   42[BANK0 ] unsigned char 
  3349 ;;  cntr            1   41[BANK0 ] unsigned char 
  3350 ;;  exp             1   37[BANK0 ] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  3   28[BANK0 ] float 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3360 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;Total ram usage:       15 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    8
  3367 ;; This function calls:
  3368 ;;		___ftpack
  3369 ;; This function is called by:
  3370 ;;		_operation
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text7
  3375  0013F8                     __ptext7:
  3376                           	opt stack 0
  3377  0013F8                     ___ftmul:
  3378                           	opt stack 21
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;incstack = 0
  3382  0013F8  C0DC  F0E0         	movff	___ftmul@f1+2,??___ftmul
  3383  0013FC  0100               	movlb	0	; () banked
  3384  0013FE  6BE1               	clrf	(??___ftmul+1)& (0+255),b
  3385  001400  6BE2               	clrf	(??___ftmul+2)& (0+255),b
  3386  001402  0100               	movlb	0	; () banked
  3387  001404  35DB               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3388  001406  0100               	movlb	0	; () banked
  3389  001408  37E0               	rlcf	??___ftmul& (0+255),f,b
  3390  00140A  E301               	bnc	u5371
  3391  00140C  81E1               	bsf	(??___ftmul+1)& (0+255),0,b
  3392  00140E                     u5371:
  3393  00140E  0100               	movlb	0	; () banked
  3394  001410  51E0               	movf	??___ftmul& (0+255),w,b
  3395  001412  0100               	movlb	0	; () banked
  3396  001414  6FE3               	movwf	___ftmul@exp& (0+255),b
  3397  001416  0100               	movlb	0	; () banked
  3398  001418  51E3               	movf	___ftmul@exp& (0+255),w,b
  3399  00141A  A4D8               	btfss	status,2,c
  3400  00141C  D00A               	goto	l5388
  3401                           
  3402                           ; BSR set to: 0
  3403  00141E  0E00               	movlw	0
  3404  001420  0100               	movlb	0	; () banked
  3405  001422  6FDA               	movwf	?___ftmul& (0+255),b
  3406  001424  0E00               	movlw	0
  3407  001426  0100               	movlb	0	; () banked
  3408  001428  6FDB               	movwf	(?___ftmul+1)& (0+255),b
  3409  00142A  0E00               	movlw	0
  3410  00142C  0100               	movlb	0	; () banked
  3411  00142E  6FDC               	movwf	(?___ftmul+2)& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414  001430  0012               	return	
  3415  001432                     l5388:
  3416                           
  3417                           ; BSR set to: 0
  3418  001432  C0DF  F0E0         	movff	___ftmul@f2+2,??___ftmul
  3419  001436  0100               	movlb	0	; () banked
  3420  001438  6BE1               	clrf	(??___ftmul+1)& (0+255),b
  3421  00143A  6BE2               	clrf	(??___ftmul+2)& (0+255),b
  3422  00143C  0100               	movlb	0	; () banked
  3423  00143E  35DE               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3424  001440  0100               	movlb	0	; () banked
  3425  001442  37E0               	rlcf	??___ftmul& (0+255),f,b
  3426  001444  E301               	bnc	u5391
  3427  001446  81E1               	bsf	(??___ftmul+1)& (0+255),0,b
  3428  001448                     u5391:
  3429  001448  0100               	movlb	0	; () banked
  3430  00144A  51E0               	movf	??___ftmul& (0+255),w,b
  3431  00144C  0100               	movlb	0	; () banked
  3432  00144E  6FE8               	movwf	___ftmul@sign& (0+255),b
  3433  001450  0100               	movlb	0	; () banked
  3434  001452  51E8               	movf	___ftmul@sign& (0+255),w,b
  3435  001454  A4D8               	btfss	status,2,c
  3436  001456  D00A               	goto	l5394
  3437                           
  3438                           ; BSR set to: 0
  3439  001458  0E00               	movlw	0
  3440  00145A  0100               	movlb	0	; () banked
  3441  00145C  6FDA               	movwf	?___ftmul& (0+255),b
  3442  00145E  0E00               	movlw	0
  3443  001460  0100               	movlb	0	; () banked
  3444  001462  6FDB               	movwf	(?___ftmul+1)& (0+255),b
  3445  001464  0E00               	movlw	0
  3446  001466  0100               	movlb	0	; () banked
  3447  001468  6FDC               	movwf	(?___ftmul+2)& (0+255),b
  3448                           
  3449                           ; BSR set to: 0
  3450  00146A  0012               	return	
  3451  00146C                     l5394:
  3452                           
  3453                           ; BSR set to: 0
  3454  00146C  0100               	movlb	0	; () banked
  3455  00146E  51E8               	movf	___ftmul@sign& (0+255),w,b
  3456  001470  0F7B               	addlw	123
  3457  001472  0100               	movlb	0	; () banked
  3458  001474  27E3               	addwf	___ftmul@exp& (0+255),f,b
  3459                           
  3460                           ; BSR set to: 0
  3461  001476  C0DC  F0E8         	movff	___ftmul@f1+2,___ftmul@sign
  3462  00147A  0100               	movlb	0	; () banked
  3463  00147C  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3464  00147E  0100               	movlb	0	; () banked
  3465  001480  1BE8               	xorwf	___ftmul@sign& (0+255),f,b
  3466  001482  0E80               	movlw	128
  3467  001484  0100               	movlb	0	; () banked
  3468  001486  17E8               	andwf	___ftmul@sign& (0+255),f,b
  3469                           
  3470                           ; BSR set to: 0
  3471  001488  0100               	movlb	0	; () banked
  3472  00148A  8FDB               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3473                           
  3474                           ; BSR set to: 0
  3475  00148C  0100               	movlb	0	; () banked
  3476  00148E  8FDE               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3477                           
  3478                           ; BSR set to: 0
  3479  001490  0EFF               	movlw	255
  3480  001492  0100               	movlb	0	; () banked
  3481  001494  17DD               	andwf	___ftmul@f2& (0+255),f,b
  3482  001496  0EFF               	movlw	255
  3483  001498  0100               	movlb	0	; () banked
  3484  00149A  17DE               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3485  00149C  0E00               	movlw	0
  3486  00149E  0100               	movlb	0	; () banked
  3487  0014A0  17DF               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3488                           
  3489                           ; BSR set to: 0
  3490  0014A2  0E00               	movlw	0
  3491  0014A4  0100               	movlb	0	; () banked
  3492  0014A6  6FE4               	movwf	___ftmul@f3_as_product& (0+255),b
  3493  0014A8  0E00               	movlw	0
  3494  0014AA  0100               	movlb	0	; () banked
  3495  0014AC  6FE5               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3496  0014AE  0E00               	movlw	0
  3497  0014B0  0100               	movlb	0	; () banked
  3498  0014B2  6FE6               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3499                           
  3500                           ; BSR set to: 0
  3501  0014B4  0E07               	movlw	7
  3502  0014B6  0100               	movlb	0	; () banked
  3503  0014B8  6FE7               	movwf	___ftmul@cntr& (0+255),b
  3504  0014BA                     l5408:
  3505                           
  3506                           ; BSR set to: 0
  3507  0014BA  0100               	movlb	0	; () banked
  3508  0014BC  A1DA               	btfss	___ftmul@f1& (0+255),0,b
  3509  0014BE  D00C               	goto	l5412
  3510                           
  3511                           ; BSR set to: 0
  3512  0014C0  0100               	movlb	0	; () banked
  3513  0014C2  51DD               	movf	___ftmul@f2& (0+255),w,b
  3514  0014C4  0100               	movlb	0	; () banked
  3515  0014C6  27E4               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3516  0014C8  0100               	movlb	0	; () banked
  3517  0014CA  51DE               	movf	(___ftmul@f2+1)& (0+255),w,b
  3518  0014CC  0100               	movlb	0	; () banked
  3519  0014CE  23E5               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3520  0014D0  0100               	movlb	0	; () banked
  3521  0014D2  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3522  0014D4  0100               	movlb	0	; () banked
  3523  0014D6  23E6               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3524  0014D8                     l5412:
  3525                           
  3526                           ; BSR set to: 0
  3527  0014D8  0100               	movlb	0	; () banked
  3528  0014DA  90D8               	bcf	status,0,c
  3529  0014DC  33DC               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3530  0014DE  33DB               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3531  0014E0  33DA               	rrcf	___ftmul@f1& (0+255),f,b
  3532  0014E2  0100               	movlb	0	; () banked
  3533  0014E4  90D8               	bcf	status,0,c
  3534  0014E6  37DD               	rlcf	___ftmul@f2& (0+255),f,b
  3535  0014E8  37DE               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3536  0014EA  37DF               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3537                           
  3538                           ; BSR set to: 0
  3539  0014EC  0100               	movlb	0	; () banked
  3540  0014EE  2FE7               	decfsz	___ftmul@cntr& (0+255),f,b
  3541  0014F0  D7E4               	goto	l5408
  3542                           
  3543                           ; BSR set to: 0
  3544                           
  3545                           ; BSR set to: 0
  3546  0014F2  0E09               	movlw	9
  3547  0014F4  0100               	movlb	0	; () banked
  3548  0014F6  6FE7               	movwf	___ftmul@cntr& (0+255),b
  3549  0014F8                     l5418:
  3550                           
  3551                           ; BSR set to: 0
  3552  0014F8  0100               	movlb	0	; () banked
  3553  0014FA  A1DA               	btfss	___ftmul@f1& (0+255),0,b
  3554  0014FC  D00C               	goto	l5422
  3555                           
  3556                           ; BSR set to: 0
  3557  0014FE  0100               	movlb	0	; () banked
  3558  001500  51DD               	movf	___ftmul@f2& (0+255),w,b
  3559  001502  0100               	movlb	0	; () banked
  3560  001504  27E4               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3561  001506  0100               	movlb	0	; () banked
  3562  001508  51DE               	movf	(___ftmul@f2+1)& (0+255),w,b
  3563  00150A  0100               	movlb	0	; () banked
  3564  00150C  23E5               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3565  00150E  0100               	movlb	0	; () banked
  3566  001510  51DF               	movf	(___ftmul@f2+2)& (0+255),w,b
  3567  001512  0100               	movlb	0	; () banked
  3568  001514  23E6               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3569  001516                     l5422:
  3570                           
  3571                           ; BSR set to: 0
  3572  001516  0100               	movlb	0	; () banked
  3573  001518  90D8               	bcf	status,0,c
  3574  00151A  33DC               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3575  00151C  33DB               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3576  00151E  33DA               	rrcf	___ftmul@f1& (0+255),f,b
  3577  001520  0100               	movlb	0	; () banked
  3578  001522  90D8               	bcf	status,0,c
  3579  001524  33E6               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3580  001526  33E5               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3581  001528  33E4               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3582                           
  3583                           ; BSR set to: 0
  3584  00152A  0100               	movlb	0	; () banked
  3585  00152C  2FE7               	decfsz	___ftmul@cntr& (0+255),f,b
  3586  00152E  D7E4               	goto	l5418
  3587                           
  3588                           ; BSR set to: 0
  3589                           
  3590                           ; BSR set to: 0
  3591  001530  C0E4  F0CE         	movff	___ftmul@f3_as_product,___ftpack@arg
  3592  001534  C0E5  F0CF         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3593  001538  C0E6  F0D0         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3594  00153C  C0E3  F0D1         	movff	___ftmul@exp,___ftpack@exp
  3595  001540  C0E8  F0D2         	movff	___ftmul@sign,___ftpack@sign
  3596  001544  EC51  F00C         	call	___ftpack	;wreg free
  3597  001548  C0CE  F0DA         	movff	?___ftpack,?___ftmul
  3598  00154C  C0CF  F0DB         	movff	?___ftpack+1,?___ftmul+1
  3599  001550  C0D0  F0DC         	movff	?___ftpack+2,?___ftmul+2
  3600  001554  0012               	return	
  3601  001556                     __end_of___ftmul:
  3602                           	opt stack 0
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           intcon	equ	0xFF2
  3608                           intcon2	equ	0xFF1
  3609                           intcon3	equ	0xFF0
  3610                           postinc0	equ	0xFEE
  3611                           wreg	equ	0xFE8
  3612                           postinc1	equ	0xFE6
  3613                           postdec1	equ	0xFE5
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function ___ftge *****************
  3624 ;; Defined at:
  3625 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  ff1             3    0[BANK1 ] float 
  3628 ;;  ff2             3    3[BANK1 ] float 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;		None               void
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:        9 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    7
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_operation
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text8
  3655  0022AE                     __ptext8:
  3656                           	opt stack 0
  3657  0022AE                     ___ftge:
  3658                           	opt stack 22
  3659                           
  3660                           ;incstack = 0
  3661  0022AE  0101               	movlb	1	; () banked
  3662  0022B0  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
  3663  0022B2  D01D               	goto	l5446
  3664                           
  3665                           ; BSR set to: 1
  3666  0022B4  C100  F0E9         	movff	___ftge@ff1,??___ftge
  3667  0022B8  C101  F0EA         	movff	___ftge@ff1+1,??___ftge+1
  3668  0022BC  C102  F0EB         	movff	___ftge@ff1+2,??___ftge+2
  3669  0022C0  0100               	movlb	0	; () banked
  3670  0022C2  1FE9               	comf	??___ftge& (0+255),f,b
  3671  0022C4  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3672  0022C6  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3673  0022C8  2BE9               	incf	??___ftge& (0+255),f,b
  3674  0022CA  0E00               	movlw	0
  3675  0022CC  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3676  0022CE  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3677  0022D0  0E00               	movlw	0
  3678  0022D2  0100               	movlb	0	; () banked
  3679  0022D4  25E9               	addwf	??___ftge& (0+255),w,b
  3680  0022D6  0101               	movlb	1	; () banked
  3681  0022D8  6F00               	movwf	___ftge@ff1& (0+255),b
  3682  0022DA  0E00               	movlw	0
  3683  0022DC  0100               	movlb	0	; () banked
  3684  0022DE  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3685  0022E0  0101               	movlb	1	; () banked
  3686  0022E2  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
  3687  0022E4  0E80               	movlw	128
  3688  0022E6  0100               	movlb	0	; () banked
  3689  0022E8  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3690  0022EA  0101               	movlb	1	; () banked
  3691  0022EC  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
  3692  0022EE                     l5446:
  3693                           
  3694                           ; BSR set to: 1
  3695  0022EE  0101               	movlb	1	; () banked
  3696  0022F0  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
  3697  0022F2  D01D               	goto	l5450
  3698                           
  3699                           ; BSR set to: 1
  3700  0022F4  C103  F0E9         	movff	___ftge@ff2,??___ftge
  3701  0022F8  C104  F0EA         	movff	___ftge@ff2+1,??___ftge+1
  3702  0022FC  C105  F0EB         	movff	___ftge@ff2+2,??___ftge+2
  3703  002300  0100               	movlb	0	; () banked
  3704  002302  1FE9               	comf	??___ftge& (0+255),f,b
  3705  002304  1FEA               	comf	(??___ftge+1)& (0+255),f,b
  3706  002306  1FEB               	comf	(??___ftge+2)& (0+255),f,b
  3707  002308  2BE9               	incf	??___ftge& (0+255),f,b
  3708  00230A  0E00               	movlw	0
  3709  00230C  23EA               	addwfc	(??___ftge+1)& (0+255),f,b
  3710  00230E  23EB               	addwfc	(??___ftge+2)& (0+255),f,b
  3711  002310  0E00               	movlw	0
  3712  002312  0100               	movlb	0	; () banked
  3713  002314  25E9               	addwf	??___ftge& (0+255),w,b
  3714  002316  0101               	movlb	1	; () banked
  3715  002318  6F03               	movwf	___ftge@ff2& (0+255),b
  3716  00231A  0E00               	movlw	0
  3717  00231C  0100               	movlb	0	; () banked
  3718  00231E  21EA               	addwfc	(??___ftge+1)& (0+255),w,b
  3719  002320  0101               	movlb	1	; () banked
  3720  002322  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3721  002324  0E80               	movlw	128
  3722  002326  0100               	movlb	0	; () banked
  3723  002328  21EB               	addwfc	(??___ftge+2)& (0+255),w,b
  3724  00232A  0101               	movlb	1	; () banked
  3725  00232C  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3726  00232E                     l5450:
  3727                           
  3728                           ; BSR set to: 1
  3729  00232E  0E00               	movlw	0
  3730  002330  0101               	movlb	1	; () banked
  3731  002332  1B00               	xorwf	___ftge@ff1& (0+255),f,b
  3732  002334  0E00               	movlw	0
  3733  002336  0101               	movlb	1	; () banked
  3734  002338  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  3735  00233A  0E80               	movlw	128
  3736  00233C  0101               	movlb	1	; () banked
  3737  00233E  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  3738                           
  3739                           ; BSR set to: 1
  3740  002340  0E00               	movlw	0
  3741  002342  0101               	movlb	1	; () banked
  3742  002344  1B03               	xorwf	___ftge@ff2& (0+255),f,b
  3743  002346  0E00               	movlw	0
  3744  002348  0101               	movlb	1	; () banked
  3745  00234A  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  3746  00234C  0E80               	movlw	128
  3747  00234E  0101               	movlb	1	; () banked
  3748  002350  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  3749  002352  0101               	movlb	1	; () banked
  3750  002354  5103               	movf	___ftge@ff2& (0+255),w,b
  3751  002356  0101               	movlb	1	; () banked
  3752  002358  5D00               	subwf	___ftge@ff1& (0+255),w,b
  3753  00235A  0101               	movlb	1	; () banked
  3754  00235C  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
  3755  00235E  0101               	movlb	1	; () banked
  3756  002360  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  3757  002362  0101               	movlb	1	; () banked
  3758  002364  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
  3759  002366  0101               	movlb	1	; () banked
  3760  002368  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  3761  00236A  B0D8               	btfsc	status,0,c
  3762  00236C  D002               	goto	l5456
  3763                           
  3764                           ; BSR set to: 1
  3765  00236E  90D8               	bcf	status,0,c
  3766  002370  0012               	return	
  3767  002372                     l5456:
  3768                           
  3769                           ; BSR set to: 1
  3770  002372  80D8               	bsf	status,0,c
  3771                           
  3772                           ; BSR set to: 1
  3773  002374  0012               	return	
  3774  002376                     __end_of___ftge:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           intcon	equ	0xFF2
  3781                           intcon2	equ	0xFF1
  3782                           intcon3	equ	0xFF0
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postinc1	equ	0xFE6
  3786                           postdec1	equ	0xFE5
  3787                           fsr1h	equ	0xFE2
  3788                           fsr1l	equ	0xFE1
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           fsr2h	equ	0xFDA
  3793                           fsr2l	equ	0xFD9
  3794                           status	equ	0xFD8
  3795                           
  3796 ;; *************** function ___awtoft *****************
  3797 ;; Defined at:
  3798 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  c               2   24[BANK0 ] int 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  sign            1   27[BANK0 ] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  3   24[BANK0 ] float 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3812 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;Total ram usage:        4 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    8
  3819 ;; This function calls:
  3820 ;;		___ftpack
  3821 ;; This function is called by:
  3822 ;;		_operation
  3823 ;; This function uses a non-reentrant model
  3824 ;;
  3825                           
  3826                           	psect	text9
  3827  002DDC                     __ptext9:
  3828                           	opt stack 0
  3829  002DDC                     ___awtoft:
  3830                           	opt stack 21
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;incstack = 0
  3834  002DDC  0E00               	movlw	0
  3835  002DDE  0100               	movlb	0	; () banked
  3836  002DE0  6FD9               	movwf	___awtoft@sign& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839  002DE2  0100               	movlb	0	; () banked
  3840  002DE4  AFD7               	btfss	(___awtoft@c+1)& (0+255),7,b
  3841  002DE6  D008               	goto	l5438
  3842                           
  3843                           ; BSR set to: 0
  3844  002DE8  0100               	movlb	0	; () banked
  3845  002DEA  6DD6               	negf	___awtoft@c& (0+255),b
  3846  002DEC  1FD7               	comf	(___awtoft@c+1)& (0+255),f,b
  3847  002DEE  B0D8               	btfsc	status,0,c
  3848  002DF0  2BD7               	incf	(___awtoft@c+1)& (0+255),f,b
  3849                           
  3850                           ; BSR set to: 0
  3851  002DF2  0E01               	movlw	1
  3852  002DF4  0100               	movlb	0	; () banked
  3853  002DF6  6FD9               	movwf	___awtoft@sign& (0+255),b
  3854  002DF8                     l5438:
  3855                           
  3856                           ; BSR set to: 0
  3857  002DF8  C0D6  F0CE         	movff	___awtoft@c,___ftpack@arg
  3858  002DFC  C0D7  F0CF         	movff	___awtoft@c+1,___ftpack@arg+1
  3859  002E00  0100               	movlb	0	; () banked
  3860  002E02  6BD0               	clrf	(___ftpack@arg+2)& (0+255),b
  3861  002E04  0E8E               	movlw	142
  3862  002E06  0100               	movlb	0	; () banked
  3863  002E08  6FD1               	movwf	___ftpack@exp& (0+255),b
  3864  002E0A  C0D9  F0D2         	movff	___awtoft@sign,___ftpack@sign
  3865  002E0E  EC51  F00C         	call	___ftpack	;wreg free
  3866  002E12  C0CE  F0D6         	movff	?___ftpack,?___awtoft
  3867  002E16  C0CF  F0D7         	movff	?___ftpack+1,?___awtoft+1
  3868  002E1A  C0D0  F0D8         	movff	?___ftpack+2,?___awtoft+2
  3869  002E1E  0012               	return	
  3870  002E20                     __end_of___awtoft:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           intcon	equ	0xFF2
  3877                           intcon2	equ	0xFF1
  3878                           intcon3	equ	0xFF0
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           postinc1	equ	0xFE6
  3882                           postdec1	equ	0xFE5
  3883                           fsr1h	equ	0xFE2
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function ___ftpack *****************
  3893 ;; Defined at:
  3894 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  arg             3   16[BANK0 ] unsigned um
  3897 ;;  exp             1   19[BANK0 ] unsigned char 
  3898 ;;  sign            1   20[BANK0 ] unsigned char 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  3   16[BANK0 ] float 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:        8 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    7
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		___awtoft
  3921 ;;		___ftmul
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text10
  3926  0018A2                     __ptext10:
  3927                           	opt stack 0
  3928  0018A2                     ___ftpack:
  3929                           	opt stack 21
  3930                           
  3931                           ;incstack = 0
  3932  0018A2  0100               	movlb	0	; () banked
  3933  0018A4  51D1               	movf	___ftpack@exp& (0+255),w,b
  3934  0018A6  0100               	movlb	0	; () banked
  3935  0018A8  B4D8               	btfsc	status,2,c
  3936  0018AA  D008               	goto	l5098
  3937                           
  3938                           ; BSR set to: 0
  3939  0018AC  0100               	movlb	0	; () banked
  3940  0018AE  51CE               	movf	___ftpack@arg& (0+255),w,b
  3941  0018B0  0100               	movlb	0	; () banked
  3942  0018B2  11CF               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3943  0018B4  0100               	movlb	0	; () banked
  3944  0018B6  11D0               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3945  0018B8  A4D8               	btfss	status,2,c
  3946  0018BA  D011               	goto	l5104
  3947  0018BC                     l5098:
  3948                           
  3949                           ; BSR set to: 0
  3950  0018BC  0E00               	movlw	0
  3951  0018BE  0100               	movlb	0	; () banked
  3952  0018C0  6FCE               	movwf	?___ftpack& (0+255),b
  3953  0018C2  0E00               	movlw	0
  3954  0018C4  0100               	movlb	0	; () banked
  3955  0018C6  6FCF               	movwf	(?___ftpack+1)& (0+255),b
  3956  0018C8  0E00               	movlw	0
  3957  0018CA  0100               	movlb	0	; () banked
  3958  0018CC  6FD0               	movwf	(?___ftpack+2)& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961  0018CE  0012               	return	
  3962  0018D0                     l5102:
  3963                           
  3964                           ; BSR set to: 0
  3965  0018D0  0100               	movlb	0	; () banked
  3966  0018D2  2BD1               	incf	___ftpack@exp& (0+255),f,b
  3967  0018D4  0100               	movlb	0	; () banked
  3968  0018D6  90D8               	bcf	status,0,c
  3969  0018D8  33D0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3970  0018DA  33CF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3971  0018DC  33CE               	rrcf	___ftpack@arg& (0+255),f,b
  3972  0018DE                     l5104:
  3973                           
  3974                           ; BSR set to: 0
  3975  0018DE  0E00               	movlw	0
  3976  0018E0  0100               	movlb	0	; () banked
  3977  0018E2  15CE               	andwf	___ftpack@arg& (0+255),w,b
  3978  0018E4  0100               	movlb	0	; () banked
  3979  0018E6  6FD3               	movwf	??___ftpack& (0+255),b
  3980  0018E8  0E00               	movlw	0
  3981  0018EA  0100               	movlb	0	; () banked
  3982  0018EC  15CF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3983  0018EE  0100               	movlb	0	; () banked
  3984  0018F0  6FD4               	movwf	(??___ftpack+1)& (0+255),b
  3985  0018F2  0EFE               	movlw	254
  3986  0018F4  0100               	movlb	0	; () banked
  3987  0018F6  15D0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3988  0018F8  0100               	movlb	0	; () banked
  3989  0018FA  6FD5               	movwf	(??___ftpack+2)& (0+255),b
  3990  0018FC  0100               	movlb	0	; () banked
  3991  0018FE  51D3               	movf	??___ftpack& (0+255),w,b
  3992  001900  0100               	movlb	0	; () banked
  3993  001902  11D4               	iorwf	(??___ftpack+1)& (0+255),w,b
  3994  001904  0100               	movlb	0	; () banked
  3995  001906  11D5               	iorwf	(??___ftpack+2)& (0+255),w,b
  3996  001908  B4D8               	btfsc	status,2,c
  3997  00190A  D011               	goto	l5110
  3998  00190C  D7E1               	goto	l5102
  3999  00190E                     l5106:
  4000                           
  4001                           ; BSR set to: 0
  4002  00190E  0100               	movlb	0	; () banked
  4003  001910  2BD1               	incf	___ftpack@exp& (0+255),f,b
  4004                           
  4005                           ; BSR set to: 0
  4006  001912  0E01               	movlw	1
  4007  001914  0100               	movlb	0	; () banked
  4008  001916  27CE               	addwf	___ftpack@arg& (0+255),f,b
  4009  001918  0E00               	movlw	0
  4010  00191A  0100               	movlb	0	; () banked
  4011  00191C  23CF               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  4012  00191E  0E00               	movlw	0
  4013  001920  0100               	movlb	0	; () banked
  4014  001922  23D0               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  4015  001924  0100               	movlb	0	; () banked
  4016  001926  90D8               	bcf	status,0,c
  4017  001928  33D0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  4018  00192A  33CF               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  4019  00192C  33CE               	rrcf	___ftpack@arg& (0+255),f,b
  4020  00192E                     l5110:
  4021                           
  4022                           ; BSR set to: 0
  4023  00192E  0E00               	movlw	0
  4024  001930  0100               	movlb	0	; () banked
  4025  001932  15CE               	andwf	___ftpack@arg& (0+255),w,b
  4026  001934  0100               	movlb	0	; () banked
  4027  001936  6FD3               	movwf	??___ftpack& (0+255),b
  4028  001938  0E00               	movlw	0
  4029  00193A  0100               	movlb	0	; () banked
  4030  00193C  15CF               	andwf	(___ftpack@arg+1)& (0+255),w,b
  4031  00193E  0100               	movlb	0	; () banked
  4032  001940  6FD4               	movwf	(??___ftpack+1)& (0+255),b
  4033  001942  0EFF               	movlw	255
  4034  001944  0100               	movlb	0	; () banked
  4035  001946  15D0               	andwf	(___ftpack@arg+2)& (0+255),w,b
  4036  001948  0100               	movlb	0	; () banked
  4037  00194A  6FD5               	movwf	(??___ftpack+2)& (0+255),b
  4038  00194C  0100               	movlb	0	; () banked
  4039  00194E  51D3               	movf	??___ftpack& (0+255),w,b
  4040  001950  0100               	movlb	0	; () banked
  4041  001952  11D4               	iorwf	(??___ftpack+1)& (0+255),w,b
  4042  001954  0100               	movlb	0	; () banked
  4043  001956  11D5               	iorwf	(??___ftpack+2)& (0+255),w,b
  4044  001958  B4D8               	btfsc	status,2,c
  4045  00195A  D008               	goto	l5114
  4046  00195C  D7D8               	goto	l5106
  4047  00195E                     l5112:
  4048                           
  4049                           ; BSR set to: 0
  4050  00195E  0100               	movlb	0	; () banked
  4051  001960  07D1               	decf	___ftpack@exp& (0+255),f,b
  4052  001962  0100               	movlb	0	; () banked
  4053  001964  90D8               	bcf	status,0,c
  4054  001966  37CE               	rlcf	___ftpack@arg& (0+255),f,b
  4055  001968  37CF               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  4056  00196A  37D0               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  4057  00196C                     l5114:
  4058                           
  4059                           ; BSR set to: 0
  4060  00196C  0100               	movlb	0	; () banked
  4061  00196E  BFCF               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  4062  001970  D004               	goto	l693
  4063                           
  4064                           ; BSR set to: 0
  4065  001972  0E02               	movlw	2
  4066  001974  0100               	movlb	0	; () banked
  4067  001976  61D1               	cpfslt	___ftpack@exp& (0+255),b
  4068  001978  D7F2               	goto	l5112
  4069  00197A                     l693:
  4070                           
  4071                           ; BSR set to: 0
  4072  00197A  0100               	movlb	0	; () banked
  4073  00197C  B1D1               	btfsc	___ftpack@exp& (0+255),0,b
  4074  00197E  D002               	goto	l5120
  4075                           
  4076                           ; BSR set to: 0
  4077  001980  0100               	movlb	0	; () banked
  4078  001982  9FCF               	bcf	(___ftpack@arg+1)& (0+255),7,b
  4079  001984                     l5120:
  4080                           
  4081                           ; BSR set to: 0
  4082  001984  0100               	movlb	0	; () banked
  4083  001986  90D8               	bcf	status,0,c
  4084  001988  33D1               	rrcf	___ftpack@exp& (0+255),f,b
  4085  00198A  0100               	movlb	0	; () banked
  4086  00198C  51D1               	movf	___ftpack@exp& (0+255),w,b
  4087  00198E  0100               	movlb	0	; () banked
  4088  001990  13D0               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  4089                           
  4090                           ; BSR set to: 0
  4091  001992  0100               	movlb	0	; () banked
  4092  001994  51D2               	movf	___ftpack@sign& (0+255),w,b
  4093  001996  0100               	movlb	0	; () banked
  4094  001998  B4D8               	btfsc	status,2,c
  4095  00199A  D002               	goto	l5126
  4096                           
  4097                           ; BSR set to: 0
  4098  00199C  0100               	movlb	0	; () banked
  4099  00199E  8FD0               	bsf	(___ftpack@arg+2)& (0+255),7,b
  4100  0019A0                     l5126:
  4101                           
  4102                           ; BSR set to: 0
  4103  0019A0  C0CE  F0CE         	movff	___ftpack@arg,?___ftpack
  4104  0019A4  C0CF  F0CF         	movff	___ftpack@arg+1,?___ftpack+1
  4105  0019A8  C0D0  F0D0         	movff	___ftpack@arg+2,?___ftpack+2
  4106  0019AC  0012               	return	
  4107  0019AE                     __end_of___ftpack:
  4108                           	opt stack 0
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           intcon	equ	0xFF2
  4114                           intcon2	equ	0xFF1
  4115                           intcon3	equ	0xFF0
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postinc1	equ	0xFE6
  4119                           postdec1	equ	0xFE5
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _initLCD *****************
  4130 ;; Defined at:
  4131 ;;		line 14 in file "lcd.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;Total ram usage:        1 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    9
  4152 ;; This function calls:
  4153 ;;		_lcdInst
  4154 ;; This function is called by:
  4155 ;;		_main
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text11
  4160  002D3E                     __ptext11:
  4161                           	opt stack 0
  4162  002D3E                     _initLCD:
  4163                           	opt stack 21
  4164                           
  4165                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;incstack = 0
  4169  002D3E  0E31               	movlw	49
  4170  002D40  0100               	movlb	0	; () banked
  4171  002D42  6FD1               	movwf	??_initLCD& (0+255),b
  4172  002D44  0EB2               	movlw	178
  4173  002D46                     u5767:
  4174  002D46  2EE8               	decfsz	wreg,f,c
  4175  002D48  D7FE               	bra	u5767
  4176  002D4A  2FD1               	decfsz	??_initLCD& (0+255),f,b
  4177  002D4C  D7FC               	bra	u5767
  4178  002D4E  F000               	nop	
  4179                           
  4180                           ;lcd.c: 16: lcdInst(0b00110011);
  4181  002D50  0E33               	movlw	51
  4182  002D52  EC6D  F018         	call	_lcdInst
  4183                           
  4184                           ;lcd.c: 17: lcdInst(0b00110011);
  4185  002D56  0E33               	movlw	51
  4186  002D58  EC6D  F018         	call	_lcdInst
  4187                           
  4188                           ;lcd.c: 18: lcdInst(0b00110010);
  4189  002D5C  0E32               	movlw	50
  4190  002D5E  EC6D  F018         	call	_lcdInst
  4191                           
  4192                           ;lcd.c: 19: lcdInst(0b00101000);
  4193  002D62  0E28               	movlw	40
  4194  002D64  EC6D  F018         	call	_lcdInst
  4195                           
  4196                           ;lcd.c: 20: lcdInst(0b00001111);
  4197  002D68  0E0F               	movlw	15
  4198  002D6A  EC6D  F018         	call	_lcdInst
  4199                           
  4200                           ;lcd.c: 21: lcdInst(0b00000110);
  4201  002D6E  0E06               	movlw	6
  4202  002D70  EC6D  F018         	call	_lcdInst
  4203                           
  4204                           ;lcd.c: 22: lcdInst(0b00000001);
  4205  002D74  0E01               	movlw	1
  4206  002D76  EC6D  F018         	call	_lcdInst
  4207                           
  4208                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  4209  002D7A  0E31               	movlw	49
  4210  002D7C  0100               	movlb	0	; () banked
  4211  002D7E  6FD1               	movwf	??_initLCD& (0+255),b
  4212  002D80  0EB2               	movlw	178
  4213  002D82                     u5777:
  4214  002D82  2EE8               	decfsz	wreg,f,c
  4215  002D84  D7FE               	bra	u5777
  4216  002D86  2FD1               	decfsz	??_initLCD& (0+255),f,b
  4217  002D88  D7FC               	bra	u5777
  4218  002D8A  F000               	nop	
  4219  002D8C  0012               	return		;funcret
  4220  002D8E                     __end_of_initLCD:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           intcon3	equ	0xFF0
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postinc1	equ	0xFE6
  4232                           postdec1	equ	0xFE5
  4233                           fsr1h	equ	0xFE2
  4234                           fsr1l	equ	0xFE1
  4235                           indf2	equ	0xFDF
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _emergencystop *****************
  4243 ;; Defined at:
  4244 ;;		line 411 in file "main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        0 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:   10
  4265 ;; This function calls:
  4266 ;;		_lcdInst
  4267 ;;		_printf
  4268 ;; This function is called by:
  4269 ;;		_main
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text12
  4274  00304C                     __ptext12:
  4275                           	opt stack 0
  4276  00304C                     _emergencystop:
  4277                           	opt stack 20
  4278                           
  4279                           ;main.c: 412: (INTCONbits.GIE = 0);
  4280                           
  4281                           ;incstack = 0
  4282  00304C  9EF2               	bcf	intcon,7,c	;volatile
  4283                           
  4284                           ;main.c: 413: PORTAbits.RA2 = 0;
  4285  00304E  9480               	bcf	3968,2,c	;volatile
  4286                           
  4287                           ;main.c: 414: lcdInst(0b00000001);
  4288  003050  0E01               	movlw	1
  4289  003052  EC6D  F018         	call	_lcdInst
  4290                           
  4291                           ;main.c: 415: lcdInst(0b10000000);
  4292  003056  0E80               	movlw	128
  4293  003058  EC6D  F018         	call	_lcdInst
  4294                           
  4295                           ;main.c: 416: printf("EMERGENCY STOP");
  4296  00305C  0EB8               	movlw	low STR_21
  4297  00305E  0100               	movlb	0	; () banked
  4298  003060  6FDA               	movwf	printf@f& (0+255),b
  4299  003062  0EFF               	movlw	high STR_21
  4300  003064  0100               	movlb	0	; () banked
  4301  003066  6FDB               	movwf	(printf@f+1)& (0+255),b
  4302  003068  ECF6  F003         	call	_printf	;wreg free
  4303  00306C                     l364:
  4304  00306C  D7FF               	goto	l364
  4305  00306E                     __end_of_emergencystop:
  4306                           	opt stack 0
  4307                           tblptru	equ	0xFF8
  4308                           tblptrh	equ	0xFF7
  4309                           tblptrl	equ	0xFF6
  4310                           tablat	equ	0xFF5
  4311                           intcon	equ	0xFF2
  4312                           intcon2	equ	0xFF1
  4313                           intcon3	equ	0xFF0
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postinc1	equ	0xFE6
  4317                           postdec1	equ	0xFE5
  4318                           fsr1h	equ	0xFE2
  4319                           fsr1l	equ	0xFE1
  4320                           indf2	equ	0xFDF
  4321                           postinc2	equ	0xFDE
  4322                           postdec2	equ	0xFDD
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _date_time *****************
  4328 ;; Defined at:
  4329 ;;		line 234 in file "main.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  i               1   42[BANK0 ] unsigned char 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:        3 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:   10
  4350 ;; This function calls:
  4351 ;;		_I2C_Master_Read
  4352 ;;		_I2C_Master_Start
  4353 ;;		_I2C_Master_Stop
  4354 ;;		_I2C_Master_Write
  4355 ;;		_lcdInst
  4356 ;;		_printf
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text13
  4363  001C92                     __ptext13:
  4364                           	opt stack 0
  4365  001C92                     _date_time:
  4366                           	opt stack 20
  4367                           
  4368                           ;main.c: 236: I2C_Master_Start();
  4369                           
  4370                           ;incstack = 0
  4371  001C92  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  4372                           
  4373                           ;main.c: 237: I2C_Master_Write(0b11010000);
  4374  001C96  0E00               	movlw	0
  4375  001C98  0100               	movlb	0	; () banked
  4376  001C9A  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4377  001C9C  0ED0               	movlw	208
  4378  001C9E  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4379  001CA0  EC81  F018         	call	_I2C_Master_Write	;wreg free
  4380                           
  4381                           ;main.c: 238: I2C_Master_Write(0x00);
  4382  001CA4  0E00               	movlw	0
  4383  001CA6  0100               	movlb	0	; () banked
  4384  001CA8  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4385  001CAA  0E00               	movlw	0
  4386  001CAC  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4387  001CAE  EC81  F018         	call	_I2C_Master_Write	;wreg free
  4388                           
  4389                           ;main.c: 239: I2C_Master_Stop();
  4390  001CB2  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  4391                           
  4392                           ;main.c: 242: I2C_Master_Start();
  4393  001CB6  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  4394                           
  4395                           ;main.c: 243: I2C_Master_Write(0b11010001);
  4396  001CBA  0E00               	movlw	0
  4397  001CBC  0100               	movlb	0	; () banked
  4398  001CBE  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4399  001CC0  0ED1               	movlw	209
  4400  001CC2  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  4401  001CC4  EC81  F018         	call	_I2C_Master_Write	;wreg free
  4402                           
  4403                           ;main.c: 244: for(unsigned char i=0;i<0x06;i++){
  4404  001CC8  0E00               	movlw	0
  4405  001CCA  0100               	movlb	0	; () banked
  4406  001CCC  6FE8               	movwf	date_time@i& (0+255),b
  4407  001CCE                     l5646:
  4408                           
  4409                           ; BSR set to: 0
  4410  001CCE  0E05               	movlw	5
  4411  001CD0  0100               	movlb	0	; () banked
  4412  001CD2  65E8               	cpfsgt	date_time@i& (0+255),b
  4413  001CD4  D001               	goto	l5650
  4414  001CD6  D010               	goto	l5656
  4415  001CD8                     l5650:
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;main.c: 245: time[i] = I2C_Master_Read(1);
  4419  001CD8  0100               	movlb	0	; () banked
  4420  001CDA  51E8               	movf	date_time@i& (0+255),w,b
  4421  001CDC  0D01               	mullw	1
  4422  001CDE  0E9A               	movlw	low _time
  4423  001CE0  24F3               	addwf	prodl,w,c
  4424  001CE2  6ED9               	movwf	fsr2l,c
  4425  001CE4  0E00               	movlw	high _time
  4426  001CE6  20F4               	addwfc	prodh,w,c
  4427  001CE8  6EDA               	movwf	fsr2h,c
  4428  001CEA  0E01               	movlw	1
  4429  001CEC  ECC2  F017         	call	_I2C_Master_Read
  4430  001CF0  6EDF               	movwf	indf2,c
  4431  001CF2  0100               	movlb	0	; () banked
  4432  001CF4  2BE8               	incf	date_time@i& (0+255),f,b
  4433  001CF6  D7EB               	goto	l5646
  4434  001CF8                     l5656:
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 246: }
  4438                           ;main.c: 247: time[6] = I2C_Master_Read(0);
  4439  001CF8  0E00               	movlw	0
  4440  001CFA  ECC2  F017         	call	_I2C_Master_Read
  4441  001CFE  0100               	movlb	0	; () banked
  4442  001D00  6FA0               	movwf	(_time+6)& (0+255),b
  4443                           
  4444                           ;main.c: 248: I2C_Master_Stop();
  4445  001D02  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  4446                           
  4447                           ;main.c: 251: lcdInst(0b10000000);
  4448  001D06  0E80               	movlw	128
  4449  001D08  EC6D  F018         	call	_lcdInst
  4450                           
  4451                           ;main.c: 252: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  4452  001D0C  0EE1               	movlw	low STR_8
  4453  001D0E  0100               	movlb	0	; () banked
  4454  001D10  6FDA               	movwf	printf@f& (0+255),b
  4455  001D12  0EFE               	movlw	high STR_8
  4456  001D14  0100               	movlb	0	; () banked
  4457  001D16  6FDB               	movwf	(printf@f+1)& (0+255),b
  4458  001D18  C09F  F0DC         	movff	_time+5,?_printf+2
  4459  001D1C  0100               	movlb	0	; () banked
  4460  001D1E  6BDD               	clrf	(?_printf+3)& (0+255),b
  4461  001D20  C09E  F0DE         	movff	_time+4,?_printf+4
  4462  001D24  0100               	movlb	0	; () banked
  4463  001D26  6BDF               	clrf	(?_printf+5)& (0+255),b
  4464  001D28  C0A0  F0E0         	movff	_time+6,?_printf+6
  4465  001D2C  0100               	movlb	0	; () banked
  4466  001D2E  6BE1               	clrf	(?_printf+7)& (0+255),b
  4467  001D30  ECF6  F003         	call	_printf	;wreg free
  4468                           
  4469                           ;main.c: 253: lcdInst(0b11000000);
  4470  001D34  0EC0               	movlw	192
  4471  001D36  EC6D  F018         	call	_lcdInst
  4472                           
  4473                           ;main.c: 254: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4474  001D3A  0EF8               	movlw	low STR_9
  4475  001D3C  0100               	movlb	0	; () banked
  4476  001D3E  6FDA               	movwf	printf@f& (0+255),b
  4477  001D40  0EFE               	movlw	high STR_9
  4478  001D42  0100               	movlb	0	; () banked
  4479  001D44  6FDB               	movwf	(printf@f+1)& (0+255),b
  4480  001D46  C09C  F0DC         	movff	_time+2,?_printf+2
  4481  001D4A  0100               	movlb	0	; () banked
  4482  001D4C  6BDD               	clrf	(?_printf+3)& (0+255),b
  4483  001D4E  C09B  F0DE         	movff	_time+1,?_printf+4
  4484  001D52  0100               	movlb	0	; () banked
  4485  001D54  6BDF               	clrf	(?_printf+5)& (0+255),b
  4486  001D56  C09A  F0E0         	movff	_time,?_printf+6
  4487  001D5A  0100               	movlb	0	; () banked
  4488  001D5C  6BE1               	clrf	(?_printf+7)& (0+255),b
  4489  001D5E  ECF6  F003         	call	_printf	;wreg free
  4490                           
  4491                           ;main.c: 256: _delay((unsigned long)((100)*(10000000/4000.0)));
  4492  001D62  0E02               	movlw	2
  4493  001D64  0100               	movlb	0	; () banked
  4494  001D66  6FE7               	movwf	(??_date_time+1)& (0+255),b
  4495  001D68  0E45               	movlw	69
  4496  001D6A  0100               	movlb	0	; () banked
  4497  001D6C  6FE6               	movwf	??_date_time& (0+255),b
  4498  001D6E  0EA9               	movlw	169
  4499  001D70                     u5787:
  4500  001D70  2EE8               	decfsz	wreg,f,c
  4501  001D72  D7FE               	bra	u5787
  4502  001D74  2FE6               	decfsz	??_date_time& (0+255),f,b
  4503  001D76  D7FC               	bra	u5787
  4504  001D78  2FE7               	decfsz	(??_date_time+1)& (0+255),f,b
  4505  001D7A  D7FA               	bra	u5787
  4506  001D7C  D000               	nop2	
  4507  001D7E  0012               	return	
  4508  001D80                     __end_of_date_time:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           prodh	equ	0xFF4
  4515                           prodl	equ	0xFF3
  4516                           intcon	equ	0xFF2
  4517                           intcon2	equ	0xFF1
  4518                           intcon3	equ	0xFF0
  4519                           postinc0	equ	0xFEE
  4520                           wreg	equ	0xFE8
  4521                           postinc1	equ	0xFE6
  4522                           postdec1	equ	0xFE5
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function _I2C_Master_Read *****************
  4533 ;; Defined at:
  4534 ;;		line 105 in file "I2C.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  a               1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  a               1   17[BANK0 ] unsigned char 
  4539 ;;  temp            1   18[BANK0 ] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      unsigned char 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;Total ram usage:        2 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    8
  4556 ;; This function calls:
  4557 ;;		_I2C_Master_Wait
  4558 ;; This function is called by:
  4559 ;;		_date_time
  4560 ;;		_read_colorsensor
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text14
  4565  002F84                     __ptext14:
  4566                           	opt stack 0
  4567  002F84                     _I2C_Master_Read:
  4568                           	opt stack 20
  4569                           
  4570                           ;incstack = 0
  4571                           ;I2C_Master_Read@a stored from wreg
  4572  002F84  0100               	movlb	0	; () banked
  4573  002F86  6FCF               	movwf	I2C_Master_Read@a& (0+255),b
  4574                           
  4575                           ;I2C.c: 107: unsigned char temp;
  4576                           ;I2C.c: 108: I2C_Master_Wait();
  4577  002F88  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  4578                           
  4579                           ;I2C.c: 109: RCEN = 1;
  4580  002F8C  86C5               	bsf	4037,3,c	;volatile
  4581                           
  4582                           ;I2C.c: 110: I2C_Master_Wait();
  4583  002F8E  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  4584                           
  4585                           ;I2C.c: 111: temp = SSPBUF;
  4586  002F92  CFC9 F0D0          	movff	4041,I2C_Master_Read@temp	;volatile
  4587                           
  4588                           ;I2C.c: 112: I2C_Master_Wait();
  4589  002F96  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  4590                           
  4591                           ;I2C.c: 113: ACKDT = (a)?0:1;
  4592  002F9A  0100               	movlb	0	; () banked
  4593  002F9C  51CF               	movf	I2C_Master_Read@a& (0+255),w,b
  4594  002F9E  0100               	movlb	0	; () banked
  4595  002FA0  A4D8               	btfss	status,2,c
  4596  002FA2  D002               	goto	u4840
  4597  002FA4  8AC5               	bsf	4037,5,c	;volatile
  4598  002FA6  D001               	goto	l5066
  4599  002FA8                     u4840:
  4600  002FA8  9AC5               	bcf	4037,5,c	;volatile
  4601  002FAA                     l5066:
  4602                           
  4603                           ;I2C.c: 114: ACKEN = 1;
  4604  002FAA  88C5               	bsf	4037,4,c	;volatile
  4605                           
  4606                           ;I2C.c: 115: return temp;
  4607  002FAC  0100               	movlb	0	; () banked
  4608  002FAE  51D0               	movf	I2C_Master_Read@temp& (0+255),w,b
  4609  002FB0  0012               	return	
  4610  002FB2                     __end_of_I2C_Master_Read:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           tblptrh	equ	0xFF7
  4614                           tblptrl	equ	0xFF6
  4615                           tablat	equ	0xFF5
  4616                           prodh	equ	0xFF4
  4617                           prodl	equ	0xFF3
  4618                           intcon	equ	0xFF2
  4619                           intcon2	equ	0xFF1
  4620                           intcon3	equ	0xFF0
  4621                           postinc0	equ	0xFEE
  4622                           wreg	equ	0xFE8
  4623                           postinc1	equ	0xFE6
  4624                           postdec1	equ	0xFE5
  4625                           fsr1h	equ	0xFE2
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           
  4634 ;; *************** function _bottle_time *****************
  4635 ;; Defined at:
  4636 ;;		line 309 in file "main.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;Total ram usage:        0 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:   10
  4657 ;; This function calls:
  4658 ;;		_lcdInst
  4659 ;;		_printf
  4660 ;; This function is called by:
  4661 ;;		_main
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text15
  4666  002F18                     __ptext15:
  4667                           	opt stack 0
  4668  002F18                     _bottle_time:
  4669                           	opt stack 20
  4670                           
  4671                           ;main.c: 310: lcdInst(0b10000000);
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;incstack = 0
  4675  002F18  0E80               	movlw	128
  4676  002F1A  EC6D  F018         	call	_lcdInst
  4677                           
  4678                           ;main.c: 311: printf("Total Operation       ");
  4679  002F1E  0ECA               	movlw	low STR_17
  4680  002F20  0100               	movlb	0	; () banked
  4681  002F22  6FDA               	movwf	printf@f& (0+255),b
  4682  002F24  0EFE               	movlw	high STR_17
  4683  002F26  0100               	movlb	0	; () banked
  4684  002F28  6FDB               	movwf	(printf@f+1)& (0+255),b
  4685  002F2A  ECF6  F003         	call	_printf	;wreg free
  4686                           
  4687                           ;main.c: 312: lcdInst(0b11000000);
  4688  002F2E  0EC0               	movlw	192
  4689  002F30  EC6D  F018         	call	_lcdInst
  4690                           
  4691                           ;main.c: 313: printf("Time: %d s       ", operation_time);
  4692  002F34  0E0F               	movlw	low STR_18
  4693  002F36  0100               	movlb	0	; () banked
  4694  002F38  6FDA               	movwf	printf@f& (0+255),b
  4695  002F3A  0EFF               	movlw	high STR_18
  4696  002F3C  0100               	movlb	0	; () banked
  4697  002F3E  6FDB               	movwf	(printf@f+1)& (0+255),b
  4698  002F40  C0B9  F0DC         	movff	_operation_time,?_printf+2
  4699  002F44  C0BA  F0DD         	movff	_operation_time+1,?_printf+3
  4700  002F48  ECF6  F003         	call	_printf	;wreg free
  4701  002F4C  0012               	return	
  4702  002F4E                     __end_of_bottle_time:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           intcon2	equ	0xFF1
  4712                           intcon3	equ	0xFF0
  4713                           postinc0	equ	0xFEE
  4714                           wreg	equ	0xFE8
  4715                           postinc1	equ	0xFE6
  4716                           postdec1	equ	0xFE5
  4717                           fsr1h	equ	0xFE2
  4718                           fsr1l	equ	0xFE1
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _bottle_count *****************
  4727 ;; Defined at:
  4728 ;;		line 278 in file "main.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;		None
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;Total ram usage:        2 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:   10
  4749 ;; This function calls:
  4750 ;;		___awmod
  4751 ;;		_lcdInst
  4752 ;;		_printf
  4753 ;; This function is called by:
  4754 ;;		_main
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text16
  4759  001556                     __ptext16:
  4760                           	opt stack 0
  4761  001556                     _bottle_count:
  4762                           	opt stack 20
  4763                           
  4764                           ;main.c: 279: switch(bottle_count_disp % 3){
  4765                           
  4766                           ;incstack = 0
  4767  001556  D065               	goto	l5692
  4768  001558                     l5668:
  4769                           
  4770                           ;main.c: 281: lcdInst(0b10000000);
  4771  001558  0E80               	movlw	128
  4772  00155A  EC6D  F018         	call	_lcdInst
  4773                           
  4774                           ;main.c: 282: printf("Bottle Count    ");
  4775  00155E  0E43               	movlw	low STR_10
  4776  001560  0100               	movlb	0	; () banked
  4777  001562  6FDA               	movwf	printf@f& (0+255),b
  4778  001564  0EFF               	movlw	high STR_10
  4779  001566  0100               	movlb	0	; () banked
  4780  001568  6FDB               	movwf	(printf@f+1)& (0+255),b
  4781  00156A  ECF6  F003         	call	_printf	;wreg free
  4782                           
  4783                           ;main.c: 283: lcdInst(0b11000000);
  4784  00156E  0EC0               	movlw	192
  4785  001570  EC6D  F018         	call	_lcdInst
  4786                           
  4787                           ;main.c: 284: printf("Total: %d       ", bottle_count_array[0]);
  4788  001574  0E32               	movlw	low STR_11
  4789  001576  0100               	movlb	0	; () banked
  4790  001578  6FDA               	movwf	printf@f& (0+255),b
  4791  00157A  0EFF               	movlw	high STR_11
  4792  00157C  0100               	movlb	0	; () banked
  4793  00157E  6FDB               	movwf	(printf@f+1)& (0+255),b
  4794  001580  C080  F0DC         	movff	_bottle_count_array,?_printf+2
  4795  001584  C081  F0DD         	movff	_bottle_count_array+1,?_printf+3
  4796  001588  ECF6  F003         	call	_printf	;wreg free
  4797                           
  4798                           ;main.c: 285: break;
  4799  00158C  D066               	goto	l5694
  4800  00158E                     l5674:
  4801                           
  4802                           ;main.c: 287: lcdInst(0b10000000);
  4803  00158E  0E80               	movlw	128
  4804  001590  EC6D  F018         	call	_lcdInst
  4805                           
  4806                           ;main.c: 288: printf("YOP W/ CAP: %d  ", bottle_count_array[1]);
  4807  001594  0E54               	movlw	low STR_12
  4808  001596  0100               	movlb	0	; () banked
  4809  001598  6FDA               	movwf	printf@f& (0+255),b
  4810  00159A  0EFF               	movlw	high STR_12
  4811  00159C  0100               	movlb	0	; () banked
  4812  00159E  6FDB               	movwf	(printf@f+1)& (0+255),b
  4813  0015A0  C082  F0DC         	movff	_bottle_count_array+2,?_printf+2
  4814  0015A4  C083  F0DD         	movff	_bottle_count_array+3,?_printf+3
  4815  0015A8  ECF6  F003         	call	_printf	;wreg free
  4816                           
  4817                           ;main.c: 289: lcdInst(0b11000000);
  4818  0015AC  0EC0               	movlw	192
  4819  0015AE  EC6D  F018         	call	_lcdInst
  4820                           
  4821                           ;main.c: 290: printf("YOP NO CAP: %d  ", bottle_count_array[2]);
  4822  0015B2  0E65               	movlw	low STR_13
  4823  0015B4  0100               	movlb	0	; () banked
  4824  0015B6  6FDA               	movwf	printf@f& (0+255),b
  4825  0015B8  0EFF               	movlw	high STR_13
  4826  0015BA  0100               	movlb	0	; () banked
  4827  0015BC  6FDB               	movwf	(printf@f+1)& (0+255),b
  4828  0015BE  C084  F0DC         	movff	_bottle_count_array+4,?_printf+2
  4829  0015C2  C085  F0DD         	movff	_bottle_count_array+5,?_printf+3
  4830  0015C6  ECF6  F003         	call	_printf	;wreg free
  4831                           
  4832                           ;main.c: 291: break;
  4833  0015CA  D047               	goto	l5694
  4834  0015CC                     l5680:
  4835                           
  4836                           ;main.c: 293: lcdInst(0b10000000);
  4837  0015CC  0E80               	movlw	128
  4838  0015CE  EC6D  F018         	call	_lcdInst
  4839                           
  4840                           ;main.c: 294: printf("ESKA W/ CAP: %d ", bottle_count_array[3]);
  4841  0015D2  0E76               	movlw	low STR_14
  4842  0015D4  0100               	movlb	0	; () banked
  4843  0015D6  6FDA               	movwf	printf@f& (0+255),b
  4844  0015D8  0EFF               	movlw	high STR_14
  4845  0015DA  0100               	movlb	0	; () banked
  4846  0015DC  6FDB               	movwf	(printf@f+1)& (0+255),b
  4847  0015DE  C086  F0DC         	movff	_bottle_count_array+6,?_printf+2
  4848  0015E2  C087  F0DD         	movff	_bottle_count_array+7,?_printf+3
  4849  0015E6  ECF6  F003         	call	_printf	;wreg free
  4850                           
  4851                           ;main.c: 295: lcdInst(0b11000000);
  4852  0015EA  0EC0               	movlw	192
  4853  0015EC  EC6D  F018         	call	_lcdInst
  4854                           
  4855                           ;main.c: 296: printf("ESKA NO CAP: %d ", bottle_count_array[4]);
  4856  0015F0  0E87               	movlw	low STR_15
  4857  0015F2  0100               	movlb	0	; () banked
  4858  0015F4  6FDA               	movwf	printf@f& (0+255),b
  4859  0015F6  0EFF               	movlw	high STR_15
  4860  0015F8  0100               	movlb	0	; () banked
  4861  0015FA  6FDB               	movwf	(printf@f+1)& (0+255),b
  4862  0015FC  C088  F0DC         	movff	_bottle_count_array+8,?_printf+2
  4863  001600  C089  F0DD         	movff	_bottle_count_array+9,?_printf+3
  4864  001604  ECF6  F003         	call	_printf	;wreg free
  4865                           
  4866                           ;main.c: 297: break;
  4867  001608  D028               	goto	l5694
  4868  00160A                     l5686:
  4869                           
  4870                           ;main.c: 300: lcdInst(0b10000000);
  4871  00160A  0E80               	movlw	128
  4872  00160C  EC6D  F018         	call	_lcdInst
  4873                           
  4874                           ;main.c: 301: printf("ERR: BAD BTLCNT");
  4875  001610  0EA8               	movlw	low STR_16
  4876  001612  0100               	movlb	0	; () banked
  4877  001614  6FDA               	movwf	printf@f& (0+255),b
  4878  001616  0EFF               	movlw	high STR_16
  4879  001618  0100               	movlb	0	; () banked
  4880  00161A  6FDB               	movwf	(printf@f+1)& (0+255),b
  4881  00161C  ECF6  F003         	call	_printf	;wreg free
  4882  001620  D7F4               	goto	l5686
  4883  001622                     l5692:
  4884  001622  C0ED  F0CE         	movff	_bottle_count_disp,___awmod@dividend
  4885  001626  C0EE  F0CF         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4886  00162A  0E00               	movlw	0
  4887  00162C  0100               	movlb	0	; () banked
  4888  00162E  6FD1               	movwf	(___awmod@divisor+1)& (0+255),b
  4889  001630  0E03               	movlw	3
  4890  001632  6FD0               	movwf	___awmod@divisor& (0+255),b
  4891  001634  EC7B  F013         	call	___awmod	;wreg free
  4892                           
  4893                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4894                           ; Switch size 1, requested type "space"
  4895                           ; Number of cases is 1, Range of values is 0 to 0
  4896                           ; switch strategies available:
  4897                           ; Name         Instructions Cycles
  4898                           ; simple_byte            4     3 (average)
  4899                           ;	Chosen strategy is simple_byte
  4900  001638  0100               	movlb	0	; () banked
  4901  00163A  51CF               	movf	(?___awmod+1)& (0+255),w,b
  4902  00163C  0A00               	xorlw	0	; case 0
  4903  00163E  A4D8               	btfss	status,2,c
  4904  001640  D7E4               	goto	l5686
  4905                           
  4906                           ; BSR set to: 0
  4907                           ; Switch size 1, requested type "space"
  4908                           ; Number of cases is 3, Range of values is 0 to 2
  4909                           ; switch strategies available:
  4910                           ; Name         Instructions Cycles
  4911                           ; simple_byte           10     6 (average)
  4912                           ;	Chosen strategy is simple_byte
  4913  001642  0100               	movlb	0	; () banked
  4914  001644  51CE               	movf	?___awmod& (0+255),w,b
  4915  001646  0A00               	xorlw	0	; case 0
  4916  001648  B4D8               	btfsc	status,2,c
  4917  00164A  D786               	goto	l5668
  4918  00164C  0A01               	xorlw	1	; case 1
  4919  00164E  B4D8               	btfsc	status,2,c
  4920  001650  D79E               	goto	l5674
  4921  001652  0A03               	xorlw	3	; case 2
  4922  001654  B4D8               	btfsc	status,2,c
  4923  001656  D7BA               	goto	l5680
  4924  001658  D7D8               	goto	l5686
  4925  00165A                     l5694:
  4926                           
  4927                           ;main.c: 305: _delay((unsigned long)((100)*(10000000/4000.0)));
  4928  00165A  0E02               	movlw	2
  4929  00165C  0100               	movlb	0	; () banked
  4930  00165E  6FE7               	movwf	(??_bottle_count+1)& (0+255),b
  4931  001660  0E45               	movlw	69
  4932  001662  0100               	movlb	0	; () banked
  4933  001664  6FE6               	movwf	??_bottle_count& (0+255),b
  4934  001666  0EA9               	movlw	169
  4935  001668                     u5797:
  4936  001668  2EE8               	decfsz	wreg,f,c
  4937  00166A  D7FE               	bra	u5797
  4938  00166C  2FE6               	decfsz	??_bottle_count& (0+255),f,b
  4939  00166E  D7FC               	bra	u5797
  4940  001670  2FE7               	decfsz	(??_bottle_count+1)& (0+255),f,b
  4941  001672  D7FA               	bra	u5797
  4942  001674  D000               	nop2	
  4943  001676  0012               	return	
  4944  001678                     __end_of_bottle_count:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           intcon2	equ	0xFF1
  4954                           intcon3	equ	0xFF0
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           postinc1	equ	0xFE6
  4958                           postdec1	equ	0xFE5
  4959                           fsr1h	equ	0xFE2
  4960                           fsr1l	equ	0xFE1
  4961                           indf2	equ	0xFDF
  4962                           postinc2	equ	0xFDE
  4963                           postdec2	equ	0xFDD
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968 ;; *************** function _printf *****************
  4969 ;; Defined at:
  4970 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  4973 ;;		 -> STR_21(15), STR_20(16), STR_19(11), STR_18(18), 
  4974 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
  4975 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  4976 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(8), 
  4977 ;;		 -> STR_5(13), STR_4(7), STR_3(24), STR_2(24), 
  4978 ;;		 -> STR_1(8), 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  idx             1    0[BANK1 ] unsigned char 
  4981 ;;  tmpval          4    0        struct .
  4982 ;;  cp              3    0        PTR const unsigned char 
  4983 ;;  width           2    7[BANK1 ] int 
  4984 ;;  val             2    4[BANK1 ] unsigned int 
  4985 ;;  ap              2    1[BANK1 ] PTR void [1]
  4986 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4987 ;;  len             2    0        unsigned int 
  4988 ;;  c               1    9[BANK1 ] char 
  4989 ;;  flag            1    6[BANK1 ] unsigned char 
  4990 ;;  prec            1    3[BANK1 ] char 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2   28[BANK0 ] int 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0      12      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:       22 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    9
  5007 ;; This function calls:
  5008 ;;		___lwdiv
  5009 ;;		___lwmod
  5010 ;;		___wmul
  5011 ;;		_isdigit
  5012 ;;		_putch
  5013 ;; This function is called by:
  5014 ;;		_standby
  5015 ;;		_date_time
  5016 ;;		_bottle_count
  5017 ;;		_bottle_time
  5018 ;;		_operation
  5019 ;;		_operationend
  5020 ;;		_emergencystop
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text17
  5025  0007EC                     __ptext17:
  5026                           	opt stack 0
  5027  0007EC                     _printf:
  5028                           	opt stack 20
  5029                           
  5030                           ;doprnt.c: 466: va_list ap;
  5031                           ;doprnt.c: 499: signed char c;
  5032                           ;doprnt.c: 501: int width;
  5033                           ;doprnt.c: 506: signed char prec;
  5034                           ;doprnt.c: 508: unsigned char flag;
  5035                           ;doprnt.c: 523: union {
  5036                           ;doprnt.c: 524: unsigned long vd;
  5037                           ;doprnt.c: 525: double integ;
  5038                           ;doprnt.c: 526: } tmpval;
  5039                           ;doprnt.c: 528: unsigned int val;
  5040                           ;doprnt.c: 529: unsigned len;
  5041                           ;doprnt.c: 530: const char * cp;
  5042                           ;doprnt.c: 533: *ap = __va_start();
  5043                           
  5044                           ;incstack = 0
  5045  0007EC  0EDC               	movlw	low (?_printf+2)
  5046  0007EE  0101               	movlb	1	; () banked
  5047  0007F0  6F01               	movwf	printf@ap& (0+255),b
  5048  0007F2  0E00               	movlw	high (?_printf+2)
  5049  0007F4  0101               	movlb	1	; () banked
  5050  0007F6  6F02               	movwf	(printf@ap+1)& (0+255),b
  5051                           
  5052                           ;doprnt.c: 536: while(c = *f++) {
  5053  0007F8  D1D5               	goto	l5304
  5054  0007FA                     l5174:
  5055                           
  5056                           ; BSR set to: 1
  5057                           ;doprnt.c: 538: if(c != '%')
  5058  0007FA  0E25               	movlw	37
  5059  0007FC  0101               	movlb	1	; () banked
  5060  0007FE  1909               	xorwf	printf@c& (0+255),w,b
  5061  000800  B4D8               	btfsc	status,2,c
  5062  000802  D005               	goto	l5178
  5063                           
  5064                           ; BSR set to: 1
  5065                           ;doprnt.c: 540: {
  5066                           ;doprnt.c: 541: (putch(c) );
  5067  000804  0101               	movlb	1	; () banked
  5068  000806  5109               	movf	printf@c& (0+255),w,b
  5069  000808  EC65  F018         	call	_putch
  5070                           
  5071                           ;doprnt.c: 542: continue;
  5072  00080C  D1CB               	goto	l5304
  5073  00080E                     l5178:
  5074                           
  5075                           ;doprnt.c: 543: }
  5076                           ;doprnt.c: 546: width = 0;
  5077  00080E  0E00               	movlw	0
  5078  000810  0101               	movlb	1	; () banked
  5079  000812  6F08               	movwf	(printf@width+1)& (0+255),b
  5080  000814  0E00               	movlw	0
  5081  000816  6F07               	movwf	printf@width& (0+255),b
  5082                           
  5083                           ;doprnt.c: 548: flag = 0;
  5084  000818  0E00               	movlw	0
  5085  00081A  0101               	movlb	1	; () banked
  5086  00081C  6F06               	movwf	printf@flag& (0+255),b
  5087                           
  5088                           ; BSR set to: 1
  5089                           ;doprnt.c: 551: switch(*f) {
  5090                           
  5091                           ;doprnt.c: 550: for(;;) {
  5092  00081E  D005               	goto	l5184
  5093  000820                     l5180:
  5094                           
  5095                           ;doprnt.c: 580: flag |= 0x04;
  5096  000820  0101               	movlb	1	; () banked
  5097  000822  8506               	bsf	printf@flag& (0+255),2,b
  5098                           
  5099                           ;doprnt.c: 581: f++;
  5100  000824  0100               	movlb	0	; () banked
  5101  000826  4BDA               	infsnz	printf@f& (0+255),f,b
  5102  000828  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5103  00082A                     l5184:
  5104  00082A  C0DA  FFF6         	movff	printf@f,tblptrl
  5105  00082E  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5106  000832                     	if	0	;tblptru may be non-zero
  5107  000832                     	endif
  5108  000832                     	if	0	;tblptru may be non-zero
  5109  000832                     	endif
  5110  000832  0008               	tblrd		*
  5111  000834  50F5               	movf	tablat,w,c
  5112                           
  5113                           ; Switch size 1, requested type "space"
  5114                           ; Number of cases is 1, Range of values is 48 to 48
  5115                           ; switch strategies available:
  5116                           ; Name         Instructions Cycles
  5117                           ; simple_byte            4     3 (average)
  5118                           ;	Chosen strategy is simple_byte
  5119  000836  0A30               	xorlw	48	; case 48
  5120  000838  B4D8               	btfsc	status,2,c
  5121  00083A  D7F2               	goto	l5180
  5122                           
  5123                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5124                           
  5125                           ;doprnt.c: 586: }
  5126                           
  5127                           ;doprnt.c: 585: break;
  5128  00083C  C0DA  FFF6         	movff	printf@f,tblptrl
  5129  000840  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5130  000844                     	if	0	;tblptru may be non-zero
  5131  000844                     	endif
  5132  000844                     	if	0	;tblptru may be non-zero
  5133  000844                     	endif
  5134  000844  0008               	tblrd		*
  5135  000846  50F5               	movf	tablat,w,c
  5136  000848  ECD9  F017         	call	_isdigit
  5137  00084C  A0D8               	btfss	status,0,c
  5138  00084E  D048               	goto	l5204
  5139                           
  5140                           ;doprnt.c: 598: width = 0;
  5141  000850  0E00               	movlw	0
  5142  000852  0101               	movlb	1	; () banked
  5143  000854  6F08               	movwf	(printf@width+1)& (0+255),b
  5144  000856  0E00               	movlw	0
  5145  000858  6F07               	movwf	printf@width& (0+255),b
  5146  00085A                     l5190:
  5147                           
  5148                           ;doprnt.c: 600: width *= 10;
  5149  00085A  C107  F0CE         	movff	printf@width,___wmul@multiplier
  5150  00085E  C108  F0CF         	movff	printf@width+1,___wmul@multiplier+1
  5151  000862  0E00               	movlw	0
  5152  000864  0100               	movlb	0	; () banked
  5153  000866  6FD1               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5154  000868  0E0A               	movlw	10
  5155  00086A  6FD0               	movwf	___wmul@multiplicand& (0+255),b
  5156  00086C  ECA7  F017         	call	___wmul	;wreg free
  5157  000870  C0CE  F107         	movff	?___wmul,printf@width
  5158  000874  C0CF  F108         	movff	?___wmul+1,printf@width+1
  5159                           
  5160                           ;doprnt.c: 601: width += *f++ - '0';
  5161  000878  0ED0               	movlw	208
  5162  00087A  0100               	movlb	0	; () banked
  5163  00087C  6FE2               	movwf	??_printf& (0+255),b
  5164  00087E  0EFF               	movlw	255
  5165  000880  0100               	movlb	0	; () banked
  5166  000882  6FE3               	movwf	(??_printf+1)& (0+255),b
  5167  000884  C0DA  FFF6         	movff	printf@f,tblptrl
  5168  000888  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5169  00088C                     	if	0	;tblptru may be non-zero
  5170  00088C                     	endif
  5171  00088C                     	if	0	;tblptru may be non-zero
  5172  00088C                     	endif
  5173  00088C  0008               	tblrd		*
  5174  00088E  50F5               	movf	tablat,w,c
  5175  000890  0100               	movlb	0	; () banked
  5176  000892  6FE4               	movwf	(??_printf+2)& (0+255),b
  5177  000894  6BE5               	clrf	(??_printf+3)& (0+255),b
  5178  000896  0100               	movlb	0	; () banked
  5179  000898  51E2               	movf	??_printf& (0+255),w,b
  5180  00089A  0100               	movlb	0	; () banked
  5181  00089C  27E4               	addwf	(??_printf+2)& (0+255),f,b
  5182  00089E  0100               	movlb	0	; () banked
  5183  0008A0  51E3               	movf	(??_printf+1)& (0+255),w,b
  5184  0008A2  0100               	movlb	0	; () banked
  5185  0008A4  23E5               	addwfc	(??_printf+3)& (0+255),f,b
  5186  0008A6  0100               	movlb	0	; () banked
  5187  0008A8  51E4               	movf	(??_printf+2)& (0+255),w,b
  5188  0008AA  0101               	movlb	1	; () banked
  5189  0008AC  2707               	addwf	printf@width& (0+255),f,b
  5190  0008AE  0100               	movlb	0	; () banked
  5191  0008B0  51E5               	movf	(??_printf+3)& (0+255),w,b
  5192  0008B2  0101               	movlb	1	; () banked
  5193  0008B4  2308               	addwfc	(printf@width+1)& (0+255),f,b
  5194                           
  5195                           ; BSR set to: 1
  5196  0008B6  0100               	movlb	0	; () banked
  5197  0008B8  4BDA               	infsnz	printf@f& (0+255),f,b
  5198  0008BA  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5202  0008BC  C0DA  FFF6         	movff	printf@f,tblptrl
  5203  0008C0  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5204  0008C4                     	if	0	;tblptru may be non-zero
  5205  0008C4                     	endif
  5206  0008C4                     	if	0	;tblptru may be non-zero
  5207  0008C4                     	endif
  5208  0008C4  0008               	tblrd		*
  5209  0008C6  50F5               	movf	tablat,w,c
  5210  0008C8  ECD9  F017         	call	_isdigit
  5211  0008CC  A0D8               	btfss	status,0,c
  5212  0008CE  D008               	goto	l5204
  5213  0008D0  D7C4               	goto	l5190
  5214  0008D2                     l5198:
  5215                           
  5216                           ;doprnt.c: 721: flag |= 0x80;
  5217  0008D2  0101               	movlb	1	; () banked
  5218  0008D4  8F06               	bsf	printf@flag& (0+255),7,b
  5219                           
  5220                           ;doprnt.c: 723: break;
  5221  0008D6  D020               	goto	l5206
  5222  0008D8                     l5200:
  5223                           
  5224                           ; BSR set to: 1
  5225                           ;doprnt.c: 818: flag |= 0xC0;
  5226  0008D8  0EC0               	movlw	192
  5227  0008DA  0101               	movlb	1	; () banked
  5228  0008DC  1306               	iorwf	printf@flag& (0+255),f,b
  5229                           
  5230                           ; BSR set to: 1
  5231                           ;doprnt.c: 822: }
  5232                           
  5233                           ;doprnt.c: 819: break;
  5234  0008DE  D01C               	goto	l5206
  5235  0008E0                     l5204:
  5236  0008E0  C0DA  FFF6         	movff	printf@f,tblptrl
  5237  0008E4  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5238  0008E8  0100               	movlb	0	; () banked
  5239  0008EA  4BDA               	infsnz	printf@f& (0+255),f,b
  5240  0008EC  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5241  0008EE                     	if	0	;tblptru may be non-zero
  5242  0008EE                     	endif
  5243  0008EE                     	if	0	;tblptru may be non-zero
  5244  0008EE                     	endif
  5245  0008EE  0008               	tblrd		*
  5246  0008F0  CFF5 F109          	movff	tablat,printf@c
  5247  0008F4  0101               	movlb	1	; () banked
  5248  0008F6  5109               	movf	printf@c& (0+255),w,b
  5249                           
  5250                           ; Switch size 1, requested type "space"
  5251                           ; Number of cases is 5, Range of values is 0 to 120
  5252                           ; switch strategies available:
  5253                           ; Name         Instructions Cycles
  5254                           ; simple_byte           16     9 (average)
  5255                           ;	Chosen strategy is simple_byte
  5256  0008F8  0A00               	xorlw	0	; case 0
  5257  0008FA  B4D8               	btfsc	status,2,c
  5258  0008FC  0012               	return	
  5259  0008FE  0A64               	xorlw	100	; case 100
  5260  000900  B4D8               	btfsc	status,2,c
  5261  000902  D00A               	goto	l5206
  5262  000904  0A0D               	xorlw	13	; case 105
  5263  000906  B4D8               	btfsc	status,2,c
  5264  000908  D007               	goto	l5206
  5265  00090A  0A1C               	xorlw	28	; case 117
  5266  00090C  B4D8               	btfsc	status,2,c
  5267  00090E  D7E4               	goto	l5200
  5268  000910  0A0D               	xorlw	13	; case 120
  5269  000912  B4D8               	btfsc	status,2,c
  5270  000914  D7DE               	goto	l5198
  5271  000916  D146               	goto	l5304
  5272  000918                     l5206:
  5273                           
  5274                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5275  000918  C106  F0E2         	movff	printf@flag,??_printf
  5276  00091C  0EC0               	movlw	192
  5277  00091E  0100               	movlb	0	; () banked
  5278  000920  17E2               	andwf	??_printf& (0+255),f,b
  5279  000922  A4D8               	btfss	status,2,c
  5280  000924  D019               	goto	l5218
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;doprnt.c: 1253: {
  5284                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5285  000926  C101  FFD9         	movff	printf@ap,fsr2l
  5286  00092A  C102  FFDA         	movff	printf@ap+1,fsr2h
  5287  00092E  CFDE F104          	movff	postinc2,printf@val
  5288  000932  CFDD F105          	movff	postdec2,printf@val+1
  5289                           
  5290                           ; BSR set to: 0
  5291  000936  0E02               	movlw	2
  5292  000938  0101               	movlb	1	; () banked
  5293  00093A  2701               	addwf	printf@ap& (0+255),f,b
  5294  00093C  0E00               	movlw	0
  5295  00093E  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  5296                           
  5297                           ; BSR set to: 1
  5298                           ;doprnt.c: 1261: if((int)val < 0) {
  5299  000940  0101               	movlb	1	; () banked
  5300  000942  AF05               	btfss	(printf@val+1)& (0+255),7,b
  5301  000944  D053               	goto	l5252
  5302                           
  5303                           ; BSR set to: 1
  5304                           ;doprnt.c: 1262: flag |= 0x03;
  5305  000946  0E03               	movlw	3
  5306  000948  0101               	movlb	1	; () banked
  5307  00094A  1306               	iorwf	printf@flag& (0+255),f,b
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;doprnt.c: 1263: val = -val;
  5311  00094C  0101               	movlb	1	; () banked
  5312  00094E  6D04               	negf	printf@val& (0+255),b
  5313  000950  1F05               	comf	(printf@val+1)& (0+255),f,b
  5314  000952  B0D8               	btfsc	status,0,c
  5315  000954  2B05               	incf	(printf@val+1)& (0+255),f,b
  5316                           
  5317                           ; BSR set to: 1
  5318                           ;doprnt.c: 1264: }
  5319                           ;doprnt.c: 1266: }
  5320  000956  D04A               	goto	l5252
  5321  000958                     l5218:
  5322                           
  5323                           ;doprnt.c: 1268: else
  5324                           ;doprnt.c: 1273: {
  5325                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5326  000958  C101  FFD9         	movff	printf@ap,fsr2l
  5327  00095C  C102  FFDA         	movff	printf@ap+1,fsr2h
  5328  000960  CFDE F104          	movff	postinc2,printf@val
  5329  000964  CFDD F105          	movff	postdec2,printf@val+1
  5330  000968  0E02               	movlw	2
  5331  00096A  0101               	movlb	1	; () banked
  5332  00096C  2701               	addwf	printf@ap& (0+255),f,b
  5333  00096E  0E00               	movlw	0
  5334  000970  2302               	addwfc	(printf@ap+1)& (0+255),f,b
  5335                           
  5336                           ; BSR set to: 1
  5337                           ;doprnt.c: 1287: }
  5338                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5339  000972  D03C               	goto	l5252
  5340  000974                     l5222:
  5341                           
  5342                           ; BSR set to: 1
  5343                           ;doprnt.c: 1302: case 0xC0:
  5344                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5345  000974  0E01               	movlw	1
  5346  000976  0101               	movlb	1	; () banked
  5347  000978  6F09               	movwf	printf@c& (0+255),b
  5348  00097A                     l5224:
  5349                           
  5350                           ; BSR set to: 1
  5351  00097A  0E05               	movlw	5
  5352  00097C  0101               	movlb	1	; () banked
  5353  00097E  1909               	xorwf	printf@c& (0+255),w,b
  5354  000980  B4D8               	btfsc	status,2,c
  5355  000982  D040               	goto	l5254
  5356                           
  5357                           ; BSR set to: 1
  5358                           ;doprnt.c: 1306: if(val < dpowers[c])
  5359                           
  5360                           ; BSR set to: 1
  5361                           
  5362                           ; BSR set to: 1
  5363  000984  0101               	movlb	1	; () banked
  5364  000986  5109               	movf	printf@c& (0+255),w,b
  5365  000988  0D02               	mullw	2
  5366  00098A  0E48               	movlw	low _dpowers
  5367  00098C  24F3               	addwf	prodl,w,c
  5368  00098E  6EF6               	movwf	tblptrl,c
  5369  000990  0EFE               	movlw	high _dpowers
  5370  000992  20F4               	addwfc	prodh,w,c
  5371  000994  6EF7               	movwf	tblptrh,c
  5372  000996                     	if	0	;There are less than 3 active tblptr bytes
  5373  000996                     	endif
  5374  000996  0009               	tblrd		*+
  5375  000998  50F5               	movf	tablat,w,c
  5376  00099A  0101               	movlb	1	; () banked
  5377  00099C  5D04               	subwf	printf@val& (0+255),w,b
  5378  00099E  0009               	tblrd		*+
  5379  0009A0  50F5               	movf	tablat,w,c
  5380  0009A2  0101               	movlb	1	; () banked
  5381  0009A4  5905               	subwfb	(printf@val+1)& (0+255),w,b
  5382  0009A6  A0D8               	btfss	status,0,c
  5383  0009A8  D02D               	goto	l5254
  5384                           
  5385                           ; BSR set to: 1
  5386                           
  5387                           ; BSR set to: 1
  5388                           
  5389                           ; BSR set to: 1
  5390                           ;doprnt.c: 1307: break;
  5391  0009AA  0101               	movlb	1	; () banked
  5392  0009AC  2B09               	incf	printf@c& (0+255),f,b
  5393  0009AE  D7E5               	goto	l5224
  5394  0009B0                     l5236:
  5395                           
  5396                           ; BSR set to: 1
  5397                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5398  0009B0  0E01               	movlw	1
  5399  0009B2  0101               	movlb	1	; () banked
  5400  0009B4  6F09               	movwf	printf@c& (0+255),b
  5401  0009B6                     l5238:
  5402                           
  5403                           ; BSR set to: 1
  5404  0009B6  0E04               	movlw	4
  5405  0009B8  0101               	movlb	1	; () banked
  5406  0009BA  1909               	xorwf	printf@c& (0+255),w,b
  5407  0009BC  B4D8               	btfsc	status,2,c
  5408  0009BE  D022               	goto	l5254
  5409                           
  5410                           ; BSR set to: 1
  5411                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5412                           
  5413                           ; BSR set to: 1
  5414                           
  5415                           ; BSR set to: 1
  5416  0009C0  0101               	movlb	1	; () banked
  5417  0009C2  5109               	movf	printf@c& (0+255),w,b
  5418  0009C4  0D02               	mullw	2
  5419  0009C6  0E52               	movlw	low _hexpowers
  5420  0009C8  24F3               	addwf	prodl,w,c
  5421  0009CA  6EF6               	movwf	tblptrl,c
  5422  0009CC  0EFE               	movlw	high _hexpowers
  5423  0009CE  20F4               	addwfc	prodh,w,c
  5424  0009D0  6EF7               	movwf	tblptrh,c
  5425  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  5426  0009D2                     	endif
  5427  0009D2  0009               	tblrd		*+
  5428  0009D4  50F5               	movf	tablat,w,c
  5429  0009D6  0101               	movlb	1	; () banked
  5430  0009D8  5D04               	subwf	printf@val& (0+255),w,b
  5431  0009DA  0009               	tblrd		*+
  5432  0009DC  50F5               	movf	tablat,w,c
  5433  0009DE  0101               	movlb	1	; () banked
  5434  0009E0  5905               	subwfb	(printf@val+1)& (0+255),w,b
  5435  0009E2  A0D8               	btfss	status,0,c
  5436  0009E4  D00F               	goto	l5254
  5437                           
  5438                           ; BSR set to: 1
  5439                           
  5440                           ; BSR set to: 1
  5441                           
  5442                           ; BSR set to: 1
  5443                           ;doprnt.c: 1318: break;
  5444  0009E6  0101               	movlb	1	; () banked
  5445  0009E8  2B09               	incf	printf@c& (0+255),f,b
  5446  0009EA  D7E5               	goto	l5238
  5447  0009EC                     l5252:
  5448                           
  5449                           ; BSR set to: 1
  5450  0009EC  0101               	movlb	1	; () banked
  5451  0009EE  5106               	movf	printf@flag& (0+255),w,b
  5452  0009F0  0BC0               	andlw	192
  5453                           
  5454                           ; Switch size 1, requested type "space"
  5455                           ; Number of cases is 3, Range of values is 0 to 192
  5456                           ; switch strategies available:
  5457                           ; Name         Instructions Cycles
  5458                           ; simple_byte           10     6 (average)
  5459                           ;	Chosen strategy is simple_byte
  5460  0009F2  0A00               	xorlw	0	; case 0
  5461  0009F4  B4D8               	btfsc	status,2,c
  5462  0009F6  D7BE               	goto	l5222
  5463  0009F8  0A80               	xorlw	128	; case 128
  5464  0009FA  B4D8               	btfsc	status,2,c
  5465  0009FC  D7D9               	goto	l5236
  5466  0009FE  0A40               	xorlw	64	; case 192
  5467  000A00  B4D8               	btfsc	status,2,c
  5468  000A02  D7B8               	goto	l5222
  5469  000A04                     l5254:
  5470                           
  5471                           ; BSR set to: 1
  5472                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5473  000A04  0101               	movlb	1	; () banked
  5474  000A06  5107               	movf	printf@width& (0+255),w,b
  5475  000A08  0101               	movlb	1	; () banked
  5476  000A0A  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5477  000A0C  B4D8               	btfsc	status,2,c
  5478  000A0E  D00B               	goto	l5260
  5479                           
  5480                           ; BSR set to: 1
  5481  000A10  C106  F0E2         	movff	printf@flag,??_printf
  5482  000A14  0E03               	movlw	3
  5483  000A16  0100               	movlb	0	; () banked
  5484  000A18  17E2               	andwf	??_printf& (0+255),f,b
  5485  000A1A  B4D8               	btfsc	status,2,c
  5486  000A1C  D004               	goto	l5260
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1346: width--;
  5490  000A1E  0101               	movlb	1	; () banked
  5491  000A20  0707               	decf	printf@width& (0+255),f,b
  5492  000A22  A0D8               	btfss	status,0,c
  5493  000A24  0708               	decf	(printf@width+1)& (0+255),f,b
  5494  000A26                     l5260:
  5495                           
  5496                           ;doprnt.c: 1381: if(width > c)
  5497  000A26  0E80               	movlw	128
  5498  000A28  0101               	movlb	1	; () banked
  5499  000A2A  BF09               	btfsc	printf@c& (0+255),7,b
  5500  000A2C  0E7F               	movlw	127
  5501  000A2E  0100               	movlb	0	; () banked
  5502  000A30  6FE2               	movwf	??_printf& (0+255),b
  5503  000A32  0101               	movlb	1	; () banked
  5504  000A34  5107               	movf	printf@width& (0+255),w,b
  5505  000A36  0101               	movlb	1	; () banked
  5506  000A38  5D09               	subwf	printf@c& (0+255),w,b
  5507  000A3A  0101               	movlb	1	; () banked
  5508  000A3C  5108               	movf	(printf@width+1)& (0+255),w,b
  5509  000A3E  0A80               	xorlw	128
  5510  000A40  0100               	movlb	0	; () banked
  5511  000A42  59E2               	subwfb	??_printf& (0+255),w,b
  5512  000A44  B0D8               	btfsc	status,0,c
  5513  000A46  D00B               	goto	l5264
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;doprnt.c: 1382: width -= c;
  5517  000A48  0101               	movlb	1	; () banked
  5518  000A4A  5109               	movf	printf@c& (0+255),w,b
  5519  000A4C  0101               	movlb	1	; () banked
  5520  000A4E  5F07               	subwf	printf@width& (0+255),f,b
  5521  000A50  0E00               	movlw	0
  5522  000A52  0101               	movlb	1	; () banked
  5523  000A54  BF09               	btfsc	printf@c& (0+255),7,b
  5524  000A56  0EFF               	movlw	255
  5525  000A58  0101               	movlb	1	; () banked
  5526  000A5A  5B08               	subwfb	(printf@width+1)& (0+255),f,b
  5527  000A5C  D005               	goto	l5266
  5528  000A5E                     l5264:
  5529                           
  5530                           ;doprnt.c: 1383: else
  5531                           ;doprnt.c: 1384: width = 0;
  5532  000A5E  0E00               	movlw	0
  5533  000A60  0101               	movlb	1	; () banked
  5534  000A62  6F08               	movwf	(printf@width+1)& (0+255),b
  5535  000A64  0E00               	movlw	0
  5536  000A66  6F07               	movwf	printf@width& (0+255),b
  5537  000A68                     l5266:
  5538                           
  5539                           ; BSR set to: 1
  5540                           ;doprnt.c: 1387: if(flag & 0x04) {
  5541  000A68  0101               	movlb	1	; () banked
  5542  000A6A  A506               	btfss	printf@flag& (0+255),2,b
  5543  000A6C  D018               	goto	l5278
  5544                           
  5545                           ; BSR set to: 1
  5546                           ;doprnt.c: 1392: if(flag & 0x03)
  5547  000A6E  C106  F0E2         	movff	printf@flag,??_printf
  5548  000A72  0E03               	movlw	3
  5549  000A74  0100               	movlb	0	; () banked
  5550  000A76  17E2               	andwf	??_printf& (0+255),f,b
  5551  000A78  B4D8               	btfsc	status,2,c
  5552  000A7A  D003               	goto	l5272
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;doprnt.c: 1393: (putch('-') );
  5556  000A7C  0E2D               	movlw	45
  5557  000A7E  EC65  F018         	call	_putch
  5558  000A82                     l5272:
  5559                           
  5560                           ;doprnt.c: 1415: if(width)
  5561  000A82  0101               	movlb	1	; () banked
  5562  000A84  5107               	movf	printf@width& (0+255),w,b
  5563  000A86  0101               	movlb	1	; () banked
  5564  000A88  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5565  000A8A  B4D8               	btfsc	status,2,c
  5566  000A8C  D025               	goto	l5288
  5567                           
  5568                           ; BSR set to: 1
  5569                           ;doprnt.c: 1417: (putch('0') );
  5570                           
  5571                           ; BSR set to: 1
  5572                           
  5573                           ;doprnt.c: 1416: do
  5574  000A8E  0E30               	movlw	48
  5575  000A90  EC65  F018         	call	_putch
  5576                           
  5577                           ;doprnt.c: 1418: while(--width);
  5578  000A94  0101               	movlb	1	; () banked
  5579  000A96  0707               	decf	printf@width& (0+255),f,b
  5580  000A98  A0D8               	btfss	status,0,c
  5581  000A9A  0708               	decf	(printf@width+1)& (0+255),f,b
  5582  000A9C  D7F2               	goto	l5272
  5583  000A9E                     l5278:
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;doprnt.c: 1422: {
  5587                           ;doprnt.c: 1424: if(width
  5588                           ;doprnt.c: 1428: )
  5589  000A9E  0101               	movlb	1	; () banked
  5590  000AA0  5107               	movf	printf@width& (0+255),w,b
  5591  000AA2  0101               	movlb	1	; () banked
  5592  000AA4  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5593  000AA6  B4D8               	btfsc	status,2,c
  5594  000AA8  D00D               	goto	l5284
  5595  000AAA                     l5280:
  5596                           
  5597                           ; BSR set to: 1
  5598                           ;doprnt.c: 1430: (putch(' ') );
  5599  000AAA  0E20               	movlw	32
  5600  000AAC  EC65  F018         	call	_putch
  5601                           
  5602                           ;doprnt.c: 1431: while(--width);
  5603  000AB0  0101               	movlb	1	; () banked
  5604  000AB2  0707               	decf	printf@width& (0+255),f,b
  5605  000AB4  A0D8               	btfss	status,0,c
  5606  000AB6  0708               	decf	(printf@width+1)& (0+255),f,b
  5607  000AB8  0101               	movlb	1	; () banked
  5608  000ABA  5107               	movf	printf@width& (0+255),w,b
  5609  000ABC  0101               	movlb	1	; () banked
  5610  000ABE  1108               	iorwf	(printf@width+1)& (0+255),w,b
  5611  000AC0  A4D8               	btfss	status,2,c
  5612  000AC2  D7F3               	goto	l5280
  5613  000AC4                     l5284:
  5614                           
  5615                           ; BSR set to: 1
  5616                           ;doprnt.c: 1438: if(flag & 0x03)
  5617  000AC4  C106  F0E2         	movff	printf@flag,??_printf
  5618  000AC8  0E03               	movlw	3
  5619  000ACA  0100               	movlb	0	; () banked
  5620  000ACC  17E2               	andwf	??_printf& (0+255),f,b
  5621  000ACE  B4D8               	btfsc	status,2,c
  5622  000AD0  D003               	goto	l5288
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;doprnt.c: 1439: (putch('-') );
  5626  000AD2  0E2D               	movlw	45
  5627  000AD4  EC65  F018         	call	_putch
  5628  000AD8                     l5288:
  5629                           
  5630                           ;doprnt.c: 1469: }
  5631                           ;doprnt.c: 1472: prec = c;
  5632  000AD8  C109  F103         	movff	printf@c,printf@prec
  5633                           
  5634                           ;doprnt.c: 1474: while(prec--) {
  5635  000ADC  D05D               	goto	l5302
  5636  000ADE                     l5290:
  5637                           
  5638                           ;doprnt.c: 1486: case 0xC0:
  5639                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5640  000ADE  0101               	movlb	1	; () banked
  5641  000AE0  5103               	movf	printf@prec& (0+255),w,b
  5642  000AE2  0D02               	mullw	2
  5643  000AE4  0E48               	movlw	low _dpowers
  5644  000AE6  24F3               	addwf	prodl,w,c
  5645  000AE8  6EF6               	movwf	tblptrl,c
  5646  000AEA  0EFE               	movlw	high _dpowers
  5647  000AEC  20F4               	addwfc	prodh,w,c
  5648  000AEE  6EF7               	movwf	tblptrh,c
  5649  000AF0                     	if	0	;There are less than 3 active tblptr bytes
  5650  000AF0                     	endif
  5651  000AF0  0009               	tblrd		*+
  5652  000AF2  CFF5 F0D0          	movff	tablat,___lwdiv@divisor
  5653  000AF6  000A               	tblrd		*-
  5654  000AF8  CFF5 F0D1          	movff	tablat,___lwdiv@divisor+1
  5655  000AFC  C104  F0CE         	movff	printf@val,___lwdiv@dividend
  5656  000B00  C105  F0CF         	movff	printf@val+1,___lwdiv@dividend+1
  5657  000B04  ECE0  F014         	call	___lwdiv	;wreg free
  5658  000B08  C0CE  F0D5         	movff	?___lwdiv,___lwmod@dividend
  5659  000B0C  C0CF  F0D6         	movff	?___lwdiv+1,___lwmod@dividend+1
  5660  000B10  0E00               	movlw	0
  5661  000B12  0100               	movlb	0	; () banked
  5662  000B14  6FD8               	movwf	(___lwmod@divisor+1)& (0+255),b
  5663  000B16  0E0A               	movlw	10
  5664  000B18  6FD7               	movwf	___lwmod@divisor& (0+255),b
  5665  000B1A  EC8C  F015         	call	___lwmod	;wreg free
  5666  000B1E  0100               	movlb	0	; () banked
  5667  000B20  51D5               	movf	?___lwmod& (0+255),w,b
  5668  000B22  0F30               	addlw	48
  5669  000B24  0101               	movlb	1	; () banked
  5670  000B26  6F09               	movwf	printf@c& (0+255),b
  5671                           
  5672                           ;doprnt.c: 1491: break;
  5673  000B28  D033               	goto	l5300
  5674  000B2A                     l5292:
  5675                           
  5676                           ; BSR set to: 1
  5677                           ;doprnt.c: 1499: {
  5678                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5679  000B2A  C104  F0CE         	movff	printf@val,___lwdiv@dividend
  5680  000B2E  C105  F0CF         	movff	printf@val+1,___lwdiv@dividend+1
  5681  000B32  0101               	movlb	1	; () banked
  5682  000B34  5103               	movf	printf@prec& (0+255),w,b
  5683  000B36  0D02               	mullw	2
  5684  000B38  0E52               	movlw	low _hexpowers
  5685  000B3A  24F3               	addwf	prodl,w,c
  5686  000B3C  6EF6               	movwf	tblptrl,c
  5687  000B3E  0EFE               	movlw	high _hexpowers
  5688  000B40  20F4               	addwfc	prodh,w,c
  5689  000B42  6EF7               	movwf	tblptrh,c
  5690  000B44                     	if	0	;There are less than 3 active tblptr bytes
  5691  000B44                     	endif
  5692  000B44  0009               	tblrd		*+
  5693  000B46  CFF5 F0D0          	movff	tablat,___lwdiv@divisor
  5694  000B4A  000A               	tblrd		*-
  5695  000B4C  CFF5 F0D1          	movff	tablat,___lwdiv@divisor+1
  5696  000B50  ECE0  F014         	call	___lwdiv	;wreg free
  5697  000B54  0100               	movlb	0	; () banked
  5698  000B56  51CE               	movf	?___lwdiv& (0+255),w,b
  5699  000B58  0B0F               	andlw	15
  5700  000B5A  0101               	movlb	1	; () banked
  5701  000B5C  6F00               	movwf	printf@idx& (0+255),b
  5702                           
  5703                           ; BSR set to: 1
  5704                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5705  000B5E  0101               	movlb	1	; () banked
  5706  000B60  5100               	movf	printf@idx& (0+255),w,b
  5707  000B62  0D01               	mullw	1
  5708  000B64  0E21               	movlw	low STR_22
  5709  000B66  24F3               	addwf	prodl,w,c
  5710  000B68  6EF6               	movwf	tblptrl,c
  5711  000B6A  0EFF               	movlw	high STR_22
  5712  000B6C  20F4               	addwfc	prodh,w,c
  5713  000B6E  6EF7               	movwf	tblptrh,c
  5714  000B70                     	if	0	;There are less than 3 active tblptr bytes
  5715  000B70                     	endif
  5716  000B70  0008               	tblrd		*
  5717  000B72  CFF5 F109          	movff	tablat,printf@c
  5718                           
  5719                           ; BSR set to: 1
  5720                           ;doprnt.c: 1523: }
  5721                           
  5722                           ;doprnt.c: 1508: }
  5723                           ;doprnt.c: 1510: break;
  5724  000B76  D00C               	goto	l5300
  5725  000B78                     l5298:
  5726  000B78  0101               	movlb	1	; () banked
  5727  000B7A  5106               	movf	printf@flag& (0+255),w,b
  5728  000B7C  0BC0               	andlw	192
  5729                           
  5730                           ; Switch size 1, requested type "space"
  5731                           ; Number of cases is 3, Range of values is 0 to 192
  5732                           ; switch strategies available:
  5733                           ; Name         Instructions Cycles
  5734                           ; simple_byte           10     6 (average)
  5735                           ;	Chosen strategy is simple_byte
  5736  000B7E  0A00               	xorlw	0	; case 0
  5737  000B80  B4D8               	btfsc	status,2,c
  5738  000B82  D7AD               	goto	l5290
  5739  000B84  0A80               	xorlw	128	; case 128
  5740  000B86  B4D8               	btfsc	status,2,c
  5741  000B88  D7D0               	goto	l5292
  5742  000B8A  0A40               	xorlw	64	; case 192
  5743  000B8C  B4D8               	btfsc	status,2,c
  5744  000B8E  D7A7               	goto	l5290
  5745  000B90                     l5300:
  5746                           
  5747                           ; BSR set to: 1
  5748                           ;doprnt.c: 1524: (putch(c) );
  5749  000B90  0101               	movlb	1	; () banked
  5750  000B92  5109               	movf	printf@c& (0+255),w,b
  5751  000B94  EC65  F018         	call	_putch
  5752  000B98                     l5302:
  5753  000B98  0101               	movlb	1	; () banked
  5754  000B9A  0703               	decf	printf@prec& (0+255),f,b
  5755  000B9C  0101               	movlb	1	; () banked
  5756  000B9E  2903               	incf	printf@prec& (0+255),w,b
  5757  000BA0  A4D8               	btfss	status,2,c
  5758  000BA2  D7EA               	goto	l5298
  5759  000BA4                     l5304:
  5760  000BA4  C0DA  FFF6         	movff	printf@f,tblptrl
  5761  000BA8  C0DB  FFF7         	movff	printf@f+1,tblptrh
  5762  000BAC  0100               	movlb	0	; () banked
  5763  000BAE  4BDA               	infsnz	printf@f& (0+255),f,b
  5764  000BB0  2BDB               	incf	(printf@f+1)& (0+255),f,b
  5765  000BB2                     	if	0	;tblptru may be non-zero
  5766  000BB2                     	endif
  5767  000BB2                     	if	0	;tblptru may be non-zero
  5768  000BB2                     	endif
  5769  000BB2  0008               	tblrd		*
  5770  000BB4  CFF5 F109          	movff	tablat,printf@c
  5771  000BB8  0101               	movlb	1	; () banked
  5772  000BBA  5109               	movf	printf@c& (0+255),w,b
  5773  000BBC  B4D8               	btfsc	status,2,c
  5774  000BBE  0012               	return	
  5775  000BC0  D61C               	goto	l5174
  5776  000BC2                     __end_of_printf:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           intcon	equ	0xFF2
  5785                           intcon2	equ	0xFF1
  5786                           intcon3	equ	0xFF0
  5787                           postinc0	equ	0xFEE
  5788                           wreg	equ	0xFE8
  5789                           postinc1	equ	0xFE6
  5790                           postdec1	equ	0xFE5
  5791                           fsr1h	equ	0xFE2
  5792                           fsr1l	equ	0xFE1
  5793                           indf2	equ	0xFDF
  5794                           postinc2	equ	0xFDE
  5795                           postdec2	equ	0xFDD
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function _putch *****************
  5801 ;; Defined at:
  5802 ;;		line 31 in file "lcd.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  data            1    wreg     unsigned char 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  data            1   18[BANK0 ] unsigned char 
  5807 ;; Return value:  Size  Location     Type
  5808 ;;                  1    wreg      void 
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;Total ram usage:        1 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    8
  5823 ;; This function calls:
  5824 ;;		_lcdNibble
  5825 ;; This function is called by:
  5826 ;;		_printf
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text18
  5831  0030CA                     __ptext18:
  5832                           	opt stack 0
  5833  0030CA                     _putch:
  5834                           	opt stack 20
  5835                           
  5836                           ;incstack = 0
  5837                           ;putch@data stored from wreg
  5838  0030CA  0100               	movlb	0	; () banked
  5839  0030CC  6FD0               	movwf	putch@data& (0+255),b
  5840                           
  5841                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5842  0030CE  848C               	bsf	3980,2,c	;volatile
  5843                           
  5844                           ;lcd.c: 33: lcdNibble(data);
  5845  0030D0  0100               	movlb	0	; () banked
  5846  0030D2  51D0               	movf	putch@data& (0+255),w,b
  5847  0030D4  ECBD  F015         	call	_lcdNibble
  5848  0030D8  0012               	return		;funcret
  5849  0030DA                     __end_of_putch:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           intcon2	equ	0xFF1
  5859                           intcon3	equ	0xFF0
  5860                           postinc0	equ	0xFEE
  5861                           wreg	equ	0xFE8
  5862                           postinc1	equ	0xFE6
  5863                           postdec1	equ	0xFE5
  5864                           fsr1h	equ	0xFE2
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function _isdigit *****************
  5874 ;; Defined at:
  5875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  c               1    wreg     unsigned char 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  c               1   18[BANK0 ] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;Total ram usage:        3 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    7
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_printf
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903                           	psect	text19
  5904  002FB2                     __ptext19:
  5905                           	opt stack 0
  5906  002FB2                     _isdigit:
  5907                           	opt stack 21
  5908                           
  5909                           ;incstack = 0
  5910                           ;isdigit@c stored from wreg
  5911  002FB2  0100               	movlb	0	; () banked
  5912  002FB4  6FD0               	movwf	isdigit@c& (0+255),b
  5913  002FB6  0E00               	movlw	0
  5914  002FB8  0100               	movlb	0	; () banked
  5915  002FBA  6FCF               	movwf	_isdigit$806& (0+255),b
  5916                           
  5917                           ; BSR set to: 0
  5918  002FBC  0E3A               	movlw	58
  5919  002FBE  0100               	movlb	0	; () banked
  5920  002FC0  61D0               	cpfslt	isdigit@c& (0+255),b
  5921  002FC2  D007               	goto	l5084
  5922                           
  5923                           ; BSR set to: 0
  5924  002FC4  0E2F               	movlw	47
  5925  002FC6  0100               	movlb	0	; () banked
  5926  002FC8  65D0               	cpfsgt	isdigit@c& (0+255),b
  5927  002FCA  D003               	goto	l5084
  5928                           
  5929                           ; BSR set to: 0
  5930  002FCC  0E01               	movlw	1
  5931  002FCE  0100               	movlb	0	; () banked
  5932  002FD0  6FCF               	movwf	_isdigit$806& (0+255),b
  5933  002FD2                     l5084:
  5934                           
  5935                           ; BSR set to: 0
  5936  002FD2  C0CF  F0CE         	movff	_isdigit$806,??_isdigit
  5937  002FD6  0100               	movlb	0	; () banked
  5938  002FD8  31CE               	rrcf	??_isdigit& (0+255),w,b
  5939  002FDA  0012               	return	
  5940  002FDC                     __end_of_isdigit:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           intcon3	equ	0xFF0
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           postinc1	equ	0xFE6
  5954                           postdec1	equ	0xFE5
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           indf2	equ	0xFDF
  5958                           postinc2	equ	0xFDE
  5959                           postdec2	equ	0xFDD
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function ___wmul *****************
  5965 ;; Defined at:
  5966 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5969 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  product         2   20[BANK0 ] unsigned int 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  2   16[BANK0 ] unsigned int 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0, prodl, prodh
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        6 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    7
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_printf
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text20
  5996  002F4E                     __ptext20:
  5997                           	opt stack 0
  5998  002F4E                     ___wmul:
  5999                           	opt stack 21
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;incstack = 0
  6003  002F4E  0100               	movlb	0	; () banked
  6004  002F50  51CE               	movf	___wmul@multiplier& (0+255),w,b
  6005  002F52  0100               	movlb	0	; () banked
  6006  002F54  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  6007  002F56  CFF3 F0D2          	movff	prodl,___wmul@product
  6008  002F5A  CFF4 F0D3          	movff	prodh,___wmul@product+1
  6009  002F5E  0100               	movlb	0	; () banked
  6010  002F60  51CE               	movf	___wmul@multiplier& (0+255),w,b
  6011  002F62  0100               	movlb	0	; () banked
  6012  002F64  03D1               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6013  002F66  50F3               	movf	prodl,w,c
  6014  002F68  0100               	movlb	0	; () banked
  6015  002F6A  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  6016  002F6C  0100               	movlb	0	; () banked
  6017  002F6E  51CF               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6018  002F70  0100               	movlb	0	; () banked
  6019  002F72  03D0               	mulwf	___wmul@multiplicand& (0+255),b
  6020  002F74  50F3               	movf	prodl,w,c
  6021  002F76  0100               	movlb	0	; () banked
  6022  002F78  27D3               	addwf	(___wmul@product+1)& (0+255),f,b
  6023                           
  6024                           ; BSR set to: 0
  6025  002F7A  C0D2  F0CE         	movff	___wmul@product,?___wmul
  6026  002F7E  C0D3  F0CF         	movff	___wmul@product+1,?___wmul+1
  6027  002F82  0012               	return	
  6028  002F84                     __end_of___wmul:
  6029                           	opt stack 0
  6030                           tblptru	equ	0xFF8
  6031                           tblptrh	equ	0xFF7
  6032                           tblptrl	equ	0xFF6
  6033                           tablat	equ	0xFF5
  6034                           prodh	equ	0xFF4
  6035                           prodl	equ	0xFF3
  6036                           intcon	equ	0xFF2
  6037                           intcon2	equ	0xFF1
  6038                           intcon3	equ	0xFF0
  6039                           postinc0	equ	0xFEE
  6040                           wreg	equ	0xFE8
  6041                           postinc1	equ	0xFE6
  6042                           postdec1	equ	0xFE5
  6043                           fsr1h	equ	0xFE2
  6044                           fsr1l	equ	0xFE1
  6045                           indf2	equ	0xFDF
  6046                           postinc2	equ	0xFDE
  6047                           postdec2	equ	0xFDD
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function ___lwmod *****************
  6053 ;; Defined at:
  6054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  dividend        2   23[BANK0 ] unsigned int 
  6057 ;;  divisor         2   25[BANK0 ] unsigned int 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  counter         1   27[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  2   23[BANK0 ] unsigned int 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;Total ram usage:        5 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    7
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_printf
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text21
  6084  002B18                     __ptext21:
  6085                           	opt stack 0
  6086  002B18                     ___lwmod:
  6087                           	opt stack 21
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;incstack = 0
  6091  002B18  0100               	movlb	0	; () banked
  6092  002B1A  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6093  002B1C  0100               	movlb	0	; () banked
  6094  002B1E  11D8               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6095  002B20  B4D8               	btfsc	status,2,c
  6096  002B22  D026               	goto	l886
  6097                           
  6098                           ; BSR set to: 0
  6099  002B24  0E01               	movlw	1
  6100  002B26  0100               	movlb	0	; () banked
  6101  002B28  6FD9               	movwf	___lwmod@counter& (0+255),b
  6102  002B2A  D006               	goto	l5158
  6103  002B2C                     l5156:
  6104                           
  6105                           ; BSR set to: 0
  6106  002B2C  0100               	movlb	0	; () banked
  6107  002B2E  90D8               	bcf	status,0,c
  6108  002B30  37D7               	rlcf	___lwmod@divisor& (0+255),f,b
  6109  002B32  37D8               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6110  002B34  0100               	movlb	0	; () banked
  6111  002B36  2BD9               	incf	___lwmod@counter& (0+255),f,b
  6112  002B38                     l5158:
  6113                           
  6114                           ; BSR set to: 0
  6115  002B38  0100               	movlb	0	; () banked
  6116  002B3A  AFD8               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6117  002B3C  D7F7               	goto	l5156
  6118  002B3E                     l5160:
  6119                           
  6120                           ; BSR set to: 0
  6121  002B3E  0100               	movlb	0	; () banked
  6122  002B40  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6123  002B42  0100               	movlb	0	; () banked
  6124  002B44  5DD5               	subwf	___lwmod@dividend& (0+255),w,b
  6125  002B46  0100               	movlb	0	; () banked
  6126  002B48  51D8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6127  002B4A  0100               	movlb	0	; () banked
  6128  002B4C  59D6               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6129  002B4E  A0D8               	btfss	status,0,c
  6130  002B50  D008               	goto	l5164
  6131                           
  6132                           ; BSR set to: 0
  6133  002B52  0100               	movlb	0	; () banked
  6134  002B54  51D7               	movf	___lwmod@divisor& (0+255),w,b
  6135  002B56  0100               	movlb	0	; () banked
  6136  002B58  5FD5               	subwf	___lwmod@dividend& (0+255),f,b
  6137  002B5A  0100               	movlb	0	; () banked
  6138  002B5C  51D8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6139  002B5E  0100               	movlb	0	; () banked
  6140  002B60  5BD6               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6141  002B62                     l5164:
  6142                           
  6143                           ; BSR set to: 0
  6144  002B62  0100               	movlb	0	; () banked
  6145  002B64  90D8               	bcf	status,0,c
  6146  002B66  33D8               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6147  002B68  33D7               	rrcf	___lwmod@divisor& (0+255),f,b
  6148                           
  6149                           ; BSR set to: 0
  6150  002B6A  0100               	movlb	0	; () banked
  6151  002B6C  2FD9               	decfsz	___lwmod@counter& (0+255),f,b
  6152  002B6E  D7E7               	goto	l5160
  6153  002B70                     l886:
  6154                           
  6155                           ; BSR set to: 0
  6156  002B70  C0D5  F0D5         	movff	___lwmod@dividend,?___lwmod
  6157  002B74  C0D6  F0D6         	movff	___lwmod@dividend+1,?___lwmod+1
  6158                           
  6159                           ; BSR set to: 0
  6160  002B78  0012               	return		;funcret
  6161  002B7A                     __end_of___lwmod:
  6162                           	opt stack 0
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           intcon2	equ	0xFF1
  6171                           intcon3	equ	0xFF0
  6172                           postinc0	equ	0xFEE
  6173                           wreg	equ	0xFE8
  6174                           postinc1	equ	0xFE6
  6175                           postdec1	equ	0xFE5
  6176                           fsr1h	equ	0xFE2
  6177                           fsr1l	equ	0xFE1
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           postdec2	equ	0xFDD
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function ___lwdiv *****************
  6186 ;; Defined at:
  6187 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  dividend        2   16[BANK0 ] unsigned int 
  6190 ;;  divisor         2   18[BANK0 ] unsigned int 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  quotient        2   21[BANK0 ] unsigned int 
  6193 ;;  counter         1   20[BANK0 ] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  2   16[BANK0 ] unsigned int 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6203 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;Total ram usage:        7 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    7
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_printf
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text22
  6218  0029C0                     __ptext22:
  6219                           	opt stack 0
  6220  0029C0                     ___lwdiv:
  6221                           	opt stack 21
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;incstack = 0
  6225  0029C0  0E00               	movlw	0
  6226  0029C2  0100               	movlb	0	; () banked
  6227  0029C4  6FD4               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6228  0029C6  0E00               	movlw	0
  6229  0029C8  6FD3               	movwf	___lwdiv@quotient& (0+255),b
  6230                           
  6231                           ; BSR set to: 0
  6232  0029CA  0100               	movlb	0	; () banked
  6233  0029CC  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6234  0029CE  0100               	movlb	0	; () banked
  6235  0029D0  11D1               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6236  0029D2  B4D8               	btfsc	status,2,c
  6237  0029D4  D02C               	goto	l876
  6238                           
  6239                           ; BSR set to: 0
  6240  0029D6  0E01               	movlw	1
  6241  0029D8  0100               	movlb	0	; () banked
  6242  0029DA  6FD2               	movwf	___lwdiv@counter& (0+255),b
  6243  0029DC  D006               	goto	l5138
  6244  0029DE                     l5136:
  6245                           
  6246                           ; BSR set to: 0
  6247  0029DE  0100               	movlb	0	; () banked
  6248  0029E0  90D8               	bcf	status,0,c
  6249  0029E2  37D0               	rlcf	___lwdiv@divisor& (0+255),f,b
  6250  0029E4  37D1               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6251  0029E6  0100               	movlb	0	; () banked
  6252  0029E8  2BD2               	incf	___lwdiv@counter& (0+255),f,b
  6253  0029EA                     l5138:
  6254                           
  6255                           ; BSR set to: 0
  6256  0029EA  0100               	movlb	0	; () banked
  6257  0029EC  AFD1               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6258  0029EE  D7F7               	goto	l5136
  6259  0029F0                     l5140:
  6260                           
  6261                           ; BSR set to: 0
  6262  0029F0  0100               	movlb	0	; () banked
  6263  0029F2  90D8               	bcf	status,0,c
  6264  0029F4  37D3               	rlcf	___lwdiv@quotient& (0+255),f,b
  6265  0029F6  37D4               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6266                           
  6267                           ; BSR set to: 0
  6268  0029F8  0100               	movlb	0	; () banked
  6269  0029FA  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6270  0029FC  0100               	movlb	0	; () banked
  6271  0029FE  5DCE               	subwf	___lwdiv@dividend& (0+255),w,b
  6272  002A00  0100               	movlb	0	; () banked
  6273  002A02  51D1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6274  002A04  0100               	movlb	0	; () banked
  6275  002A06  59CF               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6276  002A08  A0D8               	btfss	status,0,c
  6277  002A0A  D00A               	goto	l5148
  6278                           
  6279                           ; BSR set to: 0
  6280  002A0C  0100               	movlb	0	; () banked
  6281  002A0E  51D0               	movf	___lwdiv@divisor& (0+255),w,b
  6282  002A10  0100               	movlb	0	; () banked
  6283  002A12  5FCE               	subwf	___lwdiv@dividend& (0+255),f,b
  6284  002A14  0100               	movlb	0	; () banked
  6285  002A16  51D1               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6286  002A18  0100               	movlb	0	; () banked
  6287  002A1A  5BCF               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6288                           
  6289                           ; BSR set to: 0
  6290  002A1C  0100               	movlb	0	; () banked
  6291  002A1E  81D3               	bsf	___lwdiv@quotient& (0+255),0,b
  6292  002A20                     l5148:
  6293                           
  6294                           ; BSR set to: 0
  6295  002A20  0100               	movlb	0	; () banked
  6296  002A22  90D8               	bcf	status,0,c
  6297  002A24  33D1               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6298  002A26  33D0               	rrcf	___lwdiv@divisor& (0+255),f,b
  6299                           
  6300                           ; BSR set to: 0
  6301  002A28  0100               	movlb	0	; () banked
  6302  002A2A  2FD2               	decfsz	___lwdiv@counter& (0+255),f,b
  6303  002A2C  D7E1               	goto	l5140
  6304  002A2E                     l876:
  6305                           
  6306                           ; BSR set to: 0
  6307  002A2E  C0D3  F0CE         	movff	___lwdiv@quotient,?___lwdiv
  6308  002A32  C0D4  F0CF         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6309                           
  6310                           ; BSR set to: 0
  6311  002A36  0012               	return		;funcret
  6312  002A38                     __end_of___lwdiv:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           intcon2	equ	0xFF1
  6322                           intcon3	equ	0xFF0
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           postinc1	equ	0xFE6
  6326                           postdec1	equ	0xFE5
  6327                           fsr1h	equ	0xFE2
  6328                           fsr1l	equ	0xFE1
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           fsr2h	equ	0xFDA
  6333                           fsr2l	equ	0xFD9
  6334                           status	equ	0xFD8
  6335                           
  6336 ;; *************** function _lcdInst *****************
  6337 ;; Defined at:
  6338 ;;		line 26 in file "lcd.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  data            1    wreg     unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  data            1   18[BANK0 ] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;Total ram usage:        1 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    8
  6359 ;; This function calls:
  6360 ;;		_lcdNibble
  6361 ;; This function is called by:
  6362 ;;		_initLCD
  6363 ;;		_standby
  6364 ;;		_date_time
  6365 ;;		_bottle_count
  6366 ;;		_bottle_time
  6367 ;;		_operation
  6368 ;;		_operationend
  6369 ;;		_emergencystop
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text23
  6374  0030DA                     __ptext23:
  6375                           	opt stack 0
  6376  0030DA                     _lcdInst:
  6377                           	opt stack 21
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;incstack = 0
  6381                           ;lcdInst@data stored from wreg
  6382  0030DA  0100               	movlb	0	; () banked
  6383  0030DC  6FD0               	movwf	lcdInst@data& (0+255),b
  6384                           
  6385                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6386  0030DE  948C               	bcf	3980,2,c	;volatile
  6387                           
  6388                           ;lcd.c: 28: lcdNibble(data);
  6389  0030E0  0100               	movlb	0	; () banked
  6390  0030E2  51D0               	movf	lcdInst@data& (0+255),w,b
  6391  0030E4  ECBD  F015         	call	_lcdNibble
  6392  0030E8  0012               	return		;funcret
  6393  0030EA                     __end_of_lcdInst:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           intcon	equ	0xFF2
  6402                           intcon2	equ	0xFF1
  6403                           intcon3	equ	0xFF0
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           postinc1	equ	0xFE6
  6407                           postdec1	equ	0xFE5
  6408                           fsr1h	equ	0xFE2
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function _lcdNibble *****************
  6418 ;; Defined at:
  6419 ;;		line 36 in file "lcd.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  data            1    wreg     unsigned char 
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;  data            1   17[BANK0 ] unsigned char 
  6424 ;;  temp            1   16[BANK0 ] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;Total ram usage:        2 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    7
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_lcdInst
  6445 ;;		_putch
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text24
  6450  002B7A                     __ptext24:
  6451                           	opt stack 0
  6452  002B7A                     _lcdNibble:
  6453                           	opt stack 20
  6454                           
  6455                           ;incstack = 0
  6456                           ;lcdNibble@data stored from wreg
  6457  002B7A  0100               	movlb	0	; () banked
  6458  002B7C  6FCF               	movwf	lcdNibble@data& (0+255),b
  6459                           
  6460                           ;lcd.c: 38: char temp = data & 0xF0;
  6461  002B7E  0100               	movlb	0	; () banked
  6462  002B80  51CF               	movf	lcdNibble@data& (0+255),w,b
  6463  002B82  0BF0               	andlw	240
  6464  002B84  0100               	movlb	0	; () banked
  6465  002B86  6FCE               	movwf	lcdNibble@temp& (0+255),b
  6466                           
  6467                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6468  002B88  508C               	movf	3980,w,c	;volatile
  6469  002B8A  0B0F               	andlw	15
  6470  002B8C  6E8C               	movwf	3980,c	;volatile
  6471                           
  6472                           ;lcd.c: 40: LATD = temp | LATD;
  6473  002B8E  0100               	movlb	0	; () banked
  6474  002B90  51CE               	movf	lcdNibble@temp& (0+255),w,b
  6475  002B92  108C               	iorwf	3980,w,c	;volatile
  6476  002B94  6E8C               	movwf	3980,c	;volatile
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6480  002B96  968C               	bcf	3980,3,c	;volatile
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6484  002B98  0E19               	movlw	25
  6485  002B9A                     u5807:
  6486  002B9A  2EE8               	decfsz	wreg,f,c
  6487  002B9C  D7FE               	bra	u5807
  6488                           
  6489                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6490  002B9E  868C               	bsf	3980,3,c	;volatile
  6491                           
  6492                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6493  002BA0  0E19               	movlw	25
  6494  002BA2                     u5817:
  6495  002BA2  2EE8               	decfsz	wreg,f,c
  6496  002BA4  D7FE               	bra	u5817
  6497                           
  6498                           ;lcd.c: 47: data = data << 4;
  6499  002BA6  0100               	movlb	0	; () banked
  6500  002BA8  39CF               	swapf	lcdNibble@data& (0+255),w,b
  6501  002BAA  0BF0               	andlw	240
  6502  002BAC  0100               	movlb	0	; () banked
  6503  002BAE  6FCF               	movwf	lcdNibble@data& (0+255),b
  6504                           
  6505                           ;lcd.c: 49: temp = data & 0xF0;
  6506  002BB0  0100               	movlb	0	; () banked
  6507  002BB2  51CF               	movf	lcdNibble@data& (0+255),w,b
  6508  002BB4  0BF0               	andlw	240
  6509  002BB6  0100               	movlb	0	; () banked
  6510  002BB8  6FCE               	movwf	lcdNibble@temp& (0+255),b
  6511                           
  6512                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6513  002BBA  508C               	movf	3980,w,c	;volatile
  6514  002BBC  0B0F               	andlw	15
  6515  002BBE  6E8C               	movwf	3980,c	;volatile
  6516                           
  6517                           ;lcd.c: 51: LATD = temp | LATD;
  6518  002BC0  0100               	movlb	0	; () banked
  6519  002BC2  51CE               	movf	lcdNibble@temp& (0+255),w,b
  6520  002BC4  108C               	iorwf	3980,w,c	;volatile
  6521  002BC6  6E8C               	movwf	3980,c	;volatile
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6525  002BC8  968C               	bcf	3980,3,c	;volatile
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6529  002BCA  0E19               	movlw	25
  6530  002BCC                     u5827:
  6531  002BCC  2EE8               	decfsz	wreg,f,c
  6532  002BCE  D7FE               	bra	u5827
  6533                           
  6534                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6535  002BD0  868C               	bsf	3980,3,c	;volatile
  6536                           
  6537                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6538  002BD2  0E19               	movlw	25
  6539  002BD4                     u5837:
  6540  002BD4  2EE8               	decfsz	wreg,f,c
  6541  002BD6  D7FE               	bra	u5837
  6542  002BD8  0012               	return		;funcret
  6543  002BDA                     __end_of_lcdNibble:
  6544                           	opt stack 0
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           intcon2	equ	0xFF1
  6553                           intcon3	equ	0xFF0
  6554                           postinc0	equ	0xFEE
  6555                           wreg	equ	0xFE8
  6556                           postinc1	equ	0xFE6
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function ___awmod *****************
  6568 ;; Defined at:
  6569 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  dividend        2   16[BANK0 ] int 
  6572 ;;  divisor         2   18[BANK0 ] int 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  sign            1   21[BANK0 ] unsigned char 
  6575 ;;  counter         1   20[BANK0 ] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  2   16[BANK0 ] int 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;Total ram usage:        6 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    7
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_bottle_count
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text25
  6600  0026F6                     __ptext25:
  6601                           	opt stack 0
  6602  0026F6                     ___awmod:
  6603                           	opt stack 22
  6604                           
  6605                           ;incstack = 0
  6606  0026F6  0E00               	movlw	0
  6607  0026F8  0100               	movlb	0	; () banked
  6608  0026FA  6FD3               	movwf	___awmod@sign& (0+255),b
  6609                           
  6610                           ; BSR set to: 0
  6611  0026FC  0100               	movlb	0	; () banked
  6612  0026FE  AFCF               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6613  002700  D008               	goto	l4104
  6614                           
  6615                           ; BSR set to: 0
  6616  002702  0100               	movlb	0	; () banked
  6617  002704  6DCE               	negf	___awmod@dividend& (0+255),b
  6618  002706  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
  6619  002708  B0D8               	btfsc	status,0,c
  6620  00270A  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
  6621                           
  6622                           ; BSR set to: 0
  6623  00270C  0E01               	movlw	1
  6624  00270E  0100               	movlb	0	; () banked
  6625  002710  6FD3               	movwf	___awmod@sign& (0+255),b
  6626  002712                     l4104:
  6627                           
  6628                           ; BSR set to: 0
  6629  002712  0100               	movlb	0	; () banked
  6630  002714  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6631  002716  D005               	goto	l4108
  6632                           
  6633                           ; BSR set to: 0
  6634  002718  0100               	movlb	0	; () banked
  6635  00271A  6DD0               	negf	___awmod@divisor& (0+255),b
  6636  00271C  1FD1               	comf	(___awmod@divisor+1)& (0+255),f,b
  6637  00271E  B0D8               	btfsc	status,0,c
  6638  002720  2BD1               	incf	(___awmod@divisor+1)& (0+255),f,b
  6639  002722                     l4108:
  6640                           
  6641                           ; BSR set to: 0
  6642  002722  0100               	movlb	0	; () banked
  6643  002724  51D0               	movf	___awmod@divisor& (0+255),w,b
  6644  002726  0100               	movlb	0	; () banked
  6645  002728  11D1               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6646  00272A  B4D8               	btfsc	status,2,c
  6647  00272C  D026               	goto	l4124
  6648                           
  6649                           ; BSR set to: 0
  6650  00272E  0E01               	movlw	1
  6651  002730  0100               	movlb	0	; () banked
  6652  002732  6FD2               	movwf	___awmod@counter& (0+255),b
  6653  002734  D006               	goto	l4114
  6654  002736                     l4112:
  6655                           
  6656                           ; BSR set to: 0
  6657  002736  0100               	movlb	0	; () banked
  6658  002738  90D8               	bcf	status,0,c
  6659  00273A  37D0               	rlcf	___awmod@divisor& (0+255),f,b
  6660  00273C  37D1               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6661  00273E  0100               	movlb	0	; () banked
  6662  002740  2BD2               	incf	___awmod@counter& (0+255),f,b
  6663  002742                     l4114:
  6664                           
  6665                           ; BSR set to: 0
  6666  002742  0100               	movlb	0	; () banked
  6667  002744  AFD1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6668  002746  D7F7               	goto	l4112
  6669  002748                     l4116:
  6670                           
  6671                           ; BSR set to: 0
  6672  002748  0100               	movlb	0	; () banked
  6673  00274A  51D0               	movf	___awmod@divisor& (0+255),w,b
  6674  00274C  0100               	movlb	0	; () banked
  6675  00274E  5DCE               	subwf	___awmod@dividend& (0+255),w,b
  6676  002750  0100               	movlb	0	; () banked
  6677  002752  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
  6678  002754  0100               	movlb	0	; () banked
  6679  002756  59CF               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6680  002758  A0D8               	btfss	status,0,c
  6681  00275A  D008               	goto	l4120
  6682                           
  6683                           ; BSR set to: 0
  6684  00275C  0100               	movlb	0	; () banked
  6685  00275E  51D0               	movf	___awmod@divisor& (0+255),w,b
  6686  002760  0100               	movlb	0	; () banked
  6687  002762  5FCE               	subwf	___awmod@dividend& (0+255),f,b
  6688  002764  0100               	movlb	0	; () banked
  6689  002766  51D1               	movf	(___awmod@divisor+1)& (0+255),w,b
  6690  002768  0100               	movlb	0	; () banked
  6691  00276A  5BCF               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6692  00276C                     l4120:
  6693                           
  6694                           ; BSR set to: 0
  6695  00276C  0100               	movlb	0	; () banked
  6696  00276E  90D8               	bcf	status,0,c
  6697  002770  33D1               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6698  002772  33D0               	rrcf	___awmod@divisor& (0+255),f,b
  6699                           
  6700                           ; BSR set to: 0
  6701  002774  0100               	movlb	0	; () banked
  6702  002776  2FD2               	decfsz	___awmod@counter& (0+255),f,b
  6703  002778  D7E7               	goto	l4116
  6704  00277A                     l4124:
  6705                           
  6706                           ; BSR set to: 0
  6707  00277A  0100               	movlb	0	; () banked
  6708  00277C  51D3               	movf	___awmod@sign& (0+255),w,b
  6709  00277E  0100               	movlb	0	; () banked
  6710  002780  B4D8               	btfsc	status,2,c
  6711  002782  D005               	goto	l4128
  6712                           
  6713                           ; BSR set to: 0
  6714  002784  0100               	movlb	0	; () banked
  6715  002786  6DCE               	negf	___awmod@dividend& (0+255),b
  6716  002788  1FCF               	comf	(___awmod@dividend+1)& (0+255),f,b
  6717  00278A  B0D8               	btfsc	status,0,c
  6718  00278C  2BCF               	incf	(___awmod@dividend+1)& (0+255),f,b
  6719  00278E                     l4128:
  6720                           
  6721                           ; BSR set to: 0
  6722  00278E  C0CE  F0CE         	movff	___awmod@dividend,?___awmod
  6723  002792  C0CF  F0CF         	movff	___awmod@dividend+1,?___awmod+1
  6724  002796  0012               	return	
  6725  002798                     __end_of___awmod:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon	equ	0xFF2
  6734                           intcon2	equ	0xFF1
  6735                           intcon3	equ	0xFF0
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           postinc1	equ	0xFE6
  6739                           postdec1	equ	0xFE5
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _I2C_Master_Init *****************
  6750 ;; Defined at:
  6751 ;;		line 14 in file "I2C.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  c               4   29[BANK0 ] const unsigned long 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6765 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;Total ram usage:        8 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    8
  6772 ;; This function calls:
  6773 ;;		___lldiv
  6774 ;; This function is called by:
  6775 ;;		_main
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text26
  6780  002BDA                     __ptext26:
  6781                           	opt stack 0
  6782  002BDA                     _I2C_Master_Init:
  6783                           	opt stack 22
  6784                           
  6785                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;incstack = 0
  6789  002BDA  0E00               	movlw	0
  6790  002BDC  6EC7               	movwf	4039,c	;volatile
  6791                           
  6792                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  6793  002BDE  0E28               	movlw	40
  6794  002BE0  6EC6               	movwf	4038,c	;volatile
  6795                           
  6796                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  6797  002BE2  0E00               	movlw	0
  6798  002BE4  6EC5               	movwf	4037,c	;volatile
  6799                           
  6800                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
  6801  002BE6  0E80               	movlw	128
  6802  002BE8  0100               	movlb	0	; () banked
  6803  002BEA  6FCE               	movwf	___lldiv@dividend& (0+255),b
  6804  002BEC  0E96               	movlw	150
  6805  002BEE  6FCF               	movwf	(___lldiv@dividend+1)& (0+255),b
  6806  002BF0  0E98               	movlw	152
  6807  002BF2  6FD0               	movwf	(___lldiv@dividend+2)& (0+255),b
  6808  002BF4  0E00               	movlw	0
  6809  002BF6  6FD1               	movwf	(___lldiv@dividend+3)& (0+255),b
  6810  002BF8  C0DB  F0DF         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6811  002BFC  C0DC  F0E0         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6812  002C00  C0DD  F0E1         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6813  002C04  C0DE  F0E2         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6814  002C08  0E02               	movlw	2
  6815  002C0A                     u4195:
  6816  002C0A  90D8               	bcf	status,0,c
  6817  002C0C  0100               	movlb	0	; () banked
  6818  002C0E  37DF               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6819  002C10  37E0               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6820  002C12  37E1               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6821  002C14  37E2               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6822  002C16  2EE8               	decfsz	wreg,f,c
  6823  002C18  D7F8               	goto	u4195
  6824  002C1A  C0DF  F0D2         	movff	??_I2C_Master_Init,___lldiv@divisor
  6825  002C1E  C0E0  F0D3         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6826  002C22  C0E1  F0D4         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6827  002C26  C0E2  F0D5         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6828  002C2A  EC1E  F012         	call	___lldiv	;wreg free
  6829  002C2E  0100               	movlb	0	; () banked
  6830  002C30  05CE               	decf	?___lldiv& (0+255),w,b
  6831  002C32  6EC8               	movwf	4040,c	;volatile
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;I2C.c: 21: TRISC3 = 1;
  6835  002C34  8694               	bsf	3988,3,c	;volatile
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;I2C.c: 22: TRISC4 = 1;
  6839  002C36  8894               	bsf	3988,4,c	;volatile
  6840                           
  6841                           ; BSR set to: 0
  6842  002C38  0012               	return		;funcret
  6843  002C3A                     __end_of_I2C_Master_Init:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           postinc1	equ	0xFE6
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function ___lldiv *****************
  6868 ;; Defined at:
  6869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  dividend        4   16[BANK0 ] unsigned long 
  6872 ;;  divisor         4   20[BANK0 ] unsigned long 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  quotient        4   24[BANK0 ] unsigned long 
  6875 ;;  counter         1   28[BANK0 ] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  4   16[BANK0 ] unsigned long 
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6885 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;Total ram usage:       13 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    7
  6892 ;; This function calls:
  6893 ;;		Nothing
  6894 ;; This function is called by:
  6895 ;;		_I2C_Master_Init
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text27
  6900  00243C                     __ptext27:
  6901                           	opt stack 0
  6902  00243C                     ___lldiv:
  6903                           	opt stack 22
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;incstack = 0
  6907  00243C  0E00               	movlw	0
  6908  00243E  0100               	movlb	0	; () banked
  6909  002440  6FD6               	movwf	___lldiv@quotient& (0+255),b
  6910  002442  0E00               	movlw	0
  6911  002444  6FD7               	movwf	(___lldiv@quotient+1)& (0+255),b
  6912  002446  0E00               	movlw	0
  6913  002448  6FD8               	movwf	(___lldiv@quotient+2)& (0+255),b
  6914  00244A  0E00               	movlw	0
  6915  00244C  6FD9               	movwf	(___lldiv@quotient+3)& (0+255),b
  6916                           
  6917                           ; BSR set to: 0
  6918  00244E  0100               	movlb	0	; () banked
  6919  002450  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6920  002452  0100               	movlb	0	; () banked
  6921  002454  11D3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6922  002456  0100               	movlb	0	; () banked
  6923  002458  11D4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6924  00245A  0100               	movlb	0	; () banked
  6925  00245C  11D5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6926  00245E  B4D8               	btfsc	status,2,c
  6927  002460  D042               	goto	l823
  6928                           
  6929                           ; BSR set to: 0
  6930  002462  0E01               	movlw	1
  6931  002464  0100               	movlb	0	; () banked
  6932  002466  6FDA               	movwf	___lldiv@counter& (0+255),b
  6933  002468  D008               	goto	l4170
  6934  00246A                     l4168:
  6935                           
  6936                           ; BSR set to: 0
  6937  00246A  0100               	movlb	0	; () banked
  6938  00246C  90D8               	bcf	status,0,c
  6939  00246E  37D2               	rlcf	___lldiv@divisor& (0+255),f,b
  6940  002470  37D3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6941  002472  37D4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6942  002474  37D5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6943  002476  0100               	movlb	0	; () banked
  6944  002478  2BDA               	incf	___lldiv@counter& (0+255),f,b
  6945  00247A                     l4170:
  6946                           
  6947                           ; BSR set to: 0
  6948  00247A  0100               	movlb	0	; () banked
  6949  00247C  AFD5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6950  00247E  D7F5               	goto	l4168
  6951  002480                     l4172:
  6952                           
  6953                           ; BSR set to: 0
  6954  002480  0100               	movlb	0	; () banked
  6955  002482  90D8               	bcf	status,0,c
  6956  002484  37D6               	rlcf	___lldiv@quotient& (0+255),f,b
  6957  002486  37D7               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6958  002488  37D8               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6959  00248A  37D9               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6960                           
  6961                           ; BSR set to: 0
  6962  00248C  0100               	movlb	0	; () banked
  6963  00248E  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6964  002490  0100               	movlb	0	; () banked
  6965  002492  5DCE               	subwf	___lldiv@dividend& (0+255),w,b
  6966  002494  0100               	movlb	0	; () banked
  6967  002496  51D3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6968  002498  0100               	movlb	0	; () banked
  6969  00249A  59CF               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6970  00249C  0100               	movlb	0	; () banked
  6971  00249E  51D4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6972  0024A0  0100               	movlb	0	; () banked
  6973  0024A2  59D0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6974  0024A4  0100               	movlb	0	; () banked
  6975  0024A6  51D5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6976  0024A8  0100               	movlb	0	; () banked
  6977  0024AA  59D1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6978  0024AC  A0D8               	btfss	status,0,c
  6979  0024AE  D012               	goto	l4180
  6980                           
  6981                           ; BSR set to: 0
  6982  0024B0  0100               	movlb	0	; () banked
  6983  0024B2  51D2               	movf	___lldiv@divisor& (0+255),w,b
  6984  0024B4  0100               	movlb	0	; () banked
  6985  0024B6  5FCE               	subwf	___lldiv@dividend& (0+255),f,b
  6986  0024B8  0100               	movlb	0	; () banked
  6987  0024BA  51D3               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6988  0024BC  0100               	movlb	0	; () banked
  6989  0024BE  5BCF               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6990  0024C0  0100               	movlb	0	; () banked
  6991  0024C2  51D4               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6992  0024C4  0100               	movlb	0	; () banked
  6993  0024C6  5BD0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6994  0024C8  0100               	movlb	0	; () banked
  6995  0024CA  51D5               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6996  0024CC  0100               	movlb	0	; () banked
  6997  0024CE  5BD1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6998                           
  6999                           ; BSR set to: 0
  7000  0024D0  0100               	movlb	0	; () banked
  7001  0024D2  81D6               	bsf	___lldiv@quotient& (0+255),0,b
  7002  0024D4                     l4180:
  7003                           
  7004                           ; BSR set to: 0
  7005  0024D4  0100               	movlb	0	; () banked
  7006  0024D6  90D8               	bcf	status,0,c
  7007  0024D8  33D5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7008  0024DA  33D4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7009  0024DC  33D3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7010  0024DE  33D2               	rrcf	___lldiv@divisor& (0+255),f,b
  7011                           
  7012                           ; BSR set to: 0
  7013  0024E0  0100               	movlb	0	; () banked
  7014  0024E2  2FDA               	decfsz	___lldiv@counter& (0+255),f,b
  7015  0024E4  D7CD               	goto	l4172
  7016  0024E6                     l823:
  7017                           
  7018                           ; BSR set to: 0
  7019  0024E6  C0D6  F0CE         	movff	___lldiv@quotient,?___lldiv
  7020  0024EA  C0D7  F0CF         	movff	___lldiv@quotient+1,?___lldiv+1
  7021  0024EE  C0D8  F0D0         	movff	___lldiv@quotient+2,?___lldiv+2
  7022  0024F2  C0D9  F0D1         	movff	___lldiv@quotient+3,?___lldiv+3
  7023                           
  7024                           ; BSR set to: 0
  7025  0024F6  0012               	return		;funcret
  7026  0024F8                     __end_of___lldiv:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon2	equ	0xFF1
  7036                           intcon3	equ	0xFF0
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           postinc1	equ	0xFE6
  7040                           postdec1	equ	0xFE5
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function _I2C_ColorSens_Init *****************
  7051 ;; Defined at:
  7052 ;;		line 54 in file "I2C.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;		None
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;		None
  7057 ;; Return value:  Size  Location     Type
  7058 ;;                  1    wreg      void 
  7059 ;; Registers used:
  7060 ;;		wreg, status,2, status,0, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;Total ram usage:        1 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    9
  7073 ;; This function calls:
  7074 ;;		_I2C_Master_Start
  7075 ;;		_I2C_Master_Stop
  7076 ;;		_I2C_Master_Write
  7077 ;; This function is called by:
  7078 ;;		_main
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text28
  7083  002030                     __ptext28:
  7084                           	opt stack 0
  7085  002030                     _I2C_ColorSens_Init:
  7086                           	opt stack 21
  7087                           
  7088                           ;I2C.c: 55: I2C_Master_Start();
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;incstack = 0
  7092  002030  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  7093                           
  7094                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
  7095  002034  0E00               	movlw	0
  7096  002036  0100               	movlb	0	; () banked
  7097  002038  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7098  00203A  0E52               	movlw	82
  7099  00203C  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7100  00203E  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7101                           
  7102                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
  7103  002042  0E00               	movlw	0
  7104  002044  0100               	movlb	0	; () banked
  7105  002046  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7106  002048  0E80               	movlw	128
  7107  00204A  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7108  00204C  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7109                           
  7110                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
  7111  002050  0E00               	movlw	0
  7112  002052  0100               	movlb	0	; () banked
  7113  002054  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7114  002056  0E01               	movlw	1
  7115  002058  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7116  00205A  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7117                           
  7118                           ;I2C.c: 59: I2C_Master_Stop();
  7119  00205E  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  7120                           
  7121                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
  7122  002062  0E0A               	movlw	10
  7123  002064  0100               	movlb	0	; () banked
  7124  002066  6FD1               	movwf	??_I2C_ColorSens_Init& (0+255),b
  7125  002068  0EBC               	movlw	188
  7126  00206A                     u5847:
  7127  00206A  2EE8               	decfsz	wreg,f,c
  7128  00206C  D7FE               	bra	u5847
  7129  00206E  2FD1               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
  7130  002070  D7FC               	bra	u5847
  7131  002072  F000               	nop	
  7132                           
  7133                           ;I2C.c: 63: I2C_Master_Start();
  7134  002074  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  7135                           
  7136                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
  7137  002078  0E00               	movlw	0
  7138  00207A  0100               	movlb	0	; () banked
  7139  00207C  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7140  00207E  0E52               	movlw	82
  7141  002080  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7142  002082  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7143                           
  7144                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
  7145  002086  0E00               	movlw	0
  7146  002088  0100               	movlb	0	; () banked
  7147  00208A  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7148  00208C  0E80               	movlw	128
  7149  00208E  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7150  002090  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7151                           
  7152                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
  7153  002094  0E00               	movlw	0
  7154  002096  0100               	movlb	0	; () banked
  7155  002098  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7156  00209A  0E03               	movlw	3
  7157  00209C  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7158  00209E  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7159                           
  7160                           ;I2C.c: 67: I2C_Master_Stop();
  7161  0020A2  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  7162                           
  7163                           ;I2C.c: 69: I2C_Master_Start();
  7164  0020A6  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  7165                           
  7166                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
  7167  0020AA  0E00               	movlw	0
  7168  0020AC  0100               	movlb	0	; () banked
  7169  0020AE  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7170  0020B0  0E52               	movlw	82
  7171  0020B2  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7172  0020B4  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7173                           
  7174                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
  7175  0020B8  0E00               	movlw	0
  7176  0020BA  0100               	movlb	0	; () banked
  7177  0020BC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7178  0020BE  0E8F               	movlw	143
  7179  0020C0  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7180  0020C2  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7181                           
  7182                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
  7183  0020C6  0E00               	movlw	0
  7184  0020C8  0100               	movlb	0	; () banked
  7185  0020CA  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7186  0020CC  0E02               	movlw	2
  7187  0020CE  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7188  0020D0  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7189                           
  7190                           ;I2C.c: 73: I2C_Master_Stop();
  7191  0020D4  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  7192                           
  7193                           ;I2C.c: 90: I2C_Master_Start();
  7194  0020D8  EC8F  F018         	call	_I2C_Master_Start	;wreg free
  7195                           
  7196                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
  7197  0020DC  0E00               	movlw	0
  7198  0020DE  0100               	movlb	0	; () banked
  7199  0020E0  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7200  0020E2  0E52               	movlw	82
  7201  0020E4  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7202  0020E6  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7203                           
  7204                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
  7205  0020EA  0E00               	movlw	0
  7206  0020EC  0100               	movlb	0	; () banked
  7207  0020EE  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7208  0020F0  0E81               	movlw	129
  7209  0020F2  6FCF               	movwf	I2C_Master_Write@d& (0+255),b
  7210  0020F4  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7211                           
  7212                           ;I2C.c: 93: I2C_Master_Write(0b11111111);
  7213  0020F8  0E00               	movlw	0
  7214  0020FA  0100               	movlb	0	; () banked
  7215  0020FC  6FD0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7216  0020FE  69CF               	setf	I2C_Master_Write@d& (0+255),b
  7217  002100  EC81  F018         	call	_I2C_Master_Write	;wreg free
  7218                           
  7219                           ;I2C.c: 94: I2C_Master_Stop();
  7220  002104  EC8B  F018         	call	_I2C_Master_Stop	;wreg free
  7221  002108  0012               	return		;funcret
  7222  00210A                     __end_of_I2C_ColorSens_Init:
  7223                           	opt stack 0
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           intcon2	equ	0xFF1
  7232                           intcon3	equ	0xFF0
  7233                           postinc0	equ	0xFEE
  7234                           wreg	equ	0xFE8
  7235                           postinc1	equ	0xFE6
  7236                           postdec1	equ	0xFE5
  7237                           fsr1h	equ	0xFE2
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           postinc2	equ	0xFDE
  7241                           postdec2	equ	0xFDD
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246 ;; *************** function _I2C_Master_Write *****************
  7247 ;; Defined at:
  7248 ;;		line 48 in file "I2C.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  d               2   17[BANK0 ] unsigned int 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;		None
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7262 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;Total ram usage:        2 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    8
  7269 ;; This function calls:
  7270 ;;		_I2C_Master_Wait
  7271 ;; This function is called by:
  7272 ;;		_I2C_ColorSens_Init
  7273 ;;		_main
  7274 ;;		_date_time
  7275 ;;		_read_colorsensor
  7276 ;;		_I2C_ColorSens_ClearInt
  7277 ;;		_set_time
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text29
  7282  003102                     __ptext29:
  7283                           	opt stack 0
  7284  003102                     _I2C_Master_Write:
  7285                           	opt stack 20
  7286                           
  7287                           ;I2C.c: 50: I2C_Master_Wait();
  7288                           
  7289                           ;incstack = 0
  7290  003102  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  7291                           
  7292                           ;I2C.c: 51: SSPBUF = d;
  7293  003106  C0CF  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7294  00310A  0012               	return		;funcret
  7295  00310C                     __end_of_I2C_Master_Write:
  7296                           	opt stack 0
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           intcon2	equ	0xFF1
  7305                           intcon3	equ	0xFF0
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postinc1	equ	0xFE6
  7309                           postdec1	equ	0xFE5
  7310                           fsr1h	equ	0xFE2
  7311                           fsr1l	equ	0xFE1
  7312                           indf2	equ	0xFDF
  7313                           postinc2	equ	0xFDE
  7314                           postdec2	equ	0xFDD
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8
  7318                           
  7319 ;; *************** function _I2C_Master_Stop *****************
  7320 ;; Defined at:
  7321 ;;		line 42 in file "I2C.c"
  7322 ;; Parameters:    Size  Location     Type
  7323 ;;		None
  7324 ;; Auto vars:     Size  Location     Type
  7325 ;;		None
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  1    wreg      void 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0, cstack
  7330 ;; Tracked objects:
  7331 ;;		On entry : 0/0
  7332 ;;		On exit  : 0/0
  7333 ;;		Unchanged: 0/0
  7334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;Total ram usage:        0 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; Hardware stack levels required when called:    8
  7342 ;; This function calls:
  7343 ;;		_I2C_Master_Wait
  7344 ;; This function is called by:
  7345 ;;		_I2C_ColorSens_Init
  7346 ;;		_main
  7347 ;;		_date_time
  7348 ;;		_read_colorsensor
  7349 ;;		_I2C_ColorSens_ClearInt
  7350 ;;		_set_time
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text30
  7355  003116                     __ptext30:
  7356                           	opt stack 0
  7357  003116                     _I2C_Master_Stop:
  7358                           	opt stack 20
  7359                           
  7360                           ;I2C.c: 44: I2C_Master_Wait();
  7361                           
  7362                           ;incstack = 0
  7363  003116  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  7364                           
  7365                           ;I2C.c: 45: PEN = 1;
  7366  00311A  84C5               	bsf	4037,2,c	;volatile
  7367  00311C  0012               	return		;funcret
  7368  00311E                     __end_of_I2C_Master_Stop:
  7369                           	opt stack 0
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           prodh	equ	0xFF4
  7375                           prodl	equ	0xFF3
  7376                           intcon	equ	0xFF2
  7377                           intcon2	equ	0xFF1
  7378                           intcon3	equ	0xFF0
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postinc1	equ	0xFE6
  7382                           postdec1	equ	0xFE5
  7383                           fsr1h	equ	0xFE2
  7384                           fsr1l	equ	0xFE1
  7385                           indf2	equ	0xFDF
  7386                           postinc2	equ	0xFDE
  7387                           postdec2	equ	0xFDD
  7388                           fsr2h	equ	0xFDA
  7389                           fsr2l	equ	0xFD9
  7390                           status	equ	0xFD8
  7391                           
  7392 ;; *************** function _I2C_Master_Start *****************
  7393 ;; Defined at:
  7394 ;;		line 30 in file "I2C.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;		None
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, status,2, status,0, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;Total ram usage:        0 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    8
  7415 ;; This function calls:
  7416 ;;		_I2C_Master_Wait
  7417 ;; This function is called by:
  7418 ;;		_I2C_ColorSens_Init
  7419 ;;		_main
  7420 ;;		_date_time
  7421 ;;		_read_colorsensor
  7422 ;;		_I2C_ColorSens_ClearInt
  7423 ;;		_set_time
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text31
  7428  00311E                     __ptext31:
  7429                           	opt stack 0
  7430  00311E                     _I2C_Master_Start:
  7431                           	opt stack 20
  7432                           
  7433                           ;I2C.c: 32: I2C_Master_Wait();
  7434                           
  7435                           ;incstack = 0
  7436  00311E  EC52  F018         	call	_I2C_Master_Wait	;wreg free
  7437                           
  7438                           ;I2C.c: 33: SEN = 1;
  7439  003122  80C5               	bsf	4037,0,c	;volatile
  7440  003124  0012               	return		;funcret
  7441  003126                     __end_of_I2C_Master_Start:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon2	equ	0xFF1
  7451                           intcon3	equ	0xFF0
  7452                           postinc0	equ	0xFEE
  7453                           wreg	equ	0xFE8
  7454                           postinc1	equ	0xFE6
  7455                           postdec1	equ	0xFE5
  7456                           fsr1h	equ	0xFE2
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function _I2C_Master_Wait *****************
  7466 ;; Defined at:
  7467 ;;		line 25 in file "I2C.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      void 
  7474 ;; Registers used:
  7475 ;;		wreg, status,2, status,0
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;Total ram usage:        1 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    7
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_I2C_Master_Start
  7492 ;;		_I2C_Master_Stop
  7493 ;;		_I2C_Master_Write
  7494 ;;		_I2C_Master_Read
  7495 ;;		_I2C_Master_RepeatedStart
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           	psect	text32
  7500  0030A4                     __ptext32:
  7501                           	opt stack 0
  7502  0030A4                     _I2C_Master_Wait:
  7503                           	opt stack 20
  7504  0030A4                     l34:
  7505  0030A4  B4C7               	btfsc	4039,2,c	;volatile
  7506  0030A6  D7FE               	goto	l34
  7507  0030A8  CFC5 F0CE          	movff	4037,??_I2C_Master_Wait	;volatile
  7508  0030AC  0E1F               	movlw	31
  7509  0030AE  0100               	movlb	0	; () banked
  7510  0030B0  17CE               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7511  0030B2  B4D8               	btfsc	status,2,c
  7512  0030B4  0012               	return	
  7513  0030B6  D7F6               	goto	l34
  7514  0030B8                     __end_of_I2C_Master_Wait:
  7515                           	opt stack 0
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           intcon	equ	0xFF2
  7523                           intcon2	equ	0xFF1
  7524                           intcon3	equ	0xFF0
  7525                           postinc0	equ	0xFEE
  7526                           wreg	equ	0xFE8
  7527                           postinc1	equ	0xFE6
  7528                           postdec1	equ	0xFE5
  7529                           fsr1h	equ	0xFE2
  7530                           fsr1l	equ	0xFE1
  7531                           indf2	equ	0xFDF
  7532                           postinc2	equ	0xFDE
  7533                           postdec2	equ	0xFDD
  7534                           fsr2h	equ	0xFDA
  7535                           fsr2l	equ	0xFD9
  7536                           status	equ	0xFD8
  7537                           
  7538 ;; *************** function _isr *****************
  7539 ;; Defined at:
  7540 ;;		line 97 in file "main.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;		None
  7543 ;; Auto vars:     Size  Location     Type
  7544 ;;  i               1  114[COMRAM] unsigned char 
  7545 ;; Return value:  Size  Location     Type
  7546 ;;                  1    wreg      void 
  7547 ;; Registers used:
  7548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7549 ;; Tracked objects:
  7550 ;;		On entry : 0/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;Total ram usage:       19 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; Hardware stack levels required when called:    6
  7561 ;; This function calls:
  7562 ;;		_dec_to_hex
  7563 ;;		_read_time
  7564 ;;		i2___wmul
  7565 ;;		i2_lcdInst
  7566 ;;		i2_printf
  7567 ;;		i2_read_colorsensor
  7568 ;;		i2_servo_rotate1
  7569 ;; This function is called by:
  7570 ;;		Interrupt level 2
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	intcode
  7575  000008                     __pintcode:
  7576                           	opt stack 0
  7577  000008                     _isr:
  7578                           	opt stack 20
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;incstack = 0
  7582  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7583  00000A  ED0A  F002         	call	int_func,f	;refresh shadow registers
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           intcon3	equ	0xFF0
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           postinc1	equ	0xFE6
  7596                           postdec1	equ	0xFE5
  7597                           fsr1h	equ	0xFE2
  7598                           fsr1l	equ	0xFE1
  7599                           indf2	equ	0xFDF
  7600                           postinc2	equ	0xFDE
  7601                           postdec2	equ	0xFDD
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8
  7605                           
  7606                           	psect	intcode_body
  7607  000414                     __pintcode_body:
  7608                           	opt stack 20
  7609  000414                     int_func:
  7610                           	opt stack 20
  7611  000414  0006               	pop		; remove dummy address from shadow register refresh
  7612  000416  CFFA F0C0          	movff	pclath,??_isr+2
  7613  00041A  CFFB F0C1          	movff	pclatu,??_isr+3
  7614  00041E  CFE9 F0C2          	movff	fsr0l,??_isr+4
  7615  000422  CFEA F0C3          	movff	fsr0h,??_isr+5
  7616  000426  CFE1 F0C4          	movff	fsr1l,??_isr+6
  7617  00042A  CFE2 F0C5          	movff	fsr1h,??_isr+7
  7618  00042E  CFD9 F0C6          	movff	fsr2l,??_isr+8
  7619  000432  CFDA F0C7          	movff	fsr2h,??_isr+9
  7620  000436  CFF3 F0C8          	movff	prodl,??_isr+10
  7621  00043A  CFF4 F0C9          	movff	prodh,??_isr+11
  7622  00043E  CFF6 F0CA          	movff	tblptrl,??_isr+12
  7623  000442  CFF7 F0CB          	movff	tblptrh,??_isr+13
  7624  000446  CFF8 F0CC          	movff	tblptru,??_isr+14
  7625  00044A  CFF5 F0CD          	movff	tablat,??_isr+15
  7626                           
  7627                           ;main.c: 98: if (INT1IF) {
  7628  00044E  B0F0               	btfsc	intcon3,0,c	;volatile
  7629  000450  D109               	goto	i2l4908
  7630  000452  D134               	goto	i2l262
  7631  000454                     i2l264:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;main.c: 101: LATAbits.LATA2 = 1;
  7635  000454  8489               	bsf	3977,2,c	;volatile
  7636                           
  7637                           ;main.c: 102: TMR0IE = 1;
  7638  000456  8AF2               	bsf	intcon,5,c	;volatile
  7639                           
  7640                           ;main.c: 103: TMR0ON = 1;
  7641  000458  8ED5               	bsf	4053,7,c	;volatile
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;main.c: 104: TMR0 = 0;
  7645  00045A  0E00               	movlw	0
  7646  00045C  6ED7               	movwf	4055,c	;volatile
  7647  00045E  0E00               	movlw	0
  7648  000460  6ED6               	movwf	4054,c	;volatile
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;main.c: 106: read_time();
  7652  000462  EC58  F015         	call	_read_time	;wreg free
  7653                           
  7654                           ;main.c: 107: start_time[1] = time[1];
  7655  000466  C09B  F07B         	movff	_time+1,_start_time+1
  7656                           
  7657                           ;main.c: 108: start_time[0] = time[0];
  7658  00046A  C09A  F07A         	movff	_time,_start_time
  7659                           
  7660                           ;main.c: 110: bottle_count_array[0] = 0;
  7661  00046E  0E00               	movlw	0
  7662  000470  0100               	movlb	0	; () banked
  7663  000472  6F81               	movwf	(_bottle_count_array+1)& (0+255),b
  7664  000474  0E00               	movlw	0
  7665  000476  6F80               	movwf	_bottle_count_array& (0+255),b
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;main.c: 111: bottle_count_array[1] = 0;
  7669  000478  0E00               	movlw	0
  7670  00047A  0100               	movlb	0	; () banked
  7671  00047C  6F83               	movwf	(_bottle_count_array+3)& (0+255),b
  7672  00047E  0E00               	movlw	0
  7673  000480  6F82               	movwf	(_bottle_count_array+2)& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;main.c: 112: bottle_count_array[2] = 0;
  7677  000482  0E00               	movlw	0
  7678  000484  0100               	movlb	0	; () banked
  7679  000486  6F85               	movwf	(_bottle_count_array+5)& (0+255),b
  7680  000488  0E00               	movlw	0
  7681  00048A  6F84               	movwf	(_bottle_count_array+4)& (0+255),b
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;main.c: 113: bottle_count_array[3] = 0;
  7685  00048C  0E00               	movlw	0
  7686  00048E  0100               	movlb	0	; () banked
  7687  000490  6F87               	movwf	(_bottle_count_array+7)& (0+255),b
  7688  000492  0E00               	movlw	0
  7689  000494  6F86               	movwf	(_bottle_count_array+6)& (0+255),b
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;main.c: 114: bottle_count_array[4] = 0;
  7693  000496  0E00               	movlw	0
  7694  000498  0100               	movlb	0	; () banked
  7695  00049A  6F89               	movwf	(_bottle_count_array+9)& (0+255),b
  7696  00049C  0E00               	movlw	0
  7697  00049E  6F88               	movwf	(_bottle_count_array+8)& (0+255),b
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;main.c: 116: lcdInst(0b00000001);
  7701  0004A0  0E01               	movlw	1
  7702  0004A2  EC7B  F018         	call	i2_lcdInst
  7703                           
  7704                           ;main.c: 117: _delay((unsigned long)((100)*(10000000/4000.0)));
  7705  0004A6  0E02               	movlw	2
  7706  0004A8  0100               	movlb	0	; () banked
  7707  0004AA  6FBF               	movwf	(??_isr+1)& (0+255),b
  7708  0004AC  0E45               	movlw	69
  7709  0004AE  0100               	movlb	0	; () banked
  7710  0004B0  6FBE               	movwf	??_isr& (0+255),b
  7711  0004B2  0EA9               	movlw	169
  7712  0004B4                     i2u585_47:
  7713  0004B4  2EE8               	decfsz	wreg,f,c
  7714  0004B6  D7FE               	bra	i2u585_47
  7715  0004B8  2FBE               	decfsz	??_isr& (0+255),f,b
  7716  0004BA  D7FC               	bra	i2u585_47
  7717  0004BC  2FBF               	decfsz	(??_isr+1)& (0+255),f,b
  7718  0004BE  D7FA               	bra	i2u585_47
  7719  0004C0  D000               	nop2	
  7720                           
  7721                           ;main.c: 118: lcdInst(0b10000000);
  7722  0004C2  0E80               	movlw	128
  7723  0004C4  EC7B  F018         	call	i2_lcdInst
  7724                           
  7725                           ;main.c: 119: printf("running");
  7726  0004C8  0EE8               	movlw	low STR_1
  7727  0004CA  6E0D               	movwf	i2printf@f,c
  7728  0004CC  0EFF               	movlw	high STR_1
  7729  0004CE  6E0E               	movwf	i2printf@f+1,c
  7730  0004D0  ECE1  F005         	call	i2_printf	;wreg free
  7731                           
  7732                           ;main.c: 120: bottle_count_disp = -1;
  7733  0004D4  0100               	movlb	0	; () banked
  7734  0004D6  69ED               	setf	_bottle_count_disp& (0+255),b
  7735  0004D8  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;main.c: 121: curr_state = OPERATION;
  7739  0004DA  0E02               	movlw	2
  7740  0004DC  D0B2               	goto	L10
  7741  0004DE                     i2l4852:
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;main.c: 124: bottle_count_disp += 1;
  7745  0004DE  0100               	movlb	0	; () banked
  7746  0004E0  4BED               	infsnz	_bottle_count_disp& (0+255),f,b
  7747  0004E2  2BEE               	incf	(_bottle_count_disp+1)& (0+255),f,b
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;main.c: 125: curr_state = BOTTLECOUNT;
  7751  0004E4  0E05               	movlw	5
  7752  0004E6  0100               	movlb	0	; () banked
  7753  0004E8  6FBD               	movwf	_curr_state& (0+255),b
  7754  0004EA                     i2l4856:
  7755  0004EA  0E1F               	movlw	31
  7756  0004EC  1881               	xorwf	3969,w,c	;volatile
  7757  0004EE  A4D8               	btfss	status,2,c
  7758  0004F0  D0E3               	goto	i2l265
  7759  0004F2  D7FB               	goto	i2l4856
  7760  0004F4                     i2l4858:
  7761                           
  7762                           ;main.c: 129: operation_time = etime - stime;
  7763  0004F4  C07C  F0BE         	movff	_stime,??_isr
  7764  0004F8  C07D  F0BF         	movff	_stime+1,??_isr+1
  7765  0004FC  0100               	movlb	0	; () banked
  7766  0004FE  1FBE               	comf	??_isr& (0+255),f,b
  7767  000500  1FBF               	comf	(??_isr+1)& (0+255),f,b
  7768  000502  4BBE               	infsnz	??_isr& (0+255),f,b
  7769  000504  2BBF               	incf	(??_isr+1)& (0+255),f,b
  7770  000506  5078               	movf	_etime,w,c
  7771  000508  0100               	movlb	0	; () banked
  7772  00050A  25BE               	addwf	??_isr& (0+255),w,b
  7773  00050C  0100               	movlb	0	; () banked
  7774  00050E  6FB9               	movwf	_operation_time& (0+255),b
  7775  000510  5079               	movf	_etime+1,w,c
  7776  000512  0100               	movlb	0	; () banked
  7777  000514  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7778  000516  0100               	movlb	0	; () banked
  7779  000518  6FBA               	movwf	(_operation_time+1)& (0+255),b
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;main.c: 130: bottle_count_disp = -1;
  7783  00051A  0100               	movlb	0	; () banked
  7784  00051C  69ED               	setf	_bottle_count_disp& (0+255),b
  7785  00051E  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;main.c: 131: curr_state = BOTTLETIME;
  7789  000520  0E06               	movlw	6
  7790  000522  D08F               	goto	L10
  7791  000524                     i2l271:
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;main.c: 134: bottle_count_disp = -1;
  7795  000524  0100               	movlb	0	; () banked
  7796  000526  69ED               	setf	_bottle_count_disp& (0+255),b
  7797  000528  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;main.c: 135: curr_state = DATETIME;
  7801  00052A  0E04               	movlw	4
  7802  00052C  D08A               	goto	L10
  7803  00052E                     i2l272:
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;main.c: 138: LATAbits.LATA2 = 0;
  7807  00052E  9489               	bcf	3977,2,c	;volatile
  7808                           
  7809                           ;main.c: 139: TMR0IE = 0;
  7810  000530  9AF2               	bcf	intcon,5,c	;volatile
  7811                           
  7812                           ;main.c: 140: TMR0ON = 0;
  7813  000532  9ED5               	bcf	4053,7,c	;volatile
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;main.c: 142: read_time();
  7817  000534  EC58  F015         	call	_read_time	;wreg free
  7818                           
  7819                           ;main.c: 143: end_time[1] = time[1];
  7820  000538  C09B  F077         	movff	_time+1,_end_time+1
  7821                           
  7822                           ;main.c: 144: end_time[0] = time[0];
  7823  00053C  C09A  F076         	movff	_time,_end_time
  7824                           
  7825                           ;main.c: 145: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7826  000540  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7827  000544  6A64               	clrf	dec_to_hex@num+1,c
  7828  000546  ECD7  F00C         	call	_dec_to_hex	;wreg free
  7829  00054A  C063  F074         	movff	?_dec_to_hex,_isr$1377
  7830  00054E  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  7831                           
  7832                           ;main.c: 145: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7833  000552  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  7834  000556  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  7835  00055A  0E00               	movlw	0
  7836  00055C  6E04               	movwf	i2___wmul@multiplicand+1,c
  7837  00055E  0E3C               	movlw	60
  7838  000560  6E03               	movwf	i2___wmul@multiplicand,c
  7839  000562  EC01  F018         	call	i2___wmul	;wreg free
  7840  000566  C001  F0BE         	movff	?i2___wmul,??_isr
  7841  00056A  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  7842  00056E  C07A  F063         	movff	_start_time,dec_to_hex@num
  7843  000572  6A64               	clrf	dec_to_hex@num+1,c
  7844  000574  ECD7  F00C         	call	_dec_to_hex	;wreg free
  7845  000578  5063               	movf	?_dec_to_hex,w,c
  7846  00057A  0100               	movlb	0	; () banked
  7847  00057C  25BE               	addwf	??_isr& (0+255),w,b
  7848  00057E  6E7C               	movwf	_stime,c
  7849  000580  5064               	movf	?_dec_to_hex+1,w,c
  7850  000582  0100               	movlb	0	; () banked
  7851  000584  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7852  000586  6E7D               	movwf	_stime+1,c
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;main.c: 146: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7856  000588  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7857  00058C  6A64               	clrf	dec_to_hex@num+1,c
  7858  00058E  ECD7  F00C         	call	_dec_to_hex	;wreg free
  7859  000592  C063  F074         	movff	?_dec_to_hex,_isr$1377
  7860  000596  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  7861                           
  7862                           ;main.c: 146: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7863  00059A  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  7864  00059E  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  7865  0005A2  0E00               	movlw	0
  7866  0005A4  6E04               	movwf	i2___wmul@multiplicand+1,c
  7867  0005A6  0E3C               	movlw	60
  7868  0005A8  6E03               	movwf	i2___wmul@multiplicand,c
  7869  0005AA  EC01  F018         	call	i2___wmul	;wreg free
  7870  0005AE  C001  F0BE         	movff	?i2___wmul,??_isr
  7871  0005B2  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  7872  0005B6  C076  F063         	movff	_end_time,dec_to_hex@num
  7873  0005BA  6A64               	clrf	dec_to_hex@num+1,c
  7874  0005BC  ECD7  F00C         	call	_dec_to_hex	;wreg free
  7875  0005C0  5063               	movf	?_dec_to_hex,w,c
  7876  0005C2  0100               	movlb	0	; () banked
  7877  0005C4  25BE               	addwf	??_isr& (0+255),w,b
  7878  0005C6  6E78               	movwf	_etime,c
  7879  0005C8  5064               	movf	?_dec_to_hex+1,w,c
  7880  0005CA  0100               	movlb	0	; () banked
  7881  0005CC  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  7882  0005CE  6E79               	movwf	_etime+1,c
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;main.c: 147: lcdInst(0b00000001);
  7886  0005D0  0E01               	movlw	1
  7887  0005D2  EC7B  F018         	call	i2_lcdInst
  7888                           
  7889                           ;main.c: 148: bottle_count_disp = -1;
  7890  0005D6  0100               	movlb	0	; () banked
  7891  0005D8  69ED               	setf	_bottle_count_disp& (0+255),b
  7892  0005DA  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;main.c: 149: curr_state = OPERATIONEND;
  7896  0005DC  0E03               	movlw	3
  7897  0005DE  D031               	goto	L10
  7898  0005E0                     i2l4886:
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;main.c: 152: read_colorsensor();
  7902  0005E0  EC85  F010         	call	i2_read_colorsensor	;wreg free
  7903                           
  7904                           ;main.c: 153: lcdInst(0b10000000);
  7905  0005E4  0E80               	movlw	128
  7906  0005E6  EC7B  F018         	call	i2_lcdInst
  7907                           
  7908                           ;main.c: 154: printf("C%u R%u                ", color[0], color[1]);
  7909  0005EA  0EB2               	movlw	low STR_2
  7910  0005EC  6E0D               	movwf	i2printf@f,c
  7911  0005EE  0EFE               	movlw	high STR_2
  7912  0005F0  6E0E               	movwf	i2printf@f+1,c
  7913  0005F2  C08A  F00F         	movff	_color,?i2_printf+2
  7914  0005F6  C08B  F010         	movff	_color+1,?i2_printf+3
  7915  0005FA  C08C  F011         	movff	_color+2,?i2_printf+4
  7916  0005FE  C08D  F012         	movff	_color+3,?i2_printf+5
  7917  000602  ECE1  F005         	call	i2_printf	;wreg free
  7918                           
  7919                           ;main.c: 155: lcdInst(0b11000000);
  7920  000606  0EC0               	movlw	192
  7921  000608  EC7B  F018         	call	i2_lcdInst
  7922                           
  7923                           ;main.c: 156: printf("G%u B%u                ", color[2], color[3]);
  7924  00060C  0E9A               	movlw	low STR_3
  7925  00060E  6E0D               	movwf	i2printf@f,c
  7926  000610  0EFE               	movlw	high STR_3
  7927  000612  6E0E               	movwf	i2printf@f+1,c
  7928  000614  C08E  F00F         	movff	_color+4,?i2_printf+2
  7929  000618  C08F  F010         	movff	_color+5,?i2_printf+3
  7930  00061C  C090  F011         	movff	_color+6,?i2_printf+4
  7931  000620  C091  F012         	movff	_color+7,?i2_printf+5
  7932  000624  ECE1  F005         	call	i2_printf	;wreg free
  7933                           
  7934                           ;main.c: 157: break;
  7935  000628  D047               	goto	i2l265
  7936  00062A                     i2l274:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;main.c: 159: LATAbits.LATA2 = 0;
  7940  00062A  9489               	bcf	3977,2,c	;volatile
  7941                           
  7942                           ;main.c: 160: (INTCONbits.GIE = 0);
  7943  00062C  9EF2               	bcf	intcon,7,c	;volatile
  7944                           
  7945                           ;main.c: 161: TMR0ON = 0;
  7946  00062E  9ED5               	bcf	4053,7,c	;volatile
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;main.c: 162: lcdInst(0b00000001);
  7950  000630  0E01               	movlw	1
  7951  000632  EC7B  F018         	call	i2_lcdInst
  7952                           
  7953                           ;main.c: 163: curr_state = EMERGENCYSTOP;
  7954  000636  0E01               	movlw	1
  7955  000638  D004               	goto	L10
  7956  00063A                     i2l275:
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;main.c: 166: bottle_count_disp = -1;
  7960  00063A  0100               	movlb	0	; () banked
  7961  00063C  69ED               	setf	_bottle_count_disp& (0+255),b
  7962  00063E  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;main.c: 167: curr_state = STANDBY;
  7966  000640  0E00               	movlw	0
  7967  000642                     L10:
  7968  000642  0100               	movlb	0	; () banked
  7969  000644  6FBD               	movwf	_curr_state& (0+255),b
  7970                           
  7971                           ;main.c: 169: break;
  7972  000646  D038               	goto	i2l265
  7973  000648                     i2l4902:
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;main.c: 171: servo_rotate1(8);
  7977  000648  0E00               	movlw	0
  7978  00064A  6E02               	movwf	i2servo_rotate1@degree+1,c
  7979  00064C  0E08               	movlw	8
  7980  00064E  6E01               	movwf	i2servo_rotate1@degree,c
  7981  000650  EC5C  F014         	call	i2_servo_rotate1	;wreg free
  7982                           
  7983                           ;main.c: 172: break;
  7984  000654  D031               	goto	i2l265
  7985  000656                     i2l4904:
  7986                           
  7987                           ;main.c: 174: servo_rotate1(18);
  7988  000656  0E00               	movlw	0
  7989  000658  6E02               	movwf	i2servo_rotate1@degree+1,c
  7990  00065A  0E12               	movlw	18
  7991  00065C  6E01               	movwf	i2servo_rotate1@degree,c
  7992  00065E  EC5C  F014         	call	i2_servo_rotate1	;wreg free
  7993                           
  7994                           ;main.c: 176: }
  7995                           
  7996                           ;main.c: 175: break;
  7997  000662  D02A               	goto	i2l265
  7998  000664                     i2l4908:
  7999  000664  3881               	swapf	3969,w,c	;volatile
  8000  000666  0B0F               	andlw	15
  8001  000668  0100               	movlb	0	; () banked
  8002  00066A  6FBE               	movwf	??_isr& (0+255),b
  8003  00066C  6BBF               	clrf	(??_isr+1)& (0+255),b
  8004                           
  8005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8006                           ; Switch size 1, requested type "space"
  8007                           ; Number of cases is 1, Range of values is 0 to 0
  8008                           ; switch strategies available:
  8009                           ; Name         Instructions Cycles
  8010                           ; simple_byte            4     3 (average)
  8011                           ;	Chosen strategy is simple_byte
  8012  00066E  0100               	movlb	0	; () banked
  8013  000670  51BF               	movf	(??_isr+1)& (0+255),w,b
  8014  000672  0A00               	xorlw	0	; case 0
  8015  000674  A4D8               	btfss	status,2,c
  8016  000676  D020               	goto	i2l265
  8017                           
  8018                           ; BSR set to: 0
  8019                           ; Switch size 1, requested type "space"
  8020                           ; Number of cases is 10, Range of values is 0 to 14
  8021                           ; switch strategies available:
  8022                           ; Name         Instructions Cycles
  8023                           ; simple_byte           31    16 (average)
  8024                           ;	Chosen strategy is simple_byte
  8025  000678  0100               	movlb	0	; () banked
  8026  00067A  51BE               	movf	??_isr& (0+255),w,b
  8027  00067C  0A00               	xorlw	0	; case 0
  8028  00067E  B4D8               	btfsc	status,2,c
  8029  000680  D6E9               	goto	i2l264
  8030  000682  0A01               	xorlw	1	; case 1
  8031  000684  B4D8               	btfsc	status,2,c
  8032  000686  D72B               	goto	i2l4852
  8033  000688  0A03               	xorlw	3	; case 2
  8034  00068A  B4D8               	btfsc	status,2,c
  8035  00068C  D733               	goto	i2l4858
  8036  00068E  0A01               	xorlw	1	; case 3
  8037  000690  B4D8               	btfsc	status,2,c
  8038  000692  D748               	goto	i2l271
  8039  000694  0A07               	xorlw	7	; case 4
  8040  000696  B4D8               	btfsc	status,2,c
  8041  000698  D74A               	goto	i2l272
  8042  00069A  0A01               	xorlw	1	; case 5
  8043  00069C  B4D8               	btfsc	status,2,c
  8044  00069E  D7A0               	goto	i2l4886
  8045  0006A0  0A02               	xorlw	2	; case 7
  8046  0006A2  B4D8               	btfsc	status,2,c
  8047  0006A4  D7D1               	goto	i2l4902
  8048  0006A6  0A0C               	xorlw	12	; case 11
  8049  0006A8  B4D8               	btfsc	status,2,c
  8050  0006AA  D7D5               	goto	i2l4904
  8051  0006AC  0A07               	xorlw	7	; case 12
  8052  0006AE  B4D8               	btfsc	status,2,c
  8053  0006B0  D7BC               	goto	i2l274
  8054  0006B2  0A02               	xorlw	2	; case 14
  8055  0006B4  B4D8               	btfsc	status,2,c
  8056  0006B6  D7C1               	goto	i2l275
  8057  0006B8                     i2l265:
  8058                           
  8059                           ;main.c: 177: INT1IF = 0;
  8060  0006B8  90F0               	bcf	intcon3,0,c	;volatile
  8061                           
  8062                           ;main.c: 178: }
  8063  0006BA  D07A               	goto	i2l286
  8064  0006BC                     i2l262:
  8065                           
  8066                           ;main.c: 179: else if (TMR0IF){
  8067  0006BC  A4F2               	btfss	intcon,2,c	;volatile
  8068  0006BE  D05E               	goto	i2l4934
  8069                           
  8070                           ;main.c: 180: LATAbits.LATA2 = 0;
  8071  0006C0  9489               	bcf	3977,2,c	;volatile
  8072                           
  8073                           ;main.c: 181: TMR0ON = 0;
  8074  0006C2  9ED5               	bcf	4053,7,c	;volatile
  8075                           
  8076                           ;main.c: 182: read_time();
  8077  0006C4  EC58  F015         	call	_read_time	;wreg free
  8078                           
  8079                           ;main.c: 183: end_time[1] = time[1];
  8080  0006C8  C09B  F077         	movff	_time+1,_end_time+1
  8081                           
  8082                           ;main.c: 184: end_time[0] = time[0];
  8083  0006CC  C09A  F076         	movff	_time,_end_time
  8084                           
  8085                           ;main.c: 185: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  8086  0006D0  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  8087  0006D4  6A64               	clrf	dec_to_hex@num+1,c
  8088  0006D6  ECD7  F00C         	call	_dec_to_hex	;wreg free
  8089  0006DA  C063  F074         	movff	?_dec_to_hex,_isr$1377
  8090  0006DE  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  8091                           
  8092                           ;main.c: 185: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  8093  0006E2  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  8094  0006E6  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  8095  0006EA  0E00               	movlw	0
  8096  0006EC  6E04               	movwf	i2___wmul@multiplicand+1,c
  8097  0006EE  0E3C               	movlw	60
  8098  0006F0  6E03               	movwf	i2___wmul@multiplicand,c
  8099  0006F2  EC01  F018         	call	i2___wmul	;wreg free
  8100  0006F6  C001  F0BE         	movff	?i2___wmul,??_isr
  8101  0006FA  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  8102  0006FE  C07A  F063         	movff	_start_time,dec_to_hex@num
  8103  000702  6A64               	clrf	dec_to_hex@num+1,c
  8104  000704  ECD7  F00C         	call	_dec_to_hex	;wreg free
  8105  000708  5063               	movf	?_dec_to_hex,w,c
  8106  00070A  0100               	movlb	0	; () banked
  8107  00070C  25BE               	addwf	??_isr& (0+255),w,b
  8108  00070E  6E7C               	movwf	_stime,c
  8109  000710  5064               	movf	?_dec_to_hex+1,w,c
  8110  000712  0100               	movlb	0	; () banked
  8111  000714  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  8112  000716  6E7D               	movwf	_stime+1,c
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 186: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  8116  000718  C077  F063         	movff	_end_time+1,dec_to_hex@num
  8117  00071C  6A64               	clrf	dec_to_hex@num+1,c
  8118  00071E  ECD7  F00C         	call	_dec_to_hex	;wreg free
  8119  000722  C063  F074         	movff	?_dec_to_hex,_isr$1377
  8120  000726  C064  F075         	movff	?_dec_to_hex+1,_isr$1377+1
  8121                           
  8122                           ;main.c: 186: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  8123  00072A  C074  F001         	movff	_isr$1377,i2___wmul@multiplier
  8124  00072E  C075  F002         	movff	_isr$1377+1,i2___wmul@multiplier+1
  8125  000732  0E00               	movlw	0
  8126  000734  6E04               	movwf	i2___wmul@multiplicand+1,c
  8127  000736  0E3C               	movlw	60
  8128  000738  6E03               	movwf	i2___wmul@multiplicand,c
  8129  00073A  EC01  F018         	call	i2___wmul	;wreg free
  8130  00073E  C001  F0BE         	movff	?i2___wmul,??_isr
  8131  000742  C002  F0BF         	movff	?i2___wmul+1,??_isr+1
  8132  000746  C076  F063         	movff	_end_time,dec_to_hex@num
  8133  00074A  6A64               	clrf	dec_to_hex@num+1,c
  8134  00074C  ECD7  F00C         	call	_dec_to_hex	;wreg free
  8135  000750  5063               	movf	?_dec_to_hex,w,c
  8136  000752  0100               	movlb	0	; () banked
  8137  000754  25BE               	addwf	??_isr& (0+255),w,b
  8138  000756  6E78               	movwf	_etime,c
  8139  000758  5064               	movf	?_dec_to_hex+1,w,c
  8140  00075A  0100               	movlb	0	; () banked
  8141  00075C  21BF               	addwfc	(??_isr+1)& (0+255),w,b
  8142  00075E  6E79               	movwf	_etime+1,c
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;main.c: 187: curr_state = OPERATIONEND;
  8146  000760  0E03               	movlw	3
  8147  000762  0100               	movlb	0	; () banked
  8148  000764  6FBD               	movwf	_curr_state& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;main.c: 188: bottle_count_disp = -1;
  8152  000766  0100               	movlb	0	; () banked
  8153  000768  69ED               	setf	_bottle_count_disp& (0+255),b
  8154  00076A  69EE               	setf	(_bottle_count_disp+1)& (0+255),b
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;main.c: 189: TMR0IF = 0;
  8158  00076C  94F2               	bcf	intcon,2,c	;volatile
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;main.c: 190: printf("debug1");
  8162  00076E  0EF8               	movlw	low STR_4
  8163  000770  6E0D               	movwf	i2printf@f,c
  8164  000772  0EFF               	movlw	high STR_4
  8165  000774  6E0E               	movwf	i2printf@f+1,c
  8166  000776  ECE1  F005         	call	i2_printf	;wreg free
  8167                           
  8168                           ;main.c: 191: }
  8169  00077A  D01A               	goto	i2l286
  8170  00077C                     i2l4934:
  8171                           
  8172                           ;main.c: 194: lcdInst(0b10000000);
  8173  00077C  0E80               	movlw	128
  8174  00077E  EC7B  F018         	call	i2_lcdInst
  8175                           
  8176                           ;main.c: 195: printf("ERR: BAD ISR");
  8177  000782  0EC7               	movlw	low STR_5
  8178  000784  6E0D               	movwf	i2printf@f,c
  8179  000786  0EFF               	movlw	high STR_5
  8180  000788  6E0E               	movwf	i2printf@f+1,c
  8181  00078A  ECE1  F005         	call	i2_printf	;wreg free
  8182                           
  8183                           ;main.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  8184  00078E  0E00               	movlw	0
  8185  000790  6E73               	movwf	isr@i,c
  8186  000792                     i2l4940:
  8187  000792  0E63               	movlw	99
  8188  000794  6473               	cpfsgt	isr@i,c
  8189  000796  D001               	goto	i2l4944
  8190  000798  D7F1               	goto	i2l4934
  8191  00079A                     i2l4944:
  8192  00079A  0E21               	movlw	33
  8193  00079C  0100               	movlb	0	; () banked
  8194  00079E  6FBE               	movwf	??_isr& (0+255),b
  8195  0007A0  0E76               	movlw	118
  8196  0007A2                     i2u586_47:
  8197  0007A2  2EE8               	decfsz	wreg,f,c
  8198  0007A4  D7FE               	bra	i2u586_47
  8199  0007A6  2FBE               	decfsz	??_isr& (0+255),f,b
  8200  0007A8  D7FC               	bra	i2u586_47
  8201  0007AA  F000               	nop	
  8202  0007AC  2A73               	incf	isr@i,f,c
  8203  0007AE  D7F1               	goto	i2l4940
  8204  0007B0                     i2l286:
  8205  0007B0  C0CD  FFF5         	movff	??_isr+15,tablat
  8206  0007B4  C0CC  FFF8         	movff	??_isr+14,tblptru
  8207  0007B8  C0CB  FFF7         	movff	??_isr+13,tblptrh
  8208  0007BC  C0CA  FFF6         	movff	??_isr+12,tblptrl
  8209  0007C0  C0C9  FFF4         	movff	??_isr+11,prodh
  8210  0007C4  C0C8  FFF3         	movff	??_isr+10,prodl
  8211  0007C8  C0C7  FFDA         	movff	??_isr+9,fsr2h
  8212  0007CC  C0C6  FFD9         	movff	??_isr+8,fsr2l
  8213  0007D0  C0C5  FFE2         	movff	??_isr+7,fsr1h
  8214  0007D4  C0C4  FFE1         	movff	??_isr+6,fsr1l
  8215  0007D8  C0C3  FFEA         	movff	??_isr+5,fsr0h
  8216  0007DC  C0C2  FFE9         	movff	??_isr+4,fsr0l
  8217  0007E0  C0C1  FFFB         	movff	??_isr+3,pclatu
  8218  0007E4  C0C0  FFFA         	movff	??_isr+2,pclath
  8219  0007E8  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8220  0007EA  0011               	retfie		f
  8221  0007EC                     __end_of_isr:
  8222                           	opt stack 0
  8223                           pclatu	equ	0xFFB
  8224                           pclath	equ	0xFFA
  8225                           tblptru	equ	0xFF8
  8226                           tblptrh	equ	0xFF7
  8227                           tblptrl	equ	0xFF6
  8228                           tablat	equ	0xFF5
  8229                           prodh	equ	0xFF4
  8230                           prodl	equ	0xFF3
  8231                           intcon	equ	0xFF2
  8232                           intcon2	equ	0xFF1
  8233                           intcon3	equ	0xFF0
  8234                           postinc0	equ	0xFEE
  8235                           fsr0h	equ	0xFEA
  8236                           fsr0l	equ	0xFE9
  8237                           wreg	equ	0xFE8
  8238                           postinc1	equ	0xFE6
  8239                           postdec1	equ	0xFE5
  8240                           fsr1h	equ	0xFE2
  8241                           fsr1l	equ	0xFE1
  8242                           indf2	equ	0xFDF
  8243                           postinc2	equ	0xFDE
  8244                           postdec2	equ	0xFDD
  8245                           fsr2h	equ	0xFDA
  8246                           fsr2l	equ	0xFD9
  8247                           status	equ	0xFD8
  8248                           
  8249 ;; *************** function i2_servo_rotate1 *****************
  8250 ;; Defined at:
  8251 ;;		line 440 in file "main.c"
  8252 ;; Parameters:    Size  Location     Type
  8253 ;;  degree          2    0[COMRAM] int 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  servo_rotate    2    8[COMRAM] unsigned int 
  8256 ;;  servo_rotate    2    6[COMRAM] unsigned int 
  8257 ;;  servo_rotate    2    4[COMRAM] int 
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg, status,2, status,0
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8271 ;;Total ram usage:       10 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_isr
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text34
  8281  0028B8                     __ptext34:
  8282                           	opt stack 0
  8283  0028B8                     i2_servo_rotate1:
  8284                           	opt stack 25
  8285                           
  8286                           ;main.c: 445: unsigned int i;
  8287                           ;main.c: 446: unsigned int j;
  8288                           ;main.c: 447: int duty = degree;
  8289                           
  8290                           ;incstack = 0
  8291  0028B8  C001  F005         	movff	i2servo_rotate1@degree,i2servo_rotate1@duty
  8292  0028BC  C002  F006         	movff	i2servo_rotate1@degree+1,i2servo_rotate1@duty+1
  8293                           
  8294                           ;main.c: 448: for (i=0; i<10; i++) {
  8295  0028C0  0E00               	movlw	0
  8296  0028C2  6E08               	movwf	i2servo_rotate1@i+1,c
  8297  0028C4  0E00               	movlw	0
  8298  0028C6  6E07               	movwf	i2servo_rotate1@i,c
  8299  0028C8                     i2l4566:
  8300  0028C8  5008               	movf	i2servo_rotate1@i+1,w,c
  8301  0028CA  E137               	bnz	i2l389
  8302  0028CC  0E0A               	movlw	10
  8303  0028CE  5C07               	subwf	i2servo_rotate1@i,w,c
  8304  0028D0  B0D8               	btfsc	status,0,c
  8305  0028D2  0012               	return	
  8306                           
  8307                           ;main.c: 449: LATCbits.LATC1` = 1;
  8308  0028D4  828B               	bsf	3979,1,c	;volatile
  8309                           
  8310                           ;main.c: 450: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  8311  0028D6  0E00               	movlw	0
  8312  0028D8  6E0A               	movwf	i2servo_rotate1@j+1,c
  8313  0028DA  0E00               	movlw	0
  8314  0028DC  6E09               	movwf	i2servo_rotate1@j,c
  8315  0028DE  D006               	goto	i2l383
  8316  0028E0                     i2l4572:
  8317  0028E0  0E53               	movlw	83
  8318  0028E2                     i2u587_47:
  8319  0028E2  2EE8               	decfsz	wreg,f,c
  8320  0028E4  D7FE               	bra	i2u587_47
  8321  0028E6  F000               	nop	
  8322  0028E8  4A09               	infsnz	i2servo_rotate1@j,f,c
  8323  0028EA  2A0A               	incf	i2servo_rotate1@j+1,f,c
  8324  0028EC                     i2l383:
  8325  0028EC  5005               	movf	i2servo_rotate1@duty,w,c
  8326  0028EE  5C09               	subwf	i2servo_rotate1@j,w,c
  8327  0028F0  5006               	movf	i2servo_rotate1@duty+1,w,c
  8328  0028F2  580A               	subwfb	i2servo_rotate1@j+1,w,c
  8329  0028F4  A0D8               	btfss	status,0,c
  8330  0028F6  D7F4               	goto	i2l4572
  8331                           
  8332                           ;main.c: 451: LATCbits.LATC1 = 0;
  8333  0028F8  928B               	bcf	3979,1,c	;volatile
  8334                           
  8335                           ;main.c: 452: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  8336  0028FA  0E00               	movlw	0
  8337  0028FC  6E0A               	movwf	i2servo_rotate1@j+1,c
  8338  0028FE  0E00               	movlw	0
  8339  002900  6E09               	movwf	i2servo_rotate1@j,c
  8340  002902  D006               	goto	i2l386
  8341  002904                     i2l4578:
  8342  002904  0E53               	movlw	83
  8343  002906                     i2u588_47:
  8344  002906  2EE8               	decfsz	wreg,f,c
  8345  002908  D7FE               	bra	i2u588_47
  8346  00290A  F000               	nop	
  8347  00290C  4A09               	infsnz	i2servo_rotate1@j,f,c
  8348  00290E  2A0A               	incf	i2servo_rotate1@j+1,f,c
  8349  002910                     i2l386:
  8350  002910  C005  F003         	movff	i2servo_rotate1@duty,??i2_servo_rotate1
  8351  002914  C006  F004         	movff	i2servo_rotate1@duty+1,??i2_servo_rotate1+1
  8352  002918  1E03               	comf	??i2_servo_rotate1,f,c
  8353  00291A  1E04               	comf	??i2_servo_rotate1+1,f,c
  8354  00291C  4A03               	infsnz	??i2_servo_rotate1,f,c
  8355  00291E  2A04               	incf	??i2_servo_rotate1+1,f,c
  8356  002920  0EC8               	movlw	200
  8357  002922  2603               	addwf	??i2_servo_rotate1,f,c
  8358  002924  0E00               	movlw	0
  8359  002926  2204               	addwfc	??i2_servo_rotate1+1,f,c
  8360  002928  5003               	movf	??i2_servo_rotate1,w,c
  8361  00292A  5C09               	subwf	i2servo_rotate1@j,w,c
  8362  00292C  5004               	movf	??i2_servo_rotate1+1,w,c
  8363  00292E  580A               	subwfb	i2servo_rotate1@j+1,w,c
  8364  002930  A0D8               	btfss	status,0,c
  8365  002932  D7E8               	goto	i2l4578
  8366  002934  4A07               	infsnz	i2servo_rotate1@i,f,c
  8367  002936  2A08               	incf	i2servo_rotate1@i+1,f,c
  8368  002938  D7C7               	goto	i2l4566
  8369  00293A                     i2l389:
  8370  00293A  0012               	return		;funcret
  8371  00293C                     __end_ofi2_servo_rotate1:
  8372                           	opt stack 0
  8373                           pclatu	equ	0xFFB
  8374                           pclath	equ	0xFFA
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           intcon3	equ	0xFF0
  8384                           postinc0	equ	0xFEE
  8385                           fsr0h	equ	0xFEA
  8386                           fsr0l	equ	0xFE9
  8387                           wreg	equ	0xFE8
  8388                           postinc1	equ	0xFE6
  8389                           postdec1	equ	0xFE5
  8390                           fsr1h	equ	0xFE2
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           fsr2h	equ	0xFDA
  8396                           fsr2l	equ	0xFD9
  8397                           status	equ	0xFD8
  8398                           
  8399 ;; *************** function i2_read_colorsensor *****************
  8400 ;; Defined at:
  8401 ;;		line 457 in file "main.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;		None
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;  read_colorse    4   11[COMRAM] unsigned char [4]
  8406 ;;  read_colorse    4    7[COMRAM] unsigned char [4]
  8407 ;;  read_colorse    2   15[COMRAM] int 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;Total ram usage:       14 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    2
  8424 ;; This function calls:
  8425 ;;		i2_I2C_Master_Read
  8426 ;;		i2_I2C_Master_Start
  8427 ;;		i2_I2C_Master_Stop
  8428 ;;		i2_I2C_Master_Write
  8429 ;; This function is called by:
  8430 ;;		_isr
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           	psect	text35
  8435  00210A                     __ptext35:
  8436                           	opt stack 0
  8437  00210A                     i2_read_colorsensor:
  8438                           	opt stack 23
  8439                           
  8440                           ;main.c: 458: unsigned char color_low[4];
  8441                           ;main.c: 459: unsigned char color_high[4];
  8442                           ;main.c: 460: int i;
  8443                           ;main.c: 482: I2C_Master_Start();
  8444                           
  8445                           ;incstack = 0
  8446  00210A  EC97  F018         	call	i2_I2C_Master_Start	;wreg free
  8447                           
  8448                           ;main.c: 483: I2C_Master_Write(0b01010011);
  8449  00210E  0E00               	movlw	0
  8450  002110  6E03               	movwf	i2I2C_Master_Write@d+1,c
  8451  002112  0E53               	movlw	83
  8452  002114  6E02               	movwf	i2I2C_Master_Write@d,c
  8453  002116  EC86  F018         	call	i2_I2C_Master_Write	;wreg free
  8454                           
  8455                           ;main.c: 484: for(i=0; i<3; i++){
  8456  00211A  0E00               	movlw	0
  8457  00211C  6E11               	movwf	i2read_colorsensor@i+1,c
  8458  00211E  0E00               	movlw	0
  8459  002120  6E10               	movwf	i2read_colorsensor@i,c
  8460  002122                     i2l4590:
  8461  002122  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  8462  002124  D006               	goto	i2l4594
  8463  002126  5011               	movf	i2read_colorsensor@i+1,w,c
  8464  002128  E11B               	bnz	i2l4600
  8465  00212A  0E03               	movlw	3
  8466  00212C  5C10               	subwf	i2read_colorsensor@i,w,c
  8467  00212E  B0D8               	btfsc	status,0,c
  8468  002130  D017               	goto	i2l4600
  8469  002132                     i2l4594:
  8470                           
  8471                           ;main.c: 485: color_low[i] = I2C_Master_Read(1);
  8472  002132  0E08               	movlw	low i2read_colorsensor@color_low
  8473  002134  2410               	addwf	i2read_colorsensor@i,w,c
  8474  002136  6ED9               	movwf	fsr2l,c
  8475  002138  0E00               	movlw	high i2read_colorsensor@color_low
  8476  00213A  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8477  00213C  6EDA               	movwf	fsr2h,c
  8478  00213E  0E01               	movlw	1
  8479  002140  ECEE  F017         	call	i2_I2C_Master_Read
  8480  002144  6EDF               	movwf	indf2,c
  8481                           
  8482                           ;main.c: 486: color_high[i] = I2C_Master_Read(1);
  8483  002146  0E0C               	movlw	low i2read_colorsensor@color_high
  8484  002148  2410               	addwf	i2read_colorsensor@i,w,c
  8485  00214A  6ED9               	movwf	fsr2l,c
  8486  00214C  0E00               	movlw	high i2read_colorsensor@color_high
  8487  00214E  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8488  002150  6EDA               	movwf	fsr2h,c
  8489  002152  0E01               	movlw	1
  8490  002154  ECEE  F017         	call	i2_I2C_Master_Read
  8491  002158  6EDF               	movwf	indf2,c
  8492  00215A  4A10               	infsnz	i2read_colorsensor@i,f,c
  8493  00215C  2A11               	incf	i2read_colorsensor@i+1,f,c
  8494  00215E  D7E1               	goto	i2l4590
  8495  002160                     i2l4600:
  8496                           
  8497                           ;main.c: 487: }
  8498                           ;main.c: 488: color_low[3] = I2C_Master_Read(1);
  8499  002160  0E01               	movlw	1
  8500  002162  ECEE  F017         	call	i2_I2C_Master_Read
  8501  002166  6E0B               	movwf	i2read_colorsensor@color_low+3,c
  8502                           
  8503                           ;main.c: 489: color_high[3] = I2C_Master_Read(0);
  8504  002168  0E00               	movlw	0
  8505  00216A  ECEE  F017         	call	i2_I2C_Master_Read
  8506  00216E  6E0F               	movwf	i2read_colorsensor@color_high+3,c
  8507                           
  8508                           ;main.c: 490: I2C_Master_Stop();
  8509  002170  EC93  F018         	call	i2_I2C_Master_Stop	;wreg free
  8510                           
  8511                           ;main.c: 491: for(i=0; i<4; i++){
  8512  002174  0E00               	movlw	0
  8513  002176  6E11               	movwf	i2read_colorsensor@i+1,c
  8514  002178  0E00               	movlw	0
  8515  00217A  6E10               	movwf	i2read_colorsensor@i,c
  8516  00217C                     i2l4604:
  8517  00217C  BE11               	btfsc	i2read_colorsensor@i+1,7,c
  8518  00217E  D006               	goto	i2l4608
  8519  002180  5011               	movf	i2read_colorsensor@i+1,w,c
  8520  002182  E12B               	bnz	i2l396
  8521  002184  0E04               	movlw	4
  8522  002186  5C10               	subwf	i2read_colorsensor@i,w,c
  8523  002188  B0D8               	btfsc	status,0,c
  8524  00218A  0012               	return	
  8525  00218C                     i2l4608:
  8526                           
  8527                           ;main.c: 492: color[i] = (color_high[i] << 8)|(color_low[i]);
  8528  00218C  0E0C               	movlw	low i2read_colorsensor@color_high
  8529  00218E  2410               	addwf	i2read_colorsensor@i,w,c
  8530  002190  6ED9               	movwf	fsr2l,c
  8531  002192  0E00               	movlw	high i2read_colorsensor@color_high
  8532  002194  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8533  002196  6EDA               	movwf	fsr2h,c
  8534  002198  50DF               	movf	indf2,w,c
  8535  00219A  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  8536  00219C  5004               	movf	??i2_read_colorsensor,w,c
  8537  00219E  6E06               	movwf	(??i2_read_colorsensor+2)& (0+255),c
  8538  0021A0  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
  8539  0021A2  0E08               	movlw	low i2read_colorsensor@color_low
  8540  0021A4  2410               	addwf	i2read_colorsensor@i,w,c
  8541  0021A6  6ED9               	movwf	fsr2l,c
  8542  0021A8  0E00               	movlw	high i2read_colorsensor@color_low
  8543  0021AA  2011               	addwfc	i2read_colorsensor@i+1,w,c
  8544  0021AC  6EDA               	movwf	fsr2h,c
  8545  0021AE  50DF               	movf	indf2,w,c
  8546  0021B0  6E07               	movwf	(??i2_read_colorsensor+3)& (0+255),c
  8547  0021B2  5007               	movf	??i2_read_colorsensor+3,w,c
  8548  0021B4  1205               	iorwf	??i2_read_colorsensor+1,f,c
  8549  0021B6  0E00               	movlw	0
  8550  0021B8  1206               	iorwf	??i2_read_colorsensor+2,f,c
  8551  0021BA  90D8               	bcf	status,0,c
  8552  0021BC  3410               	rlcf	i2read_colorsensor@i,w,c
  8553  0021BE  6ED9               	movwf	fsr2l,c
  8554  0021C0  3411               	rlcf	i2read_colorsensor@i+1,w,c
  8555  0021C2  6EDA               	movwf	fsr2h,c
  8556  0021C4  0E8A               	movlw	low _color
  8557  0021C6  26D9               	addwf	fsr2l,f,c
  8558  0021C8  0E00               	movlw	high _color
  8559  0021CA  22DA               	addwfc	fsr2h,f,c
  8560  0021CC  C005  FFDE         	movff	??i2_read_colorsensor+1,postinc2
  8561  0021D0  C006  FFDD         	movff	??i2_read_colorsensor+2,postdec2
  8562  0021D4  4A10               	infsnz	i2read_colorsensor@i,f,c
  8563  0021D6  2A11               	incf	i2read_colorsensor@i+1,f,c
  8564  0021D8  D7D1               	goto	i2l4604
  8565  0021DA                     i2l396:
  8566  0021DA  0012               	return		;funcret
  8567  0021DC                     __end_ofi2_read_colorsensor:
  8568                           	opt stack 0
  8569                           pclatu	equ	0xFFB
  8570                           pclath	equ	0xFFA
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           intcon	equ	0xFF2
  8578                           intcon2	equ	0xFF1
  8579                           intcon3	equ	0xFF0
  8580                           postinc0	equ	0xFEE
  8581                           fsr0h	equ	0xFEA
  8582                           fsr0l	equ	0xFE9
  8583                           wreg	equ	0xFE8
  8584                           postinc1	equ	0xFE6
  8585                           postdec1	equ	0xFE5
  8586                           fsr1h	equ	0xFE2
  8587                           fsr1l	equ	0xFE1
  8588                           indf2	equ	0xFDF
  8589                           postinc2	equ	0xFDE
  8590                           postdec2	equ	0xFDD
  8591                           fsr2h	equ	0xFDA
  8592                           fsr2l	equ	0xFD9
  8593                           status	equ	0xFD8
  8594                           
  8595 ;; *************** function i2_printf *****************
  8596 ;; Defined at:
  8597 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8600 ;;		 -> STR_21(15), STR_20(16), STR_19(11), STR_18(18), 
  8601 ;;		 -> STR_17(23), STR_16(16), STR_15(17), STR_14(17), 
  8602 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  8603 ;;		 -> STR_9(23), STR_8(23), STR_7(9), STR_6(8), 
  8604 ;;		 -> STR_5(13), STR_4(7), STR_3(24), STR_2(24), 
  8605 ;;		 -> STR_1(8), 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  printf          4    0        struct .
  8608 ;;  printf          3    0        PTR const unsigned char 
  8609 ;;  printf          2   29[COMRAM] int 
  8610 ;;  printf          2   26[COMRAM] unsigned int 
  8611 ;;  printf          2   23[COMRAM] PTR void [1]
  8612 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8613 ;;  printf          2    0        unsigned int 
  8614 ;;  printf          1   31[COMRAM] char 
  8615 ;;  printf          1   28[COMRAM] unsigned char 
  8616 ;;  printf          1   25[COMRAM] char 
  8617 ;;  printf          1   22[COMRAM] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  2   12[COMRAM] int 
  8620 ;; Registers used:
  8621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;Total ram usage:       20 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    2
  8634 ;; This function calls:
  8635 ;;		i2___lwdiv
  8636 ;;		i2___lwmod
  8637 ;;		i2___wmul
  8638 ;;		i2_isdigit
  8639 ;;		i2_putch
  8640 ;; This function is called by:
  8641 ;;		_isr
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           	psect	text36
  8646  000BC2                     __ptext36:
  8647                           	opt stack 0
  8648  000BC2                     i2_printf:
  8649                           	opt stack 23
  8650                           
  8651                           ;doprnt.c: 466: va_list ap;
  8652                           ;doprnt.c: 499: signed char c;
  8653                           ;doprnt.c: 501: int width;
  8654                           ;doprnt.c: 506: signed char prec;
  8655                           ;doprnt.c: 508: unsigned char flag;
  8656                           ;doprnt.c: 523: union {
  8657                           ;doprnt.c: 524: unsigned long vd;
  8658                           ;doprnt.c: 525: double integ;
  8659                           ;doprnt.c: 526: } tmpval;
  8660                           ;doprnt.c: 528: unsigned int val;
  8661                           ;doprnt.c: 529: unsigned len;
  8662                           ;doprnt.c: 530: const char * cp;
  8663                           ;doprnt.c: 533: *ap = __va_start();
  8664                           
  8665                           ;incstack = 0
  8666  000BC2  0E0F               	movlw	low (?i2_printf+2)
  8667  000BC4  6E18               	movwf	i2printf@ap,c
  8668  000BC6  0E00               	movlw	high (?i2_printf+2)
  8669  000BC8  6E19               	movwf	i2printf@ap+1,c
  8670                           
  8671                           ;doprnt.c: 536: while(c = *f++) {
  8672  000BCA  D184               	goto	i2l4746
  8673  000BCC                     i2l4616:
  8674                           
  8675                           ;doprnt.c: 538: if(c != '%')
  8676  000BCC  0E25               	movlw	37
  8677  000BCE  1820               	xorwf	i2printf@c,w,c
  8678  000BD0  B4D8               	btfsc	status,2,c
  8679  000BD2  D004               	goto	i2l4620
  8680                           
  8681                           ;doprnt.c: 540: {
  8682                           ;doprnt.c: 541: (putch(c) );
  8683  000BD4  5020               	movf	i2printf@c,w,c
  8684  000BD6  EC75  F018         	call	i2_putch
  8685                           
  8686                           ;doprnt.c: 542: continue;
  8687  000BDA  D17C               	goto	i2l4746
  8688  000BDC                     i2l4620:
  8689                           
  8690                           ;doprnt.c: 543: }
  8691                           ;doprnt.c: 546: width = 0;
  8692  000BDC  0E00               	movlw	0
  8693  000BDE  6E1F               	movwf	i2printf@width+1,c
  8694  000BE0  0E00               	movlw	0
  8695  000BE2  6E1E               	movwf	i2printf@width,c
  8696                           
  8697                           ;doprnt.c: 548: flag = 0;
  8698  000BE4  0E00               	movlw	0
  8699  000BE6  6E1D               	movwf	i2printf@flag,c
  8700                           
  8701                           ;doprnt.c: 551: switch(*f) {
  8702                           
  8703                           ;doprnt.c: 550: for(;;) {
  8704  000BE8  D003               	goto	i2l4626
  8705  000BEA                     i2l4622:
  8706                           
  8707                           ;doprnt.c: 580: flag |= 0x04;
  8708  000BEA  841D               	bsf	i2printf@flag,2,c
  8709                           
  8710                           ;doprnt.c: 581: f++;
  8711  000BEC  4A0D               	infsnz	i2printf@f,f,c
  8712  000BEE  2A0E               	incf	i2printf@f+1,f,c
  8713  000BF0                     i2l4626:
  8714  000BF0  C00D  FFF6         	movff	i2printf@f,tblptrl
  8715  000BF4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8716  000BF8                     	if	0	;tblptru may be non-zero
  8717  000BF8                     	endif
  8718  000BF8                     	if	0	;tblptru may be non-zero
  8719  000BF8                     	endif
  8720  000BF8  0008               	tblrd		*
  8721  000BFA  50F5               	movf	tablat,w,c
  8722                           
  8723                           ; Switch size 1, requested type "space"
  8724                           ; Number of cases is 1, Range of values is 48 to 48
  8725                           ; switch strategies available:
  8726                           ; Name         Instructions Cycles
  8727                           ; simple_byte            4     3 (average)
  8728                           ;	Chosen strategy is simple_byte
  8729  000BFC  0A30               	xorlw	48	; case 48
  8730  000BFE  B4D8               	btfsc	status,2,c
  8731  000C00  D7F4               	goto	i2l4622
  8732                           
  8733                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8734                           
  8735                           ;doprnt.c: 586: }
  8736                           
  8737                           ;doprnt.c: 585: break;
  8738  000C02  C00D  FFF6         	movff	i2printf@f,tblptrl
  8739  000C06  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8740  000C0A                     	if	0	;tblptru may be non-zero
  8741  000C0A                     	endif
  8742  000C0A                     	if	0	;tblptru may be non-zero
  8743  000C0A                     	endif
  8744  000C0A  0008               	tblrd		*
  8745  000C0C  50F5               	movf	tablat,w,c
  8746  000C0E  EC37  F018         	call	i2_isdigit
  8747  000C12  A0D8               	btfss	status,0,c
  8748  000C14  D038               	goto	i2l4646
  8749                           
  8750                           ;doprnt.c: 598: width = 0;
  8751  000C16  0E00               	movlw	0
  8752  000C18  6E1F               	movwf	i2printf@width+1,c
  8753  000C1A  0E00               	movlw	0
  8754  000C1C  6E1E               	movwf	i2printf@width,c
  8755  000C1E                     i2l4632:
  8756                           
  8757                           ;doprnt.c: 600: width *= 10;
  8758  000C1E  C01E  F001         	movff	i2printf@width,i2___wmul@multiplier
  8759  000C22  C01F  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8760  000C26  0E00               	movlw	0
  8761  000C28  6E04               	movwf	i2___wmul@multiplicand+1,c
  8762  000C2A  0E0A               	movlw	10
  8763  000C2C  6E03               	movwf	i2___wmul@multiplicand,c
  8764  000C2E  EC01  F018         	call	i2___wmul	;wreg free
  8765  000C32  C001  F01E         	movff	?i2___wmul,i2printf@width
  8766  000C36  C002  F01F         	movff	?i2___wmul+1,i2printf@width+1
  8767                           
  8768                           ;doprnt.c: 601: width += *f++ - '0';
  8769  000C3A  0ED0               	movlw	208
  8770  000C3C  6E13               	movwf	??i2_printf& (0+255),c
  8771  000C3E  0EFF               	movlw	255
  8772  000C40  6E14               	movwf	(??i2_printf+1)& (0+255),c
  8773  000C42  C00D  FFF6         	movff	i2printf@f,tblptrl
  8774  000C46  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8775  000C4A                     	if	0	;tblptru may be non-zero
  8776  000C4A                     	endif
  8777  000C4A                     	if	0	;tblptru may be non-zero
  8778  000C4A                     	endif
  8779  000C4A  0008               	tblrd		*
  8780  000C4C  50F5               	movf	tablat,w,c
  8781  000C4E  6E15               	movwf	(??i2_printf+2)& (0+255),c
  8782  000C50  6A16               	clrf	(??i2_printf+3)& (0+255),c
  8783  000C52  5013               	movf	??i2_printf,w,c
  8784  000C54  2615               	addwf	??i2_printf+2,f,c
  8785  000C56  5014               	movf	??i2_printf+1,w,c
  8786  000C58  2216               	addwfc	??i2_printf+3,f,c
  8787  000C5A  5015               	movf	??i2_printf+2,w,c
  8788  000C5C  261E               	addwf	i2printf@width,f,c
  8789  000C5E  5016               	movf	??i2_printf+3,w,c
  8790  000C60  221F               	addwfc	i2printf@width+1,f,c
  8791  000C62  4A0D               	infsnz	i2printf@f,f,c
  8792  000C64  2A0E               	incf	i2printf@f+1,f,c
  8793                           
  8794                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8795  000C66  C00D  FFF6         	movff	i2printf@f,tblptrl
  8796  000C6A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8797  000C6E                     	if	0	;tblptru may be non-zero
  8798  000C6E                     	endif
  8799  000C6E                     	if	0	;tblptru may be non-zero
  8800  000C6E                     	endif
  8801  000C6E  0008               	tblrd		*
  8802  000C70  50F5               	movf	tablat,w,c
  8803  000C72  EC37  F018         	call	i2_isdigit
  8804  000C76  A0D8               	btfss	status,0,c
  8805  000C78  D006               	goto	i2l4646
  8806  000C7A  D7D1               	goto	i2l4632
  8807  000C7C                     i2l4640:
  8808                           
  8809                           ;doprnt.c: 721: flag |= 0x80;
  8810  000C7C  8E1D               	bsf	i2printf@flag,7,c
  8811                           
  8812                           ;doprnt.c: 723: break;
  8813  000C7E  D01D               	goto	i2l4648
  8814  000C80                     i2l4642:
  8815                           
  8816                           ;doprnt.c: 818: flag |= 0xC0;
  8817  000C80  0EC0               	movlw	192
  8818  000C82  121D               	iorwf	i2printf@flag,f,c
  8819                           
  8820                           ;doprnt.c: 822: }
  8821                           
  8822                           ;doprnt.c: 819: break;
  8823  000C84  D01A               	goto	i2l4648
  8824  000C86                     i2l4646:
  8825  000C86  C00D  FFF6         	movff	i2printf@f,tblptrl
  8826  000C8A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8827  000C8E  4A0D               	infsnz	i2printf@f,f,c
  8828  000C90  2A0E               	incf	i2printf@f+1,f,c
  8829  000C92                     	if	0	;tblptru may be non-zero
  8830  000C92                     	endif
  8831  000C92                     	if	0	;tblptru may be non-zero
  8832  000C92                     	endif
  8833  000C92  0008               	tblrd		*
  8834  000C94  CFF5 F020          	movff	tablat,i2printf@c
  8835  000C98  5020               	movf	i2printf@c,w,c
  8836                           
  8837                           ; Switch size 1, requested type "space"
  8838                           ; Number of cases is 5, Range of values is 0 to 120
  8839                           ; switch strategies available:
  8840                           ; Name         Instructions Cycles
  8841                           ; simple_byte           16     9 (average)
  8842                           ;	Chosen strategy is simple_byte
  8843  000C9A  0A00               	xorlw	0	; case 0
  8844  000C9C  B4D8               	btfsc	status,2,c
  8845  000C9E  0012               	return	
  8846  000CA0  0A64               	xorlw	100	; case 100
  8847  000CA2  B4D8               	btfsc	status,2,c
  8848  000CA4  D00A               	goto	i2l4648
  8849  000CA6  0A0D               	xorlw	13	; case 105
  8850  000CA8  B4D8               	btfsc	status,2,c
  8851  000CAA  D007               	goto	i2l4648
  8852  000CAC  0A1C               	xorlw	28	; case 117
  8853  000CAE  B4D8               	btfsc	status,2,c
  8854  000CB0  D7E7               	goto	i2l4642
  8855  000CB2  0A0D               	xorlw	13	; case 120
  8856  000CB4  B4D8               	btfsc	status,2,c
  8857  000CB6  D7E2               	goto	i2l4640
  8858  000CB8  D10D               	goto	i2l4746
  8859  000CBA                     i2l4648:
  8860                           
  8861                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8862  000CBA  C01D  F013         	movff	i2printf@flag,??i2_printf
  8863  000CBE  0EC0               	movlw	192
  8864  000CC0  1613               	andwf	??i2_printf,f,c
  8865  000CC2  A4D8               	btfss	status,2,c
  8866  000CC4  D015               	goto	i2l4660
  8867                           
  8868                           ;doprnt.c: 1253: {
  8869                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8870  000CC6  C018  FFD9         	movff	i2printf@ap,fsr2l
  8871  000CCA  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8872  000CCE  CFDE F01B          	movff	postinc2,i2printf@val
  8873  000CD2  CFDD F01C          	movff	postdec2,i2printf@val+1
  8874  000CD6  0E02               	movlw	2
  8875  000CD8  2618               	addwf	i2printf@ap,f,c
  8876  000CDA  0E00               	movlw	0
  8877  000CDC  2219               	addwfc	i2printf@ap+1,f,c
  8878                           
  8879                           ;doprnt.c: 1261: if((int)val < 0) {
  8880  000CDE  AE1C               	btfss	i2printf@val+1,7,c
  8881  000CE0  D044               	goto	i2l4694
  8882                           
  8883                           ;doprnt.c: 1262: flag |= 0x03;
  8884  000CE2  0E03               	movlw	3
  8885  000CE4  121D               	iorwf	i2printf@flag,f,c
  8886                           
  8887                           ;doprnt.c: 1263: val = -val;
  8888  000CE6  6C1B               	negf	i2printf@val,c
  8889  000CE8  1E1C               	comf	i2printf@val+1,f,c
  8890  000CEA  B0D8               	btfsc	status,0,c
  8891  000CEC  2A1C               	incf	i2printf@val+1,f,c
  8892                           
  8893                           ;doprnt.c: 1264: }
  8894                           ;doprnt.c: 1266: }
  8895  000CEE  D03D               	goto	i2l4694
  8896  000CF0                     i2l4660:
  8897                           
  8898                           ;doprnt.c: 1268: else
  8899                           ;doprnt.c: 1273: {
  8900                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8901  000CF0  C018  FFD9         	movff	i2printf@ap,fsr2l
  8902  000CF4  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  8903  000CF8  CFDE F01B          	movff	postinc2,i2printf@val
  8904  000CFC  CFDD F01C          	movff	postdec2,i2printf@val+1
  8905  000D00  0E02               	movlw	2
  8906  000D02  2618               	addwf	i2printf@ap,f,c
  8907  000D04  0E00               	movlw	0
  8908  000D06  2219               	addwfc	i2printf@ap+1,f,c
  8909                           
  8910                           ;doprnt.c: 1287: }
  8911                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8912  000D08  D030               	goto	i2l4694
  8913  000D0A                     i2l4664:
  8914                           
  8915                           ;doprnt.c: 1302: case 0xC0:
  8916                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8917  000D0A  0E01               	movlw	1
  8918  000D0C  6E20               	movwf	i2printf@c,c
  8919  000D0E                     i2l4666:
  8920  000D0E  0E05               	movlw	5
  8921  000D10  1820               	xorwf	i2printf@c,w,c
  8922  000D12  B4D8               	btfsc	status,2,c
  8923  000D14  D035               	goto	i2l4696
  8924                           
  8925                           ;doprnt.c: 1306: if(val < dpowers[c])
  8926  000D16  5020               	movf	i2printf@c,w,c
  8927  000D18  0D02               	mullw	2
  8928  000D1A  0E48               	movlw	low _dpowers
  8929  000D1C  24F3               	addwf	prodl,w,c
  8930  000D1E  6EF6               	movwf	tblptrl,c
  8931  000D20  0EFE               	movlw	high _dpowers
  8932  000D22  20F4               	addwfc	prodh,w,c
  8933  000D24  6EF7               	movwf	tblptrh,c
  8934  000D26                     	if	0	;There are less than 3 active tblptr bytes
  8935  000D26                     	endif
  8936  000D26  0009               	tblrd		*+
  8937  000D28  50F5               	movf	tablat,w,c
  8938  000D2A  5C1B               	subwf	i2printf@val,w,c
  8939  000D2C  0009               	tblrd		*+
  8940  000D2E  50F5               	movf	tablat,w,c
  8941  000D30  581C               	subwfb	i2printf@val+1,w,c
  8942  000D32  A0D8               	btfss	status,0,c
  8943  000D34  D025               	goto	i2l4696
  8944                           
  8945                           ;doprnt.c: 1307: break;
  8946  000D36  2A20               	incf	i2printf@c,f,c
  8947  000D38  D7EA               	goto	i2l4666
  8948  000D3A                     i2l4678:
  8949                           
  8950                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8951  000D3A  0E01               	movlw	1
  8952  000D3C  6E20               	movwf	i2printf@c,c
  8953  000D3E                     i2l4680:
  8954  000D3E  0E04               	movlw	4
  8955  000D40  1820               	xorwf	i2printf@c,w,c
  8956  000D42  B4D8               	btfsc	status,2,c
  8957  000D44  D01D               	goto	i2l4696
  8958                           
  8959                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8960  000D46  5020               	movf	i2printf@c,w,c
  8961  000D48  0D02               	mullw	2
  8962  000D4A  0E52               	movlw	low _hexpowers
  8963  000D4C  24F3               	addwf	prodl,w,c
  8964  000D4E  6EF6               	movwf	tblptrl,c
  8965  000D50  0EFE               	movlw	high _hexpowers
  8966  000D52  20F4               	addwfc	prodh,w,c
  8967  000D54  6EF7               	movwf	tblptrh,c
  8968  000D56                     	if	0	;There are less than 3 active tblptr bytes
  8969  000D56                     	endif
  8970  000D56  0009               	tblrd		*+
  8971  000D58  50F5               	movf	tablat,w,c
  8972  000D5A  5C1B               	subwf	i2printf@val,w,c
  8973  000D5C  0009               	tblrd		*+
  8974  000D5E  50F5               	movf	tablat,w,c
  8975  000D60  581C               	subwfb	i2printf@val+1,w,c
  8976  000D62  A0D8               	btfss	status,0,c
  8977  000D64  D00D               	goto	i2l4696
  8978                           
  8979                           ;doprnt.c: 1318: break;
  8980  000D66  2A20               	incf	i2printf@c,f,c
  8981  000D68  D7EA               	goto	i2l4680
  8982  000D6A                     i2l4694:
  8983  000D6A  501D               	movf	i2printf@flag,w,c
  8984  000D6C  0BC0               	andlw	192
  8985                           
  8986                           ; Switch size 1, requested type "space"
  8987                           ; Number of cases is 3, Range of values is 0 to 192
  8988                           ; switch strategies available:
  8989                           ; Name         Instructions Cycles
  8990                           ; simple_byte           10     6 (average)
  8991                           ;	Chosen strategy is simple_byte
  8992  000D6E  0A00               	xorlw	0	; case 0
  8993  000D70  B4D8               	btfsc	status,2,c
  8994  000D72  D7CB               	goto	i2l4664
  8995  000D74  0A80               	xorlw	128	; case 128
  8996  000D76  B4D8               	btfsc	status,2,c
  8997  000D78  D7E0               	goto	i2l4678
  8998  000D7A  0A40               	xorlw	64	; case 192
  8999  000D7C  B4D8               	btfsc	status,2,c
  9000  000D7E  D7C5               	goto	i2l4664
  9001  000D80                     i2l4696:
  9002                           
  9003                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9004  000D80  501E               	movf	i2printf@width,w,c
  9005  000D82  101F               	iorwf	i2printf@width+1,w,c
  9006  000D84  B4D8               	btfsc	status,2,c
  9007  000D86  D009               	goto	i2l4702
  9008  000D88  C01D  F013         	movff	i2printf@flag,??i2_printf
  9009  000D8C  0E03               	movlw	3
  9010  000D8E  1613               	andwf	??i2_printf,f,c
  9011  000D90  B4D8               	btfsc	status,2,c
  9012  000D92  D003               	goto	i2l4702
  9013                           
  9014                           ;doprnt.c: 1346: width--;
  9015  000D94  061E               	decf	i2printf@width,f,c
  9016  000D96  A0D8               	btfss	status,0,c
  9017  000D98  061F               	decf	i2printf@width+1,f,c
  9018  000D9A                     i2l4702:
  9019                           
  9020                           ;doprnt.c: 1381: if(width > c)
  9021  000D9A  0E80               	movlw	128
  9022  000D9C  BE20               	btfsc	i2printf@c,7,c
  9023  000D9E  0E7F               	movlw	127
  9024  000DA0  6E13               	movwf	??i2_printf& (0+255),c
  9025  000DA2  501E               	movf	i2printf@width,w,c
  9026  000DA4  5C20               	subwf	i2printf@c,w,c
  9027  000DA6  501F               	movf	i2printf@width+1,w,c
  9028  000DA8  0A80               	xorlw	128
  9029  000DAA  5813               	subwfb	??i2_printf& (0+255),w,c
  9030  000DAC  B0D8               	btfsc	status,0,c
  9031  000DAE  D007               	goto	i2l4706
  9032                           
  9033                           ;doprnt.c: 1382: width -= c;
  9034  000DB0  5020               	movf	i2printf@c,w,c
  9035  000DB2  5E1E               	subwf	i2printf@width,f,c
  9036  000DB4  0E00               	movlw	0
  9037  000DB6  BE20               	btfsc	i2printf@c,7,c
  9038  000DB8  0EFF               	movlw	255
  9039  000DBA  5A1F               	subwfb	i2printf@width+1,f,c
  9040  000DBC  D004               	goto	i2l4708
  9041  000DBE                     i2l4706:
  9042                           
  9043                           ;doprnt.c: 1383: else
  9044                           ;doprnt.c: 1384: width = 0;
  9045  000DBE  0E00               	movlw	0
  9046  000DC0  6E1F               	movwf	i2printf@width+1,c
  9047  000DC2  0E00               	movlw	0
  9048  000DC4  6E1E               	movwf	i2printf@width,c
  9049  000DC6                     i2l4708:
  9050                           
  9051                           ;doprnt.c: 1387: if(flag & 0x04) {
  9052  000DC6  A41D               	btfss	i2printf@flag,2,c
  9053  000DC8  D014               	goto	i2l4720
  9054                           
  9055                           ;doprnt.c: 1392: if(flag & 0x03)
  9056  000DCA  C01D  F013         	movff	i2printf@flag,??i2_printf
  9057  000DCE  0E03               	movlw	3
  9058  000DD0  1613               	andwf	??i2_printf,f,c
  9059  000DD2  B4D8               	btfsc	status,2,c
  9060  000DD4  D003               	goto	i2l4714
  9061                           
  9062                           ;doprnt.c: 1393: (putch('-') );
  9063  000DD6  0E2D               	movlw	45
  9064  000DD8  EC75  F018         	call	i2_putch
  9065  000DDC                     i2l4714:
  9066                           
  9067                           ;doprnt.c: 1415: if(width)
  9068  000DDC  501E               	movf	i2printf@width,w,c
  9069  000DDE  101F               	iorwf	i2printf@width+1,w,c
  9070  000DE0  B4D8               	btfsc	status,2,c
  9071  000DE2  D01E               	goto	i2l4730
  9072                           
  9073                           ;doprnt.c: 1417: (putch('0') );
  9074                           
  9075                           ;doprnt.c: 1416: do
  9076  000DE4  0E30               	movlw	48
  9077  000DE6  EC75  F018         	call	i2_putch
  9078                           
  9079                           ;doprnt.c: 1418: while(--width);
  9080  000DEA  061E               	decf	i2printf@width,f,c
  9081  000DEC  A0D8               	btfss	status,0,c
  9082  000DEE  061F               	decf	i2printf@width+1,f,c
  9083  000DF0  D7F5               	goto	i2l4714
  9084  000DF2                     i2l4720:
  9085                           
  9086                           ;doprnt.c: 1422: {
  9087                           ;doprnt.c: 1424: if(width
  9088                           ;doprnt.c: 1428: )
  9089  000DF2  501E               	movf	i2printf@width,w,c
  9090  000DF4  101F               	iorwf	i2printf@width+1,w,c
  9091  000DF6  B4D8               	btfsc	status,2,c
  9092  000DF8  D00A               	goto	i2l4726
  9093  000DFA                     i2l4722:
  9094                           
  9095                           ;doprnt.c: 1430: (putch(' ') );
  9096  000DFA  0E20               	movlw	32
  9097  000DFC  EC75  F018         	call	i2_putch
  9098                           
  9099                           ;doprnt.c: 1431: while(--width);
  9100  000E00  061E               	decf	i2printf@width,f,c
  9101  000E02  A0D8               	btfss	status,0,c
  9102  000E04  061F               	decf	i2printf@width+1,f,c
  9103  000E06  501E               	movf	i2printf@width,w,c
  9104  000E08  101F               	iorwf	i2printf@width+1,w,c
  9105  000E0A  A4D8               	btfss	status,2,c
  9106  000E0C  D7F6               	goto	i2l4722
  9107  000E0E                     i2l4726:
  9108                           
  9109                           ;doprnt.c: 1438: if(flag & 0x03)
  9110  000E0E  C01D  F013         	movff	i2printf@flag,??i2_printf
  9111  000E12  0E03               	movlw	3
  9112  000E14  1613               	andwf	??i2_printf,f,c
  9113  000E16  B4D8               	btfsc	status,2,c
  9114  000E18  D003               	goto	i2l4730
  9115                           
  9116                           ;doprnt.c: 1439: (putch('-') );
  9117  000E1A  0E2D               	movlw	45
  9118  000E1C  EC75  F018         	call	i2_putch
  9119  000E20                     i2l4730:
  9120                           
  9121                           ;doprnt.c: 1469: }
  9122                           ;doprnt.c: 1472: prec = c;
  9123  000E20  C020  F01A         	movff	i2printf@c,i2printf@prec
  9124                           
  9125                           ;doprnt.c: 1474: while(prec--) {
  9126  000E24  D053               	goto	i2l4744
  9127  000E26                     i2l4732:
  9128                           
  9129                           ;doprnt.c: 1486: case 0xC0:
  9130                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9131  000E26  501A               	movf	i2printf@prec,w,c
  9132  000E28  0D02               	mullw	2
  9133  000E2A  0E48               	movlw	low _dpowers
  9134  000E2C  24F3               	addwf	prodl,w,c
  9135  000E2E  6EF6               	movwf	tblptrl,c
  9136  000E30  0EFE               	movlw	high _dpowers
  9137  000E32  20F4               	addwfc	prodh,w,c
  9138  000E34  6EF7               	movwf	tblptrh,c
  9139  000E36                     	if	0	;There are less than 3 active tblptr bytes
  9140  000E36                     	endif
  9141  000E36  0009               	tblrd		*+
  9142  000E38  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9143  000E3C  000A               	tblrd		*-
  9144  000E3E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9145  000E42  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9146  000E46  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9147  000E4A  EC76  F016         	call	i2___lwdiv	;wreg free
  9148  000E4E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9149  000E52  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9150  000E56  0E00               	movlw	0
  9151  000E58  6E0B               	movwf	i2___lwmod@divisor+1,c
  9152  000E5A  0E0A               	movlw	10
  9153  000E5C  6E0A               	movwf	i2___lwmod@divisor,c
  9154  000E5E  EC10  F017         	call	i2___lwmod	;wreg free
  9155  000E62  5008               	movf	?i2___lwmod,w,c
  9156  000E64  0F30               	addlw	48
  9157  000E66  6E20               	movwf	i2printf@c,c
  9158                           
  9159                           ;doprnt.c: 1491: break;
  9160  000E68  D02E               	goto	i2l4742
  9161  000E6A                     i2l4734:
  9162                           
  9163                           ;doprnt.c: 1499: {
  9164                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9165  000E6A  C01B  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9166  000E6E  C01C  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9167  000E72  501A               	movf	i2printf@prec,w,c
  9168  000E74  0D02               	mullw	2
  9169  000E76  0E52               	movlw	low _hexpowers
  9170  000E78  24F3               	addwf	prodl,w,c
  9171  000E7A  6EF6               	movwf	tblptrl,c
  9172  000E7C  0EFE               	movlw	high _hexpowers
  9173  000E7E  20F4               	addwfc	prodh,w,c
  9174  000E80  6EF7               	movwf	tblptrh,c
  9175  000E82                     	if	0	;There are less than 3 active tblptr bytes
  9176  000E82                     	endif
  9177  000E82  0009               	tblrd		*+
  9178  000E84  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9179  000E88  000A               	tblrd		*-
  9180  000E8A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9181  000E8E  EC76  F016         	call	i2___lwdiv	;wreg free
  9182  000E92  5001               	movf	?i2___lwdiv,w,c
  9183  000E94  0B0F               	andlw	15
  9184  000E96  6E17               	movwf	i2printf@idx,c
  9185                           
  9186                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9187  000E98  5017               	movf	i2printf@idx,w,c
  9188  000E9A  0D01               	mullw	1
  9189  000E9C  0E21               	movlw	low STR_22
  9190  000E9E  24F3               	addwf	prodl,w,c
  9191  000EA0  6EF6               	movwf	tblptrl,c
  9192  000EA2  0EFF               	movlw	high STR_22
  9193  000EA4  20F4               	addwfc	prodh,w,c
  9194  000EA6  6EF7               	movwf	tblptrh,c
  9195  000EA8                     	if	0	;There are less than 3 active tblptr bytes
  9196  000EA8                     	endif
  9197  000EA8  0008               	tblrd		*
  9198  000EAA  CFF5 F020          	movff	tablat,i2printf@c
  9199                           
  9200                           ;doprnt.c: 1523: }
  9201                           
  9202                           ;doprnt.c: 1508: }
  9203                           ;doprnt.c: 1510: break;
  9204  000EAE  D00B               	goto	i2l4742
  9205  000EB0                     i2l4740:
  9206  000EB0  501D               	movf	i2printf@flag,w,c
  9207  000EB2  0BC0               	andlw	192
  9208                           
  9209                           ; Switch size 1, requested type "space"
  9210                           ; Number of cases is 3, Range of values is 0 to 192
  9211                           ; switch strategies available:
  9212                           ; Name         Instructions Cycles
  9213                           ; simple_byte           10     6 (average)
  9214                           ;	Chosen strategy is simple_byte
  9215  000EB4  0A00               	xorlw	0	; case 0
  9216  000EB6  B4D8               	btfsc	status,2,c
  9217  000EB8  D7B6               	goto	i2l4732
  9218  000EBA  0A80               	xorlw	128	; case 128
  9219  000EBC  B4D8               	btfsc	status,2,c
  9220  000EBE  D7D5               	goto	i2l4734
  9221  000EC0  0A40               	xorlw	64	; case 192
  9222  000EC2  B4D8               	btfsc	status,2,c
  9223  000EC4  D7B0               	goto	i2l4732
  9224  000EC6                     i2l4742:
  9225                           
  9226                           ;doprnt.c: 1524: (putch(c) );
  9227  000EC6  5020               	movf	i2printf@c,w,c
  9228  000EC8  EC75  F018         	call	i2_putch
  9229  000ECC                     i2l4744:
  9230  000ECC  061A               	decf	i2printf@prec,f,c
  9231  000ECE  281A               	incf	i2printf@prec,w,c
  9232  000ED0  A4D8               	btfss	status,2,c
  9233  000ED2  D7EE               	goto	i2l4740
  9234  000ED4                     i2l4746:
  9235  000ED4  C00D  FFF6         	movff	i2printf@f,tblptrl
  9236  000ED8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9237  000EDC  4A0D               	infsnz	i2printf@f,f,c
  9238  000EDE  2A0E               	incf	i2printf@f+1,f,c
  9239  000EE0                     	if	0	;tblptru may be non-zero
  9240  000EE0                     	endif
  9241  000EE0                     	if	0	;tblptru may be non-zero
  9242  000EE0                     	endif
  9243  000EE0  0008               	tblrd		*
  9244  000EE2  CFF5 F020          	movff	tablat,i2printf@c
  9245  000EE6  5020               	movf	i2printf@c,w,c
  9246  000EE8  B4D8               	btfsc	status,2,c
  9247  000EEA  0012               	return	
  9248  000EEC  D66F               	goto	i2l4616
  9249  000EEE                     __end_ofi2_printf:
  9250                           	opt stack 0
  9251                           pclatu	equ	0xFFB
  9252                           pclath	equ	0xFFA
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           intcon	equ	0xFF2
  9260                           intcon2	equ	0xFF1
  9261                           intcon3	equ	0xFF0
  9262                           postinc0	equ	0xFEE
  9263                           fsr0h	equ	0xFEA
  9264                           fsr0l	equ	0xFE9
  9265                           wreg	equ	0xFE8
  9266                           postinc1	equ	0xFE6
  9267                           postdec1	equ	0xFE5
  9268                           fsr1h	equ	0xFE2
  9269                           fsr1l	equ	0xFE1
  9270                           indf2	equ	0xFDF
  9271                           postinc2	equ	0xFDE
  9272                           postdec2	equ	0xFDD
  9273                           fsr2h	equ	0xFDA
  9274                           fsr2l	equ	0xFD9
  9275                           status	equ	0xFD8
  9276                           
  9277 ;; *************** function i2_putch *****************
  9278 ;; Defined at:
  9279 ;;		line 31 in file "lcd.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  data            1    wreg     unsigned char 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  data            1    2[COMRAM] unsigned char 
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  1    wreg      void 
  9286 ;; Registers used:
  9287 ;;		wreg, status,2, status,0, cstack
  9288 ;; Tracked objects:
  9289 ;;		On entry : 0/0
  9290 ;;		On exit  : 0/0
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;Total ram usage:        1 bytes
  9298 ;; Hardware stack levels used:    1
  9299 ;; Hardware stack levels required when called:    1
  9300 ;; This function calls:
  9301 ;;		i2_lcdNibble
  9302 ;; This function is called by:
  9303 ;;		i2_printf
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           	psect	text37
  9308  0030EA                     __ptext37:
  9309                           	opt stack 0
  9310  0030EA                     i2_putch:
  9311                           	opt stack 23
  9312                           
  9313                           ;incstack = 0
  9314                           ;i2putch@data stored from wreg
  9315  0030EA  6E03               	movwf	i2putch@data,c
  9316                           
  9317                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9318  0030EC  848C               	bsf	3980,2,c	;volatile
  9319                           
  9320                           ;lcd.c: 33: lcdNibble(data);
  9321  0030EE  5003               	movf	i2putch@data,w,c
  9322  0030F0  ECC7  F016         	call	i2_lcdNibble
  9323  0030F4  0012               	return		;funcret
  9324  0030F6                     __end_ofi2_putch:
  9325                           	opt stack 0
  9326                           pclatu	equ	0xFFB
  9327                           pclath	equ	0xFFA
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           intcon2	equ	0xFF1
  9336                           intcon3	equ	0xFF0
  9337                           postinc0	equ	0xFEE
  9338                           fsr0h	equ	0xFEA
  9339                           fsr0l	equ	0xFE9
  9340                           wreg	equ	0xFE8
  9341                           postinc1	equ	0xFE6
  9342                           postdec1	equ	0xFE5
  9343                           fsr1h	equ	0xFE2
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           fsr2h	equ	0xFDA
  9349                           fsr2l	equ	0xFD9
  9350                           status	equ	0xFD8
  9351                           
  9352 ;; *************** function i2_isdigit *****************
  9353 ;; Defined at:
  9354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  c               1    wreg     unsigned char 
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;  c               1    2[COMRAM] unsigned char 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;		None               void
  9361 ;; Registers used:
  9362 ;;		wreg, status,2, status,0
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;Total ram usage:        3 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		i2_printf
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           	psect	text38
  9382  00306E                     __ptext38:
  9383                           	opt stack 0
  9384  00306E                     i2_isdigit:
  9385                           	opt stack 24
  9386                           
  9387                           ;incstack = 0
  9388                           ;i2isdigit@c stored from wreg
  9389  00306E  6E03               	movwf	i2isdigit@c,c
  9390  003070  0E00               	movlw	0
  9391  003072  6E02               	movwf	i2_isdigit$806,c
  9392  003074  0E3A               	movlw	58
  9393  003076  6003               	cpfslt	i2isdigit@c,c
  9394  003078  D005               	goto	i2l4222
  9395  00307A  0E2F               	movlw	47
  9396  00307C  6403               	cpfsgt	i2isdigit@c,c
  9397  00307E  D002               	goto	i2l4222
  9398  003080  0E01               	movlw	1
  9399  003082  6E02               	movwf	i2_isdigit$806,c
  9400  003084                     i2l4222:
  9401  003084  C002  F001         	movff	i2_isdigit$806,??i2_isdigit
  9402  003088  3001               	rrcf	??i2_isdigit,w,c
  9403  00308A  0012               	return	
  9404  00308C                     __end_ofi2_isdigit:
  9405                           	opt stack 0
  9406                           pclatu	equ	0xFFB
  9407                           pclath	equ	0xFFA
  9408                           tblptru	equ	0xFF8
  9409                           tblptrh	equ	0xFF7
  9410                           tblptrl	equ	0xFF6
  9411                           tablat	equ	0xFF5
  9412                           prodh	equ	0xFF4
  9413                           prodl	equ	0xFF3
  9414                           intcon	equ	0xFF2
  9415                           intcon2	equ	0xFF1
  9416                           intcon3	equ	0xFF0
  9417                           postinc0	equ	0xFEE
  9418                           fsr0h	equ	0xFEA
  9419                           fsr0l	equ	0xFE9
  9420                           wreg	equ	0xFE8
  9421                           postinc1	equ	0xFE6
  9422                           postdec1	equ	0xFE5
  9423                           fsr1h	equ	0xFE2
  9424                           fsr1l	equ	0xFE1
  9425                           indf2	equ	0xFDF
  9426                           postinc2	equ	0xFDE
  9427                           postdec2	equ	0xFDD
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function i2___lwmod *****************
  9433 ;; Defined at:
  9434 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  dividend        2    7[COMRAM] unsigned int 
  9437 ;;  divisor         2    9[COMRAM] unsigned int 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  2    7[COMRAM] unsigned int 
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;Total ram usage:        5 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		i2_printf
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text39
  9463  002E20                     __ptext39:
  9464                           	opt stack 0
  9465  002E20                     i2___lwmod:
  9466                           	opt stack 24
  9467                           
  9468                           ;incstack = 0
  9469  002E20  500A               	movf	i2___lwmod@divisor,w,c
  9470  002E22  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9471  002E24  B4D8               	btfsc	status,2,c
  9472  002E26  D018               	goto	i2l886
  9473  002E28  0E01               	movlw	1
  9474  002E2A  6E0C               	movwf	i2___lwmod@counter,c
  9475  002E2C  D004               	goto	i2l4254
  9476  002E2E                     i2l4252:
  9477  002E2E  90D8               	bcf	status,0,c
  9478  002E30  360A               	rlcf	i2___lwmod@divisor,f,c
  9479  002E32  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9480  002E34  2A0C               	incf	i2___lwmod@counter,f,c
  9481  002E36                     i2l4254:
  9482  002E36  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9483  002E38  D7FA               	goto	i2l4252
  9484  002E3A                     i2l4256:
  9485  002E3A  500A               	movf	i2___lwmod@divisor,w,c
  9486  002E3C  5C08               	subwf	i2___lwmod@dividend,w,c
  9487  002E3E  500B               	movf	i2___lwmod@divisor+1,w,c
  9488  002E40  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9489  002E42  A0D8               	btfss	status,0,c
  9490  002E44  D004               	goto	i2l4260
  9491  002E46  500A               	movf	i2___lwmod@divisor,w,c
  9492  002E48  5E08               	subwf	i2___lwmod@dividend,f,c
  9493  002E4A  500B               	movf	i2___lwmod@divisor+1,w,c
  9494  002E4C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9495  002E4E                     i2l4260:
  9496  002E4E  90D8               	bcf	status,0,c
  9497  002E50  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9498  002E52  320A               	rrcf	i2___lwmod@divisor,f,c
  9499  002E54  2E0C               	decfsz	i2___lwmod@counter,f,c
  9500  002E56  D7F1               	goto	i2l4256
  9501  002E58                     i2l886:
  9502  002E58  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9503  002E5C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9504  002E60  0012               	return		;funcret
  9505  002E62                     __end_ofi2___lwmod:
  9506                           	opt stack 0
  9507                           pclatu	equ	0xFFB
  9508                           pclath	equ	0xFFA
  9509                           tblptru	equ	0xFF8
  9510                           tblptrh	equ	0xFF7
  9511                           tblptrl	equ	0xFF6
  9512                           tablat	equ	0xFF5
  9513                           prodh	equ	0xFF4
  9514                           prodl	equ	0xFF3
  9515                           intcon	equ	0xFF2
  9516                           intcon2	equ	0xFF1
  9517                           intcon3	equ	0xFF0
  9518                           postinc0	equ	0xFEE
  9519                           fsr0h	equ	0xFEA
  9520                           fsr0l	equ	0xFE9
  9521                           wreg	equ	0xFE8
  9522                           postinc1	equ	0xFE6
  9523                           postdec1	equ	0xFE5
  9524                           fsr1h	equ	0xFE2
  9525                           fsr1l	equ	0xFE1
  9526                           indf2	equ	0xFDF
  9527                           postinc2	equ	0xFDE
  9528                           postdec2	equ	0xFDD
  9529                           fsr2h	equ	0xFDA
  9530                           fsr2l	equ	0xFD9
  9531                           status	equ	0xFD8
  9532                           
  9533 ;; *************** function i2___lwdiv *****************
  9534 ;; Defined at:
  9535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;  dividend        2    0[COMRAM] unsigned int 
  9538 ;;  divisor         2    2[COMRAM] unsigned int 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9541 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  2    0[COMRAM] unsigned int 
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;Total ram usage:        7 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; This function calls:
  9558 ;;		Nothing
  9559 ;; This function is called by:
  9560 ;;		i2_printf
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text40
  9565  002CEC                     __ptext40:
  9566                           	opt stack 0
  9567  002CEC                     i2___lwdiv:
  9568                           	opt stack 24
  9569                           
  9570                           ;incstack = 0
  9571  002CEC  0E00               	movlw	0
  9572  002CEE  6E06               	movwf	i2___lwdiv@quotient+1,c
  9573  002CF0  0E00               	movlw	0
  9574  002CF2  6E05               	movwf	i2___lwdiv@quotient,c
  9575  002CF4  5003               	movf	i2___lwdiv@divisor,w,c
  9576  002CF6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9577  002CF8  B4D8               	btfsc	status,2,c
  9578  002CFA  D01C               	goto	i2l876
  9579  002CFC  0E01               	movlw	1
  9580  002CFE  6E07               	movwf	i2___lwdiv@counter,c
  9581  002D00  D004               	goto	i2l4234
  9582  002D02                     i2l4232:
  9583  002D02  90D8               	bcf	status,0,c
  9584  002D04  3603               	rlcf	i2___lwdiv@divisor,f,c
  9585  002D06  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9586  002D08  2A07               	incf	i2___lwdiv@counter,f,c
  9587  002D0A                     i2l4234:
  9588  002D0A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9589  002D0C  D7FA               	goto	i2l4232
  9590  002D0E                     i2l4236:
  9591  002D0E  90D8               	bcf	status,0,c
  9592  002D10  3605               	rlcf	i2___lwdiv@quotient,f,c
  9593  002D12  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9594  002D14  5003               	movf	i2___lwdiv@divisor,w,c
  9595  002D16  5C01               	subwf	i2___lwdiv@dividend,w,c
  9596  002D18  5004               	movf	i2___lwdiv@divisor+1,w,c
  9597  002D1A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9598  002D1C  A0D8               	btfss	status,0,c
  9599  002D1E  D005               	goto	i2l4244
  9600  002D20  5003               	movf	i2___lwdiv@divisor,w,c
  9601  002D22  5E01               	subwf	i2___lwdiv@dividend,f,c
  9602  002D24  5004               	movf	i2___lwdiv@divisor+1,w,c
  9603  002D26  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9604  002D28  8005               	bsf	i2___lwdiv@quotient,0,c
  9605  002D2A                     i2l4244:
  9606  002D2A  90D8               	bcf	status,0,c
  9607  002D2C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9608  002D2E  3203               	rrcf	i2___lwdiv@divisor,f,c
  9609  002D30  2E07               	decfsz	i2___lwdiv@counter,f,c
  9610  002D32  D7ED               	goto	i2l4236
  9611  002D34                     i2l876:
  9612  002D34  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9613  002D38  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9614  002D3C  0012               	return		;funcret
  9615  002D3E                     __end_ofi2___lwdiv:
  9616                           	opt stack 0
  9617                           pclatu	equ	0xFFB
  9618                           pclath	equ	0xFFA
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           intcon2	equ	0xFF1
  9627                           intcon3	equ	0xFF0
  9628                           postinc0	equ	0xFEE
  9629                           fsr0h	equ	0xFEA
  9630                           fsr0l	equ	0xFE9
  9631                           wreg	equ	0xFE8
  9632                           postinc1	equ	0xFE6
  9633                           postdec1	equ	0xFE5
  9634                           fsr1h	equ	0xFE2
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           fsr2h	equ	0xFDA
  9640                           fsr2l	equ	0xFD9
  9641                           status	equ	0xFD8
  9642                           
  9643 ;; *************** function i2_lcdInst *****************
  9644 ;; Defined at:
  9645 ;;		line 26 in file "lcd.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;  data            1    wreg     unsigned char 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  data            1    2[COMRAM] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      void 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;Total ram usage:        1 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    1
  9666 ;; This function calls:
  9667 ;;		i2_lcdNibble
  9668 ;; This function is called by:
  9669 ;;		_isr
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text41
  9674  0030F6                     __ptext41:
  9675                           	opt stack 0
  9676  0030F6                     i2_lcdInst:
  9677                           	opt stack 24
  9678                           
  9679                           ;incstack = 0
  9680                           ;i2lcdInst@data stored from wreg
  9681  0030F6  6E03               	movwf	i2lcdInst@data,c
  9682                           
  9683                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  9684  0030F8  948C               	bcf	3980,2,c	;volatile
  9685                           
  9686                           ;lcd.c: 28: lcdNibble(data);
  9687  0030FA  5003               	movf	i2lcdInst@data,w,c
  9688  0030FC  ECC7  F016         	call	i2_lcdNibble
  9689  003100  0012               	return		;funcret
  9690  003102                     __end_ofi2_lcdInst:
  9691                           	opt stack 0
  9692                           pclatu	equ	0xFFB
  9693                           pclath	equ	0xFFA
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           intcon2	equ	0xFF1
  9702                           intcon3	equ	0xFF0
  9703                           postinc0	equ	0xFEE
  9704                           fsr0h	equ	0xFEA
  9705                           fsr0l	equ	0xFE9
  9706                           wreg	equ	0xFE8
  9707                           postinc1	equ	0xFE6
  9708                           postdec1	equ	0xFE5
  9709                           fsr1h	equ	0xFE2
  9710                           fsr1l	equ	0xFE1
  9711                           indf2	equ	0xFDF
  9712                           postinc2	equ	0xFDE
  9713                           postdec2	equ	0xFDD
  9714                           fsr2h	equ	0xFDA
  9715                           fsr2l	equ	0xFD9
  9716                           status	equ	0xFD8
  9717                           
  9718 ;; *************** function i2_lcdNibble *****************
  9719 ;; Defined at:
  9720 ;;		line 36 in file "lcd.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;  data            1    wreg     unsigned char 
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;  data            1    1[COMRAM] unsigned char 
  9725 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;                  1    wreg      void 
  9728 ;; Registers used:
  9729 ;;		wreg, status,2, status,0
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;Total ram usage:        2 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		i2_lcdInst
  9745 ;;		i2_putch
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           	psect	text42
  9750  002D8E                     __ptext42:
  9751                           	opt stack 0
  9752  002D8E                     i2_lcdNibble:
  9753                           	opt stack 23
  9754                           
  9755                           ;incstack = 0
  9756                           ;i2lcdNibble@data stored from wreg
  9757  002D8E  6E02               	movwf	i2lcdNibble@data,c
  9758                           
  9759                           ;lcd.c: 38: char temp = data & 0xF0;
  9760  002D90  5002               	movf	i2lcdNibble@data,w,c
  9761  002D92  0BF0               	andlw	240
  9762  002D94  6E01               	movwf	i2lcdNibble@temp,c
  9763                           
  9764                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9765  002D96  508C               	movf	3980,w,c	;volatile
  9766  002D98  0B0F               	andlw	15
  9767  002D9A  6E8C               	movwf	3980,c	;volatile
  9768                           
  9769                           ;lcd.c: 40: LATD = temp | LATD;
  9770  002D9C  5001               	movf	i2lcdNibble@temp,w,c
  9771  002D9E  108C               	iorwf	3980,w,c	;volatile
  9772  002DA0  6E8C               	movwf	3980,c	;volatile
  9773                           
  9774                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  9775  002DA2  968C               	bcf	3980,3,c	;volatile
  9776                           
  9777                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9778  002DA4  0E19               	movlw	25
  9779  002DA6                     i2u589_47:
  9780  002DA6  2EE8               	decfsz	wreg,f,c
  9781  002DA8  D7FE               	bra	i2u589_47
  9782                           
  9783                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  9784  002DAA  868C               	bsf	3980,3,c	;volatile
  9785                           
  9786                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9787  002DAC  0E19               	movlw	25
  9788  002DAE                     i2u590_47:
  9789  002DAE  2EE8               	decfsz	wreg,f,c
  9790  002DB0  D7FE               	bra	i2u590_47
  9791                           
  9792                           ;lcd.c: 47: data = data << 4;
  9793  002DB2  3802               	swapf	i2lcdNibble@data,w,c
  9794  002DB4  0BF0               	andlw	240
  9795  002DB6  6E02               	movwf	i2lcdNibble@data,c
  9796                           
  9797                           ;lcd.c: 49: temp = data & 0xF0;
  9798  002DB8  5002               	movf	i2lcdNibble@data,w,c
  9799  002DBA  0BF0               	andlw	240
  9800  002DBC  6E01               	movwf	i2lcdNibble@temp,c
  9801                           
  9802                           ;lcd.c: 50: LATD = LATD & 0x0F;
  9803  002DBE  508C               	movf	3980,w,c	;volatile
  9804  002DC0  0B0F               	andlw	15
  9805  002DC2  6E8C               	movwf	3980,c	;volatile
  9806                           
  9807                           ;lcd.c: 51: LATD = temp | LATD;
  9808  002DC4  5001               	movf	i2lcdNibble@temp,w,c
  9809  002DC6  108C               	iorwf	3980,w,c	;volatile
  9810  002DC8  6E8C               	movwf	3980,c	;volatile
  9811                           
  9812                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  9813  002DCA  968C               	bcf	3980,3,c	;volatile
  9814                           
  9815                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9816  002DCC  0E19               	movlw	25
  9817  002DCE                     i2u591_47:
  9818  002DCE  2EE8               	decfsz	wreg,f,c
  9819  002DD0  D7FE               	bra	i2u591_47
  9820                           
  9821                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  9822  002DD2  868C               	bsf	3980,3,c	;volatile
  9823                           
  9824                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9825  002DD4  0E19               	movlw	25
  9826  002DD6                     i2u592_47:
  9827  002DD6  2EE8               	decfsz	wreg,f,c
  9828  002DD8  D7FE               	bra	i2u592_47
  9829  002DDA  0012               	return		;funcret
  9830  002DDC                     __end_ofi2_lcdNibble:
  9831                           	opt stack 0
  9832                           pclatu	equ	0xFFB
  9833                           pclath	equ	0xFFA
  9834                           tblptru	equ	0xFF8
  9835                           tblptrh	equ	0xFF7
  9836                           tblptrl	equ	0xFF6
  9837                           tablat	equ	0xFF5
  9838                           prodh	equ	0xFF4
  9839                           prodl	equ	0xFF3
  9840                           intcon	equ	0xFF2
  9841                           intcon2	equ	0xFF1
  9842                           intcon3	equ	0xFF0
  9843                           postinc0	equ	0xFEE
  9844                           fsr0h	equ	0xFEA
  9845                           fsr0l	equ	0xFE9
  9846                           wreg	equ	0xFE8
  9847                           postinc1	equ	0xFE6
  9848                           postdec1	equ	0xFE5
  9849                           fsr1h	equ	0xFE2
  9850                           fsr1l	equ	0xFE1
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           fsr2h	equ	0xFDA
  9855                           fsr2l	equ	0xFD9
  9856                           status	equ	0xFD8
  9857                           
  9858 ;; *************** function _read_time *****************
  9859 ;; Defined at:
  9860 ;;		line 260 in file "main.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;		None
  9863 ;; Auto vars:     Size  Location     Type
  9864 ;;  i               1    3[COMRAM] unsigned char 
  9865 ;; Return value:  Size  Location     Type
  9866 ;;                  1    wreg      void 
  9867 ;; Registers used:
  9868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9869 ;; Tracked objects:
  9870 ;;		On entry : 0/0
  9871 ;;		On exit  : 0/0
  9872 ;;		Unchanged: 0/0
  9873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;Total ram usage:        1 bytes
  9879 ;; Hardware stack levels used:    1
  9880 ;; Hardware stack levels required when called:    2
  9881 ;; This function calls:
  9882 ;;		i2_I2C_Master_Read
  9883 ;;		i2_I2C_Master_Start
  9884 ;;		i2_I2C_Master_Stop
  9885 ;;		i2_I2C_Master_Write
  9886 ;; This function is called by:
  9887 ;;		_isr
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           	psect	text43
  9892  002AB0                     __ptext43:
  9893                           	opt stack 0
  9894  002AB0                     _read_time:
  9895                           	opt stack 23
  9896                           
  9897                           ;main.c: 262: I2C_Master_Start();
  9898                           
  9899                           ;incstack = 0
  9900  002AB0  EC97  F018         	call	i2_I2C_Master_Start	;wreg free
  9901                           
  9902                           ;main.c: 263: I2C_Master_Write(0b11010000);
  9903  002AB4  0E00               	movlw	0
  9904  002AB6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9905  002AB8  0ED0               	movlw	208
  9906  002ABA  6E02               	movwf	i2I2C_Master_Write@d,c
  9907  002ABC  EC86  F018         	call	i2_I2C_Master_Write	;wreg free
  9908                           
  9909                           ;main.c: 264: I2C_Master_Write(0x00);
  9910  002AC0  0E00               	movlw	0
  9911  002AC2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9912  002AC4  0E00               	movlw	0
  9913  002AC6  6E02               	movwf	i2I2C_Master_Write@d,c
  9914  002AC8  EC86  F018         	call	i2_I2C_Master_Write	;wreg free
  9915                           
  9916                           ;main.c: 265: I2C_Master_Stop();
  9917  002ACC  EC93  F018         	call	i2_I2C_Master_Stop	;wreg free
  9918                           
  9919                           ;main.c: 268: I2C_Master_Start();
  9920  002AD0  EC97  F018         	call	i2_I2C_Master_Start	;wreg free
  9921                           
  9922                           ;main.c: 269: I2C_Master_Write(0b11010001);
  9923  002AD4  0E00               	movlw	0
  9924  002AD6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9925  002AD8  0ED1               	movlw	209
  9926  002ADA  6E02               	movwf	i2I2C_Master_Write@d,c
  9927  002ADC  EC86  F018         	call	i2_I2C_Master_Write	;wreg free
  9928                           
  9929                           ;main.c: 270: for(unsigned char i=0;i<0x06;i++){
  9930  002AE0  0E00               	movlw	0
  9931  002AE2  6E04               	movwf	read_time@i,c
  9932  002AE4                     i2l4526:
  9933  002AE4  0E05               	movlw	5
  9934  002AE6  6404               	cpfsgt	read_time@i,c
  9935  002AE8  D001               	goto	i2l4530
  9936  002AEA  D00E               	goto	i2l4536
  9937  002AEC                     i2l4530:
  9938                           
  9939                           ;main.c: 271: time[i] = I2C_Master_Read(1);
  9940  002AEC  5004               	movf	read_time@i,w,c
  9941  002AEE  0D01               	mullw	1
  9942  002AF0  0E9A               	movlw	low _time
  9943  002AF2  24F3               	addwf	prodl,w,c
  9944  002AF4  6ED9               	movwf	fsr2l,c
  9945  002AF6  0E00               	movlw	high _time
  9946  002AF8  20F4               	addwfc	prodh,w,c
  9947  002AFA  6EDA               	movwf	fsr2h,c
  9948  002AFC  0E01               	movlw	1
  9949  002AFE  ECEE  F017         	call	i2_I2C_Master_Read
  9950  002B02  6EDF               	movwf	indf2,c
  9951  002B04  2A04               	incf	read_time@i,f,c
  9952  002B06  D7EE               	goto	i2l4526
  9953  002B08                     i2l4536:
  9954                           
  9955                           ;main.c: 272: }
  9956                           ;main.c: 273: time[6] = I2C_Master_Read(0);
  9957  002B08  0E00               	movlw	0
  9958  002B0A  ECEE  F017         	call	i2_I2C_Master_Read
  9959  002B0E  0100               	movlb	0	; () banked
  9960  002B10  6FA0               	movwf	(_time+6)& (0+255),b
  9961                           
  9962                           ;main.c: 274: I2C_Master_Stop();
  9963  002B12  EC93  F018         	call	i2_I2C_Master_Stop	;wreg free
  9964  002B16  0012               	return	
  9965  002B18                     __end_of_read_time:
  9966                           	opt stack 0
  9967                           pclatu	equ	0xFFB
  9968                           pclath	equ	0xFFA
  9969                           tblptru	equ	0xFF8
  9970                           tblptrh	equ	0xFF7
  9971                           tblptrl	equ	0xFF6
  9972                           tablat	equ	0xFF5
  9973                           prodh	equ	0xFF4
  9974                           prodl	equ	0xFF3
  9975                           intcon	equ	0xFF2
  9976                           intcon2	equ	0xFF1
  9977                           intcon3	equ	0xFF0
  9978                           postinc0	equ	0xFEE
  9979                           fsr0h	equ	0xFEA
  9980                           fsr0l	equ	0xFE9
  9981                           wreg	equ	0xFE8
  9982                           postinc1	equ	0xFE6
  9983                           postdec1	equ	0xFE5
  9984                           fsr1h	equ	0xFE2
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function i2_I2C_Master_Write *****************
  9994 ;; Defined at:
  9995 ;;		line 48 in file "I2C.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;  d               2    1[COMRAM] unsigned int 
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  1    wreg      void 
 10002 ;; Registers used:
 10003 ;;		wreg, status,2, status,0, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;Total ram usage:        2 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    1
 10016 ;; This function calls:
 10017 ;;		i2_I2C_Master_Wait
 10018 ;; This function is called by:
 10019 ;;		_read_time
 10020 ;;		i2_read_colorsensor
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           	psect	text44
 10025  00310C                     __ptext44:
 10026                           	opt stack 0
 10027  00310C                     i2_I2C_Master_Write:
 10028                           	opt stack 23
 10029                           
 10030                           ;I2C.c: 50: I2C_Master_Wait();
 10031                           
 10032                           ;incstack = 0
 10033  00310C  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10034                           
 10035                           ;I2C.c: 51: SSPBUF = d;
 10036  003110  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 10037  003114  0012               	return		;funcret
 10038  003116                     __end_ofi2_I2C_Master_Write:
 10039                           	opt stack 0
 10040                           pclatu	equ	0xFFB
 10041                           pclath	equ	0xFFA
 10042                           tblptru	equ	0xFF8
 10043                           tblptrh	equ	0xFF7
 10044                           tblptrl	equ	0xFF6
 10045                           tablat	equ	0xFF5
 10046                           prodh	equ	0xFF4
 10047                           prodl	equ	0xFF3
 10048                           intcon	equ	0xFF2
 10049                           intcon2	equ	0xFF1
 10050                           intcon3	equ	0xFF0
 10051                           postinc0	equ	0xFEE
 10052                           fsr0h	equ	0xFEA
 10053                           fsr0l	equ	0xFE9
 10054                           wreg	equ	0xFE8
 10055                           postinc1	equ	0xFE6
 10056                           postdec1	equ	0xFE5
 10057                           fsr1h	equ	0xFE2
 10058                           fsr1l	equ	0xFE1
 10059                           indf2	equ	0xFDF
 10060                           postinc2	equ	0xFDE
 10061                           postdec2	equ	0xFDD
 10062                           fsr2h	equ	0xFDA
 10063                           fsr2l	equ	0xFD9
 10064                           status	equ	0xFD8
 10065                           
 10066 ;; *************** function i2_I2C_Master_Stop *****************
 10067 ;; Defined at:
 10068 ;;		line 42 in file "I2C.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;		None
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  1    wreg      void 
 10075 ;; Registers used:
 10076 ;;		wreg, status,2, status,0, cstack
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;Total ram usage:        0 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    1
 10089 ;; This function calls:
 10090 ;;		i2_I2C_Master_Wait
 10091 ;; This function is called by:
 10092 ;;		_read_time
 10093 ;;		i2_read_colorsensor
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           	psect	text45
 10098  003126                     __ptext45:
 10099                           	opt stack 0
 10100  003126                     i2_I2C_Master_Stop:
 10101                           	opt stack 23
 10102                           
 10103                           ;I2C.c: 44: I2C_Master_Wait();
 10104                           
 10105                           ;incstack = 0
 10106  003126  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10107                           
 10108                           ;I2C.c: 45: PEN = 1;
 10109  00312A  84C5               	bsf	4037,2,c	;volatile
 10110  00312C  0012               	return		;funcret
 10111  00312E                     __end_ofi2_I2C_Master_Stop:
 10112                           	opt stack 0
 10113                           pclatu	equ	0xFFB
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           intcon2	equ	0xFF1
 10123                           intcon3	equ	0xFF0
 10124                           postinc0	equ	0xFEE
 10125                           fsr0h	equ	0xFEA
 10126                           fsr0l	equ	0xFE9
 10127                           wreg	equ	0xFE8
 10128                           postinc1	equ	0xFE6
 10129                           postdec1	equ	0xFE5
 10130                           fsr1h	equ	0xFE2
 10131                           fsr1l	equ	0xFE1
 10132                           indf2	equ	0xFDF
 10133                           postinc2	equ	0xFDE
 10134                           postdec2	equ	0xFDD
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function i2_I2C_Master_Start *****************
 10140 ;; Defined at:
 10141 ;;		line 30 in file "I2C.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;		None
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;		None
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      void 
 10148 ;; Registers used:
 10149 ;;		wreg, status,2, status,0, cstack
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;Total ram usage:        0 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:    1
 10162 ;; This function calls:
 10163 ;;		i2_I2C_Master_Wait
 10164 ;; This function is called by:
 10165 ;;		_read_time
 10166 ;;		i2_read_colorsensor
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           	psect	text46
 10171  00312E                     __ptext46:
 10172                           	opt stack 0
 10173  00312E                     i2_I2C_Master_Start:
 10174                           	opt stack 23
 10175                           
 10176                           ;I2C.c: 32: I2C_Master_Wait();
 10177                           
 10178                           ;incstack = 0
 10179  00312E  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10180                           
 10181                           ;I2C.c: 33: SEN = 1;
 10182  003132  80C5               	bsf	4037,0,c	;volatile
 10183  003134  0012               	return		;funcret
 10184  003136                     __end_ofi2_I2C_Master_Start:
 10185                           	opt stack 0
 10186                           pclatu	equ	0xFFB
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           intcon3	equ	0xFF0
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           postinc1	equ	0xFE6
 10202                           postdec1	equ	0xFE5
 10203                           fsr1h	equ	0xFE2
 10204                           fsr1l	equ	0xFE1
 10205                           indf2	equ	0xFDF
 10206                           postinc2	equ	0xFDE
 10207                           postdec2	equ	0xFDD
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           
 10212 ;; *************** function i2_I2C_Master_Read *****************
 10213 ;; Defined at:
 10214 ;;		line 105 in file "I2C.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;  a               1    wreg     unsigned char 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  a               1    1[COMRAM] unsigned char 
 10219 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 10220 ;; Return value:  Size  Location     Type
 10221 ;;                  1    wreg      unsigned char 
 10222 ;; Registers used:
 10223 ;;		wreg, status,2, status,0, cstack
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;Total ram usage:        2 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    1
 10236 ;; This function calls:
 10237 ;;		i2_I2C_Master_Wait
 10238 ;; This function is called by:
 10239 ;;		_read_time
 10240 ;;		i2_read_colorsensor
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text47
 10245  002FDC                     __ptext47:
 10246                           	opt stack 0
 10247  002FDC                     i2_I2C_Master_Read:
 10248                           	opt stack 23
 10249                           
 10250                           ;incstack = 0
 10251                           ;i2I2C_Master_Read@a stored from wreg
 10252  002FDC  6E02               	movwf	i2I2C_Master_Read@a,c
 10253                           
 10254                           ;I2C.c: 107: unsigned char temp;
 10255                           ;I2C.c: 108: I2C_Master_Wait();
 10256  002FDE  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10257                           
 10258                           ;I2C.c: 109: RCEN = 1;
 10259  002FE2  86C5               	bsf	4037,3,c	;volatile
 10260                           
 10261                           ;I2C.c: 110: I2C_Master_Wait();
 10262  002FE4  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10263                           
 10264                           ;I2C.c: 111: temp = SSPBUF;
 10265  002FE8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 10266                           
 10267                           ;I2C.c: 112: I2C_Master_Wait();
 10268  002FEC  EC5C  F018         	call	i2_I2C_Master_Wait	;wreg free
 10269                           
 10270                           ;I2C.c: 113: ACKDT = (a)?0:1;
 10271  002FF0  5002               	movf	i2I2C_Master_Read@a,w,c
 10272  002FF2  A4D8               	btfss	status,2,c
 10273  002FF4  D002               	goto	i2u409_40
 10274  002FF6  8AC5               	bsf	4037,5,c	;volatile
 10275  002FF8  D001               	goto	i2l4204
 10276  002FFA                     i2u409_40:
 10277  002FFA  9AC5               	bcf	4037,5,c	;volatile
 10278  002FFC                     i2l4204:
 10279                           
 10280                           ;I2C.c: 114: ACKEN = 1;
 10281  002FFC  88C5               	bsf	4037,4,c	;volatile
 10282                           
 10283                           ;I2C.c: 115: return temp;
 10284  002FFE  5003               	movf	i2I2C_Master_Read@temp,w,c
 10285  003000  0012               	return	
 10286  003002                     __end_ofi2_I2C_Master_Read:
 10287                           	opt stack 0
 10288                           pclatu	equ	0xFFB
 10289                           pclath	equ	0xFFA
 10290                           tblptru	equ	0xFF8
 10291                           tblptrh	equ	0xFF7
 10292                           tblptrl	equ	0xFF6
 10293                           tablat	equ	0xFF5
 10294                           prodh	equ	0xFF4
 10295                           prodl	equ	0xFF3
 10296                           intcon	equ	0xFF2
 10297                           intcon2	equ	0xFF1
 10298                           intcon3	equ	0xFF0
 10299                           postinc0	equ	0xFEE
 10300                           fsr0h	equ	0xFEA
 10301                           fsr0l	equ	0xFE9
 10302                           wreg	equ	0xFE8
 10303                           postinc1	equ	0xFE6
 10304                           postdec1	equ	0xFE5
 10305                           fsr1h	equ	0xFE2
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           postdec2	equ	0xFDD
 10310                           fsr2h	equ	0xFDA
 10311                           fsr2l	equ	0xFD9
 10312                           status	equ	0xFD8
 10313                           
 10314 ;; *************** function i2_I2C_Master_Wait *****************
 10315 ;; Defined at:
 10316 ;;		line 25 in file "I2C.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;		None
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;		None
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  1    wreg      void 
 10323 ;; Registers used:
 10324 ;;		wreg, status,2, status,0
 10325 ;; Tracked objects:
 10326 ;;		On entry : 0/0
 10327 ;;		On exit  : 0/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;Total ram usage:        1 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; This function calls:
 10337 ;;		Nothing
 10338 ;; This function is called by:
 10339 ;;		i2_I2C_Master_Start
 10340 ;;		i2_I2C_Master_Stop
 10341 ;;		i2_I2C_Master_Write
 10342 ;;		i2_I2C_Master_Read
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           	psect	text48
 10347  0030B8                     __ptext48:
 10348                           	opt stack 0
 10349  0030B8                     i2_I2C_Master_Wait:
 10350                           	opt stack 23
 10351  0030B8                     i2l34:
 10352  0030B8  B4C7               	btfsc	4039,2,c	;volatile
 10353  0030BA  D7FE               	goto	i2l34
 10354  0030BC  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10355  0030C0  0E1F               	movlw	31
 10356  0030C2  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10357  0030C4  B4D8               	btfsc	status,2,c
 10358  0030C6  0012               	return	
 10359  0030C8  D7F7               	goto	i2l34
 10360  0030CA                     __end_ofi2_I2C_Master_Wait:
 10361                           	opt stack 0
 10362                           pclatu	equ	0xFFB
 10363                           pclath	equ	0xFFA
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           prodh	equ	0xFF4
 10369                           prodl	equ	0xFF3
 10370                           intcon	equ	0xFF2
 10371                           intcon2	equ	0xFF1
 10372                           intcon3	equ	0xFF0
 10373                           postinc0	equ	0xFEE
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           postinc1	equ	0xFE6
 10378                           postdec1	equ	0xFE5
 10379                           fsr1h	equ	0xFE2
 10380                           fsr1l	equ	0xFE1
 10381                           indf2	equ	0xFDF
 10382                           postinc2	equ	0xFDE
 10383                           postdec2	equ	0xFDD
 10384                           fsr2h	equ	0xFDA
 10385                           fsr2l	equ	0xFD9
 10386                           status	equ	0xFD8
 10387                           
 10388 ;; *************** function _dec_to_hex *****************
 10389 ;; Defined at:
 10390 ;;		line 222 in file "main.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;  num             2   98[COMRAM] int 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  quotient        2  112[COMRAM] int 
 10395 ;;  hexnum          2  110[COMRAM] int 
 10396 ;;  i               2  108[COMRAM] int 
 10397 ;;  temp            2  106[COMRAM] int 
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  2   98[COMRAM] int 
 10400 ;; Registers used:
 10401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;Total ram usage:       16 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    5
 10414 ;; This function calls:
 10415 ;;		___awdiv
 10416 ;;		___ftadd
 10417 ;;		___fttol
 10418 ;;		_pow
 10419 ;;		i2___awtoft
 10420 ;;		i2___ftmul
 10421 ;; This function is called by:
 10422 ;;		_isr
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text49
 10427  0019AE                     __ptext49:
 10428                           	opt stack 0
 10429  0019AE                     _dec_to_hex:
 10430                           	opt stack 20
 10431                           
 10432                           ;main.c: 223: int i = 0, quotient = num, temp, hexnum = 0;
 10433                           
 10434                           ;incstack = 0
 10435  0019AE  0E00               	movlw	0
 10436  0019B0  6E6E               	movwf	dec_to_hex@i+1,c
 10437  0019B2  0E00               	movlw	0
 10438  0019B4  6E6D               	movwf	dec_to_hex@i,c
 10439  0019B6  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
 10440  0019BA  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 10441  0019BE  0E00               	movlw	0
 10442  0019C0  6E70               	movwf	dec_to_hex@hexnum+1,c
 10443  0019C2  0E00               	movlw	0
 10444  0019C4  6E6F               	movwf	dec_to_hex@hexnum,c
 10445                           
 10446                           ;main.c: 225: while (quotient != 0) {
 10447  0019C6  D068               	goto	i2l4556
 10448  0019C8                     i2l4544:
 10449                           
 10450                           ;main.c: 226: temp = quotient % 16;
 10451  0019C8  0E0F               	movlw	15
 10452  0019CA  1471               	andwf	dec_to_hex@quotient,w,c
 10453  0019CC  6E6B               	movwf	dec_to_hex@temp,c
 10454  0019CE  6A6C               	clrf	dec_to_hex@temp+1,c
 10455                           
 10456                           ;main.c: 227: hexnum += temp*pow(10,i);
 10457  0019D0  C06D  F009         	movff	dec_to_hex@i,i2___awtoft@c
 10458  0019D4  C06E  F00A         	movff	dec_to_hex@i+1,i2___awtoft@c+1
 10459  0019D8  EC70  F017         	call	i2___awtoft	;wreg free
 10460  0019DC  C009  F065         	movff	?i2___awtoft,_dec_to_hex$1378
 10461  0019E0  C00A  F066         	movff	?i2___awtoft+1,_dec_to_hex$1378+1
 10462  0019E4  C00B  F067         	movff	?i2___awtoft+2,_dec_to_hex$1378+2
 10463                           
 10464                           ;main.c: 227: hexnum += temp*pow(10,i);
 10465  0019E8  C065  F055         	movff	_dec_to_hex$1378,pow@y
 10466  0019EC  C066  F056         	movff	_dec_to_hex$1378+1,pow@y+1
 10467  0019F0  C067  F057         	movff	_dec_to_hex$1378+2,pow@y+2
 10468  0019F4  0E00               	movlw	0
 10469  0019F6  6E52               	movwf	pow@x,c
 10470  0019F8  0E20               	movlw	32
 10471  0019FA  6E53               	movwf	pow@x+1,c
 10472  0019FC  0E41               	movlw	65
 10473  0019FE  6E54               	movwf	pow@x+2,c
 10474  001A00  EC41  F009         	call	_pow	;wreg free
 10475  001A04  C052  F068         	movff	?_pow,_dec_to_hex$1379
 10476  001A08  C053  F069         	movff	?_pow+1,_dec_to_hex$1379+1
 10477  001A0C  C054  F06A         	movff	?_pow+2,_dec_to_hex$1379+2
 10478                           
 10479                           ;main.c: 227: hexnum += temp*pow(10,i);
 10480  001A10  C068  F010         	movff	_dec_to_hex$1379,i2___ftmul@f2
 10481  001A14  C069  F011         	movff	_dec_to_hex$1379+1,i2___ftmul@f2+1
 10482  001A18  C06A  F012         	movff	_dec_to_hex$1379+2,i2___ftmul@f2+2
 10483  001A1C  C06B  F009         	movff	dec_to_hex@temp,i2___awtoft@c
 10484  001A20  C06C  F00A         	movff	dec_to_hex@temp+1,i2___awtoft@c+1
 10485  001A24  EC70  F017         	call	i2___awtoft	;wreg free
 10486  001A28  C009  F00D         	movff	?i2___awtoft,i2___ftmul@f1
 10487  001A2C  C00A  F00E         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 10488  001A30  C00B  F00F         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 10489  001A34  ECCF  F00D         	call	i2___ftmul	;wreg free
 10490  001A38  C00D  F01F         	movff	?i2___ftmul,___ftadd@f2
 10491  001A3C  C00E  F020         	movff	?i2___ftmul+1,___ftadd@f2+1
 10492  001A40  C00F  F021         	movff	?i2___ftmul+2,___ftadd@f2+2
 10493  001A44  C06F  F009         	movff	dec_to_hex@hexnum,i2___awtoft@c
 10494  001A48  C070  F00A         	movff	dec_to_hex@hexnum+1,i2___awtoft@c+1
 10495  001A4C  EC70  F017         	call	i2___awtoft	;wreg free
 10496  001A50  C009  F01C         	movff	?i2___awtoft,___ftadd@f1
 10497  001A54  C00A  F01D         	movff	?i2___awtoft+1,___ftadd@f1+1
 10498  001A58  C00B  F01E         	movff	?i2___awtoft+2,___ftadd@f1+2
 10499  001A5C  EC6B  F008         	call	___ftadd	;wreg free
 10500  001A60  C01C  F028         	movff	?___ftadd,___fttol@f1
 10501  001A64  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
 10502  001A68  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
 10503  001A6C  EC55  F00D         	call	___fttol	;wreg free
 10504  001A70  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
 10505  001A74  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
 10506                           
 10507                           ;main.c: 228: quotient = quotient / 16;
 10508  001A78  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
 10509  001A7C  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
 10510  001A80  0E00               	movlw	0
 10511  001A82  6E04               	movwf	___awdiv@divisor+1,c
 10512  001A84  0E10               	movlw	16
 10513  001A86  6E03               	movwf	___awdiv@divisor,c
 10514  001A88  EC9E  F014         	call	___awdiv	;wreg free
 10515  001A8C  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
 10516  001A90  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
 10517                           
 10518                           ;main.c: 229: i += 1;
 10519  001A94  4A6D               	infsnz	dec_to_hex@i,f,c
 10520  001A96  2A6E               	incf	dec_to_hex@i+1,f,c
 10521  001A98                     i2l4556:
 10522  001A98  5071               	movf	dec_to_hex@quotient,w,c
 10523  001A9A  1072               	iorwf	dec_to_hex@quotient+1,w,c
 10524  001A9C  A4D8               	btfss	status,2,c
 10525  001A9E  D794               	goto	i2l4544
 10526                           
 10527                           ;main.c: 230: }
 10528                           ;main.c: 231: return hexnum;
 10529  001AA0  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
 10530  001AA4  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 10531  001AA8  0012               	return		;funcret
 10532  001AAA                     __end_of_dec_to_hex:
 10533                           	opt stack 0
 10534                           pclatu	equ	0xFFB
 10535                           pclath	equ	0xFFA
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           intcon2	equ	0xFF1
 10544                           intcon3	equ	0xFF0
 10545                           postinc0	equ	0xFEE
 10546                           fsr0h	equ	0xFEA
 10547                           fsr0l	equ	0xFE9
 10548                           wreg	equ	0xFE8
 10549                           postinc1	equ	0xFE6
 10550                           postdec1	equ	0xFE5
 10551                           fsr1h	equ	0xFE2
 10552                           fsr1l	equ	0xFE1
 10553                           indf2	equ	0xFDF
 10554                           postinc2	equ	0xFDE
 10555                           postdec2	equ	0xFDD
 10556                           fsr2h	equ	0xFDA
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _pow *****************
 10561 ;; Defined at:
 10562 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;  x               3   81[COMRAM] int 
 10565 ;;  y               3   84[COMRAM] int 
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  yi              4   94[COMRAM] unsigned long 
 10568 ;;  sign            1   93[COMRAM] unsigned char 
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  3   81[COMRAM] unsigned char 
 10571 ;; Registers used:
 10572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10578 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10581 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;Total ram usage:       17 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    4
 10585 ;; This function calls:
 10586 ;;		___ftneg
 10587 ;;		___fttol
 10588 ;;		___lltoft
 10589 ;;		_exp
 10590 ;;		_log
 10591 ;;		i2___ftge
 10592 ;;		i2___ftmul
 10593 ;; This function is called by:
 10594 ;;		_dec_to_hex
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text50
 10599  001282                     __ptext50:
 10600                           	opt stack 0
 10601  001282                     _pow:
 10602                           	opt stack 20
 10603                           
 10604                           ;incstack = 0
 10605  001282  0E00               	movlw	0
 10606  001284  6E5E               	movwf	pow@sign,c
 10607  001286  5052               	movf	pow@x,w,c
 10608  001288  1053               	iorwf	pow@x+1,w,c
 10609  00128A  1054               	iorwf	pow@x+2,w,c
 10610  00128C  A4D8               	btfss	status,2,c
 10611  00128E  D01C               	goto	i2l3950
 10612  001290  0E00               	movlw	0
 10613  001292  6E01               	movwf	i2___ftge@ff1,c
 10614  001294  0E00               	movlw	0
 10615  001296  6E02               	movwf	i2___ftge@ff1+1,c
 10616  001298  0E00               	movlw	0
 10617  00129A  6E03               	movwf	i2___ftge@ff1+2,c
 10618  00129C  C055  F004         	movff	pow@y,i2___ftge@ff2
 10619  0012A0  C056  F005         	movff	pow@y+1,i2___ftge@ff2+1
 10620  0012A4  C057  F006         	movff	pow@y+2,i2___ftge@ff2+2
 10621  0012A8  ECCC  F013         	call	i2___ftge	;wreg free
 10622  0012AC  A0D8               	btfss	status,0,c
 10623  0012AE  D005               	goto	i2l908
 10624  0012B0  0E00               	movlw	0
 10625  0012B2  0100               	movlb	0	; () banked
 10626  0012B4  6FAC               	movwf	(_errno+1)& (0+255),b
 10627  0012B6  0E21               	movlw	33
 10628  0012B8  6FAB               	movwf	_errno& (0+255),b
 10629  0012BA                     i2l908:
 10630  0012BA  0E00               	movlw	0
 10631  0012BC  6E52               	movwf	?_pow,c
 10632  0012BE  0E00               	movlw	0
 10633  0012C0  6E53               	movwf	?_pow+1,c
 10634  0012C2  0E00               	movlw	0
 10635  0012C4  6E54               	movwf	?_pow+2,c
 10636  0012C6  0012               	return	
 10637  0012C8                     i2l3950:
 10638  0012C8  5055               	movf	pow@y,w,c
 10639  0012CA  1056               	iorwf	pow@y+1,w,c
 10640  0012CC  1057               	iorwf	pow@y+2,w,c
 10641  0012CE  A4D8               	btfss	status,2,c
 10642  0012D0  D007               	goto	i2l3956
 10643  0012D2  0E00               	movlw	0
 10644  0012D4  6E52               	movwf	?_pow,c
 10645  0012D6  0E80               	movlw	128
 10646  0012D8  6E53               	movwf	?_pow+1,c
 10647  0012DA  0E3F               	movlw	63
 10648  0012DC  6E54               	movwf	?_pow+2,c
 10649  0012DE  0012               	return	
 10650  0012E0                     i2l3956:
 10651  0012E0  AE54               	btfss	pow@x+2,7,c
 10652  0012E2  D041               	goto	i2l3968
 10653  0012E4  C055  F028         	movff	pow@y,___fttol@f1
 10654  0012E8  C056  F029         	movff	pow@y+1,___fttol@f1+1
 10655  0012EC  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 10656  0012F0  EC55  F00D         	call	___fttol	;wreg free
 10657  0012F4  C028  F05F         	movff	?___fttol,pow@yi
 10658  0012F8  C029  F060         	movff	?___fttol+1,pow@yi+1
 10659  0012FC  C02A  F061         	movff	?___fttol+2,pow@yi+2
 10660  001300  C02B  F062         	movff	?___fttol+3,pow@yi+3
 10661  001304  C05F  F009         	movff	pow@yi,___lltoft@c
 10662  001308  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 10663  00130C  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 10664  001310  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 10665  001314  EC1D  F016         	call	___lltoft	;wreg free
 10666  001318  5055               	movf	pow@y,w,c
 10667  00131A  1809               	xorwf	?___lltoft,w,c
 10668  00131C  E107               	bnz	i2u378_40
 10669  00131E  5056               	movf	pow@y+1,w,c
 10670  001320  180A               	xorwf	?___lltoft+1,w,c
 10671  001322  E104               	bnz	i2u378_40
 10672  001324  5057               	movf	pow@y+2,w,c
 10673  001326  180B               	xorwf	?___lltoft+2,w,c
 10674  001328  B4D8               	btfsc	status,2,c
 10675  00132A  D00C               	goto	i2l3964
 10676  00132C                     i2u378_40:
 10677  00132C  0E00               	movlw	0
 10678  00132E  0100               	movlb	0	; () banked
 10679  001330  6FAC               	movwf	(_errno+1)& (0+255),b
 10680  001332  0E21               	movlw	33
 10681  001334  6FAB               	movwf	_errno& (0+255),b
 10682  001336  0E00               	movlw	0
 10683  001338  6E52               	movwf	?_pow,c
 10684  00133A  0E00               	movlw	0
 10685  00133C  6E53               	movwf	?_pow+1,c
 10686  00133E  0E00               	movlw	0
 10687  001340  6E54               	movwf	?_pow+2,c
 10688                           
 10689                           ; BSR set to: 0
 10690  001342  0012               	return	
 10691  001344                     i2l3964:
 10692  001344  505F               	movf	pow@yi,w,c
 10693  001346  0B01               	andlw	1
 10694  001348  6E5E               	movwf	pow@sign,c
 10695  00134A  C052  F001         	movff	pow@x,___ftneg@f1
 10696  00134E  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10697  001352  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10698  001356  EC14  F018         	call	___ftneg	;wreg free
 10699  00135A  C001  F052         	movff	?___ftneg,pow@x
 10700  00135E  C002  F053         	movff	?___ftneg+1,pow@x+1
 10701  001362  C003  F054         	movff	?___ftneg+2,pow@x+2
 10702  001366                     i2l3968:
 10703  001366  C052  F034         	movff	pow@x,log@x
 10704  00136A  C053  F035         	movff	pow@x+1,log@x+1
 10705  00136E  C054  F036         	movff	pow@x+2,log@x+2
 10706  001372  EC3C  F00B         	call	_log	;wreg free
 10707  001376  C034  F058         	movff	?_log,_pow$1380
 10708  00137A  C035  F059         	movff	?_log+1,_pow$1380+1
 10709  00137E  C036  F05A         	movff	?_log+2,_pow$1380+2
 10710  001382  C058  F00D         	movff	_pow$1380,i2___ftmul@f1
 10711  001386  C059  F00E         	movff	_pow$1380+1,i2___ftmul@f1+1
 10712  00138A  C05A  F00F         	movff	_pow$1380+2,i2___ftmul@f1+2
 10713  00138E  C055  F010         	movff	pow@y,i2___ftmul@f2
 10714  001392  C056  F011         	movff	pow@y+1,i2___ftmul@f2+1
 10715  001396  C057  F012         	movff	pow@y+2,i2___ftmul@f2+2
 10716  00139A  ECCF  F00D         	call	i2___ftmul	;wreg free
 10717  00139E  C00D  F05B         	movff	?i2___ftmul,_pow$1381
 10718  0013A2  C00E  F05C         	movff	?i2___ftmul+1,_pow$1381+1
 10719  0013A6  C00F  F05D         	movff	?i2___ftmul+2,_pow$1381+2
 10720  0013AA  C05B  F049         	movff	_pow$1381,exp@x
 10721  0013AE  C05C  F04A         	movff	_pow$1381+1,exp@x+1
 10722  0013B2  C05D  F04B         	movff	_pow$1381+2,exp@x+2
 10723  0013B6  EC77  F007         	call	_exp	;wreg free
 10724  0013BA  C049  F052         	movff	?_exp,pow@x
 10725  0013BE  C04A  F053         	movff	?_exp+1,pow@x+1
 10726  0013C2  C04B  F054         	movff	?_exp+2,pow@x+2
 10727  0013C6  505E               	movf	pow@sign,w,c
 10728  0013C8  B4D8               	btfsc	status,2,c
 10729  0013CA  D00F               	goto	i2l913
 10730  0013CC  C052  F001         	movff	pow@x,___ftneg@f1
 10731  0013D0  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10732  0013D4  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10733  0013D8  EC14  F018         	call	___ftneg	;wreg free
 10734  0013DC  C001  F052         	movff	?___ftneg,?_pow
 10735  0013E0  C002  F053         	movff	?___ftneg+1,?_pow+1
 10736  0013E4  C003  F054         	movff	?___ftneg+2,?_pow+2
 10737  0013E8  0012               	return	
 10738  0013EA                     i2l913:
 10739  0013EA  C052  F052         	movff	pow@x,?_pow
 10740  0013EE  C053  F053         	movff	pow@x+1,?_pow+1
 10741  0013F2  C054  F054         	movff	pow@x+2,?_pow+2
 10742  0013F6  0012               	return		;funcret
 10743  0013F8                     __end_of_pow:
 10744                           	opt stack 0
 10745                           pclatu	equ	0xFFB
 10746                           pclath	equ	0xFFA
 10747                           tblptru	equ	0xFF8
 10748                           tblptrh	equ	0xFF7
 10749                           tblptrl	equ	0xFF6
 10750                           tablat	equ	0xFF5
 10751                           prodh	equ	0xFF4
 10752                           prodl	equ	0xFF3
 10753                           intcon	equ	0xFF2
 10754                           intcon2	equ	0xFF1
 10755                           intcon3	equ	0xFF0
 10756                           postinc0	equ	0xFEE
 10757                           fsr0h	equ	0xFEA
 10758                           fsr0l	equ	0xFE9
 10759                           wreg	equ	0xFE8
 10760                           postinc1	equ	0xFE6
 10761                           postdec1	equ	0xFE5
 10762                           fsr1h	equ	0xFE2
 10763                           fsr1l	equ	0xFE1
 10764                           indf2	equ	0xFDF
 10765                           postinc2	equ	0xFDE
 10766                           postdec2	equ	0xFDD
 10767                           fsr2h	equ	0xFDA
 10768                           fsr2l	equ	0xFD9
 10769                           status	equ	0xFD8
 10770                           
 10771 ;; *************** function _log *****************
 10772 ;; Defined at:
 10773 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 10774 ;; Parameters:    Size  Location     Type
 10775 ;;  x               3   51[COMRAM] unsigned char 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  exponent        2   54[COMRAM] int 
 10778 ;; Return value:  Size  Location     Type
 10779 ;;                  3   51[COMRAM] int 
 10780 ;; Registers used:
 10781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10782 ;; Tracked objects:
 10783 ;;		On entry : 0/0
 10784 ;;		On exit  : 0/0
 10785 ;;		Unchanged: 0/0
 10786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10787 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;Total ram usage:        5 bytes
 10792 ;; Hardware stack levels used:    1
 10793 ;; Hardware stack levels required when called:    3
 10794 ;; This function calls:
 10795 ;;		___ftadd
 10796 ;;		_eval_poly
 10797 ;;		_frexp
 10798 ;;		i2___awtoft
 10799 ;;		i2___ftmul
 10800 ;; This function is called by:
 10801 ;;		_pow
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           	psect	text51
 10806  001678                     __ptext51:
 10807                           	opt stack 0
 10808  001678                     _log:
 10809                           	opt stack 20
 10810                           
 10811                           ;incstack = 0
 10812  001678  AE36               	btfss	log@x+2,7,c
 10813  00167A  D00C               	goto	i2l3668
 10814  00167C  0E00               	movlw	0
 10815  00167E  0100               	movlb	0	; () banked
 10816  001680  6FAC               	movwf	(_errno+1)& (0+255),b
 10817  001682  0E21               	movlw	33
 10818  001684  6FAB               	movwf	_errno& (0+255),b
 10819  001686  0E00               	movlw	0
 10820  001688  6E34               	movwf	?_log,c
 10821  00168A  0E00               	movlw	0
 10822  00168C  6E35               	movwf	?_log+1,c
 10823  00168E  0E00               	movlw	0
 10824  001690  6E36               	movwf	?_log+2,c
 10825                           
 10826                           ; BSR set to: 0
 10827  001692  0012               	return	
 10828  001694                     i2l3668:
 10829  001694  5034               	movf	log@x,w,c
 10830  001696  1035               	iorwf	log@x+1,w,c
 10831  001698  1036               	iorwf	log@x+2,w,c
 10832  00169A  A4D8               	btfss	status,2,c
 10833  00169C  D00C               	goto	i2l3674
 10834  00169E  0E00               	movlw	0
 10835  0016A0  0100               	movlb	0	; () banked
 10836  0016A2  6FAC               	movwf	(_errno+1)& (0+255),b
 10837  0016A4  0E22               	movlw	34
 10838  0016A6  6FAB               	movwf	_errno& (0+255),b
 10839  0016A8  0E00               	movlw	0
 10840  0016AA  6E34               	movwf	?_log,c
 10841  0016AC  0E00               	movlw	0
 10842  0016AE  6E35               	movwf	?_log+1,c
 10843  0016B0  0E00               	movlw	0
 10844  0016B2  6E36               	movwf	?_log+2,c
 10845                           
 10846                           ; BSR set to: 0
 10847  0016B4  0012               	return	
 10848  0016B6                     i2l3674:
 10849  0016B6  0E00               	movlw	0
 10850  0016B8  6E10               	movwf	i2___ftmul@f2,c
 10851  0016BA  0E00               	movlw	0
 10852  0016BC  6E11               	movwf	i2___ftmul@f2+1,c
 10853  0016BE  0E40               	movlw	64
 10854  0016C0  6E12               	movwf	i2___ftmul@f2+2,c
 10855  0016C2  0E37               	movlw	low log@exponent
 10856  0016C4  6E04               	movwf	frexp@eptr,c
 10857  0016C6  0E00               	movlw	high log@exponent
 10858  0016C8  6E05               	movwf	frexp@eptr+1,c
 10859  0016CA  C034  F001         	movff	log@x,frexp@value
 10860  0016CE  C035  F002         	movff	log@x+1,frexp@value+1
 10861  0016D2  C036  F003         	movff	log@x+2,frexp@value+2
 10862  0016D6  EC14  F014         	call	_frexp	;wreg free
 10863  0016DA  C001  F00D         	movff	?_frexp,i2___ftmul@f1
 10864  0016DE  C002  F00E         	movff	?_frexp+1,i2___ftmul@f1+1
 10865  0016E2  C003  F00F         	movff	?_frexp+2,i2___ftmul@f1+2
 10866  0016E6  ECCF  F00D         	call	i2___ftmul	;wreg free
 10867  0016EA  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 10868  0016EE  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 10869  0016F2  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 10870  0016F6  0E00               	movlw	0
 10871  0016F8  6E1F               	movwf	___ftadd@f2,c
 10872  0016FA  0E80               	movlw	128
 10873  0016FC  6E20               	movwf	___ftadd@f2+1,c
 10874  0016FE  0EBF               	movlw	191
 10875  001700  6E21               	movwf	___ftadd@f2+2,c
 10876  001702  EC6B  F008         	call	___ftadd	;wreg free
 10877  001706  C01C  F034         	movff	?___ftadd,log@x
 10878  00170A  C01D  F035         	movff	?___ftadd+1,log@x+1
 10879  00170E  C01E  F036         	movff	?___ftadd+2,log@x+2
 10880  001712  0637               	decf	log@exponent,f,c
 10881  001714  A0D8               	btfss	status,0,c
 10882  001716  0638               	decf	log@exponent+1,f,c
 10883  001718  C034  F028         	movff	log@x,eval_poly@x
 10884  00171C  C035  F029         	movff	log@x+1,eval_poly@x+1
 10885  001720  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10886  001724  0E7F               	movlw	low log@coeff
 10887  001726  6E2B               	movwf	eval_poly@d,c
 10888  001728  0EFE               	movlw	high log@coeff
 10889  00172A  6E2C               	movwf	eval_poly@d+1,c
 10890  00172C  0E00               	movlw	0
 10891  00172E  6E2E               	movwf	eval_poly@n+1,c
 10892  001730  0E08               	movlw	8
 10893  001732  6E2D               	movwf	eval_poly@n,c
 10894  001734  ECEE  F010         	call	_eval_poly	;wreg free
 10895  001738  C028  F034         	movff	?_eval_poly,log@x
 10896  00173C  C029  F035         	movff	?_eval_poly+1,log@x+1
 10897  001740  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10898  001744  0E72               	movlw	114
 10899  001746  6E10               	movwf	i2___ftmul@f2,c
 10900  001748  0E31               	movlw	49
 10901  00174A  6E11               	movwf	i2___ftmul@f2+1,c
 10902  00174C  0E3F               	movlw	63
 10903  00174E  6E12               	movwf	i2___ftmul@f2+2,c
 10904  001750  C037  F009         	movff	log@exponent,i2___awtoft@c
 10905  001754  C038  F00A         	movff	log@exponent+1,i2___awtoft@c+1
 10906  001758  EC70  F017         	call	i2___awtoft	;wreg free
 10907  00175C  C009  F00D         	movff	?i2___awtoft,i2___ftmul@f1
 10908  001760  C00A  F00E         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 10909  001764  C00B  F00F         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 10910  001768  ECCF  F00D         	call	i2___ftmul	;wreg free
 10911  00176C  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 10912  001770  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 10913  001774  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 10914  001778  C034  F01F         	movff	log@x,___ftadd@f2
 10915  00177C  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10916  001780  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10917  001784  EC6B  F008         	call	___ftadd	;wreg free
 10918  001788  C01C  F034         	movff	?___ftadd,?_log
 10919  00178C  C01D  F035         	movff	?___ftadd+1,?_log+1
 10920  001790  C01E  F036         	movff	?___ftadd+2,?_log+2
 10921  001794  0012               	return	
 10922  001796                     __end_of_log:
 10923                           	opt stack 0
 10924                           pclatu	equ	0xFFB
 10925                           pclath	equ	0xFFA
 10926                           tblptru	equ	0xFF8
 10927                           tblptrh	equ	0xFF7
 10928                           tblptrl	equ	0xFF6
 10929                           tablat	equ	0xFF5
 10930                           prodh	equ	0xFF4
 10931                           prodl	equ	0xFF3
 10932                           intcon	equ	0xFF2
 10933                           intcon2	equ	0xFF1
 10934                           intcon3	equ	0xFF0
 10935                           postinc0	equ	0xFEE
 10936                           fsr0h	equ	0xFEA
 10937                           fsr0l	equ	0xFE9
 10938                           wreg	equ	0xFE8
 10939                           postinc1	equ	0xFE6
 10940                           postdec1	equ	0xFE5
 10941                           fsr1h	equ	0xFE2
 10942                           fsr1l	equ	0xFE1
 10943                           indf2	equ	0xFDF
 10944                           postinc2	equ	0xFDE
 10945                           postdec2	equ	0xFDD
 10946                           fsr2h	equ	0xFDA
 10947                           fsr2l	equ	0xFD9
 10948                           status	equ	0xFD8
 10949                           
 10950 ;; *************** function _exp *****************
 10951 ;; Defined at:
 10952 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  x               3   72[COMRAM] int 
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  exponent        2   78[COMRAM] int 
 10957 ;;  sign            1   80[COMRAM] unsigned char 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  3   72[COMRAM] unsigned char 
 10960 ;; Registers used:
 10961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:        9 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    3
 10974 ;; This function calls:
 10975 ;;		___ftdiv
 10976 ;;		___ftneg
 10977 ;;		___ftsub
 10978 ;;		___fttol
 10979 ;;		_eval_poly
 10980 ;;		_floor
 10981 ;;		_ldexp
 10982 ;;		i2___awtoft
 10983 ;;		i2___ftge
 10984 ;;		i2___ftmul
 10985 ;; This function is called by:
 10986 ;;		_pow
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text52
 10991  000EEE                     __ptext52:
 10992                           	opt stack 0
 10993  000EEE                     _exp:
 10994                           	opt stack 20
 10995                           
 10996                           ;incstack = 0
 10997  000EEE  5049               	movf	exp@x,w,c
 10998  000EF0  104A               	iorwf	exp@x+1,w,c
 10999  000EF2  104B               	iorwf	exp@x+2,w,c
 11000  000EF4  A4D8               	btfss	status,2,c
 11001  000EF6  D007               	goto	i2l3690
 11002  000EF8  0E00               	movlw	0
 11003  000EFA  6E49               	movwf	?_exp,c
 11004  000EFC  0E80               	movlw	128
 11005  000EFE  6E4A               	movwf	?_exp+1,c
 11006  000F00  0E3F               	movlw	63
 11007  000F02  6E4B               	movwf	?_exp+2,c
 11008  000F04  0012               	return	
 11009  000F06                     i2l3690:
 11010  000F06  0E72               	movlw	114
 11011  000F08  6E01               	movwf	i2___ftge@ff1,c
 11012  000F0A  0E31               	movlw	49
 11013  000F0C  6E02               	movwf	i2___ftge@ff1+1,c
 11014  000F0E  0E44               	movlw	68
 11015  000F10  6E03               	movwf	i2___ftge@ff1+2,c
 11016  000F12  C049  F004         	movff	exp@x,i2___ftge@ff2
 11017  000F16  C04A  F005         	movff	exp@x+1,i2___ftge@ff2+1
 11018  000F1A  C04B  F006         	movff	exp@x+2,i2___ftge@ff2+2
 11019  000F1E  ECCC  F013         	call	i2___ftge	;wreg free
 11020  000F22  B0D8               	btfsc	status,0,c
 11021  000F24  D00C               	goto	i2l3696
 11022  000F26  0E00               	movlw	0
 11023  000F28  0100               	movlb	0	; () banked
 11024  000F2A  6FAC               	movwf	(_errno+1)& (0+255),b
 11025  000F2C  0E22               	movlw	34
 11026  000F2E  6FAB               	movwf	_errno& (0+255),b
 11027  000F30  0EFF               	movlw	255
 11028  000F32  6E49               	movwf	?_exp,c
 11029  000F34  0E7F               	movlw	127
 11030  000F36  6E4A               	movwf	?_exp+1,c
 11031  000F38  0E7F               	movlw	127
 11032  000F3A  6E4B               	movwf	?_exp+2,c
 11033                           
 11034                           ; BSR set to: 0
 11035  000F3C  0012               	return	
 11036  000F3E                     i2l3696:
 11037  000F3E  C049  F001         	movff	exp@x,i2___ftge@ff1
 11038  000F42  C04A  F002         	movff	exp@x+1,i2___ftge@ff1+1
 11039  000F46  C04B  F003         	movff	exp@x+2,i2___ftge@ff1+2
 11040  000F4A  0E49               	movlw	73
 11041  000F4C  6E04               	movwf	i2___ftge@ff2,c
 11042  000F4E  0E3A               	movlw	58
 11043  000F50  6E05               	movwf	i2___ftge@ff2+1,c
 11044  000F52  0EC4               	movlw	196
 11045  000F54  6E06               	movwf	i2___ftge@ff2+2,c
 11046  000F56  ECCC  F013         	call	i2___ftge	;wreg free
 11047  000F5A  B0D8               	btfsc	status,0,c
 11048  000F5C  D00C               	goto	i2l3702
 11049  000F5E  0E00               	movlw	0
 11050  000F60  0100               	movlb	0	; () banked
 11051  000F62  6FAC               	movwf	(_errno+1)& (0+255),b
 11052  000F64  0E22               	movlw	34
 11053  000F66  6FAB               	movwf	_errno& (0+255),b
 11054  000F68  0E00               	movlw	0
 11055  000F6A  6E49               	movwf	?_exp,c
 11056  000F6C  0E00               	movlw	0
 11057  000F6E  6E4A               	movwf	?_exp+1,c
 11058  000F70  0E00               	movlw	0
 11059  000F72  6E4B               	movwf	?_exp+2,c
 11060                           
 11061                           ; BSR set to: 0
 11062  000F74  0012               	return	
 11063  000F76                     i2l3702:
 11064  000F76  AE4B               	btfss	exp@x+2,7,c
 11065  000F78  D002               	goto	i2u336_40
 11066  000F7A  0E01               	movlw	1
 11067  000F7C  D001               	goto	i2u337_40
 11068  000F7E                     i2u336_40:
 11069  000F7E  0E00               	movlw	0
 11070  000F80                     i2u337_40:
 11071  000F80  6E51               	movwf	exp@sign,c
 11072  000F82  5051               	movf	exp@sign,w,c
 11073  000F84  B4D8               	btfsc	status,2,c
 11074  000F86  D00E               	goto	i2l1071
 11075  000F88  C049  F001         	movff	exp@x,___ftneg@f1
 11076  000F8C  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 11077  000F90  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 11078  000F94  EC14  F018         	call	___ftneg	;wreg free
 11079  000F98  C001  F049         	movff	?___ftneg,exp@x
 11080  000F9C  C002  F04A         	movff	?___ftneg+1,exp@x+1
 11081  000FA0  C003  F04B         	movff	?___ftneg+2,exp@x+2
 11082  000FA4                     i2l1071:
 11083  000FA4  C049  F00D         	movff	exp@x,i2___ftmul@f1
 11084  000FA8  C04A  F00E         	movff	exp@x+1,i2___ftmul@f1+1
 11085  000FAC  C04B  F00F         	movff	exp@x+2,i2___ftmul@f1+2
 11086  000FB0  0EAA               	movlw	170
 11087  000FB2  6E10               	movwf	i2___ftmul@f2,c
 11088  000FB4  0EB8               	movlw	184
 11089  000FB6  6E11               	movwf	i2___ftmul@f2+1,c
 11090  000FB8  0E3F               	movlw	63
 11091  000FBA  6E12               	movwf	i2___ftmul@f2+2,c
 11092  000FBC  ECCF  F00D         	call	i2___ftmul	;wreg free
 11093  000FC0  C00D  F049         	movff	?i2___ftmul,exp@x
 11094  000FC4  C00E  F04A         	movff	?i2___ftmul+1,exp@x+1
 11095  000FC8  C00F  F04B         	movff	?i2___ftmul+2,exp@x+2
 11096  000FCC  C049  F041         	movff	exp@x,floor@x
 11097  000FD0  C04A  F042         	movff	exp@x+1,floor@x+1
 11098  000FD4  C04B  F043         	movff	exp@x+2,floor@x+2
 11099  000FD8  ECA9  F00F         	call	_floor	;wreg free
 11100  000FDC  C041  F04C         	movff	?_floor,_exp$1249
 11101  000FE0  C042  F04D         	movff	?_floor+1,_exp$1249+1
 11102  000FE4  C043  F04E         	movff	?_floor+2,_exp$1249+2
 11103  000FE8  C04C  F028         	movff	_exp$1249,___fttol@f1
 11104  000FEC  C04D  F029         	movff	_exp$1249+1,___fttol@f1+1
 11105  000FF0  C04E  F02A         	movff	_exp$1249+2,___fttol@f1+2
 11106  000FF4  EC55  F00D         	call	___fttol	;wreg free
 11107  000FF8  C028  F04F         	movff	?___fttol,exp@exponent
 11108  000FFC  C029  F050         	movff	?___fttol+1,exp@exponent+1
 11109  001000  C049  F028         	movff	exp@x,___ftsub@f1
 11110  001004  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 11111  001008  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 11112  00100C  C04F  F009         	movff	exp@exponent,i2___awtoft@c
 11113  001010  C050  F00A         	movff	exp@exponent+1,i2___awtoft@c+1
 11114  001014  EC70  F017         	call	i2___awtoft	;wreg free
 11115  001018  C009  F02B         	movff	?i2___awtoft,___ftsub@f2
 11116  00101C  C00A  F02C         	movff	?i2___awtoft+1,___ftsub@f2+1
 11117  001020  C00B  F02D         	movff	?i2___awtoft+2,___ftsub@f2+2
 11118  001024  EC31  F017         	call	___ftsub	;wreg free
 11119  001028  C028  F049         	movff	?___ftsub,exp@x
 11120  00102C  C029  F04A         	movff	?___ftsub+1,exp@x+1
 11121  001030  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 11122  001034  C049  F028         	movff	exp@x,eval_poly@x
 11123  001038  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 11124  00103C  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 11125  001040  0E61               	movlw	low exp@coeff
 11126  001042  6E2B               	movwf	eval_poly@d,c
 11127  001044  0EFE               	movlw	high exp@coeff
 11128  001046  6E2C               	movwf	eval_poly@d+1,c
 11129  001048  0E00               	movlw	0
 11130  00104A  6E2E               	movwf	eval_poly@n+1,c
 11131  00104C  0E09               	movlw	9
 11132  00104E  6E2D               	movwf	eval_poly@n,c
 11133  001050  ECEE  F010         	call	_eval_poly	;wreg free
 11134  001054  C028  F034         	movff	?_eval_poly,ldexp@value
 11135  001058  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 11136  00105C  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 11137  001060  C04F  F037         	movff	exp@exponent,ldexp@newexp
 11138  001064  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 11139  001068  ECBB  F011         	call	_ldexp	;wreg free
 11140  00106C  C034  F049         	movff	?_ldexp,exp@x
 11141  001070  C035  F04A         	movff	?_ldexp+1,exp@x+1
 11142  001074  C036  F04B         	movff	?_ldexp+2,exp@x+2
 11143  001078  5051               	movf	exp@sign,w,c
 11144  00107A  B4D8               	btfsc	status,2,c
 11145  00107C  D025               	goto	i2l1072
 11146  00107E  2849               	incf	exp@x,w,c
 11147  001080  E10E               	bnz	i2l3724
 11148  001082  0E7F               	movlw	127
 11149  001084  184A               	xorwf	exp@x+1,w,c
 11150  001086  E10B               	bnz	i2l3724
 11151  001088  0E7F               	movlw	127
 11152  00108A  184B               	xorwf	exp@x+2,w,c
 11153  00108C  A4D8               	btfss	status,2,c
 11154  00108E  D007               	goto	i2l3724
 11155  001090  0E00               	movlw	0
 11156  001092  6E49               	movwf	?_exp,c
 11157  001094  0E00               	movlw	0
 11158  001096  6E4A               	movwf	?_exp+1,c
 11159  001098  0E00               	movlw	0
 11160  00109A  6E4B               	movwf	?_exp+2,c
 11161  00109C  0012               	return	
 11162  00109E                     i2l3724:
 11163  00109E  0E00               	movlw	0
 11164  0010A0  6E09               	movwf	___ftdiv@f1,c
 11165  0010A2  0E80               	movlw	128
 11166  0010A4  6E0A               	movwf	___ftdiv@f1+1,c
 11167  0010A6  0E3F               	movlw	63
 11168  0010A8  6E0B               	movwf	___ftdiv@f1+2,c
 11169  0010AA  C049  F00C         	movff	exp@x,___ftdiv@f2
 11170  0010AE  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 11171  0010B2  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 11172  0010B6  EC36  F00F         	call	___ftdiv	;wreg free
 11173  0010BA  C009  F049         	movff	?___ftdiv,?_exp
 11174  0010BE  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 11175  0010C2  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 11176  0010C6  0012               	return	
 11177  0010C8                     i2l1072:
 11178  0010C8  C049  F049         	movff	exp@x,?_exp
 11179  0010CC  C04A  F04A         	movff	exp@x+1,?_exp+1
 11180  0010D0  C04B  F04B         	movff	exp@x+2,?_exp+2
 11181  0010D4  0012               	return		;funcret
 11182  0010D6                     __end_of_exp:
 11183                           	opt stack 0
 11184                           pclatu	equ	0xFFB
 11185                           pclath	equ	0xFFA
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           prodh	equ	0xFF4
 11191                           prodl	equ	0xFF3
 11192                           intcon	equ	0xFF2
 11193                           intcon2	equ	0xFF1
 11194                           intcon3	equ	0xFF0
 11195                           postinc0	equ	0xFEE
 11196                           fsr0h	equ	0xFEA
 11197                           fsr0l	equ	0xFE9
 11198                           wreg	equ	0xFE8
 11199                           postinc1	equ	0xFE6
 11200                           postdec1	equ	0xFE5
 11201                           fsr1h	equ	0xFE2
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           postdec2	equ	0xFDD
 11206                           fsr2h	equ	0xFDA
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function i2___awtoft *****************
 11211 ;; Defined at:
 11212 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  c               2    8[COMRAM] int 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  __awtoft        1   11[COMRAM] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  3    8[COMRAM] float 
 11219 ;; Registers used:
 11220 ;;		wreg, status,2, status,0, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11226 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;Total ram usage:        4 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    1
 11233 ;; This function calls:
 11234 ;;		i2___ftpack
 11235 ;; This function is called by:
 11236 ;;		_dec_to_hex
 11237 ;;		_exp
 11238 ;;		_log
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text53
 11243  002EE0                     __ptext53:
 11244                           	opt stack 0
 11245  002EE0                     i2___awtoft:
 11246                           	opt stack 23
 11247                           
 11248                           ;incstack = 0
 11249  002EE0  0E00               	movlw	0
 11250  002EE2  6E0C               	movwf	i2___awtoft@sign,c
 11251  002EE4  AE0A               	btfss	i2___awtoft@c+1,7,c
 11252  002EE6  D006               	goto	i2l3526
 11253  002EE8  6C09               	negf	i2___awtoft@c,c
 11254  002EEA  1E0A               	comf	i2___awtoft@c+1,f,c
 11255  002EEC  B0D8               	btfsc	status,0,c
 11256  002EEE  2A0A               	incf	i2___awtoft@c+1,f,c
 11257  002EF0  0E01               	movlw	1
 11258  002EF2  6E0C               	movwf	i2___awtoft@sign,c
 11259  002EF4                     i2l3526:
 11260  002EF4  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 11261  002EF8  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 11262  002EFC  6A03               	clrf	i2___ftpack@arg+2,c
 11263  002EFE  0E8E               	movlw	142
 11264  002F00  6E04               	movwf	i2___ftpack@exp,c
 11265  002F02  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 11266  002F06  EC7C  F012         	call	i2___ftpack	;wreg free
 11267  002F0A  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 11268  002F0E  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 11269  002F12  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 11270  002F16  0012               	return	
 11271  002F18                     __end_ofi2___awtoft:
 11272                           	opt stack 0
 11273                           pclatu	equ	0xFFB
 11274                           pclath	equ	0xFFA
 11275                           tblptru	equ	0xFF8
 11276                           tblptrh	equ	0xFF7
 11277                           tblptrl	equ	0xFF6
 11278                           tablat	equ	0xFF5
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           intcon	equ	0xFF2
 11282                           intcon2	equ	0xFF1
 11283                           intcon3	equ	0xFF0
 11284                           postinc0	equ	0xFEE
 11285                           fsr0h	equ	0xFEA
 11286                           fsr0l	equ	0xFE9
 11287                           wreg	equ	0xFE8
 11288                           postinc1	equ	0xFE6
 11289                           postdec1	equ	0xFE5
 11290                           fsr1h	equ	0xFE2
 11291                           fsr1l	equ	0xFE1
 11292                           indf2	equ	0xFDF
 11293                           postinc2	equ	0xFDE
 11294                           postdec2	equ	0xFDD
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function _ldexp *****************
 11300 ;; Defined at:
 11301 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;  value           3   51[COMRAM] float 
 11304 ;;  newexp          2   54[COMRAM] int 
 11305 ;; Auto vars:     Size  Location     Type
 11306 ;;		None
 11307 ;; Return value:  Size  Location     Type
 11308 ;;                  3   51[COMRAM] int 
 11309 ;; Registers used:
 11310 ;;		wreg, status,2, status,0
 11311 ;; Tracked objects:
 11312 ;;		On entry : 0/0
 11313 ;;		On exit  : 0/0
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11316 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;Total ram usage:        7 bytes
 11321 ;; Hardware stack levels used:    1
 11322 ;; This function calls:
 11323 ;;		Nothing
 11324 ;; This function is called by:
 11325 ;;		_exp
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           	psect	text54
 11330  002376                     __ptext54:
 11331                           	opt stack 0
 11332  002376                     _ldexp:
 11333                           	opt stack 22
 11334                           
 11335                           ;incstack = 0
 11336  002376  5034               	movf	ldexp@value,w,c
 11337  002378  1035               	iorwf	ldexp@value+1,w,c
 11338  00237A  1036               	iorwf	ldexp@value+2,w,c
 11339  00237C  A4D8               	btfss	status,2,c
 11340  00237E  D007               	goto	i2l3488
 11341  002380  0E00               	movlw	0
 11342  002382  6E34               	movwf	?_ldexp,c
 11343  002384  0E00               	movlw	0
 11344  002386  6E35               	movwf	?_ldexp+1,c
 11345  002388  0E00               	movlw	0
 11346  00238A  6E36               	movwf	?_ldexp+2,c
 11347  00238C  0012               	return	
 11348  00238E                     i2l3488:
 11349  00238E  5036               	movf	ldexp@value+2,w,c
 11350  002390  0B7F               	andlw	127
 11351  002392  6E39               	movwf	??_ldexp& (0+255),c
 11352  002394  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 11353  002396  90D8               	bcf	status,0,c
 11354  002398  3639               	rlcf	??_ldexp,f,c
 11355  00239A  363A               	rlcf	??_ldexp+1,f,c
 11356  00239C  5039               	movf	??_ldexp,w,c
 11357  00239E  2637               	addwf	ldexp@newexp,f,c
 11358  0023A0  503A               	movf	??_ldexp+1,w,c
 11359  0023A2  2238               	addwfc	ldexp@newexp+1,f,c
 11360  0023A4  AE35               	btfss	ldexp@value+1,7,c
 11361  0023A6  D003               	goto	i2u307_40
 11362  0023A8  6A39               	clrf	??_ldexp& (0+255),c
 11363  0023AA  2A39               	incf	??_ldexp& (0+255),f,c
 11364  0023AC  D001               	goto	i2u307_48
 11365  0023AE                     i2u307_40:
 11366  0023AE  6A39               	clrf	??_ldexp& (0+255),c
 11367  0023B0                     i2u307_48:
 11368  0023B0  5039               	movf	??_ldexp,w,c
 11369  0023B2  2637               	addwf	ldexp@newexp,f,c
 11370  0023B4  0E00               	movlw	0
 11371  0023B6  2238               	addwfc	ldexp@newexp+1,f,c
 11372  0023B8  AE38               	btfss	ldexp@newexp+1,7,c
 11373  0023BA  D00C               	goto	i2l3496
 11374  0023BC  0E00               	movlw	0
 11375  0023BE  0100               	movlb	0	; () banked
 11376  0023C0  6FAC               	movwf	(_errno+1)& (0+255),b
 11377  0023C2  0E22               	movlw	34
 11378  0023C4  6FAB               	movwf	_errno& (0+255),b
 11379  0023C6  0E00               	movlw	0
 11380  0023C8  6E34               	movwf	?_ldexp,c
 11381  0023CA  0E00               	movlw	0
 11382  0023CC  6E35               	movwf	?_ldexp+1,c
 11383  0023CE  0E00               	movlw	0
 11384  0023D0                     L11:
 11385  0023D0  6E36               	movwf	?_ldexp+2,c
 11386                           
 11387                           ; BSR set to: 0
 11388  0023D2  0012               	return	
 11389  0023D4                     i2l3496:
 11390  0023D4  BE38               	btfsc	ldexp@newexp+1,7,c
 11391  0023D6  D016               	goto	i2l3512
 11392  0023D8  0438               	decf	ldexp@newexp+1,w,c
 11393  0023DA  A0D8               	btfss	status,0,c
 11394  0023DC  D013               	goto	i2l3512
 11395  0023DE  0E00               	movlw	0
 11396  0023E0  0100               	movlb	0	; () banked
 11397  0023E2  6FAC               	movwf	(_errno+1)& (0+255),b
 11398  0023E4  0E22               	movlw	34
 11399  0023E6  6FAB               	movwf	_errno& (0+255),b
 11400                           
 11401                           ; BSR set to: 0
 11402  0023E8  AE36               	btfss	ldexp@value+2,7,c
 11403  0023EA  D006               	goto	i2l3508
 11404                           
 11405                           ; BSR set to: 0
 11406  0023EC  0EFF               	movlw	255
 11407  0023EE  6E34               	movwf	?_ldexp,c
 11408  0023F0  0E7F               	movlw	127
 11409  0023F2  6E35               	movwf	?_ldexp+1,c
 11410  0023F4  0EFF               	movlw	255
 11411  0023F6  D7EC               	goto	L11
 11412  0023F8                     i2l3508:
 11413                           
 11414                           ; BSR set to: 0
 11415  0023F8  0EFF               	movlw	255
 11416  0023FA  6E34               	movwf	?_ldexp,c
 11417  0023FC  0E7F               	movlw	127
 11418  0023FE  6E35               	movwf	?_ldexp+1,c
 11419  002400  0E7F               	movlw	127
 11420  002402  D7E6               	goto	L11
 11421  002404                     i2l3512:
 11422  002404  3438               	rlcf	ldexp@newexp+1,w,c
 11423  002406  3038               	rrcf	ldexp@newexp+1,w,c
 11424  002408  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 11425  00240A  3037               	rrcf	ldexp@newexp,w,c
 11426  00240C  6E39               	movwf	??_ldexp& (0+255),c
 11427  00240E  5036               	movf	ldexp@value+2,w,c
 11428  002410  1839               	xorwf	??_ldexp,w,c
 11429  002412  0B80               	andlw	-128
 11430  002414  1839               	xorwf	??_ldexp,w,c
 11431  002416  6E36               	movwf	ldexp@value+2,c
 11432  002418  C037  F039         	movff	ldexp@newexp,??_ldexp
 11433  00241C  0E01               	movlw	1
 11434  00241E  1639               	andwf	??_ldexp,f,c
 11435  002420  3239               	rrcf	??_ldexp,f,c
 11436  002422  3239               	rrcf	??_ldexp,f,c
 11437  002424  5035               	movf	ldexp@value+1,w,c
 11438  002426  1839               	xorwf	??_ldexp,w,c
 11439  002428  0B7F               	andlw	-129
 11440  00242A  1839               	xorwf	??_ldexp,w,c
 11441  00242C  6E35               	movwf	ldexp@value+1,c
 11442  00242E  C034  F034         	movff	ldexp@value,?_ldexp
 11443  002432  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 11444  002436  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 11445  00243A  0012               	return	
 11446  00243C                     __end_of_ldexp:
 11447                           	opt stack 0
 11448                           pclatu	equ	0xFFB
 11449                           pclath	equ	0xFFA
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           intcon	equ	0xFF2
 11457                           intcon2	equ	0xFF1
 11458                           intcon3	equ	0xFF0
 11459                           postinc0	equ	0xFEE
 11460                           fsr0h	equ	0xFEA
 11461                           fsr0l	equ	0xFE9
 11462                           wreg	equ	0xFE8
 11463                           postinc1	equ	0xFE6
 11464                           postdec1	equ	0xFE5
 11465                           fsr1h	equ	0xFE2
 11466                           fsr1l	equ	0xFE1
 11467                           indf2	equ	0xFDF
 11468                           postinc2	equ	0xFDE
 11469                           postdec2	equ	0xFDD
 11470                           fsr2h	equ	0xFDA
 11471                           fsr2l	equ	0xFD9
 11472                           status	equ	0xFD8
 11473                           
 11474 ;; *************** function _floor *****************
 11475 ;; Defined at:
 11476 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  x               3   64[COMRAM] int 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  i               3   67[COMRAM] int 
 11481 ;;  expon           2   70[COMRAM] int 
 11482 ;; Return value:  Size  Location     Type
 11483 ;;                  3   64[COMRAM] int 
 11484 ;; Registers used:
 11485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11491 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11495 ;;Total ram usage:        8 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    2
 11498 ;; This function calls:
 11499 ;;		___altoft
 11500 ;;		___ftadd
 11501 ;;		___fttol
 11502 ;;		_frexp
 11503 ;;		i2___ftge
 11504 ;; This function is called by:
 11505 ;;		_exp
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text55
 11510  001F52                     __ptext55:
 11511                           	opt stack 0
 11512  001F52                     _floor:
 11513                           	opt stack 20
 11514                           
 11515                           ;incstack = 0
 11516  001F52  C041  F001         	movff	floor@x,frexp@value
 11517  001F56  C042  F002         	movff	floor@x+1,frexp@value+1
 11518  001F5A  C043  F003         	movff	floor@x+2,frexp@value+2
 11519  001F5E  0E47               	movlw	low floor@expon
 11520  001F60  6E04               	movwf	frexp@eptr,c
 11521  001F62  0E00               	movlw	high floor@expon
 11522  001F64  6E05               	movwf	frexp@eptr+1,c
 11523  001F66  EC14  F014         	call	_frexp	;wreg free
 11524  001F6A  AE48               	btfss	floor@expon+1,7,c
 11525  001F6C  D010               	goto	i2l3466
 11526  001F6E  AE43               	btfss	floor@x+2,7,c
 11527  001F70  D007               	goto	i2l3462
 11528  001F72  0E00               	movlw	0
 11529  001F74  6E41               	movwf	?_floor,c
 11530  001F76  0E80               	movlw	128
 11531  001F78  6E42               	movwf	?_floor+1,c
 11532  001F7A  0EBF               	movlw	191
 11533  001F7C  6E43               	movwf	?_floor+2,c
 11534  001F7E  0012               	return	
 11535  001F80                     i2l3462:
 11536  001F80  0E00               	movlw	0
 11537  001F82  6E41               	movwf	?_floor,c
 11538  001F84  0E00               	movlw	0
 11539  001F86  6E42               	movwf	?_floor+1,c
 11540  001F88  0E00               	movlw	0
 11541  001F8A  6E43               	movwf	?_floor+2,c
 11542  001F8C  0012               	return	
 11543  001F8E                     i2l3466:
 11544  001F8E  5048               	movf	floor@expon+1,w,c
 11545  001F90  E104               	bnz	i2u303_40
 11546  001F92  0E15               	movlw	21
 11547  001F94  5C47               	subwf	floor@expon,w,c
 11548  001F96  A0D8               	btfss	status,0,c
 11549  001F98  D007               	goto	i2l3470
 11550  001F9A                     i2u303_40:
 11551  001F9A  C041  F041         	movff	floor@x,?_floor
 11552  001F9E  C042  F042         	movff	floor@x+1,?_floor+1
 11553  001FA2  C043  F043         	movff	floor@x+2,?_floor+2
 11554  001FA6  0012               	return	
 11555  001FA8                     i2l3470:
 11556  001FA8  C041  F028         	movff	floor@x,___fttol@f1
 11557  001FAC  C042  F029         	movff	floor@x+1,___fttol@f1+1
 11558  001FB0  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 11559  001FB4  EC55  F00D         	call	___fttol	;wreg free
 11560  001FB8  C028  F037         	movff	?___fttol,___altoft@c
 11561  001FBC  C029  F038         	movff	?___fttol+1,___altoft@c+1
 11562  001FC0  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 11563  001FC4  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 11564  001FC8  EC1C  F015         	call	___altoft	;wreg free
 11565  001FCC  C037  F044         	movff	?___altoft,floor@i
 11566  001FD0  C038  F045         	movff	?___altoft+1,floor@i+1
 11567  001FD4  C039  F046         	movff	?___altoft+2,floor@i+2
 11568  001FD8  C041  F001         	movff	floor@x,i2___ftge@ff1
 11569  001FDC  C042  F002         	movff	floor@x+1,i2___ftge@ff1+1
 11570  001FE0  C043  F003         	movff	floor@x+2,i2___ftge@ff1+2
 11571  001FE4  C044  F004         	movff	floor@i,i2___ftge@ff2
 11572  001FE8  C045  F005         	movff	floor@i+1,i2___ftge@ff2+1
 11573  001FEC  C046  F006         	movff	floor@i+2,i2___ftge@ff2+2
 11574  001FF0  ECCC  F013         	call	i2___ftge	;wreg free
 11575  001FF4  B0D8               	btfsc	status,0,c
 11576  001FF6  D015               	goto	i2l1082
 11577  001FF8  C044  F01C         	movff	floor@i,___ftadd@f1
 11578  001FFC  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 11579  002000  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 11580  002004  0E00               	movlw	0
 11581  002006  6E1F               	movwf	___ftadd@f2,c
 11582  002008  0E80               	movlw	128
 11583  00200A  6E20               	movwf	___ftadd@f2+1,c
 11584  00200C  0EBF               	movlw	191
 11585  00200E  6E21               	movwf	___ftadd@f2+2,c
 11586  002010  EC6B  F008         	call	___ftadd	;wreg free
 11587  002014  C01C  F041         	movff	?___ftadd,?_floor
 11588  002018  C01D  F042         	movff	?___ftadd+1,?_floor+1
 11589  00201C  C01E  F043         	movff	?___ftadd+2,?_floor+2
 11590  002020  0012               	return	
 11591  002022                     i2l1082:
 11592  002022  C044  F041         	movff	floor@i,?_floor
 11593  002026  C045  F042         	movff	floor@i+1,?_floor+1
 11594  00202A  C046  F043         	movff	floor@i+2,?_floor+2
 11595  00202E  0012               	return		;funcret
 11596  002030                     __end_of_floor:
 11597                           	opt stack 0
 11598                           pclatu	equ	0xFFB
 11599                           pclath	equ	0xFFA
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodh	equ	0xFF4
 11605                           prodl	equ	0xFF3
 11606                           intcon	equ	0xFF2
 11607                           intcon2	equ	0xFF1
 11608                           intcon3	equ	0xFF0
 11609                           postinc0	equ	0xFEE
 11610                           fsr0h	equ	0xFEA
 11611                           fsr0l	equ	0xFE9
 11612                           wreg	equ	0xFE8
 11613                           postinc1	equ	0xFE6
 11614                           postdec1	equ	0xFE5
 11615                           fsr1h	equ	0xFE2
 11616                           fsr1l	equ	0xFE1
 11617                           indf2	equ	0xFDF
 11618                           postinc2	equ	0xFDE
 11619                           postdec2	equ	0xFDD
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function i2___ftge *****************
 11625 ;; Defined at:
 11626 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  ff1             3    0[COMRAM] float 
 11629 ;;  ff2             3    3[COMRAM] float 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;		None
 11632 ;; Return value:  Size  Location     Type
 11633 ;;		None               void
 11634 ;; Registers used:
 11635 ;;		wreg, status,2, status,0
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11641 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11645 ;;Total ram usage:        9 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; This function calls:
 11648 ;;		Nothing
 11649 ;; This function is called by:
 11650 ;;		_pow
 11651 ;;		_exp
 11652 ;;		_floor
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           	psect	text56
 11657  002798                     __ptext56:
 11658                           	opt stack 0
 11659  002798                     i2___ftge:
 11660                           	opt stack 23
 11661                           
 11662                           ;incstack = 0
 11663  002798  AE03               	btfss	i2___ftge@ff1+2,7,c
 11664  00279A  D016               	goto	i2l3310
 11665  00279C  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 11666  0027A0  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 11667  0027A4  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 11668  0027A8  1E07               	comf	??i2___ftge,f,c
 11669  0027AA  1E08               	comf	??i2___ftge+1,f,c
 11670  0027AC  1E09               	comf	??i2___ftge+2,f,c
 11671  0027AE  2A07               	incf	??i2___ftge,f,c
 11672  0027B0  0E00               	movlw	0
 11673  0027B2  2208               	addwfc	??i2___ftge+1,f,c
 11674  0027B4  2209               	addwfc	??i2___ftge+2,f,c
 11675  0027B6  0E00               	movlw	0
 11676  0027B8  2407               	addwf	??i2___ftge,w,c
 11677  0027BA  6E01               	movwf	i2___ftge@ff1,c
 11678  0027BC  0E00               	movlw	0
 11679  0027BE  2008               	addwfc	??i2___ftge+1,w,c
 11680  0027C0  6E02               	movwf	i2___ftge@ff1+1,c
 11681  0027C2  0E80               	movlw	128
 11682  0027C4  2009               	addwfc	??i2___ftge+2,w,c
 11683  0027C6  6E03               	movwf	i2___ftge@ff1+2,c
 11684  0027C8                     i2l3310:
 11685  0027C8  AE06               	btfss	i2___ftge@ff2+2,7,c
 11686  0027CA  D016               	goto	i2l3314
 11687  0027CC  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 11688  0027D0  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 11689  0027D4  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 11690  0027D8  1E07               	comf	??i2___ftge,f,c
 11691  0027DA  1E08               	comf	??i2___ftge+1,f,c
 11692  0027DC  1E09               	comf	??i2___ftge+2,f,c
 11693  0027DE  2A07               	incf	??i2___ftge,f,c
 11694  0027E0  0E00               	movlw	0
 11695  0027E2  2208               	addwfc	??i2___ftge+1,f,c
 11696  0027E4  2209               	addwfc	??i2___ftge+2,f,c
 11697  0027E6  0E00               	movlw	0
 11698  0027E8  2407               	addwf	??i2___ftge,w,c
 11699  0027EA  6E04               	movwf	i2___ftge@ff2,c
 11700  0027EC  0E00               	movlw	0
 11701  0027EE  2008               	addwfc	??i2___ftge+1,w,c
 11702  0027F0  6E05               	movwf	i2___ftge@ff2+1,c
 11703  0027F2  0E80               	movlw	128
 11704  0027F4  2009               	addwfc	??i2___ftge+2,w,c
 11705  0027F6  6E06               	movwf	i2___ftge@ff2+2,c
 11706  0027F8                     i2l3314:
 11707  0027F8  0E00               	movlw	0
 11708  0027FA  1A01               	xorwf	i2___ftge@ff1,f,c
 11709  0027FC  0E00               	movlw	0
 11710  0027FE  1A02               	xorwf	i2___ftge@ff1+1,f,c
 11711  002800  0E80               	movlw	128
 11712  002802  1A03               	xorwf	i2___ftge@ff1+2,f,c
 11713  002804  0E00               	movlw	0
 11714  002806  1A04               	xorwf	i2___ftge@ff2,f,c
 11715  002808  0E00               	movlw	0
 11716  00280A  1A05               	xorwf	i2___ftge@ff2+1,f,c
 11717  00280C  0E80               	movlw	128
 11718  00280E  1A06               	xorwf	i2___ftge@ff2+2,f,c
 11719  002810  5004               	movf	i2___ftge@ff2,w,c
 11720  002812  5C01               	subwf	i2___ftge@ff1,w,c
 11721  002814  5005               	movf	i2___ftge@ff2+1,w,c
 11722  002816  5802               	subwfb	i2___ftge@ff1+1,w,c
 11723  002818  5006               	movf	i2___ftge@ff2+2,w,c
 11724  00281A  5803               	subwfb	i2___ftge@ff1+2,w,c
 11725  00281C  B0D8               	btfsc	status,0,c
 11726  00281E  D002               	goto	i2l3320
 11727  002820  90D8               	bcf	status,0,c
 11728  002822  0012               	return	
 11729  002824                     i2l3320:
 11730  002824  80D8               	bsf	status,0,c
 11731  002826  0012               	return	
 11732  002828                     __end_ofi2___ftge:
 11733                           	opt stack 0
 11734                           pclatu	equ	0xFFB
 11735                           pclath	equ	0xFFA
 11736                           tblptru	equ	0xFF8
 11737                           tblptrh	equ	0xFF7
 11738                           tblptrl	equ	0xFF6
 11739                           tablat	equ	0xFF5
 11740                           prodh	equ	0xFF4
 11741                           prodl	equ	0xFF3
 11742                           intcon	equ	0xFF2
 11743                           intcon2	equ	0xFF1
 11744                           intcon3	equ	0xFF0
 11745                           postinc0	equ	0xFEE
 11746                           fsr0h	equ	0xFEA
 11747                           fsr0l	equ	0xFE9
 11748                           wreg	equ	0xFE8
 11749                           postinc1	equ	0xFE6
 11750                           postdec1	equ	0xFE5
 11751                           fsr1h	equ	0xFE2
 11752                           fsr1l	equ	0xFE1
 11753                           indf2	equ	0xFDF
 11754                           postinc2	equ	0xFDE
 11755                           postdec2	equ	0xFDD
 11756                           fsr2h	equ	0xFDA
 11757                           fsr2l	equ	0xFD9
 11758                           status	equ	0xFD8
 11759                           
 11760 ;; *************** function _frexp *****************
 11761 ;; Defined at:
 11762 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;  value           3    0[COMRAM] float 
 11765 ;;  eptr            2    3[COMRAM] PTR int 
 11766 ;;		 -> log@exponent(2), floor@expon(2), 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  3    0[COMRAM] PTR int 
 11771 ;; Registers used:
 11772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11778 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;Total ram usage:        7 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; This function calls:
 11785 ;;		Nothing
 11786 ;; This function is called by:
 11787 ;;		_floor
 11788 ;;		_log
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           	psect	text57
 11793  002828                     __ptext57:
 11794                           	opt stack 0
 11795  002828                     _frexp:
 11796                           	opt stack 22
 11797                           
 11798                           ;incstack = 0
 11799  002828  5001               	movf	frexp@value,w,c
 11800  00282A  1002               	iorwf	frexp@value+1,w,c
 11801  00282C  1003               	iorwf	frexp@value+2,w,c
 11802  00282E  A4D8               	btfss	status,2,c
 11803  002830  D00F               	goto	i2l3288
 11804  002832  C004  FFD9         	movff	frexp@eptr,fsr2l
 11805  002836  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11806  00283A  0E00               	movlw	0
 11807  00283C  6EDE               	movwf	postinc2,c
 11808  00283E  0E00               	movlw	0
 11809  002840  6EDD               	movwf	postdec2,c
 11810  002842  0E00               	movlw	0
 11811  002844  6E01               	movwf	?_frexp,c
 11812  002846  0E00               	movlw	0
 11813  002848  6E02               	movwf	?_frexp+1,c
 11814  00284A  0E00               	movlw	0
 11815  00284C  6E03               	movwf	?_frexp+2,c
 11816  00284E  0012               	return	
 11817  002850                     i2l3288:
 11818  002850  5003               	movf	frexp@value+2,w,c
 11819  002852  0B7F               	andlw	127
 11820  002854  6E06               	movwf	??_frexp& (0+255),c
 11821  002856  6A07               	clrf	(??_frexp+1)& (0+255),c
 11822  002858  90D8               	bcf	status,0,c
 11823  00285A  3606               	rlcf	??_frexp,f,c
 11824  00285C  3607               	rlcf	??_frexp+1,f,c
 11825  00285E  C004  FFD9         	movff	frexp@eptr,fsr2l
 11826  002862  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11827  002866  C006  FFDE         	movff	??_frexp,postinc2
 11828  00286A  C007  FFDD         	movff	??_frexp+1,postdec2
 11829  00286E  AE02               	btfss	frexp@value+1,7,c
 11830  002870  D003               	goto	i2u282_40
 11831  002872  6A06               	clrf	??_frexp& (0+255),c
 11832  002874  2A06               	incf	??_frexp& (0+255),f,c
 11833  002876  D001               	goto	i2u282_48
 11834  002878                     i2u282_40:
 11835  002878  6A06               	clrf	??_frexp& (0+255),c
 11836  00287A                     i2u282_48:
 11837  00287A  5006               	movf	??_frexp,w,c
 11838  00287C  C004  FFD9         	movff	frexp@eptr,fsr2l
 11839  002880  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11840  002884  12DE               	iorwf	postinc2,f,c
 11841  002886  0E00               	movlw	0
 11842  002888  12DD               	iorwf	postdec2,f,c
 11843  00288A  C004  FFD9         	movff	frexp@eptr,fsr2l
 11844  00288E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11845  002892  0E82               	movlw	130
 11846  002894  26DE               	addwf	postinc2,f,c
 11847  002896  0EFF               	movlw	255
 11848  002898  22DD               	addwfc	postdec2,f,c
 11849  00289A  8003               	bsf	frexp@value+2,0,c
 11850  00289C  8203               	bsf	frexp@value+2,1,c
 11851  00289E  8403               	bsf	frexp@value+2,2,c
 11852  0028A0  8603               	bsf	frexp@value+2,3,c
 11853  0028A2  8803               	bsf	frexp@value+2,4,c
 11854  0028A4  8A03               	bsf	frexp@value+2,5,c
 11855  0028A6  9C03               	bcf	frexp@value+2,6,c
 11856  0028A8  9E02               	bcf	frexp@value+1,7,c
 11857  0028AA  C001  F001         	movff	frexp@value,?_frexp
 11858  0028AE  C002  F002         	movff	frexp@value+1,?_frexp+1
 11859  0028B2  C003  F003         	movff	frexp@value+2,?_frexp+2
 11860  0028B6  0012               	return	
 11861  0028B8                     __end_of_frexp:
 11862                           	opt stack 0
 11863                           pclatu	equ	0xFFB
 11864                           pclath	equ	0xFFA
 11865                           tblptru	equ	0xFF8
 11866                           tblptrh	equ	0xFF7
 11867                           tblptrl	equ	0xFF6
 11868                           tablat	equ	0xFF5
 11869                           prodh	equ	0xFF4
 11870                           prodl	equ	0xFF3
 11871                           intcon	equ	0xFF2
 11872                           intcon2	equ	0xFF1
 11873                           intcon3	equ	0xFF0
 11874                           postinc0	equ	0xFEE
 11875                           fsr0h	equ	0xFEA
 11876                           fsr0l	equ	0xFE9
 11877                           wreg	equ	0xFE8
 11878                           postinc1	equ	0xFE6
 11879                           postdec1	equ	0xFE5
 11880                           fsr1h	equ	0xFE2
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           postdec2	equ	0xFDD
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function ___fttol *****************
 11890 ;; Defined at:
 11891 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;  f1              3   39[COMRAM] float 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;  lval            4   49[COMRAM] unsigned long 
 11896 ;;  exp1            1   53[COMRAM] unsigned char 
 11897 ;;  sign1           1   48[COMRAM] unsigned char 
 11898 ;; Return value:  Size  Location     Type
 11899 ;;                  4   39[COMRAM] long 
 11900 ;; Registers used:
 11901 ;;		wreg, status,2, status,0
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;Total ram usage:       15 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; This function calls:
 11914 ;;		Nothing
 11915 ;; This function is called by:
 11916 ;;		_dec_to_hex
 11917 ;;		_pow
 11918 ;;		_exp
 11919 ;;		_floor
 11920 ;; This function uses a non-reentrant model
 11921 ;;
 11922                           
 11923                           	psect	text58
 11924  001AAA                     __ptext58:
 11925                           	opt stack 0
 11926  001AAA                     ___fttol:
 11927                           	opt stack 21
 11928                           
 11929                           ;incstack = 0
 11930  001AAA  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 11931  001AAE  6A2D               	clrf	(??___fttol+1)& (0+255),c
 11932  001AB0  6A2E               	clrf	(??___fttol+2)& (0+255),c
 11933  001AB2  3429               	rlcf	___fttol@f1+1,w,c
 11934  001AB4  362C               	rlcf	??___fttol& (0+255),f,c
 11935  001AB6  E301               	bnc	u273_41
 11936  001AB8  802D               	bsf	(??___fttol+1)& (0+255),0,c
 11937  001ABA                     u273_41:
 11938  001ABA  502C               	movf	??___fttol,w,c
 11939  001ABC  6E36               	movwf	___fttol@exp1,c
 11940  001ABE  5036               	movf	___fttol@exp1,w,c
 11941  001AC0  A4D8               	btfss	status,2,c
 11942  001AC2  D009               	goto	i2l3240
 11943  001AC4  0E00               	movlw	0
 11944  001AC6  6E28               	movwf	?___fttol,c
 11945  001AC8  0E00               	movlw	0
 11946  001ACA  6E29               	movwf	?___fttol+1,c
 11947  001ACC  0E00               	movlw	0
 11948  001ACE  6E2A               	movwf	?___fttol+2,c
 11949  001AD0  0E00               	movlw	0
 11950  001AD2  6E2B               	movwf	?___fttol+3,c
 11951  001AD4  0012               	return	
 11952  001AD6                     i2l3240:
 11953  001AD6  0E17               	movlw	23
 11954  001AD8  6E2C               	movwf	??___fttol& (0+255),c
 11955  001ADA  C028  F02D         	movff	___fttol@f1,??___fttol+1
 11956  001ADE  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 11957  001AE2  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 11958  001AE6  282C               	incf	??___fttol,w,c
 11959  001AE8  6E30               	movwf	(??___fttol+4)& (0+255),c
 11960  001AEA  D004               	goto	i2u275_40
 11961  001AEC                     i2u275_45:
 11962  001AEC  90D8               	bcf	status,0,c
 11963  001AEE  322F               	rrcf	??___fttol+3,f,c
 11964  001AF0  322E               	rrcf	??___fttol+2,f,c
 11965  001AF2  322D               	rrcf	??___fttol+1,f,c
 11966  001AF4                     i2u275_40:
 11967  001AF4  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 11968  001AF6  D7FA               	goto	i2u275_45
 11969  001AF8  502D               	movf	??___fttol+1,w,c
 11970  001AFA  6E31               	movwf	___fttol@sign1,c
 11971  001AFC  8E29               	bsf	___fttol@f1+1,7,c
 11972  001AFE  0EFF               	movlw	255
 11973  001B00  1628               	andwf	___fttol@f1,f,c
 11974  001B02  0EFF               	movlw	255
 11975  001B04  1629               	andwf	___fttol@f1+1,f,c
 11976  001B06  0E00               	movlw	0
 11977  001B08  162A               	andwf	___fttol@f1+2,f,c
 11978  001B0A  5028               	movf	___fttol@f1,w,c
 11979  001B0C  6E32               	movwf	___fttol@lval,c
 11980  001B0E  5029               	movf	___fttol@f1+1,w,c
 11981  001B10  6E33               	movwf	___fttol@lval+1,c
 11982  001B12  502A               	movf	___fttol@f1+2,w,c
 11983  001B14  6E34               	movwf	___fttol@lval+2,c
 11984  001B16  6A35               	clrf	___fttol@lval+3,c
 11985  001B18  0E8E               	movlw	142
 11986  001B1A  5E36               	subwf	___fttol@exp1,f,c
 11987  001B1C  AE36               	btfss	___fttol@exp1,7,c
 11988  001B1E  D016               	goto	i2l3262
 11989  001B20  5036               	movf	___fttol@exp1,w,c
 11990  001B22  0A80               	xorlw	128
 11991  001B24  0F8F               	addlw	143
 11992  001B26  B0D8               	btfsc	status,0,c
 11993  001B28  D009               	goto	i2l3258
 11994  001B2A  0E00               	movlw	0
 11995  001B2C  6E28               	movwf	?___fttol,c
 11996  001B2E  0E00               	movlw	0
 11997  001B30  6E29               	movwf	?___fttol+1,c
 11998  001B32  0E00               	movlw	0
 11999  001B34  6E2A               	movwf	?___fttol+2,c
 12000  001B36  0E00               	movlw	0
 12001  001B38  6E2B               	movwf	?___fttol+3,c
 12002  001B3A  0012               	return	
 12003  001B3C                     i2l3258:
 12004  001B3C  90D8               	bcf	status,0,c
 12005  001B3E  3235               	rrcf	___fttol@lval+3,f,c
 12006  001B40  3234               	rrcf	___fttol@lval+2,f,c
 12007  001B42  3233               	rrcf	___fttol@lval+1,f,c
 12008  001B44  3232               	rrcf	___fttol@lval,f,c
 12009  001B46  3E36               	incfsz	___fttol@exp1,f,c
 12010  001B48  D7F9               	goto	i2l3258
 12011  001B4A  D015               	goto	i2l3272
 12012  001B4C                     i2l3262:
 12013  001B4C  0E17               	movlw	23
 12014  001B4E  6436               	cpfsgt	___fttol@exp1,c
 12015  001B50  D00F               	goto	i2l3270
 12016  001B52  0E00               	movlw	0
 12017  001B54  6E28               	movwf	?___fttol,c
 12018  001B56  0E00               	movlw	0
 12019  001B58  6E29               	movwf	?___fttol+1,c
 12020  001B5A  0E00               	movlw	0
 12021  001B5C  6E2A               	movwf	?___fttol+2,c
 12022  001B5E  0E00               	movlw	0
 12023  001B60  6E2B               	movwf	?___fttol+3,c
 12024  001B62  0012               	return	
 12025  001B64                     i2l3268:
 12026  001B64  90D8               	bcf	status,0,c
 12027  001B66  3632               	rlcf	___fttol@lval,f,c
 12028  001B68  3633               	rlcf	___fttol@lval+1,f,c
 12029  001B6A  3634               	rlcf	___fttol@lval+2,f,c
 12030  001B6C  3635               	rlcf	___fttol@lval+3,f,c
 12031  001B6E  0636               	decf	___fttol@exp1,f,c
 12032  001B70                     i2l3270:
 12033  001B70  5036               	movf	___fttol@exp1,w,c
 12034  001B72  A4D8               	btfss	status,2,c
 12035  001B74  D7F7               	goto	i2l3268
 12036  001B76                     i2l3272:
 12037  001B76  5031               	movf	___fttol@sign1,w,c
 12038  001B78  B4D8               	btfsc	status,2,c
 12039  001B7A  D008               	goto	i2l3276
 12040  001B7C  1E35               	comf	___fttol@lval+3,f,c
 12041  001B7E  1E34               	comf	___fttol@lval+2,f,c
 12042  001B80  1E33               	comf	___fttol@lval+1,f,c
 12043  001B82  6C32               	negf	___fttol@lval,c
 12044  001B84  0E00               	movlw	0
 12045  001B86  2233               	addwfc	___fttol@lval+1,f,c
 12046  001B88  2234               	addwfc	___fttol@lval+2,f,c
 12047  001B8A  2235               	addwfc	___fttol@lval+3,f,c
 12048  001B8C                     i2l3276:
 12049  001B8C  C032  F028         	movff	___fttol@lval,?___fttol
 12050  001B90  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 12051  001B94  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 12052  001B98  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 12053  001B9C  0012               	return	
 12054  001B9E                     __end_of___fttol:
 12055                           	opt stack 0
 12056                           pclatu	equ	0xFFB
 12057                           pclath	equ	0xFFA
 12058                           tblptru	equ	0xFF8
 12059                           tblptrh	equ	0xFF7
 12060                           tblptrl	equ	0xFF6
 12061                           tablat	equ	0xFF5
 12062                           prodh	equ	0xFF4
 12063                           prodl	equ	0xFF3
 12064                           intcon	equ	0xFF2
 12065                           intcon2	equ	0xFF1
 12066                           intcon3	equ	0xFF0
 12067                           postinc0	equ	0xFEE
 12068                           fsr0h	equ	0xFEA
 12069                           fsr0l	equ	0xFE9
 12070                           wreg	equ	0xFE8
 12071                           postinc1	equ	0xFE6
 12072                           postdec1	equ	0xFE5
 12073                           fsr1h	equ	0xFE2
 12074                           fsr1l	equ	0xFE1
 12075                           indf2	equ	0xFDF
 12076                           postinc2	equ	0xFDE
 12077                           postdec2	equ	0xFDD
 12078                           fsr2h	equ	0xFDA
 12079                           fsr2l	equ	0xFD9
 12080                           status	equ	0xFD8
 12081                           
 12082 ;; *************** function ___altoft *****************
 12083 ;; Defined at:
 12084 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  c               4   54[COMRAM] long 
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;  sign            1   63[COMRAM] unsigned char 
 12089 ;;  exp             1   62[COMRAM] unsigned char 
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  3   54[COMRAM] float 
 12092 ;; Registers used:
 12093 ;;		wreg, status,2, status,0, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;Total ram usage:       10 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    1
 12106 ;; This function calls:
 12107 ;;		i2___ftpack
 12108 ;; This function is called by:
 12109 ;;		_floor
 12110 ;; This function uses a non-reentrant model
 12111 ;;
 12112                           
 12113                           	psect	text59
 12114  002A38                     __ptext59:
 12115                           	opt stack 0
 12116  002A38                     ___altoft:
 12117                           	opt stack 20
 12118                           
 12119                           ;incstack = 0
 12120  002A38  0E00               	movlw	0
 12121  002A3A  6E40               	movwf	___altoft@sign,c
 12122  002A3C  0E8E               	movlw	142
 12123  002A3E  6E3F               	movwf	___altoft@exp,c
 12124  002A40  AE3A               	btfss	___altoft@c+3,7,c
 12125  002A42  D011               	goto	i2l3158
 12126  002A44  1E3A               	comf	___altoft@c+3,f,c
 12127  002A46  1E39               	comf	___altoft@c+2,f,c
 12128  002A48  1E38               	comf	___altoft@c+1,f,c
 12129  002A4A  6C37               	negf	___altoft@c,c
 12130  002A4C  0E00               	movlw	0
 12131  002A4E  2238               	addwfc	___altoft@c+1,f,c
 12132  002A50  2239               	addwfc	___altoft@c+2,f,c
 12133  002A52  223A               	addwfc	___altoft@c+3,f,c
 12134  002A54  0E01               	movlw	1
 12135  002A56  6E40               	movwf	___altoft@sign,c
 12136  002A58  D006               	goto	i2l3158
 12137  002A5A                     i2l3156:
 12138  002A5A  90D8               	bcf	status,0,c
 12139  002A5C  323A               	rrcf	___altoft@c+3,f,c
 12140  002A5E  3239               	rrcf	___altoft@c+2,f,c
 12141  002A60  3238               	rrcf	___altoft@c+1,f,c
 12142  002A62  3237               	rrcf	___altoft@c,f,c
 12143  002A64  2A3F               	incf	___altoft@exp,f,c
 12144  002A66                     i2l3158:
 12145  002A66  0E00               	movlw	0
 12146  002A68  1437               	andwf	___altoft@c,w,c
 12147  002A6A  6E3B               	movwf	??___altoft& (0+255),c
 12148  002A6C  0E00               	movlw	0
 12149  002A6E  1438               	andwf	___altoft@c+1,w,c
 12150  002A70  6E3C               	movwf	(??___altoft+1)& (0+255),c
 12151  002A72  0E00               	movlw	0
 12152  002A74  1439               	andwf	___altoft@c+2,w,c
 12153  002A76  6E3D               	movwf	(??___altoft+2)& (0+255),c
 12154  002A78  0EFF               	movlw	255
 12155  002A7A  143A               	andwf	___altoft@c+3,w,c
 12156  002A7C  6E3E               	movwf	(??___altoft+3)& (0+255),c
 12157  002A7E  503B               	movf	??___altoft,w,c
 12158  002A80  103C               	iorwf	??___altoft+1,w,c
 12159  002A82  103D               	iorwf	??___altoft+2,w,c
 12160  002A84  103E               	iorwf	??___altoft+3,w,c
 12161  002A86  A4D8               	btfss	status,2,c
 12162  002A88  D7E8               	goto	i2l3156
 12163  002A8A  C037  F001         	movff	___altoft@c,i2___ftpack@arg
 12164  002A8E  C038  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 12165  002A92  C039  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 12166  002A96  C03F  F004         	movff	___altoft@exp,i2___ftpack@exp
 12167  002A9A  C040  F005         	movff	___altoft@sign,i2___ftpack@sign
 12168  002A9E  EC7C  F012         	call	i2___ftpack	;wreg free
 12169  002AA2  C001  F037         	movff	?i2___ftpack,?___altoft
 12170  002AA6  C002  F038         	movff	?i2___ftpack+1,?___altoft+1
 12171  002AAA  C003  F039         	movff	?i2___ftpack+2,?___altoft+2
 12172  002AAE  0012               	return	
 12173  002AB0                     __end_of___altoft:
 12174                           	opt stack 0
 12175                           pclatu	equ	0xFFB
 12176                           pclath	equ	0xFFA
 12177                           tblptru	equ	0xFF8
 12178                           tblptrh	equ	0xFF7
 12179                           tblptrl	equ	0xFF6
 12180                           tablat	equ	0xFF5
 12181                           prodh	equ	0xFF4
 12182                           prodl	equ	0xFF3
 12183                           intcon	equ	0xFF2
 12184                           intcon2	equ	0xFF1
 12185                           intcon3	equ	0xFF0
 12186                           postinc0	equ	0xFEE
 12187                           fsr0h	equ	0xFEA
 12188                           fsr0l	equ	0xFE9
 12189                           wreg	equ	0xFE8
 12190                           postinc1	equ	0xFE6
 12191                           postdec1	equ	0xFE5
 12192                           fsr1h	equ	0xFE2
 12193                           fsr1l	equ	0xFE1
 12194                           indf2	equ	0xFDF
 12195                           postinc2	equ	0xFDE
 12196                           postdec2	equ	0xFDD
 12197                           fsr2h	equ	0xFDA
 12198                           fsr2l	equ	0xFD9
 12199                           status	equ	0xFD8
 12200                           
 12201 ;; *************** function _eval_poly *****************
 12202 ;; Defined at:
 12203 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  x               3   39[COMRAM] float 
 12206 ;;  d               2   42[COMRAM] PTR const 
 12207 ;;		 -> log@coeff(27), exp@coeff(30), 
 12208 ;;  n               2   44[COMRAM] int 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  res             3   48[COMRAM] int 
 12211 ;; Return value:  Size  Location     Type
 12212 ;;                  3   39[COMRAM] int 
 12213 ;; Registers used:
 12214 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12215 ;; Tracked objects:
 12216 ;;		On entry : 0/0
 12217 ;;		On exit  : 0/0
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12220 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12221 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12224 ;;Total ram usage:       12 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    2
 12227 ;; This function calls:
 12228 ;;		___ftadd
 12229 ;;		i2___ftmul
 12230 ;;		i2___wmul
 12231 ;; This function is called by:
 12232 ;;		_exp
 12233 ;;		_log
 12234 ;; This function uses a non-reentrant model
 12235 ;;
 12236                           
 12237                           	psect	text60
 12238  0021DC                     __ptext60:
 12239                           	opt stack 0
 12240  0021DC                     _eval_poly:
 12241                           	opt stack 20
 12242                           
 12243                           ;incstack = 0
 12244  0021DC  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12245  0021E0  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12246  0021E4  0E00               	movlw	0
 12247  0021E6  6E04               	movwf	i2___wmul@multiplicand+1,c
 12248  0021E8  0E03               	movlw	3
 12249  0021EA  6E03               	movwf	i2___wmul@multiplicand,c
 12250  0021EC  EC01  F018         	call	i2___wmul	;wreg free
 12251  0021F0  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12252  0021F4  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12253  0021F8  5001               	movf	?i2___wmul,w,c
 12254  0021FA  262F               	addwf	??_eval_poly,f,c
 12255  0021FC  5002               	movf	?i2___wmul+1,w,c
 12256  0021FE  2230               	addwfc	??_eval_poly+1,f,c
 12257  002200  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12258  002204  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12259  002208                     	if	0	;tblptru may be non-zero
 12260  002208                     	endif
 12261  002208                     	if	0	;tblptru may be non-zero
 12262  002208                     	endif
 12263  002208  0009               	tblrd		*+
 12264  00220A  CFF5 F031          	movff	tablat,eval_poly@res
 12265  00220E  0009               	tblrd		*+
 12266  002210  CFF5 F032          	movff	tablat,eval_poly@res+1
 12267  002214  000A               	tblrd		*-
 12268  002216  CFF5 F033          	movff	tablat,eval_poly@res+2
 12269  00221A  D03E               	goto	i2l3480
 12270  00221C                     i2l3478:
 12271  00221C  C031  F010         	movff	eval_poly@res,i2___ftmul@f2
 12272  002220  C032  F011         	movff	eval_poly@res+1,i2___ftmul@f2+1
 12273  002224  C033  F012         	movff	eval_poly@res+2,i2___ftmul@f2+2
 12274  002228  C028  F00D         	movff	eval_poly@x,i2___ftmul@f1
 12275  00222C  C029  F00E         	movff	eval_poly@x+1,i2___ftmul@f1+1
 12276  002230  C02A  F00F         	movff	eval_poly@x+2,i2___ftmul@f1+2
 12277  002234  ECCF  F00D         	call	i2___ftmul	;wreg free
 12278  002238  C00D  F01C         	movff	?i2___ftmul,___ftadd@f1
 12279  00223C  C00E  F01D         	movff	?i2___ftmul+1,___ftadd@f1+1
 12280  002240  C00F  F01E         	movff	?i2___ftmul+2,___ftadd@f1+2
 12281  002244  0E00               	movlw	0
 12282  002246  6E04               	movwf	i2___wmul@multiplicand+1,c
 12283  002248  0E03               	movlw	3
 12284  00224A  6E03               	movwf	i2___wmul@multiplicand,c
 12285  00224C  062D               	decf	eval_poly@n,f,c
 12286  00224E  A0D8               	btfss	status,0,c
 12287  002250  062E               	decf	eval_poly@n+1,f,c
 12288  002252  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12289  002256  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12290  00225A  EC01  F018         	call	i2___wmul	;wreg free
 12291  00225E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12292  002262  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12293  002266  5001               	movf	?i2___wmul,w,c
 12294  002268  262F               	addwf	??_eval_poly,f,c
 12295  00226A  5002               	movf	?i2___wmul+1,w,c
 12296  00226C  2230               	addwfc	??_eval_poly+1,f,c
 12297  00226E  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12298  002272  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12299  002276                     	if	0	;tblptru may be non-zero
 12300  002276                     	endif
 12301  002276                     	if	0	;tblptru may be non-zero
 12302  002276                     	endif
 12303  002276  0009               	tblrd		*+
 12304  002278  CFF5 F01F          	movff	tablat,___ftadd@f2
 12305  00227C  0009               	tblrd		*+
 12306  00227E  CFF5 F020          	movff	tablat,___ftadd@f2+1
 12307  002282  000A               	tblrd		*-
 12308  002284  CFF5 F021          	movff	tablat,___ftadd@f2+2
 12309  002288  EC6B  F008         	call	___ftadd	;wreg free
 12310  00228C  C01C  F031         	movff	?___ftadd,eval_poly@res
 12311  002290  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 12312  002294  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 12313  002298                     i2l3480:
 12314  002298  502D               	movf	eval_poly@n,w,c
 12315  00229A  102E               	iorwf	eval_poly@n+1,w,c
 12316  00229C  A4D8               	btfss	status,2,c
 12317  00229E  D7BE               	goto	i2l3478
 12318  0022A0  C031  F028         	movff	eval_poly@res,?_eval_poly
 12319  0022A4  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 12320  0022A8  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 12321  0022AC  0012               	return		;funcret
 12322  0022AE                     __end_of_eval_poly:
 12323                           	opt stack 0
 12324                           pclatu	equ	0xFFB
 12325                           pclath	equ	0xFFA
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           intcon	equ	0xFF2
 12333                           intcon2	equ	0xFF1
 12334                           intcon3	equ	0xFF0
 12335                           postinc0	equ	0xFEE
 12336                           fsr0h	equ	0xFEA
 12337                           fsr0l	equ	0xFE9
 12338                           wreg	equ	0xFE8
 12339                           postinc1	equ	0xFE6
 12340                           postdec1	equ	0xFE5
 12341                           fsr1h	equ	0xFE2
 12342                           fsr1l	equ	0xFE1
 12343                           indf2	equ	0xFDF
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           fsr2h	equ	0xFDA
 12347                           fsr2l	equ	0xFD9
 12348                           status	equ	0xFD8
 12349                           
 12350 ;; *************** function i2___wmul *****************
 12351 ;; Defined at:
 12352 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;  multiplier      2    0[COMRAM] unsigned int 
 12355 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;  __wmul          2    4[COMRAM] unsigned int 
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  2    0[COMRAM] unsigned int 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0, prodl, prodh
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;Total ram usage:        6 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; This function calls:
 12374 ;;		Nothing
 12375 ;; This function is called by:
 12376 ;;		_isr
 12377 ;;		_eval_poly
 12378 ;;		i2_printf
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text61
 12383  003002                     __ptext61:
 12384                           	opt stack 0
 12385  003002                     i2___wmul:
 12386                           	opt stack 24
 12387                           
 12388                           ;incstack = 0
 12389  003002  5001               	movf	i2___wmul@multiplier,w,c
 12390  003004  0203               	mulwf	i2___wmul@multiplicand,c
 12391  003006  CFF3 F005          	movff	prodl,i2___wmul@product
 12392  00300A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12393  00300E  5001               	movf	i2___wmul@multiplier,w,c
 12394  003010  0204               	mulwf	i2___wmul@multiplicand+1,c
 12395  003012  50F3               	movf	prodl,w,c
 12396  003014  2606               	addwf	i2___wmul@product+1,f,c
 12397  003016  5002               	movf	i2___wmul@multiplier+1,w,c
 12398  003018  0203               	mulwf	i2___wmul@multiplicand,c
 12399  00301A  50F3               	movf	prodl,w,c
 12400  00301C  2606               	addwf	i2___wmul@product+1,f,c
 12401  00301E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12402  003022  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12403  003026  0012               	return	
 12404  003028                     __end_ofi2___wmul:
 12405                           	opt stack 0
 12406                           pclatu	equ	0xFFB
 12407                           pclath	equ	0xFFA
 12408                           tblptru	equ	0xFF8
 12409                           tblptrh	equ	0xFF7
 12410                           tblptrl	equ	0xFF6
 12411                           tablat	equ	0xFF5
 12412                           prodh	equ	0xFF4
 12413                           prodl	equ	0xFF3
 12414                           intcon	equ	0xFF2
 12415                           intcon2	equ	0xFF1
 12416                           intcon3	equ	0xFF0
 12417                           postinc0	equ	0xFEE
 12418                           fsr0h	equ	0xFEA
 12419                           fsr0l	equ	0xFE9
 12420                           wreg	equ	0xFE8
 12421                           postinc1	equ	0xFE6
 12422                           postdec1	equ	0xFE5
 12423                           fsr1h	equ	0xFE2
 12424                           fsr1l	equ	0xFE1
 12425                           indf2	equ	0xFDF
 12426                           postinc2	equ	0xFDE
 12427                           postdec2	equ	0xFDD
 12428                           fsr2h	equ	0xFDA
 12429                           fsr2l	equ	0xFD9
 12430                           status	equ	0xFD8
 12431                           
 12432 ;; *************** function i2___ftmul *****************
 12433 ;; Defined at:
 12434 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;  f1              3   12[COMRAM] float 
 12437 ;;  f2              3   15[COMRAM] float 
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;  __ftmul         3   22[COMRAM] unsigned um
 12440 ;;  __ftmul         1   26[COMRAM] unsigned char 
 12441 ;;  __ftmul         1   25[COMRAM] unsigned char 
 12442 ;;  __ftmul         1   21[COMRAM] unsigned char 
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  3   12[COMRAM] float 
 12445 ;; Registers used:
 12446 ;;		wreg, status,2, status,0, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;Total ram usage:       15 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    1
 12459 ;; This function calls:
 12460 ;;		i2___ftpack
 12461 ;; This function is called by:
 12462 ;;		_dec_to_hex
 12463 ;;		_pow
 12464 ;;		_exp
 12465 ;;		_log
 12466 ;;		_eval_poly
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           	psect	text62
 12471  001B9E                     __ptext62:
 12472                           	opt stack 0
 12473  001B9E                     i2___ftmul:
 12474                           	opt stack 23
 12475                           
 12476                           ;incstack = 0
 12477  001B9E  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
 12478  001BA2  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12479  001BA4  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12480  001BA6  340E               	rlcf	i2___ftmul@f1+1,w,c
 12481  001BA8  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12482  001BAA  E301               	bnc	u286_41
 12483  001BAC  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12484  001BAE                     u286_41:
 12485  001BAE  5013               	movf	??i2___ftmul,w,c
 12486  001BB0  6E16               	movwf	i2___ftmul@exp,c
 12487  001BB2  5016               	movf	i2___ftmul@exp,w,c
 12488  001BB4  A4D8               	btfss	status,2,c
 12489  001BB6  D007               	goto	i2l3330
 12490  001BB8  0E00               	movlw	0
 12491  001BBA  6E0D               	movwf	?i2___ftmul,c
 12492  001BBC  0E00               	movlw	0
 12493  001BBE  6E0E               	movwf	?i2___ftmul+1,c
 12494  001BC0  0E00               	movlw	0
 12495  001BC2  6E0F               	movwf	?i2___ftmul+2,c
 12496  001BC4  0012               	return	
 12497  001BC6                     i2l3330:
 12498  001BC6  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
 12499  001BCA  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
 12500  001BCC  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
 12501  001BCE  3411               	rlcf	i2___ftmul@f2+1,w,c
 12502  001BD0  3613               	rlcf	??i2___ftmul& (0+255),f,c
 12503  001BD2  E301               	bnc	u288_41
 12504  001BD4  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
 12505  001BD6                     u288_41:
 12506  001BD6  5013               	movf	??i2___ftmul,w,c
 12507  001BD8  6E1B               	movwf	i2___ftmul@sign,c
 12508  001BDA  501B               	movf	i2___ftmul@sign,w,c
 12509  001BDC  A4D8               	btfss	status,2,c
 12510  001BDE  D007               	goto	i2l3336
 12511  001BE0  0E00               	movlw	0
 12512  001BE2  6E0D               	movwf	?i2___ftmul,c
 12513  001BE4  0E00               	movlw	0
 12514  001BE6  6E0E               	movwf	?i2___ftmul+1,c
 12515  001BE8  0E00               	movlw	0
 12516  001BEA  6E0F               	movwf	?i2___ftmul+2,c
 12517  001BEC  0012               	return	
 12518  001BEE                     i2l3336:
 12519  001BEE  501B               	movf	i2___ftmul@sign,w,c
 12520  001BF0  0F7B               	addlw	123
 12521  001BF2  2616               	addwf	i2___ftmul@exp,f,c
 12522  001BF4  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 12523  001BF8  5012               	movf	i2___ftmul@f2+2,w,c
 12524  001BFA  1A1B               	xorwf	i2___ftmul@sign,f,c
 12525  001BFC  0E80               	movlw	128
 12526  001BFE  161B               	andwf	i2___ftmul@sign,f,c
 12527  001C00  8E0E               	bsf	i2___ftmul@f1+1,7,c
 12528  001C02  8E11               	bsf	i2___ftmul@f2+1,7,c
 12529  001C04  0EFF               	movlw	255
 12530  001C06  1610               	andwf	i2___ftmul@f2,f,c
 12531  001C08  0EFF               	movlw	255
 12532  001C0A  1611               	andwf	i2___ftmul@f2+1,f,c
 12533  001C0C  0E00               	movlw	0
 12534  001C0E  1612               	andwf	i2___ftmul@f2+2,f,c
 12535  001C10  0E00               	movlw	0
 12536  001C12  6E17               	movwf	i2___ftmul@f3_as_product,c
 12537  001C14  0E00               	movlw	0
 12538  001C16  6E18               	movwf	i2___ftmul@f3_as_product+1,c
 12539  001C18  0E00               	movlw	0
 12540  001C1A  6E19               	movwf	i2___ftmul@f3_as_product+2,c
 12541  001C1C  0E07               	movlw	7
 12542  001C1E  6E1A               	movwf	i2___ftmul@cntr,c
 12543  001C20                     i2l3350:
 12544  001C20  A00D               	btfss	i2___ftmul@f1,0,c
 12545  001C22  D006               	goto	i2l3354
 12546  001C24  5010               	movf	i2___ftmul@f2,w,c
 12547  001C26  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12548  001C28  5011               	movf	i2___ftmul@f2+1,w,c
 12549  001C2A  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12550  001C2C  5012               	movf	i2___ftmul@f2+2,w,c
 12551  001C2E  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12552  001C30                     i2l3354:
 12553  001C30  90D8               	bcf	status,0,c
 12554  001C32  320F               	rrcf	i2___ftmul@f1+2,f,c
 12555  001C34  320E               	rrcf	i2___ftmul@f1+1,f,c
 12556  001C36  320D               	rrcf	i2___ftmul@f1,f,c
 12557  001C38  90D8               	bcf	status,0,c
 12558  001C3A  3610               	rlcf	i2___ftmul@f2,f,c
 12559  001C3C  3611               	rlcf	i2___ftmul@f2+1,f,c
 12560  001C3E  3612               	rlcf	i2___ftmul@f2+2,f,c
 12561  001C40  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12562  001C42  D7EE               	goto	i2l3350
 12563  001C44  0E09               	movlw	9
 12564  001C46  6E1A               	movwf	i2___ftmul@cntr,c
 12565  001C48                     i2l3360:
 12566  001C48  A00D               	btfss	i2___ftmul@f1,0,c
 12567  001C4A  D006               	goto	i2l3364
 12568  001C4C  5010               	movf	i2___ftmul@f2,w,c
 12569  001C4E  2617               	addwf	i2___ftmul@f3_as_product,f,c
 12570  001C50  5011               	movf	i2___ftmul@f2+1,w,c
 12571  001C52  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
 12572  001C54  5012               	movf	i2___ftmul@f2+2,w,c
 12573  001C56  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
 12574  001C58                     i2l3364:
 12575  001C58  90D8               	bcf	status,0,c
 12576  001C5A  320F               	rrcf	i2___ftmul@f1+2,f,c
 12577  001C5C  320E               	rrcf	i2___ftmul@f1+1,f,c
 12578  001C5E  320D               	rrcf	i2___ftmul@f1,f,c
 12579  001C60  90D8               	bcf	status,0,c
 12580  001C62  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
 12581  001C64  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
 12582  001C66  3217               	rrcf	i2___ftmul@f3_as_product,f,c
 12583  001C68  2E1A               	decfsz	i2___ftmul@cntr,f,c
 12584  001C6A  D7EE               	goto	i2l3360
 12585  001C6C  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 12586  001C70  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 12587  001C74  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 12588  001C78  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 12589  001C7C  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 12590  001C80  EC7C  F012         	call	i2___ftpack	;wreg free
 12591  001C84  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
 12592  001C88  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
 12593  001C8C  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
 12594  001C90  0012               	return	
 12595  001C92                     __end_ofi2___ftmul:
 12596                           	opt stack 0
 12597                           pclatu	equ	0xFFB
 12598                           pclath	equ	0xFFA
 12599                           tblptru	equ	0xFF8
 12600                           tblptrh	equ	0xFF7
 12601                           tblptrl	equ	0xFF6
 12602                           tablat	equ	0xFF5
 12603                           prodh	equ	0xFF4
 12604                           prodl	equ	0xFF3
 12605                           intcon	equ	0xFF2
 12606                           intcon2	equ	0xFF1
 12607                           intcon3	equ	0xFF0
 12608                           postinc0	equ	0xFEE
 12609                           fsr0h	equ	0xFEA
 12610                           fsr0l	equ	0xFE9
 12611                           wreg	equ	0xFE8
 12612                           postinc1	equ	0xFE6
 12613                           postdec1	equ	0xFE5
 12614                           fsr1h	equ	0xFE2
 12615                           fsr1l	equ	0xFE1
 12616                           indf2	equ	0xFDF
 12617                           postinc2	equ	0xFDE
 12618                           postdec2	equ	0xFDD
 12619                           fsr2h	equ	0xFDA
 12620                           fsr2l	equ	0xFD9
 12621                           status	equ	0xFD8
 12622                           
 12623 ;; *************** function ___ftsub *****************
 12624 ;; Defined at:
 12625 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;  f1              3   39[COMRAM] float 
 12628 ;;  f2              3   42[COMRAM] float 
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;		None
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  3   39[COMRAM] float 
 12633 ;; Registers used:
 12634 ;;		wreg, status,2, status,0, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12640 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;Total ram usage:        6 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    2
 12647 ;; This function calls:
 12648 ;;		___ftadd
 12649 ;; This function is called by:
 12650 ;;		_exp
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           	psect	text63
 12655  002E62                     __ptext63:
 12656                           	opt stack 0
 12657  002E62                     ___ftsub:
 12658                           	opt stack 20
 12659                           
 12660                           ;incstack = 0
 12661  002E62  502B               	movf	___ftsub@f2,w,c
 12662  002E64  102C               	iorwf	___ftsub@f2+1,w,c
 12663  002E66  102D               	iorwf	___ftsub@f2+2,w,c
 12664  002E68  B4D8               	btfsc	status,2,c
 12665  002E6A  D006               	goto	i2l3444
 12666  002E6C  0E00               	movlw	0
 12667  002E6E  1A2B               	xorwf	___ftsub@f2,f,c
 12668  002E70  0E00               	movlw	0
 12669  002E72  1A2C               	xorwf	___ftsub@f2+1,f,c
 12670  002E74  0E80               	movlw	128
 12671  002E76  1A2D               	xorwf	___ftsub@f2+2,f,c
 12672  002E78                     i2l3444:
 12673  002E78  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 12674  002E7C  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 12675  002E80  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 12676  002E84  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 12677  002E88  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 12678  002E8C  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 12679  002E90  EC6B  F008         	call	___ftadd	;wreg free
 12680  002E94  C01C  F028         	movff	?___ftadd,?___ftsub
 12681  002E98  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 12682  002E9C  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 12683  002EA0  0012               	return	
 12684  002EA2                     __end_of___ftsub:
 12685                           	opt stack 0
 12686                           pclatu	equ	0xFFB
 12687                           pclath	equ	0xFFA
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           intcon	equ	0xFF2
 12695                           intcon2	equ	0xFF1
 12696                           intcon3	equ	0xFF0
 12697                           postinc0	equ	0xFEE
 12698                           fsr0h	equ	0xFEA
 12699                           fsr0l	equ	0xFE9
 12700                           wreg	equ	0xFE8
 12701                           postinc1	equ	0xFE6
 12702                           postdec1	equ	0xFE5
 12703                           fsr1h	equ	0xFE2
 12704                           fsr1l	equ	0xFE1
 12705                           indf2	equ	0xFDF
 12706                           postinc2	equ	0xFDE
 12707                           postdec2	equ	0xFDD
 12708                           fsr2h	equ	0xFDA
 12709                           fsr2l	equ	0xFD9
 12710                           status	equ	0xFD8
 12711                           
 12712 ;; *************** function ___ftadd *****************
 12713 ;; Defined at:
 12714 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  f1              3   27[COMRAM] float 
 12717 ;;  f2              3   30[COMRAM] float 
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  exp1            1   38[COMRAM] unsigned char 
 12720 ;;  exp2            1   37[COMRAM] unsigned char 
 12721 ;;  sign            1   36[COMRAM] unsigned char 
 12722 ;; Return value:  Size  Location     Type
 12723 ;;                  3   27[COMRAM] float 
 12724 ;; Registers used:
 12725 ;;		wreg, status,2, status,0, cstack
 12726 ;; Tracked objects:
 12727 ;;		On entry : 0/0
 12728 ;;		On exit  : 0/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12731 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;Total ram usage:       12 bytes
 12736 ;; Hardware stack levels used:    1
 12737 ;; Hardware stack levels required when called:    1
 12738 ;; This function calls:
 12739 ;;		i2___ftpack
 12740 ;; This function is called by:
 12741 ;;		_dec_to_hex
 12742 ;;		___ftsub
 12743 ;;		_floor
 12744 ;;		_log
 12745 ;;		_eval_poly
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           	psect	text64
 12750  0010D6                     __ptext64:
 12751                           	opt stack 0
 12752  0010D6                     ___ftadd:
 12753                           	opt stack 20
 12754                           
 12755                           ;incstack = 0
 12756  0010D6  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 12757  0010DA  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12758  0010DC  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12759  0010DE  341D               	rlcf	___ftadd@f1+1,w,c
 12760  0010E0  3622               	rlcf	??___ftadd& (0+255),f,c
 12761  0010E2  E301               	bnc	u252_41
 12762  0010E4  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12763  0010E6                     u252_41:
 12764  0010E6  5022               	movf	??___ftadd,w,c
 12765  0010E8  6E27               	movwf	___ftadd@exp1,c
 12766  0010EA  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 12767  0010EE  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12768  0010F0  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12769  0010F2  3420               	rlcf	___ftadd@f2+1,w,c
 12770  0010F4  3622               	rlcf	??___ftadd& (0+255),f,c
 12771  0010F6  E301               	bnc	u253_41
 12772  0010F8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12773  0010FA                     u253_41:
 12774  0010FA  5022               	movf	??___ftadd,w,c
 12775  0010FC  6E26               	movwf	___ftadd@exp2,c
 12776  0010FE  5027               	movf	___ftadd@exp1,w,c
 12777  001100  B4D8               	btfsc	status,2,c
 12778  001102  D00B               	goto	i2l716
 12779  001104  5026               	movf	___ftadd@exp2,w,c
 12780  001106  5C27               	subwf	___ftadd@exp1,w,c
 12781  001108  B0D8               	btfsc	status,0,c
 12782  00110A  D00E               	goto	i2l3172
 12783  00110C  5027               	movf	___ftadd@exp1,w,c
 12784  00110E  0800               	sublw	0
 12785  001110  2426               	addwf	___ftadd@exp2,w,c
 12786  001112  6E22               	movwf	??___ftadd& (0+255),c
 12787  001114  0E18               	movlw	24
 12788  001116  6422               	cpfsgt	??___ftadd,c
 12789  001118  D007               	goto	i2l3172
 12790  00111A                     i2l716:
 12791  00111A  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 12792  00111E  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 12793  001122  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 12794  001126  0012               	return	
 12795  001128                     i2l3172:
 12796  001128  5026               	movf	___ftadd@exp2,w,c
 12797  00112A  B4D8               	btfsc	status,2,c
 12798  00112C  D00B               	goto	i2l720
 12799  00112E  5027               	movf	___ftadd@exp1,w,c
 12800  001130  5C26               	subwf	___ftadd@exp2,w,c
 12801  001132  B0D8               	btfsc	status,0,c
 12802  001134  D00E               	goto	i2l3178
 12803  001136  5026               	movf	___ftadd@exp2,w,c
 12804  001138  0800               	sublw	0
 12805  00113A  2427               	addwf	___ftadd@exp1,w,c
 12806  00113C  6E22               	movwf	??___ftadd& (0+255),c
 12807  00113E  0E18               	movlw	24
 12808  001140  6422               	cpfsgt	??___ftadd,c
 12809  001142  D007               	goto	i2l3178
 12810  001144                     i2l720:
 12811  001144  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 12812  001148  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 12813  00114C  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 12814  001150  0012               	return	
 12815  001152                     i2l3178:
 12816  001152  0E06               	movlw	6
 12817  001154  6E25               	movwf	___ftadd@sign,c
 12818  001156  BE1E               	btfsc	___ftadd@f1+2,7,c
 12819  001158  8E25               	bsf	___ftadd@sign,7,c
 12820  00115A  BE21               	btfsc	___ftadd@f2+2,7,c
 12821  00115C  8C25               	bsf	___ftadd@sign,6,c
 12822  00115E  8E1D               	bsf	___ftadd@f1+1,7,c
 12823  001160  0EFF               	movlw	255
 12824  001162  161C               	andwf	___ftadd@f1,f,c
 12825  001164  0EFF               	movlw	255
 12826  001166  161D               	andwf	___ftadd@f1+1,f,c
 12827  001168  0E00               	movlw	0
 12828  00116A  161E               	andwf	___ftadd@f1+2,f,c
 12829  00116C  8E20               	bsf	___ftadd@f2+1,7,c
 12830  00116E  0EFF               	movlw	255
 12831  001170  161F               	andwf	___ftadd@f2,f,c
 12832  001172  0EFF               	movlw	255
 12833  001174  1620               	andwf	___ftadd@f2+1,f,c
 12834  001176  0E00               	movlw	0
 12835  001178  1621               	andwf	___ftadd@f2+2,f,c
 12836  00117A  5026               	movf	___ftadd@exp2,w,c
 12837  00117C  5C27               	subwf	___ftadd@exp1,w,c
 12838  00117E  B0D8               	btfsc	status,0,c
 12839  001180  D01B               	goto	i2l3204
 12840  001182                     i2l3194:
 12841  001182  90D8               	bcf	status,0,c
 12842  001184  361F               	rlcf	___ftadd@f2,f,c
 12843  001186  3620               	rlcf	___ftadd@f2+1,f,c
 12844  001188  3621               	rlcf	___ftadd@f2+2,f,c
 12845  00118A  0626               	decf	___ftadd@exp2,f,c
 12846  00118C  5027               	movf	___ftadd@exp1,w,c
 12847  00118E  1826               	xorwf	___ftadd@exp2,w,c
 12848  001190  B4D8               	btfsc	status,2,c
 12849  001192  D00D               	goto	i2l3202
 12850  001194  0625               	decf	___ftadd@sign,f,c
 12851  001196  C025  F022         	movff	___ftadd@sign,??___ftadd
 12852  00119A  0E07               	movlw	7
 12853  00119C  1622               	andwf	??___ftadd,f,c
 12854  00119E  B4D8               	btfsc	status,2,c
 12855  0011A0  D006               	goto	i2l3202
 12856  0011A2  D7EF               	goto	i2l3194
 12857  0011A4                     i2l3200:
 12858  0011A4  90D8               	bcf	status,0,c
 12859  0011A6  321E               	rrcf	___ftadd@f1+2,f,c
 12860  0011A8  321D               	rrcf	___ftadd@f1+1,f,c
 12861  0011AA  321C               	rrcf	___ftadd@f1,f,c
 12862  0011AC  2A27               	incf	___ftadd@exp1,f,c
 12863  0011AE                     i2l3202:
 12864  0011AE  5026               	movf	___ftadd@exp2,w,c
 12865  0011B0  1827               	xorwf	___ftadd@exp1,w,c
 12866  0011B2  B4D8               	btfsc	status,2,c
 12867  0011B4  D01F               	goto	i2l731
 12868  0011B6  D7F6               	goto	i2l3200
 12869  0011B8                     i2l3204:
 12870  0011B8  5027               	movf	___ftadd@exp1,w,c
 12871  0011BA  5C26               	subwf	___ftadd@exp2,w,c
 12872  0011BC  B0D8               	btfsc	status,0,c
 12873  0011BE  D01A               	goto	i2l731
 12874  0011C0                     i2l3206:
 12875  0011C0  90D8               	bcf	status,0,c
 12876  0011C2  361C               	rlcf	___ftadd@f1,f,c
 12877  0011C4  361D               	rlcf	___ftadd@f1+1,f,c
 12878  0011C6  361E               	rlcf	___ftadd@f1+2,f,c
 12879  0011C8  0627               	decf	___ftadd@exp1,f,c
 12880  0011CA  5027               	movf	___ftadd@exp1,w,c
 12881  0011CC  1826               	xorwf	___ftadd@exp2,w,c
 12882  0011CE  B4D8               	btfsc	status,2,c
 12883  0011D0  D00D               	goto	i2l3214
 12884  0011D2  0625               	decf	___ftadd@sign,f,c
 12885  0011D4  C025  F022         	movff	___ftadd@sign,??___ftadd
 12886  0011D8  0E07               	movlw	7
 12887  0011DA  1622               	andwf	??___ftadd,f,c
 12888  0011DC  B4D8               	btfsc	status,2,c
 12889  0011DE  D006               	goto	i2l3214
 12890  0011E0  D7EF               	goto	i2l3206
 12891  0011E2                     i2l3212:
 12892  0011E2  90D8               	bcf	status,0,c
 12893  0011E4  3221               	rrcf	___ftadd@f2+2,f,c
 12894  0011E6  3220               	rrcf	___ftadd@f2+1,f,c
 12895  0011E8  321F               	rrcf	___ftadd@f2,f,c
 12896  0011EA  2A26               	incf	___ftadd@exp2,f,c
 12897  0011EC                     i2l3214:
 12898  0011EC  5026               	movf	___ftadd@exp2,w,c
 12899  0011EE  1827               	xorwf	___ftadd@exp1,w,c
 12900  0011F0  A4D8               	btfss	status,2,c
 12901  0011F2  D7F7               	goto	i2l3212
 12902  0011F4                     i2l731:
 12903  0011F4  AE25               	btfss	___ftadd@sign,7,c
 12904  0011F6  D00C               	goto	i2l740
 12905  0011F8  0EFF               	movlw	255
 12906  0011FA  1A1C               	xorwf	___ftadd@f1,f,c
 12907  0011FC  0EFF               	movlw	255
 12908  0011FE  1A1D               	xorwf	___ftadd@f1+1,f,c
 12909  001200  0EFF               	movlw	255
 12910  001202  1A1E               	xorwf	___ftadd@f1+2,f,c
 12911  001204  0E01               	movlw	1
 12912  001206  261C               	addwf	___ftadd@f1,f,c
 12913  001208  0E00               	movlw	0
 12914  00120A  221D               	addwfc	___ftadd@f1+1,f,c
 12915  00120C  0E00               	movlw	0
 12916  00120E  221E               	addwfc	___ftadd@f1+2,f,c
 12917  001210                     i2l740:
 12918  001210  AC25               	btfss	___ftadd@sign,6,c
 12919  001212  D00C               	goto	i2l3220
 12920  001214  0EFF               	movlw	255
 12921  001216  1A1F               	xorwf	___ftadd@f2,f,c
 12922  001218  0EFF               	movlw	255
 12923  00121A  1A20               	xorwf	___ftadd@f2+1,f,c
 12924  00121C  0EFF               	movlw	255
 12925  00121E  1A21               	xorwf	___ftadd@f2+2,f,c
 12926  001220  0E01               	movlw	1
 12927  001222  261F               	addwf	___ftadd@f2,f,c
 12928  001224  0E00               	movlw	0
 12929  001226  2220               	addwfc	___ftadd@f2+1,f,c
 12930  001228  0E00               	movlw	0
 12931  00122A  2221               	addwfc	___ftadd@f2+2,f,c
 12932  00122C                     i2l3220:
 12933  00122C  0E00               	movlw	0
 12934  00122E  6E25               	movwf	___ftadd@sign,c
 12935  001230  501C               	movf	___ftadd@f1,w,c
 12936  001232  261F               	addwf	___ftadd@f2,f,c
 12937  001234  501D               	movf	___ftadd@f1+1,w,c
 12938  001236  2220               	addwfc	___ftadd@f2+1,f,c
 12939  001238  501E               	movf	___ftadd@f1+2,w,c
 12940  00123A  2221               	addwfc	___ftadd@f2+2,f,c
 12941  00123C  AE21               	btfss	___ftadd@f2+2,7,c
 12942  00123E  D00E               	goto	i2l3230
 12943  001240  0EFF               	movlw	255
 12944  001242  1A1F               	xorwf	___ftadd@f2,f,c
 12945  001244  0EFF               	movlw	255
 12946  001246  1A20               	xorwf	___ftadd@f2+1,f,c
 12947  001248  0EFF               	movlw	255
 12948  00124A  1A21               	xorwf	___ftadd@f2+2,f,c
 12949  00124C  0E01               	movlw	1
 12950  00124E  261F               	addwf	___ftadd@f2,f,c
 12951  001250  0E00               	movlw	0
 12952  001252  2220               	addwfc	___ftadd@f2+1,f,c
 12953  001254  0E00               	movlw	0
 12954  001256  2221               	addwfc	___ftadd@f2+2,f,c
 12955  001258  0E01               	movlw	1
 12956  00125A  6E25               	movwf	___ftadd@sign,c
 12957  00125C                     i2l3230:
 12958  00125C  C01F  F001         	movff	___ftadd@f2,i2___ftpack@arg
 12959  001260  C020  F002         	movff	___ftadd@f2+1,i2___ftpack@arg+1
 12960  001264  C021  F003         	movff	___ftadd@f2+2,i2___ftpack@arg+2
 12961  001268  C027  F004         	movff	___ftadd@exp1,i2___ftpack@exp
 12962  00126C  C025  F005         	movff	___ftadd@sign,i2___ftpack@sign
 12963  001270  EC7C  F012         	call	i2___ftpack	;wreg free
 12964  001274  C001  F01C         	movff	?i2___ftpack,?___ftadd
 12965  001278  C002  F01D         	movff	?i2___ftpack+1,?___ftadd+1
 12966  00127C  C003  F01E         	movff	?i2___ftpack+2,?___ftadd+2
 12967  001280  0012               	return	
 12968  001282                     __end_of___ftadd:
 12969                           	opt stack 0
 12970                           pclatu	equ	0xFFB
 12971                           pclath	equ	0xFFA
 12972                           tblptru	equ	0xFF8
 12973                           tblptrh	equ	0xFF7
 12974                           tblptrl	equ	0xFF6
 12975                           tablat	equ	0xFF5
 12976                           prodh	equ	0xFF4
 12977                           prodl	equ	0xFF3
 12978                           intcon	equ	0xFF2
 12979                           intcon2	equ	0xFF1
 12980                           intcon3	equ	0xFF0
 12981                           postinc0	equ	0xFEE
 12982                           fsr0h	equ	0xFEA
 12983                           fsr0l	equ	0xFE9
 12984                           wreg	equ	0xFE8
 12985                           postinc1	equ	0xFE6
 12986                           postdec1	equ	0xFE5
 12987                           fsr1h	equ	0xFE2
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function ___ftneg *****************
 12997 ;; Defined at:
 12998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  f1              3    0[COMRAM] float 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;		None
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  3    0[COMRAM] float 
 13005 ;; Registers used:
 13006 ;;		wreg, status,2, status,0
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13012 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;Total ram usage:        3 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; This function calls:
 13019 ;;		Nothing
 13020 ;; This function is called by:
 13021 ;;		_pow
 13022 ;;		_exp
 13023 ;; This function uses a non-reentrant model
 13024 ;;
 13025                           
 13026                           	psect	text65
 13027  003028                     __ptext65:
 13028                           	opt stack 0
 13029  003028                     ___ftneg:
 13030                           	opt stack 22
 13031                           
 13032                           ;incstack = 0
 13033  003028  5001               	movf	___ftneg@f1,w,c
 13034  00302A  1002               	iorwf	___ftneg@f1+1,w,c
 13035  00302C  1003               	iorwf	___ftneg@f1+2,w,c
 13036  00302E  B4D8               	btfsc	status,2,c
 13037  003030  D006               	goto	i2l773
 13038  003032  0E00               	movlw	0
 13039  003034  1A01               	xorwf	___ftneg@f1,f,c
 13040  003036  0E00               	movlw	0
 13041  003038  1A02               	xorwf	___ftneg@f1+1,f,c
 13042  00303A  0E80               	movlw	128
 13043  00303C  1A03               	xorwf	___ftneg@f1+2,f,c
 13044  00303E                     i2l773:
 13045  00303E  C001  F001         	movff	___ftneg@f1,?___ftneg
 13046  003042  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 13047  003046  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 13048  00304A  0012               	return		;funcret
 13049  00304C                     __end_of___ftneg:
 13050                           	opt stack 0
 13051                           pclatu	equ	0xFFB
 13052                           pclath	equ	0xFFA
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           intcon2	equ	0xFF1
 13061                           intcon3	equ	0xFF0
 13062                           postinc0	equ	0xFEE
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           postinc1	equ	0xFE6
 13067                           postdec1	equ	0xFE5
 13068                           fsr1h	equ	0xFE2
 13069                           fsr1l	equ	0xFE1
 13070                           indf2	equ	0xFDF
 13071                           postinc2	equ	0xFDE
 13072                           postdec2	equ	0xFDD
 13073                           fsr2h	equ	0xFDA
 13074                           fsr2l	equ	0xFD9
 13075                           status	equ	0xFD8
 13076                           
 13077 ;; *************** function ___ftdiv *****************
 13078 ;; Defined at:
 13079 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13080 ;; Parameters:    Size  Location     Type
 13081 ;;  f1              3    8[COMRAM] float 
 13082 ;;  f2              3   11[COMRAM] float 
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;  f3              3   18[COMRAM] float 
 13085 ;;  sign            1   22[COMRAM] unsigned char 
 13086 ;;  exp             1   21[COMRAM] unsigned char 
 13087 ;;  cntr            1   17[COMRAM] unsigned char 
 13088 ;; Return value:  Size  Location     Type
 13089 ;;                  3    8[COMRAM] float 
 13090 ;; Registers used:
 13091 ;;		wreg, status,2, status,0, cstack
 13092 ;; Tracked objects:
 13093 ;;		On entry : 0/0
 13094 ;;		On exit  : 0/0
 13095 ;;		Unchanged: 0/0
 13096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13097 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13098 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13099 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;Total ram usage:       15 bytes
 13102 ;; Hardware stack levels used:    1
 13103 ;; Hardware stack levels required when called:    1
 13104 ;; This function calls:
 13105 ;;		i2___ftpack
 13106 ;; This function is called by:
 13107 ;;		_exp
 13108 ;; This function uses a non-reentrant model
 13109 ;;
 13110                           
 13111                           	psect	text66
 13112  001E6C                     __ptext66:
 13113                           	opt stack 0
 13114  001E6C                     ___ftdiv:
 13115                           	opt stack 21
 13116                           
 13117                           ;incstack = 0
 13118  001E6C  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 13119  001E70  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13120  001E72  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13121  001E74  340A               	rlcf	___ftdiv@f1+1,w,c
 13122  001E76  360F               	rlcf	??___ftdiv& (0+255),f,c
 13123  001E78  E301               	bnc	u294_41
 13124  001E7A  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13125  001E7C                     u294_41:
 13126  001E7C  500F               	movf	??___ftdiv,w,c
 13127  001E7E  6E16               	movwf	___ftdiv@exp,c
 13128  001E80  5016               	movf	___ftdiv@exp,w,c
 13129  001E82  A4D8               	btfss	status,2,c
 13130  001E84  D007               	goto	i2l3400
 13131  001E86  0E00               	movlw	0
 13132  001E88  6E09               	movwf	?___ftdiv,c
 13133  001E8A  0E00               	movlw	0
 13134  001E8C  6E0A               	movwf	?___ftdiv+1,c
 13135  001E8E  0E00               	movlw	0
 13136  001E90  6E0B               	movwf	?___ftdiv+2,c
 13137  001E92  0012               	return	
 13138  001E94                     i2l3400:
 13139  001E94  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 13140  001E98  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13141  001E9A  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13142  001E9C  340D               	rlcf	___ftdiv@f2+1,w,c
 13143  001E9E  360F               	rlcf	??___ftdiv& (0+255),f,c
 13144  001EA0  E301               	bnc	u296_41
 13145  001EA2  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13146  001EA4                     u296_41:
 13147  001EA4  500F               	movf	??___ftdiv,w,c
 13148  001EA6  6E17               	movwf	___ftdiv@sign,c
 13149  001EA8  5017               	movf	___ftdiv@sign,w,c
 13150  001EAA  A4D8               	btfss	status,2,c
 13151  001EAC  D007               	goto	i2l3406
 13152  001EAE  0E00               	movlw	0
 13153  001EB0  6E09               	movwf	?___ftdiv,c
 13154  001EB2  0E00               	movlw	0
 13155  001EB4  6E0A               	movwf	?___ftdiv+1,c
 13156  001EB6  0E00               	movlw	0
 13157  001EB8  6E0B               	movwf	?___ftdiv+2,c
 13158  001EBA  0012               	return	
 13159  001EBC                     i2l3406:
 13160  001EBC  0E00               	movlw	0
 13161  001EBE  6E13               	movwf	___ftdiv@f3,c
 13162  001EC0  0E00               	movlw	0
 13163  001EC2  6E14               	movwf	___ftdiv@f3+1,c
 13164  001EC4  0E00               	movlw	0
 13165  001EC6  6E15               	movwf	___ftdiv@f3+2,c
 13166  001EC8  5017               	movf	___ftdiv@sign,w,c
 13167  001ECA  0F89               	addlw	137
 13168  001ECC  5E16               	subwf	___ftdiv@exp,f,c
 13169  001ECE  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 13170  001ED2  500E               	movf	___ftdiv@f2+2,w,c
 13171  001ED4  1A17               	xorwf	___ftdiv@sign,f,c
 13172  001ED6  0E80               	movlw	128
 13173  001ED8  1617               	andwf	___ftdiv@sign,f,c
 13174  001EDA  8E0A               	bsf	___ftdiv@f1+1,7,c
 13175  001EDC  0EFF               	movlw	255
 13176  001EDE  1609               	andwf	___ftdiv@f1,f,c
 13177  001EE0  0EFF               	movlw	255
 13178  001EE2  160A               	andwf	___ftdiv@f1+1,f,c
 13179  001EE4  0E00               	movlw	0
 13180  001EE6  160B               	andwf	___ftdiv@f1+2,f,c
 13181  001EE8  8E0D               	bsf	___ftdiv@f2+1,7,c
 13182  001EEA  0EFF               	movlw	255
 13183  001EEC  160C               	andwf	___ftdiv@f2,f,c
 13184  001EEE  0EFF               	movlw	255
 13185  001EF0  160D               	andwf	___ftdiv@f2+1,f,c
 13186  001EF2  0E00               	movlw	0
 13187  001EF4  160E               	andwf	___ftdiv@f2+2,f,c
 13188  001EF6  0E18               	movlw	24
 13189  001EF8  6E12               	movwf	___ftdiv@cntr,c
 13190  001EFA                     i2l3426:
 13191  001EFA  90D8               	bcf	status,0,c
 13192  001EFC  3613               	rlcf	___ftdiv@f3,f,c
 13193  001EFE  3614               	rlcf	___ftdiv@f3+1,f,c
 13194  001F00  3615               	rlcf	___ftdiv@f3+2,f,c
 13195  001F02  500C               	movf	___ftdiv@f2,w,c
 13196  001F04  5C09               	subwf	___ftdiv@f1,w,c
 13197  001F06  500D               	movf	___ftdiv@f2+1,w,c
 13198  001F08  580A               	subwfb	___ftdiv@f1+1,w,c
 13199  001F0A  500E               	movf	___ftdiv@f2+2,w,c
 13200  001F0C  580B               	subwfb	___ftdiv@f1+2,w,c
 13201  001F0E  A0D8               	btfss	status,0,c
 13202  001F10  D007               	goto	i2l751
 13203  001F12  500C               	movf	___ftdiv@f2,w,c
 13204  001F14  5E09               	subwf	___ftdiv@f1,f,c
 13205  001F16  500D               	movf	___ftdiv@f2+1,w,c
 13206  001F18  5A0A               	subwfb	___ftdiv@f1+1,f,c
 13207  001F1A  500E               	movf	___ftdiv@f2+2,w,c
 13208  001F1C  5A0B               	subwfb	___ftdiv@f1+2,f,c
 13209  001F1E  8013               	bsf	___ftdiv@f3,0,c
 13210  001F20                     i2l751:
 13211  001F20  90D8               	bcf	status,0,c
 13212  001F22  3609               	rlcf	___ftdiv@f1,f,c
 13213  001F24  360A               	rlcf	___ftdiv@f1+1,f,c
 13214  001F26  360B               	rlcf	___ftdiv@f1+2,f,c
 13215  001F28  2E12               	decfsz	___ftdiv@cntr,f,c
 13216  001F2A  D7E7               	goto	i2l3426
 13217  001F2C  C013  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 13218  001F30  C014  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 13219  001F34  C015  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 13220  001F38  C016  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 13221  001F3C  C017  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 13222  001F40  EC7C  F012         	call	i2___ftpack	;wreg free
 13223  001F44  C001  F009         	movff	?i2___ftpack,?___ftdiv
 13224  001F48  C002  F00A         	movff	?i2___ftpack+1,?___ftdiv+1
 13225  001F4C  C003  F00B         	movff	?i2___ftpack+2,?___ftdiv+2
 13226  001F50  0012               	return	
 13227  001F52                     __end_of___ftdiv:
 13228                           	opt stack 0
 13229                           pclatu	equ	0xFFB
 13230                           pclath	equ	0xFFA
 13231                           tblptru	equ	0xFF8
 13232                           tblptrh	equ	0xFF7
 13233                           tblptrl	equ	0xFF6
 13234                           tablat	equ	0xFF5
 13235                           prodh	equ	0xFF4
 13236                           prodl	equ	0xFF3
 13237                           intcon	equ	0xFF2
 13238                           intcon2	equ	0xFF1
 13239                           intcon3	equ	0xFF0
 13240                           postinc0	equ	0xFEE
 13241                           fsr0h	equ	0xFEA
 13242                           fsr0l	equ	0xFE9
 13243                           wreg	equ	0xFE8
 13244                           postinc1	equ	0xFE6
 13245                           postdec1	equ	0xFE5
 13246                           fsr1h	equ	0xFE2
 13247                           fsr1l	equ	0xFE1
 13248                           indf2	equ	0xFDF
 13249                           postinc2	equ	0xFDE
 13250                           postdec2	equ	0xFDD
 13251                           fsr2h	equ	0xFDA
 13252                           fsr2l	equ	0xFD9
 13253                           status	equ	0xFD8
 13254                           
 13255 ;; *************** function ___lltoft *****************
 13256 ;; Defined at:
 13257 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;  c               4    8[COMRAM] unsigned long 
 13260 ;; Auto vars:     Size  Location     Type
 13261 ;;  exp             1   16[COMRAM] unsigned char 
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  3    8[COMRAM] float 
 13264 ;; Registers used:
 13265 ;;		wreg, status,2, status,0, cstack
 13266 ;; Tracked objects:
 13267 ;;		On entry : 0/0
 13268 ;;		On exit  : 0/0
 13269 ;;		Unchanged: 0/0
 13270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13274 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;Total ram usage:        9 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    1
 13278 ;; This function calls:
 13279 ;;		i2___ftpack
 13280 ;; This function is called by:
 13281 ;;		_pow
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text67
 13286  002C3A                     __ptext67:
 13287                           	opt stack 0
 13288  002C3A                     ___lltoft:
 13289                           	opt stack 22
 13290                           
 13291                           ;incstack = 0
 13292  002C3A  0E8E               	movlw	142
 13293  002C3C  6E11               	movwf	___lltoft@exp,c
 13294  002C3E  D006               	goto	i2l3618
 13295  002C40                     i2l3616:
 13296  002C40  90D8               	bcf	status,0,c
 13297  002C42  320C               	rrcf	___lltoft@c+3,f,c
 13298  002C44  320B               	rrcf	___lltoft@c+2,f,c
 13299  002C46  320A               	rrcf	___lltoft@c+1,f,c
 13300  002C48  3209               	rrcf	___lltoft@c,f,c
 13301  002C4A  2A11               	incf	___lltoft@exp,f,c
 13302  002C4C                     i2l3618:
 13303  002C4C  0E00               	movlw	0
 13304  002C4E  1409               	andwf	___lltoft@c,w,c
 13305  002C50  6E0D               	movwf	??___lltoft& (0+255),c
 13306  002C52  0E00               	movlw	0
 13307  002C54  140A               	andwf	___lltoft@c+1,w,c
 13308  002C56  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 13309  002C58  0E00               	movlw	0
 13310  002C5A  140B               	andwf	___lltoft@c+2,w,c
 13311  002C5C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 13312  002C5E  0EFF               	movlw	255
 13313  002C60  140C               	andwf	___lltoft@c+3,w,c
 13314  002C62  6E10               	movwf	(??___lltoft+3)& (0+255),c
 13315  002C64  500D               	movf	??___lltoft,w,c
 13316  002C66  100E               	iorwf	??___lltoft+1,w,c
 13317  002C68  100F               	iorwf	??___lltoft+2,w,c
 13318  002C6A  1010               	iorwf	??___lltoft+3,w,c
 13319  002C6C  A4D8               	btfss	status,2,c
 13320  002C6E  D7E8               	goto	i2l3616
 13321  002C70  C009  F001         	movff	___lltoft@c,i2___ftpack@arg
 13322  002C74  C00A  F002         	movff	___lltoft@c+1,i2___ftpack@arg+1
 13323  002C78  C00B  F003         	movff	___lltoft@c+2,i2___ftpack@arg+2
 13324  002C7C  C011  F004         	movff	___lltoft@exp,i2___ftpack@exp
 13325  002C80  0E00               	movlw	0
 13326  002C82  6E05               	movwf	i2___ftpack@sign,c
 13327  002C84  EC7C  F012         	call	i2___ftpack	;wreg free
 13328  002C88  C001  F009         	movff	?i2___ftpack,?___lltoft
 13329  002C8C  C002  F00A         	movff	?i2___ftpack+1,?___lltoft+1
 13330  002C90  C003  F00B         	movff	?i2___ftpack+2,?___lltoft+2
 13331  002C94  0012               	return	
 13332  002C96                     __end_of___lltoft:
 13333                           	opt stack 0
 13334                           pclatu	equ	0xFFB
 13335                           pclath	equ	0xFFA
 13336                           tblptru	equ	0xFF8
 13337                           tblptrh	equ	0xFF7
 13338                           tblptrl	equ	0xFF6
 13339                           tablat	equ	0xFF5
 13340                           prodh	equ	0xFF4
 13341                           prodl	equ	0xFF3
 13342                           intcon	equ	0xFF2
 13343                           intcon2	equ	0xFF1
 13344                           intcon3	equ	0xFF0
 13345                           postinc0	equ	0xFEE
 13346                           fsr0h	equ	0xFEA
 13347                           fsr0l	equ	0xFE9
 13348                           wreg	equ	0xFE8
 13349                           postinc1	equ	0xFE6
 13350                           postdec1	equ	0xFE5
 13351                           fsr1h	equ	0xFE2
 13352                           fsr1l	equ	0xFE1
 13353                           indf2	equ	0xFDF
 13354                           postinc2	equ	0xFDE
 13355                           postdec2	equ	0xFDD
 13356                           fsr2h	equ	0xFDA
 13357                           fsr2l	equ	0xFD9
 13358                           status	equ	0xFD8
 13359                           
 13360 ;; *************** function i2___ftpack *****************
 13361 ;; Defined at:
 13362 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13363 ;; Parameters:    Size  Location     Type
 13364 ;;  arg             3    0[COMRAM] unsigned um
 13365 ;;  exp             1    3[COMRAM] unsigned char 
 13366 ;;  sign            1    4[COMRAM] unsigned char 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;		None
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  3    0[COMRAM] float 
 13371 ;; Registers used:
 13372 ;;		wreg, status,2, status,0
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13378 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;Total ram usage:        8 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; This function calls:
 13385 ;;		Nothing
 13386 ;; This function is called by:
 13387 ;;		___altoft
 13388 ;;		___ftadd
 13389 ;;		___ftdiv
 13390 ;;		___lltoft
 13391 ;;		i2___awtoft
 13392 ;;		i2___ftmul
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           	psect	text68
 13397  0024F8                     __ptext68:
 13398                           	opt stack 0
 13399  0024F8                     i2___ftpack:
 13400                           	opt stack 23
 13401                           
 13402                           ;incstack = 0
 13403  0024F8  5004               	movf	i2___ftpack@exp,w,c
 13404  0024FA  B4D8               	btfsc	status,2,c
 13405  0024FC  D005               	goto	i2l3116
 13406  0024FE  5001               	movf	i2___ftpack@arg,w,c
 13407  002500  1002               	iorwf	i2___ftpack@arg+1,w,c
 13408  002502  1003               	iorwf	i2___ftpack@arg+2,w,c
 13409  002504  A4D8               	btfss	status,2,c
 13410  002506  D00C               	goto	i2l3122
 13411  002508                     i2l3116:
 13412  002508  0E00               	movlw	0
 13413  00250A  6E01               	movwf	?i2___ftpack,c
 13414  00250C  0E00               	movlw	0
 13415  00250E  6E02               	movwf	?i2___ftpack+1,c
 13416  002510  0E00               	movlw	0
 13417  002512  6E03               	movwf	?i2___ftpack+2,c
 13418  002514  0012               	return	
 13419  002516                     i2l3120:
 13420  002516  2A04               	incf	i2___ftpack@exp,f,c
 13421  002518  90D8               	bcf	status,0,c
 13422  00251A  3203               	rrcf	i2___ftpack@arg+2,f,c
 13423  00251C  3202               	rrcf	i2___ftpack@arg+1,f,c
 13424  00251E  3201               	rrcf	i2___ftpack@arg,f,c
 13425  002520                     i2l3122:
 13426  002520  0E00               	movlw	0
 13427  002522  1401               	andwf	i2___ftpack@arg,w,c
 13428  002524  6E06               	movwf	??i2___ftpack& (0+255),c
 13429  002526  0E00               	movlw	0
 13430  002528  1402               	andwf	i2___ftpack@arg+1,w,c
 13431  00252A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13432  00252C  0EFE               	movlw	254
 13433  00252E  1403               	andwf	i2___ftpack@arg+2,w,c
 13434  002530  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13435  002532  5006               	movf	??i2___ftpack,w,c
 13436  002534  1007               	iorwf	??i2___ftpack+1,w,c
 13437  002536  1008               	iorwf	??i2___ftpack+2,w,c
 13438  002538  B4D8               	btfsc	status,2,c
 13439  00253A  D00C               	goto	i2l3128
 13440  00253C  D7EC               	goto	i2l3120
 13441  00253E                     i2l3124:
 13442  00253E  2A04               	incf	i2___ftpack@exp,f,c
 13443  002540  0E01               	movlw	1
 13444  002542  2601               	addwf	i2___ftpack@arg,f,c
 13445  002544  0E00               	movlw	0
 13446  002546  2202               	addwfc	i2___ftpack@arg+1,f,c
 13447  002548  0E00               	movlw	0
 13448  00254A  2203               	addwfc	i2___ftpack@arg+2,f,c
 13449  00254C  90D8               	bcf	status,0,c
 13450  00254E  3203               	rrcf	i2___ftpack@arg+2,f,c
 13451  002550  3202               	rrcf	i2___ftpack@arg+1,f,c
 13452  002552  3201               	rrcf	i2___ftpack@arg,f,c
 13453  002554                     i2l3128:
 13454  002554  0E00               	movlw	0
 13455  002556  1401               	andwf	i2___ftpack@arg,w,c
 13456  002558  6E06               	movwf	??i2___ftpack& (0+255),c
 13457  00255A  0E00               	movlw	0
 13458  00255C  1402               	andwf	i2___ftpack@arg+1,w,c
 13459  00255E  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13460  002560  0EFF               	movlw	255
 13461  002562  1403               	andwf	i2___ftpack@arg+2,w,c
 13462  002564  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13463  002566  5006               	movf	??i2___ftpack,w,c
 13464  002568  1007               	iorwf	??i2___ftpack+1,w,c
 13465  00256A  1008               	iorwf	??i2___ftpack+2,w,c
 13466  00256C  B4D8               	btfsc	status,2,c
 13467  00256E  D006               	goto	i2l3132
 13468  002570  D7E6               	goto	i2l3124
 13469  002572                     i2l3130:
 13470  002572  0604               	decf	i2___ftpack@exp,f,c
 13471  002574  90D8               	bcf	status,0,c
 13472  002576  3601               	rlcf	i2___ftpack@arg,f,c
 13473  002578  3602               	rlcf	i2___ftpack@arg+1,f,c
 13474  00257A  3603               	rlcf	i2___ftpack@arg+2,f,c
 13475  00257C                     i2l3132:
 13476  00257C  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13477  00257E  D003               	goto	i2l693
 13478  002580  0E02               	movlw	2
 13479  002582  6004               	cpfslt	i2___ftpack@exp,c
 13480  002584  D7F6               	goto	i2l3130
 13481  002586                     i2l693:
 13482  002586  A004               	btfss	i2___ftpack@exp,0,c
 13483  002588  9E02               	bcf	i2___ftpack@arg+1,7,c
 13484  00258A  90D8               	bcf	status,0,c
 13485  00258C  3204               	rrcf	i2___ftpack@exp,f,c
 13486  00258E  5004               	movf	i2___ftpack@exp,w,c
 13487  002590  1203               	iorwf	i2___ftpack@arg+2,f,c
 13488  002592  5005               	movf	i2___ftpack@sign,w,c
 13489  002594  A4D8               	btfss	status,2,c
 13490  002596  8E03               	bsf	i2___ftpack@arg+2,7,c
 13491  002598  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13492  00259C  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13493  0025A0  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13494  0025A4  0012               	return	
 13495  0025A6                     __end_ofi2___ftpack:
 13496                           	opt stack 0
 13497                           pclatu	equ	0xFFB
 13498                           pclath	equ	0xFFA
 13499                           tblptru	equ	0xFF8
 13500                           tblptrh	equ	0xFF7
 13501                           tblptrl	equ	0xFF6
 13502                           tablat	equ	0xFF5
 13503                           prodh	equ	0xFF4
 13504                           prodl	equ	0xFF3
 13505                           intcon	equ	0xFF2
 13506                           intcon2	equ	0xFF1
 13507                           intcon3	equ	0xFF0
 13508                           postinc0	equ	0xFEE
 13509                           fsr0h	equ	0xFEA
 13510                           fsr0l	equ	0xFE9
 13511                           wreg	equ	0xFE8
 13512                           postinc1	equ	0xFE6
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           fsr2h	equ	0xFDA
 13520                           fsr2l	equ	0xFD9
 13521                           status	equ	0xFD8
 13522                           
 13523 ;; *************** function ___awdiv *****************
 13524 ;; Defined at:
 13525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;  dividend        2    0[COMRAM] int 
 13528 ;;  divisor         2    2[COMRAM] int 
 13529 ;; Auto vars:     Size  Location     Type
 13530 ;;  quotient        2    6[COMRAM] int 
 13531 ;;  sign            1    5[COMRAM] unsigned char 
 13532 ;;  counter         1    4[COMRAM] unsigned char 
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  2    0[COMRAM] int 
 13535 ;; Registers used:
 13536 ;;		wreg, status,2, status,0
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;Total ram usage:        8 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_dec_to_hex
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text69
 13556  00293C                     __ptext69:
 13557                           	opt stack 0
 13558  00293C                     ___awdiv:
 13559                           	opt stack 24
 13560                           
 13561                           ;incstack = 0
 13562  00293C  0E00               	movlw	0
 13563  00293E  6E06               	movwf	___awdiv@sign,c
 13564  002940  AE04               	btfss	___awdiv@divisor+1,7,c
 13565  002942  D006               	goto	i2l4060
 13566  002944  6C03               	negf	___awdiv@divisor,c
 13567  002946  1E04               	comf	___awdiv@divisor+1,f,c
 13568  002948  B0D8               	btfsc	status,0,c
 13569  00294A  2A04               	incf	___awdiv@divisor+1,f,c
 13570  00294C  0E01               	movlw	1
 13571  00294E  6E06               	movwf	___awdiv@sign,c
 13572  002950                     i2l4060:
 13573  002950  AE02               	btfss	___awdiv@dividend+1,7,c
 13574  002952  D006               	goto	i2l4066
 13575  002954  6C01               	negf	___awdiv@dividend,c
 13576  002956  1E02               	comf	___awdiv@dividend+1,f,c
 13577  002958  B0D8               	btfsc	status,0,c
 13578  00295A  2A02               	incf	___awdiv@dividend+1,f,c
 13579  00295C  0E01               	movlw	1
 13580  00295E  1A06               	xorwf	___awdiv@sign,f,c
 13581  002960                     i2l4066:
 13582  002960  0E00               	movlw	0
 13583  002962  6E08               	movwf	___awdiv@quotient+1,c
 13584  002964  0E00               	movlw	0
 13585  002966  6E07               	movwf	___awdiv@quotient,c
 13586  002968  5003               	movf	___awdiv@divisor,w,c
 13587  00296A  1004               	iorwf	___awdiv@divisor+1,w,c
 13588  00296C  B4D8               	btfsc	status,2,c
 13589  00296E  D01C               	goto	i2l4088
 13590  002970  0E01               	movlw	1
 13591  002972  6E05               	movwf	___awdiv@counter,c
 13592  002974  D004               	goto	i2l4074
 13593  002976                     i2l4072:
 13594  002976  90D8               	bcf	status,0,c
 13595  002978  3603               	rlcf	___awdiv@divisor,f,c
 13596  00297A  3604               	rlcf	___awdiv@divisor+1,f,c
 13597  00297C  2A05               	incf	___awdiv@counter,f,c
 13598  00297E                     i2l4074:
 13599  00297E  AE04               	btfss	___awdiv@divisor+1,7,c
 13600  002980  D7FA               	goto	i2l4072
 13601  002982                     i2l4076:
 13602  002982  90D8               	bcf	status,0,c
 13603  002984  3607               	rlcf	___awdiv@quotient,f,c
 13604  002986  3608               	rlcf	___awdiv@quotient+1,f,c
 13605  002988  5003               	movf	___awdiv@divisor,w,c
 13606  00298A  5C01               	subwf	___awdiv@dividend,w,c
 13607  00298C  5004               	movf	___awdiv@divisor+1,w,c
 13608  00298E  5802               	subwfb	___awdiv@dividend+1,w,c
 13609  002990  A0D8               	btfss	status,0,c
 13610  002992  D005               	goto	i2l4084
 13611  002994  5003               	movf	___awdiv@divisor,w,c
 13612  002996  5E01               	subwf	___awdiv@dividend,f,c
 13613  002998  5004               	movf	___awdiv@divisor+1,w,c
 13614  00299A  5A02               	subwfb	___awdiv@dividend+1,f,c
 13615  00299C  8007               	bsf	___awdiv@quotient,0,c
 13616  00299E                     i2l4084:
 13617  00299E  90D8               	bcf	status,0,c
 13618  0029A0  3204               	rrcf	___awdiv@divisor+1,f,c
 13619  0029A2  3203               	rrcf	___awdiv@divisor,f,c
 13620  0029A4  2E05               	decfsz	___awdiv@counter,f,c
 13621  0029A6  D7ED               	goto	i2l4076
 13622  0029A8                     i2l4088:
 13623  0029A8  5006               	movf	___awdiv@sign,w,c
 13624  0029AA  B4D8               	btfsc	status,2,c
 13625  0029AC  D004               	goto	i2l4092
 13626  0029AE  6C07               	negf	___awdiv@quotient,c
 13627  0029B0  1E08               	comf	___awdiv@quotient+1,f,c
 13628  0029B2  B0D8               	btfsc	status,0,c
 13629  0029B4  2A08               	incf	___awdiv@quotient+1,f,c
 13630  0029B6                     i2l4092:
 13631  0029B6  C007  F001         	movff	___awdiv@quotient,?___awdiv
 13632  0029BA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 13633  0029BE  0012               	return	
 13634  0029C0                     __end_of___awdiv:
 13635                           	opt stack 0
 13636                           pclatu	equ	0xFFB
 13637                           pclath	equ	0xFFA
 13638                           tblptru	equ	0xFF8
 13639                           tblptrh	equ	0xFF7
 13640                           tblptrl	equ	0xFF6
 13641                           tablat	equ	0xFF5
 13642                           prodh	equ	0xFF4
 13643                           prodl	equ	0xFF3
 13644                           intcon	equ	0xFF2
 13645                           intcon2	equ	0xFF1
 13646                           intcon3	equ	0xFF0
 13647                           postinc0	equ	0xFEE
 13648                           fsr0h	equ	0xFEA
 13649                           fsr0l	equ	0xFE9
 13650                           wreg	equ	0xFE8
 13651                           postinc1	equ	0xFE6
 13652                           postdec1	equ	0xFE5
 13653                           fsr1h	equ	0xFE2
 13654                           fsr1l	equ	0xFE1
 13655                           indf2	equ	0xFDF
 13656                           postinc2	equ	0xFDE
 13657                           postdec2	equ	0xFDD
 13658                           fsr2h	equ	0xFDA
 13659                           fsr2l	equ	0xFD9
 13660                           status	equ	0xFD8
 13661                           pclatu	equ	0xFFB
 13662                           pclath	equ	0xFFA
 13663                           tblptru	equ	0xFF8
 13664                           tblptrh	equ	0xFF7
 13665                           tblptrl	equ	0xFF6
 13666                           tablat	equ	0xFF5
 13667                           prodh	equ	0xFF4
 13668                           prodl	equ	0xFF3
 13669                           intcon	equ	0xFF2
 13670                           intcon2	equ	0xFF1
 13671                           intcon3	equ	0xFF0
 13672                           postinc0	equ	0xFEE
 13673                           fsr0h	equ	0xFEA
 13674                           fsr0l	equ	0xFE9
 13675                           wreg	equ	0xFE8
 13676                           postinc1	equ	0xFE6
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           fsr2h	equ	0xFDA
 13684                           fsr2l	equ	0xFD9
 13685                           status	equ	0xFD8
 13686                           
 13687                           	psect	rparam
 13688  0000                     pclatu	equ	0xFFB
 13689                           pclath	equ	0xFFA
 13690                           tblptru	equ	0xFF8
 13691                           tblptrh	equ	0xFF7
 13692                           tblptrl	equ	0xFF6
 13693                           tablat	equ	0xFF5
 13694                           prodh	equ	0xFF4
 13695                           prodl	equ	0xFF3
 13696                           intcon	equ	0xFF2
 13697                           intcon2	equ	0xFF1
 13698                           intcon3	equ	0xFF0
 13699                           postinc0	equ	0xFEE
 13700                           fsr0h	equ	0xFEA
 13701                           fsr0l	equ	0xFE9
 13702                           wreg	equ	0xFE8
 13703                           postinc1	equ	0xFE6
 13704                           postdec1	equ	0xFE5
 13705                           fsr1h	equ	0xFE2
 13706                           fsr1l	equ	0xFE1
 13707                           indf2	equ	0xFDF
 13708                           postinc2	equ	0xFDE
 13709                           postdec2	equ	0xFDD
 13710                           fsr2h	equ	0xFDA
 13711                           fsr2l	equ	0xFD9
 13712                           status	equ	0xFD8
 13713                           
 13714                           	psect	temp
 13715  00007E                     btemp:
 13716                           	opt stack 0
 13717  00007E                     	ds	1
 13718  0000                     int$flags	set	btemp
 13719                           pclatu	equ	0xFFB
 13720                           pclath	equ	0xFFA
 13721                           tblptru	equ	0xFF8
 13722                           tblptrh	equ	0xFF7
 13723                           tblptrl	equ	0xFF6
 13724                           tablat	equ	0xFF5
 13725                           prodh	equ	0xFF4
 13726                           prodl	equ	0xFF3
 13727                           intcon	equ	0xFF2
 13728                           intcon2	equ	0xFF1
 13729                           intcon3	equ	0xFF0
 13730                           postinc0	equ	0xFEE
 13731                           fsr0h	equ	0xFEA
 13732                           fsr0l	equ	0xFE9
 13733                           wreg	equ	0xFE8
 13734                           postinc1	equ	0xFE6
 13735                           postdec1	equ	0xFE5
 13736                           fsr1h	equ	0xFE2
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           fsr2h	equ	0xFDA
 13742                           fsr2l	equ	0xFD9
 13743                           status	equ	0xFD8


Data Sizes:
    Strings     357
    Constant    99
    Data        2
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     47     111
    BANK1           256     12      12
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[11]), STR_18(CODE[18]), 
		 -> STR_17(CODE[23]), STR_16(CODE[16]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[23]), STR_8(CODE[23]), STR_7(CODE[9]), STR_6(CODE[8]), 
		 -> STR_5(CODE[13]), STR_4(CODE[7]), STR_3(CODE[24]), STR_2(CODE[24]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    i2___awtoft->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    i2___ftmul->i2___awtoft
    ___ftsub->___ftadd
    ___ftadd->i2___ftmul
    ___ftdiv->i2___ftpack
    ___lltoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->___ftge
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   58171
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              2     2      0    7823
                                             40 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            3     3      0   17094
                                             46 BANK0      1     1      0
                                             10 BANK1      2     2      0
                           ___awtoft
                             ___ftge
                            ___ftmul
                            _lcdInst
                             _printf
                   _read_colorsensor
                      _servo_rotate0
                      _servo_rotate1
 ---------------------------------------------------------------------------------
 (2) _servo_rotate1                                       10     8      2     476
                                             16 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _servo_rotate0                                       10     8      2     392
                                             16 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    14    14      0    2607
                                             19 BANK0     14    14      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4000
                                             28 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1150
                                             43 BANK0      3     3      0
                                              0 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3123
                                             24 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2164
                                             16 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            3     3      0    7385
                                             40 BANK0      3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    5216
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         2     2      0    5640
                                             40 BANK0      2     2      0
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    5021
                                             28 BANK0     12     4      8
                                              0 BANK1     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     896
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    2005
                                             19 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    2005
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   42567
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
                    i2_servo_rotate1
 ---------------------------------------------------------------------------------
 (6) i2_servo_rotate1                                     10     8      2     213
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  14    14      0     505
                                              3 COMRAM    14    14      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            29    23      6    2329
                                             12 COMRAM    20    14      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     239
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     126
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   38211
                                             98 COMRAM    16    14      2
                            ___awdiv
                            ___ftadd
                            ___fttol
                                _pow
                         i2___awtoft
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   31868
                                             81 COMRAM    17    11      6
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
                           i2___ftge
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   10255
                                             51 COMRAM     5     2      3
                            ___ftadd
                          _eval_poly
                              _frexp
                         i2___awtoft
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   17868
                                             72 COMRAM     9     6      3
                            ___ftdiv
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                         i2___awtoft
                           i2___ftge
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (7) i2___awtoft                                           4     1      3     920
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    4957
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                            ___fttol
                              _frexp
                           i2___ftge
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     344
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                            ___ftadd (ARG)
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4     901
                                             54 COMRAM    10     6      4
                            ___fttol (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    4829
                                             39 COMRAM    12     5      7
                            ___ftadd
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     521
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___ftmul                                           15     9      6    1337
                                             12 COMRAM    15     9      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    2706
                                             39 COMRAM     6     0      6
                            ___ftadd
                         i2___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    2409
                                             27 COMRAM    12     6      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1209
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     832
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___ftpack                                           8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _servo_rotate0
     _servo_rotate1
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___ftadd
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
     ___fttol
       ___ftadd (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     _pow
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       ___lltoft
         i2___ftpack
       _exp
         ___ftdiv
           i2___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
         ___fttol
           ___ftadd (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
         _eval_poly
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _floor
           ___altoft
             ___fttol (ARG)
               ___ftadd (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftmul (ARG)
                   _frexp (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
             i2___ftpack (ARG)
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           ___fttol
             ___ftadd (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
           _frexp
           i2___ftge
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
             i2___ftmul
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___wmul
         i2___awtoft
           i2___ftpack
         i2___ftge
         i2___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       _log
         ___ftadd
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
         _eval_poly
           ___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
           i2___wmul
         _frexp
         i2___awtoft
           i2___ftpack
         i2___ftmul
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2___ftge
       i2___ftmul
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2___awtoft
       i2___ftpack
     i2___ftmul
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2_servo_rotate1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C       C       7        4.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      34        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 28 16:44:26 2017

            i2servo_rotate1@i 0007              i2servo_rotate1@j 0009                  ___altoft@exp 003F  
          i2_I2C_Master_Start 312E            i2_I2C_Master_Write 310C                 ___altoft@sign 0040  
                          l34 30A4                ?_emergencystop 0001                  ___awdiv@sign 0006  
         ___wmul@multiplicand 00D0            i2___lwdiv@dividend 0001                   __CFG_BORV$3 000000  
                  i2___awtoft 2EE0                    i2___ftpack 24F8                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$HS 000000                  ___ftadd@exp1 0027                  ___ftadd@exp2 0026  
                ___ftadd@sign 0025                           l333 01FA                           l342 02FE  
                         l329 007A                           l364 306C                           l372 268C  
                         l375 26BC                           l383 25E4                           l378 26F4  
                         l386 2614                           l396 18A0                           l389 264C  
                         l823 24E6                           l693 197A                           l876 2A2E  
                         l886 2B70                           _GIE 007F97                  __CFG_CPB$OFF 000000  
         i2servo_rotate1@duty 0005                           _PEN 007E2A                  __CFG_CPD$OFF 000000  
                         _SEN 007E28                           _PSA 007EAB           ?i2_I2C_Master_Start 0001  
         ?i2_I2C_Master_Write 0002                           _exp 0EEE                           _log 1678  
                         _isr 0008                           _pow 1282                  ___awmod@sign 00D3  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 0001  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l4120 276C                          l4112 2736  
                        l4104 2712                          l4114 2742                          l4116 2748  
                        l4124 277A                          l4108 2722                          l5110 192E  
                        l5102 18D0                          l4128 278E                          l5200 08D8  
                        l5120 1984                          l5112 195E                          l5104 18DE  
                        l4170 247A                          l5114 196C                          l5106 190E  
                        l4180 24D4                          l4172 2480                          l5140 29F0  
                        l5300 0B90                          l5204 08E0                          l5302 0B98  
                        l5222 0974                          l5206 0918                          l5126 19A0  
                        l5310 17B2                          l4168 246A                          l5136 29DE  
                        l5160 2B3E                          l5224 097A                          l5304 0BA4  
                        l5320 1800                          l5138 29EA                          l5218 0958  
                        l5066 2FAA                          l5314 17C8                          l5148 2A20  
                        l5164 2B62                          l5156 2B2C                          l5084 2FD2  
                        l5260 0A26                          l5236 09B0                          l5252 09EC  
                        l5180 0820                          l5412 14D8                          l5324 1822  
                        l5158 2B38                          l5238 09B6                          l5254 0A04  
                        l5190 085A                          l5174 07FA                          l5422 1516  
                        l5350 2606                          l5280 0AAA                          l5272 0A82  
                        l5264 0A5E                          l5184 082A                          l5408 14BA  
                        l5328 1838                          l5344 25D6                          l5600 0358  
                        l5290 0ADE                          l5266 0A68                          l5178 080E  
                        l5098 18BC                          l5450 232E                          l5418 14F8  
                        l5362 2660                          l5338 25B8                          l5292 0B2A  
                        l5284 0AC4                          l5612 03A0                          l5604 036E  
                        l5278 0A9E                          l5198 08D2                          l5438 2DF8  
                        l5446 22EE                          l5374 26AE                          l5622 03D6  
                        l5630 03FE                          l5288 0AD8                          l5456 2372  
                        l5368 267E                          l5608 038A                          l5298 0B78  
                        l5650 1CD8                          l5394 146C                          l5618 03C2  
                        l5570 01E6                          l5538 0032                          l5388 1432  
                        l5580 028C                          l5572 0204                          ?_exp 0049  
                        ?_log 0034                          l5646 1CCE                          l5574 021A  
                        l5566 0180                          l5558 00F8                          l5680 15CC  
                        l5656 1CF8                          l5584 02F4                          l5674 158E  
                        l5586 030A                          l5770 1E2C                          l5762 1E14  
                        l5668 1558                          l5692 1622                          l5772 1E32  
                        l5764 1E1A                          ?_isr 0001                          l5686 160A  
                        l5694 165A                          l5774 1E38                          l5766 1E20  
                        l5768 1E26                          l5778 1E3C                          ?_pow 0052  
          i2_read_colorsensor 210A                          STR_1 FFE8                          STR_2 FEB2  
                        STR_3 FE9A                          STR_4 FFF8                          STR_5 FFC7  
                        STR_6 FFF0                          STR_7 FFDF                          STR_8 FEE1  
                        STR_9 FEF8                          _T0CS 007EAD                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4195 2C0A                          u5510 010E  
                        u5600 0332                          u5371 140E                          _RCEN 007E2B  
                        u5391 1448                          u5551 0218                          u4840 2FA8  
                        u5480 007A                          i2l34 30B8                          u5490 00C4  
                        u5707 2CDC                          u5717 0408                          u5807 2B9A  
                        u5727 25D8                          u5817 2BA2                          u5737 2608  
                        u5827 2BCC                          u5747 2680                          u5837 2BD4  
                        u5757 26B0                          u5847 206A                          u5767 2D46  
                        u5777 2D82                          u5787 1D70                          u5797 1668  
                        _TMR0 000FD6                          _RSEN 007E29                          _main 1D80  
                ___ftpack@arg 00CE                          _keys FE37                  ___ftpack@exp 00D1  
                        _time 009A                          fsr0h 000FEA                          fsr1h 000FE2  
          i2___lwdiv@quotient 0005                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 007E                          exp@x 0049                          log@x 0034  
                        isr@i 0073          ??i2_I2C_Master_Start 0002                  i2___ftge@ff1 0001  
                i2___ftge@ff2 0004          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 30F6                  i2___awtoft@c 0009                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 00E7                  i2___ftmul@f1 000D                  i2___ftmul@f2 0010  
                ___param_bank 000000                  ___ftmul@sign 00E8                   i2_lcdNibble 2D8E  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 00BE  
                       ??_pow 0058              ?_I2C_Master_Init 00DB              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001             ??i2_servo_rotate1 0003              ?_I2C_Master_Stop 0001  
       i2servo_rotate1@degree 0001                         ?_main 0001                         _ACKEN 007E2C  
                       _ACKDT 007E2D               __end_of___awdiv 29C0               __end_of___ftadd 1282  
                       STR_10 FF43                         STR_11 FF32                         STR_20 FF98  
                       STR_12 FF54                         STR_21 FFB8                         STR_13 FF65  
                       STR_14 FF76                         STR_22 FF21                         STR_15 FF87  
                       STR_16 FFA8                         STR_17 FECA                         STR_18 FF0F  
                       STR_19 FFD4               __end_of___awmod 2798               __end_of___ftdiv 1F52  
             __end_of___ftneg 304C               __end_of___lldiv 24F8               __end_of___ftmul 1556  
             ___awdiv@divisor 0003               __end_of___ftsub 2EA2               __end_of___fttol 1B9E  
                       _T0PS0 007EA8                         _T0PS1 007EA9                         _T0PS2 007EAA  
             __end_of___lwdiv 2A38               __end_of___lwmod 2B7A                         i2l262 06BC  
                       i2l271 0524                         i2l272 052E                         i2l264 0454  
                       i2l265 06B8                         i2l274 062A                         i2l275 063A  
                       i2l286 07B0                         i2l383 28EC                         i2l720 1144  
                       i2l386 2910                         i2l731 11F4                         i2l740 1210  
                       i2l716 111A                         i2l396 21DA                         i2l389 293A  
                       i2l751 1F20                         i2l913 13EA                         i2l908 12BA  
                       i2l693 2586                         i2l773 303E                         i2l876 2D34  
             ___awdiv@counter 0005                         i2l886 2E58          ??i2_read_colorsensor 0004  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
             ??_servo_rotate0 00D0               ??_servo_rotate1 00D0                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 00DD  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 30EA                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2D8E                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 00D9               __end_of_dpowers FE52  
                       _color 008A                         _floor 1F52                         _etime 0078  
                       _ldexp 2376                         _frexp 2828                         _errno 00AB  
             __end_of_isdigit 2FDC                 ___ftpack@sign 00D2                         _putch 30CA  
                       _stime 007C                         pclath 000FFA                         tablat 000FF5  
            __end_ofi2___ftge 2828                         pow@yi 005F               __end_of_timeset FE61  
            __end_ofi2___wmul 3028               __end_of_standby 2CEC                         status 000FD8  
              __CFG_PBADEN$ON 000000                 i2printf@width 001E                   exp@exponent 004F  
          __size_ofi2___ftmul 00F4              __end_ofi2_printf 0EEE            __size_ofi2___lwdiv 0052  
          __size_ofi2___lwmod 0042                   ldexp@newexp 0037               __initialization 2EA2  
                 log@exponent 0037            __size_ofi2_lcdInst 000C               ??_emergencystop 00E6  
              ??_bottle_count 00E6                  __end_of_main 1E6C                  __end_of_keys FE48  
               i2___ftmul@exp 0016                    i2printf@ap 0018            __size_ofi2_isdigit 001E  
                 ?i2___awtoft 0009                   ?i2___ftpack 0001                        ??_main 00ED  
               ___fttol@sign1 0031                 __activetblptr 000002             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 00CF                servo_rotate0@i 00D4                servo_rotate0@j 00D6  
              servo_rotate1@i 00D4                servo_rotate1@j 00D6            ??_I2C_Master_Start 00CF  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 00D1  
                      ?_floor 0041                        ?_ldexp 0034                        ?_frexp 0001  
            __end_of___altoft 2AB0                        _T08BIT 007EAE              ___awdiv@dividend 0001  
             i2lcdNibble@data 0002              __end_of___awtoft 2E20                        ?_putch 0001  
            __end_of___ftpack 19AE               i2lcdNibble@temp 0001              __end_of___lltoft 2C96  
                      _INT0IE 007F94                        _INT1IE 007F83                        _INT1IF 007F80  
                      _INT2IE 007F84                        i2l1071 0FA4                        i2l1072 10C8  
                      i2l1082 2022                        i2l3120 2516                        i2l3200 11A4  
                      i2l3130 2572                        i2l3122 2520                        i2l3202 11AE  
                      i2l3132 257C                        i2l3124 253E                        i2l3116 2508  
                      i2l3220 122C                        i2l3212 11E2                        i2l3204 11B8  
                      i2l3230 125C                        i2l3214 11EC                        i2l3206 11C0  
                      i2l3310 27C8                        i2l3128 2554                        i2l3400 1E94  
                      i2l3240 1AD6                        i2l3320 2824                        i2l3330 1BC6  
                      i2l3314 27F8                        i2l4060 2950                        i2l3172 1128  
                      i2l3156 2A5A                        i2l4204 2FFC                        i2l3406 1EBC  
                      i2l3350 1C20                        i2l3158 2A66                        i2l3270 1B70  
                      i2l3262 1B4C                        i2l4222 3084                        i2l4072 2976  
                      i2l3360 1C48                        i2l3336 1BEE                        i2l3272 1B76  
                      i2l3512 2404                        i2l4232 2D02                        i2l4074 297E  
                      i2l4066 2960                        i2l3426 1EFA                        i2l3194 1182  
                      i2l3178 1152                        i2l3354 1C30                        i2l3258 1B3C  
                      i2l4234 2D0A                        i2l4092 29B6                        i2l4084 299E  
                      i2l4076 2982                        i2l3444 2E78                        i2l3364 1C58  
                      i2l3276 1B8C                        i2l3268 1B64                        i2l3508 23F8  
                      i2l4244 2D2A                        i2l4236 2D0E                        i2l4260 2E4E  
                      i2l4252 2E2E                        i2l3470 1FA8                        i2l3462 1F80  
                      i2l3526 2EF4                        i2l3702 0F76                        i2l4254 2E36  
                      i2l4088 29A8                        i2l3616 2C40                        i2l3480 2298  
                      i2l3288 2850                        i2l4256 2E3A                        i2l4600 2160  
                      i2l3618 2C4C                        i2l3466 1F8E                        i2l4530 2AEC  
                      i2l3724 109E                        i2l4620 0BDC                        i2l4604 217C  
                      i2l3478 221C                        i2l4526 2AE4                        i2l4702 0D9A  
                      i2l4622 0BEA                        i2l3496 23D4                        i2l3488 238E  
                      i2l4544 19C8                        i2l4536 2B08                        i2l4720 0DF2  
                      i2l4640 0C7C                        i2l4632 0C1E                        i2l4616 0BCC  
                      i2l4608 218C                        i2l3690 0F06                        i2l3674 16B6  
                      i2l4722 0DFA                        i2l4730 0E20                        i2l4714 0DDC  
                      i2l4706 0DBE                        i2l4642 0C80                        i2l4626 0BF0  
                      i2l3668 1694                        i2l4556 1A98                        i2l4732 0E26  
                      i2l4740 0EB0                        i2l4708 0DC6                        i2l4660 0CF0  
                      i2l4572 28E0                        i2l3950 12C8                        i2l4734 0E6A  
                      i2l4742 0EC6                        i2l4726 0E0E                        i2l4646 0C86  
                      i2l4590 2122                        i2l4566 28C8                        i2l4902 0648  
                      i2l3696 0F3E                        i2l4744 0ECC                        i2l4680 0D3E  
                      i2l4664 0D0A                        i2l4648 0CBA                        i2l4904 0656  
                      i2l4666 0D0E                        i2l4746 0ED4                        i2l4594 2132  
                      i2l4578 2904                        i2l3964 1344                        i2l3956 12E0  
                      i2l4940 0792                        i2l4852 04DE                        i2l4908 0664  
                      i2l4678 0D3A                        i2l4694 0D6A                        i2l4934 077C  
                      i2l3968 1366                        i2l4696 0D80                        i2l4944 079A  
                      i2l4856 04EA                        i2l4858 04F4                        i2l4886 05E0  
                      u252_41 10E6                        u253_41 10FA                        u273_41 1ABA  
                      u294_41 1E7C                        u286_41 1BAE                        u296_41 1EA4  
                      u288_41 1BD6                        _TMR0IE 007F95                        _TMR0IF 007F92  
                   ??i2_putch 0003                        _TMR0ON 007EAF                        _SSPADD 000FC8  
                      _TRISC3 007CA3                        _TRISC4 007CA4                        _SSPBUF 000FC9  
              __CFG_XINST$OFF 000000             ?_read_colorsensor 0001                        ___ftge 22AE  
                      ___wmul 2F4E            ??_read_colorsensor 00D1                     ??___awdiv 0005  
                   ??___ftadd 0022                __CFG_STVREN$ON 000000                     ??___awmod 00D2  
                   ??___ftdiv 000F                     ??___ftneg 0004                     ??___lldiv 00D6  
                   ??___ftmul 00E0                     ??___ftsub 002E                     ??___fttol 002C  
                   ??___lwdiv 00D2                     ??___lwmod 00D9                 dec_to_hex@num 0063  
                      clear_0 2EC0                        clear_1 2ECC              ___awdiv@quotient 0007  
             ___awmod@divisor 00D0               ___awmod@counter 00D2                     ??_lcdInst 00D0  
                      _printf 07EC                        floor@i 0044                        floor@x 0041  
       ___ftmul@f3_as_product 00E4                     ??_initLCD 00D1                     ??_isdigit 00CE  
           __end_ofi2___ftmul 1C92             __end_ofi2___lwdiv 2D3E                  __mediumconst FE36  
           __end_ofi2___lwmod 2E62                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_standby 00E6             __end_ofi2_lcdInst 3102  
           __end_ofi2_isdigit 308C              __end_ofexp@coeff FE7F          __size_of_bottle_time 0036  
            __end_oflog@coeff FE9A                    __accesstop 0080       __end_of__initialization 2ED2  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
         __size_ofi2___awtoft 0038           __size_ofi2___ftpack 00AE                    ___ftge@ff1 0100  
                  ___ftge@ff2 0103                  eval_poly@res 0031                 ___rparam_used 000001  
                  ___ftdiv@f1 0009                    ___ftdiv@f2 000C                    ___ftdiv@f3 0013  
                  ___ftneg@f1 0001                    ___awtoft@c 00D6                i2___ftpack@arg 0001  
              i2___ftpack@exp 0004                    ___ftmul@f1 00DA                    ___ftmul@f2 00DD  
                  ___ftsub@f1 0028                    ___ftsub@f2 002B                    ___fttol@f1 0028  
          i2___lwmod@dividend 0008                __pcstackCOMRAM 0001                  __pidataBANK0 3136  
                  ___lltoft@c 0009                 __end_of_floor 2030                 __end_of_ldexp 243C  
               __end_of_frexp 28B8                i2___ftmul@cntr 001A                i2___ftmul@sign 001B  
               __end_of_putch 30DA                   i2printf@idx 0017                   i2printf@val 001B  
          __size_of_date_time 00EE           servo_rotate0@degree 00CE                     ?i2___ftge 0001  
         servo_rotate1@degree 00CE                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D              _flag_bottle_high 00AF  
 __size_of_I2C_ColorSens_Init 00DA                       ??_floor 0044                       ??_ldexp 0039  
                     ??_frexp 0006          __end_of_bottle_count 1678                    _dec_to_hex 19AE  
                     ??_putch 00D0                    __pbssBANK0 0080            __size_of_eval_poly 00D2  
           servo_rotate0@duty 00D2             servo_rotate1@duty 00D2               i2_servo_rotate1 28B8  
          __size_of_read_time 0068                       ?___ftge 0100                  ?i2_lcdNibble 0001  
                     ?___wmul 00CE                     ?___altoft 0037                     ?___awtoft 00D6  
                   ?___ftpack 00CE                       ?_printf 00DA            __size_of_operation 0402  
                   ?___lltoft 0009                    _flag_yopNC 00B5               _bottle_read_bot 00A7  
                  ??i2___ftge 0007               _bottle_read_top 00A9                    ??i2___wmul 0005  
                  ??i2_printf 0013                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7             __end_of_date_time 1D80                       i2_putch 30EA  
           _bottle_count_disp 00ED   __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 2BDA  
 __size_ofi2_I2C_Master_Write 000A                 ?_operationend 0001                       __Hparam 0000  
                     __Lparam 0000               __size_of___ftge 00C8                       ___awdiv 293C  
                     ___ftadd 10D6                       ___awmod 26F6                       ___ftdiv 1E6C  
                     ___ftneg 3028                       ___lldiv 243C               __size_of___wmul 0036  
                     ___ftmul 13F8                       ___ftsub 2E62                       ___fttol 1AAA  
                     ___lwdiv 29C0                       ___lwmod 2B18                    _curr_state 00BD  
                  ??___altoft 003B                       __pcinit 2EA2                  ??i2___awtoft 000C  
                ??i2___ftpack 0006                    ??___awtoft 00D9                    ??___ftpack 00D3  
           __end_of_eval_poly 22AE       i2___ftmul@f3_as_product 0017                       __ramtop 1000  
                     _lcdInst 30DA                    ??___lltoft 000D                       __ptext0 1D80  
                     __ptext1 2C96                       __ptext2 308C                       __ptext3 0012  
                     __ptext4 25A6                       __ptext5 264E                       __ptext6 1796  
                     __ptext7 13F8                       __ptext8 22AE                       __ptext9 2DDC  
             __size_of_printf 03D6                dec_to_hex@temp 006B                       _initLCD 2D3E  
           __end_of_hexpowers FE5A                 i2_isdigit$806 0002                       _dpowers FE48  
                __size_of_exp 01E8                  __size_of_log 011E                       _isdigit 2FB2  
                __size_of_isr 07E4   __size_ofi2_read_colorsensor 00D2                  __size_of_pow 0176  
            ___awmod@dividend 00CE             __end_of_read_time 2B18      __size_of_I2C_Master_Init 0060  
    __size_of_I2C_Master_Read 002E      __size_of_I2C_Master_Wait 0014                    date_time@i 00E8  
    __size_of_I2C_Master_Stop 0008         __end_of_servo_rotate0 26F6         __end_of_servo_rotate1 264E  
                     _timeset FE5A                       _testint 00A1                       _standby 2C96  
                 ?_dec_to_hex 0063       __end_ofi2_servo_rotate1 293C                __pintcode_body 0414  
        end_of_initialization 2ED2                       exp@sign 0051                 __Lmediumconst FE36  
                     int_func 0414           i2___wmul@multiplier 0001             __end_of_operation 0414  
              _operation_disp 00B7            __end_ofi2___awtoft 2F18            __end_ofi2___ftpack 25A6  
              _operation_time 00B9                ??_operationend 00E6     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 00D2                       pow@sign 005E  
             ___lldiv@counter 00DA                       printf@c 0109                       printf@f 00DA  
            I2C_Master_Init@c 00DB              I2C_Master_Read@a 00CF                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE         __end_of_emergencystop 306E                     _PORTAbits 000F80  
       __size_of_bottle_count 0122     __size_of_read_colorsensor 010C     read_colorsensor@color_low 00D5  
           i2_I2C_Master_Read 2FDC             i2_I2C_Master_Wait 30B8             i2_I2C_Master_Stop 3126  
           i2___lwdiv@divisor 0003                     i2___ftmul 1B9E                     i2___lwdiv 2CEC  
                   i2___lwmod 2E20             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_high 000C            ?i2_I2C_Master_Stop 0001  
                  _start_time 007A                     i2_lcdInst 30F6                   ___ftdiv@exp 0016  
                 printf@width 0107               i2___awtoft@sign 000C           ??i2_I2C_Master_Read 0002  
             i2___ftpack@sign 0005                     i2_isdigit 306E           ??i2_I2C_Master_Wait 0001  
         ??i2_I2C_Master_Stop 0002                   ___ftmul@exp 00E3                  _bottle_count 1556  
              __end_of___ftge 2376                __end_of___wmul 2F84           __size_of_dec_to_hex 00FC  
        __size_ofi2_lcdNibble 004E                 i2lcdInst@data 0003                    floor@expon 0047  
            i2___wmul@product 0005                __end_of_printf 0BC2                  i2printf@flag 001D  
   __end_ofi2_I2C_Master_Read 3002     __end_ofi2_I2C_Master_Wait 30CA                  i2printf@prec 001A  
         start_initialization 2EA2     __end_ofi2_I2C_Master_Stop 312E             __size_ofi2___ftge 0090  
                  eval_poly@d 002B                    eval_poly@n 002D                    eval_poly@x 0028  
           __size_ofi2___wmul 0026                    ldexp@value 0034                   __end_of_exp 10D6  
                 __end_of_log 1796                   __end_of_isr 07EC                   __end_of_pow 13F8  
                   i2printf@c 0020                     i2printf@f 000D                 ??_bottle_time 00E6  
       i2I2C_Master_Read@temp 0003                    ?i2___ftmul 000D                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008              ?i2_servo_rotate1 0001             __size_ofi2_printf 032C  
                  frexp@value 0001             ??_I2C_Master_Init 00DF             ??_I2C_Master_Read 00CF  
           ??_I2C_Master_Wait 00CE                    ?i2_lcdInst 0001             ??_I2C_Master_Stop 00CF  
  read_colorsensor@color_high 00D9                    ?i2_isdigit 0001                      ??___ftge 00E9  
                    ??___wmul 00D2                   __pdataBANK0 00ED              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00E2             __size_of___altoft 0078                    read_time@i 0004  
           __size_of___awtoft 0044             __size_of___ftpack 010C             __size_of___lltoft 005C  
  __end_of_I2C_ColorSens_Init 210A                   __pbssCOMRAM 0076          __end_of_operationend 30A4  
               __pcstackBANK0 00BE                 __pcstackBANK1 0100             i2___lwmod@divisor 000A  
           i2___lwmod@counter 000C                      ?i2_putch 0001           __end_of_bottle_time 2F4E  
            _I2C_Master_Start 311E           i2I2C_Master_Write@d 0002              _I2C_Master_Write 3102  
                   _date_time 1C92              ___lwdiv@dividend 00CE             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                 __pmediumconst FE36                     _lcdNibble 2B7A  
                    ?___awdiv 0001                      ?___ftadd 001C                      ?___awmod 00CE  
                    ?___ftdiv 0009                      ?___ftneg 0001                      ?___lldiv 00CE  
                    ?___ftmul 00DA                      ?___ftsub 0028                      ?___fttol 0028  
                    ?___lwdiv 00CE                      ?___lwmod 00D5                      ?_lcdInst 0001  
            dec_to_hex@hexnum 006F                      ?_initLCD 0001                     _colorprev 0092  
                    ?_isdigit 0001              _read_colorsensor 1796    __size_ofi2_I2C_Master_Read 0026  
  __size_ofi2_I2C_Master_Wait 0012                     _eval_poly 21DC    __size_ofi2_I2C_Master_Stop 0008  
                 _flag_bottle 00AD                   _flag_picbug 00B1                     _hexpowers FE52  
                    ?_standby 0001              ___lwdiv@quotient 00D3                __size_of_floor 00DE  
              __size_of_ldexp 00C6                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___ftmul 0013                   ??i2___lwdiv 0005                   ??i2___lwmod 000C  
                   _read_time 2AB0                __size_of_putch 0010                    operation@i 010A  
  __end_ofi2_I2C_Master_Start 3136    __end_ofi2_I2C_Master_Write 3116                   ??i2_lcdInst 0003  
              ___wmul@product 00D2                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _LATDbits 000F8C                   ??i2_isdigit 0001                    ?_date_time 0001  
                    i2u303_40 1F9A                      i2u307_40 23AE                      i2u307_48 23B0  
                    i2u336_40 0F7E                      i2u337_40 0F80                      i2u409_40 2FFA  
                    i2u282_40 2878                      i2u275_40 1AF4                      i2u282_48 287A  
                    i2u275_45 1AEC                     _operation 0012                      i2u378_40 132C  
                    i2u590_47 2DAE                      i2u591_47 2DCE                      i2u592_47 2DD6  
                    i2u585_47 04B4                      i2u586_47 07A2                      i2u587_47 28E2  
                    i2u588_47 2906                      i2u589_47 2DA6              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 1AAA    __end_ofi2_read_colorsensor 21DC  
           ___wmul@multiplier 00CE                      i2___ftge 2798                      i2___wmul 3002  
               lcdNibble@data 00CF                    printf@flag 0106                 lcdNibble@temp 00CE  
                  printf@prec 0103                    ?_eval_poly 0028                      i2_printf 0BC2  
                 _bottle_time 2F18           I2C_Master_Read@temp 00D0            _bottle_count_array 0080  
                  ?_read_time 0001            dec_to_hex@quotient 0071              __size_ofi2_putch 000C  
                   frexp@eptr 0004                      __Hrparam 0000           i2read_colorsensor@i 0010  
                  ?_operation 0001                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
                 dec_to_hex@i 006D        __size_of_servo_rotate0 00A8        __size_of_servo_rotate1 00A8  
            __size_of___awdiv 0084              __size_of___ftadd 01AC              __size_of___awmod 00A2  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024         i2___wmul@multiplicand 0003  
            __size_of___lldiv 00BC                      ___altoft 2A38              __size_of___ftmul 015E  
            __size_of___ftsub 0040              __size_of___fttol 00F4              __size_of___lwdiv 0078  
            __size_of___lwmod 0062         __size_of_operationend 0018                      ___awtoft 2DDC  
                    ___ftpack 18A2                      ___lltoft 2C3A                 _flag_top_read 00B3  
                 _isdigit$806 00CF            i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010  
                    _exp$1249 004C               _I2C_Master_Init 2BDA               _I2C_Master_Read 2F84  
            __size_of_initLCD 0050               _I2C_Master_Wait 30A4               _I2C_Master_Stop 3116  
                    _isr$1377 0074              __size_of_isdigit 002A               ___lwdiv@divisor 00D0  
             ___lwdiv@counter 00D2                      __ptext10 18A2                      __ptext11 2D3E  
                    __ptext20 2F4E                      __ptext12 304C                      __ptext21 2B18  
                    __ptext13 1C92                      __ptext30 3116                      __ptext22 29C0  
                    __ptext14 2F84                      __ptext31 311E                      __ptext23 30DA  
                    __ptext15 2F18                      __ptext40 2CEC                      __ptext32 30A4  
                    __ptext24 2B7A                      __ptext16 1556                      __ptext41 30F6  
                    __ptext25 26F6                      __ptext17 07EC                      __ptext50 1282  
                    __ptext42 2D8E                      __ptext34 28B8                      __ptext26 2BDA  
                    __ptext18 30CA                      __ptext51 1678                      __ptext43 2AB0  
                    __ptext35 210A                      __ptext27 243C                      __ptext19 2FB2  
                    __ptext60 21DC                      __ptext52 0EEE                      __ptext44 310C  
                    __ptext36 0BC2                      __ptext28 2030                      __ptext61 3002  
                    __ptext53 2EE0                      __ptext45 3126                      __ptext37 30EA  
                    __ptext29 3102                      __ptext62 1B9E                      __ptext54 2376  
                    __ptext46 312E                      __ptext38 306E                      __ptext63 2E62  
                    __ptext55 1F52                      __ptext47 2FDC                      __ptext39 2E20  
                    __ptext64 10D6                      __ptext56 2798                      __ptext48 30B8  
                    __ptext65 3028                      __ptext57 2828                      __ptext49 19AE  
                    __ptext66 1E6C                      __ptext58 1AAA                      __ptext67 2C3A  
                    __ptext59 2A38                      __ptext68 24F8                      __ptext69 293C  
                    _end_time 0076              __size_of_standby 0056                      _pow$1380 0058  
                    _pow$1381 005B        __size_of_emergencystop 0022                 __size_of_main 00EC  
             _dec_to_hex$1378 0065               _dec_to_hex$1379 0068                   ??_date_time 00E6  
                _operationend 308C                 ??i2_lcdNibble 0001                   ??_lcdNibble 00CE  
                    _testflag 00BB                      int$flags 007E                     printf@idx 0100  
                   printf@val 0104                      exp@coeff FE61                      log@coeff FE7F  
                   putch@data 00D0      __end_of_I2C_Master_Start 3126      __end_of_I2C_Master_Write 310C  
                  _INTCONbits 000FF2                   ??_eval_poly 002F                      isdigit@c 00D0  
               _servo_rotate0 264E                 _servo_rotate1 25A6                   ??_read_time 0004  
                    intlevel2 0000              ___lwmod@dividend 00D5              ___lldiv@dividend 00CE  
          _I2C_ColorSens_Init 2030      __end_of_read_colorsensor 18A2      __size_ofi2_servo_rotate1 0084  
                 ??_operation 00EC           ?_I2C_ColorSens_Init 0001                      printf@ap 0101  
     __end_of_I2C_Master_Init 2C3A       __end_of_I2C_Master_Read 2FB2       __end_of_I2C_Master_Wait 30B8  
     __end_of_I2C_Master_Stop 311E                   lcdInst@data 00D0                 _emergencystop 304C  
         __end_ofi2_lcdNibble 2DDC              ___lldiv@quotient 00D6             I2C_Master_Write@d 00CF  
             ___lwmod@divisor 00D7   i2read_colorsensor@color_low 0008               ___lwmod@counter 00D9  
        ??_I2C_ColorSens_Init 00D1                ?_servo_rotate0 00CE                ?_servo_rotate1 00CE  

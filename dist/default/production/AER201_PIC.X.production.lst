

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 23:06:24 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.40
    83                           ; Generated 01/12/2016 GMT
    84                           ; 
    85                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataBANK0
   118  0026F6                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _bottle_count_disp
   122  0026F6  FFFF               	dw	65535
   123                           
   124                           	psect	mediumconst
   125  00FDD8                     __pmediumconst:
   126                           	opt stack 0
   127  00FDD8  00                 	db	0
   128  00FDD9                     _keys:
   129                           	opt stack 0
   130  00FDD9  31                 	db	49
   131  00FDDA  32                 	db	50
   132  00FDDB  33                 	db	51
   133  00FDDC  41                 	db	65
   134  00FDDD  34                 	db	52
   135  00FDDE  35                 	db	53
   136  00FDDF  36                 	db	54
   137  00FDE0  42                 	db	66
   138  00FDE1  37                 	db	55
   139  00FDE2  38                 	db	56
   140  00FDE3  39                 	db	57
   141  00FDE4  43                 	db	67
   142  00FDE5  2A                 	db	42
   143  00FDE6  30                 	db	48
   144  00FDE7  23                 	db	35
   145  00FDE8  44                 	db	68
   146  00FDE9  00                 	db	0
   147  00FDEA                     __end_of_keys:
   148                           	opt stack 0
   149  00FDEA                     _dpowers:
   150                           	opt stack 0
   151  00FDEA  0001               	dw	1
   152  00FDEC  000A               	dw	10
   153  00FDEE  0064               	dw	100
   154  00FDF0  03E8               	dw	1000
   155  00FDF2  2710               	dw	10000
   156  00FDF4                     __end_of_dpowers:
   157                           	opt stack 0
   158  00FDF4                     _hexpowers:
   159                           	opt stack 0
   160  00FDF4  0001               	dw	1
   161  00FDF6  0010               	dw	16
   162  00FDF8  0100               	dw	256
   163  00FDFA  1000               	dw	4096
   164  00FDFC                     __end_of_hexpowers:
   165                           	opt stack 0
   166  00FDFC                     _timeset:
   167                           	opt stack 0
   168  00FDFC  50                 	db	80
   169  00FDFD  35                 	db	53
   170  00FDFE  21                 	db	33
   171  00FDFF  08                 	db	8
   172  00FE00  05                 	db	5
   173  00FE01  02                 	db	2
   174  00FE02  17                 	db	23
   175  00FE03                     __end_of_timeset:
   176                           	opt stack 0
   177  00FE03                     exp@coeff:
   178                           	opt stack 0
   179  00FE03  00                 	db	0
   180  00FE04  80                 	db	128
   181  00FE05  3F                 	db	63
   182  00FE06  72                 	db	114
   183  00FE07  31                 	db	49
   184  00FE08  3F                 	db	63
   185  00FE09  FE                 	db	254
   186  00FE0A  75                 	db	117
   187  00FE0B  3E                 	db	62
   188  00FE0C  58                 	db	88
   189  00FE0D  63                 	db	99
   190  00FE0E  3D                 	db	61
   191  00FE0F  95                 	db	149
   192  00FE10  1D                 	db	29
   193  00FE11  3C                 	db	60
   194  00FE12  C5                 	db	197
   195  00FE13  AE                 	db	174
   196  00FE14  3A                 	db	58
   197  00FE15  79                 	db	121
   198  00FE16  21                 	db	33
   199  00FE17  39                 	db	57
   200  00FE18  94                 	db	148
   201  00FE19  80                 	db	128
   202  00FE1A  37                 	db	55
   203  00FE1B  93                 	db	147
   204  00FE1C  A7                 	db	167
   205  00FE1D  35                 	db	53
   206  00FE1E  56                 	db	86
   207  00FE1F  15                 	db	21
   208  00FE20  34                 	db	52
   209  00FE21                     __end_ofexp@coeff:
   210                           	opt stack 0
   211  00FE21                     log@coeff:
   212                           	opt stack 0
   213  00FE21  00                 	db	0
   214  00FE22  00                 	db	0
   215  00FE23  00                 	db	0
   216  00FE24  00                 	db	0
   217  00FE25  80                 	db	128
   218  00FE26  3F                 	db	63
   219  00FE27  F0                 	db	240
   220  00FE28  FF                 	db	255
   221  00FE29  BE                 	db	190
   222  00FE2A  E2                 	db	226
   223  00FE2B  A9                 	db	169
   224  00FE2C  3E                 	db	62
   225  00FE2D  83                 	db	131
   226  00FE2E  76                 	db	118
   227  00FE2F  BE                 	db	190
   228  00FE30  AE                 	db	174
   229  00FE31  2B                 	db	43
   230  00FE32  3E                 	db	62
   231  00FE33  3C                 	db	60
   232  00FE34  C3                 	db	195
   233  00FE35  BD                 	db	189
   234  00FE36  D2                 	db	210
   235  00FE37  13                 	db	19
   236  00FE38  3D                 	db	61
   237  00FE39  78                 	db	120
   238  00FE3A  D3                 	db	211
   239  00FE3B  BB                 	db	187
   240  00FE3C                     __end_oflog@coeff:
   241                           	opt stack 0
   242  0000                     _TMR0	set	4054
   243  0000                     _ADCON0	set	4034
   244  0000                     _ADCON1	set	4033
   245  0000                     _INTCONbits	set	4082
   246  0000                     _LATA	set	3977
   247  0000                     _LATB	set	3978
   248  0000                     _LATC	set	3979
   249  0000                     _LATD	set	3980
   250  0000                     _LATDbits	set	3980
   251  0000                     _LATE	set	3981
   252  0000                     _PORTB	set	3969
   253  0000                     _PORTCbits	set	3970
   254  0000                     _SSPADD	set	4040
   255  0000                     _SSPBUF	set	4041
   256  0000                     _SSPCON1	set	4038
   257  0000                     _SSPCON2	set	4037
   258  0000                     _SSPSTAT	set	4039
   259  0000                     _TRISA	set	3986
   260  0000                     _TRISB	set	3987
   261  0000                     _TRISC	set	3988
   262  0000                     _TRISD	set	3989
   263  0000                     _TRISE	set	3990
   264  0000                     _ACKDT	set	32301
   265  0000                     _ACKEN	set	32300
   266  0000                     _INT1IE	set	32643
   267  0000                     _INT1IF	set	32640
   268  0000                     _PEN	set	32298
   269  0000                     _PSA	set	32427
   270  0000                     _RCEN	set	32299
   271  0000                     _RSEN	set	32297
   272  0000                     _SEN	set	32296
   273  0000                     _T08BIT	set	32430
   274  0000                     _T0CS	set	32429
   275  0000                     _T0PS0	set	32424
   276  0000                     _T0PS1	set	32425
   277  0000                     _T0PS2	set	32426
   278  0000                     _TMR0IE	set	32661
   279  0000                     _TMR0IF	set	32658
   280  0000                     _TMR0ON	set	32431
   281  0000                     _TRISC3	set	31907
   282  0000                     _TRISC4	set	31908
   283  0000                     _nRBPU	set	32655
   284  00FE3C                     STR_22:
   285  00FE3C  52                 	db	82	;'R'
   286  00FE3D  75                 	db	117	;'u'
   287  00FE3E  6E                 	db	110	;'n'
   288  00FE3F  6E                 	db	110	;'n'
   289  00FE40  69                 	db	105	;'i'
   290  00FE41  6E                 	db	110	;'n'
   291  00FE42  67                 	db	103	;'g'
   292  00FE43  7E                 	db	126
   293  00FE44  7E                 	db	126
   294  00FE45  7E                 	db	126
   295  00FE46  20                 	db	32
   296  00FE47  20                 	db	32
   297  00FE48  20                 	db	32
   298  00FE49  20                 	db	32
   299  00FE4A  20                 	db	32
   300  00FE4B  20                 	db	32
   301  00FE4C  20                 	db	32
   302  00FE4D  20                 	db	32
   303  00FE4E  20                 	db	32
   304  00FE4F  20                 	db	32
   305  00FE50  20                 	db	32
   306  00FE51  20                 	db	32
   307  00FE52  20                 	db	32
   308  00FE53  20                 	db	32
   309  00FE54  00                 	db	0
   310  00FE55                     STR_21:
   311  00FE55  52                 	db	82	;'R'
   312  00FE56  75                 	db	117	;'u'
   313  00FE57  6E                 	db	110	;'n'
   314  00FE58  6E                 	db	110	;'n'
   315  00FE59  69                 	db	105	;'i'
   316  00FE5A  6E                 	db	110	;'n'
   317  00FE5B  67                 	db	103	;'g'
   318  00FE5C  7E                 	db	126
   319  00FE5D  7E                 	db	126
   320  00FE5E  20                 	db	32
   321  00FE5F  20                 	db	32
   322  00FE60  20                 	db	32
   323  00FE61  20                 	db	32
   324  00FE62  20                 	db	32
   325  00FE63  20                 	db	32
   326  00FE64  20                 	db	32
   327  00FE65  20                 	db	32
   328  00FE66  20                 	db	32
   329  00FE67  20                 	db	32
   330  00FE68  20                 	db	32
   331  00FE69  20                 	db	32
   332  00FE6A  20                 	db	32
   333  00FE6B  20                 	db	32
   334  00FE6C  00                 	db	0
   335  00FE6D                     STR_19:
   336  00FE6D  52                 	db	82	;'R'
   337  00FE6E  75                 	db	117	;'u'
   338  00FE6F  6E                 	db	110	;'n'
   339  00FE70  6E                 	db	110	;'n'
   340  00FE71  69                 	db	105	;'i'
   341  00FE72  6E                 	db	110	;'n'
   342  00FE73  67                 	db	103	;'g'
   343  00FE74  7E                 	db	126
   344  00FE75  20                 	db	32
   345  00FE76  20                 	db	32
   346  00FE77  20                 	db	32
   347  00FE78  20                 	db	32
   348  00FE79  20                 	db	32
   349  00FE7A  20                 	db	32
   350  00FE7B  20                 	db	32
   351  00FE7C  20                 	db	32
   352  00FE7D  20                 	db	32
   353  00FE7E  20                 	db	32
   354  00FE7F  20                 	db	32
   355  00FE80  20                 	db	32
   356  00FE81  20                 	db	32
   357  00FE82  20                 	db	32
   358  00FE83  00                 	db	0
   359  00FE84                     STR_17:
   360  00FE84  54                 	db	84	;'T'
   361  00FE85  6F                 	db	111	;'o'
   362  00FE86  74                 	db	116	;'t'
   363  00FE87  61                 	db	97	;'a'
   364  00FE88  6C                 	db	108	;'l'
   365  00FE89  20                 	db	32
   366  00FE8A  4F                 	db	79	;'O'
   367  00FE8B  70                 	db	112	;'p'
   368  00FE8C  65                 	db	101	;'e'
   369  00FE8D  72                 	db	114	;'r'
   370  00FE8E  61                 	db	97	;'a'
   371  00FE8F  74                 	db	116	;'t'
   372  00FE90  69                 	db	105	;'i'
   373  00FE91  6F                 	db	111	;'o'
   374  00FE92  6E                 	db	110	;'n'
   375  00FE93  20                 	db	32
   376  00FE94  20                 	db	32
   377  00FE95  20                 	db	32
   378  00FE96  20                 	db	32
   379  00FE97  20                 	db	32
   380  00FE98  20                 	db	32
   381  00FE99  20                 	db	32
   382  00FE9A  00                 	db	0
   383  00FE9B                     STR_4:
   384  00FE9B  44                 	db	68	;'D'
   385  00FE9C  61                 	db	97	;'a'
   386  00FE9D  74                 	db	116	;'t'
   387  00FE9E  65                 	db	101	;'e'
   388  00FE9F  3A                 	db	58	;':'
   389  00FEA0  20                 	db	32
   390  00FEA1  25                 	db	37
   391  00FEA2  30                 	db	48	;'0'
   392  00FEA3  32                 	db	50	;'2'
   393  00FEA4  78                 	db	120	;'x'
   394  00FEA5  2F                 	db	47
   395  00FEA6  25                 	db	37
   396  00FEA7  30                 	db	48	;'0'
   397  00FEA8  32                 	db	50	;'2'
   398  00FEA9  78                 	db	120	;'x'
   399  00FEAA  2F                 	db	47
   400  00FEAB  25                 	db	37
   401  00FEAC  30                 	db	48	;'0'
   402  00FEAD  32                 	db	50	;'2'
   403  00FEAE  78                 	db	120	;'x'
   404  00FEAF  20                 	db	32
   405  00FEB0  20                 	db	32
   406  00FEB1  00                 	db	0
   407  00FEB2                     STR_5:
   408  00FEB2  54                 	db	84	;'T'
   409  00FEB3  69                 	db	105	;'i'
   410  00FEB4  6D                 	db	109	;'m'
   411  00FEB5  65                 	db	101	;'e'
   412  00FEB6  3A                 	db	58	;':'
   413  00FEB7  20                 	db	32
   414  00FEB8  25                 	db	37
   415  00FEB9  30                 	db	48	;'0'
   416  00FEBA  32                 	db	50	;'2'
   417  00FEBB  78                 	db	120	;'x'
   418  00FEBC  3A                 	db	58	;':'
   419  00FEBD  25                 	db	37
   420  00FEBE  30                 	db	48	;'0'
   421  00FEBF  32                 	db	50	;'2'
   422  00FEC0  78                 	db	120	;'x'
   423  00FEC1  3A                 	db	58	;':'
   424  00FEC2  25                 	db	37
   425  00FEC3  30                 	db	48	;'0'
   426  00FEC4  32                 	db	50	;'2'
   427  00FEC5  78                 	db	120	;'x'
   428  00FEC6  20                 	db	32
   429  00FEC7  20                 	db	32
   430  00FEC8  00                 	db	0
   431  00FEC9                     STR_20:
   432  00FEC9  43                 	db	67	;'C'
   433  00FECA  3A                 	db	58	;':'
   434  00FECB  20                 	db	32
   435  00FECC  25                 	db	37
   436  00FECD  64                 	db	100	;'d'
   437  00FECE  20                 	db	32
   438  00FECF  20                 	db	32
   439  00FED0  20                 	db	32
   440  00FED1  20                 	db	32
   441  00FED2  20                 	db	32
   442  00FED3  20                 	db	32
   443  00FED4  20                 	db	32
   444  00FED5  20                 	db	32
   445  00FED6  20                 	db	32
   446  00FED7  20                 	db	32
   447  00FED8  20                 	db	32
   448  00FED9  20                 	db	32
   449  00FEDA  20                 	db	32
   450  00FEDB  20                 	db	32
   451  00FEDC  20                 	db	32
   452  00FEDD  20                 	db	32
   453  00FEDE  00                 	db	0
   454  00FEDF                     STR_18:
   455  00FEDF  54                 	db	84	;'T'
   456  00FEE0  69                 	db	105	;'i'
   457  00FEE1  6D                 	db	109	;'m'
   458  00FEE2  65                 	db	101	;'e'
   459  00FEE3  3A                 	db	58	;':'
   460  00FEE4  20                 	db	32
   461  00FEE5  25                 	db	37
   462  00FEE6  64                 	db	100	;'d'
   463  00FEE7  20                 	db	32
   464  00FEE8  73                 	db	115	;'s'
   465  00FEE9  20                 	db	32
   466  00FEEA  20                 	db	32
   467  00FEEB  20                 	db	32
   468  00FEEC  20                 	db	32
   469  00FEED  20                 	db	32
   470  00FEEE  20                 	db	32
   471  00FEEF  20                 	db	32
   472  00FEF0  00                 	db	0
   473  00FEF1                     STR_25:
   474  00FEF1  30                 	db	48	;'0'
   475  00FEF2  31                 	db	49	;'1'
   476  00FEF3  32                 	db	50	;'2'
   477  00FEF4  33                 	db	51	;'3'
   478  00FEF5  34                 	db	52	;'4'
   479  00FEF6  35                 	db	53	;'5'
   480  00FEF7  36                 	db	54	;'6'
   481  00FEF8  37                 	db	55	;'7'
   482  00FEF9  38                 	db	56	;'8'
   483  00FEFA  39                 	db	57	;'9'
   484  00FEFB  61                 	db	97	;'a'
   485  00FEFC  62                 	db	98	;'b'
   486  00FEFD  63                 	db	99	;'c'
   487  00FEFE  64                 	db	100	;'d'
   488  00FEFF  65                 	db	101	;'e'
   489  00FF00  66                 	db	102	;'f'
   490  00FF01  00                 	db	0
   491  00FF02                     STR_2:
   492  00FF02  73                 	db	115	;'s'
   493  00FF03  74                 	db	116	;'t'
   494  00FF04  61                 	db	97	;'a'
   495  00FF05  6E                 	db	110	;'n'
   496  00FF06  64                 	db	100	;'d'
   497  00FF07  62                 	db	98	;'b'
   498  00FF08  79                 	db	121	;'y'
   499  00FF09  20                 	db	32
   500  00FF0A  20                 	db	32
   501  00FF0B  20                 	db	32
   502  00FF0C  20                 	db	32
   503  00FF0D  20                 	db	32
   504  00FF0E  20                 	db	32
   505  00FF0F  20                 	db	32
   506  00FF10  20                 	db	32
   507  00FF11  20                 	db	32
   508  00FF12  00                 	db	0
   509  00FF13                     STR_7:
   510  00FF13  54                 	db	84	;'T'
   511  00FF14  6F                 	db	111	;'o'
   512  00FF15  74                 	db	116	;'t'
   513  00FF16  61                 	db	97	;'a'
   514  00FF17  6C                 	db	108	;'l'
   515  00FF18  3A                 	db	58	;':'
   516  00FF19  20                 	db	32
   517  00FF1A  31                 	db	49	;'1'
   518  00FF1B  30                 	db	48	;'0'
   519  00FF1C  20                 	db	32
   520  00FF1D  20                 	db	32
   521  00FF1E  20                 	db	32
   522  00FF1F  20                 	db	32
   523  00FF20  20                 	db	32
   524  00FF21  20                 	db	32
   525  00FF22  20                 	db	32
   526  00FF23  00                 	db	0
   527  00FF24                     STR_6:
   528  00FF24  42                 	db	66	;'B'
   529  00FF25  6F                 	db	111	;'o'
   530  00FF26  74                 	db	116	;'t'
   531  00FF27  74                 	db	116	;'t'
   532  00FF28  6C                 	db	108	;'l'
   533  00FF29  65                 	db	101	;'e'
   534  00FF2A  20                 	db	32
   535  00FF2B  43                 	db	67	;'C'
   536  00FF2C  6F                 	db	111	;'o'
   537  00FF2D  75                 	db	117	;'u'
   538  00FF2E  6E                 	db	110	;'n'
   539  00FF2F  74                 	db	116	;'t'
   540  00FF30  20                 	db	32
   541  00FF31  20                 	db	32
   542  00FF32  20                 	db	32
   543  00FF33  20                 	db	32
   544  00FF34  00                 	db	0
   545  00FF35                     STR_11:
   546  00FF35  59                 	db	89	;'Y'
   547  00FF36  4F                 	db	79	;'O'
   548  00FF37  50                 	db	80	;'P'
   549  00FF38  2D                 	db	45
   550  00FF39  43                 	db	67	;'C'
   551  00FF3A  41                 	db	65	;'A'
   552  00FF3B  50                 	db	80	;'P'
   553  00FF3C  2D                 	db	45
   554  00FF3D  4C                 	db	76	;'L'
   555  00FF3E  42                 	db	66	;'B'
   556  00FF3F  4C                 	db	76	;'L'
   557  00FF40  3A                 	db	58	;':'
   558  00FF41  20                 	db	32
   559  00FF42  30                 	db	48	;'0'
   560  00FF43  20                 	db	32
   561  00FF44  20                 	db	32
   562  00FF45  00                 	db	0
   563  00FF46                     STR_10:
   564  00FF46  59                 	db	89	;'Y'
   565  00FF47  4F                 	db	79	;'O'
   566  00FF48  50                 	db	80	;'P'
   567  00FF49  2D                 	db	45
   568  00FF4A  43                 	db	67	;'C'
   569  00FF4B  41                 	db	65	;'A'
   570  00FF4C  50                 	db	80	;'P'
   571  00FF4D  2B                 	db	43
   572  00FF4E  4C                 	db	76	;'L'
   573  00FF4F  42                 	db	66	;'B'
   574  00FF50  4C                 	db	76	;'L'
   575  00FF51  3A                 	db	58	;':'
   576  00FF52  20                 	db	32
   577  00FF53  31                 	db	49	;'1'
   578  00FF54  20                 	db	32
   579  00FF55  20                 	db	32
   580  00FF56  00                 	db	0
   581  00FF57                     STR_9:
   582  00FF57  59                 	db	89	;'Y'
   583  00FF58  4F                 	db	79	;'O'
   584  00FF59  50                 	db	80	;'P'
   585  00FF5A  2B                 	db	43
   586  00FF5B  43                 	db	67	;'C'
   587  00FF5C  41                 	db	65	;'A'
   588  00FF5D  50                 	db	80	;'P'
   589  00FF5E  2D                 	db	45
   590  00FF5F  4C                 	db	76	;'L'
   591  00FF60  42                 	db	66	;'B'
   592  00FF61  4C                 	db	76	;'L'
   593  00FF62  3A                 	db	58	;':'
   594  00FF63  20                 	db	32
   595  00FF64  31                 	db	49	;'1'
   596  00FF65  20                 	db	32
   597  00FF66  20                 	db	32
   598  00FF67  00                 	db	0
   599  00FF68                     STR_8:
   600  00FF68  59                 	db	89	;'Y'
   601  00FF69  4F                 	db	79	;'O'
   602  00FF6A  50                 	db	80	;'P'
   603  00FF6B  2B                 	db	43
   604  00FF6C  43                 	db	67	;'C'
   605  00FF6D  41                 	db	65	;'A'
   606  00FF6E  50                 	db	80	;'P'
   607  00FF6F  2B                 	db	43
   608  00FF70  4C                 	db	76	;'L'
   609  00FF71  42                 	db	66	;'B'
   610  00FF72  4C                 	db	76	;'L'
   611  00FF73  3A                 	db	58	;':'
   612  00FF74  20                 	db	32
   613  00FF75  33                 	db	51	;'3'
   614  00FF76  20                 	db	32
   615  00FF77  20                 	db	32
   616  00FF78  00                 	db	0
   617  00FF79                     STR_12:
   618  00FF79  45                 	db	69	;'E'
   619  00FF7A  53                 	db	83	;'S'
   620  00FF7B  4B                 	db	75	;'K'
   621  00FF7C  41                 	db	65	;'A'
   622  00FF7D  2B                 	db	43
   623  00FF7E  43                 	db	67	;'C'
   624  00FF7F  41                 	db	65	;'A'
   625  00FF80  50                 	db	80	;'P'
   626  00FF81  2B                 	db	43
   627  00FF82  4C                 	db	76	;'L'
   628  00FF83  42                 	db	66	;'B'
   629  00FF84  4C                 	db	76	;'L'
   630  00FF85  3A                 	db	58	;':'
   631  00FF86  20                 	db	32
   632  00FF87  31                 	db	49	;'1'
   633  00FF88  20                 	db	32
   634  00FF89  00                 	db	0
   635  00FF8A                     STR_14:
   636  00FF8A  45                 	db	69	;'E'
   637  00FF8B  53                 	db	83	;'S'
   638  00FF8C  4B                 	db	75	;'K'
   639  00FF8D  41                 	db	65	;'A'
   640  00FF8E  2D                 	db	45
   641  00FF8F  43                 	db	67	;'C'
   642  00FF90  41                 	db	65	;'A'
   643  00FF91  50                 	db	80	;'P'
   644  00FF92  2B                 	db	43
   645  00FF93  4C                 	db	76	;'L'
   646  00FF94  42                 	db	66	;'B'
   647  00FF95  4C                 	db	76	;'L'
   648  00FF96  3A                 	db	58	;':'
   649  00FF97  20                 	db	32
   650  00FF98  31                 	db	49	;'1'
   651  00FF99  20                 	db	32
   652  00FF9A  00                 	db	0
   653  00FF9B                     STR_13:
   654  00FF9B  45                 	db	69	;'E'
   655  00FF9C  53                 	db	83	;'S'
   656  00FF9D  4B                 	db	75	;'K'
   657  00FF9E  41                 	db	65	;'A'
   658  00FF9F  2B                 	db	43
   659  00FFA0  43                 	db	67	;'C'
   660  00FFA1  41                 	db	65	;'A'
   661  00FFA2  50                 	db	80	;'P'
   662  00FFA3  2D                 	db	45
   663  00FFA4  4C                 	db	76	;'L'
   664  00FFA5  42                 	db	66	;'B'
   665  00FFA6  4C                 	db	76	;'L'
   666  00FFA7  3A                 	db	58	;':'
   667  00FFA8  20                 	db	32
   668  00FFA9  31                 	db	49	;'1'
   669  00FFAA  20                 	db	32
   670  00FFAB  00                 	db	0
   671  00FFAC                     STR_15:
   672  00FFAC  45                 	db	69	;'E'
   673  00FFAD  53                 	db	83	;'S'
   674  00FFAE  4B                 	db	75	;'K'
   675  00FFAF  41                 	db	65	;'A'
   676  00FFB0  2D                 	db	45
   677  00FFB1  43                 	db	67	;'C'
   678  00FFB2  41                 	db	65	;'A'
   679  00FFB3  50                 	db	80	;'P'
   680  00FFB4  2D                 	db	45
   681  00FFB5  4C                 	db	76	;'L'
   682  00FFB6  42                 	db	66	;'B'
   683  00FFB7  4C                 	db	76	;'L'
   684  00FFB8  3A                 	db	58	;':'
   685  00FFB9  20                 	db	32
   686  00FFBA  32                 	db	50	;'2'
   687  00FFBB  20                 	db	32
   688  00FFBC  00                 	db	0
   689  00FFBD                     STR_23:
   690  00FFBD  4F                 	db	79	;'O'
   691  00FFBE  70                 	db	112	;'p'
   692  00FFBF  65                 	db	101	;'e'
   693  00FFC0  72                 	db	114	;'r'
   694  00FFC1  61                 	db	97	;'a'
   695  00FFC2  74                 	db	116	;'t'
   696  00FFC3  69                 	db	105	;'i'
   697  00FFC4  6F                 	db	111	;'o'
   698  00FFC5  6E                 	db	110	;'n'
   699  00FFC6  20                 	db	32
   700  00FFC7  44                 	db	68	;'D'
   701  00FFC8  6F                 	db	111	;'o'
   702  00FFC9  6E                 	db	110	;'n'
   703  00FFCA  65                 	db	101	;'e'
   704  00FFCB  21                 	db	33
   705  00FFCC  00                 	db	0
   706  00FFCD                     STR_24:
   707  00FFCD  45                 	db	69	;'E'
   708  00FFCE  4D                 	db	77	;'M'
   709  00FFCF  45                 	db	69	;'E'
   710  00FFD0  52                 	db	82	;'R'
   711  00FFD1  47                 	db	71	;'G'
   712  00FFD2  45                 	db	69	;'E'
   713  00FFD3  4E                 	db	78	;'N'
   714  00FFD4  43                 	db	67	;'C'
   715  00FFD5  59                 	db	89	;'Y'
   716  00FFD6  20                 	db	32
   717  00FFD7  53                 	db	83	;'S'
   718  00FFD8  54                 	db	84	;'T'
   719  00FFD9  4F                 	db	79	;'O'
   720  00FFDA  50                 	db	80	;'P'
   721  00FFDB  00                 	db	0
   722  00FFDC                     STR_1:
   723  00FFDC  62                 	db	98	;'b'
   724  00FFDD  61                 	db	97	;'a'
   725  00FFDE  64                 	db	100	;'d'
   726  00FFDF  20                 	db	32
   727  00FFE0  69                 	db	105	;'i'
   728  00FFE1  6E                 	db	110	;'n'
   729  00FFE2  74                 	db	116	;'t'
   730  00FFE3  65                 	db	101	;'e'
   731  00FFE4  72                 	db	114	;'r'
   732  00FFE5  72                 	db	114	;'r'
   733  00FFE6  75                 	db	117	;'u'
   734  00FFE7  70                 	db	112	;'p'
   735  00FFE8  74                 	db	116	;'t'
   736  00FFE9  00                 	db	0
   737  00FFEA                     STR_3:
   738  00FFEA  50                 	db	80	;'P'
   739  00FFEB  4F                 	db	79	;'O'
   740  00FFEC  52                 	db	82	;'R'
   741  00FFED  54                 	db	84	;'T'
   742  00FFEE  42                 	db	66	;'B'
   743  00FFEF  3A                 	db	58	;':'
   744  00FFF0  20                 	db	32
   745  00FFF1  25                 	db	37
   746  00FFF2  64                 	db	100	;'d'
   747  00FFF3  00                 	db	0
   748  00FFF4                     STR_16:
   749  00FFF4  45                 	db	69	;'E'
   750  00FFF5  52                 	db	82	;'R'
   751  00FFF6  52                 	db	82	;'R'
   752  00FFF7  4F                 	db	79	;'O'
   753  00FFF8  52                 	db	82	;'R'
   754  00FFF9  3A                 	db	58	;':'
   755  00FFFA  20                 	db	32
   756  00FFFB  25                 	db	37
   757  00FFFC  64                 	db	100	;'d'
   758  00FFFD  00                 	db	0
   759                           
   760                           ; #config settings
   761  00FFFE  00                 	db	0	; dummy byte at the end
   762  0000                     
   763                           	psect	cinit
   764  002400                     __pcinit:
   765                           	opt stack 0
   766  002400                     start_initialization:
   767                           	opt stack 0
   768  002400                     __initialization:
   769                           	opt stack 0
   770                           
   771                           ; Initialize objects allocated to BANK0 (2 bytes)
   772                           ; load TBLPTR registers with __pidataBANK0
   773  002400  0EF6               	movlw	low __pidataBANK0
   774  002402  6EF6               	movwf	tblptrl,c
   775  002404  0E26               	movlw	high __pidataBANK0
   776  002406  6EF7               	movwf	tblptrh,c
   777  002408  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   778  00240A  6EF8               	movwf	tblptru,c
   779  00240C  0009               	tblrd		*+	;fetch initializer
   780  00240E  CFF5 F0CC          	movff	tablat,__pdataBANK0
   781  002412  0009               	tblrd		*+	;fetch initializer
   782  002414  CFF5 F0CD          	movff	tablat,__pdataBANK0+1
   783                           
   784                           ; Clear objects allocated to BANK0 (22 bytes)
   785  002418  EE00  F0B6         	lfsr	0,__pbssBANK0
   786  00241C  0E16               	movlw	22
   787  00241E                     clear_0:
   788  00241E  6AEE               	clrf	postinc0,c
   789  002420  06E8               	decf	wreg,f,c
   790  002422  E1FD               	bnz	clear_0
   791                           
   792                           ; Clear objects allocated to COMRAM (8 bytes)
   793  002424  EE00  F076         	lfsr	0,__pbssCOMRAM
   794  002428  0E08               	movlw	8
   795  00242A                     clear_1:
   796  00242A  6AEE               	clrf	postinc0,c
   797  00242C  06E8               	decf	wreg,f,c
   798  00242E  E1FD               	bnz	clear_1
   799  002430                     end_of_initialization:
   800                           	opt stack 0
   801  002430                     __end_of__initialization:
   802                           	opt stack 0
   803  002430  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   804  002432  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   805  002434  0E00               	movlw	low (__Lmediumconst shr (0+16))
   806  002436  6EF8               	movwf	tblptru,c
   807  002438  0100               	movlb	0
   808  00243A  EFDB  F008         	goto	_main	;jump to C main() function
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           
   816                           	psect	bssCOMRAM
   817  000076                     __pbssCOMRAM:
   818                           	opt stack 0
   819  000076                     _end_time:
   820                           	opt stack 0
   821  000076                     	ds	2
   822  000078                     _errno:
   823                           	opt stack 0
   824  000078                     	ds	2
   825  00007A                     _ptr:
   826                           	opt stack 0
   827  00007A                     	ds	2
   828  00007C                     _start_time:
   829                           	opt stack 0
   830  00007C                     	ds	2
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           
   838                           	psect	bssBANK0
   839  0000B6                     __pbssBANK0:
   840                           	opt stack 0
   841  0000B6                     _color:
   842                           	opt stack 0
   843  0000B6                     	ds	8
   844  0000BE                     _time:
   845                           	opt stack 0
   846  0000BE                     	ds	7
   847  0000C5                     _etime:
   848                           	opt stack 0
   849  0000C5                     	ds	2
   850  0000C7                     _operation_disp:
   851                           	opt stack 0
   852  0000C7                     	ds	2
   853  0000C9                     _stime:
   854                           	opt stack 0
   855  0000C9                     	ds	2
   856  0000CB                     _curr_state:
   857                           	opt stack 0
   858  0000CB                     	ds	1
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           
   866                           	psect	dataBANK0
   867  0000CC                     __pdataBANK0:
   868                           	opt stack 0
   869  0000CC                     _bottle_count_disp:
   870                           	opt stack 0
   871  0000CC                     	ds	2
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           
   879                           	psect	cstackBANK0
   880  000080                     __pcstackBANK0:
   881                           	opt stack 0
   882  000080                     ??_isr:
   883                           
   884                           ; 1 bytes @ 0x0
   885  000080                     	ds	16
   886  000090                     ??_isdigit:
   887  000090                     ??_I2C_Master_Wait:
   888  000090                     ?___wmul:
   889                           	opt stack 0
   890  000090                     ?___awmod:
   891                           	opt stack 0
   892  000090                     ?___lwdiv:
   893                           	opt stack 0
   894  000090                     ?___lldiv:
   895                           	opt stack 0
   896  000090                     lcdNibble@temp:
   897                           	opt stack 0
   898  000090                     ___wmul@multiplier:
   899                           	opt stack 0
   900  000090                     ___awmod@dividend:
   901                           	opt stack 0
   902  000090                     ___lwdiv@dividend:
   903                           	opt stack 0
   904  000090                     ___lldiv@dividend:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x10
   908  000090                     	ds	1
   909  000091                     I2C_Master_Read@a:
   910                           	opt stack 0
   911  000091                     lcdNibble@data:
   912                           	opt stack 0
   913  000091                     _isdigit$699:
   914                           	opt stack 0
   915  000091                     I2C_Master_Write@d:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x11
   919  000091                     	ds	1
   920  000092                     I2C_Master_Read@temp:
   921                           	opt stack 0
   922  000092                     lcdInst@data:
   923                           	opt stack 0
   924  000092                     putch@data:
   925                           	opt stack 0
   926  000092                     isdigit@c:
   927                           	opt stack 0
   928  000092                     ___wmul@multiplicand:
   929                           	opt stack 0
   930  000092                     ___awmod@divisor:
   931                           	opt stack 0
   932  000092                     ___lwdiv@divisor:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x12
   936  000092                     	ds	1
   937  000093                     ??_read_colorsensor:
   938  000093                     ??_initLCD:
   939                           
   940                           ; 1 bytes @ 0x13
   941  000093                     	ds	1
   942  000094                     ___awmod@counter:
   943                           	opt stack 0
   944  000094                     ___wmul@product:
   945                           	opt stack 0
   946  000094                     ___lwdiv@quotient:
   947                           	opt stack 0
   948  000094                     ___lldiv@divisor:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x14
   952  000094                     	ds	1
   953  000095                     ___awmod@sign:
   954                           	opt stack 0
   955  000095                     read_colorsensor@color_low:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x15
   959  000095                     	ds	1
   960  000096                     ___lwdiv@counter:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x16
   964  000096                     	ds	1
   965  000097                     ?___lwmod:
   966                           	opt stack 0
   967  000097                     read_colorsensor@color_high:
   968                           	opt stack 0
   969  000097                     ___lwmod@dividend:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x17
   973  000097                     	ds	1
   974  000098                     ___lldiv@quotient:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x18
   978  000098                     	ds	1
   979  000099                     read_colorsensor@color_comb:
   980                           	opt stack 0
   981  000099                     ___lwmod@divisor:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x19
   985  000099                     	ds	2
   986  00009B                     ___lwmod@counter:
   987                           	opt stack 0
   988  00009B                     read_colorsensor@i:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x1B
   992  00009B                     	ds	1
   993  00009C                     ?_printf:
   994                           	opt stack 0
   995  00009C                     ___lldiv@counter:
   996                           	opt stack 0
   997  00009C                     printf@f:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x1C
  1001  00009C                     	ds	1
  1002  00009D                     I2C_Master_Init@c:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x1D
  1006  00009D                     	ds	4
  1007  0000A1                     ??_I2C_Master_Init:
  1008                           
  1009                           ; 1 bytes @ 0x21
  1010  0000A1                     	ds	3
  1011  0000A4                     ??_printf:
  1012                           
  1013                           ; 1 bytes @ 0x24
  1014  0000A4                     	ds	4
  1015  0000A8                     printf@idx:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x28
  1019  0000A8                     	ds	1
  1020  0000A9                     printf@ap:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x29
  1024  0000A9                     	ds	2
  1025  0000AB                     printf@prec:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x2B
  1029  0000AB                     	ds	1
  1030  0000AC                     printf@val:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x2C
  1034  0000AC                     	ds	2
  1035  0000AE                     printf@flag:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x2E
  1039  0000AE                     	ds	1
  1040  0000AF                     printf@width:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2F
  1044  0000AF                     	ds	2
  1045  0000B1                     printf@c:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x31
  1049  0000B1                     	ds	1
  1050  0000B2                     ??_operation:
  1051  0000B2                     date_time@i:
  1052                           	opt stack 0
  1053  0000B2                     bottle_time@time:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x32
  1057  0000B2                     	ds	2
  1058  0000B4                     ??_main:
  1059                           
  1060                           ; 1 bytes @ 0x34
  1061  0000B4                     	ds	2
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           
  1069                           	psect	cstackCOMRAM
  1070  000001                     __pcstackCOMRAM:
  1071                           	opt stack 0
  1072  000001                     ??i2_I2C_Master_Wait:
  1073  000001                     ??i2_isdigit:
  1074  000001                     ?i2___wmul:
  1075                           	opt stack 0
  1076  000001                     ?i2___lwdiv:
  1077                           	opt stack 0
  1078  000001                     ?___ftpack:
  1079                           	opt stack 0
  1080  000001                     ?_frexp:
  1081                           	opt stack 0
  1082  000001                     ?___ftneg:
  1083                           	opt stack 0
  1084  000001                     i2lcdNibble@temp:
  1085                           	opt stack 0
  1086  000001                     i2___wmul@multiplier:
  1087                           	opt stack 0
  1088  000001                     i2___lwdiv@dividend:
  1089                           	opt stack 0
  1090  000001                     ___ftpack@arg:
  1091                           	opt stack 0
  1092  000001                     ___ftge@ff1:
  1093                           	opt stack 0
  1094  000001                     ___ftneg@f1:
  1095                           	opt stack 0
  1096  000001                     frexp@value:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x0
  1100  000001                     	ds	1
  1101  000002                     i2I2C_Master_Read@a:
  1102                           	opt stack 0
  1103  000002                     i2lcdNibble@data:
  1104                           	opt stack 0
  1105  000002                     i2_isdigit$699:
  1106                           	opt stack 0
  1107  000002                     i2I2C_Master_Write@d:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x1
  1111  000002                     	ds	1
  1112  000003                     i2I2C_Master_Read@temp:
  1113                           	opt stack 0
  1114  000003                     i2lcdInst@data:
  1115                           	opt stack 0
  1116  000003                     i2putch@data:
  1117                           	opt stack 0
  1118  000003                     i2isdigit@c:
  1119                           	opt stack 0
  1120  000003                     i2___wmul@multiplicand:
  1121                           	opt stack 0
  1122  000003                     i2___lwdiv@divisor:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x2
  1126  000003                     	ds	1
  1127  000004                     ??i2_read_colorsensor:
  1128  000004                     read_time@i:
  1129                           	opt stack 0
  1130  000004                     ___ftpack@exp:
  1131                           	opt stack 0
  1132  000004                     frexp@eptr:
  1133                           	opt stack 0
  1134  000004                     ___ftge@ff2:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x3
  1138  000004                     	ds	1
  1139  000005                     ___ftpack@sign:
  1140                           	opt stack 0
  1141  000005                     i2___wmul@product:
  1142                           	opt stack 0
  1143  000005                     i2___lwdiv@quotient:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x4
  1147  000005                     	ds	1
  1148  000006                     ??___ftpack:
  1149  000006                     ??_frexp:
  1150  000006                     i2read_colorsensor@color_low:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x5
  1154  000006                     	ds	1
  1155  000007                     ??___ftge:
  1156  000007                     ?___awdiv:
  1157                           	opt stack 0
  1158  000007                     i2___lwdiv@counter:
  1159                           	opt stack 0
  1160  000007                     ___awdiv@dividend:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x6
  1164  000007                     	ds	1
  1165  000008                     ?i2___lwmod:
  1166                           	opt stack 0
  1167  000008                     i2read_colorsensor@color_high:
  1168                           	opt stack 0
  1169  000008                     i2___lwmod@dividend:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x7
  1173  000008                     	ds	1
  1174  000009                     ?___ftdiv:
  1175                           	opt stack 0
  1176  000009                     ?___awtoft:
  1177                           	opt stack 0
  1178  000009                     ?___lltoft:
  1179                           	opt stack 0
  1180  000009                     ___awdiv@divisor:
  1181                           	opt stack 0
  1182  000009                     ___awtoft@c:
  1183                           	opt stack 0
  1184  000009                     ___ftdiv@f1:
  1185                           	opt stack 0
  1186  000009                     ___lltoft@c:
  1187                           	opt stack 0
  1188                           
  1189                           ; 4 bytes @ 0x8
  1190  000009                     	ds	1
  1191  00000A                     i2read_colorsensor@color_comb:
  1192                           	opt stack 0
  1193  00000A                     i2___lwmod@divisor:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x9
  1197  00000A                     	ds	1
  1198  00000B                     ___awdiv@counter:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0xA
  1202  00000B                     	ds	1
  1203  00000C                     ___awdiv@sign:
  1204                           	opt stack 0
  1205  00000C                     ___awtoft@sign:
  1206                           	opt stack 0
  1207  00000C                     i2___lwmod@counter:
  1208                           	opt stack 0
  1209  00000C                     i2read_colorsensor@i:
  1210                           	opt stack 0
  1211  00000C                     ___ftdiv@f2:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0xB
  1215  00000C                     	ds	1
  1216  00000D                     ??___lltoft:
  1217  00000D                     ?i2_printf:
  1218                           	opt stack 0
  1219  00000D                     ?___ftmul:
  1220                           	opt stack 0
  1221  00000D                     ___awdiv@quotient:
  1222                           	opt stack 0
  1223  00000D                     i2printf@f:
  1224                           	opt stack 0
  1225  00000D                     ___ftmul@f1:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0xC
  1229  00000D                     	ds	2
  1230  00000F                     ??___ftdiv:
  1231  00000F                     ??i2_printf:
  1232  00000F                     servo_rotate0@degree:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0xE
  1236  00000F                     	ds	1
  1237  000010                     ___ftmul@f2:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0xF
  1241  000010                     	ds	1
  1242  000011                     ??_servo_rotate0:
  1243  000011                     ___lltoft@exp:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x10
  1247  000011                     	ds	1
  1248  000012                     ___ftdiv@cntr:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x11
  1252  000012                     	ds	1
  1253  000013                     ??___ftmul:
  1254  000013                     i2printf@idx:
  1255                           	opt stack 0
  1256  000013                     servo_rotate0@duty:
  1257                           	opt stack 0
  1258  000013                     ___ftdiv@f3:
  1259                           	opt stack 0
  1260                           
  1261                           ; 3 bytes @ 0x12
  1262  000013                     	ds	1
  1263  000014                     i2printf@ap:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x13
  1267  000014                     	ds	1
  1268  000015                     servo_rotate0@i:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x14
  1272  000015                     	ds	1
  1273  000016                     ___ftdiv@exp:
  1274                           	opt stack 0
  1275  000016                     ___ftmul@exp:
  1276                           	opt stack 0
  1277  000016                     i2printf@prec:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x15
  1281  000016                     	ds	1
  1282  000017                     ___ftdiv@sign:
  1283                           	opt stack 0
  1284  000017                     servo_rotate0@j:
  1285                           	opt stack 0
  1286  000017                     i2printf@val:
  1287                           	opt stack 0
  1288  000017                     ___ftmul@f3_as_product:
  1289                           	opt stack 0
  1290                           
  1291                           ; 3 bytes @ 0x16
  1292  000017                     	ds	2
  1293  000019                     i2printf@flag:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x18
  1297  000019                     	ds	1
  1298  00001A                     ___ftmul@cntr:
  1299                           	opt stack 0
  1300  00001A                     i2printf@width:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x19
  1304  00001A                     	ds	1
  1305  00001B                     ___ftmul@sign:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x1A
  1309  00001B                     	ds	1
  1310  00001C                     ?___ftadd:
  1311                           	opt stack 0
  1312  00001C                     i2printf@c:
  1313                           	opt stack 0
  1314  00001C                     ___ftadd@f1:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x1B
  1318  00001C                     	ds	3
  1319  00001F                     ___ftadd@f2:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x1E
  1323  00001F                     	ds	3
  1324  000022                     ??___ftadd:
  1325                           
  1326                           ; 1 bytes @ 0x21
  1327  000022                     	ds	3
  1328  000025                     ___ftadd@sign:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x24
  1332  000025                     	ds	1
  1333  000026                     ___ftadd@exp2:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x25
  1337  000026                     	ds	1
  1338  000027                     ___ftadd@exp1:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x26
  1342  000027                     	ds	1
  1343  000028                     ?___ftsub:
  1344                           	opt stack 0
  1345  000028                     ?_eval_poly:
  1346                           	opt stack 0
  1347  000028                     ?___fttol:
  1348                           	opt stack 0
  1349  000028                     ___ftsub@f1:
  1350                           	opt stack 0
  1351  000028                     ___fttol@f1:
  1352                           	opt stack 0
  1353  000028                     eval_poly@x:
  1354                           	opt stack 0
  1355                           
  1356                           ; 3 bytes @ 0x27
  1357  000028                     	ds	3
  1358  00002B                     eval_poly@d:
  1359                           	opt stack 0
  1360  00002B                     ___ftsub@f2:
  1361                           	opt stack 0
  1362                           
  1363                           ; 3 bytes @ 0x2A
  1364  00002B                     	ds	1
  1365  00002C                     ??___fttol:
  1366                           
  1367                           ; 1 bytes @ 0x2B
  1368  00002C                     	ds	1
  1369  00002D                     eval_poly@n:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x2C
  1373  00002D                     	ds	1
  1374  00002E                     
  1375                           ; 1 bytes @ 0x2D
  1376  00002E                     	ds	1
  1377  00002F                     ??_eval_poly:
  1378                           
  1379                           ; 1 bytes @ 0x2E
  1380  00002F                     	ds	2
  1381  000031                     ___fttol@sign1:
  1382                           	opt stack 0
  1383  000031                     eval_poly@res:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x30
  1387  000031                     	ds	1
  1388  000032                     ___fttol@lval:
  1389                           	opt stack 0
  1390                           
  1391                           ; 4 bytes @ 0x31
  1392  000032                     	ds	2
  1393  000034                     ?_log:
  1394                           	opt stack 0
  1395  000034                     ?_ldexp:
  1396                           	opt stack 0
  1397  000034                     ldexp@value:
  1398                           	opt stack 0
  1399  000034                     log@x:
  1400                           	opt stack 0
  1401                           
  1402                           ; 3 bytes @ 0x33
  1403  000034                     	ds	2
  1404  000036                     ___fttol@exp1:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x35
  1408  000036                     	ds	1
  1409  000037                     ?___altoft:
  1410                           	opt stack 0
  1411  000037                     ldexp@newexp:
  1412                           	opt stack 0
  1413  000037                     log@exponent:
  1414                           	opt stack 0
  1415  000037                     ___altoft@c:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x36
  1419  000037                     	ds	2
  1420  000039                     ??_ldexp:
  1421                           
  1422                           ; 1 bytes @ 0x38
  1423  000039                     	ds	2
  1424  00003B                     ??___altoft:
  1425                           
  1426                           ; 1 bytes @ 0x3A
  1427  00003B                     	ds	4
  1428  00003F                     ___altoft@exp:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x3E
  1432  00003F                     	ds	1
  1433  000040                     ___altoft@sign:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x3F
  1437  000040                     	ds	1
  1438  000041                     ?_floor:
  1439                           	opt stack 0
  1440  000041                     floor@x:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x40
  1444  000041                     	ds	3
  1445  000044                     floor@i:
  1446                           	opt stack 0
  1447                           
  1448                           ; 3 bytes @ 0x43
  1449  000044                     	ds	3
  1450  000047                     floor@expon:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x46
  1454  000047                     	ds	2
  1455  000049                     ?_exp:
  1456                           	opt stack 0
  1457  000049                     exp@x:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x48
  1461  000049                     	ds	3
  1462  00004C                     _exp$1146:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x4B
  1466  00004C                     	ds	3
  1467  00004F                     exp@exponent:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x4E
  1471  00004F                     	ds	2
  1472  000051                     exp@sign:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x50
  1476  000051                     	ds	1
  1477  000052                     ?_pow:
  1478                           	opt stack 0
  1479  000052                     pow@x:
  1480                           	opt stack 0
  1481                           
  1482                           ; 3 bytes @ 0x51
  1483  000052                     	ds	3
  1484  000055                     pow@y:
  1485                           	opt stack 0
  1486                           
  1487                           ; 3 bytes @ 0x54
  1488  000055                     	ds	3
  1489  000058                     _pow$1144:
  1490                           	opt stack 0
  1491                           
  1492                           ; 3 bytes @ 0x57
  1493  000058                     	ds	3
  1494  00005B                     _pow$1145:
  1495                           	opt stack 0
  1496                           
  1497                           ; 3 bytes @ 0x5A
  1498  00005B                     	ds	3
  1499  00005E                     pow@sign:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x5D
  1503  00005E                     	ds	1
  1504  00005F                     pow@yi:
  1505                           	opt stack 0
  1506                           
  1507                           ; 4 bytes @ 0x5E
  1508  00005F                     	ds	4
  1509  000063                     ?_dec_to_hex:
  1510                           	opt stack 0
  1511  000063                     dec_to_hex@num:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x62
  1515  000063                     	ds	2
  1516  000065                     _dec_to_hex$1142:
  1517                           	opt stack 0
  1518                           
  1519                           ; 3 bytes @ 0x64
  1520  000065                     	ds	3
  1521  000068                     _dec_to_hex$1143:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x67
  1525  000068                     	ds	3
  1526  00006B                     dec_to_hex@temp:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x6A
  1530  00006B                     	ds	2
  1531  00006D                     dec_to_hex@i:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x6C
  1535  00006D                     	ds	2
  1536  00006F                     dec_to_hex@hexnum:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x6E
  1540  00006F                     	ds	2
  1541  000071                     dec_to_hex@quotient:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x70
  1545  000071                     	ds	2
  1546  000073                     _isr$1238:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x72
  1550  000073                     	ds	2
  1551  000075                     isr@i:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x74
  1555  000075                     	ds	1
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           
  1563 ;;
  1564 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1565 ;;
  1566 ;; *************** function _main *****************
  1567 ;; Defined at:
  1568 ;;		line 61 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;Total ram usage:        2 bytes
  1587 ;; Hardware stack levels required when called:   11
  1588 ;; This function calls:
  1589 ;;		_I2C_ColorSens_Init
  1590 ;;		_I2C_Master_Init
  1591 ;;		_bottle_count
  1592 ;;		_bottle_time
  1593 ;;		_date_time
  1594 ;;		_emergencystop
  1595 ;;		_initLCD
  1596 ;;		_operation
  1597 ;;		_operationend
  1598 ;;		_standby
  1599 ;; This function is called by:
  1600 ;;		Startup code after reset
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text0
  1605  0011B6                     __ptext0:
  1606                           	opt stack 0
  1607  0011B6                     _main:
  1608                           	opt stack 20
  1609                           
  1610                           ;main.c: 68: TRISA = 0xFF;
  1611                           
  1612                           ;incstack = 0
  1613  0011B6  6892               	setf	3986,c	;volatile
  1614                           
  1615                           ;main.c: 69: TRISB = 0xFF;
  1616  0011B8  6893               	setf	3987,c	;volatile
  1617                           
  1618                           ;main.c: 70: TRISC = 0b00011000;
  1619  0011BA  0E18               	movlw	24
  1620  0011BC  6E94               	movwf	3988,c	;volatile
  1621                           
  1622                           ;main.c: 71: TRISD = 0x00;
  1623  0011BE  0E00               	movlw	0
  1624  0011C0  6E95               	movwf	3989,c	;volatile
  1625                           
  1626                           ;main.c: 72: TRISE = 0x00;
  1627  0011C2  0E00               	movlw	0
  1628  0011C4  6E96               	movwf	3990,c	;volatile
  1629                           
  1630                           ;main.c: 74: LATA = 0x00;
  1631  0011C6  0E00               	movlw	0
  1632  0011C8  6E89               	movwf	3977,c	;volatile
  1633                           
  1634                           ;main.c: 75: LATB = 0x00;
  1635  0011CA  0E00               	movlw	0
  1636  0011CC  6E8A               	movwf	3978,c	;volatile
  1637                           
  1638                           ;main.c: 76: LATC = 0x00;
  1639  0011CE  0E00               	movlw	0
  1640  0011D0  6E8B               	movwf	3979,c	;volatile
  1641                           
  1642                           ;main.c: 77: LATD = 0x00;
  1643  0011D2  0E00               	movlw	0
  1644  0011D4  6E8C               	movwf	3980,c	;volatile
  1645                           
  1646                           ;main.c: 78: LATE = 0x00;
  1647  0011D6  0E00               	movlw	0
  1648  0011D8  6E8D               	movwf	3981,c	;volatile
  1649                           
  1650                           ;main.c: 80: ADCON0 = 0x00;
  1651  0011DA  0E00               	movlw	0
  1652  0011DC  6EC2               	movwf	4034,c	;volatile
  1653                           
  1654                           ;main.c: 81: ADCON1 = 0xFF;
  1655  0011DE  68C1               	setf	4033,c	;volatile
  1656                           
  1657                           ;main.c: 83: INT1IE = 1;
  1658  0011E0  86F0               	bsf	intcon3,3,c	;volatile
  1659                           
  1660                           ;main.c: 85: nRBPU = 0;
  1661  0011E2  9EF1               	bcf	intcon2,7,c	;volatile
  1662                           
  1663                           ;main.c: 87: initLCD();
  1664  0011E4  EC70  F011         	call	_initLCD	;wreg free
  1665                           
  1666                           ;main.c: 88: I2C_Master_Init(10000);
  1667  0011E8  0E10               	movlw	16
  1668  0011EA  0100               	movlb	0	; () banked
  1669  0011EC  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1670  0011EE  0E27               	movlw	39
  1671  0011F0  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1672  0011F2  0E00               	movlw	0
  1673  0011F4  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1674  0011F6  0E00               	movlw	0
  1675  0011F8  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1676  0011FA  ECE9  F010         	call	_I2C_Master_Init	;wreg free
  1677                           
  1678                           ;main.c: 89: I2C_ColorSens_Init();
  1679  0011FE  EC8C  F012         	call	_I2C_ColorSens_Init	;wreg free
  1680                           
  1681                           ;main.c: 92: TMR0 = 0;
  1682  001202  0E00               	movlw	0
  1683  001204  6ED7               	movwf	4055,c	;volatile
  1684  001206  0E00               	movlw	0
  1685  001208  6ED6               	movwf	4054,c	;volatile
  1686                           
  1687                           ;main.c: 93: T08BIT = 0;
  1688  00120A  9CD5               	bcf	4053,6,c	;volatile
  1689                           
  1690                           ;main.c: 94: T0CS = 0;
  1691  00120C  9AD5               	bcf	4053,5,c	;volatile
  1692                           
  1693                           ;main.c: 95: PSA = 0;
  1694  00120E  96D5               	bcf	4053,3,c	;volatile
  1695                           
  1696                           ;main.c: 96: T0PS2 = 1;
  1697  001210  84D5               	bsf	4053,2,c	;volatile
  1698                           
  1699                           ;main.c: 97: T0PS1 = 1;
  1700  001212  82D5               	bsf	4053,1,c	;volatile
  1701                           
  1702                           ;main.c: 98: T0PS0 = 1;
  1703  001214  80D5               	bsf	4053,0,c	;volatile
  1704                           
  1705                           ;main.c: 102: (INTCONbits.GIE = 1);
  1706  001216  8EF2               	bsf	intcon,7,c	;volatile
  1707                           
  1708                           ;main.c: 104: curr_state = STANDBY;
  1709  001218  0E00               	movlw	0
  1710  00121A  0100               	movlb	0	; () banked
  1711  00121C  6FCB               	movwf	_curr_state& (0+255),b
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 107: switch(curr_state){
  1715                           
  1716                           ;main.c: 106: while(1){
  1717  00121E  D02A               	goto	l4178
  1718  001220                     l4162:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 109: standby();
  1722  001220  EC3B  F012         	call	_standby	;wreg free
  1723                           
  1724                           ;main.c: 110: break;
  1725  001224  D03E               	goto	l4180
  1726  001226                     l4164:
  1727                           
  1728                           ;main.c: 112: emergencystop();
  1729  001226  EC19  F013         	call	_emergencystop	;wreg free
  1730                           
  1731                           ;main.c: 113: break;
  1732  00122A  D03B               	goto	l4180
  1733  00122C                     l4166:
  1734                           
  1735                           ;main.c: 115: operation();
  1736  00122C  ECB2  F00D         	call	_operation	;wreg free
  1737                           
  1738                           ;main.c: 116: break;
  1739  001230  D038               	goto	l4180
  1740  001232                     l4168:
  1741                           
  1742                           ;main.c: 118: operationend();
  1743  001232  EC26  F013         	call	_operationend	;wreg free
  1744                           
  1745                           ;main.c: 119: break;
  1746  001236  D035               	goto	l4180
  1747  001238                     l4170:
  1748                           
  1749                           ;main.c: 121: date_time();
  1750  001238  EC21  F00C         	call	_date_time	;wreg free
  1751                           
  1752                           ;main.c: 122: break;
  1753  00123C  D032               	goto	l4180
  1754  00123E                     l4172:
  1755                           
  1756                           ;main.c: 124: bottle_count();
  1757  00123E  EC19  F007         	call	_bottle_count	;wreg free
  1758                           
  1759                           ;main.c: 125: break;
  1760  001242  D02F               	goto	l4180
  1761  001244                     l4174:
  1762                           
  1763                           ;main.c: 127: bottle_time(etime - stime);
  1764  001244  C0C9  F0B4         	movff	_stime,??_main
  1765  001248  C0CA  F0B5         	movff	_stime+1,??_main+1
  1766  00124C  0100               	movlb	0	; () banked
  1767  00124E  1FB4               	comf	??_main& (0+255),f,b
  1768  001250  1FB5               	comf	(??_main+1)& (0+255),f,b
  1769  001252  4BB4               	infsnz	??_main& (0+255),f,b
  1770  001254  2BB5               	incf	(??_main+1)& (0+255),f,b
  1771  001256  0100               	movlb	0	; () banked
  1772  001258  51C5               	movf	_etime& (0+255),w,b
  1773  00125A  0100               	movlb	0	; () banked
  1774  00125C  25B4               	addwf	??_main& (0+255),w,b
  1775  00125E  0100               	movlb	0	; () banked
  1776  001260  6FB2               	movwf	bottle_time@time& (0+255),b
  1777  001262  0100               	movlb	0	; () banked
  1778  001264  51C6               	movf	(_etime+1)& (0+255),w,b
  1779  001266  0100               	movlb	0	; () banked
  1780  001268  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1781  00126A  0100               	movlb	0	; () banked
  1782  00126C  6FB3               	movwf	(bottle_time@time+1)& (0+255),b
  1783  00126E  EC56  F012         	call	_bottle_time	;wreg free
  1784                           
  1785                           ;main.c: 129: }
  1786                           
  1787                           ;main.c: 128: break;
  1788  001272  D017               	goto	l4180
  1789  001274                     l4178:
  1790  001274  0100               	movlb	0	; () banked
  1791  001276  51CB               	movf	_curr_state& (0+255),w,b
  1792                           
  1793                           ; Switch size 1, requested type "space"
  1794                           ; Number of cases is 7, Range of values is 0 to 6
  1795                           ; switch strategies available:
  1796                           ; Name         Instructions Cycles
  1797                           ; simple_byte           22    12 (average)
  1798                           ;	Chosen strategy is simple_byte
  1799  001278  0A00               	xorlw	0	; case 0
  1800  00127A  B4D8               	btfsc	status,2,c
  1801  00127C  D7D1               	goto	l4162
  1802  00127E  0A01               	xorlw	1	; case 1
  1803  001280  B4D8               	btfsc	status,2,c
  1804  001282  D7D1               	goto	l4164
  1805  001284  0A03               	xorlw	3	; case 2
  1806  001286  B4D8               	btfsc	status,2,c
  1807  001288  D7D1               	goto	l4166
  1808  00128A  0A01               	xorlw	1	; case 3
  1809  00128C  B4D8               	btfsc	status,2,c
  1810  00128E  D7D1               	goto	l4168
  1811  001290  0A07               	xorlw	7	; case 4
  1812  001292  B4D8               	btfsc	status,2,c
  1813  001294  D7D1               	goto	l4170
  1814  001296  0A01               	xorlw	1	; case 5
  1815  001298  B4D8               	btfsc	status,2,c
  1816  00129A  D7D1               	goto	l4172
  1817  00129C  0A03               	xorlw	3	; case 6
  1818  00129E  B4D8               	btfsc	status,2,c
  1819  0012A0  D7D1               	goto	l4174
  1820  0012A2                     l4180:
  1821                           
  1822                           ;main.c: 130: _delay((unsigned long)((200)*(10000000/4000.0)));
  1823  0012A2  0E03               	movlw	3
  1824  0012A4  0100               	movlb	0	; () banked
  1825  0012A6  6FB5               	movwf	(??_main+1)& (0+255),b
  1826  0012A8  0E8A               	movlw	138
  1827  0012AA  0100               	movlb	0	; () banked
  1828  0012AC  6FB4               	movwf	??_main& (0+255),b
  1829  0012AE  0E55               	movlw	85
  1830  0012B0                     u4007:
  1831  0012B0  2EE8               	decfsz	wreg,f,c
  1832  0012B2  D7FE               	bra	u4007
  1833  0012B4  2FB4               	decfsz	??_main& (0+255),f,b
  1834  0012B6  D7FC               	bra	u4007
  1835  0012B8  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  1836  0012BA  D7FA               	bra	u4007
  1837  0012BC  D000               	nop2	
  1838  0012BE  D7DA               	goto	l4178
  1839  0012C0                     __end_of_main:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           intcon	equ	0xFF2
  1846                           intcon2	equ	0xFF1
  1847                           intcon3	equ	0xFF0
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _standby *****************
  1853 ;; Defined at:
  1854 ;;		line 215 in file "main.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:   10
  1875 ;; This function calls:
  1876 ;;		_lcdInst
  1877 ;;		_printf
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text1
  1884  002476                     __ptext1:
  1885                           	opt stack 0
  1886  002476                     _standby:
  1887                           	opt stack 20
  1888                           
  1889                           ;main.c: 216: lcdInst(0b10000000);
  1890                           
  1891                           ;incstack = 0
  1892  002476  0E80               	movlw	128
  1893  002478  EC4D  F013         	call	_lcdInst
  1894                           
  1895                           ;main.c: 217: printf("standby         ");
  1896  00247C  0E02               	movlw	low STR_2
  1897  00247E  0100               	movlb	0	; () banked
  1898  002480  6F9C               	movwf	printf@f& (0+255),b
  1899  002482  0EFF               	movlw	high STR_2
  1900  002484  0100               	movlb	0	; () banked
  1901  002486  6F9D               	movwf	(printf@f+1)& (0+255),b
  1902  002488  EC09  F000         	call	_printf	;wreg free
  1903                           
  1904                           ;main.c: 218: lcdInst(0b11000000);
  1905  00248C  0EC0               	movlw	192
  1906  00248E  EC4D  F013         	call	_lcdInst
  1907                           
  1908                           ;main.c: 219: printf("PORTB: %d", PORTB);
  1909  002492  0EEA               	movlw	low STR_3
  1910  002494  0100               	movlb	0	; () banked
  1911  002496  6F9C               	movwf	printf@f& (0+255),b
  1912  002498  0EFF               	movlw	high STR_3
  1913  00249A  0100               	movlb	0	; () banked
  1914  00249C  6F9D               	movwf	(printf@f+1)& (0+255),b
  1915  00249E  CF81 F09E          	movff	3969,?_printf+2	;volatile
  1916  0024A2  0100               	movlb	0	; () banked
  1917  0024A4  6B9F               	clrf	(?_printf+3)& (0+255),b
  1918  0024A6  EC09  F000         	call	_printf	;wreg free
  1919  0024AA  0012               	return	
  1920  0024AC                     __end_of_standby:
  1921                           	opt stack 0
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           intcon	equ	0xFF2
  1927                           intcon2	equ	0xFF1
  1928                           intcon3	equ	0xFF0
  1929                           postinc0	equ	0xFEE
  1930                           wreg	equ	0xFE8
  1931                           status	equ	0xFD8
  1932                           
  1933 ;; *************** function _operationend *****************
  1934 ;; Defined at:
  1935 ;;		line 364 in file "main.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:   10
  1956 ;; This function calls:
  1957 ;;		_lcdInst
  1958 ;;		_printf
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text2
  1965  00264C                     __ptext2:
  1966                           	opt stack 0
  1967  00264C                     _operationend:
  1968                           	opt stack 20
  1969                           
  1970                           ;main.c: 365: lcdInst(0b10000000);
  1971                           
  1972                           ;incstack = 0
  1973  00264C  0E80               	movlw	128
  1974  00264E  EC4D  F013         	call	_lcdInst
  1975                           
  1976                           ;main.c: 366: printf("Operation Done!");
  1977  002652  0EBD               	movlw	low STR_23
  1978  002654  0100               	movlb	0	; () banked
  1979  002656  6F9C               	movwf	printf@f& (0+255),b
  1980  002658  0EFF               	movlw	high STR_23
  1981  00265A  0100               	movlb	0	; () banked
  1982  00265C  6F9D               	movwf	(printf@f+1)& (0+255),b
  1983  00265E  EC09  F000         	call	_printf	;wreg free
  1984  002662  0012               	return	
  1985  002664                     __end_of_operationend:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           intcon	equ	0xFF2
  1992                           intcon2	equ	0xFF1
  1993                           intcon3	equ	0xFF0
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _operation *****************
  1999 ;; Defined at:
  2000 ;;		line 340 in file "main.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;Total ram usage:        2 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:   10
  2021 ;; This function calls:
  2022 ;;		_lcdInst
  2023 ;;		_printf
  2024 ;;		_read_colorsensor
  2025 ;; This function is called by:
  2026 ;;		_main
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text3
  2031  001B64                     __ptext3:
  2032                           	opt stack 0
  2033  001B64                     _operation:
  2034                           	opt stack 20
  2035                           
  2036                           ;main.c: 341: switch(operation_disp){
  2037                           
  2038                           ;incstack = 0
  2039  001B64  D044               	goto	l3816
  2040  001B66                     l3790:
  2041                           
  2042                           ;main.c: 343: lcdInst(0b10000000);
  2043  001B66  0E80               	movlw	128
  2044  001B68  EC4D  F013         	call	_lcdInst
  2045                           
  2046                           ;main.c: 344: printf("Running~              ");
  2047  001B6C  0E6D               	movlw	low STR_19
  2048  001B6E  0100               	movlb	0	; () banked
  2049  001B70  6F9C               	movwf	printf@f& (0+255),b
  2050  001B72  0EFE               	movlw	high STR_19
  2051  001B74  0100               	movlb	0	; () banked
  2052  001B76  6F9D               	movwf	(printf@f+1)& (0+255),b
  2053  001B78  EC09  F000         	call	_printf	;wreg free
  2054                           
  2055                           ;main.c: 345: lcdInst(0b11000000);
  2056  001B7C  0EC0               	movlw	192
  2057  001B7E  EC4D  F013         	call	_lcdInst
  2058                           
  2059                           ;main.c: 346: read_colorsensor();
  2060  001B82  ECBF  F007         	call	_read_colorsensor	;wreg free
  2061                           
  2062                           ;main.c: 347: printf("C: %d                ", color[0]);
  2063  001B86  0EC9               	movlw	low STR_20
  2064  001B88  0100               	movlb	0	; () banked
  2065  001B8A  6F9C               	movwf	printf@f& (0+255),b
  2066  001B8C  0EFE               	movlw	high STR_20
  2067  001B8E  0100               	movlb	0	; () banked
  2068  001B90  6F9D               	movwf	(printf@f+1)& (0+255),b
  2069  001B92  C0B6  F09E         	movff	_color,?_printf+2
  2070  001B96  C0B7  F09F         	movff	_color+1,?_printf+3
  2071  001B9A  EC09  F000         	call	_printf	;wreg free
  2072                           
  2073                           ;main.c: 348: operation_disp = 1;
  2074  001B9E  0E00               	movlw	0
  2075  001BA0  0100               	movlb	0	; () banked
  2076  001BA2  6FC8               	movwf	(_operation_disp+1)& (0+255),b
  2077  001BA4  0E01               	movlw	1
  2078  001BA6  6FC7               	movwf	_operation_disp& (0+255),b
  2079                           
  2080                           ;main.c: 349: break;
  2081  001BA8  0012               	return	
  2082  001BAA                     l3802:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;main.c: 351: lcdInst(0b10000000);
  2086  001BAA  0E80               	movlw	128
  2087  001BAC  EC4D  F013         	call	_lcdInst
  2088                           
  2089                           ;main.c: 352: printf("Running~~              ");
  2090  001BB0  0E55               	movlw	low STR_21
  2091  001BB2  0100               	movlb	0	; () banked
  2092  001BB4  6F9C               	movwf	printf@f& (0+255),b
  2093  001BB6  0EFE               	movlw	high STR_21
  2094  001BB8  0100               	movlb	0	; () banked
  2095  001BBA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2096  001BBC  EC09  F000         	call	_printf	;wreg free
  2097                           
  2098                           ;main.c: 353: operation_disp = 2;
  2099  001BC0  0E00               	movlw	0
  2100  001BC2  0100               	movlb	0	; () banked
  2101  001BC4  6FC8               	movwf	(_operation_disp+1)& (0+255),b
  2102  001BC6  0E02               	movlw	2
  2103  001BC8  6FC7               	movwf	_operation_disp& (0+255),b
  2104                           
  2105                           ;main.c: 354: break;
  2106  001BCA  0012               	return	
  2107  001BCC                     l3808:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 356: lcdInst(0b10000000);
  2111  001BCC  0E80               	movlw	128
  2112  001BCE  EC4D  F013         	call	_lcdInst
  2113                           
  2114                           ;main.c: 357: printf("Running~~~              ");
  2115  001BD2  0E3C               	movlw	low STR_22
  2116  001BD4  0100               	movlb	0	; () banked
  2117  001BD6  6F9C               	movwf	printf@f& (0+255),b
  2118  001BD8  0EFE               	movlw	high STR_22
  2119  001BDA  0100               	movlb	0	; () banked
  2120  001BDC  6F9D               	movwf	(printf@f+1)& (0+255),b
  2121  001BDE  EC09  F000         	call	_printf	;wreg free
  2122                           
  2123                           ;main.c: 358: operation_disp = 0;
  2124  001BE2  0E00               	movlw	0
  2125  001BE4  0100               	movlb	0	; () banked
  2126  001BE6  6FC8               	movwf	(_operation_disp+1)& (0+255),b
  2127  001BE8  0E00               	movlw	0
  2128  001BEA  6FC7               	movwf	_operation_disp& (0+255),b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 360: }
  2132                           
  2133                           ;main.c: 359: break;
  2134  001BEC  0012               	return	
  2135  001BEE                     l3816:
  2136  001BEE  C0C7  F0B2         	movff	_operation_disp,??_operation
  2137  001BF2  C0C8  F0B3         	movff	_operation_disp+1,??_operation+1
  2138                           
  2139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2140                           ; Switch size 1, requested type "space"
  2141                           ; Number of cases is 1, Range of values is 0 to 0
  2142                           ; switch strategies available:
  2143                           ; Name         Instructions Cycles
  2144                           ; simple_byte            4     3 (average)
  2145                           ;	Chosen strategy is simple_byte
  2146  001BF6  0100               	movlb	0	; () banked
  2147  001BF8  51B3               	movf	(??_operation+1)& (0+255),w,b
  2148  001BFA  0A00               	xorlw	0	; case 0
  2149  001BFC  A4D8               	btfss	status,2,c
  2150  001BFE  0012               	return	
  2151                           
  2152                           ; BSR set to: 0
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 3, Range of values is 0 to 2
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; simple_byte           10     6 (average)
  2158                           ;	Chosen strategy is simple_byte
  2159  001C00  0100               	movlb	0	; () banked
  2160  001C02  51B2               	movf	??_operation& (0+255),w,b
  2161  001C04  0A00               	xorlw	0	; case 0
  2162  001C06  B4D8               	btfsc	status,2,c
  2163  001C08  D7AE               	goto	l3790
  2164  001C0A  0A01               	xorlw	1	; case 1
  2165  001C0C  B4D8               	btfsc	status,2,c
  2166  001C0E  D7CD               	goto	l3802
  2167  001C10  0A03               	xorlw	3	; case 2
  2168  001C12  A4D8               	btfss	status,2,c
  2169  001C14  0012               	return	
  2170  001C16  D7DA               	goto	l3808
  2171  001C18                     __end_of_operation:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           intcon2	equ	0xFF1
  2179                           intcon3	equ	0xFF0
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _read_colorsensor *****************
  2185 ;; Defined at:
  2186 ;;		line 417 in file "main.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;		None
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  i               2   27[BANK0 ] int 
  2191 ;;  color_comb      2   25[BANK0 ] int 
  2192 ;;  color_high      2   23[BANK0 ] int 
  2193 ;;  color_low       2   21[BANK0 ] int 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;Total ram usage:       10 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    9
  2210 ;; This function calls:
  2211 ;;		_I2C_Master_Read
  2212 ;;		_I2C_Master_Start
  2213 ;;		_I2C_Master_Stop
  2214 ;;		_I2C_Master_Write
  2215 ;; This function is called by:
  2216 ;;		_operation
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text4
  2221  000F7E                     __ptext4:
  2222                           	opt stack 0
  2223  000F7E                     _read_colorsensor:
  2224                           	opt stack 20
  2225                           
  2226                           ;main.c: 418: int color_low;
  2227                           ;main.c: 419: int color_high;
  2228                           ;main.c: 420: int color_comb;
  2229                           ;main.c: 421: int i;
  2230                           ;main.c: 424: I2C_Master_Start();
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;incstack = 0
  2234  000F7E  EC6F  F013         	call	_I2C_Master_Start	;wreg free
  2235                           
  2236                           ;main.c: 425: I2C_Master_Write(0b01010010);
  2237  000F82  0E00               	movlw	0
  2238  000F84  0100               	movlb	0	; () banked
  2239  000F86  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2240  000F88  0E52               	movlw	82
  2241  000F8A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2242  000F8C  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2243                           
  2244                           ;main.c: 426: I2C_Master_Write(0b10110100);
  2245  000F90  0E00               	movlw	0
  2246  000F92  0100               	movlb	0	; () banked
  2247  000F94  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2248  000F96  0EB4               	movlw	180
  2249  000F98  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2250  000F9A  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2251                           
  2252                           ;main.c: 427: I2C_Master_Start();
  2253  000F9E  EC6F  F013         	call	_I2C_Master_Start	;wreg free
  2254                           
  2255                           ;main.c: 428: I2C_Master_Write(0b01010011);
  2256  000FA2  0E00               	movlw	0
  2257  000FA4  0100               	movlb	0	; () banked
  2258  000FA6  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2259  000FA8  0E53               	movlw	83
  2260  000FAA  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2261  000FAC  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2262                           
  2263                           ;main.c: 429: for(i=0; i<3; i++){
  2264  000FB0  0E00               	movlw	0
  2265  000FB2  0100               	movlb	0	; () banked
  2266  000FB4  6F9C               	movwf	(read_colorsensor@i+1)& (0+255),b
  2267  000FB6  0E00               	movlw	0
  2268  000FB8  6F9B               	movwf	read_colorsensor@i& (0+255),b
  2269  000FBA                     l3370:
  2270                           
  2271                           ; BSR set to: 0
  2272  000FBA  0100               	movlb	0	; () banked
  2273  000FBC  BF9C               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2274  000FBE  D008               	goto	l3374
  2275  000FC0  0100               	movlb	0	; () banked
  2276  000FC2  519C               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2277  000FC4  E13E               	bnz	l3384
  2278  000FC6  0E03               	movlw	3
  2279  000FC8  0100               	movlb	0	; () banked
  2280  000FCA  5D9B               	subwf	read_colorsensor@i& (0+255),w,b
  2281  000FCC  B0D8               	btfsc	status,0,c
  2282  000FCE  D039               	goto	l3384
  2283  000FD0                     l3374:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 430: color_low = I2C_Master_Read(1);
  2287  000FD0  0E01               	movlw	1
  2288  000FD2  ECA6  F012         	call	_I2C_Master_Read
  2289  000FD6  0100               	movlb	0	; () banked
  2290  000FD8  6F93               	movwf	??_read_colorsensor& (0+255),b
  2291  000FDA  0100               	movlb	0	; () banked
  2292  000FDC  5193               	movf	??_read_colorsensor& (0+255),w,b
  2293  000FDE  0100               	movlb	0	; () banked
  2294  000FE0  6F95               	movwf	read_colorsensor@color_low& (0+255),b
  2295  000FE2  6B96               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2296                           
  2297                           ;main.c: 431: color_high = I2C_Master_Read(1);
  2298  000FE4  0E01               	movlw	1
  2299  000FE6  ECA6  F012         	call	_I2C_Master_Read
  2300  000FEA  0100               	movlb	0	; () banked
  2301  000FEC  6F93               	movwf	??_read_colorsensor& (0+255),b
  2302  000FEE  0100               	movlb	0	; () banked
  2303  000FF0  5193               	movf	??_read_colorsensor& (0+255),w,b
  2304  000FF2  0100               	movlb	0	; () banked
  2305  000FF4  6F97               	movwf	read_colorsensor@color_high& (0+255),b
  2306  000FF6  6B98               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;main.c: 432: color_comb = (color_high << 8)|(color_low & 0xFF);
  2310  000FF8  0100               	movlb	0	; () banked
  2311  000FFA  5195               	movf	read_colorsensor@color_low& (0+255),w,b
  2312  000FFC  C097  F093         	movff	read_colorsensor@color_high,??_read_colorsensor
  2313  001000  C098  F094         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2314  001004  C093  F094         	movff	??_read_colorsensor,??_read_colorsensor+1
  2315  001008  0100               	movlb	0	; () banked
  2316  00100A  6B93               	clrf	??_read_colorsensor& (0+255),b
  2317  00100C  0100               	movlb	0	; () banked
  2318  00100E  1193               	iorwf	??_read_colorsensor& (0+255),w,b
  2319  001010  0100               	movlb	0	; () banked
  2320  001012  6F99               	movwf	read_colorsensor@color_comb& (0+255),b
  2321  001014  0100               	movlb	0	; () banked
  2322  001016  5194               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2323  001018  0100               	movlb	0	; () banked
  2324  00101A  6F9A               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;main.c: 433: color[i] = color_comb;
  2328  00101C  90D8               	bcf	status,0,c
  2329  00101E  0100               	movlb	0	; () banked
  2330  001020  359B               	rlcf	read_colorsensor@i& (0+255),w,b
  2331  001022  6ED9               	movwf	fsr2l,c
  2332  001024  0100               	movlb	0	; () banked
  2333  001026  359C               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2334  001028  6EDA               	movwf	fsr2h,c
  2335  00102A  0EB6               	movlw	low _color
  2336  00102C  26D9               	addwf	fsr2l,f,c
  2337  00102E  0E00               	movlw	high _color
  2338  001030  22DA               	addwfc	fsr2h,f,c
  2339  001032  C099  FFDE         	movff	read_colorsensor@color_comb,postinc2
  2340  001036  C09A  FFDD         	movff	read_colorsensor@color_comb+1,postdec2
  2341                           
  2342                           ; BSR set to: 0
  2343  00103A  0100               	movlb	0	; () banked
  2344  00103C  4B9B               	infsnz	read_colorsensor@i& (0+255),f,b
  2345  00103E  2B9C               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2346  001040  D7BC               	goto	l3370
  2347  001042                     l3384:
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;main.c: 434: }
  2351                           ;main.c: 435: color_low = I2C_Master_Read(1);
  2352  001042  0E01               	movlw	1
  2353  001044  ECA6  F012         	call	_I2C_Master_Read
  2354  001048  0100               	movlb	0	; () banked
  2355  00104A  6F93               	movwf	??_read_colorsensor& (0+255),b
  2356  00104C  0100               	movlb	0	; () banked
  2357  00104E  5193               	movf	??_read_colorsensor& (0+255),w,b
  2358  001050  0100               	movlb	0	; () banked
  2359  001052  6F95               	movwf	read_colorsensor@color_low& (0+255),b
  2360  001054  6B96               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2361                           
  2362                           ;main.c: 436: color_high = I2C_Master_Read(0);
  2363  001056  0E00               	movlw	0
  2364  001058  ECA6  F012         	call	_I2C_Master_Read
  2365  00105C  0100               	movlb	0	; () banked
  2366  00105E  6F93               	movwf	??_read_colorsensor& (0+255),b
  2367  001060  0100               	movlb	0	; () banked
  2368  001062  5193               	movf	??_read_colorsensor& (0+255),w,b
  2369  001064  0100               	movlb	0	; () banked
  2370  001066  6F97               	movwf	read_colorsensor@color_high& (0+255),b
  2371  001068  6B98               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 437: color_comb = (color_high << 8)|(color_low & 0xFF);
  2375  00106A  0100               	movlb	0	; () banked
  2376  00106C  5195               	movf	read_colorsensor@color_low& (0+255),w,b
  2377  00106E  C097  F093         	movff	read_colorsensor@color_high,??_read_colorsensor
  2378  001072  C098  F094         	movff	read_colorsensor@color_high+1,??_read_colorsensor+1
  2379  001076  C093  F094         	movff	??_read_colorsensor,??_read_colorsensor+1
  2380  00107A  0100               	movlb	0	; () banked
  2381  00107C  6B93               	clrf	??_read_colorsensor& (0+255),b
  2382  00107E  0100               	movlb	0	; () banked
  2383  001080  1193               	iorwf	??_read_colorsensor& (0+255),w,b
  2384  001082  0100               	movlb	0	; () banked
  2385  001084  6F99               	movwf	read_colorsensor@color_comb& (0+255),b
  2386  001086  0100               	movlb	0	; () banked
  2387  001088  5194               	movf	(??_read_colorsensor+1)& (0+255),w,b
  2388  00108A  0100               	movlb	0	; () banked
  2389  00108C  6F9A               	movwf	(read_colorsensor@color_comb+1)& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 438: color[3] = color_comb;
  2393  00108E  C099  F0BC         	movff	read_colorsensor@color_comb,_color+6
  2394  001092  C09A  F0BD         	movff	read_colorsensor@color_comb+1,_color+7
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;main.c: 439: I2C_Master_Stop();
  2398  001096  EC6B  F013         	call	_I2C_Master_Stop	;wreg free
  2399  00109A  0012               	return	
  2400  00109C                     __end_of_read_colorsensor:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           intcon	equ	0xFF2
  2407                           intcon2	equ	0xFF1
  2408                           intcon3	equ	0xFF0
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postinc2	equ	0xFDE
  2412                           postdec2	equ	0xFDD
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _initLCD *****************
  2418 ;; Defined at:
  2419 ;;		line 14 in file "lcd.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;Total ram usage:        1 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    9
  2440 ;; This function calls:
  2441 ;;		_lcdInst
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text5
  2448  0022E0                     __ptext5:
  2449                           	opt stack 0
  2450  0022E0                     _initLCD:
  2451                           	opt stack 21
  2452                           
  2453                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2454                           
  2455                           ;incstack = 0
  2456  0022E0  0E31               	movlw	49
  2457  0022E2  0100               	movlb	0	; () banked
  2458  0022E4  6F93               	movwf	??_initLCD& (0+255),b
  2459  0022E6  0EB2               	movlw	178
  2460  0022E8                     u4017:
  2461  0022E8  2EE8               	decfsz	wreg,f,c
  2462  0022EA  D7FE               	bra	u4017
  2463  0022EC  2F93               	decfsz	??_initLCD& (0+255),f,b
  2464  0022EE  D7FC               	bra	u4017
  2465  0022F0  F000               	nop	
  2466                           
  2467                           ;lcd.c: 16: lcdInst(0b00110011);
  2468  0022F2  0E33               	movlw	51
  2469  0022F4  EC4D  F013         	call	_lcdInst
  2470                           
  2471                           ;lcd.c: 17: lcdInst(0b00110011);
  2472  0022F8  0E33               	movlw	51
  2473  0022FA  EC4D  F013         	call	_lcdInst
  2474                           
  2475                           ;lcd.c: 18: lcdInst(0b00110010);
  2476  0022FE  0E32               	movlw	50
  2477  002300  EC4D  F013         	call	_lcdInst
  2478                           
  2479                           ;lcd.c: 19: lcdInst(0b00101000);
  2480  002304  0E28               	movlw	40
  2481  002306  EC4D  F013         	call	_lcdInst
  2482                           
  2483                           ;lcd.c: 20: lcdInst(0b00001111);
  2484  00230A  0E0F               	movlw	15
  2485  00230C  EC4D  F013         	call	_lcdInst
  2486                           
  2487                           ;lcd.c: 21: lcdInst(0b00000110);
  2488  002310  0E06               	movlw	6
  2489  002312  EC4D  F013         	call	_lcdInst
  2490                           
  2491                           ;lcd.c: 22: lcdInst(0b00000001);
  2492  002316  0E01               	movlw	1
  2493  002318  EC4D  F013         	call	_lcdInst
  2494                           
  2495                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2496  00231C  0E31               	movlw	49
  2497  00231E  0100               	movlb	0	; () banked
  2498  002320  6F93               	movwf	??_initLCD& (0+255),b
  2499  002322  0EB2               	movlw	178
  2500  002324                     u4027:
  2501  002324  2EE8               	decfsz	wreg,f,c
  2502  002326  D7FE               	bra	u4027
  2503  002328  2F93               	decfsz	??_initLCD& (0+255),f,b
  2504  00232A  D7FC               	bra	u4027
  2505  00232C  F000               	nop	
  2506  00232E  0012               	return		;funcret
  2507  002330                     __end_of_initLCD:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           intcon	equ	0xFF2
  2514                           intcon2	equ	0xFF1
  2515                           intcon3	equ	0xFF0
  2516                           postinc0	equ	0xFEE
  2517                           wreg	equ	0xFE8
  2518                           postinc2	equ	0xFDE
  2519                           postdec2	equ	0xFDD
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _emergencystop *****************
  2525 ;; Defined at:
  2526 ;;		line 370 in file "main.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;		None
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:        0 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:   10
  2547 ;; This function calls:
  2548 ;;		_lcdInst
  2549 ;;		_printf
  2550 ;; This function is called by:
  2551 ;;		_main
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text6
  2556  002632                     __ptext6:
  2557                           	opt stack 0
  2558  002632                     _emergencystop:
  2559                           	opt stack 20
  2560                           
  2561                           ;main.c: 371: lcdInst(0b10000000);
  2562                           
  2563                           ;incstack = 0
  2564  002632  0E80               	movlw	128
  2565  002634  EC4D  F013         	call	_lcdInst
  2566                           
  2567                           ;main.c: 372: printf("EMERGENCY STOP");
  2568  002638  0ECD               	movlw	low STR_24
  2569  00263A  0100               	movlb	0	; () banked
  2570  00263C  6F9C               	movwf	printf@f& (0+255),b
  2571  00263E  0EFF               	movlw	high STR_24
  2572  002640  0100               	movlb	0	; () banked
  2573  002642  6F9D               	movwf	(printf@f+1)& (0+255),b
  2574  002644  EC09  F000         	call	_printf	;wreg free
  2575                           
  2576                           ;main.c: 373: (INTCONbits.GIE = 0);
  2577  002648  9EF2               	bcf	intcon,7,c	;volatile
  2578  00264A                     l304:
  2579  00264A  D7FF               	goto	l304
  2580  00264C                     __end_of_emergencystop:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           intcon	equ	0xFF2
  2587                           intcon2	equ	0xFF1
  2588                           intcon3	equ	0xFF0
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _date_time *****************
  2598 ;; Defined at:
  2599 ;;		line 247 in file "main.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;  i               1   50[BANK0 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;Total ram usage:        1 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:   10
  2620 ;; This function calls:
  2621 ;;		_I2C_Master_Read
  2622 ;;		_I2C_Master_Start
  2623 ;;		_I2C_Master_Stop
  2624 ;;		_I2C_Master_Write
  2625 ;;		_lcdInst
  2626 ;;		_printf
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text7
  2633  001842                     __ptext7:
  2634                           	opt stack 0
  2635  001842                     _date_time:
  2636                           	opt stack 20
  2637                           
  2638                           ;main.c: 249: I2C_Master_Start();
  2639                           
  2640                           ;incstack = 0
  2641  001842  EC6F  F013         	call	_I2C_Master_Start	;wreg free
  2642                           
  2643                           ;main.c: 250: I2C_Master_Write(0b11010000);
  2644  001846  0E00               	movlw	0
  2645  001848  0100               	movlb	0	; () banked
  2646  00184A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2647  00184C  0ED0               	movlw	208
  2648  00184E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2649  001850  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2650                           
  2651                           ;main.c: 251: I2C_Master_Write(0x00);
  2652  001854  0E00               	movlw	0
  2653  001856  0100               	movlb	0	; () banked
  2654  001858  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2655  00185A  0E00               	movlw	0
  2656  00185C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2657  00185E  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2658                           
  2659                           ;main.c: 252: I2C_Master_Stop();
  2660  001862  EC6B  F013         	call	_I2C_Master_Stop	;wreg free
  2661                           
  2662                           ;main.c: 255: I2C_Master_Start();
  2663  001866  EC6F  F013         	call	_I2C_Master_Start	;wreg free
  2664                           
  2665                           ;main.c: 256: I2C_Master_Write(0b11010001);
  2666  00186A  0E00               	movlw	0
  2667  00186C  0100               	movlb	0	; () banked
  2668  00186E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2669  001870  0ED1               	movlw	209
  2670  001872  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2671  001874  EC61  F013         	call	_I2C_Master_Write	;wreg free
  2672                           
  2673                           ;main.c: 257: for(unsigned char i=0;i<0x06;i++){
  2674  001878  0E00               	movlw	0
  2675  00187A  0100               	movlb	0	; () banked
  2676  00187C  6FB2               	movwf	date_time@i& (0+255),b
  2677  00187E                     l3832:
  2678                           
  2679                           ; BSR set to: 0
  2680  00187E  0E05               	movlw	5
  2681  001880  0100               	movlb	0	; () banked
  2682  001882  65B2               	cpfsgt	date_time@i& (0+255),b
  2683  001884  D001               	goto	l3836
  2684  001886  D010               	goto	l3842
  2685  001888                     l3836:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 258: time[i] = I2C_Master_Read(1);
  2689  001888  0100               	movlb	0	; () banked
  2690  00188A  51B2               	movf	date_time@i& (0+255),w,b
  2691  00188C  0D01               	mullw	1
  2692  00188E  0EBE               	movlw	low _time
  2693  001890  24F3               	addwf	prodl,w,c
  2694  001892  6ED9               	movwf	fsr2l,c
  2695  001894  0E00               	movlw	high _time
  2696  001896  20F4               	addwfc	prodh,w,c
  2697  001898  6EDA               	movwf	fsr2h,c
  2698  00189A  0E01               	movlw	1
  2699  00189C  ECA6  F012         	call	_I2C_Master_Read
  2700  0018A0  6EDF               	movwf	indf2,c
  2701  0018A2  0100               	movlb	0	; () banked
  2702  0018A4  2BB2               	incf	date_time@i& (0+255),f,b
  2703  0018A6  D7EB               	goto	l3832
  2704  0018A8                     l3842:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 259: }
  2708                           ;main.c: 260: time[6] = I2C_Master_Read(0);
  2709  0018A8  0E00               	movlw	0
  2710  0018AA  ECA6  F012         	call	_I2C_Master_Read
  2711  0018AE  0100               	movlb	0	; () banked
  2712  0018B0  6FC4               	movwf	(_time+6)& (0+255),b
  2713                           
  2714                           ;main.c: 261: I2C_Master_Stop();
  2715  0018B2  EC6B  F013         	call	_I2C_Master_Stop	;wreg free
  2716                           
  2717                           ;main.c: 264: lcdInst(0b10000000);
  2718  0018B6  0E80               	movlw	128
  2719  0018B8  EC4D  F013         	call	_lcdInst
  2720                           
  2721                           ;main.c: 265: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2722  0018BC  0E9B               	movlw	low STR_4
  2723  0018BE  0100               	movlb	0	; () banked
  2724  0018C0  6F9C               	movwf	printf@f& (0+255),b
  2725  0018C2  0EFE               	movlw	high STR_4
  2726  0018C4  0100               	movlb	0	; () banked
  2727  0018C6  6F9D               	movwf	(printf@f+1)& (0+255),b
  2728  0018C8  C0C3  F09E         	movff	_time+5,?_printf+2
  2729  0018CC  0100               	movlb	0	; () banked
  2730  0018CE  6B9F               	clrf	(?_printf+3)& (0+255),b
  2731  0018D0  C0C2  F0A0         	movff	_time+4,?_printf+4
  2732  0018D4  0100               	movlb	0	; () banked
  2733  0018D6  6BA1               	clrf	(?_printf+5)& (0+255),b
  2734  0018D8  C0C4  F0A2         	movff	_time+6,?_printf+6
  2735  0018DC  0100               	movlb	0	; () banked
  2736  0018DE  6BA3               	clrf	(?_printf+7)& (0+255),b
  2737  0018E0  EC09  F000         	call	_printf	;wreg free
  2738                           
  2739                           ;main.c: 266: lcdInst(0b11000000);
  2740  0018E4  0EC0               	movlw	192
  2741  0018E6  EC4D  F013         	call	_lcdInst
  2742                           
  2743                           ;main.c: 267: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2744  0018EA  0EB2               	movlw	low STR_5
  2745  0018EC  0100               	movlb	0	; () banked
  2746  0018EE  6F9C               	movwf	printf@f& (0+255),b
  2747  0018F0  0EFE               	movlw	high STR_5
  2748  0018F2  0100               	movlb	0	; () banked
  2749  0018F4  6F9D               	movwf	(printf@f+1)& (0+255),b
  2750  0018F6  C0C0  F09E         	movff	_time+2,?_printf+2
  2751  0018FA  0100               	movlb	0	; () banked
  2752  0018FC  6B9F               	clrf	(?_printf+3)& (0+255),b
  2753  0018FE  C0BF  F0A0         	movff	_time+1,?_printf+4
  2754  001902  0100               	movlb	0	; () banked
  2755  001904  6BA1               	clrf	(?_printf+5)& (0+255),b
  2756  001906  C0BE  F0A2         	movff	_time,?_printf+6
  2757  00190A  0100               	movlb	0	; () banked
  2758  00190C  6BA3               	clrf	(?_printf+7)& (0+255),b
  2759  00190E  EC09  F000         	call	_printf	;wreg free
  2760  001912  0012               	return	
  2761  001914                     __end_of_date_time:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           intcon	equ	0xFF2
  2770                           intcon2	equ	0xFF1
  2771                           intcon3	equ	0xFF0
  2772                           postinc0	equ	0xFEE
  2773                           wreg	equ	0xFE8
  2774                           indf2	equ	0xFDF
  2775                           postinc2	equ	0xFDE
  2776                           postdec2	equ	0xFDD
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _I2C_Master_Read *****************
  2782 ;; Defined at:
  2783 ;;		line 61 in file "I2C.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  a               1    wreg     unsigned char 
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;  a               1   17[BANK0 ] unsigned char 
  2788 ;;  temp            1   18[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      unsigned char 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;Total ram usage:        2 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    8
  2805 ;; This function calls:
  2806 ;;		_I2C_Master_Wait
  2807 ;; This function is called by:
  2808 ;;		_date_time
  2809 ;;		_read_colorsensor
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text8
  2814  00254C                     __ptext8:
  2815                           	opt stack 0
  2816  00254C                     _I2C_Master_Read:
  2817                           	opt stack 20
  2818                           
  2819                           ;incstack = 0
  2820                           ;I2C_Master_Read@a stored from wreg
  2821  00254C  0100               	movlb	0	; () banked
  2822  00254E  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2823                           
  2824                           ;I2C.c: 63: unsigned char temp;
  2825                           ;I2C.c: 64: I2C_Master_Wait();
  2826  002550  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  2827                           
  2828                           ;I2C.c: 65: RCEN = 1;
  2829  002554  86C5               	bsf	4037,3,c	;volatile
  2830                           
  2831                           ;I2C.c: 66: I2C_Master_Wait();
  2832  002556  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  2833                           
  2834                           ;I2C.c: 67: temp = SSPBUF;
  2835  00255A  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2836                           
  2837                           ;I2C.c: 68: I2C_Master_Wait();
  2838  00255E  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  2839                           
  2840                           ;I2C.c: 69: ACKDT = (a)?0:1;
  2841  002562  0100               	movlb	0	; () banked
  2842  002564  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2843  002566  0100               	movlb	0	; () banked
  2844  002568  A4D8               	btfss	status,2,c
  2845  00256A  D002               	goto	u2710
  2846  00256C  8AC5               	bsf	4037,5,c	;volatile
  2847  00256E  D001               	goto	l3198
  2848  002570                     u2710:
  2849  002570  9AC5               	bcf	4037,5,c	;volatile
  2850  002572                     l3198:
  2851                           
  2852                           ;I2C.c: 70: ACKEN = 1;
  2853  002572  88C5               	bsf	4037,4,c	;volatile
  2854                           
  2855                           ;I2C.c: 71: return temp;
  2856  002574  0100               	movlb	0	; () banked
  2857  002576  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2858  002578  0012               	return	
  2859  00257A                     __end_of_I2C_Master_Read:
  2860                           	opt stack 0
  2861                           tblptru	equ	0xFF8
  2862                           tblptrh	equ	0xFF7
  2863                           tblptrl	equ	0xFF6
  2864                           tablat	equ	0xFF5
  2865                           prodh	equ	0xFF4
  2866                           prodl	equ	0xFF3
  2867                           intcon	equ	0xFF2
  2868                           intcon2	equ	0xFF1
  2869                           intcon3	equ	0xFF0
  2870                           postinc0	equ	0xFEE
  2871                           wreg	equ	0xFE8
  2872                           indf2	equ	0xFDF
  2873                           postinc2	equ	0xFDE
  2874                           postdec2	equ	0xFDD
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function _bottle_time *****************
  2880 ;; Defined at:
  2881 ;;		line 332 in file "main.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  time            2   50[BANK0 ] int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2895 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;Total ram usage:        2 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:   10
  2902 ;; This function calls:
  2903 ;;		_lcdInst
  2904 ;;		_printf
  2905 ;; This function is called by:
  2906 ;;		_main
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text9
  2911  0024AC                     __ptext9:
  2912                           	opt stack 0
  2913  0024AC                     _bottle_time:
  2914                           	opt stack 20
  2915                           
  2916                           ;main.c: 333: lcdInst(0b10000000);
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;incstack = 0
  2920  0024AC  0E80               	movlw	128
  2921  0024AE  EC4D  F013         	call	_lcdInst
  2922                           
  2923                           ;main.c: 334: printf("Total Operation       ");
  2924  0024B2  0E84               	movlw	low STR_17
  2925  0024B4  0100               	movlb	0	; () banked
  2926  0024B6  6F9C               	movwf	printf@f& (0+255),b
  2927  0024B8  0EFE               	movlw	high STR_17
  2928  0024BA  0100               	movlb	0	; () banked
  2929  0024BC  6F9D               	movwf	(printf@f+1)& (0+255),b
  2930  0024BE  EC09  F000         	call	_printf	;wreg free
  2931                           
  2932                           ;main.c: 335: lcdInst(0b11000000);
  2933  0024C2  0EC0               	movlw	192
  2934  0024C4  EC4D  F013         	call	_lcdInst
  2935                           
  2936                           ;main.c: 336: printf("Time: %d s       ", time);
  2937  0024C8  0EDF               	movlw	low STR_18
  2938  0024CA  0100               	movlb	0	; () banked
  2939  0024CC  6F9C               	movwf	printf@f& (0+255),b
  2940  0024CE  0EFE               	movlw	high STR_18
  2941  0024D0  0100               	movlb	0	; () banked
  2942  0024D2  6F9D               	movwf	(printf@f+1)& (0+255),b
  2943  0024D4  C0B2  F09E         	movff	bottle_time@time,?_printf+2
  2944  0024D8  C0B3  F09F         	movff	bottle_time@time+1,?_printf+3
  2945  0024DC  EC09  F000         	call	_printf	;wreg free
  2946  0024E0  0012               	return	
  2947  0024E2                     __end_of_bottle_time:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           intcon2	equ	0xFF1
  2957                           intcon3	equ	0xFF0
  2958                           postinc0	equ	0xFEE
  2959                           wreg	equ	0xFE8
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _bottle_count *****************
  2968 ;; Defined at:
  2969 ;;		line 290 in file "main.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        0 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:   10
  2990 ;; This function calls:
  2991 ;;		___awmod
  2992 ;;		_lcdInst
  2993 ;;		_printf
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text10
  3000  000E32                     __ptext10:
  3001                           	opt stack 0
  3002  000E32                     _bottle_count:
  3003                           	opt stack 20
  3004                           
  3005                           ;main.c: 291: switch(bottle_count_disp % 5){
  3006                           
  3007                           ;incstack = 0
  3008  000E32  D083               	goto	l3888
  3009  000E34                     l3852:
  3010                           
  3011                           ;main.c: 293: lcdInst(0b10000000);
  3012  000E34  0E80               	movlw	128
  3013  000E36  EC4D  F013         	call	_lcdInst
  3014                           
  3015                           ;main.c: 294: printf("Bottle Count    ");
  3016  000E3A  0E24               	movlw	low STR_6
  3017  000E3C  0100               	movlb	0	; () banked
  3018  000E3E  6F9C               	movwf	printf@f& (0+255),b
  3019  000E40  0EFF               	movlw	high STR_6
  3020  000E42  0100               	movlb	0	; () banked
  3021  000E44  6F9D               	movwf	(printf@f+1)& (0+255),b
  3022  000E46  EC09  F000         	call	_printf	;wreg free
  3023                           
  3024                           ;main.c: 295: lcdInst(0b11000000);
  3025  000E4A  0EC0               	movlw	192
  3026  000E4C  EC4D  F013         	call	_lcdInst
  3027                           
  3028                           ;main.c: 296: printf("Total: 10       ");
  3029  000E50  0E13               	movlw	low STR_7
  3030  000E52  0100               	movlb	0	; () banked
  3031  000E54  6F9C               	movwf	printf@f& (0+255),b
  3032  000E56  0EFF               	movlw	high STR_7
  3033  000E58  0100               	movlb	0	; () banked
  3034  000E5A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3035  000E5C  EC09  F000         	call	_printf	;wreg free
  3036                           
  3037                           ;main.c: 297: break;
  3038  000E60  0012               	return	
  3039  000E62                     l3858:
  3040                           
  3041                           ;main.c: 299: lcdInst(0b10000000);
  3042  000E62  0E80               	movlw	128
  3043  000E64  EC4D  F013         	call	_lcdInst
  3044                           
  3045                           ;main.c: 300: printf("YOP+CAP+LBL: 3  ");
  3046  000E68  0E68               	movlw	low STR_8
  3047  000E6A  0100               	movlb	0	; () banked
  3048  000E6C  6F9C               	movwf	printf@f& (0+255),b
  3049  000E6E  0EFF               	movlw	high STR_8
  3050  000E70  0100               	movlb	0	; () banked
  3051  000E72  6F9D               	movwf	(printf@f+1)& (0+255),b
  3052  000E74  EC09  F000         	call	_printf	;wreg free
  3053                           
  3054                           ;main.c: 301: lcdInst(0b11000000);
  3055  000E78  0EC0               	movlw	192
  3056  000E7A  EC4D  F013         	call	_lcdInst
  3057                           
  3058                           ;main.c: 302: printf("YOP+CAP-LBL: 1  ");
  3059  000E7E  0E57               	movlw	low STR_9
  3060  000E80  0100               	movlb	0	; () banked
  3061  000E82  6F9C               	movwf	printf@f& (0+255),b
  3062  000E84  0EFF               	movlw	high STR_9
  3063  000E86  0100               	movlb	0	; () banked
  3064  000E88  6F9D               	movwf	(printf@f+1)& (0+255),b
  3065  000E8A  EC09  F000         	call	_printf	;wreg free
  3066                           
  3067                           ;main.c: 303: break;
  3068  000E8E  0012               	return	
  3069  000E90                     l3864:
  3070                           
  3071                           ;main.c: 305: lcdInst(0b10000000);
  3072  000E90  0E80               	movlw	128
  3073  000E92  EC4D  F013         	call	_lcdInst
  3074                           
  3075                           ;main.c: 306: printf("YOP-CAP+LBL: 1  ");
  3076  000E96  0E46               	movlw	low STR_10
  3077  000E98  0100               	movlb	0	; () banked
  3078  000E9A  6F9C               	movwf	printf@f& (0+255),b
  3079  000E9C  0EFF               	movlw	high STR_10
  3080  000E9E  0100               	movlb	0	; () banked
  3081  000EA0  6F9D               	movwf	(printf@f+1)& (0+255),b
  3082  000EA2  EC09  F000         	call	_printf	;wreg free
  3083                           
  3084                           ;main.c: 307: lcdInst(0b11000000);
  3085  000EA6  0EC0               	movlw	192
  3086  000EA8  EC4D  F013         	call	_lcdInst
  3087                           
  3088                           ;main.c: 308: printf("YOP-CAP-LBL: 0  ");
  3089  000EAC  0E35               	movlw	low STR_11
  3090  000EAE  0100               	movlb	0	; () banked
  3091  000EB0  6F9C               	movwf	printf@f& (0+255),b
  3092  000EB2  0EFF               	movlw	high STR_11
  3093  000EB4  0100               	movlb	0	; () banked
  3094  000EB6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3095  000EB8  EC09  F000         	call	_printf	;wreg free
  3096                           
  3097                           ;main.c: 309: break;
  3098  000EBC  0012               	return	
  3099  000EBE                     l3870:
  3100                           
  3101                           ;main.c: 311: lcdInst(0b10000000);
  3102  000EBE  0E80               	movlw	128
  3103  000EC0  EC4D  F013         	call	_lcdInst
  3104                           
  3105                           ;main.c: 312: printf("ESKA+CAP+LBL: 1 ");
  3106  000EC4  0E79               	movlw	low STR_12
  3107  000EC6  0100               	movlb	0	; () banked
  3108  000EC8  6F9C               	movwf	printf@f& (0+255),b
  3109  000ECA  0EFF               	movlw	high STR_12
  3110  000ECC  0100               	movlb	0	; () banked
  3111  000ECE  6F9D               	movwf	(printf@f+1)& (0+255),b
  3112  000ED0  EC09  F000         	call	_printf	;wreg free
  3113                           
  3114                           ;main.c: 313: lcdInst(0b11000000);
  3115  000ED4  0EC0               	movlw	192
  3116  000ED6  EC4D  F013         	call	_lcdInst
  3117                           
  3118                           ;main.c: 314: printf("ESKA+CAP-LBL: 1 ");
  3119  000EDA  0E9B               	movlw	low STR_13
  3120  000EDC  0100               	movlb	0	; () banked
  3121  000EDE  6F9C               	movwf	printf@f& (0+255),b
  3122  000EE0  0EFF               	movlw	high STR_13
  3123  000EE2  0100               	movlb	0	; () banked
  3124  000EE4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3125  000EE6  EC09  F000         	call	_printf	;wreg free
  3126                           
  3127                           ;main.c: 315: break;
  3128  000EEA  0012               	return	
  3129  000EEC                     l3876:
  3130                           
  3131                           ;main.c: 317: lcdInst(0b10000000);
  3132  000EEC  0E80               	movlw	128
  3133  000EEE  EC4D  F013         	call	_lcdInst
  3134                           
  3135                           ;main.c: 318: printf("ESKA-CAP+LBL: 1 ");
  3136  000EF2  0E8A               	movlw	low STR_14
  3137  000EF4  0100               	movlb	0	; () banked
  3138  000EF6  6F9C               	movwf	printf@f& (0+255),b
  3139  000EF8  0EFF               	movlw	high STR_14
  3140  000EFA  0100               	movlb	0	; () banked
  3141  000EFC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3142  000EFE  EC09  F000         	call	_printf	;wreg free
  3143                           
  3144                           ;main.c: 319: lcdInst(0b11000000);
  3145  000F02  0EC0               	movlw	192
  3146  000F04  EC4D  F013         	call	_lcdInst
  3147                           
  3148                           ;main.c: 320: printf("ESKA-CAP-LBL: 2 ");
  3149  000F08  0EAC               	movlw	low STR_15
  3150  000F0A  0100               	movlb	0	; () banked
  3151  000F0C  6F9C               	movwf	printf@f& (0+255),b
  3152  000F0E  0EFF               	movlw	high STR_15
  3153  000F10  0100               	movlb	0	; () banked
  3154  000F12  6F9D               	movwf	(printf@f+1)& (0+255),b
  3155  000F14  EC09  F000         	call	_printf	;wreg free
  3156                           
  3157                           ;main.c: 321: break;
  3158  000F18  0012               	return	
  3159  000F1A                     l3882:
  3160                           
  3161                           ;main.c: 324: lcdInst(0b10000000);
  3162  000F1A  0E80               	movlw	128
  3163  000F1C  EC4D  F013         	call	_lcdInst
  3164                           
  3165                           ;main.c: 325: printf("ERROR: %d", bottle_count_disp);
  3166  000F20  0EF4               	movlw	low STR_16
  3167  000F22  0100               	movlb	0	; () banked
  3168  000F24  6F9C               	movwf	printf@f& (0+255),b
  3169  000F26  0EFF               	movlw	high STR_16
  3170  000F28  0100               	movlb	0	; () banked
  3171  000F2A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3172  000F2C  C0CC  F09E         	movff	_bottle_count_disp,?_printf+2
  3173  000F30  C0CD  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3174  000F34  EC09  F000         	call	_printf	;wreg free
  3175  000F38  D7F0               	goto	l3882
  3176  000F3A                     l3888:
  3177  000F3A  C0CC  F090         	movff	_bottle_count_disp,___awmod@dividend
  3178  000F3E  C0CD  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3179  000F42  0E00               	movlw	0
  3180  000F44  0100               	movlb	0	; () banked
  3181  000F46  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3182  000F48  0E05               	movlw	5
  3183  000F4A  6F92               	movwf	___awmod@divisor& (0+255),b
  3184  000F4C  ECB9  F00E         	call	___awmod	;wreg free
  3185                           
  3186                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3187                           ; Switch size 1, requested type "space"
  3188                           ; Number of cases is 1, Range of values is 0 to 0
  3189                           ; switch strategies available:
  3190                           ; Name         Instructions Cycles
  3191                           ; simple_byte            4     3 (average)
  3192                           ;	Chosen strategy is simple_byte
  3193  000F50  0100               	movlb	0	; () banked
  3194  000F52  5191               	movf	(?___awmod+1)& (0+255),w,b
  3195  000F54  0A00               	xorlw	0	; case 0
  3196  000F56  A4D8               	btfss	status,2,c
  3197  000F58  D7E0               	goto	l3882
  3198                           
  3199                           ; BSR set to: 0
  3200                           ; Switch size 1, requested type "space"
  3201                           ; Number of cases is 5, Range of values is 0 to 4
  3202                           ; switch strategies available:
  3203                           ; Name         Instructions Cycles
  3204                           ; simple_byte           16     9 (average)
  3205                           ;	Chosen strategy is simple_byte
  3206  000F5A  0100               	movlb	0	; () banked
  3207  000F5C  5190               	movf	?___awmod& (0+255),w,b
  3208  000F5E  0A00               	xorlw	0	; case 0
  3209  000F60  B4D8               	btfsc	status,2,c
  3210  000F62  D768               	goto	l3852
  3211  000F64  0A01               	xorlw	1	; case 1
  3212  000F66  B4D8               	btfsc	status,2,c
  3213  000F68  D77C               	goto	l3858
  3214  000F6A  0A03               	xorlw	3	; case 2
  3215  000F6C  B4D8               	btfsc	status,2,c
  3216  000F6E  D790               	goto	l3864
  3217  000F70  0A01               	xorlw	1	; case 3
  3218  000F72  B4D8               	btfsc	status,2,c
  3219  000F74  D7A4               	goto	l3870
  3220  000F76  0A07               	xorlw	7	; case 4
  3221  000F78  B4D8               	btfsc	status,2,c
  3222  000F7A  D7B8               	goto	l3876
  3223  000F7C  D7CE               	goto	l3882
  3224  000F7E                     __end_of_bottle_count:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           intcon3	equ	0xFF0
  3235                           postinc0	equ	0xFEE
  3236                           wreg	equ	0xFE8
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _printf *****************
  3245 ;; Defined at:
  3246 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3249 ;;		 -> STR_24(15), STR_23(16), STR_22(25), STR_21(24), 
  3250 ;;		 -> STR_20(22), STR_19(23), STR_18(18), STR_17(23), 
  3251 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  3252 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  3253 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  3254 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;  idx             1   40[BANK0 ] unsigned char 
  3257 ;;  tmpval          4    0        struct .
  3258 ;;  cp              3    0        PTR const unsigned char 
  3259 ;;  width           2   47[BANK0 ] int 
  3260 ;;  val             2   44[BANK0 ] unsigned int 
  3261 ;;  ap              2   41[BANK0 ] PTR void [1]
  3262 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3263 ;;  len             2    0        unsigned int 
  3264 ;;  c               1   49[BANK0 ] char 
  3265 ;;  flag            1   46[BANK0 ] unsigned char 
  3266 ;;  prec            1   43[BANK0 ] char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  2   28[BANK0 ] int 
  3269 ;; Registers used:
  3270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3276 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;Total ram usage:       22 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    9
  3283 ;; This function calls:
  3284 ;;		___lwdiv
  3285 ;;		___lwmod
  3286 ;;		___wmul
  3287 ;;		_isdigit
  3288 ;;		_putch
  3289 ;; This function is called by:
  3290 ;;		_standby
  3291 ;;		_date_time
  3292 ;;		_bottle_count
  3293 ;;		_bottle_time
  3294 ;;		_operation
  3295 ;;		_operationend
  3296 ;;		_emergencystop
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text11
  3301  000012                     __ptext11:
  3302                           	opt stack 0
  3303  000012                     _printf:
  3304                           	opt stack 20
  3305                           
  3306                           ;doprnt.c: 466: va_list ap;
  3307                           ;doprnt.c: 499: signed char c;
  3308                           ;doprnt.c: 501: int width;
  3309                           ;doprnt.c: 506: signed char prec;
  3310                           ;doprnt.c: 508: unsigned char flag;
  3311                           ;doprnt.c: 523: union {
  3312                           ;doprnt.c: 524: unsigned long vd;
  3313                           ;doprnt.c: 525: double integ;
  3314                           ;doprnt.c: 526: } tmpval;
  3315                           ;doprnt.c: 528: unsigned int val;
  3316                           ;doprnt.c: 529: unsigned len;
  3317                           ;doprnt.c: 530: const char * cp;
  3318                           ;doprnt.c: 533: *ap = __va_start();
  3319                           
  3320                           ;incstack = 0
  3321  000012  0E9E               	movlw	low (?_printf+2)
  3322  000014  0100               	movlb	0	; () banked
  3323  000016  6FA9               	movwf	printf@ap& (0+255),b
  3324  000018  0E00               	movlw	high (?_printf+2)
  3325  00001A  0100               	movlb	0	; () banked
  3326  00001C  6FAA               	movwf	(printf@ap+1)& (0+255),b
  3327                           
  3328                           ;doprnt.c: 536: while(c = *f++) {
  3329  00001E  D1C4               	goto	l3522
  3330  000020                     l3396:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 538: if(c != '%')
  3334  000020  0E25               	movlw	37
  3335  000022  0100               	movlb	0	; () banked
  3336  000024  19B1               	xorwf	printf@c& (0+255),w,b
  3337  000026  B4D8               	btfsc	status,2,c
  3338  000028  D005               	goto	l3400
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;doprnt.c: 540: {
  3342                           ;doprnt.c: 541: (putch(c) );
  3343  00002A  0100               	movlb	0	; () banked
  3344  00002C  51B1               	movf	printf@c& (0+255),w,b
  3345  00002E  EC45  F013         	call	_putch
  3346                           
  3347                           ;doprnt.c: 542: continue;
  3348  000032  D1BA               	goto	l3522
  3349  000034                     l3400:
  3350                           
  3351                           ;doprnt.c: 543: }
  3352                           ;doprnt.c: 546: width = 0;
  3353  000034  0E00               	movlw	0
  3354  000036  0100               	movlb	0	; () banked
  3355  000038  6FB0               	movwf	(printf@width+1)& (0+255),b
  3356  00003A  0E00               	movlw	0
  3357  00003C  6FAF               	movwf	printf@width& (0+255),b
  3358                           
  3359                           ;doprnt.c: 548: flag = 0;
  3360  00003E  0E00               	movlw	0
  3361  000040  0100               	movlb	0	; () banked
  3362  000042  6FAE               	movwf	printf@flag& (0+255),b
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;doprnt.c: 551: switch(*f) {
  3366                           
  3367                           ;doprnt.c: 550: for(;;) {
  3368  000044  D005               	goto	l3406
  3369  000046                     l3402:
  3370                           
  3371                           ;doprnt.c: 580: flag |= 0x04;
  3372  000046  0100               	movlb	0	; () banked
  3373  000048  85AE               	bsf	printf@flag& (0+255),2,b
  3374                           
  3375                           ;doprnt.c: 581: f++;
  3376  00004A  0100               	movlb	0	; () banked
  3377  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3378  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3379  000050                     l3406:
  3380  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3381  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3382  000058                     	if	0	;tblptru may be non-zero
  3383  000058                     	endif
  3384  000058                     	if	0	;tblptru may be non-zero
  3385  000058                     	endif
  3386  000058  0008               	tblrd		*
  3387  00005A  50F5               	movf	tablat,w,c
  3388                           
  3389                           ; Switch size 1, requested type "space"
  3390                           ; Number of cases is 1, Range of values is 48 to 48
  3391                           ; switch strategies available:
  3392                           ; Name         Instructions Cycles
  3393                           ; simple_byte            4     3 (average)
  3394                           ;	Chosen strategy is simple_byte
  3395  00005C  0A30               	xorlw	48	; case 48
  3396  00005E  B4D8               	btfsc	status,2,c
  3397  000060  D7F2               	goto	l3402
  3398                           
  3399                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3400                           
  3401                           ;doprnt.c: 586: }
  3402                           
  3403                           ;doprnt.c: 585: break;
  3404  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3405  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3406  00006A                     	if	0	;tblptru may be non-zero
  3407  00006A                     	endif
  3408  00006A                     	if	0	;tblptru may be non-zero
  3409  00006A                     	endif
  3410  00006A  0008               	tblrd		*
  3411  00006C  50F5               	movf	tablat,w,c
  3412  00006E  ECBD  F012         	call	_isdigit
  3413  000072  A0D8               	btfss	status,0,c
  3414  000074  D044               	goto	l3424
  3415                           
  3416                           ;doprnt.c: 598: width = 0;
  3417  000076  0E00               	movlw	0
  3418  000078  0100               	movlb	0	; () banked
  3419  00007A  6FB0               	movwf	(printf@width+1)& (0+255),b
  3420  00007C  0E00               	movlw	0
  3421  00007E  6FAF               	movwf	printf@width& (0+255),b
  3422  000080                     l3412:
  3423                           
  3424                           ;doprnt.c: 600: width *= 10;
  3425  000080  C0AF  F090         	movff	printf@width,___wmul@multiplier
  3426  000084  C0B0  F091         	movff	printf@width+1,___wmul@multiplier+1
  3427  000088  0E00               	movlw	0
  3428  00008A  0100               	movlb	0	; () banked
  3429  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3430  00008E  0E0A               	movlw	10
  3431  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3432  000092  EC71  F012         	call	___wmul	;wreg free
  3433  000096  C090  F0AF         	movff	?___wmul,printf@width
  3434  00009A  C091  F0B0         	movff	?___wmul+1,printf@width+1
  3435                           
  3436                           ;doprnt.c: 601: width += *f++ - '0';
  3437  00009E  0ED0               	movlw	208
  3438  0000A0  0100               	movlb	0	; () banked
  3439  0000A2  6FA4               	movwf	??_printf& (0+255),b
  3440  0000A4  0EFF               	movlw	255
  3441  0000A6  0100               	movlb	0	; () banked
  3442  0000A8  6FA5               	movwf	(??_printf+1)& (0+255),b
  3443  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3444  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3445  0000B2                     	if	0	;tblptru may be non-zero
  3446  0000B2                     	endif
  3447  0000B2                     	if	0	;tblptru may be non-zero
  3448  0000B2                     	endif
  3449  0000B2  0008               	tblrd		*
  3450  0000B4  50F5               	movf	tablat,w,c
  3451  0000B6  0100               	movlb	0	; () banked
  3452  0000B8  6FA6               	movwf	(??_printf+2)& (0+255),b
  3453  0000BA  6BA7               	clrf	(??_printf+3)& (0+255),b
  3454  0000BC  0100               	movlb	0	; () banked
  3455  0000BE  51A4               	movf	??_printf& (0+255),w,b
  3456  0000C0  0100               	movlb	0	; () banked
  3457  0000C2  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3458  0000C4  0100               	movlb	0	; () banked
  3459  0000C6  51A5               	movf	(??_printf+1)& (0+255),w,b
  3460  0000C8  0100               	movlb	0	; () banked
  3461  0000CA  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3462  0000CC  0100               	movlb	0	; () banked
  3463  0000CE  51A6               	movf	(??_printf+2)& (0+255),w,b
  3464  0000D0  0100               	movlb	0	; () banked
  3465  0000D2  27AF               	addwf	printf@width& (0+255),f,b
  3466  0000D4  0100               	movlb	0	; () banked
  3467  0000D6  51A7               	movf	(??_printf+3)& (0+255),w,b
  3468  0000D8  0100               	movlb	0	; () banked
  3469  0000DA  23B0               	addwfc	(printf@width+1)& (0+255),f,b
  3470                           
  3471                           ; BSR set to: 0
  3472  0000DC  0100               	movlb	0	; () banked
  3473  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3474  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3478  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3479  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3480  0000EA                     	if	0	;tblptru may be non-zero
  3481  0000EA                     	endif
  3482  0000EA                     	if	0	;tblptru may be non-zero
  3483  0000EA                     	endif
  3484  0000EA  0008               	tblrd		*
  3485  0000EC  50F5               	movf	tablat,w,c
  3486  0000EE  ECBD  F012         	call	_isdigit
  3487  0000F2  A0D8               	btfss	status,0,c
  3488  0000F4  D004               	goto	l3424
  3489  0000F6  D7C4               	goto	l3412
  3490  0000F8                     l3420:
  3491                           
  3492                           ;doprnt.c: 721: flag |= 0x80;
  3493  0000F8  0100               	movlb	0	; () banked
  3494  0000FA  8FAE               	bsf	printf@flag& (0+255),7,b
  3495                           
  3496                           ;doprnt.c: 723: break;
  3497  0000FC  D019               	goto	l377
  3498  0000FE                     l3424:
  3499  0000FE  C09C  FFF6         	movff	printf@f,tblptrl
  3500  000102  C09D  FFF7         	movff	printf@f+1,tblptrh
  3501  000106  0100               	movlb	0	; () banked
  3502  000108  4B9C               	infsnz	printf@f& (0+255),f,b
  3503  00010A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3504  00010C                     	if	0	;tblptru may be non-zero
  3505  00010C                     	endif
  3506  00010C                     	if	0	;tblptru may be non-zero
  3507  00010C                     	endif
  3508  00010C  0008               	tblrd		*
  3509  00010E  CFF5 F0B1          	movff	tablat,printf@c
  3510  000112  0100               	movlb	0	; () banked
  3511  000114  51B1               	movf	printf@c& (0+255),w,b
  3512                           
  3513                           ; Switch size 1, requested type "space"
  3514                           ; Number of cases is 4, Range of values is 0 to 120
  3515                           ; switch strategies available:
  3516                           ; Name         Instructions Cycles
  3517                           ; simple_byte           13     7 (average)
  3518                           ;	Chosen strategy is simple_byte
  3519  000116  0A00               	xorlw	0	; case 0
  3520  000118  B4D8               	btfsc	status,2,c
  3521  00011A  0012               	return	
  3522  00011C  0A64               	xorlw	100	; case 100
  3523  00011E  B4D8               	btfsc	status,2,c
  3524  000120  D007               	goto	l377
  3525  000122  0A0D               	xorlw	13	; case 105
  3526  000124  B4D8               	btfsc	status,2,c
  3527  000126  D004               	goto	l377
  3528  000128  0A11               	xorlw	17	; case 120
  3529  00012A  B4D8               	btfsc	status,2,c
  3530  00012C  D7E5               	goto	l3420
  3531  00012E  D13C               	goto	l3522
  3532  000130                     l377:
  3533                           
  3534                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3535  000130  0100               	movlb	0	; () banked
  3536  000132  BFAE               	btfsc	printf@flag& (0+255),7,b
  3537  000134  D019               	goto	l3436
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;doprnt.c: 1253: {
  3541                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3542  000136  C0A9  FFD9         	movff	printf@ap,fsr2l
  3543  00013A  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3544  00013E  CFDE F0AC          	movff	postinc2,printf@val
  3545  000142  CFDD F0AD          	movff	postdec2,printf@val+1
  3546                           
  3547                           ; BSR set to: 0
  3548  000146  0E02               	movlw	2
  3549  000148  0100               	movlb	0	; () banked
  3550  00014A  27A9               	addwf	printf@ap& (0+255),f,b
  3551  00014C  0E00               	movlw	0
  3552  00014E  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;doprnt.c: 1261: if((int)val < 0) {
  3556  000150  0100               	movlb	0	; () banked
  3557  000152  AFAD               	btfss	(printf@val+1)& (0+255),7,b
  3558  000154  D053               	goto	l3470
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;doprnt.c: 1262: flag |= 0x03;
  3562  000156  0E03               	movlw	3
  3563  000158  0100               	movlb	0	; () banked
  3564  00015A  13AE               	iorwf	printf@flag& (0+255),f,b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 1263: val = -val;
  3568  00015C  0100               	movlb	0	; () banked
  3569  00015E  6DAC               	negf	printf@val& (0+255),b
  3570  000160  1FAD               	comf	(printf@val+1)& (0+255),f,b
  3571  000162  B0D8               	btfsc	status,0,c
  3572  000164  2BAD               	incf	(printf@val+1)& (0+255),f,b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;doprnt.c: 1264: }
  3576                           ;doprnt.c: 1266: }
  3577  000166  D04A               	goto	l3470
  3578  000168                     l3436:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1268: else
  3582                           ;doprnt.c: 1273: {
  3583                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3584  000168  C0A9  FFD9         	movff	printf@ap,fsr2l
  3585  00016C  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3586  000170  CFDE F0AC          	movff	postinc2,printf@val
  3587  000174  CFDD F0AD          	movff	postdec2,printf@val+1
  3588                           
  3589                           ; BSR set to: 0
  3590  000178  0E02               	movlw	2
  3591  00017A  0100               	movlb	0	; () banked
  3592  00017C  27A9               	addwf	printf@ap& (0+255),f,b
  3593  00017E  0E00               	movlw	0
  3594  000180  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;doprnt.c: 1287: }
  3598                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3599  000182  D03C               	goto	l3470
  3600  000184                     l3440:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3604  000184  0E01               	movlw	1
  3605  000186  0100               	movlb	0	; () banked
  3606  000188  6FB1               	movwf	printf@c& (0+255),b
  3607  00018A                     l3442:
  3608                           
  3609                           ; BSR set to: 0
  3610  00018A  0E05               	movlw	5
  3611  00018C  0100               	movlb	0	; () banked
  3612  00018E  19B1               	xorwf	printf@c& (0+255),w,b
  3613  000190  B4D8               	btfsc	status,2,c
  3614  000192  D03D               	goto	l3472
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;doprnt.c: 1306: if(val < dpowers[c])
  3618                           
  3619                           ; BSR set to: 0
  3620                           
  3621                           ; BSR set to: 0
  3622  000194  0100               	movlb	0	; () banked
  3623  000196  51B1               	movf	printf@c& (0+255),w,b
  3624  000198  0D02               	mullw	2
  3625  00019A  0EEA               	movlw	low _dpowers
  3626  00019C  24F3               	addwf	prodl,w,c
  3627  00019E  6EF6               	movwf	tblptrl,c
  3628  0001A0  0EFD               	movlw	high _dpowers
  3629  0001A2  20F4               	addwfc	prodh,w,c
  3630  0001A4  6EF7               	movwf	tblptrh,c
  3631  0001A6                     	if	0	;There are less than 3 active tblptr bytes
  3632  0001A6                     	endif
  3633  0001A6  0009               	tblrd		*+
  3634  0001A8  50F5               	movf	tablat,w,c
  3635  0001AA  0100               	movlb	0	; () banked
  3636  0001AC  5DAC               	subwf	printf@val& (0+255),w,b
  3637  0001AE  0009               	tblrd		*+
  3638  0001B0  50F5               	movf	tablat,w,c
  3639  0001B2  0100               	movlb	0	; () banked
  3640  0001B4  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3641  0001B6  A0D8               	btfss	status,0,c
  3642  0001B8  D02A               	goto	l3472
  3643                           
  3644                           ; BSR set to: 0
  3645                           
  3646                           ; BSR set to: 0
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;doprnt.c: 1307: break;
  3650  0001BA  0100               	movlb	0	; () banked
  3651  0001BC  2BB1               	incf	printf@c& (0+255),f,b
  3652  0001BE  D7E5               	goto	l3442
  3653  0001C0                     l3454:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3657  0001C0  0E01               	movlw	1
  3658  0001C2  0100               	movlb	0	; () banked
  3659  0001C4  6FB1               	movwf	printf@c& (0+255),b
  3660  0001C6                     l3456:
  3661                           
  3662                           ; BSR set to: 0
  3663  0001C6  0E04               	movlw	4
  3664  0001C8  0100               	movlb	0	; () banked
  3665  0001CA  19B1               	xorwf	printf@c& (0+255),w,b
  3666  0001CC  B4D8               	btfsc	status,2,c
  3667  0001CE  D01F               	goto	l3472
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3671                           
  3672                           ; BSR set to: 0
  3673                           
  3674                           ; BSR set to: 0
  3675  0001D0  0100               	movlb	0	; () banked
  3676  0001D2  51B1               	movf	printf@c& (0+255),w,b
  3677  0001D4  0D02               	mullw	2
  3678  0001D6  0EF4               	movlw	low _hexpowers
  3679  0001D8  24F3               	addwf	prodl,w,c
  3680  0001DA  6EF6               	movwf	tblptrl,c
  3681  0001DC  0EFD               	movlw	high _hexpowers
  3682  0001DE  20F4               	addwfc	prodh,w,c
  3683  0001E0  6EF7               	movwf	tblptrh,c
  3684  0001E2                     	if	0	;There are less than 3 active tblptr bytes
  3685  0001E2                     	endif
  3686  0001E2  0009               	tblrd		*+
  3687  0001E4  50F5               	movf	tablat,w,c
  3688  0001E6  0100               	movlb	0	; () banked
  3689  0001E8  5DAC               	subwf	printf@val& (0+255),w,b
  3690  0001EA  0009               	tblrd		*+
  3691  0001EC  50F5               	movf	tablat,w,c
  3692  0001EE  0100               	movlb	0	; () banked
  3693  0001F0  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3694  0001F2  A0D8               	btfss	status,0,c
  3695  0001F4  D00C               	goto	l3472
  3696                           
  3697                           ; BSR set to: 0
  3698                           
  3699                           ; BSR set to: 0
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 1318: break;
  3703  0001F6  0100               	movlb	0	; () banked
  3704  0001F8  2BB1               	incf	printf@c& (0+255),f,b
  3705  0001FA  D7E5               	goto	l3456
  3706  0001FC                     l3470:
  3707                           
  3708                           ; BSR set to: 0
  3709  0001FC  0100               	movlb	0	; () banked
  3710  0001FE  51AE               	movf	printf@flag& (0+255),w,b
  3711  000200  0B80               	andlw	128
  3712                           
  3713                           ; Switch size 1, requested type "space"
  3714                           ; Number of cases is 2, Range of values is 0 to 128
  3715                           ; switch strategies available:
  3716                           ; Name         Instructions Cycles
  3717                           ; simple_byte            7     4 (average)
  3718                           ;	Chosen strategy is simple_byte
  3719  000202  0A00               	xorlw	0	; case 0
  3720  000204  B4D8               	btfsc	status,2,c
  3721  000206  D7BE               	goto	l3440
  3722  000208  0A80               	xorlw	128	; case 128
  3723  00020A  B4D8               	btfsc	status,2,c
  3724  00020C  D7D9               	goto	l3454
  3725  00020E                     l3472:
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3729  00020E  0100               	movlb	0	; () banked
  3730  000210  51AF               	movf	printf@width& (0+255),w,b
  3731  000212  0100               	movlb	0	; () banked
  3732  000214  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3733  000216  B4D8               	btfsc	status,2,c
  3734  000218  D00B               	goto	l3478
  3735                           
  3736                           ; BSR set to: 0
  3737  00021A  C0AE  F0A4         	movff	printf@flag,??_printf
  3738  00021E  0E03               	movlw	3
  3739  000220  0100               	movlb	0	; () banked
  3740  000222  17A4               	andwf	??_printf& (0+255),f,b
  3741  000224  B4D8               	btfsc	status,2,c
  3742  000226  D004               	goto	l3478
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;doprnt.c: 1346: width--;
  3746  000228  0100               	movlb	0	; () banked
  3747  00022A  07AF               	decf	printf@width& (0+255),f,b
  3748  00022C  A0D8               	btfss	status,0,c
  3749  00022E  07B0               	decf	(printf@width+1)& (0+255),f,b
  3750  000230                     l3478:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;doprnt.c: 1381: if(width > c)
  3754  000230  0E80               	movlw	128
  3755  000232  0100               	movlb	0	; () banked
  3756  000234  BFB1               	btfsc	printf@c& (0+255),7,b
  3757  000236  0E7F               	movlw	127
  3758  000238  0100               	movlb	0	; () banked
  3759  00023A  6FA4               	movwf	??_printf& (0+255),b
  3760  00023C  0100               	movlb	0	; () banked
  3761  00023E  51AF               	movf	printf@width& (0+255),w,b
  3762  000240  0100               	movlb	0	; () banked
  3763  000242  5DB1               	subwf	printf@c& (0+255),w,b
  3764  000244  0100               	movlb	0	; () banked
  3765  000246  51B0               	movf	(printf@width+1)& (0+255),w,b
  3766  000248  0A80               	xorlw	128
  3767  00024A  0100               	movlb	0	; () banked
  3768  00024C  59A4               	subwfb	??_printf& (0+255),w,b
  3769  00024E  B0D8               	btfsc	status,0,c
  3770  000250  D00B               	goto	l3482
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;doprnt.c: 1382: width -= c;
  3774  000252  0100               	movlb	0	; () banked
  3775  000254  51B1               	movf	printf@c& (0+255),w,b
  3776  000256  0100               	movlb	0	; () banked
  3777  000258  5FAF               	subwf	printf@width& (0+255),f,b
  3778  00025A  0E00               	movlw	0
  3779  00025C  0100               	movlb	0	; () banked
  3780  00025E  BFB1               	btfsc	printf@c& (0+255),7,b
  3781  000260  0EFF               	movlw	255
  3782  000262  0100               	movlb	0	; () banked
  3783  000264  5BB0               	subwfb	(printf@width+1)& (0+255),f,b
  3784  000266  D005               	goto	l3484
  3785  000268                     l3482:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;doprnt.c: 1383: else
  3789                           ;doprnt.c: 1384: width = 0;
  3790  000268  0E00               	movlw	0
  3791  00026A  0100               	movlb	0	; () banked
  3792  00026C  6FB0               	movwf	(printf@width+1)& (0+255),b
  3793  00026E  0E00               	movlw	0
  3794  000270  6FAF               	movwf	printf@width& (0+255),b
  3795  000272                     l3484:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;doprnt.c: 1387: if(flag & 0x04) {
  3799  000272  0100               	movlb	0	; () banked
  3800  000274  A5AE               	btfss	printf@flag& (0+255),2,b
  3801  000276  D018               	goto	l3496
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 1392: if(flag & 0x03)
  3805  000278  C0AE  F0A4         	movff	printf@flag,??_printf
  3806  00027C  0E03               	movlw	3
  3807  00027E  0100               	movlb	0	; () banked
  3808  000280  17A4               	andwf	??_printf& (0+255),f,b
  3809  000282  B4D8               	btfsc	status,2,c
  3810  000284  D003               	goto	l3490
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 1393: (putch('-') );
  3814  000286  0E2D               	movlw	45
  3815  000288  EC45  F013         	call	_putch
  3816  00028C                     l3490:
  3817                           
  3818                           ;doprnt.c: 1415: if(width)
  3819  00028C  0100               	movlb	0	; () banked
  3820  00028E  51AF               	movf	printf@width& (0+255),w,b
  3821  000290  0100               	movlb	0	; () banked
  3822  000292  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3823  000294  B4D8               	btfsc	status,2,c
  3824  000296  D025               	goto	l3506
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 1417: (putch('0') );
  3828                           
  3829                           ; BSR set to: 0
  3830                           
  3831                           ;doprnt.c: 1416: do
  3832  000298  0E30               	movlw	48
  3833  00029A  EC45  F013         	call	_putch
  3834                           
  3835                           ;doprnt.c: 1418: while(--width);
  3836  00029E  0100               	movlb	0	; () banked
  3837  0002A0  07AF               	decf	printf@width& (0+255),f,b
  3838  0002A2  A0D8               	btfss	status,0,c
  3839  0002A4  07B0               	decf	(printf@width+1)& (0+255),f,b
  3840  0002A6  D7F2               	goto	l3490
  3841  0002A8                     l3496:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;doprnt.c: 1422: {
  3845                           ;doprnt.c: 1424: if(width
  3846                           ;doprnt.c: 1428: )
  3847  0002A8  0100               	movlb	0	; () banked
  3848  0002AA  51AF               	movf	printf@width& (0+255),w,b
  3849  0002AC  0100               	movlb	0	; () banked
  3850  0002AE  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3851  0002B0  B4D8               	btfsc	status,2,c
  3852  0002B2  D00D               	goto	l3502
  3853  0002B4                     l3498:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;doprnt.c: 1430: (putch(' ') );
  3857  0002B4  0E20               	movlw	32
  3858  0002B6  EC45  F013         	call	_putch
  3859                           
  3860                           ;doprnt.c: 1431: while(--width);
  3861  0002BA  0100               	movlb	0	; () banked
  3862  0002BC  07AF               	decf	printf@width& (0+255),f,b
  3863  0002BE  A0D8               	btfss	status,0,c
  3864  0002C0  07B0               	decf	(printf@width+1)& (0+255),f,b
  3865  0002C2  0100               	movlb	0	; () banked
  3866  0002C4  51AF               	movf	printf@width& (0+255),w,b
  3867  0002C6  0100               	movlb	0	; () banked
  3868  0002C8  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3869  0002CA  A4D8               	btfss	status,2,c
  3870  0002CC  D7F3               	goto	l3498
  3871  0002CE                     l3502:
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;doprnt.c: 1438: if(flag & 0x03)
  3875  0002CE  C0AE  F0A4         	movff	printf@flag,??_printf
  3876  0002D2  0E03               	movlw	3
  3877  0002D4  0100               	movlb	0	; () banked
  3878  0002D6  17A4               	andwf	??_printf& (0+255),f,b
  3879  0002D8  B4D8               	btfsc	status,2,c
  3880  0002DA  D003               	goto	l3506
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;doprnt.c: 1439: (putch('-') );
  3884  0002DC  0E2D               	movlw	45
  3885  0002DE  EC45  F013         	call	_putch
  3886  0002E2                     l3506:
  3887                           
  3888                           ;doprnt.c: 1469: }
  3889                           ;doprnt.c: 1472: prec = c;
  3890  0002E2  C0B1  F0AB         	movff	printf@c,printf@prec
  3891                           
  3892                           ;doprnt.c: 1474: while(prec--) {
  3893  0002E6  D05A               	goto	l3520
  3894  0002E8                     l3508:
  3895                           
  3896                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3897  0002E8  0100               	movlb	0	; () banked
  3898  0002EA  51AB               	movf	printf@prec& (0+255),w,b
  3899  0002EC  0D02               	mullw	2
  3900  0002EE  0EEA               	movlw	low _dpowers
  3901  0002F0  24F3               	addwf	prodl,w,c
  3902  0002F2  6EF6               	movwf	tblptrl,c
  3903  0002F4  0EFD               	movlw	high _dpowers
  3904  0002F6  20F4               	addwfc	prodh,w,c
  3905  0002F8  6EF7               	movwf	tblptrh,c
  3906  0002FA                     	if	0	;There are less than 3 active tblptr bytes
  3907  0002FA                     	endif
  3908  0002FA  0009               	tblrd		*+
  3909  0002FC  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3910  000300  000A               	tblrd		*-
  3911  000302  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3912  000306  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3913  00030A  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3914  00030E  ECDC  F00F         	call	___lwdiv	;wreg free
  3915  000312  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  3916  000316  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  3917  00031A  0E00               	movlw	0
  3918  00031C  0100               	movlb	0	; () banked
  3919  00031E  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3920  000320  0E0A               	movlw	10
  3921  000322  6F99               	movwf	___lwmod@divisor& (0+255),b
  3922  000324  EC88  F010         	call	___lwmod	;wreg free
  3923  000328  0100               	movlb	0	; () banked
  3924  00032A  5197               	movf	?___lwmod& (0+255),w,b
  3925  00032C  0F30               	addlw	48
  3926  00032E  0100               	movlb	0	; () banked
  3927  000330  6FB1               	movwf	printf@c& (0+255),b
  3928                           
  3929                           ;doprnt.c: 1491: break;
  3930  000332  D030               	goto	l3518
  3931  000334                     l3510:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;doprnt.c: 1499: {
  3935                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3936  000334  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3937  000338  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3938  00033C  0100               	movlb	0	; () banked
  3939  00033E  51AB               	movf	printf@prec& (0+255),w,b
  3940  000340  0D02               	mullw	2
  3941  000342  0EF4               	movlw	low _hexpowers
  3942  000344  24F3               	addwf	prodl,w,c
  3943  000346  6EF6               	movwf	tblptrl,c
  3944  000348  0EFD               	movlw	high _hexpowers
  3945  00034A  20F4               	addwfc	prodh,w,c
  3946  00034C  6EF7               	movwf	tblptrh,c
  3947  00034E                     	if	0	;There are less than 3 active tblptr bytes
  3948  00034E                     	endif
  3949  00034E  0009               	tblrd		*+
  3950  000350  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3951  000354  000A               	tblrd		*-
  3952  000356  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3953  00035A  ECDC  F00F         	call	___lwdiv	;wreg free
  3954  00035E  0100               	movlb	0	; () banked
  3955  000360  5190               	movf	?___lwdiv& (0+255),w,b
  3956  000362  0B0F               	andlw	15
  3957  000364  0100               	movlb	0	; () banked
  3958  000366  6FA8               	movwf	printf@idx& (0+255),b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3962  000368  0100               	movlb	0	; () banked
  3963  00036A  51A8               	movf	printf@idx& (0+255),w,b
  3964  00036C  0D01               	mullw	1
  3965  00036E  0EF1               	movlw	low STR_25
  3966  000370  24F3               	addwf	prodl,w,c
  3967  000372  6EF6               	movwf	tblptrl,c
  3968  000374  0EFE               	movlw	high STR_25
  3969  000376  20F4               	addwfc	prodh,w,c
  3970  000378  6EF7               	movwf	tblptrh,c
  3971  00037A                     	if	0	;There are less than 3 active tblptr bytes
  3972  00037A                     	endif
  3973  00037A  0008               	tblrd		*
  3974  00037C  CFF5 F0B1          	movff	tablat,printf@c
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;doprnt.c: 1523: }
  3978                           
  3979                           ;doprnt.c: 1508: }
  3980                           ;doprnt.c: 1510: break;
  3981  000380  D009               	goto	l3518
  3982  000382                     l3516:
  3983  000382  0100               	movlb	0	; () banked
  3984  000384  51AE               	movf	printf@flag& (0+255),w,b
  3985  000386  0B80               	andlw	128
  3986                           
  3987                           ; Switch size 1, requested type "space"
  3988                           ; Number of cases is 2, Range of values is 0 to 128
  3989                           ; switch strategies available:
  3990                           ; Name         Instructions Cycles
  3991                           ; simple_byte            7     4 (average)
  3992                           ;	Chosen strategy is simple_byte
  3993  000388  0A00               	xorlw	0	; case 0
  3994  00038A  B4D8               	btfsc	status,2,c
  3995  00038C  D7AD               	goto	l3508
  3996  00038E  0A80               	xorlw	128	; case 128
  3997  000390  B4D8               	btfsc	status,2,c
  3998  000392  D7D0               	goto	l3510
  3999  000394                     l3518:
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;doprnt.c: 1524: (putch(c) );
  4003  000394  0100               	movlb	0	; () banked
  4004  000396  51B1               	movf	printf@c& (0+255),w,b
  4005  000398  EC45  F013         	call	_putch
  4006  00039C                     l3520:
  4007  00039C  0100               	movlb	0	; () banked
  4008  00039E  07AB               	decf	printf@prec& (0+255),f,b
  4009  0003A0  0100               	movlb	0	; () banked
  4010  0003A2  29AB               	incf	printf@prec& (0+255),w,b
  4011  0003A4  A4D8               	btfss	status,2,c
  4012  0003A6  D7ED               	goto	l3516
  4013  0003A8                     l3522:
  4014  0003A8  C09C  FFF6         	movff	printf@f,tblptrl
  4015  0003AC  C09D  FFF7         	movff	printf@f+1,tblptrh
  4016  0003B0  0100               	movlb	0	; () banked
  4017  0003B2  4B9C               	infsnz	printf@f& (0+255),f,b
  4018  0003B4  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4019  0003B6                     	if	0	;tblptru may be non-zero
  4020  0003B6                     	endif
  4021  0003B6                     	if	0	;tblptru may be non-zero
  4022  0003B6                     	endif
  4023  0003B6  0008               	tblrd		*
  4024  0003B8  CFF5 F0B1          	movff	tablat,printf@c
  4025  0003BC  0100               	movlb	0	; () banked
  4026  0003BE  51B1               	movf	printf@c& (0+255),w,b
  4027  0003C0  B4D8               	btfsc	status,2,c
  4028  0003C2  0012               	return	
  4029  0003C4  D62D               	goto	l3396
  4030  0003C6                     __end_of_printf:
  4031                           	opt stack 0
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           prodh	equ	0xFF4
  4037                           prodl	equ	0xFF3
  4038                           intcon	equ	0xFF2
  4039                           intcon2	equ	0xFF1
  4040                           intcon3	equ	0xFF0
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           indf2	equ	0xFDF
  4044                           postinc2	equ	0xFDE
  4045                           postdec2	equ	0xFDD
  4046                           fsr2h	equ	0xFDA
  4047                           fsr2l	equ	0xFD9
  4048                           status	equ	0xFD8
  4049                           
  4050 ;; *************** function _putch *****************
  4051 ;; Defined at:
  4052 ;;		line 31 in file "lcd.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  data            1    wreg     unsigned char 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  data            1   18[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;Total ram usage:        1 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    8
  4073 ;; This function calls:
  4074 ;;		_lcdNibble
  4075 ;; This function is called by:
  4076 ;;		_printf
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text12
  4081  00268A                     __ptext12:
  4082                           	opt stack 0
  4083  00268A                     _putch:
  4084                           	opt stack 20
  4085                           
  4086                           ;incstack = 0
  4087                           ;putch@data stored from wreg
  4088  00268A  0100               	movlb	0	; () banked
  4089  00268C  6F92               	movwf	putch@data& (0+255),b
  4090                           
  4091                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4092  00268E  848C               	bsf	3980,2,c	;volatile
  4093                           
  4094                           ;lcd.c: 33: lcdNibble(data);
  4095  002690  0100               	movlb	0	; () banked
  4096  002692  5192               	movf	putch@data& (0+255),w,b
  4097  002694  ECB9  F010         	call	_lcdNibble
  4098  002698  0012               	return		;funcret
  4099  00269A                     __end_of_putch:
  4100                           	opt stack 0
  4101                           tblptru	equ	0xFF8
  4102                           tblptrh	equ	0xFF7
  4103                           tblptrl	equ	0xFF6
  4104                           tablat	equ	0xFF5
  4105                           prodh	equ	0xFF4
  4106                           prodl	equ	0xFF3
  4107                           intcon	equ	0xFF2
  4108                           intcon2	equ	0xFF1
  4109                           intcon3	equ	0xFF0
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function _isdigit *****************
  4120 ;; Defined at:
  4121 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  c               1    wreg     unsigned char 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  c               1   18[BANK0 ] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;		None               void
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;Total ram usage:        3 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    7
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_printf
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text13
  4150  00257A                     __ptext13:
  4151                           	opt stack 0
  4152  00257A                     _isdigit:
  4153                           	opt stack 21
  4154                           
  4155                           ;incstack = 0
  4156                           ;isdigit@c stored from wreg
  4157  00257A  0100               	movlb	0	; () banked
  4158  00257C  6F92               	movwf	isdigit@c& (0+255),b
  4159  00257E  0E00               	movlw	0
  4160  002580  0100               	movlb	0	; () banked
  4161  002582  6F91               	movwf	_isdigit$699& (0+255),b
  4162                           
  4163                           ; BSR set to: 0
  4164  002584  0E3A               	movlw	58
  4165  002586  0100               	movlb	0	; () banked
  4166  002588  6192               	cpfslt	isdigit@c& (0+255),b
  4167  00258A  D007               	goto	l3216
  4168                           
  4169                           ; BSR set to: 0
  4170  00258C  0E2F               	movlw	47
  4171  00258E  0100               	movlb	0	; () banked
  4172  002590  6592               	cpfsgt	isdigit@c& (0+255),b
  4173  002592  D003               	goto	l3216
  4174                           
  4175                           ; BSR set to: 0
  4176  002594  0E01               	movlw	1
  4177  002596  0100               	movlb	0	; () banked
  4178  002598  6F91               	movwf	_isdigit$699& (0+255),b
  4179  00259A                     l3216:
  4180                           
  4181                           ; BSR set to: 0
  4182  00259A  C091  F090         	movff	_isdigit$699,??_isdigit
  4183  00259E  0100               	movlb	0	; () banked
  4184  0025A0  3190               	rrcf	??_isdigit& (0+255),w,b
  4185  0025A2  0012               	return	
  4186  0025A4                     __end_of_isdigit:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           intcon2	equ	0xFF1
  4196                           intcon3	equ	0xFF0
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           indf2	equ	0xFDF
  4200                           postinc2	equ	0xFDE
  4201                           postdec2	equ	0xFDD
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function ___wmul *****************
  4207 ;; Defined at:
  4208 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4211 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  product         2   20[BANK0 ] unsigned int 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  2   16[BANK0 ] unsigned int 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, prodl, prodh
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;Total ram usage:        6 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    7
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_printf
  4234 ;;		_servo_rotate1
  4235 ;;		_servo_rotate2
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text14
  4240  0024E2                     __ptext14:
  4241                           	opt stack 0
  4242  0024E2                     ___wmul:
  4243                           	opt stack 21
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;incstack = 0
  4247  0024E2  0100               	movlb	0	; () banked
  4248  0024E4  5190               	movf	___wmul@multiplier& (0+255),w,b
  4249  0024E6  0100               	movlb	0	; () banked
  4250  0024E8  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4251  0024EA  CFF3 F094          	movff	prodl,___wmul@product
  4252  0024EE  CFF4 F095          	movff	prodh,___wmul@product+1
  4253  0024F2  0100               	movlb	0	; () banked
  4254  0024F4  5190               	movf	___wmul@multiplier& (0+255),w,b
  4255  0024F6  0100               	movlb	0	; () banked
  4256  0024F8  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4257  0024FA  50F3               	movf	prodl,w,c
  4258  0024FC  0100               	movlb	0	; () banked
  4259  0024FE  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4260  002500  0100               	movlb	0	; () banked
  4261  002502  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4262  002504  0100               	movlb	0	; () banked
  4263  002506  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4264  002508  50F3               	movf	prodl,w,c
  4265  00250A  0100               	movlb	0	; () banked
  4266  00250C  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4267                           
  4268                           ; BSR set to: 0
  4269  00250E  C094  F090         	movff	___wmul@product,?___wmul
  4270  002512  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4271  002516  0012               	return	
  4272  002518                     __end_of___wmul:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           intcon2	equ	0xFF1
  4282                           intcon3	equ	0xFF0
  4283                           postinc0	equ	0xFEE
  4284                           wreg	equ	0xFE8
  4285                           indf2	equ	0xFDF
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function ___lwmod *****************
  4293 ;; Defined at:
  4294 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  dividend        2   23[BANK0 ] unsigned int 
  4297 ;;  divisor         2   25[BANK0 ] unsigned int 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  counter         1   27[BANK0 ] unsigned char 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  2   23[BANK0 ] unsigned int 
  4302 ;; Registers used:
  4303 ;;		wreg, status,2, status,0
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4309 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;Total ram usage:        5 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    7
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_printf
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text15
  4324  002110                     __ptext15:
  4325                           	opt stack 0
  4326  002110                     ___lwmod:
  4327                           	opt stack 21
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;incstack = 0
  4331  002110  0100               	movlb	0	; () banked
  4332  002112  5199               	movf	___lwmod@divisor& (0+255),w,b
  4333  002114  0100               	movlb	0	; () banked
  4334  002116  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4335  002118  B4D8               	btfsc	status,2,c
  4336  00211A  D026               	goto	l832
  4337                           
  4338                           ; BSR set to: 0
  4339  00211C  0E01               	movlw	1
  4340  00211E  0100               	movlb	0	; () banked
  4341  002120  6F9B               	movwf	___lwmod@counter& (0+255),b
  4342  002122  D006               	goto	l3264
  4343  002124                     l3262:
  4344                           
  4345                           ; BSR set to: 0
  4346  002124  0100               	movlb	0	; () banked
  4347  002126  90D8               	bcf	status,0,c
  4348  002128  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4349  00212A  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4350  00212C  0100               	movlb	0	; () banked
  4351  00212E  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4352  002130                     l3264:
  4353                           
  4354                           ; BSR set to: 0
  4355  002130  0100               	movlb	0	; () banked
  4356  002132  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4357  002134  D7F7               	goto	l3262
  4358  002136                     l3266:
  4359                           
  4360                           ; BSR set to: 0
  4361  002136  0100               	movlb	0	; () banked
  4362  002138  5199               	movf	___lwmod@divisor& (0+255),w,b
  4363  00213A  0100               	movlb	0	; () banked
  4364  00213C  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4365  00213E  0100               	movlb	0	; () banked
  4366  002140  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4367  002142  0100               	movlb	0	; () banked
  4368  002144  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4369  002146  A0D8               	btfss	status,0,c
  4370  002148  D008               	goto	l3270
  4371                           
  4372                           ; BSR set to: 0
  4373  00214A  0100               	movlb	0	; () banked
  4374  00214C  5199               	movf	___lwmod@divisor& (0+255),w,b
  4375  00214E  0100               	movlb	0	; () banked
  4376  002150  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4377  002152  0100               	movlb	0	; () banked
  4378  002154  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4379  002156  0100               	movlb	0	; () banked
  4380  002158  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4381  00215A                     l3270:
  4382                           
  4383                           ; BSR set to: 0
  4384  00215A  0100               	movlb	0	; () banked
  4385  00215C  90D8               	bcf	status,0,c
  4386  00215E  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4387  002160  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4388                           
  4389                           ; BSR set to: 0
  4390  002162  0100               	movlb	0	; () banked
  4391  002164  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4392  002166  D7E7               	goto	l3266
  4393  002168                     l832:
  4394                           
  4395                           ; BSR set to: 0
  4396  002168  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4397  00216C  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4398                           
  4399                           ; BSR set to: 0
  4400  002170  0012               	return		;funcret
  4401  002172                     __end_of___lwmod:
  4402                           	opt stack 0
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           intcon2	equ	0xFF1
  4411                           intcon3	equ	0xFF0
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function ___lwdiv *****************
  4422 ;; Defined at:
  4423 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  dividend        2   16[BANK0 ] unsigned int 
  4426 ;;  divisor         2   18[BANK0 ] unsigned int 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  quotient        2   20[BANK0 ] unsigned int 
  4429 ;;  counter         1   22[BANK0 ] unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  2   16[BANK0 ] unsigned int 
  4432 ;; Registers used:
  4433 ;;		wreg, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;Total ram usage:        7 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    7
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_printf
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text16
  4454  001FB8                     __ptext16:
  4455                           	opt stack 0
  4456  001FB8                     ___lwdiv:
  4457                           	opt stack 21
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;incstack = 0
  4461  001FB8  0E00               	movlw	0
  4462  001FBA  0100               	movlb	0	; () banked
  4463  001FBC  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4464  001FBE  0E00               	movlw	0
  4465  001FC0  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4466                           
  4467                           ; BSR set to: 0
  4468  001FC2  0100               	movlb	0	; () banked
  4469  001FC4  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4470  001FC6  0100               	movlb	0	; () banked
  4471  001FC8  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4472  001FCA  B4D8               	btfsc	status,2,c
  4473  001FCC  D02C               	goto	l822
  4474                           
  4475                           ; BSR set to: 0
  4476  001FCE  0E01               	movlw	1
  4477  001FD0  0100               	movlb	0	; () banked
  4478  001FD2  6F96               	movwf	___lwdiv@counter& (0+255),b
  4479  001FD4  D006               	goto	l3244
  4480  001FD6                     l3242:
  4481                           
  4482                           ; BSR set to: 0
  4483  001FD6  0100               	movlb	0	; () banked
  4484  001FD8  90D8               	bcf	status,0,c
  4485  001FDA  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4486  001FDC  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4487  001FDE  0100               	movlb	0	; () banked
  4488  001FE0  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4489  001FE2                     l3244:
  4490                           
  4491                           ; BSR set to: 0
  4492  001FE2  0100               	movlb	0	; () banked
  4493  001FE4  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4494  001FE6  D7F7               	goto	l3242
  4495  001FE8                     l3246:
  4496                           
  4497                           ; BSR set to: 0
  4498  001FE8  0100               	movlb	0	; () banked
  4499  001FEA  90D8               	bcf	status,0,c
  4500  001FEC  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4501  001FEE  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4502                           
  4503                           ; BSR set to: 0
  4504  001FF0  0100               	movlb	0	; () banked
  4505  001FF2  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4506  001FF4  0100               	movlb	0	; () banked
  4507  001FF6  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4508  001FF8  0100               	movlb	0	; () banked
  4509  001FFA  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4510  001FFC  0100               	movlb	0	; () banked
  4511  001FFE  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4512  002000  A0D8               	btfss	status,0,c
  4513  002002  D00A               	goto	l3254
  4514                           
  4515                           ; BSR set to: 0
  4516  002004  0100               	movlb	0	; () banked
  4517  002006  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4518  002008  0100               	movlb	0	; () banked
  4519  00200A  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4520  00200C  0100               	movlb	0	; () banked
  4521  00200E  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4522  002010  0100               	movlb	0	; () banked
  4523  002012  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4524                           
  4525                           ; BSR set to: 0
  4526  002014  0100               	movlb	0	; () banked
  4527  002016  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4528  002018                     l3254:
  4529                           
  4530                           ; BSR set to: 0
  4531  002018  0100               	movlb	0	; () banked
  4532  00201A  90D8               	bcf	status,0,c
  4533  00201C  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4534  00201E  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4535                           
  4536                           ; BSR set to: 0
  4537  002020  0100               	movlb	0	; () banked
  4538  002022  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4539  002024  D7E1               	goto	l3246
  4540  002026                     l822:
  4541                           
  4542                           ; BSR set to: 0
  4543  002026  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4544  00202A  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4545                           
  4546                           ; BSR set to: 0
  4547  00202E  0012               	return		;funcret
  4548  002030                     __end_of___lwdiv:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           intcon2	equ	0xFF1
  4558                           intcon3	equ	0xFF0
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _lcdInst *****************
  4569 ;; Defined at:
  4570 ;;		line 26 in file "lcd.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  data            1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  data            1   18[BANK0 ] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;Total ram usage:        1 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    8
  4591 ;; This function calls:
  4592 ;;		_lcdNibble
  4593 ;; This function is called by:
  4594 ;;		_initLCD
  4595 ;;		_standby
  4596 ;;		_date_time
  4597 ;;		_bottle_count
  4598 ;;		_bottle_time
  4599 ;;		_operation
  4600 ;;		_operationend
  4601 ;;		_emergencystop
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text17
  4606  00269A                     __ptext17:
  4607                           	opt stack 0
  4608  00269A                     _lcdInst:
  4609                           	opt stack 21
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;incstack = 0
  4613                           ;lcdInst@data stored from wreg
  4614  00269A  0100               	movlb	0	; () banked
  4615  00269C  6F92               	movwf	lcdInst@data& (0+255),b
  4616                           
  4617                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4618  00269E  948C               	bcf	3980,2,c	;volatile
  4619                           
  4620                           ;lcd.c: 28: lcdNibble(data);
  4621  0026A0  0100               	movlb	0	; () banked
  4622  0026A2  5192               	movf	lcdInst@data& (0+255),w,b
  4623  0026A4  ECB9  F010         	call	_lcdNibble
  4624  0026A8  0012               	return		;funcret
  4625  0026AA                     __end_of_lcdInst:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           intcon	equ	0xFF2
  4634                           intcon2	equ	0xFF1
  4635                           intcon3	equ	0xFF0
  4636                           postinc0	equ	0xFEE
  4637                           wreg	equ	0xFE8
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function _lcdNibble *****************
  4646 ;; Defined at:
  4647 ;;		line 36 in file "lcd.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  data            1    wreg     unsigned char 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;  data            1   17[BANK0 ] unsigned char 
  4652 ;;  temp            1   16[BANK0 ] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        2 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    7
  4669 ;; This function calls:
  4670 ;;		Nothing
  4671 ;; This function is called by:
  4672 ;;		_lcdInst
  4673 ;;		_putch
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text18
  4678  002172                     __ptext18:
  4679                           	opt stack 0
  4680  002172                     _lcdNibble:
  4681                           	opt stack 20
  4682                           
  4683                           ;incstack = 0
  4684                           ;lcdNibble@data stored from wreg
  4685  002172  0100               	movlb	0	; () banked
  4686  002174  6F91               	movwf	lcdNibble@data& (0+255),b
  4687                           
  4688                           ;lcd.c: 38: char temp = data & 0xF0;
  4689  002176  0100               	movlb	0	; () banked
  4690  002178  5191               	movf	lcdNibble@data& (0+255),w,b
  4691  00217A  0BF0               	andlw	240
  4692  00217C  0100               	movlb	0	; () banked
  4693  00217E  6F90               	movwf	lcdNibble@temp& (0+255),b
  4694                           
  4695                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4696  002180  508C               	movf	3980,w,c	;volatile
  4697  002182  0B0F               	andlw	15
  4698  002184  6E8C               	movwf	3980,c	;volatile
  4699                           
  4700                           ;lcd.c: 40: LATD = temp | LATD;
  4701  002186  0100               	movlb	0	; () banked
  4702  002188  5190               	movf	lcdNibble@temp& (0+255),w,b
  4703  00218A  108C               	iorwf	3980,w,c	;volatile
  4704  00218C  6E8C               	movwf	3980,c	;volatile
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4708  00218E  968C               	bcf	3980,3,c	;volatile
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4712  002190  0E19               	movlw	25
  4713  002192                     u4037:
  4714  002192  2EE8               	decfsz	wreg,f,c
  4715  002194  D7FE               	bra	u4037
  4716                           
  4717                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4718  002196  868C               	bsf	3980,3,c	;volatile
  4719                           
  4720                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4721  002198  0E19               	movlw	25
  4722  00219A                     u4047:
  4723  00219A  2EE8               	decfsz	wreg,f,c
  4724  00219C  D7FE               	bra	u4047
  4725                           
  4726                           ;lcd.c: 47: data = data << 4;
  4727  00219E  0100               	movlb	0	; () banked
  4728  0021A0  3991               	swapf	lcdNibble@data& (0+255),w,b
  4729  0021A2  0BF0               	andlw	240
  4730  0021A4  0100               	movlb	0	; () banked
  4731  0021A6  6F91               	movwf	lcdNibble@data& (0+255),b
  4732                           
  4733                           ;lcd.c: 49: temp = data & 0xF0;
  4734  0021A8  0100               	movlb	0	; () banked
  4735  0021AA  5191               	movf	lcdNibble@data& (0+255),w,b
  4736  0021AC  0BF0               	andlw	240
  4737  0021AE  0100               	movlb	0	; () banked
  4738  0021B0  6F90               	movwf	lcdNibble@temp& (0+255),b
  4739                           
  4740                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4741  0021B2  508C               	movf	3980,w,c	;volatile
  4742  0021B4  0B0F               	andlw	15
  4743  0021B6  6E8C               	movwf	3980,c	;volatile
  4744                           
  4745                           ;lcd.c: 51: LATD = temp | LATD;
  4746  0021B8  0100               	movlb	0	; () banked
  4747  0021BA  5190               	movf	lcdNibble@temp& (0+255),w,b
  4748  0021BC  108C               	iorwf	3980,w,c	;volatile
  4749  0021BE  6E8C               	movwf	3980,c	;volatile
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4753  0021C0  968C               	bcf	3980,3,c	;volatile
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4757  0021C2  0E19               	movlw	25
  4758  0021C4                     u4057:
  4759  0021C4  2EE8               	decfsz	wreg,f,c
  4760  0021C6  D7FE               	bra	u4057
  4761                           
  4762                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4763  0021C8  868C               	bsf	3980,3,c	;volatile
  4764                           
  4765                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4766  0021CA  0E19               	movlw	25
  4767  0021CC                     u4067:
  4768  0021CC  2EE8               	decfsz	wreg,f,c
  4769  0021CE  D7FE               	bra	u4067
  4770  0021D0  0012               	return		;funcret
  4771  0021D2                     __end_of_lcdNibble:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           intcon3	equ	0xFF0
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function ___awmod *****************
  4792 ;; Defined at:
  4793 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  dividend        2   16[BANK0 ] int 
  4796 ;;  divisor         2   18[BANK0 ] int 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  sign            1   21[BANK0 ] unsigned char 
  4799 ;;  counter         1   20[BANK0 ] unsigned char 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  2   16[BANK0 ] int 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2, status,0
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;Total ram usage:        6 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    7
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_bottle_count
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text19
  4824  001D72                     __ptext19:
  4825                           	opt stack 0
  4826  001D72                     ___awmod:
  4827                           	opt stack 22
  4828                           
  4829                           ;incstack = 0
  4830  001D72  0E00               	movlw	0
  4831  001D74  0100               	movlb	0	; () banked
  4832  001D76  6F95               	movwf	___awmod@sign& (0+255),b
  4833                           
  4834                           ; BSR set to: 0
  4835  001D78  0100               	movlb	0	; () banked
  4836  001D7A  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4837  001D7C  D008               	goto	l3616
  4838                           
  4839                           ; BSR set to: 0
  4840  001D7E  0100               	movlb	0	; () banked
  4841  001D80  6D90               	negf	___awmod@dividend& (0+255),b
  4842  001D82  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4843  001D84  B0D8               	btfsc	status,0,c
  4844  001D86  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4845                           
  4846                           ; BSR set to: 0
  4847  001D88  0E01               	movlw	1
  4848  001D8A  0100               	movlb	0	; () banked
  4849  001D8C  6F95               	movwf	___awmod@sign& (0+255),b
  4850  001D8E                     l3616:
  4851                           
  4852                           ; BSR set to: 0
  4853  001D8E  0100               	movlb	0	; () banked
  4854  001D90  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4855  001D92  D005               	goto	l3620
  4856                           
  4857                           ; BSR set to: 0
  4858  001D94  0100               	movlb	0	; () banked
  4859  001D96  6D92               	negf	___awmod@divisor& (0+255),b
  4860  001D98  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  4861  001D9A  B0D8               	btfsc	status,0,c
  4862  001D9C  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  4863  001D9E                     l3620:
  4864                           
  4865                           ; BSR set to: 0
  4866  001D9E  0100               	movlb	0	; () banked
  4867  001DA0  5192               	movf	___awmod@divisor& (0+255),w,b
  4868  001DA2  0100               	movlb	0	; () banked
  4869  001DA4  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4870  001DA6  B4D8               	btfsc	status,2,c
  4871  001DA8  D026               	goto	l3636
  4872                           
  4873                           ; BSR set to: 0
  4874  001DAA  0E01               	movlw	1
  4875  001DAC  0100               	movlb	0	; () banked
  4876  001DAE  6F94               	movwf	___awmod@counter& (0+255),b
  4877  001DB0  D006               	goto	l3626
  4878  001DB2                     l3624:
  4879                           
  4880                           ; BSR set to: 0
  4881  001DB2  0100               	movlb	0	; () banked
  4882  001DB4  90D8               	bcf	status,0,c
  4883  001DB6  3792               	rlcf	___awmod@divisor& (0+255),f,b
  4884  001DB8  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4885  001DBA  0100               	movlb	0	; () banked
  4886  001DBC  2B94               	incf	___awmod@counter& (0+255),f,b
  4887  001DBE                     l3626:
  4888                           
  4889                           ; BSR set to: 0
  4890  001DBE  0100               	movlb	0	; () banked
  4891  001DC0  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4892  001DC2  D7F7               	goto	l3624
  4893  001DC4                     l3628:
  4894                           
  4895                           ; BSR set to: 0
  4896  001DC4  0100               	movlb	0	; () banked
  4897  001DC6  5192               	movf	___awmod@divisor& (0+255),w,b
  4898  001DC8  0100               	movlb	0	; () banked
  4899  001DCA  5D90               	subwf	___awmod@dividend& (0+255),w,b
  4900  001DCC  0100               	movlb	0	; () banked
  4901  001DCE  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4902  001DD0  0100               	movlb	0	; () banked
  4903  001DD2  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4904  001DD4  A0D8               	btfss	status,0,c
  4905  001DD6  D008               	goto	l3632
  4906                           
  4907                           ; BSR set to: 0
  4908  001DD8  0100               	movlb	0	; () banked
  4909  001DDA  5192               	movf	___awmod@divisor& (0+255),w,b
  4910  001DDC  0100               	movlb	0	; () banked
  4911  001DDE  5F90               	subwf	___awmod@dividend& (0+255),f,b
  4912  001DE0  0100               	movlb	0	; () banked
  4913  001DE2  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4914  001DE4  0100               	movlb	0	; () banked
  4915  001DE6  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4916  001DE8                     l3632:
  4917                           
  4918                           ; BSR set to: 0
  4919  001DE8  0100               	movlb	0	; () banked
  4920  001DEA  90D8               	bcf	status,0,c
  4921  001DEC  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4922  001DEE  3392               	rrcf	___awmod@divisor& (0+255),f,b
  4923                           
  4924                           ; BSR set to: 0
  4925  001DF0  0100               	movlb	0	; () banked
  4926  001DF2  2F94               	decfsz	___awmod@counter& (0+255),f,b
  4927  001DF4  D7E7               	goto	l3628
  4928  001DF6                     l3636:
  4929                           
  4930                           ; BSR set to: 0
  4931  001DF6  0100               	movlb	0	; () banked
  4932  001DF8  5195               	movf	___awmod@sign& (0+255),w,b
  4933  001DFA  0100               	movlb	0	; () banked
  4934  001DFC  B4D8               	btfsc	status,2,c
  4935  001DFE  D005               	goto	l3640
  4936                           
  4937                           ; BSR set to: 0
  4938  001E00  0100               	movlb	0	; () banked
  4939  001E02  6D90               	negf	___awmod@dividend& (0+255),b
  4940  001E04  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4941  001E06  B0D8               	btfsc	status,0,c
  4942  001E08  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4943  001E0A                     l3640:
  4944                           
  4945                           ; BSR set to: 0
  4946  001E0A  C090  F090         	movff	___awmod@dividend,?___awmod
  4947  001E0E  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  4948  001E12  0012               	return	
  4949  001E14                     __end_of___awmod:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           intcon2	equ	0xFF1
  4959                           intcon3	equ	0xFF0
  4960                           postinc0	equ	0xFEE
  4961                           wreg	equ	0xFE8
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _I2C_Master_Init *****************
  4970 ;; Defined at:
  4971 ;;		line 13 in file "I2C.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  c               4   29[BANK0 ] const unsigned long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;		None
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      void 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4985 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;Total ram usage:        8 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    8
  4992 ;; This function calls:
  4993 ;;		___lldiv
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text20
  5000  0021D2                     __ptext20:
  5001                           	opt stack 0
  5002  0021D2                     _I2C_Master_Init:
  5003                           	opt stack 22
  5004                           
  5005                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;incstack = 0
  5009  0021D2  0E00               	movlw	0
  5010  0021D4  6EC7               	movwf	4039,c	;volatile
  5011                           
  5012                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5013  0021D6  0E28               	movlw	40
  5014  0021D8  6EC6               	movwf	4038,c	;volatile
  5015                           
  5016                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5017  0021DA  0E00               	movlw	0
  5018  0021DC  6EC5               	movwf	4037,c	;volatile
  5019                           
  5020                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5021  0021DE  0E80               	movlw	128
  5022  0021E0  0100               	movlb	0	; () banked
  5023  0021E2  6F90               	movwf	___lldiv@dividend& (0+255),b
  5024  0021E4  0E96               	movlw	150
  5025  0021E6  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  5026  0021E8  0E98               	movlw	152
  5027  0021EA  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  5028  0021EC  0E00               	movlw	0
  5029  0021EE  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  5030  0021F0  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5031  0021F4  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5032  0021F8  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5033  0021FC  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5034  002200  0E02               	movlw	2
  5035  002202                     u3505:
  5036  002202  90D8               	bcf	status,0,c
  5037  002204  0100               	movlb	0	; () banked
  5038  002206  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5039  002208  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5040  00220A  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5041  00220C  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5042  00220E  2EE8               	decfsz	wreg,f,c
  5043  002210  D7F8               	goto	u3505
  5044  002212  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  5045  002216  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5046  00221A  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5047  00221E  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5048  002222  EC54  F00D         	call	___lldiv	;wreg free
  5049  002226  0100               	movlb	0	; () banked
  5050  002228  0590               	decf	?___lldiv& (0+255),w,b
  5051  00222A  6EC8               	movwf	4040,c	;volatile
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;I2C.c: 20: TRISC3 = 1;
  5055  00222C  8694               	bsf	3988,3,c	;volatile
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;I2C.c: 21: TRISC4 = 1;
  5059  00222E  8894               	bsf	3988,4,c	;volatile
  5060                           
  5061                           ; BSR set to: 0
  5062  002230  0012               	return		;funcret
  5063  002232                     __end_of_I2C_Master_Init:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           intcon2	equ	0xFF1
  5073                           intcon3	equ	0xFF0
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           indf2	equ	0xFDF
  5077                           postinc2	equ	0xFDE
  5078                           postdec2	equ	0xFDD
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function ___lldiv *****************
  5084 ;; Defined at:
  5085 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  dividend        4   16[BANK0 ] unsigned long 
  5088 ;;  divisor         4   20[BANK0 ] unsigned long 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  quotient        4   24[BANK0 ] unsigned long 
  5091 ;;  counter         1   28[BANK0 ] unsigned char 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  4   16[BANK0 ] unsigned long 
  5094 ;; Registers used:
  5095 ;;		wreg, status,2, status,0
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5101 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;Total ram usage:       13 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    7
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_I2C_Master_Init
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text21
  5116  001AA8                     __ptext21:
  5117                           	opt stack 0
  5118  001AA8                     ___lldiv:
  5119                           	opt stack 22
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;incstack = 0
  5123  001AA8  0E00               	movlw	0
  5124  001AAA  0100               	movlb	0	; () banked
  5125  001AAC  6F98               	movwf	___lldiv@quotient& (0+255),b
  5126  001AAE  0E00               	movlw	0
  5127  001AB0  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5128  001AB2  0E00               	movlw	0
  5129  001AB4  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5130  001AB6  0E00               	movlw	0
  5131  001AB8  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5132                           
  5133                           ; BSR set to: 0
  5134  001ABA  0100               	movlb	0	; () banked
  5135  001ABC  5194               	movf	___lldiv@divisor& (0+255),w,b
  5136  001ABE  0100               	movlb	0	; () banked
  5137  001AC0  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5138  001AC2  0100               	movlb	0	; () banked
  5139  001AC4  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5140  001AC6  0100               	movlb	0	; () banked
  5141  001AC8  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5142  001ACA  B4D8               	btfsc	status,2,c
  5143  001ACC  D042               	goto	l769
  5144                           
  5145                           ; BSR set to: 0
  5146  001ACE  0E01               	movlw	1
  5147  001AD0  0100               	movlb	0	; () banked
  5148  001AD2  6F9C               	movwf	___lldiv@counter& (0+255),b
  5149  001AD4  D008               	goto	l3652
  5150  001AD6                     l3650:
  5151                           
  5152                           ; BSR set to: 0
  5153  001AD6  0100               	movlb	0	; () banked
  5154  001AD8  90D8               	bcf	status,0,c
  5155  001ADA  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5156  001ADC  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5157  001ADE  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5158  001AE0  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5159  001AE2  0100               	movlb	0	; () banked
  5160  001AE4  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5161  001AE6                     l3652:
  5162                           
  5163                           ; BSR set to: 0
  5164  001AE6  0100               	movlb	0	; () banked
  5165  001AE8  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5166  001AEA  D7F5               	goto	l3650
  5167  001AEC                     l3654:
  5168                           
  5169                           ; BSR set to: 0
  5170  001AEC  0100               	movlb	0	; () banked
  5171  001AEE  90D8               	bcf	status,0,c
  5172  001AF0  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5173  001AF2  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5174  001AF4  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5175  001AF6  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5176                           
  5177                           ; BSR set to: 0
  5178  001AF8  0100               	movlb	0	; () banked
  5179  001AFA  5194               	movf	___lldiv@divisor& (0+255),w,b
  5180  001AFC  0100               	movlb	0	; () banked
  5181  001AFE  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5182  001B00  0100               	movlb	0	; () banked
  5183  001B02  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5184  001B04  0100               	movlb	0	; () banked
  5185  001B06  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5186  001B08  0100               	movlb	0	; () banked
  5187  001B0A  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5188  001B0C  0100               	movlb	0	; () banked
  5189  001B0E  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5190  001B10  0100               	movlb	0	; () banked
  5191  001B12  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5192  001B14  0100               	movlb	0	; () banked
  5193  001B16  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5194  001B18  A0D8               	btfss	status,0,c
  5195  001B1A  D012               	goto	l3662
  5196                           
  5197                           ; BSR set to: 0
  5198  001B1C  0100               	movlb	0	; () banked
  5199  001B1E  5194               	movf	___lldiv@divisor& (0+255),w,b
  5200  001B20  0100               	movlb	0	; () banked
  5201  001B22  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5202  001B24  0100               	movlb	0	; () banked
  5203  001B26  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5204  001B28  0100               	movlb	0	; () banked
  5205  001B2A  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5206  001B2C  0100               	movlb	0	; () banked
  5207  001B2E  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5208  001B30  0100               	movlb	0	; () banked
  5209  001B32  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5210  001B34  0100               	movlb	0	; () banked
  5211  001B36  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5212  001B38  0100               	movlb	0	; () banked
  5213  001B3A  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5214                           
  5215                           ; BSR set to: 0
  5216  001B3C  0100               	movlb	0	; () banked
  5217  001B3E  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5218  001B40                     l3662:
  5219                           
  5220                           ; BSR set to: 0
  5221  001B40  0100               	movlb	0	; () banked
  5222  001B42  90D8               	bcf	status,0,c
  5223  001B44  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5224  001B46  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5225  001B48  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5226  001B4A  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5227                           
  5228                           ; BSR set to: 0
  5229  001B4C  0100               	movlb	0	; () banked
  5230  001B4E  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5231  001B50  D7CD               	goto	l3654
  5232  001B52                     l769:
  5233                           
  5234                           ; BSR set to: 0
  5235  001B52  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5236  001B56  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5237  001B5A  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5238  001B5E  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5239                           
  5240                           ; BSR set to: 0
  5241  001B62  0012               	return		;funcret
  5242  001B64                     __end_of___lldiv:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           intcon	equ	0xFF2
  5251                           intcon2	equ	0xFF1
  5252                           intcon3	equ	0xFF0
  5253                           postinc0	equ	0xFEE
  5254                           wreg	equ	0xFE8
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           fsr2h	equ	0xFDA
  5259                           fsr2l	equ	0xFD9
  5260                           status	equ	0xFD8
  5261                           
  5262 ;; *************** function _I2C_ColorSens_Init *****************
  5263 ;; Defined at:
  5264 ;;		line 53 in file "I2C.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    9
  5285 ;; This function calls:
  5286 ;;		_I2C_Master_Start
  5287 ;;		_I2C_Master_Stop
  5288 ;;		_I2C_Master_Write
  5289 ;; This function is called by:
  5290 ;;		_main
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text22
  5295  002518                     __ptext22:
  5296                           	opt stack 0
  5297  002518                     _I2C_ColorSens_Init:
  5298                           	opt stack 21
  5299                           
  5300                           ;I2C.c: 54: I2C_Master_Start();
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;incstack = 0
  5304  002518  EC6F  F013         	call	_I2C_Master_Start	;wreg free
  5305                           
  5306                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  5307  00251C  0E00               	movlw	0
  5308  00251E  0100               	movlb	0	; () banked
  5309  002520  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5310  002522  0E52               	movlw	82
  5311  002524  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5312  002526  EC61  F013         	call	_I2C_Master_Write	;wreg free
  5313                           
  5314                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  5315  00252A  0E00               	movlw	0
  5316  00252C  0100               	movlb	0	; () banked
  5317  00252E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5318  002530  0E80               	movlw	128
  5319  002532  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5320  002534  EC61  F013         	call	_I2C_Master_Write	;wreg free
  5321                           
  5322                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  5323  002538  0E00               	movlw	0
  5324  00253A  0100               	movlb	0	; () banked
  5325  00253C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5326  00253E  0E03               	movlw	3
  5327  002540  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  5328  002542  EC61  F013         	call	_I2C_Master_Write	;wreg free
  5329                           
  5330                           ;I2C.c: 58: I2C_Master_Stop();
  5331  002546  EC6B  F013         	call	_I2C_Master_Stop	;wreg free
  5332  00254A  0012               	return		;funcret
  5333  00254C                     __end_of_I2C_ColorSens_Init:
  5334                           	opt stack 0
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           intcon2	equ	0xFF1
  5343                           intcon3	equ	0xFF0
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _I2C_Master_Write *****************
  5354 ;; Defined at:
  5355 ;;		line 47 in file "I2C.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;  d               2   17[BANK0 ] unsigned int 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  1    wreg      void 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;Total ram usage:        2 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    8
  5376 ;; This function calls:
  5377 ;;		_I2C_Master_Wait
  5378 ;; This function is called by:
  5379 ;;		_I2C_ColorSens_Init
  5380 ;;		_date_time
  5381 ;;		_read_colorsensor
  5382 ;;		_set_time
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text23
  5387  0026C2                     __ptext23:
  5388                           	opt stack 0
  5389  0026C2                     _I2C_Master_Write:
  5390                           	opt stack 20
  5391                           
  5392                           ;I2C.c: 49: I2C_Master_Wait();
  5393                           
  5394                           ;incstack = 0
  5395  0026C2  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  5396                           
  5397                           ;I2C.c: 50: SSPBUF = d;
  5398  0026C6  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5399  0026CA  0012               	return		;funcret
  5400  0026CC                     __end_of_I2C_Master_Write:
  5401                           	opt stack 0
  5402                           tblptru	equ	0xFF8
  5403                           tblptrh	equ	0xFF7
  5404                           tblptrl	equ	0xFF6
  5405                           tablat	equ	0xFF5
  5406                           prodh	equ	0xFF4
  5407                           prodl	equ	0xFF3
  5408                           intcon	equ	0xFF2
  5409                           intcon2	equ	0xFF1
  5410                           intcon3	equ	0xFF0
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _I2C_Master_Stop *****************
  5421 ;; Defined at:
  5422 ;;		line 41 in file "I2C.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg, status,2, status,0, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    8
  5443 ;; This function calls:
  5444 ;;		_I2C_Master_Wait
  5445 ;; This function is called by:
  5446 ;;		_I2C_ColorSens_Init
  5447 ;;		_date_time
  5448 ;;		_read_colorsensor
  5449 ;;		_set_time
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text24
  5454  0026D6                     __ptext24:
  5455                           	opt stack 0
  5456  0026D6                     _I2C_Master_Stop:
  5457                           	opt stack 20
  5458                           
  5459                           ;I2C.c: 43: I2C_Master_Wait();
  5460                           
  5461                           ;incstack = 0
  5462  0026D6  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  5463                           
  5464                           ;I2C.c: 44: PEN = 1;
  5465  0026DA  84C5               	bsf	4037,2,c	;volatile
  5466  0026DC  0012               	return		;funcret
  5467  0026DE                     __end_of_I2C_Master_Stop:
  5468                           	opt stack 0
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           intcon3	equ	0xFF0
  5478                           postinc0	equ	0xFEE
  5479                           wreg	equ	0xFE8
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _I2C_Master_Start *****************
  5488 ;; Defined at:
  5489 ;;		line 29 in file "I2C.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;		None
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;		None
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      void 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0, cstack
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;Total ram usage:        0 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    8
  5510 ;; This function calls:
  5511 ;;		_I2C_Master_Wait
  5512 ;; This function is called by:
  5513 ;;		_I2C_ColorSens_Init
  5514 ;;		_date_time
  5515 ;;		_read_colorsensor
  5516 ;;		_set_time
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text25
  5521  0026DE                     __ptext25:
  5522                           	opt stack 0
  5523  0026DE                     _I2C_Master_Start:
  5524                           	opt stack 20
  5525                           
  5526                           ;I2C.c: 31: I2C_Master_Wait();
  5527                           
  5528                           ;incstack = 0
  5529  0026DE  EC32  F013         	call	_I2C_Master_Wait	;wreg free
  5530                           
  5531                           ;I2C.c: 32: SEN = 1;
  5532  0026E2  80C5               	bsf	4037,0,c	;volatile
  5533  0026E4  0012               	return		;funcret
  5534  0026E6                     __end_of_I2C_Master_Start:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           prodh	equ	0xFF4
  5541                           prodl	equ	0xFF3
  5542                           intcon	equ	0xFF2
  5543                           intcon2	equ	0xFF1
  5544                           intcon3	equ	0xFF0
  5545                           postinc0	equ	0xFEE
  5546                           wreg	equ	0xFE8
  5547                           indf2	equ	0xFDF
  5548                           postinc2	equ	0xFDE
  5549                           postdec2	equ	0xFDD
  5550                           fsr2h	equ	0xFDA
  5551                           fsr2l	equ	0xFD9
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _I2C_Master_Wait *****************
  5555 ;; Defined at:
  5556 ;;		line 24 in file "I2C.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;Total ram usage:        1 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    7
  5577 ;; This function calls:
  5578 ;;		Nothing
  5579 ;; This function is called by:
  5580 ;;		_I2C_Master_Start
  5581 ;;		_I2C_Master_Stop
  5582 ;;		_I2C_Master_Write
  5583 ;;		_I2C_Master_Read
  5584 ;;		_I2C_Master_RepeatedStart
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text26
  5589  002664                     __ptext26:
  5590                           	opt stack 0
  5591  002664                     _I2C_Master_Wait:
  5592                           	opt stack 20
  5593  002664                     l34:
  5594  002664  B4C7               	btfsc	4039,2,c	;volatile
  5595  002666  D7FE               	goto	l34
  5596  002668  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  5597  00266C  0E1F               	movlw	31
  5598  00266E  0100               	movlb	0	; () banked
  5599  002670  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5600  002672  B4D8               	btfsc	status,2,c
  5601  002674  0012               	return	
  5602  002676  D7F6               	goto	l34
  5603  002678                     __end_of_I2C_Master_Wait:
  5604                           	opt stack 0
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           intcon	equ	0xFF2
  5612                           intcon2	equ	0xFF1
  5613                           intcon3	equ	0xFF0
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           indf2	equ	0xFDF
  5617                           postinc2	equ	0xFDE
  5618                           postdec2	equ	0xFDD
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _isr *****************
  5624 ;; Defined at:
  5625 ;;		line 136 in file "main.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  i               1  116[COMRAM] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;Total ram usage:       19 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    6
  5646 ;; This function calls:
  5647 ;;		_dec_to_hex
  5648 ;;		_read_time
  5649 ;;		_servo_rotate0
  5650 ;;		i2___wmul
  5651 ;;		i2_lcdInst
  5652 ;;		i2_printf
  5653 ;;		i2_read_colorsensor
  5654 ;; This function is called by:
  5655 ;;		Interrupt level 2
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	intcode
  5660  000008                     __pintcode:
  5661                           	opt stack 0
  5662  000008                     _isr:
  5663                           	opt stack 20
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;incstack = 0
  5667  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5668  00000A  ED69  F003         	call	int_func,f	;refresh shadow registers
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           intcon2	equ	0xFF1
  5677                           intcon3	equ	0xFF0
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           indf2	equ	0xFDF
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687                           	psect	intcode_body
  5688  0006D2                     __pintcode_body:
  5689                           	opt stack 20
  5690  0006D2                     int_func:
  5691                           	opt stack 20
  5692  0006D2  0006               	pop		; remove dummy address from shadow register refresh
  5693  0006D4  CFFA F082          	movff	pclath,??_isr+2
  5694  0006D8  CFFB F083          	movff	pclatu,??_isr+3
  5695  0006DC  CFE9 F084          	movff	fsr0l,??_isr+4
  5696  0006E0  CFEA F085          	movff	fsr0h,??_isr+5
  5697  0006E4  CFE1 F086          	movff	fsr1l,??_isr+6
  5698  0006E8  CFE2 F087          	movff	fsr1h,??_isr+7
  5699  0006EC  CFD9 F088          	movff	fsr2l,??_isr+8
  5700  0006F0  CFDA F089          	movff	fsr2h,??_isr+9
  5701  0006F4  CFF3 F08A          	movff	prodl,??_isr+10
  5702  0006F8  CFF4 F08B          	movff	prodh,??_isr+11
  5703  0006FC  CFF6 F08C          	movff	tblptrl,??_isr+12
  5704  000700  CFF7 F08D          	movff	tblptrh,??_isr+13
  5705  000704  CFF8 F08E          	movff	tblptru,??_isr+14
  5706  000708  CFF5 F08F          	movff	tablat,??_isr+15
  5707                           
  5708                           ;main.c: 137: if (INT1IF) {
  5709  00070C  B0F0               	btfsc	intcon3,0,c	;volatile
  5710  00070E  D0A3               	goto	i2l4246
  5711  000710  D0C3               	goto	i2l225
  5712  000712                     i2l4186:
  5713                           
  5714                           ;main.c: 140: curr_state = STANDBY;
  5715  000712  0E00               	movlw	0
  5716  000714  0100               	movlb	0	; () banked
  5717  000716  6FCB               	movwf	_curr_state& (0+255),b
  5718                           
  5719                           ;main.c: 141: bottle_count_disp = 0;
  5720  000718  0E00               	movlw	0
  5721  00071A  0100               	movlb	0	; () banked
  5722  00071C  6FCD               	movwf	(_bottle_count_disp+1)& (0+255),b
  5723  00071E  0E00               	movlw	0
  5724  000720  6FCC               	movwf	_bottle_count_disp& (0+255),b
  5725                           
  5726                           ;main.c: 142: break;
  5727  000722  D0B8               	goto	i2l228
  5728  000724                     i2l229:
  5729                           
  5730                           ;main.c: 144: TMR0IE = 1;
  5731  000724  8AF2               	bsf	intcon,5,c	;volatile
  5732                           
  5733                           ;main.c: 145: TMR0ON = 1;
  5734  000726  8ED5               	bsf	4053,7,c	;volatile
  5735                           
  5736                           ;main.c: 146: TMR0 = 0;
  5737  000728  0E00               	movlw	0
  5738  00072A  6ED7               	movwf	4055,c	;volatile
  5739  00072C  0E00               	movlw	0
  5740  00072E  6ED6               	movwf	4054,c	;volatile
  5741                           
  5742                           ;main.c: 147: read_time();
  5743  000730  EC54  F010         	call	_read_time	;wreg free
  5744                           
  5745                           ;main.c: 148: start_time[1] = time[1];
  5746  000734  C0BF  F07D         	movff	_time+1,_start_time+1
  5747                           
  5748                           ;main.c: 149: start_time[0] = time[0];
  5749  000738  C0BE  F07C         	movff	_time,_start_time
  5750                           
  5751                           ;main.c: 150: lcdInst(0b00000001);
  5752  00073C  0E01               	movlw	1
  5753  00073E  EC5B  F013         	call	i2_lcdInst
  5754                           
  5755                           ;main.c: 151: curr_state = OPERATION;
  5756  000742  0E02               	movlw	2
  5757  000744  D069               	goto	L3
  5758  000746                     i2l4200:
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;main.c: 152: bottle_count_disp = -1;
  5762  000746  0100               	movlb	0	; () banked
  5763  000748  69CC               	setf	_bottle_count_disp& (0+255),b
  5764  00074A  69CD               	setf	(_bottle_count_disp+1)& (0+255),b
  5765                           
  5766                           ;main.c: 153: break;
  5767  00074C  D0A3               	goto	i2l228
  5768  00074E                     i2l4202:
  5769                           
  5770                           ;main.c: 155: curr_state = BOTTLECOUNT;
  5771  00074E  0E05               	movlw	5
  5772  000750  0100               	movlb	0	; () banked
  5773  000752  6FCB               	movwf	_curr_state& (0+255),b
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;main.c: 156: bottle_count_disp += 1;
  5777  000754  0100               	movlb	0	; () banked
  5778  000756  4BCC               	infsnz	_bottle_count_disp& (0+255),f,b
  5779  000758  2BCD               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5780  00075A                     i2l4206:
  5781  00075A  0E1F               	movlw	31
  5782  00075C  1881               	xorwf	3969,w,c	;volatile
  5783  00075E  A4D8               	btfss	status,2,c
  5784  000760  D099               	goto	i2l228
  5785  000762  D7FB               	goto	i2l4206
  5786  000764                     i2l4208:
  5787                           
  5788                           ;main.c: 160: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5789  000764  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  5790  000768  6A64               	clrf	dec_to_hex@num+1,c
  5791  00076A  EC60  F009         	call	_dec_to_hex	;wreg free
  5792  00076E  C063  F073         	movff	?_dec_to_hex,_isr$1238
  5793  000772  C064  F074         	movff	?_dec_to_hex+1,_isr$1238+1
  5794                           
  5795                           ;main.c: 160: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5796  000776  C073  F001         	movff	_isr$1238,i2___wmul@multiplier
  5797  00077A  C074  F002         	movff	_isr$1238+1,i2___wmul@multiplier+1
  5798  00077E  0E00               	movlw	0
  5799  000780  6E04               	movwf	i2___wmul@multiplicand+1,c
  5800  000782  0E3C               	movlw	60
  5801  000784  6E03               	movwf	i2___wmul@multiplicand,c
  5802  000786  ECE5  F012         	call	i2___wmul	;wreg free
  5803  00078A  C001  F080         	movff	?i2___wmul,??_isr
  5804  00078E  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5805  000792  C07C  F063         	movff	_start_time,dec_to_hex@num
  5806  000796  6A64               	clrf	dec_to_hex@num+1,c
  5807  000798  EC60  F009         	call	_dec_to_hex	;wreg free
  5808  00079C  5063               	movf	?_dec_to_hex,w,c
  5809  00079E  0100               	movlb	0	; () banked
  5810  0007A0  2580               	addwf	??_isr& (0+255),w,b
  5811  0007A2  0100               	movlb	0	; () banked
  5812  0007A4  6FC9               	movwf	_stime& (0+255),b
  5813  0007A6  5064               	movf	?_dec_to_hex+1,w,c
  5814  0007A8  0100               	movlb	0	; () banked
  5815  0007AA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5816  0007AC  0100               	movlb	0	; () banked
  5817  0007AE  6FCA               	movwf	(_stime+1)& (0+255),b
  5818                           
  5819                           ;main.c: 161: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5820  0007B0  C077  F063         	movff	_end_time+1,dec_to_hex@num
  5821  0007B4  6A64               	clrf	dec_to_hex@num+1,c
  5822  0007B6  EC60  F009         	call	_dec_to_hex	;wreg free
  5823  0007BA  C063  F073         	movff	?_dec_to_hex,_isr$1238
  5824  0007BE  C064  F074         	movff	?_dec_to_hex+1,_isr$1238+1
  5825                           
  5826                           ;main.c: 161: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5827  0007C2  C073  F001         	movff	_isr$1238,i2___wmul@multiplier
  5828  0007C6  C074  F002         	movff	_isr$1238+1,i2___wmul@multiplier+1
  5829  0007CA  0E00               	movlw	0
  5830  0007CC  6E04               	movwf	i2___wmul@multiplicand+1,c
  5831  0007CE  0E3C               	movlw	60
  5832  0007D0  6E03               	movwf	i2___wmul@multiplicand,c
  5833  0007D2  ECE5  F012         	call	i2___wmul	;wreg free
  5834  0007D6  C001  F080         	movff	?i2___wmul,??_isr
  5835  0007DA  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5836  0007DE  C076  F063         	movff	_end_time,dec_to_hex@num
  5837  0007E2  6A64               	clrf	dec_to_hex@num+1,c
  5838  0007E4  EC60  F009         	call	_dec_to_hex	;wreg free
  5839  0007E8  5063               	movf	?_dec_to_hex,w,c
  5840  0007EA  0100               	movlb	0	; () banked
  5841  0007EC  2580               	addwf	??_isr& (0+255),w,b
  5842  0007EE  0100               	movlb	0	; () banked
  5843  0007F0  6FC5               	movwf	_etime& (0+255),b
  5844  0007F2  5064               	movf	?_dec_to_hex+1,w,c
  5845  0007F4  0100               	movlb	0	; () banked
  5846  0007F6  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5847  0007F8  0100               	movlb	0	; () banked
  5848  0007FA  6FC6               	movwf	(_etime+1)& (0+255),b
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;main.c: 162: curr_state = BOTTLETIME;
  5852  0007FC  0E06               	movlw	6
  5853  0007FE  D00C               	goto	L3
  5854  000800                     i2l4214:
  5855                           
  5856                           ;main.c: 166: curr_state = DATETIME;
  5857  000800  0E04               	movlw	4
  5858  000802  D00A               	goto	L3
  5859  000804                     i2l4218:
  5860                           
  5861                           ;main.c: 170: read_time();
  5862  000804  EC54  F010         	call	_read_time	;wreg free
  5863                           
  5864                           ;main.c: 171: end_time[1] = time[1];
  5865  000808  C0BF  F077         	movff	_time+1,_end_time+1
  5866                           
  5867                           ;main.c: 172: end_time[0] = time[0];
  5868  00080C  C0BE  F076         	movff	_time,_end_time
  5869                           
  5870                           ;main.c: 173: lcdInst(0b00000001);
  5871  000810  0E01               	movlw	1
  5872  000812  EC5B  F013         	call	i2_lcdInst
  5873                           
  5874                           ;main.c: 174: curr_state = OPERATIONEND;
  5875  000816  0E03               	movlw	3
  5876  000818                     L3:
  5877  000818  0100               	movlb	0	; () banked
  5878  00081A  6FCB               	movwf	_curr_state& (0+255),b
  5879  00081C  D794               	goto	i2l4200
  5880  00081E                     i2l4230:
  5881                           
  5882                           ;main.c: 178: lcdInst(0b00000001);
  5883  00081E  0E01               	movlw	1
  5884  000820  EC5B  F013         	call	i2_lcdInst
  5885                           
  5886                           ;main.c: 179: curr_state = EMERGENCYSTOP;
  5887  000824  0E01               	movlw	1
  5888  000826  0100               	movlb	0	; () banked
  5889  000828  6FCB               	movwf	_curr_state& (0+255),b
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;main.c: 180: bottle_count_disp = -1;
  5893  00082A  0100               	movlb	0	; () banked
  5894  00082C  69CC               	setf	_bottle_count_disp& (0+255),b
  5895  00082E  69CD               	setf	(_bottle_count_disp+1)& (0+255),b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;main.c: 181: TMR0ON = 0;
  5899  000830  9ED5               	bcf	4053,7,c	;volatile
  5900                           
  5901                           ;main.c: 182: break;
  5902  000832  D030               	goto	i2l228
  5903  000834                     i2l4238:
  5904                           
  5905                           ;main.c: 184: servo_rotate0(1);
  5906  000834  0E00               	movlw	0
  5907  000836  6E10               	movwf	servo_rotate0@degree+1,c
  5908  000838  0E01               	movlw	1
  5909  00083A  6E0F               	movwf	servo_rotate0@degree,c
  5910  00083C  EC63  F00E         	call	_servo_rotate0	;wreg free
  5911                           
  5912                           ;main.c: 185: break;
  5913  000840  D029               	goto	i2l228
  5914  000842                     i2l4240:
  5915                           
  5916                           ;main.c: 187: servo_rotate0(180);
  5917  000842  0E00               	movlw	0
  5918  000844  6E10               	movwf	servo_rotate0@degree+1,c
  5919  000846  0EB4               	movlw	180
  5920  000848  6E0F               	movwf	servo_rotate0@degree,c
  5921  00084A  EC63  F00E         	call	_servo_rotate0	;wreg free
  5922                           
  5923                           ;main.c: 188: break;
  5924  00084E  D022               	goto	i2l228
  5925  000850                     i2l4242:
  5926                           
  5927                           ;main.c: 190: read_colorsensor();
  5928  000850  ECB4  F00B         	call	i2_read_colorsensor	;wreg free
  5929                           
  5930                           ;main.c: 192: }
  5931                           
  5932                           ;main.c: 191: break;
  5933  000854  D01F               	goto	i2l228
  5934  000856                     i2l4246:
  5935  000856  5081               	movf	3969,w,c	;volatile
  5936                           
  5937                           ; Switch size 1, requested type "space"
  5938                           ; Number of cases is 10, Range of values is 15 to 239
  5939                           ; switch strategies available:
  5940                           ; Name         Instructions Cycles
  5941                           ; simple_byte           31    16 (average)
  5942                           ;	Chosen strategy is simple_byte
  5943  000858  0A0F               	xorlw	15	; case 15
  5944  00085A  B4D8               	btfsc	status,2,c
  5945  00085C  D763               	goto	i2l229
  5946  00085E  0A10               	xorlw	16	; case 31
  5947  000860  B4D8               	btfsc	status,2,c
  5948  000862  D775               	goto	i2l4202
  5949  000864  0A30               	xorlw	48	; case 47
  5950  000866  B4D8               	btfsc	status,2,c
  5951  000868  D77D               	goto	i2l4208
  5952  00086A  0A10               	xorlw	16	; case 63
  5953  00086C  B4D8               	btfsc	status,2,c
  5954  00086E  D7C8               	goto	i2l4214
  5955  000870  0A70               	xorlw	112	; case 79
  5956  000872  B4D8               	btfsc	status,2,c
  5957  000874  D7C7               	goto	i2l4218
  5958  000876  0A30               	xorlw	48	; case 127
  5959  000878  B4D8               	btfsc	status,2,c
  5960  00087A  D7DC               	goto	i2l4238
  5961  00087C  0AD0               	xorlw	208	; case 175
  5962  00087E  B4D8               	btfsc	status,2,c
  5963  000880  D7E7               	goto	i2l4242
  5964  000882  0A10               	xorlw	16	; case 191
  5965  000884  B4D8               	btfsc	status,2,c
  5966  000886  D7DD               	goto	i2l4240
  5967  000888  0A70               	xorlw	112	; case 207
  5968  00088A  B4D8               	btfsc	status,2,c
  5969  00088C  D7C8               	goto	i2l4230
  5970  00088E  0A20               	xorlw	32	; case 239
  5971  000890  B4D8               	btfsc	status,2,c
  5972  000892  D73F               	goto	i2l4186
  5973  000894                     i2l228:
  5974                           
  5975                           ;main.c: 193: INT1IF = 0;
  5976  000894  90F0               	bcf	intcon3,0,c	;volatile
  5977                           
  5978                           ;main.c: 194: }
  5979  000896  D02E               	goto	i2l249
  5980  000898                     i2l225:
  5981                           
  5982                           ;main.c: 195: else if (TMR0IF) {
  5983  000898  A4F2               	btfss	intcon,2,c	;volatile
  5984  00089A  D012               	goto	i2l4264
  5985                           
  5986                           ;main.c: 196: TMR0ON = 0;
  5987  00089C  9ED5               	bcf	4053,7,c	;volatile
  5988                           
  5989                           ;main.c: 197: read_time();
  5990  00089E  EC54  F010         	call	_read_time	;wreg free
  5991                           
  5992                           ;main.c: 198: end_time[1] = time[1];
  5993  0008A2  C0BF  F077         	movff	_time+1,_end_time+1
  5994                           
  5995                           ;main.c: 199: end_time[0] = time[0];
  5996  0008A6  C0BE  F076         	movff	_time,_end_time
  5997                           
  5998                           ;main.c: 200: lcdInst(0b00000001);
  5999  0008AA  0E01               	movlw	1
  6000  0008AC  EC5B  F013         	call	i2_lcdInst
  6001                           
  6002                           ;main.c: 201: curr_state = OPERATIONEND;
  6003  0008B0  0E03               	movlw	3
  6004  0008B2  0100               	movlb	0	; () banked
  6005  0008B4  6FCB               	movwf	_curr_state& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;main.c: 202: bottle_count_disp = -1;
  6009  0008B6  0100               	movlb	0	; () banked
  6010  0008B8  69CC               	setf	_bottle_count_disp& (0+255),b
  6011  0008BA  69CD               	setf	(_bottle_count_disp+1)& (0+255),b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;main.c: 203: TMR0IF = 0;
  6015  0008BC  94F2               	bcf	intcon,2,c	;volatile
  6016                           
  6017                           ;main.c: 204: }
  6018  0008BE  D01A               	goto	i2l249
  6019  0008C0                     i2l4264:
  6020                           
  6021                           ;main.c: 207: lcdInst(0b10000000);
  6022  0008C0  0E80               	movlw	128
  6023  0008C2  EC5B  F013         	call	i2_lcdInst
  6024                           
  6025                           ;main.c: 208: printf("bad interrupt");
  6026  0008C6  0EDC               	movlw	low STR_1
  6027  0008C8  6E0D               	movwf	i2printf@f,c
  6028  0008CA  0EFF               	movlw	high STR_1
  6029  0008CC  6E0E               	movwf	i2printf@f+1,c
  6030  0008CE  ECE3  F001         	call	i2_printf	;wreg free
  6031                           
  6032                           ;main.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  6033  0008D2  0E00               	movlw	0
  6034  0008D4  6E75               	movwf	isr@i,c
  6035  0008D6                     i2l4270:
  6036  0008D6  0E63               	movlw	99
  6037  0008D8  6475               	cpfsgt	isr@i,c
  6038  0008DA  D001               	goto	i2l4274
  6039  0008DC  D7F1               	goto	i2l4264
  6040  0008DE                     i2l4274:
  6041  0008DE  0E21               	movlw	33
  6042  0008E0  0100               	movlb	0	; () banked
  6043  0008E2  6F80               	movwf	??_isr& (0+255),b
  6044  0008E4  0E76               	movlw	118
  6045  0008E6                     i2u407_47:
  6046  0008E6  2EE8               	decfsz	wreg,f,c
  6047  0008E8  D7FE               	bra	i2u407_47
  6048  0008EA  2F80               	decfsz	??_isr& (0+255),f,b
  6049  0008EC  D7FC               	bra	i2u407_47
  6050  0008EE  F000               	nop	
  6051  0008F0  2A75               	incf	isr@i,f,c
  6052  0008F2  D7F1               	goto	i2l4270
  6053  0008F4                     i2l249:
  6054  0008F4  C08F  FFF5         	movff	??_isr+15,tablat
  6055  0008F8  C08E  FFF8         	movff	??_isr+14,tblptru
  6056  0008FC  C08D  FFF7         	movff	??_isr+13,tblptrh
  6057  000900  C08C  FFF6         	movff	??_isr+12,tblptrl
  6058  000904  C08B  FFF4         	movff	??_isr+11,prodh
  6059  000908  C08A  FFF3         	movff	??_isr+10,prodl
  6060  00090C  C089  FFDA         	movff	??_isr+9,fsr2h
  6061  000910  C088  FFD9         	movff	??_isr+8,fsr2l
  6062  000914  C087  FFE2         	movff	??_isr+7,fsr1h
  6063  000918  C086  FFE1         	movff	??_isr+6,fsr1l
  6064  00091C  C085  FFEA         	movff	??_isr+5,fsr0h
  6065  000920  C084  FFE9         	movff	??_isr+4,fsr0l
  6066  000924  C083  FFFB         	movff	??_isr+3,pclatu
  6067  000928  C082  FFFA         	movff	??_isr+2,pclath
  6068  00092C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6069  00092E  0011               	retfie		f
  6070  000930                     __end_of_isr:
  6071                           	opt stack 0
  6072                           pclatu	equ	0xFFB
  6073                           pclath	equ	0xFFA
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon2	equ	0xFF1
  6082                           intcon3	equ	0xFF0
  6083                           postinc0	equ	0xFEE
  6084                           fsr0h	equ	0xFEA
  6085                           fsr0l	equ	0xFE9
  6086                           wreg	equ	0xFE8
  6087                           fsr1h	equ	0xFE2
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function i2_read_colorsensor *****************
  6097 ;; Defined at:
  6098 ;;		line 417 in file "main.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  read_colorse    2   11[COMRAM] int 
  6103 ;;  read_colorse    2    9[COMRAM] int 
  6104 ;;  read_colorse    2    7[COMRAM] int 
  6105 ;;  read_colorse    2    5[COMRAM] int 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      void 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;Total ram usage:       10 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    2
  6122 ;; This function calls:
  6123 ;;		i2_I2C_Master_Read
  6124 ;;		i2_I2C_Master_Start
  6125 ;;		i2_I2C_Master_Stop
  6126 ;;		i2_I2C_Master_Write
  6127 ;; This function is called by:
  6128 ;;		_isr
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text28
  6133  001768                     __ptext28:
  6134                           	opt stack 0
  6135  001768                     i2_read_colorsensor:
  6136                           	opt stack 23
  6137                           
  6138                           ;main.c: 418: int color_low;
  6139                           ;main.c: 419: int color_high;
  6140                           ;main.c: 420: int color_comb;
  6141                           ;main.c: 421: int i;
  6142                           ;main.c: 424: I2C_Master_Start();
  6143                           
  6144                           ;incstack = 0
  6145  001768  EC77  F013         	call	i2_I2C_Master_Start	;wreg free
  6146                           
  6147                           ;main.c: 425: I2C_Master_Write(0b01010010);
  6148  00176C  0E00               	movlw	0
  6149  00176E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6150  001770  0E52               	movlw	82
  6151  001772  6E02               	movwf	i2I2C_Master_Write@d,c
  6152  001774  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  6153                           
  6154                           ;main.c: 426: I2C_Master_Write(0b10110100);
  6155  001778  0E00               	movlw	0
  6156  00177A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6157  00177C  0EB4               	movlw	180
  6158  00177E  6E02               	movwf	i2I2C_Master_Write@d,c
  6159  001780  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  6160                           
  6161                           ;main.c: 427: I2C_Master_Start();
  6162  001784  EC77  F013         	call	i2_I2C_Master_Start	;wreg free
  6163                           
  6164                           ;main.c: 428: I2C_Master_Write(0b01010011);
  6165  001788  0E00               	movlw	0
  6166  00178A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6167  00178C  0E53               	movlw	83
  6168  00178E  6E02               	movwf	i2I2C_Master_Write@d,c
  6169  001790  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  6170                           
  6171                           ;main.c: 429: for(i=0; i<3; i++){
  6172  001794  0E00               	movlw	0
  6173  001796  6E0D               	movwf	i2read_colorsensor@i+1,c
  6174  001798  0E00               	movlw	0
  6175  00179A  6E0C               	movwf	i2read_colorsensor@i,c
  6176  00179C                     i2l3970:
  6177  00179C  BE0D               	btfsc	i2read_colorsensor@i+1,7,c
  6178  00179E  D006               	goto	i2l3974
  6179  0017A0  500D               	movf	i2read_colorsensor@i+1,w,c
  6180  0017A2  E12E               	bnz	i2l3984
  6181  0017A4  0E03               	movlw	3
  6182  0017A6  5C0C               	subwf	i2read_colorsensor@i,w,c
  6183  0017A8  B0D8               	btfsc	status,0,c
  6184  0017AA  D02A               	goto	i2l3984
  6185  0017AC                     i2l3974:
  6186                           
  6187                           ;main.c: 430: color_low = I2C_Master_Read(1);
  6188  0017AC  0E01               	movlw	1
  6189  0017AE  ECD2  F012         	call	i2_I2C_Master_Read
  6190  0017B2  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6191  0017B4  5004               	movf	??i2_read_colorsensor,w,c
  6192  0017B6  6E06               	movwf	i2read_colorsensor@color_low,c
  6193  0017B8  6A07               	clrf	i2read_colorsensor@color_low+1,c
  6194                           
  6195                           ;main.c: 431: color_high = I2C_Master_Read(1);
  6196  0017BA  0E01               	movlw	1
  6197  0017BC  ECD2  F012         	call	i2_I2C_Master_Read
  6198  0017C0  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6199  0017C2  5004               	movf	??i2_read_colorsensor,w,c
  6200  0017C4  6E08               	movwf	i2read_colorsensor@color_high,c
  6201  0017C6  6A09               	clrf	i2read_colorsensor@color_high+1,c
  6202                           
  6203                           ;main.c: 432: color_comb = (color_high << 8)|(color_low & 0xFF);
  6204  0017C8  5006               	movf	i2read_colorsensor@color_low,w,c
  6205  0017CA  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  6206  0017CE  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  6207  0017D2  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  6208  0017D6  6A04               	clrf	??i2_read_colorsensor,c
  6209  0017D8  1004               	iorwf	??i2_read_colorsensor,w,c
  6210  0017DA  6E0A               	movwf	i2read_colorsensor@color_comb,c
  6211  0017DC  5005               	movf	??i2_read_colorsensor+1,w,c
  6212  0017DE  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  6213                           
  6214                           ;main.c: 433: color[i] = color_comb;
  6215  0017E0  90D8               	bcf	status,0,c
  6216  0017E2  340C               	rlcf	i2read_colorsensor@i,w,c
  6217  0017E4  6ED9               	movwf	fsr2l,c
  6218  0017E6  340D               	rlcf	i2read_colorsensor@i+1,w,c
  6219  0017E8  6EDA               	movwf	fsr2h,c
  6220  0017EA  0EB6               	movlw	low _color
  6221  0017EC  26D9               	addwf	fsr2l,f,c
  6222  0017EE  0E00               	movlw	high _color
  6223  0017F0  22DA               	addwfc	fsr2h,f,c
  6224  0017F2  C00A  FFDE         	movff	i2read_colorsensor@color_comb,postinc2
  6225  0017F6  C00B  FFDD         	movff	i2read_colorsensor@color_comb+1,postdec2
  6226  0017FA  4A0C               	infsnz	i2read_colorsensor@i,f,c
  6227  0017FC  2A0D               	incf	i2read_colorsensor@i+1,f,c
  6228  0017FE  D7CE               	goto	i2l3970
  6229  001800                     i2l3984:
  6230                           
  6231                           ;main.c: 434: }
  6232                           ;main.c: 435: color_low = I2C_Master_Read(1);
  6233  001800  0E01               	movlw	1
  6234  001802  ECD2  F012         	call	i2_I2C_Master_Read
  6235  001806  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6236  001808  5004               	movf	??i2_read_colorsensor,w,c
  6237  00180A  6E06               	movwf	i2read_colorsensor@color_low,c
  6238  00180C  6A07               	clrf	i2read_colorsensor@color_low+1,c
  6239                           
  6240                           ;main.c: 436: color_high = I2C_Master_Read(0);
  6241  00180E  0E00               	movlw	0
  6242  001810  ECD2  F012         	call	i2_I2C_Master_Read
  6243  001814  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  6244  001816  5004               	movf	??i2_read_colorsensor,w,c
  6245  001818  6E08               	movwf	i2read_colorsensor@color_high,c
  6246  00181A  6A09               	clrf	i2read_colorsensor@color_high+1,c
  6247                           
  6248                           ;main.c: 437: color_comb = (color_high << 8)|(color_low & 0xFF);
  6249  00181C  5006               	movf	i2read_colorsensor@color_low,w,c
  6250  00181E  C008  F004         	movff	i2read_colorsensor@color_high,??i2_read_colorsensor
  6251  001822  C009  F005         	movff	i2read_colorsensor@color_high+1,??i2_read_colorsensor+1
  6252  001826  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
  6253  00182A  6A04               	clrf	??i2_read_colorsensor,c
  6254  00182C  1004               	iorwf	??i2_read_colorsensor,w,c
  6255  00182E  6E0A               	movwf	i2read_colorsensor@color_comb,c
  6256  001830  5005               	movf	??i2_read_colorsensor+1,w,c
  6257  001832  6E0B               	movwf	i2read_colorsensor@color_comb+1,c
  6258                           
  6259                           ;main.c: 438: color[3] = color_comb;
  6260  001834  C00A  F0BC         	movff	i2read_colorsensor@color_comb,_color+6
  6261  001838  C00B  F0BD         	movff	i2read_colorsensor@color_comb+1,_color+7
  6262                           
  6263                           ;main.c: 439: I2C_Master_Stop();
  6264  00183C  EC73  F013         	call	i2_I2C_Master_Stop	;wreg free
  6265  001840  0012               	return	
  6266  001842                     __end_ofi2_read_colorsensor:
  6267                           	opt stack 0
  6268                           pclatu	equ	0xFFB
  6269                           pclath	equ	0xFFA
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           intcon2	equ	0xFF1
  6278                           intcon3	equ	0xFF0
  6279                           postinc0	equ	0xFEE
  6280                           fsr0h	equ	0xFEA
  6281                           fsr0l	equ	0xFE9
  6282                           wreg	equ	0xFE8
  6283                           fsr1h	equ	0xFE2
  6284                           fsr1l	equ	0xFE1
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function i2_printf *****************
  6293 ;; Defined at:
  6294 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6297 ;;		 -> STR_24(15), STR_23(16), STR_22(25), STR_21(24), 
  6298 ;;		 -> STR_20(22), STR_19(23), STR_18(18), STR_17(23), 
  6299 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  6300 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  6301 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  6302 ;;		 -> STR_4(23), STR_3(10), STR_2(17), STR_1(14), 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  printf          4    0        struct .
  6305 ;;  printf          3    0        PTR const unsigned char 
  6306 ;;  printf          2   25[COMRAM] int 
  6307 ;;  printf          2   22[COMRAM] unsigned int 
  6308 ;;  printf          2   19[COMRAM] PTR void [1]
  6309 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6310 ;;  printf          2    0        unsigned int 
  6311 ;;  printf          1   27[COMRAM] char 
  6312 ;;  printf          1   24[COMRAM] unsigned char 
  6313 ;;  printf          1   21[COMRAM] char 
  6314 ;;  printf          1   18[COMRAM] unsigned char 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  2   12[COMRAM] int 
  6317 ;; Registers used:
  6318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6324 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;Total ram usage:       16 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    2
  6331 ;; This function calls:
  6332 ;;		i2___lwdiv
  6333 ;;		i2___lwmod
  6334 ;;		i2___wmul
  6335 ;;		i2_isdigit
  6336 ;;		i2_putch
  6337 ;; This function is called by:
  6338 ;;		_isr
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text29
  6343  0003C6                     __ptext29:
  6344                           	opt stack 0
  6345  0003C6                     i2_printf:
  6346                           	opt stack 23
  6347                           
  6348                           ;doprnt.c: 466: va_list ap;
  6349                           ;doprnt.c: 499: signed char c;
  6350                           ;doprnt.c: 501: int width;
  6351                           ;doprnt.c: 506: signed char prec;
  6352                           ;doprnt.c: 508: unsigned char flag;
  6353                           ;doprnt.c: 523: union {
  6354                           ;doprnt.c: 524: unsigned long vd;
  6355                           ;doprnt.c: 525: double integ;
  6356                           ;doprnt.c: 526: } tmpval;
  6357                           ;doprnt.c: 528: unsigned int val;
  6358                           ;doprnt.c: 529: unsigned len;
  6359                           ;doprnt.c: 530: const char * cp;
  6360                           ;doprnt.c: 533: *ap = __va_start();
  6361                           
  6362                           ;incstack = 0
  6363  0003C6  0E0F               	movlw	low (?i2_printf+2)
  6364  0003C8  6E14               	movwf	i2printf@ap,c
  6365  0003CA  0E00               	movlw	high (?i2_printf+2)
  6366  0003CC  6E15               	movwf	i2printf@ap+1,c
  6367                           
  6368                           ;doprnt.c: 536: while(c = *f++) {
  6369  0003CE  D174               	goto	i2l4122
  6370  0003D0                     i2l3996:
  6371                           
  6372                           ;doprnt.c: 538: if(c != '%')
  6373  0003D0  0E25               	movlw	37
  6374  0003D2  181C               	xorwf	i2printf@c,w,c
  6375  0003D4  B4D8               	btfsc	status,2,c
  6376  0003D6  D004               	goto	i2l4000
  6377                           
  6378                           ;doprnt.c: 540: {
  6379                           ;doprnt.c: 541: (putch(c) );
  6380  0003D8  501C               	movf	i2printf@c,w,c
  6381  0003DA  EC55  F013         	call	i2_putch
  6382                           
  6383                           ;doprnt.c: 542: continue;
  6384  0003DE  D16C               	goto	i2l4122
  6385  0003E0                     i2l4000:
  6386                           
  6387                           ;doprnt.c: 543: }
  6388                           ;doprnt.c: 546: width = 0;
  6389  0003E0  0E00               	movlw	0
  6390  0003E2  6E1B               	movwf	i2printf@width+1,c
  6391  0003E4  0E00               	movlw	0
  6392  0003E6  6E1A               	movwf	i2printf@width,c
  6393                           
  6394                           ;doprnt.c: 548: flag = 0;
  6395  0003E8  0E00               	movlw	0
  6396  0003EA  6E19               	movwf	i2printf@flag,c
  6397                           
  6398                           ;doprnt.c: 551: switch(*f) {
  6399                           
  6400                           ;doprnt.c: 550: for(;;) {
  6401  0003EC  D003               	goto	i2l4006
  6402  0003EE                     i2l4002:
  6403                           
  6404                           ;doprnt.c: 580: flag |= 0x04;
  6405  0003EE  8419               	bsf	i2printf@flag,2,c
  6406                           
  6407                           ;doprnt.c: 581: f++;
  6408  0003F0  4A0D               	infsnz	i2printf@f,f,c
  6409  0003F2  2A0E               	incf	i2printf@f+1,f,c
  6410  0003F4                     i2l4006:
  6411  0003F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  6412  0003F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6413  0003FC                     	if	0	;tblptru may be non-zero
  6414  0003FC                     	endif
  6415  0003FC                     	if	0	;tblptru may be non-zero
  6416  0003FC                     	endif
  6417  0003FC  0008               	tblrd		*
  6418  0003FE  50F5               	movf	tablat,w,c
  6419                           
  6420                           ; Switch size 1, requested type "space"
  6421                           ; Number of cases is 1, Range of values is 48 to 48
  6422                           ; switch strategies available:
  6423                           ; Name         Instructions Cycles
  6424                           ; simple_byte            4     3 (average)
  6425                           ;	Chosen strategy is simple_byte
  6426  000400  0A30               	xorlw	48	; case 48
  6427  000402  B4D8               	btfsc	status,2,c
  6428  000404  D7F4               	goto	i2l4002
  6429                           
  6430                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6431                           
  6432                           ;doprnt.c: 586: }
  6433                           
  6434                           ;doprnt.c: 585: break;
  6435  000406  C00D  FFF6         	movff	i2printf@f,tblptrl
  6436  00040A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6437  00040E                     	if	0	;tblptru may be non-zero
  6438  00040E                     	endif
  6439  00040E                     	if	0	;tblptru may be non-zero
  6440  00040E                     	endif
  6441  00040E  0008               	tblrd		*
  6442  000410  50F5               	movf	tablat,w,c
  6443  000412  EC0A  F013         	call	i2_isdigit
  6444  000416  A0D8               	btfss	status,0,c
  6445  000418  D035               	goto	i2l4024
  6446                           
  6447                           ;doprnt.c: 598: width = 0;
  6448  00041A  0E00               	movlw	0
  6449  00041C  6E1B               	movwf	i2printf@width+1,c
  6450  00041E  0E00               	movlw	0
  6451  000420  6E1A               	movwf	i2printf@width,c
  6452  000422                     i2l4012:
  6453                           
  6454                           ;doprnt.c: 600: width *= 10;
  6455  000422  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  6456  000426  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  6457  00042A  0E00               	movlw	0
  6458  00042C  6E04               	movwf	i2___wmul@multiplicand+1,c
  6459  00042E  0E0A               	movlw	10
  6460  000430  6E03               	movwf	i2___wmul@multiplicand,c
  6461  000432  ECE5  F012         	call	i2___wmul	;wreg free
  6462  000436  C001  F01A         	movff	?i2___wmul,i2printf@width
  6463  00043A  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  6464                           
  6465                           ;doprnt.c: 601: width += *f++ - '0';
  6466  00043E  0ED0               	movlw	208
  6467  000440  6E0F               	movwf	??i2_printf& (0+255),c
  6468  000442  0EFF               	movlw	255
  6469  000444  6E10               	movwf	(??i2_printf+1)& (0+255),c
  6470  000446  C00D  FFF6         	movff	i2printf@f,tblptrl
  6471  00044A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6472  00044E                     	if	0	;tblptru may be non-zero
  6473  00044E                     	endif
  6474  00044E                     	if	0	;tblptru may be non-zero
  6475  00044E                     	endif
  6476  00044E  0008               	tblrd		*
  6477  000450  50F5               	movf	tablat,w,c
  6478  000452  6E11               	movwf	(??i2_printf+2)& (0+255),c
  6479  000454  6A12               	clrf	(??i2_printf+3)& (0+255),c
  6480  000456  500F               	movf	??i2_printf,w,c
  6481  000458  2611               	addwf	??i2_printf+2,f,c
  6482  00045A  5010               	movf	??i2_printf+1,w,c
  6483  00045C  2212               	addwfc	??i2_printf+3,f,c
  6484  00045E  5011               	movf	??i2_printf+2,w,c
  6485  000460  261A               	addwf	i2printf@width,f,c
  6486  000462  5012               	movf	??i2_printf+3,w,c
  6487  000464  221B               	addwfc	i2printf@width+1,f,c
  6488  000466  4A0D               	infsnz	i2printf@f,f,c
  6489  000468  2A0E               	incf	i2printf@f+1,f,c
  6490                           
  6491                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6492  00046A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6493  00046E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6494  000472                     	if	0	;tblptru may be non-zero
  6495  000472                     	endif
  6496  000472                     	if	0	;tblptru may be non-zero
  6497  000472                     	endif
  6498  000472  0008               	tblrd		*
  6499  000474  50F5               	movf	tablat,w,c
  6500  000476  EC0A  F013         	call	i2_isdigit
  6501  00047A  A0D8               	btfss	status,0,c
  6502  00047C  D003               	goto	i2l4024
  6503  00047E  D7D1               	goto	i2l4012
  6504  000480                     i2l4020:
  6505                           
  6506                           ;doprnt.c: 721: flag |= 0x80;
  6507  000480  8E19               	bsf	i2printf@flag,7,c
  6508                           
  6509                           ;doprnt.c: 723: break;
  6510  000482  D017               	goto	i2l377
  6511  000484                     i2l4024:
  6512  000484  C00D  FFF6         	movff	i2printf@f,tblptrl
  6513  000488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6514  00048C  4A0D               	infsnz	i2printf@f,f,c
  6515  00048E  2A0E               	incf	i2printf@f+1,f,c
  6516  000490                     	if	0	;tblptru may be non-zero
  6517  000490                     	endif
  6518  000490                     	if	0	;tblptru may be non-zero
  6519  000490                     	endif
  6520  000490  0008               	tblrd		*
  6521  000492  CFF5 F01C          	movff	tablat,i2printf@c
  6522  000496  501C               	movf	i2printf@c,w,c
  6523                           
  6524                           ; Switch size 1, requested type "space"
  6525                           ; Number of cases is 4, Range of values is 0 to 120
  6526                           ; switch strategies available:
  6527                           ; Name         Instructions Cycles
  6528                           ; simple_byte           13     7 (average)
  6529                           ;	Chosen strategy is simple_byte
  6530  000498  0A00               	xorlw	0	; case 0
  6531  00049A  B4D8               	btfsc	status,2,c
  6532  00049C  0012               	return	
  6533  00049E  0A64               	xorlw	100	; case 100
  6534  0004A0  B4D8               	btfsc	status,2,c
  6535  0004A2  D007               	goto	i2l377
  6536  0004A4  0A0D               	xorlw	13	; case 105
  6537  0004A6  B4D8               	btfsc	status,2,c
  6538  0004A8  D004               	goto	i2l377
  6539  0004AA  0A11               	xorlw	17	; case 120
  6540  0004AC  B4D8               	btfsc	status,2,c
  6541  0004AE  D7E8               	goto	i2l4020
  6542  0004B0  D103               	goto	i2l4122
  6543  0004B2                     i2l377:
  6544                           
  6545                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6546  0004B2  BE19               	btfsc	i2printf@flag,7,c
  6547  0004B4  D015               	goto	i2l4036
  6548                           
  6549                           ;doprnt.c: 1253: {
  6550                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6551  0004B6  C014  FFD9         	movff	i2printf@ap,fsr2l
  6552  0004BA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6553  0004BE  CFDE F017          	movff	postinc2,i2printf@val
  6554  0004C2  CFDD F018          	movff	postdec2,i2printf@val+1
  6555  0004C6  0E02               	movlw	2
  6556  0004C8  2614               	addwf	i2printf@ap,f,c
  6557  0004CA  0E00               	movlw	0
  6558  0004CC  2215               	addwfc	i2printf@ap+1,f,c
  6559                           
  6560                           ;doprnt.c: 1261: if((int)val < 0) {
  6561  0004CE  AE18               	btfss	i2printf@val+1,7,c
  6562  0004D0  D044               	goto	i2l4070
  6563                           
  6564                           ;doprnt.c: 1262: flag |= 0x03;
  6565  0004D2  0E03               	movlw	3
  6566  0004D4  1219               	iorwf	i2printf@flag,f,c
  6567                           
  6568                           ;doprnt.c: 1263: val = -val;
  6569  0004D6  6C17               	negf	i2printf@val,c
  6570  0004D8  1E18               	comf	i2printf@val+1,f,c
  6571  0004DA  B0D8               	btfsc	status,0,c
  6572  0004DC  2A18               	incf	i2printf@val+1,f,c
  6573                           
  6574                           ;doprnt.c: 1264: }
  6575                           ;doprnt.c: 1266: }
  6576  0004DE  D03D               	goto	i2l4070
  6577  0004E0                     i2l4036:
  6578                           
  6579                           ;doprnt.c: 1268: else
  6580                           ;doprnt.c: 1273: {
  6581                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6582  0004E0  C014  FFD9         	movff	i2printf@ap,fsr2l
  6583  0004E4  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6584  0004E8  CFDE F017          	movff	postinc2,i2printf@val
  6585  0004EC  CFDD F018          	movff	postdec2,i2printf@val+1
  6586  0004F0  0E02               	movlw	2
  6587  0004F2  2614               	addwf	i2printf@ap,f,c
  6588  0004F4  0E00               	movlw	0
  6589  0004F6  2215               	addwfc	i2printf@ap+1,f,c
  6590                           
  6591                           ;doprnt.c: 1287: }
  6592                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6593  0004F8  D030               	goto	i2l4070
  6594  0004FA                     i2l4040:
  6595                           
  6596                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6597  0004FA  0E01               	movlw	1
  6598  0004FC  6E1C               	movwf	i2printf@c,c
  6599  0004FE                     i2l4042:
  6600  0004FE  0E05               	movlw	5
  6601  000500  181C               	xorwf	i2printf@c,w,c
  6602  000502  B4D8               	btfsc	status,2,c
  6603  000504  D032               	goto	i2l4072
  6604                           
  6605                           ;doprnt.c: 1306: if(val < dpowers[c])
  6606  000506  501C               	movf	i2printf@c,w,c
  6607  000508  0D02               	mullw	2
  6608  00050A  0EEA               	movlw	low _dpowers
  6609  00050C  24F3               	addwf	prodl,w,c
  6610  00050E  6EF6               	movwf	tblptrl,c
  6611  000510  0EFD               	movlw	high _dpowers
  6612  000512  20F4               	addwfc	prodh,w,c
  6613  000514  6EF7               	movwf	tblptrh,c
  6614  000516                     	if	0	;There are less than 3 active tblptr bytes
  6615  000516                     	endif
  6616  000516  0009               	tblrd		*+
  6617  000518  50F5               	movf	tablat,w,c
  6618  00051A  5C17               	subwf	i2printf@val,w,c
  6619  00051C  0009               	tblrd		*+
  6620  00051E  50F5               	movf	tablat,w,c
  6621  000520  5818               	subwfb	i2printf@val+1,w,c
  6622  000522  A0D8               	btfss	status,0,c
  6623  000524  D022               	goto	i2l4072
  6624                           
  6625                           ;doprnt.c: 1307: break;
  6626  000526  2A1C               	incf	i2printf@c,f,c
  6627  000528  D7EA               	goto	i2l4042
  6628  00052A                     i2l4054:
  6629                           
  6630                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6631  00052A  0E01               	movlw	1
  6632  00052C  6E1C               	movwf	i2printf@c,c
  6633  00052E                     i2l4056:
  6634  00052E  0E04               	movlw	4
  6635  000530  181C               	xorwf	i2printf@c,w,c
  6636  000532  B4D8               	btfsc	status,2,c
  6637  000534  D01A               	goto	i2l4072
  6638                           
  6639                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6640  000536  501C               	movf	i2printf@c,w,c
  6641  000538  0D02               	mullw	2
  6642  00053A  0EF4               	movlw	low _hexpowers
  6643  00053C  24F3               	addwf	prodl,w,c
  6644  00053E  6EF6               	movwf	tblptrl,c
  6645  000540  0EFD               	movlw	high _hexpowers
  6646  000542  20F4               	addwfc	prodh,w,c
  6647  000544  6EF7               	movwf	tblptrh,c
  6648  000546                     	if	0	;There are less than 3 active tblptr bytes
  6649  000546                     	endif
  6650  000546  0009               	tblrd		*+
  6651  000548  50F5               	movf	tablat,w,c
  6652  00054A  5C17               	subwf	i2printf@val,w,c
  6653  00054C  0009               	tblrd		*+
  6654  00054E  50F5               	movf	tablat,w,c
  6655  000550  5818               	subwfb	i2printf@val+1,w,c
  6656  000552  A0D8               	btfss	status,0,c
  6657  000554  D00A               	goto	i2l4072
  6658                           
  6659                           ;doprnt.c: 1318: break;
  6660  000556  2A1C               	incf	i2printf@c,f,c
  6661  000558  D7EA               	goto	i2l4056
  6662  00055A                     i2l4070:
  6663  00055A  5019               	movf	i2printf@flag,w,c
  6664  00055C  0B80               	andlw	128
  6665                           
  6666                           ; Switch size 1, requested type "space"
  6667                           ; Number of cases is 2, Range of values is 0 to 128
  6668                           ; switch strategies available:
  6669                           ; Name         Instructions Cycles
  6670                           ; simple_byte            7     4 (average)
  6671                           ;	Chosen strategy is simple_byte
  6672  00055E  0A00               	xorlw	0	; case 0
  6673  000560  B4D8               	btfsc	status,2,c
  6674  000562  D7CB               	goto	i2l4040
  6675  000564  0A80               	xorlw	128	; case 128
  6676  000566  B4D8               	btfsc	status,2,c
  6677  000568  D7E0               	goto	i2l4054
  6678  00056A                     i2l4072:
  6679                           
  6680                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6681  00056A  501A               	movf	i2printf@width,w,c
  6682  00056C  101B               	iorwf	i2printf@width+1,w,c
  6683  00056E  B4D8               	btfsc	status,2,c
  6684  000570  D009               	goto	i2l4078
  6685  000572  C019  F00F         	movff	i2printf@flag,??i2_printf
  6686  000576  0E03               	movlw	3
  6687  000578  160F               	andwf	??i2_printf,f,c
  6688  00057A  B4D8               	btfsc	status,2,c
  6689  00057C  D003               	goto	i2l4078
  6690                           
  6691                           ;doprnt.c: 1346: width--;
  6692  00057E  061A               	decf	i2printf@width,f,c
  6693  000580  A0D8               	btfss	status,0,c
  6694  000582  061B               	decf	i2printf@width+1,f,c
  6695  000584                     i2l4078:
  6696                           
  6697                           ;doprnt.c: 1381: if(width > c)
  6698  000584  0E80               	movlw	128
  6699  000586  BE1C               	btfsc	i2printf@c,7,c
  6700  000588  0E7F               	movlw	127
  6701  00058A  6E0F               	movwf	??i2_printf& (0+255),c
  6702  00058C  501A               	movf	i2printf@width,w,c
  6703  00058E  5C1C               	subwf	i2printf@c,w,c
  6704  000590  501B               	movf	i2printf@width+1,w,c
  6705  000592  0A80               	xorlw	128
  6706  000594  580F               	subwfb	??i2_printf& (0+255),w,c
  6707  000596  B0D8               	btfsc	status,0,c
  6708  000598  D007               	goto	i2l4082
  6709                           
  6710                           ;doprnt.c: 1382: width -= c;
  6711  00059A  501C               	movf	i2printf@c,w,c
  6712  00059C  5E1A               	subwf	i2printf@width,f,c
  6713  00059E  0E00               	movlw	0
  6714  0005A0  BE1C               	btfsc	i2printf@c,7,c
  6715  0005A2  0EFF               	movlw	255
  6716  0005A4  5A1B               	subwfb	i2printf@width+1,f,c
  6717  0005A6  D004               	goto	i2l4084
  6718  0005A8                     i2l4082:
  6719                           
  6720                           ;doprnt.c: 1383: else
  6721                           ;doprnt.c: 1384: width = 0;
  6722  0005A8  0E00               	movlw	0
  6723  0005AA  6E1B               	movwf	i2printf@width+1,c
  6724  0005AC  0E00               	movlw	0
  6725  0005AE  6E1A               	movwf	i2printf@width,c
  6726  0005B0                     i2l4084:
  6727                           
  6728                           ;doprnt.c: 1387: if(flag & 0x04) {
  6729  0005B0  A419               	btfss	i2printf@flag,2,c
  6730  0005B2  D014               	goto	i2l4096
  6731                           
  6732                           ;doprnt.c: 1392: if(flag & 0x03)
  6733  0005B4  C019  F00F         	movff	i2printf@flag,??i2_printf
  6734  0005B8  0E03               	movlw	3
  6735  0005BA  160F               	andwf	??i2_printf,f,c
  6736  0005BC  B4D8               	btfsc	status,2,c
  6737  0005BE  D003               	goto	i2l4090
  6738                           
  6739                           ;doprnt.c: 1393: (putch('-') );
  6740  0005C0  0E2D               	movlw	45
  6741  0005C2  EC55  F013         	call	i2_putch
  6742  0005C6                     i2l4090:
  6743                           
  6744                           ;doprnt.c: 1415: if(width)
  6745  0005C6  501A               	movf	i2printf@width,w,c
  6746  0005C8  101B               	iorwf	i2printf@width+1,w,c
  6747  0005CA  B4D8               	btfsc	status,2,c
  6748  0005CC  D01E               	goto	i2l4106
  6749                           
  6750                           ;doprnt.c: 1417: (putch('0') );
  6751                           
  6752                           ;doprnt.c: 1416: do
  6753  0005CE  0E30               	movlw	48
  6754  0005D0  EC55  F013         	call	i2_putch
  6755                           
  6756                           ;doprnt.c: 1418: while(--width);
  6757  0005D4  061A               	decf	i2printf@width,f,c
  6758  0005D6  A0D8               	btfss	status,0,c
  6759  0005D8  061B               	decf	i2printf@width+1,f,c
  6760  0005DA  D7F5               	goto	i2l4090
  6761  0005DC                     i2l4096:
  6762                           
  6763                           ;doprnt.c: 1422: {
  6764                           ;doprnt.c: 1424: if(width
  6765                           ;doprnt.c: 1428: )
  6766  0005DC  501A               	movf	i2printf@width,w,c
  6767  0005DE  101B               	iorwf	i2printf@width+1,w,c
  6768  0005E0  B4D8               	btfsc	status,2,c
  6769  0005E2  D00A               	goto	i2l4102
  6770  0005E4                     i2l4098:
  6771                           
  6772                           ;doprnt.c: 1430: (putch(' ') );
  6773  0005E4  0E20               	movlw	32
  6774  0005E6  EC55  F013         	call	i2_putch
  6775                           
  6776                           ;doprnt.c: 1431: while(--width);
  6777  0005EA  061A               	decf	i2printf@width,f,c
  6778  0005EC  A0D8               	btfss	status,0,c
  6779  0005EE  061B               	decf	i2printf@width+1,f,c
  6780  0005F0  501A               	movf	i2printf@width,w,c
  6781  0005F2  101B               	iorwf	i2printf@width+1,w,c
  6782  0005F4  A4D8               	btfss	status,2,c
  6783  0005F6  D7F6               	goto	i2l4098
  6784  0005F8                     i2l4102:
  6785                           
  6786                           ;doprnt.c: 1438: if(flag & 0x03)
  6787  0005F8  C019  F00F         	movff	i2printf@flag,??i2_printf
  6788  0005FC  0E03               	movlw	3
  6789  0005FE  160F               	andwf	??i2_printf,f,c
  6790  000600  B4D8               	btfsc	status,2,c
  6791  000602  D003               	goto	i2l4106
  6792                           
  6793                           ;doprnt.c: 1439: (putch('-') );
  6794  000604  0E2D               	movlw	45
  6795  000606  EC55  F013         	call	i2_putch
  6796  00060A                     i2l4106:
  6797                           
  6798                           ;doprnt.c: 1469: }
  6799                           ;doprnt.c: 1472: prec = c;
  6800  00060A  C01C  F016         	movff	i2printf@c,i2printf@prec
  6801                           
  6802                           ;doprnt.c: 1474: while(prec--) {
  6803  00060E  D050               	goto	i2l4120
  6804  000610                     i2l4108:
  6805                           
  6806                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6807  000610  5016               	movf	i2printf@prec,w,c
  6808  000612  0D02               	mullw	2
  6809  000614  0EEA               	movlw	low _dpowers
  6810  000616  24F3               	addwf	prodl,w,c
  6811  000618  6EF6               	movwf	tblptrl,c
  6812  00061A  0EFD               	movlw	high _dpowers
  6813  00061C  20F4               	addwfc	prodh,w,c
  6814  00061E  6EF7               	movwf	tblptrh,c
  6815  000620                     	if	0	;There are less than 3 active tblptr bytes
  6816  000620                     	endif
  6817  000620  0009               	tblrd		*+
  6818  000622  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6819  000626  000A               	tblrd		*-
  6820  000628  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6821  00062C  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6822  000630  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6823  000634  EC47  F011         	call	i2___lwdiv	;wreg free
  6824  000638  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6825  00063C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6826  000640  0E00               	movlw	0
  6827  000642  6E0B               	movwf	i2___lwmod@divisor+1,c
  6828  000644  0E0A               	movlw	10
  6829  000646  6E0A               	movwf	i2___lwmod@divisor,c
  6830  000648  ECBF  F011         	call	i2___lwmod	;wreg free
  6831  00064C  5008               	movf	?i2___lwmod,w,c
  6832  00064E  0F30               	addlw	48
  6833  000650  6E1C               	movwf	i2printf@c,c
  6834                           
  6835                           ;doprnt.c: 1491: break;
  6836  000652  D02B               	goto	i2l4118
  6837  000654                     i2l4110:
  6838                           
  6839                           ;doprnt.c: 1499: {
  6840                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6841  000654  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6842  000658  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6843  00065C  5016               	movf	i2printf@prec,w,c
  6844  00065E  0D02               	mullw	2
  6845  000660  0EF4               	movlw	low _hexpowers
  6846  000662  24F3               	addwf	prodl,w,c
  6847  000664  6EF6               	movwf	tblptrl,c
  6848  000666  0EFD               	movlw	high _hexpowers
  6849  000668  20F4               	addwfc	prodh,w,c
  6850  00066A  6EF7               	movwf	tblptrh,c
  6851  00066C                     	if	0	;There are less than 3 active tblptr bytes
  6852  00066C                     	endif
  6853  00066C  0009               	tblrd		*+
  6854  00066E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6855  000672  000A               	tblrd		*-
  6856  000674  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6857  000678  EC47  F011         	call	i2___lwdiv	;wreg free
  6858  00067C  5001               	movf	?i2___lwdiv,w,c
  6859  00067E  0B0F               	andlw	15
  6860  000680  6E13               	movwf	i2printf@idx,c
  6861                           
  6862                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6863  000682  5013               	movf	i2printf@idx,w,c
  6864  000684  0D01               	mullw	1
  6865  000686  0EF1               	movlw	low STR_25
  6866  000688  24F3               	addwf	prodl,w,c
  6867  00068A  6EF6               	movwf	tblptrl,c
  6868  00068C  0EFE               	movlw	high STR_25
  6869  00068E  20F4               	addwfc	prodh,w,c
  6870  000690  6EF7               	movwf	tblptrh,c
  6871  000692                     	if	0	;There are less than 3 active tblptr bytes
  6872  000692                     	endif
  6873  000692  0008               	tblrd		*
  6874  000694  CFF5 F01C          	movff	tablat,i2printf@c
  6875                           
  6876                           ;doprnt.c: 1523: }
  6877                           
  6878                           ;doprnt.c: 1508: }
  6879                           ;doprnt.c: 1510: break;
  6880  000698  D008               	goto	i2l4118
  6881  00069A                     i2l4116:
  6882  00069A  5019               	movf	i2printf@flag,w,c
  6883  00069C  0B80               	andlw	128
  6884                           
  6885                           ; Switch size 1, requested type "space"
  6886                           ; Number of cases is 2, Range of values is 0 to 128
  6887                           ; switch strategies available:
  6888                           ; Name         Instructions Cycles
  6889                           ; simple_byte            7     4 (average)
  6890                           ;	Chosen strategy is simple_byte
  6891  00069E  0A00               	xorlw	0	; case 0
  6892  0006A0  B4D8               	btfsc	status,2,c
  6893  0006A2  D7B6               	goto	i2l4108
  6894  0006A4  0A80               	xorlw	128	; case 128
  6895  0006A6  B4D8               	btfsc	status,2,c
  6896  0006A8  D7D5               	goto	i2l4110
  6897  0006AA                     i2l4118:
  6898                           
  6899                           ;doprnt.c: 1524: (putch(c) );
  6900  0006AA  501C               	movf	i2printf@c,w,c
  6901  0006AC  EC55  F013         	call	i2_putch
  6902  0006B0                     i2l4120:
  6903  0006B0  0616               	decf	i2printf@prec,f,c
  6904  0006B2  2816               	incf	i2printf@prec,w,c
  6905  0006B4  A4D8               	btfss	status,2,c
  6906  0006B6  D7F1               	goto	i2l4116
  6907  0006B8                     i2l4122:
  6908  0006B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6909  0006BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6910  0006C0  4A0D               	infsnz	i2printf@f,f,c
  6911  0006C2  2A0E               	incf	i2printf@f+1,f,c
  6912  0006C4                     	if	0	;tblptru may be non-zero
  6913  0006C4                     	endif
  6914  0006C4                     	if	0	;tblptru may be non-zero
  6915  0006C4                     	endif
  6916  0006C4  0008               	tblrd		*
  6917  0006C6  CFF5 F01C          	movff	tablat,i2printf@c
  6918  0006CA  501C               	movf	i2printf@c,w,c
  6919  0006CC  B4D8               	btfsc	status,2,c
  6920  0006CE  0012               	return	
  6921  0006D0  D67F               	goto	i2l3996
  6922  0006D2                     __end_ofi2_printf:
  6923                           	opt stack 0
  6924                           pclatu	equ	0xFFB
  6925                           pclath	equ	0xFFA
  6926                           tblptru	equ	0xFF8
  6927                           tblptrh	equ	0xFF7
  6928                           tblptrl	equ	0xFF6
  6929                           tablat	equ	0xFF5
  6930                           prodh	equ	0xFF4
  6931                           prodl	equ	0xFF3
  6932                           intcon	equ	0xFF2
  6933                           intcon2	equ	0xFF1
  6934                           intcon3	equ	0xFF0
  6935                           postinc0	equ	0xFEE
  6936                           fsr0h	equ	0xFEA
  6937                           fsr0l	equ	0xFE9
  6938                           wreg	equ	0xFE8
  6939                           fsr1h	equ	0xFE2
  6940                           fsr1l	equ	0xFE1
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           postdec2	equ	0xFDD
  6944                           fsr2h	equ	0xFDA
  6945                           fsr2l	equ	0xFD9
  6946                           status	equ	0xFD8
  6947                           
  6948 ;; *************** function i2_putch *****************
  6949 ;; Defined at:
  6950 ;;		line 31 in file "lcd.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  data            1    wreg     unsigned char 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  data            1    2[COMRAM] unsigned char 
  6955 ;; Return value:  Size  Location     Type
  6956 ;;                  1    wreg      void 
  6957 ;; Registers used:
  6958 ;;		wreg, status,2, status,0, cstack
  6959 ;; Tracked objects:
  6960 ;;		On entry : 0/0
  6961 ;;		On exit  : 0/0
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;Total ram usage:        1 bytes
  6969 ;; Hardware stack levels used:    1
  6970 ;; Hardware stack levels required when called:    1
  6971 ;; This function calls:
  6972 ;;		i2_lcdNibble
  6973 ;; This function is called by:
  6974 ;;		i2_printf
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           	psect	text30
  6979  0026AA                     __ptext30:
  6980                           	opt stack 0
  6981  0026AA                     i2_putch:
  6982                           	opt stack 23
  6983                           
  6984                           ;incstack = 0
  6985                           ;i2putch@data stored from wreg
  6986  0026AA  6E03               	movwf	i2putch@data,c
  6987                           
  6988                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6989  0026AC  848C               	bsf	3980,2,c	;volatile
  6990                           
  6991                           ;lcd.c: 33: lcdNibble(data);
  6992  0026AE  5003               	movf	i2putch@data,w,c
  6993  0026B0  EC98  F011         	call	i2_lcdNibble
  6994  0026B4  0012               	return		;funcret
  6995  0026B6                     __end_ofi2_putch:
  6996                           	opt stack 0
  6997                           pclatu	equ	0xFFB
  6998                           pclath	equ	0xFFA
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           prodh	equ	0xFF4
  7004                           prodl	equ	0xFF3
  7005                           intcon	equ	0xFF2
  7006                           intcon2	equ	0xFF1
  7007                           intcon3	equ	0xFF0
  7008                           postinc0	equ	0xFEE
  7009                           fsr0h	equ	0xFEA
  7010                           fsr0l	equ	0xFE9
  7011                           wreg	equ	0xFE8
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function i2_isdigit *****************
  7022 ;; Defined at:
  7023 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  c               1    wreg     unsigned char 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  c               1    2[COMRAM] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;		None               void
  7030 ;; Registers used:
  7031 ;;		wreg, status,2, status,0
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;Total ram usage:        3 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		i2_printf
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text31
  7051  002614                     __ptext31:
  7052                           	opt stack 0
  7053  002614                     i2_isdigit:
  7054                           	opt stack 24
  7055                           
  7056                           ;incstack = 0
  7057                           ;i2isdigit@c stored from wreg
  7058  002614  6E03               	movwf	i2isdigit@c,c
  7059  002616  0E00               	movlw	0
  7060  002618  6E02               	movwf	i2_isdigit$699,c
  7061  00261A  0E3A               	movlw	58
  7062  00261C  6003               	cpfslt	i2isdigit@c,c
  7063  00261E  D005               	goto	i2l3704
  7064  002620  0E2F               	movlw	47
  7065  002622  6403               	cpfsgt	i2isdigit@c,c
  7066  002624  D002               	goto	i2l3704
  7067  002626  0E01               	movlw	1
  7068  002628  6E02               	movwf	i2_isdigit$699,c
  7069  00262A                     i2l3704:
  7070  00262A  C002  F001         	movff	i2_isdigit$699,??i2_isdigit
  7071  00262E  3001               	rrcf	??i2_isdigit,w,c
  7072  002630  0012               	return	
  7073  002632                     __end_ofi2_isdigit:
  7074                           	opt stack 0
  7075                           pclatu	equ	0xFFB
  7076                           pclath	equ	0xFFA
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           intcon2	equ	0xFF1
  7085                           intcon3	equ	0xFF0
  7086                           postinc0	equ	0xFEE
  7087                           fsr0h	equ	0xFEA
  7088                           fsr0l	equ	0xFE9
  7089                           wreg	equ	0xFE8
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function i2___lwmod *****************
  7100 ;; Defined at:
  7101 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  dividend        2    7[COMRAM] unsigned int 
  7104 ;;  divisor         2    9[COMRAM] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;                  2    7[COMRAM] unsigned int 
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;Total ram usage:        5 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		i2_printf
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text32
  7130  00237E                     __ptext32:
  7131                           	opt stack 0
  7132  00237E                     i2___lwmod:
  7133                           	opt stack 24
  7134                           
  7135                           ;incstack = 0
  7136  00237E  500A               	movf	i2___lwmod@divisor,w,c
  7137  002380  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7138  002382  B4D8               	btfsc	status,2,c
  7139  002384  D018               	goto	i2l832
  7140  002386  0E01               	movlw	1
  7141  002388  6E0C               	movwf	i2___lwmod@counter,c
  7142  00238A  D004               	goto	i2l3736
  7143  00238C                     i2l3734:
  7144  00238C  90D8               	bcf	status,0,c
  7145  00238E  360A               	rlcf	i2___lwmod@divisor,f,c
  7146  002390  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7147  002392  2A0C               	incf	i2___lwmod@counter,f,c
  7148  002394                     i2l3736:
  7149  002394  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7150  002396  D7FA               	goto	i2l3734
  7151  002398                     i2l3738:
  7152  002398  500A               	movf	i2___lwmod@divisor,w,c
  7153  00239A  5C08               	subwf	i2___lwmod@dividend,w,c
  7154  00239C  500B               	movf	i2___lwmod@divisor+1,w,c
  7155  00239E  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7156  0023A0  A0D8               	btfss	status,0,c
  7157  0023A2  D004               	goto	i2l3742
  7158  0023A4  500A               	movf	i2___lwmod@divisor,w,c
  7159  0023A6  5E08               	subwf	i2___lwmod@dividend,f,c
  7160  0023A8  500B               	movf	i2___lwmod@divisor+1,w,c
  7161  0023AA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7162  0023AC                     i2l3742:
  7163  0023AC  90D8               	bcf	status,0,c
  7164  0023AE  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7165  0023B0  320A               	rrcf	i2___lwmod@divisor,f,c
  7166  0023B2  2E0C               	decfsz	i2___lwmod@counter,f,c
  7167  0023B4  D7F1               	goto	i2l3738
  7168  0023B6                     i2l832:
  7169  0023B6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7170  0023BA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7171  0023BE  0012               	return		;funcret
  7172  0023C0                     __end_ofi2___lwmod:
  7173                           	opt stack 0
  7174                           pclatu	equ	0xFFB
  7175                           pclath	equ	0xFFA
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon2	equ	0xFF1
  7184                           intcon3	equ	0xFF0
  7185                           postinc0	equ	0xFEE
  7186                           fsr0h	equ	0xFEA
  7187                           fsr0l	equ	0xFE9
  7188                           wreg	equ	0xFE8
  7189                           fsr1h	equ	0xFE2
  7190                           fsr1l	equ	0xFE1
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           fsr2h	equ	0xFDA
  7195                           fsr2l	equ	0xFD9
  7196                           status	equ	0xFD8
  7197                           
  7198 ;; *************** function i2___lwdiv *****************
  7199 ;; Defined at:
  7200 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  dividend        2    0[COMRAM] unsigned int 
  7203 ;;  divisor         2    2[COMRAM] unsigned int 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7206 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7207 ;; Return value:  Size  Location     Type
  7208 ;;                  2    0[COMRAM] unsigned int 
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, status,0
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;Total ram usage:        7 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		i2_printf
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text33
  7230  00228E                     __ptext33:
  7231                           	opt stack 0
  7232  00228E                     i2___lwdiv:
  7233                           	opt stack 24
  7234                           
  7235                           ;incstack = 0
  7236  00228E  0E00               	movlw	0
  7237  002290  6E06               	movwf	i2___lwdiv@quotient+1,c
  7238  002292  0E00               	movlw	0
  7239  002294  6E05               	movwf	i2___lwdiv@quotient,c
  7240  002296  5003               	movf	i2___lwdiv@divisor,w,c
  7241  002298  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7242  00229A  B4D8               	btfsc	status,2,c
  7243  00229C  D01C               	goto	i2l822
  7244  00229E  0E01               	movlw	1
  7245  0022A0  6E07               	movwf	i2___lwdiv@counter,c
  7246  0022A2  D004               	goto	i2l3716
  7247  0022A4                     i2l3714:
  7248  0022A4  90D8               	bcf	status,0,c
  7249  0022A6  3603               	rlcf	i2___lwdiv@divisor,f,c
  7250  0022A8  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7251  0022AA  2A07               	incf	i2___lwdiv@counter,f,c
  7252  0022AC                     i2l3716:
  7253  0022AC  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7254  0022AE  D7FA               	goto	i2l3714
  7255  0022B0                     i2l3718:
  7256  0022B0  90D8               	bcf	status,0,c
  7257  0022B2  3605               	rlcf	i2___lwdiv@quotient,f,c
  7258  0022B4  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7259  0022B6  5003               	movf	i2___lwdiv@divisor,w,c
  7260  0022B8  5C01               	subwf	i2___lwdiv@dividend,w,c
  7261  0022BA  5004               	movf	i2___lwdiv@divisor+1,w,c
  7262  0022BC  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7263  0022BE  A0D8               	btfss	status,0,c
  7264  0022C0  D005               	goto	i2l3726
  7265  0022C2  5003               	movf	i2___lwdiv@divisor,w,c
  7266  0022C4  5E01               	subwf	i2___lwdiv@dividend,f,c
  7267  0022C6  5004               	movf	i2___lwdiv@divisor+1,w,c
  7268  0022C8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7269  0022CA  8005               	bsf	i2___lwdiv@quotient,0,c
  7270  0022CC                     i2l3726:
  7271  0022CC  90D8               	bcf	status,0,c
  7272  0022CE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7273  0022D0  3203               	rrcf	i2___lwdiv@divisor,f,c
  7274  0022D2  2E07               	decfsz	i2___lwdiv@counter,f,c
  7275  0022D4  D7ED               	goto	i2l3718
  7276  0022D6                     i2l822:
  7277  0022D6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7278  0022DA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7279  0022DE  0012               	return		;funcret
  7280  0022E0                     __end_ofi2___lwdiv:
  7281                           	opt stack 0
  7282                           pclatu	equ	0xFFB
  7283                           pclath	equ	0xFFA
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           intcon2	equ	0xFF1
  7292                           intcon3	equ	0xFF0
  7293                           postinc0	equ	0xFEE
  7294                           fsr0h	equ	0xFEA
  7295                           fsr0l	equ	0xFE9
  7296                           wreg	equ	0xFE8
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function i2_lcdInst *****************
  7307 ;; Defined at:
  7308 ;;		line 26 in file "lcd.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  data            1    wreg     unsigned char 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  data            1    2[COMRAM] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;Total ram usage:        1 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    1
  7329 ;; This function calls:
  7330 ;;		i2_lcdNibble
  7331 ;; This function is called by:
  7332 ;;		_isr
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text34
  7337  0026B6                     __ptext34:
  7338                           	opt stack 0
  7339  0026B6                     i2_lcdInst:
  7340                           	opt stack 24
  7341                           
  7342                           ;incstack = 0
  7343                           ;i2lcdInst@data stored from wreg
  7344  0026B6  6E03               	movwf	i2lcdInst@data,c
  7345                           
  7346                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  7347  0026B8  948C               	bcf	3980,2,c	;volatile
  7348                           
  7349                           ;lcd.c: 28: lcdNibble(data);
  7350  0026BA  5003               	movf	i2lcdInst@data,w,c
  7351  0026BC  EC98  F011         	call	i2_lcdNibble
  7352  0026C0  0012               	return		;funcret
  7353  0026C2                     __end_ofi2_lcdInst:
  7354                           	opt stack 0
  7355                           pclatu	equ	0xFFB
  7356                           pclath	equ	0xFFA
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           intcon2	equ	0xFF1
  7365                           intcon3	equ	0xFF0
  7366                           postinc0	equ	0xFEE
  7367                           fsr0h	equ	0xFEA
  7368                           fsr0l	equ	0xFE9
  7369                           wreg	equ	0xFE8
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function i2_lcdNibble *****************
  7380 ;; Defined at:
  7381 ;;		line 36 in file "lcd.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  data            1    wreg     unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  data            1    1[COMRAM] unsigned char 
  7386 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;Total ram usage:        2 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; This function calls:
  7403 ;;		Nothing
  7404 ;; This function is called by:
  7405 ;;		i2_lcdInst
  7406 ;;		i2_putch
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text35
  7411  002330                     __ptext35:
  7412                           	opt stack 0
  7413  002330                     i2_lcdNibble:
  7414                           	opt stack 23
  7415                           
  7416                           ;incstack = 0
  7417                           ;i2lcdNibble@data stored from wreg
  7418  002330  6E02               	movwf	i2lcdNibble@data,c
  7419                           
  7420                           ;lcd.c: 38: char temp = data & 0xF0;
  7421  002332  5002               	movf	i2lcdNibble@data,w,c
  7422  002334  0BF0               	andlw	240
  7423  002336  6E01               	movwf	i2lcdNibble@temp,c
  7424                           
  7425                           ;lcd.c: 39: LATD = LATD & 0x0F;
  7426  002338  508C               	movf	3980,w,c	;volatile
  7427  00233A  0B0F               	andlw	15
  7428  00233C  6E8C               	movwf	3980,c	;volatile
  7429                           
  7430                           ;lcd.c: 40: LATD = temp | LATD;
  7431  00233E  5001               	movf	i2lcdNibble@temp,w,c
  7432  002340  108C               	iorwf	3980,w,c	;volatile
  7433  002342  6E8C               	movwf	3980,c	;volatile
  7434                           
  7435                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7436  002344  968C               	bcf	3980,3,c	;volatile
  7437                           
  7438                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7439  002346  0E19               	movlw	25
  7440  002348                     i2u408_47:
  7441  002348  2EE8               	decfsz	wreg,f,c
  7442  00234A  D7FE               	bra	i2u408_47
  7443                           
  7444                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  7445  00234C  868C               	bsf	3980,3,c	;volatile
  7446                           
  7447                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7448  00234E  0E19               	movlw	25
  7449  002350                     i2u409_47:
  7450  002350  2EE8               	decfsz	wreg,f,c
  7451  002352  D7FE               	bra	i2u409_47
  7452                           
  7453                           ;lcd.c: 47: data = data << 4;
  7454  002354  3802               	swapf	i2lcdNibble@data,w,c
  7455  002356  0BF0               	andlw	240
  7456  002358  6E02               	movwf	i2lcdNibble@data,c
  7457                           
  7458                           ;lcd.c: 49: temp = data & 0xF0;
  7459  00235A  5002               	movf	i2lcdNibble@data,w,c
  7460  00235C  0BF0               	andlw	240
  7461  00235E  6E01               	movwf	i2lcdNibble@temp,c
  7462                           
  7463                           ;lcd.c: 50: LATD = LATD & 0x0F;
  7464  002360  508C               	movf	3980,w,c	;volatile
  7465  002362  0B0F               	andlw	15
  7466  002364  6E8C               	movwf	3980,c	;volatile
  7467                           
  7468                           ;lcd.c: 51: LATD = temp | LATD;
  7469  002366  5001               	movf	i2lcdNibble@temp,w,c
  7470  002368  108C               	iorwf	3980,w,c	;volatile
  7471  00236A  6E8C               	movwf	3980,c	;volatile
  7472                           
  7473                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  7474  00236C  968C               	bcf	3980,3,c	;volatile
  7475                           
  7476                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7477  00236E  0E19               	movlw	25
  7478  002370                     i2u410_47:
  7479  002370  2EE8               	decfsz	wreg,f,c
  7480  002372  D7FE               	bra	i2u410_47
  7481                           
  7482                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  7483  002374  868C               	bsf	3980,3,c	;volatile
  7484                           
  7485                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  7486  002376  0E19               	movlw	25
  7487  002378                     i2u411_47:
  7488  002378  2EE8               	decfsz	wreg,f,c
  7489  00237A  D7FE               	bra	i2u411_47
  7490  00237C  0012               	return		;funcret
  7491  00237E                     __end_ofi2_lcdNibble:
  7492                           	opt stack 0
  7493                           pclatu	equ	0xFFB
  7494                           pclath	equ	0xFFA
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           intcon2	equ	0xFF1
  7503                           intcon3	equ	0xFF0
  7504                           postinc0	equ	0xFEE
  7505                           fsr0h	equ	0xFEA
  7506                           fsr0l	equ	0xFE9
  7507                           wreg	equ	0xFE8
  7508                           fsr1h	equ	0xFE2
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           postdec2	equ	0xFDD
  7513                           fsr2h	equ	0xFDA
  7514                           fsr2l	equ	0xFD9
  7515                           status	equ	0xFD8
  7516                           
  7517 ;; *************** function _servo_rotate0 *****************
  7518 ;; Defined at:
  7519 ;;		line 378 in file "main.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  degree          2   14[COMRAM] int 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  j               2   22[COMRAM] unsigned int 
  7524 ;;  i               2   20[COMRAM] unsigned int 
  7525 ;;  duty            2   18[COMRAM] int 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  1    wreg      void 
  7528 ;; Registers used:
  7529 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;Total ram usage:       10 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    1
  7542 ;; This function calls:
  7543 ;;		___awdiv
  7544 ;;		i2___wmul
  7545 ;; This function is called by:
  7546 ;;		_isr
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           	psect	text36
  7551  001CC6                     __ptext36:
  7552                           	opt stack 0
  7553  001CC6                     _servo_rotate0:
  7554                           	opt stack 24
  7555                           
  7556                           ;main.c: 379: unsigned int i;
  7557                           ;main.c: 380: unsigned int j;
  7558                           ;main.c: 381: int duty = degree*10/90;
  7559                           
  7560                           ;incstack = 0
  7561  001CC6  C00F  F001         	movff	servo_rotate0@degree,i2___wmul@multiplier
  7562  001CCA  C010  F002         	movff	servo_rotate0@degree+1,i2___wmul@multiplier+1
  7563  001CCE  0E00               	movlw	0
  7564  001CD0  6E04               	movwf	i2___wmul@multiplicand+1,c
  7565  001CD2  0E0A               	movlw	10
  7566  001CD4  6E03               	movwf	i2___wmul@multiplicand,c
  7567  001CD6  ECE5  F012         	call	i2___wmul	;wreg free
  7568  001CDA  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  7569  001CDE  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  7570  001CE2  0E00               	movlw	0
  7571  001CE4  6E0A               	movwf	___awdiv@divisor+1,c
  7572  001CE6  0E5A               	movlw	90
  7573  001CE8  6E09               	movwf	___awdiv@divisor,c
  7574  001CEA  EC9A  F00F         	call	___awdiv	;wreg free
  7575  001CEE  C007  F013         	movff	?___awdiv,servo_rotate0@duty
  7576  001CF2  C008  F014         	movff	?___awdiv+1,servo_rotate0@duty+1
  7577                           
  7578                           ;main.c: 382: for (i=0; i<50; i++) {
  7579  001CF6  0E00               	movlw	0
  7580  001CF8  6E16               	movwf	servo_rotate0@i+1,c
  7581  001CFA  0E00               	movlw	0
  7582  001CFC  6E15               	movwf	servo_rotate0@i,c
  7583  001CFE                     i2l3942:
  7584  001CFE  5016               	movf	servo_rotate0@i+1,w,c
  7585  001D00  E137               	bnz	i2l318
  7586  001D02  0E32               	movlw	50
  7587  001D04  5C15               	subwf	servo_rotate0@i,w,c
  7588  001D06  B0D8               	btfsc	status,0,c
  7589  001D08  0012               	return	
  7590                           
  7591                           ;main.c: 383: PORTCbits.RC0 = 1;
  7592  001D0A  8082               	bsf	3970,0,c	;volatile
  7593                           
  7594                           ;main.c: 384: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  7595  001D0C  0E00               	movlw	0
  7596  001D0E  6E18               	movwf	servo_rotate0@j+1,c
  7597  001D10  0E00               	movlw	0
  7598  001D12  6E17               	movwf	servo_rotate0@j,c
  7599  001D14  D006               	goto	i2l312
  7600  001D16                     i2l3948:
  7601  001D16  0E53               	movlw	83
  7602  001D18                     i2u412_47:
  7603  001D18  2EE8               	decfsz	wreg,f,c
  7604  001D1A  D7FE               	bra	i2u412_47
  7605  001D1C  F000               	nop	
  7606  001D1E  4A17               	infsnz	servo_rotate0@j,f,c
  7607  001D20  2A18               	incf	servo_rotate0@j+1,f,c
  7608  001D22                     i2l312:
  7609  001D22  5013               	movf	servo_rotate0@duty,w,c
  7610  001D24  5C17               	subwf	servo_rotate0@j,w,c
  7611  001D26  5014               	movf	servo_rotate0@duty+1,w,c
  7612  001D28  5818               	subwfb	servo_rotate0@j+1,w,c
  7613  001D2A  A0D8               	btfss	status,0,c
  7614  001D2C  D7F4               	goto	i2l3948
  7615                           
  7616                           ;main.c: 385: PORTCbits.RC0 = 0;
  7617  001D2E  9082               	bcf	3970,0,c	;volatile
  7618                           
  7619                           ;main.c: 386: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  7620  001D30  0E00               	movlw	0
  7621  001D32  6E18               	movwf	servo_rotate0@j+1,c
  7622  001D34  0E00               	movlw	0
  7623  001D36  6E17               	movwf	servo_rotate0@j,c
  7624  001D38  D006               	goto	i2l315
  7625  001D3A                     i2l3954:
  7626  001D3A  0E53               	movlw	83
  7627  001D3C                     i2u413_47:
  7628  001D3C  2EE8               	decfsz	wreg,f,c
  7629  001D3E  D7FE               	bra	i2u413_47
  7630  001D40  F000               	nop	
  7631  001D42  4A17               	infsnz	servo_rotate0@j,f,c
  7632  001D44  2A18               	incf	servo_rotate0@j+1,f,c
  7633  001D46                     i2l315:
  7634  001D46  C013  F011         	movff	servo_rotate0@duty,??_servo_rotate0
  7635  001D4A  C014  F012         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  7636  001D4E  1E11               	comf	??_servo_rotate0,f,c
  7637  001D50  1E12               	comf	??_servo_rotate0+1,f,c
  7638  001D52  4A11               	infsnz	??_servo_rotate0,f,c
  7639  001D54  2A12               	incf	??_servo_rotate0+1,f,c
  7640  001D56  0EC8               	movlw	200
  7641  001D58  2611               	addwf	??_servo_rotate0,f,c
  7642  001D5A  0E00               	movlw	0
  7643  001D5C  2212               	addwfc	??_servo_rotate0+1,f,c
  7644  001D5E  5011               	movf	??_servo_rotate0,w,c
  7645  001D60  5C17               	subwf	servo_rotate0@j,w,c
  7646  001D62  5012               	movf	??_servo_rotate0+1,w,c
  7647  001D64  5818               	subwfb	servo_rotate0@j+1,w,c
  7648  001D66  A0D8               	btfss	status,0,c
  7649  001D68  D7E8               	goto	i2l3954
  7650  001D6A  4A15               	infsnz	servo_rotate0@i,f,c
  7651  001D6C  2A16               	incf	servo_rotate0@i+1,f,c
  7652  001D6E  D7C7               	goto	i2l3942
  7653  001D70                     i2l318:
  7654  001D70  0012               	return		;funcret
  7655  001D72                     __end_of_servo_rotate0:
  7656                           	opt stack 0
  7657                           pclatu	equ	0xFFB
  7658                           pclath	equ	0xFFA
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon2	equ	0xFF1
  7667                           intcon3	equ	0xFF0
  7668                           postinc0	equ	0xFEE
  7669                           fsr0h	equ	0xFEA
  7670                           fsr0l	equ	0xFE9
  7671                           wreg	equ	0xFE8
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _read_time *****************
  7682 ;; Defined at:
  7683 ;;		line 272 in file "main.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;		None
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  i               1    3[COMRAM] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        1 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    2
  7704 ;; This function calls:
  7705 ;;		i2_I2C_Master_Read
  7706 ;;		i2_I2C_Master_Start
  7707 ;;		i2_I2C_Master_Stop
  7708 ;;		i2_I2C_Master_Write
  7709 ;; This function is called by:
  7710 ;;		_isr
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           	psect	text37
  7715  0020A8                     __ptext37:
  7716                           	opt stack 0
  7717  0020A8                     _read_time:
  7718                           	opt stack 23
  7719                           
  7720                           ;main.c: 274: I2C_Master_Start();
  7721                           
  7722                           ;incstack = 0
  7723  0020A8  EC77  F013         	call	i2_I2C_Master_Start	;wreg free
  7724                           
  7725                           ;main.c: 275: I2C_Master_Write(0b11010000);
  7726  0020AC  0E00               	movlw	0
  7727  0020AE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7728  0020B0  0ED0               	movlw	208
  7729  0020B2  6E02               	movwf	i2I2C_Master_Write@d,c
  7730  0020B4  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  7731                           
  7732                           ;main.c: 276: I2C_Master_Write(0x00);
  7733  0020B8  0E00               	movlw	0
  7734  0020BA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7735  0020BC  0E00               	movlw	0
  7736  0020BE  6E02               	movwf	i2I2C_Master_Write@d,c
  7737  0020C0  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  7738                           
  7739                           ;main.c: 277: I2C_Master_Stop();
  7740  0020C4  EC73  F013         	call	i2_I2C_Master_Stop	;wreg free
  7741                           
  7742                           ;main.c: 280: I2C_Master_Start();
  7743  0020C8  EC77  F013         	call	i2_I2C_Master_Start	;wreg free
  7744                           
  7745                           ;main.c: 281: I2C_Master_Write(0b11010001);
  7746  0020CC  0E00               	movlw	0
  7747  0020CE  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7748  0020D0  0ED1               	movlw	209
  7749  0020D2  6E02               	movwf	i2I2C_Master_Write@d,c
  7750  0020D4  EC66  F013         	call	i2_I2C_Master_Write	;wreg free
  7751                           
  7752                           ;main.c: 282: for(unsigned char i=0;i<0x06;i++){
  7753  0020D8  0E00               	movlw	0
  7754  0020DA  6E04               	movwf	read_time@i,c
  7755  0020DC                     i2l3906:
  7756  0020DC  0E05               	movlw	5
  7757  0020DE  6404               	cpfsgt	read_time@i,c
  7758  0020E0  D001               	goto	i2l3910
  7759  0020E2  D00E               	goto	i2l3916
  7760  0020E4                     i2l3910:
  7761                           
  7762                           ;main.c: 283: time[i] = I2C_Master_Read(1);
  7763  0020E4  5004               	movf	read_time@i,w,c
  7764  0020E6  0D01               	mullw	1
  7765  0020E8  0EBE               	movlw	low _time
  7766  0020EA  24F3               	addwf	prodl,w,c
  7767  0020EC  6ED9               	movwf	fsr2l,c
  7768  0020EE  0E00               	movlw	high _time
  7769  0020F0  20F4               	addwfc	prodh,w,c
  7770  0020F2  6EDA               	movwf	fsr2h,c
  7771  0020F4  0E01               	movlw	1
  7772  0020F6  ECD2  F012         	call	i2_I2C_Master_Read
  7773  0020FA  6EDF               	movwf	indf2,c
  7774  0020FC  2A04               	incf	read_time@i,f,c
  7775  0020FE  D7EE               	goto	i2l3906
  7776  002100                     i2l3916:
  7777                           
  7778                           ;main.c: 284: }
  7779                           ;main.c: 285: time[6] = I2C_Master_Read(0);
  7780  002100  0E00               	movlw	0
  7781  002102  ECD2  F012         	call	i2_I2C_Master_Read
  7782  002106  0100               	movlb	0	; () banked
  7783  002108  6FC4               	movwf	(_time+6)& (0+255),b
  7784                           
  7785                           ;main.c: 286: I2C_Master_Stop();
  7786  00210A  EC73  F013         	call	i2_I2C_Master_Stop	;wreg free
  7787  00210E  0012               	return	
  7788  002110                     __end_of_read_time:
  7789                           	opt stack 0
  7790                           pclatu	equ	0xFFB
  7791                           pclath	equ	0xFFA
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           intcon2	equ	0xFF1
  7800                           intcon3	equ	0xFF0
  7801                           postinc0	equ	0xFEE
  7802                           fsr0h	equ	0xFEA
  7803                           fsr0l	equ	0xFE9
  7804                           wreg	equ	0xFE8
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           fsr2h	equ	0xFDA
  7811                           fsr2l	equ	0xFD9
  7812                           status	equ	0xFD8
  7813                           
  7814 ;; *************** function i2_I2C_Master_Write *****************
  7815 ;; Defined at:
  7816 ;;		line 47 in file "I2C.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  d               2    1[COMRAM] unsigned int 
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;		None
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      void 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;Total ram usage:        2 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    1
  7837 ;; This function calls:
  7838 ;;		i2_I2C_Master_Wait
  7839 ;; This function is called by:
  7840 ;;		_read_time
  7841 ;;		i2_read_colorsensor
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text38
  7846  0026CC                     __ptext38:
  7847                           	opt stack 0
  7848  0026CC                     i2_I2C_Master_Write:
  7849                           	opt stack 23
  7850                           
  7851                           ;I2C.c: 49: I2C_Master_Wait();
  7852                           
  7853                           ;incstack = 0
  7854  0026CC  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  7855                           
  7856                           ;I2C.c: 50: SSPBUF = d;
  7857  0026D0  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  7858  0026D4  0012               	return		;funcret
  7859  0026D6                     __end_ofi2_I2C_Master_Write:
  7860                           	opt stack 0
  7861                           pclatu	equ	0xFFB
  7862                           pclath	equ	0xFFA
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           intcon2	equ	0xFF1
  7871                           intcon3	equ	0xFF0
  7872                           postinc0	equ	0xFEE
  7873                           fsr0h	equ	0xFEA
  7874                           fsr0l	equ	0xFE9
  7875                           wreg	equ	0xFE8
  7876                           fsr1h	equ	0xFE2
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function i2_I2C_Master_Stop *****************
  7886 ;; Defined at:
  7887 ;;		line 41 in file "I2C.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    1
  7908 ;; This function calls:
  7909 ;;		i2_I2C_Master_Wait
  7910 ;; This function is called by:
  7911 ;;		_read_time
  7912 ;;		i2_read_colorsensor
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text39
  7917  0026E6                     __ptext39:
  7918                           	opt stack 0
  7919  0026E6                     i2_I2C_Master_Stop:
  7920                           	opt stack 23
  7921                           
  7922                           ;I2C.c: 43: I2C_Master_Wait();
  7923                           
  7924                           ;incstack = 0
  7925  0026E6  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  7926                           
  7927                           ;I2C.c: 44: PEN = 1;
  7928  0026EA  84C5               	bsf	4037,2,c	;volatile
  7929  0026EC  0012               	return		;funcret
  7930  0026EE                     __end_ofi2_I2C_Master_Stop:
  7931                           	opt stack 0
  7932                           pclatu	equ	0xFFB
  7933                           pclath	equ	0xFFA
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           fsr0h	equ	0xFEA
  7945                           fsr0l	equ	0xFE9
  7946                           wreg	equ	0xFE8
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function i2_I2C_Master_Start *****************
  7957 ;; Defined at:
  7958 ;;		line 29 in file "I2C.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;		None
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;		None
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg, status,2, status,0, cstack
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;Total ram usage:        0 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    1
  7979 ;; This function calls:
  7980 ;;		i2_I2C_Master_Wait
  7981 ;; This function is called by:
  7982 ;;		_read_time
  7983 ;;		i2_read_colorsensor
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text40
  7988  0026EE                     __ptext40:
  7989                           	opt stack 0
  7990  0026EE                     i2_I2C_Master_Start:
  7991                           	opt stack 23
  7992                           
  7993                           ;I2C.c: 31: I2C_Master_Wait();
  7994                           
  7995                           ;incstack = 0
  7996  0026EE  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  7997                           
  7998                           ;I2C.c: 32: SEN = 1;
  7999  0026F2  80C5               	bsf	4037,0,c	;volatile
  8000  0026F4  0012               	return		;funcret
  8001  0026F6                     __end_ofi2_I2C_Master_Start:
  8002                           	opt stack 0
  8003                           pclatu	equ	0xFFB
  8004                           pclath	equ	0xFFA
  8005                           tblptru	equ	0xFF8
  8006                           tblptrh	equ	0xFF7
  8007                           tblptrl	equ	0xFF6
  8008                           tablat	equ	0xFF5
  8009                           prodh	equ	0xFF4
  8010                           prodl	equ	0xFF3
  8011                           intcon	equ	0xFF2
  8012                           intcon2	equ	0xFF1
  8013                           intcon3	equ	0xFF0
  8014                           postinc0	equ	0xFEE
  8015                           fsr0h	equ	0xFEA
  8016                           fsr0l	equ	0xFE9
  8017                           wreg	equ	0xFE8
  8018                           fsr1h	equ	0xFE2
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function i2_I2C_Master_Read *****************
  8028 ;; Defined at:
  8029 ;;		line 61 in file "I2C.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  a               1    wreg     unsigned char 
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;  a               1    1[COMRAM] unsigned char 
  8034 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      unsigned char 
  8037 ;; Registers used:
  8038 ;;		wreg, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;Total ram usage:        2 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    1
  8051 ;; This function calls:
  8052 ;;		i2_I2C_Master_Wait
  8053 ;; This function is called by:
  8054 ;;		_read_time
  8055 ;;		i2_read_colorsensor
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text41
  8060  0025A4                     __ptext41:
  8061                           	opt stack 0
  8062  0025A4                     i2_I2C_Master_Read:
  8063                           	opt stack 23
  8064                           
  8065                           ;incstack = 0
  8066                           ;i2I2C_Master_Read@a stored from wreg
  8067  0025A4  6E02               	movwf	i2I2C_Master_Read@a,c
  8068                           
  8069                           ;I2C.c: 63: unsigned char temp;
  8070                           ;I2C.c: 64: I2C_Master_Wait();
  8071  0025A6  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  8072                           
  8073                           ;I2C.c: 65: RCEN = 1;
  8074  0025AA  86C5               	bsf	4037,3,c	;volatile
  8075                           
  8076                           ;I2C.c: 66: I2C_Master_Wait();
  8077  0025AC  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  8078                           
  8079                           ;I2C.c: 67: temp = SSPBUF;
  8080  0025B0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  8081                           
  8082                           ;I2C.c: 68: I2C_Master_Wait();
  8083  0025B4  EC3C  F013         	call	i2_I2C_Master_Wait	;wreg free
  8084                           
  8085                           ;I2C.c: 69: ACKDT = (a)?0:1;
  8086  0025B8  5002               	movf	i2I2C_Master_Read@a,w,c
  8087  0025BA  A4D8               	btfss	status,2,c
  8088  0025BC  D002               	goto	i2u340_40
  8089  0025BE  8AC5               	bsf	4037,5,c	;volatile
  8090  0025C0  D001               	goto	i2l3686
  8091  0025C2                     i2u340_40:
  8092  0025C2  9AC5               	bcf	4037,5,c	;volatile
  8093  0025C4                     i2l3686:
  8094                           
  8095                           ;I2C.c: 70: ACKEN = 1;
  8096  0025C4  88C5               	bsf	4037,4,c	;volatile
  8097                           
  8098                           ;I2C.c: 71: return temp;
  8099  0025C6  5003               	movf	i2I2C_Master_Read@temp,w,c
  8100  0025C8  0012               	return	
  8101  0025CA                     __end_ofi2_I2C_Master_Read:
  8102                           	opt stack 0
  8103                           pclatu	equ	0xFFB
  8104                           pclath	equ	0xFFA
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           prodh	equ	0xFF4
  8110                           prodl	equ	0xFF3
  8111                           intcon	equ	0xFF2
  8112                           intcon2	equ	0xFF1
  8113                           intcon3	equ	0xFF0
  8114                           postinc0	equ	0xFEE
  8115                           fsr0h	equ	0xFEA
  8116                           fsr0l	equ	0xFE9
  8117                           wreg	equ	0xFE8
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function i2_I2C_Master_Wait *****************
  8128 ;; Defined at:
  8129 ;;		line 24 in file "I2C.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;		None
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;Total ram usage:        1 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		i2_I2C_Master_Start
  8153 ;;		i2_I2C_Master_Stop
  8154 ;;		i2_I2C_Master_Write
  8155 ;;		i2_I2C_Master_Read
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           	psect	text42
  8160  002678                     __ptext42:
  8161                           	opt stack 0
  8162  002678                     i2_I2C_Master_Wait:
  8163                           	opt stack 23
  8164  002678                     i2l34:
  8165  002678  B4C7               	btfsc	4039,2,c	;volatile
  8166  00267A  D7FE               	goto	i2l34
  8167  00267C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  8168  002680  0E1F               	movlw	31
  8169  002682  1601               	andwf	??i2_I2C_Master_Wait,f,c
  8170  002684  B4D8               	btfsc	status,2,c
  8171  002686  0012               	return	
  8172  002688  D7F7               	goto	i2l34
  8173  00268A                     __end_ofi2_I2C_Master_Wait:
  8174                           	opt stack 0
  8175                           pclatu	equ	0xFFB
  8176                           pclath	equ	0xFFA
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon2	equ	0xFF1
  8185                           intcon3	equ	0xFF0
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           fsr1h	equ	0xFE2
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           fsr2h	equ	0xFDA
  8196                           fsr2l	equ	0xFD9
  8197                           status	equ	0xFD8
  8198                           
  8199 ;; *************** function _dec_to_hex *****************
  8200 ;; Defined at:
  8201 ;;		line 233 in file "main.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  num             2   98[COMRAM] int 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  quotient        2  112[COMRAM] int 
  8206 ;;  hexnum          2  110[COMRAM] int 
  8207 ;;  i               2  108[COMRAM] int 
  8208 ;;  temp            2  106[COMRAM] int 
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  2   98[COMRAM] int 
  8211 ;; Registers used:
  8212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;Total ram usage:       16 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    5
  8225 ;; This function calls:
  8226 ;;		___awdiv
  8227 ;;		___awtoft
  8228 ;;		___ftadd
  8229 ;;		___ftmul
  8230 ;;		___fttol
  8231 ;;		_pow
  8232 ;; This function is called by:
  8233 ;;		_isr
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           	psect	text43
  8238  0012C0                     __ptext43:
  8239                           	opt stack 0
  8240  0012C0                     _dec_to_hex:
  8241                           	opt stack 20
  8242                           
  8243                           ;main.c: 234: int i = 0, quotient = num, temp, hexnum = 0;
  8244                           
  8245                           ;incstack = 0
  8246  0012C0  0E00               	movlw	0
  8247  0012C2  6E6E               	movwf	dec_to_hex@i+1,c
  8248  0012C4  0E00               	movlw	0
  8249  0012C6  6E6D               	movwf	dec_to_hex@i,c
  8250  0012C8  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  8251  0012CC  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  8252  0012D0  0E00               	movlw	0
  8253  0012D2  6E70               	movwf	dec_to_hex@hexnum+1,c
  8254  0012D4  0E00               	movlw	0
  8255  0012D6  6E6F               	movwf	dec_to_hex@hexnum,c
  8256                           
  8257                           ;main.c: 236: while (quotient != 0) {
  8258  0012D8  D068               	goto	i2l3936
  8259  0012DA                     i2l3924:
  8260                           
  8261                           ;main.c: 237: temp = quotient % 16;
  8262  0012DA  0E0F               	movlw	15
  8263  0012DC  1471               	andwf	dec_to_hex@quotient,w,c
  8264  0012DE  6E6B               	movwf	dec_to_hex@temp,c
  8265  0012E0  6A6C               	clrf	dec_to_hex@temp+1,c
  8266                           
  8267                           ;main.c: 239: hexnum += temp*pow(10,i);
  8268  0012E2  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  8269  0012E6  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  8270  0012EA  EC1F  F012         	call	___awtoft	;wreg free
  8271  0012EE  C009  F065         	movff	?___awtoft,_dec_to_hex$1142
  8272  0012F2  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1142+1
  8273  0012F6  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1142+2
  8274                           
  8275                           ;main.c: 239: hexnum += temp*pow(10,i);
  8276  0012FA  C065  F055         	movff	_dec_to_hex$1142,pow@y
  8277  0012FE  C066  F056         	movff	_dec_to_hex$1142+1,pow@y+1
  8278  001302  C067  F057         	movff	_dec_to_hex$1142+2,pow@y+2
  8279  001306  0E00               	movlw	0
  8280  001308  6E52               	movwf	pow@x,c
  8281  00130A  0E20               	movlw	32
  8282  00130C  6E53               	movwf	pow@x+1,c
  8283  00130E  0E41               	movlw	65
  8284  001310  6E54               	movwf	pow@x+2,c
  8285  001312  EC60  F006         	call	_pow	;wreg free
  8286  001316  C052  F068         	movff	?_pow,_dec_to_hex$1143
  8287  00131A  C053  F069         	movff	?_pow+1,_dec_to_hex$1143+1
  8288  00131E  C054  F06A         	movff	?_pow+2,_dec_to_hex$1143+2
  8289                           
  8290                           ;main.c: 239: hexnum += temp*pow(10,i);
  8291  001322  C068  F010         	movff	_dec_to_hex$1143,___ftmul@f2
  8292  001326  C069  F011         	movff	_dec_to_hex$1143+1,___ftmul@f2+1
  8293  00132A  C06A  F012         	movff	_dec_to_hex$1143+2,___ftmul@f2+2
  8294  00132E  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  8295  001332  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  8296  001336  EC1F  F012         	call	___awtoft	;wreg free
  8297  00133A  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8298  00133E  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8299  001342  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8300  001346  EC58  F00A         	call	___ftmul	;wreg free
  8301  00134A  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  8302  00134E  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  8303  001352  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  8304  001356  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  8305  00135A  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  8306  00135E  EC1F  F012         	call	___awtoft	;wreg free
  8307  001362  C009  F01C         	movff	?___awtoft,___ftadd@f1
  8308  001366  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  8309  00136A  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  8310  00136E  EC8A  F005         	call	___ftadd	;wreg free
  8311  001372  C01C  F028         	movff	?___ftadd,___fttol@f1
  8312  001376  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  8313  00137A  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  8314  00137E  ECDE  F009         	call	___fttol	;wreg free
  8315  001382  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  8316  001386  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  8317                           
  8318                           ;main.c: 241: quotient = quotient / 16;
  8319  00138A  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  8320  00138E  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  8321  001392  0E00               	movlw	0
  8322  001394  6E0A               	movwf	___awdiv@divisor+1,c
  8323  001396  0E10               	movlw	16
  8324  001398  6E09               	movwf	___awdiv@divisor,c
  8325  00139A  EC9A  F00F         	call	___awdiv	;wreg free
  8326  00139E  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  8327  0013A2  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  8328                           
  8329                           ;main.c: 242: i += 1;
  8330  0013A6  4A6D               	infsnz	dec_to_hex@i,f,c
  8331  0013A8  2A6E               	incf	dec_to_hex@i+1,f,c
  8332  0013AA                     i2l3936:
  8333  0013AA  5071               	movf	dec_to_hex@quotient,w,c
  8334  0013AC  1072               	iorwf	dec_to_hex@quotient+1,w,c
  8335  0013AE  A4D8               	btfss	status,2,c
  8336  0013B0  D794               	goto	i2l3924
  8337                           
  8338                           ;main.c: 243: }
  8339                           ;main.c: 244: return hexnum;
  8340  0013B2  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  8341  0013B6  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  8342  0013BA  0012               	return		;funcret
  8343  0013BC                     __end_of_dec_to_hex:
  8344                           	opt stack 0
  8345                           pclatu	equ	0xFFB
  8346                           pclath	equ	0xFFA
  8347                           tblptru	equ	0xFF8
  8348                           tblptrh	equ	0xFF7
  8349                           tblptrl	equ	0xFF6
  8350                           tablat	equ	0xFF5
  8351                           prodh	equ	0xFF4
  8352                           prodl	equ	0xFF3
  8353                           intcon	equ	0xFF2
  8354                           intcon2	equ	0xFF1
  8355                           intcon3	equ	0xFF0
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           fsr1h	equ	0xFE2
  8361                           fsr1l	equ	0xFE1
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           fsr2h	equ	0xFDA
  8366                           fsr2l	equ	0xFD9
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function _pow *****************
  8370 ;; Defined at:
  8371 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  x               3   81[COMRAM] int 
  8374 ;;  y               3   84[COMRAM] int 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  yi              4   94[COMRAM] unsigned long 
  8377 ;;  sign            1   93[COMRAM] unsigned char 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  3   81[COMRAM] unsigned char 
  8380 ;; Registers used:
  8381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8387 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;Total ram usage:       17 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    4
  8394 ;; This function calls:
  8395 ;;		___ftge
  8396 ;;		___ftmul
  8397 ;;		___ftneg
  8398 ;;		___fttol
  8399 ;;		___lltoft
  8400 ;;		_exp
  8401 ;;		_log
  8402 ;; This function is called by:
  8403 ;;		_dec_to_hex
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text44
  8408  000CC0                     __ptext44:
  8409                           	opt stack 0
  8410  000CC0                     _pow:
  8411                           	opt stack 20
  8412                           
  8413                           ;incstack = 0
  8414  000CC0  0E00               	movlw	0
  8415  000CC2  6E5E               	movwf	pow@sign,c
  8416  000CC4  5052               	movf	pow@x,w,c
  8417  000CC6  1053               	iorwf	pow@x+1,w,c
  8418  000CC8  1054               	iorwf	pow@x+2,w,c
  8419  000CCA  A4D8               	btfss	status,2,c
  8420  000CCC  D01B               	goto	i2l3534
  8421  000CCE  0E00               	movlw	0
  8422  000CD0  6E01               	movwf	___ftge@ff1,c
  8423  000CD2  0E00               	movlw	0
  8424  000CD4  6E02               	movwf	___ftge@ff1+1,c
  8425  000CD6  0E00               	movlw	0
  8426  000CD8  6E03               	movwf	___ftge@ff1+2,c
  8427  000CDA  C055  F004         	movff	pow@y,___ftge@ff2
  8428  000CDE  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  8429  000CE2  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  8430  000CE6  EC52  F00F         	call	___ftge	;wreg free
  8431  000CEA  A0D8               	btfss	status,0,c
  8432  000CEC  D004               	goto	i2l854
  8433  000CEE  0E00               	movlw	0
  8434  000CF0  6E79               	movwf	_errno+1,c
  8435  000CF2  0E21               	movlw	33
  8436  000CF4  6E78               	movwf	_errno,c
  8437  000CF6                     i2l854:
  8438  000CF6  0E00               	movlw	0
  8439  000CF8  6E52               	movwf	?_pow,c
  8440  000CFA  0E00               	movlw	0
  8441  000CFC  6E53               	movwf	?_pow+1,c
  8442  000CFE  0E00               	movlw	0
  8443  000D00  6E54               	movwf	?_pow+2,c
  8444  000D02  0012               	return	
  8445  000D04                     i2l3534:
  8446  000D04  5055               	movf	pow@y,w,c
  8447  000D06  1056               	iorwf	pow@y+1,w,c
  8448  000D08  1057               	iorwf	pow@y+2,w,c
  8449  000D0A  A4D8               	btfss	status,2,c
  8450  000D0C  D007               	goto	i2l3540
  8451  000D0E  0E00               	movlw	0
  8452  000D10  6E52               	movwf	?_pow,c
  8453  000D12  0E80               	movlw	128
  8454  000D14  6E53               	movwf	?_pow+1,c
  8455  000D16  0E3F               	movlw	63
  8456  000D18  6E54               	movwf	?_pow+2,c
  8457  000D1A  0012               	return	
  8458  000D1C                     i2l3540:
  8459  000D1C  AE54               	btfss	pow@x+2,7,c
  8460  000D1E  D040               	goto	i2l3552
  8461  000D20  C055  F028         	movff	pow@y,___fttol@f1
  8462  000D24  C056  F029         	movff	pow@y+1,___fttol@f1+1
  8463  000D28  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  8464  000D2C  ECDE  F009         	call	___fttol	;wreg free
  8465  000D30  C028  F05F         	movff	?___fttol,pow@yi
  8466  000D34  C029  F060         	movff	?___fttol+1,pow@yi+1
  8467  000D38  C02A  F061         	movff	?___fttol+2,pow@yi+2
  8468  000D3C  C02B  F062         	movff	?___fttol+3,pow@yi+3
  8469  000D40  C05F  F009         	movff	pow@yi,___lltoft@c
  8470  000D44  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  8471  000D48  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  8472  000D4C  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  8473  000D50  EC19  F011         	call	___lltoft	;wreg free
  8474  000D54  5055               	movf	pow@y,w,c
  8475  000D56  1809               	xorwf	?___lltoft,w,c
  8476  000D58  E107               	bnz	i2u323_40
  8477  000D5A  5056               	movf	pow@y+1,w,c
  8478  000D5C  180A               	xorwf	?___lltoft+1,w,c
  8479  000D5E  E104               	bnz	i2u323_40
  8480  000D60  5057               	movf	pow@y+2,w,c
  8481  000D62  180B               	xorwf	?___lltoft+2,w,c
  8482  000D64  B4D8               	btfsc	status,2,c
  8483  000D66  D00B               	goto	i2l3548
  8484  000D68                     i2u323_40:
  8485  000D68  0E00               	movlw	0
  8486  000D6A  6E79               	movwf	_errno+1,c
  8487  000D6C  0E21               	movlw	33
  8488  000D6E  6E78               	movwf	_errno,c
  8489  000D70  0E00               	movlw	0
  8490  000D72  6E52               	movwf	?_pow,c
  8491  000D74  0E00               	movlw	0
  8492  000D76  6E53               	movwf	?_pow+1,c
  8493  000D78  0E00               	movlw	0
  8494  000D7A  6E54               	movwf	?_pow+2,c
  8495  000D7C  0012               	return	
  8496  000D7E                     i2l3548:
  8497  000D7E  505F               	movf	pow@yi,w,c
  8498  000D80  0B01               	andlw	1
  8499  000D82  6E5E               	movwf	pow@sign,c
  8500  000D84  C052  F001         	movff	pow@x,___ftneg@f1
  8501  000D88  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8502  000D8C  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8503  000D90  ECF8  F012         	call	___ftneg	;wreg free
  8504  000D94  C001  F052         	movff	?___ftneg,pow@x
  8505  000D98  C002  F053         	movff	?___ftneg+1,pow@x+1
  8506  000D9C  C003  F054         	movff	?___ftneg+2,pow@x+2
  8507  000DA0                     i2l3552:
  8508  000DA0  C052  F034         	movff	pow@x,log@x
  8509  000DA4  C053  F035         	movff	pow@x+1,log@x+1
  8510  000DA8  C054  F036         	movff	pow@x+2,log@x+2
  8511  000DAC  EC4E  F008         	call	_log	;wreg free
  8512  000DB0  C034  F058         	movff	?_log,_pow$1144
  8513  000DB4  C035  F059         	movff	?_log+1,_pow$1144+1
  8514  000DB8  C036  F05A         	movff	?_log+2,_pow$1144+2
  8515  000DBC  C058  F00D         	movff	_pow$1144,___ftmul@f1
  8516  000DC0  C059  F00E         	movff	_pow$1144+1,___ftmul@f1+1
  8517  000DC4  C05A  F00F         	movff	_pow$1144+2,___ftmul@f1+2
  8518  000DC8  C055  F010         	movff	pow@y,___ftmul@f2
  8519  000DCC  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  8520  000DD0  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  8521  000DD4  EC58  F00A         	call	___ftmul	;wreg free
  8522  000DD8  C00D  F05B         	movff	?___ftmul,_pow$1145
  8523  000DDC  C00E  F05C         	movff	?___ftmul+1,_pow$1145+1
  8524  000DE0  C00F  F05D         	movff	?___ftmul+2,_pow$1145+2
  8525  000DE4  C05B  F049         	movff	_pow$1145,exp@x
  8526  000DE8  C05C  F04A         	movff	_pow$1145+1,exp@x+1
  8527  000DEC  C05D  F04B         	movff	_pow$1145+2,exp@x+2
  8528  000DF0  EC98  F004         	call	_exp	;wreg free
  8529  000DF4  C049  F052         	movff	?_exp,pow@x
  8530  000DF8  C04A  F053         	movff	?_exp+1,pow@x+1
  8531  000DFC  C04B  F054         	movff	?_exp+2,pow@x+2
  8532  000E00  505E               	movf	pow@sign,w,c
  8533  000E02  B4D8               	btfsc	status,2,c
  8534  000E04  D00F               	goto	i2l859
  8535  000E06  C052  F001         	movff	pow@x,___ftneg@f1
  8536  000E0A  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  8537  000E0E  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  8538  000E12  ECF8  F012         	call	___ftneg	;wreg free
  8539  000E16  C001  F052         	movff	?___ftneg,?_pow
  8540  000E1A  C002  F053         	movff	?___ftneg+1,?_pow+1
  8541  000E1E  C003  F054         	movff	?___ftneg+2,?_pow+2
  8542  000E22  0012               	return	
  8543  000E24                     i2l859:
  8544  000E24  C052  F052         	movff	pow@x,?_pow
  8545  000E28  C053  F053         	movff	pow@x+1,?_pow+1
  8546  000E2C  C054  F054         	movff	pow@x+2,?_pow+2
  8547  000E30  0012               	return		;funcret
  8548  000E32                     __end_of_pow:
  8549                           	opt stack 0
  8550                           pclatu	equ	0xFFB
  8551                           pclath	equ	0xFFA
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon2	equ	0xFF1
  8560                           intcon3	equ	0xFF0
  8561                           postinc0	equ	0xFEE
  8562                           fsr0h	equ	0xFEA
  8563                           fsr0l	equ	0xFE9
  8564                           wreg	equ	0xFE8
  8565                           fsr1h	equ	0xFE2
  8566                           fsr1l	equ	0xFE1
  8567                           indf2	equ	0xFDF
  8568                           postinc2	equ	0xFDE
  8569                           postdec2	equ	0xFDD
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _log *****************
  8575 ;; Defined at:
  8576 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  x               3   51[COMRAM] unsigned char 
  8579 ;; Auto vars:     Size  Location     Type
  8580 ;;  exponent        2   54[COMRAM] int 
  8581 ;; Return value:  Size  Location     Type
  8582 ;;                  3   51[COMRAM] int 
  8583 ;; Registers used:
  8584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8585 ;; Tracked objects:
  8586 ;;		On entry : 0/0
  8587 ;;		On exit  : 0/0
  8588 ;;		Unchanged: 0/0
  8589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8590 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8593 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;Total ram usage:        5 bytes
  8595 ;; Hardware stack levels used:    1
  8596 ;; Hardware stack levels required when called:    3
  8597 ;; This function calls:
  8598 ;;		___awtoft
  8599 ;;		___ftadd
  8600 ;;		___ftmul
  8601 ;;		_eval_poly
  8602 ;;		_frexp
  8603 ;; This function is called by:
  8604 ;;		_pow
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text45
  8609  00109C                     __ptext45:
  8610                           	opt stack 0
  8611  00109C                     _log:
  8612                           	opt stack 20
  8613                           
  8614                           ;incstack = 0
  8615  00109C  AE36               	btfss	log@x+2,7,c
  8616  00109E  D00B               	goto	i2l3280
  8617  0010A0  0E00               	movlw	0
  8618  0010A2  6E79               	movwf	_errno+1,c
  8619  0010A4  0E21               	movlw	33
  8620  0010A6  6E78               	movwf	_errno,c
  8621  0010A8  0E00               	movlw	0
  8622  0010AA  6E34               	movwf	?_log,c
  8623  0010AC  0E00               	movlw	0
  8624  0010AE  6E35               	movwf	?_log+1,c
  8625  0010B0  0E00               	movlw	0
  8626  0010B2  6E36               	movwf	?_log+2,c
  8627  0010B4  0012               	return	
  8628  0010B6                     i2l3280:
  8629  0010B6  5034               	movf	log@x,w,c
  8630  0010B8  1035               	iorwf	log@x+1,w,c
  8631  0010BA  1036               	iorwf	log@x+2,w,c
  8632  0010BC  A4D8               	btfss	status,2,c
  8633  0010BE  D00B               	goto	i2l3286
  8634  0010C0  0E00               	movlw	0
  8635  0010C2  6E79               	movwf	_errno+1,c
  8636  0010C4  0E22               	movlw	34
  8637  0010C6  6E78               	movwf	_errno,c
  8638  0010C8  0E00               	movlw	0
  8639  0010CA  6E34               	movwf	?_log,c
  8640  0010CC  0E00               	movlw	0
  8641  0010CE  6E35               	movwf	?_log+1,c
  8642  0010D0  0E00               	movlw	0
  8643  0010D2  6E36               	movwf	?_log+2,c
  8644  0010D4  0012               	return	
  8645  0010D6                     i2l3286:
  8646  0010D6  0E00               	movlw	0
  8647  0010D8  6E10               	movwf	___ftmul@f2,c
  8648  0010DA  0E00               	movlw	0
  8649  0010DC  6E11               	movwf	___ftmul@f2+1,c
  8650  0010DE  0E40               	movlw	64
  8651  0010E0  6E12               	movwf	___ftmul@f2+2,c
  8652  0010E2  0E37               	movlw	low log@exponent
  8653  0010E4  6E04               	movwf	frexp@eptr,c
  8654  0010E6  0E00               	movlw	high log@exponent
  8655  0010E8  6E05               	movwf	frexp@eptr+1,c
  8656  0010EA  C034  F001         	movff	log@x,frexp@value
  8657  0010EE  C035  F002         	movff	log@x+1,frexp@value+1
  8658  0010F2  C036  F003         	movff	log@x+2,frexp@value+2
  8659  0010F6  EC0A  F00F         	call	_frexp	;wreg free
  8660  0010FA  C001  F00D         	movff	?_frexp,___ftmul@f1
  8661  0010FE  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  8662  001102  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  8663  001106  EC58  F00A         	call	___ftmul	;wreg free
  8664  00110A  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8665  00110E  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8666  001112  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8667  001116  0E00               	movlw	0
  8668  001118  6E1F               	movwf	___ftadd@f2,c
  8669  00111A  0E80               	movlw	128
  8670  00111C  6E20               	movwf	___ftadd@f2+1,c
  8671  00111E  0EBF               	movlw	191
  8672  001120  6E21               	movwf	___ftadd@f2+2,c
  8673  001122  EC8A  F005         	call	___ftadd	;wreg free
  8674  001126  C01C  F034         	movff	?___ftadd,log@x
  8675  00112A  C01D  F035         	movff	?___ftadd+1,log@x+1
  8676  00112E  C01E  F036         	movff	?___ftadd+2,log@x+2
  8677  001132  0637               	decf	log@exponent,f,c
  8678  001134  A0D8               	btfss	status,0,c
  8679  001136  0638               	decf	log@exponent+1,f,c
  8680  001138  C034  F028         	movff	log@x,eval_poly@x
  8681  00113C  C035  F029         	movff	log@x+1,eval_poly@x+1
  8682  001140  C036  F02A         	movff	log@x+2,eval_poly@x+2
  8683  001144  0E21               	movlw	low log@coeff
  8684  001146  6E2B               	movwf	eval_poly@d,c
  8685  001148  0EFE               	movlw	high log@coeff
  8686  00114A  6E2C               	movwf	eval_poly@d+1,c
  8687  00114C  0E00               	movlw	0
  8688  00114E  6E2E               	movwf	eval_poly@n+1,c
  8689  001150  0E08               	movlw	8
  8690  001152  6E2D               	movwf	eval_poly@n,c
  8691  001154  EC8A  F00C         	call	_eval_poly	;wreg free
  8692  001158  C028  F034         	movff	?_eval_poly,log@x
  8693  00115C  C029  F035         	movff	?_eval_poly+1,log@x+1
  8694  001160  C02A  F036         	movff	?_eval_poly+2,log@x+2
  8695  001164  0E72               	movlw	114
  8696  001166  6E10               	movwf	___ftmul@f2,c
  8697  001168  0E31               	movlw	49
  8698  00116A  6E11               	movwf	___ftmul@f2+1,c
  8699  00116C  0E3F               	movlw	63
  8700  00116E  6E12               	movwf	___ftmul@f2+2,c
  8701  001170  C037  F009         	movff	log@exponent,___awtoft@c
  8702  001174  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  8703  001178  EC1F  F012         	call	___awtoft	;wreg free
  8704  00117C  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8705  001180  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8706  001184  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8707  001188  EC58  F00A         	call	___ftmul	;wreg free
  8708  00118C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  8709  001190  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  8710  001194  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  8711  001198  C034  F01F         	movff	log@x,___ftadd@f2
  8712  00119C  C035  F020         	movff	log@x+1,___ftadd@f2+1
  8713  0011A0  C036  F021         	movff	log@x+2,___ftadd@f2+2
  8714  0011A4  EC8A  F005         	call	___ftadd	;wreg free
  8715  0011A8  C01C  F034         	movff	?___ftadd,?_log
  8716  0011AC  C01D  F035         	movff	?___ftadd+1,?_log+1
  8717  0011B0  C01E  F036         	movff	?___ftadd+2,?_log+2
  8718  0011B4  0012               	return	
  8719  0011B6                     __end_of_log:
  8720                           	opt stack 0
  8721                           pclatu	equ	0xFFB
  8722                           pclath	equ	0xFFA
  8723                           tblptru	equ	0xFF8
  8724                           tblptrh	equ	0xFF7
  8725                           tblptrl	equ	0xFF6
  8726                           tablat	equ	0xFF5
  8727                           prodh	equ	0xFF4
  8728                           prodl	equ	0xFF3
  8729                           intcon	equ	0xFF2
  8730                           intcon2	equ	0xFF1
  8731                           intcon3	equ	0xFF0
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           fsr2h	equ	0xFDA
  8742                           fsr2l	equ	0xFD9
  8743                           status	equ	0xFD8
  8744                           
  8745 ;; *************** function _exp *****************
  8746 ;; Defined at:
  8747 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;  x               3   72[COMRAM] int 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  exponent        2   78[COMRAM] int 
  8752 ;;  sign            1   80[COMRAM] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;                  3   72[COMRAM] unsigned char 
  8755 ;; Registers used:
  8756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8762 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;Total ram usage:        9 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    3
  8769 ;; This function calls:
  8770 ;;		___awtoft
  8771 ;;		___ftdiv
  8772 ;;		___ftge
  8773 ;;		___ftmul
  8774 ;;		___ftneg
  8775 ;;		___ftsub
  8776 ;;		___fttol
  8777 ;;		_eval_poly
  8778 ;;		_floor
  8779 ;;		_ldexp
  8780 ;; This function is called by:
  8781 ;;		_pow
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text46
  8786  000930                     __ptext46:
  8787                           	opt stack 0
  8788  000930                     _exp:
  8789                           	opt stack 20
  8790                           
  8791                           ;incstack = 0
  8792  000930  5049               	movf	exp@x,w,c
  8793  000932  104A               	iorwf	exp@x+1,w,c
  8794  000934  104B               	iorwf	exp@x+2,w,c
  8795  000936  A4D8               	btfss	status,2,c
  8796  000938  D007               	goto	i2l3302
  8797  00093A  0E00               	movlw	0
  8798  00093C  6E49               	movwf	?_exp,c
  8799  00093E  0E80               	movlw	128
  8800  000940  6E4A               	movwf	?_exp+1,c
  8801  000942  0E3F               	movlw	63
  8802  000944  6E4B               	movwf	?_exp+2,c
  8803  000946  0012               	return	
  8804  000948                     i2l3302:
  8805  000948  0E72               	movlw	114
  8806  00094A  6E01               	movwf	___ftge@ff1,c
  8807  00094C  0E31               	movlw	49
  8808  00094E  6E02               	movwf	___ftge@ff1+1,c
  8809  000950  0E44               	movlw	68
  8810  000952  6E03               	movwf	___ftge@ff1+2,c
  8811  000954  C049  F004         	movff	exp@x,___ftge@ff2
  8812  000958  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  8813  00095C  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  8814  000960  EC52  F00F         	call	___ftge	;wreg free
  8815  000964  B0D8               	btfsc	status,0,c
  8816  000966  D00B               	goto	i2l3308
  8817  000968  0E00               	movlw	0
  8818  00096A  6E79               	movwf	_errno+1,c
  8819  00096C  0E22               	movlw	34
  8820  00096E  6E78               	movwf	_errno,c
  8821  000970  0EFF               	movlw	255
  8822  000972  6E49               	movwf	?_exp,c
  8823  000974  0E7F               	movlw	127
  8824  000976  6E4A               	movwf	?_exp+1,c
  8825  000978  0E7F               	movlw	127
  8826  00097A  6E4B               	movwf	?_exp+2,c
  8827  00097C  0012               	return	
  8828  00097E                     i2l3308:
  8829  00097E  C049  F001         	movff	exp@x,___ftge@ff1
  8830  000982  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  8831  000986  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  8832  00098A  0E49               	movlw	73
  8833  00098C  6E04               	movwf	___ftge@ff2,c
  8834  00098E  0E3A               	movlw	58
  8835  000990  6E05               	movwf	___ftge@ff2+1,c
  8836  000992  0EC4               	movlw	196
  8837  000994  6E06               	movwf	___ftge@ff2+2,c
  8838  000996  EC52  F00F         	call	___ftge	;wreg free
  8839  00099A  B0D8               	btfsc	status,0,c
  8840  00099C  D00B               	goto	i2l3314
  8841  00099E  0E00               	movlw	0
  8842  0009A0  6E79               	movwf	_errno+1,c
  8843  0009A2  0E22               	movlw	34
  8844  0009A4  6E78               	movwf	_errno,c
  8845  0009A6  0E00               	movlw	0
  8846  0009A8  6E49               	movwf	?_exp,c
  8847  0009AA  0E00               	movlw	0
  8848  0009AC  6E4A               	movwf	?_exp+1,c
  8849  0009AE  0E00               	movlw	0
  8850  0009B0  6E4B               	movwf	?_exp+2,c
  8851  0009B2  0012               	return	
  8852  0009B4                     i2l3314:
  8853  0009B4  AE4B               	btfss	exp@x+2,7,c
  8854  0009B6  D002               	goto	i2u287_40
  8855  0009B8  0E01               	movlw	1
  8856  0009BA  D001               	goto	i2u288_40
  8857  0009BC                     i2u287_40:
  8858  0009BC  0E00               	movlw	0
  8859  0009BE                     i2u288_40:
  8860  0009BE  6E51               	movwf	exp@sign,c
  8861  0009C0  5051               	movf	exp@sign,w,c
  8862  0009C2  B4D8               	btfsc	status,2,c
  8863  0009C4  D00E               	goto	i2l1017
  8864  0009C6  C049  F001         	movff	exp@x,___ftneg@f1
  8865  0009CA  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  8866  0009CE  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  8867  0009D2  ECF8  F012         	call	___ftneg	;wreg free
  8868  0009D6  C001  F049         	movff	?___ftneg,exp@x
  8869  0009DA  C002  F04A         	movff	?___ftneg+1,exp@x+1
  8870  0009DE  C003  F04B         	movff	?___ftneg+2,exp@x+2
  8871  0009E2                     i2l1017:
  8872  0009E2  C049  F00D         	movff	exp@x,___ftmul@f1
  8873  0009E6  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  8874  0009EA  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  8875  0009EE  0EAA               	movlw	170
  8876  0009F0  6E10               	movwf	___ftmul@f2,c
  8877  0009F2  0EB8               	movlw	184
  8878  0009F4  6E11               	movwf	___ftmul@f2+1,c
  8879  0009F6  0E3F               	movlw	63
  8880  0009F8  6E12               	movwf	___ftmul@f2+2,c
  8881  0009FA  EC58  F00A         	call	___ftmul	;wreg free
  8882  0009FE  C00D  F049         	movff	?___ftmul,exp@x
  8883  000A02  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  8884  000A06  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  8885  000A0A  C049  F041         	movff	exp@x,floor@x
  8886  000A0E  C04A  F042         	movff	exp@x+1,floor@x+1
  8887  000A12  C04B  F043         	movff	exp@x+2,floor@x+2
  8888  000A16  EC45  F00B         	call	_floor	;wreg free
  8889  000A1A  C041  F04C         	movff	?_floor,_exp$1146
  8890  000A1E  C042  F04D         	movff	?_floor+1,_exp$1146+1
  8891  000A22  C043  F04E         	movff	?_floor+2,_exp$1146+2
  8892  000A26  C04C  F028         	movff	_exp$1146,___fttol@f1
  8893  000A2A  C04D  F029         	movff	_exp$1146+1,___fttol@f1+1
  8894  000A2E  C04E  F02A         	movff	_exp$1146+2,___fttol@f1+2
  8895  000A32  ECDE  F009         	call	___fttol	;wreg free
  8896  000A36  C028  F04F         	movff	?___fttol,exp@exponent
  8897  000A3A  C029  F050         	movff	?___fttol+1,exp@exponent+1
  8898  000A3E  C049  F028         	movff	exp@x,___ftsub@f1
  8899  000A42  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  8900  000A46  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  8901  000A4A  C04F  F009         	movff	exp@exponent,___awtoft@c
  8902  000A4E  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  8903  000A52  EC1F  F012         	call	___awtoft	;wreg free
  8904  000A56  C009  F02B         	movff	?___awtoft,___ftsub@f2
  8905  000A5A  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  8906  000A5E  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  8907  000A62  ECE0  F011         	call	___ftsub	;wreg free
  8908  000A66  C028  F049         	movff	?___ftsub,exp@x
  8909  000A6A  C029  F04A         	movff	?___ftsub+1,exp@x+1
  8910  000A6E  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  8911  000A72  C049  F028         	movff	exp@x,eval_poly@x
  8912  000A76  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  8913  000A7A  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  8914  000A7E  0E03               	movlw	low exp@coeff
  8915  000A80  6E2B               	movwf	eval_poly@d,c
  8916  000A82  0EFE               	movlw	high exp@coeff
  8917  000A84  6E2C               	movwf	eval_poly@d+1,c
  8918  000A86  0E00               	movlw	0
  8919  000A88  6E2E               	movwf	eval_poly@n+1,c
  8920  000A8A  0E09               	movlw	9
  8921  000A8C  6E2D               	movwf	eval_poly@n,c
  8922  000A8E  EC8A  F00C         	call	_eval_poly	;wreg free
  8923  000A92  C028  F034         	movff	?_eval_poly,ldexp@value
  8924  000A96  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  8925  000A9A  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  8926  000A9E  C04F  F037         	movff	exp@exponent,ldexp@newexp
  8927  000AA2  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  8928  000AA6  ECF3  F00C         	call	_ldexp	;wreg free
  8929  000AAA  C034  F049         	movff	?_ldexp,exp@x
  8930  000AAE  C035  F04A         	movff	?_ldexp+1,exp@x+1
  8931  000AB2  C036  F04B         	movff	?_ldexp+2,exp@x+2
  8932  000AB6  5051               	movf	exp@sign,w,c
  8933  000AB8  B4D8               	btfsc	status,2,c
  8934  000ABA  D025               	goto	i2l1018
  8935  000ABC  2849               	incf	exp@x,w,c
  8936  000ABE  E10E               	bnz	i2l3336
  8937  000AC0  0E7F               	movlw	127
  8938  000AC2  184A               	xorwf	exp@x+1,w,c
  8939  000AC4  E10B               	bnz	i2l3336
  8940  000AC6  0E7F               	movlw	127
  8941  000AC8  184B               	xorwf	exp@x+2,w,c
  8942  000ACA  A4D8               	btfss	status,2,c
  8943  000ACC  D007               	goto	i2l3336
  8944  000ACE  0E00               	movlw	0
  8945  000AD0  6E49               	movwf	?_exp,c
  8946  000AD2  0E00               	movlw	0
  8947  000AD4  6E4A               	movwf	?_exp+1,c
  8948  000AD6  0E00               	movlw	0
  8949  000AD8  6E4B               	movwf	?_exp+2,c
  8950  000ADA  0012               	return	
  8951  000ADC                     i2l3336:
  8952  000ADC  0E00               	movlw	0
  8953  000ADE  6E09               	movwf	___ftdiv@f1,c
  8954  000AE0  0E80               	movlw	128
  8955  000AE2  6E0A               	movwf	___ftdiv@f1+1,c
  8956  000AE4  0E3F               	movlw	63
  8957  000AE6  6E0B               	movwf	___ftdiv@f1+2,c
  8958  000AE8  C049  F00C         	movff	exp@x,___ftdiv@f2
  8959  000AEC  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  8960  000AF0  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  8961  000AF4  ECD2  F00A         	call	___ftdiv	;wreg free
  8962  000AF8  C009  F049         	movff	?___ftdiv,?_exp
  8963  000AFC  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  8964  000B00  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  8965  000B04  0012               	return	
  8966  000B06                     i2l1018:
  8967  000B06  C049  F049         	movff	exp@x,?_exp
  8968  000B0A  C04A  F04A         	movff	exp@x+1,?_exp+1
  8969  000B0E  C04B  F04B         	movff	exp@x+2,?_exp+2
  8970  000B12  0012               	return		;funcret
  8971  000B14                     __end_of_exp:
  8972                           	opt stack 0
  8973                           pclatu	equ	0xFFB
  8974                           pclath	equ	0xFFA
  8975                           tblptru	equ	0xFF8
  8976                           tblptrh	equ	0xFF7
  8977                           tblptrl	equ	0xFF6
  8978                           tablat	equ	0xFF5
  8979                           prodh	equ	0xFF4
  8980                           prodl	equ	0xFF3
  8981                           intcon	equ	0xFF2
  8982                           intcon2	equ	0xFF1
  8983                           intcon3	equ	0xFF0
  8984                           postinc0	equ	0xFEE
  8985                           fsr0h	equ	0xFEA
  8986                           fsr0l	equ	0xFE9
  8987                           wreg	equ	0xFE8
  8988                           fsr1h	equ	0xFE2
  8989                           fsr1l	equ	0xFE1
  8990                           indf2	equ	0xFDF
  8991                           postinc2	equ	0xFDE
  8992                           postdec2	equ	0xFDD
  8993                           fsr2h	equ	0xFDA
  8994                           fsr2l	equ	0xFD9
  8995                           status	equ	0xFD8
  8996                           
  8997 ;; *************** function _ldexp *****************
  8998 ;; Defined at:
  8999 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;  value           3   51[COMRAM] unsigned char 
  9002 ;;  newexp          2   54[COMRAM] int 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  3   51[COMRAM] int 
  9007 ;; Registers used:
  9008 ;;		wreg, status,2, status,0
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9014 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;Total ram usage:        7 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; This function calls:
  9021 ;;		Nothing
  9022 ;; This function is called by:
  9023 ;;		_exp
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           	psect	text47
  9028  0019E6                     __ptext47:
  9029                           	opt stack 0
  9030  0019E6                     _ldexp:
  9031                           	opt stack 22
  9032                           
  9033                           ;incstack = 0
  9034  0019E6  5034               	movf	ldexp@value,w,c
  9035  0019E8  1035               	iorwf	ldexp@value+1,w,c
  9036  0019EA  1036               	iorwf	ldexp@value+2,w,c
  9037  0019EC  A4D8               	btfss	status,2,c
  9038  0019EE  D007               	goto	i2l3148
  9039  0019F0  0E00               	movlw	0
  9040  0019F2  6E34               	movwf	?_ldexp,c
  9041  0019F4  0E00               	movlw	0
  9042  0019F6  6E35               	movwf	?_ldexp+1,c
  9043  0019F8  0E00               	movlw	0
  9044  0019FA  6E36               	movwf	?_ldexp+2,c
  9045  0019FC  0012               	return	
  9046  0019FE                     i2l3148:
  9047  0019FE  5036               	movf	ldexp@value+2,w,c
  9048  001A00  0B7F               	andlw	127
  9049  001A02  6E39               	movwf	??_ldexp& (0+255),c
  9050  001A04  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  9051  001A06  90D8               	bcf	status,0,c
  9052  001A08  3639               	rlcf	??_ldexp,f,c
  9053  001A0A  363A               	rlcf	??_ldexp+1,f,c
  9054  001A0C  5039               	movf	??_ldexp,w,c
  9055  001A0E  2637               	addwf	ldexp@newexp,f,c
  9056  001A10  503A               	movf	??_ldexp+1,w,c
  9057  001A12  2238               	addwfc	ldexp@newexp+1,f,c
  9058  001A14  AE35               	btfss	ldexp@value+1,7,c
  9059  001A16  D003               	goto	i2u267_40
  9060  001A18  6A39               	clrf	??_ldexp& (0+255),c
  9061  001A1A  2A39               	incf	??_ldexp& (0+255),f,c
  9062  001A1C  D001               	goto	i2u267_48
  9063  001A1E                     i2u267_40:
  9064  001A1E  6A39               	clrf	??_ldexp& (0+255),c
  9065  001A20                     i2u267_48:
  9066  001A20  5039               	movf	??_ldexp,w,c
  9067  001A22  2637               	addwf	ldexp@newexp,f,c
  9068  001A24  0E00               	movlw	0
  9069  001A26  2238               	addwfc	ldexp@newexp+1,f,c
  9070  001A28  AE38               	btfss	ldexp@newexp+1,7,c
  9071  001A2A  D00B               	goto	i2l3156
  9072  001A2C  0E00               	movlw	0
  9073  001A2E  6E79               	movwf	_errno+1,c
  9074  001A30  0E22               	movlw	34
  9075  001A32  6E78               	movwf	_errno,c
  9076  001A34  0E00               	movlw	0
  9077  001A36  6E34               	movwf	?_ldexp,c
  9078  001A38  0E00               	movlw	0
  9079  001A3A  6E35               	movwf	?_ldexp+1,c
  9080  001A3C  0E00               	movlw	0
  9081  001A3E                     L4:
  9082  001A3E  6E36               	movwf	?_ldexp+2,c
  9083  001A40  0012               	return	
  9084  001A42                     i2l3156:
  9085  001A42  BE38               	btfsc	ldexp@newexp+1,7,c
  9086  001A44  D015               	goto	i2l3172
  9087  001A46  0438               	decf	ldexp@newexp+1,w,c
  9088  001A48  A0D8               	btfss	status,0,c
  9089  001A4A  D012               	goto	i2l3172
  9090  001A4C  0E00               	movlw	0
  9091  001A4E  6E79               	movwf	_errno+1,c
  9092  001A50  0E22               	movlw	34
  9093  001A52  6E78               	movwf	_errno,c
  9094  001A54  AE36               	btfss	ldexp@value+2,7,c
  9095  001A56  D006               	goto	i2l3168
  9096  001A58  0EFF               	movlw	255
  9097  001A5A  6E34               	movwf	?_ldexp,c
  9098  001A5C  0E7F               	movlw	127
  9099  001A5E  6E35               	movwf	?_ldexp+1,c
  9100  001A60  0EFF               	movlw	255
  9101  001A62  D7ED               	goto	L4
  9102  001A64                     i2l3168:
  9103  001A64  0EFF               	movlw	255
  9104  001A66  6E34               	movwf	?_ldexp,c
  9105  001A68  0E7F               	movlw	127
  9106  001A6A  6E35               	movwf	?_ldexp+1,c
  9107  001A6C  0E7F               	movlw	127
  9108  001A6E  D7E7               	goto	L4
  9109  001A70                     i2l3172:
  9110  001A70  3438               	rlcf	ldexp@newexp+1,w,c
  9111  001A72  3038               	rrcf	ldexp@newexp+1,w,c
  9112  001A74  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  9113  001A76  3037               	rrcf	ldexp@newexp,w,c
  9114  001A78  6E39               	movwf	??_ldexp& (0+255),c
  9115  001A7A  5036               	movf	ldexp@value+2,w,c
  9116  001A7C  1839               	xorwf	??_ldexp,w,c
  9117  001A7E  0B80               	andlw	-128
  9118  001A80  1839               	xorwf	??_ldexp,w,c
  9119  001A82  6E36               	movwf	ldexp@value+2,c
  9120  001A84  C037  F039         	movff	ldexp@newexp,??_ldexp
  9121  001A88  0E01               	movlw	1
  9122  001A8A  1639               	andwf	??_ldexp,f,c
  9123  001A8C  3239               	rrcf	??_ldexp,f,c
  9124  001A8E  3239               	rrcf	??_ldexp,f,c
  9125  001A90  5035               	movf	ldexp@value+1,w,c
  9126  001A92  1839               	xorwf	??_ldexp,w,c
  9127  001A94  0B7F               	andlw	-129
  9128  001A96  1839               	xorwf	??_ldexp,w,c
  9129  001A98  6E35               	movwf	ldexp@value+1,c
  9130  001A9A  C034  F034         	movff	ldexp@value,?_ldexp
  9131  001A9E  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  9132  001AA2  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  9133  001AA6  0012               	return	
  9134  001AA8                     __end_of_ldexp:
  9135                           	opt stack 0
  9136                           pclatu	equ	0xFFB
  9137                           pclath	equ	0xFFA
  9138                           tblptru	equ	0xFF8
  9139                           tblptrh	equ	0xFF7
  9140                           tblptrl	equ	0xFF6
  9141                           tablat	equ	0xFF5
  9142                           prodh	equ	0xFF4
  9143                           prodl	equ	0xFF3
  9144                           intcon	equ	0xFF2
  9145                           intcon2	equ	0xFF1
  9146                           intcon3	equ	0xFF0
  9147                           postinc0	equ	0xFEE
  9148                           fsr0h	equ	0xFEA
  9149                           fsr0l	equ	0xFE9
  9150                           wreg	equ	0xFE8
  9151                           fsr1h	equ	0xFE2
  9152                           fsr1l	equ	0xFE1
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _floor *****************
  9161 ;; Defined at:
  9162 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  x               3   64[COMRAM] int 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  i               3   67[COMRAM] int 
  9167 ;;  expon           2   70[COMRAM] int 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  3   64[COMRAM] int 
  9170 ;; Registers used:
  9171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9177 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;Total ram usage:        8 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    2
  9184 ;; This function calls:
  9185 ;;		___altoft
  9186 ;;		___ftadd
  9187 ;;		___ftge
  9188 ;;		___fttol
  9189 ;;		_frexp
  9190 ;; This function is called by:
  9191 ;;		_exp
  9192 ;; This function uses a non-reentrant model
  9193 ;;
  9194                           
  9195                           	psect	text48
  9196  00168A                     __ptext48:
  9197                           	opt stack 0
  9198  00168A                     _floor:
  9199                           	opt stack 20
  9200                           
  9201                           ;incstack = 0
  9202  00168A  C041  F001         	movff	floor@x,frexp@value
  9203  00168E  C042  F002         	movff	floor@x+1,frexp@value+1
  9204  001692  C043  F003         	movff	floor@x+2,frexp@value+2
  9205  001696  0E47               	movlw	low floor@expon
  9206  001698  6E04               	movwf	frexp@eptr,c
  9207  00169A  0E00               	movlw	high floor@expon
  9208  00169C  6E05               	movwf	frexp@eptr+1,c
  9209  00169E  EC0A  F00F         	call	_frexp	;wreg free
  9210  0016A2  AE48               	btfss	floor@expon+1,7,c
  9211  0016A4  D010               	goto	i2l3126
  9212  0016A6  AE43               	btfss	floor@x+2,7,c
  9213  0016A8  D007               	goto	i2l3122
  9214  0016AA  0E00               	movlw	0
  9215  0016AC  6E41               	movwf	?_floor,c
  9216  0016AE  0E80               	movlw	128
  9217  0016B0  6E42               	movwf	?_floor+1,c
  9218  0016B2  0EBF               	movlw	191
  9219  0016B4  6E43               	movwf	?_floor+2,c
  9220  0016B6  0012               	return	
  9221  0016B8                     i2l3122:
  9222  0016B8  0E00               	movlw	0
  9223  0016BA  6E41               	movwf	?_floor,c
  9224  0016BC  0E00               	movlw	0
  9225  0016BE  6E42               	movwf	?_floor+1,c
  9226  0016C0  0E00               	movlw	0
  9227  0016C2  6E43               	movwf	?_floor+2,c
  9228  0016C4  0012               	return	
  9229  0016C6                     i2l3126:
  9230  0016C6  5048               	movf	floor@expon+1,w,c
  9231  0016C8  E104               	bnz	i2u263_40
  9232  0016CA  0E15               	movlw	21
  9233  0016CC  5C47               	subwf	floor@expon,w,c
  9234  0016CE  A0D8               	btfss	status,0,c
  9235  0016D0  D007               	goto	i2l3130
  9236  0016D2                     i2u263_40:
  9237  0016D2  C041  F041         	movff	floor@x,?_floor
  9238  0016D6  C042  F042         	movff	floor@x+1,?_floor+1
  9239  0016DA  C043  F043         	movff	floor@x+2,?_floor+2
  9240  0016DE  0012               	return	
  9241  0016E0                     i2l3130:
  9242  0016E0  C041  F028         	movff	floor@x,___fttol@f1
  9243  0016E4  C042  F029         	movff	floor@x+1,___fttol@f1+1
  9244  0016E8  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  9245  0016EC  ECDE  F009         	call	___fttol	;wreg free
  9246  0016F0  C028  F037         	movff	?___fttol,___altoft@c
  9247  0016F4  C029  F038         	movff	?___fttol+1,___altoft@c+1
  9248  0016F8  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  9249  0016FC  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  9250  001700  EC18  F010         	call	___altoft	;wreg free
  9251  001704  C037  F044         	movff	?___altoft,floor@i
  9252  001708  C038  F045         	movff	?___altoft+1,floor@i+1
  9253  00170C  C039  F046         	movff	?___altoft+2,floor@i+2
  9254  001710  C041  F001         	movff	floor@x,___ftge@ff1
  9255  001714  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  9256  001718  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  9257  00171C  C044  F004         	movff	floor@i,___ftge@ff2
  9258  001720  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  9259  001724  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  9260  001728  EC52  F00F         	call	___ftge	;wreg free
  9261  00172C  B0D8               	btfsc	status,0,c
  9262  00172E  D015               	goto	i2l1028
  9263  001730  C044  F01C         	movff	floor@i,___ftadd@f1
  9264  001734  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  9265  001738  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  9266  00173C  0E00               	movlw	0
  9267  00173E  6E1F               	movwf	___ftadd@f2,c
  9268  001740  0E80               	movlw	128
  9269  001742  6E20               	movwf	___ftadd@f2+1,c
  9270  001744  0EBF               	movlw	191
  9271  001746  6E21               	movwf	___ftadd@f2+2,c
  9272  001748  EC8A  F005         	call	___ftadd	;wreg free
  9273  00174C  C01C  F041         	movff	?___ftadd,?_floor
  9274  001750  C01D  F042         	movff	?___ftadd+1,?_floor+1
  9275  001754  C01E  F043         	movff	?___ftadd+2,?_floor+2
  9276  001758  0012               	return	
  9277  00175A                     i2l1028:
  9278  00175A  C044  F041         	movff	floor@i,?_floor
  9279  00175E  C045  F042         	movff	floor@i+1,?_floor+1
  9280  001762  C046  F043         	movff	floor@i+2,?_floor+2
  9281  001766  0012               	return		;funcret
  9282  001768                     __end_of_floor:
  9283                           	opt stack 0
  9284                           pclatu	equ	0xFFB
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           intcon2	equ	0xFF1
  9294                           intcon3	equ	0xFF0
  9295                           postinc0	equ	0xFEE
  9296                           fsr0h	equ	0xFEA
  9297                           fsr0l	equ	0xFE9
  9298                           wreg	equ	0xFE8
  9299                           fsr1h	equ	0xFE2
  9300                           fsr1l	equ	0xFE1
  9301                           indf2	equ	0xFDF
  9302                           postinc2	equ	0xFDE
  9303                           postdec2	equ	0xFDD
  9304                           fsr2h	equ	0xFDA
  9305                           fsr2l	equ	0xFD9
  9306                           status	equ	0xFD8
  9307                           
  9308 ;; *************** function _frexp *****************
  9309 ;; Defined at:
  9310 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;  value           3    0[COMRAM] int 
  9313 ;;  eptr            2    3[COMRAM] PTR int 
  9314 ;;		 -> log@exponent(2), floor@expon(2), 
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;		None
  9317 ;; Return value:  Size  Location     Type
  9318 ;;                  3    0[COMRAM] PTR int 
  9319 ;; Registers used:
  9320 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9321 ;; Tracked objects:
  9322 ;;		On entry : 0/0
  9323 ;;		On exit  : 0/0
  9324 ;;		Unchanged: 0/0
  9325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9326 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;Total ram usage:        7 bytes
  9331 ;; Hardware stack levels used:    1
  9332 ;; This function calls:
  9333 ;;		Nothing
  9334 ;; This function is called by:
  9335 ;;		_floor
  9336 ;;		_log
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           	psect	text49
  9341  001E14                     __ptext49:
  9342                           	opt stack 0
  9343  001E14                     _frexp:
  9344                           	opt stack 22
  9345                           
  9346                           ;incstack = 0
  9347  001E14  5001               	movf	frexp@value,w,c
  9348  001E16  1002               	iorwf	frexp@value+1,w,c
  9349  001E18  1003               	iorwf	frexp@value+2,w,c
  9350  001E1A  A4D8               	btfss	status,2,c
  9351  001E1C  D00F               	goto	i2l3002
  9352  001E1E  C004  FFD9         	movff	frexp@eptr,fsr2l
  9353  001E22  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9354  001E26  0E00               	movlw	0
  9355  001E28  6EDE               	movwf	postinc2,c
  9356  001E2A  0E00               	movlw	0
  9357  001E2C  6EDD               	movwf	postdec2,c
  9358  001E2E  0E00               	movlw	0
  9359  001E30  6E01               	movwf	?_frexp,c
  9360  001E32  0E00               	movlw	0
  9361  001E34  6E02               	movwf	?_frexp+1,c
  9362  001E36  0E00               	movlw	0
  9363  001E38  6E03               	movwf	?_frexp+2,c
  9364  001E3A  0012               	return	
  9365  001E3C                     i2l3002:
  9366  001E3C  5003               	movf	frexp@value+2,w,c
  9367  001E3E  0B7F               	andlw	127
  9368  001E40  6E06               	movwf	??_frexp& (0+255),c
  9369  001E42  6A07               	clrf	(??_frexp+1)& (0+255),c
  9370  001E44  90D8               	bcf	status,0,c
  9371  001E46  3606               	rlcf	??_frexp,f,c
  9372  001E48  3607               	rlcf	??_frexp+1,f,c
  9373  001E4A  C004  FFD9         	movff	frexp@eptr,fsr2l
  9374  001E4E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9375  001E52  C006  FFDE         	movff	??_frexp,postinc2
  9376  001E56  C007  FFDD         	movff	??_frexp+1,postdec2
  9377  001E5A  AE02               	btfss	frexp@value+1,7,c
  9378  001E5C  D003               	goto	i2u250_40
  9379  001E5E  6A06               	clrf	??_frexp& (0+255),c
  9380  001E60  2A06               	incf	??_frexp& (0+255),f,c
  9381  001E62  D001               	goto	i2u250_48
  9382  001E64                     i2u250_40:
  9383  001E64  6A06               	clrf	??_frexp& (0+255),c
  9384  001E66                     i2u250_48:
  9385  001E66  5006               	movf	??_frexp,w,c
  9386  001E68  C004  FFD9         	movff	frexp@eptr,fsr2l
  9387  001E6C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9388  001E70  12DE               	iorwf	postinc2,f,c
  9389  001E72  0E00               	movlw	0
  9390  001E74  12DD               	iorwf	postdec2,f,c
  9391  001E76  C004  FFD9         	movff	frexp@eptr,fsr2l
  9392  001E7A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  9393  001E7E  0E82               	movlw	130
  9394  001E80  26DE               	addwf	postinc2,f,c
  9395  001E82  0EFF               	movlw	255
  9396  001E84  22DD               	addwfc	postdec2,f,c
  9397  001E86  8003               	bsf	frexp@value+2,0,c
  9398  001E88  8203               	bsf	frexp@value+2,1,c
  9399  001E8A  8403               	bsf	frexp@value+2,2,c
  9400  001E8C  8603               	bsf	frexp@value+2,3,c
  9401  001E8E  8803               	bsf	frexp@value+2,4,c
  9402  001E90  8A03               	bsf	frexp@value+2,5,c
  9403  001E92  9C03               	bcf	frexp@value+2,6,c
  9404  001E94  9E02               	bcf	frexp@value+1,7,c
  9405  001E96  C001  F001         	movff	frexp@value,?_frexp
  9406  001E9A  C002  F002         	movff	frexp@value+1,?_frexp+1
  9407  001E9E  C003  F003         	movff	frexp@value+2,?_frexp+2
  9408  001EA2  0012               	return	
  9409  001EA4                     __end_of_frexp:
  9410                           	opt stack 0
  9411                           pclatu	equ	0xFFB
  9412                           pclath	equ	0xFFA
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           intcon	equ	0xFF2
  9420                           intcon2	equ	0xFF1
  9421                           intcon3	equ	0xFF0
  9422                           postinc0	equ	0xFEE
  9423                           fsr0h	equ	0xFEA
  9424                           fsr0l	equ	0xFE9
  9425                           wreg	equ	0xFE8
  9426                           fsr1h	equ	0xFE2
  9427                           fsr1l	equ	0xFE1
  9428                           indf2	equ	0xFDF
  9429                           postinc2	equ	0xFDE
  9430                           postdec2	equ	0xFDD
  9431                           fsr2h	equ	0xFDA
  9432                           fsr2l	equ	0xFD9
  9433                           status	equ	0xFD8
  9434                           
  9435 ;; *************** function ___fttol *****************
  9436 ;; Defined at:
  9437 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  f1              3   39[COMRAM] float 
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  lval            4   49[COMRAM] unsigned long 
  9442 ;;  exp1            1   53[COMRAM] unsigned char 
  9443 ;;  sign1           1   48[COMRAM] unsigned char 
  9444 ;; Return value:  Size  Location     Type
  9445 ;;                  4   39[COMRAM] long 
  9446 ;; Registers used:
  9447 ;;		wreg, status,2, status,0
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;Total ram usage:       15 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_dec_to_hex
  9463 ;;		_pow
  9464 ;;		_exp
  9465 ;;		_floor
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           	psect	text50
  9470  0013BC                     __ptext50:
  9471                           	opt stack 0
  9472  0013BC                     ___fttol:
  9473                           	opt stack 21
  9474                           
  9475                           ;incstack = 0
  9476  0013BC  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  9477  0013C0  6A2D               	clrf	(??___fttol+1)& (0+255),c
  9478  0013C2  6A2E               	clrf	(??___fttol+2)& (0+255),c
  9479  0013C4  3429               	rlcf	___fttol@f1+1,w,c
  9480  0013C6  362C               	rlcf	??___fttol& (0+255),f,c
  9481  0013C8  E301               	bnc	u241_41
  9482  0013CA  802D               	bsf	(??___fttol+1)& (0+255),0,c
  9483  0013CC                     u241_41:
  9484  0013CC  502C               	movf	??___fttol,w,c
  9485  0013CE  6E36               	movwf	___fttol@exp1,c
  9486  0013D0  5036               	movf	___fttol@exp1,w,c
  9487  0013D2  A4D8               	btfss	status,2,c
  9488  0013D4  D009               	goto	i2l2954
  9489  0013D6  0E00               	movlw	0
  9490  0013D8  6E28               	movwf	?___fttol,c
  9491  0013DA  0E00               	movlw	0
  9492  0013DC  6E29               	movwf	?___fttol+1,c
  9493  0013DE  0E00               	movlw	0
  9494  0013E0  6E2A               	movwf	?___fttol+2,c
  9495  0013E2  0E00               	movlw	0
  9496  0013E4  6E2B               	movwf	?___fttol+3,c
  9497  0013E6  0012               	return	
  9498  0013E8                     i2l2954:
  9499  0013E8  0E17               	movlw	23
  9500  0013EA  6E2C               	movwf	??___fttol& (0+255),c
  9501  0013EC  C028  F02D         	movff	___fttol@f1,??___fttol+1
  9502  0013F0  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  9503  0013F4  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  9504  0013F8  282C               	incf	??___fttol,w,c
  9505  0013FA  6E30               	movwf	(??___fttol+4)& (0+255),c
  9506  0013FC  D004               	goto	i2u243_40
  9507  0013FE                     i2u243_45:
  9508  0013FE  90D8               	bcf	status,0,c
  9509  001400  322F               	rrcf	??___fttol+3,f,c
  9510  001402  322E               	rrcf	??___fttol+2,f,c
  9511  001404  322D               	rrcf	??___fttol+1,f,c
  9512  001406                     i2u243_40:
  9513  001406  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  9514  001408  D7FA               	goto	i2u243_45
  9515  00140A  502D               	movf	??___fttol+1,w,c
  9516  00140C  6E31               	movwf	___fttol@sign1,c
  9517  00140E  8E29               	bsf	___fttol@f1+1,7,c
  9518  001410  0EFF               	movlw	255
  9519  001412  1628               	andwf	___fttol@f1,f,c
  9520  001414  0EFF               	movlw	255
  9521  001416  1629               	andwf	___fttol@f1+1,f,c
  9522  001418  0E00               	movlw	0
  9523  00141A  162A               	andwf	___fttol@f1+2,f,c
  9524  00141C  5028               	movf	___fttol@f1,w,c
  9525  00141E  6E32               	movwf	___fttol@lval,c
  9526  001420  5029               	movf	___fttol@f1+1,w,c
  9527  001422  6E33               	movwf	___fttol@lval+1,c
  9528  001424  502A               	movf	___fttol@f1+2,w,c
  9529  001426  6E34               	movwf	___fttol@lval+2,c
  9530  001428  6A35               	clrf	___fttol@lval+3,c
  9531  00142A  0E8E               	movlw	142
  9532  00142C  5E36               	subwf	___fttol@exp1,f,c
  9533  00142E  AE36               	btfss	___fttol@exp1,7,c
  9534  001430  D016               	goto	i2l2976
  9535  001432  5036               	movf	___fttol@exp1,w,c
  9536  001434  0A80               	xorlw	128
  9537  001436  0F8F               	addlw	143
  9538  001438  B0D8               	btfsc	status,0,c
  9539  00143A  D009               	goto	i2l2972
  9540  00143C  0E00               	movlw	0
  9541  00143E  6E28               	movwf	?___fttol,c
  9542  001440  0E00               	movlw	0
  9543  001442  6E29               	movwf	?___fttol+1,c
  9544  001444  0E00               	movlw	0
  9545  001446  6E2A               	movwf	?___fttol+2,c
  9546  001448  0E00               	movlw	0
  9547  00144A  6E2B               	movwf	?___fttol+3,c
  9548  00144C  0012               	return	
  9549  00144E                     i2l2972:
  9550  00144E  90D8               	bcf	status,0,c
  9551  001450  3235               	rrcf	___fttol@lval+3,f,c
  9552  001452  3234               	rrcf	___fttol@lval+2,f,c
  9553  001454  3233               	rrcf	___fttol@lval+1,f,c
  9554  001456  3232               	rrcf	___fttol@lval,f,c
  9555  001458  3E36               	incfsz	___fttol@exp1,f,c
  9556  00145A  D7F9               	goto	i2l2972
  9557  00145C  D015               	goto	i2l2986
  9558  00145E                     i2l2976:
  9559  00145E  0E17               	movlw	23
  9560  001460  6436               	cpfsgt	___fttol@exp1,c
  9561  001462  D00F               	goto	i2l2984
  9562  001464  0E00               	movlw	0
  9563  001466  6E28               	movwf	?___fttol,c
  9564  001468  0E00               	movlw	0
  9565  00146A  6E29               	movwf	?___fttol+1,c
  9566  00146C  0E00               	movlw	0
  9567  00146E  6E2A               	movwf	?___fttol+2,c
  9568  001470  0E00               	movlw	0
  9569  001472  6E2B               	movwf	?___fttol+3,c
  9570  001474  0012               	return	
  9571  001476                     i2l2982:
  9572  001476  90D8               	bcf	status,0,c
  9573  001478  3632               	rlcf	___fttol@lval,f,c
  9574  00147A  3633               	rlcf	___fttol@lval+1,f,c
  9575  00147C  3634               	rlcf	___fttol@lval+2,f,c
  9576  00147E  3635               	rlcf	___fttol@lval+3,f,c
  9577  001480  0636               	decf	___fttol@exp1,f,c
  9578  001482                     i2l2984:
  9579  001482  5036               	movf	___fttol@exp1,w,c
  9580  001484  A4D8               	btfss	status,2,c
  9581  001486  D7F7               	goto	i2l2982
  9582  001488                     i2l2986:
  9583  001488  5031               	movf	___fttol@sign1,w,c
  9584  00148A  B4D8               	btfsc	status,2,c
  9585  00148C  D008               	goto	i2l2990
  9586  00148E  1E35               	comf	___fttol@lval+3,f,c
  9587  001490  1E34               	comf	___fttol@lval+2,f,c
  9588  001492  1E33               	comf	___fttol@lval+1,f,c
  9589  001494  6C32               	negf	___fttol@lval,c
  9590  001496  0E00               	movlw	0
  9591  001498  2233               	addwfc	___fttol@lval+1,f,c
  9592  00149A  2234               	addwfc	___fttol@lval+2,f,c
  9593  00149C  2235               	addwfc	___fttol@lval+3,f,c
  9594  00149E                     i2l2990:
  9595  00149E  C032  F028         	movff	___fttol@lval,?___fttol
  9596  0014A2  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  9597  0014A6  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  9598  0014AA  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  9599  0014AE  0012               	return	
  9600  0014B0                     __end_of___fttol:
  9601                           	opt stack 0
  9602                           pclatu	equ	0xFFB
  9603                           pclath	equ	0xFFA
  9604                           tblptru	equ	0xFF8
  9605                           tblptrh	equ	0xFF7
  9606                           tblptrl	equ	0xFF6
  9607                           tablat	equ	0xFF5
  9608                           prodh	equ	0xFF4
  9609                           prodl	equ	0xFF3
  9610                           intcon	equ	0xFF2
  9611                           intcon2	equ	0xFF1
  9612                           intcon3	equ	0xFF0
  9613                           postinc0	equ	0xFEE
  9614                           fsr0h	equ	0xFEA
  9615                           fsr0l	equ	0xFE9
  9616                           wreg	equ	0xFE8
  9617                           fsr1h	equ	0xFE2
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function ___ftge *****************
  9627 ;; Defined at:
  9628 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  ff1             3    0[COMRAM] float 
  9631 ;;  ff2             3    3[COMRAM] float 
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;		None               void
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9643 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;Total ram usage:        9 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_pow
  9653 ;;		_exp
  9654 ;;		_floor
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text51
  9659  001EA4                     __ptext51:
  9660                           	opt stack 0
  9661  001EA4                     ___ftge:
  9662                           	opt stack 21
  9663                           
  9664                           ;incstack = 0
  9665  001EA4  AE03               	btfss	___ftge@ff1+2,7,c
  9666  001EA6  D016               	goto	i2l2934
  9667  001EA8  C001  F007         	movff	___ftge@ff1,??___ftge
  9668  001EAC  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9669  001EB0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9670  001EB4  1E07               	comf	??___ftge,f,c
  9671  001EB6  1E08               	comf	??___ftge+1,f,c
  9672  001EB8  1E09               	comf	??___ftge+2,f,c
  9673  001EBA  2A07               	incf	??___ftge,f,c
  9674  001EBC  0E00               	movlw	0
  9675  001EBE  2208               	addwfc	??___ftge+1,f,c
  9676  001EC0  2209               	addwfc	??___ftge+2,f,c
  9677  001EC2  0E00               	movlw	0
  9678  001EC4  2407               	addwf	??___ftge,w,c
  9679  001EC6  6E01               	movwf	___ftge@ff1,c
  9680  001EC8  0E00               	movlw	0
  9681  001ECA  2008               	addwfc	??___ftge+1,w,c
  9682  001ECC  6E02               	movwf	___ftge@ff1+1,c
  9683  001ECE  0E80               	movlw	128
  9684  001ED0  2009               	addwfc	??___ftge+2,w,c
  9685  001ED2  6E03               	movwf	___ftge@ff1+2,c
  9686  001ED4                     i2l2934:
  9687  001ED4  AE06               	btfss	___ftge@ff2+2,7,c
  9688  001ED6  D016               	goto	i2l2938
  9689  001ED8  C004  F007         	movff	___ftge@ff2,??___ftge
  9690  001EDC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9691  001EE0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9692  001EE4  1E07               	comf	??___ftge,f,c
  9693  001EE6  1E08               	comf	??___ftge+1,f,c
  9694  001EE8  1E09               	comf	??___ftge+2,f,c
  9695  001EEA  2A07               	incf	??___ftge,f,c
  9696  001EEC  0E00               	movlw	0
  9697  001EEE  2208               	addwfc	??___ftge+1,f,c
  9698  001EF0  2209               	addwfc	??___ftge+2,f,c
  9699  001EF2  0E00               	movlw	0
  9700  001EF4  2407               	addwf	??___ftge,w,c
  9701  001EF6  6E04               	movwf	___ftge@ff2,c
  9702  001EF8  0E00               	movlw	0
  9703  001EFA  2008               	addwfc	??___ftge+1,w,c
  9704  001EFC  6E05               	movwf	___ftge@ff2+1,c
  9705  001EFE  0E80               	movlw	128
  9706  001F00  2009               	addwfc	??___ftge+2,w,c
  9707  001F02  6E06               	movwf	___ftge@ff2+2,c
  9708  001F04                     i2l2938:
  9709  001F04  0E00               	movlw	0
  9710  001F06  1A01               	xorwf	___ftge@ff1,f,c
  9711  001F08  0E00               	movlw	0
  9712  001F0A  1A02               	xorwf	___ftge@ff1+1,f,c
  9713  001F0C  0E80               	movlw	128
  9714  001F0E  1A03               	xorwf	___ftge@ff1+2,f,c
  9715  001F10  0E00               	movlw	0
  9716  001F12  1A04               	xorwf	___ftge@ff2,f,c
  9717  001F14  0E00               	movlw	0
  9718  001F16  1A05               	xorwf	___ftge@ff2+1,f,c
  9719  001F18  0E80               	movlw	128
  9720  001F1A  1A06               	xorwf	___ftge@ff2+2,f,c
  9721  001F1C  5004               	movf	___ftge@ff2,w,c
  9722  001F1E  5C01               	subwf	___ftge@ff1,w,c
  9723  001F20  5005               	movf	___ftge@ff2+1,w,c
  9724  001F22  5802               	subwfb	___ftge@ff1+1,w,c
  9725  001F24  5006               	movf	___ftge@ff2+2,w,c
  9726  001F26  5803               	subwfb	___ftge@ff1+2,w,c
  9727  001F28  B0D8               	btfsc	status,0,c
  9728  001F2A  D002               	goto	i2l2944
  9729  001F2C  90D8               	bcf	status,0,c
  9730  001F2E  0012               	return	
  9731  001F30                     i2l2944:
  9732  001F30  80D8               	bsf	status,0,c
  9733  001F32  0012               	return	
  9734  001F34                     __end_of___ftge:
  9735                           	opt stack 0
  9736                           pclatu	equ	0xFFB
  9737                           pclath	equ	0xFFA
  9738                           tblptru	equ	0xFF8
  9739                           tblptrh	equ	0xFF7
  9740                           tblptrl	equ	0xFF6
  9741                           tablat	equ	0xFF5
  9742                           prodh	equ	0xFF4
  9743                           prodl	equ	0xFF3
  9744                           intcon	equ	0xFF2
  9745                           intcon2	equ	0xFF1
  9746                           intcon3	equ	0xFF0
  9747                           postinc0	equ	0xFEE
  9748                           fsr0h	equ	0xFEA
  9749                           fsr0l	equ	0xFE9
  9750                           wreg	equ	0xFE8
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           postdec2	equ	0xFDD
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function ___altoft *****************
  9761 ;; Defined at:
  9762 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  c               4   54[COMRAM] long 
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;  sign            1   63[COMRAM] unsigned char 
  9767 ;;  exp             1   62[COMRAM] unsigned char 
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  3   54[COMRAM] float 
  9770 ;; Registers used:
  9771 ;;		wreg, status,2, status,0, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;Total ram usage:       10 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    1
  9784 ;; This function calls:
  9785 ;;		___ftpack
  9786 ;; This function is called by:
  9787 ;;		_floor
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text52
  9792  002030                     __ptext52:
  9793                           	opt stack 0
  9794  002030                     ___altoft:
  9795                           	opt stack 20
  9796                           
  9797                           ;incstack = 0
  9798  002030  0E00               	movlw	0
  9799  002032  6E40               	movwf	___altoft@sign,c
  9800  002034  0E8E               	movlw	142
  9801  002036  6E3F               	movwf	___altoft@exp,c
  9802  002038  AE3A               	btfss	___altoft@c+3,7,c
  9803  00203A  D011               	goto	i2l2806
  9804  00203C  1E3A               	comf	___altoft@c+3,f,c
  9805  00203E  1E39               	comf	___altoft@c+2,f,c
  9806  002040  1E38               	comf	___altoft@c+1,f,c
  9807  002042  6C37               	negf	___altoft@c,c
  9808  002044  0E00               	movlw	0
  9809  002046  2238               	addwfc	___altoft@c+1,f,c
  9810  002048  2239               	addwfc	___altoft@c+2,f,c
  9811  00204A  223A               	addwfc	___altoft@c+3,f,c
  9812  00204C  0E01               	movlw	1
  9813  00204E  6E40               	movwf	___altoft@sign,c
  9814  002050  D006               	goto	i2l2806
  9815  002052                     i2l2804:
  9816  002052  90D8               	bcf	status,0,c
  9817  002054  323A               	rrcf	___altoft@c+3,f,c
  9818  002056  3239               	rrcf	___altoft@c+2,f,c
  9819  002058  3238               	rrcf	___altoft@c+1,f,c
  9820  00205A  3237               	rrcf	___altoft@c,f,c
  9821  00205C  2A3F               	incf	___altoft@exp,f,c
  9822  00205E                     i2l2806:
  9823  00205E  0E00               	movlw	0
  9824  002060  1437               	andwf	___altoft@c,w,c
  9825  002062  6E3B               	movwf	??___altoft& (0+255),c
  9826  002064  0E00               	movlw	0
  9827  002066  1438               	andwf	___altoft@c+1,w,c
  9828  002068  6E3C               	movwf	(??___altoft+1)& (0+255),c
  9829  00206A  0E00               	movlw	0
  9830  00206C  1439               	andwf	___altoft@c+2,w,c
  9831  00206E  6E3D               	movwf	(??___altoft+2)& (0+255),c
  9832  002070  0EFF               	movlw	255
  9833  002072  143A               	andwf	___altoft@c+3,w,c
  9834  002074  6E3E               	movwf	(??___altoft+3)& (0+255),c
  9835  002076  503B               	movf	??___altoft,w,c
  9836  002078  103C               	iorwf	??___altoft+1,w,c
  9837  00207A  103D               	iorwf	??___altoft+2,w,c
  9838  00207C  103E               	iorwf	??___altoft+3,w,c
  9839  00207E  A4D8               	btfss	status,2,c
  9840  002080  D7E8               	goto	i2l2804
  9841  002082  C037  F001         	movff	___altoft@c,___ftpack@arg
  9842  002086  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  9843  00208A  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  9844  00208E  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  9845  002092  C040  F005         	movff	___altoft@sign,___ftpack@sign
  9846  002096  EC0C  F00E         	call	___ftpack	;wreg free
  9847  00209A  C001  F037         	movff	?___ftpack,?___altoft
  9848  00209E  C002  F038         	movff	?___ftpack+1,?___altoft+1
  9849  0020A2  C003  F039         	movff	?___ftpack+2,?___altoft+2
  9850  0020A6  0012               	return	
  9851  0020A8                     __end_of___altoft:
  9852                           	opt stack 0
  9853                           pclatu	equ	0xFFB
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           intcon2	equ	0xFF1
  9863                           intcon3	equ	0xFF0
  9864                           postinc0	equ	0xFEE
  9865                           fsr0h	equ	0xFEA
  9866                           fsr0l	equ	0xFE9
  9867                           wreg	equ	0xFE8
  9868                           fsr1h	equ	0xFE2
  9869                           fsr1l	equ	0xFE1
  9870                           indf2	equ	0xFDF
  9871                           postinc2	equ	0xFDE
  9872                           postdec2	equ	0xFDD
  9873                           fsr2h	equ	0xFDA
  9874                           fsr2l	equ	0xFD9
  9875                           status	equ	0xFD8
  9876                           
  9877 ;; *************** function _eval_poly *****************
  9878 ;; Defined at:
  9879 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  x               3   39[COMRAM] float 
  9882 ;;  d               2   42[COMRAM] PTR const 
  9883 ;;		 -> log@coeff(27), exp@coeff(30), 
  9884 ;;  n               2   44[COMRAM] int 
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;  res             3   48[COMRAM] int 
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  3   39[COMRAM] int 
  9889 ;; Registers used:
  9890 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9896 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;Total ram usage:       12 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    2
  9903 ;; This function calls:
  9904 ;;		___ftadd
  9905 ;;		___ftmul
  9906 ;;		i2___wmul
  9907 ;; This function is called by:
  9908 ;;		_exp
  9909 ;;		_log
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text53
  9914  001914                     __ptext53:
  9915                           	opt stack 0
  9916  001914                     _eval_poly:
  9917                           	opt stack 20
  9918                           
  9919                           ;incstack = 0
  9920  001914  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9921  001918  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9922  00191C  0E00               	movlw	0
  9923  00191E  6E04               	movwf	i2___wmul@multiplicand+1,c
  9924  001920  0E03               	movlw	3
  9925  001922  6E03               	movwf	i2___wmul@multiplicand,c
  9926  001924  ECE5  F012         	call	i2___wmul	;wreg free
  9927  001928  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9928  00192C  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9929  001930  5001               	movf	?i2___wmul,w,c
  9930  001932  262F               	addwf	??_eval_poly,f,c
  9931  001934  5002               	movf	?i2___wmul+1,w,c
  9932  001936  2230               	addwfc	??_eval_poly+1,f,c
  9933  001938  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9934  00193C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9935  001940                     	if	0	;tblptru may be non-zero
  9936  001940                     	endif
  9937  001940                     	if	0	;tblptru may be non-zero
  9938  001940                     	endif
  9939  001940  0009               	tblrd		*+
  9940  001942  CFF5 F031          	movff	tablat,eval_poly@res
  9941  001946  0009               	tblrd		*+
  9942  001948  CFF5 F032          	movff	tablat,eval_poly@res+1
  9943  00194C  000A               	tblrd		*-
  9944  00194E  CFF5 F033          	movff	tablat,eval_poly@res+2
  9945  001952  D03E               	goto	i2l3140
  9946  001954                     i2l3138:
  9947  001954  C031  F010         	movff	eval_poly@res,___ftmul@f2
  9948  001958  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  9949  00195C  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  9950  001960  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  9951  001964  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  9952  001968  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  9953  00196C  EC58  F00A         	call	___ftmul	;wreg free
  9954  001970  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9955  001974  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9956  001978  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9957  00197C  0E00               	movlw	0
  9958  00197E  6E04               	movwf	i2___wmul@multiplicand+1,c
  9959  001980  0E03               	movlw	3
  9960  001982  6E03               	movwf	i2___wmul@multiplicand,c
  9961  001984  062D               	decf	eval_poly@n,f,c
  9962  001986  A0D8               	btfss	status,0,c
  9963  001988  062E               	decf	eval_poly@n+1,f,c
  9964  00198A  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9965  00198E  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9966  001992  ECE5  F012         	call	i2___wmul	;wreg free
  9967  001996  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9968  00199A  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9969  00199E  5001               	movf	?i2___wmul,w,c
  9970  0019A0  262F               	addwf	??_eval_poly,f,c
  9971  0019A2  5002               	movf	?i2___wmul+1,w,c
  9972  0019A4  2230               	addwfc	??_eval_poly+1,f,c
  9973  0019A6  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9974  0019AA  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9975  0019AE                     	if	0	;tblptru may be non-zero
  9976  0019AE                     	endif
  9977  0019AE                     	if	0	;tblptru may be non-zero
  9978  0019AE                     	endif
  9979  0019AE  0009               	tblrd		*+
  9980  0019B0  CFF5 F01F          	movff	tablat,___ftadd@f2
  9981  0019B4  0009               	tblrd		*+
  9982  0019B6  CFF5 F020          	movff	tablat,___ftadd@f2+1
  9983  0019BA  000A               	tblrd		*-
  9984  0019BC  CFF5 F021          	movff	tablat,___ftadd@f2+2
  9985  0019C0  EC8A  F005         	call	___ftadd	;wreg free
  9986  0019C4  C01C  F031         	movff	?___ftadd,eval_poly@res
  9987  0019C8  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  9988  0019CC  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  9989  0019D0                     i2l3140:
  9990  0019D0  502D               	movf	eval_poly@n,w,c
  9991  0019D2  102E               	iorwf	eval_poly@n+1,w,c
  9992  0019D4  A4D8               	btfss	status,2,c
  9993  0019D6  D7BE               	goto	i2l3138
  9994  0019D8  C031  F028         	movff	eval_poly@res,?_eval_poly
  9995  0019DC  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  9996  0019E0  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  9997  0019E4  0012               	return		;funcret
  9998  0019E6                     __end_of_eval_poly:
  9999                           	opt stack 0
 10000                           pclatu	equ	0xFFB
 10001                           pclath	equ	0xFFA
 10002                           tblptru	equ	0xFF8
 10003                           tblptrh	equ	0xFF7
 10004                           tblptrl	equ	0xFF6
 10005                           tablat	equ	0xFF5
 10006                           prodh	equ	0xFF4
 10007                           prodl	equ	0xFF3
 10008                           intcon	equ	0xFF2
 10009                           intcon2	equ	0xFF1
 10010                           intcon3	equ	0xFF0
 10011                           postinc0	equ	0xFEE
 10012                           fsr0h	equ	0xFEA
 10013                           fsr0l	equ	0xFE9
 10014                           wreg	equ	0xFE8
 10015                           fsr1h	equ	0xFE2
 10016                           fsr1l	equ	0xFE1
 10017                           indf2	equ	0xFDF
 10018                           postinc2	equ	0xFDE
 10019                           postdec2	equ	0xFDD
 10020                           fsr2h	equ	0xFDA
 10021                           fsr2l	equ	0xFD9
 10022                           status	equ	0xFD8
 10023                           
 10024 ;; *************** function i2___wmul *****************
 10025 ;; Defined at:
 10026 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;  multiplier      2    0[COMRAM] unsigned int 
 10029 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;  __wmul          2    4[COMRAM] unsigned int 
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  2    0[COMRAM] unsigned int 
 10034 ;; Registers used:
 10035 ;;		wreg, status,2, status,0, prodl, prodh
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10041 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;Total ram usage:        6 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; This function calls:
 10048 ;;		Nothing
 10049 ;; This function is called by:
 10050 ;;		_isr
 10051 ;;		_servo_rotate0
 10052 ;;		_eval_poly
 10053 ;;		i2_printf
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           	psect	text54
 10058  0025CA                     __ptext54:
 10059                           	opt stack 0
 10060  0025CA                     i2___wmul:
 10061                           	opt stack 24
 10062                           
 10063                           ;incstack = 0
 10064  0025CA  5001               	movf	i2___wmul@multiplier,w,c
 10065  0025CC  0203               	mulwf	i2___wmul@multiplicand,c
 10066  0025CE  CFF3 F005          	movff	prodl,i2___wmul@product
 10067  0025D2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10068  0025D6  5001               	movf	i2___wmul@multiplier,w,c
 10069  0025D8  0204               	mulwf	i2___wmul@multiplicand+1,c
 10070  0025DA  50F3               	movf	prodl,w,c
 10071  0025DC  2606               	addwf	i2___wmul@product+1,f,c
 10072  0025DE  5002               	movf	i2___wmul@multiplier+1,w,c
 10073  0025E0  0203               	mulwf	i2___wmul@multiplicand,c
 10074  0025E2  50F3               	movf	prodl,w,c
 10075  0025E4  2606               	addwf	i2___wmul@product+1,f,c
 10076  0025E6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10077  0025EA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10078  0025EE  0012               	return	
 10079  0025F0                     __end_ofi2___wmul:
 10080                           	opt stack 0
 10081                           pclatu	equ	0xFFB
 10082                           pclath	equ	0xFFA
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           intcon	equ	0xFF2
 10090                           intcon2	equ	0xFF1
 10091                           intcon3	equ	0xFF0
 10092                           postinc0	equ	0xFEE
 10093                           fsr0h	equ	0xFEA
 10094                           fsr0l	equ	0xFE9
 10095                           wreg	equ	0xFE8
 10096                           fsr1h	equ	0xFE2
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function ___ftmul *****************
 10106 ;; Defined at:
 10107 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;  f1              3   12[COMRAM] float 
 10110 ;;  f2              3   15[COMRAM] float 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 10113 ;;  sign            1   26[COMRAM] unsigned char 
 10114 ;;  cntr            1   25[COMRAM] unsigned char 
 10115 ;;  exp             1   21[COMRAM] unsigned char 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;                  3   12[COMRAM] float 
 10118 ;; Registers used:
 10119 ;;		wreg, status,2, status,0, cstack
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;Total ram usage:       15 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    1
 10132 ;; This function calls:
 10133 ;;		___ftpack
 10134 ;; This function is called by:
 10135 ;;		_dec_to_hex
 10136 ;;		_pow
 10137 ;;		_exp
 10138 ;;		_log
 10139 ;;		_eval_poly
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           	psect	text55
 10144  0014B0                     __ptext55:
 10145                           	opt stack 0
 10146  0014B0                     ___ftmul:
 10147                           	opt stack 20
 10148                           
 10149                           ;incstack = 0
 10150  0014B0  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 10151  0014B4  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10152  0014B6  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10153  0014B8  340E               	rlcf	___ftmul@f1+1,w,c
 10154  0014BA  3613               	rlcf	??___ftmul& (0+255),f,c
 10155  0014BC  E301               	bnc	u232_41
 10156  0014BE  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10157  0014C0                     u232_41:
 10158  0014C0  5013               	movf	??___ftmul,w,c
 10159  0014C2  6E16               	movwf	___ftmul@exp,c
 10160  0014C4  5016               	movf	___ftmul@exp,w,c
 10161  0014C6  A4D8               	btfss	status,2,c
 10162  0014C8  D007               	goto	i2l2888
 10163  0014CA  0E00               	movlw	0
 10164  0014CC  6E0D               	movwf	?___ftmul,c
 10165  0014CE  0E00               	movlw	0
 10166  0014D0  6E0E               	movwf	?___ftmul+1,c
 10167  0014D2  0E00               	movlw	0
 10168  0014D4  6E0F               	movwf	?___ftmul+2,c
 10169  0014D6  0012               	return	
 10170  0014D8                     i2l2888:
 10171  0014D8  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 10172  0014DC  6A14               	clrf	(??___ftmul+1)& (0+255),c
 10173  0014DE  6A15               	clrf	(??___ftmul+2)& (0+255),c
 10174  0014E0  3411               	rlcf	___ftmul@f2+1,w,c
 10175  0014E2  3613               	rlcf	??___ftmul& (0+255),f,c
 10176  0014E4  E301               	bnc	u234_41
 10177  0014E6  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 10178  0014E8                     u234_41:
 10179  0014E8  5013               	movf	??___ftmul,w,c
 10180  0014EA  6E1B               	movwf	___ftmul@sign,c
 10181  0014EC  501B               	movf	___ftmul@sign,w,c
 10182  0014EE  A4D8               	btfss	status,2,c
 10183  0014F0  D007               	goto	i2l2894
 10184  0014F2  0E00               	movlw	0
 10185  0014F4  6E0D               	movwf	?___ftmul,c
 10186  0014F6  0E00               	movlw	0
 10187  0014F8  6E0E               	movwf	?___ftmul+1,c
 10188  0014FA  0E00               	movlw	0
 10189  0014FC  6E0F               	movwf	?___ftmul+2,c
 10190  0014FE  0012               	return	
 10191  001500                     i2l2894:
 10192  001500  501B               	movf	___ftmul@sign,w,c
 10193  001502  0F7B               	addlw	123
 10194  001504  2616               	addwf	___ftmul@exp,f,c
 10195  001506  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 10196  00150A  5012               	movf	___ftmul@f2+2,w,c
 10197  00150C  1A1B               	xorwf	___ftmul@sign,f,c
 10198  00150E  0E80               	movlw	128
 10199  001510  161B               	andwf	___ftmul@sign,f,c
 10200  001512  8E0E               	bsf	___ftmul@f1+1,7,c
 10201  001514  8E11               	bsf	___ftmul@f2+1,7,c
 10202  001516  0EFF               	movlw	255
 10203  001518  1610               	andwf	___ftmul@f2,f,c
 10204  00151A  0EFF               	movlw	255
 10205  00151C  1611               	andwf	___ftmul@f2+1,f,c
 10206  00151E  0E00               	movlw	0
 10207  001520  1612               	andwf	___ftmul@f2+2,f,c
 10208  001522  0E00               	movlw	0
 10209  001524  6E17               	movwf	___ftmul@f3_as_product,c
 10210  001526  0E00               	movlw	0
 10211  001528  6E18               	movwf	___ftmul@f3_as_product+1,c
 10212  00152A  0E00               	movlw	0
 10213  00152C  6E19               	movwf	___ftmul@f3_as_product+2,c
 10214  00152E  0E07               	movlw	7
 10215  001530  6E1A               	movwf	___ftmul@cntr,c
 10216  001532                     i2l2908:
 10217  001532  A00D               	btfss	___ftmul@f1,0,c
 10218  001534  D006               	goto	i2l2912
 10219  001536  5010               	movf	___ftmul@f2,w,c
 10220  001538  2617               	addwf	___ftmul@f3_as_product,f,c
 10221  00153A  5011               	movf	___ftmul@f2+1,w,c
 10222  00153C  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10223  00153E  5012               	movf	___ftmul@f2+2,w,c
 10224  001540  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10225  001542                     i2l2912:
 10226  001542  90D8               	bcf	status,0,c
 10227  001544  320F               	rrcf	___ftmul@f1+2,f,c
 10228  001546  320E               	rrcf	___ftmul@f1+1,f,c
 10229  001548  320D               	rrcf	___ftmul@f1,f,c
 10230  00154A  90D8               	bcf	status,0,c
 10231  00154C  3610               	rlcf	___ftmul@f2,f,c
 10232  00154E  3611               	rlcf	___ftmul@f2+1,f,c
 10233  001550  3612               	rlcf	___ftmul@f2+2,f,c
 10234  001552  2E1A               	decfsz	___ftmul@cntr,f,c
 10235  001554  D7EE               	goto	i2l2908
 10236  001556  0E09               	movlw	9
 10237  001558  6E1A               	movwf	___ftmul@cntr,c
 10238  00155A                     i2l2918:
 10239  00155A  A00D               	btfss	___ftmul@f1,0,c
 10240  00155C  D006               	goto	i2l2922
 10241  00155E  5010               	movf	___ftmul@f2,w,c
 10242  001560  2617               	addwf	___ftmul@f3_as_product,f,c
 10243  001562  5011               	movf	___ftmul@f2+1,w,c
 10244  001564  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 10245  001566  5012               	movf	___ftmul@f2+2,w,c
 10246  001568  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 10247  00156A                     i2l2922:
 10248  00156A  90D8               	bcf	status,0,c
 10249  00156C  320F               	rrcf	___ftmul@f1+2,f,c
 10250  00156E  320E               	rrcf	___ftmul@f1+1,f,c
 10251  001570  320D               	rrcf	___ftmul@f1,f,c
 10252  001572  90D8               	bcf	status,0,c
 10253  001574  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 10254  001576  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 10255  001578  3217               	rrcf	___ftmul@f3_as_product,f,c
 10256  00157A  2E1A               	decfsz	___ftmul@cntr,f,c
 10257  00157C  D7EE               	goto	i2l2918
 10258  00157E  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10259  001582  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10260  001586  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10261  00158A  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 10262  00158E  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 10263  001592  EC0C  F00E         	call	___ftpack	;wreg free
 10264  001596  C001  F00D         	movff	?___ftpack,?___ftmul
 10265  00159A  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 10266  00159E  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 10267  0015A2  0012               	return	
 10268  0015A4                     __end_of___ftmul:
 10269                           	opt stack 0
 10270                           pclatu	equ	0xFFB
 10271                           pclath	equ	0xFFA
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           intcon2	equ	0xFF1
 10280                           intcon3	equ	0xFF0
 10281                           postinc0	equ	0xFEE
 10282                           fsr0h	equ	0xFEA
 10283                           fsr0l	equ	0xFE9
 10284                           wreg	equ	0xFE8
 10285                           fsr1h	equ	0xFE2
 10286                           fsr1l	equ	0xFE1
 10287                           indf2	equ	0xFDF
 10288                           postinc2	equ	0xFDE
 10289                           postdec2	equ	0xFDD
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function ___ftsub *****************
 10295 ;; Defined at:
 10296 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  f1              3   39[COMRAM] float 
 10299 ;;  f2              3   42[COMRAM] float 
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;                  3   39[COMRAM] float 
 10304 ;; Registers used:
 10305 ;;		wreg, status,2, status,0, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10311 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10315 ;;Total ram usage:        6 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    2
 10318 ;; This function calls:
 10319 ;;		___ftadd
 10320 ;; This function is called by:
 10321 ;;		_exp
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text56
 10326  0023C0                     __ptext56:
 10327                           	opt stack 0
 10328  0023C0                     ___ftsub:
 10329                           	opt stack 20
 10330                           
 10331                           ;incstack = 0
 10332  0023C0  502B               	movf	___ftsub@f2,w,c
 10333  0023C2  102C               	iorwf	___ftsub@f2+1,w,c
 10334  0023C4  102D               	iorwf	___ftsub@f2+2,w,c
 10335  0023C6  B4D8               	btfsc	status,2,c
 10336  0023C8  D006               	goto	i2l3092
 10337  0023CA  0E00               	movlw	0
 10338  0023CC  1A2B               	xorwf	___ftsub@f2,f,c
 10339  0023CE  0E00               	movlw	0
 10340  0023D0  1A2C               	xorwf	___ftsub@f2+1,f,c
 10341  0023D2  0E80               	movlw	128
 10342  0023D4  1A2D               	xorwf	___ftsub@f2+2,f,c
 10343  0023D6                     i2l3092:
 10344  0023D6  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 10345  0023DA  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 10346  0023DE  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 10347  0023E2  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 10348  0023E6  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 10349  0023EA  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 10350  0023EE  EC8A  F005         	call	___ftadd	;wreg free
 10351  0023F2  C01C  F028         	movff	?___ftadd,?___ftsub
 10352  0023F6  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 10353  0023FA  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 10354  0023FE  0012               	return	
 10355  002400                     __end_of___ftsub:
 10356                           	opt stack 0
 10357                           pclatu	equ	0xFFB
 10358                           pclath	equ	0xFFA
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           intcon2	equ	0xFF1
 10367                           intcon3	equ	0xFF0
 10368                           postinc0	equ	0xFEE
 10369                           fsr0h	equ	0xFEA
 10370                           fsr0l	equ	0xFE9
 10371                           wreg	equ	0xFE8
 10372                           fsr1h	equ	0xFE2
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function ___ftadd *****************
 10382 ;; Defined at:
 10383 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  f1              3   27[COMRAM] float 
 10386 ;;  f2              3   30[COMRAM] float 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;  exp1            1   38[COMRAM] unsigned char 
 10389 ;;  exp2            1   37[COMRAM] unsigned char 
 10390 ;;  sign            1   36[COMRAM] unsigned char 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  3   27[COMRAM] float 
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10400 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;Total ram usage:       12 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    1
 10407 ;; This function calls:
 10408 ;;		___ftpack
 10409 ;; This function is called by:
 10410 ;;		_dec_to_hex
 10411 ;;		___ftsub
 10412 ;;		_floor
 10413 ;;		_log
 10414 ;;		_eval_poly
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           	psect	text57
 10419  000B14                     __ptext57:
 10420                           	opt stack 0
 10421  000B14                     ___ftadd:
 10422                           	opt stack 20
 10423                           
 10424                           ;incstack = 0
 10425  000B14  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 10426  000B18  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10427  000B1A  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10428  000B1C  341D               	rlcf	___ftadd@f1+1,w,c
 10429  000B1E  3622               	rlcf	??___ftadd& (0+255),f,c
 10430  000B20  E301               	bnc	u211_41
 10431  000B22  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10432  000B24                     u211_41:
 10433  000B24  5022               	movf	??___ftadd,w,c
 10434  000B26  6E27               	movwf	___ftadd@exp1,c
 10435  000B28  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 10436  000B2C  6A23               	clrf	(??___ftadd+1)& (0+255),c
 10437  000B2E  6A24               	clrf	(??___ftadd+2)& (0+255),c
 10438  000B30  3420               	rlcf	___ftadd@f2+1,w,c
 10439  000B32  3622               	rlcf	??___ftadd& (0+255),f,c
 10440  000B34  E301               	bnc	u212_41
 10441  000B36  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 10442  000B38                     u212_41:
 10443  000B38  5022               	movf	??___ftadd,w,c
 10444  000B3A  6E26               	movwf	___ftadd@exp2,c
 10445  000B3C  5027               	movf	___ftadd@exp1,w,c
 10446  000B3E  B4D8               	btfsc	status,2,c
 10447  000B40  D00B               	goto	i2l662
 10448  000B42  5026               	movf	___ftadd@exp2,w,c
 10449  000B44  5C27               	subwf	___ftadd@exp1,w,c
 10450  000B46  B0D8               	btfsc	status,0,c
 10451  000B48  D00E               	goto	i2l2820
 10452  000B4A  5027               	movf	___ftadd@exp1,w,c
 10453  000B4C  0800               	sublw	0
 10454  000B4E  2426               	addwf	___ftadd@exp2,w,c
 10455  000B50  6E22               	movwf	??___ftadd& (0+255),c
 10456  000B52  0E18               	movlw	24
 10457  000B54  6422               	cpfsgt	??___ftadd,c
 10458  000B56  D007               	goto	i2l2820
 10459  000B58                     i2l662:
 10460  000B58  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 10461  000B5C  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 10462  000B60  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 10463  000B64  0012               	return	
 10464  000B66                     i2l2820:
 10465  000B66  5026               	movf	___ftadd@exp2,w,c
 10466  000B68  B4D8               	btfsc	status,2,c
 10467  000B6A  D00B               	goto	i2l666
 10468  000B6C  5027               	movf	___ftadd@exp1,w,c
 10469  000B6E  5C26               	subwf	___ftadd@exp2,w,c
 10470  000B70  B0D8               	btfsc	status,0,c
 10471  000B72  D00E               	goto	i2l2826
 10472  000B74  5026               	movf	___ftadd@exp2,w,c
 10473  000B76  0800               	sublw	0
 10474  000B78  2427               	addwf	___ftadd@exp1,w,c
 10475  000B7A  6E22               	movwf	??___ftadd& (0+255),c
 10476  000B7C  0E18               	movlw	24
 10477  000B7E  6422               	cpfsgt	??___ftadd,c
 10478  000B80  D007               	goto	i2l2826
 10479  000B82                     i2l666:
 10480  000B82  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 10481  000B86  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 10482  000B8A  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 10483  000B8E  0012               	return	
 10484  000B90                     i2l2826:
 10485  000B90  0E06               	movlw	6
 10486  000B92  6E25               	movwf	___ftadd@sign,c
 10487  000B94  BE1E               	btfsc	___ftadd@f1+2,7,c
 10488  000B96  8E25               	bsf	___ftadd@sign,7,c
 10489  000B98  BE21               	btfsc	___ftadd@f2+2,7,c
 10490  000B9A  8C25               	bsf	___ftadd@sign,6,c
 10491  000B9C  8E1D               	bsf	___ftadd@f1+1,7,c
 10492  000B9E  0EFF               	movlw	255
 10493  000BA0  161C               	andwf	___ftadd@f1,f,c
 10494  000BA2  0EFF               	movlw	255
 10495  000BA4  161D               	andwf	___ftadd@f1+1,f,c
 10496  000BA6  0E00               	movlw	0
 10497  000BA8  161E               	andwf	___ftadd@f1+2,f,c
 10498  000BAA  8E20               	bsf	___ftadd@f2+1,7,c
 10499  000BAC  0EFF               	movlw	255
 10500  000BAE  161F               	andwf	___ftadd@f2,f,c
 10501  000BB0  0EFF               	movlw	255
 10502  000BB2  1620               	andwf	___ftadd@f2+1,f,c
 10503  000BB4  0E00               	movlw	0
 10504  000BB6  1621               	andwf	___ftadd@f2+2,f,c
 10505  000BB8  5026               	movf	___ftadd@exp2,w,c
 10506  000BBA  5C27               	subwf	___ftadd@exp1,w,c
 10507  000BBC  B0D8               	btfsc	status,0,c
 10508  000BBE  D01B               	goto	i2l2852
 10509  000BC0                     i2l2842:
 10510  000BC0  90D8               	bcf	status,0,c
 10511  000BC2  361F               	rlcf	___ftadd@f2,f,c
 10512  000BC4  3620               	rlcf	___ftadd@f2+1,f,c
 10513  000BC6  3621               	rlcf	___ftadd@f2+2,f,c
 10514  000BC8  0626               	decf	___ftadd@exp2,f,c
 10515  000BCA  5027               	movf	___ftadd@exp1,w,c
 10516  000BCC  1826               	xorwf	___ftadd@exp2,w,c
 10517  000BCE  B4D8               	btfsc	status,2,c
 10518  000BD0  D00D               	goto	i2l2850
 10519  000BD2  0625               	decf	___ftadd@sign,f,c
 10520  000BD4  C025  F022         	movff	___ftadd@sign,??___ftadd
 10521  000BD8  0E07               	movlw	7
 10522  000BDA  1622               	andwf	??___ftadd,f,c
 10523  000BDC  B4D8               	btfsc	status,2,c
 10524  000BDE  D006               	goto	i2l2850
 10525  000BE0  D7EF               	goto	i2l2842
 10526  000BE2                     i2l2848:
 10527  000BE2  90D8               	bcf	status,0,c
 10528  000BE4  321E               	rrcf	___ftadd@f1+2,f,c
 10529  000BE6  321D               	rrcf	___ftadd@f1+1,f,c
 10530  000BE8  321C               	rrcf	___ftadd@f1,f,c
 10531  000BEA  2A27               	incf	___ftadd@exp1,f,c
 10532  000BEC                     i2l2850:
 10533  000BEC  5026               	movf	___ftadd@exp2,w,c
 10534  000BEE  1827               	xorwf	___ftadd@exp1,w,c
 10535  000BF0  B4D8               	btfsc	status,2,c
 10536  000BF2  D01F               	goto	i2l677
 10537  000BF4  D7F6               	goto	i2l2848
 10538  000BF6                     i2l2852:
 10539  000BF6  5027               	movf	___ftadd@exp1,w,c
 10540  000BF8  5C26               	subwf	___ftadd@exp2,w,c
 10541  000BFA  B0D8               	btfsc	status,0,c
 10542  000BFC  D01A               	goto	i2l677
 10543  000BFE                     i2l2854:
 10544  000BFE  90D8               	bcf	status,0,c
 10545  000C00  361C               	rlcf	___ftadd@f1,f,c
 10546  000C02  361D               	rlcf	___ftadd@f1+1,f,c
 10547  000C04  361E               	rlcf	___ftadd@f1+2,f,c
 10548  000C06  0627               	decf	___ftadd@exp1,f,c
 10549  000C08  5027               	movf	___ftadd@exp1,w,c
 10550  000C0A  1826               	xorwf	___ftadd@exp2,w,c
 10551  000C0C  B4D8               	btfsc	status,2,c
 10552  000C0E  D00D               	goto	i2l2862
 10553  000C10  0625               	decf	___ftadd@sign,f,c
 10554  000C12  C025  F022         	movff	___ftadd@sign,??___ftadd
 10555  000C16  0E07               	movlw	7
 10556  000C18  1622               	andwf	??___ftadd,f,c
 10557  000C1A  B4D8               	btfsc	status,2,c
 10558  000C1C  D006               	goto	i2l2862
 10559  000C1E  D7EF               	goto	i2l2854
 10560  000C20                     i2l2860:
 10561  000C20  90D8               	bcf	status,0,c
 10562  000C22  3221               	rrcf	___ftadd@f2+2,f,c
 10563  000C24  3220               	rrcf	___ftadd@f2+1,f,c
 10564  000C26  321F               	rrcf	___ftadd@f2,f,c
 10565  000C28  2A26               	incf	___ftadd@exp2,f,c
 10566  000C2A                     i2l2862:
 10567  000C2A  5026               	movf	___ftadd@exp2,w,c
 10568  000C2C  1827               	xorwf	___ftadd@exp1,w,c
 10569  000C2E  A4D8               	btfss	status,2,c
 10570  000C30  D7F7               	goto	i2l2860
 10571  000C32                     i2l677:
 10572  000C32  AE25               	btfss	___ftadd@sign,7,c
 10573  000C34  D00C               	goto	i2l686
 10574  000C36  0EFF               	movlw	255
 10575  000C38  1A1C               	xorwf	___ftadd@f1,f,c
 10576  000C3A  0EFF               	movlw	255
 10577  000C3C  1A1D               	xorwf	___ftadd@f1+1,f,c
 10578  000C3E  0EFF               	movlw	255
 10579  000C40  1A1E               	xorwf	___ftadd@f1+2,f,c
 10580  000C42  0E01               	movlw	1
 10581  000C44  261C               	addwf	___ftadd@f1,f,c
 10582  000C46  0E00               	movlw	0
 10583  000C48  221D               	addwfc	___ftadd@f1+1,f,c
 10584  000C4A  0E00               	movlw	0
 10585  000C4C  221E               	addwfc	___ftadd@f1+2,f,c
 10586  000C4E                     i2l686:
 10587  000C4E  AC25               	btfss	___ftadd@sign,6,c
 10588  000C50  D00C               	goto	i2l2868
 10589  000C52  0EFF               	movlw	255
 10590  000C54  1A1F               	xorwf	___ftadd@f2,f,c
 10591  000C56  0EFF               	movlw	255
 10592  000C58  1A20               	xorwf	___ftadd@f2+1,f,c
 10593  000C5A  0EFF               	movlw	255
 10594  000C5C  1A21               	xorwf	___ftadd@f2+2,f,c
 10595  000C5E  0E01               	movlw	1
 10596  000C60  261F               	addwf	___ftadd@f2,f,c
 10597  000C62  0E00               	movlw	0
 10598  000C64  2220               	addwfc	___ftadd@f2+1,f,c
 10599  000C66  0E00               	movlw	0
 10600  000C68  2221               	addwfc	___ftadd@f2+2,f,c
 10601  000C6A                     i2l2868:
 10602  000C6A  0E00               	movlw	0
 10603  000C6C  6E25               	movwf	___ftadd@sign,c
 10604  000C6E  501C               	movf	___ftadd@f1,w,c
 10605  000C70  261F               	addwf	___ftadd@f2,f,c
 10606  000C72  501D               	movf	___ftadd@f1+1,w,c
 10607  000C74  2220               	addwfc	___ftadd@f2+1,f,c
 10608  000C76  501E               	movf	___ftadd@f1+2,w,c
 10609  000C78  2221               	addwfc	___ftadd@f2+2,f,c
 10610  000C7A  AE21               	btfss	___ftadd@f2+2,7,c
 10611  000C7C  D00E               	goto	i2l2878
 10612  000C7E  0EFF               	movlw	255
 10613  000C80  1A1F               	xorwf	___ftadd@f2,f,c
 10614  000C82  0EFF               	movlw	255
 10615  000C84  1A20               	xorwf	___ftadd@f2+1,f,c
 10616  000C86  0EFF               	movlw	255
 10617  000C88  1A21               	xorwf	___ftadd@f2+2,f,c
 10618  000C8A  0E01               	movlw	1
 10619  000C8C  261F               	addwf	___ftadd@f2,f,c
 10620  000C8E  0E00               	movlw	0
 10621  000C90  2220               	addwfc	___ftadd@f2+1,f,c
 10622  000C92  0E00               	movlw	0
 10623  000C94  2221               	addwfc	___ftadd@f2+2,f,c
 10624  000C96  0E01               	movlw	1
 10625  000C98  6E25               	movwf	___ftadd@sign,c
 10626  000C9A                     i2l2878:
 10627  000C9A  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 10628  000C9E  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10629  000CA2  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10630  000CA6  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 10631  000CAA  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 10632  000CAE  EC0C  F00E         	call	___ftpack	;wreg free
 10633  000CB2  C001  F01C         	movff	?___ftpack,?___ftadd
 10634  000CB6  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 10635  000CBA  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 10636  000CBE  0012               	return	
 10637  000CC0                     __end_of___ftadd:
 10638                           	opt stack 0
 10639                           pclatu	equ	0xFFB
 10640                           pclath	equ	0xFFA
 10641                           tblptru	equ	0xFF8
 10642                           tblptrh	equ	0xFF7
 10643                           tblptrl	equ	0xFF6
 10644                           tablat	equ	0xFF5
 10645                           prodh	equ	0xFF4
 10646                           prodl	equ	0xFF3
 10647                           intcon	equ	0xFF2
 10648                           intcon2	equ	0xFF1
 10649                           intcon3	equ	0xFF0
 10650                           postinc0	equ	0xFEE
 10651                           fsr0h	equ	0xFEA
 10652                           fsr0l	equ	0xFE9
 10653                           wreg	equ	0xFE8
 10654                           fsr1h	equ	0xFE2
 10655                           fsr1l	equ	0xFE1
 10656                           indf2	equ	0xFDF
 10657                           postinc2	equ	0xFDE
 10658                           postdec2	equ	0xFDD
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function ___ftneg *****************
 10664 ;; Defined at:
 10665 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  f1              3    0[COMRAM] float 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  3    0[COMRAM] float 
 10672 ;; Registers used:
 10673 ;;		wreg, status,2, status,0
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10679 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;Total ram usage:        3 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; This function calls:
 10686 ;;		Nothing
 10687 ;; This function is called by:
 10688 ;;		_pow
 10689 ;;		_exp
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           	psect	text58
 10694  0025F0                     __ptext58:
 10695                           	opt stack 0
 10696  0025F0                     ___ftneg:
 10697                           	opt stack 22
 10698                           
 10699                           ;incstack = 0
 10700  0025F0  5001               	movf	___ftneg@f1,w,c
 10701  0025F2  1002               	iorwf	___ftneg@f1+1,w,c
 10702  0025F4  1003               	iorwf	___ftneg@f1+2,w,c
 10703  0025F6  B4D8               	btfsc	status,2,c
 10704  0025F8  D006               	goto	i2l719
 10705  0025FA  0E00               	movlw	0
 10706  0025FC  1A01               	xorwf	___ftneg@f1,f,c
 10707  0025FE  0E00               	movlw	0
 10708  002600  1A02               	xorwf	___ftneg@f1+1,f,c
 10709  002602  0E80               	movlw	128
 10710  002604  1A03               	xorwf	___ftneg@f1+2,f,c
 10711  002606                     i2l719:
 10712  002606  C001  F001         	movff	___ftneg@f1,?___ftneg
 10713  00260A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10714  00260E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10715  002612  0012               	return		;funcret
 10716  002614                     __end_of___ftneg:
 10717                           	opt stack 0
 10718                           pclatu	equ	0xFFB
 10719                           pclath	equ	0xFFA
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon2	equ	0xFF1
 10728                           intcon3	equ	0xFF0
 10729                           postinc0	equ	0xFEE
 10730                           fsr0h	equ	0xFEA
 10731                           fsr0l	equ	0xFE9
 10732                           wreg	equ	0xFE8
 10733                           fsr1h	equ	0xFE2
 10734                           fsr1l	equ	0xFE1
 10735                           indf2	equ	0xFDF
 10736                           postinc2	equ	0xFDE
 10737                           postdec2	equ	0xFDD
 10738                           fsr2h	equ	0xFDA
 10739                           fsr2l	equ	0xFD9
 10740                           status	equ	0xFD8
 10741                           
 10742 ;; *************** function ___ftdiv *****************
 10743 ;; Defined at:
 10744 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;  f1              3    8[COMRAM] float 
 10747 ;;  f2              3   11[COMRAM] float 
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;  f3              3   18[COMRAM] float 
 10750 ;;  sign            1   22[COMRAM] unsigned char 
 10751 ;;  exp             1   21[COMRAM] unsigned char 
 10752 ;;  cntr            1   17[COMRAM] unsigned char 
 10753 ;; Return value:  Size  Location     Type
 10754 ;;                  3    8[COMRAM] float 
 10755 ;; Registers used:
 10756 ;;		wreg, status,2, status,0, cstack
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10762 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10766 ;;Total ram usage:       15 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; Hardware stack levels required when called:    1
 10769 ;; This function calls:
 10770 ;;		___ftpack
 10771 ;; This function is called by:
 10772 ;;		_exp
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text59
 10777  0015A4                     __ptext59:
 10778                           	opt stack 0
 10779  0015A4                     ___ftdiv:
 10780                           	opt stack 21
 10781                           
 10782                           ;incstack = 0
 10783  0015A4  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 10784  0015A8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10785  0015AA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10786  0015AC  340A               	rlcf	___ftdiv@f1+1,w,c
 10787  0015AE  360F               	rlcf	??___ftdiv& (0+255),f,c
 10788  0015B0  E301               	bnc	u253_41
 10789  0015B2  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10790  0015B4                     u253_41:
 10791  0015B4  500F               	movf	??___ftdiv,w,c
 10792  0015B6  6E16               	movwf	___ftdiv@exp,c
 10793  0015B8  5016               	movf	___ftdiv@exp,w,c
 10794  0015BA  A4D8               	btfss	status,2,c
 10795  0015BC  D007               	goto	i2l3048
 10796  0015BE  0E00               	movlw	0
 10797  0015C0  6E09               	movwf	?___ftdiv,c
 10798  0015C2  0E00               	movlw	0
 10799  0015C4  6E0A               	movwf	?___ftdiv+1,c
 10800  0015C6  0E00               	movlw	0
 10801  0015C8  6E0B               	movwf	?___ftdiv+2,c
 10802  0015CA  0012               	return	
 10803  0015CC                     i2l3048:
 10804  0015CC  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 10805  0015D0  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10806  0015D2  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10807  0015D4  340D               	rlcf	___ftdiv@f2+1,w,c
 10808  0015D6  360F               	rlcf	??___ftdiv& (0+255),f,c
 10809  0015D8  E301               	bnc	u255_41
 10810  0015DA  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10811  0015DC                     u255_41:
 10812  0015DC  500F               	movf	??___ftdiv,w,c
 10813  0015DE  6E17               	movwf	___ftdiv@sign,c
 10814  0015E0  5017               	movf	___ftdiv@sign,w,c
 10815  0015E2  A4D8               	btfss	status,2,c
 10816  0015E4  D007               	goto	i2l3054
 10817  0015E6  0E00               	movlw	0
 10818  0015E8  6E09               	movwf	?___ftdiv,c
 10819  0015EA  0E00               	movlw	0
 10820  0015EC  6E0A               	movwf	?___ftdiv+1,c
 10821  0015EE  0E00               	movlw	0
 10822  0015F0  6E0B               	movwf	?___ftdiv+2,c
 10823  0015F2  0012               	return	
 10824  0015F4                     i2l3054:
 10825  0015F4  0E00               	movlw	0
 10826  0015F6  6E13               	movwf	___ftdiv@f3,c
 10827  0015F8  0E00               	movlw	0
 10828  0015FA  6E14               	movwf	___ftdiv@f3+1,c
 10829  0015FC  0E00               	movlw	0
 10830  0015FE  6E15               	movwf	___ftdiv@f3+2,c
 10831  001600  5017               	movf	___ftdiv@sign,w,c
 10832  001602  0F89               	addlw	137
 10833  001604  5E16               	subwf	___ftdiv@exp,f,c
 10834  001606  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 10835  00160A  500E               	movf	___ftdiv@f2+2,w,c
 10836  00160C  1A17               	xorwf	___ftdiv@sign,f,c
 10837  00160E  0E80               	movlw	128
 10838  001610  1617               	andwf	___ftdiv@sign,f,c
 10839  001612  8E0A               	bsf	___ftdiv@f1+1,7,c
 10840  001614  0EFF               	movlw	255
 10841  001616  1609               	andwf	___ftdiv@f1,f,c
 10842  001618  0EFF               	movlw	255
 10843  00161A  160A               	andwf	___ftdiv@f1+1,f,c
 10844  00161C  0E00               	movlw	0
 10845  00161E  160B               	andwf	___ftdiv@f1+2,f,c
 10846  001620  8E0D               	bsf	___ftdiv@f2+1,7,c
 10847  001622  0EFF               	movlw	255
 10848  001624  160C               	andwf	___ftdiv@f2,f,c
 10849  001626  0EFF               	movlw	255
 10850  001628  160D               	andwf	___ftdiv@f2+1,f,c
 10851  00162A  0E00               	movlw	0
 10852  00162C  160E               	andwf	___ftdiv@f2+2,f,c
 10853  00162E  0E18               	movlw	24
 10854  001630  6E12               	movwf	___ftdiv@cntr,c
 10855  001632                     i2l3074:
 10856  001632  90D8               	bcf	status,0,c
 10857  001634  3613               	rlcf	___ftdiv@f3,f,c
 10858  001636  3614               	rlcf	___ftdiv@f3+1,f,c
 10859  001638  3615               	rlcf	___ftdiv@f3+2,f,c
 10860  00163A  500C               	movf	___ftdiv@f2,w,c
 10861  00163C  5C09               	subwf	___ftdiv@f1,w,c
 10862  00163E  500D               	movf	___ftdiv@f2+1,w,c
 10863  001640  580A               	subwfb	___ftdiv@f1+1,w,c
 10864  001642  500E               	movf	___ftdiv@f2+2,w,c
 10865  001644  580B               	subwfb	___ftdiv@f1+2,w,c
 10866  001646  A0D8               	btfss	status,0,c
 10867  001648  D007               	goto	i2l697
 10868  00164A  500C               	movf	___ftdiv@f2,w,c
 10869  00164C  5E09               	subwf	___ftdiv@f1,f,c
 10870  00164E  500D               	movf	___ftdiv@f2+1,w,c
 10871  001650  5A0A               	subwfb	___ftdiv@f1+1,f,c
 10872  001652  500E               	movf	___ftdiv@f2+2,w,c
 10873  001654  5A0B               	subwfb	___ftdiv@f1+2,f,c
 10874  001656  8013               	bsf	___ftdiv@f3,0,c
 10875  001658                     i2l697:
 10876  001658  90D8               	bcf	status,0,c
 10877  00165A  3609               	rlcf	___ftdiv@f1,f,c
 10878  00165C  360A               	rlcf	___ftdiv@f1+1,f,c
 10879  00165E  360B               	rlcf	___ftdiv@f1+2,f,c
 10880  001660  2E12               	decfsz	___ftdiv@cntr,f,c
 10881  001662  D7E7               	goto	i2l3074
 10882  001664  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 10883  001668  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10884  00166C  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10885  001670  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 10886  001674  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 10887  001678  EC0C  F00E         	call	___ftpack	;wreg free
 10888  00167C  C001  F009         	movff	?___ftpack,?___ftdiv
 10889  001680  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 10890  001684  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 10891  001688  0012               	return	
 10892  00168A                     __end_of___ftdiv:
 10893                           	opt stack 0
 10894                           pclatu	equ	0xFFB
 10895                           pclath	equ	0xFFA
 10896                           tblptru	equ	0xFF8
 10897                           tblptrh	equ	0xFF7
 10898                           tblptrl	equ	0xFF6
 10899                           tablat	equ	0xFF5
 10900                           prodh	equ	0xFF4
 10901                           prodl	equ	0xFF3
 10902                           intcon	equ	0xFF2
 10903                           intcon2	equ	0xFF1
 10904                           intcon3	equ	0xFF0
 10905                           postinc0	equ	0xFEE
 10906                           fsr0h	equ	0xFEA
 10907                           fsr0l	equ	0xFE9
 10908                           wreg	equ	0xFE8
 10909                           fsr1h	equ	0xFE2
 10910                           fsr1l	equ	0xFE1
 10911                           indf2	equ	0xFDF
 10912                           postinc2	equ	0xFDE
 10913                           postdec2	equ	0xFDD
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function ___awtoft *****************
 10919 ;; Defined at:
 10920 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  c               2    8[COMRAM] int 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  sign            1   11[COMRAM] unsigned char 
 10925 ;; Return value:  Size  Location     Type
 10926 ;;                  3    8[COMRAM] float 
 10927 ;; Registers used:
 10928 ;;		wreg, status,2, status,0, cstack
 10929 ;; Tracked objects:
 10930 ;;		On entry : 0/0
 10931 ;;		On exit  : 0/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10934 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;Total ram usage:        4 bytes
 10939 ;; Hardware stack levels used:    1
 10940 ;; Hardware stack levels required when called:    1
 10941 ;; This function calls:
 10942 ;;		___ftpack
 10943 ;; This function is called by:
 10944 ;;		_dec_to_hex
 10945 ;;		_exp
 10946 ;;		_log
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text60
 10951  00243E                     __ptext60:
 10952                           	opt stack 0
 10953  00243E                     ___awtoft:
 10954                           	opt stack 21
 10955                           
 10956                           ;incstack = 0
 10957  00243E  0E00               	movlw	0
 10958  002440  6E0C               	movwf	___awtoft@sign,c
 10959  002442  AE0A               	btfss	___awtoft@c+1,7,c
 10960  002444  D006               	goto	i2l3104
 10961  002446  6C09               	negf	___awtoft@c,c
 10962  002448  1E0A               	comf	___awtoft@c+1,f,c
 10963  00244A  B0D8               	btfsc	status,0,c
 10964  00244C  2A0A               	incf	___awtoft@c+1,f,c
 10965  00244E  0E01               	movlw	1
 10966  002450  6E0C               	movwf	___awtoft@sign,c
 10967  002452                     i2l3104:
 10968  002452  C009  F001         	movff	___awtoft@c,___ftpack@arg
 10969  002456  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10970  00245A  6A03               	clrf	___ftpack@arg+2,c
 10971  00245C  0E8E               	movlw	142
 10972  00245E  6E04               	movwf	___ftpack@exp,c
 10973  002460  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 10974  002464  EC0C  F00E         	call	___ftpack	;wreg free
 10975  002468  C001  F009         	movff	?___ftpack,?___awtoft
 10976  00246C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 10977  002470  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 10978  002474  0012               	return	
 10979  002476                     __end_of___awtoft:
 10980                           	opt stack 0
 10981                           pclatu	equ	0xFFB
 10982                           pclath	equ	0xFFA
 10983                           tblptru	equ	0xFF8
 10984                           tblptrh	equ	0xFF7
 10985                           tblptrl	equ	0xFF6
 10986                           tablat	equ	0xFF5
 10987                           prodh	equ	0xFF4
 10988                           prodl	equ	0xFF3
 10989                           intcon	equ	0xFF2
 10990                           intcon2	equ	0xFF1
 10991                           intcon3	equ	0xFF0
 10992                           postinc0	equ	0xFEE
 10993                           fsr0h	equ	0xFEA
 10994                           fsr0l	equ	0xFE9
 10995                           wreg	equ	0xFE8
 10996                           fsr1h	equ	0xFE2
 10997                           fsr1l	equ	0xFE1
 10998                           indf2	equ	0xFDF
 10999                           postinc2	equ	0xFDE
 11000                           postdec2	equ	0xFDD
 11001                           fsr2h	equ	0xFDA
 11002                           fsr2l	equ	0xFD9
 11003                           status	equ	0xFD8
 11004                           
 11005 ;; *************** function ___lltoft *****************
 11006 ;; Defined at:
 11007 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  c               4    8[COMRAM] unsigned long 
 11010 ;; Auto vars:     Size  Location     Type
 11011 ;;  exp             1   16[COMRAM] unsigned char 
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  3    8[COMRAM] float 
 11014 ;; Registers used:
 11015 ;;		wreg, status,2, status,0, cstack
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;Total ram usage:        9 bytes
 11026 ;; Hardware stack levels used:    1
 11027 ;; Hardware stack levels required when called:    1
 11028 ;; This function calls:
 11029 ;;		___ftpack
 11030 ;; This function is called by:
 11031 ;;		_pow
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text61
 11036  002232                     __ptext61:
 11037                           	opt stack 0
 11038  002232                     ___lltoft:
 11039                           	opt stack 22
 11040                           
 11041                           ;incstack = 0
 11042  002232  0E8E               	movlw	142
 11043  002234  6E11               	movwf	___lltoft@exp,c
 11044  002236  D006               	goto	i2l3230
 11045  002238                     i2l3228:
 11046  002238  90D8               	bcf	status,0,c
 11047  00223A  320C               	rrcf	___lltoft@c+3,f,c
 11048  00223C  320B               	rrcf	___lltoft@c+2,f,c
 11049  00223E  320A               	rrcf	___lltoft@c+1,f,c
 11050  002240  3209               	rrcf	___lltoft@c,f,c
 11051  002242  2A11               	incf	___lltoft@exp,f,c
 11052  002244                     i2l3230:
 11053  002244  0E00               	movlw	0
 11054  002246  1409               	andwf	___lltoft@c,w,c
 11055  002248  6E0D               	movwf	??___lltoft& (0+255),c
 11056  00224A  0E00               	movlw	0
 11057  00224C  140A               	andwf	___lltoft@c+1,w,c
 11058  00224E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 11059  002250  0E00               	movlw	0
 11060  002252  140B               	andwf	___lltoft@c+2,w,c
 11061  002254  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 11062  002256  0EFF               	movlw	255
 11063  002258  140C               	andwf	___lltoft@c+3,w,c
 11064  00225A  6E10               	movwf	(??___lltoft+3)& (0+255),c
 11065  00225C  500D               	movf	??___lltoft,w,c
 11066  00225E  100E               	iorwf	??___lltoft+1,w,c
 11067  002260  100F               	iorwf	??___lltoft+2,w,c
 11068  002262  1010               	iorwf	??___lltoft+3,w,c
 11069  002264  A4D8               	btfss	status,2,c
 11070  002266  D7E8               	goto	i2l3228
 11071  002268  C009  F001         	movff	___lltoft@c,___ftpack@arg
 11072  00226C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 11073  002270  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 11074  002274  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 11075  002278  0E00               	movlw	0
 11076  00227A  6E05               	movwf	___ftpack@sign,c
 11077  00227C  EC0C  F00E         	call	___ftpack	;wreg free
 11078  002280  C001  F009         	movff	?___ftpack,?___lltoft
 11079  002284  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 11080  002288  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 11081  00228C  0012               	return	
 11082  00228E                     __end_of___lltoft:
 11083                           	opt stack 0
 11084                           pclatu	equ	0xFFB
 11085                           pclath	equ	0xFFA
 11086                           tblptru	equ	0xFF8
 11087                           tblptrh	equ	0xFF7
 11088                           tblptrl	equ	0xFF6
 11089                           tablat	equ	0xFF5
 11090                           prodh	equ	0xFF4
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           intcon2	equ	0xFF1
 11094                           intcon3	equ	0xFF0
 11095                           postinc0	equ	0xFEE
 11096                           fsr0h	equ	0xFEA
 11097                           fsr0l	equ	0xFE9
 11098                           wreg	equ	0xFE8
 11099                           fsr1h	equ	0xFE2
 11100                           fsr1l	equ	0xFE1
 11101                           indf2	equ	0xFDF
 11102                           postinc2	equ	0xFDE
 11103                           postdec2	equ	0xFDD
 11104                           fsr2h	equ	0xFDA
 11105                           fsr2l	equ	0xFD9
 11106                           status	equ	0xFD8
 11107                           
 11108 ;; *************** function ___ftpack *****************
 11109 ;; Defined at:
 11110 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;  arg             3    0[COMRAM] unsigned um
 11113 ;;  exp             1    3[COMRAM] unsigned char 
 11114 ;;  sign            1    4[COMRAM] unsigned char 
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;		None
 11117 ;; Return value:  Size  Location     Type
 11118 ;;                  3    0[COMRAM] float 
 11119 ;; Registers used:
 11120 ;;		wreg, status,2, status,0
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11126 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;Total ram usage:        8 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		___altoft
 11136 ;;		___awtoft
 11137 ;;		___ftadd
 11138 ;;		___ftdiv
 11139 ;;		___ftmul
 11140 ;;		___lltoft
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           	psect	text62
 11145  001C18                     __ptext62:
 11146                           	opt stack 0
 11147  001C18                     ___ftpack:
 11148                           	opt stack 20
 11149                           
 11150                           ;incstack = 0
 11151  001C18  5004               	movf	___ftpack@exp,w,c
 11152  001C1A  B4D8               	btfsc	status,2,c
 11153  001C1C  D005               	goto	i2l2764
 11154  001C1E  5001               	movf	___ftpack@arg,w,c
 11155  001C20  1002               	iorwf	___ftpack@arg+1,w,c
 11156  001C22  1003               	iorwf	___ftpack@arg+2,w,c
 11157  001C24  A4D8               	btfss	status,2,c
 11158  001C26  D00C               	goto	i2l2770
 11159  001C28                     i2l2764:
 11160  001C28  0E00               	movlw	0
 11161  001C2A  6E01               	movwf	?___ftpack,c
 11162  001C2C  0E00               	movlw	0
 11163  001C2E  6E02               	movwf	?___ftpack+1,c
 11164  001C30  0E00               	movlw	0
 11165  001C32  6E03               	movwf	?___ftpack+2,c
 11166  001C34  0012               	return	
 11167  001C36                     i2l2768:
 11168  001C36  2A04               	incf	___ftpack@exp,f,c
 11169  001C38  90D8               	bcf	status,0,c
 11170  001C3A  3203               	rrcf	___ftpack@arg+2,f,c
 11171  001C3C  3202               	rrcf	___ftpack@arg+1,f,c
 11172  001C3E  3201               	rrcf	___ftpack@arg,f,c
 11173  001C40                     i2l2770:
 11174  001C40  0E00               	movlw	0
 11175  001C42  1401               	andwf	___ftpack@arg,w,c
 11176  001C44  6E06               	movwf	??___ftpack& (0+255),c
 11177  001C46  0E00               	movlw	0
 11178  001C48  1402               	andwf	___ftpack@arg+1,w,c
 11179  001C4A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11180  001C4C  0EFE               	movlw	254
 11181  001C4E  1403               	andwf	___ftpack@arg+2,w,c
 11182  001C50  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11183  001C52  5006               	movf	??___ftpack,w,c
 11184  001C54  1007               	iorwf	??___ftpack+1,w,c
 11185  001C56  1008               	iorwf	??___ftpack+2,w,c
 11186  001C58  B4D8               	btfsc	status,2,c
 11187  001C5A  D00C               	goto	i2l2776
 11188  001C5C  D7EC               	goto	i2l2768
 11189  001C5E                     i2l2772:
 11190  001C5E  2A04               	incf	___ftpack@exp,f,c
 11191  001C60  0E01               	movlw	1
 11192  001C62  2601               	addwf	___ftpack@arg,f,c
 11193  001C64  0E00               	movlw	0
 11194  001C66  2202               	addwfc	___ftpack@arg+1,f,c
 11195  001C68  0E00               	movlw	0
 11196  001C6A  2203               	addwfc	___ftpack@arg+2,f,c
 11197  001C6C  90D8               	bcf	status,0,c
 11198  001C6E  3203               	rrcf	___ftpack@arg+2,f,c
 11199  001C70  3202               	rrcf	___ftpack@arg+1,f,c
 11200  001C72  3201               	rrcf	___ftpack@arg,f,c
 11201  001C74                     i2l2776:
 11202  001C74  0E00               	movlw	0
 11203  001C76  1401               	andwf	___ftpack@arg,w,c
 11204  001C78  6E06               	movwf	??___ftpack& (0+255),c
 11205  001C7A  0E00               	movlw	0
 11206  001C7C  1402               	andwf	___ftpack@arg+1,w,c
 11207  001C7E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11208  001C80  0EFF               	movlw	255
 11209  001C82  1403               	andwf	___ftpack@arg+2,w,c
 11210  001C84  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11211  001C86  5006               	movf	??___ftpack,w,c
 11212  001C88  1007               	iorwf	??___ftpack+1,w,c
 11213  001C8A  1008               	iorwf	??___ftpack+2,w,c
 11214  001C8C  B4D8               	btfsc	status,2,c
 11215  001C8E  D006               	goto	i2l2780
 11216  001C90  D7E6               	goto	i2l2772
 11217  001C92                     i2l2778:
 11218  001C92  0604               	decf	___ftpack@exp,f,c
 11219  001C94  90D8               	bcf	status,0,c
 11220  001C96  3601               	rlcf	___ftpack@arg,f,c
 11221  001C98  3602               	rlcf	___ftpack@arg+1,f,c
 11222  001C9A  3603               	rlcf	___ftpack@arg+2,f,c
 11223  001C9C                     i2l2780:
 11224  001C9C  BE02               	btfsc	___ftpack@arg+1,7,c
 11225  001C9E  D003               	goto	i2l639
 11226  001CA0  0E02               	movlw	2
 11227  001CA2  6004               	cpfslt	___ftpack@exp,c
 11228  001CA4  D7F6               	goto	i2l2778
 11229  001CA6                     i2l639:
 11230  001CA6  A004               	btfss	___ftpack@exp,0,c
 11231  001CA8  9E02               	bcf	___ftpack@arg+1,7,c
 11232  001CAA  90D8               	bcf	status,0,c
 11233  001CAC  3204               	rrcf	___ftpack@exp,f,c
 11234  001CAE  5004               	movf	___ftpack@exp,w,c
 11235  001CB0  1203               	iorwf	___ftpack@arg+2,f,c
 11236  001CB2  5005               	movf	___ftpack@sign,w,c
 11237  001CB4  A4D8               	btfss	status,2,c
 11238  001CB6  8E03               	bsf	___ftpack@arg+2,7,c
 11239  001CB8  C001  F001         	movff	___ftpack@arg,?___ftpack
 11240  001CBC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11241  001CC0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11242  001CC4  0012               	return	
 11243  001CC6                     __end_of___ftpack:
 11244                           	opt stack 0
 11245                           pclatu	equ	0xFFB
 11246                           pclath	equ	0xFFA
 11247                           tblptru	equ	0xFF8
 11248                           tblptrh	equ	0xFF7
 11249                           tblptrl	equ	0xFF6
 11250                           tablat	equ	0xFF5
 11251                           prodh	equ	0xFF4
 11252                           prodl	equ	0xFF3
 11253                           intcon	equ	0xFF2
 11254                           intcon2	equ	0xFF1
 11255                           intcon3	equ	0xFF0
 11256                           postinc0	equ	0xFEE
 11257                           fsr0h	equ	0xFEA
 11258                           fsr0l	equ	0xFE9
 11259                           wreg	equ	0xFE8
 11260                           fsr1h	equ	0xFE2
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function ___awdiv *****************
 11270 ;; Defined at:
 11271 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;  dividend        2    6[COMRAM] int 
 11274 ;;  divisor         2    8[COMRAM] int 
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  quotient        2   12[COMRAM] int 
 11277 ;;  sign            1   11[COMRAM] unsigned char 
 11278 ;;  counter         1   10[COMRAM] unsigned char 
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  2    6[COMRAM] int 
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;Total ram usage:        8 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; This function calls:
 11295 ;;		Nothing
 11296 ;; This function is called by:
 11297 ;;		_dec_to_hex
 11298 ;;		_servo_rotate0
 11299 ;;		_servo_rotate1
 11300 ;;		_servo_rotate2
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text63
 11305  001F34                     __ptext63:
 11306                           	opt stack 0
 11307  001F34                     ___awdiv:
 11308                           	opt stack 24
 11309                           
 11310                           ;incstack = 0
 11311  001F34  0E00               	movlw	0
 11312  001F36  6E0C               	movwf	___awdiv@sign,c
 11313  001F38  AE0A               	btfss	___awdiv@divisor+1,7,c
 11314  001F3A  D006               	goto	i2l3572
 11315  001F3C  6C09               	negf	___awdiv@divisor,c
 11316  001F3E  1E0A               	comf	___awdiv@divisor+1,f,c
 11317  001F40  B0D8               	btfsc	status,0,c
 11318  001F42  2A0A               	incf	___awdiv@divisor+1,f,c
 11319  001F44  0E01               	movlw	1
 11320  001F46  6E0C               	movwf	___awdiv@sign,c
 11321  001F48                     i2l3572:
 11322  001F48  AE08               	btfss	___awdiv@dividend+1,7,c
 11323  001F4A  D006               	goto	i2l3578
 11324  001F4C  6C07               	negf	___awdiv@dividend,c
 11325  001F4E  1E08               	comf	___awdiv@dividend+1,f,c
 11326  001F50  B0D8               	btfsc	status,0,c
 11327  001F52  2A08               	incf	___awdiv@dividend+1,f,c
 11328  001F54  0E01               	movlw	1
 11329  001F56  1A0C               	xorwf	___awdiv@sign,f,c
 11330  001F58                     i2l3578:
 11331  001F58  0E00               	movlw	0
 11332  001F5A  6E0E               	movwf	___awdiv@quotient+1,c
 11333  001F5C  0E00               	movlw	0
 11334  001F5E  6E0D               	movwf	___awdiv@quotient,c
 11335  001F60  5009               	movf	___awdiv@divisor,w,c
 11336  001F62  100A               	iorwf	___awdiv@divisor+1,w,c
 11337  001F64  B4D8               	btfsc	status,2,c
 11338  001F66  D01C               	goto	i2l3600
 11339  001F68  0E01               	movlw	1
 11340  001F6A  6E0B               	movwf	___awdiv@counter,c
 11341  001F6C  D004               	goto	i2l3586
 11342  001F6E                     i2l3584:
 11343  001F6E  90D8               	bcf	status,0,c
 11344  001F70  3609               	rlcf	___awdiv@divisor,f,c
 11345  001F72  360A               	rlcf	___awdiv@divisor+1,f,c
 11346  001F74  2A0B               	incf	___awdiv@counter,f,c
 11347  001F76                     i2l3586:
 11348  001F76  AE0A               	btfss	___awdiv@divisor+1,7,c
 11349  001F78  D7FA               	goto	i2l3584
 11350  001F7A                     i2l3588:
 11351  001F7A  90D8               	bcf	status,0,c
 11352  001F7C  360D               	rlcf	___awdiv@quotient,f,c
 11353  001F7E  360E               	rlcf	___awdiv@quotient+1,f,c
 11354  001F80  5009               	movf	___awdiv@divisor,w,c
 11355  001F82  5C07               	subwf	___awdiv@dividend,w,c
 11356  001F84  500A               	movf	___awdiv@divisor+1,w,c
 11357  001F86  5808               	subwfb	___awdiv@dividend+1,w,c
 11358  001F88  A0D8               	btfss	status,0,c
 11359  001F8A  D005               	goto	i2l3596
 11360  001F8C  5009               	movf	___awdiv@divisor,w,c
 11361  001F8E  5E07               	subwf	___awdiv@dividend,f,c
 11362  001F90  500A               	movf	___awdiv@divisor+1,w,c
 11363  001F92  5A08               	subwfb	___awdiv@dividend+1,f,c
 11364  001F94  800D               	bsf	___awdiv@quotient,0,c
 11365  001F96                     i2l3596:
 11366  001F96  90D8               	bcf	status,0,c
 11367  001F98  320A               	rrcf	___awdiv@divisor+1,f,c
 11368  001F9A  3209               	rrcf	___awdiv@divisor,f,c
 11369  001F9C  2E0B               	decfsz	___awdiv@counter,f,c
 11370  001F9E  D7ED               	goto	i2l3588
 11371  001FA0                     i2l3600:
 11372  001FA0  500C               	movf	___awdiv@sign,w,c
 11373  001FA2  B4D8               	btfsc	status,2,c
 11374  001FA4  D004               	goto	i2l3604
 11375  001FA6  6C0D               	negf	___awdiv@quotient,c
 11376  001FA8  1E0E               	comf	___awdiv@quotient+1,f,c
 11377  001FAA  B0D8               	btfsc	status,0,c
 11378  001FAC  2A0E               	incf	___awdiv@quotient+1,f,c
 11379  001FAE                     i2l3604:
 11380  001FAE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11381  001FB2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11382  001FB6  0012               	return	
 11383  001FB8                     __end_of___awdiv:
 11384                           	opt stack 0
 11385                           pclatu	equ	0xFFB
 11386                           pclath	equ	0xFFA
 11387                           tblptru	equ	0xFF8
 11388                           tblptrh	equ	0xFF7
 11389                           tblptrl	equ	0xFF6
 11390                           tablat	equ	0xFF5
 11391                           prodh	equ	0xFF4
 11392                           prodl	equ	0xFF3
 11393                           intcon	equ	0xFF2
 11394                           intcon2	equ	0xFF1
 11395                           intcon3	equ	0xFF0
 11396                           postinc0	equ	0xFEE
 11397                           fsr0h	equ	0xFEA
 11398                           fsr0l	equ	0xFE9
 11399                           wreg	equ	0xFE8
 11400                           fsr1h	equ	0xFE2
 11401                           fsr1l	equ	0xFE1
 11402                           indf2	equ	0xFDF
 11403                           postinc2	equ	0xFDE
 11404                           postdec2	equ	0xFDD
 11405                           fsr2h	equ	0xFDA
 11406                           fsr2l	equ	0xFD9
 11407                           status	equ	0xFD8
 11408                           pclatu	equ	0xFFB
 11409                           pclath	equ	0xFFA
 11410                           tblptru	equ	0xFF8
 11411                           tblptrh	equ	0xFF7
 11412                           tblptrl	equ	0xFF6
 11413                           tablat	equ	0xFF5
 11414                           prodh	equ	0xFF4
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           intcon2	equ	0xFF1
 11418                           intcon3	equ	0xFF0
 11419                           postinc0	equ	0xFEE
 11420                           fsr0h	equ	0xFEA
 11421                           fsr0l	equ	0xFE9
 11422                           wreg	equ	0xFE8
 11423                           fsr1h	equ	0xFE2
 11424                           fsr1l	equ	0xFE1
 11425                           indf2	equ	0xFDF
 11426                           postinc2	equ	0xFDE
 11427                           postdec2	equ	0xFDD
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432                           	psect	rparam
 11433  0000                     pclatu	equ	0xFFB
 11434                           pclath	equ	0xFFA
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           intcon3	equ	0xFF0
 11444                           postinc0	equ	0xFEE
 11445                           fsr0h	equ	0xFEA
 11446                           fsr0l	equ	0xFE9
 11447                           wreg	equ	0xFE8
 11448                           fsr1h	equ	0xFE2
 11449                           fsr1l	equ	0xFE1
 11450                           indf2	equ	0xFDF
 11451                           postinc2	equ	0xFDE
 11452                           postdec2	equ	0xFDD
 11453                           fsr2h	equ	0xFDA
 11454                           fsr2l	equ	0xFD9
 11455                           status	equ	0xFD8
 11456                           
 11457                           	psect	temp
 11458  00007E                     btemp:
 11459                           	opt stack 0
 11460  00007E                     	ds	1
 11461  0000                     int$flags	set	btemp
 11462                           pclatu	equ	0xFFB
 11463                           pclath	equ	0xFFA
 11464                           tblptru	equ	0xFF8
 11465                           tblptrh	equ	0xFF7
 11466                           tblptrl	equ	0xFF6
 11467                           tablat	equ	0xFF5
 11468                           prodh	equ	0xFF4
 11469                           prodl	equ	0xFF3
 11470                           intcon	equ	0xFF2
 11471                           intcon2	equ	0xFF1
 11472                           intcon3	equ	0xFF0
 11473                           postinc0	equ	0xFEE
 11474                           fsr0h	equ	0xFEA
 11475                           fsr0l	equ	0xFE9
 11476                           wreg	equ	0xFE8
 11477                           fsr1h	equ	0xFE2
 11478                           fsr1l	equ	0xFE1
 11479                           indf2	equ	0xFDF
 11480                           postinc2	equ	0xFDE
 11481                           postdec2	equ	0xFDD
 11482                           fsr2h	equ	0xFDA
 11483                           fsr2l	equ	0xFD9
 11484                           status	equ	0xFD8


Data Sizes:
    Strings     450
    Constant    99
    Data        2
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     54      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[25]), STR_21(CODE[24]), 
		 -> STR_20(CODE[22]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate0->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   35422
                                             52 BANK0      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4475
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4475
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    5630
                                             50 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    10    10      0    1155
                                             19 BANK0     10    10      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4475
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    5492
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    4561
                                             50 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4899
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4340
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     925
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0     904
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     904
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   74963
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  10    10      0     429
                                              3 COMRAM    10    10      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    2172
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2    1570
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69759
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58091
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18958
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31526
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8335
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     812
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      4E       5       60.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      34        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 23:06:24 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 26EE            i2_I2C_Master_Write 26CC  
               ___altoft@sign 0040                            l34 2664                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 0092            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l304 264A                           l377 0130                           l822 2026  
                         l832 2168                           l769 1B52                  __CFG_CPB$OFF 000000  
                         _PEN 007E2A                  __CFG_CPD$OFF 000000                           _SEN 007E28  
                         _PSA 007EAB           ?i2_I2C_Master_Start 0001           ?i2_I2C_Master_Write 0002  
                         _exp 0930                           _log 109C                           _isr 0008  
                         _pow 0CC0                           _ptr 007A                  ___awmod@sign 0095  
                         prod 000FF3                           wreg 000FE8                  ?_bottle_time 00B2  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0012                  ___ftdiv@sign 0017  
                __CFG_WDT$OFF 000000                          l3216 259A                          l3400 0034  
                        l3242 1FD6                          l3402 0046                          l3244 1FE2  
                        l3420 00F8                          l3412 0080                          l3254 2018  
                        l3246 1FE8                          l3270 215A                          l3262 2124  
                        l3510 0334                          l3502 02CE                          l3406 0050  
                        l3264 2130                          l3520 039C                          l3440 0184  
                        l3424 00FE                          l3266 2136                          l3506 02E2  
                        l3442 018A                          l3522 03A8                          l3370 0FBA  
                        l4170 1238                          l4162 1220                          l3620 1D9E  
                        l3508 02E8                          l3516 0382                          l3436 0168  
                        l4172 123E                          l4164 1226                          l4180 12A2  
                        l3518 0394                          l3454 01C0                          l3470 01FC  
                        l3198 2572                          l3374 0FD0                          l4174 1244  
                        l4166 122C                          l3640 1E0A                          l3632 1DE8  
                        l3624 1DB2                          l3616 1D8E                          l3456 01C6  
                        l3472 020E                          l3384 1042                          l4168 1232  
                        l3650 1AD6                          l3626 1DBE                          l3490 028C  
                        l3482 0268                          l3802 1BAA                          l4178 1274  
                        l3652 1AE6                          l3628 1DC4                          l3636 1DF6  
                        l3484 0272                          l3396 0020                          l3662 1B40  
                        l3654 1AEC                          l3478 0230                          l3496 02A8  
                        l3832 187E                          l3808 1BCC                          l3816 1BEE  
                        l3498 02B4                          l3842 18A8                          l3852 0E34  
                        l3836 1888                          l3870 0EBE                          l3790 1B66  
                        l3864 0E90                          l3882 0F1A                          l3858 0E62  
                        l3876 0EEC                          ?_exp 0049                          ?_log 0034  
                        l3888 0F3A                          ?_isr 0001                          ?_pow 0052  
          i2_read_colorsensor 1768                          STR_1 FFDC                          STR_2 FF02  
                        STR_3 FFEA                          STR_4 FE9B                          STR_5 FEB2  
                        STR_6 FF24                          STR_7 FF13                          STR_8 FF68  
                        STR_9 FF57                          _T0CS 007EAD                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4007 12B0                          u4017 22E8  
                        u4027 2324                          u4037 2192                          u2710 2570  
                        u4047 219A                          u3505 2202                          u4057 21C4  
                        u4067 21CC                          _RCEN 007E2B                          i2l34 2678  
                        _TMR0 000FD6                          _RSEN 007E29                          _main 11B6  
                ___ftpack@arg 0001                          _keys FDD9                  ___ftpack@exp 0004  
                        _time 00BE                          fsr0h 000FEA                          fsr1h 000FE2  
          i2___lwdiv@quotient 0005                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 007E                          exp@x 0049                          log@x 0034  
                        isr@i 0075          ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004  
                        pow@x 0052                          pow@y 0055                          prodh 000FF4  
                        prodl 000FF3                          start 000E           ?i2_read_colorsensor 0001  
               __CFG_IESO$OFF 000000               __end_ofi2_putch 26B6                 __CFG_MCLRE$ON 000000  
                ___ftmul@cntr 001A                  ___param_bank 000000                  ___ftmul@sign 001B  
                 i2_lcdNibble 2330                 ?_bottle_count 0001                  ___fttol@exp1 0036  
                       ??_exp 004C                         ??_log 0037                  ___fttol@lval 0032  
                       ??_isr 0080                         ??_pow 0058              ?_I2C_Master_Init 009D  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001  
                       ?_main 0001                         _ACKEN 007E2C                         _ACKDT 007E2D  
             __end_of___awdiv 1FB8               __end_of___ftadd 0CC0                         STR_10 FF46  
                       STR_11 FF35                         STR_12 FF79                         STR_20 FEC9  
                       STR_13 FF9B                         STR_21 FE55                         STR_14 FF8A  
                       STR_22 FE3C                         STR_23 FFBD                         STR_15 FFAC  
                       STR_16 FFF4                         STR_24 FFCD                         STR_25 FEF1  
                       STR_17 FE84                         STR_18 FEDF                         STR_19 FE6D  
             __end_of___awmod 1E14               __end_of___ftdiv 168A               __end_of___ftneg 2614  
             __end_of___lldiv 1B64               __end_of___ftmul 15A4               ___awdiv@divisor 0009  
             __end_of___ftsub 2400               __end_of___fttol 14B0                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA               __end_of___lwdiv 2030  
             __end_of___lwmod 2172                         i2l312 1D22                         i2l225 0898  
                       i2l315 1D46                         i2l228 0894                         i2l229 0724  
                       i2l318 1D70                         i2l249 08F4                         i2l377 04B2  
                       i2l662 0B58                         i2l822 22D6                         i2l639 1CA6  
                       i2l719 2606                         i2l832 23B6                         i2l666 0B82  
                       i2l677 0C32                         i2l686 0C4E                         i2l854 0CF6  
                       i2l697 1658                         i2l859 0E24               ___awdiv@counter 000B  
        ??i2_read_colorsensor 0004                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96               ??_servo_rotate0 0011                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 009B  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 26AA                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2330                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 000C               __end_of_dpowers FDF4  
                       _color 00B6                         _floor 168A                         _etime 00C5  
                       _ldexp 19E6                         _frexp 1E14                         _errno 0078  
             __end_of_isdigit 25A4                 ___ftpack@sign 0005                         _putch 268A  
                       _stime 00C9                         pclath 000FFA                         tablat 000FF5  
                       pow@yi 005F               __end_of_timeset FE03              __end_ofi2___wmul 25F0  
             __end_of_standby 24AC                         status 000FD8                __CFG_PBADEN$ON 000000  
               i2printf@width 001A                   exp@exponent 004F              __end_ofi2_printf 06D2  
          __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042                   ldexp@newexp 0037  
             __initialization 2400                   log@exponent 0037            __size_ofi2_lcdInst 000C  
             ??_emergencystop 00B2                ??_bottle_count 00B2                  __end_of_main 12C0  
                __end_of_keys FDEA                    i2printf@ap 0014            __size_ofi2_isdigit 001E  
                      ??_main 00B4                 ___fttol@sign1 0031                 __activetblptr 000002  
           ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0091                servo_rotate0@i 0015  
              servo_rotate0@j 0017            ??_I2C_Master_Start 0091                        _ADCON0 000FC2  
                      _ADCON1 000FC1            ??_I2C_Master_Write 0093                        ?_floor 0041  
                      ?_ldexp 0034                        ?_frexp 0001              __end_of___altoft 20A8  
                      _T08BIT 007EAE              ___awdiv@dividend 0007               i2lcdNibble@data 0002  
            __end_of___awtoft 2476                        ?_putch 0001              __end_of___ftpack 1CC6  
             i2lcdNibble@temp 0001              __end_of___lltoft 228E                        _INT1IE 007F83  
                      _INT1IF 007F80                        i2l1017 09E2                        i2l1018 0B06  
                      i2l1028 175A                        i2l3002 1E3C                        u211_41 0B24  
                      i2l3104 2452                        i2l4000 03E0                        i2l3130 16E0  
                      i2l3122 16B8                        i2l4002 03EE                        i2l3140 19D0  
                      i2l4020 0480                        i2l4012 0422                        u212_41 0B38  
                      i2l3230 2244                        i2l3054 15F4                        i2l3126 16C6  
                      i2l3302 0948                        i2l4110 0654                        i2l4102 05F8  
                      i2l4006 03F4                        i2l3048 15CC                        i2l4120 06B0  
                      i2l4040 04FA                        i2l4024 0484                        i2l4200 0746  
                      i2l3074 1632                        i2l3138 1954                        i2l3314 09B4  
                      i2l4106 060A                        i2l4042 04FE                        i2l4122 06B8  
                      i2l4202 074E                        i2l3228 2238                        i2l3092 23D6  
                      i2l3172 1A70                        i2l3156 1A42                        i2l3148 19FE  
                      i2l3308 097E                        i2l4108 0610                        i2l4116 069A  
                      i2l4036 04E0                        i2l4118 06AA                        i2l4054 052A  
                      i2l4070 055A                        i2l4230 081E                        i2l4214 0800  
                      i2l4206 075A                        i2l3600 1FA0                        i2l3168 1A64  
                      i2l3336 0ADC                        i2l3280 10B6                        i2l4056 052E  
                      i2l4072 056A                        i2l4240 0842                        i2l4208 0764  
                      i2l4090 05C6                        i2l4082 05A8                        i2l4242 0850  
                      i2l4218 0804                        i2l3604 1FAE                        i2l2820 0B66  
                      i2l2804 2052                        i2l3540 0D1C                        i2l4084 05B0  
                      i2l2806 205E                        i2l3286 10D6                        i2l3534 0D04  
                      i2l4078 0584                        i2l4270 08D6                        i2l4238 0834  
                      i2l4246 0856                        i2l2912 1542                        i2l3552 0DA0  
                      i2l3704 262A                        i2l4096 05DC                        i2l4264 08C0  
                      i2l2770 1C40                        i2l2850 0BEC                        i2l2842 0BC0  
                      i2l2826 0B90                        i2l2922 156A                        i2l3714 22A4  
                      i2l4098 05E4                        i2l4274 08DE                        i2l4186 0712  
                      i2l3572 1F48                        i2l2780 1C9C                        i2l2772 1C5E  
                      i2l2764 1C28                        i2l2860 0C20                        i2l2852 0BF6  
                      i2l2908 1532                        i2l3548 0D7E                        i2l3716 22AC  
                      i2l2862 0C2A                        i2l2854 0BFE                        i2l2918 155A  
                      i2l2934 1ED4                        i2l3910 20E4                        i2l3726 22CC  
                      i2l3718 22B0                        i2l3742 23AC                        i2l3734 238C  
                      i2l3584 1F6E                        i2l2776 1C74                        i2l2768 1C36  
                      i2l2848 0BE2                        i2l2944 1F30                        i2l3736 2394  
                      i2l3586 1F76                        i2l3578 1F58                        i2l2778 1C92  
                      i2l2938 1F04                        i2l2954 13E8                        i2l3906 20DC  
                      i2l3738 2398                        i2l3596 1F96                        i2l3588 1F7A  
                      i2l2868 0C6A                        i2l2972 144E                        i2l3924 12DA  
                      i2l3916 2100                        u232_41 14C0                        i2l2878 0C9A  
                      i2l2894 1500                        i2l2990 149E                        i2l2982 1476  
                      i2l3686 25C4                        i2l3942 1CFE                        i2l2888 14D8  
                      i2l2984 1482                        i2l2976 145E                        i2l3936 13AA  
                      i2l2986 1488                        i2l3954 1D3A                        i2l3970 179C  
                      i2l3948 1D16                        u241_41 13CC                        i2l3974 17AC  
                      i2l3984 1800                        i2l3996 03D0                        u234_41 14E8  
                      u253_41 15B4                        u255_41 15DC                        _TMR0IE 007F95  
                      _TMR0IF 007F92                     ??i2_putch 0003                        _TMR0ON 007EAF  
                      _SSPADD 000FC8                        _TRISC3 007CA3                        _TRISC4 007CA4  
                      _SSPBUF 000FC9                __CFG_XINST$OFF 000000             ?_read_colorsensor 0001  
                      ___ftge 1EA4                        ___wmul 24E2            ??_read_colorsensor 0093  
                   ??___awdiv 000B                     ??___ftadd 0022                __CFG_STVREN$ON 000000  
                   ??___awmod 0094                     ??___ftdiv 000F                     ??___ftneg 0004  
                   ??___lldiv 0098                     ??___ftmul 0013                     ??___ftsub 002E  
                   ??___fttol 002C                     ??___lwdiv 0094                     ??___lwmod 009B  
               dec_to_hex@num 0063                        clear_0 241E                        clear_1 242A  
            ___awdiv@quotient 000D               ___awmod@divisor 0092               ___awmod@counter 0094  
                   ??_lcdInst 0092                        _printf 0012                        floor@i 0044  
                      floor@x 0041         ___ftmul@f3_as_product 0017                     ??_initLCD 0093  
                   ??_isdigit 0090             __end_ofi2___lwdiv 22E0                  __mediumconst FDD8  
           __end_ofi2___lwmod 23C0                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                     ??_standby 00B2             __end_ofi2_lcdInst 26C2  
           __end_ofi2_isdigit 2632              __end_ofexp@coeff FE21          __size_of_bottle_time 0036  
            __end_oflog@coeff FE3C                    __accesstop 0080       __end_of__initialization 2430  
                  ___altoft@c 0037                    ___ftadd@f1 001C                    ___ftadd@f2 001F  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                  eval_poly@res 0031  
               ___rparam_used 000001                    ___ftdiv@f1 0009                    ___ftdiv@f2 000C  
                  ___ftdiv@f3 0013                    ___ftneg@f1 0001                    ___awtoft@c 0009  
                  ___ftmul@f1 000D                    ___ftmul@f2 0010                    ___ftsub@f1 0028  
                  ___ftsub@f2 002B                    ___fttol@f1 0028            i2___lwmod@dividend 0008  
              __pcstackCOMRAM 0001                  __pidataBANK0 26F6                    ___lltoft@c 0009  
               __end_of_floor 1768                 __end_of_ldexp 1AA8                 __end_of_frexp 1EA4  
               __end_of_putch 269A                   i2printf@idx 0013                   i2printf@val 0017  
          __size_of_date_time 00D2           servo_rotate0@degree 000F                     ?i2___wmul 0001  
          __size_of_lcdNibble 0060                   i2putch@data 0003                     ?i2_printf 000D  
 __size_of_I2C_ColorSens_Init 0034                       ??_floor 0044                       ??_ldexp 0039  
                     ??_frexp 0006          __end_of_bottle_count 0F7E                    _dec_to_hex 12C0  
                     ??_putch 0092                    __pbssBANK0 00B6            __size_of_eval_poly 00D2  
           servo_rotate0@duty 0013            __size_of_read_time 0068                       ?___ftge 0001  
                ?i2_lcdNibble 0001                       ?___wmul 0090                     ?___altoft 0037  
                   ?___awtoft 0009                     ?___ftpack 0001                       ?_printf 009C  
          __size_of_operation 00B4                     ?___lltoft 0009                    ??i2___wmul 0005  
                  ??i2_printf 000F                       _SSPCON1 000FC6                       _SSPCON2 000FC5  
                     _SSPSTAT 000FC7             __end_of_date_time 1914                       i2_putch 26AA  
           _bottle_count_disp 00CC   __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 21D2  
 __size_ofi2_I2C_Master_Write 000A                 ?_operationend 0001                       __Hparam 0000  
                     __Lparam 0000               __size_of___ftge 0090                       ___awdiv 1F34  
                     ___ftadd 0B14                       ___awmod 1D72                       ___ftdiv 15A4  
                     ___ftneg 25F0                       ___lldiv 1AA8               __size_of___wmul 0036  
                     ___ftmul 14B0                       ___ftsub 23C0                       ___fttol 13BC  
                     ___lwdiv 1FB8                       ___lwmod 2110                    _curr_state 00CB  
                  ??___altoft 003B                       __pcinit 2400                    ??___awtoft 000C  
                  ??___ftpack 0006             __end_of_eval_poly 19E6                       __ramtop 1000  
                     _lcdInst 269A                    ??___lltoft 000D                       __ptext0 11B6  
                     __ptext1 2476                       __ptext2 264C                       __ptext3 1B64  
                     __ptext4 0F7E                       __ptext5 22E0                       __ptext6 2632  
                     __ptext7 1842                       __ptext8 254C                       __ptext9 24AC  
             __size_of_printf 03B4                dec_to_hex@temp 006B                       _initLCD 22E0  
           __end_of_hexpowers FDFC                 i2_isdigit$699 0002                       _dpowers FDEA  
                __size_of_exp 01E4                  __size_of_log 011A                       _isdigit 257A  
                __size_of_isr 0928   __size_ofi2_read_colorsensor 00DA                  __size_of_pow 0172  
            ___awmod@dividend 0090             __end_of_read_time 2110      __size_of_I2C_Master_Init 0060  
    __size_of_I2C_Master_Read 002E      __size_of_I2C_Master_Wait 0014                    date_time@i 00B2  
    __size_of_I2C_Master_Stop 0008         __end_of_servo_rotate0 1D72                       _timeset FDFC  
                     _standby 2476                   ?_dec_to_hex 0063                __pintcode_body 06D2  
        end_of_initialization 2430                       exp@sign 0051                 __Lmediumconst FDD8  
                     int_func 06D2           i2___wmul@multiplier 0001             __end_of_operation 1C18  
              _operation_disp 00C7                ??_operationend 00B2     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0094                       pow@sign 005E  
             ___lldiv@counter 009C                       printf@c 00B1                       printf@f 009C  
            I2C_Master_Init@c 009D              I2C_Master_Read@a 0091                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE         __end_of_emergencystop 264C  
                   _PORTCbits 000F82         __size_of_bottle_count 014C     __size_of_read_colorsensor 011E  
   read_colorsensor@color_low 0095             i2_I2C_Master_Read 25A4             i2_I2C_Master_Wait 2678  
           i2_I2C_Master_Stop 26E6             i2___lwdiv@divisor 0003                     i2___lwdiv 228E  
                   i2___lwmod 237E             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_comb 000A  i2read_colorsensor@color_high 0008  
          ?i2_I2C_Master_Stop 0001                    _start_time 007C                     i2_lcdInst 26B6  
                 ___ftdiv@exp 0016                   printf@width 00AF           ??i2_I2C_Master_Read 0002  
                   i2_isdigit 2614           ??i2_I2C_Master_Wait 0001           ??i2_I2C_Master_Stop 0002  
                 ___ftmul@exp 0016                  _bottle_count 0E32                __end_of___ftge 1F34  
              __end_of___wmul 2518           __size_of_dec_to_hex 00FC          __size_ofi2_lcdNibble 004E  
               i2lcdInst@data 0003                    floor@expon 0047              i2___wmul@product 0005  
              __end_of_printf 03C6                  i2printf@flag 0019     __end_ofi2_I2C_Master_Read 25CA  
   __end_ofi2_I2C_Master_Wait 268A                  i2printf@prec 0016           start_initialization 2400  
   __end_ofi2_I2C_Master_Stop 26EE                    eval_poly@d 002B                    eval_poly@n 002D  
                  eval_poly@x 0028             __size_ofi2___wmul 0026                    ldexp@value 0034  
                 __end_of_exp 0B14                   __end_of_log 11B6                   __end_of_isr 0930  
                 __end_of_pow 0E32                     i2printf@c 001C                     i2printf@f 000D  
               ??_bottle_time 00B4         i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008             __size_ofi2_printf 030C                    frexp@value 0001  
           ??_I2C_Master_Init 00A1             ??_I2C_Master_Read 0091             ??_I2C_Master_Wait 0090  
                  ?i2_lcdInst 0001             ??_I2C_Master_Stop 0091    read_colorsensor@color_comb 0099  
  read_colorsensor@color_high 0097                    ?i2_isdigit 0001                      ??___ftge 0007  
                    ??___wmul 0094                   __pdataBANK0 00CC              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00A4             __size_of___altoft 0078                    read_time@i 0004  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
  __end_of_I2C_ColorSens_Init 254C                   __pbssCOMRAM 0076          __end_of_operationend 2664  
               __pcstackBANK0 0080             i2___lwmod@divisor 000A             i2___lwmod@counter 000C  
                    ?i2_putch 0001           __end_of_bottle_time 24E2              _I2C_Master_Start 26DE  
         i2I2C_Master_Write@d 0002              _I2C_Master_Write 26C2                     _date_time 1842  
            ___lwdiv@dividend 0090             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst FDD8                     _lcdNibble 2172                      ?___awdiv 0007  
                    ?___ftadd 001C                      ?___awmod 0090                      ?___ftdiv 0009  
                    ?___ftneg 0001                      ?___lldiv 0090                      ?___ftmul 000D  
                    ?___ftsub 0028                      ?___fttol 0028                      ?___lwdiv 0090  
                    ?___lwmod 0097                      ?_lcdInst 0001              dec_to_hex@hexnum 006F  
                    ?_initLCD 0001                      ?_isdigit 0001              _read_colorsensor 0F7E  
  __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012                     _eval_poly 1914  
  __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDF4                      ?_standby 0001  
            ___lwdiv@quotient 0094                __size_of_floor 00DE                __size_of_ldexp 00C2  
              __size_of_frexp 0090                  ??_dec_to_hex 0065                   ??i2___lwdiv 0005  
                 ??i2___lwmod 000C                     _read_time 20A8                __size_of_putch 0010  
  __end_ofi2_I2C_Master_Start 26F6    __end_ofi2_I2C_Master_Write 26D6                   ??i2_lcdInst 0003  
              ___wmul@product 0094                      _LATDbits 000F8C                   ??i2_isdigit 0001  
                  ?_date_time 0001                      i2u250_40 1E64                      i2u410_47 2370  
                    i2u243_40 1406                      i2u250_48 1E66                      i2u323_40 0D68  
                    i2u243_45 13FE                      i2u411_47 2378                      i2u340_40 25C2  
                    i2u412_47 1D18                      i2u413_47 1D3C                      i2u263_40 16D2  
                    i2u407_47 08E6                      i2u408_47 2348                      i2u409_47 2350  
                    i2u267_40 1A1E                      i2u267_48 1A20                      i2u287_40 09BC  
                   _operation 1B64                      i2u288_40 09BE              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001            __end_of_dec_to_hex 13BC    __end_ofi2_read_colorsensor 1842  
           ___wmul@multiplier 0090                      i2___wmul 25CA                 lcdNibble@data 0091  
                  printf@flag 00AE                 lcdNibble@temp 0090                    printf@prec 00AB  
                  ?_eval_poly 0028                      i2_printf 03C6                   _bottle_time 24AC  
         I2C_Master_Read@temp 0092                    ?_read_time 0001            dec_to_hex@quotient 0071  
            __size_ofi2_putch 000C                     frexp@eptr 0004                      __Hrparam 0000  
         i2read_colorsensor@i 000C                    ?_operation 0001                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D        __size_of_servo_rotate0 00AC  
             bottle_time@time 00B2              __size_of___awdiv 0084              __size_of___ftadd 01AC  
            __size_of___awmod 00A2              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
       i2___wmul@multiplicand 0003              __size_of___lldiv 00BC                      ___altoft 2030  
            __size_of___ftmul 00F4              __size_of___ftsub 0040              __size_of___fttol 00F4  
            __size_of___lwdiv 0078              __size_of___lwmod 0062         __size_of_operationend 0018  
                    ___awtoft 243E                      ___ftpack 1C18                      ___lltoft 2232  
                 _isdigit$699 0091            i2I2C_Master_Read@a 0002              __size_of_lcdInst 0010  
                    _exp$1146 004C               _I2C_Master_Init 21D2               _I2C_Master_Read 254C  
            __size_of_initLCD 0050               _I2C_Master_Wait 2664                      _isr$1238 0073  
             _I2C_Master_Stop 26D6              __size_of_isdigit 002A               ___lwdiv@divisor 0092  
             ___lwdiv@counter 0096                      __ptext10 0E32                      __ptext11 0012  
                    __ptext20 21D2                      __ptext12 268A                      __ptext21 1AA8  
                    __ptext13 257A                      __ptext30 26AA                      __ptext22 2518  
                    __ptext14 24E2                      __ptext31 2614                      __ptext23 26C2  
                    __ptext15 2110                      __ptext40 26EE                      __ptext32 237E  
                    __ptext24 26D6                      __ptext16 1FB8                      __ptext41 25A4  
                    __ptext33 228E                      __ptext25 26DE                      __ptext17 269A  
                    __ptext50 13BC                      __ptext42 2678                      __ptext34 26B6  
                    __ptext26 2664                      __ptext18 2172                      __ptext51 1EA4  
                    __ptext43 12C0                      __ptext35 2330                      __ptext19 1D72  
                    __ptext60 243E                      __ptext52 2030                      __ptext44 0CC0  
                    __ptext36 1CC6                      __ptext28 1768                      __ptext61 2232  
                    __ptext53 1914                      __ptext45 109C                      __ptext37 20A8  
                    __ptext29 03C6                      __ptext62 1C18                      __ptext54 25CA  
                    __ptext46 0930                      __ptext38 26CC                      __ptext63 1F34  
                    __ptext55 14B0                      __ptext47 19E6                      __ptext39 26E6  
                    __ptext56 23C0                      __ptext48 168A                      __ptext57 0B14  
                    __ptext49 1E14                      __ptext58 25F0                      __ptext59 15A4  
                    _end_time 0076              __size_of_standby 0036                      _pow$1144 0058  
                    _pow$1145 005B        __size_of_emergencystop 001A                 __size_of_main 010A  
             _dec_to_hex$1142 0065               _dec_to_hex$1143 0068                   ??_date_time 00B2  
                _operationend 264C                 ??i2_lcdNibble 0001                   ??_lcdNibble 0090  
                    int$flags 007E                     printf@idx 00A8                     printf@val 00AC  
                    exp@coeff FE03                      log@coeff FE21                     putch@data 0092  
    __end_of_I2C_Master_Start 26E6      __end_of_I2C_Master_Write 26CC                    _INTCONbits 000FF2  
                 ??_eval_poly 002F                      isdigit@c 0092                 _servo_rotate0 1CC6  
                 ??_read_time 0004                      intlevel2 0000              ___lwmod@dividend 0097  
            ___lldiv@dividend 0090            _I2C_ColorSens_Init 2518      __end_of_read_colorsensor 109C  
                 ??_operation 00B2           ?_I2C_ColorSens_Init 0001                      printf@ap 00A9  
     __end_of_I2C_Master_Init 2232       __end_of_I2C_Master_Read 257A       __end_of_I2C_Master_Wait 2678  
     __end_of_I2C_Master_Stop 26DE                   lcdInst@data 0092                 _emergencystop 2632  
         __end_ofi2_lcdNibble 237E              ___lldiv@quotient 0098             I2C_Master_Write@d 0091  
             ___lwmod@divisor 0099   i2read_colorsensor@color_low 0006               ___lwmod@counter 009B  
        ??_I2C_ColorSens_Init 0093                ?_servo_rotate0 000F  

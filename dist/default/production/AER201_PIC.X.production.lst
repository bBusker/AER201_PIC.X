

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 01:18:07 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.40
    51                           ; Generated 01/12/2016 GMT
    52                           ; 
    53                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4620 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  000FAA                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _bottle_count_disp
    90  000FAA  FFFF               	dw	65535
    91                           
    92                           	psect	mediumconst
    93  00FE2A                     __pmediumconst:
    94                           	opt stack 0
    95  00FE2A  00                 	db	0
    96  00FE2B                     _keys:
    97                           	opt stack 0
    98  00FE2B  31                 	db	49
    99  00FE2C  32                 	db	50
   100  00FE2D  33                 	db	51
   101  00FE2E  41                 	db	65
   102  00FE2F  34                 	db	52
   103  00FE30  35                 	db	53
   104  00FE31  36                 	db	54
   105  00FE32  42                 	db	66
   106  00FE33  37                 	db	55
   107  00FE34  38                 	db	56
   108  00FE35  39                 	db	57
   109  00FE36  43                 	db	67
   110  00FE37  2A                 	db	42
   111  00FE38  30                 	db	48
   112  00FE39  23                 	db	35
   113  00FE3A  44                 	db	68
   114  00FE3B  00                 	db	0
   115  00FE3C                     __end_of_keys:
   116                           	opt stack 0
   117  00FE3C                     _dpowers:
   118                           	opt stack 0
   119  00FE3C  0001               	dw	1
   120  00FE3E  000A               	dw	10
   121  00FE40  0064               	dw	100
   122  00FE42  03E8               	dw	1000
   123  00FE44  2710               	dw	10000
   124  00FE46                     __end_of_dpowers:
   125                           	opt stack 0
   126  00FE46                     _hexpowers:
   127                           	opt stack 0
   128  00FE46  0001               	dw	1
   129  00FE48  0010               	dw	16
   130  00FE4A  0100               	dw	256
   131  00FE4C  1000               	dw	4096
   132  00FE4E                     __end_of_hexpowers:
   133                           	opt stack 0
   134  00FE4E                     _timeset:
   135                           	opt stack 0
   136  00FE4E  50                 	db	80
   137  00FE4F  35                 	db	53
   138  00FE50  21                 	db	33
   139  00FE51  08                 	db	8
   140  00FE52  05                 	db	5
   141  00FE53  02                 	db	2
   142  00FE54  17                 	db	23
   143  00FE55                     __end_of_timeset:
   144                           	opt stack 0
   145  0000                     _ADCON0	set	4034
   146  0000                     _ADCON1	set	4033
   147  0000                     _INTCONbits	set	4082
   148  0000                     _LATA	set	3977
   149  0000                     _LATB	set	3978
   150  0000                     _LATC	set	3979
   151  0000                     _LATD	set	3980
   152  0000                     _LATDbits	set	3980
   153  0000                     _LATE	set	3981
   154  0000                     _PORTB	set	3969
   155  0000                     _SSPADD	set	4040
   156  0000                     _SSPBUF	set	4041
   157  0000                     _SSPCON1	set	4038
   158  0000                     _SSPCON2	set	4037
   159  0000                     _SSPSTAT	set	4039
   160  0000                     _TRISA	set	3986
   161  0000                     _TRISB	set	3987
   162  0000                     _TRISC	set	3988
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISE	set	3990
   165  0000                     _ACKDT	set	32301
   166  0000                     _ACKEN	set	32300
   167  0000                     _INT1IE	set	32643
   168  0000                     _INT1IF	set	32640
   169  0000                     _PEN	set	32298
   170  0000                     _RCEN	set	32299
   171  0000                     _RSEN	set	32297
   172  0000                     _SEN	set	32296
   173  0000                     _TRISC3	set	31907
   174  0000                     _TRISC4	set	31908
   175  0000                     _nRBPU	set	32655
   176  00FE55                     STR_21:
   177  00FE55  52                 	db	82	;'R'
   178  00FE56  75                 	db	117	;'u'
   179  00FE57  6E                 	db	110	;'n'
   180  00FE58  6E                 	db	110	;'n'
   181  00FE59  69                 	db	105	;'i'
   182  00FE5A  6E                 	db	110	;'n'
   183  00FE5B  67                 	db	103	;'g'
   184  00FE5C  7E                 	db	126
   185  00FE5D  7E                 	db	126
   186  00FE5E  7E                 	db	126
   187  00FE5F  20                 	db	32
   188  00FE60  20                 	db	32
   189  00FE61  20                 	db	32
   190  00FE62  20                 	db	32
   191  00FE63  20                 	db	32
   192  00FE64  20                 	db	32
   193  00FE65  20                 	db	32
   194  00FE66  20                 	db	32
   195  00FE67  20                 	db	32
   196  00FE68  20                 	db	32
   197  00FE69  20                 	db	32
   198  00FE6A  20                 	db	32
   199  00FE6B  20                 	db	32
   200  00FE6C  20                 	db	32
   201  00FE6D  00                 	db	0
   202  00FE6E                     STR_20:
   203  00FE6E  52                 	db	82	;'R'
   204  00FE6F  75                 	db	117	;'u'
   205  00FE70  6E                 	db	110	;'n'
   206  00FE71  6E                 	db	110	;'n'
   207  00FE72  69                 	db	105	;'i'
   208  00FE73  6E                 	db	110	;'n'
   209  00FE74  67                 	db	103	;'g'
   210  00FE75  7E                 	db	126
   211  00FE76  7E                 	db	126
   212  00FE77  20                 	db	32
   213  00FE78  20                 	db	32
   214  00FE79  20                 	db	32
   215  00FE7A  20                 	db	32
   216  00FE7B  20                 	db	32
   217  00FE7C  20                 	db	32
   218  00FE7D  20                 	db	32
   219  00FE7E  20                 	db	32
   220  00FE7F  20                 	db	32
   221  00FE80  20                 	db	32
   222  00FE81  20                 	db	32
   223  00FE82  20                 	db	32
   224  00FE83  20                 	db	32
   225  00FE84  20                 	db	32
   226  00FE85  00                 	db	0
   227  00FE86                     STR_19:
   228  00FE86  52                 	db	82	;'R'
   229  00FE87  75                 	db	117	;'u'
   230  00FE88  6E                 	db	110	;'n'
   231  00FE89  6E                 	db	110	;'n'
   232  00FE8A  69                 	db	105	;'i'
   233  00FE8B  6E                 	db	110	;'n'
   234  00FE8C  67                 	db	103	;'g'
   235  00FE8D  7E                 	db	126
   236  00FE8E  20                 	db	32
   237  00FE8F  20                 	db	32
   238  00FE90  20                 	db	32
   239  00FE91  20                 	db	32
   240  00FE92  20                 	db	32
   241  00FE93  20                 	db	32
   242  00FE94  20                 	db	32
   243  00FE95  20                 	db	32
   244  00FE96  20                 	db	32
   245  00FE97  20                 	db	32
   246  00FE98  20                 	db	32
   247  00FE99  20                 	db	32
   248  00FE9A  20                 	db	32
   249  00FE9B  20                 	db	32
   250  00FE9C  00                 	db	0
   251  00FE9D                     STR_18:
   252  00FE9D  54                 	db	84	;'T'
   253  00FE9E  69                 	db	105	;'i'
   254  00FE9F  6D                 	db	109	;'m'
   255  00FEA0  65                 	db	101	;'e'
   256  00FEA1  3A                 	db	58	;':'
   257  00FEA2  20                 	db	32
   258  00FEA3  39                 	db	57	;'9'
   259  00FEA4  32                 	db	50	;'2'
   260  00FEA5  73                 	db	115	;'s'
   261  00FEA6  20                 	db	32
   262  00FEA7  20                 	db	32
   263  00FEA8  20                 	db	32
   264  00FEA9  20                 	db	32
   265  00FEAA  20                 	db	32
   266  00FEAB  20                 	db	32
   267  00FEAC  20                 	db	32
   268  00FEAD  20                 	db	32
   269  00FEAE  20                 	db	32
   270  00FEAF  20                 	db	32
   271  00FEB0  20                 	db	32
   272  00FEB1  20                 	db	32
   273  00FEB2  20                 	db	32
   274  00FEB3  00                 	db	0
   275  00FEB4                     STR_17:
   276  00FEB4  54                 	db	84	;'T'
   277  00FEB5  6F                 	db	111	;'o'
   278  00FEB6  74                 	db	116	;'t'
   279  00FEB7  61                 	db	97	;'a'
   280  00FEB8  6C                 	db	108	;'l'
   281  00FEB9  20                 	db	32
   282  00FEBA  4F                 	db	79	;'O'
   283  00FEBB  70                 	db	112	;'p'
   284  00FEBC  65                 	db	101	;'e'
   285  00FEBD  72                 	db	114	;'r'
   286  00FEBE  61                 	db	97	;'a'
   287  00FEBF  74                 	db	116	;'t'
   288  00FEC0  69                 	db	105	;'i'
   289  00FEC1  6F                 	db	111	;'o'
   290  00FEC2  6E                 	db	110	;'n'
   291  00FEC3  20                 	db	32
   292  00FEC4  20                 	db	32
   293  00FEC5  20                 	db	32
   294  00FEC6  20                 	db	32
   295  00FEC7  20                 	db	32
   296  00FEC8  20                 	db	32
   297  00FEC9  20                 	db	32
   298  00FECA  00                 	db	0
   299  00FECB                     STR_4:
   300  00FECB  44                 	db	68	;'D'
   301  00FECC  61                 	db	97	;'a'
   302  00FECD  74                 	db	116	;'t'
   303  00FECE  65                 	db	101	;'e'
   304  00FECF  3A                 	db	58	;':'
   305  00FED0  20                 	db	32
   306  00FED1  25                 	db	37
   307  00FED2  30                 	db	48	;'0'
   308  00FED3  32                 	db	50	;'2'
   309  00FED4  78                 	db	120	;'x'
   310  00FED5  2F                 	db	47
   311  00FED6  25                 	db	37
   312  00FED7  30                 	db	48	;'0'
   313  00FED8  32                 	db	50	;'2'
   314  00FED9  78                 	db	120	;'x'
   315  00FEDA  2F                 	db	47
   316  00FEDB  25                 	db	37
   317  00FEDC  30                 	db	48	;'0'
   318  00FEDD  32                 	db	50	;'2'
   319  00FEDE  78                 	db	120	;'x'
   320  00FEDF  20                 	db	32
   321  00FEE0  20                 	db	32
   322  00FEE1  00                 	db	0
   323  00FEE2                     STR_5:
   324  00FEE2  54                 	db	84	;'T'
   325  00FEE3  69                 	db	105	;'i'
   326  00FEE4  6D                 	db	109	;'m'
   327  00FEE5  65                 	db	101	;'e'
   328  00FEE6  3A                 	db	58	;':'
   329  00FEE7  20                 	db	32
   330  00FEE8  25                 	db	37
   331  00FEE9  30                 	db	48	;'0'
   332  00FEEA  32                 	db	50	;'2'
   333  00FEEB  78                 	db	120	;'x'
   334  00FEEC  3A                 	db	58	;':'
   335  00FEED  25                 	db	37
   336  00FEEE  30                 	db	48	;'0'
   337  00FEEF  32                 	db	50	;'2'
   338  00FEF0  78                 	db	120	;'x'
   339  00FEF1  3A                 	db	58	;':'
   340  00FEF2  25                 	db	37
   341  00FEF3  30                 	db	48	;'0'
   342  00FEF4  32                 	db	50	;'2'
   343  00FEF5  78                 	db	120	;'x'
   344  00FEF6  20                 	db	32
   345  00FEF7  20                 	db	32
   346  00FEF8  00                 	db	0
   347  00FEF9                     STR_23:
   348  00FEF9  30                 	db	48	;'0'
   349  00FEFA  31                 	db	49	;'1'
   350  00FEFB  32                 	db	50	;'2'
   351  00FEFC  33                 	db	51	;'3'
   352  00FEFD  34                 	db	52	;'4'
   353  00FEFE  35                 	db	53	;'5'
   354  00FEFF  36                 	db	54	;'6'
   355  00FF00  37                 	db	55	;'7'
   356  00FF01  38                 	db	56	;'8'
   357  00FF02  39                 	db	57	;'9'
   358  00FF03  61                 	db	97	;'a'
   359  00FF04  62                 	db	98	;'b'
   360  00FF05  63                 	db	99	;'c'
   361  00FF06  64                 	db	100	;'d'
   362  00FF07  65                 	db	101	;'e'
   363  00FF08  66                 	db	102	;'f'
   364  00FF09  00                 	db	0
   365  00FF0A                     STR_2:
   366  00FF0A  73                 	db	115	;'s'
   367  00FF0B  74                 	db	116	;'t'
   368  00FF0C  61                 	db	97	;'a'
   369  00FF0D  6E                 	db	110	;'n'
   370  00FF0E  64                 	db	100	;'d'
   371  00FF0F  62                 	db	98	;'b'
   372  00FF10  79                 	db	121	;'y'
   373  00FF11  20                 	db	32
   374  00FF12  20                 	db	32
   375  00FF13  20                 	db	32
   376  00FF14  20                 	db	32
   377  00FF15  20                 	db	32
   378  00FF16  20                 	db	32
   379  00FF17  20                 	db	32
   380  00FF18  20                 	db	32
   381  00FF19  20                 	db	32
   382  00FF1A  00                 	db	0
   383  00FF1B                     STR_7:
   384  00FF1B  54                 	db	84	;'T'
   385  00FF1C  6F                 	db	111	;'o'
   386  00FF1D  74                 	db	116	;'t'
   387  00FF1E  61                 	db	97	;'a'
   388  00FF1F  6C                 	db	108	;'l'
   389  00FF20  3A                 	db	58	;':'
   390  00FF21  20                 	db	32
   391  00FF22  31                 	db	49	;'1'
   392  00FF23  30                 	db	48	;'0'
   393  00FF24  20                 	db	32
   394  00FF25  20                 	db	32
   395  00FF26  20                 	db	32
   396  00FF27  20                 	db	32
   397  00FF28  20                 	db	32
   398  00FF29  20                 	db	32
   399  00FF2A  20                 	db	32
   400  00FF2B  00                 	db	0
   401  00FF2C                     STR_3:
   402  00FF2C  50                 	db	80	;'P'
   403  00FF2D  4F                 	db	79	;'O'
   404  00FF2E  52                 	db	82	;'R'
   405  00FF2F  54                 	db	84	;'T'
   406  00FF30  42                 	db	66	;'B'
   407  00FF31  3A                 	db	58	;':'
   408  00FF32  20                 	db	32
   409  00FF33  25                 	db	37
   410  00FF34  64                 	db	100	;'d'
   411  00FF35  20                 	db	32
   412  00FF36  20                 	db	32
   413  00FF37  20                 	db	32
   414  00FF38  20                 	db	32
   415  00FF39  20                 	db	32
   416  00FF3A  20                 	db	32
   417  00FF3B  20                 	db	32
   418  00FF3C  00                 	db	0
   419  00FF3D                     STR_6:
   420  00FF3D  42                 	db	66	;'B'
   421  00FF3E  6F                 	db	111	;'o'
   422  00FF3F  74                 	db	116	;'t'
   423  00FF40  74                 	db	116	;'t'
   424  00FF41  6C                 	db	108	;'l'
   425  00FF42  65                 	db	101	;'e'
   426  00FF43  20                 	db	32
   427  00FF44  43                 	db	67	;'C'
   428  00FF45  6F                 	db	111	;'o'
   429  00FF46  75                 	db	117	;'u'
   430  00FF47  6E                 	db	110	;'n'
   431  00FF48  74                 	db	116	;'t'
   432  00FF49  20                 	db	32
   433  00FF4A  20                 	db	32
   434  00FF4B  20                 	db	32
   435  00FF4C  20                 	db	32
   436  00FF4D  00                 	db	0
   437  00FF4E                     STR_11:
   438  00FF4E  59                 	db	89	;'Y'
   439  00FF4F  4F                 	db	79	;'O'
   440  00FF50  50                 	db	80	;'P'
   441  00FF51  2D                 	db	45
   442  00FF52  43                 	db	67	;'C'
   443  00FF53  41                 	db	65	;'A'
   444  00FF54  50                 	db	80	;'P'
   445  00FF55  2D                 	db	45
   446  00FF56  4C                 	db	76	;'L'
   447  00FF57  42                 	db	66	;'B'
   448  00FF58  4C                 	db	76	;'L'
   449  00FF59  3A                 	db	58	;':'
   450  00FF5A  20                 	db	32
   451  00FF5B  30                 	db	48	;'0'
   452  00FF5C  20                 	db	32
   453  00FF5D  20                 	db	32
   454  00FF5E  00                 	db	0
   455  00FF5F                     STR_10:
   456  00FF5F  59                 	db	89	;'Y'
   457  00FF60  4F                 	db	79	;'O'
   458  00FF61  50                 	db	80	;'P'
   459  00FF62  2D                 	db	45
   460  00FF63  43                 	db	67	;'C'
   461  00FF64  41                 	db	65	;'A'
   462  00FF65  50                 	db	80	;'P'
   463  00FF66  2B                 	db	43
   464  00FF67  4C                 	db	76	;'L'
   465  00FF68  42                 	db	66	;'B'
   466  00FF69  4C                 	db	76	;'L'
   467  00FF6A  3A                 	db	58	;':'
   468  00FF6B  20                 	db	32
   469  00FF6C  31                 	db	49	;'1'
   470  00FF6D  20                 	db	32
   471  00FF6E  20                 	db	32
   472  00FF6F  00                 	db	0
   473  00FF70                     STR_9:
   474  00FF70  59                 	db	89	;'Y'
   475  00FF71  4F                 	db	79	;'O'
   476  00FF72  50                 	db	80	;'P'
   477  00FF73  2B                 	db	43
   478  00FF74  43                 	db	67	;'C'
   479  00FF75  41                 	db	65	;'A'
   480  00FF76  50                 	db	80	;'P'
   481  00FF77  2D                 	db	45
   482  00FF78  4C                 	db	76	;'L'
   483  00FF79  42                 	db	66	;'B'
   484  00FF7A  4C                 	db	76	;'L'
   485  00FF7B  3A                 	db	58	;':'
   486  00FF7C  20                 	db	32
   487  00FF7D  31                 	db	49	;'1'
   488  00FF7E  20                 	db	32
   489  00FF7F  20                 	db	32
   490  00FF80  00                 	db	0
   491  00FF81                     STR_8:
   492  00FF81  59                 	db	89	;'Y'
   493  00FF82  4F                 	db	79	;'O'
   494  00FF83  50                 	db	80	;'P'
   495  00FF84  2B                 	db	43
   496  00FF85  43                 	db	67	;'C'
   497  00FF86  41                 	db	65	;'A'
   498  00FF87  50                 	db	80	;'P'
   499  00FF88  2B                 	db	43
   500  00FF89  4C                 	db	76	;'L'
   501  00FF8A  42                 	db	66	;'B'
   502  00FF8B  4C                 	db	76	;'L'
   503  00FF8C  3A                 	db	58	;':'
   504  00FF8D  20                 	db	32
   505  00FF8E  33                 	db	51	;'3'
   506  00FF8F  20                 	db	32
   507  00FF90  20                 	db	32
   508  00FF91  00                 	db	0
   509  00FF92                     STR_12:
   510  00FF92  45                 	db	69	;'E'
   511  00FF93  53                 	db	83	;'S'
   512  00FF94  4B                 	db	75	;'K'
   513  00FF95  41                 	db	65	;'A'
   514  00FF96  2B                 	db	43
   515  00FF97  43                 	db	67	;'C'
   516  00FF98  41                 	db	65	;'A'
   517  00FF99  50                 	db	80	;'P'
   518  00FF9A  2B                 	db	43
   519  00FF9B  4C                 	db	76	;'L'
   520  00FF9C  42                 	db	66	;'B'
   521  00FF9D  4C                 	db	76	;'L'
   522  00FF9E  3A                 	db	58	;':'
   523  00FF9F  20                 	db	32
   524  00FFA0  31                 	db	49	;'1'
   525  00FFA1  20                 	db	32
   526  00FFA2  00                 	db	0
   527  00FFA3                     STR_14:
   528  00FFA3  45                 	db	69	;'E'
   529  00FFA4  53                 	db	83	;'S'
   530  00FFA5  4B                 	db	75	;'K'
   531  00FFA6  41                 	db	65	;'A'
   532  00FFA7  2D                 	db	45
   533  00FFA8  43                 	db	67	;'C'
   534  00FFA9  41                 	db	65	;'A'
   535  00FFAA  50                 	db	80	;'P'
   536  00FFAB  2B                 	db	43
   537  00FFAC  4C                 	db	76	;'L'
   538  00FFAD  42                 	db	66	;'B'
   539  00FFAE  4C                 	db	76	;'L'
   540  00FFAF  3A                 	db	58	;':'
   541  00FFB0  20                 	db	32
   542  00FFB1  31                 	db	49	;'1'
   543  00FFB2  20                 	db	32
   544  00FFB3  00                 	db	0
   545  00FFB4                     STR_13:
   546  00FFB4  45                 	db	69	;'E'
   547  00FFB5  53                 	db	83	;'S'
   548  00FFB6  4B                 	db	75	;'K'
   549  00FFB7  41                 	db	65	;'A'
   550  00FFB8  2B                 	db	43
   551  00FFB9  43                 	db	67	;'C'
   552  00FFBA  41                 	db	65	;'A'
   553  00FFBB  50                 	db	80	;'P'
   554  00FFBC  2D                 	db	45
   555  00FFBD  4C                 	db	76	;'L'
   556  00FFBE  42                 	db	66	;'B'
   557  00FFBF  4C                 	db	76	;'L'
   558  00FFC0  3A                 	db	58	;':'
   559  00FFC1  20                 	db	32
   560  00FFC2  31                 	db	49	;'1'
   561  00FFC3  20                 	db	32
   562  00FFC4  00                 	db	0
   563  00FFC5                     STR_15:
   564  00FFC5  45                 	db	69	;'E'
   565  00FFC6  53                 	db	83	;'S'
   566  00FFC7  4B                 	db	75	;'K'
   567  00FFC8  41                 	db	65	;'A'
   568  00FFC9  2D                 	db	45
   569  00FFCA  43                 	db	67	;'C'
   570  00FFCB  41                 	db	65	;'A'
   571  00FFCC  50                 	db	80	;'P'
   572  00FFCD  2D                 	db	45
   573  00FFCE  4C                 	db	76	;'L'
   574  00FFCF  42                 	db	66	;'B'
   575  00FFD0  4C                 	db	76	;'L'
   576  00FFD1  3A                 	db	58	;':'
   577  00FFD2  20                 	db	32
   578  00FFD3  32                 	db	50	;'2'
   579  00FFD4  20                 	db	32
   580  00FFD5  00                 	db	0
   581  00FFD6                     STR_22:
   582  00FFD6  4F                 	db	79	;'O'
   583  00FFD7  70                 	db	112	;'p'
   584  00FFD8  65                 	db	101	;'e'
   585  00FFD9  72                 	db	114	;'r'
   586  00FFDA  61                 	db	97	;'a'
   587  00FFDB  74                 	db	116	;'t'
   588  00FFDC  69                 	db	105	;'i'
   589  00FFDD  6F                 	db	111	;'o'
   590  00FFDE  6E                 	db	110	;'n'
   591  00FFDF  20                 	db	32
   592  00FFE0  44                 	db	68	;'D'
   593  00FFE1  6F                 	db	111	;'o'
   594  00FFE2  6E                 	db	110	;'n'
   595  00FFE3  65                 	db	101	;'e'
   596  00FFE4  21                 	db	33
   597  00FFE5  00                 	db	0
   598  00FFE6                     STR_1:
   599  00FFE6  62                 	db	98	;'b'
   600  00FFE7  61                 	db	97	;'a'
   601  00FFE8  64                 	db	100	;'d'
   602  00FFE9  20                 	db	32
   603  00FFEA  69                 	db	105	;'i'
   604  00FFEB  6E                 	db	110	;'n'
   605  00FFEC  74                 	db	116	;'t'
   606  00FFED  65                 	db	101	;'e'
   607  00FFEE  72                 	db	114	;'r'
   608  00FFEF  72                 	db	114	;'r'
   609  00FFF0  75                 	db	117	;'u'
   610  00FFF1  70                 	db	112	;'p'
   611  00FFF2  74                 	db	116	;'t'
   612  00FFF3  00                 	db	0
   613  00FFF4                     STR_16:
   614  00FFF4  45                 	db	69	;'E'
   615  00FFF5  52                 	db	82	;'R'
   616  00FFF6  52                 	db	82	;'R'
   617  00FFF7  4F                 	db	79	;'O'
   618  00FFF8  52                 	db	82	;'R'
   619  00FFF9  3A                 	db	58	;':'
   620  00FFFA  20                 	db	32
   621  00FFFB  25                 	db	37
   622  00FFFC  64                 	db	100	;'d'
   623  00FFFD  00                 	db	0
   624                           
   625                           ; #config settings
   626  00FFFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  000E08                     __pcinit:
   630                           	opt stack 0
   631  000E08                     start_initialization:
   632                           	opt stack 0
   633  000E08                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Initialize objects allocated to COMRAM (2 bytes)
   637                           ; load TBLPTR registers with __pidataCOMRAM
   638  000E08  0EAA               	movlw	low __pidataCOMRAM
   639  000E0A  6EF6               	movwf	tblptrl,c
   640  000E0C  0E0F               	movlw	high __pidataCOMRAM
   641  000E0E  6EF7               	movwf	tblptrh,c
   642  000E10  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   643  000E12  6EF8               	movwf	tblptru,c
   644  000E14  0009               	tblrd		*+	;fetch initializer
   645  000E16  CFF5 F051          	movff	tablat,__pdataCOMRAM
   646  000E1A  0009               	tblrd		*+	;fetch initializer
   647  000E1C  CFF5 F052          	movff	tablat,__pdataCOMRAM+1
   648                           
   649                           ; Clear objects allocated to COMRAM (10 bytes)
   650  000E20  EE00  F047         	lfsr	0,__pbssCOMRAM
   651  000E24  0E0A               	movlw	10
   652  000E26                     clear_0:
   653  000E26  6AEE               	clrf	postinc0,c
   654  000E28  06E8               	decf	wreg,f,c
   655  000E2A  E1FD               	bnz	clear_0
   656  000E2C                     end_of_initialization:
   657                           	opt stack 0
   658  000E2C                     __end_of__initialization:
   659                           	opt stack 0
   660  000E2C  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   661  000E2E  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   662  000E30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   663  000E32  6EF8               	movwf	tblptru,c
   664  000E34  0100               	movlb	0
   665  000E36  EF66  F004         	goto	_main	;jump to C main() function
   666                           tblptru	equ	0xFF8
   667                           tblptrh	equ	0xFF7
   668                           tblptrl	equ	0xFF6
   669                           tablat	equ	0xFF5
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           
   673                           	psect	bssCOMRAM
   674  000047                     __pbssCOMRAM:
   675                           	opt stack 0
   676  000047                     _time:
   677                           	opt stack 0
   678  000047                     	ds	7
   679  00004E                     _operation_disp:
   680                           	opt stack 0
   681  00004E                     	ds	2
   682  000050                     _curr_state:
   683                           	opt stack 0
   684  000050                     	ds	1
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           
   692                           	psect	dataCOMRAM
   693  000051                     __pdataCOMRAM:
   694                           	opt stack 0
   695  000051                     _bottle_count_disp:
   696                           	opt stack 0
   697  000051                     	ds	2
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           
   705                           	psect	cstackBANK0
   706  000080                     __pcstackBANK0:
   707                           	opt stack 0
   708  000080                     printf@idx:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x0
   712  000080                     	ds	1
   713  000081                     printf@ap:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x1
   717  000081                     	ds	2
   718  000083                     printf@prec:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x3
   722  000083                     	ds	1
   723  000084                     printf@val:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x4
   727  000084                     	ds	2
   728  000086                     printf@flag:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x6
   732  000086                     	ds	1
   733  000087                     printf@width:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x7
   737  000087                     	ds	2
   738  000089                     printf@c:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x9
   742  000089                     	ds	1
   743  00008A                     ??_main:
   744                           
   745                           ; 1 bytes @ 0xA
   746  00008A                     	ds	2
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           
   754                           	psect	cstackCOMRAM
   755  000001                     __pcstackCOMRAM:
   756                           	opt stack 0
   757  000001                     ??i2_isdigit:
   758  000001                     ?i2___wmul:
   759                           	opt stack 0
   760  000001                     ?i2___lwdiv:
   761                           	opt stack 0
   762  000001                     i2lcdNibble@temp:
   763                           	opt stack 0
   764  000001                     i2___wmul@multiplier:
   765                           	opt stack 0
   766  000001                     i2___lwdiv@dividend:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x0
   770  000001                     	ds	1
   771  000002                     i2lcdNibble@data:
   772                           	opt stack 0
   773  000002                     i2_isdigit$537:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x1
   777  000002                     	ds	1
   778  000003                     i2lcdInst@data:
   779                           	opt stack 0
   780  000003                     i2putch@data:
   781                           	opt stack 0
   782  000003                     i2isdigit@c:
   783                           	opt stack 0
   784  000003                     i2___wmul@multiplicand:
   785                           	opt stack 0
   786  000003                     i2___lwdiv@divisor:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x2
   790  000003                     	ds	2
   791  000005                     i2___wmul@product:
   792                           	opt stack 0
   793  000005                     i2___lwdiv@quotient:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x4
   797  000005                     	ds	2
   798  000007                     i2___lwdiv@counter:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x6
   802  000007                     	ds	1
   803  000008                     ?i2___lwmod:
   804                           	opt stack 0
   805  000008                     i2___lwmod@dividend:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x7
   809  000008                     	ds	2
   810  00000A                     i2___lwmod@divisor:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x9
   814  00000A                     	ds	2
   815  00000C                     i2___lwmod@counter:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0xB
   819  00000C                     	ds	1
   820  00000D                     ?i2_printf:
   821                           	opt stack 0
   822  00000D                     i2printf@f:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xC
   826  00000D                     	ds	2
   827  00000F                     ??i2_printf:
   828                           
   829                           ; 1 bytes @ 0xE
   830  00000F                     	ds	4
   831  000013                     i2printf@idx:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x12
   835  000013                     	ds	1
   836  000014                     i2printf@ap:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x13
   840  000014                     	ds	2
   841  000016                     i2printf@prec:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x15
   845  000016                     	ds	1
   846  000017                     i2printf@val:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x16
   850  000017                     	ds	2
   851  000019                     i2printf@flag:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x18
   855  000019                     	ds	1
   856  00001A                     i2printf@width:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x19
   860  00001A                     	ds	2
   861  00001C                     i2printf@c:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x1B
   865  00001C                     	ds	1
   866  00001D                     ??_isr:
   867                           
   868                           ; 1 bytes @ 0x1C
   869  00001D                     	ds	15
   870  00002C                     isr@i:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x2B
   874  00002C                     	ds	1
   875  00002D                     ??_isdigit:
   876  00002D                     ??_I2C_Master_Wait:
   877  00002D                     ?___wmul:
   878                           	opt stack 0
   879  00002D                     ?___awmod:
   880                           	opt stack 0
   881  00002D                     ?___lwdiv:
   882                           	opt stack 0
   883  00002D                     ?___lldiv:
   884                           	opt stack 0
   885  00002D                     lcdNibble@temp:
   886                           	opt stack 0
   887  00002D                     ___wmul@multiplier:
   888                           	opt stack 0
   889  00002D                     ___awmod@dividend:
   890                           	opt stack 0
   891  00002D                     ___lwdiv@dividend:
   892                           	opt stack 0
   893  00002D                     ___lldiv@dividend:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x2C
   897  00002D                     	ds	1
   898  00002E                     I2C_Master_Read@a:
   899                           	opt stack 0
   900  00002E                     lcdNibble@data:
   901                           	opt stack 0
   902  00002E                     _isdigit$537:
   903                           	opt stack 0
   904  00002E                     I2C_Master_Write@d:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x2D
   908  00002E                     	ds	1
   909  00002F                     I2C_Master_Read@temp:
   910                           	opt stack 0
   911  00002F                     lcdInst@data:
   912                           	opt stack 0
   913  00002F                     putch@data:
   914                           	opt stack 0
   915  00002F                     isdigit@c:
   916                           	opt stack 0
   917  00002F                     ___wmul@multiplicand:
   918                           	opt stack 0
   919  00002F                     ___awmod@divisor:
   920                           	opt stack 0
   921  00002F                     ___lwdiv@divisor:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x2E
   925  00002F                     	ds	1
   926  000030                     ??_initLCD:
   927                           
   928                           ; 1 bytes @ 0x2F
   929  000030                     	ds	1
   930  000031                     ___awmod@counter:
   931                           	opt stack 0
   932  000031                     ___lwdiv@counter:
   933                           	opt stack 0
   934  000031                     ___wmul@product:
   935                           	opt stack 0
   936  000031                     ___lldiv@divisor:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x30
   940  000031                     	ds	1
   941  000032                     ___awmod@sign:
   942                           	opt stack 0
   943  000032                     ___lwdiv@quotient:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x31
   947  000032                     	ds	2
   948  000034                     ?___lwmod:
   949                           	opt stack 0
   950  000034                     ___lwmod@dividend:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x33
   954  000034                     	ds	1
   955  000035                     ___lldiv@quotient:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x34
   959  000035                     	ds	1
   960  000036                     ___lwmod@divisor:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x35
   964  000036                     	ds	2
   965  000038                     ___lwmod@counter:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x37
   969  000038                     	ds	1
   970  000039                     ?_printf:
   971                           	opt stack 0
   972  000039                     ___lldiv@counter:
   973                           	opt stack 0
   974  000039                     printf@f:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x38
   978  000039                     	ds	1
   979  00003A                     I2C_Master_Init@c:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x39
   983  00003A                     	ds	4
   984  00003E                     ??_I2C_Master_Init:
   985                           
   986                           ; 1 bytes @ 0x3D
   987  00003E                     	ds	3
   988  000041                     ??_printf:
   989                           
   990                           ; 1 bytes @ 0x40
   991  000041                     	ds	4
   992  000045                     ??_operation:
   993  000045                     date_time@i:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x44
   997  000045                     	ds	2
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           
  1005 ;;
  1006 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1007 ;;
  1008 ;; *************** function _main *****************
  1009 ;; Defined at:
  1010 ;;		line 45 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;Total ram usage:        2 bytes
  1029 ;; Hardware stack levels required when called:    8
  1030 ;; This function calls:
  1031 ;;		_I2C_Master_Init
  1032 ;;		_bottle_count
  1033 ;;		_bottle_time
  1034 ;;		_date_time
  1035 ;;		_initLCD
  1036 ;;		_operation
  1037 ;;		_operationend
  1038 ;;		_standby
  1039 ;; This function is called by:
  1040 ;;		Startup code after reset
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           	psect	text0
  1045  0008CC                     __ptext0:
  1046                           	opt stack 0
  1047  0008CC                     _main:
  1048                           	opt stack 23
  1049                           
  1050                           ;main.c: 49: TRISA = 0xFF;
  1051                           
  1052                           ;incstack = 0
  1053  0008CC  6892               	setf	3986,c	;volatile
  1054                           
  1055                           ;main.c: 50: TRISB = 0xFF;
  1056  0008CE  6893               	setf	3987,c	;volatile
  1057                           
  1058                           ;main.c: 51: TRISC = 0x00;
  1059  0008D0  0E00               	movlw	0
  1060  0008D2  6E94               	movwf	3988,c	;volatile
  1061                           
  1062                           ;main.c: 52: TRISD = 0x00;
  1063  0008D4  0E00               	movlw	0
  1064  0008D6  6E95               	movwf	3989,c	;volatile
  1065                           
  1066                           ;main.c: 53: TRISE = 0x00;
  1067  0008D8  0E00               	movlw	0
  1068  0008DA  6E96               	movwf	3990,c	;volatile
  1069                           
  1070                           ;main.c: 55: LATA = 0x00;
  1071  0008DC  0E00               	movlw	0
  1072  0008DE  6E89               	movwf	3977,c	;volatile
  1073                           
  1074                           ;main.c: 56: LATB = 0x00;
  1075  0008E0  0E00               	movlw	0
  1076  0008E2  6E8A               	movwf	3978,c	;volatile
  1077                           
  1078                           ;main.c: 57: LATC = 0x00;
  1079  0008E4  0E00               	movlw	0
  1080  0008E6  6E8B               	movwf	3979,c	;volatile
  1081                           
  1082                           ;main.c: 58: LATD = 0x00;
  1083  0008E8  0E00               	movlw	0
  1084  0008EA  6E8C               	movwf	3980,c	;volatile
  1085                           
  1086                           ;main.c: 59: LATE = 0x00;
  1087  0008EC  0E00               	movlw	0
  1088  0008EE  6E8D               	movwf	3981,c	;volatile
  1089                           
  1090                           ;main.c: 61: ADCON0 = 0x00;
  1091  0008F0  0E00               	movlw	0
  1092  0008F2  6EC2               	movwf	4034,c	;volatile
  1093                           
  1094                           ;main.c: 62: ADCON1 = 0xFF;
  1095  0008F4  68C1               	setf	4033,c	;volatile
  1096                           
  1097                           ;main.c: 64: INT1IE = 1;
  1098  0008F6  86F0               	bsf	intcon3,3,c	;volatile
  1099                           
  1100                           ;main.c: 66: nRBPU = 0;
  1101  0008F8  9EF1               	bcf	intcon2,7,c	;volatile
  1102                           
  1103                           ;main.c: 68: initLCD();
  1104  0008FA  EC9C  F006         	call	_initLCD	;wreg free
  1105                           
  1106                           ;main.c: 69: I2C_Master_Init(10000);
  1107  0008FE  0E10               	movlw	16
  1108  000900  6E3A               	movwf	I2C_Master_Init@c,c
  1109  000902  0E27               	movlw	39
  1110  000904  6E3B               	movwf	I2C_Master_Init@c+1,c
  1111  000906  0E00               	movlw	0
  1112  000908  6E3C               	movwf	I2C_Master_Init@c+2,c
  1113  00090A  0E00               	movlw	0
  1114  00090C  6E3D               	movwf	I2C_Master_Init@c+3,c
  1115  00090E  ECCF  F005         	call	_I2C_Master_Init	;wreg free
  1116                           
  1117                           ;main.c: 73: (INTCONbits.GIE = 1);
  1118  000912  8EF2               	bsf	intcon,7,c	;volatile
  1119                           
  1120                           ;main.c: 75: curr_state = STANDBY;
  1121  000914  0E00               	movlw	0
  1122  000916  6E50               	movwf	_curr_state,c
  1123                           
  1124                           ;main.c: 78: switch(curr_state){
  1125                           
  1126                           ;main.c: 77: while(1){
  1127  000918  D012               	goto	l2744
  1128  00091A                     l2730:
  1129                           
  1130                           ;main.c: 80: standby();
  1131  00091A  EC1D  F007         	call	_standby	;wreg free
  1132                           
  1133                           ;main.c: 81: break;
  1134  00091E  D022               	goto	l2746
  1135  000920                     l2732:
  1136                           
  1137                           ;main.c: 83: operation();
  1138  000920  EC59  F005         	call	_operation	;wreg free
  1139                           
  1140                           ;main.c: 84: break;
  1141  000924  D01F               	goto	l2746
  1142  000926                     l2734:
  1143                           
  1144                           ;main.c: 86: operationend();
  1145  000926  EC9D  F007         	call	_operationend	;wreg free
  1146                           
  1147                           ;main.c: 87: break;
  1148  00092A  D01C               	goto	l2746
  1149  00092C                     l2736:
  1150                           
  1151                           ;main.c: 89: date_time();
  1152  00092C  ECC1  F004         	call	_date_time	;wreg free
  1153                           
  1154                           ;main.c: 90: break;
  1155  000930  D019               	goto	l2746
  1156  000932                     l2738:
  1157                           
  1158                           ;main.c: 92: bottle_count();
  1159  000932  EC53  F003         	call	_bottle_count	;wreg free
  1160                           
  1161                           ;main.c: 93: break;
  1162  000936  D016               	goto	l2746
  1163  000938                     l2740:
  1164                           
  1165                           ;main.c: 95: bottle_time();
  1166  000938  EC46  F007         	call	_bottle_time	;wreg free
  1167                           
  1168                           ;main.c: 97: }
  1169                           
  1170                           ;main.c: 96: break;
  1171  00093C  D013               	goto	l2746
  1172  00093E                     l2744:
  1173  00093E  5050               	movf	_curr_state,w,c
  1174                           
  1175                           ; Switch size 1, requested type "space"
  1176                           ; Number of cases is 6, Range of values is 0 to 5
  1177                           ; switch strategies available:
  1178                           ; Name         Instructions Cycles
  1179                           ; simple_byte           19    10 (average)
  1180                           ;	Chosen strategy is simple_byte
  1181  000940  0A00               	xorlw	0	; case 0
  1182  000942  B4D8               	btfsc	status,2,c
  1183  000944  D7EA               	goto	l2730
  1184  000946  0A01               	xorlw	1	; case 1
  1185  000948  B4D8               	btfsc	status,2,c
  1186  00094A  D7EA               	goto	l2732
  1187  00094C  0A03               	xorlw	3	; case 2
  1188  00094E  B4D8               	btfsc	status,2,c
  1189  000950  D7EA               	goto	l2734
  1190  000952  0A01               	xorlw	1	; case 3
  1191  000954  B4D8               	btfsc	status,2,c
  1192  000956  D7EA               	goto	l2736
  1193  000958  0A07               	xorlw	7	; case 4
  1194  00095A  B4D8               	btfsc	status,2,c
  1195  00095C  D7EA               	goto	l2738
  1196  00095E  0A01               	xorlw	1	; case 5
  1197  000960  B4D8               	btfsc	status,2,c
  1198  000962  D7EA               	goto	l2740
  1199  000964                     l2746:
  1200                           
  1201                           ;main.c: 98: _delay((unsigned long)((200)*(10000000/4000.0)));
  1202  000964  0E03               	movlw	3
  1203  000966  0100               	movlb	0	; () banked
  1204  000968  6F8B               	movwf	(??_main+1)& (0+255),b
  1205  00096A  0E8A               	movlw	138
  1206  00096C  0100               	movlb	0	; () banked
  1207  00096E  6F8A               	movwf	??_main& (0+255),b
  1208  000970  0E55               	movlw	85
  1209  000972                     u1997:
  1210  000972  2EE8               	decfsz	wreg,f,c
  1211  000974  D7FE               	bra	u1997
  1212  000976  2F8A               	decfsz	??_main& (0+255),f,b
  1213  000978  D7FC               	bra	u1997
  1214  00097A  2F8B               	decfsz	(??_main+1)& (0+255),f,b
  1215  00097C  D7FA               	bra	u1997
  1216  00097E  D000               	nop2	
  1217  000980  D7DE               	goto	l2744
  1218  000982                     __end_of_main:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           intcon	equ	0xFF2
  1225                           intcon2	equ	0xFF1
  1226                           intcon3	equ	0xFF0
  1227                           postinc0	equ	0xFEE
  1228                           wreg	equ	0xFE8
  1229                           status	equ	0xFD8
  1230                           
  1231 ;; *************** function _standby *****************
  1232 ;; Defined at:
  1233 ;;		line 142 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    7
  1254 ;; This function calls:
  1255 ;;		_lcdInst
  1256 ;;		_printf
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text1
  1263  000E3A                     __ptext1:
  1264                           	opt stack 0
  1265  000E3A                     _standby:
  1266                           	opt stack 23
  1267                           
  1268                           ;main.c: 143: lcdInst(0b10000000);
  1269                           
  1270                           ;incstack = 0
  1271  000E3A  0E80               	movlw	128
  1272  000E3C  ECB6  F007         	call	_lcdInst
  1273                           
  1274                           ;main.c: 144: printf("standby         ");
  1275  000E40  0E0A               	movlw	low STR_2
  1276  000E42  6E39               	movwf	printf@f,c
  1277  000E44  0EFF               	movlw	high STR_2
  1278  000E46  6E3A               	movwf	printf@f+1,c
  1279  000E48  EC09  F000         	call	_printf	;wreg free
  1280                           
  1281                           ;main.c: 145: lcdInst(0b11000000);
  1282  000E4C  0EC0               	movlw	192
  1283  000E4E  ECB6  F007         	call	_lcdInst
  1284                           
  1285                           ;main.c: 146: printf("PORTB: %d       ", PORTB);
  1286  000E52  0E2C               	movlw	low STR_3
  1287  000E54  6E39               	movwf	printf@f,c
  1288  000E56  0EFF               	movlw	high STR_3
  1289  000E58  6E3A               	movwf	printf@f+1,c
  1290  000E5A  CF81 F03B          	movff	3969,?_printf+2	;volatile
  1291  000E5E  6A3C               	clrf	?_printf+3,c
  1292  000E60  EC09  F000         	call	_printf	;wreg free
  1293  000E64  0012               	return	
  1294  000E66                     __end_of_standby:
  1295                           	opt stack 0
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           intcon	equ	0xFF2
  1301                           intcon2	equ	0xFF1
  1302                           intcon3	equ	0xFF0
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _operationend *****************
  1308 ;; Defined at:
  1309 ;;		line 256 in file "main.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;		None
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;		None
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;Total ram usage:        0 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    7
  1330 ;; This function calls:
  1331 ;;		_lcdInst
  1332 ;;		_printf
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  000F3A                     __ptext2:
  1340                           	opt stack 0
  1341  000F3A                     _operationend:
  1342                           	opt stack 23
  1343                           
  1344                           ;main.c: 257: lcdInst(0b10000000);
  1345                           
  1346                           ;incstack = 0
  1347  000F3A  0E80               	movlw	128
  1348  000F3C  ECB6  F007         	call	_lcdInst
  1349                           
  1350                           ;main.c: 258: printf("Operation Done!");
  1351  000F40  0ED6               	movlw	low STR_22
  1352  000F42  6E39               	movwf	printf@f,c
  1353  000F44  0EFF               	movlw	high STR_22
  1354  000F46  6E3A               	movwf	printf@f+1,c
  1355  000F48  EC09  F000         	call	_printf	;wreg free
  1356  000F4C  0012               	return	
  1357  000F4E                     __end_of_operationend:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           intcon	equ	0xFF2
  1364                           intcon2	equ	0xFF1
  1365                           intcon3	equ	0xFF0
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _operation *****************
  1371 ;; Defined at:
  1372 ;;		line 235 in file "main.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:        2 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    7
  1393 ;; This function calls:
  1394 ;;		_lcdInst
  1395 ;;		_printf
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text3
  1402  000AB2                     __ptext3:
  1403                           	opt stack 0
  1404  000AB2                     _operation:
  1405                           	opt stack 23
  1406                           
  1407                           ;main.c: 236: switch(operation_disp){
  1408                           
  1409                           ;incstack = 0
  1410  000AB2  D02A               	goto	l2628
  1411  000AB4                     l2608:
  1412                           
  1413                           ;main.c: 238: lcdInst(0b10000000);
  1414  000AB4  0E80               	movlw	128
  1415  000AB6  ECB6  F007         	call	_lcdInst
  1416                           
  1417                           ;main.c: 239: printf("Running~              ");
  1418  000ABA  0E86               	movlw	low STR_19
  1419  000ABC  6E39               	movwf	printf@f,c
  1420  000ABE  0EFE               	movlw	high STR_19
  1421  000AC0  6E3A               	movwf	printf@f+1,c
  1422  000AC2  EC09  F000         	call	_printf	;wreg free
  1423                           
  1424                           ;main.c: 240: operation_disp = 1;
  1425  000AC6  0E00               	movlw	0
  1426  000AC8  6E4F               	movwf	_operation_disp+1,c
  1427  000ACA  0E01               	movlw	1
  1428  000ACC  6E4E               	movwf	_operation_disp,c
  1429                           
  1430                           ;main.c: 241: break;
  1431  000ACE  0012               	return	
  1432  000AD0                     l2614:
  1433                           
  1434                           ;main.c: 243: lcdInst(0b10000000);
  1435  000AD0  0E80               	movlw	128
  1436  000AD2  ECB6  F007         	call	_lcdInst
  1437                           
  1438                           ;main.c: 244: printf("Running~~              ");
  1439  000AD6  0E6E               	movlw	low STR_20
  1440  000AD8  6E39               	movwf	printf@f,c
  1441  000ADA  0EFE               	movlw	high STR_20
  1442  000ADC  6E3A               	movwf	printf@f+1,c
  1443  000ADE  EC09  F000         	call	_printf	;wreg free
  1444                           
  1445                           ;main.c: 245: operation_disp = 2;
  1446  000AE2  0E00               	movlw	0
  1447  000AE4  6E4F               	movwf	_operation_disp+1,c
  1448  000AE6  0E02               	movlw	2
  1449  000AE8  6E4E               	movwf	_operation_disp,c
  1450                           
  1451                           ;main.c: 246: break;
  1452  000AEA  0012               	return	
  1453  000AEC                     l2620:
  1454                           
  1455                           ;main.c: 248: lcdInst(0b10000000);
  1456  000AEC  0E80               	movlw	128
  1457  000AEE  ECB6  F007         	call	_lcdInst
  1458                           
  1459                           ;main.c: 249: printf("Running~~~              ");
  1460  000AF2  0E55               	movlw	low STR_21
  1461  000AF4  6E39               	movwf	printf@f,c
  1462  000AF6  0EFE               	movlw	high STR_21
  1463  000AF8  6E3A               	movwf	printf@f+1,c
  1464  000AFA  EC09  F000         	call	_printf	;wreg free
  1465                           
  1466                           ;main.c: 250: operation_disp = 0;
  1467  000AFE  0E00               	movlw	0
  1468  000B00  6E4F               	movwf	_operation_disp+1,c
  1469  000B02  0E00               	movlw	0
  1470  000B04  6E4E               	movwf	_operation_disp,c
  1471                           
  1472                           ;main.c: 252: }
  1473                           
  1474                           ;main.c: 251: break;
  1475  000B06  0012               	return	
  1476  000B08                     l2628:
  1477  000B08  C04E  F045         	movff	_operation_disp,??_operation
  1478  000B0C  C04F  F046         	movff	_operation_disp+1,??_operation+1
  1479                           
  1480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1481                           ; Switch size 1, requested type "space"
  1482                           ; Number of cases is 1, Range of values is 0 to 0
  1483                           ; switch strategies available:
  1484                           ; Name         Instructions Cycles
  1485                           ; simple_byte            4     3 (average)
  1486                           ;	Chosen strategy is simple_byte
  1487  000B10  5046               	movf	??_operation+1,w,c
  1488  000B12  0A00               	xorlw	0	; case 0
  1489  000B14  A4D8               	btfss	status,2,c
  1490  000B16  0012               	return	
  1491                           
  1492                           ; Switch size 1, requested type "space"
  1493                           ; Number of cases is 3, Range of values is 0 to 2
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte           10     6 (average)
  1497                           ;	Chosen strategy is simple_byte
  1498  000B18  5045               	movf	??_operation,w,c
  1499  000B1A  0A00               	xorlw	0	; case 0
  1500  000B1C  B4D8               	btfsc	status,2,c
  1501  000B1E  D7CA               	goto	l2608
  1502  000B20  0A01               	xorlw	1	; case 1
  1503  000B22  B4D8               	btfsc	status,2,c
  1504  000B24  D7D5               	goto	l2614
  1505  000B26  0A03               	xorlw	3	; case 2
  1506  000B28  A4D8               	btfss	status,2,c
  1507  000B2A  0012               	return	
  1508  000B2C  D7DF               	goto	l2620
  1509  000B2E                     __end_of_operation:
  1510                           	opt stack 0
  1511                           tblptru	equ	0xFF8
  1512                           tblptrh	equ	0xFF7
  1513                           tblptrl	equ	0xFF6
  1514                           tablat	equ	0xFF5
  1515                           intcon	equ	0xFF2
  1516                           intcon2	equ	0xFF1
  1517                           intcon3	equ	0xFF0
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           status	equ	0xFD8
  1521                           
  1522 ;; *************** function _initLCD *****************
  1523 ;; Defined at:
  1524 ;;		line 14 in file "lcd.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;		None
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;Total ram usage:        1 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    6
  1545 ;; This function calls:
  1546 ;;		_lcdInst
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text4
  1553  000D38                     __ptext4:
  1554                           	opt stack 0
  1555  000D38                     _initLCD:
  1556                           	opt stack 24
  1557                           
  1558                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  1559                           
  1560                           ;incstack = 0
  1561  000D38  0E31               	movlw	49
  1562  000D3A  6E30               	movwf	??_initLCD& (0+255),c
  1563  000D3C  0EB2               	movlw	178
  1564  000D3E                     u2007:
  1565  000D3E  2EE8               	decfsz	wreg,f,c
  1566  000D40  D7FE               	bra	u2007
  1567  000D42  2E30               	decfsz	??_initLCD& (0+255),f,c
  1568  000D44  D7FC               	bra	u2007
  1569  000D46  D000               	nop2	
  1570                           
  1571                           ;lcd.c: 16: lcdInst(0b00110011);
  1572  000D48  0E33               	movlw	51
  1573  000D4A  ECB6  F007         	call	_lcdInst
  1574                           
  1575                           ;lcd.c: 17: lcdInst(0b00110011);
  1576  000D4E  0E33               	movlw	51
  1577  000D50  ECB6  F007         	call	_lcdInst
  1578                           
  1579                           ;lcd.c: 18: lcdInst(0b00110010);
  1580  000D54  0E32               	movlw	50
  1581  000D56  ECB6  F007         	call	_lcdInst
  1582                           
  1583                           ;lcd.c: 19: lcdInst(0b00101000);
  1584  000D5A  0E28               	movlw	40
  1585  000D5C  ECB6  F007         	call	_lcdInst
  1586                           
  1587                           ;lcd.c: 20: lcdInst(0b00001111);
  1588  000D60  0E0F               	movlw	15
  1589  000D62  ECB6  F007         	call	_lcdInst
  1590                           
  1591                           ;lcd.c: 21: lcdInst(0b00000110);
  1592  000D66  0E06               	movlw	6
  1593  000D68  ECB6  F007         	call	_lcdInst
  1594                           
  1595                           ;lcd.c: 22: lcdInst(0b00000001);
  1596  000D6C  0E01               	movlw	1
  1597  000D6E  ECB6  F007         	call	_lcdInst
  1598                           
  1599                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  1600  000D72  0E31               	movlw	49
  1601  000D74  6E30               	movwf	??_initLCD& (0+255),c
  1602  000D76  0EB2               	movlw	178
  1603  000D78                     u2017:
  1604  000D78  2EE8               	decfsz	wreg,f,c
  1605  000D7A  D7FE               	bra	u2017
  1606  000D7C  2E30               	decfsz	??_initLCD& (0+255),f,c
  1607  000D7E  D7FC               	bra	u2017
  1608  000D80  D000               	nop2	
  1609  000D82  0012               	return		;funcret
  1610  000D84                     __end_of_initLCD:
  1611                           	opt stack 0
  1612                           tblptru	equ	0xFF8
  1613                           tblptrh	equ	0xFF7
  1614                           tblptrl	equ	0xFF6
  1615                           tablat	equ	0xFF5
  1616                           intcon	equ	0xFF2
  1617                           intcon2	equ	0xFF1
  1618                           intcon3	equ	0xFF0
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           status	equ	0xFD8
  1622                           
  1623 ;; *************** function _date_time *****************
  1624 ;; Defined at:
  1625 ;;		line 160 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  i               1   68[COMRAM] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;Total ram usage:        1 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    7
  1646 ;; This function calls:
  1647 ;;		_I2C_Master_Read
  1648 ;;		_I2C_Master_Start
  1649 ;;		_I2C_Master_Stop
  1650 ;;		_I2C_Master_Write
  1651 ;;		_lcdInst
  1652 ;;		_printf
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text5
  1659  000982                     __ptext5:
  1660                           	opt stack 0
  1661  000982                     _date_time:
  1662                           	opt stack 23
  1663                           
  1664                           ;main.c: 162: I2C_Master_Start();
  1665                           
  1666                           ;incstack = 0
  1667  000982  ECD1  F007         	call	_I2C_Master_Start	;wreg free
  1668                           
  1669                           ;main.c: 163: I2C_Master_Write(0b11010000);
  1670  000986  0E00               	movlw	0
  1671  000988  6E2F               	movwf	I2C_Master_Write@d+1,c
  1672  00098A  0ED0               	movlw	208
  1673  00098C  6E2E               	movwf	I2C_Master_Write@d,c
  1674  00098E  ECC8  F007         	call	_I2C_Master_Write	;wreg free
  1675                           
  1676                           ;main.c: 164: I2C_Master_Write(0x00);
  1677  000992  0E00               	movlw	0
  1678  000994  6E2F               	movwf	I2C_Master_Write@d+1,c
  1679  000996  0E00               	movlw	0
  1680  000998  6E2E               	movwf	I2C_Master_Write@d,c
  1681  00099A  ECC8  F007         	call	_I2C_Master_Write	;wreg free
  1682                           
  1683                           ;main.c: 165: I2C_Master_Stop();
  1684  00099E  ECCD  F007         	call	_I2C_Master_Stop	;wreg free
  1685                           
  1686                           ;main.c: 168: I2C_Master_Start();
  1687  0009A2  ECD1  F007         	call	_I2C_Master_Start	;wreg free
  1688                           
  1689                           ;main.c: 169: I2C_Master_Write(0b11010001);
  1690  0009A6  0E00               	movlw	0
  1691  0009A8  6E2F               	movwf	I2C_Master_Write@d+1,c
  1692  0009AA  0ED1               	movlw	209
  1693  0009AC  6E2E               	movwf	I2C_Master_Write@d,c
  1694  0009AE  ECC8  F007         	call	_I2C_Master_Write	;wreg free
  1695                           
  1696                           ;main.c: 170: for(unsigned char i=0;i<0x06;i++){
  1697  0009B2  0E00               	movlw	0
  1698  0009B4  6E45               	movwf	date_time@i,c
  1699  0009B6                     l2644:
  1700  0009B6  0E05               	movlw	5
  1701  0009B8  6445               	cpfsgt	date_time@i,c
  1702  0009BA  D001               	goto	l2648
  1703  0009BC  D00E               	goto	l2654
  1704  0009BE                     l2648:
  1705                           
  1706                           ;main.c: 171: time[i] = I2C_Master_Read(1);
  1707  0009BE  5045               	movf	date_time@i,w,c
  1708  0009C0  0D01               	mullw	1
  1709  0009C2  0E47               	movlw	low _time
  1710  0009C4  24F3               	addwf	prodl,w,c
  1711  0009C6  6ED9               	movwf	fsr2l,c
  1712  0009C8  0E00               	movlw	high _time
  1713  0009CA  20F4               	addwfc	prodh,w,c
  1714  0009CC  6EDA               	movwf	fsr2h,c
  1715  0009CE  0E01               	movlw	1
  1716  0009D0  EC33  F007         	call	_I2C_Master_Read
  1717  0009D4  6EDF               	movwf	indf2,c
  1718  0009D6  2A45               	incf	date_time@i,f,c
  1719  0009D8  D7EE               	goto	l2644
  1720  0009DA                     l2654:
  1721                           
  1722                           ;main.c: 172: }
  1723                           ;main.c: 173: time[6] = I2C_Master_Read(0);
  1724  0009DA  0E00               	movlw	0
  1725  0009DC  EC33  F007         	call	_I2C_Master_Read
  1726  0009E0  6E4D               	movwf	_time+6,c
  1727                           
  1728                           ;main.c: 174: I2C_Master_Stop();
  1729  0009E2  ECCD  F007         	call	_I2C_Master_Stop	;wreg free
  1730                           
  1731                           ;main.c: 177: lcdInst(0b10000000);
  1732  0009E6  0E80               	movlw	128
  1733  0009E8  ECB6  F007         	call	_lcdInst
  1734                           
  1735                           ;main.c: 178: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  1736  0009EC  0ECB               	movlw	low STR_4
  1737  0009EE  6E39               	movwf	printf@f,c
  1738  0009F0  0EFE               	movlw	high STR_4
  1739  0009F2  6E3A               	movwf	printf@f+1,c
  1740  0009F4  C04C  F03B         	movff	_time+5,?_printf+2
  1741  0009F8  6A3C               	clrf	?_printf+3,c
  1742  0009FA  C04B  F03D         	movff	_time+4,?_printf+4
  1743  0009FE  6A3E               	clrf	?_printf+5,c
  1744  000A00  C04D  F03F         	movff	_time+6,?_printf+6
  1745  000A04  6A40               	clrf	?_printf+7,c
  1746  000A06  EC09  F000         	call	_printf	;wreg free
  1747                           
  1748                           ;main.c: 179: lcdInst(0b11000000);
  1749  000A0A  0EC0               	movlw	192
  1750  000A0C  ECB6  F007         	call	_lcdInst
  1751                           
  1752                           ;main.c: 180: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  1753  000A10  0EE2               	movlw	low STR_5
  1754  000A12  6E39               	movwf	printf@f,c
  1755  000A14  0EFE               	movlw	high STR_5
  1756  000A16  6E3A               	movwf	printf@f+1,c
  1757  000A18  C049  F03B         	movff	_time+2,?_printf+2
  1758  000A1C  6A3C               	clrf	?_printf+3,c
  1759  000A1E  C048  F03D         	movff	_time+1,?_printf+4
  1760  000A22  6A3E               	clrf	?_printf+5,c
  1761  000A24  C047  F03F         	movff	_time,?_printf+6
  1762  000A28  6A40               	clrf	?_printf+7,c
  1763  000A2A  EC09  F000         	call	_printf	;wreg free
  1764  000A2E  0012               	return	
  1765  000A30                     __end_of_date_time:
  1766                           	opt stack 0
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           prodh	equ	0xFF4
  1772                           prodl	equ	0xFF3
  1773                           intcon	equ	0xFF2
  1774                           intcon2	equ	0xFF1
  1775                           intcon3	equ	0xFF0
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           indf2	equ	0xFDF
  1779                           fsr2h	equ	0xFDA
  1780                           fsr2l	equ	0xFD9
  1781                           status	equ	0xFD8
  1782                           
  1783 ;; *************** function _I2C_Master_Write *****************
  1784 ;; Defined at:
  1785 ;;		line 47 in file "I2C.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  d               2   45[COMRAM] unsigned int 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    5
  1806 ;; This function calls:
  1807 ;;		_I2C_Master_Wait
  1808 ;; This function is called by:
  1809 ;;		_date_time
  1810 ;;		_set_time
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text6
  1815  000F90                     __ptext6:
  1816                           	opt stack 0
  1817  000F90                     _I2C_Master_Write:
  1818                           	opt stack 24
  1819                           
  1820                           ;I2C.c: 49: I2C_Master_Wait();
  1821                           
  1822                           ;incstack = 0
  1823  000F90  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  1824                           
  1825                           ;I2C.c: 50: SSPBUF = d;
  1826  000F94  C02E  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1827  000F98  0012               	return		;funcret
  1828  000F9A                     __end_of_I2C_Master_Write:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           intcon	equ	0xFF2
  1837                           intcon2	equ	0xFF1
  1838                           intcon3	equ	0xFF0
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           indf2	equ	0xFDF
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8
  1845                           
  1846 ;; *************** function _I2C_Master_Stop *****************
  1847 ;; Defined at:
  1848 ;;		line 41 in file "I2C.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg, status,2, status,0, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;Total ram usage:        0 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:    5
  1869 ;; This function calls:
  1870 ;;		_I2C_Master_Wait
  1871 ;; This function is called by:
  1872 ;;		_date_time
  1873 ;;		_set_time
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text7
  1878  000F9A                     __ptext7:
  1879                           	opt stack 0
  1880  000F9A                     _I2C_Master_Stop:
  1881                           	opt stack 24
  1882                           
  1883                           ;I2C.c: 43: I2C_Master_Wait();
  1884                           
  1885                           ;incstack = 0
  1886  000F9A  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  1887                           
  1888                           ;I2C.c: 44: PEN = 1;
  1889  000F9E  84C5               	bsf	4037,2,c	;volatile
  1890  000FA0  0012               	return		;funcret
  1891  000FA2                     __end_of_I2C_Master_Stop:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           prodh	equ	0xFF4
  1898                           prodl	equ	0xFF3
  1899                           intcon	equ	0xFF2
  1900                           intcon2	equ	0xFF1
  1901                           intcon3	equ	0xFF0
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           indf2	equ	0xFDF
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _I2C_Master_Start *****************
  1910 ;; Defined at:
  1911 ;;		line 29 in file "I2C.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, status,2, status,0, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:        0 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    5
  1932 ;; This function calls:
  1933 ;;		_I2C_Master_Wait
  1934 ;; This function is called by:
  1935 ;;		_date_time
  1936 ;;		_set_time
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text8
  1941  000FA2                     __ptext8:
  1942                           	opt stack 0
  1943  000FA2                     _I2C_Master_Start:
  1944                           	opt stack 24
  1945                           
  1946                           ;I2C.c: 31: I2C_Master_Wait();
  1947                           
  1948                           ;incstack = 0
  1949  000FA2  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  1950                           
  1951                           ;I2C.c: 32: SEN = 1;
  1952  000FA6  80C5               	bsf	4037,0,c	;volatile
  1953  000FA8  0012               	return		;funcret
  1954  000FAA                     __end_of_I2C_Master_Start:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           tblptrh	equ	0xFF7
  1958                           tblptrl	equ	0xFF6
  1959                           tablat	equ	0xFF5
  1960                           prodh	equ	0xFF4
  1961                           prodl	equ	0xFF3
  1962                           intcon	equ	0xFF2
  1963                           intcon2	equ	0xFF1
  1964                           intcon3	equ	0xFF0
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf2	equ	0xFDF
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _I2C_Master_Read *****************
  1973 ;; Defined at:
  1974 ;;		line 53 in file "I2C.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  a               1    wreg     unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  a               1   45[COMRAM] unsigned char 
  1979 ;;  temp            1   46[COMRAM] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      unsigned char 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;Total ram usage:        2 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    5
  1996 ;; This function calls:
  1997 ;;		_I2C_Master_Wait
  1998 ;; This function is called by:
  1999 ;;		_date_time
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text9
  2004  000E66                     __ptext9:
  2005                           	opt stack 0
  2006  000E66                     _I2C_Master_Read:
  2007                           	opt stack 24
  2008                           
  2009                           ;incstack = 0
  2010                           ;I2C_Master_Read@a stored from wreg
  2011  000E66  6E2E               	movwf	I2C_Master_Read@a,c
  2012                           
  2013                           ;I2C.c: 55: unsigned char temp;
  2014                           ;I2C.c: 56: I2C_Master_Wait();
  2015  000E68  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  2016                           
  2017                           ;I2C.c: 57: RCEN = 1;
  2018  000E6C  86C5               	bsf	4037,3,c	;volatile
  2019                           
  2020                           ;I2C.c: 58: I2C_Master_Wait();
  2021  000E6E  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  2022                           
  2023                           ;I2C.c: 59: temp = SSPBUF;
  2024  000E72  CFC9 F02F          	movff	4041,I2C_Master_Read@temp	;volatile
  2025                           
  2026                           ;I2C.c: 60: I2C_Master_Wait();
  2027  000E76  ECA7  F007         	call	_I2C_Master_Wait	;wreg free
  2028                           
  2029                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2030  000E7A  502E               	movf	I2C_Master_Read@a,w,c
  2031  000E7C  A4D8               	btfss	status,2,c
  2032  000E7E  D002               	goto	u110
  2033  000E80  8AC5               	bsf	4037,5,c	;volatile
  2034  000E82  D001               	goto	l1040
  2035  000E84                     u110:
  2036  000E84  9AC5               	bcf	4037,5,c	;volatile
  2037  000E86                     l1040:
  2038                           
  2039                           ;I2C.c: 62: ACKEN = 1;
  2040  000E86  88C5               	bsf	4037,4,c	;volatile
  2041                           
  2042                           ;I2C.c: 63: return temp;
  2043  000E88  502F               	movf	I2C_Master_Read@temp,w,c
  2044  000E8A  0012               	return	
  2045  000E8C                     __end_of_I2C_Master_Read:
  2046                           	opt stack 0
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           prodh	equ	0xFF4
  2052                           prodl	equ	0xFF3
  2053                           intcon	equ	0xFF2
  2054                           intcon2	equ	0xFF1
  2055                           intcon3	equ	0xFF0
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           indf2	equ	0xFDF
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _I2C_Master_Wait *****************
  2064 ;; Defined at:
  2065 ;;		line 24 in file "I2C.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        1 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    4
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_I2C_Master_Start
  2090 ;;		_I2C_Master_Stop
  2091 ;;		_I2C_Master_Write
  2092 ;;		_I2C_Master_Read
  2093 ;;		_I2C_Master_RepeatedStart
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text10
  2098  000F4E                     __ptext10:
  2099                           	opt stack 0
  2100  000F4E                     _I2C_Master_Wait:
  2101                           	opt stack 24
  2102  000F4E                     l34:
  2103  000F4E  B4C7               	btfsc	4039,2,c	;volatile
  2104  000F50  D7FE               	goto	l34
  2105  000F52  CFC5 F02D          	movff	4037,??_I2C_Master_Wait	;volatile
  2106  000F56  0E1F               	movlw	31
  2107  000F58  162D               	andwf	??_I2C_Master_Wait,f,c
  2108  000F5A  B4D8               	btfsc	status,2,c
  2109  000F5C  0012               	return	
  2110  000F5E  D7F7               	goto	l34
  2111  000F60                     __end_of_I2C_Master_Wait:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           prodh	equ	0xFF4
  2118                           prodl	equ	0xFF3
  2119                           intcon	equ	0xFF2
  2120                           intcon2	equ	0xFF1
  2121                           intcon3	equ	0xFF0
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           indf2	equ	0xFDF
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _bottle_time *****************
  2130 ;; Defined at:
  2131 ;;		line 227 in file "main.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    7
  2152 ;; This function calls:
  2153 ;;		_lcdInst
  2154 ;;		_printf
  2155 ;; This function is called by:
  2156 ;;		_main
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text11
  2161  000E8C                     __ptext11:
  2162                           	opt stack 0
  2163  000E8C                     _bottle_time:
  2164                           	opt stack 23
  2165                           
  2166                           ;main.c: 228: lcdInst(0b10000000);
  2167                           
  2168                           ;incstack = 0
  2169  000E8C  0E80               	movlw	128
  2170  000E8E  ECB6  F007         	call	_lcdInst
  2171                           
  2172                           ;main.c: 229: printf("Total Operation       ");
  2173  000E92  0EB4               	movlw	low STR_17
  2174  000E94  6E39               	movwf	printf@f,c
  2175  000E96  0EFE               	movlw	high STR_17
  2176  000E98  6E3A               	movwf	printf@f+1,c
  2177  000E9A  EC09  F000         	call	_printf	;wreg free
  2178                           
  2179                           ;main.c: 230: lcdInst(0b11000000);
  2180  000E9E  0EC0               	movlw	192
  2181  000EA0  ECB6  F007         	call	_lcdInst
  2182                           
  2183                           ;main.c: 231: printf("Time: 92s             ");
  2184  000EA4  0E9D               	movlw	low STR_18
  2185  000EA6  6E39               	movwf	printf@f,c
  2186  000EA8  0EFE               	movlw	high STR_18
  2187  000EAA  6E3A               	movwf	printf@f+1,c
  2188  000EAC  EC09  F000         	call	_printf	;wreg free
  2189  000EB0  0012               	return	
  2190  000EB2                     __end_of_bottle_time:
  2191                           	opt stack 0
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           intcon	equ	0xFF2
  2199                           intcon2	equ	0xFF1
  2200                           intcon3	equ	0xFF0
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           indf2	equ	0xFDF
  2204                           fsr2h	equ	0xFDA
  2205                           fsr2l	equ	0xFD9
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _bottle_count *****************
  2209 ;; Defined at:
  2210 ;;		line 185 in file "main.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;		None
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;		None
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;Total ram usage:        0 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    7
  2231 ;; This function calls:
  2232 ;;		___awmod
  2233 ;;		_lcdInst
  2234 ;;		_printf
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text12
  2241  0006A6                     __ptext12:
  2242                           	opt stack 0
  2243  0006A6                     _bottle_count:
  2244                           	opt stack 23
  2245                           
  2246                           ;main.c: 186: switch(bottle_count_disp % 5){
  2247                           
  2248                           ;incstack = 0
  2249  0006A6  D06D               	goto	l2700
  2250  0006A8                     l2664:
  2251                           
  2252                           ;main.c: 188: lcdInst(0b10000000);
  2253  0006A8  0E80               	movlw	128
  2254  0006AA  ECB6  F007         	call	_lcdInst
  2255                           
  2256                           ;main.c: 189: printf("Bottle Count    ");
  2257  0006AE  0E3D               	movlw	low STR_6
  2258  0006B0  6E39               	movwf	printf@f,c
  2259  0006B2  0EFF               	movlw	high STR_6
  2260  0006B4  6E3A               	movwf	printf@f+1,c
  2261  0006B6  EC09  F000         	call	_printf	;wreg free
  2262                           
  2263                           ;main.c: 190: lcdInst(0b11000000);
  2264  0006BA  0EC0               	movlw	192
  2265  0006BC  ECB6  F007         	call	_lcdInst
  2266                           
  2267                           ;main.c: 191: printf("Total: 10       ");
  2268  0006C0  0E1B               	movlw	low STR_7
  2269  0006C2  6E39               	movwf	printf@f,c
  2270  0006C4  0EFF               	movlw	high STR_7
  2271  0006C6  6E3A               	movwf	printf@f+1,c
  2272  0006C8  EC09  F000         	call	_printf	;wreg free
  2273                           
  2274                           ;main.c: 192: break;
  2275  0006CC  0012               	return	
  2276  0006CE                     l2670:
  2277                           
  2278                           ;main.c: 194: lcdInst(0b10000000);
  2279  0006CE  0E80               	movlw	128
  2280  0006D0  ECB6  F007         	call	_lcdInst
  2281                           
  2282                           ;main.c: 195: printf("YOP+CAP+LBL: 3  ");
  2283  0006D4  0E81               	movlw	low STR_8
  2284  0006D6  6E39               	movwf	printf@f,c
  2285  0006D8  0EFF               	movlw	high STR_8
  2286  0006DA  6E3A               	movwf	printf@f+1,c
  2287  0006DC  EC09  F000         	call	_printf	;wreg free
  2288                           
  2289                           ;main.c: 196: lcdInst(0b11000000);
  2290  0006E0  0EC0               	movlw	192
  2291  0006E2  ECB6  F007         	call	_lcdInst
  2292                           
  2293                           ;main.c: 197: printf("YOP+CAP-LBL: 1  ");
  2294  0006E6  0E70               	movlw	low STR_9
  2295  0006E8  6E39               	movwf	printf@f,c
  2296  0006EA  0EFF               	movlw	high STR_9
  2297  0006EC  6E3A               	movwf	printf@f+1,c
  2298  0006EE  EC09  F000         	call	_printf	;wreg free
  2299                           
  2300                           ;main.c: 198: break;
  2301  0006F2  0012               	return	
  2302  0006F4                     l2676:
  2303                           
  2304                           ;main.c: 200: lcdInst(0b10000000);
  2305  0006F4  0E80               	movlw	128
  2306  0006F6  ECB6  F007         	call	_lcdInst
  2307                           
  2308                           ;main.c: 201: printf("YOP-CAP+LBL: 1  ");
  2309  0006FA  0E5F               	movlw	low STR_10
  2310  0006FC  6E39               	movwf	printf@f,c
  2311  0006FE  0EFF               	movlw	high STR_10
  2312  000700  6E3A               	movwf	printf@f+1,c
  2313  000702  EC09  F000         	call	_printf	;wreg free
  2314                           
  2315                           ;main.c: 202: lcdInst(0b11000000);
  2316  000706  0EC0               	movlw	192
  2317  000708  ECB6  F007         	call	_lcdInst
  2318                           
  2319                           ;main.c: 203: printf("YOP-CAP-LBL: 0  ");
  2320  00070C  0E4E               	movlw	low STR_11
  2321  00070E  6E39               	movwf	printf@f,c
  2322  000710  0EFF               	movlw	high STR_11
  2323  000712  6E3A               	movwf	printf@f+1,c
  2324  000714  EC09  F000         	call	_printf	;wreg free
  2325                           
  2326                           ;main.c: 204: break;
  2327  000718  0012               	return	
  2328  00071A                     l2682:
  2329                           
  2330                           ;main.c: 206: lcdInst(0b10000000);
  2331  00071A  0E80               	movlw	128
  2332  00071C  ECB6  F007         	call	_lcdInst
  2333                           
  2334                           ;main.c: 207: printf("ESKA+CAP+LBL: 1 ");
  2335  000720  0E92               	movlw	low STR_12
  2336  000722  6E39               	movwf	printf@f,c
  2337  000724  0EFF               	movlw	high STR_12
  2338  000726  6E3A               	movwf	printf@f+1,c
  2339  000728  EC09  F000         	call	_printf	;wreg free
  2340                           
  2341                           ;main.c: 208: lcdInst(0b11000000);
  2342  00072C  0EC0               	movlw	192
  2343  00072E  ECB6  F007         	call	_lcdInst
  2344                           
  2345                           ;main.c: 209: printf("ESKA+CAP-LBL: 1 ");
  2346  000732  0EB4               	movlw	low STR_13
  2347  000734  6E39               	movwf	printf@f,c
  2348  000736  0EFF               	movlw	high STR_13
  2349  000738  6E3A               	movwf	printf@f+1,c
  2350  00073A  EC09  F000         	call	_printf	;wreg free
  2351                           
  2352                           ;main.c: 210: break;
  2353  00073E  0012               	return	
  2354  000740                     l2688:
  2355                           
  2356                           ;main.c: 212: lcdInst(0b10000000);
  2357  000740  0E80               	movlw	128
  2358  000742  ECB6  F007         	call	_lcdInst
  2359                           
  2360                           ;main.c: 213: printf("ESKA-CAP+LBL: 1 ");
  2361  000746  0EA3               	movlw	low STR_14
  2362  000748  6E39               	movwf	printf@f,c
  2363  00074A  0EFF               	movlw	high STR_14
  2364  00074C  6E3A               	movwf	printf@f+1,c
  2365  00074E  EC09  F000         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 214: lcdInst(0b11000000);
  2368  000752  0EC0               	movlw	192
  2369  000754  ECB6  F007         	call	_lcdInst
  2370                           
  2371                           ;main.c: 215: printf("ESKA-CAP-LBL: 2 ");
  2372  000758  0EC5               	movlw	low STR_15
  2373  00075A  6E39               	movwf	printf@f,c
  2374  00075C  0EFF               	movlw	high STR_15
  2375  00075E  6E3A               	movwf	printf@f+1,c
  2376  000760  EC09  F000         	call	_printf	;wreg free
  2377                           
  2378                           ;main.c: 216: break;
  2379  000764  0012               	return	
  2380  000766                     l2694:
  2381                           
  2382                           ;main.c: 219: lcdInst(0b10000000);
  2383  000766  0E80               	movlw	128
  2384  000768  ECB6  F007         	call	_lcdInst
  2385                           
  2386                           ;main.c: 220: printf("ERROR: %d", bottle_count_disp);
  2387  00076C  0EF4               	movlw	low STR_16
  2388  00076E  6E39               	movwf	printf@f,c
  2389  000770  0EFF               	movlw	high STR_16
  2390  000772  6E3A               	movwf	printf@f+1,c
  2391  000774  C051  F03B         	movff	_bottle_count_disp,?_printf+2
  2392  000778  C052  F03C         	movff	_bottle_count_disp+1,?_printf+3
  2393  00077C  EC09  F000         	call	_printf	;wreg free
  2394  000780  D7F2               	goto	l2694
  2395  000782                     l2700:
  2396  000782  C051  F02D         	movff	_bottle_count_disp,___awmod@dividend
  2397  000786  C052  F02E         	movff	_bottle_count_disp+1,___awmod@dividend+1
  2398  00078A  0E00               	movlw	0
  2399  00078C  6E30               	movwf	___awmod@divisor+1,c
  2400  00078E  0E05               	movlw	5
  2401  000790  6E2F               	movwf	___awmod@divisor,c
  2402  000792  EC97  F005         	call	___awmod	;wreg free
  2403                           
  2404                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2405                           ; Switch size 1, requested type "space"
  2406                           ; Number of cases is 1, Range of values is 0 to 0
  2407                           ; switch strategies available:
  2408                           ; Name         Instructions Cycles
  2409                           ; simple_byte            4     3 (average)
  2410                           ;	Chosen strategy is simple_byte
  2411  000796  502E               	movf	?___awmod+1,w,c
  2412  000798  0A00               	xorlw	0	; case 0
  2413  00079A  A4D8               	btfss	status,2,c
  2414  00079C  D7E4               	goto	l2694
  2415                           
  2416                           ; Switch size 1, requested type "space"
  2417                           ; Number of cases is 5, Range of values is 0 to 4
  2418                           ; switch strategies available:
  2419                           ; Name         Instructions Cycles
  2420                           ; simple_byte           16     9 (average)
  2421                           ;	Chosen strategy is simple_byte
  2422  00079E  502D               	movf	?___awmod,w,c
  2423  0007A0  0A00               	xorlw	0	; case 0
  2424  0007A2  B4D8               	btfsc	status,2,c
  2425  0007A4  D781               	goto	l2664
  2426  0007A6  0A01               	xorlw	1	; case 1
  2427  0007A8  B4D8               	btfsc	status,2,c
  2428  0007AA  D791               	goto	l2670
  2429  0007AC  0A03               	xorlw	3	; case 2
  2430  0007AE  B4D8               	btfsc	status,2,c
  2431  0007B0  D7A1               	goto	l2676
  2432  0007B2  0A01               	xorlw	1	; case 3
  2433  0007B4  B4D8               	btfsc	status,2,c
  2434  0007B6  D7B1               	goto	l2682
  2435  0007B8  0A07               	xorlw	7	; case 4
  2436  0007BA  B4D8               	btfsc	status,2,c
  2437  0007BC  D7C1               	goto	l2688
  2438  0007BE  D7D3               	goto	l2694
  2439  0007C0                     __end_of_bottle_count:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           intcon	equ	0xFF2
  2448                           intcon2	equ	0xFF1
  2449                           intcon3	equ	0xFF0
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           indf2	equ	0xFDF
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _printf *****************
  2458 ;; Defined at:
  2459 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  f               2   56[COMRAM] PTR const unsigned char 
  2462 ;;		 -> STR_22(16), STR_21(25), STR_20(24), STR_19(23), 
  2463 ;;		 -> STR_18(23), STR_17(23), STR_16(10), STR_15(17), 
  2464 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  2465 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  2466 ;;		 -> STR_6(17), STR_5(23), STR_4(23), STR_3(17), 
  2467 ;;		 -> STR_2(17), STR_1(14), 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  idx             1    0[BANK0 ] unsigned char 
  2470 ;;  tmpval          4    0        struct .
  2471 ;;  cp              3    0        PTR const unsigned char 
  2472 ;;  width           2    7[BANK0 ] int 
  2473 ;;  val             2    4[BANK0 ] unsigned int 
  2474 ;;  ap              2    1[BANK0 ] PTR void [1]
  2475 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2476 ;;  len             2    0        unsigned int 
  2477 ;;  c               1    9[BANK0 ] char 
  2478 ;;  flag            1    6[BANK0 ] unsigned char 
  2479 ;;  prec            1    3[BANK0 ] char 
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  2   56[COMRAM] int 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2489 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;Total ram usage:       22 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    6
  2496 ;; This function calls:
  2497 ;;		___lwdiv
  2498 ;;		___lwmod
  2499 ;;		___wmul
  2500 ;;		_isdigit
  2501 ;;		_putch
  2502 ;; This function is called by:
  2503 ;;		_standby
  2504 ;;		_date_time
  2505 ;;		_bottle_count
  2506 ;;		_bottle_time
  2507 ;;		_operation
  2508 ;;		_operationend
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text13
  2513  000012                     __ptext13:
  2514                           	opt stack 0
  2515  000012                     _printf:
  2516                           	opt stack 23
  2517                           
  2518                           ;doprnt.c: 466: va_list ap;
  2519                           ;doprnt.c: 499: signed char c;
  2520                           ;doprnt.c: 501: int width;
  2521                           ;doprnt.c: 506: signed char prec;
  2522                           ;doprnt.c: 508: unsigned char flag;
  2523                           ;doprnt.c: 523: union {
  2524                           ;doprnt.c: 524: unsigned long vd;
  2525                           ;doprnt.c: 525: double integ;
  2526                           ;doprnt.c: 526: } tmpval;
  2527                           ;doprnt.c: 528: unsigned int val;
  2528                           ;doprnt.c: 529: unsigned len;
  2529                           ;doprnt.c: 530: const char * cp;
  2530                           ;doprnt.c: 533: *ap = __va_start();
  2531                           
  2532                           ;incstack = 0
  2533  000012  0E3B               	movlw	low (?_printf+2)
  2534  000014  0100               	movlb	0	; () banked
  2535  000016  6F81               	movwf	printf@ap& (0+255),b
  2536  000018  0E00               	movlw	high (?_printf+2)
  2537  00001A  0100               	movlb	0	; () banked
  2538  00001C  6F82               	movwf	(printf@ap+1)& (0+255),b
  2539                           
  2540                           ;doprnt.c: 536: while(c = *f++) {
  2541  00001E  D1AF               	goto	l2578
  2542  000020                     l2452:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;doprnt.c: 538: if(c != '%')
  2546  000020  0E25               	movlw	37
  2547  000022  0100               	movlb	0	; () banked
  2548  000024  1989               	xorwf	printf@c& (0+255),w,b
  2549  000026  B4D8               	btfsc	status,2,c
  2550  000028  D005               	goto	l2456
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 540: {
  2554                           ;doprnt.c: 541: (putch(c) );
  2555  00002A  0100               	movlb	0	; () banked
  2556  00002C  5189               	movf	printf@c& (0+255),w,b
  2557  00002E  ECB0  F007         	call	_putch
  2558                           
  2559                           ;doprnt.c: 542: continue;
  2560  000032  D1A5               	goto	l2578
  2561  000034                     l2456:
  2562                           
  2563                           ;doprnt.c: 543: }
  2564                           ;doprnt.c: 546: width = 0;
  2565  000034  0E00               	movlw	0
  2566  000036  0100               	movlb	0	; () banked
  2567  000038  6F88               	movwf	(printf@width+1)& (0+255),b
  2568  00003A  0E00               	movlw	0
  2569  00003C  6F87               	movwf	printf@width& (0+255),b
  2570                           
  2571                           ;doprnt.c: 548: flag = 0;
  2572  00003E  0E00               	movlw	0
  2573  000040  0100               	movlb	0	; () banked
  2574  000042  6F86               	movwf	printf@flag& (0+255),b
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 551: switch(*f) {
  2578                           
  2579                           ;doprnt.c: 550: for(;;) {
  2580  000044  D004               	goto	l2462
  2581  000046                     l2458:
  2582                           
  2583                           ;doprnt.c: 580: flag |= 0x04;
  2584  000046  0100               	movlb	0	; () banked
  2585  000048  8586               	bsf	printf@flag& (0+255),2,b
  2586                           
  2587                           ;doprnt.c: 581: f++;
  2588  00004A  4A39               	infsnz	printf@f,f,c
  2589  00004C  2A3A               	incf	printf@f+1,f,c
  2590  00004E                     l2462:
  2591  00004E  C039  FFF6         	movff	printf@f,tblptrl
  2592  000052  C03A  FFF7         	movff	printf@f+1,tblptrh
  2593  000056                     	if	0	;tblptru may be non-zero
  2594  000056                     	endif
  2595  000056                     	if	0	;tblptru may be non-zero
  2596  000056                     	endif
  2597  000056  0008               	tblrd		*
  2598  000058  50F5               	movf	tablat,w,c
  2599                           
  2600                           ; Switch size 1, requested type "space"
  2601                           ; Number of cases is 1, Range of values is 48 to 48
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte            4     3 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  00005A  0A30               	xorlw	48	; case 48
  2607  00005C  B4D8               	btfsc	status,2,c
  2608  00005E  D7F3               	goto	l2458
  2609                           
  2610                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2611                           
  2612                           ;doprnt.c: 586: }
  2613                           
  2614                           ;doprnt.c: 585: break;
  2615  000060  C039  FFF6         	movff	printf@f,tblptrl
  2616  000064  C03A  FFF7         	movff	printf@f+1,tblptrh
  2617  000068                     	if	0	;tblptru may be non-zero
  2618  000068                     	endif
  2619  000068                     	if	0	;tblptru may be non-zero
  2620  000068                     	endif
  2621  000068  0008               	tblrd		*
  2622  00006A  50F5               	movf	tablat,w,c
  2623  00006C  EC7F  F007         	call	_isdigit
  2624  000070  A0D8               	btfss	status,0,c
  2625  000072  D039               	goto	l2480
  2626                           
  2627                           ;doprnt.c: 598: width = 0;
  2628  000074  0E00               	movlw	0
  2629  000076  0100               	movlb	0	; () banked
  2630  000078  6F88               	movwf	(printf@width+1)& (0+255),b
  2631  00007A  0E00               	movlw	0
  2632  00007C  6F87               	movwf	printf@width& (0+255),b
  2633  00007E                     l2468:
  2634                           
  2635                           ;doprnt.c: 600: width *= 10;
  2636  00007E  C087  F02D         	movff	printf@width,___wmul@multiplier
  2637  000082  C088  F02E         	movff	printf@width+1,___wmul@multiplier+1
  2638  000086  0E00               	movlw	0
  2639  000088  6E30               	movwf	___wmul@multiplicand+1,c
  2640  00008A  0E0A               	movlw	10
  2641  00008C  6E2F               	movwf	___wmul@multiplicand,c
  2642  00008E  EC59  F007         	call	___wmul	;wreg free
  2643  000092  C02D  F087         	movff	?___wmul,printf@width
  2644  000096  C02E  F088         	movff	?___wmul+1,printf@width+1
  2645                           
  2646                           ;doprnt.c: 601: width += *f++ - '0';
  2647  00009A  0ED0               	movlw	208
  2648  00009C  6E41               	movwf	??_printf& (0+255),c
  2649  00009E  0EFF               	movlw	255
  2650  0000A0  6E42               	movwf	(??_printf+1)& (0+255),c
  2651  0000A2  C039  FFF6         	movff	printf@f,tblptrl
  2652  0000A6  C03A  FFF7         	movff	printf@f+1,tblptrh
  2653  0000AA                     	if	0	;tblptru may be non-zero
  2654  0000AA                     	endif
  2655  0000AA                     	if	0	;tblptru may be non-zero
  2656  0000AA                     	endif
  2657  0000AA  0008               	tblrd		*
  2658  0000AC  50F5               	movf	tablat,w,c
  2659  0000AE  6E43               	movwf	(??_printf+2)& (0+255),c
  2660  0000B0  6A44               	clrf	(??_printf+3)& (0+255),c
  2661  0000B2  5041               	movf	??_printf,w,c
  2662  0000B4  2643               	addwf	??_printf+2,f,c
  2663  0000B6  5042               	movf	??_printf+1,w,c
  2664  0000B8  2244               	addwfc	??_printf+3,f,c
  2665  0000BA  5043               	movf	??_printf+2,w,c
  2666  0000BC  0100               	movlb	0	; () banked
  2667  0000BE  2787               	addwf	printf@width& (0+255),f,b
  2668  0000C0  5044               	movf	??_printf+3,w,c
  2669  0000C2  0100               	movlb	0	; () banked
  2670  0000C4  2388               	addwfc	(printf@width+1)& (0+255),f,b
  2671                           
  2672                           ; BSR set to: 0
  2673  0000C6  4A39               	infsnz	printf@f,f,c
  2674  0000C8  2A3A               	incf	printf@f+1,f,c
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2678  0000CA  C039  FFF6         	movff	printf@f,tblptrl
  2679  0000CE  C03A  FFF7         	movff	printf@f+1,tblptrh
  2680  0000D2                     	if	0	;tblptru may be non-zero
  2681  0000D2                     	endif
  2682  0000D2                     	if	0	;tblptru may be non-zero
  2683  0000D2                     	endif
  2684  0000D2  0008               	tblrd		*
  2685  0000D4  50F5               	movf	tablat,w,c
  2686  0000D6  EC7F  F007         	call	_isdigit
  2687  0000DA  A0D8               	btfss	status,0,c
  2688  0000DC  D004               	goto	l2480
  2689  0000DE  D7CF               	goto	l2468
  2690  0000E0                     l2476:
  2691                           
  2692                           ;doprnt.c: 721: flag |= 0x80;
  2693  0000E0  0100               	movlb	0	; () banked
  2694  0000E2  8F86               	bsf	printf@flag& (0+255),7,b
  2695                           
  2696                           ;doprnt.c: 723: break;
  2697  0000E4  D018               	goto	l264
  2698  0000E6                     l2480:
  2699  0000E6  C039  FFF6         	movff	printf@f,tblptrl
  2700  0000EA  C03A  FFF7         	movff	printf@f+1,tblptrh
  2701  0000EE  4A39               	infsnz	printf@f,f,c
  2702  0000F0  2A3A               	incf	printf@f+1,f,c
  2703  0000F2                     	if	0	;tblptru may be non-zero
  2704  0000F2                     	endif
  2705  0000F2                     	if	0	;tblptru may be non-zero
  2706  0000F2                     	endif
  2707  0000F2  0008               	tblrd		*
  2708  0000F4  CFF5 F089          	movff	tablat,printf@c
  2709  0000F8  0100               	movlb	0	; () banked
  2710  0000FA  5189               	movf	printf@c& (0+255),w,b
  2711                           
  2712                           ; Switch size 1, requested type "space"
  2713                           ; Number of cases is 4, Range of values is 0 to 120
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; simple_byte           13     7 (average)
  2717                           ;	Chosen strategy is simple_byte
  2718  0000FC  0A00               	xorlw	0	; case 0
  2719  0000FE  B4D8               	btfsc	status,2,c
  2720  000100  0012               	return	
  2721  000102  0A64               	xorlw	100	; case 100
  2722  000104  B4D8               	btfsc	status,2,c
  2723  000106  D007               	goto	l264
  2724  000108  0A0D               	xorlw	13	; case 105
  2725  00010A  B4D8               	btfsc	status,2,c
  2726  00010C  D004               	goto	l264
  2727  00010E  0A11               	xorlw	17	; case 120
  2728  000110  B4D8               	btfsc	status,2,c
  2729  000112  D7E6               	goto	l2476
  2730  000114  D134               	goto	l2578
  2731  000116                     l264:
  2732                           
  2733                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2734  000116  0100               	movlb	0	; () banked
  2735  000118  BF86               	btfsc	printf@flag& (0+255),7,b
  2736  00011A  D019               	goto	l2492
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;doprnt.c: 1253: {
  2740                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2741  00011C  C081  FFD9         	movff	printf@ap,fsr2l
  2742  000120  C082  FFDA         	movff	printf@ap+1,fsr2h
  2743  000124  CFDE F084          	movff	postinc2,printf@val
  2744  000128  CFDD F085          	movff	postdec2,printf@val+1
  2745                           
  2746                           ; BSR set to: 0
  2747  00012C  0E02               	movlw	2
  2748  00012E  0100               	movlb	0	; () banked
  2749  000130  2781               	addwf	printf@ap& (0+255),f,b
  2750  000132  0E00               	movlw	0
  2751  000134  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;doprnt.c: 1261: if((int)val < 0) {
  2755  000136  0100               	movlb	0	; () banked
  2756  000138  AF85               	btfss	(printf@val+1)& (0+255),7,b
  2757  00013A  D053               	goto	l2526
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;doprnt.c: 1262: flag |= 0x03;
  2761  00013C  0E03               	movlw	3
  2762  00013E  0100               	movlb	0	; () banked
  2763  000140  1386               	iorwf	printf@flag& (0+255),f,b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;doprnt.c: 1263: val = -val;
  2767  000142  0100               	movlb	0	; () banked
  2768  000144  6D84               	negf	printf@val& (0+255),b
  2769  000146  1F85               	comf	(printf@val+1)& (0+255),f,b
  2770  000148  B0D8               	btfsc	status,0,c
  2771  00014A  2B85               	incf	(printf@val+1)& (0+255),f,b
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;doprnt.c: 1264: }
  2775                           ;doprnt.c: 1266: }
  2776  00014C  D04A               	goto	l2526
  2777  00014E                     l2492:
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;doprnt.c: 1268: else
  2781                           ;doprnt.c: 1273: {
  2782                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2783  00014E  C081  FFD9         	movff	printf@ap,fsr2l
  2784  000152  C082  FFDA         	movff	printf@ap+1,fsr2h
  2785  000156  CFDE F084          	movff	postinc2,printf@val
  2786  00015A  CFDD F085          	movff	postdec2,printf@val+1
  2787                           
  2788                           ; BSR set to: 0
  2789  00015E  0E02               	movlw	2
  2790  000160  0100               	movlb	0	; () banked
  2791  000162  2781               	addwf	printf@ap& (0+255),f,b
  2792  000164  0E00               	movlw	0
  2793  000166  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;doprnt.c: 1287: }
  2797                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2798  000168  D03C               	goto	l2526
  2799  00016A                     l2496:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2803  00016A  0E01               	movlw	1
  2804  00016C  0100               	movlb	0	; () banked
  2805  00016E  6F89               	movwf	printf@c& (0+255),b
  2806  000170                     l2498:
  2807                           
  2808                           ; BSR set to: 0
  2809  000170  0E05               	movlw	5
  2810  000172  0100               	movlb	0	; () banked
  2811  000174  1989               	xorwf	printf@c& (0+255),w,b
  2812  000176  B4D8               	btfsc	status,2,c
  2813  000178  D03D               	goto	l2528
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;doprnt.c: 1306: if(val < dpowers[c])
  2817                           
  2818                           ; BSR set to: 0
  2819                           
  2820                           ; BSR set to: 0
  2821  00017A  0100               	movlb	0	; () banked
  2822  00017C  5189               	movf	printf@c& (0+255),w,b
  2823  00017E  0D02               	mullw	2
  2824  000180  0E3C               	movlw	low _dpowers
  2825  000182  24F3               	addwf	prodl,w,c
  2826  000184  6EF6               	movwf	tblptrl,c
  2827  000186  0EFE               	movlw	high _dpowers
  2828  000188  20F4               	addwfc	prodh,w,c
  2829  00018A  6EF7               	movwf	tblptrh,c
  2830  00018C                     	if	0	;There are less than 3 active tblptr bytes
  2831  00018C                     	endif
  2832  00018C  0009               	tblrd		*+
  2833  00018E  50F5               	movf	tablat,w,c
  2834  000190  0100               	movlb	0	; () banked
  2835  000192  5D84               	subwf	printf@val& (0+255),w,b
  2836  000194  0009               	tblrd		*+
  2837  000196  50F5               	movf	tablat,w,c
  2838  000198  0100               	movlb	0	; () banked
  2839  00019A  5985               	subwfb	(printf@val+1)& (0+255),w,b
  2840  00019C  A0D8               	btfss	status,0,c
  2841  00019E  D02A               	goto	l2528
  2842                           
  2843                           ; BSR set to: 0
  2844                           
  2845                           ; BSR set to: 0
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 1307: break;
  2849  0001A0  0100               	movlb	0	; () banked
  2850  0001A2  2B89               	incf	printf@c& (0+255),f,b
  2851  0001A4  D7E5               	goto	l2498
  2852  0001A6                     l2510:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2856  0001A6  0E01               	movlw	1
  2857  0001A8  0100               	movlb	0	; () banked
  2858  0001AA  6F89               	movwf	printf@c& (0+255),b
  2859  0001AC                     l2512:
  2860                           
  2861                           ; BSR set to: 0
  2862  0001AC  0E04               	movlw	4
  2863  0001AE  0100               	movlb	0	; () banked
  2864  0001B0  1989               	xorwf	printf@c& (0+255),w,b
  2865  0001B2  B4D8               	btfsc	status,2,c
  2866  0001B4  D01F               	goto	l2528
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2870                           
  2871                           ; BSR set to: 0
  2872                           
  2873                           ; BSR set to: 0
  2874  0001B6  0100               	movlb	0	; () banked
  2875  0001B8  5189               	movf	printf@c& (0+255),w,b
  2876  0001BA  0D02               	mullw	2
  2877  0001BC  0E46               	movlw	low _hexpowers
  2878  0001BE  24F3               	addwf	prodl,w,c
  2879  0001C0  6EF6               	movwf	tblptrl,c
  2880  0001C2  0EFE               	movlw	high _hexpowers
  2881  0001C4  20F4               	addwfc	prodh,w,c
  2882  0001C6  6EF7               	movwf	tblptrh,c
  2883  0001C8                     	if	0	;There are less than 3 active tblptr bytes
  2884  0001C8                     	endif
  2885  0001C8  0009               	tblrd		*+
  2886  0001CA  50F5               	movf	tablat,w,c
  2887  0001CC  0100               	movlb	0	; () banked
  2888  0001CE  5D84               	subwf	printf@val& (0+255),w,b
  2889  0001D0  0009               	tblrd		*+
  2890  0001D2  50F5               	movf	tablat,w,c
  2891  0001D4  0100               	movlb	0	; () banked
  2892  0001D6  5985               	subwfb	(printf@val+1)& (0+255),w,b
  2893  0001D8  A0D8               	btfss	status,0,c
  2894  0001DA  D00C               	goto	l2528
  2895                           
  2896                           ; BSR set to: 0
  2897                           
  2898                           ; BSR set to: 0
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;doprnt.c: 1318: break;
  2902  0001DC  0100               	movlb	0	; () banked
  2903  0001DE  2B89               	incf	printf@c& (0+255),f,b
  2904  0001E0  D7E5               	goto	l2512
  2905  0001E2                     l2526:
  2906                           
  2907                           ; BSR set to: 0
  2908  0001E2  0100               	movlb	0	; () banked
  2909  0001E4  5186               	movf	printf@flag& (0+255),w,b
  2910  0001E6  0B80               	andlw	128
  2911                           
  2912                           ; Switch size 1, requested type "space"
  2913                           ; Number of cases is 2, Range of values is 0 to 128
  2914                           ; switch strategies available:
  2915                           ; Name         Instructions Cycles
  2916                           ; simple_byte            7     4 (average)
  2917                           ;	Chosen strategy is simple_byte
  2918  0001E8  0A00               	xorlw	0	; case 0
  2919  0001EA  B4D8               	btfsc	status,2,c
  2920  0001EC  D7BE               	goto	l2496
  2921  0001EE  0A80               	xorlw	128	; case 128
  2922  0001F0  B4D8               	btfsc	status,2,c
  2923  0001F2  D7D9               	goto	l2510
  2924  0001F4                     l2528:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2928  0001F4  0100               	movlb	0	; () banked
  2929  0001F6  5187               	movf	printf@width& (0+255),w,b
  2930  0001F8  0100               	movlb	0	; () banked
  2931  0001FA  1188               	iorwf	(printf@width+1)& (0+255),w,b
  2932  0001FC  B4D8               	btfsc	status,2,c
  2933  0001FE  D00A               	goto	l2534
  2934                           
  2935                           ; BSR set to: 0
  2936  000200  C086  F041         	movff	printf@flag,??_printf
  2937  000204  0E03               	movlw	3
  2938  000206  1641               	andwf	??_printf,f,c
  2939  000208  B4D8               	btfsc	status,2,c
  2940  00020A  D004               	goto	l2534
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;doprnt.c: 1346: width--;
  2944  00020C  0100               	movlb	0	; () banked
  2945  00020E  0787               	decf	printf@width& (0+255),f,b
  2946  000210  A0D8               	btfss	status,0,c
  2947  000212  0788               	decf	(printf@width+1)& (0+255),f,b
  2948  000214                     l2534:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;doprnt.c: 1381: if(width > c)
  2952  000214  0E80               	movlw	128
  2953  000216  0100               	movlb	0	; () banked
  2954  000218  BF89               	btfsc	printf@c& (0+255),7,b
  2955  00021A  0E7F               	movlw	127
  2956  00021C  6E41               	movwf	??_printf& (0+255),c
  2957  00021E  0100               	movlb	0	; () banked
  2958  000220  5187               	movf	printf@width& (0+255),w,b
  2959  000222  0100               	movlb	0	; () banked
  2960  000224  5D89               	subwf	printf@c& (0+255),w,b
  2961  000226  0100               	movlb	0	; () banked
  2962  000228  5188               	movf	(printf@width+1)& (0+255),w,b
  2963  00022A  0A80               	xorlw	128
  2964  00022C  5841               	subwfb	??_printf& (0+255),w,c
  2965  00022E  B0D8               	btfsc	status,0,c
  2966  000230  D00B               	goto	l2538
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;doprnt.c: 1382: width -= c;
  2970  000232  0100               	movlb	0	; () banked
  2971  000234  5189               	movf	printf@c& (0+255),w,b
  2972  000236  0100               	movlb	0	; () banked
  2973  000238  5F87               	subwf	printf@width& (0+255),f,b
  2974  00023A  0E00               	movlw	0
  2975  00023C  0100               	movlb	0	; () banked
  2976  00023E  BF89               	btfsc	printf@c& (0+255),7,b
  2977  000240  0EFF               	movlw	255
  2978  000242  0100               	movlb	0	; () banked
  2979  000244  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  2980  000246  D005               	goto	l2540
  2981  000248                     l2538:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;doprnt.c: 1383: else
  2985                           ;doprnt.c: 1384: width = 0;
  2986  000248  0E00               	movlw	0
  2987  00024A  0100               	movlb	0	; () banked
  2988  00024C  6F88               	movwf	(printf@width+1)& (0+255),b
  2989  00024E  0E00               	movlw	0
  2990  000250  6F87               	movwf	printf@width& (0+255),b
  2991  000252                     l2540:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;doprnt.c: 1387: if(flag & 0x04) {
  2995  000252  0100               	movlb	0	; () banked
  2996  000254  A586               	btfss	printf@flag& (0+255),2,b
  2997  000256  D017               	goto	l2552
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;doprnt.c: 1392: if(flag & 0x03)
  3001  000258  C086  F041         	movff	printf@flag,??_printf
  3002  00025C  0E03               	movlw	3
  3003  00025E  1641               	andwf	??_printf,f,c
  3004  000260  B4D8               	btfsc	status,2,c
  3005  000262  D003               	goto	l2546
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;doprnt.c: 1393: (putch('-') );
  3009  000264  0E2D               	movlw	45
  3010  000266  ECB0  F007         	call	_putch
  3011  00026A                     l2546:
  3012                           
  3013                           ;doprnt.c: 1415: if(width)
  3014  00026A  0100               	movlb	0	; () banked
  3015  00026C  5187               	movf	printf@width& (0+255),w,b
  3016  00026E  0100               	movlb	0	; () banked
  3017  000270  1188               	iorwf	(printf@width+1)& (0+255),w,b
  3018  000272  B4D8               	btfsc	status,2,c
  3019  000274  D024               	goto	l2562
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;doprnt.c: 1417: (putch('0') );
  3023                           
  3024                           ; BSR set to: 0
  3025                           
  3026                           ;doprnt.c: 1416: do
  3027  000276  0E30               	movlw	48
  3028  000278  ECB0  F007         	call	_putch
  3029                           
  3030                           ;doprnt.c: 1418: while(--width);
  3031  00027C  0100               	movlb	0	; () banked
  3032  00027E  0787               	decf	printf@width& (0+255),f,b
  3033  000280  A0D8               	btfss	status,0,c
  3034  000282  0788               	decf	(printf@width+1)& (0+255),f,b
  3035  000284  D7F2               	goto	l2546
  3036  000286                     l2552:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;doprnt.c: 1422: {
  3040                           ;doprnt.c: 1424: if(width
  3041                           ;doprnt.c: 1428: )
  3042  000286  0100               	movlb	0	; () banked
  3043  000288  5187               	movf	printf@width& (0+255),w,b
  3044  00028A  0100               	movlb	0	; () banked
  3045  00028C  1188               	iorwf	(printf@width+1)& (0+255),w,b
  3046  00028E  B4D8               	btfsc	status,2,c
  3047  000290  D00D               	goto	l2558
  3048  000292                     l2554:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;doprnt.c: 1430: (putch(' ') );
  3052  000292  0E20               	movlw	32
  3053  000294  ECB0  F007         	call	_putch
  3054                           
  3055                           ;doprnt.c: 1431: while(--width);
  3056  000298  0100               	movlb	0	; () banked
  3057  00029A  0787               	decf	printf@width& (0+255),f,b
  3058  00029C  A0D8               	btfss	status,0,c
  3059  00029E  0788               	decf	(printf@width+1)& (0+255),f,b
  3060  0002A0  0100               	movlb	0	; () banked
  3061  0002A2  5187               	movf	printf@width& (0+255),w,b
  3062  0002A4  0100               	movlb	0	; () banked
  3063  0002A6  1188               	iorwf	(printf@width+1)& (0+255),w,b
  3064  0002A8  A4D8               	btfss	status,2,c
  3065  0002AA  D7F3               	goto	l2554
  3066  0002AC                     l2558:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 1438: if(flag & 0x03)
  3070  0002AC  C086  F041         	movff	printf@flag,??_printf
  3071  0002B0  0E03               	movlw	3
  3072  0002B2  1641               	andwf	??_printf,f,c
  3073  0002B4  B4D8               	btfsc	status,2,c
  3074  0002B6  D003               	goto	l2562
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;doprnt.c: 1439: (putch('-') );
  3078  0002B8  0E2D               	movlw	45
  3079  0002BA  ECB0  F007         	call	_putch
  3080  0002BE                     l2562:
  3081                           
  3082                           ;doprnt.c: 1469: }
  3083                           ;doprnt.c: 1472: prec = c;
  3084  0002BE  C089  F083         	movff	printf@c,printf@prec
  3085                           
  3086                           ;doprnt.c: 1474: while(prec--) {
  3087  0002C2  D057               	goto	l2576
  3088  0002C4                     l2564:
  3089                           
  3090                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3091  0002C4  0100               	movlb	0	; () banked
  3092  0002C6  5183               	movf	printf@prec& (0+255),w,b
  3093  0002C8  0D02               	mullw	2
  3094  0002CA  0E3C               	movlw	low _dpowers
  3095  0002CC  24F3               	addwf	prodl,w,c
  3096  0002CE  6EF6               	movwf	tblptrl,c
  3097  0002D0  0EFE               	movlw	high _dpowers
  3098  0002D2  20F4               	addwfc	prodh,w,c
  3099  0002D4  6EF7               	movwf	tblptrh,c
  3100  0002D6                     	if	0	;There are less than 3 active tblptr bytes
  3101  0002D6                     	endif
  3102  0002D6  0009               	tblrd		*+
  3103  0002D8  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  3104  0002DC  000A               	tblrd		*-
  3105  0002DE  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  3106  0002E2  C084  F02D         	movff	printf@val,___lwdiv@dividend
  3107  0002E6  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  3108  0002EA  ECFC  F005         	call	___lwdiv	;wreg free
  3109  0002EE  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
  3110  0002F2  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
  3111  0002F6  0E00               	movlw	0
  3112  0002F8  6E37               	movwf	___lwmod@divisor+1,c
  3113  0002FA  0E0A               	movlw	10
  3114  0002FC  6E36               	movwf	___lwmod@divisor,c
  3115  0002FE  ECC2  F006         	call	___lwmod	;wreg free
  3116  000302  5034               	movf	?___lwmod,w,c
  3117  000304  0F30               	addlw	48
  3118  000306  0100               	movlb	0	; () banked
  3119  000308  6F89               	movwf	printf@c& (0+255),b
  3120                           
  3121                           ;doprnt.c: 1491: break;
  3122  00030A  D02F               	goto	l2574
  3123  00030C                     l2566:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 1499: {
  3127                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3128  00030C  C084  F02D         	movff	printf@val,___lwdiv@dividend
  3129  000310  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  3130  000314  0100               	movlb	0	; () banked
  3131  000316  5183               	movf	printf@prec& (0+255),w,b
  3132  000318  0D02               	mullw	2
  3133  00031A  0E46               	movlw	low _hexpowers
  3134  00031C  24F3               	addwf	prodl,w,c
  3135  00031E  6EF6               	movwf	tblptrl,c
  3136  000320  0EFE               	movlw	high _hexpowers
  3137  000322  20F4               	addwfc	prodh,w,c
  3138  000324  6EF7               	movwf	tblptrh,c
  3139  000326                     	if	0	;There are less than 3 active tblptr bytes
  3140  000326                     	endif
  3141  000326  0009               	tblrd		*+
  3142  000328  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  3143  00032C  000A               	tblrd		*-
  3144  00032E  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  3145  000332  ECFC  F005         	call	___lwdiv	;wreg free
  3146  000336  502D               	movf	?___lwdiv,w,c
  3147  000338  0B0F               	andlw	15
  3148  00033A  0100               	movlb	0	; () banked
  3149  00033C  6F80               	movwf	printf@idx& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3153  00033E  0100               	movlb	0	; () banked
  3154  000340  5180               	movf	printf@idx& (0+255),w,b
  3155  000342  0D01               	mullw	1
  3156  000344  0EF9               	movlw	low STR_23
  3157  000346  24F3               	addwf	prodl,w,c
  3158  000348  6EF6               	movwf	tblptrl,c
  3159  00034A  0EFE               	movlw	high STR_23
  3160  00034C  20F4               	addwfc	prodh,w,c
  3161  00034E  6EF7               	movwf	tblptrh,c
  3162  000350                     	if	0	;There are less than 3 active tblptr bytes
  3163  000350                     	endif
  3164  000350  0008               	tblrd		*
  3165  000352  CFF5 F089          	movff	tablat,printf@c
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;doprnt.c: 1523: }
  3169                           
  3170                           ;doprnt.c: 1508: }
  3171                           ;doprnt.c: 1510: break;
  3172  000356  D009               	goto	l2574
  3173  000358                     l2572:
  3174  000358  0100               	movlb	0	; () banked
  3175  00035A  5186               	movf	printf@flag& (0+255),w,b
  3176  00035C  0B80               	andlw	128
  3177                           
  3178                           ; Switch size 1, requested type "space"
  3179                           ; Number of cases is 2, Range of values is 0 to 128
  3180                           ; switch strategies available:
  3181                           ; Name         Instructions Cycles
  3182                           ; simple_byte            7     4 (average)
  3183                           ;	Chosen strategy is simple_byte
  3184  00035E  0A00               	xorlw	0	; case 0
  3185  000360  B4D8               	btfsc	status,2,c
  3186  000362  D7B0               	goto	l2564
  3187  000364  0A80               	xorlw	128	; case 128
  3188  000366  B4D8               	btfsc	status,2,c
  3189  000368  D7D1               	goto	l2566
  3190  00036A                     l2574:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;doprnt.c: 1524: (putch(c) );
  3194  00036A  0100               	movlb	0	; () banked
  3195  00036C  5189               	movf	printf@c& (0+255),w,b
  3196  00036E  ECB0  F007         	call	_putch
  3197  000372                     l2576:
  3198  000372  0100               	movlb	0	; () banked
  3199  000374  0783               	decf	printf@prec& (0+255),f,b
  3200  000376  0100               	movlb	0	; () banked
  3201  000378  2983               	incf	printf@prec& (0+255),w,b
  3202  00037A  A4D8               	btfss	status,2,c
  3203  00037C  D7ED               	goto	l2572
  3204  00037E                     l2578:
  3205  00037E  C039  FFF6         	movff	printf@f,tblptrl
  3206  000382  C03A  FFF7         	movff	printf@f+1,tblptrh
  3207  000386  4A39               	infsnz	printf@f,f,c
  3208  000388  2A3A               	incf	printf@f+1,f,c
  3209  00038A                     	if	0	;tblptru may be non-zero
  3210  00038A                     	endif
  3211  00038A                     	if	0	;tblptru may be non-zero
  3212  00038A                     	endif
  3213  00038A  0008               	tblrd		*
  3214  00038C  CFF5 F089          	movff	tablat,printf@c
  3215  000390  0100               	movlb	0	; () banked
  3216  000392  5189               	movf	printf@c& (0+255),w,b
  3217  000394  B4D8               	btfsc	status,2,c
  3218  000396  0012               	return	
  3219  000398  D643               	goto	l2452
  3220  00039A                     __end_of_printf:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           intcon	equ	0xFF2
  3229                           intcon2	equ	0xFF1
  3230                           intcon3	equ	0xFF0
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           indf2	equ	0xFDF
  3234                           postinc2	equ	0xFDE
  3235                           postdec2	equ	0xFDD
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _putch *****************
  3241 ;; Defined at:
  3242 ;;		line 31 in file "lcd.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  data            1    wreg     unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  data            1   46[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;Total ram usage:        1 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    5
  3263 ;; This function calls:
  3264 ;;		_lcdNibble
  3265 ;; This function is called by:
  3266 ;;		_printf
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text14
  3271  000F60                     __ptext14:
  3272                           	opt stack 0
  3273  000F60                     _putch:
  3274                           	opt stack 23
  3275                           
  3276                           ;incstack = 0
  3277                           ;putch@data stored from wreg
  3278  000F60  6E2F               	movwf	putch@data,c
  3279                           
  3280                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3281  000F62  848C               	bsf	3980,2,c	;volatile
  3282                           
  3283                           ;lcd.c: 33: lcdNibble(data);
  3284  000F64  502F               	movf	putch@data,w,c
  3285  000F66  EC4E  F006         	call	_lcdNibble
  3286  000F6A  0012               	return		;funcret
  3287  000F6C                     __end_of_putch:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon2	equ	0xFF1
  3297                           intcon3	equ	0xFF0
  3298                           postinc0	equ	0xFEE
  3299                           wreg	equ	0xFE8
  3300                           indf2	equ	0xFDF
  3301                           postinc2	equ	0xFDE
  3302                           postdec2	equ	0xFDD
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _isdigit *****************
  3308 ;; Defined at:
  3309 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  c               1    wreg     unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  c               1   46[COMRAM] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;Total ram usage:        3 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    4
  3330 ;; This function calls:
  3331 ;;		Nothing
  3332 ;; This function is called by:
  3333 ;;		_printf
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text15
  3338  000EFE                     __ptext15:
  3339                           	opt stack 0
  3340  000EFE                     _isdigit:
  3341                           	opt stack 24
  3342                           
  3343                           ;incstack = 0
  3344                           ;isdigit@c stored from wreg
  3345  000EFE  6E2F               	movwf	isdigit@c,c
  3346  000F00  0E00               	movlw	0
  3347  000F02  6E2E               	movwf	_isdigit$537,c
  3348  000F04  0E3A               	movlw	58
  3349  000F06  602F               	cpfslt	isdigit@c,c
  3350  000F08  D005               	goto	l2398
  3351  000F0A  0E2F               	movlw	47
  3352  000F0C  642F               	cpfsgt	isdigit@c,c
  3353  000F0E  D002               	goto	l2398
  3354  000F10  0E01               	movlw	1
  3355  000F12  6E2E               	movwf	_isdigit$537,c
  3356  000F14                     l2398:
  3357  000F14  C02E  F02D         	movff	_isdigit$537,??_isdigit
  3358  000F18  302D               	rrcf	??_isdigit,w,c
  3359  000F1A  0012               	return	
  3360  000F1C                     __end_of_isdigit:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           intcon2	equ	0xFF1
  3370                           intcon3	equ	0xFF0
  3371                           postinc0	equ	0xFEE
  3372                           wreg	equ	0xFE8
  3373                           indf2	equ	0xFDF
  3374                           postinc2	equ	0xFDE
  3375                           postdec2	equ	0xFDD
  3376                           fsr2h	equ	0xFDA
  3377                           fsr2l	equ	0xFD9
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function ___wmul *****************
  3381 ;; Defined at:
  3382 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;  multiplier      2   44[COMRAM] unsigned int 
  3385 ;;  multiplicand    2   46[COMRAM] unsigned int 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  product         2   48[COMRAM] unsigned int 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  2   44[COMRAM] unsigned int 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0, prodl, prodh
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;Total ram usage:        6 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    4
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_printf
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text16
  3412  000EB2                     __ptext16:
  3413                           	opt stack 0
  3414  000EB2                     ___wmul:
  3415                           	opt stack 24
  3416                           
  3417                           ;incstack = 0
  3418  000EB2  502D               	movf	___wmul@multiplier,w,c
  3419  000EB4  022F               	mulwf	___wmul@multiplicand,c
  3420  000EB6  CFF3 F031          	movff	prodl,___wmul@product
  3421  000EBA  CFF4 F032          	movff	prodh,___wmul@product+1
  3422  000EBE  502D               	movf	___wmul@multiplier,w,c
  3423  000EC0  0230               	mulwf	___wmul@multiplicand+1,c
  3424  000EC2  50F3               	movf	prodl,w,c
  3425  000EC4  2632               	addwf	___wmul@product+1,f,c
  3426  000EC6  502E               	movf	___wmul@multiplier+1,w,c
  3427  000EC8  022F               	mulwf	___wmul@multiplicand,c
  3428  000ECA  50F3               	movf	prodl,w,c
  3429  000ECC  2632               	addwf	___wmul@product+1,f,c
  3430  000ECE  C031  F02D         	movff	___wmul@product,?___wmul
  3431  000ED2  C032  F02E         	movff	___wmul@product+1,?___wmul+1
  3432  000ED6  0012               	return	
  3433  000ED8                     __end_of___wmul:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           intcon	equ	0xFF2
  3442                           intcon2	equ	0xFF1
  3443                           intcon3	equ	0xFF0
  3444                           postinc0	equ	0xFEE
  3445                           wreg	equ	0xFE8
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function ___lwmod *****************
  3454 ;; Defined at:
  3455 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  dividend        2   51[COMRAM] unsigned int 
  3458 ;;  divisor         2   53[COMRAM] unsigned int 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  counter         1   55[COMRAM] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  2   51[COMRAM] unsigned int 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3470 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;Total ram usage:        5 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    4
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_printf
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text17
  3485  000D84                     __ptext17:
  3486                           	opt stack 0
  3487  000D84                     ___lwmod:
  3488                           	opt stack 24
  3489                           
  3490                           ;incstack = 0
  3491  000D84  5036               	movf	___lwmod@divisor,w,c
  3492  000D86  1037               	iorwf	___lwmod@divisor+1,w,c
  3493  000D88  B4D8               	btfsc	status,2,c
  3494  000D8A  D018               	goto	l719
  3495  000D8C  0E01               	movlw	1
  3496  000D8E  6E38               	movwf	___lwmod@counter,c
  3497  000D90  D004               	goto	l2436
  3498  000D92                     l2434:
  3499  000D92  90D8               	bcf	status,0,c
  3500  000D94  3636               	rlcf	___lwmod@divisor,f,c
  3501  000D96  3637               	rlcf	___lwmod@divisor+1,f,c
  3502  000D98  2A38               	incf	___lwmod@counter,f,c
  3503  000D9A                     l2436:
  3504  000D9A  AE37               	btfss	___lwmod@divisor+1,7,c
  3505  000D9C  D7FA               	goto	l2434
  3506  000D9E                     l2438:
  3507  000D9E  5036               	movf	___lwmod@divisor,w,c
  3508  000DA0  5C34               	subwf	___lwmod@dividend,w,c
  3509  000DA2  5037               	movf	___lwmod@divisor+1,w,c
  3510  000DA4  5835               	subwfb	___lwmod@dividend+1,w,c
  3511  000DA6  A0D8               	btfss	status,0,c
  3512  000DA8  D004               	goto	l2442
  3513  000DAA  5036               	movf	___lwmod@divisor,w,c
  3514  000DAC  5E34               	subwf	___lwmod@dividend,f,c
  3515  000DAE  5037               	movf	___lwmod@divisor+1,w,c
  3516  000DB0  5A35               	subwfb	___lwmod@dividend+1,f,c
  3517  000DB2                     l2442:
  3518  000DB2  90D8               	bcf	status,0,c
  3519  000DB4  3237               	rrcf	___lwmod@divisor+1,f,c
  3520  000DB6  3236               	rrcf	___lwmod@divisor,f,c
  3521  000DB8  2E38               	decfsz	___lwmod@counter,f,c
  3522  000DBA  D7F1               	goto	l2438
  3523  000DBC                     l719:
  3524  000DBC  C034  F034         	movff	___lwmod@dividend,?___lwmod
  3525  000DC0  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  3526  000DC4  0012               	return		;funcret
  3527  000DC6                     __end_of___lwmod:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           intcon2	equ	0xFF1
  3537                           intcon3	equ	0xFF0
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function ___lwdiv *****************
  3548 ;; Defined at:
  3549 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  dividend        2   44[COMRAM] unsigned int 
  3552 ;;  divisor         2   46[COMRAM] unsigned int 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  quotient        2   49[COMRAM] unsigned int 
  3555 ;;  counter         1   48[COMRAM] unsigned char 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  2   44[COMRAM] unsigned int 
  3558 ;; Registers used:
  3559 ;;		wreg, status,2, status,0
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3565 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;Total ram usage:        7 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    4
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_printf
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text18
  3580  000BF8                     __ptext18:
  3581                           	opt stack 0
  3582  000BF8                     ___lwdiv:
  3583                           	opt stack 24
  3584                           
  3585                           ;incstack = 0
  3586  000BF8  0E00               	movlw	0
  3587  000BFA  6E33               	movwf	___lwdiv@quotient+1,c
  3588  000BFC  0E00               	movlw	0
  3589  000BFE  6E32               	movwf	___lwdiv@quotient,c
  3590  000C00  502F               	movf	___lwdiv@divisor,w,c
  3591  000C02  1030               	iorwf	___lwdiv@divisor+1,w,c
  3592  000C04  B4D8               	btfsc	status,2,c
  3593  000C06  D01C               	goto	l709
  3594  000C08  0E01               	movlw	1
  3595  000C0A  6E31               	movwf	___lwdiv@counter,c
  3596  000C0C  D004               	goto	l2416
  3597  000C0E                     l2414:
  3598  000C0E  90D8               	bcf	status,0,c
  3599  000C10  362F               	rlcf	___lwdiv@divisor,f,c
  3600  000C12  3630               	rlcf	___lwdiv@divisor+1,f,c
  3601  000C14  2A31               	incf	___lwdiv@counter,f,c
  3602  000C16                     l2416:
  3603  000C16  AE30               	btfss	___lwdiv@divisor+1,7,c
  3604  000C18  D7FA               	goto	l2414
  3605  000C1A                     l2418:
  3606  000C1A  90D8               	bcf	status,0,c
  3607  000C1C  3632               	rlcf	___lwdiv@quotient,f,c
  3608  000C1E  3633               	rlcf	___lwdiv@quotient+1,f,c
  3609  000C20  502F               	movf	___lwdiv@divisor,w,c
  3610  000C22  5C2D               	subwf	___lwdiv@dividend,w,c
  3611  000C24  5030               	movf	___lwdiv@divisor+1,w,c
  3612  000C26  582E               	subwfb	___lwdiv@dividend+1,w,c
  3613  000C28  A0D8               	btfss	status,0,c
  3614  000C2A  D005               	goto	l2426
  3615  000C2C  502F               	movf	___lwdiv@divisor,w,c
  3616  000C2E  5E2D               	subwf	___lwdiv@dividend,f,c
  3617  000C30  5030               	movf	___lwdiv@divisor+1,w,c
  3618  000C32  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  3619  000C34  8032               	bsf	___lwdiv@quotient,0,c
  3620  000C36                     l2426:
  3621  000C36  90D8               	bcf	status,0,c
  3622  000C38  3230               	rrcf	___lwdiv@divisor+1,f,c
  3623  000C3A  322F               	rrcf	___lwdiv@divisor,f,c
  3624  000C3C  2E31               	decfsz	___lwdiv@counter,f,c
  3625  000C3E  D7ED               	goto	l2418
  3626  000C40                     l709:
  3627  000C40  C032  F02D         	movff	___lwdiv@quotient,?___lwdiv
  3628  000C44  C033  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3629  000C48  0012               	return		;funcret
  3630  000C4A                     __end_of___lwdiv:
  3631                           	opt stack 0
  3632                           tblptru	equ	0xFF8
  3633                           tblptrh	equ	0xFF7
  3634                           tblptrl	equ	0xFF6
  3635                           tablat	equ	0xFF5
  3636                           prodh	equ	0xFF4
  3637                           prodl	equ	0xFF3
  3638                           intcon	equ	0xFF2
  3639                           intcon2	equ	0xFF1
  3640                           intcon3	equ	0xFF0
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _lcdInst *****************
  3651 ;; Defined at:
  3652 ;;		line 26 in file "lcd.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  data            1    wreg     unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  data            1   46[COMRAM] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        1 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    5
  3673 ;; This function calls:
  3674 ;;		_lcdNibble
  3675 ;; This function is called by:
  3676 ;;		_initLCD
  3677 ;;		_standby
  3678 ;;		_date_time
  3679 ;;		_bottle_count
  3680 ;;		_bottle_time
  3681 ;;		_operation
  3682 ;;		_operationend
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text19
  3687  000F6C                     __ptext19:
  3688                           	opt stack 0
  3689  000F6C                     _lcdInst:
  3690                           	opt stack 24
  3691                           
  3692                           ;incstack = 0
  3693                           ;lcdInst@data stored from wreg
  3694  000F6C  6E2F               	movwf	lcdInst@data,c
  3695                           
  3696                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3697  000F6E  948C               	bcf	3980,2,c	;volatile
  3698                           
  3699                           ;lcd.c: 28: lcdNibble(data);
  3700  000F70  502F               	movf	lcdInst@data,w,c
  3701  000F72  EC4E  F006         	call	_lcdNibble
  3702  000F76  0012               	return		;funcret
  3703  000F78                     __end_of_lcdInst:
  3704                           	opt stack 0
  3705                           tblptru	equ	0xFF8
  3706                           tblptrh	equ	0xFF7
  3707                           tblptrl	equ	0xFF6
  3708                           tablat	equ	0xFF5
  3709                           prodh	equ	0xFF4
  3710                           prodl	equ	0xFF3
  3711                           intcon	equ	0xFF2
  3712                           intcon2	equ	0xFF1
  3713                           intcon3	equ	0xFF0
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           indf2	equ	0xFDF
  3717                           postinc2	equ	0xFDE
  3718                           postdec2	equ	0xFDD
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _lcdNibble *****************
  3724 ;; Defined at:
  3725 ;;		line 36 in file "lcd.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  data            1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  data            1   45[COMRAM] unsigned char 
  3730 ;;  temp            1   44[COMRAM] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        2 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    4
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_lcdInst
  3751 ;;		_putch
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text20
  3756  000C9C                     __ptext20:
  3757                           	opt stack 0
  3758  000C9C                     _lcdNibble:
  3759                           	opt stack 23
  3760                           
  3761                           ;incstack = 0
  3762                           ;lcdNibble@data stored from wreg
  3763  000C9C  6E2E               	movwf	lcdNibble@data,c
  3764                           
  3765                           ;lcd.c: 38: char temp = data & 0xF0;
  3766  000C9E  502E               	movf	lcdNibble@data,w,c
  3767  000CA0  0BF0               	andlw	240
  3768  000CA2  6E2D               	movwf	lcdNibble@temp,c
  3769                           
  3770                           ;lcd.c: 39: LATD = LATD & 0x0F;
  3771  000CA4  508C               	movf	3980,w,c	;volatile
  3772  000CA6  0B0F               	andlw	15
  3773  000CA8  6E8C               	movwf	3980,c	;volatile
  3774                           
  3775                           ;lcd.c: 40: LATD = temp | LATD;
  3776  000CAA  502D               	movf	lcdNibble@temp,w,c
  3777  000CAC  108C               	iorwf	3980,w,c	;volatile
  3778  000CAE  6E8C               	movwf	3980,c	;volatile
  3779                           
  3780                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  3781  000CB0  968C               	bcf	3980,3,c	;volatile
  3782                           
  3783                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3784  000CB2  0E19               	movlw	25
  3785  000CB4                     u2027:
  3786  000CB4  2EE8               	decfsz	wreg,f,c
  3787  000CB6  D7FE               	bra	u2027
  3788                           
  3789                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  3790  000CB8  868C               	bsf	3980,3,c	;volatile
  3791                           
  3792                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3793  000CBA  0E19               	movlw	25
  3794  000CBC                     u2037:
  3795  000CBC  2EE8               	decfsz	wreg,f,c
  3796  000CBE  D7FE               	bra	u2037
  3797                           
  3798                           ;lcd.c: 47: data = data << 4;
  3799  000CC0  382E               	swapf	lcdNibble@data,w,c
  3800  000CC2  0BF0               	andlw	240
  3801  000CC4  6E2E               	movwf	lcdNibble@data,c
  3802                           
  3803                           ;lcd.c: 49: temp = data & 0xF0;
  3804  000CC6  502E               	movf	lcdNibble@data,w,c
  3805  000CC8  0BF0               	andlw	240
  3806  000CCA  6E2D               	movwf	lcdNibble@temp,c
  3807                           
  3808                           ;lcd.c: 50: LATD = LATD & 0x0F;
  3809  000CCC  508C               	movf	3980,w,c	;volatile
  3810  000CCE  0B0F               	andlw	15
  3811  000CD0  6E8C               	movwf	3980,c	;volatile
  3812                           
  3813                           ;lcd.c: 51: LATD = temp | LATD;
  3814  000CD2  502D               	movf	lcdNibble@temp,w,c
  3815  000CD4  108C               	iorwf	3980,w,c	;volatile
  3816  000CD6  6E8C               	movwf	3980,c	;volatile
  3817                           
  3818                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  3819  000CD8  968C               	bcf	3980,3,c	;volatile
  3820                           
  3821                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3822  000CDA  0E19               	movlw	25
  3823  000CDC                     u2047:
  3824  000CDC  2EE8               	decfsz	wreg,f,c
  3825  000CDE  D7FE               	bra	u2047
  3826                           
  3827                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  3828  000CE0  868C               	bsf	3980,3,c	;volatile
  3829                           
  3830                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  3831  000CE2  0E19               	movlw	25
  3832  000CE4                     u2057:
  3833  000CE4  2EE8               	decfsz	wreg,f,c
  3834  000CE6  D7FE               	bra	u2057
  3835  000CE8  0012               	return		;funcret
  3836  000CEA                     __end_of_lcdNibble:
  3837                           	opt stack 0
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           intcon2	equ	0xFF1
  3846                           intcon3	equ	0xFF0
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           indf2	equ	0xFDF
  3850                           postinc2	equ	0xFDE
  3851                           postdec2	equ	0xFDD
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function ___awmod *****************
  3857 ;; Defined at:
  3858 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  dividend        2   44[COMRAM] int 
  3861 ;;  divisor         2   46[COMRAM] int 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  sign            1   49[COMRAM] unsigned char 
  3864 ;;  counter         1   48[COMRAM] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  2   44[COMRAM] int 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    4
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_bottle_count
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text21
  3889  000B2E                     __ptext21:
  3890                           	opt stack 0
  3891  000B2E                     ___awmod:
  3892                           	opt stack 25
  3893                           
  3894                           ;incstack = 0
  3895  000B2E  0E00               	movlw	0
  3896  000B30  6E32               	movwf	___awmod@sign,c
  3897  000B32  AE2E               	btfss	___awmod@dividend+1,7,c
  3898  000B34  D006               	goto	l1900
  3899  000B36  6C2D               	negf	___awmod@dividend,c
  3900  000B38  1E2E               	comf	___awmod@dividend+1,f,c
  3901  000B3A  B0D8               	btfsc	status,0,c
  3902  000B3C  2A2E               	incf	___awmod@dividend+1,f,c
  3903  000B3E  0E01               	movlw	1
  3904  000B40  6E32               	movwf	___awmod@sign,c
  3905  000B42                     l1900:
  3906  000B42  AE30               	btfss	___awmod@divisor+1,7,c
  3907  000B44  D004               	goto	l1904
  3908  000B46  6C2F               	negf	___awmod@divisor,c
  3909  000B48  1E30               	comf	___awmod@divisor+1,f,c
  3910  000B4A  B0D8               	btfsc	status,0,c
  3911  000B4C  2A30               	incf	___awmod@divisor+1,f,c
  3912  000B4E                     l1904:
  3913  000B4E  502F               	movf	___awmod@divisor,w,c
  3914  000B50  1030               	iorwf	___awmod@divisor+1,w,c
  3915  000B52  B4D8               	btfsc	status,2,c
  3916  000B54  D018               	goto	l1920
  3917  000B56  0E01               	movlw	1
  3918  000B58  6E31               	movwf	___awmod@counter,c
  3919  000B5A  D004               	goto	l1910
  3920  000B5C                     l1908:
  3921  000B5C  90D8               	bcf	status,0,c
  3922  000B5E  362F               	rlcf	___awmod@divisor,f,c
  3923  000B60  3630               	rlcf	___awmod@divisor+1,f,c
  3924  000B62  2A31               	incf	___awmod@counter,f,c
  3925  000B64                     l1910:
  3926  000B64  AE30               	btfss	___awmod@divisor+1,7,c
  3927  000B66  D7FA               	goto	l1908
  3928  000B68                     l1912:
  3929  000B68  502F               	movf	___awmod@divisor,w,c
  3930  000B6A  5C2D               	subwf	___awmod@dividend,w,c
  3931  000B6C  5030               	movf	___awmod@divisor+1,w,c
  3932  000B6E  582E               	subwfb	___awmod@dividend+1,w,c
  3933  000B70  A0D8               	btfss	status,0,c
  3934  000B72  D004               	goto	l1916
  3935  000B74  502F               	movf	___awmod@divisor,w,c
  3936  000B76  5E2D               	subwf	___awmod@dividend,f,c
  3937  000B78  5030               	movf	___awmod@divisor+1,w,c
  3938  000B7A  5A2E               	subwfb	___awmod@dividend+1,f,c
  3939  000B7C                     l1916:
  3940  000B7C  90D8               	bcf	status,0,c
  3941  000B7E  3230               	rrcf	___awmod@divisor+1,f,c
  3942  000B80  322F               	rrcf	___awmod@divisor,f,c
  3943  000B82  2E31               	decfsz	___awmod@counter,f,c
  3944  000B84  D7F1               	goto	l1912
  3945  000B86                     l1920:
  3946  000B86  5032               	movf	___awmod@sign,w,c
  3947  000B88  B4D8               	btfsc	status,2,c
  3948  000B8A  D004               	goto	l1924
  3949  000B8C  6C2D               	negf	___awmod@dividend,c
  3950  000B8E  1E2E               	comf	___awmod@dividend+1,f,c
  3951  000B90  B0D8               	btfsc	status,0,c
  3952  000B92  2A2E               	incf	___awmod@dividend+1,f,c
  3953  000B94                     l1924:
  3954  000B94  C02D  F02D         	movff	___awmod@dividend,?___awmod
  3955  000B98  C02E  F02E         	movff	___awmod@dividend+1,?___awmod+1
  3956  000B9C  0012               	return	
  3957  000B9E                     __end_of___awmod:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodh	equ	0xFF4
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           intcon2	equ	0xFF1
  3967                           intcon3	equ	0xFF0
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           indf2	equ	0xFDF
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           fsr2h	equ	0xFDA
  3974                           fsr2l	equ	0xFD9
  3975                           status	equ	0xFD8
  3976                           
  3977 ;; *************** function _I2C_Master_Init *****************
  3978 ;; Defined at:
  3979 ;;		line 13 in file "I2C.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  c               4   57[COMRAM] const unsigned long 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;Total ram usage:        8 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    5
  4000 ;; This function calls:
  4001 ;;		___lldiv
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text22
  4008  000B9E                     __ptext22:
  4009                           	opt stack 0
  4010  000B9E                     _I2C_Master_Init:
  4011                           	opt stack 25
  4012                           
  4013                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4014                           
  4015                           ;incstack = 0
  4016  000B9E  0E00               	movlw	0
  4017  000BA0  6EC7               	movwf	4039,c	;volatile
  4018                           
  4019                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4020  000BA2  0E28               	movlw	40
  4021  000BA4  6EC6               	movwf	4038,c	;volatile
  4022                           
  4023                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4024  000BA6  0E00               	movlw	0
  4025  000BA8  6EC5               	movwf	4037,c	;volatile
  4026                           
  4027                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4028  000BAA  0E80               	movlw	128
  4029  000BAC  6E2D               	movwf	___lldiv@dividend,c
  4030  000BAE  0E96               	movlw	150
  4031  000BB0  6E2E               	movwf	___lldiv@dividend+1,c
  4032  000BB2  0E98               	movlw	152
  4033  000BB4  6E2F               	movwf	___lldiv@dividend+2,c
  4034  000BB6  0E00               	movlw	0
  4035  000BB8  6E30               	movwf	___lldiv@dividend+3,c
  4036  000BBA  C03A  F03E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4037  000BBE  C03B  F03F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4038  000BC2  C03C  F040         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4039  000BC6  C03D  F041         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4040  000BCA  0E02               	movlw	2
  4041  000BCC                     u1345:
  4042  000BCC  90D8               	bcf	status,0,c
  4043  000BCE  363E               	rlcf	??_I2C_Master_Init,f,c
  4044  000BD0  363F               	rlcf	??_I2C_Master_Init+1,f,c
  4045  000BD2  3640               	rlcf	??_I2C_Master_Init+2,f,c
  4046  000BD4  3641               	rlcf	??_I2C_Master_Init+3,f,c
  4047  000BD6  2EE8               	decfsz	wreg,f,c
  4048  000BD8  D7F9               	goto	u1345
  4049  000BDA  C03E  F031         	movff	??_I2C_Master_Init,___lldiv@divisor
  4050  000BDE  C03F  F032         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4051  000BE2  C040  F033         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4052  000BE6  C041  F034         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4053  000BEA  EC18  F005         	call	___lldiv	;wreg free
  4054  000BEE  042D               	decf	?___lldiv,w,c
  4055  000BF0  6EC8               	movwf	4040,c	;volatile
  4056                           
  4057                           ;I2C.c: 20: TRISC3 = 1;
  4058  000BF2  8694               	bsf	3988,3,c	;volatile
  4059                           
  4060                           ;I2C.c: 21: TRISC4 = 1;
  4061  000BF4  8894               	bsf	3988,4,c	;volatile
  4062  000BF6  0012               	return		;funcret
  4063  000BF8                     __end_of_I2C_Master_Init:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           intcon3	equ	0xFF0
  4074                           postinc0	equ	0xFEE
  4075                           wreg	equ	0xFE8
  4076                           indf2	equ	0xFDF
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function ___lldiv *****************
  4084 ;; Defined at:
  4085 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  dividend        4   44[COMRAM] unsigned long 
  4088 ;;  divisor         4   48[COMRAM] unsigned long 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  quotient        4   52[COMRAM] unsigned long 
  4091 ;;  counter         1   56[COMRAM] unsigned char 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  4   44[COMRAM] unsigned long 
  4094 ;; Registers used:
  4095 ;;		wreg, status,2, status,0
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4101 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;Total ram usage:       13 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    4
  4108 ;; This function calls:
  4109 ;;		Nothing
  4110 ;; This function is called by:
  4111 ;;		_I2C_Master_Init
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text23
  4116  000A30                     __ptext23:
  4117                           	opt stack 0
  4118  000A30                     ___lldiv:
  4119                           	opt stack 25
  4120                           
  4121                           ;incstack = 0
  4122  000A30  0E00               	movlw	0
  4123  000A32  6E35               	movwf	___lldiv@quotient,c
  4124  000A34  0E00               	movlw	0
  4125  000A36  6E36               	movwf	___lldiv@quotient+1,c
  4126  000A38  0E00               	movlw	0
  4127  000A3A  6E37               	movwf	___lldiv@quotient+2,c
  4128  000A3C  0E00               	movlw	0
  4129  000A3E  6E38               	movwf	___lldiv@quotient+3,c
  4130  000A40  5031               	movf	___lldiv@divisor,w,c
  4131  000A42  1032               	iorwf	___lldiv@divisor+1,w,c
  4132  000A44  1033               	iorwf	___lldiv@divisor+2,w,c
  4133  000A46  1034               	iorwf	___lldiv@divisor+3,w,c
  4134  000A48  B4D8               	btfsc	status,2,c
  4135  000A4A  D02A               	goto	l656
  4136  000A4C  0E01               	movlw	1
  4137  000A4E  6E39               	movwf	___lldiv@counter,c
  4138  000A50  D006               	goto	l1936
  4139  000A52                     l1934:
  4140  000A52  90D8               	bcf	status,0,c
  4141  000A54  3631               	rlcf	___lldiv@divisor,f,c
  4142  000A56  3632               	rlcf	___lldiv@divisor+1,f,c
  4143  000A58  3633               	rlcf	___lldiv@divisor+2,f,c
  4144  000A5A  3634               	rlcf	___lldiv@divisor+3,f,c
  4145  000A5C  2A39               	incf	___lldiv@counter,f,c
  4146  000A5E                     l1936:
  4147  000A5E  AE34               	btfss	___lldiv@divisor+3,7,c
  4148  000A60  D7F8               	goto	l1934
  4149  000A62                     l1938:
  4150  000A62  90D8               	bcf	status,0,c
  4151  000A64  3635               	rlcf	___lldiv@quotient,f,c
  4152  000A66  3636               	rlcf	___lldiv@quotient+1,f,c
  4153  000A68  3637               	rlcf	___lldiv@quotient+2,f,c
  4154  000A6A  3638               	rlcf	___lldiv@quotient+3,f,c
  4155  000A6C  5031               	movf	___lldiv@divisor,w,c
  4156  000A6E  5C2D               	subwf	___lldiv@dividend,w,c
  4157  000A70  5032               	movf	___lldiv@divisor+1,w,c
  4158  000A72  582E               	subwfb	___lldiv@dividend+1,w,c
  4159  000A74  5033               	movf	___lldiv@divisor+2,w,c
  4160  000A76  582F               	subwfb	___lldiv@dividend+2,w,c
  4161  000A78  5034               	movf	___lldiv@divisor+3,w,c
  4162  000A7A  5830               	subwfb	___lldiv@dividend+3,w,c
  4163  000A7C  A0D8               	btfss	status,0,c
  4164  000A7E  D009               	goto	l1946
  4165  000A80  5031               	movf	___lldiv@divisor,w,c
  4166  000A82  5E2D               	subwf	___lldiv@dividend,f,c
  4167  000A84  5032               	movf	___lldiv@divisor+1,w,c
  4168  000A86  5A2E               	subwfb	___lldiv@dividend+1,f,c
  4169  000A88  5033               	movf	___lldiv@divisor+2,w,c
  4170  000A8A  5A2F               	subwfb	___lldiv@dividend+2,f,c
  4171  000A8C  5034               	movf	___lldiv@divisor+3,w,c
  4172  000A8E  5A30               	subwfb	___lldiv@dividend+3,f,c
  4173  000A90  8035               	bsf	___lldiv@quotient,0,c
  4174  000A92                     l1946:
  4175  000A92  90D8               	bcf	status,0,c
  4176  000A94  3234               	rrcf	___lldiv@divisor+3,f,c
  4177  000A96  3233               	rrcf	___lldiv@divisor+2,f,c
  4178  000A98  3232               	rrcf	___lldiv@divisor+1,f,c
  4179  000A9A  3231               	rrcf	___lldiv@divisor,f,c
  4180  000A9C  2E39               	decfsz	___lldiv@counter,f,c
  4181  000A9E  D7E1               	goto	l1938
  4182  000AA0                     l656:
  4183  000AA0  C035  F02D         	movff	___lldiv@quotient,?___lldiv
  4184  000AA4  C036  F02E         	movff	___lldiv@quotient+1,?___lldiv+1
  4185  000AA8  C037  F02F         	movff	___lldiv@quotient+2,?___lldiv+2
  4186  000AAC  C038  F030         	movff	___lldiv@quotient+3,?___lldiv+3
  4187  000AB0  0012               	return		;funcret
  4188  000AB2                     __end_of___lldiv:
  4189                           	opt stack 0
  4190                           tblptru	equ	0xFF8
  4191                           tblptrh	equ	0xFF7
  4192                           tblptrl	equ	0xFF6
  4193                           tablat	equ	0xFF5
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           intcon	equ	0xFF2
  4197                           intcon2	equ	0xFF1
  4198                           intcon3	equ	0xFF0
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           indf2	equ	0xFDF
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function _isr *****************
  4209 ;; Defined at:
  4210 ;;		line 104 in file "main.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  i               1   43[COMRAM] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      void 
  4217 ;; Registers used:
  4218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;Total ram usage:       16 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    3
  4231 ;; This function calls:
  4232 ;;		i2_lcdInst
  4233 ;;		i2_printf
  4234 ;; This function is called by:
  4235 ;;		Interrupt level 2
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	intcode
  4240  000008                     __pintcode:
  4241                           	opt stack 0
  4242  000008                     _isr:
  4243                           	opt stack 23
  4244                           
  4245                           ;incstack = 0
  4246  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4247  00000A  EDE0  F003         	call	int_func,f	;refresh shadow registers
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           intcon2	equ	0xFF1
  4256                           intcon3	equ	0xFF0
  4257                           postinc0	equ	0xFEE
  4258                           wreg	equ	0xFE8
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           postdec2	equ	0xFDD
  4262                           fsr2h	equ	0xFDA
  4263                           fsr2l	equ	0xFD9
  4264                           status	equ	0xFD8
  4265                           
  4266                           	psect	intcode_body
  4267  0007C0                     __pintcode_body:
  4268                           	opt stack 23
  4269  0007C0                     int_func:
  4270                           	opt stack 23
  4271  0007C0  0006               	pop		; remove dummy address from shadow register refresh
  4272  0007C2  CFFA F01E          	movff	pclath,??_isr+1
  4273  0007C6  CFFB F01F          	movff	pclatu,??_isr+2
  4274  0007CA  CFE9 F020          	movff	fsr0l,??_isr+3
  4275  0007CE  CFEA F021          	movff	fsr0h,??_isr+4
  4276  0007D2  CFE1 F022          	movff	fsr1l,??_isr+5
  4277  0007D6  CFE2 F023          	movff	fsr1h,??_isr+6
  4278  0007DA  CFD9 F024          	movff	fsr2l,??_isr+7
  4279  0007DE  CFDA F025          	movff	fsr2h,??_isr+8
  4280  0007E2  CFF3 F026          	movff	prodl,??_isr+9
  4281  0007E6  CFF4 F027          	movff	prodh,??_isr+10
  4282  0007EA  CFF6 F028          	movff	tblptrl,??_isr+11
  4283  0007EE  CFF7 F029          	movff	tblptrh,??_isr+12
  4284  0007F2  CFF8 F02A          	movff	tblptru,??_isr+13
  4285  0007F6  CFF5 F02B          	movff	tablat,??_isr+14
  4286                           
  4287                           ;main.c: 105: if (INT1IF) {
  4288  0007FA  B0F0               	btfsc	intcon3,0,c	;volatile
  4289  0007FC  D01B               	goto	i2l2328
  4290  0007FE  D02E               	goto	i2l2330
  4291  000800                     i2l2306:
  4292                           
  4293                           ;main.c: 108: curr_state = STANDBY;
  4294  000800  0E00               	movlw	0
  4295  000802  D016               	goto	L4
  4296  000804                     i2l2308:
  4297                           
  4298                           ;main.c: 111: lcdInst(0b00000001);
  4299  000804  0E01               	movlw	1
  4300  000806  ECC2  F007         	call	i2_lcdInst
  4301                           
  4302                           ;main.c: 112: curr_state = OPERATION;
  4303  00080A  0E01               	movlw	1
  4304  00080C  D011               	goto	L4
  4305  00080E                     i2l2312:
  4306                           
  4307                           ;main.c: 115: curr_state = BOTTLECOUNT;
  4308  00080E  0E04               	movlw	4
  4309  000810  6E50               	movwf	_curr_state,c
  4310                           
  4311                           ;main.c: 116: bottle_count_disp += 1;
  4312  000812  4A51               	infsnz	_bottle_count_disp,f,c
  4313  000814  2A52               	incf	_bottle_count_disp+1,f,c
  4314  000816                     i2l2316:
  4315  000816  0E1F               	movlw	31
  4316  000818  1881               	xorwf	3969,w,c	;volatile
  4317  00081A  A4D8               	btfss	status,2,c
  4318  00081C  D038               	goto	i2l185
  4319  00081E  D7FB               	goto	i2l2316
  4320  000820                     i2l2318:
  4321                           
  4322                           ;main.c: 120: curr_state = BOTTLETIME;
  4323  000820  0E05               	movlw	5
  4324  000822  D006               	goto	L4
  4325  000824                     i2l2320:
  4326                           
  4327                           ;main.c: 123: curr_state = DATETIME;
  4328  000824  0E03               	movlw	3
  4329  000826  D004               	goto	L4
  4330  000828                     i2l2322:
  4331                           
  4332                           ;main.c: 126: lcdInst(0b00000001);
  4333  000828  0E01               	movlw	1
  4334  00082A  ECC2  F007         	call	i2_lcdInst
  4335                           
  4336                           ;main.c: 127: curr_state = OPERATIONEND;
  4337  00082E  0E02               	movlw	2
  4338  000830                     L4:
  4339  000830  6E50               	movwf	_curr_state,c
  4340                           
  4341                           ;main.c: 129: }
  4342                           
  4343                           ;main.c: 128: break;
  4344  000832  D02D               	goto	i2l185
  4345  000834                     i2l2328:
  4346  000834  5081               	movf	3969,w,c	;volatile
  4347                           
  4348                           ; Switch size 1, requested type "space"
  4349                           ; Number of cases is 6, Range of values is 15 to 239
  4350                           ; switch strategies available:
  4351                           ; Name         Instructions Cycles
  4352                           ; simple_byte           19    10 (average)
  4353                           ;	Chosen strategy is simple_byte
  4354  000836  0A0F               	xorlw	15	; case 15
  4355  000838  B4D8               	btfsc	status,2,c
  4356  00083A  D7E4               	goto	i2l2308
  4357  00083C  0A10               	xorlw	16	; case 31
  4358  00083E  B4D8               	btfsc	status,2,c
  4359  000840  D7E6               	goto	i2l2312
  4360  000842  0A30               	xorlw	48	; case 47
  4361  000844  B4D8               	btfsc	status,2,c
  4362  000846  D7EC               	goto	i2l2318
  4363  000848  0A10               	xorlw	16	; case 63
  4364  00084A  B4D8               	btfsc	status,2,c
  4365  00084C  D7EB               	goto	i2l2320
  4366  00084E  0A70               	xorlw	112	; case 79
  4367  000850  B4D8               	btfsc	status,2,c
  4368  000852  D7EA               	goto	i2l2322
  4369  000854  0AA0               	xorlw	160	; case 239
  4370  000856  B4D8               	btfsc	status,2,c
  4371  000858  D7D3               	goto	i2l2306
  4372                           
  4373                           ;main.c: 130: }
  4374  00085A  D019               	goto	i2l185
  4375  00085C                     i2l2330:
  4376                           
  4377                           ;main.c: 133: lcdInst(0b10000000);
  4378  00085C  0E80               	movlw	128
  4379  00085E  ECC2  F007         	call	i2_lcdInst
  4380                           
  4381                           ;main.c: 134: printf("bad interrupt");
  4382  000862  0EE6               	movlw	low STR_1
  4383  000864  6E0D               	movwf	i2printf@f,c
  4384  000866  0EFF               	movlw	high STR_1
  4385  000868  6E0E               	movwf	i2printf@f+1,c
  4386  00086A  ECCD  F001         	call	i2_printf	;wreg free
  4387                           
  4388                           ;main.c: 135: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  4389  00086E  0E00               	movlw	0
  4390  000870  6E2C               	movwf	isr@i,c
  4391  000872                     i2l2336:
  4392  000872  0E63               	movlw	99
  4393  000874  642C               	cpfsgt	isr@i,c
  4394  000876  D001               	goto	i2l2340
  4395  000878  D7F1               	goto	i2l2330
  4396  00087A                     i2l2340:
  4397  00087A  0E21               	movlw	33
  4398  00087C  6E1D               	movwf	??_isr& (0+255),c
  4399  00087E  0E76               	movlw	118
  4400  000880                     i2u206_47:
  4401  000880  2EE8               	decfsz	wreg,f,c
  4402  000882  D7FE               	bra	i2u206_47
  4403  000884  2E1D               	decfsz	??_isr& (0+255),f,c
  4404  000886  D7FC               	bra	i2u206_47
  4405  000888  D000               	nop2	
  4406  00088A  2A2C               	incf	isr@i,f,c
  4407  00088C  D7F2               	goto	i2l2336
  4408  00088E                     i2l185:
  4409                           
  4410                           ;main.c: 136: }
  4411                           ;main.c: 137: }
  4412                           ;main.c: 138: INT1IF = 0;
  4413  00088E  90F0               	bcf	intcon3,0,c	;volatile
  4414                           
  4415                           ;main.c: 139: return;
  4416  000890  C02B  FFF5         	movff	??_isr+14,tablat
  4417  000894  C02A  FFF8         	movff	??_isr+13,tblptru
  4418  000898  C029  FFF7         	movff	??_isr+12,tblptrh
  4419  00089C  C028  FFF6         	movff	??_isr+11,tblptrl
  4420  0008A0  C027  FFF4         	movff	??_isr+10,prodh
  4421  0008A4  C026  FFF3         	movff	??_isr+9,prodl
  4422  0008A8  C025  FFDA         	movff	??_isr+8,fsr2h
  4423  0008AC  C024  FFD9         	movff	??_isr+7,fsr2l
  4424  0008B0  C023  FFE2         	movff	??_isr+6,fsr1h
  4425  0008B4  C022  FFE1         	movff	??_isr+5,fsr1l
  4426  0008B8  C021  FFEA         	movff	??_isr+4,fsr0h
  4427  0008BC  C020  FFE9         	movff	??_isr+3,fsr0l
  4428  0008C0  C01F  FFFB         	movff	??_isr+2,pclatu
  4429  0008C4  C01E  FFFA         	movff	??_isr+1,pclath
  4430  0008C8  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4431  0008CA  0011               	retfie		f
  4432  0008CC                     __end_of_isr:
  4433                           	opt stack 0
  4434                           pclatu	equ	0xFFB
  4435                           pclath	equ	0xFFA
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           intcon2	equ	0xFF1
  4444                           intcon3	equ	0xFF0
  4445                           postinc0	equ	0xFEE
  4446                           fsr0h	equ	0xFEA
  4447                           fsr0l	equ	0xFE9
  4448                           wreg	equ	0xFE8
  4449                           fsr1h	equ	0xFE2
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           postdec2	equ	0xFDD
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function i2_printf *****************
  4459 ;; Defined at:
  4460 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4463 ;;		 -> STR_22(16), STR_21(25), STR_20(24), STR_19(23), 
  4464 ;;		 -> STR_18(23), STR_17(23), STR_16(10), STR_15(17), 
  4465 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  4466 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  4467 ;;		 -> STR_6(17), STR_5(23), STR_4(23), STR_3(17), 
  4468 ;;		 -> STR_2(17), STR_1(14), 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  printf          4    0        struct .
  4471 ;;  printf          3    0        PTR const unsigned char 
  4472 ;;  printf          2   25[COMRAM] int 
  4473 ;;  printf          2   22[COMRAM] unsigned int 
  4474 ;;  printf          2   19[COMRAM] PTR void [1]
  4475 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4476 ;;  printf          2    0        unsigned int 
  4477 ;;  printf          1   27[COMRAM] char 
  4478 ;;  printf          1   24[COMRAM] unsigned char 
  4479 ;;  printf          1   21[COMRAM] char 
  4480 ;;  printf          1   18[COMRAM] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  2   12[COMRAM] int 
  4483 ;; Registers used:
  4484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;Total ram usage:       16 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		i2___lwdiv
  4499 ;;		i2___lwmod
  4500 ;;		i2___wmul
  4501 ;;		i2_isdigit
  4502 ;;		i2_putch
  4503 ;; This function is called by:
  4504 ;;		_isr
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text25
  4509  00039A                     __ptext25:
  4510                           	opt stack 0
  4511  00039A                     i2_printf:
  4512                           	opt stack 23
  4513                           
  4514                           ;doprnt.c: 466: va_list ap;
  4515                           ;doprnt.c: 499: signed char c;
  4516                           ;doprnt.c: 501: int width;
  4517                           ;doprnt.c: 506: signed char prec;
  4518                           ;doprnt.c: 508: unsigned char flag;
  4519                           ;doprnt.c: 523: union {
  4520                           ;doprnt.c: 524: unsigned long vd;
  4521                           ;doprnt.c: 525: double integ;
  4522                           ;doprnt.c: 526: } tmpval;
  4523                           ;doprnt.c: 528: unsigned int val;
  4524                           ;doprnt.c: 529: unsigned len;
  4525                           ;doprnt.c: 530: const char * cp;
  4526                           ;doprnt.c: 533: *ap = __va_start();
  4527                           
  4528                           ;incstack = 0
  4529  00039A  0E0F               	movlw	low (?i2_printf+2)
  4530  00039C  6E14               	movwf	i2printf@ap,c
  4531  00039E  0E00               	movlw	high (?i2_printf+2)
  4532  0003A0  6E15               	movwf	i2printf@ap+1,c
  4533                           
  4534                           ;doprnt.c: 536: while(c = *f++) {
  4535  0003A2  D174               	goto	i2l2266
  4536  0003A4                     i2l2140:
  4537                           
  4538                           ;doprnt.c: 538: if(c != '%')
  4539  0003A4  0E25               	movlw	37
  4540  0003A6  181C               	xorwf	i2printf@c,w,c
  4541  0003A8  B4D8               	btfsc	status,2,c
  4542  0003AA  D004               	goto	i2l2144
  4543                           
  4544                           ;doprnt.c: 540: {
  4545                           ;doprnt.c: 541: (putch(c) );
  4546  0003AC  501C               	movf	i2printf@c,w,c
  4547  0003AE  ECBC  F007         	call	i2_putch
  4548                           
  4549                           ;doprnt.c: 542: continue;
  4550  0003B2  D16C               	goto	i2l2266
  4551  0003B4                     i2l2144:
  4552                           
  4553                           ;doprnt.c: 543: }
  4554                           ;doprnt.c: 546: width = 0;
  4555  0003B4  0E00               	movlw	0
  4556  0003B6  6E1B               	movwf	i2printf@width+1,c
  4557  0003B8  0E00               	movlw	0
  4558  0003BA  6E1A               	movwf	i2printf@width,c
  4559                           
  4560                           ;doprnt.c: 548: flag = 0;
  4561  0003BC  0E00               	movlw	0
  4562  0003BE  6E19               	movwf	i2printf@flag,c
  4563                           
  4564                           ;doprnt.c: 551: switch(*f) {
  4565                           
  4566                           ;doprnt.c: 550: for(;;) {
  4567  0003C0  D003               	goto	i2l2150
  4568  0003C2                     i2l2146:
  4569                           
  4570                           ;doprnt.c: 580: flag |= 0x04;
  4571  0003C2  8419               	bsf	i2printf@flag,2,c
  4572                           
  4573                           ;doprnt.c: 581: f++;
  4574  0003C4  4A0D               	infsnz	i2printf@f,f,c
  4575  0003C6  2A0E               	incf	i2printf@f+1,f,c
  4576  0003C8                     i2l2150:
  4577  0003C8  C00D  FFF6         	movff	i2printf@f,tblptrl
  4578  0003CC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4579  0003D0                     	if	0	;tblptru may be non-zero
  4580  0003D0                     	endif
  4581  0003D0                     	if	0	;tblptru may be non-zero
  4582  0003D0                     	endif
  4583  0003D0  0008               	tblrd		*
  4584  0003D2  50F5               	movf	tablat,w,c
  4585                           
  4586                           ; Switch size 1, requested type "space"
  4587                           ; Number of cases is 1, Range of values is 48 to 48
  4588                           ; switch strategies available:
  4589                           ; Name         Instructions Cycles
  4590                           ; simple_byte            4     3 (average)
  4591                           ;	Chosen strategy is simple_byte
  4592  0003D4  0A30               	xorlw	48	; case 48
  4593  0003D6  B4D8               	btfsc	status,2,c
  4594  0003D8  D7F4               	goto	i2l2146
  4595                           
  4596                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4597                           
  4598                           ;doprnt.c: 586: }
  4599                           
  4600                           ;doprnt.c: 585: break;
  4601  0003DA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4602  0003DE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4603  0003E2                     	if	0	;tblptru may be non-zero
  4604  0003E2                     	endif
  4605  0003E2                     	if	0	;tblptru may be non-zero
  4606  0003E2                     	endif
  4607  0003E2  0008               	tblrd		*
  4608  0003E4  50F5               	movf	tablat,w,c
  4609  0003E6  EC8E  F007         	call	i2_isdigit
  4610  0003EA  A0D8               	btfss	status,0,c
  4611  0003EC  D035               	goto	i2l2168
  4612                           
  4613                           ;doprnt.c: 598: width = 0;
  4614  0003EE  0E00               	movlw	0
  4615  0003F0  6E1B               	movwf	i2printf@width+1,c
  4616  0003F2  0E00               	movlw	0
  4617  0003F4  6E1A               	movwf	i2printf@width,c
  4618  0003F6                     i2l2156:
  4619                           
  4620                           ;doprnt.c: 600: width *= 10;
  4621  0003F6  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  4622  0003FA  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  4623  0003FE  0E00               	movlw	0
  4624  000400  6E04               	movwf	i2___wmul@multiplicand+1,c
  4625  000402  0E0A               	movlw	10
  4626  000404  6E03               	movwf	i2___wmul@multiplicand,c
  4627  000406  EC6C  F007         	call	i2___wmul	;wreg free
  4628  00040A  C001  F01A         	movff	?i2___wmul,i2printf@width
  4629  00040E  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  4630                           
  4631                           ;doprnt.c: 601: width += *f++ - '0';
  4632  000412  0ED0               	movlw	208
  4633  000414  6E0F               	movwf	??i2_printf& (0+255),c
  4634  000416  0EFF               	movlw	255
  4635  000418  6E10               	movwf	(??i2_printf+1)& (0+255),c
  4636  00041A  C00D  FFF6         	movff	i2printf@f,tblptrl
  4637  00041E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4638  000422                     	if	0	;tblptru may be non-zero
  4639  000422                     	endif
  4640  000422                     	if	0	;tblptru may be non-zero
  4641  000422                     	endif
  4642  000422  0008               	tblrd		*
  4643  000424  50F5               	movf	tablat,w,c
  4644  000426  6E11               	movwf	(??i2_printf+2)& (0+255),c
  4645  000428  6A12               	clrf	(??i2_printf+3)& (0+255),c
  4646  00042A  500F               	movf	??i2_printf,w,c
  4647  00042C  2611               	addwf	??i2_printf+2,f,c
  4648  00042E  5010               	movf	??i2_printf+1,w,c
  4649  000430  2212               	addwfc	??i2_printf+3,f,c
  4650  000432  5011               	movf	??i2_printf+2,w,c
  4651  000434  261A               	addwf	i2printf@width,f,c
  4652  000436  5012               	movf	??i2_printf+3,w,c
  4653  000438  221B               	addwfc	i2printf@width+1,f,c
  4654  00043A  4A0D               	infsnz	i2printf@f,f,c
  4655  00043C  2A0E               	incf	i2printf@f+1,f,c
  4656                           
  4657                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4658  00043E  C00D  FFF6         	movff	i2printf@f,tblptrl
  4659  000442  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4660  000446                     	if	0	;tblptru may be non-zero
  4661  000446                     	endif
  4662  000446                     	if	0	;tblptru may be non-zero
  4663  000446                     	endif
  4664  000446  0008               	tblrd		*
  4665  000448  50F5               	movf	tablat,w,c
  4666  00044A  EC8E  F007         	call	i2_isdigit
  4667  00044E  A0D8               	btfss	status,0,c
  4668  000450  D003               	goto	i2l2168
  4669  000452  D7D1               	goto	i2l2156
  4670  000454                     i2l2164:
  4671                           
  4672                           ;doprnt.c: 721: flag |= 0x80;
  4673  000454  8E19               	bsf	i2printf@flag,7,c
  4674                           
  4675                           ;doprnt.c: 723: break;
  4676  000456  D017               	goto	i2l264
  4677  000458                     i2l2168:
  4678  000458  C00D  FFF6         	movff	i2printf@f,tblptrl
  4679  00045C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4680  000460  4A0D               	infsnz	i2printf@f,f,c
  4681  000462  2A0E               	incf	i2printf@f+1,f,c
  4682  000464                     	if	0	;tblptru may be non-zero
  4683  000464                     	endif
  4684  000464                     	if	0	;tblptru may be non-zero
  4685  000464                     	endif
  4686  000464  0008               	tblrd		*
  4687  000466  CFF5 F01C          	movff	tablat,i2printf@c
  4688  00046A  501C               	movf	i2printf@c,w,c
  4689                           
  4690                           ; Switch size 1, requested type "space"
  4691                           ; Number of cases is 4, Range of values is 0 to 120
  4692                           ; switch strategies available:
  4693                           ; Name         Instructions Cycles
  4694                           ; simple_byte           13     7 (average)
  4695                           ;	Chosen strategy is simple_byte
  4696  00046C  0A00               	xorlw	0	; case 0
  4697  00046E  B4D8               	btfsc	status,2,c
  4698  000470  0012               	return	
  4699  000472  0A64               	xorlw	100	; case 100
  4700  000474  B4D8               	btfsc	status,2,c
  4701  000476  D007               	goto	i2l264
  4702  000478  0A0D               	xorlw	13	; case 105
  4703  00047A  B4D8               	btfsc	status,2,c
  4704  00047C  D004               	goto	i2l264
  4705  00047E  0A11               	xorlw	17	; case 120
  4706  000480  B4D8               	btfsc	status,2,c
  4707  000482  D7E8               	goto	i2l2164
  4708  000484  D103               	goto	i2l2266
  4709  000486                     i2l264:
  4710                           
  4711                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4712  000486  BE19               	btfsc	i2printf@flag,7,c
  4713  000488  D015               	goto	i2l2180
  4714                           
  4715                           ;doprnt.c: 1253: {
  4716                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4717  00048A  C014  FFD9         	movff	i2printf@ap,fsr2l
  4718  00048E  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4719  000492  CFDE F017          	movff	postinc2,i2printf@val
  4720  000496  CFDD F018          	movff	postdec2,i2printf@val+1
  4721  00049A  0E02               	movlw	2
  4722  00049C  2614               	addwf	i2printf@ap,f,c
  4723  00049E  0E00               	movlw	0
  4724  0004A0  2215               	addwfc	i2printf@ap+1,f,c
  4725                           
  4726                           ;doprnt.c: 1261: if((int)val < 0) {
  4727  0004A2  AE18               	btfss	i2printf@val+1,7,c
  4728  0004A4  D044               	goto	i2l2214
  4729                           
  4730                           ;doprnt.c: 1262: flag |= 0x03;
  4731  0004A6  0E03               	movlw	3
  4732  0004A8  1219               	iorwf	i2printf@flag,f,c
  4733                           
  4734                           ;doprnt.c: 1263: val = -val;
  4735  0004AA  6C17               	negf	i2printf@val,c
  4736  0004AC  1E18               	comf	i2printf@val+1,f,c
  4737  0004AE  B0D8               	btfsc	status,0,c
  4738  0004B0  2A18               	incf	i2printf@val+1,f,c
  4739                           
  4740                           ;doprnt.c: 1264: }
  4741                           ;doprnt.c: 1266: }
  4742  0004B2  D03D               	goto	i2l2214
  4743  0004B4                     i2l2180:
  4744                           
  4745                           ;doprnt.c: 1268: else
  4746                           ;doprnt.c: 1273: {
  4747                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4748  0004B4  C014  FFD9         	movff	i2printf@ap,fsr2l
  4749  0004B8  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4750  0004BC  CFDE F017          	movff	postinc2,i2printf@val
  4751  0004C0  CFDD F018          	movff	postdec2,i2printf@val+1
  4752  0004C4  0E02               	movlw	2
  4753  0004C6  2614               	addwf	i2printf@ap,f,c
  4754  0004C8  0E00               	movlw	0
  4755  0004CA  2215               	addwfc	i2printf@ap+1,f,c
  4756                           
  4757                           ;doprnt.c: 1287: }
  4758                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4759  0004CC  D030               	goto	i2l2214
  4760  0004CE                     i2l2184:
  4761                           
  4762                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4763  0004CE  0E01               	movlw	1
  4764  0004D0  6E1C               	movwf	i2printf@c,c
  4765  0004D2                     i2l2186:
  4766  0004D2  0E05               	movlw	5
  4767  0004D4  181C               	xorwf	i2printf@c,w,c
  4768  0004D6  B4D8               	btfsc	status,2,c
  4769  0004D8  D032               	goto	i2l2216
  4770                           
  4771                           ;doprnt.c: 1306: if(val < dpowers[c])
  4772  0004DA  501C               	movf	i2printf@c,w,c
  4773  0004DC  0D02               	mullw	2
  4774  0004DE  0E3C               	movlw	low _dpowers
  4775  0004E0  24F3               	addwf	prodl,w,c
  4776  0004E2  6EF6               	movwf	tblptrl,c
  4777  0004E4  0EFE               	movlw	high _dpowers
  4778  0004E6  20F4               	addwfc	prodh,w,c
  4779  0004E8  6EF7               	movwf	tblptrh,c
  4780  0004EA                     	if	0	;There are less than 3 active tblptr bytes
  4781  0004EA                     	endif
  4782  0004EA  0009               	tblrd		*+
  4783  0004EC  50F5               	movf	tablat,w,c
  4784  0004EE  5C17               	subwf	i2printf@val,w,c
  4785  0004F0  0009               	tblrd		*+
  4786  0004F2  50F5               	movf	tablat,w,c
  4787  0004F4  5818               	subwfb	i2printf@val+1,w,c
  4788  0004F6  A0D8               	btfss	status,0,c
  4789  0004F8  D022               	goto	i2l2216
  4790                           
  4791                           ;doprnt.c: 1307: break;
  4792  0004FA  2A1C               	incf	i2printf@c,f,c
  4793  0004FC  D7EA               	goto	i2l2186
  4794  0004FE                     i2l2198:
  4795                           
  4796                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4797  0004FE  0E01               	movlw	1
  4798  000500  6E1C               	movwf	i2printf@c,c
  4799  000502                     i2l2200:
  4800  000502  0E04               	movlw	4
  4801  000504  181C               	xorwf	i2printf@c,w,c
  4802  000506  B4D8               	btfsc	status,2,c
  4803  000508  D01A               	goto	i2l2216
  4804                           
  4805                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4806  00050A  501C               	movf	i2printf@c,w,c
  4807  00050C  0D02               	mullw	2
  4808  00050E  0E46               	movlw	low _hexpowers
  4809  000510  24F3               	addwf	prodl,w,c
  4810  000512  6EF6               	movwf	tblptrl,c
  4811  000514  0EFE               	movlw	high _hexpowers
  4812  000516  20F4               	addwfc	prodh,w,c
  4813  000518  6EF7               	movwf	tblptrh,c
  4814  00051A                     	if	0	;There are less than 3 active tblptr bytes
  4815  00051A                     	endif
  4816  00051A  0009               	tblrd		*+
  4817  00051C  50F5               	movf	tablat,w,c
  4818  00051E  5C17               	subwf	i2printf@val,w,c
  4819  000520  0009               	tblrd		*+
  4820  000522  50F5               	movf	tablat,w,c
  4821  000524  5818               	subwfb	i2printf@val+1,w,c
  4822  000526  A0D8               	btfss	status,0,c
  4823  000528  D00A               	goto	i2l2216
  4824                           
  4825                           ;doprnt.c: 1318: break;
  4826  00052A  2A1C               	incf	i2printf@c,f,c
  4827  00052C  D7EA               	goto	i2l2200
  4828  00052E                     i2l2214:
  4829  00052E  5019               	movf	i2printf@flag,w,c
  4830  000530  0B80               	andlw	128
  4831                           
  4832                           ; Switch size 1, requested type "space"
  4833                           ; Number of cases is 2, Range of values is 0 to 128
  4834                           ; switch strategies available:
  4835                           ; Name         Instructions Cycles
  4836                           ; simple_byte            7     4 (average)
  4837                           ;	Chosen strategy is simple_byte
  4838  000532  0A00               	xorlw	0	; case 0
  4839  000534  B4D8               	btfsc	status,2,c
  4840  000536  D7CB               	goto	i2l2184
  4841  000538  0A80               	xorlw	128	; case 128
  4842  00053A  B4D8               	btfsc	status,2,c
  4843  00053C  D7E0               	goto	i2l2198
  4844  00053E                     i2l2216:
  4845                           
  4846                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4847  00053E  501A               	movf	i2printf@width,w,c
  4848  000540  101B               	iorwf	i2printf@width+1,w,c
  4849  000542  B4D8               	btfsc	status,2,c
  4850  000544  D009               	goto	i2l2222
  4851  000546  C019  F00F         	movff	i2printf@flag,??i2_printf
  4852  00054A  0E03               	movlw	3
  4853  00054C  160F               	andwf	??i2_printf,f,c
  4854  00054E  B4D8               	btfsc	status,2,c
  4855  000550  D003               	goto	i2l2222
  4856                           
  4857                           ;doprnt.c: 1346: width--;
  4858  000552  061A               	decf	i2printf@width,f,c
  4859  000554  A0D8               	btfss	status,0,c
  4860  000556  061B               	decf	i2printf@width+1,f,c
  4861  000558                     i2l2222:
  4862                           
  4863                           ;doprnt.c: 1381: if(width > c)
  4864  000558  0E80               	movlw	128
  4865  00055A  BE1C               	btfsc	i2printf@c,7,c
  4866  00055C  0E7F               	movlw	127
  4867  00055E  6E0F               	movwf	??i2_printf& (0+255),c
  4868  000560  501A               	movf	i2printf@width,w,c
  4869  000562  5C1C               	subwf	i2printf@c,w,c
  4870  000564  501B               	movf	i2printf@width+1,w,c
  4871  000566  0A80               	xorlw	128
  4872  000568  580F               	subwfb	??i2_printf& (0+255),w,c
  4873  00056A  B0D8               	btfsc	status,0,c
  4874  00056C  D007               	goto	i2l2226
  4875                           
  4876                           ;doprnt.c: 1382: width -= c;
  4877  00056E  501C               	movf	i2printf@c,w,c
  4878  000570  5E1A               	subwf	i2printf@width,f,c
  4879  000572  0E00               	movlw	0
  4880  000574  BE1C               	btfsc	i2printf@c,7,c
  4881  000576  0EFF               	movlw	255
  4882  000578  5A1B               	subwfb	i2printf@width+1,f,c
  4883  00057A  D004               	goto	i2l2228
  4884  00057C                     i2l2226:
  4885                           
  4886                           ;doprnt.c: 1383: else
  4887                           ;doprnt.c: 1384: width = 0;
  4888  00057C  0E00               	movlw	0
  4889  00057E  6E1B               	movwf	i2printf@width+1,c
  4890  000580  0E00               	movlw	0
  4891  000582  6E1A               	movwf	i2printf@width,c
  4892  000584                     i2l2228:
  4893                           
  4894                           ;doprnt.c: 1387: if(flag & 0x04) {
  4895  000584  A419               	btfss	i2printf@flag,2,c
  4896  000586  D014               	goto	i2l2240
  4897                           
  4898                           ;doprnt.c: 1392: if(flag & 0x03)
  4899  000588  C019  F00F         	movff	i2printf@flag,??i2_printf
  4900  00058C  0E03               	movlw	3
  4901  00058E  160F               	andwf	??i2_printf,f,c
  4902  000590  B4D8               	btfsc	status,2,c
  4903  000592  D003               	goto	i2l2234
  4904                           
  4905                           ;doprnt.c: 1393: (putch('-') );
  4906  000594  0E2D               	movlw	45
  4907  000596  ECBC  F007         	call	i2_putch
  4908  00059A                     i2l2234:
  4909                           
  4910                           ;doprnt.c: 1415: if(width)
  4911  00059A  501A               	movf	i2printf@width,w,c
  4912  00059C  101B               	iorwf	i2printf@width+1,w,c
  4913  00059E  B4D8               	btfsc	status,2,c
  4914  0005A0  D01E               	goto	i2l2250
  4915                           
  4916                           ;doprnt.c: 1417: (putch('0') );
  4917                           
  4918                           ;doprnt.c: 1416: do
  4919  0005A2  0E30               	movlw	48
  4920  0005A4  ECBC  F007         	call	i2_putch
  4921                           
  4922                           ;doprnt.c: 1418: while(--width);
  4923  0005A8  061A               	decf	i2printf@width,f,c
  4924  0005AA  A0D8               	btfss	status,0,c
  4925  0005AC  061B               	decf	i2printf@width+1,f,c
  4926  0005AE  D7F5               	goto	i2l2234
  4927  0005B0                     i2l2240:
  4928                           
  4929                           ;doprnt.c: 1422: {
  4930                           ;doprnt.c: 1424: if(width
  4931                           ;doprnt.c: 1428: )
  4932  0005B0  501A               	movf	i2printf@width,w,c
  4933  0005B2  101B               	iorwf	i2printf@width+1,w,c
  4934  0005B4  B4D8               	btfsc	status,2,c
  4935  0005B6  D00A               	goto	i2l2246
  4936  0005B8                     i2l2242:
  4937                           
  4938                           ;doprnt.c: 1430: (putch(' ') );
  4939  0005B8  0E20               	movlw	32
  4940  0005BA  ECBC  F007         	call	i2_putch
  4941                           
  4942                           ;doprnt.c: 1431: while(--width);
  4943  0005BE  061A               	decf	i2printf@width,f,c
  4944  0005C0  A0D8               	btfss	status,0,c
  4945  0005C2  061B               	decf	i2printf@width+1,f,c
  4946  0005C4  501A               	movf	i2printf@width,w,c
  4947  0005C6  101B               	iorwf	i2printf@width+1,w,c
  4948  0005C8  A4D8               	btfss	status,2,c
  4949  0005CA  D7F6               	goto	i2l2242
  4950  0005CC                     i2l2246:
  4951                           
  4952                           ;doprnt.c: 1438: if(flag & 0x03)
  4953  0005CC  C019  F00F         	movff	i2printf@flag,??i2_printf
  4954  0005D0  0E03               	movlw	3
  4955  0005D2  160F               	andwf	??i2_printf,f,c
  4956  0005D4  B4D8               	btfsc	status,2,c
  4957  0005D6  D003               	goto	i2l2250
  4958                           
  4959                           ;doprnt.c: 1439: (putch('-') );
  4960  0005D8  0E2D               	movlw	45
  4961  0005DA  ECBC  F007         	call	i2_putch
  4962  0005DE                     i2l2250:
  4963                           
  4964                           ;doprnt.c: 1469: }
  4965                           ;doprnt.c: 1472: prec = c;
  4966  0005DE  C01C  F016         	movff	i2printf@c,i2printf@prec
  4967                           
  4968                           ;doprnt.c: 1474: while(prec--) {
  4969  0005E2  D050               	goto	i2l2264
  4970  0005E4                     i2l2252:
  4971                           
  4972                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4973  0005E4  5016               	movf	i2printf@prec,w,c
  4974  0005E6  0D02               	mullw	2
  4975  0005E8  0E3C               	movlw	low _dpowers
  4976  0005EA  24F3               	addwf	prodl,w,c
  4977  0005EC  6EF6               	movwf	tblptrl,c
  4978  0005EE  0EFE               	movlw	high _dpowers
  4979  0005F0  20F4               	addwfc	prodh,w,c
  4980  0005F2  6EF7               	movwf	tblptrh,c
  4981  0005F4                     	if	0	;There are less than 3 active tblptr bytes
  4982  0005F4                     	endif
  4983  0005F4  0009               	tblrd		*+
  4984  0005F6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4985  0005FA  000A               	tblrd		*-
  4986  0005FC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4987  000600  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4988  000604  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4989  000608  EC25  F006         	call	i2___lwdiv	;wreg free
  4990  00060C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4991  000610  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4992  000614  0E00               	movlw	0
  4993  000616  6E0B               	movwf	i2___lwmod@divisor+1,c
  4994  000618  0E0A               	movlw	10
  4995  00061A  6E0A               	movwf	i2___lwmod@divisor,c
  4996  00061C  ECE3  F006         	call	i2___lwmod	;wreg free
  4997  000620  5008               	movf	?i2___lwmod,w,c
  4998  000622  0F30               	addlw	48
  4999  000624  6E1C               	movwf	i2printf@c,c
  5000                           
  5001                           ;doprnt.c: 1491: break;
  5002  000626  D02B               	goto	i2l2262
  5003  000628                     i2l2254:
  5004                           
  5005                           ;doprnt.c: 1499: {
  5006                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5007  000628  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5008  00062C  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5009  000630  5016               	movf	i2printf@prec,w,c
  5010  000632  0D02               	mullw	2
  5011  000634  0E46               	movlw	low _hexpowers
  5012  000636  24F3               	addwf	prodl,w,c
  5013  000638  6EF6               	movwf	tblptrl,c
  5014  00063A  0EFE               	movlw	high _hexpowers
  5015  00063C  20F4               	addwfc	prodh,w,c
  5016  00063E  6EF7               	movwf	tblptrh,c
  5017  000640                     	if	0	;There are less than 3 active tblptr bytes
  5018  000640                     	endif
  5019  000640  0009               	tblrd		*+
  5020  000642  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5021  000646  000A               	tblrd		*-
  5022  000648  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5023  00064C  EC25  F006         	call	i2___lwdiv	;wreg free
  5024  000650  5001               	movf	?i2___lwdiv,w,c
  5025  000652  0B0F               	andlw	15
  5026  000654  6E13               	movwf	i2printf@idx,c
  5027                           
  5028                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5029  000656  5013               	movf	i2printf@idx,w,c
  5030  000658  0D01               	mullw	1
  5031  00065A  0EF9               	movlw	low STR_23
  5032  00065C  24F3               	addwf	prodl,w,c
  5033  00065E  6EF6               	movwf	tblptrl,c
  5034  000660  0EFE               	movlw	high STR_23
  5035  000662  20F4               	addwfc	prodh,w,c
  5036  000664  6EF7               	movwf	tblptrh,c
  5037  000666                     	if	0	;There are less than 3 active tblptr bytes
  5038  000666                     	endif
  5039  000666  0008               	tblrd		*
  5040  000668  CFF5 F01C          	movff	tablat,i2printf@c
  5041                           
  5042                           ;doprnt.c: 1523: }
  5043                           
  5044                           ;doprnt.c: 1508: }
  5045                           ;doprnt.c: 1510: break;
  5046  00066C  D008               	goto	i2l2262
  5047  00066E                     i2l2260:
  5048  00066E  5019               	movf	i2printf@flag,w,c
  5049  000670  0B80               	andlw	128
  5050                           
  5051                           ; Switch size 1, requested type "space"
  5052                           ; Number of cases is 2, Range of values is 0 to 128
  5053                           ; switch strategies available:
  5054                           ; Name         Instructions Cycles
  5055                           ; simple_byte            7     4 (average)
  5056                           ;	Chosen strategy is simple_byte
  5057  000672  0A00               	xorlw	0	; case 0
  5058  000674  B4D8               	btfsc	status,2,c
  5059  000676  D7B6               	goto	i2l2252
  5060  000678  0A80               	xorlw	128	; case 128
  5061  00067A  B4D8               	btfsc	status,2,c
  5062  00067C  D7D5               	goto	i2l2254
  5063  00067E                     i2l2262:
  5064                           
  5065                           ;doprnt.c: 1524: (putch(c) );
  5066  00067E  501C               	movf	i2printf@c,w,c
  5067  000680  ECBC  F007         	call	i2_putch
  5068  000684                     i2l2264:
  5069  000684  0616               	decf	i2printf@prec,f,c
  5070  000686  2816               	incf	i2printf@prec,w,c
  5071  000688  A4D8               	btfss	status,2,c
  5072  00068A  D7F1               	goto	i2l2260
  5073  00068C                     i2l2266:
  5074  00068C  C00D  FFF6         	movff	i2printf@f,tblptrl
  5075  000690  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5076  000694  4A0D               	infsnz	i2printf@f,f,c
  5077  000696  2A0E               	incf	i2printf@f+1,f,c
  5078  000698                     	if	0	;tblptru may be non-zero
  5079  000698                     	endif
  5080  000698                     	if	0	;tblptru may be non-zero
  5081  000698                     	endif
  5082  000698  0008               	tblrd		*
  5083  00069A  CFF5 F01C          	movff	tablat,i2printf@c
  5084  00069E  501C               	movf	i2printf@c,w,c
  5085  0006A0  B4D8               	btfsc	status,2,c
  5086  0006A2  0012               	return	
  5087  0006A4  D67F               	goto	i2l2140
  5088  0006A6                     __end_ofi2_printf:
  5089                           	opt stack 0
  5090                           pclatu	equ	0xFFB
  5091                           pclath	equ	0xFFA
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodh	equ	0xFF4
  5097                           prodl	equ	0xFF3
  5098                           intcon	equ	0xFF2
  5099                           intcon2	equ	0xFF1
  5100                           intcon3	equ	0xFF0
  5101                           postinc0	equ	0xFEE
  5102                           fsr0h	equ	0xFEA
  5103                           fsr0l	equ	0xFE9
  5104                           wreg	equ	0xFE8
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function i2_putch *****************
  5115 ;; Defined at:
  5116 ;;		line 31 in file "lcd.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  data            1    wreg     unsigned char 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  data            1    2[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        1 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    1
  5137 ;; This function calls:
  5138 ;;		i2_lcdNibble
  5139 ;; This function is called by:
  5140 ;;		i2_printf
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text26
  5145  000F78                     __ptext26:
  5146                           	opt stack 0
  5147  000F78                     i2_putch:
  5148                           	opt stack 23
  5149                           
  5150                           ;incstack = 0
  5151                           ;i2putch@data stored from wreg
  5152  000F78  6E03               	movwf	i2putch@data,c
  5153                           
  5154                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5155  000F7A  848C               	bsf	3980,2,c	;volatile
  5156                           
  5157                           ;lcd.c: 33: lcdNibble(data);
  5158  000F7C  5003               	movf	i2putch@data,w,c
  5159  000F7E  EC75  F006         	call	i2_lcdNibble
  5160  000F82  0012               	return		;funcret
  5161  000F84                     __end_ofi2_putch:
  5162                           	opt stack 0
  5163                           pclatu	equ	0xFFB
  5164                           pclath	equ	0xFFA
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           intcon2	equ	0xFF1
  5173                           intcon3	equ	0xFF0
  5174                           postinc0	equ	0xFEE
  5175                           fsr0h	equ	0xFEA
  5176                           fsr0l	equ	0xFE9
  5177                           wreg	equ	0xFE8
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187 ;; *************** function i2_isdigit *****************
  5188 ;; Defined at:
  5189 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  c               1    wreg     unsigned char 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  c               1    2[COMRAM] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;		None               void
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;Total ram usage:        3 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; This function calls:
  5210 ;;		Nothing
  5211 ;; This function is called by:
  5212 ;;		i2_printf
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           	psect	text27
  5217  000F1C                     __ptext27:
  5218                           	opt stack 0
  5219  000F1C                     i2_isdigit:
  5220                           	opt stack 24
  5221                           
  5222                           ;incstack = 0
  5223                           ;i2isdigit@c stored from wreg
  5224  000F1C  6E03               	movwf	i2isdigit@c,c
  5225  000F1E  0E00               	movlw	0
  5226  000F20  6E02               	movwf	i2_isdigit$537,c
  5227  000F22  0E3A               	movlw	58
  5228  000F24  6003               	cpfslt	i2isdigit@c,c
  5229  000F26  D005               	goto	i2l1968
  5230  000F28  0E2F               	movlw	47
  5231  000F2A  6403               	cpfsgt	i2isdigit@c,c
  5232  000F2C  D002               	goto	i2l1968
  5233  000F2E  0E01               	movlw	1
  5234  000F30  6E02               	movwf	i2_isdigit$537,c
  5235  000F32                     i2l1968:
  5236  000F32  C002  F001         	movff	i2_isdigit$537,??i2_isdigit
  5237  000F36  3001               	rrcf	??i2_isdigit,w,c
  5238  000F38  0012               	return	
  5239  000F3A                     __end_ofi2_isdigit:
  5240                           	opt stack 0
  5241                           pclatu	equ	0xFFB
  5242                           pclath	equ	0xFFA
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           intcon2	equ	0xFF1
  5251                           intcon3	equ	0xFF0
  5252                           postinc0	equ	0xFEE
  5253                           fsr0h	equ	0xFEA
  5254                           fsr0l	equ	0xFE9
  5255                           wreg	equ	0xFE8
  5256                           fsr1h	equ	0xFE2
  5257                           fsr1l	equ	0xFE1
  5258                           indf2	equ	0xFDF
  5259                           postinc2	equ	0xFDE
  5260                           postdec2	equ	0xFDD
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function i2___wmul *****************
  5266 ;; Defined at:
  5267 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  multiplier      2    0[COMRAM] unsigned int 
  5270 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  __wmul          2    4[COMRAM] unsigned int 
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  2    0[COMRAM] unsigned int 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2, status,0, prodl, prodh
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;Total ram usage:        6 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; This function calls:
  5289 ;;		Nothing
  5290 ;; This function is called by:
  5291 ;;		i2_printf
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text28
  5296  000ED8                     __ptext28:
  5297                           	opt stack 0
  5298  000ED8                     i2___wmul:
  5299                           	opt stack 24
  5300                           
  5301                           ;incstack = 0
  5302  000ED8  5001               	movf	i2___wmul@multiplier,w,c
  5303  000EDA  0203               	mulwf	i2___wmul@multiplicand,c
  5304  000EDC  CFF3 F005          	movff	prodl,i2___wmul@product
  5305  000EE0  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5306  000EE4  5001               	movf	i2___wmul@multiplier,w,c
  5307  000EE6  0204               	mulwf	i2___wmul@multiplicand+1,c
  5308  000EE8  50F3               	movf	prodl,w,c
  5309  000EEA  2606               	addwf	i2___wmul@product+1,f,c
  5310  000EEC  5002               	movf	i2___wmul@multiplier+1,w,c
  5311  000EEE  0203               	mulwf	i2___wmul@multiplicand,c
  5312  000EF0  50F3               	movf	prodl,w,c
  5313  000EF2  2606               	addwf	i2___wmul@product+1,f,c
  5314  000EF4  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5315  000EF8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5316  000EFC  0012               	return	
  5317  000EFE                     __end_ofi2___wmul:
  5318                           	opt stack 0
  5319                           pclatu	equ	0xFFB
  5320                           pclath	equ	0xFFA
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           intcon2	equ	0xFF1
  5329                           intcon3	equ	0xFF0
  5330                           postinc0	equ	0xFEE
  5331                           fsr0h	equ	0xFEA
  5332                           fsr0l	equ	0xFE9
  5333                           wreg	equ	0xFE8
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function i2___lwmod *****************
  5344 ;; Defined at:
  5345 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  dividend        2    7[COMRAM] unsigned int 
  5348 ;;  divisor         2    9[COMRAM] unsigned int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  __lwmod         1   11[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  2    7[COMRAM] unsigned int 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;Total ram usage:        5 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		i2_printf
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text29
  5374  000DC6                     __ptext29:
  5375                           	opt stack 0
  5376  000DC6                     i2___lwmod:
  5377                           	opt stack 24
  5378                           
  5379                           ;incstack = 0
  5380  000DC6  500A               	movf	i2___lwmod@divisor,w,c
  5381  000DC8  100B               	iorwf	i2___lwmod@divisor+1,w,c
  5382  000DCA  B4D8               	btfsc	status,2,c
  5383  000DCC  D018               	goto	i2l719
  5384  000DCE  0E01               	movlw	1
  5385  000DD0  6E0C               	movwf	i2___lwmod@counter,c
  5386  000DD2  D004               	goto	i2l2000
  5387  000DD4                     i2l1998:
  5388  000DD4  90D8               	bcf	status,0,c
  5389  000DD6  360A               	rlcf	i2___lwmod@divisor,f,c
  5390  000DD8  360B               	rlcf	i2___lwmod@divisor+1,f,c
  5391  000DDA  2A0C               	incf	i2___lwmod@counter,f,c
  5392  000DDC                     i2l2000:
  5393  000DDC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  5394  000DDE  D7FA               	goto	i2l1998
  5395  000DE0                     i2l2002:
  5396  000DE0  500A               	movf	i2___lwmod@divisor,w,c
  5397  000DE2  5C08               	subwf	i2___lwmod@dividend,w,c
  5398  000DE4  500B               	movf	i2___lwmod@divisor+1,w,c
  5399  000DE6  5809               	subwfb	i2___lwmod@dividend+1,w,c
  5400  000DE8  A0D8               	btfss	status,0,c
  5401  000DEA  D004               	goto	i2l2006
  5402  000DEC  500A               	movf	i2___lwmod@divisor,w,c
  5403  000DEE  5E08               	subwf	i2___lwmod@dividend,f,c
  5404  000DF0  500B               	movf	i2___lwmod@divisor+1,w,c
  5405  000DF2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  5406  000DF4                     i2l2006:
  5407  000DF4  90D8               	bcf	status,0,c
  5408  000DF6  320B               	rrcf	i2___lwmod@divisor+1,f,c
  5409  000DF8  320A               	rrcf	i2___lwmod@divisor,f,c
  5410  000DFA  2E0C               	decfsz	i2___lwmod@counter,f,c
  5411  000DFC  D7F1               	goto	i2l2002
  5412  000DFE                     i2l719:
  5413  000DFE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  5414  000E02  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  5415  000E06  0012               	return		;funcret
  5416  000E08                     __end_ofi2___lwmod:
  5417                           	opt stack 0
  5418                           pclatu	equ	0xFFB
  5419                           pclath	equ	0xFFA
  5420                           tblptru	equ	0xFF8
  5421                           tblptrh	equ	0xFF7
  5422                           tblptrl	equ	0xFF6
  5423                           tablat	equ	0xFF5
  5424                           prodh	equ	0xFF4
  5425                           prodl	equ	0xFF3
  5426                           intcon	equ	0xFF2
  5427                           intcon2	equ	0xFF1
  5428                           intcon3	equ	0xFF0
  5429                           postinc0	equ	0xFEE
  5430                           fsr0h	equ	0xFEA
  5431                           fsr0l	equ	0xFE9
  5432                           wreg	equ	0xFE8
  5433                           fsr1h	equ	0xFE2
  5434                           fsr1l	equ	0xFE1
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function i2___lwdiv *****************
  5443 ;; Defined at:
  5444 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  dividend        2    0[COMRAM] unsigned int 
  5447 ;;  divisor         2    2[COMRAM] unsigned int 
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5450 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  2    0[COMRAM] unsigned int 
  5453 ;; Registers used:
  5454 ;;		wreg, status,2, status,0
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;Total ram usage:        7 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; This function calls:
  5467 ;;		Nothing
  5468 ;; This function is called by:
  5469 ;;		i2_printf
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text30
  5474  000C4A                     __ptext30:
  5475                           	opt stack 0
  5476  000C4A                     i2___lwdiv:
  5477                           	opt stack 24
  5478                           
  5479                           ;incstack = 0
  5480  000C4A  0E00               	movlw	0
  5481  000C4C  6E06               	movwf	i2___lwdiv@quotient+1,c
  5482  000C4E  0E00               	movlw	0
  5483  000C50  6E05               	movwf	i2___lwdiv@quotient,c
  5484  000C52  5003               	movf	i2___lwdiv@divisor,w,c
  5485  000C54  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5486  000C56  B4D8               	btfsc	status,2,c
  5487  000C58  D01C               	goto	i2l709
  5488  000C5A  0E01               	movlw	1
  5489  000C5C  6E07               	movwf	i2___lwdiv@counter,c
  5490  000C5E  D004               	goto	i2l1980
  5491  000C60                     i2l1978:
  5492  000C60  90D8               	bcf	status,0,c
  5493  000C62  3603               	rlcf	i2___lwdiv@divisor,f,c
  5494  000C64  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5495  000C66  2A07               	incf	i2___lwdiv@counter,f,c
  5496  000C68                     i2l1980:
  5497  000C68  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5498  000C6A  D7FA               	goto	i2l1978
  5499  000C6C                     i2l1982:
  5500  000C6C  90D8               	bcf	status,0,c
  5501  000C6E  3605               	rlcf	i2___lwdiv@quotient,f,c
  5502  000C70  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5503  000C72  5003               	movf	i2___lwdiv@divisor,w,c
  5504  000C74  5C01               	subwf	i2___lwdiv@dividend,w,c
  5505  000C76  5004               	movf	i2___lwdiv@divisor+1,w,c
  5506  000C78  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5507  000C7A  A0D8               	btfss	status,0,c
  5508  000C7C  D005               	goto	i2l1990
  5509  000C7E  5003               	movf	i2___lwdiv@divisor,w,c
  5510  000C80  5E01               	subwf	i2___lwdiv@dividend,f,c
  5511  000C82  5004               	movf	i2___lwdiv@divisor+1,w,c
  5512  000C84  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5513  000C86  8005               	bsf	i2___lwdiv@quotient,0,c
  5514  000C88                     i2l1990:
  5515  000C88  90D8               	bcf	status,0,c
  5516  000C8A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5517  000C8C  3203               	rrcf	i2___lwdiv@divisor,f,c
  5518  000C8E  2E07               	decfsz	i2___lwdiv@counter,f,c
  5519  000C90  D7ED               	goto	i2l1982
  5520  000C92                     i2l709:
  5521  000C92  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5522  000C96  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5523  000C9A  0012               	return		;funcret
  5524  000C9C                     __end_ofi2___lwdiv:
  5525                           	opt stack 0
  5526                           pclatu	equ	0xFFB
  5527                           pclath	equ	0xFFA
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           intcon2	equ	0xFF1
  5536                           intcon3	equ	0xFF0
  5537                           postinc0	equ	0xFEE
  5538                           fsr0h	equ	0xFEA
  5539                           fsr0l	equ	0xFE9
  5540                           wreg	equ	0xFE8
  5541                           fsr1h	equ	0xFE2
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550 ;; *************** function i2_lcdInst *****************
  5551 ;; Defined at:
  5552 ;;		line 26 in file "lcd.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  data            1    wreg     unsigned char 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  data            1    2[COMRAM] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;Total ram usage:        1 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    1
  5573 ;; This function calls:
  5574 ;;		i2_lcdNibble
  5575 ;; This function is called by:
  5576 ;;		_isr
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text31
  5581  000F84                     __ptext31:
  5582                           	opt stack 0
  5583  000F84                     i2_lcdInst:
  5584                           	opt stack 24
  5585                           
  5586                           ;incstack = 0
  5587                           ;i2lcdInst@data stored from wreg
  5588  000F84  6E03               	movwf	i2lcdInst@data,c
  5589                           
  5590                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5591  000F86  948C               	bcf	3980,2,c	;volatile
  5592                           
  5593                           ;lcd.c: 28: lcdNibble(data);
  5594  000F88  5003               	movf	i2lcdInst@data,w,c
  5595  000F8A  EC75  F006         	call	i2_lcdNibble
  5596  000F8E  0012               	return		;funcret
  5597  000F90                     __end_ofi2_lcdInst:
  5598                           	opt stack 0
  5599                           pclatu	equ	0xFFB
  5600                           pclath	equ	0xFFA
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           intcon2	equ	0xFF1
  5609                           intcon3	equ	0xFF0
  5610                           postinc0	equ	0xFEE
  5611                           fsr0h	equ	0xFEA
  5612                           fsr0l	equ	0xFE9
  5613                           wreg	equ	0xFE8
  5614                           fsr1h	equ	0xFE2
  5615                           fsr1l	equ	0xFE1
  5616                           indf2	equ	0xFDF
  5617                           postinc2	equ	0xFDE
  5618                           postdec2	equ	0xFDD
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function i2_lcdNibble *****************
  5624 ;; Defined at:
  5625 ;;		line 36 in file "lcd.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  data            1    wreg     unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  data            1    1[COMRAM] unsigned char 
  5630 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:        2 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		i2_lcdInst
  5650 ;;		i2_putch
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text32
  5655  000CEA                     __ptext32:
  5656                           	opt stack 0
  5657  000CEA                     i2_lcdNibble:
  5658                           	opt stack 23
  5659                           
  5660                           ;incstack = 0
  5661                           ;i2lcdNibble@data stored from wreg
  5662  000CEA  6E02               	movwf	i2lcdNibble@data,c
  5663                           
  5664                           ;lcd.c: 38: char temp = data & 0xF0;
  5665  000CEC  5002               	movf	i2lcdNibble@data,w,c
  5666  000CEE  0BF0               	andlw	240
  5667  000CF0  6E01               	movwf	i2lcdNibble@temp,c
  5668                           
  5669                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5670  000CF2  508C               	movf	3980,w,c	;volatile
  5671  000CF4  0B0F               	andlw	15
  5672  000CF6  6E8C               	movwf	3980,c	;volatile
  5673                           
  5674                           ;lcd.c: 40: LATD = temp | LATD;
  5675  000CF8  5001               	movf	i2lcdNibble@temp,w,c
  5676  000CFA  108C               	iorwf	3980,w,c	;volatile
  5677  000CFC  6E8C               	movwf	3980,c	;volatile
  5678                           
  5679                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5680  000CFE  968C               	bcf	3980,3,c	;volatile
  5681                           
  5682                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5683  000D00  0E19               	movlw	25
  5684  000D02                     i2u207_47:
  5685  000D02  2EE8               	decfsz	wreg,f,c
  5686  000D04  D7FE               	bra	i2u207_47
  5687                           
  5688                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5689  000D06  868C               	bsf	3980,3,c	;volatile
  5690                           
  5691                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5692  000D08  0E19               	movlw	25
  5693  000D0A                     i2u208_47:
  5694  000D0A  2EE8               	decfsz	wreg,f,c
  5695  000D0C  D7FE               	bra	i2u208_47
  5696                           
  5697                           ;lcd.c: 47: data = data << 4;
  5698  000D0E  3802               	swapf	i2lcdNibble@data,w,c
  5699  000D10  0BF0               	andlw	240
  5700  000D12  6E02               	movwf	i2lcdNibble@data,c
  5701                           
  5702                           ;lcd.c: 49: temp = data & 0xF0;
  5703  000D14  5002               	movf	i2lcdNibble@data,w,c
  5704  000D16  0BF0               	andlw	240
  5705  000D18  6E01               	movwf	i2lcdNibble@temp,c
  5706                           
  5707                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5708  000D1A  508C               	movf	3980,w,c	;volatile
  5709  000D1C  0B0F               	andlw	15
  5710  000D1E  6E8C               	movwf	3980,c	;volatile
  5711                           
  5712                           ;lcd.c: 51: LATD = temp | LATD;
  5713  000D20  5001               	movf	i2lcdNibble@temp,w,c
  5714  000D22  108C               	iorwf	3980,w,c	;volatile
  5715  000D24  6E8C               	movwf	3980,c	;volatile
  5716                           
  5717                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5718  000D26  968C               	bcf	3980,3,c	;volatile
  5719                           
  5720                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5721  000D28  0E19               	movlw	25
  5722  000D2A                     i2u209_47:
  5723  000D2A  2EE8               	decfsz	wreg,f,c
  5724  000D2C  D7FE               	bra	i2u209_47
  5725                           
  5726                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5727  000D2E  868C               	bsf	3980,3,c	;volatile
  5728                           
  5729                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5730  000D30  0E19               	movlw	25
  5731  000D32                     i2u210_47:
  5732  000D32  2EE8               	decfsz	wreg,f,c
  5733  000D34  D7FE               	bra	i2u210_47
  5734  000D36  0012               	return		;funcret
  5735  000D38                     __end_ofi2_lcdNibble:
  5736                           	opt stack 0
  5737                           pclatu	equ	0xFFB
  5738                           pclath	equ	0xFFA
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           intcon2	equ	0xFF1
  5747                           intcon3	equ	0xFF0
  5748                           postinc0	equ	0xFEE
  5749                           fsr0h	equ	0xFEA
  5750                           fsr0l	equ	0xFE9
  5751                           wreg	equ	0xFE8
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           pclatu	equ	0xFFB
  5761                           pclath	equ	0xFFA
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           intcon3	equ	0xFF0
  5771                           postinc0	equ	0xFEE
  5772                           fsr0h	equ	0xFEA
  5773                           fsr0l	equ	0xFE9
  5774                           wreg	equ	0xFE8
  5775                           fsr1h	equ	0xFE2
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784                           	psect	rparam
  5785  0000                     pclatu	equ	0xFFB
  5786                           pclath	equ	0xFFA
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           intcon	equ	0xFF2
  5794                           intcon2	equ	0xFF1
  5795                           intcon3	equ	0xFF0
  5796                           postinc0	equ	0xFEE
  5797                           fsr0h	equ	0xFEA
  5798                           fsr0l	equ	0xFE9
  5799                           wreg	equ	0xFE8
  5800                           fsr1h	equ	0xFE2
  5801                           fsr1l	equ	0xFE1
  5802                           indf2	equ	0xFDF
  5803                           postinc2	equ	0xFDE
  5804                           postdec2	equ	0xFDD
  5805                           fsr2h	equ	0xFDA
  5806                           fsr2l	equ	0xFD9
  5807                           status	equ	0xFD8
  5808                           
  5809                           	psect	temp
  5810  000053                     btemp:
  5811                           	opt stack 0
  5812  000053                     	ds	1
  5813  0000                     int$flags	set	btemp
  5814                           pclatu	equ	0xFFB
  5815                           pclath	equ	0xFFA
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           intcon	equ	0xFF2
  5823                           intcon2	equ	0xFF1
  5824                           intcon3	equ	0xFF0
  5825                           postinc0	equ	0xFEE
  5826                           fsr0h	equ	0xFEA
  5827                           fsr0l	equ	0xFE9
  5828                           wreg	equ	0xFE8
  5829                           fsr1h	equ	0xFE2
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           postinc2	equ	0xFDE
  5833                           postdec2	equ	0xFDD
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8


Data Sizes:
    Strings     425
    Constant    42
    Data        2
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     70      82
    BANK0           128     12      12
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_22(CODE[16]), STR_21(CODE[25]), STR_20(CODE[24]), STR_19(CODE[23]), 
		 -> STR_18(CODE[23]), STR_17(CODE[23]), STR_16(CODE[10]), STR_15(CODE[17]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[17]), 
		 -> STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30306
                                             10 BANK0      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4806
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4806
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4806
                                             68 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    5341
                                             68 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             45 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                             45 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    4806
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    5230
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    4671
                                             56 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             44 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             57 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             44 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    2093
                                             28 COMRAM    16    16      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C       C       5        9.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     46      52       1       65.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5E      34        0.0%
DATA                 0      0      5E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 01:18:07 2017

                       l34 0F4E        ___wmul@multiplicand 002F         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l264 0116                        l709 0C40                        l719 0DBC  
                      l656 0AA0               __CFG_CPB$OFF 000000                        u110 0E84  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _isr 0008               ___awmod@sign 0032                        prod 000FF3  
                      wreg 000FE8               ?_bottle_time 0001               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1040 0E86                       l2414 0C0E  
                     l2510 01A6                       l2416 0C16                       l2512 01AC  
                     l2426 0C36                       l2418 0C1A                       l2442 0DB2  
                     l2434 0D92                       l1900 0B42                       l2436 0D9A  
                     l2540 0252                       l2452 0020                       l2700 0782  
                     l2620 0AEC                       l1910 0B64                       l2438 0D9E  
                     l2534 0214                       l2526 01E2                       l2462 004E  
                     l2614 0AD0                       l1912 0B68                       l1920 0B86  
                     l1904 0B4E                       l2552 0286                       l2528 01F4  
                     l2480 00E6                       l2456 0034                       l2608 0AB4  
                     l2554 0292                       l2562 02BE                       l2546 026A  
                     l2538 0248                       l2458 0046                       l2730 091A  
                     l1924 0B94                       l1916 0B7C                       l1908 0B5C  
                     l2564 02C4                       l2572 0358                       l2492 014E  
                     l2476 00E0                       l2468 007E                       l2644 09B6  
                     l2628 0B08                       l2740 0938                       l2732 0920  
                     l1934 0A52                       l2398 0F14                       l2566 030C  
                     l2574 036A                       l2558 02AC                       l2670 06CE  
                     l2654 09DA                       l2734 0926                       l1936 0A5E  
                     l2576 0372                       l2496 016A                       l2664 06A8  
                     l2648 09BE                       l2736 092C                       l2744 093E  
                     l1946 0A92                       l1938 0A62                       l2498 0170  
                     l2578 037E                       l2682 071A                       l2738 0932  
                     l2746 0964                       l2676 06F4                       l2694 0766  
                     l2688 0740                       ?_isr 0001                       STR_1 FFE6  
                     STR_2 FF0A                       STR_3 FF2C                       STR_4 FECB  
                     STR_5 FEE2                       STR_6 FF3D                       STR_7 FF1B  
                     STR_8 FF81                       STR_9 FF70                       u2007 0D3E  
                     u2017 0D78                       u2027 0CB4                       u2037 0CBC  
                     _LATA 000F89                       _LATB 000F8A                       u2047 0CDC  
                     _LATC 000F8B                       _LATD 000F8C                       u1345 0BCC  
                     u2057 0CE4                       _LATE 000F8D                       _RCEN 007E2B  
                     u1997 0972                       _RSEN 007E29                       _main 08CC  
                     _keys FE2B                       _time 0047                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0053                       isr@i 002C  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 0F84              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 0CEA              ?_bottle_count 0001  
                    ??_isr 001D           ?_I2C_Master_Init 003A           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      STR_10 FF5F  
                    STR_11 FF4E                      STR_12 FF92                      STR_20 FE6E  
                    STR_13 FFB4                      STR_21 FE55                      STR_22 FFD6  
                    STR_14 FFA3                      STR_15 FFC5                      STR_23 FEF9  
                    STR_16 FFF4                      STR_17 FEB4                      STR_18 FE9D  
                    STR_19 FE86            __end_of___awmod 0B9E            __end_of___lldiv 0AB2  
          __end_of___lwdiv 0C4A            __end_of___lwmod 0DC6                      i2l264 0486  
                    i2l185 088E                      i2l709 0C92                      i2l719 0DFE  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 0F78  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_initLCD 0D84             __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003  
          __end_of_dpowers FE46            __end_of_isdigit 0F1C                      _putch 0F60  
                    pclath 000FFA                      tablat 000FF5            __end_of_timeset FE55  
         __end_ofi2___wmul 0EFE            __end_of_standby 0E66                      status 000FD8  
           __CFG_PBADEN$ON 000000              i2printf@width 001A           __end_ofi2_printf 06A6  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042            __initialization 0E08  
       __size_ofi2_lcdInst 000C             ??_bottle_count 0045               __end_of_main 0982  
             __end_of_keys FE3C                 i2printf@ap 0014         __size_ofi2_isdigit 001E  
                   ??_main 008A              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 002E         ??_I2C_Master_Start 002E                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0030            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2000 0DDC                     i2l2002 0DE0  
                   i2l2006 0DF4                     i2l2200 0502                     i2l2140 03A4  
                   i2l2222 0558                     i2l2214 052E                     i2l2150 03C8  
                   i2l2240 05B0                     i2l2216 053E                     i2l2144 03B4  
                   i2l2320 0824                     i2l2312 080E                     i2l2242 05B8  
                   i2l2250 05DE                     i2l2234 059A                     i2l2226 057C  
                   i2l2146 03C2                     i2l2322 0828                     i2l2306 0800  
                   i2l2330 085C                     i2l2252 05E4                     i2l2260 066E  
                   i2l2228 0584                     i2l2180 04B4                     i2l2164 0454  
                   i2l2156 03F6                     i2l2340 087A                     i2l2316 0816  
                   i2l2308 0804                     i2l2254 0628                     i2l2262 067E  
                   i2l2246 05CC                     i2l2318 0820                     i2l2264 0684  
                   i2l2184 04CE                     i2l2168 0458                     i2l2336 0872  
                   i2l2328 0834                     i2l2186 04D2                     i2l2266 068C  
                   i2l2198 04FE                     i2l1980 0C68                     i2l1990 0C88  
                   i2l1982 0C6C                     i2l1968 0F32                     i2l1978 0C60  
                   i2l1998 0DD4                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 0EB2             __CFG_STVREN$ON 000000  
                ??___awmod 0031                  ??___lldiv 0035                  ??___lwdiv 0031  
                ??___lwmod 0038                     clear_0 0E26            ___awmod@divisor 002F  
          ___awmod@counter 0031                  ??_lcdInst 002F                     _printf 0012  
                ??_initLCD 0030               __pdataCOMRAM 0051                  ??_isdigit 002D  
        __end_ofi2___lwdiv 0C9C               __mediumconst FE2A          __end_ofi2___lwmod 0E08  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_standby 0045          __end_ofi2_lcdInst 0F90          __end_ofi2_isdigit 0F3A  
     __size_of_bottle_time 0026                 __accesstop 0080    __end_of__initialization 0E2C  
            ___rparam_used 000001         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
            __end_of_putch 0F6C                i2printf@idx 0013                i2printf@val 0017  
       __size_of_date_time 00AE                  ?i2___wmul 0001         __size_of_lcdNibble 004E  
              i2putch@data 0003                  ?i2_printf 000D       __end_of_bottle_count 07C0  
                  ??_putch 002F               ?i2_lcdNibble 0001                    ?___wmul 002D  
                  ?_printf 0039         __size_of_operation 007C                 ??i2___wmul 0005  
               ??i2_printf 000F                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_date_time 0A30                    i2_putch 0F78  
        _bottle_count_disp 0051          __end_of_lcdNibble 0CEA              ?_operationend 0001  
                  __Hparam 0000                    __Lparam 0000                    ___awmod 0B2E  
                  ___lldiv 0A30            __size_of___wmul 0026                    ___lwdiv 0BF8  
                  ___lwmod 0D84                 _curr_state 0050                    __pcinit 0E08  
                  __ramtop 1000                    _lcdInst 0F6C                    __ptext0 08CC  
                  __ptext1 0E3A                    __ptext2 0F3A                    __ptext3 0AB2  
                  __ptext4 0D38                    __ptext5 0982                    __ptext6 0F90  
                  __ptext7 0F9A                    __ptext8 0FA2                    __ptext9 0E66  
          __size_of_printf 0388                    _initLCD 0D38          __end_of_hexpowers FE4E  
            i2_isdigit$537 0002                    _dpowers FE3C                    _isdigit 0EFE  
             __size_of_isr 08C4           ___awmod@dividend 002D   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012                 date_time@i 0045  
 __size_of_I2C_Master_Stop 0008                    _timeset FE4E                    _standby 0E3A  
           __pintcode_body 07C0       end_of_initialization 0E2C              __Lmediumconst FE2A  
                  int_func 07C0        i2___wmul@multiplier 0001          __end_of_operation 0B2E  
           _operation_disp 004E             ??_operationend 0045  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0031            ___lldiv@counter 0039  
                  printf@c 0089                    printf@f 0039           I2C_Master_Init@c 003A  
         I2C_Master_Read@a 002E                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE      __size_of_bottle_count 011A          i2___lwdiv@divisor 0003  
                i2___lwdiv 0C4A                  i2___lwmod 0DC6          i2___lwdiv@counter 0007  
                i2_lcdInst 0F84                printf@width 0087                  i2_isdigit 0F1C  
             _bottle_count 06A6             __end_of___wmul 0ED8       __size_ofi2_lcdNibble 004E  
            __pidataCOMRAM 0FAA              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 039A               i2printf@flag 0019               i2printf@prec 0016  
      start_initialization 0E08          __size_ofi2___wmul 0026                __end_of_isr 08CC  
                i2printf@c 001C                  i2printf@f 000D              ??_bottle_time 0045  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 030C  
        ??_I2C_Master_Init 003E          ??_I2C_Master_Read 002E          ??_I2C_Master_Wait 002D  
               ?i2_lcdInst 0001          ??_I2C_Master_Stop 002E                 ?i2_isdigit 0001  
                 ??___wmul 0031           __CFG_LPT1OSC$OFF 000000                   ??_printf 0041  
              __pbssCOMRAM 0047       __end_of_operationend 0F4E              __pcstackBANK0 0080  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
      __end_of_bottle_time 0EB2           _I2C_Master_Start 0FA2           _I2C_Master_Write 0F90  
                _date_time 0982           ___lwdiv@dividend 002D          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FE2A                  _lcdNibble 0C9C  
                 ?___awmod 002D                   ?___lldiv 002D                   ?___lwdiv 002D  
                 ?___lwmod 0034                   ?_lcdInst 0001                   ?_initLCD 0001  
                 ?_isdigit 0001                  _hexpowers FE46                   ?_standby 0001  
         ___lwdiv@quotient 0032                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 000C                ??i2_lcdInst 0003             ___wmul@product 0031  
                 _LATDbits 000F8C                ??i2_isdigit 0001                 ?_date_time 0001  
                 i2u210_47 0D32                   i2u206_47 0880                   i2u207_47 0D02  
                 i2u208_47 0D0A                   i2u209_47 0D2A                  _operation 0AB2  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001          ___wmul@multiplier 002D  
                 i2___wmul 0ED8              lcdNibble@data 002E                 printf@flag 0086  
            lcdNibble@temp 002D                 printf@prec 0083                   i2_printf 039A  
              _bottle_time 0E8C        I2C_Master_Read@temp 002F           __size_ofi2_putch 000C  
                 __Hrparam 0000                 ?_operation 0001                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000           __size_of___awmod 0070      i2___wmul@multiplicand 0003  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
    __size_of_operationend 0014                _isdigit$537 002E           __size_of_lcdInst 000C  
          _I2C_Master_Init 0B9E            _I2C_Master_Read 0E66           __size_of_initLCD 004C  
          _I2C_Master_Wait 0F4E            _I2C_Master_Stop 0F9A           __size_of_isdigit 001E  
          ___lwdiv@divisor 002F            ___lwdiv@counter 0031                   __ptext10 0F4E  
                 __ptext11 0E8C                   __ptext20 0C9C                   __ptext12 06A6  
                 __ptext21 0B2E                   __ptext13 0012                   __ptext30 0C4A  
                 __ptext22 0B9E                   __ptext14 0F60                   __ptext31 0F84  
                 __ptext23 0A30                   __ptext15 0EFE                   __ptext32 0CEA  
                 __ptext16 0EB2                   __ptext25 039A                   __ptext17 0D84  
                 __ptext26 0F78                   __ptext18 0BF8                   __ptext27 0F1C  
                 __ptext19 0F6C                   __ptext28 0ED8                   __ptext29 0DC6  
         __size_of_standby 002C              __size_of_main 00B6                ??_date_time 0045  
             _operationend 0F3A              ??i2_lcdNibble 0001                ??_lcdNibble 002D  
                 int$flags 0053                  printf@idx 0080                  printf@val 0084  
                putch@data 002F   __end_of_I2C_Master_Start 0FAA   __end_of_I2C_Master_Write 0F9A  
               _INTCONbits 000FF2                   isdigit@c 002F                   intlevel2 0000  
         ___lwmod@dividend 0034           ___lldiv@dividend 002D                ??_operation 0045  
                 printf@ap 0081    __end_of_I2C_Master_Init 0BF8    __end_of_I2C_Master_Read 0E8C  
  __end_of_I2C_Master_Wait 0F60    __end_of_I2C_Master_Stop 0FA2                lcdInst@data 002F  
      __end_ofi2_lcdNibble 0D38           ___lldiv@quotient 0035          I2C_Master_Write@d 002E  
          ___lwmod@divisor 0036            ___lwmod@counter 0038  

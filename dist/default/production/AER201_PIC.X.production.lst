

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 00:11:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.40
    46                           ; Generated 01/12/2016 GMT
    47                           ; 
    48                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	smallconst
    81  001000                     __psmallconst:
    82                           	opt stack 0
    83  001000  00                 	db	0
    84  001001                     _keys:
    85                           	opt stack 0
    86  001001  31                 	db	49
    87  001002  32                 	db	50
    88  001003  33                 	db	51
    89  001004  41                 	db	65
    90  001005  34                 	db	52
    91  001006  35                 	db	53
    92  001007  36                 	db	54
    93  001008  42                 	db	66
    94  001009  37                 	db	55
    95  00100A  38                 	db	56
    96  00100B  39                 	db	57
    97  00100C  43                 	db	67
    98  00100D  2A                 	db	42
    99  00100E  30                 	db	48
   100  00100F  23                 	db	35
   101  001010  44                 	db	68
   102  001011  00                 	db	0
   103  001012                     __end_of_keys:
   104                           	opt stack 0
   105  001012                     _dpowers:
   106                           	opt stack 0
   107  001012  0001               	dw	1
   108  001014  000A               	dw	10
   109  001016  0064               	dw	100
   110  001018  03E8               	dw	1000
   111  00101A  2710               	dw	10000
   112  00101C                     __end_of_dpowers:
   113                           	opt stack 0
   114  00101C                     _hexpowers:
   115                           	opt stack 0
   116  00101C  0001               	dw	1
   117  00101E  0010               	dw	16
   118  001020  0100               	dw	256
   119  001022  1000               	dw	4096
   120  001024                     __end_of_hexpowers:
   121                           	opt stack 0
   122  001024                     _timeset:
   123                           	opt stack 0
   124  001024  50                 	db	80
   125  001025  35                 	db	53
   126  001026  21                 	db	33
   127  001027  08                 	db	8
   128  001028  05                 	db	5
   129  001029  02                 	db	2
   130  00102A  17                 	db	23
   131  00102B                     __end_of_timeset:
   132                           	opt stack 0
   133  0000                     _ADCON0	set	4034
   134  0000                     _ADCON1	set	4033
   135  0000                     _INTCONbits	set	4082
   136  0000                     _LATA	set	3977
   137  0000                     _LATB	set	3978
   138  0000                     _LATC	set	3979
   139  0000                     _LATD	set	3980
   140  0000                     _LATDbits	set	3980
   141  0000                     _LATE	set	3981
   142  0000                     _PORTB	set	3969
   143  0000                     _SSPADD	set	4040
   144  0000                     _SSPBUF	set	4041
   145  0000                     _SSPCON1	set	4038
   146  0000                     _SSPCON2	set	4037
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _TRISA	set	3986
   149  0000                     _TRISB	set	3987
   150  0000                     _TRISC	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISE	set	3990
   153  0000                     _ACKDT	set	32301
   154  0000                     _ACKEN	set	32300
   155  0000                     _INT1IE	set	32643
   156  0000                     _INT1IF	set	32640
   157  0000                     _PEN	set	32298
   158  0000                     _RCEN	set	32299
   159  0000                     _RSEN	set	32297
   160  0000                     _SEN	set	32296
   161  0000                     _TRISC3	set	31907
   162  0000                     _TRISC4	set	31908
   163  0000                     _nRBPU	set	32655
   164  00102B                     STR_4:
   165  00102B  25                 	db	37
   166  00102C  30                 	db	48	;'0'
   167  00102D  32                 	db	50	;'2'
   168  00102E  78                 	db	120	;'x'
   169  00102F  2F                 	db	47
   170  001030  25                 	db	37
   171  001031  30                 	db	48	;'0'
   172  001032  32                 	db	50	;'2'
   173  001033  78                 	db	120	;'x'
   174  001034  2F                 	db	47
   175  001035  25                 	db	37
   176  001036  30                 	db	48	;'0'
   177  001037  32                 	db	50	;'2'
   178  001038  78                 	db	120	;'x'
   179  001039  20                 	db	32
   180  00103A  20                 	db	32
   181  00103B  20                 	db	32
   182  00103C  20                 	db	32
   183  00103D  20                 	db	32
   184  00103E  20                 	db	32
   185  00103F  20                 	db	32
   186  001040  20                 	db	32
   187  001041  00                 	db	0
   188  001042                     STR_5:
   189  001042  25                 	db	37
   190  001043  30                 	db	48	;'0'
   191  001044  32                 	db	50	;'2'
   192  001045  78                 	db	120	;'x'
   193  001046  3A                 	db	58	;':'
   194  001047  25                 	db	37
   195  001048  30                 	db	48	;'0'
   196  001049  32                 	db	50	;'2'
   197  00104A  78                 	db	120	;'x'
   198  00104B  3A                 	db	58	;':'
   199  00104C  25                 	db	37
   200  00104D  30                 	db	48	;'0'
   201  00104E  32                 	db	50	;'2'
   202  00104F  78                 	db	120	;'x'
   203  001050  20                 	db	32
   204  001051  20                 	db	32
   205  001052  20                 	db	32
   206  001053  20                 	db	32
   207  001054  20                 	db	32
   208  001055  20                 	db	32
   209  001056  20                 	db	32
   210  001057  20                 	db	32
   211  001058  00                 	db	0
   212  001059                     STR_6:
   213  001059  30                 	db	48	;'0'
   214  00105A  31                 	db	49	;'1'
   215  00105B  32                 	db	50	;'2'
   216  00105C  33                 	db	51	;'3'
   217  00105D  34                 	db	52	;'4'
   218  00105E  35                 	db	53	;'5'
   219  00105F  36                 	db	54	;'6'
   220  001060  37                 	db	55	;'7'
   221  001061  38                 	db	56	;'8'
   222  001062  39                 	db	57	;'9'
   223  001063  61                 	db	97	;'a'
   224  001064  62                 	db	98	;'b'
   225  001065  63                 	db	99	;'c'
   226  001066  64                 	db	100	;'d'
   227  001067  65                 	db	101	;'e'
   228  001068  66                 	db	102	;'f'
   229  001069  00                 	db	0
   230  00106A                     STR_1:
   231  00106A  62                 	db	98	;'b'
   232  00106B  61                 	db	97	;'a'
   233  00106C  64                 	db	100	;'d'
   234  00106D  20                 	db	32
   235  00106E  69                 	db	105	;'i'
   236  00106F  6E                 	db	110	;'n'
   237  001070  74                 	db	116	;'t'
   238  001071  65                 	db	101	;'e'
   239  001072  72                 	db	114	;'r'
   240  001073  72                 	db	114	;'r'
   241  001074  75                 	db	117	;'u'
   242  001075  70                 	db	112	;'p'
   243  001076  74                 	db	116	;'t'
   244  001077  00                 	db	0
   245  001078                     STR_3:
   246  001078  50                 	db	80	;'P'
   247  001079  4F                 	db	79	;'O'
   248  00107A  52                 	db	82	;'R'
   249  00107B  54                 	db	84	;'T'
   250  00107C  42                 	db	66	;'B'
   251  00107D  3A                 	db	58	;':'
   252  00107E  20                 	db	32
   253  00107F  25                 	db	37
   254  001080  64                 	db	100	;'d'
   255  001081  00                 	db	0
   256  001082                     STR_2:
   257  001082  73                 	db	115	;'s'
   258  001083  74                 	db	116	;'t'
   259  001084  61                 	db	97	;'a'
   260  001085  6E                 	db	110	;'n'
   261  001086  64                 	db	100	;'d'
   262  001087  62                 	db	98	;'b'
   263  001088  79                 	db	121	;'y'
   264  001089  00                 	db	0
   265                           
   266                           ; #config settings
   267  00108A  00                 	db	0	; dummy byte at the end
   268  0000                     
   269                           	psect	cinit
   270  001D20                     __pcinit:
   271                           	opt stack 0
   272  001D20                     start_initialization:
   273                           	opt stack 0
   274  001D20                     __initialization:
   275                           	opt stack 0
   276                           
   277                           ; Clear objects allocated to COMRAM (8 bytes)
   278  001D20  EE00  F048         	lfsr	0,__pbssCOMRAM
   279  001D24  0E08               	movlw	8
   280  001D26                     clear_0:
   281  001D26  6AEE               	clrf	postinc0,c
   282  001D28  06E8               	decf	wreg,f,c
   283  001D2A  E1FD               	bnz	clear_0
   284  001D2C                     end_of_initialization:
   285                           	opt stack 0
   286  001D2C                     __end_of__initialization:
   287                           	opt stack 0
   288  001D2C  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   289  001D2E  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   290  001D30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   291  001D32  6EF8               	movwf	tblptru,c
   292  001D34  0100               	movlb	0
   293  001D36  EF9C  F00C         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssCOMRAM
   299  000048                     __pbssCOMRAM:
   300                           	opt stack 0
   301  000048                     _time:
   302                           	opt stack 0
   303  000048                     	ds	7
   304  00004F                     _curr_state:
   305                           	opt stack 0
   306  00004F                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           
   311                           	psect	cstackBANK0
   312  000080                     __pcstackBANK0:
   313                           	opt stack 0
   314  000080                     printf@idx:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x0
   318  000080                     	ds	1
   319  000081                     printf@ap:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x1
   323  000081                     	ds	2
   324  000083                     printf@prec:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0x3
   328  000083                     	ds	1
   329  000084                     printf@val:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x4
   333  000084                     	ds	2
   334  000086                     printf@flag:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x6
   338  000086                     	ds	1
   339  000087                     printf@width:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x7
   343  000087                     	ds	2
   344  000089                     printf@c:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x9
   348  000089                     	ds	1
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackCOMRAM
   354  000001                     __pcstackCOMRAM:
   355                           	opt stack 0
   356  000001                     ??i2_isdigit:
   357  000001                     ?i2___wmul:
   358                           	opt stack 0
   359  000001                     ?i2___lwdiv:
   360                           	opt stack 0
   361  000001                     i2lcdNibble@temp:
   362                           	opt stack 0
   363  000001                     i2___wmul@multiplier:
   364                           	opt stack 0
   365  000001                     i2___lwdiv@dividend:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x0
   369  000001                     	ds	1
   370  000002                     i2lcdNibble@data:
   371                           	opt stack 0
   372  000002                     i2_isdigit$507:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x1
   376  000002                     	ds	1
   377  000003                     i2lcdInst@data:
   378                           	opt stack 0
   379  000003                     i2putch@data:
   380                           	opt stack 0
   381  000003                     i2isdigit@c:
   382                           	opt stack 0
   383  000003                     i2___wmul@multiplicand:
   384                           	opt stack 0
   385  000003                     i2___lwdiv@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	2
   390  000005                     i2___wmul@product:
   391                           	opt stack 0
   392  000005                     i2___lwdiv@quotient:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x4
   396  000005                     	ds	2
   397  000007                     i2___lwdiv@counter:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x6
   401  000007                     	ds	1
   402  000008                     ?i2___lwmod:
   403                           	opt stack 0
   404  000008                     i2___lwmod@dividend:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x7
   408  000008                     	ds	2
   409  00000A                     i2___lwmod@divisor:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x9
   413  00000A                     	ds	2
   414  00000C                     i2___lwmod@counter:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00000C                     	ds	1
   419  00000D                     ?i2_printf:
   420                           	opt stack 0
   421  00000D                     i2printf@f:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0xC
   425  00000D                     	ds	2
   426  00000F                     ??i2_printf:
   427                           
   428                           ; 1 bytes @ 0xE
   429  00000F                     	ds	4
   430  000013                     i2printf@idx:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x12
   434  000013                     	ds	1
   435  000014                     i2printf@ap:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x13
   439  000014                     	ds	2
   440  000016                     i2printf@prec:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x15
   444  000016                     	ds	1
   445  000017                     i2printf@val:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x16
   449  000017                     	ds	2
   450  000019                     i2printf@flag:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x18
   454  000019                     	ds	1
   455  00001A                     i2printf@width:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x19
   459  00001A                     	ds	2
   460  00001C                     i2printf@c:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x1B
   464  00001C                     	ds	1
   465  00001D                     ??_isr:
   466                           
   467                           ; 1 bytes @ 0x1C
   468  00001D                     	ds	15
   469  00002C                     isr@i:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x2B
   473  00002C                     	ds	1
   474  00002D                     ??_isdigit:
   475  00002D                     ??_I2C_Master_Wait:
   476  00002D                     ?___wmul:
   477                           	opt stack 0
   478  00002D                     ?___lwdiv:
   479                           	opt stack 0
   480  00002D                     ?___lldiv:
   481                           	opt stack 0
   482  00002D                     lcdNibble@temp:
   483                           	opt stack 0
   484  00002D                     ___wmul@multiplier:
   485                           	opt stack 0
   486  00002D                     ___lwdiv@dividend:
   487                           	opt stack 0
   488  00002D                     ___lldiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x2C
   492  00002D                     	ds	1
   493  00002E                     I2C_Master_Read@a:
   494                           	opt stack 0
   495  00002E                     lcdNibble@data:
   496                           	opt stack 0
   497  00002E                     _isdigit$507:
   498                           	opt stack 0
   499  00002E                     I2C_Master_Write@d:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x2D
   503  00002E                     	ds	1
   504  00002F                     I2C_Master_Read@temp:
   505                           	opt stack 0
   506  00002F                     lcdInst@data:
   507                           	opt stack 0
   508  00002F                     putch@data:
   509                           	opt stack 0
   510  00002F                     isdigit@c:
   511                           	opt stack 0
   512  00002F                     ___wmul@multiplicand:
   513                           	opt stack 0
   514  00002F                     ___lwdiv@divisor:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x2E
   518  00002F                     	ds	1
   519  000030                     ??_initLCD:
   520                           
   521                           ; 1 bytes @ 0x2F
   522  000030                     	ds	1
   523  000031                     ___lwdiv@counter:
   524                           	opt stack 0
   525  000031                     ___wmul@product:
   526                           	opt stack 0
   527  000031                     ___lldiv@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x30
   531  000031                     	ds	1
   532  000032                     ___lwdiv@quotient:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x31
   536  000032                     	ds	2
   537  000034                     ?___lwmod:
   538                           	opt stack 0
   539  000034                     ___lwmod@dividend:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x33
   543  000034                     	ds	1
   544  000035                     ___lldiv@quotient:
   545                           	opt stack 0
   546                           
   547                           ; 4 bytes @ 0x34
   548  000035                     	ds	1
   549  000036                     ___lwmod@divisor:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x35
   553  000036                     	ds	2
   554  000038                     ___lwmod@counter:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x37
   558  000038                     	ds	1
   559  000039                     ?_printf:
   560                           	opt stack 0
   561  000039                     ___lldiv@counter:
   562                           	opt stack 0
   563  000039                     printf@f:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x38
   567  000039                     	ds	1
   568  00003A                     I2C_Master_Init@c:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x39
   572  00003A                     	ds	4
   573  00003E                     ??_I2C_Master_Init:
   574                           
   575                           ; 1 bytes @ 0x3D
   576  00003E                     	ds	3
   577  000041                     ??_printf:
   578                           
   579                           ; 1 bytes @ 0x40
   580  000041                     	ds	4
   581  000045                     ??_standby:
   582  000045                     ??_date_time:
   583                           
   584                           ; 1 bytes @ 0x44
   585  000045                     	ds	1
   586  000046                     date_time@i_255:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x45
   590  000046                     	ds	1
   591  000047                     date_time@i:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x46
   595  000047                     	ds	1
   596  000048                     tblptru	equ	0xFF8
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           
   600                           ; 1 bytes @ 0x47
   601 ;;
   602 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   603 ;;
   604 ;; *************** function _main *****************
   605 ;; Defined at:
   606 ;;		line 39 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   624 ;;Total ram usage:        0 bytes
   625 ;; Hardware stack levels required when called:    8
   626 ;; This function calls:
   627 ;;		_I2C_Master_Init
   628 ;;		_bottle_count
   629 ;;		_bottle_time
   630 ;;		_date_time
   631 ;;		_initLCD
   632 ;;		_standby
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text0
   639  001938                     __ptext0:
   640                           	opt stack 0
   641  001938                     _main:
   642                           	opt stack 23
   643                           
   644                           ;main.c: 43: TRISA = 0xFF;
   645                           
   646                           ;incstack = 0
   647  001938  6892               	setf	3986,c	;volatile
   648                           
   649                           ;main.c: 44: TRISB = 0xFF;
   650  00193A  6893               	setf	3987,c	;volatile
   651                           
   652                           ;main.c: 45: TRISC = 0x00;
   653  00193C  0E00               	movlw	0
   654  00193E  6E94               	movwf	3988,c	;volatile
   655                           
   656                           ;main.c: 46: TRISD = 0x00;
   657  001940  0E00               	movlw	0
   658  001942  6E95               	movwf	3989,c	;volatile
   659                           
   660                           ;main.c: 47: TRISE = 0x00;
   661  001944  0E00               	movlw	0
   662  001946  6E96               	movwf	3990,c	;volatile
   663                           
   664                           ;main.c: 49: LATA = 0x00;
   665  001948  0E00               	movlw	0
   666  00194A  6E89               	movwf	3977,c	;volatile
   667                           
   668                           ;main.c: 50: LATB = 0x00;
   669  00194C  0E00               	movlw	0
   670  00194E  6E8A               	movwf	3978,c	;volatile
   671                           
   672                           ;main.c: 51: LATC = 0x00;
   673  001950  0E00               	movlw	0
   674  001952  6E8B               	movwf	3979,c	;volatile
   675                           
   676                           ;main.c: 52: LATD = 0x00;
   677  001954  0E00               	movlw	0
   678  001956  6E8C               	movwf	3980,c	;volatile
   679                           
   680                           ;main.c: 53: LATE = 0x00;
   681  001958  0E00               	movlw	0
   682  00195A  6E8D               	movwf	3981,c	;volatile
   683                           
   684                           ;main.c: 55: ADCON0 = 0x00;
   685  00195C  0E00               	movlw	0
   686  00195E  6EC2               	movwf	4034,c	;volatile
   687                           
   688                           ;main.c: 56: ADCON1 = 0xFF;
   689  001960  68C1               	setf	4033,c	;volatile
   690                           
   691                           ;main.c: 58: INT1IE = 1;
   692  001962  86F0               	bsf	intcon3,3,c	;volatile
   693                           
   694                           ;main.c: 60: nRBPU = 0;
   695  001964  9EF1               	bcf	intcon2,7,c	;volatile
   696                           
   697                           ;main.c: 62: initLCD();
   698  001966  ECD1  F00D         	call	_initLCD	;wreg free
   699                           
   700                           ;main.c: 63: I2C_Master_Init(10000);
   701  00196A  0E10               	movlw	16
   702  00196C  6E3A               	movwf	I2C_Master_Init@c,c
   703  00196E  0E27               	movlw	39
   704  001970  6E3B               	movwf	I2C_Master_Init@c+1,c
   705  001972  0E00               	movlw	0
   706  001974  6E3C               	movwf	I2C_Master_Init@c+2,c
   707  001976  0E00               	movlw	0
   708  001978  6E3D               	movwf	I2C_Master_Init@c+3,c
   709  00197A  ECDC  F00C         	call	_I2C_Master_Init	;wreg free
   710                           
   711                           ;main.c: 67: (INTCONbits.GIE = 1);
   712  00197E  8EF2               	bsf	intcon,7,c	;volatile
   713                           
   714                           ;main.c: 70: curr_state = STANDBY;
   715  001980  0E00               	movlw	0
   716  001982  6E4F               	movwf	_curr_state,c
   717                           
   718                           ;main.c: 73: switch(curr_state){
   719                           
   720                           ;main.c: 72: while(1){
   721  001984  D00B               	goto	l2347
   722  001986                     l2337:
   723                           
   724                           ;main.c: 75: standby();
   725  001986  EC5B  F00D         	call	_standby	;wreg free
   726                           
   727                           ;main.c: 76: break;
   728  00198A  D008               	goto	l2347
   729  00198C                     l2339:
   730                           
   731                           ;main.c: 78: date_time();
   732  00198C  EC90  F00B         	call	_date_time	;wreg free
   733                           
   734                           ;main.c: 79: break;
   735  001990  D005               	goto	l2347
   736  001992                     l2341:
   737                           
   738                           ;main.c: 81: bottle_count();
   739  001992  ECCC  F00E         	call	_bottle_count	;wreg free
   740                           
   741                           ;main.c: 82: break;
   742  001996  D002               	goto	l2347
   743  001998                     l2343:
   744                           
   745                           ;main.c: 84: bottle_time();
   746  001998  ECCB  F00E         	call	_bottle_time	;wreg free
   747  00199C                     l2347:
   748  00199C  504F               	movf	_curr_state,w,c
   749                           
   750                           ; Switch size 1, requested type "space"
   751                           ; Number of cases is 4, Range of values is 0 to 3
   752                           ; switch strategies available:
   753                           ; Name         Instructions Cycles
   754                           ; simple_byte           13     7 (average)
   755                           ;	Chosen strategy is simple_byte
   756  00199E  0A00               	xorlw	0	; case 0
   757  0019A0  B4D8               	btfsc	status,2,c
   758  0019A2  D7F1               	goto	l2337
   759  0019A4  0A01               	xorlw	1	; case 1
   760  0019A6  B4D8               	btfsc	status,2,c
   761  0019A8  D7F1               	goto	l2339
   762  0019AA  0A03               	xorlw	3	; case 2
   763  0019AC  B4D8               	btfsc	status,2,c
   764  0019AE  D7F1               	goto	l2341
   765  0019B0  0A01               	xorlw	1	; case 3
   766  0019B2  B4D8               	btfsc	status,2,c
   767  0019B4  D7F1               	goto	l2343
   768  0019B6  D7F2               	goto	l2347
   769  0019B8                     __end_of_main:
   770                           	opt stack 0
   771                           tblptru	equ	0xFF8
   772                           intcon	equ	0xFF2
   773                           intcon2	equ	0xFF1
   774                           intcon3	equ	0xFF0
   775                           postinc0	equ	0xFEE
   776                           wreg	equ	0xFE8
   777                           status	equ	0xFD8
   778                           
   779 ;; *************** function _standby *****************
   780 ;; Defined at:
   781 ;;		line 114 in file "main.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    7
   802 ;; This function calls:
   803 ;;		_lcdInst
   804 ;;		_printf
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text1
   811  001AB6                     __ptext1:
   812                           	opt stack 0
   813  001AB6                     _standby:
   814                           	opt stack 23
   815                           
   816                           ;main.c: 115: lcdInst(0b10000000);
   817                           
   818                           ;incstack = 0
   819  001AB6  0E80               	movlw	128
   820  001AB8  ECAC  F00E         	call	_lcdInst
   821                           
   822                           ;main.c: 116: printf("standby");
   823  001ABC  0E82               	movlw	low STR_2
   824  001ABE  6E39               	movwf	printf@f,c
   825  001AC0  0E10               	movlw	high STR_2
   826  001AC2  6E3A               	movwf	printf@f+1,c
   827  001AC4  EC46  F008         	call	_printf	;wreg free
   828                           
   829                           ;main.c: 117: lcdInst(0b11000000);
   830  001AC8  0EC0               	movlw	192
   831  001ACA  ECAC  F00E         	call	_lcdInst
   832                           
   833                           ;main.c: 118: printf("PORTB: %d", (PORTB & 0xF0) >> 4);
   834  001ACE  0E78               	movlw	low STR_3
   835  001AD0  6E39               	movwf	printf@f,c
   836  001AD2  0E10               	movlw	high STR_3
   837  001AD4  6E3A               	movwf	printf@f+1,c
   838  001AD6  CF81 F045          	movff	3969,??_standby	;volatile
   839  001ADA  3A45               	swapf	??_standby,f,c
   840  001ADC  0E0F               	movlw	15
   841  001ADE  1645               	andwf	??_standby,f,c
   842  001AE0  0E0F               	movlw	15
   843  001AE2  1645               	andwf	??_standby,f,c
   844  001AE4  5045               	movf	??_standby,w,c
   845  001AE6  6E3B               	movwf	?_printf+2,c
   846  001AE8  6A3C               	clrf	?_printf+3,c
   847  001AEA  EC46  F008         	call	_printf	;wreg free
   848                           
   849                           ;main.c: 119: _delay((unsigned long)((300)*(10000000/4000.0)));
   850  001AEE  0E04               	movlw	4
   851  001AF0  6E46               	movwf	(??_standby+1)& (0+255),c
   852  001AF2  0ECF               	movlw	207
   853  001AF4  6E45               	movwf	??_standby& (0+255),c
   854  001AF6  0E02               	movlw	2
   855  001AF8                     u1917:
   856  001AF8  2EE8               	decfsz	wreg,f,c
   857  001AFA  D7FE               	bra	u1917
   858  001AFC  2E45               	decfsz	??_standby& (0+255),f,c
   859  001AFE  D7FC               	bra	u1917
   860  001B00  2E46               	decfsz	(??_standby+1)& (0+255),f,c
   861  001B02  D7FA               	bra	u1917
   862  001B04  0012               	return	
   863  001B06                     __end_of_standby:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           intcon	equ	0xFF2
   867                           intcon2	equ	0xFF1
   868                           intcon3	equ	0xFF0
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _initLCD *****************
   874 ;; Defined at:
   875 ;;		line 14 in file "lcd.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;Total ram usage:        1 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    6
   896 ;; This function calls:
   897 ;;		_lcdInst
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text2
   904  001BA2                     __ptext2:
   905                           	opt stack 0
   906  001BA2                     _initLCD:
   907                           	opt stack 24
   908                           
   909                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
   910                           
   911                           ;incstack = 0
   912  001BA2  0E31               	movlw	49
   913  001BA4  6E30               	movwf	??_initLCD& (0+255),c
   914  001BA6  0EB2               	movlw	178
   915  001BA8                     u1927:
   916  001BA8  2EE8               	decfsz	wreg,f,c
   917  001BAA  D7FE               	bra	u1927
   918  001BAC  2E30               	decfsz	??_initLCD& (0+255),f,c
   919  001BAE  D7FC               	bra	u1927
   920  001BB0  D000               	nop2	
   921                           
   922                           ;lcd.c: 16: lcdInst(0b00110011);
   923  001BB2  0E33               	movlw	51
   924  001BB4  ECAC  F00E         	call	_lcdInst
   925                           
   926                           ;lcd.c: 17: lcdInst(0b00110011);
   927  001BB8  0E33               	movlw	51
   928  001BBA  ECAC  F00E         	call	_lcdInst
   929                           
   930                           ;lcd.c: 18: lcdInst(0b00110010);
   931  001BBE  0E32               	movlw	50
   932  001BC0  ECAC  F00E         	call	_lcdInst
   933                           
   934                           ;lcd.c: 19: lcdInst(0b00101000);
   935  001BC4  0E28               	movlw	40
   936  001BC6  ECAC  F00E         	call	_lcdInst
   937                           
   938                           ;lcd.c: 20: lcdInst(0b00001111);
   939  001BCA  0E0F               	movlw	15
   940  001BCC  ECAC  F00E         	call	_lcdInst
   941                           
   942                           ;lcd.c: 21: lcdInst(0b00000110);
   943  001BD0  0E06               	movlw	6
   944  001BD2  ECAC  F00E         	call	_lcdInst
   945                           
   946                           ;lcd.c: 22: lcdInst(0b00000001);
   947  001BD6  0E01               	movlw	1
   948  001BD8  ECAC  F00E         	call	_lcdInst
   949                           
   950                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
   951  001BDC  0E31               	movlw	49
   952  001BDE  6E30               	movwf	??_initLCD& (0+255),c
   953  001BE0  0EB2               	movlw	178
   954  001BE2                     u1937:
   955  001BE2  2EE8               	decfsz	wreg,f,c
   956  001BE4  D7FE               	bra	u1937
   957  001BE6  2E30               	decfsz	??_initLCD& (0+255),f,c
   958  001BE8  D7FC               	bra	u1937
   959  001BEA  D000               	nop2	
   960  001BEC  0012               	return		;funcret
   961  001BEE                     __end_of_initLCD:
   962                           	opt stack 0
   963                           tblptru	equ	0xFF8
   964                           intcon	equ	0xFF2
   965                           intcon2	equ	0xFF1
   966                           intcon3	equ	0xFF0
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function _date_time *****************
   972 ;; Defined at:
   973 ;;		line 133 in file "main.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  i               1   69[COMRAM] unsigned char 
   978 ;;  i               1   70[COMRAM] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:        3 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    7
   995 ;; This function calls:
   996 ;;		_I2C_Master_Read
   997 ;;		_I2C_Master_Start
   998 ;;		_I2C_Master_Stop
   999 ;;		_I2C_Master_Write
  1000 ;;		_lcdInst
  1001 ;;		_printf
  1002 ;; This function is called by:
  1003 ;;		_main
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           	psect	text3
  1008  001720                     __ptext3:
  1009                           	opt stack 0
  1010  001720                     _date_time:
  1011                           	opt stack 23
  1012                           
  1013                           ;main.c: 135: I2C_Master_Start();
  1014                           
  1015                           ;incstack = 0
  1016  001720  ECC7  F00E         	call	_I2C_Master_Start	;wreg free
  1017                           
  1018                           ;main.c: 136: I2C_Master_Write(0b11010000);
  1019  001724  0E00               	movlw	0
  1020  001726  6E2F               	movwf	I2C_Master_Write@d+1,c
  1021  001728  0ED0               	movlw	208
  1022  00172A  6E2E               	movwf	I2C_Master_Write@d,c
  1023  00172C  ECBE  F00E         	call	_I2C_Master_Write	;wreg free
  1024                           
  1025                           ;main.c: 137: I2C_Master_Write(0x00);
  1026  001730  0E00               	movlw	0
  1027  001732  6E2F               	movwf	I2C_Master_Write@d+1,c
  1028  001734  0E00               	movlw	0
  1029  001736  6E2E               	movwf	I2C_Master_Write@d,c
  1030  001738  ECBE  F00E         	call	_I2C_Master_Write	;wreg free
  1031                           
  1032                           ;main.c: 138: I2C_Master_Stop();
  1033  00173C  ECC3  F00E         	call	_I2C_Master_Stop	;wreg free
  1034                           
  1035                           ;main.c: 141: I2C_Master_Start();
  1036  001740  ECC7  F00E         	call	_I2C_Master_Start	;wreg free
  1037                           
  1038                           ;main.c: 142: I2C_Master_Write(0b11010001);
  1039  001744  0E00               	movlw	0
  1040  001746  6E2F               	movwf	I2C_Master_Write@d+1,c
  1041  001748  0ED1               	movlw	209
  1042  00174A  6E2E               	movwf	I2C_Master_Write@d,c
  1043  00174C  ECBE  F00E         	call	_I2C_Master_Write	;wreg free
  1044                           
  1045                           ;main.c: 143: for(unsigned char i=0;i<0x06;i++){
  1046  001750  0E00               	movlw	0
  1047  001752  6E47               	movwf	date_time@i,c
  1048  001754                     l2295:
  1049  001754  0E05               	movlw	5
  1050  001756  6447               	cpfsgt	date_time@i,c
  1051  001758  D001               	goto	l2299
  1052  00175A  D00E               	goto	l2305
  1053  00175C                     l2299:
  1054                           
  1055                           ;main.c: 144: time[i] = I2C_Master_Read(1);
  1056  00175C  5047               	movf	date_time@i,w,c
  1057  00175E  0D01               	mullw	1
  1058  001760  0E48               	movlw	low _time
  1059  001762  24F3               	addwf	prodl,w,c
  1060  001764  6ED9               	movwf	fsr2l,c
  1061  001766  0E00               	movlw	high _time
  1062  001768  20F4               	addwfc	prodh,w,c
  1063  00176A  6EDA               	movwf	fsr2h,c
  1064  00176C  0E01               	movlw	1
  1065  00176E  EC4C  F00E         	call	_I2C_Master_Read
  1066  001772  6EDF               	movwf	indf2,c
  1067  001774  2A47               	incf	date_time@i,f,c
  1068  001776  D7EE               	goto	l2295
  1069  001778                     l2305:
  1070                           
  1071                           ;main.c: 145: }
  1072                           ;main.c: 146: time[6] = I2C_Master_Read(0);
  1073  001778  0E00               	movlw	0
  1074  00177A  EC4C  F00E         	call	_I2C_Master_Read
  1075  00177E  6E4E               	movwf	_time+6,c
  1076                           
  1077                           ;main.c: 147: I2C_Master_Stop();
  1078  001780  ECC3  F00E         	call	_I2C_Master_Stop	;wreg free
  1079                           
  1080                           ;main.c: 150: lcdInst(0b10000000);
  1081  001784  0E80               	movlw	128
  1082  001786  ECAC  F00E         	call	_lcdInst
  1083                           
  1084                           ;main.c: 151: printf("%02x/%02x/%02x        ", time[5],time[4],time[6]);
  1085  00178A  0E2B               	movlw	low STR_4
  1086  00178C  6E39               	movwf	printf@f,c
  1087  00178E  0E10               	movlw	high STR_4
  1088  001790  6E3A               	movwf	printf@f+1,c
  1089  001792  C04D  F03B         	movff	_time+5,?_printf+2
  1090  001796  6A3C               	clrf	?_printf+3,c
  1091  001798  C04C  F03D         	movff	_time+4,?_printf+4
  1092  00179C  6A3E               	clrf	?_printf+5,c
  1093  00179E  C04E  F03F         	movff	_time+6,?_printf+6
  1094  0017A2  6A40               	clrf	?_printf+7,c
  1095  0017A4  EC46  F008         	call	_printf	;wreg free
  1096                           
  1097                           ;main.c: 152: lcdInst(0b11000000);
  1098  0017A8  0EC0               	movlw	192
  1099  0017AA  ECAC  F00E         	call	_lcdInst
  1100                           
  1101                           ;main.c: 153: printf("%02x:%02x:%02x        ", time[2],time[1],time[0]);
  1102  0017AE  0E42               	movlw	low STR_5
  1103  0017B0  6E39               	movwf	printf@f,c
  1104  0017B2  0E10               	movlw	high STR_5
  1105  0017B4  6E3A               	movwf	printf@f+1,c
  1106  0017B6  C04A  F03B         	movff	_time+2,?_printf+2
  1107  0017BA  6A3C               	clrf	?_printf+3,c
  1108  0017BC  C049  F03D         	movff	_time+1,?_printf+4
  1109  0017C0  6A3E               	clrf	?_printf+5,c
  1110  0017C2  C048  F03F         	movff	_time,?_printf+6
  1111  0017C6  6A40               	clrf	?_printf+7,c
  1112  0017C8  EC46  F008         	call	_printf	;wreg free
  1113                           
  1114                           ;main.c: 154: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  1115  0017CC  0E00               	movlw	0
  1116  0017CE  6E46               	movwf	date_time@i_255,c
  1117  0017D0                     l2313:
  1118  0017D0  0E63               	movlw	99
  1119  0017D2  6446               	cpfsgt	date_time@i_255,c
  1120  0017D4  D001               	goto	l2317
  1121  0017D6  0012               	return	
  1122  0017D8                     l2317:
  1123  0017D8  0E21               	movlw	33
  1124  0017DA  6E45               	movwf	??_date_time& (0+255),c
  1125  0017DC  0E76               	movlw	118
  1126  0017DE                     u1947:
  1127  0017DE  2EE8               	decfsz	wreg,f,c
  1128  0017E0  D7FE               	bra	u1947
  1129  0017E2  2E45               	decfsz	??_date_time& (0+255),f,c
  1130  0017E4  D7FC               	bra	u1947
  1131  0017E6  D000               	nop2	
  1132  0017E8  2A46               	incf	date_time@i_255,f,c
  1133  0017EA  D7F2               	goto	l2313
  1134  0017EC                     __end_of_date_time:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           prodh	equ	0xFF4
  1138                           prodl	equ	0xFF3
  1139                           intcon	equ	0xFF2
  1140                           intcon2	equ	0xFF1
  1141                           intcon3	equ	0xFF0
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           indf2	equ	0xFDF
  1145                           fsr2h	equ	0xFDA
  1146                           fsr2l	equ	0xFD9
  1147                           status	equ	0xFD8
  1148                           
  1149 ;; *************** function _printf *****************
  1150 ;; Defined at:
  1151 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  f               2   56[COMRAM] PTR const unsigned char 
  1154 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
  1155 ;;		 -> STR_1(14), 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  idx             1    0[BANK0 ] unsigned char 
  1158 ;;  tmpval          4    0        struct .
  1159 ;;  cp              3    0        PTR const unsigned char 
  1160 ;;  width           2    7[BANK0 ] int 
  1161 ;;  val             2    4[BANK0 ] unsigned int 
  1162 ;;  ap              2    1[BANK0 ] PTR void [1]
  1163 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1164 ;;  len             2    0        unsigned int 
  1165 ;;  c               1    9[BANK0 ] char 
  1166 ;;  flag            1    6[BANK0 ] unsigned char 
  1167 ;;  prec            1    3[BANK0 ] char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  2   56[COMRAM] int 
  1170 ;; Registers used:
  1171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1177 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;Total ram usage:       22 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    6
  1184 ;; This function calls:
  1185 ;;		___lwdiv
  1186 ;;		___lwmod
  1187 ;;		___wmul
  1188 ;;		_isdigit
  1189 ;;		_putch
  1190 ;; This function is called by:
  1191 ;;		_standby
  1192 ;;		_date_time
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text4
  1197  00108C                     __ptext4:
  1198                           	opt stack 0
  1199  00108C                     _printf:
  1200                           	opt stack 23
  1201                           
  1202                           ;doprnt.c: 466: va_list ap;
  1203                           ;doprnt.c: 499: signed char c;
  1204                           ;doprnt.c: 501: int width;
  1205                           ;doprnt.c: 506: signed char prec;
  1206                           ;doprnt.c: 508: unsigned char flag;
  1207                           ;doprnt.c: 523: union {
  1208                           ;doprnt.c: 524: unsigned long vd;
  1209                           ;doprnt.c: 525: double integ;
  1210                           ;doprnt.c: 526: } tmpval;
  1211                           ;doprnt.c: 528: unsigned int val;
  1212                           ;doprnt.c: 529: unsigned len;
  1213                           ;doprnt.c: 530: const char * cp;
  1214                           ;doprnt.c: 533: *ap = __va_start();
  1215                           
  1216                           ;incstack = 0
  1217  00108C  0E3B               	movlw	low (?_printf+2)
  1218  00108E  0100               	movlb	0	; () banked
  1219  001090  6F81               	movwf	printf@ap& (0+255),b
  1220  001092  0E00               	movlw	high (?_printf+2)
  1221  001094  0100               	movlb	0	; () banked
  1222  001096  6F82               	movwf	(printf@ap+1)& (0+255),b
  1223                           
  1224                           ;doprnt.c: 536: while(c = *f++) {
  1225  001098  D1AF               	goto	l2261
  1226  00109A                     l2135:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;doprnt.c: 538: if(c != '%')
  1230  00109A  0E25               	movlw	37
  1231  00109C  0100               	movlb	0	; () banked
  1232  00109E  1989               	xorwf	printf@c& (0+255),w,b
  1233  0010A0  B4D8               	btfsc	status,2,c
  1234  0010A2  D005               	goto	l2139
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;doprnt.c: 540: {
  1238                           ;doprnt.c: 541: (putch(c) );
  1239  0010A4  0100               	movlb	0	; () banked
  1240  0010A6  5189               	movf	printf@c& (0+255),w,b
  1241  0010A8  ECA6  F00E         	call	_putch
  1242                           
  1243                           ;doprnt.c: 542: continue;
  1244  0010AC  D1A5               	goto	l2261
  1245  0010AE                     l2139:
  1246                           
  1247                           ;doprnt.c: 543: }
  1248                           ;doprnt.c: 546: width = 0;
  1249  0010AE  0E00               	movlw	0
  1250  0010B0  0100               	movlb	0	; () banked
  1251  0010B2  6F88               	movwf	(printf@width+1)& (0+255),b
  1252  0010B4  0E00               	movlw	0
  1253  0010B6  6F87               	movwf	printf@width& (0+255),b
  1254                           
  1255                           ;doprnt.c: 548: flag = 0;
  1256  0010B8  0E00               	movlw	0
  1257  0010BA  0100               	movlb	0	; () banked
  1258  0010BC  6F86               	movwf	printf@flag& (0+255),b
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 551: switch(*f) {
  1262                           
  1263                           ;doprnt.c: 550: for(;;) {
  1264  0010BE  D004               	goto	l2145
  1265  0010C0                     l2141:
  1266                           
  1267                           ;doprnt.c: 580: flag |= 0x04;
  1268  0010C0  0100               	movlb	0	; () banked
  1269  0010C2  8586               	bsf	printf@flag& (0+255),2,b
  1270                           
  1271                           ;doprnt.c: 581: f++;
  1272  0010C4  4A39               	infsnz	printf@f,f,c
  1273  0010C6  2A3A               	incf	printf@f+1,f,c
  1274  0010C8                     l2145:
  1275  0010C8  C039  FFF6         	movff	printf@f,tblptrl
  1276  0010CC  C03A  FFF7         	movff	printf@f+1,tblptrh
  1277  0010D0                     	if	0	;tblptru may be non-zero
  1278  0010D0                     	endif
  1279  0010D0                     	if	0	;tblptru may be non-zero
  1280  0010D0                     	endif
  1281  0010D0  0008               	tblrd		*
  1282  0010D2  50F5               	movf	tablat,w,c
  1283                           
  1284                           ; Switch size 1, requested type "space"
  1285                           ; Number of cases is 1, Range of values is 48 to 48
  1286                           ; switch strategies available:
  1287                           ; Name         Instructions Cycles
  1288                           ; simple_byte            4     3 (average)
  1289                           ;	Chosen strategy is simple_byte
  1290  0010D4  0A30               	xorlw	48	; case 48
  1291  0010D6  B4D8               	btfsc	status,2,c
  1292  0010D8  D7F3               	goto	l2141
  1293                           
  1294                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1295                           
  1296                           ;doprnt.c: 586: }
  1297                           
  1298                           ;doprnt.c: 585: break;
  1299  0010DA  C039  FFF6         	movff	printf@f,tblptrl
  1300  0010DE  C03A  FFF7         	movff	printf@f+1,tblptrh
  1301  0010E2                     	if	0	;tblptru may be non-zero
  1302  0010E2                     	endif
  1303  0010E2                     	if	0	;tblptru may be non-zero
  1304  0010E2                     	endif
  1305  0010E2  0008               	tblrd		*
  1306  0010E4  50F5               	movf	tablat,w,c
  1307  0010E6  EC72  F00E         	call	_isdigit
  1308  0010EA  A0D8               	btfss	status,0,c
  1309  0010EC  D039               	goto	l2163
  1310                           
  1311                           ;doprnt.c: 598: width = 0;
  1312  0010EE  0E00               	movlw	0
  1313  0010F0  0100               	movlb	0	; () banked
  1314  0010F2  6F88               	movwf	(printf@width+1)& (0+255),b
  1315  0010F4  0E00               	movlw	0
  1316  0010F6  6F87               	movwf	printf@width& (0+255),b
  1317  0010F8                     l2151:
  1318                           
  1319                           ;doprnt.c: 600: width *= 10;
  1320  0010F8  C087  F02D         	movff	printf@width,___wmul@multiplier
  1321  0010FC  C088  F02E         	movff	printf@width+1,___wmul@multiplier+1
  1322  001100  0E00               	movlw	0
  1323  001102  6E30               	movwf	___wmul@multiplicand+1,c
  1324  001104  0E0A               	movlw	10
  1325  001106  6E2F               	movwf	___wmul@multiplicand,c
  1326  001108  EC39  F00E         	call	___wmul	;wreg free
  1327  00110C  C02D  F087         	movff	?___wmul,printf@width
  1328  001110  C02E  F088         	movff	?___wmul+1,printf@width+1
  1329                           
  1330                           ;doprnt.c: 601: width += *f++ - '0';
  1331  001114  0ED0               	movlw	208
  1332  001116  6E41               	movwf	??_printf& (0+255),c
  1333  001118  0EFF               	movlw	255
  1334  00111A  6E42               	movwf	(??_printf+1)& (0+255),c
  1335  00111C  C039  FFF6         	movff	printf@f,tblptrl
  1336  001120  C03A  FFF7         	movff	printf@f+1,tblptrh
  1337  001124                     	if	0	;tblptru may be non-zero
  1338  001124                     	endif
  1339  001124                     	if	0	;tblptru may be non-zero
  1340  001124                     	endif
  1341  001124  0008               	tblrd		*
  1342  001126  50F5               	movf	tablat,w,c
  1343  001128  6E43               	movwf	(??_printf+2)& (0+255),c
  1344  00112A  6A44               	clrf	(??_printf+3)& (0+255),c
  1345  00112C  5041               	movf	??_printf,w,c
  1346  00112E  2643               	addwf	??_printf+2,f,c
  1347  001130  5042               	movf	??_printf+1,w,c
  1348  001132  2244               	addwfc	??_printf+3,f,c
  1349  001134  5043               	movf	??_printf+2,w,c
  1350  001136  0100               	movlb	0	; () banked
  1351  001138  2787               	addwf	printf@width& (0+255),f,b
  1352  00113A  5044               	movf	??_printf+3,w,c
  1353  00113C  0100               	movlb	0	; () banked
  1354  00113E  2388               	addwfc	(printf@width+1)& (0+255),f,b
  1355                           
  1356                           ; BSR set to: 0
  1357  001140  4A39               	infsnz	printf@f,f,c
  1358  001142  2A3A               	incf	printf@f+1,f,c
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1362  001144  C039  FFF6         	movff	printf@f,tblptrl
  1363  001148  C03A  FFF7         	movff	printf@f+1,tblptrh
  1364  00114C                     	if	0	;tblptru may be non-zero
  1365  00114C                     	endif
  1366  00114C                     	if	0	;tblptru may be non-zero
  1367  00114C                     	endif
  1368  00114C  0008               	tblrd		*
  1369  00114E  50F5               	movf	tablat,w,c
  1370  001150  EC72  F00E         	call	_isdigit
  1371  001154  A0D8               	btfss	status,0,c
  1372  001156  D004               	goto	l2163
  1373  001158  D7CF               	goto	l2151
  1374  00115A                     l2159:
  1375                           
  1376                           ;doprnt.c: 721: flag |= 0x80;
  1377  00115A  0100               	movlb	0	; () banked
  1378  00115C  8F86               	bsf	printf@flag& (0+255),7,b
  1379                           
  1380                           ;doprnt.c: 723: break;
  1381  00115E  D018               	goto	l227
  1382  001160                     l2163:
  1383  001160  C039  FFF6         	movff	printf@f,tblptrl
  1384  001164  C03A  FFF7         	movff	printf@f+1,tblptrh
  1385  001168  4A39               	infsnz	printf@f,f,c
  1386  00116A  2A3A               	incf	printf@f+1,f,c
  1387  00116C                     	if	0	;tblptru may be non-zero
  1388  00116C                     	endif
  1389  00116C                     	if	0	;tblptru may be non-zero
  1390  00116C                     	endif
  1391  00116C  0008               	tblrd		*
  1392  00116E  CFF5 F089          	movff	tablat,printf@c
  1393  001172  0100               	movlb	0	; () banked
  1394  001174  5189               	movf	printf@c& (0+255),w,b
  1395                           
  1396                           ; Switch size 1, requested type "space"
  1397                           ; Number of cases is 4, Range of values is 0 to 120
  1398                           ; switch strategies available:
  1399                           ; Name         Instructions Cycles
  1400                           ; simple_byte           13     7 (average)
  1401                           ;	Chosen strategy is simple_byte
  1402  001176  0A00               	xorlw	0	; case 0
  1403  001178  B4D8               	btfsc	status,2,c
  1404  00117A  0012               	return	
  1405  00117C  0A64               	xorlw	100	; case 100
  1406  00117E  B4D8               	btfsc	status,2,c
  1407  001180  D007               	goto	l227
  1408  001182  0A0D               	xorlw	13	; case 105
  1409  001184  B4D8               	btfsc	status,2,c
  1410  001186  D004               	goto	l227
  1411  001188  0A11               	xorlw	17	; case 120
  1412  00118A  B4D8               	btfsc	status,2,c
  1413  00118C  D7E6               	goto	l2159
  1414  00118E  D134               	goto	l2261
  1415  001190                     l227:
  1416                           
  1417                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1418  001190  0100               	movlb	0	; () banked
  1419  001192  BF86               	btfsc	printf@flag& (0+255),7,b
  1420  001194  D019               	goto	l2175
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;doprnt.c: 1253: {
  1424                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1425  001196  C081  FFD9         	movff	printf@ap,fsr2l
  1426  00119A  C082  FFDA         	movff	printf@ap+1,fsr2h
  1427  00119E  CFDE F084          	movff	postinc2,printf@val
  1428  0011A2  CFDD F085          	movff	postdec2,printf@val+1
  1429                           
  1430                           ; BSR set to: 0
  1431  0011A6  0E02               	movlw	2
  1432  0011A8  0100               	movlb	0	; () banked
  1433  0011AA  2781               	addwf	printf@ap& (0+255),f,b
  1434  0011AC  0E00               	movlw	0
  1435  0011AE  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;doprnt.c: 1261: if((int)val < 0) {
  1439  0011B0  0100               	movlb	0	; () banked
  1440  0011B2  AF85               	btfss	(printf@val+1)& (0+255),7,b
  1441  0011B4  D053               	goto	l2209
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;doprnt.c: 1262: flag |= 0x03;
  1445  0011B6  0E03               	movlw	3
  1446  0011B8  0100               	movlb	0	; () banked
  1447  0011BA  1386               	iorwf	printf@flag& (0+255),f,b
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;doprnt.c: 1263: val = -val;
  1451  0011BC  0100               	movlb	0	; () banked
  1452  0011BE  6D84               	negf	printf@val& (0+255),b
  1453  0011C0  1F85               	comf	(printf@val+1)& (0+255),f,b
  1454  0011C2  B0D8               	btfsc	status,0,c
  1455  0011C4  2B85               	incf	(printf@val+1)& (0+255),f,b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;doprnt.c: 1264: }
  1459                           ;doprnt.c: 1266: }
  1460  0011C6  D04A               	goto	l2209
  1461  0011C8                     l2175:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;doprnt.c: 1268: else
  1465                           ;doprnt.c: 1273: {
  1466                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1467  0011C8  C081  FFD9         	movff	printf@ap,fsr2l
  1468  0011CC  C082  FFDA         	movff	printf@ap+1,fsr2h
  1469  0011D0  CFDE F084          	movff	postinc2,printf@val
  1470  0011D4  CFDD F085          	movff	postdec2,printf@val+1
  1471                           
  1472                           ; BSR set to: 0
  1473  0011D8  0E02               	movlw	2
  1474  0011DA  0100               	movlb	0	; () banked
  1475  0011DC  2781               	addwf	printf@ap& (0+255),f,b
  1476  0011DE  0E00               	movlw	0
  1477  0011E0  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 1287: }
  1481                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1482  0011E2  D03C               	goto	l2209
  1483  0011E4                     l2179:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1487  0011E4  0E01               	movlw	1
  1488  0011E6  0100               	movlb	0	; () banked
  1489  0011E8  6F89               	movwf	printf@c& (0+255),b
  1490  0011EA                     l2181:
  1491                           
  1492                           ; BSR set to: 0
  1493  0011EA  0E05               	movlw	5
  1494  0011EC  0100               	movlb	0	; () banked
  1495  0011EE  1989               	xorwf	printf@c& (0+255),w,b
  1496  0011F0  B4D8               	btfsc	status,2,c
  1497  0011F2  D03D               	goto	l2211
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;doprnt.c: 1306: if(val < dpowers[c])
  1501                           
  1502                           ; BSR set to: 0
  1503                           
  1504                           ; BSR set to: 0
  1505  0011F4  0100               	movlb	0	; () banked
  1506  0011F6  5189               	movf	printf@c& (0+255),w,b
  1507  0011F8  0D02               	mullw	2
  1508  0011FA  0E12               	movlw	low _dpowers
  1509  0011FC  24F3               	addwf	prodl,w,c
  1510  0011FE  6EF6               	movwf	tblptrl,c
  1511  001200  0E10               	movlw	high _dpowers
  1512  001202  20F4               	addwfc	prodh,w,c
  1513  001204  6EF7               	movwf	tblptrh,c
  1514  001206                     	if	0	;There are less than 3 active tblptr bytes
  1515  001206                     	endif
  1516  001206  0009               	tblrd		*+
  1517  001208  50F5               	movf	tablat,w,c
  1518  00120A  0100               	movlb	0	; () banked
  1519  00120C  5D84               	subwf	printf@val& (0+255),w,b
  1520  00120E  0009               	tblrd		*+
  1521  001210  50F5               	movf	tablat,w,c
  1522  001212  0100               	movlb	0	; () banked
  1523  001214  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1524  001216  A0D8               	btfss	status,0,c
  1525  001218  D02A               	goto	l2211
  1526                           
  1527                           ; BSR set to: 0
  1528                           
  1529                           ; BSR set to: 0
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;doprnt.c: 1307: break;
  1533  00121A  0100               	movlb	0	; () banked
  1534  00121C  2B89               	incf	printf@c& (0+255),f,b
  1535  00121E  D7E5               	goto	l2181
  1536  001220                     l2193:
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1540  001220  0E01               	movlw	1
  1541  001222  0100               	movlb	0	; () banked
  1542  001224  6F89               	movwf	printf@c& (0+255),b
  1543  001226                     l2195:
  1544                           
  1545                           ; BSR set to: 0
  1546  001226  0E04               	movlw	4
  1547  001228  0100               	movlb	0	; () banked
  1548  00122A  1989               	xorwf	printf@c& (0+255),w,b
  1549  00122C  B4D8               	btfsc	status,2,c
  1550  00122E  D01F               	goto	l2211
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1554                           
  1555                           ; BSR set to: 0
  1556                           
  1557                           ; BSR set to: 0
  1558  001230  0100               	movlb	0	; () banked
  1559  001232  5189               	movf	printf@c& (0+255),w,b
  1560  001234  0D02               	mullw	2
  1561  001236  0E1C               	movlw	low _hexpowers
  1562  001238  24F3               	addwf	prodl,w,c
  1563  00123A  6EF6               	movwf	tblptrl,c
  1564  00123C  0E10               	movlw	high _hexpowers
  1565  00123E  20F4               	addwfc	prodh,w,c
  1566  001240  6EF7               	movwf	tblptrh,c
  1567  001242                     	if	0	;There are less than 3 active tblptr bytes
  1568  001242                     	endif
  1569  001242  0009               	tblrd		*+
  1570  001244  50F5               	movf	tablat,w,c
  1571  001246  0100               	movlb	0	; () banked
  1572  001248  5D84               	subwf	printf@val& (0+255),w,b
  1573  00124A  0009               	tblrd		*+
  1574  00124C  50F5               	movf	tablat,w,c
  1575  00124E  0100               	movlb	0	; () banked
  1576  001250  5985               	subwfb	(printf@val+1)& (0+255),w,b
  1577  001252  A0D8               	btfss	status,0,c
  1578  001254  D00C               	goto	l2211
  1579                           
  1580                           ; BSR set to: 0
  1581                           
  1582                           ; BSR set to: 0
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;doprnt.c: 1318: break;
  1586  001256  0100               	movlb	0	; () banked
  1587  001258  2B89               	incf	printf@c& (0+255),f,b
  1588  00125A  D7E5               	goto	l2195
  1589  00125C                     l2209:
  1590                           
  1591                           ; BSR set to: 0
  1592  00125C  0100               	movlb	0	; () banked
  1593  00125E  5186               	movf	printf@flag& (0+255),w,b
  1594  001260  0B80               	andlw	128
  1595                           
  1596                           ; Switch size 1, requested type "space"
  1597                           ; Number of cases is 2, Range of values is 0 to 128
  1598                           ; switch strategies available:
  1599                           ; Name         Instructions Cycles
  1600                           ; simple_byte            7     4 (average)
  1601                           ;	Chosen strategy is simple_byte
  1602  001262  0A00               	xorlw	0	; case 0
  1603  001264  B4D8               	btfsc	status,2,c
  1604  001266  D7BE               	goto	l2179
  1605  001268  0A80               	xorlw	128	; case 128
  1606  00126A  B4D8               	btfsc	status,2,c
  1607  00126C  D7D9               	goto	l2193
  1608  00126E                     l2211:
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1612  00126E  0100               	movlb	0	; () banked
  1613  001270  5187               	movf	printf@width& (0+255),w,b
  1614  001272  0100               	movlb	0	; () banked
  1615  001274  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1616  001276  B4D8               	btfsc	status,2,c
  1617  001278  D00A               	goto	l2217
  1618                           
  1619                           ; BSR set to: 0
  1620  00127A  C086  F041         	movff	printf@flag,??_printf
  1621  00127E  0E03               	movlw	3
  1622  001280  1641               	andwf	??_printf,f,c
  1623  001282  B4D8               	btfsc	status,2,c
  1624  001284  D004               	goto	l2217
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;doprnt.c: 1346: width--;
  1628  001286  0100               	movlb	0	; () banked
  1629  001288  0787               	decf	printf@width& (0+255),f,b
  1630  00128A  A0D8               	btfss	status,0,c
  1631  00128C  0788               	decf	(printf@width+1)& (0+255),f,b
  1632  00128E                     l2217:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;doprnt.c: 1381: if(width > c)
  1636  00128E  0E80               	movlw	128
  1637  001290  0100               	movlb	0	; () banked
  1638  001292  BF89               	btfsc	printf@c& (0+255),7,b
  1639  001294  0E7F               	movlw	127
  1640  001296  6E41               	movwf	??_printf& (0+255),c
  1641  001298  0100               	movlb	0	; () banked
  1642  00129A  5187               	movf	printf@width& (0+255),w,b
  1643  00129C  0100               	movlb	0	; () banked
  1644  00129E  5D89               	subwf	printf@c& (0+255),w,b
  1645  0012A0  0100               	movlb	0	; () banked
  1646  0012A2  5188               	movf	(printf@width+1)& (0+255),w,b
  1647  0012A4  0A80               	xorlw	128
  1648  0012A6  5841               	subwfb	??_printf& (0+255),w,c
  1649  0012A8  B0D8               	btfsc	status,0,c
  1650  0012AA  D00B               	goto	l2221
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;doprnt.c: 1382: width -= c;
  1654  0012AC  0100               	movlb	0	; () banked
  1655  0012AE  5189               	movf	printf@c& (0+255),w,b
  1656  0012B0  0100               	movlb	0	; () banked
  1657  0012B2  5F87               	subwf	printf@width& (0+255),f,b
  1658  0012B4  0E00               	movlw	0
  1659  0012B6  0100               	movlb	0	; () banked
  1660  0012B8  BF89               	btfsc	printf@c& (0+255),7,b
  1661  0012BA  0EFF               	movlw	255
  1662  0012BC  0100               	movlb	0	; () banked
  1663  0012BE  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  1664  0012C0  D005               	goto	l2223
  1665  0012C2                     l2221:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;doprnt.c: 1383: else
  1669                           ;doprnt.c: 1384: width = 0;
  1670  0012C2  0E00               	movlw	0
  1671  0012C4  0100               	movlb	0	; () banked
  1672  0012C6  6F88               	movwf	(printf@width+1)& (0+255),b
  1673  0012C8  0E00               	movlw	0
  1674  0012CA  6F87               	movwf	printf@width& (0+255),b
  1675  0012CC                     l2223:
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;doprnt.c: 1387: if(flag & 0x04) {
  1679  0012CC  0100               	movlb	0	; () banked
  1680  0012CE  A586               	btfss	printf@flag& (0+255),2,b
  1681  0012D0  D017               	goto	l2235
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;doprnt.c: 1392: if(flag & 0x03)
  1685  0012D2  C086  F041         	movff	printf@flag,??_printf
  1686  0012D6  0E03               	movlw	3
  1687  0012D8  1641               	andwf	??_printf,f,c
  1688  0012DA  B4D8               	btfsc	status,2,c
  1689  0012DC  D003               	goto	l2229
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;doprnt.c: 1393: (putch('-') );
  1693  0012DE  0E2D               	movlw	45
  1694  0012E0  ECA6  F00E         	call	_putch
  1695  0012E4                     l2229:
  1696                           
  1697                           ;doprnt.c: 1415: if(width)
  1698  0012E4  0100               	movlb	0	; () banked
  1699  0012E6  5187               	movf	printf@width& (0+255),w,b
  1700  0012E8  0100               	movlb	0	; () banked
  1701  0012EA  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1702  0012EC  B4D8               	btfsc	status,2,c
  1703  0012EE  D024               	goto	l2245
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 1417: (putch('0') );
  1707                           
  1708                           ; BSR set to: 0
  1709                           
  1710                           ;doprnt.c: 1416: do
  1711  0012F0  0E30               	movlw	48
  1712  0012F2  ECA6  F00E         	call	_putch
  1713                           
  1714                           ;doprnt.c: 1418: while(--width);
  1715  0012F6  0100               	movlb	0	; () banked
  1716  0012F8  0787               	decf	printf@width& (0+255),f,b
  1717  0012FA  A0D8               	btfss	status,0,c
  1718  0012FC  0788               	decf	(printf@width+1)& (0+255),f,b
  1719  0012FE  D7F2               	goto	l2229
  1720  001300                     l2235:
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;doprnt.c: 1422: {
  1724                           ;doprnt.c: 1424: if(width
  1725                           ;doprnt.c: 1428: )
  1726  001300  0100               	movlb	0	; () banked
  1727  001302  5187               	movf	printf@width& (0+255),w,b
  1728  001304  0100               	movlb	0	; () banked
  1729  001306  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1730  001308  B4D8               	btfsc	status,2,c
  1731  00130A  D00D               	goto	l2241
  1732  00130C                     l2237:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;doprnt.c: 1430: (putch(' ') );
  1736  00130C  0E20               	movlw	32
  1737  00130E  ECA6  F00E         	call	_putch
  1738                           
  1739                           ;doprnt.c: 1431: while(--width);
  1740  001312  0100               	movlb	0	; () banked
  1741  001314  0787               	decf	printf@width& (0+255),f,b
  1742  001316  A0D8               	btfss	status,0,c
  1743  001318  0788               	decf	(printf@width+1)& (0+255),f,b
  1744  00131A  0100               	movlb	0	; () banked
  1745  00131C  5187               	movf	printf@width& (0+255),w,b
  1746  00131E  0100               	movlb	0	; () banked
  1747  001320  1188               	iorwf	(printf@width+1)& (0+255),w,b
  1748  001322  A4D8               	btfss	status,2,c
  1749  001324  D7F3               	goto	l2237
  1750  001326                     l2241:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;doprnt.c: 1438: if(flag & 0x03)
  1754  001326  C086  F041         	movff	printf@flag,??_printf
  1755  00132A  0E03               	movlw	3
  1756  00132C  1641               	andwf	??_printf,f,c
  1757  00132E  B4D8               	btfsc	status,2,c
  1758  001330  D003               	goto	l2245
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;doprnt.c: 1439: (putch('-') );
  1762  001332  0E2D               	movlw	45
  1763  001334  ECA6  F00E         	call	_putch
  1764  001338                     l2245:
  1765                           
  1766                           ;doprnt.c: 1469: }
  1767                           ;doprnt.c: 1472: prec = c;
  1768  001338  C089  F083         	movff	printf@c,printf@prec
  1769                           
  1770                           ;doprnt.c: 1474: while(prec--) {
  1771  00133C  D057               	goto	l2259
  1772  00133E                     l2247:
  1773                           
  1774                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1775  00133E  0100               	movlb	0	; () banked
  1776  001340  5183               	movf	printf@prec& (0+255),w,b
  1777  001342  0D02               	mullw	2
  1778  001344  0E12               	movlw	low _dpowers
  1779  001346  24F3               	addwf	prodl,w,c
  1780  001348  6EF6               	movwf	tblptrl,c
  1781  00134A  0E10               	movlw	high _dpowers
  1782  00134C  20F4               	addwfc	prodh,w,c
  1783  00134E  6EF7               	movwf	tblptrh,c
  1784  001350                     	if	0	;There are less than 3 active tblptr bytes
  1785  001350                     	endif
  1786  001350  0009               	tblrd		*+
  1787  001352  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1788  001356  000A               	tblrd		*-
  1789  001358  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1790  00135C  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1791  001360  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1792  001364  EC09  F00D         	call	___lwdiv	;wreg free
  1793  001368  C02D  F034         	movff	?___lwdiv,___lwmod@dividend
  1794  00136C  C02E  F035         	movff	?___lwdiv+1,___lwmod@dividend+1
  1795  001370  0E00               	movlw	0
  1796  001372  6E37               	movwf	___lwmod@divisor+1,c
  1797  001374  0E0A               	movlw	10
  1798  001376  6E36               	movwf	___lwmod@divisor,c
  1799  001378  ECF7  F00D         	call	___lwmod	;wreg free
  1800  00137C  5034               	movf	?___lwmod,w,c
  1801  00137E  0F30               	addlw	48
  1802  001380  0100               	movlb	0	; () banked
  1803  001382  6F89               	movwf	printf@c& (0+255),b
  1804                           
  1805                           ;doprnt.c: 1491: break;
  1806  001384  D02F               	goto	l2257
  1807  001386                     l2249:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;doprnt.c: 1499: {
  1811                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1812  001386  C084  F02D         	movff	printf@val,___lwdiv@dividend
  1813  00138A  C085  F02E         	movff	printf@val+1,___lwdiv@dividend+1
  1814  00138E  0100               	movlb	0	; () banked
  1815  001390  5183               	movf	printf@prec& (0+255),w,b
  1816  001392  0D02               	mullw	2
  1817  001394  0E1C               	movlw	low _hexpowers
  1818  001396  24F3               	addwf	prodl,w,c
  1819  001398  6EF6               	movwf	tblptrl,c
  1820  00139A  0E10               	movlw	high _hexpowers
  1821  00139C  20F4               	addwfc	prodh,w,c
  1822  00139E  6EF7               	movwf	tblptrh,c
  1823  0013A0                     	if	0	;There are less than 3 active tblptr bytes
  1824  0013A0                     	endif
  1825  0013A0  0009               	tblrd		*+
  1826  0013A2  CFF5 F02F          	movff	tablat,___lwdiv@divisor
  1827  0013A6  000A               	tblrd		*-
  1828  0013A8  CFF5 F030          	movff	tablat,___lwdiv@divisor+1
  1829  0013AC  EC09  F00D         	call	___lwdiv	;wreg free
  1830  0013B0  502D               	movf	?___lwdiv,w,c
  1831  0013B2  0B0F               	andlw	15
  1832  0013B4  0100               	movlb	0	; () banked
  1833  0013B6  6F80               	movwf	printf@idx& (0+255),b
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1837  0013B8  0100               	movlb	0	; () banked
  1838  0013BA  5180               	movf	printf@idx& (0+255),w,b
  1839  0013BC  0D01               	mullw	1
  1840  0013BE  0E59               	movlw	low STR_6
  1841  0013C0  24F3               	addwf	prodl,w,c
  1842  0013C2  6EF6               	movwf	tblptrl,c
  1843  0013C4  0E10               	movlw	high STR_6
  1844  0013C6  20F4               	addwfc	prodh,w,c
  1845  0013C8  6EF7               	movwf	tblptrh,c
  1846  0013CA                     	if	0	;There are less than 3 active tblptr bytes
  1847  0013CA                     	endif
  1848  0013CA  0008               	tblrd		*
  1849  0013CC  CFF5 F089          	movff	tablat,printf@c
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;doprnt.c: 1523: }
  1853                           
  1854                           ;doprnt.c: 1508: }
  1855                           ;doprnt.c: 1510: break;
  1856  0013D0  D009               	goto	l2257
  1857  0013D2                     l2255:
  1858  0013D2  0100               	movlb	0	; () banked
  1859  0013D4  5186               	movf	printf@flag& (0+255),w,b
  1860  0013D6  0B80               	andlw	128
  1861                           
  1862                           ; Switch size 1, requested type "space"
  1863                           ; Number of cases is 2, Range of values is 0 to 128
  1864                           ; switch strategies available:
  1865                           ; Name         Instructions Cycles
  1866                           ; simple_byte            7     4 (average)
  1867                           ;	Chosen strategy is simple_byte
  1868  0013D8  0A00               	xorlw	0	; case 0
  1869  0013DA  B4D8               	btfsc	status,2,c
  1870  0013DC  D7B0               	goto	l2247
  1871  0013DE  0A80               	xorlw	128	; case 128
  1872  0013E0  B4D8               	btfsc	status,2,c
  1873  0013E2  D7D1               	goto	l2249
  1874  0013E4                     l2257:
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;doprnt.c: 1524: (putch(c) );
  1878  0013E4  0100               	movlb	0	; () banked
  1879  0013E6  5189               	movf	printf@c& (0+255),w,b
  1880  0013E8  ECA6  F00E         	call	_putch
  1881  0013EC                     l2259:
  1882  0013EC  0100               	movlb	0	; () banked
  1883  0013EE  0783               	decf	printf@prec& (0+255),f,b
  1884  0013F0  0100               	movlb	0	; () banked
  1885  0013F2  2983               	incf	printf@prec& (0+255),w,b
  1886  0013F4  A4D8               	btfss	status,2,c
  1887  0013F6  D7ED               	goto	l2255
  1888  0013F8                     l2261:
  1889  0013F8  C039  FFF6         	movff	printf@f,tblptrl
  1890  0013FC  C03A  FFF7         	movff	printf@f+1,tblptrh
  1891  001400  4A39               	infsnz	printf@f,f,c
  1892  001402  2A3A               	incf	printf@f+1,f,c
  1893  001404                     	if	0	;tblptru may be non-zero
  1894  001404                     	endif
  1895  001404                     	if	0	;tblptru may be non-zero
  1896  001404                     	endif
  1897  001404  0008               	tblrd		*
  1898  001406  CFF5 F089          	movff	tablat,printf@c
  1899  00140A  0100               	movlb	0	; () banked
  1900  00140C  5189               	movf	printf@c& (0+255),w,b
  1901  00140E  B4D8               	btfsc	status,2,c
  1902  001410  0012               	return	
  1903  001412  D643               	goto	l2135
  1904  001414                     __end_of_printf:
  1905                           	opt stack 0
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           prodh	equ	0xFF4
  1911                           prodl	equ	0xFF3
  1912                           intcon	equ	0xFF2
  1913                           intcon2	equ	0xFF1
  1914                           intcon3	equ	0xFF0
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           indf2	equ	0xFDF
  1918                           postinc2	equ	0xFDE
  1919                           postdec2	equ	0xFDD
  1920                           fsr2h	equ	0xFDA
  1921                           fsr2l	equ	0xFD9
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function _putch *****************
  1925 ;; Defined at:
  1926 ;;		line 31 in file "lcd.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  data            1    wreg     unsigned char 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  data            1   46[COMRAM] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;Total ram usage:        1 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    5
  1947 ;; This function calls:
  1948 ;;		_lcdNibble
  1949 ;; This function is called by:
  1950 ;;		_printf
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text5
  1955  001D4C                     __ptext5:
  1956                           	opt stack 0
  1957  001D4C                     _putch:
  1958                           	opt stack 23
  1959                           
  1960                           ;incstack = 0
  1961                           ;putch@data stored from wreg
  1962  001D4C  6E2F               	movwf	putch@data,c
  1963                           
  1964                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1965  001D4E  848C               	bsf	3980,2,c	;volatile
  1966                           
  1967                           ;lcd.c: 33: lcdNibble(data);
  1968  001D50  502F               	movf	putch@data,w,c
  1969  001D52  EC83  F00D         	call	_lcdNibble
  1970  001D56  0012               	return		;funcret
  1971  001D58                     __end_of_putch:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           prodh	equ	0xFF4
  1978                           prodl	equ	0xFF3
  1979                           intcon	equ	0xFF2
  1980                           intcon2	equ	0xFF1
  1981                           intcon3	equ	0xFF0
  1982                           postinc0	equ	0xFEE
  1983                           wreg	equ	0xFE8
  1984                           indf2	equ	0xFDF
  1985                           postinc2	equ	0xFDE
  1986                           postdec2	equ	0xFDD
  1987                           fsr2h	equ	0xFDA
  1988                           fsr2l	equ	0xFD9
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _isdigit *****************
  1992 ;; Defined at:
  1993 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  c               1    wreg     unsigned char 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  c               1   46[COMRAM] unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;		None               void
  2000 ;; Registers used:
  2001 ;;		wreg, status,2, status,0
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;Total ram usage:        3 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    4
  2014 ;; This function calls:
  2015 ;;		Nothing
  2016 ;; This function is called by:
  2017 ;;		_printf
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text6
  2022  001CE4                     __ptext6:
  2023                           	opt stack 0
  2024  001CE4                     _isdigit:
  2025                           	opt stack 24
  2026                           
  2027                           ;incstack = 0
  2028                           ;isdigit@c stored from wreg
  2029  001CE4  6E2F               	movwf	isdigit@c,c
  2030  001CE6  0E00               	movlw	0
  2031  001CE8  6E2E               	movwf	_isdigit$507,c
  2032  001CEA  0E3A               	movlw	58
  2033  001CEC  602F               	cpfslt	isdigit@c,c
  2034  001CEE  D005               	goto	l2081
  2035  001CF0  0E2F               	movlw	47
  2036  001CF2  642F               	cpfsgt	isdigit@c,c
  2037  001CF4  D002               	goto	l2081
  2038  001CF6  0E01               	movlw	1
  2039  001CF8  6E2E               	movwf	_isdigit$507,c
  2040  001CFA                     l2081:
  2041  001CFA  C02E  F02D         	movff	_isdigit$507,??_isdigit
  2042  001CFE  302D               	rrcf	??_isdigit,w,c
  2043  001D00  0012               	return	
  2044  001D02                     __end_of_isdigit:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           intcon2	equ	0xFF1
  2054                           intcon3	equ	0xFF0
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function ___wmul *****************
  2065 ;; Defined at:
  2066 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  multiplier      2   44[COMRAM] unsigned int 
  2069 ;;  multiplicand    2   46[COMRAM] unsigned int 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  product         2   48[COMRAM] unsigned int 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  2   44[COMRAM] unsigned int 
  2074 ;; Registers used:
  2075 ;;		wreg, status,2, status,0, prodl, prodh
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2081 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;Total ram usage:        6 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    4
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_printf
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text7
  2096  001C72                     __ptext7:
  2097                           	opt stack 0
  2098  001C72                     ___wmul:
  2099                           	opt stack 24
  2100                           
  2101                           ;incstack = 0
  2102  001C72  502D               	movf	___wmul@multiplier,w,c
  2103  001C74  022F               	mulwf	___wmul@multiplicand,c
  2104  001C76  CFF3 F031          	movff	prodl,___wmul@product
  2105  001C7A  CFF4 F032          	movff	prodh,___wmul@product+1
  2106  001C7E  502D               	movf	___wmul@multiplier,w,c
  2107  001C80  0230               	mulwf	___wmul@multiplicand+1,c
  2108  001C82  50F3               	movf	prodl,w,c
  2109  001C84  2632               	addwf	___wmul@product+1,f,c
  2110  001C86  502E               	movf	___wmul@multiplier+1,w,c
  2111  001C88  022F               	mulwf	___wmul@multiplicand,c
  2112  001C8A  50F3               	movf	prodl,w,c
  2113  001C8C  2632               	addwf	___wmul@product+1,f,c
  2114  001C8E  C031  F02D         	movff	___wmul@product,?___wmul
  2115  001C92  C032  F02E         	movff	___wmul@product+1,?___wmul+1
  2116  001C96  0012               	return	
  2117  001C98                     __end_of___wmul:
  2118                           	opt stack 0
  2119                           tblptru	equ	0xFF8
  2120                           tblptrh	equ	0xFF7
  2121                           tblptrl	equ	0xFF6
  2122                           tablat	equ	0xFF5
  2123                           prodh	equ	0xFF4
  2124                           prodl	equ	0xFF3
  2125                           intcon	equ	0xFF2
  2126                           intcon2	equ	0xFF1
  2127                           intcon3	equ	0xFF0
  2128                           postinc0	equ	0xFEE
  2129                           wreg	equ	0xFE8
  2130                           indf2	equ	0xFDF
  2131                           postinc2	equ	0xFDE
  2132                           postdec2	equ	0xFDD
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function ___lwmod *****************
  2138 ;; Defined at:
  2139 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  dividend        2   51[COMRAM] unsigned int 
  2142 ;;  divisor         2   53[COMRAM] unsigned int 
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;  counter         1   55[COMRAM] unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  2   51[COMRAM] unsigned int 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;Total ram usage:        5 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    4
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_printf
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text8
  2169  001BEE                     __ptext8:
  2170                           	opt stack 0
  2171  001BEE                     ___lwmod:
  2172                           	opt stack 24
  2173                           
  2174                           ;incstack = 0
  2175  001BEE  5036               	movf	___lwmod@divisor,w,c
  2176  001BF0  1037               	iorwf	___lwmod@divisor+1,w,c
  2177  001BF2  B4D8               	btfsc	status,2,c
  2178  001BF4  D018               	goto	l682
  2179  001BF6  0E01               	movlw	1
  2180  001BF8  6E38               	movwf	___lwmod@counter,c
  2181  001BFA  D004               	goto	l2119
  2182  001BFC                     l2117:
  2183  001BFC  90D8               	bcf	status,0,c
  2184  001BFE  3636               	rlcf	___lwmod@divisor,f,c
  2185  001C00  3637               	rlcf	___lwmod@divisor+1,f,c
  2186  001C02  2A38               	incf	___lwmod@counter,f,c
  2187  001C04                     l2119:
  2188  001C04  AE37               	btfss	___lwmod@divisor+1,7,c
  2189  001C06  D7FA               	goto	l2117
  2190  001C08                     l2121:
  2191  001C08  5036               	movf	___lwmod@divisor,w,c
  2192  001C0A  5C34               	subwf	___lwmod@dividend,w,c
  2193  001C0C  5037               	movf	___lwmod@divisor+1,w,c
  2194  001C0E  5835               	subwfb	___lwmod@dividend+1,w,c
  2195  001C10  A0D8               	btfss	status,0,c
  2196  001C12  D004               	goto	l2125
  2197  001C14  5036               	movf	___lwmod@divisor,w,c
  2198  001C16  5E34               	subwf	___lwmod@dividend,f,c
  2199  001C18  5037               	movf	___lwmod@divisor+1,w,c
  2200  001C1A  5A35               	subwfb	___lwmod@dividend+1,f,c
  2201  001C1C                     l2125:
  2202  001C1C  90D8               	bcf	status,0,c
  2203  001C1E  3237               	rrcf	___lwmod@divisor+1,f,c
  2204  001C20  3236               	rrcf	___lwmod@divisor,f,c
  2205  001C22  2E38               	decfsz	___lwmod@counter,f,c
  2206  001C24  D7F1               	goto	l2121
  2207  001C26                     l682:
  2208  001C26  C034  F034         	movff	___lwmod@dividend,?___lwmod
  2209  001C2A  C035  F035         	movff	___lwmod@dividend+1,?___lwmod+1
  2210  001C2E  0012               	return		;funcret
  2211  001C30                     __end_of___lwmod:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           prodh	equ	0xFF4
  2218                           prodl	equ	0xFF3
  2219                           intcon	equ	0xFF2
  2220                           intcon2	equ	0xFF1
  2221                           intcon3	equ	0xFF0
  2222                           postinc0	equ	0xFEE
  2223                           wreg	equ	0xFE8
  2224                           indf2	equ	0xFDF
  2225                           postinc2	equ	0xFDE
  2226                           postdec2	equ	0xFDD
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function ___lwdiv *****************
  2232 ;; Defined at:
  2233 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  dividend        2   44[COMRAM] unsigned int 
  2236 ;;  divisor         2   46[COMRAM] unsigned int 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  quotient        2   49[COMRAM] unsigned int 
  2239 ;;  counter         1   48[COMRAM] unsigned char 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   44[COMRAM] unsigned int 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:        7 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    4
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_printf
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text9
  2264  001A12                     __ptext9:
  2265                           	opt stack 0
  2266  001A12                     ___lwdiv:
  2267                           	opt stack 24
  2268                           
  2269                           ;incstack = 0
  2270  001A12  0E00               	movlw	0
  2271  001A14  6E33               	movwf	___lwdiv@quotient+1,c
  2272  001A16  0E00               	movlw	0
  2273  001A18  6E32               	movwf	___lwdiv@quotient,c
  2274  001A1A  502F               	movf	___lwdiv@divisor,w,c
  2275  001A1C  1030               	iorwf	___lwdiv@divisor+1,w,c
  2276  001A1E  B4D8               	btfsc	status,2,c
  2277  001A20  D01C               	goto	l672
  2278  001A22  0E01               	movlw	1
  2279  001A24  6E31               	movwf	___lwdiv@counter,c
  2280  001A26  D004               	goto	l2099
  2281  001A28                     l2097:
  2282  001A28  90D8               	bcf	status,0,c
  2283  001A2A  362F               	rlcf	___lwdiv@divisor,f,c
  2284  001A2C  3630               	rlcf	___lwdiv@divisor+1,f,c
  2285  001A2E  2A31               	incf	___lwdiv@counter,f,c
  2286  001A30                     l2099:
  2287  001A30  AE30               	btfss	___lwdiv@divisor+1,7,c
  2288  001A32  D7FA               	goto	l2097
  2289  001A34                     l2101:
  2290  001A34  90D8               	bcf	status,0,c
  2291  001A36  3632               	rlcf	___lwdiv@quotient,f,c
  2292  001A38  3633               	rlcf	___lwdiv@quotient+1,f,c
  2293  001A3A  502F               	movf	___lwdiv@divisor,w,c
  2294  001A3C  5C2D               	subwf	___lwdiv@dividend,w,c
  2295  001A3E  5030               	movf	___lwdiv@divisor+1,w,c
  2296  001A40  582E               	subwfb	___lwdiv@dividend+1,w,c
  2297  001A42  A0D8               	btfss	status,0,c
  2298  001A44  D005               	goto	l2109
  2299  001A46  502F               	movf	___lwdiv@divisor,w,c
  2300  001A48  5E2D               	subwf	___lwdiv@dividend,f,c
  2301  001A4A  5030               	movf	___lwdiv@divisor+1,w,c
  2302  001A4C  5A2E               	subwfb	___lwdiv@dividend+1,f,c
  2303  001A4E  8032               	bsf	___lwdiv@quotient,0,c
  2304  001A50                     l2109:
  2305  001A50  90D8               	bcf	status,0,c
  2306  001A52  3230               	rrcf	___lwdiv@divisor+1,f,c
  2307  001A54  322F               	rrcf	___lwdiv@divisor,f,c
  2308  001A56  2E31               	decfsz	___lwdiv@counter,f,c
  2309  001A58  D7ED               	goto	l2101
  2310  001A5A                     l672:
  2311  001A5A  C032  F02D         	movff	___lwdiv@quotient,?___lwdiv
  2312  001A5E  C033  F02E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2313  001A62  0012               	return		;funcret
  2314  001A64                     __end_of___lwdiv:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           intcon	equ	0xFF2
  2323                           intcon2	equ	0xFF1
  2324                           intcon3	equ	0xFF0
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           indf2	equ	0xFDF
  2328                           postinc2	equ	0xFDE
  2329                           postdec2	equ	0xFDD
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function _lcdInst *****************
  2335 ;; Defined at:
  2336 ;;		line 26 in file "lcd.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  data            1    wreg     unsigned char 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  data            1   46[COMRAM] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, status,2, status,0, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;Total ram usage:        1 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    5
  2357 ;; This function calls:
  2358 ;;		_lcdNibble
  2359 ;; This function is called by:
  2360 ;;		_initLCD
  2361 ;;		_standby
  2362 ;;		_date_time
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text10
  2367  001D58                     __ptext10:
  2368                           	opt stack 0
  2369  001D58                     _lcdInst:
  2370                           	opt stack 24
  2371                           
  2372                           ;incstack = 0
  2373                           ;lcdInst@data stored from wreg
  2374  001D58  6E2F               	movwf	lcdInst@data,c
  2375                           
  2376                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2377  001D5A  948C               	bcf	3980,2,c	;volatile
  2378                           
  2379                           ;lcd.c: 28: lcdNibble(data);
  2380  001D5C  502F               	movf	lcdInst@data,w,c
  2381  001D5E  EC83  F00D         	call	_lcdNibble
  2382  001D62  0012               	return		;funcret
  2383  001D64                     __end_of_lcdInst:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           prodh	equ	0xFF4
  2390                           prodl	equ	0xFF3
  2391                           intcon	equ	0xFF2
  2392                           intcon2	equ	0xFF1
  2393                           intcon3	equ	0xFF0
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _lcdNibble *****************
  2404 ;; Defined at:
  2405 ;;		line 36 in file "lcd.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  data            1    wreg     unsigned char 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  data            1   45[COMRAM] unsigned char 
  2410 ;;  temp            1   44[COMRAM] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;Total ram usage:        2 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    4
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_lcdInst
  2431 ;;		_putch
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text11
  2436  001B06                     __ptext11:
  2437                           	opt stack 0
  2438  001B06                     _lcdNibble:
  2439                           	opt stack 23
  2440                           
  2441                           ;incstack = 0
  2442                           ;lcdNibble@data stored from wreg
  2443  001B06  6E2E               	movwf	lcdNibble@data,c
  2444                           
  2445                           ;lcd.c: 38: char temp = data & 0xF0;
  2446  001B08  502E               	movf	lcdNibble@data,w,c
  2447  001B0A  0BF0               	andlw	240
  2448  001B0C  6E2D               	movwf	lcdNibble@temp,c
  2449                           
  2450                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2451  001B0E  508C               	movf	3980,w,c	;volatile
  2452  001B10  0B0F               	andlw	15
  2453  001B12  6E8C               	movwf	3980,c	;volatile
  2454                           
  2455                           ;lcd.c: 40: LATD = temp | LATD;
  2456  001B14  502D               	movf	lcdNibble@temp,w,c
  2457  001B16  108C               	iorwf	3980,w,c	;volatile
  2458  001B18  6E8C               	movwf	3980,c	;volatile
  2459                           
  2460                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2461  001B1A  968C               	bcf	3980,3,c	;volatile
  2462                           
  2463                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2464  001B1C  0E19               	movlw	25
  2465  001B1E                     u1957:
  2466  001B1E  2EE8               	decfsz	wreg,f,c
  2467  001B20  D7FE               	bra	u1957
  2468                           
  2469                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2470  001B22  868C               	bsf	3980,3,c	;volatile
  2471                           
  2472                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2473  001B24  0E19               	movlw	25
  2474  001B26                     u1967:
  2475  001B26  2EE8               	decfsz	wreg,f,c
  2476  001B28  D7FE               	bra	u1967
  2477                           
  2478                           ;lcd.c: 47: data = data << 4;
  2479  001B2A  382E               	swapf	lcdNibble@data,w,c
  2480  001B2C  0BF0               	andlw	240
  2481  001B2E  6E2E               	movwf	lcdNibble@data,c
  2482                           
  2483                           ;lcd.c: 49: temp = data & 0xF0;
  2484  001B30  502E               	movf	lcdNibble@data,w,c
  2485  001B32  0BF0               	andlw	240
  2486  001B34  6E2D               	movwf	lcdNibble@temp,c
  2487                           
  2488                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2489  001B36  508C               	movf	3980,w,c	;volatile
  2490  001B38  0B0F               	andlw	15
  2491  001B3A  6E8C               	movwf	3980,c	;volatile
  2492                           
  2493                           ;lcd.c: 51: LATD = temp | LATD;
  2494  001B3C  502D               	movf	lcdNibble@temp,w,c
  2495  001B3E  108C               	iorwf	3980,w,c	;volatile
  2496  001B40  6E8C               	movwf	3980,c	;volatile
  2497                           
  2498                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2499  001B42  968C               	bcf	3980,3,c	;volatile
  2500                           
  2501                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2502  001B44  0E19               	movlw	25
  2503  001B46                     u1977:
  2504  001B46  2EE8               	decfsz	wreg,f,c
  2505  001B48  D7FE               	bra	u1977
  2506                           
  2507                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2508  001B4A  868C               	bsf	3980,3,c	;volatile
  2509                           
  2510                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  2511  001B4C  0E19               	movlw	25
  2512  001B4E                     u1987:
  2513  001B4E  2EE8               	decfsz	wreg,f,c
  2514  001B50  D7FE               	bra	u1987
  2515  001B52  0012               	return		;funcret
  2516  001B54                     __end_of_lcdNibble:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           intcon2	equ	0xFF1
  2526                           intcon3	equ	0xFF0
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           fsr2h	equ	0xFDA
  2533                           fsr2l	equ	0xFD9
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _I2C_Master_Write *****************
  2537 ;; Defined at:
  2538 ;;		line 47 in file "I2C.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  d               2   45[COMRAM] unsigned int 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;Total ram usage:        2 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    5
  2559 ;; This function calls:
  2560 ;;		_I2C_Master_Wait
  2561 ;; This function is called by:
  2562 ;;		_date_time
  2563 ;;		_set_time
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text12
  2568  001D7C                     __ptext12:
  2569                           	opt stack 0
  2570  001D7C                     _I2C_Master_Write:
  2571                           	opt stack 24
  2572                           
  2573                           ;I2C.c: 49: I2C_Master_Wait();
  2574                           
  2575                           ;incstack = 0
  2576  001D7C  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2577                           
  2578                           ;I2C.c: 50: SSPBUF = d;
  2579  001D80  C02E  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2580  001D84  0012               	return		;funcret
  2581  001D86                     __end_of_I2C_Master_Write:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           prodh	equ	0xFF4
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           intcon2	equ	0xFF1
  2591                           intcon3	equ	0xFF0
  2592                           postinc0	equ	0xFEE
  2593                           wreg	equ	0xFE8
  2594                           indf2	equ	0xFDF
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _I2C_Master_Stop *****************
  2602 ;; Defined at:
  2603 ;;		line 41 in file "I2C.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;Total ram usage:        0 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    5
  2624 ;; This function calls:
  2625 ;;		_I2C_Master_Wait
  2626 ;; This function is called by:
  2627 ;;		_date_time
  2628 ;;		_set_time
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text13
  2633  001D86                     __ptext13:
  2634                           	opt stack 0
  2635  001D86                     _I2C_Master_Stop:
  2636                           	opt stack 24
  2637                           
  2638                           ;I2C.c: 43: I2C_Master_Wait();
  2639                           
  2640                           ;incstack = 0
  2641  001D86  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2642                           
  2643                           ;I2C.c: 44: PEN = 1;
  2644  001D8A  84C5               	bsf	4037,2,c	;volatile
  2645  001D8C  0012               	return		;funcret
  2646  001D8E                     __end_of_I2C_Master_Stop:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           prodh	equ	0xFF4
  2653                           prodl	equ	0xFF3
  2654                           intcon	equ	0xFF2
  2655                           intcon2	equ	0xFF1
  2656                           intcon3	equ	0xFF0
  2657                           postinc0	equ	0xFEE
  2658                           wreg	equ	0xFE8
  2659                           indf2	equ	0xFDF
  2660                           postinc2	equ	0xFDE
  2661                           postdec2	equ	0xFDD
  2662                           fsr2h	equ	0xFDA
  2663                           fsr2l	equ	0xFD9
  2664                           status	equ	0xFD8
  2665                           
  2666 ;; *************** function _I2C_Master_Start *****************
  2667 ;; Defined at:
  2668 ;;		line 29 in file "I2C.c"
  2669 ;; Parameters:    Size  Location     Type
  2670 ;;		None
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      void 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;Total ram usage:        0 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    5
  2689 ;; This function calls:
  2690 ;;		_I2C_Master_Wait
  2691 ;; This function is called by:
  2692 ;;		_date_time
  2693 ;;		_set_time
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text14
  2698  001D8E                     __ptext14:
  2699                           	opt stack 0
  2700  001D8E                     _I2C_Master_Start:
  2701                           	opt stack 24
  2702                           
  2703                           ;I2C.c: 31: I2C_Master_Wait();
  2704                           
  2705                           ;incstack = 0
  2706  001D8E  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2707                           
  2708                           ;I2C.c: 32: SEN = 1;
  2709  001D92  80C5               	bsf	4037,0,c	;volatile
  2710  001D94  0012               	return		;funcret
  2711  001D96                     __end_of_I2C_Master_Start:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           intcon	equ	0xFF2
  2720                           intcon2	equ	0xFF1
  2721                           intcon3	equ	0xFF0
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           indf2	equ	0xFDF
  2725                           postinc2	equ	0xFDE
  2726                           postdec2	equ	0xFDD
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _I2C_Master_Read *****************
  2732 ;; Defined at:
  2733 ;;		line 53 in file "I2C.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  a               1    wreg     unsigned char 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  a               1   45[COMRAM] unsigned char 
  2738 ;;  temp            1   46[COMRAM] unsigned char 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      unsigned char 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;Total ram usage:        2 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    5
  2755 ;; This function calls:
  2756 ;;		_I2C_Master_Wait
  2757 ;; This function is called by:
  2758 ;;		_date_time
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text15
  2763  001C98                     __ptext15:
  2764                           	opt stack 0
  2765  001C98                     _I2C_Master_Read:
  2766                           	opt stack 24
  2767                           
  2768                           ;incstack = 0
  2769                           ;I2C_Master_Read@a stored from wreg
  2770  001C98  6E2E               	movwf	I2C_Master_Read@a,c
  2771                           
  2772                           ;I2C.c: 55: unsigned char temp;
  2773                           ;I2C.c: 56: I2C_Master_Wait();
  2774  001C9A  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2775                           
  2776                           ;I2C.c: 57: RCEN = 1;
  2777  001C9E  86C5               	bsf	4037,3,c	;volatile
  2778                           
  2779                           ;I2C.c: 58: I2C_Master_Wait();
  2780  001CA0  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2781                           
  2782                           ;I2C.c: 59: temp = SSPBUF;
  2783  001CA4  CFC9 F02F          	movff	4041,I2C_Master_Read@temp	;volatile
  2784                           
  2785                           ;I2C.c: 60: I2C_Master_Wait();
  2786  001CA8  EC9D  F00E         	call	_I2C_Master_Wait	;wreg free
  2787                           
  2788                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2789  001CAC  502E               	movf	I2C_Master_Read@a,w,c
  2790  001CAE  A4D8               	btfss	status,2,c
  2791  001CB0  D002               	goto	u110
  2792  001CB2  8AC5               	bsf	4037,5,c	;volatile
  2793  001CB4  D001               	goto	l1003
  2794  001CB6                     u110:
  2795  001CB6  9AC5               	bcf	4037,5,c	;volatile
  2796  001CB8                     l1003:
  2797                           
  2798                           ;I2C.c: 62: ACKEN = 1;
  2799  001CB8  88C5               	bsf	4037,4,c	;volatile
  2800                           
  2801                           ;I2C.c: 63: return temp;
  2802  001CBA  502F               	movf	I2C_Master_Read@temp,w,c
  2803  001CBC  0012               	return	
  2804  001CBE                     __end_of_I2C_Master_Read:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           tblptrl	equ	0xFF6
  2809                           tablat	equ	0xFF5
  2810                           prodh	equ	0xFF4
  2811                           prodl	equ	0xFF3
  2812                           intcon	equ	0xFF2
  2813                           intcon2	equ	0xFF1
  2814                           intcon3	equ	0xFF0
  2815                           postinc0	equ	0xFEE
  2816                           wreg	equ	0xFE8
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           fsr2h	equ	0xFDA
  2821                           fsr2l	equ	0xFD9
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _I2C_Master_Wait *****************
  2825 ;; Defined at:
  2826 ;;		line 24 in file "I2C.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        1 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    4
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_I2C_Master_Start
  2851 ;;		_I2C_Master_Stop
  2852 ;;		_I2C_Master_Write
  2853 ;;		_I2C_Master_Read
  2854 ;;		_I2C_Master_RepeatedStart
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text16
  2859  001D3A                     __ptext16:
  2860                           	opt stack 0
  2861  001D3A                     _I2C_Master_Wait:
  2862                           	opt stack 24
  2863  001D3A                     l34:
  2864  001D3A  B4C7               	btfsc	4039,2,c	;volatile
  2865  001D3C  D7FE               	goto	l34
  2866  001D3E  CFC5 F02D          	movff	4037,??_I2C_Master_Wait	;volatile
  2867  001D42  0E1F               	movlw	31
  2868  001D44  162D               	andwf	??_I2C_Master_Wait,f,c
  2869  001D46  B4D8               	btfsc	status,2,c
  2870  001D48  0012               	return	
  2871  001D4A  D7F7               	goto	l34
  2872  001D4C                     __end_of_I2C_Master_Wait:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           prodh	equ	0xFF4
  2879                           prodl	equ	0xFF3
  2880                           intcon	equ	0xFF2
  2881                           intcon2	equ	0xFF1
  2882                           intcon3	equ	0xFF0
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           indf2	equ	0xFDF
  2886                           postinc2	equ	0xFDE
  2887                           postdec2	equ	0xFDD
  2888                           fsr2h	equ	0xFDA
  2889                           fsr2l	equ	0xFD9
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _bottle_time *****************
  2893 ;; Defined at:
  2894 ;;		line 163 in file "main.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		None
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    4
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text17
  2923  001D96                     __ptext17:
  2924                           	opt stack 0
  2925  001D96                     _bottle_time:
  2926                           	opt stack 26
  2927                           
  2928                           ;main.c: 164: return;
  2929                           
  2930                           ;incstack = 0
  2931  001D96  0012               	return		;funcret
  2932  001D98                     __end_of_bottle_time:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           intcon	equ	0xFF2
  2941                           intcon2	equ	0xFF1
  2942                           intcon3	equ	0xFF0
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _bottle_count *****************
  2953 ;; Defined at:
  2954 ;;		line 159 in file "main.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		None
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    4
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text18
  2983  001D98                     __ptext18:
  2984                           	opt stack 0
  2985  001D98                     _bottle_count:
  2986                           	opt stack 26
  2987                           
  2988                           ;main.c: 160: return;
  2989                           
  2990                           ;incstack = 0
  2991  001D98  0012               	return		;funcret
  2992  001D9A                     __end_of_bottle_count:
  2993                           	opt stack 0
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           prodh	equ	0xFF4
  2999                           prodl	equ	0xFF3
  3000                           intcon	equ	0xFF2
  3001                           intcon2	equ	0xFF1
  3002                           intcon3	equ	0xFF0
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           fsr2h	equ	0xFDA
  3009                           fsr2l	equ	0xFD9
  3010                           status	equ	0xFD8
  3011                           
  3012 ;; *************** function _I2C_Master_Init *****************
  3013 ;; Defined at:
  3014 ;;		line 13 in file "I2C.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  c               4   57[COMRAM] const unsigned long 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        8 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    5
  3035 ;; This function calls:
  3036 ;;		___lldiv
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text19
  3043  0019B8                     __ptext19:
  3044                           	opt stack 0
  3045  0019B8                     _I2C_Master_Init:
  3046                           	opt stack 25
  3047                           
  3048                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3049                           
  3050                           ;incstack = 0
  3051  0019B8  0E00               	movlw	0
  3052  0019BA  6EC7               	movwf	4039,c	;volatile
  3053                           
  3054                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3055  0019BC  0E28               	movlw	40
  3056  0019BE  6EC6               	movwf	4038,c	;volatile
  3057                           
  3058                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3059  0019C0  0E00               	movlw	0
  3060  0019C2  6EC5               	movwf	4037,c	;volatile
  3061                           
  3062                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  3063  0019C4  0E80               	movlw	128
  3064  0019C6  6E2D               	movwf	___lldiv@dividend,c
  3065  0019C8  0E96               	movlw	150
  3066  0019CA  6E2E               	movwf	___lldiv@dividend+1,c
  3067  0019CC  0E98               	movlw	152
  3068  0019CE  6E2F               	movwf	___lldiv@dividend+2,c
  3069  0019D0  0E00               	movlw	0
  3070  0019D2  6E30               	movwf	___lldiv@dividend+3,c
  3071  0019D4  C03A  F03E         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3072  0019D8  C03B  F03F         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3073  0019DC  C03C  F040         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3074  0019E0  C03D  F041         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3075  0019E4  0E02               	movlw	2
  3076  0019E6                     u1235:
  3077  0019E6  90D8               	bcf	status,0,c
  3078  0019E8  363E               	rlcf	??_I2C_Master_Init,f,c
  3079  0019EA  363F               	rlcf	??_I2C_Master_Init+1,f,c
  3080  0019EC  3640               	rlcf	??_I2C_Master_Init+2,f,c
  3081  0019EE  3641               	rlcf	??_I2C_Master_Init+3,f,c
  3082  0019F0  2EE8               	decfsz	wreg,f,c
  3083  0019F2  D7F9               	goto	u1235
  3084  0019F4  C03E  F031         	movff	??_I2C_Master_Init,___lldiv@divisor
  3085  0019F8  C03F  F032         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3086  0019FC  C040  F033         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3087  001A00  C041  F034         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3088  001A04  EC5B  F00C         	call	___lldiv	;wreg free
  3089  001A08  042D               	decf	?___lldiv,w,c
  3090  001A0A  6EC8               	movwf	4040,c	;volatile
  3091                           
  3092                           ;I2C.c: 20: TRISC3 = 1;
  3093  001A0C  8694               	bsf	3988,3,c	;volatile
  3094                           
  3095                           ;I2C.c: 21: TRISC4 = 1;
  3096  001A0E  8894               	bsf	3988,4,c	;volatile
  3097  001A10  0012               	return		;funcret
  3098  001A12                     __end_of_I2C_Master_Init:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           prodh	equ	0xFF4
  3105                           prodl	equ	0xFF3
  3106                           intcon	equ	0xFF2
  3107                           intcon2	equ	0xFF1
  3108                           intcon3	equ	0xFF0
  3109                           postinc0	equ	0xFEE
  3110                           wreg	equ	0xFE8
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function ___lldiv *****************
  3119 ;; Defined at:
  3120 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  dividend        4   44[COMRAM] unsigned long 
  3123 ;;  divisor         4   48[COMRAM] unsigned long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  quotient        4   52[COMRAM] unsigned long 
  3126 ;;  counter         1   56[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  4   44[COMRAM] unsigned long 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3136 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;Total ram usage:       13 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    4
  3143 ;; This function calls:
  3144 ;;		Nothing
  3145 ;; This function is called by:
  3146 ;;		_I2C_Master_Init
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text20
  3151  0018B6                     __ptext20:
  3152                           	opt stack 0
  3153  0018B6                     ___lldiv:
  3154                           	opt stack 25
  3155                           
  3156                           ;incstack = 0
  3157  0018B6  0E00               	movlw	0
  3158  0018B8  6E35               	movwf	___lldiv@quotient,c
  3159  0018BA  0E00               	movlw	0
  3160  0018BC  6E36               	movwf	___lldiv@quotient+1,c
  3161  0018BE  0E00               	movlw	0
  3162  0018C0  6E37               	movwf	___lldiv@quotient+2,c
  3163  0018C2  0E00               	movlw	0
  3164  0018C4  6E38               	movwf	___lldiv@quotient+3,c
  3165  0018C6  5031               	movf	___lldiv@divisor,w,c
  3166  0018C8  1032               	iorwf	___lldiv@divisor+1,w,c
  3167  0018CA  1033               	iorwf	___lldiv@divisor+2,w,c
  3168  0018CC  1034               	iorwf	___lldiv@divisor+3,w,c
  3169  0018CE  B4D8               	btfsc	status,2,c
  3170  0018D0  D02A               	goto	l619
  3171  0018D2  0E01               	movlw	1
  3172  0018D4  6E39               	movwf	___lldiv@counter,c
  3173  0018D6  D006               	goto	l1725
  3174  0018D8                     l1723:
  3175  0018D8  90D8               	bcf	status,0,c
  3176  0018DA  3631               	rlcf	___lldiv@divisor,f,c
  3177  0018DC  3632               	rlcf	___lldiv@divisor+1,f,c
  3178  0018DE  3633               	rlcf	___lldiv@divisor+2,f,c
  3179  0018E0  3634               	rlcf	___lldiv@divisor+3,f,c
  3180  0018E2  2A39               	incf	___lldiv@counter,f,c
  3181  0018E4                     l1725:
  3182  0018E4  AE34               	btfss	___lldiv@divisor+3,7,c
  3183  0018E6  D7F8               	goto	l1723
  3184  0018E8                     l1727:
  3185  0018E8  90D8               	bcf	status,0,c
  3186  0018EA  3635               	rlcf	___lldiv@quotient,f,c
  3187  0018EC  3636               	rlcf	___lldiv@quotient+1,f,c
  3188  0018EE  3637               	rlcf	___lldiv@quotient+2,f,c
  3189  0018F0  3638               	rlcf	___lldiv@quotient+3,f,c
  3190  0018F2  5031               	movf	___lldiv@divisor,w,c
  3191  0018F4  5C2D               	subwf	___lldiv@dividend,w,c
  3192  0018F6  5032               	movf	___lldiv@divisor+1,w,c
  3193  0018F8  582E               	subwfb	___lldiv@dividend+1,w,c
  3194  0018FA  5033               	movf	___lldiv@divisor+2,w,c
  3195  0018FC  582F               	subwfb	___lldiv@dividend+2,w,c
  3196  0018FE  5034               	movf	___lldiv@divisor+3,w,c
  3197  001900  5830               	subwfb	___lldiv@dividend+3,w,c
  3198  001902  A0D8               	btfss	status,0,c
  3199  001904  D009               	goto	l1735
  3200  001906  5031               	movf	___lldiv@divisor,w,c
  3201  001908  5E2D               	subwf	___lldiv@dividend,f,c
  3202  00190A  5032               	movf	___lldiv@divisor+1,w,c
  3203  00190C  5A2E               	subwfb	___lldiv@dividend+1,f,c
  3204  00190E  5033               	movf	___lldiv@divisor+2,w,c
  3205  001910  5A2F               	subwfb	___lldiv@dividend+2,f,c
  3206  001912  5034               	movf	___lldiv@divisor+3,w,c
  3207  001914  5A30               	subwfb	___lldiv@dividend+3,f,c
  3208  001916  8035               	bsf	___lldiv@quotient,0,c
  3209  001918                     l1735:
  3210  001918  90D8               	bcf	status,0,c
  3211  00191A  3234               	rrcf	___lldiv@divisor+3,f,c
  3212  00191C  3233               	rrcf	___lldiv@divisor+2,f,c
  3213  00191E  3232               	rrcf	___lldiv@divisor+1,f,c
  3214  001920  3231               	rrcf	___lldiv@divisor,f,c
  3215  001922  2E39               	decfsz	___lldiv@counter,f,c
  3216  001924  D7E1               	goto	l1727
  3217  001926                     l619:
  3218  001926  C035  F02D         	movff	___lldiv@quotient,?___lldiv
  3219  00192A  C036  F02E         	movff	___lldiv@quotient+1,?___lldiv+1
  3220  00192E  C037  F02F         	movff	___lldiv@quotient+2,?___lldiv+2
  3221  001932  C038  F030         	movff	___lldiv@quotient+3,?___lldiv+3
  3222  001936  0012               	return		;funcret
  3223  001938                     __end_of___lldiv:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           intcon3	equ	0xFF0
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           indf2	equ	0xFDF
  3237                           postinc2	equ	0xFDE
  3238                           postdec2	equ	0xFDD
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _isr *****************
  3244 ;; Defined at:
  3245 ;;		line 92 in file "main.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  i               1   43[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:         15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:       16 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    3
  3266 ;; This function calls:
  3267 ;;		i2_lcdInst
  3268 ;;		i2_printf
  3269 ;; This function is called by:
  3270 ;;		Interrupt level 2
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	intcode
  3275  000008                     __pintcode:
  3276                           	opt stack 0
  3277  000008                     _isr:
  3278                           	opt stack 23
  3279                           
  3280                           ;incstack = 0
  3281  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3282  00000A  EDF6  F00B         	call	int_func,f	;refresh shadow registers
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           tblptrl	equ	0xFF6
  3286                           tablat	equ	0xFF5
  3287                           prodh	equ	0xFF4
  3288                           prodl	equ	0xFF3
  3289                           intcon	equ	0xFF2
  3290                           intcon2	equ	0xFF1
  3291                           intcon3	equ	0xFF0
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           indf2	equ	0xFDF
  3295                           postinc2	equ	0xFDE
  3296                           postdec2	equ	0xFDD
  3297                           fsr2h	equ	0xFDA
  3298                           fsr2l	equ	0xFD9
  3299                           status	equ	0xFD8
  3300                           
  3301                           	psect	intcode_body
  3302  0017EC                     __pintcode_body:
  3303                           	opt stack 23
  3304  0017EC                     int_func:
  3305                           	opt stack 23
  3306  0017EC  0006               	pop		; remove dummy address from shadow register refresh
  3307  0017EE  CFFA F01E          	movff	pclath,??_isr+1
  3308  0017F2  CFFB F01F          	movff	pclatu,??_isr+2
  3309  0017F6  CFE9 F020          	movff	fsr0l,??_isr+3
  3310  0017FA  CFEA F021          	movff	fsr0h,??_isr+4
  3311  0017FE  CFE1 F022          	movff	fsr1l,??_isr+5
  3312  001802  CFE2 F023          	movff	fsr1h,??_isr+6
  3313  001806  CFD9 F024          	movff	fsr2l,??_isr+7
  3314  00180A  CFDA F025          	movff	fsr2h,??_isr+8
  3315  00180E  CFF3 F026          	movff	prodl,??_isr+9
  3316  001812  CFF4 F027          	movff	prodh,??_isr+10
  3317  001816  CFF6 F028          	movff	tblptrl,??_isr+11
  3318  00181A  CFF7 F029          	movff	tblptrh,??_isr+12
  3319  00181E  CFF8 F02A          	movff	tblptru,??_isr+13
  3320  001822  CFF5 F02B          	movff	tablat,??_isr+14
  3321                           
  3322                           ;main.c: 93: if (INT1IF) {
  3323  001826  B0F0               	btfsc	intcon3,0,c	;volatile
  3324  001828  D006               	goto	i2l2019
  3325  00182A  D00D               	goto	i2l2021
  3326  00182C                     i2l2013:
  3327                           
  3328                           ;main.c: 96: curr_state = STANDBY;
  3329  00182C  0E00               	movlw	0
  3330  00182E  D001               	goto	L1
  3331  001830                     i2l2015:
  3332                           
  3333                           ;main.c: 99: curr_state = DATETIME;
  3334  001830  0E01               	movlw	1
  3335  001832                     L1:
  3336  001832  6E4F               	movwf	_curr_state,c
  3337                           
  3338                           ;main.c: 101: }
  3339                           
  3340                           ;main.c: 100: break;
  3341  001834  D021               	goto	i2l168
  3342  001836                     i2l2019:
  3343  001836  5081               	movf	3969,w,c	;volatile
  3344                           
  3345                           ; Switch size 1, requested type "space"
  3346                           ; Number of cases is 2, Range of values is 15 to 63
  3347                           ; switch strategies available:
  3348                           ; Name         Instructions Cycles
  3349                           ; simple_byte            7     4 (average)
  3350                           ;	Chosen strategy is simple_byte
  3351  001838  0A0F               	xorlw	15	; case 15
  3352  00183A  B4D8               	btfsc	status,2,c
  3353  00183C  D7F7               	goto	i2l2013
  3354  00183E  0A30               	xorlw	48	; case 63
  3355  001840  B4D8               	btfsc	status,2,c
  3356  001842  D7F6               	goto	i2l2015
  3357                           
  3358                           ;main.c: 102: }
  3359  001844  D019               	goto	i2l168
  3360  001846                     i2l2021:
  3361                           
  3362                           ;main.c: 105: lcdInst(0b10000000);
  3363  001846  0E80               	movlw	128
  3364  001848  ECB8  F00E         	call	i2_lcdInst
  3365                           
  3366                           ;main.c: 106: printf("bad interrupt");
  3367  00184C  0E6A               	movlw	low STR_1
  3368  00184E  6E0D               	movwf	i2printf@f,c
  3369  001850  0E10               	movlw	high STR_1
  3370  001852  6E0E               	movwf	i2printf@f+1,c
  3371  001854  EC0A  F00A         	call	i2_printf	;wreg free
  3372                           
  3373                           ;main.c: 107: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  3374  001858  0E00               	movlw	0
  3375  00185A  6E2C               	movwf	isr@i,c
  3376  00185C                     i2l2027:
  3377  00185C  0E63               	movlw	99
  3378  00185E  642C               	cpfsgt	isr@i,c
  3379  001860  D001               	goto	i2l2031
  3380  001862  D7F1               	goto	i2l2021
  3381  001864                     i2l2031:
  3382  001864  0E21               	movlw	33
  3383  001866  6E1D               	movwf	??_isr& (0+255),c
  3384  001868  0E76               	movlw	118
  3385  00186A                     i2u199_47:
  3386  00186A  2EE8               	decfsz	wreg,f,c
  3387  00186C  D7FE               	bra	i2u199_47
  3388  00186E  2E1D               	decfsz	??_isr& (0+255),f,c
  3389  001870  D7FC               	bra	i2u199_47
  3390  001872  D000               	nop2	
  3391  001874  2A2C               	incf	isr@i,f,c
  3392  001876  D7F2               	goto	i2l2027
  3393  001878                     i2l168:
  3394                           
  3395                           ;main.c: 108: }
  3396                           ;main.c: 109: }
  3397                           ;main.c: 110: INT1IF = 0;
  3398  001878  90F0               	bcf	intcon3,0,c	;volatile
  3399                           
  3400                           ;main.c: 111: return;
  3401  00187A  C02B  FFF5         	movff	??_isr+14,tablat
  3402  00187E  C02A  FFF8         	movff	??_isr+13,tblptru
  3403  001882  C029  FFF7         	movff	??_isr+12,tblptrh
  3404  001886  C028  FFF6         	movff	??_isr+11,tblptrl
  3405  00188A  C027  FFF4         	movff	??_isr+10,prodh
  3406  00188E  C026  FFF3         	movff	??_isr+9,prodl
  3407  001892  C025  FFDA         	movff	??_isr+8,fsr2h
  3408  001896  C024  FFD9         	movff	??_isr+7,fsr2l
  3409  00189A  C023  FFE2         	movff	??_isr+6,fsr1h
  3410  00189E  C022  FFE1         	movff	??_isr+5,fsr1l
  3411  0018A2  C021  FFEA         	movff	??_isr+4,fsr0h
  3412  0018A6  C020  FFE9         	movff	??_isr+3,fsr0l
  3413  0018AA  C01F  FFFB         	movff	??_isr+2,pclatu
  3414  0018AE  C01E  FFFA         	movff	??_isr+1,pclath
  3415  0018B2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3416  0018B4  0011               	retfie		f
  3417  0018B6                     __end_of_isr:
  3418                           	opt stack 0
  3419                           pclatu	equ	0xFFB
  3420                           pclath	equ	0xFFA
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           intcon3	equ	0xFF0
  3430                           postinc0	equ	0xFEE
  3431                           fsr0h	equ	0xFEA
  3432                           fsr0l	equ	0xFE9
  3433                           wreg	equ	0xFE8
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           fsr2h	equ	0xFDA
  3440                           fsr2l	equ	0xFD9
  3441                           status	equ	0xFD8
  3442                           
  3443 ;; *************** function i2_printf *****************
  3444 ;; Defined at:
  3445 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3448 ;;		 -> STR_5(23), STR_4(23), STR_3(10), STR_2(8), 
  3449 ;;		 -> STR_1(14), 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  printf          4    0        struct .
  3452 ;;  printf          3    0        PTR const unsigned char 
  3453 ;;  printf          2   25[COMRAM] int 
  3454 ;;  printf          2   22[COMRAM] unsigned int 
  3455 ;;  printf          2   19[COMRAM] PTR void [1]
  3456 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3457 ;;  printf          2    0        unsigned int 
  3458 ;;  printf          1   27[COMRAM] char 
  3459 ;;  printf          1   24[COMRAM] unsigned char 
  3460 ;;  printf          1   21[COMRAM] char 
  3461 ;;  printf          1   18[COMRAM] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  2   12[COMRAM] int 
  3464 ;; Registers used:
  3465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;Total ram usage:       16 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    2
  3478 ;; This function calls:
  3479 ;;		i2___lwdiv
  3480 ;;		i2___lwmod
  3481 ;;		i2___wmul
  3482 ;;		i2_isdigit
  3483 ;;		i2_putch
  3484 ;; This function is called by:
  3485 ;;		_isr
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text22
  3490  001414                     __ptext22:
  3491                           	opt stack 0
  3492  001414                     i2_printf:
  3493                           	opt stack 23
  3494                           
  3495                           ;doprnt.c: 466: va_list ap;
  3496                           ;doprnt.c: 499: signed char c;
  3497                           ;doprnt.c: 501: int width;
  3498                           ;doprnt.c: 506: signed char prec;
  3499                           ;doprnt.c: 508: unsigned char flag;
  3500                           ;doprnt.c: 523: union {
  3501                           ;doprnt.c: 524: unsigned long vd;
  3502                           ;doprnt.c: 525: double integ;
  3503                           ;doprnt.c: 526: } tmpval;
  3504                           ;doprnt.c: 528: unsigned int val;
  3505                           ;doprnt.c: 529: unsigned len;
  3506                           ;doprnt.c: 530: const char * cp;
  3507                           ;doprnt.c: 533: *ap = __va_start();
  3508                           
  3509                           ;incstack = 0
  3510  001414  0E0F               	movlw	low (?i2_printf+2)
  3511  001416  6E14               	movwf	i2printf@ap,c
  3512  001418  0E00               	movlw	high (?i2_printf+2)
  3513  00141A  6E15               	movwf	i2printf@ap+1,c
  3514                           
  3515                           ;doprnt.c: 536: while(c = *f++) {
  3516  00141C  D174               	goto	i2l1979
  3517  00141E                     i2l1853:
  3518                           
  3519                           ;doprnt.c: 538: if(c != '%')
  3520  00141E  0E25               	movlw	37
  3521  001420  181C               	xorwf	i2printf@c,w,c
  3522  001422  B4D8               	btfsc	status,2,c
  3523  001424  D004               	goto	i2l1857
  3524                           
  3525                           ;doprnt.c: 540: {
  3526                           ;doprnt.c: 541: (putch(c) );
  3527  001426  501C               	movf	i2printf@c,w,c
  3528  001428  ECB2  F00E         	call	i2_putch
  3529                           
  3530                           ;doprnt.c: 542: continue;
  3531  00142C  D16C               	goto	i2l1979
  3532  00142E                     i2l1857:
  3533                           
  3534                           ;doprnt.c: 543: }
  3535                           ;doprnt.c: 546: width = 0;
  3536  00142E  0E00               	movlw	0
  3537  001430  6E1B               	movwf	i2printf@width+1,c
  3538  001432  0E00               	movlw	0
  3539  001434  6E1A               	movwf	i2printf@width,c
  3540                           
  3541                           ;doprnt.c: 548: flag = 0;
  3542  001436  0E00               	movlw	0
  3543  001438  6E19               	movwf	i2printf@flag,c
  3544                           
  3545                           ;doprnt.c: 551: switch(*f) {
  3546                           
  3547                           ;doprnt.c: 550: for(;;) {
  3548  00143A  D003               	goto	i2l1863
  3549  00143C                     i2l1859:
  3550                           
  3551                           ;doprnt.c: 580: flag |= 0x04;
  3552  00143C  8419               	bsf	i2printf@flag,2,c
  3553                           
  3554                           ;doprnt.c: 581: f++;
  3555  00143E  4A0D               	infsnz	i2printf@f,f,c
  3556  001440  2A0E               	incf	i2printf@f+1,f,c
  3557  001442                     i2l1863:
  3558  001442  C00D  FFF6         	movff	i2printf@f,tblptrl
  3559  001446  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3560  00144A                     	if	0	;tblptru may be non-zero
  3561  00144A                     	endif
  3562  00144A                     	if	0	;tblptru may be non-zero
  3563  00144A                     	endif
  3564  00144A  0008               	tblrd		*
  3565  00144C  50F5               	movf	tablat,w,c
  3566                           
  3567                           ; Switch size 1, requested type "space"
  3568                           ; Number of cases is 1, Range of values is 48 to 48
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte            4     3 (average)
  3572                           ;	Chosen strategy is simple_byte
  3573  00144E  0A30               	xorlw	48	; case 48
  3574  001450  B4D8               	btfsc	status,2,c
  3575  001452  D7F4               	goto	i2l1859
  3576                           
  3577                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3578                           
  3579                           ;doprnt.c: 586: }
  3580                           
  3581                           ;doprnt.c: 585: break;
  3582  001454  C00D  FFF6         	movff	i2printf@f,tblptrl
  3583  001458  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3584  00145C                     	if	0	;tblptru may be non-zero
  3585  00145C                     	endif
  3586  00145C                     	if	0	;tblptru may be non-zero
  3587  00145C                     	endif
  3588  00145C  0008               	tblrd		*
  3589  00145E  50F5               	movf	tablat,w,c
  3590  001460  EC81  F00E         	call	i2_isdigit
  3591  001464  A0D8               	btfss	status,0,c
  3592  001466  D035               	goto	i2l1881
  3593                           
  3594                           ;doprnt.c: 598: width = 0;
  3595  001468  0E00               	movlw	0
  3596  00146A  6E1B               	movwf	i2printf@width+1,c
  3597  00146C  0E00               	movlw	0
  3598  00146E  6E1A               	movwf	i2printf@width,c
  3599  001470                     i2l1869:
  3600                           
  3601                           ;doprnt.c: 600: width *= 10;
  3602  001470  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  3603  001474  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  3604  001478  0E00               	movlw	0
  3605  00147A  6E04               	movwf	i2___wmul@multiplicand+1,c
  3606  00147C  0E0A               	movlw	10
  3607  00147E  6E03               	movwf	i2___wmul@multiplicand,c
  3608  001480  EC5F  F00E         	call	i2___wmul	;wreg free
  3609  001484  C001  F01A         	movff	?i2___wmul,i2printf@width
  3610  001488  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  3611                           
  3612                           ;doprnt.c: 601: width += *f++ - '0';
  3613  00148C  0ED0               	movlw	208
  3614  00148E  6E0F               	movwf	??i2_printf& (0+255),c
  3615  001490  0EFF               	movlw	255
  3616  001492  6E10               	movwf	(??i2_printf+1)& (0+255),c
  3617  001494  C00D  FFF6         	movff	i2printf@f,tblptrl
  3618  001498  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3619  00149C                     	if	0	;tblptru may be non-zero
  3620  00149C                     	endif
  3621  00149C                     	if	0	;tblptru may be non-zero
  3622  00149C                     	endif
  3623  00149C  0008               	tblrd		*
  3624  00149E  50F5               	movf	tablat,w,c
  3625  0014A0  6E11               	movwf	(??i2_printf+2)& (0+255),c
  3626  0014A2  6A12               	clrf	(??i2_printf+3)& (0+255),c
  3627  0014A4  500F               	movf	??i2_printf,w,c
  3628  0014A6  2611               	addwf	??i2_printf+2,f,c
  3629  0014A8  5010               	movf	??i2_printf+1,w,c
  3630  0014AA  2212               	addwfc	??i2_printf+3,f,c
  3631  0014AC  5011               	movf	??i2_printf+2,w,c
  3632  0014AE  261A               	addwf	i2printf@width,f,c
  3633  0014B0  5012               	movf	??i2_printf+3,w,c
  3634  0014B2  221B               	addwfc	i2printf@width+1,f,c
  3635  0014B4  4A0D               	infsnz	i2printf@f,f,c
  3636  0014B6  2A0E               	incf	i2printf@f+1,f,c
  3637                           
  3638                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3639  0014B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  3640  0014BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3641  0014C0                     	if	0	;tblptru may be non-zero
  3642  0014C0                     	endif
  3643  0014C0                     	if	0	;tblptru may be non-zero
  3644  0014C0                     	endif
  3645  0014C0  0008               	tblrd		*
  3646  0014C2  50F5               	movf	tablat,w,c
  3647  0014C4  EC81  F00E         	call	i2_isdigit
  3648  0014C8  A0D8               	btfss	status,0,c
  3649  0014CA  D003               	goto	i2l1881
  3650  0014CC  D7D1               	goto	i2l1869
  3651  0014CE                     i2l1877:
  3652                           
  3653                           ;doprnt.c: 721: flag |= 0x80;
  3654  0014CE  8E19               	bsf	i2printf@flag,7,c
  3655                           
  3656                           ;doprnt.c: 723: break;
  3657  0014D0  D017               	goto	i2l227
  3658  0014D2                     i2l1881:
  3659  0014D2  C00D  FFF6         	movff	i2printf@f,tblptrl
  3660  0014D6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  3661  0014DA  4A0D               	infsnz	i2printf@f,f,c
  3662  0014DC  2A0E               	incf	i2printf@f+1,f,c
  3663  0014DE                     	if	0	;tblptru may be non-zero
  3664  0014DE                     	endif
  3665  0014DE                     	if	0	;tblptru may be non-zero
  3666  0014DE                     	endif
  3667  0014DE  0008               	tblrd		*
  3668  0014E0  CFF5 F01C          	movff	tablat,i2printf@c
  3669  0014E4  501C               	movf	i2printf@c,w,c
  3670                           
  3671                           ; Switch size 1, requested type "space"
  3672                           ; Number of cases is 4, Range of values is 0 to 120
  3673                           ; switch strategies available:
  3674                           ; Name         Instructions Cycles
  3675                           ; simple_byte           13     7 (average)
  3676                           ;	Chosen strategy is simple_byte
  3677  0014E6  0A00               	xorlw	0	; case 0
  3678  0014E8  B4D8               	btfsc	status,2,c
  3679  0014EA  0012               	return	
  3680  0014EC  0A64               	xorlw	100	; case 100
  3681  0014EE  B4D8               	btfsc	status,2,c
  3682  0014F0  D007               	goto	i2l227
  3683  0014F2  0A0D               	xorlw	13	; case 105
  3684  0014F4  B4D8               	btfsc	status,2,c
  3685  0014F6  D004               	goto	i2l227
  3686  0014F8  0A11               	xorlw	17	; case 120
  3687  0014FA  B4D8               	btfsc	status,2,c
  3688  0014FC  D7E8               	goto	i2l1877
  3689  0014FE  D103               	goto	i2l1979
  3690  001500                     i2l227:
  3691                           
  3692                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3693  001500  BE19               	btfsc	i2printf@flag,7,c
  3694  001502  D015               	goto	i2l1893
  3695                           
  3696                           ;doprnt.c: 1253: {
  3697                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3698  001504  C014  FFD9         	movff	i2printf@ap,fsr2l
  3699  001508  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3700  00150C  CFDE F017          	movff	postinc2,i2printf@val
  3701  001510  CFDD F018          	movff	postdec2,i2printf@val+1
  3702  001514  0E02               	movlw	2
  3703  001516  2614               	addwf	i2printf@ap,f,c
  3704  001518  0E00               	movlw	0
  3705  00151A  2215               	addwfc	i2printf@ap+1,f,c
  3706                           
  3707                           ;doprnt.c: 1261: if((int)val < 0) {
  3708  00151C  AE18               	btfss	i2printf@val+1,7,c
  3709  00151E  D044               	goto	i2l1927
  3710                           
  3711                           ;doprnt.c: 1262: flag |= 0x03;
  3712  001520  0E03               	movlw	3
  3713  001522  1219               	iorwf	i2printf@flag,f,c
  3714                           
  3715                           ;doprnt.c: 1263: val = -val;
  3716  001524  6C17               	negf	i2printf@val,c
  3717  001526  1E18               	comf	i2printf@val+1,f,c
  3718  001528  B0D8               	btfsc	status,0,c
  3719  00152A  2A18               	incf	i2printf@val+1,f,c
  3720                           
  3721                           ;doprnt.c: 1264: }
  3722                           ;doprnt.c: 1266: }
  3723  00152C  D03D               	goto	i2l1927
  3724  00152E                     i2l1893:
  3725                           
  3726                           ;doprnt.c: 1268: else
  3727                           ;doprnt.c: 1273: {
  3728                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3729  00152E  C014  FFD9         	movff	i2printf@ap,fsr2l
  3730  001532  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  3731  001536  CFDE F017          	movff	postinc2,i2printf@val
  3732  00153A  CFDD F018          	movff	postdec2,i2printf@val+1
  3733  00153E  0E02               	movlw	2
  3734  001540  2614               	addwf	i2printf@ap,f,c
  3735  001542  0E00               	movlw	0
  3736  001544  2215               	addwfc	i2printf@ap+1,f,c
  3737                           
  3738                           ;doprnt.c: 1287: }
  3739                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3740  001546  D030               	goto	i2l1927
  3741  001548                     i2l1897:
  3742                           
  3743                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3744  001548  0E01               	movlw	1
  3745  00154A  6E1C               	movwf	i2printf@c,c
  3746  00154C                     i2l1899:
  3747  00154C  0E05               	movlw	5
  3748  00154E  181C               	xorwf	i2printf@c,w,c
  3749  001550  B4D8               	btfsc	status,2,c
  3750  001552  D032               	goto	i2l1929
  3751                           
  3752                           ;doprnt.c: 1306: if(val < dpowers[c])
  3753  001554  501C               	movf	i2printf@c,w,c
  3754  001556  0D02               	mullw	2
  3755  001558  0E12               	movlw	low _dpowers
  3756  00155A  24F3               	addwf	prodl,w,c
  3757  00155C  6EF6               	movwf	tblptrl,c
  3758  00155E  0E10               	movlw	high _dpowers
  3759  001560  20F4               	addwfc	prodh,w,c
  3760  001562  6EF7               	movwf	tblptrh,c
  3761  001564                     	if	0	;There are less than 3 active tblptr bytes
  3762  001564                     	endif
  3763  001564  0009               	tblrd		*+
  3764  001566  50F5               	movf	tablat,w,c
  3765  001568  5C17               	subwf	i2printf@val,w,c
  3766  00156A  0009               	tblrd		*+
  3767  00156C  50F5               	movf	tablat,w,c
  3768  00156E  5818               	subwfb	i2printf@val+1,w,c
  3769  001570  A0D8               	btfss	status,0,c
  3770  001572  D022               	goto	i2l1929
  3771                           
  3772                           ;doprnt.c: 1307: break;
  3773  001574  2A1C               	incf	i2printf@c,f,c
  3774  001576  D7EA               	goto	i2l1899
  3775  001578                     i2l1911:
  3776                           
  3777                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3778  001578  0E01               	movlw	1
  3779  00157A  6E1C               	movwf	i2printf@c,c
  3780  00157C                     i2l1913:
  3781  00157C  0E04               	movlw	4
  3782  00157E  181C               	xorwf	i2printf@c,w,c
  3783  001580  B4D8               	btfsc	status,2,c
  3784  001582  D01A               	goto	i2l1929
  3785                           
  3786                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3787  001584  501C               	movf	i2printf@c,w,c
  3788  001586  0D02               	mullw	2
  3789  001588  0E1C               	movlw	low _hexpowers
  3790  00158A  24F3               	addwf	prodl,w,c
  3791  00158C  6EF6               	movwf	tblptrl,c
  3792  00158E  0E10               	movlw	high _hexpowers
  3793  001590  20F4               	addwfc	prodh,w,c
  3794  001592  6EF7               	movwf	tblptrh,c
  3795  001594                     	if	0	;There are less than 3 active tblptr bytes
  3796  001594                     	endif
  3797  001594  0009               	tblrd		*+
  3798  001596  50F5               	movf	tablat,w,c
  3799  001598  5C17               	subwf	i2printf@val,w,c
  3800  00159A  0009               	tblrd		*+
  3801  00159C  50F5               	movf	tablat,w,c
  3802  00159E  5818               	subwfb	i2printf@val+1,w,c
  3803  0015A0  A0D8               	btfss	status,0,c
  3804  0015A2  D00A               	goto	i2l1929
  3805                           
  3806                           ;doprnt.c: 1318: break;
  3807  0015A4  2A1C               	incf	i2printf@c,f,c
  3808  0015A6  D7EA               	goto	i2l1913
  3809  0015A8                     i2l1927:
  3810  0015A8  5019               	movf	i2printf@flag,w,c
  3811  0015AA  0B80               	andlw	128
  3812                           
  3813                           ; Switch size 1, requested type "space"
  3814                           ; Number of cases is 2, Range of values is 0 to 128
  3815                           ; switch strategies available:
  3816                           ; Name         Instructions Cycles
  3817                           ; simple_byte            7     4 (average)
  3818                           ;	Chosen strategy is simple_byte
  3819  0015AC  0A00               	xorlw	0	; case 0
  3820  0015AE  B4D8               	btfsc	status,2,c
  3821  0015B0  D7CB               	goto	i2l1897
  3822  0015B2  0A80               	xorlw	128	; case 128
  3823  0015B4  B4D8               	btfsc	status,2,c
  3824  0015B6  D7E0               	goto	i2l1911
  3825  0015B8                     i2l1929:
  3826                           
  3827                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3828  0015B8  501A               	movf	i2printf@width,w,c
  3829  0015BA  101B               	iorwf	i2printf@width+1,w,c
  3830  0015BC  B4D8               	btfsc	status,2,c
  3831  0015BE  D009               	goto	i2l1935
  3832  0015C0  C019  F00F         	movff	i2printf@flag,??i2_printf
  3833  0015C4  0E03               	movlw	3
  3834  0015C6  160F               	andwf	??i2_printf,f,c
  3835  0015C8  B4D8               	btfsc	status,2,c
  3836  0015CA  D003               	goto	i2l1935
  3837                           
  3838                           ;doprnt.c: 1346: width--;
  3839  0015CC  061A               	decf	i2printf@width,f,c
  3840  0015CE  A0D8               	btfss	status,0,c
  3841  0015D0  061B               	decf	i2printf@width+1,f,c
  3842  0015D2                     i2l1935:
  3843                           
  3844                           ;doprnt.c: 1381: if(width > c)
  3845  0015D2  0E80               	movlw	128
  3846  0015D4  BE1C               	btfsc	i2printf@c,7,c
  3847  0015D6  0E7F               	movlw	127
  3848  0015D8  6E0F               	movwf	??i2_printf& (0+255),c
  3849  0015DA  501A               	movf	i2printf@width,w,c
  3850  0015DC  5C1C               	subwf	i2printf@c,w,c
  3851  0015DE  501B               	movf	i2printf@width+1,w,c
  3852  0015E0  0A80               	xorlw	128
  3853  0015E2  580F               	subwfb	??i2_printf& (0+255),w,c
  3854  0015E4  B0D8               	btfsc	status,0,c
  3855  0015E6  D007               	goto	i2l1939
  3856                           
  3857                           ;doprnt.c: 1382: width -= c;
  3858  0015E8  501C               	movf	i2printf@c,w,c
  3859  0015EA  5E1A               	subwf	i2printf@width,f,c
  3860  0015EC  0E00               	movlw	0
  3861  0015EE  BE1C               	btfsc	i2printf@c,7,c
  3862  0015F0  0EFF               	movlw	255
  3863  0015F2  5A1B               	subwfb	i2printf@width+1,f,c
  3864  0015F4  D004               	goto	i2l1941
  3865  0015F6                     i2l1939:
  3866                           
  3867                           ;doprnt.c: 1383: else
  3868                           ;doprnt.c: 1384: width = 0;
  3869  0015F6  0E00               	movlw	0
  3870  0015F8  6E1B               	movwf	i2printf@width+1,c
  3871  0015FA  0E00               	movlw	0
  3872  0015FC  6E1A               	movwf	i2printf@width,c
  3873  0015FE                     i2l1941:
  3874                           
  3875                           ;doprnt.c: 1387: if(flag & 0x04) {
  3876  0015FE  A419               	btfss	i2printf@flag,2,c
  3877  001600  D014               	goto	i2l1953
  3878                           
  3879                           ;doprnt.c: 1392: if(flag & 0x03)
  3880  001602  C019  F00F         	movff	i2printf@flag,??i2_printf
  3881  001606  0E03               	movlw	3
  3882  001608  160F               	andwf	??i2_printf,f,c
  3883  00160A  B4D8               	btfsc	status,2,c
  3884  00160C  D003               	goto	i2l1947
  3885                           
  3886                           ;doprnt.c: 1393: (putch('-') );
  3887  00160E  0E2D               	movlw	45
  3888  001610  ECB2  F00E         	call	i2_putch
  3889  001614                     i2l1947:
  3890                           
  3891                           ;doprnt.c: 1415: if(width)
  3892  001614  501A               	movf	i2printf@width,w,c
  3893  001616  101B               	iorwf	i2printf@width+1,w,c
  3894  001618  B4D8               	btfsc	status,2,c
  3895  00161A  D01E               	goto	i2l1963
  3896                           
  3897                           ;doprnt.c: 1417: (putch('0') );
  3898                           
  3899                           ;doprnt.c: 1416: do
  3900  00161C  0E30               	movlw	48
  3901  00161E  ECB2  F00E         	call	i2_putch
  3902                           
  3903                           ;doprnt.c: 1418: while(--width);
  3904  001622  061A               	decf	i2printf@width,f,c
  3905  001624  A0D8               	btfss	status,0,c
  3906  001626  061B               	decf	i2printf@width+1,f,c
  3907  001628  D7F5               	goto	i2l1947
  3908  00162A                     i2l1953:
  3909                           
  3910                           ;doprnt.c: 1422: {
  3911                           ;doprnt.c: 1424: if(width
  3912                           ;doprnt.c: 1428: )
  3913  00162A  501A               	movf	i2printf@width,w,c
  3914  00162C  101B               	iorwf	i2printf@width+1,w,c
  3915  00162E  B4D8               	btfsc	status,2,c
  3916  001630  D00A               	goto	i2l1959
  3917  001632                     i2l1955:
  3918                           
  3919                           ;doprnt.c: 1430: (putch(' ') );
  3920  001632  0E20               	movlw	32
  3921  001634  ECB2  F00E         	call	i2_putch
  3922                           
  3923                           ;doprnt.c: 1431: while(--width);
  3924  001638  061A               	decf	i2printf@width,f,c
  3925  00163A  A0D8               	btfss	status,0,c
  3926  00163C  061B               	decf	i2printf@width+1,f,c
  3927  00163E  501A               	movf	i2printf@width,w,c
  3928  001640  101B               	iorwf	i2printf@width+1,w,c
  3929  001642  A4D8               	btfss	status,2,c
  3930  001644  D7F6               	goto	i2l1955
  3931  001646                     i2l1959:
  3932                           
  3933                           ;doprnt.c: 1438: if(flag & 0x03)
  3934  001646  C019  F00F         	movff	i2printf@flag,??i2_printf
  3935  00164A  0E03               	movlw	3
  3936  00164C  160F               	andwf	??i2_printf,f,c
  3937  00164E  B4D8               	btfsc	status,2,c
  3938  001650  D003               	goto	i2l1963
  3939                           
  3940                           ;doprnt.c: 1439: (putch('-') );
  3941  001652  0E2D               	movlw	45
  3942  001654  ECB2  F00E         	call	i2_putch
  3943  001658                     i2l1963:
  3944                           
  3945                           ;doprnt.c: 1469: }
  3946                           ;doprnt.c: 1472: prec = c;
  3947  001658  C01C  F016         	movff	i2printf@c,i2printf@prec
  3948                           
  3949                           ;doprnt.c: 1474: while(prec--) {
  3950  00165C  D050               	goto	i2l1977
  3951  00165E                     i2l1965:
  3952                           
  3953                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3954  00165E  5016               	movf	i2printf@prec,w,c
  3955  001660  0D02               	mullw	2
  3956  001662  0E12               	movlw	low _dpowers
  3957  001664  24F3               	addwf	prodl,w,c
  3958  001666  6EF6               	movwf	tblptrl,c
  3959  001668  0E10               	movlw	high _dpowers
  3960  00166A  20F4               	addwfc	prodh,w,c
  3961  00166C  6EF7               	movwf	tblptrh,c
  3962  00166E                     	if	0	;There are less than 3 active tblptr bytes
  3963  00166E                     	endif
  3964  00166E  0009               	tblrd		*+
  3965  001670  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  3966  001674  000A               	tblrd		*-
  3967  001676  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  3968  00167A  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3969  00167E  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3970  001682  EC32  F00D         	call	i2___lwdiv	;wreg free
  3971  001686  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  3972  00168A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  3973  00168E  0E00               	movlw	0
  3974  001690  6E0B               	movwf	i2___lwmod@divisor+1,c
  3975  001692  0E0A               	movlw	10
  3976  001694  6E0A               	movwf	i2___lwmod@divisor,c
  3977  001696  EC18  F00E         	call	i2___lwmod	;wreg free
  3978  00169A  5008               	movf	?i2___lwmod,w,c
  3979  00169C  0F30               	addlw	48
  3980  00169E  6E1C               	movwf	i2printf@c,c
  3981                           
  3982                           ;doprnt.c: 1491: break;
  3983  0016A0  D02B               	goto	i2l1975
  3984  0016A2                     i2l1967:
  3985                           
  3986                           ;doprnt.c: 1499: {
  3987                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3988  0016A2  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  3989  0016A6  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  3990  0016AA  5016               	movf	i2printf@prec,w,c
  3991  0016AC  0D02               	mullw	2
  3992  0016AE  0E1C               	movlw	low _hexpowers
  3993  0016B0  24F3               	addwf	prodl,w,c
  3994  0016B2  6EF6               	movwf	tblptrl,c
  3995  0016B4  0E10               	movlw	high _hexpowers
  3996  0016B6  20F4               	addwfc	prodh,w,c
  3997  0016B8  6EF7               	movwf	tblptrh,c
  3998  0016BA                     	if	0	;There are less than 3 active tblptr bytes
  3999  0016BA                     	endif
  4000  0016BA  0009               	tblrd		*+
  4001  0016BC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4002  0016C0  000A               	tblrd		*-
  4003  0016C2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4004  0016C6  EC32  F00D         	call	i2___lwdiv	;wreg free
  4005  0016CA  5001               	movf	?i2___lwdiv,w,c
  4006  0016CC  0B0F               	andlw	15
  4007  0016CE  6E13               	movwf	i2printf@idx,c
  4008                           
  4009                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4010  0016D0  5013               	movf	i2printf@idx,w,c
  4011  0016D2  0D01               	mullw	1
  4012  0016D4  0E59               	movlw	low STR_6
  4013  0016D6  24F3               	addwf	prodl,w,c
  4014  0016D8  6EF6               	movwf	tblptrl,c
  4015  0016DA  0E10               	movlw	high STR_6
  4016  0016DC  20F4               	addwfc	prodh,w,c
  4017  0016DE  6EF7               	movwf	tblptrh,c
  4018  0016E0                     	if	0	;There are less than 3 active tblptr bytes
  4019  0016E0                     	endif
  4020  0016E0  0008               	tblrd		*
  4021  0016E2  CFF5 F01C          	movff	tablat,i2printf@c
  4022                           
  4023                           ;doprnt.c: 1523: }
  4024                           
  4025                           ;doprnt.c: 1508: }
  4026                           ;doprnt.c: 1510: break;
  4027  0016E6  D008               	goto	i2l1975
  4028  0016E8                     i2l1973:
  4029  0016E8  5019               	movf	i2printf@flag,w,c
  4030  0016EA  0B80               	andlw	128
  4031                           
  4032                           ; Switch size 1, requested type "space"
  4033                           ; Number of cases is 2, Range of values is 0 to 128
  4034                           ; switch strategies available:
  4035                           ; Name         Instructions Cycles
  4036                           ; simple_byte            7     4 (average)
  4037                           ;	Chosen strategy is simple_byte
  4038  0016EC  0A00               	xorlw	0	; case 0
  4039  0016EE  B4D8               	btfsc	status,2,c
  4040  0016F0  D7B6               	goto	i2l1965
  4041  0016F2  0A80               	xorlw	128	; case 128
  4042  0016F4  B4D8               	btfsc	status,2,c
  4043  0016F6  D7D5               	goto	i2l1967
  4044  0016F8                     i2l1975:
  4045                           
  4046                           ;doprnt.c: 1524: (putch(c) );
  4047  0016F8  501C               	movf	i2printf@c,w,c
  4048  0016FA  ECB2  F00E         	call	i2_putch
  4049  0016FE                     i2l1977:
  4050  0016FE  0616               	decf	i2printf@prec,f,c
  4051  001700  2816               	incf	i2printf@prec,w,c
  4052  001702  A4D8               	btfss	status,2,c
  4053  001704  D7F1               	goto	i2l1973
  4054  001706                     i2l1979:
  4055  001706  C00D  FFF6         	movff	i2printf@f,tblptrl
  4056  00170A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4057  00170E  4A0D               	infsnz	i2printf@f,f,c
  4058  001710  2A0E               	incf	i2printf@f+1,f,c
  4059  001712                     	if	0	;tblptru may be non-zero
  4060  001712                     	endif
  4061  001712                     	if	0	;tblptru may be non-zero
  4062  001712                     	endif
  4063  001712  0008               	tblrd		*
  4064  001714  CFF5 F01C          	movff	tablat,i2printf@c
  4065  001718  501C               	movf	i2printf@c,w,c
  4066  00171A  B4D8               	btfsc	status,2,c
  4067  00171C  0012               	return	
  4068  00171E  D67F               	goto	i2l1853
  4069  001720                     __end_ofi2_printf:
  4070                           	opt stack 0
  4071                           pclatu	equ	0xFFB
  4072                           pclath	equ	0xFFA
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           intcon2	equ	0xFF1
  4081                           intcon3	equ	0xFF0
  4082                           postinc0	equ	0xFEE
  4083                           fsr0h	equ	0xFEA
  4084                           fsr0l	equ	0xFE9
  4085                           wreg	equ	0xFE8
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function i2_putch *****************
  4096 ;; Defined at:
  4097 ;;		line 31 in file "lcd.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  data            1    wreg     unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  data            1    2[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;Total ram usage:        1 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    1
  4118 ;; This function calls:
  4119 ;;		i2_lcdNibble
  4120 ;; This function is called by:
  4121 ;;		i2_printf
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text23
  4126  001D64                     __ptext23:
  4127                           	opt stack 0
  4128  001D64                     i2_putch:
  4129                           	opt stack 23
  4130                           
  4131                           ;incstack = 0
  4132                           ;i2putch@data stored from wreg
  4133  001D64  6E03               	movwf	i2putch@data,c
  4134                           
  4135                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4136  001D66  848C               	bsf	3980,2,c	;volatile
  4137                           
  4138                           ;lcd.c: 33: lcdNibble(data);
  4139  001D68  5003               	movf	i2putch@data,w,c
  4140  001D6A  ECAA  F00D         	call	i2_lcdNibble
  4141  001D6E  0012               	return		;funcret
  4142  001D70                     __end_ofi2_putch:
  4143                           	opt stack 0
  4144                           pclatu	equ	0xFFB
  4145                           pclath	equ	0xFFA
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           intcon2	equ	0xFF1
  4154                           intcon3	equ	0xFF0
  4155                           postinc0	equ	0xFEE
  4156                           fsr0h	equ	0xFEA
  4157                           fsr0l	equ	0xFE9
  4158                           wreg	equ	0xFE8
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           indf2	equ	0xFDF
  4162                           postinc2	equ	0xFDE
  4163                           postdec2	equ	0xFDD
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function i2_isdigit *****************
  4169 ;; Defined at:
  4170 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  c               1    wreg     unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  c               1    2[COMRAM] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:        3 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		i2_printf
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text24
  4198  001D02                     __ptext24:
  4199                           	opt stack 0
  4200  001D02                     i2_isdigit:
  4201                           	opt stack 24
  4202                           
  4203                           ;incstack = 0
  4204                           ;i2isdigit@c stored from wreg
  4205  001D02  6E03               	movwf	i2isdigit@c,c
  4206  001D04  0E00               	movlw	0
  4207  001D06  6E02               	movwf	i2_isdigit$507,c
  4208  001D08  0E3A               	movlw	58
  4209  001D0A  6003               	cpfslt	i2isdigit@c,c
  4210  001D0C  D005               	goto	i2l1757
  4211  001D0E  0E2F               	movlw	47
  4212  001D10  6403               	cpfsgt	i2isdigit@c,c
  4213  001D12  D002               	goto	i2l1757
  4214  001D14  0E01               	movlw	1
  4215  001D16  6E02               	movwf	i2_isdigit$507,c
  4216  001D18                     i2l1757:
  4217  001D18  C002  F001         	movff	i2_isdigit$507,??i2_isdigit
  4218  001D1C  3001               	rrcf	??i2_isdigit,w,c
  4219  001D1E  0012               	return	
  4220  001D20                     __end_ofi2_isdigit:
  4221                           	opt stack 0
  4222                           pclatu	equ	0xFFB
  4223                           pclath	equ	0xFFA
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           intcon2	equ	0xFF1
  4232                           intcon3	equ	0xFF0
  4233                           postinc0	equ	0xFEE
  4234                           fsr0h	equ	0xFEA
  4235                           fsr0l	equ	0xFE9
  4236                           wreg	equ	0xFE8
  4237                           fsr1h	equ	0xFE2
  4238                           fsr1l	equ	0xFE1
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function i2___wmul *****************
  4247 ;; Defined at:
  4248 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  multiplier      2    0[COMRAM] unsigned int 
  4251 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  __wmul          2    4[COMRAM] unsigned int 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2    0[COMRAM] unsigned int 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0, prodl, prodh
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:        6 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		i2_printf
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text25
  4277  001CBE                     __ptext25:
  4278                           	opt stack 0
  4279  001CBE                     i2___wmul:
  4280                           	opt stack 24
  4281                           
  4282                           ;incstack = 0
  4283  001CBE  5001               	movf	i2___wmul@multiplier,w,c
  4284  001CC0  0203               	mulwf	i2___wmul@multiplicand,c
  4285  001CC2  CFF3 F005          	movff	prodl,i2___wmul@product
  4286  001CC6  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4287  001CCA  5001               	movf	i2___wmul@multiplier,w,c
  4288  001CCC  0204               	mulwf	i2___wmul@multiplicand+1,c
  4289  001CCE  50F3               	movf	prodl,w,c
  4290  001CD0  2606               	addwf	i2___wmul@product+1,f,c
  4291  001CD2  5002               	movf	i2___wmul@multiplier+1,w,c
  4292  001CD4  0203               	mulwf	i2___wmul@multiplicand,c
  4293  001CD6  50F3               	movf	prodl,w,c
  4294  001CD8  2606               	addwf	i2___wmul@product+1,f,c
  4295  001CDA  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4296  001CDE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4297  001CE2  0012               	return	
  4298  001CE4                     __end_ofi2___wmul:
  4299                           	opt stack 0
  4300                           pclatu	equ	0xFFB
  4301                           pclath	equ	0xFFA
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           intcon	equ	0xFF2
  4309                           intcon2	equ	0xFF1
  4310                           intcon3	equ	0xFF0
  4311                           postinc0	equ	0xFEE
  4312                           fsr0h	equ	0xFEA
  4313                           fsr0l	equ	0xFE9
  4314                           wreg	equ	0xFE8
  4315                           fsr1h	equ	0xFE2
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function i2___lwmod *****************
  4325 ;; Defined at:
  4326 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  dividend        2    7[COMRAM] unsigned int 
  4329 ;;  divisor         2    9[COMRAM] unsigned int 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  2    7[COMRAM] unsigned int 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4341 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;Total ram usage:        5 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		i2_printf
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text26
  4355  001C30                     __ptext26:
  4356                           	opt stack 0
  4357  001C30                     i2___lwmod:
  4358                           	opt stack 24
  4359                           
  4360                           ;incstack = 0
  4361  001C30  500A               	movf	i2___lwmod@divisor,w,c
  4362  001C32  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4363  001C34  B4D8               	btfsc	status,2,c
  4364  001C36  D018               	goto	i2l682
  4365  001C38  0E01               	movlw	1
  4366  001C3A  6E0C               	movwf	i2___lwmod@counter,c
  4367  001C3C  D004               	goto	i2l1789
  4368  001C3E                     i2l1787:
  4369  001C3E  90D8               	bcf	status,0,c
  4370  001C40  360A               	rlcf	i2___lwmod@divisor,f,c
  4371  001C42  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4372  001C44  2A0C               	incf	i2___lwmod@counter,f,c
  4373  001C46                     i2l1789:
  4374  001C46  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4375  001C48  D7FA               	goto	i2l1787
  4376  001C4A                     i2l1791:
  4377  001C4A  500A               	movf	i2___lwmod@divisor,w,c
  4378  001C4C  5C08               	subwf	i2___lwmod@dividend,w,c
  4379  001C4E  500B               	movf	i2___lwmod@divisor+1,w,c
  4380  001C50  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4381  001C52  A0D8               	btfss	status,0,c
  4382  001C54  D004               	goto	i2l1795
  4383  001C56  500A               	movf	i2___lwmod@divisor,w,c
  4384  001C58  5E08               	subwf	i2___lwmod@dividend,f,c
  4385  001C5A  500B               	movf	i2___lwmod@divisor+1,w,c
  4386  001C5C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4387  001C5E                     i2l1795:
  4388  001C5E  90D8               	bcf	status,0,c
  4389  001C60  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4390  001C62  320A               	rrcf	i2___lwmod@divisor,f,c
  4391  001C64  2E0C               	decfsz	i2___lwmod@counter,f,c
  4392  001C66  D7F1               	goto	i2l1791
  4393  001C68                     i2l682:
  4394  001C68  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4395  001C6C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4396  001C70  0012               	return		;funcret
  4397  001C72                     __end_ofi2___lwmod:
  4398                           	opt stack 0
  4399                           pclatu	equ	0xFFB
  4400                           pclath	equ	0xFFA
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           intcon2	equ	0xFF1
  4409                           intcon3	equ	0xFF0
  4410                           postinc0	equ	0xFEE
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           fsr1h	equ	0xFE2
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function i2___lwdiv *****************
  4424 ;; Defined at:
  4425 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  dividend        2    0[COMRAM] unsigned int 
  4428 ;;  divisor         2    2[COMRAM] unsigned int 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4431 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  2    0[COMRAM] unsigned int 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4441 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;Total ram usage:        7 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; This function calls:
  4448 ;;		Nothing
  4449 ;; This function is called by:
  4450 ;;		i2_printf
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text27
  4455  001A64                     __ptext27:
  4456                           	opt stack 0
  4457  001A64                     i2___lwdiv:
  4458                           	opt stack 24
  4459                           
  4460                           ;incstack = 0
  4461  001A64  0E00               	movlw	0
  4462  001A66  6E06               	movwf	i2___lwdiv@quotient+1,c
  4463  001A68  0E00               	movlw	0
  4464  001A6A  6E05               	movwf	i2___lwdiv@quotient,c
  4465  001A6C  5003               	movf	i2___lwdiv@divisor,w,c
  4466  001A6E  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4467  001A70  B4D8               	btfsc	status,2,c
  4468  001A72  D01C               	goto	i2l672
  4469  001A74  0E01               	movlw	1
  4470  001A76  6E07               	movwf	i2___lwdiv@counter,c
  4471  001A78  D004               	goto	i2l1769
  4472  001A7A                     i2l1767:
  4473  001A7A  90D8               	bcf	status,0,c
  4474  001A7C  3603               	rlcf	i2___lwdiv@divisor,f,c
  4475  001A7E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4476  001A80  2A07               	incf	i2___lwdiv@counter,f,c
  4477  001A82                     i2l1769:
  4478  001A82  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4479  001A84  D7FA               	goto	i2l1767
  4480  001A86                     i2l1771:
  4481  001A86  90D8               	bcf	status,0,c
  4482  001A88  3605               	rlcf	i2___lwdiv@quotient,f,c
  4483  001A8A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4484  001A8C  5003               	movf	i2___lwdiv@divisor,w,c
  4485  001A8E  5C01               	subwf	i2___lwdiv@dividend,w,c
  4486  001A90  5004               	movf	i2___lwdiv@divisor+1,w,c
  4487  001A92  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4488  001A94  A0D8               	btfss	status,0,c
  4489  001A96  D005               	goto	i2l1779
  4490  001A98  5003               	movf	i2___lwdiv@divisor,w,c
  4491  001A9A  5E01               	subwf	i2___lwdiv@dividend,f,c
  4492  001A9C  5004               	movf	i2___lwdiv@divisor+1,w,c
  4493  001A9E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4494  001AA0  8005               	bsf	i2___lwdiv@quotient,0,c
  4495  001AA2                     i2l1779:
  4496  001AA2  90D8               	bcf	status,0,c
  4497  001AA4  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4498  001AA6  3203               	rrcf	i2___lwdiv@divisor,f,c
  4499  001AA8  2E07               	decfsz	i2___lwdiv@counter,f,c
  4500  001AAA  D7ED               	goto	i2l1771
  4501  001AAC                     i2l672:
  4502  001AAC  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4503  001AB0  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4504  001AB4  0012               	return		;funcret
  4505  001AB6                     __end_ofi2___lwdiv:
  4506                           	opt stack 0
  4507                           pclatu	equ	0xFFB
  4508                           pclath	equ	0xFFA
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           intcon2	equ	0xFF1
  4517                           intcon3	equ	0xFF0
  4518                           postinc0	equ	0xFEE
  4519                           fsr0h	equ	0xFEA
  4520                           fsr0l	equ	0xFE9
  4521                           wreg	equ	0xFE8
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function i2_lcdInst *****************
  4532 ;; Defined at:
  4533 ;;		line 26 in file "lcd.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  data            1    wreg     unsigned char 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  data            1    2[COMRAM] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        1 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    1
  4554 ;; This function calls:
  4555 ;;		i2_lcdNibble
  4556 ;; This function is called by:
  4557 ;;		_isr
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text28
  4562  001D70                     __ptext28:
  4563                           	opt stack 0
  4564  001D70                     i2_lcdInst:
  4565                           	opt stack 24
  4566                           
  4567                           ;incstack = 0
  4568                           ;i2lcdInst@data stored from wreg
  4569  001D70  6E03               	movwf	i2lcdInst@data,c
  4570                           
  4571                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4572  001D72  948C               	bcf	3980,2,c	;volatile
  4573                           
  4574                           ;lcd.c: 28: lcdNibble(data);
  4575  001D74  5003               	movf	i2lcdInst@data,w,c
  4576  001D76  ECAA  F00D         	call	i2_lcdNibble
  4577  001D7A  0012               	return		;funcret
  4578  001D7C                     __end_ofi2_lcdInst:
  4579                           	opt stack 0
  4580                           pclatu	equ	0xFFB
  4581                           pclath	equ	0xFFA
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           intcon2	equ	0xFF1
  4590                           intcon3	equ	0xFF0
  4591                           postinc0	equ	0xFEE
  4592                           fsr0h	equ	0xFEA
  4593                           fsr0l	equ	0xFE9
  4594                           wreg	equ	0xFE8
  4595                           fsr1h	equ	0xFE2
  4596                           fsr1l	equ	0xFE1
  4597                           indf2	equ	0xFDF
  4598                           postinc2	equ	0xFDE
  4599                           postdec2	equ	0xFDD
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function i2_lcdNibble *****************
  4605 ;; Defined at:
  4606 ;;		line 36 in file "lcd.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  data            1    wreg     unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  data            1    1[COMRAM] unsigned char 
  4611 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        2 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		i2_lcdInst
  4631 ;;		i2_putch
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text29
  4636  001B54                     __ptext29:
  4637                           	opt stack 0
  4638  001B54                     i2_lcdNibble:
  4639                           	opt stack 23
  4640                           
  4641                           ;incstack = 0
  4642                           ;i2lcdNibble@data stored from wreg
  4643  001B54  6E02               	movwf	i2lcdNibble@data,c
  4644                           
  4645                           ;lcd.c: 38: char temp = data & 0xF0;
  4646  001B56  5002               	movf	i2lcdNibble@data,w,c
  4647  001B58  0BF0               	andlw	240
  4648  001B5A  6E01               	movwf	i2lcdNibble@temp,c
  4649                           
  4650                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4651  001B5C  508C               	movf	3980,w,c	;volatile
  4652  001B5E  0B0F               	andlw	15
  4653  001B60  6E8C               	movwf	3980,c	;volatile
  4654                           
  4655                           ;lcd.c: 40: LATD = temp | LATD;
  4656  001B62  5001               	movf	i2lcdNibble@temp,w,c
  4657  001B64  108C               	iorwf	3980,w,c	;volatile
  4658  001B66  6E8C               	movwf	3980,c	;volatile
  4659                           
  4660                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4661  001B68  968C               	bcf	3980,3,c	;volatile
  4662                           
  4663                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4664  001B6A  0E19               	movlw	25
  4665  001B6C                     i2u200_47:
  4666  001B6C  2EE8               	decfsz	wreg,f,c
  4667  001B6E  D7FE               	bra	i2u200_47
  4668                           
  4669                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4670  001B70  868C               	bsf	3980,3,c	;volatile
  4671                           
  4672                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4673  001B72  0E19               	movlw	25
  4674  001B74                     i2u201_47:
  4675  001B74  2EE8               	decfsz	wreg,f,c
  4676  001B76  D7FE               	bra	i2u201_47
  4677                           
  4678                           ;lcd.c: 47: data = data << 4;
  4679  001B78  3802               	swapf	i2lcdNibble@data,w,c
  4680  001B7A  0BF0               	andlw	240
  4681  001B7C  6E02               	movwf	i2lcdNibble@data,c
  4682                           
  4683                           ;lcd.c: 49: temp = data & 0xF0;
  4684  001B7E  5002               	movf	i2lcdNibble@data,w,c
  4685  001B80  0BF0               	andlw	240
  4686  001B82  6E01               	movwf	i2lcdNibble@temp,c
  4687                           
  4688                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4689  001B84  508C               	movf	3980,w,c	;volatile
  4690  001B86  0B0F               	andlw	15
  4691  001B88  6E8C               	movwf	3980,c	;volatile
  4692                           
  4693                           ;lcd.c: 51: LATD = temp | LATD;
  4694  001B8A  5001               	movf	i2lcdNibble@temp,w,c
  4695  001B8C  108C               	iorwf	3980,w,c	;volatile
  4696  001B8E  6E8C               	movwf	3980,c	;volatile
  4697                           
  4698                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4699  001B90  968C               	bcf	3980,3,c	;volatile
  4700                           
  4701                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4702  001B92  0E19               	movlw	25
  4703  001B94                     i2u202_47:
  4704  001B94  2EE8               	decfsz	wreg,f,c
  4705  001B96  D7FE               	bra	i2u202_47
  4706                           
  4707                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4708  001B98  868C               	bsf	3980,3,c	;volatile
  4709                           
  4710                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4711  001B9A  0E19               	movlw	25
  4712  001B9C                     i2u203_47:
  4713  001B9C  2EE8               	decfsz	wreg,f,c
  4714  001B9E  D7FE               	bra	i2u203_47
  4715  001BA0  0012               	return		;funcret
  4716  001BA2                     __end_ofi2_lcdNibble:
  4717                           	opt stack 0
  4718                           pclatu	equ	0xFFB
  4719                           pclath	equ	0xFFA
  4720                           tblptru	equ	0xFF8
  4721                           tblptrh	equ	0xFF7
  4722                           tblptrl	equ	0xFF6
  4723                           tablat	equ	0xFF5
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           intcon2	equ	0xFF1
  4728                           intcon3	equ	0xFF0
  4729                           postinc0	equ	0xFEE
  4730                           fsr0h	equ	0xFEA
  4731                           fsr0l	equ	0xFE9
  4732                           wreg	equ	0xFE8
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           pclatu	equ	0xFFB
  4742                           pclath	equ	0xFFA
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           intcon2	equ	0xFF1
  4751                           intcon3	equ	0xFF0
  4752                           postinc0	equ	0xFEE
  4753                           fsr0h	equ	0xFEA
  4754                           fsr0l	equ	0xFE9
  4755                           wreg	equ	0xFE8
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           postinc2	equ	0xFDE
  4760                           postdec2	equ	0xFDD
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765                           	psect	rparam
  4766  0000                     pclatu	equ	0xFFB
  4767                           pclath	equ	0xFFA
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           intcon	equ	0xFF2
  4775                           intcon2	equ	0xFF1
  4776                           intcon3	equ	0xFF0
  4777                           postinc0	equ	0xFEE
  4778                           fsr0h	equ	0xFEA
  4779                           fsr0l	equ	0xFE9
  4780                           wreg	equ	0xFE8
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790                           	psect	temp
  4791  000050                     btemp:
  4792                           	opt stack 0
  4793  000050                     	ds	1
  4794  0000                     int$flags	set	btemp
  4795                           pclatu	equ	0xFFB
  4796                           pclath	equ	0xFFA
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           intcon3	equ	0xFF0
  4806                           postinc0	equ	0xFEE
  4807                           fsr0h	equ	0xFEA
  4808                           fsr0l	equ	0xFE9
  4809                           wreg	equ	0xFE8
  4810                           fsr1h	equ	0xFE2
  4811                           fsr1l	equ	0xFE1
  4812                           indf2	equ	0xFDF
  4813                           postinc2	equ	0xFDE
  4814                           postdec2	equ	0xFDD
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8


Data Sizes:
    Strings     95
    Constant    42
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      79
    BANK0           128     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_5(CODE[23]), STR_4(CODE[23]), STR_3(CODE[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_date_time
    _standby->_printf
    _initLCD->_lcdInst
    _date_time->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in COMRAM

    _isr->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _standby->_printf
    _date_time->_printf

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8108
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                            _initLCD
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              2     2      0    3497
                                             68 COMRAM     2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             47 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _date_time                                            3     3      0    4100
                                             68 COMRAM     3     3      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3362
                                             56 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             44 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     392
                                             44 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             51 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     549
                                             44 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             46 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             44 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             45 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                             45 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             44 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             57 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             44 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 16    16      0    2093
                                             28 COMRAM    16    16      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    1912
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
   _bottle_time
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A       A       5        7.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      4F       1       62.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      34        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 00:11:26 2017

                       l34 1D3A        ___wmul@multiplicand 002F         i2___lwdiv@dividend 0001  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l227 1190                        l619 1926                        l672 1A5A  
                      l682 1C26               __CFG_CPB$OFF 000000                        u110 1CB6  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      _isr 0008                        prod 000FF3                        wreg 000FE8  
             ?_bottle_time 0001               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1003 1CB8                       l2101 1A34                       l2121 1C08  
                     l2211 126E                       l2109 1A50                       l2125 1C1C  
                     l2117 1BFC                       l2221 12C2                       l2141 10C0  
                     l2119 1C04                       l2223 12CC                       l2151 10F8  
                     l2135 109A                       l2081 1CFA                       l2241 1326  
                     l2217 128E                       l2209 125C                       l2145 10C8  
                     l2313 17D0                       l2305 1778                       l2235 1300  
                     l2163 1160                       l2139 10AE                       l2237 130C  
                     l2245 1338                       l2229 12E4                       l2181 11EA  
                     l2261 13F8                       l2317 17D8                       l2341 1992  
                     l2247 133E                       l2255 13D2                       l2175 11C8  
                     l2159 115A                       l2343 1998                       l2097 1A28  
                     l2249 1386                       l2257 13E4                       l2193 1220  
                     l2337 1986                       l1723 18D8                       l2099 1A30  
                     l2259 13EC                       l2195 1226                       l2179 11E4  
                     l2339 198C                       l2347 199C                       l1725 18E4  
                     l1735 1918                       l1727 18E8                       l2295 1754  
                     l2299 175C                       ?_isr 0001                       STR_1 106A  
                     STR_2 1082                       STR_3 1078                       STR_4 102B  
                     STR_5 1042                       STR_6 1059                       u1235 19E6  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u1917 1AF8  
                     u1927 1BA8                       u1937 1BE2                       u1947 17DE  
                     u1957 1B1E                       u1967 1B26                       u1977 1B46  
                     u1987 1B4E                       _RCEN 007E2B                       _RSEN 007E29  
                     _main 1938                       _keys 1001                       _time 0048  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0050  
                     isr@i 002C                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 1D70  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 1B54  
            ?_bottle_count 0001                      ??_isr 001D           ?_I2C_Master_Init 003A  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___lldiv 1938            __end_of___lwdiv 1A64            __end_of___lwmod 1C30  
                    i2l227 1500                      i2l168 1878                      i2l672 1AAC  
                    i2l682 1C68                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 1D64             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initLCD 1BEE             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers 101C            __end_of_isdigit 1D02  
                    _putch 1D4C                      pclath 000FFA                      tablat 000FF5  
          __end_of_timeset 102B           __end_ofi2___wmul 1CE4            __end_of_standby 1B06  
                    status 000FD8             __CFG_PBADEN$ON 000000              i2printf@width 001A  
         __end_ofi2_printf 1720         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
          __initialization 1D20         __size_ofi2_lcdInst 000C             ??_bottle_count 002D  
             __end_of_main 19B8               __end_of_keys 1012                 i2printf@ap 0014  
       __size_ofi2_isdigit 001E                     ??_main 0048              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 002E         ??_I2C_Master_Start 002E  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0030  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l2013 182C  
                   i2l2021 1846                     i2l2031 1864                     i2l2015 1830  
                   i2l2027 185C                     i2l2019 1836                     i2l1911 1578  
                   i2l1913 157C                     i2l1771 1A86                     i2l1757 1D18  
                   i2l1941 15FE                     i2l1853 141E                     i2l1767 1A7A  
                   i2l1791 1C4A                     i2l1935 15D2                     i2l1927 15A8  
                   i2l1863 1442                     i2l1769 1A82                     i2l1953 162A  
                   i2l1929 15B8                     i2l1881 14D2                     i2l1857 142E  
                   i2l1779 1AA2                     i2l1795 1C5E                     i2l1787 1C3E  
                   i2l1955 1632                     i2l1963 1658                     i2l1947 1614  
                   i2l1939 15F6                     i2l1859 143C                     i2l1789 1C46  
                   i2l1965 165E                     i2l1973 16E8                     i2l1893 152E  
                   i2l1877 14CE                     i2l1869 1470                     i2l1967 16A2  
                   i2l1975 16F8                     i2l1959 1646                     i2l1977 16FE  
                   i2l1897 1548                     i2l1899 154C                     i2l1979 1706  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
                   ___wmul 1C72             __CFG_STVREN$ON 000000                  ??___lldiv 0035  
                ??___lwdiv 0031                  ??___lwmod 0038                     clear_0 1D26  
                ??_lcdInst 002F                     _printf 108C                  ??_initLCD 0030  
                ??_isdigit 002D          __end_ofi2___lwdiv 1AB6               __mediumconst 0000  
        __end_ofi2___lwmod 1C72                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_standby 0045          __end_ofi2_lcdInst 1D7C  
        __end_ofi2_isdigit 1D20       __size_of_bottle_time 0002                 __accesstop 0080  
  __end_of__initialization 1D2C              ___rparam_used 000001         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001              __end_of_putch 1D58                i2printf@idx 0013  
              i2printf@val 0017         __size_of_date_time 00CC                  ?i2___wmul 0001  
       __size_of_lcdNibble 004E                i2putch@data 0003                  ?i2_printf 000D  
     __end_of_bottle_count 1D9A                    ??_putch 002F               ?i2_lcdNibble 0001  
                  ?___wmul 002D                    ?_printf 0039                 ??i2___wmul 0005  
               ??i2_printf 000F                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_date_time 17EC                    i2_putch 1D64  
        __end_of_lcdNibble 1B54                    __Hparam 0000                    __Lparam 0000  
                  ___lldiv 18B6            __size_of___wmul 0026                    ___lwdiv 1A12  
                  ___lwmod 1BEE               __psmallconst 1000                 _curr_state 004F  
                  __pcinit 1D20                    __ramtop 1000                    _lcdInst 1D58  
                  __ptext0 1938                    __ptext1 1AB6                    __ptext2 1BA2  
                  __ptext3 1720                    __ptext4 108C                    __ptext5 1D4C  
                  __ptext6 1CE4                    __ptext7 1C72                    __ptext8 1BEE  
                  __ptext9 1A12            __size_of_printf 0388                    _initLCD 1BA2  
        __end_of_hexpowers 1024              i2_isdigit$507 0002                    _dpowers 1012  
                  _isdigit 1CE4               __size_of_isr 18AE   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012                 date_time@i 0047  
 __size_of_I2C_Master_Stop 0008                    _timeset 1024                    _standby 1AB6  
           __pintcode_body 17EC       end_of_initialization 1D2C              __Lmediumconst 0000  
                  int_func 17EC        i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0031            ___lldiv@counter 0039  
                  printf@c 0089                    printf@f 0039           I2C_Master_Init@c 003A  
         I2C_Master_Read@a 002E                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE      __size_of_bottle_count 0002          i2___lwdiv@divisor 0003  
                i2___lwdiv 1A64                  i2___lwmod 1C30          i2___lwdiv@counter 0007  
                i2_lcdInst 1D70                printf@width 0087                  i2_isdigit 1D02  
             _bottle_count 1D98             __end_of___wmul 1C98       __size_ofi2_lcdNibble 004E  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 1414  
             i2printf@flag 0019               i2printf@prec 0016        start_initialization 1D20  
        __size_ofi2___wmul 0026                __end_of_isr 18B6                  i2printf@c 001C  
                i2printf@f 000D              ??_bottle_time 002D                 ?i2___lwdiv 0001  
               ?i2___lwmod 0008          __size_ofi2_printf 030C          ??_I2C_Master_Init 003E  
        ??_I2C_Master_Read 002E          ??_I2C_Master_Wait 002D                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 002E                 ?i2_isdigit 0001                   ??___wmul 0031  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0041                __pbssCOMRAM 0048  
            __pcstackBANK0 0080          i2___lwmod@divisor 000A          i2___lwmod@counter 000C  
                 ?i2_putch 0001        __end_of_bottle_time 1D98           _I2C_Master_Start 1D8E  
         _I2C_Master_Write 1D7C                  _date_time 1720           ___lwdiv@dividend 002D  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008                  _lcdNibble 1B06  
                 ?___lldiv 002D                   ?___lwdiv 002D                   ?___lwmod 0034  
                 ?_lcdInst 0001                   ?_initLCD 0001                __smallconst 1000  
                 ?_isdigit 0001                  _hexpowers 101C                   ?_standby 0001  
         ___lwdiv@quotient 0032                ??i2___lwdiv 0005                ??i2___lwmod 000C  
           __size_of_putch 000C                ??i2_lcdInst 0003             ___wmul@product 0031  
                 _LATDbits 000F8C                ??i2_isdigit 0001                 ?_date_time 0001  
                 i2u200_47 1B6C                   i2u201_47 1B74                   i2u202_47 1B94  
                 i2u203_47 1B9C                   i2u199_47 186A           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001          ___wmul@multiplier 002D                   i2___wmul 1CBE  
            lcdNibble@data 002E                 printf@flag 0086              lcdNibble@temp 002D  
               printf@prec 0083                   i2_printf 1414                _bottle_time 1D96  
      I2C_Master_Read@temp 002F           __size_ofi2_putch 000C                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000      i2___wmul@multiplicand 0003  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
              _isdigit$507 002E           __size_of_lcdInst 000C            _I2C_Master_Init 19B8  
          _I2C_Master_Read 1C98           __size_of_initLCD 004C            _I2C_Master_Wait 1D3A  
          _I2C_Master_Stop 1D86           __size_of_isdigit 001E            ___lwdiv@divisor 002F  
          ___lwdiv@counter 0031                   __ptext10 1D58                   __ptext11 1B06  
                 __ptext20 18B6                   __ptext12 1D7C                   __ptext13 1D86  
                 __ptext22 1414                   __ptext14 1D8E                   __ptext23 1D64  
                 __ptext15 1C98                   __ptext24 1D02                   __ptext16 1D3A  
                 __ptext25 1CBE                   __ptext17 1D96                   __ptext26 1C30  
                 __ptext18 1D98                   __ptext27 1A64                   __ptext19 19B8  
                 __ptext28 1D70                   __ptext29 1B54           __size_of_standby 0050  
            __size_of_main 0080                ??_date_time 0045              ??i2_lcdNibble 0001  
              ??_lcdNibble 002D                   int$flags 0050                  printf@idx 0080  
                printf@val 0084                  putch@data 002F   __end_of_I2C_Master_Start 1D96  
 __end_of_I2C_Master_Write 1D86                 _INTCONbits 000FF2                   isdigit@c 002F  
                 intlevel2 0000           ___lwmod@dividend 0034           ___lldiv@dividend 002D  
                 printf@ap 0081    __end_of_I2C_Master_Init 1A12    __end_of_I2C_Master_Read 1CBE  
  __end_of_I2C_Master_Wait 1D4C    __end_of_I2C_Master_Stop 1D8E                lcdInst@data 002F  
           date_time@i_255 0046        __end_ofi2_lcdNibble 1BA2           ___lldiv@quotient 0035  
        I2C_Master_Write@d 002E            ___lwmod@divisor 0036            ___lwmod@counter 0038  



Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 22:55:15 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 1.40
    83                           ; Generated 01/12/2016 GMT
    84                           ; 
    85                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4620 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataBANK0
   118  0030B4                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _bottle_count_disp
   122  0030B4  FFFF               	dw	65535
   123                           
   124                           	psect	mediumconst
   125  00FDBE                     __pmediumconst:
   126                           	opt stack 0
   127  00FDBE  00                 	db	0
   128  00FDBF                     _keys:
   129                           	opt stack 0
   130  00FDBF  31                 	db	49
   131  00FDC0  32                 	db	50
   132  00FDC1  33                 	db	51
   133  00FDC2  41                 	db	65
   134  00FDC3  34                 	db	52
   135  00FDC4  35                 	db	53
   136  00FDC5  36                 	db	54
   137  00FDC6  42                 	db	66
   138  00FDC7  37                 	db	55
   139  00FDC8  38                 	db	56
   140  00FDC9  39                 	db	57
   141  00FDCA  43                 	db	67
   142  00FDCB  2A                 	db	42
   143  00FDCC  30                 	db	48
   144  00FDCD  23                 	db	35
   145  00FDCE  44                 	db	68
   146  00FDCF  00                 	db	0
   147  00FDD0                     __end_of_keys:
   148                           	opt stack 0
   149  00FDD0                     _octpowers:
   150                           	opt stack 0
   151  00FDD0  0001               	dw	1
   152  00FDD2  0008               	dw	8
   153  00FDD4  0040               	dw	64
   154  00FDD6  0200               	dw	512
   155  00FDD8  1000               	dw	4096
   156  00FDDA  8000               	dw	32768
   157  00FDDC                     __end_of_octpowers:
   158                           	opt stack 0
   159  00FDDC                     _dpowers:
   160                           	opt stack 0
   161  00FDDC  0001               	dw	1
   162  00FDDE  000A               	dw	10
   163  00FDE0  0064               	dw	100
   164  00FDE2  03E8               	dw	1000
   165  00FDE4  2710               	dw	10000
   166  00FDE6                     __end_of_dpowers:
   167                           	opt stack 0
   168  00FDE6                     _hexpowers:
   169                           	opt stack 0
   170  00FDE6  0001               	dw	1
   171  00FDE8  0010               	dw	16
   172  00FDEA  0100               	dw	256
   173  00FDEC  1000               	dw	4096
   174  00FDEE                     __end_of_hexpowers:
   175                           	opt stack 0
   176  00FDEE                     _timeset:
   177                           	opt stack 0
   178  00FDEE  50                 	db	80
   179  00FDEF  35                 	db	53
   180  00FDF0  21                 	db	33
   181  00FDF1  08                 	db	8
   182  00FDF2  05                 	db	5
   183  00FDF3  02                 	db	2
   184  00FDF4  17                 	db	23
   185  00FDF5                     __end_of_timeset:
   186                           	opt stack 0
   187  00FDF5                     exp@coeff:
   188                           	opt stack 0
   189  00FDF5  00                 	db	0
   190  00FDF6  80                 	db	128
   191  00FDF7  3F                 	db	63
   192  00FDF8  72                 	db	114
   193  00FDF9  31                 	db	49
   194  00FDFA  3F                 	db	63
   195  00FDFB  FE                 	db	254
   196  00FDFC  75                 	db	117
   197  00FDFD  3E                 	db	62
   198  00FDFE  58                 	db	88
   199  00FDFF  63                 	db	99
   200  00FE00  3D                 	db	61
   201  00FE01  95                 	db	149
   202  00FE02  1D                 	db	29
   203  00FE03  3C                 	db	60
   204  00FE04  C5                 	db	197
   205  00FE05  AE                 	db	174
   206  00FE06  3A                 	db	58
   207  00FE07  79                 	db	121
   208  00FE08  21                 	db	33
   209  00FE09  39                 	db	57
   210  00FE0A  94                 	db	148
   211  00FE0B  80                 	db	128
   212  00FE0C  37                 	db	55
   213  00FE0D  93                 	db	147
   214  00FE0E  A7                 	db	167
   215  00FE0F  35                 	db	53
   216  00FE10  56                 	db	86
   217  00FE11  15                 	db	21
   218  00FE12  34                 	db	52
   219  00FE13                     __end_ofexp@coeff:
   220                           	opt stack 0
   221  00FE13                     log@coeff:
   222                           	opt stack 0
   223  00FE13  00                 	db	0
   224  00FE14  00                 	db	0
   225  00FE15  00                 	db	0
   226  00FE16  00                 	db	0
   227  00FE17  80                 	db	128
   228  00FE18  3F                 	db	63
   229  00FE19  F0                 	db	240
   230  00FE1A  FF                 	db	255
   231  00FE1B  BE                 	db	190
   232  00FE1C  E2                 	db	226
   233  00FE1D  A9                 	db	169
   234  00FE1E  3E                 	db	62
   235  00FE1F  83                 	db	131
   236  00FE20  76                 	db	118
   237  00FE21  BE                 	db	190
   238  00FE22  AE                 	db	174
   239  00FE23  2B                 	db	43
   240  00FE24  3E                 	db	62
   241  00FE25  3C                 	db	60
   242  00FE26  C3                 	db	195
   243  00FE27  BD                 	db	189
   244  00FE28  D2                 	db	210
   245  00FE29  13                 	db	19
   246  00FE2A  3D                 	db	61
   247  00FE2B  78                 	db	120
   248  00FE2C  D3                 	db	211
   249  00FE2D  BB                 	db	187
   250  00FE2E                     __end_oflog@coeff:
   251                           	opt stack 0
   252  0000                     _TMR0	set	4054
   253  0000                     _ADCON0	set	4034
   254  0000                     _ADCON1	set	4033
   255  0000                     _INTCONbits	set	4082
   256  0000                     _LATA	set	3977
   257  0000                     _LATB	set	3978
   258  0000                     _LATC	set	3979
   259  0000                     _LATD	set	3980
   260  0000                     _LATDbits	set	3980
   261  0000                     _LATE	set	3981
   262  0000                     _PORTB	set	3969
   263  0000                     _PORTCbits	set	3970
   264  0000                     _SSPADD	set	4040
   265  0000                     _SSPBUF	set	4041
   266  0000                     _SSPCON1	set	4038
   267  0000                     _SSPCON2	set	4037
   268  0000                     _SSPSTAT	set	4039
   269  0000                     _TRISA	set	3986
   270  0000                     _TRISB	set	3987
   271  0000                     _TRISC	set	3988
   272  0000                     _TRISD	set	3989
   273  0000                     _TRISE	set	3990
   274  0000                     _ACKDT	set	32301
   275  0000                     _ACKEN	set	32300
   276  0000                     _INT1IE	set	32643
   277  0000                     _INT1IF	set	32640
   278  0000                     _PEN	set	32298
   279  0000                     _PSA	set	32427
   280  0000                     _RCEN	set	32299
   281  0000                     _RSEN	set	32297
   282  0000                     _SEN	set	32296
   283  0000                     _T08BIT	set	32430
   284  0000                     _T0CS	set	32429
   285  0000                     _T0PS0	set	32424
   286  0000                     _T0PS1	set	32425
   287  0000                     _T0PS2	set	32426
   288  0000                     _TMR0IE	set	32661
   289  0000                     _TMR0IF	set	32658
   290  0000                     _TMR0ON	set	32431
   291  0000                     _TRISC3	set	31907
   292  0000                     _TRISC4	set	31908
   293  0000                     _nRBPU	set	32655
   294  00FE2E                     STR_22:
   295  00FE2E  52                 	db	82	;'R'
   296  00FE2F  75                 	db	117	;'u'
   297  00FE30  6E                 	db	110	;'n'
   298  00FE31  6E                 	db	110	;'n'
   299  00FE32  69                 	db	105	;'i'
   300  00FE33  6E                 	db	110	;'n'
   301  00FE34  67                 	db	103	;'g'
   302  00FE35  7E                 	db	126
   303  00FE36  7E                 	db	126
   304  00FE37  7E                 	db	126
   305  00FE38  20                 	db	32
   306  00FE39  20                 	db	32
   307  00FE3A  20                 	db	32
   308  00FE3B  20                 	db	32
   309  00FE3C  20                 	db	32
   310  00FE3D  20                 	db	32
   311  00FE3E  20                 	db	32
   312  00FE3F  20                 	db	32
   313  00FE40  20                 	db	32
   314  00FE41  20                 	db	32
   315  00FE42  20                 	db	32
   316  00FE43  20                 	db	32
   317  00FE44  20                 	db	32
   318  00FE45  20                 	db	32
   319  00FE46  00                 	db	0
   320  00FE47                     STR_21:
   321  00FE47  52                 	db	82	;'R'
   322  00FE48  75                 	db	117	;'u'
   323  00FE49  6E                 	db	110	;'n'
   324  00FE4A  6E                 	db	110	;'n'
   325  00FE4B  69                 	db	105	;'i'
   326  00FE4C  6E                 	db	110	;'n'
   327  00FE4D  67                 	db	103	;'g'
   328  00FE4E  7E                 	db	126
   329  00FE4F  7E                 	db	126
   330  00FE50  20                 	db	32
   331  00FE51  20                 	db	32
   332  00FE52  20                 	db	32
   333  00FE53  20                 	db	32
   334  00FE54  20                 	db	32
   335  00FE55  20                 	db	32
   336  00FE56  20                 	db	32
   337  00FE57  20                 	db	32
   338  00FE58  20                 	db	32
   339  00FE59  20                 	db	32
   340  00FE5A  20                 	db	32
   341  00FE5B  20                 	db	32
   342  00FE5C  20                 	db	32
   343  00FE5D  20                 	db	32
   344  00FE5E  00                 	db	0
   345  00FE5F                     STR_19:
   346  00FE5F  52                 	db	82	;'R'
   347  00FE60  75                 	db	117	;'u'
   348  00FE61  6E                 	db	110	;'n'
   349  00FE62  6E                 	db	110	;'n'
   350  00FE63  69                 	db	105	;'i'
   351  00FE64  6E                 	db	110	;'n'
   352  00FE65  67                 	db	103	;'g'
   353  00FE66  7E                 	db	126
   354  00FE67  20                 	db	32
   355  00FE68  20                 	db	32
   356  00FE69  20                 	db	32
   357  00FE6A  20                 	db	32
   358  00FE6B  20                 	db	32
   359  00FE6C  20                 	db	32
   360  00FE6D  20                 	db	32
   361  00FE6E  20                 	db	32
   362  00FE6F  20                 	db	32
   363  00FE70  20                 	db	32
   364  00FE71  20                 	db	32
   365  00FE72  20                 	db	32
   366  00FE73  20                 	db	32
   367  00FE74  20                 	db	32
   368  00FE75  00                 	db	0
   369  00FE76                     STR_17:
   370  00FE76  54                 	db	84	;'T'
   371  00FE77  6F                 	db	111	;'o'
   372  00FE78  74                 	db	116	;'t'
   373  00FE79  61                 	db	97	;'a'
   374  00FE7A  6C                 	db	108	;'l'
   375  00FE7B  20                 	db	32
   376  00FE7C  4F                 	db	79	;'O'
   377  00FE7D  70                 	db	112	;'p'
   378  00FE7E  65                 	db	101	;'e'
   379  00FE7F  72                 	db	114	;'r'
   380  00FE80  61                 	db	97	;'a'
   381  00FE81  74                 	db	116	;'t'
   382  00FE82  69                 	db	105	;'i'
   383  00FE83  6F                 	db	111	;'o'
   384  00FE84  6E                 	db	110	;'n'
   385  00FE85  20                 	db	32
   386  00FE86  20                 	db	32
   387  00FE87  20                 	db	32
   388  00FE88  20                 	db	32
   389  00FE89  20                 	db	32
   390  00FE8A  20                 	db	32
   391  00FE8B  20                 	db	32
   392  00FE8C  00                 	db	0
   393  00FE8D                     STR_4:
   394  00FE8D  44                 	db	68	;'D'
   395  00FE8E  61                 	db	97	;'a'
   396  00FE8F  74                 	db	116	;'t'
   397  00FE90  65                 	db	101	;'e'
   398  00FE91  3A                 	db	58	;':'
   399  00FE92  20                 	db	32
   400  00FE93  25                 	db	37
   401  00FE94  30                 	db	48	;'0'
   402  00FE95  32                 	db	50	;'2'
   403  00FE96  78                 	db	120	;'x'
   404  00FE97  2F                 	db	47
   405  00FE98  25                 	db	37
   406  00FE99  30                 	db	48	;'0'
   407  00FE9A  32                 	db	50	;'2'
   408  00FE9B  78                 	db	120	;'x'
   409  00FE9C  2F                 	db	47
   410  00FE9D  25                 	db	37
   411  00FE9E  30                 	db	48	;'0'
   412  00FE9F  32                 	db	50	;'2'
   413  00FEA0  78                 	db	120	;'x'
   414  00FEA1  20                 	db	32
   415  00FEA2  20                 	db	32
   416  00FEA3  00                 	db	0
   417  00FEA4                     STR_5:
   418  00FEA4  54                 	db	84	;'T'
   419  00FEA5  69                 	db	105	;'i'
   420  00FEA6  6D                 	db	109	;'m'
   421  00FEA7  65                 	db	101	;'e'
   422  00FEA8  3A                 	db	58	;':'
   423  00FEA9  20                 	db	32
   424  00FEAA  25                 	db	37
   425  00FEAB  30                 	db	48	;'0'
   426  00FEAC  32                 	db	50	;'2'
   427  00FEAD  78                 	db	120	;'x'
   428  00FEAE  3A                 	db	58	;':'
   429  00FEAF  25                 	db	37
   430  00FEB0  30                 	db	48	;'0'
   431  00FEB1  32                 	db	50	;'2'
   432  00FEB2  78                 	db	120	;'x'
   433  00FEB3  3A                 	db	58	;':'
   434  00FEB4  25                 	db	37
   435  00FEB5  30                 	db	48	;'0'
   436  00FEB6  32                 	db	50	;'2'
   437  00FEB7  78                 	db	120	;'x'
   438  00FEB8  20                 	db	32
   439  00FEB9  20                 	db	32
   440  00FEBA  00                 	db	0
   441  00FEBB                     STR_20:
   442  00FEBB  43                 	db	67	;'C'
   443  00FEBC  3A                 	db	58	;':'
   444  00FEBD  20                 	db	32
   445  00FEBE  25                 	db	37
   446  00FEBF  64                 	db	100	;'d'
   447  00FEC0  20                 	db	32
   448  00FEC1  20                 	db	32
   449  00FEC2  20                 	db	32
   450  00FEC3  20                 	db	32
   451  00FEC4  20                 	db	32
   452  00FEC5  20                 	db	32
   453  00FEC6  20                 	db	32
   454  00FEC7  20                 	db	32
   455  00FEC8  20                 	db	32
   456  00FEC9  20                 	db	32
   457  00FECA  20                 	db	32
   458  00FECB  20                 	db	32
   459  00FECC  20                 	db	32
   460  00FECD  20                 	db	32
   461  00FECE  20                 	db	32
   462  00FECF  20                 	db	32
   463  00FED0  00                 	db	0
   464  00FED1                     STR_18:
   465  00FED1  54                 	db	84	;'T'
   466  00FED2  69                 	db	105	;'i'
   467  00FED3  6D                 	db	109	;'m'
   468  00FED4  65                 	db	101	;'e'
   469  00FED5  3A                 	db	58	;':'
   470  00FED6  20                 	db	32
   471  00FED7  25                 	db	37
   472  00FED8  64                 	db	100	;'d'
   473  00FED9  20                 	db	32
   474  00FEDA  73                 	db	115	;'s'
   475  00FEDB  20                 	db	32
   476  00FEDC  20                 	db	32
   477  00FEDD  20                 	db	32
   478  00FEDE  20                 	db	32
   479  00FEDF  20                 	db	32
   480  00FEE0  20                 	db	32
   481  00FEE1  20                 	db	32
   482  00FEE2  00                 	db	0
   483  00FEE3                     STR_25:
   484  00FEE3  30                 	db	48	;'0'
   485  00FEE4  31                 	db	49	;'1'
   486  00FEE5  32                 	db	50	;'2'
   487  00FEE6  33                 	db	51	;'3'
   488  00FEE7  34                 	db	52	;'4'
   489  00FEE8  35                 	db	53	;'5'
   490  00FEE9  36                 	db	54	;'6'
   491  00FEEA  37                 	db	55	;'7'
   492  00FEEB  38                 	db	56	;'8'
   493  00FEEC  39                 	db	57	;'9'
   494  00FEED  41                 	db	65	;'A'
   495  00FEEE  42                 	db	66	;'B'
   496  00FEEF  43                 	db	67	;'C'
   497  00FEF0  44                 	db	68	;'D'
   498  00FEF1  45                 	db	69	;'E'
   499  00FEF2  46                 	db	70	;'F'
   500  00FEF3  00                 	db	0
   501  00FEF4                     STR_26:
   502  00FEF4  30                 	db	48	;'0'
   503  00FEF5  31                 	db	49	;'1'
   504  00FEF6  32                 	db	50	;'2'
   505  00FEF7  33                 	db	51	;'3'
   506  00FEF8  34                 	db	52	;'4'
   507  00FEF9  35                 	db	53	;'5'
   508  00FEFA  36                 	db	54	;'6'
   509  00FEFB  37                 	db	55	;'7'
   510  00FEFC  38                 	db	56	;'8'
   511  00FEFD  39                 	db	57	;'9'
   512  00FEFE  61                 	db	97	;'a'
   513  00FEFF  62                 	db	98	;'b'
   514  00FF00  63                 	db	99	;'c'
   515  00FF01  64                 	db	100	;'d'
   516  00FF02  65                 	db	101	;'e'
   517  00FF03  66                 	db	102	;'f'
   518  00FF04  00                 	db	0
   519  00FF05                     STR_2:
   520  00FF05  73                 	db	115	;'s'
   521  00FF06  74                 	db	116	;'t'
   522  00FF07  61                 	db	97	;'a'
   523  00FF08  6E                 	db	110	;'n'
   524  00FF09  64                 	db	100	;'d'
   525  00FF0A  62                 	db	98	;'b'
   526  00FF0B  79                 	db	121	;'y'
   527  00FF0C  20                 	db	32
   528  00FF0D  20                 	db	32
   529  00FF0E  20                 	db	32
   530  00FF0F  20                 	db	32
   531  00FF10  20                 	db	32
   532  00FF11  20                 	db	32
   533  00FF12  20                 	db	32
   534  00FF13  20                 	db	32
   535  00FF14  20                 	db	32
   536  00FF15  00                 	db	0
   537  00FF16                     STR_7:
   538  00FF16  54                 	db	84	;'T'
   539  00FF17  6F                 	db	111	;'o'
   540  00FF18  74                 	db	116	;'t'
   541  00FF19  61                 	db	97	;'a'
   542  00FF1A  6C                 	db	108	;'l'
   543  00FF1B  3A                 	db	58	;':'
   544  00FF1C  20                 	db	32
   545  00FF1D  31                 	db	49	;'1'
   546  00FF1E  30                 	db	48	;'0'
   547  00FF1F  20                 	db	32
   548  00FF20  20                 	db	32
   549  00FF21  20                 	db	32
   550  00FF22  20                 	db	32
   551  00FF23  20                 	db	32
   552  00FF24  20                 	db	32
   553  00FF25  20                 	db	32
   554  00FF26  00                 	db	0
   555  00FF27                     STR_6:
   556  00FF27  42                 	db	66	;'B'
   557  00FF28  6F                 	db	111	;'o'
   558  00FF29  74                 	db	116	;'t'
   559  00FF2A  74                 	db	116	;'t'
   560  00FF2B  6C                 	db	108	;'l'
   561  00FF2C  65                 	db	101	;'e'
   562  00FF2D  20                 	db	32
   563  00FF2E  43                 	db	67	;'C'
   564  00FF2F  6F                 	db	111	;'o'
   565  00FF30  75                 	db	117	;'u'
   566  00FF31  6E                 	db	110	;'n'
   567  00FF32  74                 	db	116	;'t'
   568  00FF33  20                 	db	32
   569  00FF34  20                 	db	32
   570  00FF35  20                 	db	32
   571  00FF36  20                 	db	32
   572  00FF37  00                 	db	0
   573  00FF38                     STR_11:
   574  00FF38  59                 	db	89	;'Y'
   575  00FF39  4F                 	db	79	;'O'
   576  00FF3A  50                 	db	80	;'P'
   577  00FF3B  2D                 	db	45
   578  00FF3C  43                 	db	67	;'C'
   579  00FF3D  41                 	db	65	;'A'
   580  00FF3E  50                 	db	80	;'P'
   581  00FF3F  2D                 	db	45
   582  00FF40  4C                 	db	76	;'L'
   583  00FF41  42                 	db	66	;'B'
   584  00FF42  4C                 	db	76	;'L'
   585  00FF43  3A                 	db	58	;':'
   586  00FF44  20                 	db	32
   587  00FF45  30                 	db	48	;'0'
   588  00FF46  20                 	db	32
   589  00FF47  20                 	db	32
   590  00FF48  00                 	db	0
   591  00FF49                     STR_10:
   592  00FF49  59                 	db	89	;'Y'
   593  00FF4A  4F                 	db	79	;'O'
   594  00FF4B  50                 	db	80	;'P'
   595  00FF4C  2D                 	db	45
   596  00FF4D  43                 	db	67	;'C'
   597  00FF4E  41                 	db	65	;'A'
   598  00FF4F  50                 	db	80	;'P'
   599  00FF50  2B                 	db	43
   600  00FF51  4C                 	db	76	;'L'
   601  00FF52  42                 	db	66	;'B'
   602  00FF53  4C                 	db	76	;'L'
   603  00FF54  3A                 	db	58	;':'
   604  00FF55  20                 	db	32
   605  00FF56  31                 	db	49	;'1'
   606  00FF57  20                 	db	32
   607  00FF58  20                 	db	32
   608  00FF59  00                 	db	0
   609  00FF5A                     STR_9:
   610  00FF5A  59                 	db	89	;'Y'
   611  00FF5B  4F                 	db	79	;'O'
   612  00FF5C  50                 	db	80	;'P'
   613  00FF5D  2B                 	db	43
   614  00FF5E  43                 	db	67	;'C'
   615  00FF5F  41                 	db	65	;'A'
   616  00FF60  50                 	db	80	;'P'
   617  00FF61  2D                 	db	45
   618  00FF62  4C                 	db	76	;'L'
   619  00FF63  42                 	db	66	;'B'
   620  00FF64  4C                 	db	76	;'L'
   621  00FF65  3A                 	db	58	;':'
   622  00FF66  20                 	db	32
   623  00FF67  31                 	db	49	;'1'
   624  00FF68  20                 	db	32
   625  00FF69  20                 	db	32
   626  00FF6A  00                 	db	0
   627  00FF6B                     STR_8:
   628  00FF6B  59                 	db	89	;'Y'
   629  00FF6C  4F                 	db	79	;'O'
   630  00FF6D  50                 	db	80	;'P'
   631  00FF6E  2B                 	db	43
   632  00FF6F  43                 	db	67	;'C'
   633  00FF70  41                 	db	65	;'A'
   634  00FF71  50                 	db	80	;'P'
   635  00FF72  2B                 	db	43
   636  00FF73  4C                 	db	76	;'L'
   637  00FF74  42                 	db	66	;'B'
   638  00FF75  4C                 	db	76	;'L'
   639  00FF76  3A                 	db	58	;':'
   640  00FF77  20                 	db	32
   641  00FF78  33                 	db	51	;'3'
   642  00FF79  20                 	db	32
   643  00FF7A  20                 	db	32
   644  00FF7B  00                 	db	0
   645  00FF7C                     STR_12:
   646  00FF7C  45                 	db	69	;'E'
   647  00FF7D  53                 	db	83	;'S'
   648  00FF7E  4B                 	db	75	;'K'
   649  00FF7F  41                 	db	65	;'A'
   650  00FF80  2B                 	db	43
   651  00FF81  43                 	db	67	;'C'
   652  00FF82  41                 	db	65	;'A'
   653  00FF83  50                 	db	80	;'P'
   654  00FF84  2B                 	db	43
   655  00FF85  4C                 	db	76	;'L'
   656  00FF86  42                 	db	66	;'B'
   657  00FF87  4C                 	db	76	;'L'
   658  00FF88  3A                 	db	58	;':'
   659  00FF89  20                 	db	32
   660  00FF8A  31                 	db	49	;'1'
   661  00FF8B  20                 	db	32
   662  00FF8C  00                 	db	0
   663  00FF8D                     STR_14:
   664  00FF8D  45                 	db	69	;'E'
   665  00FF8E  53                 	db	83	;'S'
   666  00FF8F  4B                 	db	75	;'K'
   667  00FF90  41                 	db	65	;'A'
   668  00FF91  2D                 	db	45
   669  00FF92  43                 	db	67	;'C'
   670  00FF93  41                 	db	65	;'A'
   671  00FF94  50                 	db	80	;'P'
   672  00FF95  2B                 	db	43
   673  00FF96  4C                 	db	76	;'L'
   674  00FF97  42                 	db	66	;'B'
   675  00FF98  4C                 	db	76	;'L'
   676  00FF99  3A                 	db	58	;':'
   677  00FF9A  20                 	db	32
   678  00FF9B  31                 	db	49	;'1'
   679  00FF9C  20                 	db	32
   680  00FF9D  00                 	db	0
   681  00FF9E                     STR_13:
   682  00FF9E  45                 	db	69	;'E'
   683  00FF9F  53                 	db	83	;'S'
   684  00FFA0  4B                 	db	75	;'K'
   685  00FFA1  41                 	db	65	;'A'
   686  00FFA2  2B                 	db	43
   687  00FFA3  43                 	db	67	;'C'
   688  00FFA4  41                 	db	65	;'A'
   689  00FFA5  50                 	db	80	;'P'
   690  00FFA6  2D                 	db	45
   691  00FFA7  4C                 	db	76	;'L'
   692  00FFA8  42                 	db	66	;'B'
   693  00FFA9  4C                 	db	76	;'L'
   694  00FFAA  3A                 	db	58	;':'
   695  00FFAB  20                 	db	32
   696  00FFAC  31                 	db	49	;'1'
   697  00FFAD  20                 	db	32
   698  00FFAE  00                 	db	0
   699  00FFAF                     STR_15:
   700  00FFAF  45                 	db	69	;'E'
   701  00FFB0  53                 	db	83	;'S'
   702  00FFB1  4B                 	db	75	;'K'
   703  00FFB2  41                 	db	65	;'A'
   704  00FFB3  2D                 	db	45
   705  00FFB4  43                 	db	67	;'C'
   706  00FFB5  41                 	db	65	;'A'
   707  00FFB6  50                 	db	80	;'P'
   708  00FFB7  2D                 	db	45
   709  00FFB8  4C                 	db	76	;'L'
   710  00FFB9  42                 	db	66	;'B'
   711  00FFBA  4C                 	db	76	;'L'
   712  00FFBB  3A                 	db	58	;':'
   713  00FFBC  20                 	db	32
   714  00FFBD  32                 	db	50	;'2'
   715  00FFBE  20                 	db	32
   716  00FFBF  00                 	db	0
   717  00FFC0                     STR_23:
   718  00FFC0  4F                 	db	79	;'O'
   719  00FFC1  70                 	db	112	;'p'
   720  00FFC2  65                 	db	101	;'e'
   721  00FFC3  72                 	db	114	;'r'
   722  00FFC4  61                 	db	97	;'a'
   723  00FFC5  74                 	db	116	;'t'
   724  00FFC6  69                 	db	105	;'i'
   725  00FFC7  6F                 	db	111	;'o'
   726  00FFC8  6E                 	db	110	;'n'
   727  00FFC9  20                 	db	32
   728  00FFCA  44                 	db	68	;'D'
   729  00FFCB  6F                 	db	111	;'o'
   730  00FFCC  6E                 	db	110	;'n'
   731  00FFCD  65                 	db	101	;'e'
   732  00FFCE  21                 	db	33
   733  00FFCF  00                 	db	0
   734  00FFD0                     STR_24:
   735  00FFD0  45                 	db	69	;'E'
   736  00FFD1  4D                 	db	77	;'M'
   737  00FFD2  45                 	db	69	;'E'
   738  00FFD3  52                 	db	82	;'R'
   739  00FFD4  47                 	db	71	;'G'
   740  00FFD5  45                 	db	69	;'E'
   741  00FFD6  4E                 	db	78	;'N'
   742  00FFD7  43                 	db	67	;'C'
   743  00FFD8  59                 	db	89	;'Y'
   744  00FFD9  20                 	db	32
   745  00FFDA  53                 	db	83	;'S'
   746  00FFDB  54                 	db	84	;'T'
   747  00FFDC  4F                 	db	79	;'O'
   748  00FFDD  50                 	db	80	;'P'
   749  00FFDE  00                 	db	0
   750  00FFDF                     STR_1:
   751  00FFDF  62                 	db	98	;'b'
   752  00FFE0  61                 	db	97	;'a'
   753  00FFE1  64                 	db	100	;'d'
   754  00FFE2  20                 	db	32
   755  00FFE3  69                 	db	105	;'i'
   756  00FFE4  6E                 	db	110	;'n'
   757  00FFE5  74                 	db	116	;'t'
   758  00FFE6  65                 	db	101	;'e'
   759  00FFE7  72                 	db	114	;'r'
   760  00FFE8  72                 	db	114	;'r'
   761  00FFE9  75                 	db	117	;'u'
   762  00FFEA  70                 	db	112	;'p'
   763  00FFEB  74                 	db	116	;'t'
   764  00FFEC  00                 	db	0
   765  00FFED                     STR_16:
   766  00FFED  45                 	db	69	;'E'
   767  00FFEE  52                 	db	82	;'R'
   768  00FFEF  52                 	db	82	;'R'
   769  00FFF0  4F                 	db	79	;'O'
   770  00FFF1  52                 	db	82	;'R'
   771  00FFF2  3A                 	db	58	;':'
   772  00FFF3  20                 	db	32
   773  00FFF4  25                 	db	37
   774  00FFF5  64                 	db	100	;'d'
   775  00FFF6  00                 	db	0
   776  00FFF7                     STR_3:
   777  00FFF7  50                 	db	80	;'P'
   778  00FFF8  4F                 	db	79	;'O'
   779  00FFF9  52                 	db	82	;'R'
   780  00FFFA  54                 	db	84	;'T'
   781  00FFFB  42                 	db	66	;'B'
   782  00FFFC  3A                 	db	58	;':'
   783  00FFFD  20                 	db	32
   784  00FFFE  00                 	db	0
   785                           
   786                           ; #config settings
   787  00FFFF  00                 	db	0	; dummy byte at the end
   788  0000                     
   789                           	psect	cinit
   790  002DBE                     __pcinit:
   791                           	opt stack 0
   792  002DBE                     start_initialization:
   793                           	opt stack 0
   794  002DBE                     __initialization:
   795                           	opt stack 0
   796                           
   797                           ; Initialize objects allocated to BANK0 (2 bytes)
   798                           ; load TBLPTR registers with __pidataBANK0
   799  002DBE  0EB4               	movlw	low __pidataBANK0
   800  002DC0  6EF6               	movwf	tblptrl,c
   801  002DC2  0E30               	movlw	high __pidataBANK0
   802  002DC4  6EF7               	movwf	tblptrh,c
   803  002DC6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   804  002DC8  6EF8               	movwf	tblptru,c
   805  002DCA  0009               	tblrd		*+	;fetch initializer
   806  002DCC  CFF5 F0D7          	movff	tablat,__pdataBANK0
   807  002DD0  0009               	tblrd		*+	;fetch initializer
   808  002DD2  CFF5 F0D8          	movff	tablat,__pdataBANK0+1
   809                           
   810                           ; Clear objects allocated to BANK0 (22 bytes)
   811  002DD6  EE00  F0C1         	lfsr	0,__pbssBANK0
   812  002DDA  0E16               	movlw	22
   813  002DDC                     clear_0:
   814  002DDC  6AEE               	clrf	postinc0,c
   815  002DDE  06E8               	decf	wreg,f,c
   816  002DE0  E1FD               	bnz	clear_0
   817                           
   818                           ; Clear objects allocated to COMRAM (8 bytes)
   819  002DE2  EE00  F076         	lfsr	0,__pbssCOMRAM
   820  002DE6  0E08               	movlw	8
   821  002DE8                     clear_1:
   822  002DE8  6AEE               	clrf	postinc0,c
   823  002DEA  06E8               	decf	wreg,f,c
   824  002DEC  E1FD               	bnz	clear_1
   825  002DEE                     end_of_initialization:
   826                           	opt stack 0
   827  002DEE                     __end_of__initialization:
   828                           	opt stack 0
   829  002DEE  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   830  002DF0  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   831  002DF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   832  002DF4  6EF8               	movwf	tblptru,c
   833  002DF6  0100               	movlb	0
   834  002DF8  EF65  F00D         	goto	_main	;jump to C main() function
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           
   842                           	psect	bssCOMRAM
   843  000076                     __pbssCOMRAM:
   844                           	opt stack 0
   845  000076                     _end_time:
   846                           	opt stack 0
   847  000076                     	ds	2
   848  000078                     _errno:
   849                           	opt stack 0
   850  000078                     	ds	2
   851  00007A                     _ptr:
   852                           	opt stack 0
   853  00007A                     	ds	2
   854  00007C                     _start_time:
   855                           	opt stack 0
   856  00007C                     	ds	2
   857                           tblptru	equ	0xFF8
   858                           tblptrh	equ	0xFF7
   859                           tblptrl	equ	0xFF6
   860                           tablat	equ	0xFF5
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           
   864                           	psect	bssBANK0
   865  0000C1                     __pbssBANK0:
   866                           	opt stack 0
   867  0000C1                     _color:
   868                           	opt stack 0
   869  0000C1                     	ds	8
   870  0000C9                     _time:
   871                           	opt stack 0
   872  0000C9                     	ds	7
   873  0000D0                     _etime:
   874                           	opt stack 0
   875  0000D0                     	ds	2
   876  0000D2                     _operation_disp:
   877                           	opt stack 0
   878  0000D2                     	ds	2
   879  0000D4                     _stime:
   880                           	opt stack 0
   881  0000D4                     	ds	2
   882  0000D6                     _curr_state:
   883                           	opt stack 0
   884  0000D6                     	ds	1
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           
   892                           	psect	dataBANK0
   893  0000D7                     __pdataBANK0:
   894                           	opt stack 0
   895  0000D7                     _bottle_count_disp:
   896                           	opt stack 0
   897  0000D7                     	ds	2
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           
   905                           	psect	cstackBANK0
   906  000080                     __pcstackBANK0:
   907                           	opt stack 0
   908  000080                     ??_isr:
   909                           
   910                           ; 1 bytes @ 0x0
   911  000080                     	ds	16
   912  000090                     ??_isdigit:
   913  000090                     ??_I2C_Master_Wait:
   914  000090                     ?___wmul:
   915                           	opt stack 0
   916  000090                     ?___awmod:
   917                           	opt stack 0
   918  000090                     ?___lwdiv:
   919                           	opt stack 0
   920  000090                     ?___lldiv:
   921                           	opt stack 0
   922  000090                     lcdNibble@temp:
   923                           	opt stack 0
   924  000090                     ___wmul@multiplier:
   925                           	opt stack 0
   926  000090                     ___awmod@dividend:
   927                           	opt stack 0
   928  000090                     ___lwdiv@dividend:
   929                           	opt stack 0
   930  000090                     ___lldiv@dividend:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x10
   934  000090                     	ds	1
   935  000091                     I2C_Master_Read@a:
   936                           	opt stack 0
   937  000091                     lcdNibble@data:
   938                           	opt stack 0
   939  000091                     _isdigit$707:
   940                           	opt stack 0
   941  000091                     I2C_Master_Write@d:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x11
   945  000091                     	ds	1
   946  000092                     I2C_Master_Read@temp:
   947                           	opt stack 0
   948  000092                     lcdInst@data:
   949                           	opt stack 0
   950  000092                     putch@data:
   951                           	opt stack 0
   952  000092                     isdigit@c:
   953                           	opt stack 0
   954  000092                     ___wmul@multiplicand:
   955                           	opt stack 0
   956  000092                     ___awmod@divisor:
   957                           	opt stack 0
   958  000092                     ___lwdiv@divisor:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x12
   962  000092                     	ds	1
   963  000093                     ??_read_colorsensor:
   964  000093                     ??_initLCD:
   965                           
   966                           ; 1 bytes @ 0x13
   967  000093                     	ds	1
   968  000094                     ___awmod@counter:
   969                           	opt stack 0
   970  000094                     ___wmul@product:
   971                           	opt stack 0
   972  000094                     ___lwdiv@quotient:
   973                           	opt stack 0
   974  000094                     ___lldiv@divisor:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x14
   978  000094                     	ds	1
   979  000095                     ___awmod@sign:
   980                           	opt stack 0
   981  000095                     read_colorsensor@color_low:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x15
   985  000095                     	ds	1
   986  000096                     ___lwdiv@counter:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x16
   990  000096                     	ds	1
   991  000097                     ?___lwmod:
   992                           	opt stack 0
   993  000097                     read_colorsensor@color_high:
   994                           	opt stack 0
   995  000097                     ___lwmod@dividend:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x17
   999  000097                     	ds	1
  1000  000098                     ___lldiv@quotient:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x18
  1004  000098                     	ds	1
  1005  000099                     read_colorsensor@color_comb:
  1006                           	opt stack 0
  1007  000099                     ___lwmod@divisor:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x19
  1011  000099                     	ds	2
  1012  00009B                     _read_colorsensor$450:
  1013                           	opt stack 0
  1014  00009B                     ___lwmod@counter:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x1B
  1018  00009B                     	ds	1
  1019  00009C                     ?_printf:
  1020                           	opt stack 0
  1021  00009C                     ___lldiv@counter:
  1022                           	opt stack 0
  1023  00009C                     read_colorsensor@i:
  1024                           	opt stack 0
  1025  00009C                     printf@f:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x1C
  1029  00009C                     	ds	1
  1030  00009D                     I2C_Master_Init@c:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x1D
  1034  00009D                     	ds	4
  1035  0000A1                     ??_I2C_Master_Init:
  1036                           
  1037                           ; 1 bytes @ 0x21
  1038  0000A1                     	ds	3
  1039  0000A4                     ??_printf:
  1040                           
  1041                           ; 1 bytes @ 0x24
  1042  0000A4                     	ds	4
  1043  0000A8                     printf@cp:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x28
  1047  0000A8                     	ds	2
  1048  0000AA                     _printf$486:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x2A
  1052  0000AA                     	ds	2
  1053  0000AC                     _printf$487:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x2C
  1057  0000AC                     	ds	2
  1058  0000AE                     _printf$493:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x2E
  1062  0000AE                     	ds	2
  1063  0000B0                     printf@idx:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x30
  1067  0000B0                     	ds	1
  1068  0000B1                     printf@len:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x31
  1072  0000B1                     	ds	2
  1073  0000B3                     printf@ap:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x33
  1077  0000B3                     	ds	2
  1078  0000B5                     printf@val:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x35
  1082  0000B5                     	ds	2
  1083  0000B7                     printf@prec:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x37
  1087  0000B7                     	ds	1
  1088  0000B8                     printf@width:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x38
  1092  0000B8                     	ds	2
  1093  0000BA                     printf@c:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x3A
  1097  0000BA                     	ds	1
  1098  0000BB                     printf@flag:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x3B
  1102  0000BB                     	ds	2
  1103  0000BD                     ??_operation:
  1104  0000BD                     date_time@i:
  1105                           	opt stack 0
  1106  0000BD                     bottle_time@time:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x3D
  1110  0000BD                     	ds	2
  1111  0000BF                     ??_main:
  1112                           
  1113                           ; 1 bytes @ 0x3F
  1114  0000BF                     	ds	2
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           
  1122                           	psect	cstackCOMRAM
  1123  000001                     __pcstackCOMRAM:
  1124                           	opt stack 0
  1125  000001                     ??i2_I2C_Master_Wait:
  1126  000001                     ??i2_isdigit:
  1127  000001                     ?i2___wmul:
  1128                           	opt stack 0
  1129  000001                     ?i2___lwdiv:
  1130                           	opt stack 0
  1131  000001                     ?___ftpack:
  1132                           	opt stack 0
  1133  000001                     ?_frexp:
  1134                           	opt stack 0
  1135  000001                     ?___ftneg:
  1136                           	opt stack 0
  1137  000001                     i2lcdNibble@temp:
  1138                           	opt stack 0
  1139  000001                     i2___wmul@multiplier:
  1140                           	opt stack 0
  1141  000001                     i2___lwdiv@dividend:
  1142                           	opt stack 0
  1143  000001                     ___ftpack@arg:
  1144                           	opt stack 0
  1145  000001                     ___ftge@ff1:
  1146                           	opt stack 0
  1147  000001                     ___ftneg@f1:
  1148                           	opt stack 0
  1149  000001                     frexp@value:
  1150                           	opt stack 0
  1151                           
  1152                           ; 3 bytes @ 0x0
  1153  000001                     	ds	1
  1154  000002                     i2I2C_Master_Read@a:
  1155                           	opt stack 0
  1156  000002                     i2lcdNibble@data:
  1157                           	opt stack 0
  1158  000002                     i2_isdigit$707:
  1159                           	opt stack 0
  1160  000002                     i2I2C_Master_Write@d:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x1
  1164  000002                     	ds	1
  1165  000003                     i2I2C_Master_Read@temp:
  1166                           	opt stack 0
  1167  000003                     i2lcdInst@data:
  1168                           	opt stack 0
  1169  000003                     i2putch@data:
  1170                           	opt stack 0
  1171  000003                     i2isdigit@c:
  1172                           	opt stack 0
  1173  000003                     i2___wmul@multiplicand:
  1174                           	opt stack 0
  1175  000003                     i2___lwdiv@divisor:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x2
  1179  000003                     	ds	1
  1180  000004                     ??i2_read_colorsensor:
  1181  000004                     read_time@i:
  1182                           	opt stack 0
  1183  000004                     ___ftpack@exp:
  1184                           	opt stack 0
  1185  000004                     frexp@eptr:
  1186                           	opt stack 0
  1187  000004                     ___ftge@ff2:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x3
  1191  000004                     	ds	1
  1192  000005                     ___ftpack@sign:
  1193                           	opt stack 0
  1194  000005                     i2___wmul@product:
  1195                           	opt stack 0
  1196  000005                     i2___lwdiv@quotient:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x4
  1200  000005                     	ds	1
  1201  000006                     ??___ftpack:
  1202  000006                     ??_frexp:
  1203  000006                     i2read_colorsensor@color_low:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x5
  1207  000006                     	ds	1
  1208  000007                     ??___ftge:
  1209  000007                     ?___awdiv:
  1210                           	opt stack 0
  1211  000007                     i2___lwdiv@counter:
  1212                           	opt stack 0
  1213  000007                     ___awdiv@dividend:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x6
  1217  000007                     	ds	1
  1218  000008                     ?i2___lwmod:
  1219                           	opt stack 0
  1220  000008                     i2read_colorsensor@color_high:
  1221                           	opt stack 0
  1222  000008                     i2___lwmod@dividend:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x7
  1226  000008                     	ds	1
  1227  000009                     ?___ftdiv:
  1228                           	opt stack 0
  1229  000009                     ?___awtoft:
  1230                           	opt stack 0
  1231  000009                     ?___lltoft:
  1232                           	opt stack 0
  1233  000009                     ___awdiv@divisor:
  1234                           	opt stack 0
  1235  000009                     ___awtoft@c:
  1236                           	opt stack 0
  1237  000009                     ___ftdiv@f1:
  1238                           	opt stack 0
  1239  000009                     ___lltoft@c:
  1240                           	opt stack 0
  1241                           
  1242                           ; 4 bytes @ 0x8
  1243  000009                     	ds	1
  1244  00000A                     i2read_colorsensor@color_comb:
  1245                           	opt stack 0
  1246  00000A                     i2___lwmod@divisor:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x9
  1250  00000A                     	ds	1
  1251  00000B                     ___awdiv@counter:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0xA
  1255  00000B                     	ds	1
  1256  00000C                     ___awdiv@sign:
  1257                           	opt stack 0
  1258  00000C                     ___awtoft@sign:
  1259                           	opt stack 0
  1260  00000C                     i2_read_colorsensor$450:
  1261                           	opt stack 0
  1262  00000C                     i2___lwmod@counter:
  1263                           	opt stack 0
  1264  00000C                     ___ftdiv@f2:
  1265                           	opt stack 0
  1266                           
  1267                           ; 3 bytes @ 0xB
  1268  00000C                     	ds	1
  1269  00000D                     ??___lltoft:
  1270  00000D                     ?i2_printf:
  1271                           	opt stack 0
  1272  00000D                     ?___ftmul:
  1273                           	opt stack 0
  1274  00000D                     ___awdiv@quotient:
  1275                           	opt stack 0
  1276  00000D                     i2read_colorsensor@i:
  1277                           	opt stack 0
  1278  00000D                     i2printf@f:
  1279                           	opt stack 0
  1280  00000D                     ___ftmul@f1:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0xC
  1284  00000D                     	ds	2
  1285  00000F                     ??___ftdiv:
  1286  00000F                     ??i2_printf:
  1287  00000F                     servo_rotate0@degree:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0xE
  1291  00000F                     	ds	1
  1292  000010                     ___ftmul@f2:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0xF
  1296  000010                     	ds	1
  1297  000011                     ??_servo_rotate0:
  1298  000011                     ___lltoft@exp:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x10
  1302  000011                     	ds	1
  1303  000012                     ___ftdiv@cntr:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x11
  1307  000012                     	ds	1
  1308  000013                     ??___ftmul:
  1309  000013                     i2printf@idx:
  1310                           	opt stack 0
  1311  000013                     servo_rotate0@duty:
  1312                           	opt stack 0
  1313  000013                     ___ftdiv@f3:
  1314                           	opt stack 0
  1315                           
  1316                           ; 3 bytes @ 0x12
  1317  000013                     	ds	1
  1318  000014                     i2printf@cp:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x13
  1322  000014                     	ds	1
  1323  000015                     servo_rotate0@i:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x14
  1327  000015                     	ds	1
  1328  000016                     ___ftdiv@exp:
  1329                           	opt stack 0
  1330  000016                     ___ftmul@exp:
  1331                           	opt stack 0
  1332  000016                     i2_printf$486:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x15
  1336  000016                     	ds	1
  1337  000017                     ___ftdiv@sign:
  1338                           	opt stack 0
  1339  000017                     servo_rotate0@j:
  1340                           	opt stack 0
  1341  000017                     ___ftmul@f3_as_product:
  1342                           	opt stack 0
  1343                           
  1344                           ; 3 bytes @ 0x16
  1345  000017                     	ds	1
  1346  000018                     i2_printf$487:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x17
  1350  000018                     	ds	2
  1351  00001A                     ___ftmul@cntr:
  1352                           	opt stack 0
  1353  00001A                     i2_printf$493:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x19
  1357  00001A                     	ds	1
  1358  00001B                     ___ftmul@sign:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x1A
  1362  00001B                     	ds	1
  1363  00001C                     ?___ftadd:
  1364                           	opt stack 0
  1365  00001C                     i2printf@len:
  1366                           	opt stack 0
  1367  00001C                     ___ftadd@f1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 3 bytes @ 0x1B
  1371  00001C                     	ds	2
  1372  00001E                     i2printf@ap:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x1D
  1376  00001E                     	ds	1
  1377  00001F                     ___ftadd@f2:
  1378                           	opt stack 0
  1379                           
  1380                           ; 3 bytes @ 0x1E
  1381  00001F                     	ds	1
  1382  000020                     i2printf@val:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x1F
  1386  000020                     	ds	2
  1387  000022                     ??___ftadd:
  1388  000022                     i2printf@prec:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x21
  1392  000022                     	ds	1
  1393  000023                     i2printf@width:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x22
  1397  000023                     	ds	2
  1398  000025                     ___ftadd@sign:
  1399                           	opt stack 0
  1400  000025                     i2printf@c:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x24
  1404  000025                     	ds	1
  1405  000026                     ___ftadd@exp2:
  1406                           	opt stack 0
  1407  000026                     i2printf@flag:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x25
  1411  000026                     	ds	1
  1412  000027                     ___ftadd@exp1:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x26
  1416  000027                     	ds	1
  1417  000028                     ?___ftsub:
  1418                           	opt stack 0
  1419  000028                     ?_eval_poly:
  1420                           	opt stack 0
  1421  000028                     ?___fttol:
  1422                           	opt stack 0
  1423  000028                     ___ftsub@f1:
  1424                           	opt stack 0
  1425  000028                     ___fttol@f1:
  1426                           	opt stack 0
  1427  000028                     eval_poly@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 3 bytes @ 0x27
  1431  000028                     	ds	3
  1432  00002B                     eval_poly@d:
  1433                           	opt stack 0
  1434  00002B                     ___ftsub@f2:
  1435                           	opt stack 0
  1436                           
  1437                           ; 3 bytes @ 0x2A
  1438  00002B                     	ds	1
  1439  00002C                     ??___fttol:
  1440                           
  1441                           ; 1 bytes @ 0x2B
  1442  00002C                     	ds	1
  1443  00002D                     eval_poly@n:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x2C
  1447  00002D                     	ds	1
  1448  00002E                     
  1449                           ; 1 bytes @ 0x2D
  1450  00002E                     	ds	1
  1451  00002F                     ??_eval_poly:
  1452                           
  1453                           ; 1 bytes @ 0x2E
  1454  00002F                     	ds	2
  1455  000031                     ___fttol@sign1:
  1456                           	opt stack 0
  1457  000031                     eval_poly@res:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x30
  1461  000031                     	ds	1
  1462  000032                     ___fttol@lval:
  1463                           	opt stack 0
  1464                           
  1465                           ; 4 bytes @ 0x31
  1466  000032                     	ds	2
  1467  000034                     ?_log:
  1468                           	opt stack 0
  1469  000034                     ?_ldexp:
  1470                           	opt stack 0
  1471  000034                     ldexp@value:
  1472                           	opt stack 0
  1473  000034                     log@x:
  1474                           	opt stack 0
  1475                           
  1476                           ; 3 bytes @ 0x33
  1477  000034                     	ds	2
  1478  000036                     ___fttol@exp1:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x35
  1482  000036                     	ds	1
  1483  000037                     ?___altoft:
  1484                           	opt stack 0
  1485  000037                     ldexp@newexp:
  1486                           	opt stack 0
  1487  000037                     log@exponent:
  1488                           	opt stack 0
  1489  000037                     ___altoft@c:
  1490                           	opt stack 0
  1491                           
  1492                           ; 4 bytes @ 0x36
  1493  000037                     	ds	2
  1494  000039                     ??_ldexp:
  1495                           
  1496                           ; 1 bytes @ 0x38
  1497  000039                     	ds	2
  1498  00003B                     ??___altoft:
  1499                           
  1500                           ; 1 bytes @ 0x3A
  1501  00003B                     	ds	4
  1502  00003F                     ___altoft@exp:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x3E
  1506  00003F                     	ds	1
  1507  000040                     ___altoft@sign:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x3F
  1511  000040                     	ds	1
  1512  000041                     ?_floor:
  1513                           	opt stack 0
  1514  000041                     floor@x:
  1515                           	opt stack 0
  1516                           
  1517                           ; 3 bytes @ 0x40
  1518  000041                     	ds	3
  1519  000044                     floor@i:
  1520                           	opt stack 0
  1521                           
  1522                           ; 3 bytes @ 0x43
  1523  000044                     	ds	3
  1524  000047                     floor@expon:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x46
  1528  000047                     	ds	2
  1529  000049                     ?_exp:
  1530                           	opt stack 0
  1531  000049                     exp@x:
  1532                           	opt stack 0
  1533                           
  1534                           ; 3 bytes @ 0x48
  1535  000049                     	ds	3
  1536  00004C                     _exp$1154:
  1537                           	opt stack 0
  1538                           
  1539                           ; 3 bytes @ 0x4B
  1540  00004C                     	ds	3
  1541  00004F                     exp@exponent:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x4E
  1545  00004F                     	ds	2
  1546  000051                     exp@sign:
  1547                           	opt stack 0
  1548                           
  1549                           ; 1 bytes @ 0x50
  1550  000051                     	ds	1
  1551  000052                     ?_pow:
  1552                           	opt stack 0
  1553  000052                     pow@x:
  1554                           	opt stack 0
  1555                           
  1556                           ; 3 bytes @ 0x51
  1557  000052                     	ds	3
  1558  000055                     pow@y:
  1559                           	opt stack 0
  1560                           
  1561                           ; 3 bytes @ 0x54
  1562  000055                     	ds	3
  1563  000058                     _pow$1152:
  1564                           	opt stack 0
  1565                           
  1566                           ; 3 bytes @ 0x57
  1567  000058                     	ds	3
  1568  00005B                     _pow$1153:
  1569                           	opt stack 0
  1570                           
  1571                           ; 3 bytes @ 0x5A
  1572  00005B                     	ds	3
  1573  00005E                     pow@sign:
  1574                           	opt stack 0
  1575                           
  1576                           ; 1 bytes @ 0x5D
  1577  00005E                     	ds	1
  1578  00005F                     pow@yi:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x5E
  1582  00005F                     	ds	4
  1583  000063                     ?_dec_to_hex:
  1584                           	opt stack 0
  1585  000063                     dec_to_hex@num:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x62
  1589  000063                     	ds	2
  1590  000065                     _dec_to_hex$1150:
  1591                           	opt stack 0
  1592                           
  1593                           ; 3 bytes @ 0x64
  1594  000065                     	ds	3
  1595  000068                     _dec_to_hex$1151:
  1596                           	opt stack 0
  1597                           
  1598                           ; 3 bytes @ 0x67
  1599  000068                     	ds	3
  1600  00006B                     dec_to_hex@temp:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x6A
  1604  00006B                     	ds	2
  1605  00006D                     dec_to_hex@i:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x6C
  1609  00006D                     	ds	2
  1610  00006F                     dec_to_hex@hexnum:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x6E
  1614  00006F                     	ds	2
  1615  000071                     dec_to_hex@quotient:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x70
  1619  000071                     	ds	2
  1620  000073                     _isr$1250:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x72
  1624  000073                     	ds	2
  1625  000075                     isr@i:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x74
  1629  000075                     	ds	1
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           
  1637 ;;
  1638 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1639 ;;
  1640 ;; *************** function _main *****************
  1641 ;; Defined at:
  1642 ;;		line 61 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        2 bytes
  1661 ;; Hardware stack levels required when called:   11
  1662 ;; This function calls:
  1663 ;;		_I2C_ColorSens_Init
  1664 ;;		_I2C_Master_Init
  1665 ;;		_bottle_count
  1666 ;;		_bottle_time
  1667 ;;		_date_time
  1668 ;;		_emergencystop
  1669 ;;		_initLCD
  1670 ;;		_operation
  1671 ;;		_operationend
  1672 ;;		_standby
  1673 ;; This function is called by:
  1674 ;;		Startup code after reset
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text0
  1679  001ACA                     __ptext0:
  1680                           	opt stack 0
  1681  001ACA                     _main:
  1682                           	opt stack 20
  1683                           
  1684                           ;main.c: 68: TRISA = 0xFF;
  1685                           
  1686                           ;incstack = 0
  1687  001ACA  6892               	setf	3986,c	;volatile
  1688                           
  1689                           ;main.c: 69: TRISB = 0xFF;
  1690  001ACC  6893               	setf	3987,c	;volatile
  1691                           
  1692                           ;main.c: 70: TRISC = 0b00011000;
  1693  001ACE  0E18               	movlw	24
  1694  001AD0  6E94               	movwf	3988,c	;volatile
  1695                           
  1696                           ;main.c: 71: TRISD = 0x00;
  1697  001AD2  0E00               	movlw	0
  1698  001AD4  6E95               	movwf	3989,c	;volatile
  1699                           
  1700                           ;main.c: 72: TRISE = 0x00;
  1701  001AD6  0E00               	movlw	0
  1702  001AD8  6E96               	movwf	3990,c	;volatile
  1703                           
  1704                           ;main.c: 74: LATA = 0x00;
  1705  001ADA  0E00               	movlw	0
  1706  001ADC  6E89               	movwf	3977,c	;volatile
  1707                           
  1708                           ;main.c: 75: LATB = 0x00;
  1709  001ADE  0E00               	movlw	0
  1710  001AE0  6E8A               	movwf	3978,c	;volatile
  1711                           
  1712                           ;main.c: 76: LATC = 0x00;
  1713  001AE2  0E00               	movlw	0
  1714  001AE4  6E8B               	movwf	3979,c	;volatile
  1715                           
  1716                           ;main.c: 77: LATD = 0x00;
  1717  001AE6  0E00               	movlw	0
  1718  001AE8  6E8C               	movwf	3980,c	;volatile
  1719                           
  1720                           ;main.c: 78: LATE = 0x00;
  1721  001AEA  0E00               	movlw	0
  1722  001AEC  6E8D               	movwf	3981,c	;volatile
  1723                           
  1724                           ;main.c: 80: ADCON0 = 0x00;
  1725  001AEE  0E00               	movlw	0
  1726  001AF0  6EC2               	movwf	4034,c	;volatile
  1727                           
  1728                           ;main.c: 81: ADCON1 = 0xFF;
  1729  001AF2  68C1               	setf	4033,c	;volatile
  1730                           
  1731                           ;main.c: 83: INT1IE = 1;
  1732  001AF4  86F0               	bsf	intcon3,3,c	;volatile
  1733                           
  1734                           ;main.c: 85: nRBPU = 0;
  1735  001AF6  9EF1               	bcf	intcon2,7,c	;volatile
  1736                           
  1737                           ;main.c: 87: initLCD();
  1738  001AF8  EC4F  F016         	call	_initLCD	;wreg free
  1739                           
  1740                           ;main.c: 88: I2C_Master_Init(10000);
  1741  001AFC  0E10               	movlw	16
  1742  001AFE  0100               	movlb	0	; () banked
  1743  001B00  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1744  001B02  0E27               	movlw	39
  1745  001B04  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1746  001B06  0E00               	movlw	0
  1747  001B08  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1748  001B0A  0E00               	movlw	0
  1749  001B0C  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1750  001B0E  ECC8  F015         	call	_I2C_Master_Init	;wreg free
  1751                           
  1752                           ;main.c: 89: I2C_ColorSens_Init();
  1753  001B12  EC6B  F017         	call	_I2C_ColorSens_Init	;wreg free
  1754                           
  1755                           ;main.c: 92: TMR0 = 0;
  1756  001B16  0E00               	movlw	0
  1757  001B18  6ED7               	movwf	4055,c	;volatile
  1758  001B1A  0E00               	movlw	0
  1759  001B1C  6ED6               	movwf	4054,c	;volatile
  1760                           
  1761                           ;main.c: 93: T08BIT = 0;
  1762  001B1E  9CD5               	bcf	4053,6,c	;volatile
  1763                           
  1764                           ;main.c: 94: T0CS = 0;
  1765  001B20  9AD5               	bcf	4053,5,c	;volatile
  1766                           
  1767                           ;main.c: 95: PSA = 0;
  1768  001B22  96D5               	bcf	4053,3,c	;volatile
  1769                           
  1770                           ;main.c: 96: T0PS2 = 1;
  1771  001B24  84D5               	bsf	4053,2,c	;volatile
  1772                           
  1773                           ;main.c: 97: T0PS1 = 1;
  1774  001B26  82D5               	bsf	4053,1,c	;volatile
  1775                           
  1776                           ;main.c: 98: T0PS0 = 1;
  1777  001B28  80D5               	bsf	4053,0,c	;volatile
  1778                           
  1779                           ;main.c: 102: (INTCONbits.GIE = 1);
  1780  001B2A  8EF2               	bsf	intcon,7,c	;volatile
  1781                           
  1782                           ;main.c: 104: curr_state = STANDBY;
  1783  001B2C  0E00               	movlw	0
  1784  001B2E  0100               	movlb	0	; () banked
  1785  001B30  6FD6               	movwf	_curr_state& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 107: switch(curr_state){
  1789                           
  1790                           ;main.c: 106: while(1){
  1791  001B32  D02A               	goto	l4986
  1792  001B34                     l4970:
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 109: standby();
  1796  001B34  EC1A  F017         	call	_standby	;wreg free
  1797                           
  1798                           ;main.c: 110: break;
  1799  001B38  D03E               	goto	l4988
  1800  001B3A                     l4972:
  1801                           
  1802                           ;main.c: 112: emergencystop();
  1803  001B3A  ECF8  F017         	call	_emergencystop	;wreg free
  1804                           
  1805                           ;main.c: 113: break;
  1806  001B3E  D03B               	goto	l4988
  1807  001B40                     l4974:
  1808                           
  1809                           ;main.c: 115: operation();
  1810  001B40  EC3C  F012         	call	_operation	;wreg free
  1811                           
  1812                           ;main.c: 116: break;
  1813  001B44  D038               	goto	l4988
  1814  001B46                     l4976:
  1815                           
  1816                           ;main.c: 118: operationend();
  1817  001B46  EC05  F018         	call	_operationend	;wreg free
  1818                           
  1819                           ;main.c: 119: break;
  1820  001B4A  D035               	goto	l4988
  1821  001B4C                     l4978:
  1822                           
  1823                           ;main.c: 121: date_time();
  1824  001B4C  ECAB  F010         	call	_date_time	;wreg free
  1825                           
  1826                           ;main.c: 122: break;
  1827  001B50  D032               	goto	l4988
  1828  001B52                     l4980:
  1829                           
  1830                           ;main.c: 124: bottle_count();
  1831  001B52  EC32  F00C         	call	_bottle_count	;wreg free
  1832                           
  1833                           ;main.c: 125: break;
  1834  001B56  D02F               	goto	l4988
  1835  001B58                     l4982:
  1836                           
  1837                           ;main.c: 127: bottle_time(etime - stime);
  1838  001B58  C0D4  F0BF         	movff	_stime,??_main
  1839  001B5C  C0D5  F0C0         	movff	_stime+1,??_main+1
  1840  001B60  0100               	movlb	0	; () banked
  1841  001B62  1FBF               	comf	??_main& (0+255),f,b
  1842  001B64  1FC0               	comf	(??_main+1)& (0+255),f,b
  1843  001B66  4BBF               	infsnz	??_main& (0+255),f,b
  1844  001B68  2BC0               	incf	(??_main+1)& (0+255),f,b
  1845  001B6A  0100               	movlb	0	; () banked
  1846  001B6C  51D0               	movf	_etime& (0+255),w,b
  1847  001B6E  0100               	movlb	0	; () banked
  1848  001B70  25BF               	addwf	??_main& (0+255),w,b
  1849  001B72  0100               	movlb	0	; () banked
  1850  001B74  6FBD               	movwf	bottle_time@time& (0+255),b
  1851  001B76  0100               	movlb	0	; () banked
  1852  001B78  51D1               	movf	(_etime+1)& (0+255),w,b
  1853  001B7A  0100               	movlb	0	; () banked
  1854  001B7C  21C0               	addwfc	(??_main+1)& (0+255),w,b
  1855  001B7E  0100               	movlb	0	; () banked
  1856  001B80  6FBE               	movwf	(bottle_time@time+1)& (0+255),b
  1857  001B82  EC35  F017         	call	_bottle_time	;wreg free
  1858                           
  1859                           ;main.c: 129: }
  1860                           
  1861                           ;main.c: 128: break;
  1862  001B86  D017               	goto	l4988
  1863  001B88                     l4986:
  1864  001B88  0100               	movlb	0	; () banked
  1865  001B8A  51D6               	movf	_curr_state& (0+255),w,b
  1866                           
  1867                           ; Switch size 1, requested type "space"
  1868                           ; Number of cases is 7, Range of values is 0 to 6
  1869                           ; switch strategies available:
  1870                           ; Name         Instructions Cycles
  1871                           ; simple_byte           22    12 (average)
  1872                           ;	Chosen strategy is simple_byte
  1873  001B8C  0A00               	xorlw	0	; case 0
  1874  001B8E  B4D8               	btfsc	status,2,c
  1875  001B90  D7D1               	goto	l4970
  1876  001B92  0A01               	xorlw	1	; case 1
  1877  001B94  B4D8               	btfsc	status,2,c
  1878  001B96  D7D1               	goto	l4972
  1879  001B98  0A03               	xorlw	3	; case 2
  1880  001B9A  B4D8               	btfsc	status,2,c
  1881  001B9C  D7D1               	goto	l4974
  1882  001B9E  0A01               	xorlw	1	; case 3
  1883  001BA0  B4D8               	btfsc	status,2,c
  1884  001BA2  D7D1               	goto	l4976
  1885  001BA4  0A07               	xorlw	7	; case 4
  1886  001BA6  B4D8               	btfsc	status,2,c
  1887  001BA8  D7D1               	goto	l4978
  1888  001BAA  0A01               	xorlw	1	; case 5
  1889  001BAC  B4D8               	btfsc	status,2,c
  1890  001BAE  D7D1               	goto	l4980
  1891  001BB0  0A03               	xorlw	3	; case 6
  1892  001BB2  B4D8               	btfsc	status,2,c
  1893  001BB4  D7D1               	goto	l4982
  1894  001BB6                     l4988:
  1895                           
  1896                           ;main.c: 130: _delay((unsigned long)((200)*(10000000/4000.0)));
  1897  001BB6  0E03               	movlw	3
  1898  001BB8  0100               	movlb	0	; () banked
  1899  001BBA  6FC0               	movwf	(??_main+1)& (0+255),b
  1900  001BBC  0E8A               	movlw	138
  1901  001BBE  0100               	movlb	0	; () banked
  1902  001BC0  6FBF               	movwf	??_main& (0+255),b
  1903  001BC2  0E55               	movlw	85
  1904  001BC4                     u5607:
  1905  001BC4  2EE8               	decfsz	wreg,f,c
  1906  001BC6  D7FE               	bra	u5607
  1907  001BC8  2FBF               	decfsz	??_main& (0+255),f,b
  1908  001BCA  D7FC               	bra	u5607
  1909  001BCC  2FC0               	decfsz	(??_main+1)& (0+255),f,b
  1910  001BCE  D7FA               	bra	u5607
  1911  001BD0  D000               	nop2	
  1912  001BD2  D7DA               	goto	l4986
  1913  001BD4                     __end_of_main:
  1914                           	opt stack 0
  1915                           tblptru	equ	0xFF8
  1916                           tblptrh	equ	0xFF7
  1917                           tblptrl	equ	0xFF6
  1918                           tablat	equ	0xFF5
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           intcon3	equ	0xFF0
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _standby *****************
  1927 ;; Defined at:
  1928 ;;		line 215 in file "main.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;		None
  1931 ;; Auto vars:     Size  Location     Type
  1932 ;;		None
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  1    wreg      void 
  1935 ;; Registers used:
  1936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;Total ram usage:        0 bytes
  1947 ;; Hardware stack levels used:    1
  1948 ;; Hardware stack levels required when called:   10
  1949 ;; This function calls:
  1950 ;;		_lcdInst
  1951 ;;		_printf
  1952 ;; This function is called by:
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text1
  1958  002E34                     __ptext1:
  1959                           	opt stack 0
  1960  002E34                     _standby:
  1961                           	opt stack 20
  1962                           
  1963                           ;main.c: 216: lcdInst(0b10000000);
  1964                           
  1965                           ;incstack = 0
  1966  002E34  0E80               	movlw	128
  1967  002E36  EC2C  F018         	call	_lcdInst
  1968                           
  1969                           ;main.c: 217: printf("standby         ");
  1970  002E3A  0E05               	movlw	low STR_2
  1971  002E3C  0100               	movlb	0	; () banked
  1972  002E3E  6F9C               	movwf	printf@f& (0+255),b
  1973  002E40  0EFF               	movlw	high STR_2
  1974  002E42  0100               	movlb	0	; () banked
  1975  002E44  6F9D               	movwf	(printf@f+1)& (0+255),b
  1976  002E46  EC09  F000         	call	_printf	;wreg free
  1977                           
  1978                           ;main.c: 218: lcdInst(0b11000000);
  1979  002E4A  0EC0               	movlw	192
  1980  002E4C  EC2C  F018         	call	_lcdInst
  1981                           
  1982                           ;main.c: 219: printf("PORTB: ", PORTB);
  1983  002E50  0EF7               	movlw	low STR_3
  1984  002E52  0100               	movlb	0	; () banked
  1985  002E54  6F9C               	movwf	printf@f& (0+255),b
  1986  002E56  0EFF               	movlw	high STR_3
  1987  002E58  0100               	movlb	0	; () banked
  1988  002E5A  6F9D               	movwf	(printf@f+1)& (0+255),b
  1989  002E5C  CF81 F09E          	movff	3969,?_printf+2	;volatile
  1990  002E60  0100               	movlb	0	; () banked
  1991  002E62  6B9F               	clrf	(?_printf+3)& (0+255),b
  1992  002E64  EC09  F000         	call	_printf	;wreg free
  1993  002E68  0012               	return	
  1994  002E6A                     __end_of_standby:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           intcon3	equ	0xFF0
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _operationend *****************
  2008 ;; Defined at:
  2009 ;;		line 364 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:   10
  2030 ;; This function calls:
  2031 ;;		_lcdInst
  2032 ;;		_printf
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text2
  2039  00300A                     __ptext2:
  2040                           	opt stack 0
  2041  00300A                     _operationend:
  2042                           	opt stack 20
  2043                           
  2044                           ;main.c: 365: lcdInst(0b10000000);
  2045                           
  2046                           ;incstack = 0
  2047  00300A  0E80               	movlw	128
  2048  00300C  EC2C  F018         	call	_lcdInst
  2049                           
  2050                           ;main.c: 366: printf("Operation Done!");
  2051  003010  0EC0               	movlw	low STR_23
  2052  003012  0100               	movlb	0	; () banked
  2053  003014  6F9C               	movwf	printf@f& (0+255),b
  2054  003016  0EFF               	movlw	high STR_23
  2055  003018  0100               	movlb	0	; () banked
  2056  00301A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2057  00301C  EC09  F000         	call	_printf	;wreg free
  2058  003020  0012               	return	
  2059  003022                     __end_of_operationend:
  2060                           	opt stack 0
  2061                           tblptru	equ	0xFF8
  2062                           tblptrh	equ	0xFF7
  2063                           tblptrl	equ	0xFF6
  2064                           tablat	equ	0xFF5
  2065                           intcon	equ	0xFF2
  2066                           intcon2	equ	0xFF1
  2067                           intcon3	equ	0xFF0
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _operation *****************
  2073 ;; Defined at:
  2074 ;;		line 340 in file "main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        2 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:   10
  2095 ;; This function calls:
  2096 ;;		_lcdInst
  2097 ;;		_printf
  2098 ;;		_read_colorsensor
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text3
  2105  002478                     __ptext3:
  2106                           	opt stack 0
  2107  002478                     _operation:
  2108                           	opt stack 20
  2109                           
  2110                           ;main.c: 341: switch(operation_disp){
  2111                           
  2112                           ;incstack = 0
  2113  002478  D044               	goto	l4442
  2114  00247A                     l4416:
  2115                           
  2116                           ;main.c: 343: lcdInst(0b10000000);
  2117  00247A  0E80               	movlw	128
  2118  00247C  EC2C  F018         	call	_lcdInst
  2119                           
  2120                           ;main.c: 344: printf("Running~              ");
  2121  002480  0E5F               	movlw	low STR_19
  2122  002482  0100               	movlb	0	; () banked
  2123  002484  6F9C               	movwf	printf@f& (0+255),b
  2124  002486  0EFE               	movlw	high STR_19
  2125  002488  0100               	movlb	0	; () banked
  2126  00248A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2127  00248C  EC09  F000         	call	_printf	;wreg free
  2128                           
  2129                           ;main.c: 345: lcdInst(0b11000000);
  2130  002490  0EC0               	movlw	192
  2131  002492  EC2C  F018         	call	_lcdInst
  2132                           
  2133                           ;main.c: 346: read_colorsensor();
  2134  002496  EC3E  F010         	call	_read_colorsensor	;wreg free
  2135                           
  2136                           ;main.c: 347: printf("C: %d                ", color[0]);
  2137  00249A  0EBB               	movlw	low STR_20
  2138  00249C  0100               	movlb	0	; () banked
  2139  00249E  6F9C               	movwf	printf@f& (0+255),b
  2140  0024A0  0EFE               	movlw	high STR_20
  2141  0024A2  0100               	movlb	0	; () banked
  2142  0024A4  6F9D               	movwf	(printf@f+1)& (0+255),b
  2143  0024A6  C0C1  F09E         	movff	_color,?_printf+2
  2144  0024AA  C0C2  F09F         	movff	_color+1,?_printf+3
  2145  0024AE  EC09  F000         	call	_printf	;wreg free
  2146                           
  2147                           ;main.c: 348: operation_disp = 1;
  2148  0024B2  0E00               	movlw	0
  2149  0024B4  0100               	movlb	0	; () banked
  2150  0024B6  6FD3               	movwf	(_operation_disp+1)& (0+255),b
  2151  0024B8  0E01               	movlw	1
  2152  0024BA  6FD2               	movwf	_operation_disp& (0+255),b
  2153                           
  2154                           ;main.c: 349: break;
  2155  0024BC  0012               	return	
  2156  0024BE                     l4428:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 351: lcdInst(0b10000000);
  2160  0024BE  0E80               	movlw	128
  2161  0024C0  EC2C  F018         	call	_lcdInst
  2162                           
  2163                           ;main.c: 352: printf("Running~~              ");
  2164  0024C4  0E47               	movlw	low STR_21
  2165  0024C6  0100               	movlb	0	; () banked
  2166  0024C8  6F9C               	movwf	printf@f& (0+255),b
  2167  0024CA  0EFE               	movlw	high STR_21
  2168  0024CC  0100               	movlb	0	; () banked
  2169  0024CE  6F9D               	movwf	(printf@f+1)& (0+255),b
  2170  0024D0  EC09  F000         	call	_printf	;wreg free
  2171                           
  2172                           ;main.c: 353: operation_disp = 2;
  2173  0024D4  0E00               	movlw	0
  2174  0024D6  0100               	movlb	0	; () banked
  2175  0024D8  6FD3               	movwf	(_operation_disp+1)& (0+255),b
  2176  0024DA  0E02               	movlw	2
  2177  0024DC  6FD2               	movwf	_operation_disp& (0+255),b
  2178                           
  2179                           ;main.c: 354: break;
  2180  0024DE  0012               	return	
  2181  0024E0                     l4434:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;main.c: 356: lcdInst(0b10000000);
  2185  0024E0  0E80               	movlw	128
  2186  0024E2  EC2C  F018         	call	_lcdInst
  2187                           
  2188                           ;main.c: 357: printf("Running~~~              ");
  2189  0024E6  0E2E               	movlw	low STR_22
  2190  0024E8  0100               	movlb	0	; () banked
  2191  0024EA  6F9C               	movwf	printf@f& (0+255),b
  2192  0024EC  0EFE               	movlw	high STR_22
  2193  0024EE  0100               	movlb	0	; () banked
  2194  0024F0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2195  0024F2  EC09  F000         	call	_printf	;wreg free
  2196                           
  2197                           ;main.c: 358: operation_disp = 0;
  2198  0024F6  0E00               	movlw	0
  2199  0024F8  0100               	movlb	0	; () banked
  2200  0024FA  6FD3               	movwf	(_operation_disp+1)& (0+255),b
  2201  0024FC  0E00               	movlw	0
  2202  0024FE  6FD2               	movwf	_operation_disp& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;main.c: 360: }
  2206                           
  2207                           ;main.c: 359: break;
  2208  002500  0012               	return	
  2209  002502                     l4442:
  2210  002502  C0D2  F0BD         	movff	_operation_disp,??_operation
  2211  002506  C0D3  F0BE         	movff	_operation_disp+1,??_operation+1
  2212                           
  2213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2214                           ; Switch size 1, requested type "space"
  2215                           ; Number of cases is 1, Range of values is 0 to 0
  2216                           ; switch strategies available:
  2217                           ; Name         Instructions Cycles
  2218                           ; simple_byte            4     3 (average)
  2219                           ;	Chosen strategy is simple_byte
  2220  00250A  0100               	movlb	0	; () banked
  2221  00250C  51BE               	movf	(??_operation+1)& (0+255),w,b
  2222  00250E  0A00               	xorlw	0	; case 0
  2223  002510  A4D8               	btfss	status,2,c
  2224  002512  0012               	return	
  2225                           
  2226                           ; BSR set to: 0
  2227                           ; Switch size 1, requested type "space"
  2228                           ; Number of cases is 3, Range of values is 0 to 2
  2229                           ; switch strategies available:
  2230                           ; Name         Instructions Cycles
  2231                           ; simple_byte           10     6 (average)
  2232                           ;	Chosen strategy is simple_byte
  2233  002514  0100               	movlb	0	; () banked
  2234  002516  51BD               	movf	??_operation& (0+255),w,b
  2235  002518  0A00               	xorlw	0	; case 0
  2236  00251A  B4D8               	btfsc	status,2,c
  2237  00251C  D7AE               	goto	l4416
  2238  00251E  0A01               	xorlw	1	; case 1
  2239  002520  B4D8               	btfsc	status,2,c
  2240  002522  D7CD               	goto	l4428
  2241  002524  0A03               	xorlw	3	; case 2
  2242  002526  A4D8               	btfss	status,2,c
  2243  002528  0012               	return	
  2244  00252A  D7DA               	goto	l4434
  2245  00252C                     __end_of_operation:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           intcon	equ	0xFF2
  2252                           intcon2	equ	0xFF1
  2253                           intcon3	equ	0xFF0
  2254                           postinc0	equ	0xFEE
  2255                           wreg	equ	0xFE8
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _read_colorsensor *****************
  2259 ;; Defined at:
  2260 ;;		line 417 in file "main.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  i               2   28[BANK0 ] short 
  2265 ;;  color_comb      2   25[BANK0 ] unsigned short 
  2266 ;;  color_high      2   23[BANK0 ] unsigned short 
  2267 ;;  color_low       2   21[BANK0 ] unsigned short 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;Total ram usage:       11 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    9
  2284 ;; This function calls:
  2285 ;;		_I2C_Master_Read
  2286 ;;		_I2C_Master_Start
  2287 ;;		_I2C_Master_Stop
  2288 ;;		_I2C_Master_Write
  2289 ;; This function is called by:
  2290 ;;		_operation
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text4
  2295  00207C                     __ptext4:
  2296                           	opt stack 0
  2297  00207C                     _read_colorsensor:
  2298                           	opt stack 20
  2299                           
  2300                           ;main.c: 418: unsigned short color_low;
  2301                           ;main.c: 419: unsigned short color_high;
  2302                           ;main.c: 420: unsigned short color_comb;
  2303                           ;main.c: 421: short i;
  2304                           ;main.c: 424: I2C_Master_Start();
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;incstack = 0
  2308  00207C  EC4E  F018         	call	_I2C_Master_Start	;wreg free
  2309                           
  2310                           ;main.c: 425: I2C_Master_Write(0b01010010);
  2311  002080  0E00               	movlw	0
  2312  002082  0100               	movlb	0	; () banked
  2313  002084  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2314  002086  0E52               	movlw	82
  2315  002088  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2316  00208A  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2317                           
  2318                           ;main.c: 426: I2C_Master_Write(0b10110100);
  2319  00208E  0E00               	movlw	0
  2320  002090  0100               	movlb	0	; () banked
  2321  002092  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2322  002094  0EB4               	movlw	180
  2323  002096  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2324  002098  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2325                           
  2326                           ;main.c: 427: I2C_Master_Start();
  2327  00209C  EC4E  F018         	call	_I2C_Master_Start	;wreg free
  2328                           
  2329                           ;main.c: 428: I2C_Master_Write(0b01010011);
  2330  0020A0  0E00               	movlw	0
  2331  0020A2  0100               	movlb	0	; () banked
  2332  0020A4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2333  0020A6  0E53               	movlw	83
  2334  0020A8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2335  0020AA  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2336                           
  2337                           ;main.c: 429: for(i=0; i<4; i++){
  2338  0020AE  0E00               	movlw	0
  2339  0020B0  0100               	movlb	0	; () banked
  2340  0020B2  6F9D               	movwf	(read_colorsensor@i+1)& (0+255),b
  2341  0020B4  0E00               	movlw	0
  2342  0020B6  6F9C               	movwf	read_colorsensor@i& (0+255),b
  2343  0020B8                     l3814:
  2344                           
  2345                           ; BSR set to: 0
  2346  0020B8  0100               	movlb	0	; () banked
  2347  0020BA  BF9D               	btfsc	(read_colorsensor@i+1)& (0+255),7,b
  2348  0020BC  D008               	goto	l3818
  2349  0020BE  0100               	movlb	0	; () banked
  2350  0020C0  519D               	movf	(read_colorsensor@i+1)& (0+255),w,b
  2351  0020C2  E146               	bnz	l3836
  2352  0020C4  0E04               	movlw	4
  2353  0020C6  0100               	movlb	0	; () banked
  2354  0020C8  5D9C               	subwf	read_colorsensor@i& (0+255),w,b
  2355  0020CA  B0D8               	btfsc	status,0,c
  2356  0020CC  D041               	goto	l3836
  2357  0020CE                     l3818:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 430: color_low = I2C_Master_Read(1);
  2361  0020CE  0E01               	movlw	1
  2362  0020D0  EC85  F017         	call	_I2C_Master_Read
  2363  0020D4  0100               	movlb	0	; () banked
  2364  0020D6  6F93               	movwf	??_read_colorsensor& (0+255),b
  2365  0020D8  0100               	movlb	0	; () banked
  2366  0020DA  5193               	movf	??_read_colorsensor& (0+255),w,b
  2367  0020DC  0100               	movlb	0	; () banked
  2368  0020DE  6F95               	movwf	read_colorsensor@color_low& (0+255),b
  2369  0020E0  6B96               	clrf	(read_colorsensor@color_low+1)& (0+255),b
  2370                           
  2371                           ;main.c: 431: color_high = I2C_Master_Read(1);
  2372  0020E2  0E01               	movlw	1
  2373  0020E4  EC85  F017         	call	_I2C_Master_Read
  2374  0020E8  0100               	movlb	0	; () banked
  2375  0020EA  6F93               	movwf	??_read_colorsensor& (0+255),b
  2376  0020EC  0100               	movlb	0	; () banked
  2377  0020EE  5193               	movf	??_read_colorsensor& (0+255),w,b
  2378  0020F0  0100               	movlb	0	; () banked
  2379  0020F2  6F97               	movwf	read_colorsensor@color_high& (0+255),b
  2380  0020F4  6B98               	clrf	(read_colorsensor@color_high+1)& (0+255),b
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;main.c: 432: color_comb = (color_high << 8)||(color_low & 0xFF);
  2384  0020F6  0E01               	movlw	1
  2385  0020F8  0100               	movlb	0	; () banked
  2386  0020FA  6F9B               	movwf	_read_colorsensor$450& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389  0020FC  0100               	movlb	0	; () banked
  2390  0020FE  5197               	movf	read_colorsensor@color_high& (0+255),w,b
  2391  002100  0100               	movlb	0	; () banked
  2392  002102  6F94               	movwf	(??_read_colorsensor+1)& (0+255),b
  2393  002104  6B93               	clrf	??_read_colorsensor& (0+255),b
  2394  002106  0100               	movlb	0	; () banked
  2395  002108  5193               	movf	??_read_colorsensor& (0+255),w,b
  2396  00210A  0100               	movlb	0	; () banked
  2397  00210C  1194               	iorwf	(??_read_colorsensor+1)& (0+255),w,b
  2398  00210E  A4D8               	btfss	status,2,c
  2399  002110  D008               	goto	l3828
  2400                           
  2401                           ; BSR set to: 0
  2402  002112  0100               	movlb	0	; () banked
  2403  002114  5195               	movf	read_colorsensor@color_low& (0+255),w,b
  2404  002116  0900               	iorlw	0
  2405  002118  A4D8               	btfss	status,2,c
  2406  00211A  D003               	goto	l3828
  2407                           
  2408                           ; BSR set to: 0
  2409  00211C  0E00               	movlw	0
  2410  00211E  0100               	movlb	0	; () banked
  2411  002120  6F9B               	movwf	_read_colorsensor$450& (0+255),b
  2412  002122                     l3828:
  2413                           
  2414                           ; BSR set to: 0
  2415  002122  C09B  F099         	movff	_read_colorsensor$450,read_colorsensor@color_comb
  2416  002126  0100               	movlb	0	; () banked
  2417  002128  6B9A               	clrf	(read_colorsensor@color_comb+1)& (0+255),b
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;main.c: 433: color[i] = color_comb;
  2421  00212A  90D8               	bcf	status,0,c
  2422  00212C  0100               	movlb	0	; () banked
  2423  00212E  359C               	rlcf	read_colorsensor@i& (0+255),w,b
  2424  002130  6ED9               	movwf	fsr2l,c
  2425  002132  0100               	movlb	0	; () banked
  2426  002134  359D               	rlcf	(read_colorsensor@i+1)& (0+255),w,b
  2427  002136  6EDA               	movwf	fsr2h,c
  2428  002138  0EC1               	movlw	low _color
  2429  00213A  26D9               	addwf	fsr2l,f,c
  2430  00213C  0E00               	movlw	high _color
  2431  00213E  22DA               	addwfc	fsr2h,f,c
  2432  002140  C099  FFDE         	movff	read_colorsensor@color_comb,postinc2
  2433  002144  C09A  FFDD         	movff	read_colorsensor@color_comb+1,postdec2
  2434                           
  2435                           ; BSR set to: 0
  2436  002148  0100               	movlb	0	; () banked
  2437  00214A  4B9C               	infsnz	read_colorsensor@i& (0+255),f,b
  2438  00214C  2B9D               	incf	(read_colorsensor@i+1)& (0+255),f,b
  2439  00214E  D7B4               	goto	l3814
  2440  002150                     l3836:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;main.c: 434: }
  2444                           ;main.c: 435: I2C_Master_Stop();
  2445  002150  EC4A  F018         	call	_I2C_Master_Stop	;wreg free
  2446  002154  0012               	return	
  2447  002156                     __end_of_read_colorsensor:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           tblptrh	equ	0xFF7
  2451                           tblptrl	equ	0xFF6
  2452                           tablat	equ	0xFF5
  2453                           intcon	equ	0xFF2
  2454                           intcon2	equ	0xFF1
  2455                           intcon3	equ	0xFF0
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postinc2	equ	0xFDE
  2459                           postdec2	equ	0xFDD
  2460                           fsr2h	equ	0xFDA
  2461                           fsr2l	equ	0xFD9
  2462                           status	equ	0xFD8
  2463                           
  2464 ;; *************** function _initLCD *****************
  2465 ;; Defined at:
  2466 ;;		line 14 in file "lcd.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;Total ram usage:        1 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    9
  2487 ;; This function calls:
  2488 ;;		_lcdInst
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text5
  2495  002C9E                     __ptext5:
  2496                           	opt stack 0
  2497  002C9E                     _initLCD:
  2498                           	opt stack 21
  2499                           
  2500                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2501                           
  2502                           ;incstack = 0
  2503  002C9E  0E31               	movlw	49
  2504  002CA0  0100               	movlb	0	; () banked
  2505  002CA2  6F93               	movwf	??_initLCD& (0+255),b
  2506  002CA4  0EB2               	movlw	178
  2507  002CA6                     u5617:
  2508  002CA6  2EE8               	decfsz	wreg,f,c
  2509  002CA8  D7FE               	bra	u5617
  2510  002CAA  2F93               	decfsz	??_initLCD& (0+255),f,b
  2511  002CAC  D7FC               	bra	u5617
  2512  002CAE  F000               	nop	
  2513                           
  2514                           ;lcd.c: 16: lcdInst(0b00110011);
  2515  002CB0  0E33               	movlw	51
  2516  002CB2  EC2C  F018         	call	_lcdInst
  2517                           
  2518                           ;lcd.c: 17: lcdInst(0b00110011);
  2519  002CB6  0E33               	movlw	51
  2520  002CB8  EC2C  F018         	call	_lcdInst
  2521                           
  2522                           ;lcd.c: 18: lcdInst(0b00110010);
  2523  002CBC  0E32               	movlw	50
  2524  002CBE  EC2C  F018         	call	_lcdInst
  2525                           
  2526                           ;lcd.c: 19: lcdInst(0b00101000);
  2527  002CC2  0E28               	movlw	40
  2528  002CC4  EC2C  F018         	call	_lcdInst
  2529                           
  2530                           ;lcd.c: 20: lcdInst(0b00001111);
  2531  002CC8  0E0F               	movlw	15
  2532  002CCA  EC2C  F018         	call	_lcdInst
  2533                           
  2534                           ;lcd.c: 21: lcdInst(0b00000110);
  2535  002CCE  0E06               	movlw	6
  2536  002CD0  EC2C  F018         	call	_lcdInst
  2537                           
  2538                           ;lcd.c: 22: lcdInst(0b00000001);
  2539  002CD4  0E01               	movlw	1
  2540  002CD6  EC2C  F018         	call	_lcdInst
  2541                           
  2542                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2543  002CDA  0E31               	movlw	49
  2544  002CDC  0100               	movlb	0	; () banked
  2545  002CDE  6F93               	movwf	??_initLCD& (0+255),b
  2546  002CE0  0EB2               	movlw	178
  2547  002CE2                     u5627:
  2548  002CE2  2EE8               	decfsz	wreg,f,c
  2549  002CE4  D7FE               	bra	u5627
  2550  002CE6  2F93               	decfsz	??_initLCD& (0+255),f,b
  2551  002CE8  D7FC               	bra	u5627
  2552  002CEA  F000               	nop	
  2553  002CEC  0012               	return		;funcret
  2554  002CEE                     __end_of_initLCD:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           intcon	equ	0xFF2
  2561                           intcon2	equ	0xFF1
  2562                           intcon3	equ	0xFF0
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _emergencystop *****************
  2572 ;; Defined at:
  2573 ;;		line 370 in file "main.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;Total ram usage:        0 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:   10
  2594 ;; This function calls:
  2595 ;;		_lcdInst
  2596 ;;		_printf
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text6
  2603  002FF0                     __ptext6:
  2604                           	opt stack 0
  2605  002FF0                     _emergencystop:
  2606                           	opt stack 20
  2607                           
  2608                           ;main.c: 371: lcdInst(0b10000000);
  2609                           
  2610                           ;incstack = 0
  2611  002FF0  0E80               	movlw	128
  2612  002FF2  EC2C  F018         	call	_lcdInst
  2613                           
  2614                           ;main.c: 372: printf("EMERGENCY STOP");
  2615  002FF6  0ED0               	movlw	low STR_24
  2616  002FF8  0100               	movlb	0	; () banked
  2617  002FFA  6F9C               	movwf	printf@f& (0+255),b
  2618  002FFC  0EFF               	movlw	high STR_24
  2619  002FFE  0100               	movlb	0	; () banked
  2620  003000  6F9D               	movwf	(printf@f+1)& (0+255),b
  2621  003002  EC09  F000         	call	_printf	;wreg free
  2622                           
  2623                           ;main.c: 373: (INTCONbits.GIE = 0);
  2624  003006  9EF2               	bcf	intcon,7,c	;volatile
  2625  003008                     l304:
  2626  003008  D7FF               	goto	l304
  2627  00300A                     __end_of_emergencystop:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           tblptrh	equ	0xFF7
  2631                           tblptrl	equ	0xFF6
  2632                           tablat	equ	0xFF5
  2633                           intcon	equ	0xFF2
  2634                           intcon2	equ	0xFF1
  2635                           intcon3	equ	0xFF0
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           postinc2	equ	0xFDE
  2639                           postdec2	equ	0xFDD
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _date_time *****************
  2645 ;; Defined at:
  2646 ;;		line 247 in file "main.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;		None
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  i               1   61[BANK0 ] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;Total ram usage:        1 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:   10
  2667 ;; This function calls:
  2668 ;;		_I2C_Master_Read
  2669 ;;		_I2C_Master_Start
  2670 ;;		_I2C_Master_Stop
  2671 ;;		_I2C_Master_Write
  2672 ;;		_lcdInst
  2673 ;;		_printf
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text7
  2680  002156                     __ptext7:
  2681                           	opt stack 0
  2682  002156                     _date_time:
  2683                           	opt stack 20
  2684                           
  2685                           ;main.c: 249: I2C_Master_Start();
  2686                           
  2687                           ;incstack = 0
  2688  002156  EC4E  F018         	call	_I2C_Master_Start	;wreg free
  2689                           
  2690                           ;main.c: 250: I2C_Master_Write(0b11010000);
  2691  00215A  0E00               	movlw	0
  2692  00215C  0100               	movlb	0	; () banked
  2693  00215E  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2694  002160  0ED0               	movlw	208
  2695  002162  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2696  002164  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2697                           
  2698                           ;main.c: 251: I2C_Master_Write(0x00);
  2699  002168  0E00               	movlw	0
  2700  00216A  0100               	movlb	0	; () banked
  2701  00216C  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2702  00216E  0E00               	movlw	0
  2703  002170  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2704  002172  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2705                           
  2706                           ;main.c: 252: I2C_Master_Stop();
  2707  002176  EC4A  F018         	call	_I2C_Master_Stop	;wreg free
  2708                           
  2709                           ;main.c: 255: I2C_Master_Start();
  2710  00217A  EC4E  F018         	call	_I2C_Master_Start	;wreg free
  2711                           
  2712                           ;main.c: 256: I2C_Master_Write(0b11010001);
  2713  00217E  0E00               	movlw	0
  2714  002180  0100               	movlb	0	; () banked
  2715  002182  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2716  002184  0ED1               	movlw	209
  2717  002186  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2718  002188  EC40  F018         	call	_I2C_Master_Write	;wreg free
  2719                           
  2720                           ;main.c: 257: for(unsigned char i=0;i<0x06;i++){
  2721  00218C  0E00               	movlw	0
  2722  00218E  0100               	movlb	0	; () banked
  2723  002190  6FBD               	movwf	date_time@i& (0+255),b
  2724  002192                     l4458:
  2725                           
  2726                           ; BSR set to: 0
  2727  002192  0E05               	movlw	5
  2728  002194  0100               	movlb	0	; () banked
  2729  002196  65BD               	cpfsgt	date_time@i& (0+255),b
  2730  002198  D001               	goto	l4462
  2731  00219A  D010               	goto	l4468
  2732  00219C                     l4462:
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 258: time[i] = I2C_Master_Read(1);
  2736  00219C  0100               	movlb	0	; () banked
  2737  00219E  51BD               	movf	date_time@i& (0+255),w,b
  2738  0021A0  0D01               	mullw	1
  2739  0021A2  0EC9               	movlw	low _time
  2740  0021A4  24F3               	addwf	prodl,w,c
  2741  0021A6  6ED9               	movwf	fsr2l,c
  2742  0021A8  0E00               	movlw	high _time
  2743  0021AA  20F4               	addwfc	prodh,w,c
  2744  0021AC  6EDA               	movwf	fsr2h,c
  2745  0021AE  0E01               	movlw	1
  2746  0021B0  EC85  F017         	call	_I2C_Master_Read
  2747  0021B4  6EDF               	movwf	indf2,c
  2748  0021B6  0100               	movlb	0	; () banked
  2749  0021B8  2BBD               	incf	date_time@i& (0+255),f,b
  2750  0021BA  D7EB               	goto	l4458
  2751  0021BC                     l4468:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 259: }
  2755                           ;main.c: 260: time[6] = I2C_Master_Read(0);
  2756  0021BC  0E00               	movlw	0
  2757  0021BE  EC85  F017         	call	_I2C_Master_Read
  2758  0021C2  0100               	movlb	0	; () banked
  2759  0021C4  6FCF               	movwf	(_time+6)& (0+255),b
  2760                           
  2761                           ;main.c: 261: I2C_Master_Stop();
  2762  0021C6  EC4A  F018         	call	_I2C_Master_Stop	;wreg free
  2763                           
  2764                           ;main.c: 264: lcdInst(0b10000000);
  2765  0021CA  0E80               	movlw	128
  2766  0021CC  EC2C  F018         	call	_lcdInst
  2767                           
  2768                           ;main.c: 265: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2769  0021D0  0E8D               	movlw	low STR_4
  2770  0021D2  0100               	movlb	0	; () banked
  2771  0021D4  6F9C               	movwf	printf@f& (0+255),b
  2772  0021D6  0EFE               	movlw	high STR_4
  2773  0021D8  0100               	movlb	0	; () banked
  2774  0021DA  6F9D               	movwf	(printf@f+1)& (0+255),b
  2775  0021DC  C0CE  F09E         	movff	_time+5,?_printf+2
  2776  0021E0  0100               	movlb	0	; () banked
  2777  0021E2  6B9F               	clrf	(?_printf+3)& (0+255),b
  2778  0021E4  C0CD  F0A0         	movff	_time+4,?_printf+4
  2779  0021E8  0100               	movlb	0	; () banked
  2780  0021EA  6BA1               	clrf	(?_printf+5)& (0+255),b
  2781  0021EC  C0CF  F0A2         	movff	_time+6,?_printf+6
  2782  0021F0  0100               	movlb	0	; () banked
  2783  0021F2  6BA3               	clrf	(?_printf+7)& (0+255),b
  2784  0021F4  EC09  F000         	call	_printf	;wreg free
  2785                           
  2786                           ;main.c: 266: lcdInst(0b11000000);
  2787  0021F8  0EC0               	movlw	192
  2788  0021FA  EC2C  F018         	call	_lcdInst
  2789                           
  2790                           ;main.c: 267: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2791  0021FE  0EA4               	movlw	low STR_5
  2792  002200  0100               	movlb	0	; () banked
  2793  002202  6F9C               	movwf	printf@f& (0+255),b
  2794  002204  0EFE               	movlw	high STR_5
  2795  002206  0100               	movlb	0	; () banked
  2796  002208  6F9D               	movwf	(printf@f+1)& (0+255),b
  2797  00220A  C0CB  F09E         	movff	_time+2,?_printf+2
  2798  00220E  0100               	movlb	0	; () banked
  2799  002210  6B9F               	clrf	(?_printf+3)& (0+255),b
  2800  002212  C0CA  F0A0         	movff	_time+1,?_printf+4
  2801  002216  0100               	movlb	0	; () banked
  2802  002218  6BA1               	clrf	(?_printf+5)& (0+255),b
  2803  00221A  C0C9  F0A2         	movff	_time,?_printf+6
  2804  00221E  0100               	movlb	0	; () banked
  2805  002220  6BA3               	clrf	(?_printf+7)& (0+255),b
  2806  002222  EC09  F000         	call	_printf	;wreg free
  2807  002226  0012               	return	
  2808  002228                     __end_of_date_time:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           intcon2	equ	0xFF1
  2818                           intcon3	equ	0xFF0
  2819                           postinc0	equ	0xFEE
  2820                           wreg	equ	0xFE8
  2821                           indf2	equ	0xFDF
  2822                           postinc2	equ	0xFDE
  2823                           postdec2	equ	0xFDD
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _I2C_Master_Read *****************
  2829 ;; Defined at:
  2830 ;;		line 61 in file "I2C.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  a               1    wreg     unsigned char 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  a               1   17[BANK0 ] unsigned char 
  2835 ;;  temp            1   18[BANK0 ] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      unsigned char 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;Total ram usage:        2 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    8
  2852 ;; This function calls:
  2853 ;;		_I2C_Master_Wait
  2854 ;; This function is called by:
  2855 ;;		_date_time
  2856 ;;		_read_colorsensor
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text8
  2861  002F0A                     __ptext8:
  2862                           	opt stack 0
  2863  002F0A                     _I2C_Master_Read:
  2864                           	opt stack 20
  2865                           
  2866                           ;incstack = 0
  2867                           ;I2C_Master_Read@a stored from wreg
  2868  002F0A  0100               	movlb	0	; () banked
  2869  002F0C  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2870                           
  2871                           ;I2C.c: 63: unsigned char temp;
  2872                           ;I2C.c: 64: I2C_Master_Wait();
  2873  002F0E  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  2874                           
  2875                           ;I2C.c: 65: RCEN = 1;
  2876  002F12  86C5               	bsf	4037,3,c	;volatile
  2877                           
  2878                           ;I2C.c: 66: I2C_Master_Wait();
  2879  002F14  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  2880                           
  2881                           ;I2C.c: 67: temp = SSPBUF;
  2882  002F18  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2883                           
  2884                           ;I2C.c: 68: I2C_Master_Wait();
  2885  002F1C  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  2886                           
  2887                           ;I2C.c: 69: ACKDT = (a)?0:1;
  2888  002F20  0100               	movlb	0	; () banked
  2889  002F22  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2890  002F24  0100               	movlb	0	; () banked
  2891  002F26  A4D8               	btfss	status,2,c
  2892  002F28  D002               	goto	u3510
  2893  002F2A  8AC5               	bsf	4037,5,c	;volatile
  2894  002F2C  D001               	goto	l3642
  2895  002F2E                     u3510:
  2896  002F2E  9AC5               	bcf	4037,5,c	;volatile
  2897  002F30                     l3642:
  2898                           
  2899                           ;I2C.c: 70: ACKEN = 1;
  2900  002F30  88C5               	bsf	4037,4,c	;volatile
  2901                           
  2902                           ;I2C.c: 71: return temp;
  2903  002F32  0100               	movlb	0	; () banked
  2904  002F34  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2905  002F36  0012               	return	
  2906  002F38                     __end_of_I2C_Master_Read:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           prodh	equ	0xFF4
  2913                           prodl	equ	0xFF3
  2914                           intcon	equ	0xFF2
  2915                           intcon2	equ	0xFF1
  2916                           intcon3	equ	0xFF0
  2917                           postinc0	equ	0xFEE
  2918                           wreg	equ	0xFE8
  2919                           indf2	equ	0xFDF
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           fsr2h	equ	0xFDA
  2923                           fsr2l	equ	0xFD9
  2924                           status	equ	0xFD8
  2925                           
  2926 ;; *************** function _bottle_time *****************
  2927 ;; Defined at:
  2928 ;;		line 332 in file "main.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  time            2   61[BANK0 ] int 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;Total ram usage:        2 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:   10
  2949 ;; This function calls:
  2950 ;;		_lcdInst
  2951 ;;		_printf
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text9
  2958  002E6A                     __ptext9:
  2959                           	opt stack 0
  2960  002E6A                     _bottle_time:
  2961                           	opt stack 20
  2962                           
  2963                           ;main.c: 333: lcdInst(0b10000000);
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;incstack = 0
  2967  002E6A  0E80               	movlw	128
  2968  002E6C  EC2C  F018         	call	_lcdInst
  2969                           
  2970                           ;main.c: 334: printf("Total Operation       ");
  2971  002E70  0E76               	movlw	low STR_17
  2972  002E72  0100               	movlb	0	; () banked
  2973  002E74  6F9C               	movwf	printf@f& (0+255),b
  2974  002E76  0EFE               	movlw	high STR_17
  2975  002E78  0100               	movlb	0	; () banked
  2976  002E7A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2977  002E7C  EC09  F000         	call	_printf	;wreg free
  2978                           
  2979                           ;main.c: 335: lcdInst(0b11000000);
  2980  002E80  0EC0               	movlw	192
  2981  002E82  EC2C  F018         	call	_lcdInst
  2982                           
  2983                           ;main.c: 336: printf("Time: %d s       ", time);
  2984  002E86  0ED1               	movlw	low STR_18
  2985  002E88  0100               	movlb	0	; () banked
  2986  002E8A  6F9C               	movwf	printf@f& (0+255),b
  2987  002E8C  0EFE               	movlw	high STR_18
  2988  002E8E  0100               	movlb	0	; () banked
  2989  002E90  6F9D               	movwf	(printf@f+1)& (0+255),b
  2990  002E92  C0BD  F09E         	movff	bottle_time@time,?_printf+2
  2991  002E96  C0BE  F09F         	movff	bottle_time@time+1,?_printf+3
  2992  002E9A  EC09  F000         	call	_printf	;wreg free
  2993  002E9E  0012               	return	
  2994  002EA0                     __end_of_bottle_time:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           intcon2	equ	0xFF1
  3004                           intcon3	equ	0xFF0
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           indf2	equ	0xFDF
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _bottle_count *****************
  3015 ;; Defined at:
  3016 ;;		line 290 in file "main.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:   10
  3037 ;; This function calls:
  3038 ;;		___awmod
  3039 ;;		_lcdInst
  3040 ;;		_printf
  3041 ;; This function is called by:
  3042 ;;		_main
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text10
  3047  001864                     __ptext10:
  3048                           	opt stack 0
  3049  001864                     _bottle_count:
  3050                           	opt stack 20
  3051                           
  3052                           ;main.c: 291: switch(bottle_count_disp % 5){
  3053                           
  3054                           ;incstack = 0
  3055  001864  D083               	goto	l4514
  3056  001866                     l4478:
  3057                           
  3058                           ;main.c: 293: lcdInst(0b10000000);
  3059  001866  0E80               	movlw	128
  3060  001868  EC2C  F018         	call	_lcdInst
  3061                           
  3062                           ;main.c: 294: printf("Bottle Count    ");
  3063  00186C  0E27               	movlw	low STR_6
  3064  00186E  0100               	movlb	0	; () banked
  3065  001870  6F9C               	movwf	printf@f& (0+255),b
  3066  001872  0EFF               	movlw	high STR_6
  3067  001874  0100               	movlb	0	; () banked
  3068  001876  6F9D               	movwf	(printf@f+1)& (0+255),b
  3069  001878  EC09  F000         	call	_printf	;wreg free
  3070                           
  3071                           ;main.c: 295: lcdInst(0b11000000);
  3072  00187C  0EC0               	movlw	192
  3073  00187E  EC2C  F018         	call	_lcdInst
  3074                           
  3075                           ;main.c: 296: printf("Total: 10       ");
  3076  001882  0E16               	movlw	low STR_7
  3077  001884  0100               	movlb	0	; () banked
  3078  001886  6F9C               	movwf	printf@f& (0+255),b
  3079  001888  0EFF               	movlw	high STR_7
  3080  00188A  0100               	movlb	0	; () banked
  3081  00188C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3082  00188E  EC09  F000         	call	_printf	;wreg free
  3083                           
  3084                           ;main.c: 297: break;
  3085  001892  0012               	return	
  3086  001894                     l4484:
  3087                           
  3088                           ;main.c: 299: lcdInst(0b10000000);
  3089  001894  0E80               	movlw	128
  3090  001896  EC2C  F018         	call	_lcdInst
  3091                           
  3092                           ;main.c: 300: printf("YOP+CAP+LBL: 3  ");
  3093  00189A  0E6B               	movlw	low STR_8
  3094  00189C  0100               	movlb	0	; () banked
  3095  00189E  6F9C               	movwf	printf@f& (0+255),b
  3096  0018A0  0EFF               	movlw	high STR_8
  3097  0018A2  0100               	movlb	0	; () banked
  3098  0018A4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3099  0018A6  EC09  F000         	call	_printf	;wreg free
  3100                           
  3101                           ;main.c: 301: lcdInst(0b11000000);
  3102  0018AA  0EC0               	movlw	192
  3103  0018AC  EC2C  F018         	call	_lcdInst
  3104                           
  3105                           ;main.c: 302: printf("YOP+CAP-LBL: 1  ");
  3106  0018B0  0E5A               	movlw	low STR_9
  3107  0018B2  0100               	movlb	0	; () banked
  3108  0018B4  6F9C               	movwf	printf@f& (0+255),b
  3109  0018B6  0EFF               	movlw	high STR_9
  3110  0018B8  0100               	movlb	0	; () banked
  3111  0018BA  6F9D               	movwf	(printf@f+1)& (0+255),b
  3112  0018BC  EC09  F000         	call	_printf	;wreg free
  3113                           
  3114                           ;main.c: 303: break;
  3115  0018C0  0012               	return	
  3116  0018C2                     l4490:
  3117                           
  3118                           ;main.c: 305: lcdInst(0b10000000);
  3119  0018C2  0E80               	movlw	128
  3120  0018C4  EC2C  F018         	call	_lcdInst
  3121                           
  3122                           ;main.c: 306: printf("YOP-CAP+LBL: 1  ");
  3123  0018C8  0E49               	movlw	low STR_10
  3124  0018CA  0100               	movlb	0	; () banked
  3125  0018CC  6F9C               	movwf	printf@f& (0+255),b
  3126  0018CE  0EFF               	movlw	high STR_10
  3127  0018D0  0100               	movlb	0	; () banked
  3128  0018D2  6F9D               	movwf	(printf@f+1)& (0+255),b
  3129  0018D4  EC09  F000         	call	_printf	;wreg free
  3130                           
  3131                           ;main.c: 307: lcdInst(0b11000000);
  3132  0018D8  0EC0               	movlw	192
  3133  0018DA  EC2C  F018         	call	_lcdInst
  3134                           
  3135                           ;main.c: 308: printf("YOP-CAP-LBL: 0  ");
  3136  0018DE  0E38               	movlw	low STR_11
  3137  0018E0  0100               	movlb	0	; () banked
  3138  0018E2  6F9C               	movwf	printf@f& (0+255),b
  3139  0018E4  0EFF               	movlw	high STR_11
  3140  0018E6  0100               	movlb	0	; () banked
  3141  0018E8  6F9D               	movwf	(printf@f+1)& (0+255),b
  3142  0018EA  EC09  F000         	call	_printf	;wreg free
  3143                           
  3144                           ;main.c: 309: break;
  3145  0018EE  0012               	return	
  3146  0018F0                     l4496:
  3147                           
  3148                           ;main.c: 311: lcdInst(0b10000000);
  3149  0018F0  0E80               	movlw	128
  3150  0018F2  EC2C  F018         	call	_lcdInst
  3151                           
  3152                           ;main.c: 312: printf("ESKA+CAP+LBL: 1 ");
  3153  0018F6  0E7C               	movlw	low STR_12
  3154  0018F8  0100               	movlb	0	; () banked
  3155  0018FA  6F9C               	movwf	printf@f& (0+255),b
  3156  0018FC  0EFF               	movlw	high STR_12
  3157  0018FE  0100               	movlb	0	; () banked
  3158  001900  6F9D               	movwf	(printf@f+1)& (0+255),b
  3159  001902  EC09  F000         	call	_printf	;wreg free
  3160                           
  3161                           ;main.c: 313: lcdInst(0b11000000);
  3162  001906  0EC0               	movlw	192
  3163  001908  EC2C  F018         	call	_lcdInst
  3164                           
  3165                           ;main.c: 314: printf("ESKA+CAP-LBL: 1 ");
  3166  00190C  0E9E               	movlw	low STR_13
  3167  00190E  0100               	movlb	0	; () banked
  3168  001910  6F9C               	movwf	printf@f& (0+255),b
  3169  001912  0EFF               	movlw	high STR_13
  3170  001914  0100               	movlb	0	; () banked
  3171  001916  6F9D               	movwf	(printf@f+1)& (0+255),b
  3172  001918  EC09  F000         	call	_printf	;wreg free
  3173                           
  3174                           ;main.c: 315: break;
  3175  00191C  0012               	return	
  3176  00191E                     l4502:
  3177                           
  3178                           ;main.c: 317: lcdInst(0b10000000);
  3179  00191E  0E80               	movlw	128
  3180  001920  EC2C  F018         	call	_lcdInst
  3181                           
  3182                           ;main.c: 318: printf("ESKA-CAP+LBL: 1 ");
  3183  001924  0E8D               	movlw	low STR_14
  3184  001926  0100               	movlb	0	; () banked
  3185  001928  6F9C               	movwf	printf@f& (0+255),b
  3186  00192A  0EFF               	movlw	high STR_14
  3187  00192C  0100               	movlb	0	; () banked
  3188  00192E  6F9D               	movwf	(printf@f+1)& (0+255),b
  3189  001930  EC09  F000         	call	_printf	;wreg free
  3190                           
  3191                           ;main.c: 319: lcdInst(0b11000000);
  3192  001934  0EC0               	movlw	192
  3193  001936  EC2C  F018         	call	_lcdInst
  3194                           
  3195                           ;main.c: 320: printf("ESKA-CAP-LBL: 2 ");
  3196  00193A  0EAF               	movlw	low STR_15
  3197  00193C  0100               	movlb	0	; () banked
  3198  00193E  6F9C               	movwf	printf@f& (0+255),b
  3199  001940  0EFF               	movlw	high STR_15
  3200  001942  0100               	movlb	0	; () banked
  3201  001944  6F9D               	movwf	(printf@f+1)& (0+255),b
  3202  001946  EC09  F000         	call	_printf	;wreg free
  3203                           
  3204                           ;main.c: 321: break;
  3205  00194A  0012               	return	
  3206  00194C                     l4508:
  3207                           
  3208                           ;main.c: 324: lcdInst(0b10000000);
  3209  00194C  0E80               	movlw	128
  3210  00194E  EC2C  F018         	call	_lcdInst
  3211                           
  3212                           ;main.c: 325: printf("ERROR: %d", bottle_count_disp);
  3213  001952  0EED               	movlw	low STR_16
  3214  001954  0100               	movlb	0	; () banked
  3215  001956  6F9C               	movwf	printf@f& (0+255),b
  3216  001958  0EFF               	movlw	high STR_16
  3217  00195A  0100               	movlb	0	; () banked
  3218  00195C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3219  00195E  C0D7  F09E         	movff	_bottle_count_disp,?_printf+2
  3220  001962  C0D8  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3221  001966  EC09  F000         	call	_printf	;wreg free
  3222  00196A  D7F0               	goto	l4508
  3223  00196C                     l4514:
  3224  00196C  C0D7  F090         	movff	_bottle_count_disp,___awmod@dividend
  3225  001970  C0D8  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3226  001974  0E00               	movlw	0
  3227  001976  0100               	movlb	0	; () banked
  3228  001978  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3229  00197A  0E05               	movlw	5
  3230  00197C  6F92               	movwf	___awmod@divisor& (0+255),b
  3231  00197E  EC98  F013         	call	___awmod	;wreg free
  3232                           
  3233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3234                           ; Switch size 1, requested type "space"
  3235                           ; Number of cases is 1, Range of values is 0 to 0
  3236                           ; switch strategies available:
  3237                           ; Name         Instructions Cycles
  3238                           ; simple_byte            4     3 (average)
  3239                           ;	Chosen strategy is simple_byte
  3240  001982  0100               	movlb	0	; () banked
  3241  001984  5191               	movf	(?___awmod+1)& (0+255),w,b
  3242  001986  0A00               	xorlw	0	; case 0
  3243  001988  A4D8               	btfss	status,2,c
  3244  00198A  D7E0               	goto	l4508
  3245                           
  3246                           ; BSR set to: 0
  3247                           ; Switch size 1, requested type "space"
  3248                           ; Number of cases is 5, Range of values is 0 to 4
  3249                           ; switch strategies available:
  3250                           ; Name         Instructions Cycles
  3251                           ; simple_byte           16     9 (average)
  3252                           ;	Chosen strategy is simple_byte
  3253  00198C  0100               	movlb	0	; () banked
  3254  00198E  5190               	movf	?___awmod& (0+255),w,b
  3255  001990  0A00               	xorlw	0	; case 0
  3256  001992  B4D8               	btfsc	status,2,c
  3257  001994  D768               	goto	l4478
  3258  001996  0A01               	xorlw	1	; case 1
  3259  001998  B4D8               	btfsc	status,2,c
  3260  00199A  D77C               	goto	l4484
  3261  00199C  0A03               	xorlw	3	; case 2
  3262  00199E  B4D8               	btfsc	status,2,c
  3263  0019A0  D790               	goto	l4490
  3264  0019A2  0A01               	xorlw	1	; case 3
  3265  0019A4  B4D8               	btfsc	status,2,c
  3266  0019A6  D7A4               	goto	l4496
  3267  0019A8  0A07               	xorlw	7	; case 4
  3268  0019AA  B4D8               	btfsc	status,2,c
  3269  0019AC  D7B8               	goto	l4502
  3270  0019AE  D7CE               	goto	l4508
  3271  0019B0                     __end_of_bottle_count:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           intcon	equ	0xFF2
  3280                           intcon2	equ	0xFF1
  3281                           intcon3	equ	0xFF0
  3282                           postinc0	equ	0xFEE
  3283                           wreg	equ	0xFE8
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           postdec2	equ	0xFDD
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _printf *****************
  3292 ;; Defined at:
  3293 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3296 ;;		 -> STR_24(15), STR_23(16), STR_22(25), STR_21(24), 
  3297 ;;		 -> STR_20(22), STR_19(23), STR_18(18), STR_17(23), 
  3298 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  3299 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  3300 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  3301 ;;		 -> STR_4(23), STR_3(8), STR_2(17), STR_1(14), 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  idx             1   48[BANK0 ] unsigned char 
  3304 ;;  tmpval          4    0        struct .
  3305 ;;  flag            2   59[BANK0 ] unsigned short 
  3306 ;;  width           2   56[BANK0 ] int 
  3307 ;;  val             2   53[BANK0 ] unsigned int 
  3308 ;;  ap              2   51[BANK0 ] PTR void [1]
  3309 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3310 ;;  len             2   49[BANK0 ] unsigned int 
  3311 ;;  cp              2   40[BANK0 ] PTR const unsigned char 
  3312 ;;		 -> printf@c(1), 
  3313 ;;  c               1   58[BANK0 ] char 
  3314 ;;  prec            1   55[BANK0 ] char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  2   28[BANK0 ] int 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:       33 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    9
  3331 ;; This function calls:
  3332 ;;		___lwdiv
  3333 ;;		___lwmod
  3334 ;;		___wmul
  3335 ;;		_isdigit
  3336 ;;		_putch
  3337 ;; This function is called by:
  3338 ;;		_standby
  3339 ;;		_date_time
  3340 ;;		_bottle_count
  3341 ;;		_bottle_time
  3342 ;;		_operation
  3343 ;;		_operationend
  3344 ;;		_emergencystop
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text11
  3349  000012                     __ptext11:
  3350                           	opt stack 0
  3351  000012                     _printf:
  3352                           	opt stack 20
  3353                           
  3354                           ;doprnt.c: 466: va_list ap;
  3355                           ;doprnt.c: 499: signed char c;
  3356                           ;doprnt.c: 501: int width;
  3357                           ;doprnt.c: 506: signed char prec;
  3358                           ;doprnt.c: 508: unsigned short flag;
  3359                           ;doprnt.c: 523: union {
  3360                           ;doprnt.c: 524: unsigned long vd;
  3361                           ;doprnt.c: 525: double integ;
  3362                           ;doprnt.c: 526: } tmpval;
  3363                           ;doprnt.c: 528: unsigned int val;
  3364                           ;doprnt.c: 529: unsigned len;
  3365                           ;doprnt.c: 530: const char * cp;
  3366                           ;doprnt.c: 533: *ap = __va_start();
  3367                           
  3368                           ;incstack = 0
  3369  000012  0E9E               	movlw	low (?_printf+2)
  3370  000014  0100               	movlb	0	; () banked
  3371  000016  6FB3               	movwf	printf@ap& (0+255),b
  3372  000018  0E00               	movlw	high (?_printf+2)
  3373  00001A  0100               	movlb	0	; () banked
  3374  00001C  6FB4               	movwf	(printf@ap+1)& (0+255),b
  3375                           
  3376                           ;doprnt.c: 536: while(c = *f++) {
  3377  00001E  EFBD  F004         	goto	l4148
  3378  000022                     l3842:
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;doprnt.c: 538: if(c != '%')
  3382  000022  0E25               	movlw	37
  3383  000024  0100               	movlb	0	; () banked
  3384  000026  19BA               	xorwf	printf@c& (0+255),w,b
  3385  000028  B4D8               	btfsc	status,2,c
  3386  00002A  D006               	goto	l3846
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;doprnt.c: 540: {
  3390                           ;doprnt.c: 541: (putch(c) );
  3391  00002C  0100               	movlb	0	; () banked
  3392  00002E  51BA               	movf	printf@c& (0+255),w,b
  3393  000030  EC24  F018         	call	_putch
  3394                           
  3395                           ;doprnt.c: 542: continue;
  3396  000034  EFBD  F004         	goto	l4148
  3397  000038                     l3846:
  3398                           
  3399                           ;doprnt.c: 543: }
  3400                           ;doprnt.c: 546: width = 0;
  3401  000038  0E00               	movlw	0
  3402  00003A  0100               	movlb	0	; () banked
  3403  00003C  6FB9               	movwf	(printf@width+1)& (0+255),b
  3404  00003E  0E00               	movlw	0
  3405  000040  6FB8               	movwf	printf@width& (0+255),b
  3406                           
  3407                           ;doprnt.c: 548: flag = 0;
  3408  000042  0E00               	movlw	0
  3409  000044  0100               	movlb	0	; () banked
  3410  000046  6FBC               	movwf	(printf@flag+1)& (0+255),b
  3411  000048  0E00               	movlw	0
  3412  00004A  6FBB               	movwf	printf@flag& (0+255),b
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 551: switch(*f) {
  3416                           
  3417                           ;doprnt.c: 550: for(;;) {
  3418  00004C  D00E               	goto	l3858
  3419  00004E                     l3848:
  3420                           
  3421                           ;doprnt.c: 554: flag |= 0x08;
  3422  00004E  0100               	movlb	0	; () banked
  3423  000050  87BB               	bsf	printf@flag& (0+255),3,b
  3424  000052  D008               	goto	L3
  3425  000054                     l3850:
  3426                           
  3427                           ;doprnt.c: 561: flag |= 0x01;
  3428  000054  0100               	movlb	0	; () banked
  3429  000056  81BB               	bsf	printf@flag& (0+255),0,b
  3430  000058  D005               	goto	L3
  3431  00005A                     l3852:
  3432                           
  3433                           ;doprnt.c: 574: flag |= 0x800;
  3434  00005A  0100               	movlb	0	; () banked
  3435  00005C  87BC               	bsf	(printf@flag+1)& (0+255),3,b
  3436  00005E  D002               	goto	L3
  3437  000060                     l3854:
  3438                           
  3439                           ;doprnt.c: 580: flag |= 0x04;
  3440  000060  0100               	movlb	0	; () banked
  3441  000062  85BB               	bsf	printf@flag& (0+255),2,b
  3442  000064                     L3:
  3443                           
  3444                           ;doprnt.c: 581: f++;
  3445  000064  0100               	movlb	0	; () banked
  3446  000066  4B9C               	infsnz	printf@f& (0+255),f,b
  3447  000068  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3448  00006A                     l3858:
  3449  00006A  C09C  FFF6         	movff	printf@f,tblptrl
  3450  00006E  C09D  FFF7         	movff	printf@f+1,tblptrh
  3451  000072                     	if	0	;tblptru may be non-zero
  3452  000072                     	endif
  3453  000072                     	if	0	;tblptru may be non-zero
  3454  000072                     	endif
  3455  000072  0008               	tblrd		*
  3456  000074  50F5               	movf	tablat,w,c
  3457                           
  3458                           ; Switch size 1, requested type "space"
  3459                           ; Number of cases is 4, Range of values is 32 to 48
  3460                           ; switch strategies available:
  3461                           ; Name         Instructions Cycles
  3462                           ; simple_byte           13     7 (average)
  3463                           ;	Chosen strategy is simple_byte
  3464  000076  0A20               	xorlw	32	; case 32
  3465  000078  B4D8               	btfsc	status,2,c
  3466  00007A  D7EC               	goto	l3850
  3467  00007C  0A03               	xorlw	3	; case 35
  3468  00007E  B4D8               	btfsc	status,2,c
  3469  000080  D7EC               	goto	l3852
  3470  000082  0A0E               	xorlw	14	; case 45
  3471  000084  B4D8               	btfsc	status,2,c
  3472  000086  D7E3               	goto	l3848
  3473  000088  0A1D               	xorlw	29	; case 48
  3474  00008A  B4D8               	btfsc	status,2,c
  3475  00008C  D7E9               	goto	l3854
  3476                           
  3477                           ;doprnt.c: 593: if(flag & 0x08)
  3478                           
  3479                           ;doprnt.c: 586: }
  3480                           
  3481                           ;doprnt.c: 585: break;
  3482  00008E  0100               	movlb	0	; () banked
  3483  000090  A7BB               	btfss	printf@flag& (0+255),3,b
  3484  000092  D002               	goto	l3862
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;doprnt.c: 594: flag &= ~0x04;
  3488  000094  0100               	movlb	0	; () banked
  3489  000096  95BB               	bcf	printf@flag& (0+255),2,b
  3490  000098                     l3862:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3494  000098  C09C  FFF6         	movff	printf@f,tblptrl
  3495  00009C  C09D  FFF7         	movff	printf@f+1,tblptrh
  3496  0000A0                     	if	0	;tblptru may be non-zero
  3497  0000A0                     	endif
  3498  0000A0                     	if	0	;tblptru may be non-zero
  3499  0000A0                     	endif
  3500  0000A0  0008               	tblrd		*
  3501  0000A2  50F5               	movf	tablat,w,c
  3502  0000A4  EC9C  F017         	call	_isdigit
  3503  0000A8  A0D8               	btfss	status,0,c
  3504  0000AA  D041               	goto	l3874
  3505                           
  3506                           ;doprnt.c: 598: width = 0;
  3507  0000AC  0E00               	movlw	0
  3508  0000AE  0100               	movlb	0	; () banked
  3509  0000B0  6FB9               	movwf	(printf@width+1)& (0+255),b
  3510  0000B2  0E00               	movlw	0
  3511  0000B4  6FB8               	movwf	printf@width& (0+255),b
  3512  0000B6                     l3866:
  3513                           
  3514                           ;doprnt.c: 600: width *= 10;
  3515  0000B6  C0B8  F090         	movff	printf@width,___wmul@multiplier
  3516  0000BA  C0B9  F091         	movff	printf@width+1,___wmul@multiplier+1
  3517  0000BE  0E00               	movlw	0
  3518  0000C0  0100               	movlb	0	; () banked
  3519  0000C2  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3520  0000C4  0E0A               	movlw	10
  3521  0000C6  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3522  0000C8  EC50  F017         	call	___wmul	;wreg free
  3523  0000CC  C090  F0B8         	movff	?___wmul,printf@width
  3524  0000D0  C091  F0B9         	movff	?___wmul+1,printf@width+1
  3525                           
  3526                           ;doprnt.c: 601: width += *f++ - '0';
  3527  0000D4  0ED0               	movlw	208
  3528  0000D6  0100               	movlb	0	; () banked
  3529  0000D8  6FA4               	movwf	??_printf& (0+255),b
  3530  0000DA  0EFF               	movlw	255
  3531  0000DC  0100               	movlb	0	; () banked
  3532  0000DE  6FA5               	movwf	(??_printf+1)& (0+255),b
  3533  0000E0  C09C  FFF6         	movff	printf@f,tblptrl
  3534  0000E4  C09D  FFF7         	movff	printf@f+1,tblptrh
  3535  0000E8                     	if	0	;tblptru may be non-zero
  3536  0000E8                     	endif
  3537  0000E8                     	if	0	;tblptru may be non-zero
  3538  0000E8                     	endif
  3539  0000E8  0008               	tblrd		*
  3540  0000EA  50F5               	movf	tablat,w,c
  3541  0000EC  0100               	movlb	0	; () banked
  3542  0000EE  6FA6               	movwf	(??_printf+2)& (0+255),b
  3543  0000F0  6BA7               	clrf	(??_printf+3)& (0+255),b
  3544  0000F2  0100               	movlb	0	; () banked
  3545  0000F4  51A4               	movf	??_printf& (0+255),w,b
  3546  0000F6  0100               	movlb	0	; () banked
  3547  0000F8  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3548  0000FA  0100               	movlb	0	; () banked
  3549  0000FC  51A5               	movf	(??_printf+1)& (0+255),w,b
  3550  0000FE  0100               	movlb	0	; () banked
  3551  000100  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3552  000102  0100               	movlb	0	; () banked
  3553  000104  51A6               	movf	(??_printf+2)& (0+255),w,b
  3554  000106  0100               	movlb	0	; () banked
  3555  000108  27B8               	addwf	printf@width& (0+255),f,b
  3556  00010A  0100               	movlb	0	; () banked
  3557  00010C  51A7               	movf	(??_printf+3)& (0+255),w,b
  3558  00010E  0100               	movlb	0	; () banked
  3559  000110  23B9               	addwfc	(printf@width+1)& (0+255),f,b
  3560                           
  3561                           ; BSR set to: 0
  3562  000112  0100               	movlb	0	; () banked
  3563  000114  4B9C               	infsnz	printf@f& (0+255),f,b
  3564  000116  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3568  000118  C09C  FFF6         	movff	printf@f,tblptrl
  3569  00011C  C09D  FFF7         	movff	printf@f+1,tblptrh
  3570  000120                     	if	0	;tblptru may be non-zero
  3571  000120                     	endif
  3572  000120                     	if	0	;tblptru may be non-zero
  3573  000120                     	endif
  3574  000120  0008               	tblrd		*
  3575  000122  50F5               	movf	tablat,w,c
  3576  000124  EC9C  F017         	call	_isdigit
  3577  000128  A0D8               	btfss	status,0,c
  3578  00012A  D01A               	goto	l3882
  3579  00012C  D7C4               	goto	l3866
  3580  00012E                     l3874:
  3581  00012E  C09C  FFF6         	movff	printf@f,tblptrl
  3582  000132  C09D  FFF7         	movff	printf@f+1,tblptrh
  3583  000136                     	if	0	;tblptru may be non-zero
  3584  000136                     	endif
  3585  000136                     	if	0	;tblptru may be non-zero
  3586  000136                     	endif
  3587  000136  0008               	tblrd		*
  3588  000138  50F5               	movf	tablat,w,c
  3589  00013A  0A2A               	xorlw	42
  3590  00013C  A4D8               	btfss	status,2,c
  3591  00013E  D010               	goto	l3882
  3592                           
  3593                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  3594  000140  C0B3  FFD9         	movff	printf@ap,fsr2l
  3595  000144  C0B4  FFDA         	movff	printf@ap+1,fsr2h
  3596  000148  CFDE F0B8          	movff	postinc2,printf@width
  3597  00014C  CFDD F0B9          	movff	postdec2,printf@width+1
  3598  000150  0E02               	movlw	2
  3599  000152  0100               	movlb	0	; () banked
  3600  000154  27B3               	addwf	printf@ap& (0+255),f,b
  3601  000156  0E00               	movlw	0
  3602  000158  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;doprnt.c: 606: f++;
  3606  00015A  0100               	movlb	0	; () banked
  3607  00015C  4B9C               	infsnz	printf@f& (0+255),f,b
  3608  00015E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3609  000160                     l3882:
  3610                           
  3611                           ;doprnt.c: 608: }
  3612                           ;doprnt.c: 611: if(*f == '.') {
  3613  000160  C09C  FFF6         	movff	printf@f,tblptrl
  3614  000164  C09D  FFF7         	movff	printf@f+1,tblptrh
  3615  000168                     	if	0	;tblptru may be non-zero
  3616  000168                     	endif
  3617  000168                     	if	0	;tblptru may be non-zero
  3618  000168                     	endif
  3619  000168  0008               	tblrd		*
  3620  00016A  50F5               	movf	tablat,w,c
  3621  00016C  0A2E               	xorlw	46
  3622  00016E  A4D8               	btfss	status,2,c
  3623  000170  D040               	goto	l3902
  3624                           
  3625                           ;doprnt.c: 612: flag |= 0x4000;
  3626  000172  0100               	movlb	0	; () banked
  3627  000174  8DBC               	bsf	(printf@flag+1)& (0+255),6,b
  3628                           
  3629                           ;doprnt.c: 613: f++;
  3630  000176  0100               	movlb	0	; () banked
  3631  000178  4B9C               	infsnz	printf@f& (0+255),f,b
  3632  00017A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;doprnt.c: 615: if(*f == '*') {
  3636  00017C  C09C  FFF6         	movff	printf@f,tblptrl
  3637  000180  C09D  FFF7         	movff	printf@f+1,tblptrh
  3638  000184                     	if	0	;tblptru may be non-zero
  3639  000184                     	endif
  3640  000184                     	if	0	;tblptru may be non-zero
  3641  000184                     	endif
  3642  000184  0008               	tblrd		*
  3643  000186  50F5               	movf	tablat,w,c
  3644  000188  0A2A               	xorlw	42
  3645  00018A  A4D8               	btfss	status,2,c
  3646  00018C  D010               	goto	l3894
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  3650  00018E  C0B3  FFD9         	movff	printf@ap,fsr2l
  3651  000192  C0B4  FFDA         	movff	printf@ap+1,fsr2h
  3652  000196  50DF               	movf	indf2,w,c
  3653  000198  0100               	movlb	0	; () banked
  3654  00019A  6FB7               	movwf	printf@prec& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657  00019C  0E02               	movlw	2
  3658  00019E  0100               	movlb	0	; () banked
  3659  0001A0  27B3               	addwf	printf@ap& (0+255),f,b
  3660  0001A2  0E00               	movlw	0
  3661  0001A4  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;doprnt.c: 617: f++;
  3665  0001A6  0100               	movlb	0	; () banked
  3666  0001A8  4B9C               	infsnz	printf@f& (0+255),f,b
  3667  0001AA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3668                           
  3669                           ;doprnt.c: 618: } else
  3670  0001AC  D0B9               	goto	l3952
  3671  0001AE                     l3894:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;doprnt.c: 620: {
  3675                           ;doprnt.c: 621: prec = 0;
  3676  0001AE  0E00               	movlw	0
  3677  0001B0  0100               	movlb	0	; () banked
  3678  0001B2  6FB7               	movwf	printf@prec& (0+255),b
  3679                           
  3680                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3681  0001B4  D013               	goto	l3900
  3682  0001B6                     l3896:
  3683                           
  3684                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3685  0001B6  C09C  FFF6         	movff	printf@f,tblptrl
  3686  0001BA  C09D  FFF7         	movff	printf@f+1,tblptrh
  3687  0001BE                     	if	0	;tblptru may be non-zero
  3688  0001BE                     	endif
  3689  0001BE                     	if	0	;tblptru may be non-zero
  3690  0001BE                     	endif
  3691  0001BE  0008               	tblrd		*
  3692  0001C0  CFF5 F0A4          	movff	tablat,??_printf
  3693  0001C4  0100               	movlb	0	; () banked
  3694  0001C6  51B7               	movf	printf@prec& (0+255),w,b
  3695  0001C8  0D0A               	mullw	10
  3696  0001CA  50F3               	movf	prodl,w,c
  3697  0001CC  0100               	movlb	0	; () banked
  3698  0001CE  25A4               	addwf	??_printf& (0+255),w,b
  3699  0001D0  0FD0               	addlw	208
  3700  0001D2  0100               	movlb	0	; () banked
  3701  0001D4  6FB7               	movwf	printf@prec& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704  0001D6  0100               	movlb	0	; () banked
  3705  0001D8  4B9C               	infsnz	printf@f& (0+255),f,b
  3706  0001DA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3707  0001DC                     l3900:
  3708                           
  3709                           ; BSR set to: 0
  3710  0001DC  C09C  FFF6         	movff	printf@f,tblptrl
  3711  0001E0  C09D  FFF7         	movff	printf@f+1,tblptrh
  3712  0001E4                     	if	0	;tblptru may be non-zero
  3713  0001E4                     	endif
  3714  0001E4                     	if	0	;tblptru may be non-zero
  3715  0001E4                     	endif
  3716  0001E4  0008               	tblrd		*
  3717  0001E6  50F5               	movf	tablat,w,c
  3718  0001E8  EC9C  F017         	call	_isdigit
  3719  0001EC  A0D8               	btfss	status,0,c
  3720  0001EE  D098               	goto	l3952
  3721  0001F0  D7E2               	goto	l3896
  3722  0001F2                     l3902:
  3723                           
  3724                           ;doprnt.c: 626: prec = 0;
  3725  0001F2  0E00               	movlw	0
  3726  0001F4  0100               	movlb	0	; () banked
  3727  0001F6  6FB7               	movwf	printf@prec& (0+255),b
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 630: }
  3731                           ;doprnt.c: 635: switch(c = *f++) {
  3732  0001F8  D093               	goto	l3952
  3733  0001FA                     l3904:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;doprnt.c: 691: flag |= 0x40;
  3737  0001FA  0100               	movlb	0	; () banked
  3738  0001FC  8DBB               	bsf	printf@flag& (0+255),6,b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;doprnt.c: 698: case 'i':
  3742                           ;doprnt.c: 699: break;
  3743                           
  3744                           ; BSR set to: 0
  3745                           
  3746                           ;doprnt.c: 697: case 'd':
  3747                           
  3748                           ;doprnt.c: 693: break;
  3749  0001FE  D0B5               	goto	l3954
  3750  000200                     l3906:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;doprnt.c: 714: flag |= 0x20;
  3754  000200  0100               	movlb	0	; () banked
  3755  000202  8BBB               	bsf	printf@flag& (0+255),5,b
  3756  000204                     l397:
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;doprnt.c: 721: flag |= 0x80;
  3760  000204  0100               	movlb	0	; () banked
  3761  000206  8FBB               	bsf	printf@flag& (0+255),7,b
  3762                           
  3763                           ;doprnt.c: 723: break;
  3764  000208  D0B0               	goto	l3954
  3765  00020A                     l3908:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;doprnt.c: 753: if(prec && prec < len)
  3769  00020A  0100               	movlb	0	; () banked
  3770  00020C  51B7               	movf	printf@prec& (0+255),w,b
  3771  00020E  0100               	movlb	0	; () banked
  3772  000210  B4D8               	btfsc	status,2,c
  3773  000212  D017               	goto	l3914
  3774                           
  3775                           ; BSR set to: 0
  3776  000214  C0B7  F0A4         	movff	printf@prec,??_printf
  3777  000218  0100               	movlb	0	; () banked
  3778  00021A  6BA5               	clrf	(??_printf+1)& (0+255),b
  3779  00021C  BFA4               	btfsc	??_printf& (0+255),7,b
  3780  00021E  07A5               	decf	(??_printf+1)& (0+255),f,b
  3781  000220  0100               	movlb	0	; () banked
  3782  000222  51B1               	movf	printf@len& (0+255),w,b
  3783  000224  0100               	movlb	0	; () banked
  3784  000226  5DA4               	subwf	??_printf& (0+255),w,b
  3785  000228  0100               	movlb	0	; () banked
  3786  00022A  51B2               	movf	(printf@len+1)& (0+255),w,b
  3787  00022C  0100               	movlb	0	; () banked
  3788  00022E  59A5               	subwfb	(??_printf+1)& (0+255),w,b
  3789  000230  B0D8               	btfsc	status,0,c
  3790  000232  D007               	goto	l3914
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;doprnt.c: 754: len = prec;
  3794  000234  0100               	movlb	0	; () banked
  3795  000236  51B7               	movf	printf@prec& (0+255),w,b
  3796  000238  0100               	movlb	0	; () banked
  3797  00023A  6FB1               	movwf	printf@len& (0+255),b
  3798  00023C  6BB2               	clrf	(printf@len+1)& (0+255),b
  3799  00023E  BFB1               	btfsc	printf@len& (0+255),7,b
  3800  000240  07B2               	decf	(printf@len+1)& (0+255),f,b
  3801  000242                     l3914:
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 757: if(width > len)
  3805  000242  0100               	movlb	0	; () banked
  3806  000244  51B8               	movf	printf@width& (0+255),w,b
  3807  000246  0100               	movlb	0	; () banked
  3808  000248  5DB1               	subwf	printf@len& (0+255),w,b
  3809  00024A  0100               	movlb	0	; () banked
  3810  00024C  51B9               	movf	(printf@width+1)& (0+255),w,b
  3811  00024E  0100               	movlb	0	; () banked
  3812  000250  59B2               	subwfb	(printf@len+1)& (0+255),w,b
  3813  000252  B0D8               	btfsc	status,0,c
  3814  000254  D009               	goto	l3918
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 758: width -= len;
  3818  000256  0100               	movlb	0	; () banked
  3819  000258  51B1               	movf	printf@len& (0+255),w,b
  3820  00025A  0100               	movlb	0	; () banked
  3821  00025C  5FB8               	subwf	printf@width& (0+255),f,b
  3822  00025E  0100               	movlb	0	; () banked
  3823  000260  51B2               	movf	(printf@len+1)& (0+255),w,b
  3824  000262  0100               	movlb	0	; () banked
  3825  000264  5BB9               	subwfb	(printf@width+1)& (0+255),f,b
  3826  000266  D005               	goto	l3920
  3827  000268                     l3918:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;doprnt.c: 759: else
  3831                           ;doprnt.c: 760: width = 0;
  3832  000268  0E00               	movlw	0
  3833  00026A  0100               	movlb	0	; () banked
  3834  00026C  6FB9               	movwf	(printf@width+1)& (0+255),b
  3835  00026E  0E00               	movlw	0
  3836  000270  6FB8               	movwf	printf@width& (0+255),b
  3837  000272                     l3920:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;doprnt.c: 762: if(!(flag & 0x08))
  3841  000272  0100               	movlb	0	; () banked
  3842  000274  A7BB               	btfss	printf@flag& (0+255),3,b
  3843  000276  D004               	goto	l3926
  3844  000278  D019               	goto	l3932
  3845  00027A                     l3924:
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;doprnt.c: 765: (putch(' ') );
  3849  00027A  0E20               	movlw	32
  3850  00027C  EC24  F018         	call	_putch
  3851  000280                     l3926:
  3852  000280  0100               	movlb	0	; () banked
  3853  000282  07B8               	decf	printf@width& (0+255),f,b
  3854  000284  A0D8               	btfss	status,0,c
  3855  000286  07B9               	decf	(printf@width+1)& (0+255),f,b
  3856  000288  0100               	movlb	0	; () banked
  3857  00028A  29B8               	incf	printf@width& (0+255),w,b
  3858  00028C  E1F6               	bnz	l3924
  3859  00028E  0100               	movlb	0	; () banked
  3860  000290  29B9               	incf	(printf@width+1)& (0+255),w,b
  3861  000292  B4D8               	btfsc	status,2,c
  3862  000294  D00B               	goto	l3932
  3863  000296  D7F1               	goto	l3924
  3864  000298                     l3928:
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 768: (putch(*cp++) );
  3868  000298  C0A8  FFD9         	movff	printf@cp,fsr2l
  3869  00029C  C0A9  FFDA         	movff	printf@cp+1,fsr2h
  3870  0002A0  50DF               	movf	indf2,w,c
  3871  0002A2  EC24  F018         	call	_putch
  3872  0002A6  0100               	movlb	0	; () banked
  3873  0002A8  4BA8               	infsnz	printf@cp& (0+255),f,b
  3874  0002AA  2BA9               	incf	(printf@cp+1)& (0+255),f,b
  3875  0002AC                     l3932:
  3876                           
  3877                           ; BSR set to: 0
  3878  0002AC  0100               	movlb	0	; () banked
  3879  0002AE  07B1               	decf	printf@len& (0+255),f,b
  3880  0002B0  A0D8               	btfss	status,0,c
  3881  0002B2  07B2               	decf	(printf@len+1)& (0+255),f,b
  3882  0002B4  0100               	movlb	0	; () banked
  3883  0002B6  29B1               	incf	printf@len& (0+255),w,b
  3884  0002B8  E1EF               	bnz	l3928
  3885  0002BA  0100               	movlb	0	; () banked
  3886  0002BC  29B2               	incf	(printf@len+1)& (0+255),w,b
  3887  0002BE  A4D8               	btfss	status,2,c
  3888  0002C0  D7EB               	goto	l3928
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;doprnt.c: 770: if(flag & 0x08)
  3892  0002C2  0100               	movlb	0	; () banked
  3893  0002C4  B7BB               	btfsc	printf@flag& (0+255),3,b
  3894  0002C6  D004               	goto	l3938
  3895  0002C8  D358               	goto	l4148
  3896  0002CA                     l3936:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 772: (putch(' ') );
  3900  0002CA  0E20               	movlw	32
  3901  0002CC  EC24  F018         	call	_putch
  3902  0002D0                     l3938:
  3903  0002D0  0100               	movlb	0	; () banked
  3904  0002D2  07B8               	decf	printf@width& (0+255),f,b
  3905  0002D4  A0D8               	btfss	status,0,c
  3906  0002D6  07B9               	decf	(printf@width+1)& (0+255),f,b
  3907  0002D8  0100               	movlb	0	; () banked
  3908  0002DA  29B8               	incf	printf@width& (0+255),w,b
  3909  0002DC  E1F6               	bnz	l3936
  3910  0002DE  0100               	movlb	0	; () banked
  3911  0002E0  29B9               	incf	(printf@width+1)& (0+255),w,b
  3912  0002E2  B4D8               	btfsc	status,2,c
  3913  0002E4  D34A               	goto	l4148
  3914  0002E6  D7F1               	goto	l3936
  3915  0002E8                     l3940:
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3919  0002E8  C0B3  FFD9         	movff	printf@ap,fsr2l
  3920  0002EC  C0B4  FFDA         	movff	printf@ap+1,fsr2h
  3921  0002F0  50DF               	movf	indf2,w,c
  3922  0002F2  0100               	movlb	0	; () banked
  3923  0002F4  6FBA               	movwf	printf@c& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926  0002F6  0E02               	movlw	2
  3927  0002F8  0100               	movlb	0	; () banked
  3928  0002FA  27B3               	addwf	printf@ap& (0+255),f,b
  3929  0002FC  0E00               	movlw	0
  3930  0002FE  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
  3931  000300                     l3944:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;doprnt.c: 805: cp = (char *)&c;
  3935  000300  0EBA               	movlw	low printf@c
  3936  000302  0100               	movlb	0	; () banked
  3937  000304  6FA8               	movwf	printf@cp& (0+255),b
  3938  000306  0E00               	movlw	high printf@c
  3939  000308  0100               	movlb	0	; () banked
  3940  00030A  6FA9               	movwf	(printf@cp+1)& (0+255),b
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;doprnt.c: 806: len = 1;
  3944  00030C  0E00               	movlw	0
  3945  00030E  0100               	movlb	0	; () banked
  3946  000310  6FB2               	movwf	(printf@len+1)& (0+255),b
  3947  000312  0E01               	movlw	1
  3948  000314  6FB1               	movwf	printf@len& (0+255),b
  3949                           
  3950                           ;doprnt.c: 807: goto dostring;
  3951  000316  D779               	goto	l3908
  3952  000318                     l3948:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;doprnt.c: 818: flag |= 0xC0;
  3956  000318  0EC0               	movlw	192
  3957  00031A  0100               	movlb	0	; () banked
  3958  00031C  13BB               	iorwf	printf@flag& (0+255),f,b
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 822: }
  3962                           
  3963                           ;doprnt.c: 819: break;
  3964  00031E  D025               	goto	l3954
  3965  000320                     l3952:
  3966  000320  C09C  FFF6         	movff	printf@f,tblptrl
  3967  000324  C09D  FFF7         	movff	printf@f+1,tblptrh
  3968  000328  0100               	movlb	0	; () banked
  3969  00032A  4B9C               	infsnz	printf@f& (0+255),f,b
  3970  00032C  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3971  00032E                     	if	0	;tblptru may be non-zero
  3972  00032E                     	endif
  3973  00032E                     	if	0	;tblptru may be non-zero
  3974  00032E                     	endif
  3975  00032E  0008               	tblrd		*
  3976  000330  CFF5 F0BA          	movff	tablat,printf@c
  3977  000334  0100               	movlb	0	; () banked
  3978  000336  51BA               	movf	printf@c& (0+255),w,b
  3979                           
  3980                           ; Switch size 1, requested type "space"
  3981                           ; Number of cases is 8, Range of values is 0 to 120
  3982                           ; switch strategies available:
  3983                           ; Name         Instructions Cycles
  3984                           ; simple_byte           25    13 (average)
  3985                           ;	Chosen strategy is simple_byte
  3986  000338  0A00               	xorlw	0	; case 0
  3987  00033A  B4D8               	btfsc	status,2,c
  3988  00033C  0012               	return	
  3989  00033E  0A58               	xorlw	88	; case 88
  3990  000340  B4D8               	btfsc	status,2,c
  3991  000342  D75E               	goto	l3906
  3992  000344  0A3B               	xorlw	59	; case 99
  3993  000346  B4D8               	btfsc	status,2,c
  3994  000348  D7CF               	goto	l3940
  3995  00034A  0A07               	xorlw	7	; case 100
  3996  00034C  B4D8               	btfsc	status,2,c
  3997  00034E  D00D               	goto	l3954
  3998  000350  0A0D               	xorlw	13	; case 105
  3999  000352  B4D8               	btfsc	status,2,c
  4000  000354  D00A               	goto	l3954
  4001  000356  0A06               	xorlw	6	; case 111
  4002  000358  B4D8               	btfsc	status,2,c
  4003  00035A  D74F               	goto	l3904
  4004  00035C  0A1A               	xorlw	26	; case 117
  4005  00035E  B4D8               	btfsc	status,2,c
  4006  000360  D7DB               	goto	l3948
  4007  000362  0A0D               	xorlw	13	; case 120
  4008  000364  B4D8               	btfsc	status,2,c
  4009  000366  D74E               	goto	l397
  4010  000368  D7CB               	goto	l3944
  4011  00036A                     l3954:
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4015  00036A  0EC0               	movlw	192
  4016  00036C  0100               	movlb	0	; () banked
  4017  00036E  15BB               	andwf	printf@flag& (0+255),w,b
  4018  000370  0100               	movlb	0	; () banked
  4019  000372  6FA4               	movwf	??_printf& (0+255),b
  4020  000374  0E00               	movlw	0
  4021  000376  0100               	movlb	0	; () banked
  4022  000378  15BC               	andwf	(printf@flag+1)& (0+255),w,b
  4023  00037A  0100               	movlb	0	; () banked
  4024  00037C  6FA5               	movwf	(??_printf+1)& (0+255),b
  4025  00037E  0100               	movlb	0	; () banked
  4026  000380  51A4               	movf	??_printf& (0+255),w,b
  4027  000382  0100               	movlb	0	; () banked
  4028  000384  11A5               	iorwf	(??_printf+1)& (0+255),w,b
  4029  000386  A4D8               	btfss	status,2,c
  4030  000388  D019               	goto	l3966
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;doprnt.c: 1253: {
  4034                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4035  00038A  C0B3  FFD9         	movff	printf@ap,fsr2l
  4036  00038E  C0B4  FFDA         	movff	printf@ap+1,fsr2h
  4037  000392  CFDE F0B5          	movff	postinc2,printf@val
  4038  000396  CFDD F0B6          	movff	postdec2,printf@val+1
  4039                           
  4040                           ; BSR set to: 0
  4041  00039A  0E02               	movlw	2
  4042  00039C  0100               	movlb	0	; () banked
  4043  00039E  27B3               	addwf	printf@ap& (0+255),f,b
  4044  0003A0  0E00               	movlw	0
  4045  0003A2  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;doprnt.c: 1261: if((int)val < 0) {
  4049  0003A4  0100               	movlb	0	; () banked
  4050  0003A6  AFB6               	btfss	(printf@val+1)& (0+255),7,b
  4051  0003A8  D016               	goto	l3970
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;doprnt.c: 1262: flag |= 0x03;
  4055  0003AA  0E03               	movlw	3
  4056  0003AC  0100               	movlb	0	; () banked
  4057  0003AE  13BB               	iorwf	printf@flag& (0+255),f,b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1263: val = -val;
  4061  0003B0  0100               	movlb	0	; () banked
  4062  0003B2  6DB5               	negf	printf@val& (0+255),b
  4063  0003B4  1FB6               	comf	(printf@val+1)& (0+255),f,b
  4064  0003B6  B0D8               	btfsc	status,0,c
  4065  0003B8  2BB6               	incf	(printf@val+1)& (0+255),f,b
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;doprnt.c: 1264: }
  4069                           ;doprnt.c: 1266: }
  4070  0003BA  D00D               	goto	l3970
  4071  0003BC                     l3966:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 1268: else
  4075                           ;doprnt.c: 1273: {
  4076                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4077  0003BC  C0B3  FFD9         	movff	printf@ap,fsr2l
  4078  0003C0  C0B4  FFDA         	movff	printf@ap+1,fsr2h
  4079  0003C4  CFDE F0B5          	movff	postinc2,printf@val
  4080  0003C8  CFDD F0B6          	movff	postdec2,printf@val+1
  4081                           
  4082                           ; BSR set to: 0
  4083  0003CC  0E02               	movlw	2
  4084  0003CE  0100               	movlb	0	; () banked
  4085  0003D0  27B3               	addwf	printf@ap& (0+255),f,b
  4086  0003D2  0E00               	movlw	0
  4087  0003D4  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
  4088  0003D6                     l3970:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;doprnt.c: 1287: }
  4092                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4093  0003D6  0100               	movlb	0	; () banked
  4094  0003D8  51B7               	movf	printf@prec& (0+255),w,b
  4095  0003DA  0100               	movlb	0	; () banked
  4096  0003DC  A4D8               	btfss	status,2,c
  4097  0003DE  D063               	goto	l4020
  4098                           
  4099                           ; BSR set to: 0
  4100  0003E0  0100               	movlb	0	; () banked
  4101  0003E2  51B5               	movf	printf@val& (0+255),w,b
  4102  0003E4  0100               	movlb	0	; () banked
  4103  0003E6  11B6               	iorwf	(printf@val+1)& (0+255),w,b
  4104  0003E8  A4D8               	btfss	status,2,c
  4105  0003EA  D05D               	goto	l4020
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;doprnt.c: 1291: prec++;
  4109  0003EC  0100               	movlb	0	; () banked
  4110  0003EE  2BB7               	incf	printf@prec& (0+255),f,b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4114  0003F0  D05A               	goto	l4020
  4115  0003F2                     l3976:
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;doprnt.c: 1302: case 0xC0:
  4119                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4120  0003F2  0E01               	movlw	1
  4121  0003F4  0100               	movlb	0	; () banked
  4122  0003F6  6FBA               	movwf	printf@c& (0+255),b
  4123  0003F8                     l3978:
  4124                           
  4125                           ; BSR set to: 0
  4126  0003F8  0E05               	movlw	5
  4127  0003FA  0100               	movlb	0	; () banked
  4128  0003FC  19BA               	xorwf	printf@c& (0+255),w,b
  4129  0003FE  B4D8               	btfsc	status,2,c
  4130  000400  D061               	goto	l4022
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;doprnt.c: 1306: if(val < dpowers[c])
  4134                           
  4135                           ; BSR set to: 0
  4136                           
  4137                           ; BSR set to: 0
  4138  000402  0100               	movlb	0	; () banked
  4139  000404  51BA               	movf	printf@c& (0+255),w,b
  4140  000406  0D02               	mullw	2
  4141  000408  0EDC               	movlw	low _dpowers
  4142  00040A  24F3               	addwf	prodl,w,c
  4143  00040C  6EF6               	movwf	tblptrl,c
  4144  00040E  0EFD               	movlw	high _dpowers
  4145  000410  20F4               	addwfc	prodh,w,c
  4146  000412  6EF7               	movwf	tblptrh,c
  4147  000414                     	if	0	;There are less than 3 active tblptr bytes
  4148  000414                     	endif
  4149  000414  0009               	tblrd		*+
  4150  000416  50F5               	movf	tablat,w,c
  4151  000418  0100               	movlb	0	; () banked
  4152  00041A  5DB5               	subwf	printf@val& (0+255),w,b
  4153  00041C  0009               	tblrd		*+
  4154  00041E  50F5               	movf	tablat,w,c
  4155  000420  0100               	movlb	0	; () banked
  4156  000422  59B6               	subwfb	(printf@val+1)& (0+255),w,b
  4157  000424  A0D8               	btfss	status,0,c
  4158  000426  D04E               	goto	l4022
  4159                           
  4160                           ; BSR set to: 0
  4161                           
  4162                           ; BSR set to: 0
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;doprnt.c: 1307: break;
  4166  000428  0100               	movlb	0	; () banked
  4167  00042A  2BBA               	incf	printf@c& (0+255),f,b
  4168  00042C  D7E5               	goto	l3978
  4169  00042E                     l3990:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4173  00042E  0E01               	movlw	1
  4174  000430  0100               	movlb	0	; () banked
  4175  000432  6FBA               	movwf	printf@c& (0+255),b
  4176  000434                     l3992:
  4177                           
  4178                           ; BSR set to: 0
  4179  000434  0E04               	movlw	4
  4180  000436  0100               	movlb	0	; () banked
  4181  000438  19BA               	xorwf	printf@c& (0+255),w,b
  4182  00043A  B4D8               	btfsc	status,2,c
  4183  00043C  D043               	goto	l4022
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4187                           
  4188                           ; BSR set to: 0
  4189                           
  4190                           ; BSR set to: 0
  4191  00043E  0100               	movlb	0	; () banked
  4192  000440  51BA               	movf	printf@c& (0+255),w,b
  4193  000442  0D02               	mullw	2
  4194  000444  0EE6               	movlw	low _hexpowers
  4195  000446  24F3               	addwf	prodl,w,c
  4196  000448  6EF6               	movwf	tblptrl,c
  4197  00044A  0EFD               	movlw	high _hexpowers
  4198  00044C  20F4               	addwfc	prodh,w,c
  4199  00044E  6EF7               	movwf	tblptrh,c
  4200  000450                     	if	0	;There are less than 3 active tblptr bytes
  4201  000450                     	endif
  4202  000450  0009               	tblrd		*+
  4203  000452  50F5               	movf	tablat,w,c
  4204  000454  0100               	movlb	0	; () banked
  4205  000456  5DB5               	subwf	printf@val& (0+255),w,b
  4206  000458  0009               	tblrd		*+
  4207  00045A  50F5               	movf	tablat,w,c
  4208  00045C  0100               	movlb	0	; () banked
  4209  00045E  59B6               	subwfb	(printf@val+1)& (0+255),w,b
  4210  000460  A0D8               	btfss	status,0,c
  4211  000462  D030               	goto	l4022
  4212                           
  4213                           ; BSR set to: 0
  4214                           
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;doprnt.c: 1318: break;
  4219  000464  0100               	movlb	0	; () banked
  4220  000466  2BBA               	incf	printf@c& (0+255),f,b
  4221  000468  D7E5               	goto	l3992
  4222  00046A                     l4004:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  4226  00046A  0E01               	movlw	1
  4227  00046C  0100               	movlb	0	; () banked
  4228  00046E  6FBA               	movwf	printf@c& (0+255),b
  4229  000470                     l4006:
  4230                           
  4231                           ; BSR set to: 0
  4232  000470  0E06               	movlw	6
  4233  000472  0100               	movlb	0	; () banked
  4234  000474  19BA               	xorwf	printf@c& (0+255),w,b
  4235  000476  B4D8               	btfsc	status,2,c
  4236  000478  D025               	goto	l4022
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;doprnt.c: 1329: if(val < octpowers[c])
  4240                           
  4241                           ; BSR set to: 0
  4242                           
  4243                           ; BSR set to: 0
  4244  00047A  0100               	movlb	0	; () banked
  4245  00047C  51BA               	movf	printf@c& (0+255),w,b
  4246  00047E  0D02               	mullw	2
  4247  000480  0ED0               	movlw	low _octpowers
  4248  000482  24F3               	addwf	prodl,w,c
  4249  000484  6EF6               	movwf	tblptrl,c
  4250  000486  0EFD               	movlw	high _octpowers
  4251  000488  20F4               	addwfc	prodh,w,c
  4252  00048A  6EF7               	movwf	tblptrh,c
  4253  00048C                     	if	0	;There are less than 3 active tblptr bytes
  4254  00048C                     	endif
  4255  00048C  0009               	tblrd		*+
  4256  00048E  50F5               	movf	tablat,w,c
  4257  000490  0100               	movlb	0	; () banked
  4258  000492  5DB5               	subwf	printf@val& (0+255),w,b
  4259  000494  0009               	tblrd		*+
  4260  000496  50F5               	movf	tablat,w,c
  4261  000498  0100               	movlb	0	; () banked
  4262  00049A  59B6               	subwfb	(printf@val+1)& (0+255),w,b
  4263  00049C  A0D8               	btfss	status,0,c
  4264  00049E  D012               	goto	l4022
  4265                           
  4266                           ; BSR set to: 0
  4267                           
  4268                           ; BSR set to: 0
  4269                           
  4270                           ; BSR set to: 0
  4271                           ;doprnt.c: 1330: break;
  4272  0004A0  0100               	movlb	0	; () banked
  4273  0004A2  2BBA               	incf	printf@c& (0+255),f,b
  4274  0004A4  D7E5               	goto	l4006
  4275  0004A6                     l4020:
  4276                           
  4277                           ; BSR set to: 0
  4278  0004A6  0100               	movlb	0	; () banked
  4279  0004A8  51BB               	movf	printf@flag& (0+255),w,b
  4280  0004AA  0BC0               	andlw	192
  4281                           
  4282                           ; Switch size 1, requested type "space"
  4283                           ; Number of cases is 4, Range of values is 0 to 192
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte           13     7 (average)
  4287                           ;	Chosen strategy is simple_byte
  4288  0004AC  0A00               	xorlw	0	; case 0
  4289  0004AE  B4D8               	btfsc	status,2,c
  4290  0004B0  D7A0               	goto	l3976
  4291  0004B2  0A40               	xorlw	64	; case 64
  4292  0004B4  B4D8               	btfsc	status,2,c
  4293  0004B6  D7D9               	goto	l4004
  4294  0004B8  0AC0               	xorlw	192	; case 128
  4295  0004BA  B4D8               	btfsc	status,2,c
  4296  0004BC  D7B8               	goto	l3990
  4297  0004BE  0A40               	xorlw	64	; case 192
  4298  0004C0  B4D8               	btfsc	status,2,c
  4299  0004C2  D797               	goto	l3976
  4300  0004C4                     l4022:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;doprnt.c: 1339: if(c < prec)
  4304  0004C4  0100               	movlb	0	; () banked
  4305  0004C6  51BA               	movf	printf@c& (0+255),w,b
  4306  0004C8  0A80               	xorlw	128
  4307  0004CA  0100               	movlb	0	; () banked
  4308  0004CC  6FA4               	movwf	??_printf& (0+255),b
  4309  0004CE  0100               	movlb	0	; () banked
  4310  0004D0  51B7               	movf	printf@prec& (0+255),w,b
  4311  0004D2  0A80               	xorlw	128
  4312  0004D4  0100               	movlb	0	; () banked
  4313  0004D6  5DA4               	subwf	??_printf& (0+255),w,b
  4314  0004D8  B0D8               	btfsc	status,0,c
  4315  0004DA  D003               	goto	l4026
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;doprnt.c: 1340: c = prec;
  4319  0004DC  C0B7  F0BA         	movff	printf@prec,printf@c
  4320  0004E0  D00D               	goto	l4030
  4321  0004E2                     l4026:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;doprnt.c: 1341: else if(prec < c)
  4325  0004E2  0100               	movlb	0	; () banked
  4326  0004E4  51B7               	movf	printf@prec& (0+255),w,b
  4327  0004E6  0A80               	xorlw	128
  4328  0004E8  0100               	movlb	0	; () banked
  4329  0004EA  6FA4               	movwf	??_printf& (0+255),b
  4330  0004EC  0100               	movlb	0	; () banked
  4331  0004EE  51BA               	movf	printf@c& (0+255),w,b
  4332  0004F0  0A80               	xorlw	128
  4333  0004F2  0100               	movlb	0	; () banked
  4334  0004F4  5DA4               	subwf	??_printf& (0+255),w,b
  4335  0004F6  A0D8               	btfss	status,0,c
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 1342: prec = c;
  4339  0004F8  C0BA  F0B7         	movff	printf@c,printf@prec
  4340  0004FC                     l4030:
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4344  0004FC  0100               	movlb	0	; () banked
  4345  0004FE  51B8               	movf	printf@width& (0+255),w,b
  4346  000500  0100               	movlb	0	; () banked
  4347  000502  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  4348  000504  B4D8               	btfsc	status,2,c
  4349  000506  D014               	goto	l4036
  4350                           
  4351                           ; BSR set to: 0
  4352  000508  0E03               	movlw	3
  4353  00050A  0100               	movlb	0	; () banked
  4354  00050C  15BB               	andwf	printf@flag& (0+255),w,b
  4355  00050E  0100               	movlb	0	; () banked
  4356  000510  6FA4               	movwf	??_printf& (0+255),b
  4357  000512  0E00               	movlw	0
  4358  000514  0100               	movlb	0	; () banked
  4359  000516  15BC               	andwf	(printf@flag+1)& (0+255),w,b
  4360  000518  0100               	movlb	0	; () banked
  4361  00051A  6FA5               	movwf	(??_printf+1)& (0+255),b
  4362  00051C  0100               	movlb	0	; () banked
  4363  00051E  51A4               	movf	??_printf& (0+255),w,b
  4364  000520  0100               	movlb	0	; () banked
  4365  000522  11A5               	iorwf	(??_printf+1)& (0+255),w,b
  4366  000524  B4D8               	btfsc	status,2,c
  4367  000526  D004               	goto	l4036
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;doprnt.c: 1346: width--;
  4371  000528  0100               	movlb	0	; () banked
  4372  00052A  07B8               	decf	printf@width& (0+255),f,b
  4373  00052C  A0D8               	btfss	status,0,c
  4374  00052E  07B9               	decf	(printf@width+1)& (0+255),f,b
  4375  000530                     l4036:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4379  000530  0100               	movlb	0	; () banked
  4380  000532  ADBC               	btfss	(printf@flag+1)& (0+255),6,b
  4381  000534  D021               	goto	l4044
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 1349: if(width > prec)
  4385  000536  0E80               	movlw	128
  4386  000538  0100               	movlb	0	; () banked
  4387  00053A  BFB7               	btfsc	printf@prec& (0+255),7,b
  4388  00053C  0E7F               	movlw	127
  4389  00053E  0100               	movlb	0	; () banked
  4390  000540  6FA4               	movwf	??_printf& (0+255),b
  4391  000542  0100               	movlb	0	; () banked
  4392  000544  51B8               	movf	printf@width& (0+255),w,b
  4393  000546  0100               	movlb	0	; () banked
  4394  000548  5DB7               	subwf	printf@prec& (0+255),w,b
  4395  00054A  0100               	movlb	0	; () banked
  4396  00054C  51B9               	movf	(printf@width+1)& (0+255),w,b
  4397  00054E  0A80               	xorlw	128
  4398  000550  0100               	movlb	0	; () banked
  4399  000552  59A4               	subwfb	??_printf& (0+255),w,b
  4400  000554  B0D8               	btfsc	status,0,c
  4401  000556  D00B               	goto	l4042
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;doprnt.c: 1350: width -= prec;
  4405  000558  0100               	movlb	0	; () banked
  4406  00055A  51B7               	movf	printf@prec& (0+255),w,b
  4407  00055C  0100               	movlb	0	; () banked
  4408  00055E  5FB8               	subwf	printf@width& (0+255),f,b
  4409  000560  0E00               	movlw	0
  4410  000562  0100               	movlb	0	; () banked
  4411  000564  BFB7               	btfsc	printf@prec& (0+255),7,b
  4412  000566  0EFF               	movlw	255
  4413  000568  0100               	movlb	0	; () banked
  4414  00056A  5BB9               	subwfb	(printf@width+1)& (0+255),f,b
  4415  00056C  D005               	goto	l4044
  4416  00056E                     l4042:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 1351: else
  4420                           ;doprnt.c: 1352: width = 0;
  4421  00056E  0E00               	movlw	0
  4422  000570  0100               	movlb	0	; () banked
  4423  000572  6FB9               	movwf	(printf@width+1)& (0+255),b
  4424  000574  0E00               	movlw	0
  4425  000576  6FB8               	movwf	printf@width& (0+255),b
  4426  000578                     l4044:
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;doprnt.c: 1353: }
  4430                           ;doprnt.c: 1357: if((flag & (
  4431                           ;doprnt.c: 1359: 0x04|
  4432                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  4433  000578  0EC4               	movlw	196
  4434  00057A  0100               	movlb	0	; () banked
  4435  00057C  6FA4               	movwf	??_printf& (0+255),b
  4436  00057E  0E08               	movlw	8
  4437  000580  0100               	movlb	0	; () banked
  4438  000582  6FA5               	movwf	(??_printf+1)& (0+255),b
  4439  000584  C0BB  F0A6         	movff	printf@flag,??_printf+2
  4440  000588  C0BC  F0A7         	movff	printf@flag+1,??_printf+3
  4441  00058C  0100               	movlb	0	; () banked
  4442  00058E  51A4               	movf	??_printf& (0+255),w,b
  4443  000590  0100               	movlb	0	; () banked
  4444  000592  17A6               	andwf	(??_printf+2)& (0+255),f,b
  4445  000594  0100               	movlb	0	; () banked
  4446  000596  51A5               	movf	(??_printf+1)& (0+255),w,b
  4447  000598  0100               	movlb	0	; () banked
  4448  00059A  17A7               	andwf	(??_printf+3)& (0+255),f,b
  4449  00059C  0E40               	movlw	64
  4450  00059E  0100               	movlb	0	; () banked
  4451  0005A0  19A6               	xorwf	(??_printf+2)& (0+255),w,b
  4452  0005A2  E110               	bnz	l4050
  4453  0005A4  0E08               	movlw	8
  4454  0005A6  0100               	movlb	0	; () banked
  4455  0005A8  19A7               	xorwf	(??_printf+3)& (0+255),w,b
  4456  0005AA  A4D8               	btfss	status,2,c
  4457  0005AC  D00B               	goto	l4050
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;doprnt.c: 1362: if(width)
  4461  0005AE  0100               	movlb	0	; () banked
  4462  0005B0  51B8               	movf	printf@width& (0+255),w,b
  4463  0005B2  0100               	movlb	0	; () banked
  4464  0005B4  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  4465  0005B6  B4D8               	btfsc	status,2,c
  4466  0005B8  D036               	goto	l4058
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;doprnt.c: 1363: width--;
  4470  0005BA  0100               	movlb	0	; () banked
  4471  0005BC  07B8               	decf	printf@width& (0+255),f,b
  4472  0005BE  A0D8               	btfss	status,0,c
  4473  0005C0  07B9               	decf	(printf@width+1)& (0+255),f,b
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;doprnt.c: 1364: } else
  4477  0005C2  D031               	goto	l4058
  4478  0005C4                     l4050:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4482  0005C4  0EC0               	movlw	192
  4483  0005C6  0100               	movlb	0	; () banked
  4484  0005C8  6FA4               	movwf	??_printf& (0+255),b
  4485  0005CA  0E08               	movlw	8
  4486  0005CC  0100               	movlb	0	; () banked
  4487  0005CE  6FA5               	movwf	(??_printf+1)& (0+255),b
  4488  0005D0  C0BB  F0A6         	movff	printf@flag,??_printf+2
  4489  0005D4  C0BC  F0A7         	movff	printf@flag+1,??_printf+3
  4490  0005D8  0100               	movlb	0	; () banked
  4491  0005DA  51A4               	movf	??_printf& (0+255),w,b
  4492  0005DC  0100               	movlb	0	; () banked
  4493  0005DE  17A6               	andwf	(??_printf+2)& (0+255),f,b
  4494  0005E0  0100               	movlb	0	; () banked
  4495  0005E2  51A5               	movf	(??_printf+1)& (0+255),w,b
  4496  0005E4  0100               	movlb	0	; () banked
  4497  0005E6  17A7               	andwf	(??_printf+3)& (0+255),f,b
  4498  0005E8  0E80               	movlw	128
  4499  0005EA  0100               	movlb	0	; () banked
  4500  0005EC  19A6               	xorwf	(??_printf+2)& (0+255),w,b
  4501  0005EE  E11B               	bnz	l4058
  4502  0005F0  0E08               	movlw	8
  4503  0005F2  0100               	movlb	0	; () banked
  4504  0005F4  19A7               	xorwf	(??_printf+3)& (0+255),w,b
  4505  0005F6  A4D8               	btfss	status,2,c
  4506  0005F8  D016               	goto	l4058
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;doprnt.c: 1372: if(width > 2)
  4510  0005FA  0100               	movlb	0	; () banked
  4511  0005FC  BFB9               	btfsc	(printf@width+1)& (0+255),7,b
  4512  0005FE  D00E               	goto	l4056
  4513  000600  0100               	movlb	0	; () banked
  4514  000602  51B9               	movf	(printf@width+1)& (0+255),w,b
  4515  000604  E105               	bnz	u4160
  4516  000606  0E03               	movlw	3
  4517  000608  0100               	movlb	0	; () banked
  4518  00060A  5DB8               	subwf	printf@width& (0+255),w,b
  4519  00060C  A0D8               	btfss	status,0,c
  4520  00060E  D006               	goto	l4056
  4521  000610                     u4160:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;doprnt.c: 1373: width -= 2;
  4525  000610  0100               	movlb	0	; () banked
  4526  000612  0EFE               	movlw	254
  4527  000614  27B8               	addwf	printf@width& (0+255),f,b
  4528  000616  0EFF               	movlw	255
  4529  000618  23B9               	addwfc	(printf@width+1)& (0+255),f,b
  4530  00061A  D005               	goto	l4058
  4531  00061C                     l4056:
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 1374: else
  4535                           ;doprnt.c: 1375: width = 0;
  4536  00061C  0E00               	movlw	0
  4537  00061E  0100               	movlb	0	; () banked
  4538  000620  6FB9               	movwf	(printf@width+1)& (0+255),b
  4539  000622  0E00               	movlw	0
  4540  000624  6FB8               	movwf	printf@width& (0+255),b
  4541  000626                     l4058:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;doprnt.c: 1376: }
  4545                           ;doprnt.c: 1381: if(width > c)
  4546  000626  0E80               	movlw	128
  4547  000628  0100               	movlb	0	; () banked
  4548  00062A  BFBA               	btfsc	printf@c& (0+255),7,b
  4549  00062C  0E7F               	movlw	127
  4550  00062E  0100               	movlb	0	; () banked
  4551  000630  6FA4               	movwf	??_printf& (0+255),b
  4552  000632  0100               	movlb	0	; () banked
  4553  000634  51B8               	movf	printf@width& (0+255),w,b
  4554  000636  0100               	movlb	0	; () banked
  4555  000638  5DBA               	subwf	printf@c& (0+255),w,b
  4556  00063A  0100               	movlb	0	; () banked
  4557  00063C  51B9               	movf	(printf@width+1)& (0+255),w,b
  4558  00063E  0A80               	xorlw	128
  4559  000640  0100               	movlb	0	; () banked
  4560  000642  59A4               	subwfb	??_printf& (0+255),w,b
  4561  000644  B0D8               	btfsc	status,0,c
  4562  000646  D00B               	goto	l4062
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;doprnt.c: 1382: width -= c;
  4566  000648  0100               	movlb	0	; () banked
  4567  00064A  51BA               	movf	printf@c& (0+255),w,b
  4568  00064C  0100               	movlb	0	; () banked
  4569  00064E  5FB8               	subwf	printf@width& (0+255),f,b
  4570  000650  0E00               	movlw	0
  4571  000652  0100               	movlb	0	; () banked
  4572  000654  BFBA               	btfsc	printf@c& (0+255),7,b
  4573  000656  0EFF               	movlw	255
  4574  000658  0100               	movlb	0	; () banked
  4575  00065A  5BB9               	subwfb	(printf@width+1)& (0+255),f,b
  4576  00065C  D005               	goto	l4064
  4577  00065E                     l4062:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;doprnt.c: 1383: else
  4581                           ;doprnt.c: 1384: width = 0;
  4582  00065E  0E00               	movlw	0
  4583  000660  0100               	movlb	0	; () banked
  4584  000662  6FB9               	movwf	(printf@width+1)& (0+255),b
  4585  000664  0E00               	movlw	0
  4586  000666  6FB8               	movwf	printf@width& (0+255),b
  4587  000668                     l4064:
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;doprnt.c: 1387: if(flag & 0x04) {
  4591  000668  0100               	movlb	0	; () banked
  4592  00066A  A5BB               	btfss	printf@flag& (0+255),2,b
  4593  00066C  D058               	goto	l4090
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;doprnt.c: 1392: if(flag & 0x03)
  4597  00066E  0E03               	movlw	3
  4598  000670  0100               	movlb	0	; () banked
  4599  000672  15BB               	andwf	printf@flag& (0+255),w,b
  4600  000674  0100               	movlb	0	; () banked
  4601  000676  6FA4               	movwf	??_printf& (0+255),b
  4602  000678  0E00               	movlw	0
  4603  00067A  0100               	movlb	0	; () banked
  4604  00067C  15BC               	andwf	(printf@flag+1)& (0+255),w,b
  4605  00067E  0100               	movlb	0	; () banked
  4606  000680  6FA5               	movwf	(??_printf+1)& (0+255),b
  4607  000682  0100               	movlb	0	; () banked
  4608  000684  51A4               	movf	??_printf& (0+255),w,b
  4609  000686  0100               	movlb	0	; () banked
  4610  000688  11A5               	iorwf	(??_printf+1)& (0+255),w,b
  4611  00068A  B4D8               	btfsc	status,2,c
  4612  00068C  D004               	goto	l451
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1393: (putch('-') );
  4616  00068E  0E2D               	movlw	45
  4617  000690  EC24  F018         	call	_putch
  4618  000694  D036               	goto	l4084
  4619  000696                     l451:
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;doprnt.c: 1396: else
  4623                           ;doprnt.c: 1399: if(flag & 0x01)
  4624  000696  0100               	movlb	0	; () banked
  4625  000698  A1BB               	btfss	printf@flag& (0+255),0,b
  4626  00069A  D004               	goto	l4072
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 1400: (putch(' ') );
  4630  00069C  0E20               	movlw	32
  4631  00069E  EC24  F018         	call	_putch
  4632  0006A2  D02F               	goto	l4084
  4633  0006A4                     l4072:
  4634                           
  4635                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4636  0006A4  0EC0               	movlw	192
  4637  0006A6  0100               	movlb	0	; () banked
  4638  0006A8  6FA4               	movwf	??_printf& (0+255),b
  4639  0006AA  0E08               	movlw	8
  4640  0006AC  0100               	movlb	0	; () banked
  4641  0006AE  6FA5               	movwf	(??_printf+1)& (0+255),b
  4642  0006B0  C0BB  F0A6         	movff	printf@flag,??_printf+2
  4643  0006B4  C0BC  F0A7         	movff	printf@flag+1,??_printf+3
  4644  0006B8  0100               	movlb	0	; () banked
  4645  0006BA  51A4               	movf	??_printf& (0+255),w,b
  4646  0006BC  0100               	movlb	0	; () banked
  4647  0006BE  17A6               	andwf	(??_printf+2)& (0+255),f,b
  4648  0006C0  0100               	movlb	0	; () banked
  4649  0006C2  51A5               	movf	(??_printf+1)& (0+255),w,b
  4650  0006C4  0100               	movlb	0	; () banked
  4651  0006C6  17A7               	andwf	(??_printf+3)& (0+255),f,b
  4652  0006C8  0E80               	movlw	128
  4653  0006CA  0100               	movlb	0	; () banked
  4654  0006CC  19A6               	xorwf	(??_printf+2)& (0+255),w,b
  4655  0006CE  E119               	bnz	l4084
  4656  0006D0  0E08               	movlw	8
  4657  0006D2  0100               	movlb	0	; () banked
  4658  0006D4  19A7               	xorwf	(??_printf+3)& (0+255),w,b
  4659  0006D6  A4D8               	btfss	status,2,c
  4660  0006D8  D014               	goto	l4084
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;doprnt.c: 1404: (putch('0') );
  4664  0006DA  0E30               	movlw	48
  4665  0006DC  EC24  F018         	call	_putch
  4666                           
  4667                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  4668  0006E0  0100               	movlb	0	; () banked
  4669  0006E2  BBBB               	btfsc	printf@flag& (0+255),5,b
  4670  0006E4  D005               	goto	l4080
  4671                           
  4672                           ; BSR set to: 0
  4673  0006E6  0E00               	movlw	0
  4674  0006E8  0100               	movlb	0	; () banked
  4675  0006EA  6FAB               	movwf	(_printf$486+1)& (0+255),b
  4676  0006EC  0E78               	movlw	120
  4677  0006EE  D004               	goto	L4
  4678  0006F0                     l4080:
  4679                           
  4680                           ; BSR set to: 0
  4681  0006F0  0E00               	movlw	0
  4682  0006F2  0100               	movlb	0	; () banked
  4683  0006F4  6FAB               	movwf	(_printf$486+1)& (0+255),b
  4684  0006F6  0E58               	movlw	88
  4685  0006F8                     L4:
  4686  0006F8  6FAA               	movwf	_printf$486& (0+255),b
  4687                           
  4688                           ; BSR set to: 0
  4689                           
  4690                           ; BSR set to: 0
  4691  0006FA  0100               	movlb	0	; () banked
  4692  0006FC  51AA               	movf	_printf$486& (0+255),w,b
  4693  0006FE  EC24  F018         	call	_putch
  4694  000702                     l4084:
  4695                           
  4696                           ;doprnt.c: 1412: }
  4697                           ;doprnt.c: 1415: if(width)
  4698  000702  0100               	movlb	0	; () banked
  4699  000704  51B8               	movf	printf@width& (0+255),w,b
  4700  000706  0100               	movlb	0	; () banked
  4701  000708  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  4702  00070A  B4D8               	btfsc	status,2,c
  4703  00070C  D116               	goto	l4140
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;doprnt.c: 1417: (putch('0') );
  4707                           
  4708                           ; BSR set to: 0
  4709                           
  4710                           ;doprnt.c: 1416: do
  4711  00070E  0E30               	movlw	48
  4712  000710  EC24  F018         	call	_putch
  4713                           
  4714                           ;doprnt.c: 1418: while(--width);
  4715  000714  0100               	movlb	0	; () banked
  4716  000716  07B8               	decf	printf@width& (0+255),f,b
  4717  000718  A0D8               	btfss	status,0,c
  4718  00071A  07B9               	decf	(printf@width+1)& (0+255),f,b
  4719  00071C  D7F2               	goto	l4084
  4720  00071E                     l4090:
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;doprnt.c: 1422: {
  4724                           ;doprnt.c: 1424: if(width
  4725                           ;doprnt.c: 1426: && !(flag & 0x08)
  4726                           ;doprnt.c: 1428: )
  4727  00071E  0100               	movlb	0	; () banked
  4728  000720  51B8               	movf	printf@width& (0+255),w,b
  4729  000722  0100               	movlb	0	; () banked
  4730  000724  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  4731  000726  B4D8               	btfsc	status,2,c
  4732  000728  D010               	goto	l4098
  4733                           
  4734                           ; BSR set to: 0
  4735  00072A  0100               	movlb	0	; () banked
  4736  00072C  B7BB               	btfsc	printf@flag& (0+255),3,b
  4737  00072E  D00D               	goto	l4098
  4738  000730                     l4094:
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;doprnt.c: 1430: (putch(' ') );
  4742  000730  0E20               	movlw	32
  4743  000732  EC24  F018         	call	_putch
  4744                           
  4745                           ;doprnt.c: 1431: while(--width);
  4746  000736  0100               	movlb	0	; () banked
  4747  000738  07B8               	decf	printf@width& (0+255),f,b
  4748  00073A  A0D8               	btfss	status,0,c
  4749  00073C  07B9               	decf	(printf@width+1)& (0+255),f,b
  4750  00073E  0100               	movlb	0	; () banked
  4751  000740  51B8               	movf	printf@width& (0+255),w,b
  4752  000742  0100               	movlb	0	; () banked
  4753  000744  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  4754  000746  A4D8               	btfss	status,2,c
  4755  000748  D7F3               	goto	l4094
  4756  00074A                     l4098:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;doprnt.c: 1438: if(flag & 0x03)
  4760  00074A  0E03               	movlw	3
  4761  00074C  0100               	movlb	0	; () banked
  4762  00074E  15BB               	andwf	printf@flag& (0+255),w,b
  4763  000750  0100               	movlb	0	; () banked
  4764  000752  6FA4               	movwf	??_printf& (0+255),b
  4765  000754  0E00               	movlw	0
  4766  000756  0100               	movlb	0	; () banked
  4767  000758  15BC               	andwf	(printf@flag+1)& (0+255),w,b
  4768  00075A  0100               	movlb	0	; () banked
  4769  00075C  6FA5               	movwf	(??_printf+1)& (0+255),b
  4770  00075E  0100               	movlb	0	; () banked
  4771  000760  51A4               	movf	??_printf& (0+255),w,b
  4772  000762  0100               	movlb	0	; () banked
  4773  000764  11A5               	iorwf	(??_printf+1)& (0+255),w,b
  4774  000766  B4D8               	btfsc	status,2,c
  4775  000768  D004               	goto	l467
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 1439: (putch('-') );
  4779  00076A  0E2D               	movlw	45
  4780  00076C  EC24  F018         	call	_putch
  4781  000770  D006               	goto	l4104
  4782  000772                     l467:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;doprnt.c: 1443: else if(flag & 0x01)
  4786  000772  0100               	movlb	0	; () banked
  4787  000774  A1BB               	btfss	printf@flag& (0+255),0,b
  4788  000776  D003               	goto	l4104
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 1444: (putch(' ') );
  4792  000778  0E20               	movlw	32
  4793  00077A  EC24  F018         	call	_putch
  4794  00077E                     l4104:
  4795                           
  4796                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  4797  00077E  0EC0               	movlw	192
  4798  000780  0100               	movlb	0	; () banked
  4799  000782  6FA4               	movwf	??_printf& (0+255),b
  4800  000784  0E08               	movlw	8
  4801  000786  0100               	movlb	0	; () banked
  4802  000788  6FA5               	movwf	(??_printf+1)& (0+255),b
  4803  00078A  C0BB  F0A6         	movff	printf@flag,??_printf+2
  4804  00078E  C0BC  F0A7         	movff	printf@flag+1,??_printf+3
  4805  000792  0100               	movlb	0	; () banked
  4806  000794  51A4               	movf	??_printf& (0+255),w,b
  4807  000796  0100               	movlb	0	; () banked
  4808  000798  17A6               	andwf	(??_printf+2)& (0+255),f,b
  4809  00079A  0100               	movlb	0	; () banked
  4810  00079C  51A5               	movf	(??_printf+1)& (0+255),w,b
  4811  00079E  0100               	movlb	0	; () banked
  4812  0007A0  17A7               	andwf	(??_printf+3)& (0+255),f,b
  4813  0007A2  0E40               	movlw	64
  4814  0007A4  0100               	movlb	0	; () banked
  4815  0007A6  19A6               	xorwf	(??_printf+2)& (0+255),w,b
  4816  0007A8  E109               	bnz	l4108
  4817  0007AA  0E08               	movlw	8
  4818  0007AC  0100               	movlb	0	; () banked
  4819  0007AE  19A7               	xorwf	(??_printf+3)& (0+255),w,b
  4820  0007B0  A4D8               	btfss	status,2,c
  4821  0007B2  D004               	goto	l4108
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;doprnt.c: 1449: (putch('0') );
  4825  0007B4  0E30               	movlw	48
  4826  0007B6  EC24  F018         	call	_putch
  4827  0007BA  D0BF               	goto	l4140
  4828  0007BC                     l4108:
  4829                           
  4830                           ;doprnt.c: 1450: else
  4831                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  4832  0007BC  0EC0               	movlw	192
  4833  0007BE  0100               	movlb	0	; () banked
  4834  0007C0  6FA4               	movwf	??_printf& (0+255),b
  4835  0007C2  0E08               	movlw	8
  4836  0007C4  0100               	movlb	0	; () banked
  4837  0007C6  6FA5               	movwf	(??_printf+1)& (0+255),b
  4838  0007C8  C0BB  F0A6         	movff	printf@flag,??_printf+2
  4839  0007CC  C0BC  F0A7         	movff	printf@flag+1,??_printf+3
  4840  0007D0  0100               	movlb	0	; () banked
  4841  0007D2  51A4               	movf	??_printf& (0+255),w,b
  4842  0007D4  0100               	movlb	0	; () banked
  4843  0007D6  17A6               	andwf	(??_printf+2)& (0+255),f,b
  4844  0007D8  0100               	movlb	0	; () banked
  4845  0007DA  51A5               	movf	(??_printf+1)& (0+255),w,b
  4846  0007DC  0100               	movlb	0	; () banked
  4847  0007DE  17A7               	andwf	(??_printf+3)& (0+255),f,b
  4848  0007E0  0E80               	movlw	128
  4849  0007E2  0100               	movlb	0	; () banked
  4850  0007E4  19A6               	xorwf	(??_printf+2)& (0+255),w,b
  4851  0007E6  E104               	bnz	u4311
  4852  0007E8  0E08               	movlw	8
  4853  0007EA  0100               	movlb	0	; () banked
  4854  0007EC  19A7               	xorwf	(??_printf+3)& (0+255),w,b
  4855  0007EE  A4D8               	btfss	status,2,c
  4856  0007F0                     u4311:
  4857  0007F0  D0A4               	goto	l4140
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;doprnt.c: 1458: (putch('0') );
  4861  0007F2  0E30               	movlw	48
  4862  0007F4  EC24  F018         	call	_putch
  4863                           
  4864                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  4865  0007F8  0100               	movlb	0	; () banked
  4866  0007FA  BBBB               	btfsc	printf@flag& (0+255),5,b
  4867  0007FC  D005               	goto	l4116
  4868                           
  4869                           ; BSR set to: 0
  4870  0007FE  0E00               	movlw	0
  4871  000800  0100               	movlb	0	; () banked
  4872  000802  6FAD               	movwf	(_printf$487+1)& (0+255),b
  4873  000804  0E78               	movlw	120
  4874  000806  D004               	goto	L5
  4875  000808                     l4116:
  4876                           
  4877                           ; BSR set to: 0
  4878  000808  0E00               	movlw	0
  4879  00080A  0100               	movlb	0	; () banked
  4880  00080C  6FAD               	movwf	(_printf$487+1)& (0+255),b
  4881  00080E  0E58               	movlw	88
  4882  000810                     L5:
  4883  000810  6FAC               	movwf	_printf$487& (0+255),b
  4884                           
  4885                           ; BSR set to: 0
  4886                           
  4887                           ; BSR set to: 0
  4888  000812  0100               	movlb	0	; () banked
  4889  000814  51AC               	movf	_printf$487& (0+255),w,b
  4890  000816  EC24  F018         	call	_putch
  4891                           
  4892                           ;doprnt.c: 1466: }
  4893                           ;doprnt.c: 1469: }
  4894                           ;doprnt.c: 1474: while(prec--) {
  4895  00081A  D08F               	goto	l4140
  4896  00081C                     l4120:
  4897                           
  4898                           ;doprnt.c: 1486: case 0xC0:
  4899                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4900  00081C  0100               	movlb	0	; () banked
  4901  00081E  51B7               	movf	printf@prec& (0+255),w,b
  4902  000820  0D02               	mullw	2
  4903  000822  0EDC               	movlw	low _dpowers
  4904  000824  24F3               	addwf	prodl,w,c
  4905  000826  6EF6               	movwf	tblptrl,c
  4906  000828  0EFD               	movlw	high _dpowers
  4907  00082A  20F4               	addwfc	prodh,w,c
  4908  00082C  6EF7               	movwf	tblptrh,c
  4909  00082E                     	if	0	;There are less than 3 active tblptr bytes
  4910  00082E                     	endif
  4911  00082E  0009               	tblrd		*+
  4912  000830  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4913  000834  000A               	tblrd		*-
  4914  000836  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4915  00083A  C0B5  F090         	movff	printf@val,___lwdiv@dividend
  4916  00083E  C0B6  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4917  000842  ECBB  F014         	call	___lwdiv	;wreg free
  4918  000846  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  4919  00084A  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  4920  00084E  0E00               	movlw	0
  4921  000850  0100               	movlb	0	; () banked
  4922  000852  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4923  000854  0E0A               	movlw	10
  4924  000856  6F99               	movwf	___lwmod@divisor& (0+255),b
  4925  000858  EC67  F015         	call	___lwmod	;wreg free
  4926  00085C  0100               	movlb	0	; () banked
  4927  00085E  5197               	movf	?___lwmod& (0+255),w,b
  4928  000860  D055               	goto	L6
  4929  000862                     l4122:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;doprnt.c: 1499: {
  4933                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4934  000862  C0B5  F090         	movff	printf@val,___lwdiv@dividend
  4935  000866  C0B6  F091         	movff	printf@val+1,___lwdiv@dividend+1
  4936  00086A  0100               	movlb	0	; () banked
  4937  00086C  51B7               	movf	printf@prec& (0+255),w,b
  4938  00086E  0D02               	mullw	2
  4939  000870  0EE6               	movlw	low _hexpowers
  4940  000872  24F3               	addwf	prodl,w,c
  4941  000874  6EF6               	movwf	tblptrl,c
  4942  000876  0EFD               	movlw	high _hexpowers
  4943  000878  20F4               	addwfc	prodh,w,c
  4944  00087A  6EF7               	movwf	tblptrh,c
  4945  00087C                     	if	0	;There are less than 3 active tblptr bytes
  4946  00087C                     	endif
  4947  00087C  0009               	tblrd		*+
  4948  00087E  CFF5 F092          	movff	tablat,___lwdiv@divisor
  4949  000882  000A               	tblrd		*-
  4950  000884  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  4951  000888  ECBB  F014         	call	___lwdiv	;wreg free
  4952  00088C  0100               	movlb	0	; () banked
  4953  00088E  5190               	movf	?___lwdiv& (0+255),w,b
  4954  000890  0B0F               	andlw	15
  4955  000892  0100               	movlb	0	; () banked
  4956  000894  6FB0               	movwf	printf@idx& (0+255),b
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  4960  000896  0100               	movlb	0	; () banked
  4961  000898  BBBB               	btfsc	printf@flag& (0+255),5,b
  4962  00089A  D005               	goto	l4128
  4963                           
  4964                           ; BSR set to: 0
  4965  00089C  0EF4               	movlw	low STR_26
  4966  00089E  0100               	movlb	0	; () banked
  4967  0008A0  6FAE               	movwf	_printf$493& (0+255),b
  4968  0008A2  0EFE               	movlw	high STR_26
  4969  0008A4  D004               	goto	L7
  4970  0008A6                     l4128:
  4971                           
  4972                           ; BSR set to: 0
  4973  0008A6  0EE3               	movlw	low STR_25
  4974  0008A8  0100               	movlb	0	; () banked
  4975  0008AA  6FAE               	movwf	_printf$493& (0+255),b
  4976  0008AC  0EFE               	movlw	high STR_25
  4977  0008AE                     L7:
  4978  0008AE  0100               	movlb	0	; () banked
  4979  0008B0  6FAF               	movwf	(_printf$493+1)& (0+255),b
  4980                           
  4981                           ; BSR set to: 0
  4982                           
  4983                           ; BSR set to: 0
  4984  0008B2  0100               	movlb	0	; () banked
  4985  0008B4  51B0               	movf	printf@idx& (0+255),w,b
  4986  0008B6  0D01               	mullw	1
  4987  0008B8  C0AE  F0A4         	movff	_printf$493,??_printf
  4988  0008BC  C0AF  F0A5         	movff	_printf$493+1,??_printf+1
  4989  0008C0  50F3               	movf	prodl,w,c
  4990  0008C2  0100               	movlb	0	; () banked
  4991  0008C4  27A4               	addwf	??_printf& (0+255),f,b
  4992  0008C6  50F4               	movf	prodh,w,c
  4993  0008C8  0100               	movlb	0	; () banked
  4994  0008CA  23A5               	addwfc	(??_printf+1)& (0+255),f,b
  4995  0008CC  C0A4  FFF6         	movff	??_printf,tblptrl
  4996  0008D0  C0A5  FFF7         	movff	??_printf+1,tblptrh
  4997  0008D4                     	if	0	;tblptru may be non-zero
  4998  0008D4                     	endif
  4999  0008D4                     	if	0	;tblptru may be non-zero
  5000  0008D4                     	endif
  5001  0008D4  0008               	tblrd		*
  5002  0008D6  CFF5 F0BA          	movff	tablat,printf@c
  5003                           
  5004                           ;doprnt.c: 1508: }
  5005                           ;doprnt.c: 1510: break;
  5006  0008DA  D02B               	goto	l4138
  5007  0008DC                     l4132:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  5011  0008DC  C0B5  F090         	movff	printf@val,___lwdiv@dividend
  5012  0008E0  C0B6  F091         	movff	printf@val+1,___lwdiv@dividend+1
  5013  0008E4  0100               	movlb	0	; () banked
  5014  0008E6  51B7               	movf	printf@prec& (0+255),w,b
  5015  0008E8  0D02               	mullw	2
  5016  0008EA  0ED0               	movlw	low _octpowers
  5017  0008EC  24F3               	addwf	prodl,w,c
  5018  0008EE  6EF6               	movwf	tblptrl,c
  5019  0008F0  0EFD               	movlw	high _octpowers
  5020  0008F2  20F4               	addwfc	prodh,w,c
  5021  0008F4  6EF7               	movwf	tblptrh,c
  5022  0008F6                     	if	0	;There are less than 3 active tblptr bytes
  5023  0008F6                     	endif
  5024  0008F6  0009               	tblrd		*+
  5025  0008F8  CFF5 F092          	movff	tablat,___lwdiv@divisor
  5026  0008FC  000A               	tblrd		*-
  5027  0008FE  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  5028  000902  ECBB  F014         	call	___lwdiv	;wreg free
  5029  000906  0100               	movlb	0	; () banked
  5030  000908  5190               	movf	?___lwdiv& (0+255),w,b
  5031  00090A  0B07               	andlw	7
  5032  00090C                     L6:
  5033  00090C  0F30               	addlw	48
  5034  00090E  0100               	movlb	0	; () banked
  5035  000910  6FBA               	movwf	printf@c& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;doprnt.c: 1523: }
  5039                           
  5040                           ;doprnt.c: 1520: break;
  5041  000912  D00F               	goto	l4138
  5042  000914                     l4136:
  5043  000914  0100               	movlb	0	; () banked
  5044  000916  51BB               	movf	printf@flag& (0+255),w,b
  5045  000918  0BC0               	andlw	192
  5046                           
  5047                           ; Switch size 1, requested type "space"
  5048                           ; Number of cases is 4, Range of values is 0 to 192
  5049                           ; switch strategies available:
  5050                           ; Name         Instructions Cycles
  5051                           ; simple_byte           13     7 (average)
  5052                           ;	Chosen strategy is simple_byte
  5053  00091A  0A00               	xorlw	0	; case 0
  5054  00091C  B4D8               	btfsc	status,2,c
  5055  00091E  D77E               	goto	l4120
  5056  000920  0A40               	xorlw	64	; case 64
  5057  000922  B4D8               	btfsc	status,2,c
  5058  000924  D7DB               	goto	l4132
  5059  000926  0AC0               	xorlw	192	; case 128
  5060  000928  B4D8               	btfsc	status,2,c
  5061  00092A  D79B               	goto	l4122
  5062  00092C  0A40               	xorlw	64	; case 192
  5063  00092E  B4D8               	btfsc	status,2,c
  5064  000930  D775               	goto	l4120
  5065  000932                     l4138:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;doprnt.c: 1524: (putch(c) );
  5069  000932  0100               	movlb	0	; () banked
  5070  000934  51BA               	movf	printf@c& (0+255),w,b
  5071  000936  EC24  F018         	call	_putch
  5072  00093A                     l4140:
  5073  00093A  0100               	movlb	0	; () banked
  5074  00093C  07B7               	decf	printf@prec& (0+255),f,b
  5075  00093E  0100               	movlb	0	; () banked
  5076  000940  29B7               	incf	printf@prec& (0+255),w,b
  5077  000942  A4D8               	btfss	status,2,c
  5078  000944  D7E7               	goto	l4136
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;doprnt.c: 1525: }
  5082                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  5083  000946  0100               	movlb	0	; () banked
  5084  000948  A7BB               	btfss	printf@flag& (0+255),3,b
  5085  00094A  D017               	goto	l4148
  5086                           
  5087                           ; BSR set to: 0
  5088  00094C  0100               	movlb	0	; () banked
  5089  00094E  BFB9               	btfsc	(printf@width+1)& (0+255),7,b
  5090  000950  D014               	goto	l4148
  5091  000952  0100               	movlb	0	; () banked
  5092  000954  51B9               	movf	(printf@width+1)& (0+255),w,b
  5093  000956  E104               	bnz	l4144
  5094  000958  0100               	movlb	0	; () banked
  5095  00095A  05B8               	decf	printf@width& (0+255),w,b
  5096  00095C  A0D8               	btfss	status,0,c
  5097  00095E  D00D               	goto	l4148
  5098  000960                     l4144:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;doprnt.c: 1530: (putch(' ') );
  5102  000960  0E20               	movlw	32
  5103  000962  EC24  F018         	call	_putch
  5104                           
  5105                           ;doprnt.c: 1531: while(--width);
  5106  000966  0100               	movlb	0	; () banked
  5107  000968  07B8               	decf	printf@width& (0+255),f,b
  5108  00096A  A0D8               	btfss	status,0,c
  5109  00096C  07B9               	decf	(printf@width+1)& (0+255),f,b
  5110  00096E  0100               	movlb	0	; () banked
  5111  000970  51B8               	movf	printf@width& (0+255),w,b
  5112  000972  0100               	movlb	0	; () banked
  5113  000974  11B9               	iorwf	(printf@width+1)& (0+255),w,b
  5114  000976  A4D8               	btfss	status,2,c
  5115  000978  D7F3               	goto	l4144
  5116  00097A                     l4148:
  5117  00097A  C09C  FFF6         	movff	printf@f,tblptrl
  5118  00097E  C09D  FFF7         	movff	printf@f+1,tblptrh
  5119  000982  0100               	movlb	0	; () banked
  5120  000984  4B9C               	infsnz	printf@f& (0+255),f,b
  5121  000986  2B9D               	incf	(printf@f+1)& (0+255),f,b
  5122  000988                     	if	0	;tblptru may be non-zero
  5123  000988                     	endif
  5124  000988                     	if	0	;tblptru may be non-zero
  5125  000988                     	endif
  5126  000988  0008               	tblrd		*
  5127  00098A  CFF5 F0BA          	movff	tablat,printf@c
  5128  00098E  0100               	movlb	0	; () banked
  5129  000990  51BA               	movf	printf@c& (0+255),w,b
  5130  000992  B4D8               	btfsc	status,2,c
  5131  000994  0012               	return	
  5132  000996  EF11  F000         	goto	l3842
  5133  00099A                     __end_of_printf:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           intcon2	equ	0xFF1
  5143                           intcon3	equ	0xFF0
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function _putch *****************
  5154 ;; Defined at:
  5155 ;;		line 31 in file "lcd.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  data            1    wreg     unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  data            1   18[BANK0 ] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;Total ram usage:        1 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    8
  5176 ;; This function calls:
  5177 ;;		_lcdNibble
  5178 ;; This function is called by:
  5179 ;;		_printf
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text12
  5184  003048                     __ptext12:
  5185                           	opt stack 0
  5186  003048                     _putch:
  5187                           	opt stack 20
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;incstack = 0
  5191                           ;putch@data stored from wreg
  5192  003048  0100               	movlb	0	; () banked
  5193  00304A  6F92               	movwf	putch@data& (0+255),b
  5194                           
  5195                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5196  00304C  848C               	bsf	3980,2,c	;volatile
  5197                           
  5198                           ;lcd.c: 33: lcdNibble(data);
  5199  00304E  0100               	movlb	0	; () banked
  5200  003050  5192               	movf	putch@data& (0+255),w,b
  5201  003052  EC98  F015         	call	_lcdNibble
  5202  003056  0012               	return		;funcret
  5203  003058                     __end_of_putch:
  5204                           	opt stack 0
  5205                           tblptru	equ	0xFF8
  5206                           tblptrh	equ	0xFF7
  5207                           tblptrl	equ	0xFF6
  5208                           tablat	equ	0xFF5
  5209                           prodh	equ	0xFF4
  5210                           prodl	equ	0xFF3
  5211                           intcon	equ	0xFF2
  5212                           intcon2	equ	0xFF1
  5213                           intcon3	equ	0xFF0
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           indf2	equ	0xFDF
  5217                           postinc2	equ	0xFDE
  5218                           postdec2	equ	0xFDD
  5219                           fsr2h	equ	0xFDA
  5220                           fsr2l	equ	0xFD9
  5221                           status	equ	0xFD8
  5222                           
  5223 ;; *************** function _isdigit *****************
  5224 ;; Defined at:
  5225 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5226 ;; Parameters:    Size  Location     Type
  5227 ;;  c               1    wreg     unsigned char 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  c               1   18[BANK0 ] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;		None               void
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;Total ram usage:        3 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    7
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_printf
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text13
  5254  002F38                     __ptext13:
  5255                           	opt stack 0
  5256  002F38                     _isdigit:
  5257                           	opt stack 21
  5258                           
  5259                           ;incstack = 0
  5260                           ;isdigit@c stored from wreg
  5261  002F38  0100               	movlb	0	; () banked
  5262  002F3A  6F92               	movwf	isdigit@c& (0+255),b
  5263  002F3C  0E00               	movlw	0
  5264  002F3E  0100               	movlb	0	; () banked
  5265  002F40  6F91               	movwf	_isdigit$707& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268  002F42  0E3A               	movlw	58
  5269  002F44  0100               	movlb	0	; () banked
  5270  002F46  6192               	cpfslt	isdigit@c& (0+255),b
  5271  002F48  D007               	goto	l3660
  5272                           
  5273                           ; BSR set to: 0
  5274  002F4A  0E2F               	movlw	47
  5275  002F4C  0100               	movlb	0	; () banked
  5276  002F4E  6592               	cpfsgt	isdigit@c& (0+255),b
  5277  002F50  D003               	goto	l3660
  5278                           
  5279                           ; BSR set to: 0
  5280  002F52  0E01               	movlw	1
  5281  002F54  0100               	movlb	0	; () banked
  5282  002F56  6F91               	movwf	_isdigit$707& (0+255),b
  5283  002F58                     l3660:
  5284                           
  5285                           ; BSR set to: 0
  5286  002F58  C091  F090         	movff	_isdigit$707,??_isdigit
  5287  002F5C  0100               	movlb	0	; () banked
  5288  002F5E  3190               	rrcf	??_isdigit& (0+255),w,b
  5289  002F60  0012               	return	
  5290  002F62                     __end_of_isdigit:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           intcon2	equ	0xFF1
  5300                           intcon3	equ	0xFF0
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function ___wmul *****************
  5311 ;; Defined at:
  5312 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5315 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  product         2   20[BANK0 ] unsigned int 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  2   16[BANK0 ] unsigned int 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, prodl, prodh
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:        6 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    7
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_printf
  5338 ;;		_servo_rotate1
  5339 ;;		_servo_rotate2
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text14
  5344  002EA0                     __ptext14:
  5345                           	opt stack 0
  5346  002EA0                     ___wmul:
  5347                           	opt stack 21
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;incstack = 0
  5351  002EA0  0100               	movlb	0	; () banked
  5352  002EA2  5190               	movf	___wmul@multiplier& (0+255),w,b
  5353  002EA4  0100               	movlb	0	; () banked
  5354  002EA6  0392               	mulwf	___wmul@multiplicand& (0+255),b
  5355  002EA8  CFF3 F094          	movff	prodl,___wmul@product
  5356  002EAC  CFF4 F095          	movff	prodh,___wmul@product+1
  5357  002EB0  0100               	movlb	0	; () banked
  5358  002EB2  5190               	movf	___wmul@multiplier& (0+255),w,b
  5359  002EB4  0100               	movlb	0	; () banked
  5360  002EB6  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5361  002EB8  50F3               	movf	prodl,w,c
  5362  002EBA  0100               	movlb	0	; () banked
  5363  002EBC  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  5364  002EBE  0100               	movlb	0	; () banked
  5365  002EC0  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5366  002EC2  0100               	movlb	0	; () banked
  5367  002EC4  0392               	mulwf	___wmul@multiplicand& (0+255),b
  5368  002EC6  50F3               	movf	prodl,w,c
  5369  002EC8  0100               	movlb	0	; () banked
  5370  002ECA  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  5371                           
  5372                           ; BSR set to: 0
  5373  002ECC  C094  F090         	movff	___wmul@product,?___wmul
  5374  002ED0  C095  F091         	movff	___wmul@product+1,?___wmul+1
  5375  002ED4  0012               	return	
  5376  002ED6                     __end_of___wmul:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           intcon2	equ	0xFF1
  5386                           intcon3	equ	0xFF0
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function ___lwmod *****************
  5397 ;; Defined at:
  5398 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  dividend        2   23[BANK0 ] unsigned int 
  5401 ;;  divisor         2   25[BANK0 ] unsigned int 
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  counter         1   27[BANK0 ] unsigned char 
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  2   23[BANK0 ] unsigned int 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5413 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;Total ram usage:        5 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    7
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_printf
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text15
  5428  002ACE                     __ptext15:
  5429                           	opt stack 0
  5430  002ACE                     ___lwmod:
  5431                           	opt stack 21
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;incstack = 0
  5435  002ACE  0100               	movlb	0	; () banked
  5436  002AD0  5199               	movf	___lwmod@divisor& (0+255),w,b
  5437  002AD2  0100               	movlb	0	; () banked
  5438  002AD4  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5439  002AD6  B4D8               	btfsc	status,2,c
  5440  002AD8  D026               	goto	l912
  5441                           
  5442                           ; BSR set to: 0
  5443  002ADA  0E01               	movlw	1
  5444  002ADC  0100               	movlb	0	; () banked
  5445  002ADE  6F9B               	movwf	___lwmod@counter& (0+255),b
  5446  002AE0  D006               	goto	l3708
  5447  002AE2                     l3706:
  5448                           
  5449                           ; BSR set to: 0
  5450  002AE2  0100               	movlb	0	; () banked
  5451  002AE4  90D8               	bcf	status,0,c
  5452  002AE6  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  5453  002AE8  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5454  002AEA  0100               	movlb	0	; () banked
  5455  002AEC  2B9B               	incf	___lwmod@counter& (0+255),f,b
  5456  002AEE                     l3708:
  5457                           
  5458                           ; BSR set to: 0
  5459  002AEE  0100               	movlb	0	; () banked
  5460  002AF0  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5461  002AF2  D7F7               	goto	l3706
  5462  002AF4                     l3710:
  5463                           
  5464                           ; BSR set to: 0
  5465  002AF4  0100               	movlb	0	; () banked
  5466  002AF6  5199               	movf	___lwmod@divisor& (0+255),w,b
  5467  002AF8  0100               	movlb	0	; () banked
  5468  002AFA  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  5469  002AFC  0100               	movlb	0	; () banked
  5470  002AFE  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5471  002B00  0100               	movlb	0	; () banked
  5472  002B02  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5473  002B04  A0D8               	btfss	status,0,c
  5474  002B06  D008               	goto	l3714
  5475                           
  5476                           ; BSR set to: 0
  5477  002B08  0100               	movlb	0	; () banked
  5478  002B0A  5199               	movf	___lwmod@divisor& (0+255),w,b
  5479  002B0C  0100               	movlb	0	; () banked
  5480  002B0E  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  5481  002B10  0100               	movlb	0	; () banked
  5482  002B12  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5483  002B14  0100               	movlb	0	; () banked
  5484  002B16  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5485  002B18                     l3714:
  5486                           
  5487                           ; BSR set to: 0
  5488  002B18  0100               	movlb	0	; () banked
  5489  002B1A  90D8               	bcf	status,0,c
  5490  002B1C  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5491  002B1E  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  5492                           
  5493                           ; BSR set to: 0
  5494  002B20  0100               	movlb	0	; () banked
  5495  002B22  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  5496  002B24  D7E7               	goto	l3710
  5497  002B26                     l912:
  5498                           
  5499                           ; BSR set to: 0
  5500  002B26  C097  F097         	movff	___lwmod@dividend,?___lwmod
  5501  002B2A  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  5502                           
  5503                           ; BSR set to: 0
  5504  002B2E  0012               	return		;funcret
  5505  002B30                     __end_of___lwmod:
  5506                           	opt stack 0
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           intcon	equ	0xFF2
  5514                           intcon2	equ	0xFF1
  5515                           intcon3	equ	0xFF0
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function ___lwdiv *****************
  5526 ;; Defined at:
  5527 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  dividend        2   16[BANK0 ] unsigned int 
  5530 ;;  divisor         2   18[BANK0 ] unsigned int 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  quotient        2   20[BANK0 ] unsigned int 
  5533 ;;  counter         1   22[BANK0 ] unsigned char 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  2   16[BANK0 ] unsigned int 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;Total ram usage:        7 bytes
  5548 ;; Hardware stack levels used:    1
  5549 ;; Hardware stack levels required when called:    7
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_printf
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text16
  5558  002976                     __ptext16:
  5559                           	opt stack 0
  5560  002976                     ___lwdiv:
  5561                           	opt stack 21
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;incstack = 0
  5565  002976  0E00               	movlw	0
  5566  002978  0100               	movlb	0	; () banked
  5567  00297A  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5568  00297C  0E00               	movlw	0
  5569  00297E  6F94               	movwf	___lwdiv@quotient& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572  002980  0100               	movlb	0	; () banked
  5573  002982  5192               	movf	___lwdiv@divisor& (0+255),w,b
  5574  002984  0100               	movlb	0	; () banked
  5575  002986  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5576  002988  B4D8               	btfsc	status,2,c
  5577  00298A  D02C               	goto	l902
  5578                           
  5579                           ; BSR set to: 0
  5580  00298C  0E01               	movlw	1
  5581  00298E  0100               	movlb	0	; () banked
  5582  002990  6F96               	movwf	___lwdiv@counter& (0+255),b
  5583  002992  D006               	goto	l3688
  5584  002994                     l3686:
  5585                           
  5586                           ; BSR set to: 0
  5587  002994  0100               	movlb	0	; () banked
  5588  002996  90D8               	bcf	status,0,c
  5589  002998  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  5590  00299A  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5591  00299C  0100               	movlb	0	; () banked
  5592  00299E  2B96               	incf	___lwdiv@counter& (0+255),f,b
  5593  0029A0                     l3688:
  5594                           
  5595                           ; BSR set to: 0
  5596  0029A0  0100               	movlb	0	; () banked
  5597  0029A2  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5598  0029A4  D7F7               	goto	l3686
  5599  0029A6                     l3690:
  5600                           
  5601                           ; BSR set to: 0
  5602  0029A6  0100               	movlb	0	; () banked
  5603  0029A8  90D8               	bcf	status,0,c
  5604  0029AA  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  5605  0029AC  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5606                           
  5607                           ; BSR set to: 0
  5608  0029AE  0100               	movlb	0	; () banked
  5609  0029B0  5192               	movf	___lwdiv@divisor& (0+255),w,b
  5610  0029B2  0100               	movlb	0	; () banked
  5611  0029B4  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  5612  0029B6  0100               	movlb	0	; () banked
  5613  0029B8  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5614  0029BA  0100               	movlb	0	; () banked
  5615  0029BC  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5616  0029BE  A0D8               	btfss	status,0,c
  5617  0029C0  D00A               	goto	l3698
  5618                           
  5619                           ; BSR set to: 0
  5620  0029C2  0100               	movlb	0	; () banked
  5621  0029C4  5192               	movf	___lwdiv@divisor& (0+255),w,b
  5622  0029C6  0100               	movlb	0	; () banked
  5623  0029C8  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  5624  0029CA  0100               	movlb	0	; () banked
  5625  0029CC  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5626  0029CE  0100               	movlb	0	; () banked
  5627  0029D0  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5628                           
  5629                           ; BSR set to: 0
  5630  0029D2  0100               	movlb	0	; () banked
  5631  0029D4  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  5632  0029D6                     l3698:
  5633                           
  5634                           ; BSR set to: 0
  5635  0029D6  0100               	movlb	0	; () banked
  5636  0029D8  90D8               	bcf	status,0,c
  5637  0029DA  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5638  0029DC  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  5639                           
  5640                           ; BSR set to: 0
  5641  0029DE  0100               	movlb	0	; () banked
  5642  0029E0  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  5643  0029E2  D7E1               	goto	l3690
  5644  0029E4                     l902:
  5645                           
  5646                           ; BSR set to: 0
  5647  0029E4  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  5648  0029E8  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5649                           
  5650                           ; BSR set to: 0
  5651  0029EC  0012               	return		;funcret
  5652  0029EE                     __end_of___lwdiv:
  5653                           	opt stack 0
  5654                           tblptru	equ	0xFF8
  5655                           tblptrh	equ	0xFF7
  5656                           tblptrl	equ	0xFF6
  5657                           tablat	equ	0xFF5
  5658                           prodh	equ	0xFF4
  5659                           prodl	equ	0xFF3
  5660                           intcon	equ	0xFF2
  5661                           intcon2	equ	0xFF1
  5662                           intcon3	equ	0xFF0
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _lcdInst *****************
  5673 ;; Defined at:
  5674 ;;		line 26 in file "lcd.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  data            1    wreg     unsigned char 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  data            1   18[BANK0 ] unsigned char 
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, status,2, status,0, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;Total ram usage:        1 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    8
  5695 ;; This function calls:
  5696 ;;		_lcdNibble
  5697 ;; This function is called by:
  5698 ;;		_initLCD
  5699 ;;		_standby
  5700 ;;		_date_time
  5701 ;;		_bottle_count
  5702 ;;		_bottle_time
  5703 ;;		_operation
  5704 ;;		_operationend
  5705 ;;		_emergencystop
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text17
  5710  003058                     __ptext17:
  5711                           	opt stack 0
  5712  003058                     _lcdInst:
  5713                           	opt stack 21
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;incstack = 0
  5717                           ;lcdInst@data stored from wreg
  5718  003058  0100               	movlb	0	; () banked
  5719  00305A  6F92               	movwf	lcdInst@data& (0+255),b
  5720                           
  5721                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  5722  00305C  948C               	bcf	3980,2,c	;volatile
  5723                           
  5724                           ;lcd.c: 28: lcdNibble(data);
  5725  00305E  0100               	movlb	0	; () banked
  5726  003060  5192               	movf	lcdInst@data& (0+255),w,b
  5727  003062  EC98  F015         	call	_lcdNibble
  5728  003066  0012               	return		;funcret
  5729  003068                     __end_of_lcdInst:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           intcon2	equ	0xFF1
  5739                           intcon3	equ	0xFF0
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _lcdNibble *****************
  5750 ;; Defined at:
  5751 ;;		line 36 in file "lcd.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  data            1    wreg     unsigned char 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  data            1   17[BANK0 ] unsigned char 
  5756 ;;  temp            1   16[BANK0 ] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;Total ram usage:        2 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    7
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_lcdInst
  5777 ;;		_putch
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text18
  5782  002B30                     __ptext18:
  5783                           	opt stack 0
  5784  002B30                     _lcdNibble:
  5785                           	opt stack 20
  5786                           
  5787                           ;incstack = 0
  5788                           ;lcdNibble@data stored from wreg
  5789  002B30  0100               	movlb	0	; () banked
  5790  002B32  6F91               	movwf	lcdNibble@data& (0+255),b
  5791                           
  5792                           ;lcd.c: 38: char temp = data & 0xF0;
  5793  002B34  0100               	movlb	0	; () banked
  5794  002B36  5191               	movf	lcdNibble@data& (0+255),w,b
  5795  002B38  0BF0               	andlw	240
  5796  002B3A  0100               	movlb	0	; () banked
  5797  002B3C  6F90               	movwf	lcdNibble@temp& (0+255),b
  5798                           
  5799                           ;lcd.c: 39: LATD = LATD & 0x0F;
  5800  002B3E  508C               	movf	3980,w,c	;volatile
  5801  002B40  0B0F               	andlw	15
  5802  002B42  6E8C               	movwf	3980,c	;volatile
  5803                           
  5804                           ;lcd.c: 40: LATD = temp | LATD;
  5805  002B44  0100               	movlb	0	; () banked
  5806  002B46  5190               	movf	lcdNibble@temp& (0+255),w,b
  5807  002B48  108C               	iorwf	3980,w,c	;volatile
  5808  002B4A  6E8C               	movwf	3980,c	;volatile
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  5812  002B4C  968C               	bcf	3980,3,c	;volatile
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5816  002B4E  0E19               	movlw	25
  5817  002B50                     u5637:
  5818  002B50  2EE8               	decfsz	wreg,f,c
  5819  002B52  D7FE               	bra	u5637
  5820                           
  5821                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  5822  002B54  868C               	bsf	3980,3,c	;volatile
  5823                           
  5824                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5825  002B56  0E19               	movlw	25
  5826  002B58                     u5647:
  5827  002B58  2EE8               	decfsz	wreg,f,c
  5828  002B5A  D7FE               	bra	u5647
  5829                           
  5830                           ;lcd.c: 47: data = data << 4;
  5831  002B5C  0100               	movlb	0	; () banked
  5832  002B5E  3991               	swapf	lcdNibble@data& (0+255),w,b
  5833  002B60  0BF0               	andlw	240
  5834  002B62  0100               	movlb	0	; () banked
  5835  002B64  6F91               	movwf	lcdNibble@data& (0+255),b
  5836                           
  5837                           ;lcd.c: 49: temp = data & 0xF0;
  5838  002B66  0100               	movlb	0	; () banked
  5839  002B68  5191               	movf	lcdNibble@data& (0+255),w,b
  5840  002B6A  0BF0               	andlw	240
  5841  002B6C  0100               	movlb	0	; () banked
  5842  002B6E  6F90               	movwf	lcdNibble@temp& (0+255),b
  5843                           
  5844                           ;lcd.c: 50: LATD = LATD & 0x0F;
  5845  002B70  508C               	movf	3980,w,c	;volatile
  5846  002B72  0B0F               	andlw	15
  5847  002B74  6E8C               	movwf	3980,c	;volatile
  5848                           
  5849                           ;lcd.c: 51: LATD = temp | LATD;
  5850  002B76  0100               	movlb	0	; () banked
  5851  002B78  5190               	movf	lcdNibble@temp& (0+255),w,b
  5852  002B7A  108C               	iorwf	3980,w,c	;volatile
  5853  002B7C  6E8C               	movwf	3980,c	;volatile
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  5857  002B7E  968C               	bcf	3980,3,c	;volatile
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5861  002B80  0E19               	movlw	25
  5862  002B82                     u5657:
  5863  002B82  2EE8               	decfsz	wreg,f,c
  5864  002B84  D7FE               	bra	u5657
  5865                           
  5866                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  5867  002B86  868C               	bsf	3980,3,c	;volatile
  5868                           
  5869                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  5870  002B88  0E19               	movlw	25
  5871  002B8A                     u5667:
  5872  002B8A  2EE8               	decfsz	wreg,f,c
  5873  002B8C  D7FE               	bra	u5667
  5874  002B8E  0012               	return		;funcret
  5875  002B90                     __end_of_lcdNibble:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           intcon2	equ	0xFF1
  5885                           intcon3	equ	0xFF0
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           indf2	equ	0xFDF
  5889                           postinc2	equ	0xFDE
  5890                           postdec2	equ	0xFDD
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function ___awmod *****************
  5896 ;; Defined at:
  5897 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  dividend        2   16[BANK0 ] int 
  5900 ;;  divisor         2   18[BANK0 ] int 
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;  sign            1   21[BANK0 ] unsigned char 
  5903 ;;  counter         1   20[BANK0 ] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  2   16[BANK0 ] int 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:        6 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    7
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_bottle_count
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text19
  5928  002730                     __ptext19:
  5929                           	opt stack 0
  5930  002730                     ___awmod:
  5931                           	opt stack 22
  5932                           
  5933                           ;incstack = 0
  5934  002730  0E00               	movlw	0
  5935  002732  0100               	movlb	0	; () banked
  5936  002734  6F95               	movwf	___awmod@sign& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939  002736  0100               	movlb	0	; () banked
  5940  002738  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5941  00273A  D008               	goto	l4242
  5942                           
  5943                           ; BSR set to: 0
  5944  00273C  0100               	movlb	0	; () banked
  5945  00273E  6D90               	negf	___awmod@dividend& (0+255),b
  5946  002740  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  5947  002742  B0D8               	btfsc	status,0,c
  5948  002744  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  5949                           
  5950                           ; BSR set to: 0
  5951  002746  0E01               	movlw	1
  5952  002748  0100               	movlb	0	; () banked
  5953  00274A  6F95               	movwf	___awmod@sign& (0+255),b
  5954  00274C                     l4242:
  5955                           
  5956                           ; BSR set to: 0
  5957  00274C  0100               	movlb	0	; () banked
  5958  00274E  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5959  002750  D005               	goto	l4246
  5960                           
  5961                           ; BSR set to: 0
  5962  002752  0100               	movlb	0	; () banked
  5963  002754  6D92               	negf	___awmod@divisor& (0+255),b
  5964  002756  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  5965  002758  B0D8               	btfsc	status,0,c
  5966  00275A  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  5967  00275C                     l4246:
  5968                           
  5969                           ; BSR set to: 0
  5970  00275C  0100               	movlb	0	; () banked
  5971  00275E  5192               	movf	___awmod@divisor& (0+255),w,b
  5972  002760  0100               	movlb	0	; () banked
  5973  002762  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5974  002764  B4D8               	btfsc	status,2,c
  5975  002766  D026               	goto	l4262
  5976                           
  5977                           ; BSR set to: 0
  5978  002768  0E01               	movlw	1
  5979  00276A  0100               	movlb	0	; () banked
  5980  00276C  6F94               	movwf	___awmod@counter& (0+255),b
  5981  00276E  D006               	goto	l4252
  5982  002770                     l4250:
  5983                           
  5984                           ; BSR set to: 0
  5985  002770  0100               	movlb	0	; () banked
  5986  002772  90D8               	bcf	status,0,c
  5987  002774  3792               	rlcf	___awmod@divisor& (0+255),f,b
  5988  002776  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5989  002778  0100               	movlb	0	; () banked
  5990  00277A  2B94               	incf	___awmod@counter& (0+255),f,b
  5991  00277C                     l4252:
  5992                           
  5993                           ; BSR set to: 0
  5994  00277C  0100               	movlb	0	; () banked
  5995  00277E  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5996  002780  D7F7               	goto	l4250
  5997  002782                     l4254:
  5998                           
  5999                           ; BSR set to: 0
  6000  002782  0100               	movlb	0	; () banked
  6001  002784  5192               	movf	___awmod@divisor& (0+255),w,b
  6002  002786  0100               	movlb	0	; () banked
  6003  002788  5D90               	subwf	___awmod@dividend& (0+255),w,b
  6004  00278A  0100               	movlb	0	; () banked
  6005  00278C  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  6006  00278E  0100               	movlb	0	; () banked
  6007  002790  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6008  002792  A0D8               	btfss	status,0,c
  6009  002794  D008               	goto	l4258
  6010                           
  6011                           ; BSR set to: 0
  6012  002796  0100               	movlb	0	; () banked
  6013  002798  5192               	movf	___awmod@divisor& (0+255),w,b
  6014  00279A  0100               	movlb	0	; () banked
  6015  00279C  5F90               	subwf	___awmod@dividend& (0+255),f,b
  6016  00279E  0100               	movlb	0	; () banked
  6017  0027A0  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  6018  0027A2  0100               	movlb	0	; () banked
  6019  0027A4  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6020  0027A6                     l4258:
  6021                           
  6022                           ; BSR set to: 0
  6023  0027A6  0100               	movlb	0	; () banked
  6024  0027A8  90D8               	bcf	status,0,c
  6025  0027AA  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6026  0027AC  3392               	rrcf	___awmod@divisor& (0+255),f,b
  6027                           
  6028                           ; BSR set to: 0
  6029  0027AE  0100               	movlb	0	; () banked
  6030  0027B0  2F94               	decfsz	___awmod@counter& (0+255),f,b
  6031  0027B2  D7E7               	goto	l4254
  6032  0027B4                     l4262:
  6033                           
  6034                           ; BSR set to: 0
  6035  0027B4  0100               	movlb	0	; () banked
  6036  0027B6  5195               	movf	___awmod@sign& (0+255),w,b
  6037  0027B8  0100               	movlb	0	; () banked
  6038  0027BA  B4D8               	btfsc	status,2,c
  6039  0027BC  D005               	goto	l4266
  6040                           
  6041                           ; BSR set to: 0
  6042  0027BE  0100               	movlb	0	; () banked
  6043  0027C0  6D90               	negf	___awmod@dividend& (0+255),b
  6044  0027C2  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  6045  0027C4  B0D8               	btfsc	status,0,c
  6046  0027C6  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  6047  0027C8                     l4266:
  6048                           
  6049                           ; BSR set to: 0
  6050  0027C8  C090  F090         	movff	___awmod@dividend,?___awmod
  6051  0027CC  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  6052  0027D0  0012               	return	
  6053  0027D2                     __end_of___awmod:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           intcon	equ	0xFF2
  6062                           intcon2	equ	0xFF1
  6063                           intcon3	equ	0xFF0
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function _I2C_Master_Init *****************
  6074 ;; Defined at:
  6075 ;;		line 13 in file "I2C.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  c               4   29[BANK0 ] const unsigned long 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, status,2, status,0, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6089 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;Total ram usage:        8 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    8
  6096 ;; This function calls:
  6097 ;;		___lldiv
  6098 ;; This function is called by:
  6099 ;;		_main
  6100 ;; This function uses a non-reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text20
  6104  002B90                     __ptext20:
  6105                           	opt stack 0
  6106  002B90                     _I2C_Master_Init:
  6107                           	opt stack 22
  6108                           
  6109                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;incstack = 0
  6113  002B90  0E00               	movlw	0
  6114  002B92  6EC7               	movwf	4039,c	;volatile
  6115                           
  6116                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6117  002B94  0E28               	movlw	40
  6118  002B96  6EC6               	movwf	4038,c	;volatile
  6119                           
  6120                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6121  002B98  0E00               	movlw	0
  6122  002B9A  6EC5               	movwf	4037,c	;volatile
  6123                           
  6124                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6125  002B9C  0E80               	movlw	128
  6126  002B9E  0100               	movlb	0	; () banked
  6127  002BA0  6F90               	movwf	___lldiv@dividend& (0+255),b
  6128  002BA2  0E96               	movlw	150
  6129  002BA4  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  6130  002BA6  0E98               	movlw	152
  6131  002BA8  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  6132  002BAA  0E00               	movlw	0
  6133  002BAC  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  6134  002BAE  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6135  002BB2  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6136  002BB6  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6137  002BBA  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6138  002BBE  0E02               	movlw	2
  6139  002BC0                     u4705:
  6140  002BC0  90D8               	bcf	status,0,c
  6141  002BC2  0100               	movlb	0	; () banked
  6142  002BC4  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6143  002BC6  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6144  002BC8  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6145  002BCA  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6146  002BCC  2EE8               	decfsz	wreg,f,c
  6147  002BCE  D7F8               	goto	u4705
  6148  002BD0  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  6149  002BD4  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6150  002BD8  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6151  002BDC  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6152  002BE0  ECDE  F011         	call	___lldiv	;wreg free
  6153  002BE4  0100               	movlb	0	; () banked
  6154  002BE6  0590               	decf	?___lldiv& (0+255),w,b
  6155  002BE8  6EC8               	movwf	4040,c	;volatile
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;I2C.c: 20: TRISC3 = 1;
  6159  002BEA  8694               	bsf	3988,3,c	;volatile
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;I2C.c: 21: TRISC4 = 1;
  6163  002BEC  8894               	bsf	3988,4,c	;volatile
  6164                           
  6165                           ; BSR set to: 0
  6166  002BEE  0012               	return		;funcret
  6167  002BF0                     __end_of_I2C_Master_Init:
  6168                           	opt stack 0
  6169                           tblptru	equ	0xFF8
  6170                           tblptrh	equ	0xFF7
  6171                           tblptrl	equ	0xFF6
  6172                           tablat	equ	0xFF5
  6173                           prodh	equ	0xFF4
  6174                           prodl	equ	0xFF3
  6175                           intcon	equ	0xFF2
  6176                           intcon2	equ	0xFF1
  6177                           intcon3	equ	0xFF0
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function ___lldiv *****************
  6188 ;; Defined at:
  6189 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  dividend        4   16[BANK0 ] unsigned long 
  6192 ;;  divisor         4   20[BANK0 ] unsigned long 
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;  quotient        4   24[BANK0 ] unsigned long 
  6195 ;;  counter         1   28[BANK0 ] unsigned char 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  4   16[BANK0 ] unsigned long 
  6198 ;; Registers used:
  6199 ;;		wreg, status,2, status,0
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6205 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;Total ram usage:       13 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    7
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_I2C_Master_Init
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text21
  6220  0023BC                     __ptext21:
  6221                           	opt stack 0
  6222  0023BC                     ___lldiv:
  6223                           	opt stack 22
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;incstack = 0
  6227  0023BC  0E00               	movlw	0
  6228  0023BE  0100               	movlb	0	; () banked
  6229  0023C0  6F98               	movwf	___lldiv@quotient& (0+255),b
  6230  0023C2  0E00               	movlw	0
  6231  0023C4  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  6232  0023C6  0E00               	movlw	0
  6233  0023C8  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6234  0023CA  0E00               	movlw	0
  6235  0023CC  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6236                           
  6237                           ; BSR set to: 0
  6238  0023CE  0100               	movlb	0	; () banked
  6239  0023D0  5194               	movf	___lldiv@divisor& (0+255),w,b
  6240  0023D2  0100               	movlb	0	; () banked
  6241  0023D4  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6242  0023D6  0100               	movlb	0	; () banked
  6243  0023D8  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6244  0023DA  0100               	movlb	0	; () banked
  6245  0023DC  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6246  0023DE  B4D8               	btfsc	status,2,c
  6247  0023E0  D042               	goto	l849
  6248                           
  6249                           ; BSR set to: 0
  6250  0023E2  0E01               	movlw	1
  6251  0023E4  0100               	movlb	0	; () banked
  6252  0023E6  6F9C               	movwf	___lldiv@counter& (0+255),b
  6253  0023E8  D008               	goto	l4278
  6254  0023EA                     l4276:
  6255                           
  6256                           ; BSR set to: 0
  6257  0023EA  0100               	movlb	0	; () banked
  6258  0023EC  90D8               	bcf	status,0,c
  6259  0023EE  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  6260  0023F0  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6261  0023F2  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6262  0023F4  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6263  0023F6  0100               	movlb	0	; () banked
  6264  0023F8  2B9C               	incf	___lldiv@counter& (0+255),f,b
  6265  0023FA                     l4278:
  6266                           
  6267                           ; BSR set to: 0
  6268  0023FA  0100               	movlb	0	; () banked
  6269  0023FC  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6270  0023FE  D7F5               	goto	l4276
  6271  002400                     l4280:
  6272                           
  6273                           ; BSR set to: 0
  6274  002400  0100               	movlb	0	; () banked
  6275  002402  90D8               	bcf	status,0,c
  6276  002404  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  6277  002406  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6278  002408  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6279  00240A  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6280                           
  6281                           ; BSR set to: 0
  6282  00240C  0100               	movlb	0	; () banked
  6283  00240E  5194               	movf	___lldiv@divisor& (0+255),w,b
  6284  002410  0100               	movlb	0	; () banked
  6285  002412  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  6286  002414  0100               	movlb	0	; () banked
  6287  002416  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6288  002418  0100               	movlb	0	; () banked
  6289  00241A  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6290  00241C  0100               	movlb	0	; () banked
  6291  00241E  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6292  002420  0100               	movlb	0	; () banked
  6293  002422  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6294  002424  0100               	movlb	0	; () banked
  6295  002426  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6296  002428  0100               	movlb	0	; () banked
  6297  00242A  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6298  00242C  A0D8               	btfss	status,0,c
  6299  00242E  D012               	goto	l4288
  6300                           
  6301                           ; BSR set to: 0
  6302  002430  0100               	movlb	0	; () banked
  6303  002432  5194               	movf	___lldiv@divisor& (0+255),w,b
  6304  002434  0100               	movlb	0	; () banked
  6305  002436  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  6306  002438  0100               	movlb	0	; () banked
  6307  00243A  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6308  00243C  0100               	movlb	0	; () banked
  6309  00243E  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6310  002440  0100               	movlb	0	; () banked
  6311  002442  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6312  002444  0100               	movlb	0	; () banked
  6313  002446  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6314  002448  0100               	movlb	0	; () banked
  6315  00244A  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6316  00244C  0100               	movlb	0	; () banked
  6317  00244E  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6318                           
  6319                           ; BSR set to: 0
  6320  002450  0100               	movlb	0	; () banked
  6321  002452  8198               	bsf	___lldiv@quotient& (0+255),0,b
  6322  002454                     l4288:
  6323                           
  6324                           ; BSR set to: 0
  6325  002454  0100               	movlb	0	; () banked
  6326  002456  90D8               	bcf	status,0,c
  6327  002458  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6328  00245A  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6329  00245C  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6330  00245E  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  6331                           
  6332                           ; BSR set to: 0
  6333  002460  0100               	movlb	0	; () banked
  6334  002462  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  6335  002464  D7CD               	goto	l4280
  6336  002466                     l849:
  6337                           
  6338                           ; BSR set to: 0
  6339  002466  C098  F090         	movff	___lldiv@quotient,?___lldiv
  6340  00246A  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  6341  00246E  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  6342  002472  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  6343                           
  6344                           ; BSR set to: 0
  6345  002476  0012               	return		;funcret
  6346  002478                     __end_of___lldiv:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           intcon	equ	0xFF2
  6355                           intcon2	equ	0xFF1
  6356                           intcon3	equ	0xFF0
  6357                           postinc0	equ	0xFEE
  6358                           wreg	equ	0xFE8
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _I2C_ColorSens_Init *****************
  6367 ;; Defined at:
  6368 ;;		line 53 in file "I2C.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;Total ram usage:        0 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    9
  6389 ;; This function calls:
  6390 ;;		_I2C_Master_Start
  6391 ;;		_I2C_Master_Stop
  6392 ;;		_I2C_Master_Write
  6393 ;; This function is called by:
  6394 ;;		_main
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text22
  6399  002ED6                     __ptext22:
  6400                           	opt stack 0
  6401  002ED6                     _I2C_ColorSens_Init:
  6402                           	opt stack 21
  6403                           
  6404                           ;I2C.c: 54: I2C_Master_Start();
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;incstack = 0
  6408  002ED6  EC4E  F018         	call	_I2C_Master_Start	;wreg free
  6409                           
  6410                           ;I2C.c: 55: I2C_Master_Write(0b01010010);
  6411  002EDA  0E00               	movlw	0
  6412  002EDC  0100               	movlb	0	; () banked
  6413  002EDE  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6414  002EE0  0E52               	movlw	82
  6415  002EE2  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  6416  002EE4  EC40  F018         	call	_I2C_Master_Write	;wreg free
  6417                           
  6418                           ;I2C.c: 56: I2C_Master_Write(0b10000000);
  6419  002EE8  0E00               	movlw	0
  6420  002EEA  0100               	movlb	0	; () banked
  6421  002EEC  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6422  002EEE  0E80               	movlw	128
  6423  002EF0  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  6424  002EF2  EC40  F018         	call	_I2C_Master_Write	;wreg free
  6425                           
  6426                           ;I2C.c: 57: I2C_Master_Write(0b00000011);
  6427  002EF6  0E00               	movlw	0
  6428  002EF8  0100               	movlb	0	; () banked
  6429  002EFA  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6430  002EFC  0E03               	movlw	3
  6431  002EFE  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  6432  002F00  EC40  F018         	call	_I2C_Master_Write	;wreg free
  6433                           
  6434                           ;I2C.c: 58: I2C_Master_Stop();
  6435  002F04  EC4A  F018         	call	_I2C_Master_Stop	;wreg free
  6436  002F08  0012               	return		;funcret
  6437  002F0A                     __end_of_I2C_ColorSens_Init:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           intcon2	equ	0xFF1
  6447                           intcon3	equ	0xFF0
  6448                           postinc0	equ	0xFEE
  6449                           wreg	equ	0xFE8
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _I2C_Master_Write *****************
  6458 ;; Defined at:
  6459 ;;		line 47 in file "I2C.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  d               2   17[BANK0 ] unsigned int 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0, cstack
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;Total ram usage:        2 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    8
  6480 ;; This function calls:
  6481 ;;		_I2C_Master_Wait
  6482 ;; This function is called by:
  6483 ;;		_I2C_ColorSens_Init
  6484 ;;		_date_time
  6485 ;;		_read_colorsensor
  6486 ;;		_set_time
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text23
  6491  003080                     __ptext23:
  6492                           	opt stack 0
  6493  003080                     _I2C_Master_Write:
  6494                           	opt stack 20
  6495                           
  6496                           ;I2C.c: 49: I2C_Master_Wait();
  6497                           
  6498                           ;incstack = 0
  6499  003080  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  6500                           
  6501                           ;I2C.c: 50: SSPBUF = d;
  6502  003084  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6503  003088  0012               	return		;funcret
  6504  00308A                     __end_of_I2C_Master_Write:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           intcon	equ	0xFF2
  6513                           intcon2	equ	0xFF1
  6514                           intcon3	equ	0xFF0
  6515                           postinc0	equ	0xFEE
  6516                           wreg	equ	0xFE8
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _I2C_Master_Stop *****************
  6525 ;; Defined at:
  6526 ;;		line 41 in file "I2C.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    8
  6547 ;; This function calls:
  6548 ;;		_I2C_Master_Wait
  6549 ;; This function is called by:
  6550 ;;		_I2C_ColorSens_Init
  6551 ;;		_date_time
  6552 ;;		_read_colorsensor
  6553 ;;		_set_time
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text24
  6558  003094                     __ptext24:
  6559                           	opt stack 0
  6560  003094                     _I2C_Master_Stop:
  6561                           	opt stack 20
  6562                           
  6563                           ;I2C.c: 43: I2C_Master_Wait();
  6564                           
  6565                           ;incstack = 0
  6566  003094  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  6567                           
  6568                           ;I2C.c: 44: PEN = 1;
  6569  003098  84C5               	bsf	4037,2,c	;volatile
  6570  00309A  0012               	return		;funcret
  6571  00309C                     __end_of_I2C_Master_Stop:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           intcon2	equ	0xFF1
  6581                           intcon3	equ	0xFF0
  6582                           postinc0	equ	0xFEE
  6583                           wreg	equ	0xFE8
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _I2C_Master_Start *****************
  6592 ;; Defined at:
  6593 ;;		line 29 in file "I2C.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  1    wreg      void 
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;Total ram usage:        0 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    8
  6614 ;; This function calls:
  6615 ;;		_I2C_Master_Wait
  6616 ;; This function is called by:
  6617 ;;		_I2C_ColorSens_Init
  6618 ;;		_date_time
  6619 ;;		_read_colorsensor
  6620 ;;		_set_time
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text25
  6625  00309C                     __ptext25:
  6626                           	opt stack 0
  6627  00309C                     _I2C_Master_Start:
  6628                           	opt stack 20
  6629                           
  6630                           ;I2C.c: 31: I2C_Master_Wait();
  6631                           
  6632                           ;incstack = 0
  6633  00309C  EC11  F018         	call	_I2C_Master_Wait	;wreg free
  6634                           
  6635                           ;I2C.c: 32: SEN = 1;
  6636  0030A0  80C5               	bsf	4037,0,c	;volatile
  6637  0030A2  0012               	return		;funcret
  6638  0030A4                     __end_of_I2C_Master_Start:
  6639                           	opt stack 0
  6640                           tblptru	equ	0xFF8
  6641                           tblptrh	equ	0xFF7
  6642                           tblptrl	equ	0xFF6
  6643                           tablat	equ	0xFF5
  6644                           prodh	equ	0xFF4
  6645                           prodl	equ	0xFF3
  6646                           intcon	equ	0xFF2
  6647                           intcon2	equ	0xFF1
  6648                           intcon3	equ	0xFF0
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           indf2	equ	0xFDF
  6652                           postinc2	equ	0xFDE
  6653                           postdec2	equ	0xFDD
  6654                           fsr2h	equ	0xFDA
  6655                           fsr2l	equ	0xFD9
  6656                           status	equ	0xFD8
  6657                           
  6658 ;; *************** function _I2C_Master_Wait *****************
  6659 ;; Defined at:
  6660 ;;		line 24 in file "I2C.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;		None
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;Total ram usage:        1 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    7
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_I2C_Master_Start
  6685 ;;		_I2C_Master_Stop
  6686 ;;		_I2C_Master_Write
  6687 ;;		_I2C_Master_Read
  6688 ;;		_I2C_Master_RepeatedStart
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text26
  6693  003022                     __ptext26:
  6694                           	opt stack 0
  6695  003022                     _I2C_Master_Wait:
  6696                           	opt stack 20
  6697  003022                     l34:
  6698  003022  B4C7               	btfsc	4039,2,c	;volatile
  6699  003024  D7FE               	goto	l34
  6700  003026  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  6701  00302A  0E1F               	movlw	31
  6702  00302C  0100               	movlb	0	; () banked
  6703  00302E  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6704  003030  B4D8               	btfsc	status,2,c
  6705  003032  0012               	return	
  6706  003034  D7F6               	goto	l34
  6707  003036                     __end_of_I2C_Master_Wait:
  6708                           	opt stack 0
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           prodh	equ	0xFF4
  6714                           prodl	equ	0xFF3
  6715                           intcon	equ	0xFF2
  6716                           intcon2	equ	0xFF1
  6717                           intcon3	equ	0xFF0
  6718                           postinc0	equ	0xFEE
  6719                           wreg	equ	0xFE8
  6720                           indf2	equ	0xFDF
  6721                           postinc2	equ	0xFDE
  6722                           postdec2	equ	0xFDD
  6723                           fsr2h	equ	0xFDA
  6724                           fsr2l	equ	0xFD9
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _isr *****************
  6728 ;; Defined at:
  6729 ;;		line 136 in file "main.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;  i               1  116[COMRAM] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;Total ram usage:       19 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    6
  6750 ;; This function calls:
  6751 ;;		_dec_to_hex
  6752 ;;		_read_time
  6753 ;;		_servo_rotate0
  6754 ;;		i2___wmul
  6755 ;;		i2_lcdInst
  6756 ;;		i2_printf
  6757 ;;		i2_read_colorsensor
  6758 ;; This function is called by:
  6759 ;;		Interrupt level 2
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	intcode
  6764  000008                     __pintcode:
  6765                           	opt stack 0
  6766  000008                     _isr:
  6767                           	opt stack 20
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;incstack = 0
  6771  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6772  00000A  ED82  F008         	call	int_func,f	;refresh shadow registers
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           intcon2	equ	0xFF1
  6781                           intcon3	equ	0xFF0
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791                           	psect	intcode_body
  6792  001104                     __pintcode_body:
  6793                           	opt stack 20
  6794  001104                     int_func:
  6795                           	opt stack 20
  6796  001104  0006               	pop		; remove dummy address from shadow register refresh
  6797  001106  CFFA F082          	movff	pclath,??_isr+2
  6798  00110A  CFFB F083          	movff	pclatu,??_isr+3
  6799  00110E  CFE9 F084          	movff	fsr0l,??_isr+4
  6800  001112  CFEA F085          	movff	fsr0h,??_isr+5
  6801  001116  CFE1 F086          	movff	fsr1l,??_isr+6
  6802  00111A  CFE2 F087          	movff	fsr1h,??_isr+7
  6803  00111E  CFD9 F088          	movff	fsr2l,??_isr+8
  6804  001122  CFDA F089          	movff	fsr2h,??_isr+9
  6805  001126  CFF3 F08A          	movff	prodl,??_isr+10
  6806  00112A  CFF4 F08B          	movff	prodh,??_isr+11
  6807  00112E  CFF6 F08C          	movff	tblptrl,??_isr+12
  6808  001132  CFF7 F08D          	movff	tblptrh,??_isr+13
  6809  001136  CFF8 F08E          	movff	tblptru,??_isr+14
  6810  00113A  CFF5 F08F          	movff	tablat,??_isr+15
  6811                           
  6812                           ;main.c: 137: if (INT1IF) {
  6813  00113E  B0F0               	btfsc	intcon3,0,c	;volatile
  6814  001140  D0A3               	goto	i2l5054
  6815  001142  D0C3               	goto	i2l225
  6816  001144                     i2l4994:
  6817                           
  6818                           ;main.c: 140: curr_state = STANDBY;
  6819  001144  0E00               	movlw	0
  6820  001146  0100               	movlb	0	; () banked
  6821  001148  6FD6               	movwf	_curr_state& (0+255),b
  6822                           
  6823                           ;main.c: 141: bottle_count_disp = 0;
  6824  00114A  0E00               	movlw	0
  6825  00114C  0100               	movlb	0	; () banked
  6826  00114E  6FD8               	movwf	(_bottle_count_disp+1)& (0+255),b
  6827  001150  0E00               	movlw	0
  6828  001152  6FD7               	movwf	_bottle_count_disp& (0+255),b
  6829                           
  6830                           ;main.c: 142: break;
  6831  001154  D0B8               	goto	i2l228
  6832  001156                     i2l229:
  6833                           
  6834                           ;main.c: 144: TMR0IE = 1;
  6835  001156  8AF2               	bsf	intcon,5,c	;volatile
  6836                           
  6837                           ;main.c: 145: TMR0ON = 1;
  6838  001158  8ED5               	bsf	4053,7,c	;volatile
  6839                           
  6840                           ;main.c: 146: TMR0 = 0;
  6841  00115A  0E00               	movlw	0
  6842  00115C  6ED7               	movwf	4055,c	;volatile
  6843  00115E  0E00               	movlw	0
  6844  001160  6ED6               	movwf	4054,c	;volatile
  6845                           
  6846                           ;main.c: 147: read_time();
  6847  001162  EC33  F015         	call	_read_time	;wreg free
  6848                           
  6849                           ;main.c: 148: start_time[1] = time[1];
  6850  001166  C0CA  F07D         	movff	_time+1,_start_time+1
  6851                           
  6852                           ;main.c: 149: start_time[0] = time[0];
  6853  00116A  C0C9  F07C         	movff	_time,_start_time
  6854                           
  6855                           ;main.c: 150: lcdInst(0b00000001);
  6856  00116E  0E01               	movlw	1
  6857  001170  EC3A  F018         	call	i2_lcdInst
  6858                           
  6859                           ;main.c: 151: curr_state = OPERATION;
  6860  001174  0E02               	movlw	2
  6861  001176  D069               	goto	L10
  6862  001178                     i2l5008:
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 152: bottle_count_disp = -1;
  6866  001178  0100               	movlb	0	; () banked
  6867  00117A  69D7               	setf	_bottle_count_disp& (0+255),b
  6868  00117C  69D8               	setf	(_bottle_count_disp+1)& (0+255),b
  6869                           
  6870                           ;main.c: 153: break;
  6871  00117E  D0A3               	goto	i2l228
  6872  001180                     i2l5010:
  6873                           
  6874                           ;main.c: 155: curr_state = BOTTLECOUNT;
  6875  001180  0E05               	movlw	5
  6876  001182  0100               	movlb	0	; () banked
  6877  001184  6FD6               	movwf	_curr_state& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;main.c: 156: bottle_count_disp += 1;
  6881  001186  0100               	movlb	0	; () banked
  6882  001188  4BD7               	infsnz	_bottle_count_disp& (0+255),f,b
  6883  00118A  2BD8               	incf	(_bottle_count_disp+1)& (0+255),f,b
  6884  00118C                     i2l5014:
  6885  00118C  0E1F               	movlw	31
  6886  00118E  1881               	xorwf	3969,w,c	;volatile
  6887  001190  A4D8               	btfss	status,2,c
  6888  001192  D099               	goto	i2l228
  6889  001194  D7FB               	goto	i2l5014
  6890  001196                     i2l5016:
  6891                           
  6892                           ;main.c: 160: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6893  001196  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  6894  00119A  6A64               	clrf	dec_to_hex@num+1,c
  6895  00119C  ECEA  F00D         	call	_dec_to_hex	;wreg free
  6896  0011A0  C063  F073         	movff	?_dec_to_hex,_isr$1250
  6897  0011A4  C064  F074         	movff	?_dec_to_hex+1,_isr$1250+1
  6898                           
  6899                           ;main.c: 160: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  6900  0011A8  C073  F001         	movff	_isr$1250,i2___wmul@multiplier
  6901  0011AC  C074  F002         	movff	_isr$1250+1,i2___wmul@multiplier+1
  6902  0011B0  0E00               	movlw	0
  6903  0011B2  6E04               	movwf	i2___wmul@multiplicand+1,c
  6904  0011B4  0E3C               	movlw	60
  6905  0011B6  6E03               	movwf	i2___wmul@multiplicand,c
  6906  0011B8  ECC4  F017         	call	i2___wmul	;wreg free
  6907  0011BC  C001  F080         	movff	?i2___wmul,??_isr
  6908  0011C0  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6909  0011C4  C07C  F063         	movff	_start_time,dec_to_hex@num
  6910  0011C8  6A64               	clrf	dec_to_hex@num+1,c
  6911  0011CA  ECEA  F00D         	call	_dec_to_hex	;wreg free
  6912  0011CE  5063               	movf	?_dec_to_hex,w,c
  6913  0011D0  0100               	movlb	0	; () banked
  6914  0011D2  2580               	addwf	??_isr& (0+255),w,b
  6915  0011D4  0100               	movlb	0	; () banked
  6916  0011D6  6FD4               	movwf	_stime& (0+255),b
  6917  0011D8  5064               	movf	?_dec_to_hex+1,w,c
  6918  0011DA  0100               	movlb	0	; () banked
  6919  0011DC  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6920  0011DE  0100               	movlb	0	; () banked
  6921  0011E0  6FD5               	movwf	(_stime+1)& (0+255),b
  6922                           
  6923                           ;main.c: 161: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6924  0011E2  C077  F063         	movff	_end_time+1,dec_to_hex@num
  6925  0011E6  6A64               	clrf	dec_to_hex@num+1,c
  6926  0011E8  ECEA  F00D         	call	_dec_to_hex	;wreg free
  6927  0011EC  C063  F073         	movff	?_dec_to_hex,_isr$1250
  6928  0011F0  C064  F074         	movff	?_dec_to_hex+1,_isr$1250+1
  6929                           
  6930                           ;main.c: 161: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  6931  0011F4  C073  F001         	movff	_isr$1250,i2___wmul@multiplier
  6932  0011F8  C074  F002         	movff	_isr$1250+1,i2___wmul@multiplier+1
  6933  0011FC  0E00               	movlw	0
  6934  0011FE  6E04               	movwf	i2___wmul@multiplicand+1,c
  6935  001200  0E3C               	movlw	60
  6936  001202  6E03               	movwf	i2___wmul@multiplicand,c
  6937  001204  ECC4  F017         	call	i2___wmul	;wreg free
  6938  001208  C001  F080         	movff	?i2___wmul,??_isr
  6939  00120C  C002  F081         	movff	?i2___wmul+1,??_isr+1
  6940  001210  C076  F063         	movff	_end_time,dec_to_hex@num
  6941  001214  6A64               	clrf	dec_to_hex@num+1,c
  6942  001216  ECEA  F00D         	call	_dec_to_hex	;wreg free
  6943  00121A  5063               	movf	?_dec_to_hex,w,c
  6944  00121C  0100               	movlb	0	; () banked
  6945  00121E  2580               	addwf	??_isr& (0+255),w,b
  6946  001220  0100               	movlb	0	; () banked
  6947  001222  6FD0               	movwf	_etime& (0+255),b
  6948  001224  5064               	movf	?_dec_to_hex+1,w,c
  6949  001226  0100               	movlb	0	; () banked
  6950  001228  2181               	addwfc	(??_isr+1)& (0+255),w,b
  6951  00122A  0100               	movlb	0	; () banked
  6952  00122C  6FD1               	movwf	(_etime+1)& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;main.c: 162: curr_state = BOTTLETIME;
  6956  00122E  0E06               	movlw	6
  6957  001230  D00C               	goto	L10
  6958  001232                     i2l5022:
  6959                           
  6960                           ;main.c: 166: curr_state = DATETIME;
  6961  001232  0E04               	movlw	4
  6962  001234  D00A               	goto	L10
  6963  001236                     i2l5026:
  6964                           
  6965                           ;main.c: 170: read_time();
  6966  001236  EC33  F015         	call	_read_time	;wreg free
  6967                           
  6968                           ;main.c: 171: end_time[1] = time[1];
  6969  00123A  C0CA  F077         	movff	_time+1,_end_time+1
  6970                           
  6971                           ;main.c: 172: end_time[0] = time[0];
  6972  00123E  C0C9  F076         	movff	_time,_end_time
  6973                           
  6974                           ;main.c: 173: lcdInst(0b00000001);
  6975  001242  0E01               	movlw	1
  6976  001244  EC3A  F018         	call	i2_lcdInst
  6977                           
  6978                           ;main.c: 174: curr_state = OPERATIONEND;
  6979  001248  0E03               	movlw	3
  6980  00124A                     L10:
  6981  00124A  0100               	movlb	0	; () banked
  6982  00124C  6FD6               	movwf	_curr_state& (0+255),b
  6983  00124E  D794               	goto	i2l5008
  6984  001250                     i2l5038:
  6985                           
  6986                           ;main.c: 178: lcdInst(0b00000001);
  6987  001250  0E01               	movlw	1
  6988  001252  EC3A  F018         	call	i2_lcdInst
  6989                           
  6990                           ;main.c: 179: curr_state = EMERGENCYSTOP;
  6991  001256  0E01               	movlw	1
  6992  001258  0100               	movlb	0	; () banked
  6993  00125A  6FD6               	movwf	_curr_state& (0+255),b
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;main.c: 180: bottle_count_disp = -1;
  6997  00125C  0100               	movlb	0	; () banked
  6998  00125E  69D7               	setf	_bottle_count_disp& (0+255),b
  6999  001260  69D8               	setf	(_bottle_count_disp+1)& (0+255),b
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;main.c: 181: TMR0ON = 0;
  7003  001262  9ED5               	bcf	4053,7,c	;volatile
  7004                           
  7005                           ;main.c: 182: break;
  7006  001264  D030               	goto	i2l228
  7007  001266                     i2l5046:
  7008                           
  7009                           ;main.c: 184: servo_rotate0(1);
  7010  001266  0E00               	movlw	0
  7011  001268  6E10               	movwf	servo_rotate0@degree+1,c
  7012  00126A  0E01               	movlw	1
  7013  00126C  6E0F               	movwf	servo_rotate0@degree,c
  7014  00126E  ECED  F012         	call	_servo_rotate0	;wreg free
  7015                           
  7016                           ;main.c: 185: break;
  7017  001272  D029               	goto	i2l228
  7018  001274                     i2l5048:
  7019                           
  7020                           ;main.c: 187: servo_rotate0(180);
  7021  001274  0E00               	movlw	0
  7022  001276  6E10               	movwf	servo_rotate0@degree+1,c
  7023  001278  0EB4               	movlw	180
  7024  00127A  6E0F               	movwf	servo_rotate0@degree,c
  7025  00127C  ECED  F012         	call	_servo_rotate0	;wreg free
  7026                           
  7027                           ;main.c: 188: break;
  7028  001280  D022               	goto	i2l228
  7029  001282                     i2l5050:
  7030                           
  7031                           ;main.c: 190: read_colorsensor();
  7032  001282  EC43  F013         	call	i2_read_colorsensor	;wreg free
  7033                           
  7034                           ;main.c: 192: }
  7035                           
  7036                           ;main.c: 191: break;
  7037  001286  D01F               	goto	i2l228
  7038  001288                     i2l5054:
  7039  001288  5081               	movf	3969,w,c	;volatile
  7040                           
  7041                           ; Switch size 1, requested type "space"
  7042                           ; Number of cases is 10, Range of values is 15 to 239
  7043                           ; switch strategies available:
  7044                           ; Name         Instructions Cycles
  7045                           ; simple_byte           31    16 (average)
  7046                           ;	Chosen strategy is simple_byte
  7047  00128A  0A0F               	xorlw	15	; case 15
  7048  00128C  B4D8               	btfsc	status,2,c
  7049  00128E  D763               	goto	i2l229
  7050  001290  0A10               	xorlw	16	; case 31
  7051  001292  B4D8               	btfsc	status,2,c
  7052  001294  D775               	goto	i2l5010
  7053  001296  0A30               	xorlw	48	; case 47
  7054  001298  B4D8               	btfsc	status,2,c
  7055  00129A  D77D               	goto	i2l5016
  7056  00129C  0A10               	xorlw	16	; case 63
  7057  00129E  B4D8               	btfsc	status,2,c
  7058  0012A0  D7C8               	goto	i2l5022
  7059  0012A2  0A70               	xorlw	112	; case 79
  7060  0012A4  B4D8               	btfsc	status,2,c
  7061  0012A6  D7C7               	goto	i2l5026
  7062  0012A8  0A30               	xorlw	48	; case 127
  7063  0012AA  B4D8               	btfsc	status,2,c
  7064  0012AC  D7DC               	goto	i2l5046
  7065  0012AE  0AD0               	xorlw	208	; case 175
  7066  0012B0  B4D8               	btfsc	status,2,c
  7067  0012B2  D7E7               	goto	i2l5050
  7068  0012B4  0A10               	xorlw	16	; case 191
  7069  0012B6  B4D8               	btfsc	status,2,c
  7070  0012B8  D7DD               	goto	i2l5048
  7071  0012BA  0A70               	xorlw	112	; case 207
  7072  0012BC  B4D8               	btfsc	status,2,c
  7073  0012BE  D7C8               	goto	i2l5038
  7074  0012C0  0A20               	xorlw	32	; case 239
  7075  0012C2  B4D8               	btfsc	status,2,c
  7076  0012C4  D73F               	goto	i2l4994
  7077  0012C6                     i2l228:
  7078                           
  7079                           ;main.c: 193: INT1IF = 0;
  7080  0012C6  90F0               	bcf	intcon3,0,c	;volatile
  7081                           
  7082                           ;main.c: 194: }
  7083  0012C8  D02E               	goto	i2l249
  7084  0012CA                     i2l225:
  7085                           
  7086                           ;main.c: 195: else if (TMR0IF) {
  7087  0012CA  A4F2               	btfss	intcon,2,c	;volatile
  7088  0012CC  D012               	goto	i2l5072
  7089                           
  7090                           ;main.c: 196: TMR0ON = 0;
  7091  0012CE  9ED5               	bcf	4053,7,c	;volatile
  7092                           
  7093                           ;main.c: 197: read_time();
  7094  0012D0  EC33  F015         	call	_read_time	;wreg free
  7095                           
  7096                           ;main.c: 198: end_time[1] = time[1];
  7097  0012D4  C0CA  F077         	movff	_time+1,_end_time+1
  7098                           
  7099                           ;main.c: 199: end_time[0] = time[0];
  7100  0012D8  C0C9  F076         	movff	_time,_end_time
  7101                           
  7102                           ;main.c: 200: lcdInst(0b00000001);
  7103  0012DC  0E01               	movlw	1
  7104  0012DE  EC3A  F018         	call	i2_lcdInst
  7105                           
  7106                           ;main.c: 201: curr_state = OPERATIONEND;
  7107  0012E2  0E03               	movlw	3
  7108  0012E4  0100               	movlb	0	; () banked
  7109  0012E6  6FD6               	movwf	_curr_state& (0+255),b
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;main.c: 202: bottle_count_disp = -1;
  7113  0012E8  0100               	movlb	0	; () banked
  7114  0012EA  69D7               	setf	_bottle_count_disp& (0+255),b
  7115  0012EC  69D8               	setf	(_bottle_count_disp+1)& (0+255),b
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;main.c: 203: TMR0IF = 0;
  7119  0012EE  94F2               	bcf	intcon,2,c	;volatile
  7120                           
  7121                           ;main.c: 204: }
  7122  0012F0  D01A               	goto	i2l249
  7123  0012F2                     i2l5072:
  7124                           
  7125                           ;main.c: 207: lcdInst(0b10000000);
  7126  0012F2  0E80               	movlw	128
  7127  0012F4  EC3A  F018         	call	i2_lcdInst
  7128                           
  7129                           ;main.c: 208: printf("bad interrupt");
  7130  0012F8  0EDF               	movlw	low STR_1
  7131  0012FA  6E0D               	movwf	i2printf@f,c
  7132  0012FC  0EFF               	movlw	high STR_1
  7133  0012FE  6E0E               	movwf	i2printf@f+1,c
  7134  001300  ECCD  F004         	call	i2_printf	;wreg free
  7135                           
  7136                           ;main.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  7137  001304  0E00               	movlw	0
  7138  001306  6E75               	movwf	isr@i,c
  7139  001308                     i2l5078:
  7140  001308  0E63               	movlw	99
  7141  00130A  6475               	cpfsgt	isr@i,c
  7142  00130C  D001               	goto	i2l5082
  7143  00130E  D7F1               	goto	i2l5072
  7144  001310                     i2l5082:
  7145  001310  0E21               	movlw	33
  7146  001312  0100               	movlb	0	; () banked
  7147  001314  6F80               	movwf	??_isr& (0+255),b
  7148  001316  0E76               	movlw	118
  7149  001318                     i2u567_47:
  7150  001318  2EE8               	decfsz	wreg,f,c
  7151  00131A  D7FE               	bra	i2u567_47
  7152  00131C  2F80               	decfsz	??_isr& (0+255),f,b
  7153  00131E  D7FC               	bra	i2u567_47
  7154  001320  F000               	nop	
  7155  001322  2A75               	incf	isr@i,f,c
  7156  001324  D7F1               	goto	i2l5078
  7157  001326                     i2l249:
  7158  001326  C08F  FFF5         	movff	??_isr+15,tablat
  7159  00132A  C08E  FFF8         	movff	??_isr+14,tblptru
  7160  00132E  C08D  FFF7         	movff	??_isr+13,tblptrh
  7161  001332  C08C  FFF6         	movff	??_isr+12,tblptrl
  7162  001336  C08B  FFF4         	movff	??_isr+11,prodh
  7163  00133A  C08A  FFF3         	movff	??_isr+10,prodl
  7164  00133E  C089  FFDA         	movff	??_isr+9,fsr2h
  7165  001342  C088  FFD9         	movff	??_isr+8,fsr2l
  7166  001346  C087  FFE2         	movff	??_isr+7,fsr1h
  7167  00134A  C086  FFE1         	movff	??_isr+6,fsr1l
  7168  00134E  C085  FFEA         	movff	??_isr+5,fsr0h
  7169  001352  C084  FFE9         	movff	??_isr+4,fsr0l
  7170  001356  C083  FFFB         	movff	??_isr+3,pclatu
  7171  00135A  C082  FFFA         	movff	??_isr+2,pclath
  7172  00135E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7173  001360  0011               	retfie		f
  7174  001362                     __end_of_isr:
  7175                           	opt stack 0
  7176                           pclatu	equ	0xFFB
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           intcon2	equ	0xFF1
  7186                           intcon3	equ	0xFF0
  7187                           postinc0	equ	0xFEE
  7188                           fsr0h	equ	0xFEA
  7189                           fsr0l	equ	0xFE9
  7190                           wreg	equ	0xFE8
  7191                           fsr1h	equ	0xFE2
  7192                           fsr1l	equ	0xFE1
  7193                           indf2	equ	0xFDF
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function i2_read_colorsensor *****************
  7201 ;; Defined at:
  7202 ;;		line 417 in file "main.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  read_colorse    2   12[COMRAM] short 
  7207 ;;  read_colorse    2    9[COMRAM] unsigned short 
  7208 ;;  read_colorse    2    7[COMRAM] unsigned short 
  7209 ;;  read_colorse    2    5[COMRAM] unsigned short 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;                  1    wreg      void 
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;Total ram usage:       11 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    2
  7226 ;; This function calls:
  7227 ;;		i2_I2C_Master_Read
  7228 ;;		i2_I2C_Master_Start
  7229 ;;		i2_I2C_Master_Stop
  7230 ;;		i2_I2C_Master_Write
  7231 ;; This function is called by:
  7232 ;;		_isr
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text28
  7237  002686                     __ptext28:
  7238                           	opt stack 0
  7239  002686                     i2_read_colorsensor:
  7240                           	opt stack 23
  7241                           
  7242                           ;main.c: 418: unsigned short color_low;
  7243                           ;main.c: 419: unsigned short color_high;
  7244                           ;main.c: 420: unsigned short color_comb;
  7245                           ;main.c: 421: short i;
  7246                           ;main.c: 424: I2C_Master_Start();
  7247                           
  7248                           ;incstack = 0
  7249  002686  EC56  F018         	call	i2_I2C_Master_Start	;wreg free
  7250                           
  7251                           ;main.c: 425: I2C_Master_Write(0b01010010);
  7252  00268A  0E00               	movlw	0
  7253  00268C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7254  00268E  0E52               	movlw	82
  7255  002690  6E02               	movwf	i2I2C_Master_Write@d,c
  7256  002692  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  7257                           
  7258                           ;main.c: 426: I2C_Master_Write(0b10110100);
  7259  002696  0E00               	movlw	0
  7260  002698  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7261  00269A  0EB4               	movlw	180
  7262  00269C  6E02               	movwf	i2I2C_Master_Write@d,c
  7263  00269E  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  7264                           
  7265                           ;main.c: 427: I2C_Master_Start();
  7266  0026A2  EC56  F018         	call	i2_I2C_Master_Start	;wreg free
  7267                           
  7268                           ;main.c: 428: I2C_Master_Write(0b01010011);
  7269  0026A6  0E00               	movlw	0
  7270  0026A8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7271  0026AA  0E53               	movlw	83
  7272  0026AC  6E02               	movwf	i2I2C_Master_Write@d,c
  7273  0026AE  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  7274                           
  7275                           ;main.c: 429: for(i=0; i<4; i++){
  7276  0026B2  0E00               	movlw	0
  7277  0026B4  6E0E               	movwf	i2read_colorsensor@i+1,c
  7278  0026B6  0E00               	movlw	0
  7279  0026B8  6E0D               	movwf	i2read_colorsensor@i,c
  7280  0026BA                     i2l4596:
  7281  0026BA  BE0E               	btfsc	i2read_colorsensor@i+1,7,c
  7282  0026BC  D006               	goto	i2l4600
  7283  0026BE  500E               	movf	i2read_colorsensor@i+1,w,c
  7284  0026C0  E134               	bnz	i2l4618
  7285  0026C2  0E04               	movlw	4
  7286  0026C4  5C0D               	subwf	i2read_colorsensor@i,w,c
  7287  0026C6  B0D8               	btfsc	status,0,c
  7288  0026C8  D030               	goto	i2l4618
  7289  0026CA                     i2l4600:
  7290                           
  7291                           ;main.c: 430: color_low = I2C_Master_Read(1);
  7292  0026CA  0E01               	movlw	1
  7293  0026CC  ECB1  F017         	call	i2_I2C_Master_Read
  7294  0026D0  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7295  0026D2  5004               	movf	??i2_read_colorsensor,w,c
  7296  0026D4  6E06               	movwf	i2read_colorsensor@color_low,c
  7297  0026D6  6A07               	clrf	i2read_colorsensor@color_low+1,c
  7298                           
  7299                           ;main.c: 431: color_high = I2C_Master_Read(1);
  7300  0026D8  0E01               	movlw	1
  7301  0026DA  ECB1  F017         	call	i2_I2C_Master_Read
  7302  0026DE  6E04               	movwf	??i2_read_colorsensor& (0+255),c
  7303  0026E0  5004               	movf	??i2_read_colorsensor,w,c
  7304  0026E2  6E08               	movwf	i2read_colorsensor@color_high,c
  7305  0026E4  6A09               	clrf	i2read_colorsensor@color_high+1,c
  7306                           
  7307                           ;main.c: 432: color_comb = (color_high << 8)||(color_low & 0xFF);
  7308  0026E6  0E01               	movlw	1
  7309  0026E8  6E0C               	movwf	i2_read_colorsensor$450,c
  7310  0026EA  5008               	movf	i2read_colorsensor@color_high,w,c
  7311  0026EC  6E05               	movwf	(??i2_read_colorsensor+1)& (0+255),c
  7312  0026EE  6A04               	clrf	??i2_read_colorsensor& (0+255),c
  7313  0026F0  5004               	movf	??i2_read_colorsensor,w,c
  7314  0026F2  1005               	iorwf	??i2_read_colorsensor+1,w,c
  7315  0026F4  A4D8               	btfss	status,2,c
  7316  0026F6  D006               	goto	i2l4610
  7317  0026F8  5006               	movf	i2read_colorsensor@color_low,w,c
  7318  0026FA  0900               	iorlw	0
  7319  0026FC  A4D8               	btfss	status,2,c
  7320  0026FE  D002               	goto	i2l4610
  7321  002700  0E00               	movlw	0
  7322  002702  6E0C               	movwf	i2_read_colorsensor$450,c
  7323  002704                     i2l4610:
  7324  002704  C00C  F00A         	movff	i2_read_colorsensor$450,i2read_colorsensor@color_comb
  7325  002708  6A0B               	clrf	i2read_colorsensor@color_comb+1,c
  7326                           
  7327                           ;main.c: 433: color[i] = color_comb;
  7328  00270A  90D8               	bcf	status,0,c
  7329  00270C  340D               	rlcf	i2read_colorsensor@i,w,c
  7330  00270E  6ED9               	movwf	fsr2l,c
  7331  002710  340E               	rlcf	i2read_colorsensor@i+1,w,c
  7332  002712  6EDA               	movwf	fsr2h,c
  7333  002714  0EC1               	movlw	low _color
  7334  002716  26D9               	addwf	fsr2l,f,c
  7335  002718  0E00               	movlw	high _color
  7336  00271A  22DA               	addwfc	fsr2h,f,c
  7337  00271C  C00A  FFDE         	movff	i2read_colorsensor@color_comb,postinc2
  7338  002720  C00B  FFDD         	movff	i2read_colorsensor@color_comb+1,postdec2
  7339  002724  4A0D               	infsnz	i2read_colorsensor@i,f,c
  7340  002726  2A0E               	incf	i2read_colorsensor@i+1,f,c
  7341  002728  D7C8               	goto	i2l4596
  7342  00272A                     i2l4618:
  7343                           
  7344                           ;main.c: 434: }
  7345                           ;main.c: 435: I2C_Master_Stop();
  7346  00272A  EC52  F018         	call	i2_I2C_Master_Stop	;wreg free
  7347  00272E  0012               	return	
  7348  002730                     __end_ofi2_read_colorsensor:
  7349                           	opt stack 0
  7350                           pclatu	equ	0xFFB
  7351                           pclath	equ	0xFFA
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           intcon	equ	0xFF2
  7359                           intcon2	equ	0xFF1
  7360                           intcon3	equ	0xFF0
  7361                           postinc0	equ	0xFEE
  7362                           fsr0h	equ	0xFEA
  7363                           fsr0l	equ	0xFE9
  7364                           wreg	equ	0xFE8
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           fsr2h	equ	0xFDA
  7371                           fsr2l	equ	0xFD9
  7372                           status	equ	0xFD8
  7373                           
  7374 ;; *************** function i2_printf *****************
  7375 ;; Defined at:
  7376 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  f               2   12[COMRAM] PTR const unsigned char 
  7379 ;;		 -> STR_24(15), STR_23(16), STR_22(25), STR_21(24), 
  7380 ;;		 -> STR_20(22), STR_19(23), STR_18(18), STR_17(23), 
  7381 ;;		 -> STR_16(10), STR_15(17), STR_14(17), STR_13(17), 
  7382 ;;		 -> STR_12(17), STR_11(17), STR_10(17), STR_9(17), 
  7383 ;;		 -> STR_8(17), STR_7(17), STR_6(17), STR_5(23), 
  7384 ;;		 -> STR_4(23), STR_3(8), STR_2(17), STR_1(14), 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  printf          4    0        struct .
  7387 ;;  printf          2   37[COMRAM] unsigned short 
  7388 ;;  printf          2   34[COMRAM] int 
  7389 ;;  printf          2   31[COMRAM] unsigned int 
  7390 ;;  printf          2   29[COMRAM] PTR void [1]
  7391 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7392 ;;  printf          2   27[COMRAM] unsigned int 
  7393 ;;  printf          2   19[COMRAM] PTR const unsigned char 
  7394 ;;		 -> printf@c(1), 
  7395 ;;  printf          1   36[COMRAM] char 
  7396 ;;  printf          1   33[COMRAM] char 
  7397 ;;  printf          1   18[COMRAM] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  2   12[COMRAM] int 
  7400 ;; Registers used:
  7401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;Total ram usage:       27 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    2
  7414 ;; This function calls:
  7415 ;;		i2___lwdiv
  7416 ;;		i2___lwmod
  7417 ;;		i2___wmul
  7418 ;;		i2_isdigit
  7419 ;;		i2_putch
  7420 ;; This function is called by:
  7421 ;;		_isr
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text29
  7426  00099A                     __ptext29:
  7427                           	opt stack 0
  7428  00099A                     i2_printf:
  7429                           	opt stack 23
  7430                           
  7431                           ;doprnt.c: 466: va_list ap;
  7432                           ;doprnt.c: 499: signed char c;
  7433                           ;doprnt.c: 501: int width;
  7434                           ;doprnt.c: 506: signed char prec;
  7435                           ;doprnt.c: 508: unsigned short flag;
  7436                           ;doprnt.c: 523: union {
  7437                           ;doprnt.c: 524: unsigned long vd;
  7438                           ;doprnt.c: 525: double integ;
  7439                           ;doprnt.c: 526: } tmpval;
  7440                           ;doprnt.c: 528: unsigned int val;
  7441                           ;doprnt.c: 529: unsigned len;
  7442                           ;doprnt.c: 530: const char * cp;
  7443                           ;doprnt.c: 533: *ap = __va_start();
  7444                           
  7445                           ;incstack = 0
  7446  00099A  0E0F               	movlw	low (?i2_printf+2)
  7447  00099C  6E1E               	movwf	i2printf@ap,c
  7448  00099E  0E00               	movlw	high (?i2_printf+2)
  7449  0009A0  6E1F               	movwf	i2printf@ap+1,c
  7450                           
  7451                           ;doprnt.c: 536: while(c = *f++) {
  7452  0009A2  D3A3               	goto	i2l4930
  7453  0009A4                     i2l4624:
  7454                           
  7455                           ;doprnt.c: 538: if(c != '%')
  7456  0009A4  0E25               	movlw	37
  7457  0009A6  1825               	xorwf	i2printf@c,w,c
  7458  0009A8  B4D8               	btfsc	status,2,c
  7459  0009AA  D004               	goto	i2l4628
  7460                           
  7461                           ;doprnt.c: 540: {
  7462                           ;doprnt.c: 541: (putch(c) );
  7463  0009AC  5025               	movf	i2printf@c,w,c
  7464  0009AE  EC34  F018         	call	i2_putch
  7465                           
  7466                           ;doprnt.c: 542: continue;
  7467  0009B2  D39B               	goto	i2l4930
  7468  0009B4                     i2l4628:
  7469                           
  7470                           ;doprnt.c: 543: }
  7471                           ;doprnt.c: 546: width = 0;
  7472  0009B4  0E00               	movlw	0
  7473  0009B6  6E24               	movwf	i2printf@width+1,c
  7474  0009B8  0E00               	movlw	0
  7475  0009BA  6E23               	movwf	i2printf@width,c
  7476                           
  7477                           ;doprnt.c: 548: flag = 0;
  7478  0009BC  0E00               	movlw	0
  7479  0009BE  6E27               	movwf	i2printf@flag+1,c
  7480  0009C0  0E00               	movlw	0
  7481  0009C2  6E26               	movwf	i2printf@flag,c
  7482                           
  7483                           ;doprnt.c: 551: switch(*f) {
  7484                           
  7485                           ;doprnt.c: 550: for(;;) {
  7486  0009C4  D009               	goto	i2l4640
  7487  0009C6                     i2l4630:
  7488                           
  7489                           ;doprnt.c: 554: flag |= 0x08;
  7490  0009C6  8626               	bsf	i2printf@flag,3,c
  7491  0009C8  D005               	goto	L13
  7492  0009CA                     i2l4632:
  7493                           
  7494                           ;doprnt.c: 561: flag |= 0x01;
  7495  0009CA  8026               	bsf	i2printf@flag,0,c
  7496  0009CC  D003               	goto	L13
  7497  0009CE                     i2l4634:
  7498                           
  7499                           ;doprnt.c: 574: flag |= 0x800;
  7500  0009CE  8627               	bsf	i2printf@flag+1,3,c
  7501  0009D0  D001               	goto	L13
  7502  0009D2                     i2l4636:
  7503                           
  7504                           ;doprnt.c: 580: flag |= 0x04;
  7505  0009D2  8426               	bsf	i2printf@flag,2,c
  7506  0009D4                     L13:
  7507                           
  7508                           ;doprnt.c: 581: f++;
  7509  0009D4  4A0D               	infsnz	i2printf@f,f,c
  7510  0009D6  2A0E               	incf	i2printf@f+1,f,c
  7511  0009D8                     i2l4640:
  7512  0009D8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7513  0009DC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7514  0009E0                     	if	0	;tblptru may be non-zero
  7515  0009E0                     	endif
  7516  0009E0                     	if	0	;tblptru may be non-zero
  7517  0009E0                     	endif
  7518  0009E0  0008               	tblrd		*
  7519  0009E2  50F5               	movf	tablat,w,c
  7520                           
  7521                           ; Switch size 1, requested type "space"
  7522                           ; Number of cases is 4, Range of values is 32 to 48
  7523                           ; switch strategies available:
  7524                           ; Name         Instructions Cycles
  7525                           ; simple_byte           13     7 (average)
  7526                           ;	Chosen strategy is simple_byte
  7527  0009E4  0A20               	xorlw	32	; case 32
  7528  0009E6  B4D8               	btfsc	status,2,c
  7529  0009E8  D7F0               	goto	i2l4632
  7530  0009EA  0A03               	xorlw	3	; case 35
  7531  0009EC  B4D8               	btfsc	status,2,c
  7532  0009EE  D7EF               	goto	i2l4634
  7533  0009F0  0A0E               	xorlw	14	; case 45
  7534  0009F2  B4D8               	btfsc	status,2,c
  7535  0009F4  D7E8               	goto	i2l4630
  7536  0009F6  0A1D               	xorlw	29	; case 48
  7537  0009F8  B4D8               	btfsc	status,2,c
  7538  0009FA  D7EB               	goto	i2l4636
  7539                           
  7540                           ;doprnt.c: 593: if(flag & 0x08)
  7541                           
  7542                           ;doprnt.c: 586: }
  7543                           
  7544                           ;doprnt.c: 585: break;
  7545  0009FC  B626               	btfsc	i2printf@flag,3,c
  7546                           
  7547                           ;doprnt.c: 594: flag &= ~0x04;
  7548  0009FE  9426               	bcf	i2printf@flag,2,c
  7549                           
  7550                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7551  000A00  C00D  FFF6         	movff	i2printf@f,tblptrl
  7552  000A04  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7553  000A08                     	if	0	;tblptru may be non-zero
  7554  000A08                     	endif
  7555  000A08                     	if	0	;tblptru may be non-zero
  7556  000A08                     	endif
  7557  000A08  0008               	tblrd		*
  7558  000A0A  50F5               	movf	tablat,w,c
  7559  000A0C  ECE9  F017         	call	i2_isdigit
  7560  000A10  A0D8               	btfss	status,0,c
  7561  000A12  D033               	goto	i2l4656
  7562                           
  7563                           ;doprnt.c: 598: width = 0;
  7564  000A14  0E00               	movlw	0
  7565  000A16  6E24               	movwf	i2printf@width+1,c
  7566  000A18  0E00               	movlw	0
  7567  000A1A  6E23               	movwf	i2printf@width,c
  7568  000A1C                     i2l4648:
  7569                           
  7570                           ;doprnt.c: 600: width *= 10;
  7571  000A1C  C023  F001         	movff	i2printf@width,i2___wmul@multiplier
  7572  000A20  C024  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  7573  000A24  0E00               	movlw	0
  7574  000A26  6E04               	movwf	i2___wmul@multiplicand+1,c
  7575  000A28  0E0A               	movlw	10
  7576  000A2A  6E03               	movwf	i2___wmul@multiplicand,c
  7577  000A2C  ECC4  F017         	call	i2___wmul	;wreg free
  7578  000A30  C001  F023         	movff	?i2___wmul,i2printf@width
  7579  000A34  C002  F024         	movff	?i2___wmul+1,i2printf@width+1
  7580                           
  7581                           ;doprnt.c: 601: width += *f++ - '0';
  7582  000A38  0ED0               	movlw	208
  7583  000A3A  6E0F               	movwf	??i2_printf& (0+255),c
  7584  000A3C  0EFF               	movlw	255
  7585  000A3E  6E10               	movwf	(??i2_printf+1)& (0+255),c
  7586  000A40  C00D  FFF6         	movff	i2printf@f,tblptrl
  7587  000A44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7588  000A48                     	if	0	;tblptru may be non-zero
  7589  000A48                     	endif
  7590  000A48                     	if	0	;tblptru may be non-zero
  7591  000A48                     	endif
  7592  000A48  0008               	tblrd		*
  7593  000A4A  50F5               	movf	tablat,w,c
  7594  000A4C  6E11               	movwf	(??i2_printf+2)& (0+255),c
  7595  000A4E  6A12               	clrf	(??i2_printf+3)& (0+255),c
  7596  000A50  500F               	movf	??i2_printf,w,c
  7597  000A52  2611               	addwf	??i2_printf+2,f,c
  7598  000A54  5010               	movf	??i2_printf+1,w,c
  7599  000A56  2212               	addwfc	??i2_printf+3,f,c
  7600  000A58  5011               	movf	??i2_printf+2,w,c
  7601  000A5A  2623               	addwf	i2printf@width,f,c
  7602  000A5C  5012               	movf	??i2_printf+3,w,c
  7603  000A5E  2224               	addwfc	i2printf@width+1,f,c
  7604  000A60  4A0D               	infsnz	i2printf@f,f,c
  7605  000A62  2A0E               	incf	i2printf@f+1,f,c
  7606                           
  7607                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7608  000A64  C00D  FFF6         	movff	i2printf@f,tblptrl
  7609  000A68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7610  000A6C                     	if	0	;tblptru may be non-zero
  7611  000A6C                     	endif
  7612  000A6C                     	if	0	;tblptru may be non-zero
  7613  000A6C                     	endif
  7614  000A6C  0008               	tblrd		*
  7615  000A6E  50F5               	movf	tablat,w,c
  7616  000A70  ECE9  F017         	call	i2_isdigit
  7617  000A74  A0D8               	btfss	status,0,c
  7618  000A76  D018               	goto	i2l4664
  7619  000A78  D7D1               	goto	i2l4648
  7620  000A7A                     i2l4656:
  7621  000A7A  C00D  FFF6         	movff	i2printf@f,tblptrl
  7622  000A7E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7623  000A82                     	if	0	;tblptru may be non-zero
  7624  000A82                     	endif
  7625  000A82                     	if	0	;tblptru may be non-zero
  7626  000A82                     	endif
  7627  000A82  0008               	tblrd		*
  7628  000A84  50F5               	movf	tablat,w,c
  7629  000A86  0A2A               	xorlw	42
  7630  000A88  A4D8               	btfss	status,2,c
  7631  000A8A  D00E               	goto	i2l4664
  7632                           
  7633                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  7634  000A8C  C01E  FFD9         	movff	i2printf@ap,fsr2l
  7635  000A90  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  7636  000A94  CFDE F023          	movff	postinc2,i2printf@width
  7637  000A98  CFDD F024          	movff	postdec2,i2printf@width+1
  7638  000A9C  0E02               	movlw	2
  7639  000A9E  261E               	addwf	i2printf@ap,f,c
  7640  000AA0  0E00               	movlw	0
  7641  000AA2  221F               	addwfc	i2printf@ap+1,f,c
  7642                           
  7643                           ;doprnt.c: 606: f++;
  7644  000AA4  4A0D               	infsnz	i2printf@f,f,c
  7645  000AA6  2A0E               	incf	i2printf@f+1,f,c
  7646  000AA8                     i2l4664:
  7647                           
  7648                           ;doprnt.c: 608: }
  7649                           ;doprnt.c: 611: if(*f == '.') {
  7650  000AA8  C00D  FFF6         	movff	i2printf@f,tblptrl
  7651  000AAC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7652  000AB0                     	if	0	;tblptru may be non-zero
  7653  000AB0                     	endif
  7654  000AB0                     	if	0	;tblptru may be non-zero
  7655  000AB0                     	endif
  7656  000AB0  0008               	tblrd		*
  7657  000AB2  50F5               	movf	tablat,w,c
  7658  000AB4  0A2E               	xorlw	46
  7659  000AB6  A4D8               	btfss	status,2,c
  7660  000AB8  D036               	goto	i2l4684
  7661                           
  7662                           ;doprnt.c: 612: flag |= 0x4000;
  7663  000ABA  8C27               	bsf	i2printf@flag+1,6,c
  7664                           
  7665                           ;doprnt.c: 613: f++;
  7666  000ABC  4A0D               	infsnz	i2printf@f,f,c
  7667  000ABE  2A0E               	incf	i2printf@f+1,f,c
  7668                           
  7669                           ;doprnt.c: 615: if(*f == '*') {
  7670  000AC0  C00D  FFF6         	movff	i2printf@f,tblptrl
  7671  000AC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7672  000AC8                     	if	0	;tblptru may be non-zero
  7673  000AC8                     	endif
  7674  000AC8                     	if	0	;tblptru may be non-zero
  7675  000AC8                     	endif
  7676  000AC8  0008               	tblrd		*
  7677  000ACA  50F5               	movf	tablat,w,c
  7678  000ACC  0A2A               	xorlw	42
  7679  000ACE  A4D8               	btfss	status,2,c
  7680  000AD0  D00D               	goto	i2l4676
  7681                           
  7682                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  7683  000AD2  C01E  FFD9         	movff	i2printf@ap,fsr2l
  7684  000AD6  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  7685  000ADA  50DF               	movf	indf2,w,c
  7686  000ADC  6E22               	movwf	i2printf@prec,c
  7687  000ADE  0E02               	movlw	2
  7688  000AE0  261E               	addwf	i2printf@ap,f,c
  7689  000AE2  0E00               	movlw	0
  7690  000AE4  221F               	addwfc	i2printf@ap+1,f,c
  7691                           
  7692                           ;doprnt.c: 617: f++;
  7693  000AE6  4A0D               	infsnz	i2printf@f,f,c
  7694  000AE8  2A0E               	incf	i2printf@f+1,f,c
  7695                           
  7696                           ;doprnt.c: 618: } else
  7697  000AEA  D08C               	goto	i2l4734
  7698  000AEC                     i2l4676:
  7699                           
  7700                           ;doprnt.c: 620: {
  7701                           ;doprnt.c: 621: prec = 0;
  7702  000AEC  0E00               	movlw	0
  7703  000AEE  6E22               	movwf	i2printf@prec,c
  7704                           
  7705                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7706  000AF0  D00F               	goto	i2l4682
  7707  000AF2                     i2l4678:
  7708                           
  7709                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7710  000AF2  C00D  FFF6         	movff	i2printf@f,tblptrl
  7711  000AF6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7712  000AFA                     	if	0	;tblptru may be non-zero
  7713  000AFA                     	endif
  7714  000AFA                     	if	0	;tblptru may be non-zero
  7715  000AFA                     	endif
  7716  000AFA  0008               	tblrd		*
  7717  000AFC  CFF5 F00F          	movff	tablat,??i2_printf
  7718  000B00  5022               	movf	i2printf@prec,w,c
  7719  000B02  0D0A               	mullw	10
  7720  000B04  50F3               	movf	prodl,w,c
  7721  000B06  240F               	addwf	??i2_printf,w,c
  7722  000B08  0FD0               	addlw	208
  7723  000B0A  6E22               	movwf	i2printf@prec,c
  7724  000B0C  4A0D               	infsnz	i2printf@f,f,c
  7725  000B0E  2A0E               	incf	i2printf@f+1,f,c
  7726  000B10                     i2l4682:
  7727  000B10  C00D  FFF6         	movff	i2printf@f,tblptrl
  7728  000B14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7729  000B18                     	if	0	;tblptru may be non-zero
  7730  000B18                     	endif
  7731  000B18                     	if	0	;tblptru may be non-zero
  7732  000B18                     	endif
  7733  000B18  0008               	tblrd		*
  7734  000B1A  50F5               	movf	tablat,w,c
  7735  000B1C  ECE9  F017         	call	i2_isdigit
  7736  000B20  A0D8               	btfss	status,0,c
  7737  000B22  D070               	goto	i2l4734
  7738  000B24  D7E6               	goto	i2l4678
  7739  000B26                     i2l4684:
  7740                           
  7741                           ;doprnt.c: 626: prec = 0;
  7742  000B26  0E00               	movlw	0
  7743  000B28  6E22               	movwf	i2printf@prec,c
  7744                           
  7745                           ;doprnt.c: 630: }
  7746                           ;doprnt.c: 635: switch(c = *f++) {
  7747  000B2A  D06C               	goto	i2l4734
  7748  000B2C                     i2l4686:
  7749                           
  7750                           ;doprnt.c: 691: flag |= 0x40;
  7751  000B2C  8C26               	bsf	i2printf@flag,6,c
  7752                           
  7753                           ;doprnt.c: 698: case 'i':
  7754                           ;doprnt.c: 699: break;
  7755                           
  7756                           ;doprnt.c: 697: case 'd':
  7757                           
  7758                           ;doprnt.c: 693: break;
  7759  000B2E  D08D               	goto	i2l4736
  7760  000B30                     i2l4688:
  7761                           
  7762                           ;doprnt.c: 714: flag |= 0x20;
  7763  000B30  8A26               	bsf	i2printf@flag,5,c
  7764  000B32                     i2l397:
  7765                           
  7766                           ;doprnt.c: 721: flag |= 0x80;
  7767  000B32  8E26               	bsf	i2printf@flag,7,c
  7768                           
  7769                           ;doprnt.c: 723: break;
  7770  000B34  D08A               	goto	i2l4736
  7771  000B36                     i2l4690:
  7772                           
  7773                           ;doprnt.c: 753: if(prec && prec < len)
  7774  000B36  5022               	movf	i2printf@prec,w,c
  7775  000B38  B4D8               	btfsc	status,2,c
  7776  000B3A  D010               	goto	i2l4696
  7777  000B3C  C022  F00F         	movff	i2printf@prec,??i2_printf
  7778  000B40  6A10               	clrf	(??i2_printf+1)& (0+255),c
  7779  000B42  BE0F               	btfsc	??i2_printf& (0+255),7,c
  7780  000B44  0610               	decf	(??i2_printf+1)& (0+255),f,c
  7781  000B46  501C               	movf	i2printf@len,w,c
  7782  000B48  5C0F               	subwf	??i2_printf,w,c
  7783  000B4A  501D               	movf	i2printf@len+1,w,c
  7784  000B4C  5810               	subwfb	??i2_printf+1,w,c
  7785  000B4E  B0D8               	btfsc	status,0,c
  7786  000B50  D005               	goto	i2l4696
  7787                           
  7788                           ;doprnt.c: 754: len = prec;
  7789  000B52  5022               	movf	i2printf@prec,w,c
  7790  000B54  6E1C               	movwf	i2printf@len,c
  7791  000B56  6A1D               	clrf	i2printf@len+1,c
  7792  000B58  BE1C               	btfsc	i2printf@len,7,c
  7793  000B5A  061D               	decf	i2printf@len+1,f,c
  7794  000B5C                     i2l4696:
  7795                           
  7796                           ;doprnt.c: 757: if(width > len)
  7797  000B5C  5023               	movf	i2printf@width,w,c
  7798  000B5E  5C1C               	subwf	i2printf@len,w,c
  7799  000B60  5024               	movf	i2printf@width+1,w,c
  7800  000B62  581D               	subwfb	i2printf@len+1,w,c
  7801  000B64  B0D8               	btfsc	status,0,c
  7802  000B66  D005               	goto	i2l4700
  7803                           
  7804                           ;doprnt.c: 758: width -= len;
  7805  000B68  501C               	movf	i2printf@len,w,c
  7806  000B6A  5E23               	subwf	i2printf@width,f,c
  7807  000B6C  501D               	movf	i2printf@len+1,w,c
  7808  000B6E  5A24               	subwfb	i2printf@width+1,f,c
  7809  000B70  D004               	goto	i2l4702
  7810  000B72                     i2l4700:
  7811                           
  7812                           ;doprnt.c: 759: else
  7813                           ;doprnt.c: 760: width = 0;
  7814  000B72  0E00               	movlw	0
  7815  000B74  6E24               	movwf	i2printf@width+1,c
  7816  000B76  0E00               	movlw	0
  7817  000B78  6E23               	movwf	i2printf@width,c
  7818  000B7A                     i2l4702:
  7819                           
  7820                           ;doprnt.c: 762: if(!(flag & 0x08))
  7821  000B7A  A626               	btfss	i2printf@flag,3,c
  7822  000B7C  D004               	goto	i2l4708
  7823  000B7E  D015               	goto	i2l4714
  7824  000B80                     i2l4706:
  7825                           
  7826                           ;doprnt.c: 765: (putch(' ') );
  7827  000B80  0E20               	movlw	32
  7828  000B82  EC34  F018         	call	i2_putch
  7829  000B86                     i2l4708:
  7830  000B86  0623               	decf	i2printf@width,f,c
  7831  000B88  A0D8               	btfss	status,0,c
  7832  000B8A  0624               	decf	i2printf@width+1,f,c
  7833  000B8C  2823               	incf	i2printf@width,w,c
  7834  000B8E  E1F8               	bnz	i2l4706
  7835  000B90  2824               	incf	i2printf@width+1,w,c
  7836  000B92  B4D8               	btfsc	status,2,c
  7837  000B94  D00A               	goto	i2l4714
  7838  000B96  D7F4               	goto	i2l4706
  7839  000B98                     i2l4710:
  7840                           
  7841                           ;doprnt.c: 768: (putch(*cp++) );
  7842  000B98  C014  FFD9         	movff	i2printf@cp,fsr2l
  7843  000B9C  C015  FFDA         	movff	i2printf@cp+1,fsr2h
  7844  000BA0  50DF               	movf	indf2,w,c
  7845  000BA2  EC34  F018         	call	i2_putch
  7846  000BA6  4A14               	infsnz	i2printf@cp,f,c
  7847  000BA8  2A15               	incf	i2printf@cp+1,f,c
  7848  000BAA                     i2l4714:
  7849  000BAA  061C               	decf	i2printf@len,f,c
  7850  000BAC  A0D8               	btfss	status,0,c
  7851  000BAE  061D               	decf	i2printf@len+1,f,c
  7852  000BB0  281C               	incf	i2printf@len,w,c
  7853  000BB2  E1F2               	bnz	i2l4710
  7854  000BB4  281D               	incf	i2printf@len+1,w,c
  7855  000BB6  A4D8               	btfss	status,2,c
  7856  000BB8  D7EF               	goto	i2l4710
  7857                           
  7858                           ;doprnt.c: 770: if(flag & 0x08)
  7859  000BBA  B626               	btfsc	i2printf@flag,3,c
  7860  000BBC  D004               	goto	i2l4720
  7861  000BBE  D295               	goto	i2l4930
  7862  000BC0                     i2l4718:
  7863                           
  7864                           ;doprnt.c: 772: (putch(' ') );
  7865  000BC0  0E20               	movlw	32
  7866  000BC2  EC34  F018         	call	i2_putch
  7867  000BC6                     i2l4720:
  7868  000BC6  0623               	decf	i2printf@width,f,c
  7869  000BC8  A0D8               	btfss	status,0,c
  7870  000BCA  0624               	decf	i2printf@width+1,f,c
  7871  000BCC  2823               	incf	i2printf@width,w,c
  7872  000BCE  E1F8               	bnz	i2l4718
  7873  000BD0  2824               	incf	i2printf@width+1,w,c
  7874  000BD2  B4D8               	btfsc	status,2,c
  7875  000BD4  D28A               	goto	i2l4930
  7876  000BD6  D7F4               	goto	i2l4718
  7877  000BD8                     i2l4722:
  7878                           
  7879                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7880  000BD8  C01E  FFD9         	movff	i2printf@ap,fsr2l
  7881  000BDC  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  7882  000BE0  50DF               	movf	indf2,w,c
  7883  000BE2  6E25               	movwf	i2printf@c,c
  7884  000BE4  0E02               	movlw	2
  7885  000BE6  261E               	addwf	i2printf@ap,f,c
  7886  000BE8  0E00               	movlw	0
  7887  000BEA  221F               	addwfc	i2printf@ap+1,f,c
  7888  000BEC                     i2l4726:
  7889                           
  7890                           ;doprnt.c: 805: cp = (char *)&c;
  7891  000BEC  0E25               	movlw	low i2printf@c
  7892  000BEE  6E14               	movwf	i2printf@cp,c
  7893  000BF0  0E00               	movlw	high i2printf@c
  7894  000BF2  6E15               	movwf	i2printf@cp+1,c
  7895                           
  7896                           ;doprnt.c: 806: len = 1;
  7897  000BF4  0E00               	movlw	0
  7898  000BF6  6E1D               	movwf	i2printf@len+1,c
  7899  000BF8  0E01               	movlw	1
  7900  000BFA  6E1C               	movwf	i2printf@len,c
  7901                           
  7902                           ;doprnt.c: 807: goto dostring;
  7903  000BFC  D79C               	goto	i2l4690
  7904  000BFE                     i2l4730:
  7905                           
  7906                           ;doprnt.c: 818: flag |= 0xC0;
  7907  000BFE  0EC0               	movlw	192
  7908  000C00  1226               	iorwf	i2printf@flag,f,c
  7909                           
  7910                           ;doprnt.c: 822: }
  7911                           
  7912                           ;doprnt.c: 819: break;
  7913  000C02  D023               	goto	i2l4736
  7914  000C04                     i2l4734:
  7915  000C04  C00D  FFF6         	movff	i2printf@f,tblptrl
  7916  000C08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7917  000C0C  4A0D               	infsnz	i2printf@f,f,c
  7918  000C0E  2A0E               	incf	i2printf@f+1,f,c
  7919  000C10                     	if	0	;tblptru may be non-zero
  7920  000C10                     	endif
  7921  000C10                     	if	0	;tblptru may be non-zero
  7922  000C10                     	endif
  7923  000C10  0008               	tblrd		*
  7924  000C12  CFF5 F025          	movff	tablat,i2printf@c
  7925  000C16  5025               	movf	i2printf@c,w,c
  7926                           
  7927                           ; Switch size 1, requested type "space"
  7928                           ; Number of cases is 8, Range of values is 0 to 120
  7929                           ; switch strategies available:
  7930                           ; Name         Instructions Cycles
  7931                           ; simple_byte           25    13 (average)
  7932                           ;	Chosen strategy is simple_byte
  7933  000C18  0A00               	xorlw	0	; case 0
  7934  000C1A  B4D8               	btfsc	status,2,c
  7935  000C1C  0012               	return	
  7936  000C1E  0A58               	xorlw	88	; case 88
  7937  000C20  B4D8               	btfsc	status,2,c
  7938  000C22  D786               	goto	i2l4688
  7939  000C24  0A3B               	xorlw	59	; case 99
  7940  000C26  B4D8               	btfsc	status,2,c
  7941  000C28  D7D7               	goto	i2l4722
  7942  000C2A  0A07               	xorlw	7	; case 100
  7943  000C2C  B4D8               	btfsc	status,2,c
  7944  000C2E  D00D               	goto	i2l4736
  7945  000C30  0A0D               	xorlw	13	; case 105
  7946  000C32  B4D8               	btfsc	status,2,c
  7947  000C34  D00A               	goto	i2l4736
  7948  000C36  0A06               	xorlw	6	; case 111
  7949  000C38  B4D8               	btfsc	status,2,c
  7950  000C3A  D778               	goto	i2l4686
  7951  000C3C  0A1A               	xorlw	26	; case 117
  7952  000C3E  B4D8               	btfsc	status,2,c
  7953  000C40  D7DE               	goto	i2l4730
  7954  000C42  0A0D               	xorlw	13	; case 120
  7955  000C44  B4D8               	btfsc	status,2,c
  7956  000C46  D775               	goto	i2l397
  7957  000C48  D7D1               	goto	i2l4726
  7958  000C4A                     i2l4736:
  7959                           
  7960                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7961  000C4A  0EC0               	movlw	192
  7962  000C4C  1426               	andwf	i2printf@flag,w,c
  7963  000C4E  6E0F               	movwf	??i2_printf& (0+255),c
  7964  000C50  0E00               	movlw	0
  7965  000C52  1427               	andwf	i2printf@flag+1,w,c
  7966  000C54  6E10               	movwf	(??i2_printf+1)& (0+255),c
  7967  000C56  500F               	movf	??i2_printf,w,c
  7968  000C58  1010               	iorwf	??i2_printf+1,w,c
  7969  000C5A  A4D8               	btfss	status,2,c
  7970  000C5C  D015               	goto	i2l4748
  7971                           
  7972                           ;doprnt.c: 1253: {
  7973                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7974  000C5E  C01E  FFD9         	movff	i2printf@ap,fsr2l
  7975  000C62  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  7976  000C66  CFDE F020          	movff	postinc2,i2printf@val
  7977  000C6A  CFDD F021          	movff	postdec2,i2printf@val+1
  7978  000C6E  0E02               	movlw	2
  7979  000C70  261E               	addwf	i2printf@ap,f,c
  7980  000C72  0E00               	movlw	0
  7981  000C74  221F               	addwfc	i2printf@ap+1,f,c
  7982                           
  7983                           ;doprnt.c: 1261: if((int)val < 0) {
  7984  000C76  AE21               	btfss	i2printf@val+1,7,c
  7985  000C78  D013               	goto	i2l4752
  7986                           
  7987                           ;doprnt.c: 1262: flag |= 0x03;
  7988  000C7A  0E03               	movlw	3
  7989  000C7C  1226               	iorwf	i2printf@flag,f,c
  7990                           
  7991                           ;doprnt.c: 1263: val = -val;
  7992  000C7E  6C20               	negf	i2printf@val,c
  7993  000C80  1E21               	comf	i2printf@val+1,f,c
  7994  000C82  B0D8               	btfsc	status,0,c
  7995  000C84  2A21               	incf	i2printf@val+1,f,c
  7996                           
  7997                           ;doprnt.c: 1264: }
  7998                           ;doprnt.c: 1266: }
  7999  000C86  D00C               	goto	i2l4752
  8000  000C88                     i2l4748:
  8001                           
  8002                           ;doprnt.c: 1268: else
  8003                           ;doprnt.c: 1273: {
  8004                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8005  000C88  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8006  000C8C  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8007  000C90  CFDE F020          	movff	postinc2,i2printf@val
  8008  000C94  CFDD F021          	movff	postdec2,i2printf@val+1
  8009  000C98  0E02               	movlw	2
  8010  000C9A  261E               	addwf	i2printf@ap,f,c
  8011  000C9C  0E00               	movlw	0
  8012  000C9E  221F               	addwfc	i2printf@ap+1,f,c
  8013  000CA0                     i2l4752:
  8014                           
  8015                           ;doprnt.c: 1287: }
  8016                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8017  000CA0  5022               	movf	i2printf@prec,w,c
  8018  000CA2  A4D8               	btfss	status,2,c
  8019  000CA4  D04E               	goto	i2l4802
  8020  000CA6  5020               	movf	i2printf@val,w,c
  8021  000CA8  1021               	iorwf	i2printf@val+1,w,c
  8022  000CAA  A4D8               	btfss	status,2,c
  8023  000CAC  D04A               	goto	i2l4802
  8024                           
  8025                           ;doprnt.c: 1291: prec++;
  8026  000CAE  2A22               	incf	i2printf@prec,f,c
  8027                           
  8028                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8029  000CB0  D048               	goto	i2l4802
  8030  000CB2                     i2l4758:
  8031                           
  8032                           ;doprnt.c: 1302: case 0xC0:
  8033                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8034  000CB2  0E01               	movlw	1
  8035  000CB4  6E25               	movwf	i2printf@c,c
  8036  000CB6                     i2l4760:
  8037  000CB6  0E05               	movlw	5
  8038  000CB8  1825               	xorwf	i2printf@c,w,c
  8039  000CBA  B4D8               	btfsc	status,2,c
  8040  000CBC  D050               	goto	i2l4804
  8041                           
  8042                           ;doprnt.c: 1306: if(val < dpowers[c])
  8043  000CBE  5025               	movf	i2printf@c,w,c
  8044  000CC0  0D02               	mullw	2
  8045  000CC2  0EDC               	movlw	low _dpowers
  8046  000CC4  24F3               	addwf	prodl,w,c
  8047  000CC6  6EF6               	movwf	tblptrl,c
  8048  000CC8  0EFD               	movlw	high _dpowers
  8049  000CCA  20F4               	addwfc	prodh,w,c
  8050  000CCC  6EF7               	movwf	tblptrh,c
  8051  000CCE                     	if	0	;There are less than 3 active tblptr bytes
  8052  000CCE                     	endif
  8053  000CCE  0009               	tblrd		*+
  8054  000CD0  50F5               	movf	tablat,w,c
  8055  000CD2  5C20               	subwf	i2printf@val,w,c
  8056  000CD4  0009               	tblrd		*+
  8057  000CD6  50F5               	movf	tablat,w,c
  8058  000CD8  5821               	subwfb	i2printf@val+1,w,c
  8059  000CDA  A0D8               	btfss	status,0,c
  8060  000CDC  D040               	goto	i2l4804
  8061                           
  8062                           ;doprnt.c: 1307: break;
  8063  000CDE  2A25               	incf	i2printf@c,f,c
  8064  000CE0  D7EA               	goto	i2l4760
  8065  000CE2                     i2l4772:
  8066                           
  8067                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8068  000CE2  0E01               	movlw	1
  8069  000CE4  6E25               	movwf	i2printf@c,c
  8070  000CE6                     i2l4774:
  8071  000CE6  0E04               	movlw	4
  8072  000CE8  1825               	xorwf	i2printf@c,w,c
  8073  000CEA  B4D8               	btfsc	status,2,c
  8074  000CEC  D038               	goto	i2l4804
  8075                           
  8076                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8077  000CEE  5025               	movf	i2printf@c,w,c
  8078  000CF0  0D02               	mullw	2
  8079  000CF2  0EE6               	movlw	low _hexpowers
  8080  000CF4  24F3               	addwf	prodl,w,c
  8081  000CF6  6EF6               	movwf	tblptrl,c
  8082  000CF8  0EFD               	movlw	high _hexpowers
  8083  000CFA  20F4               	addwfc	prodh,w,c
  8084  000CFC  6EF7               	movwf	tblptrh,c
  8085  000CFE                     	if	0	;There are less than 3 active tblptr bytes
  8086  000CFE                     	endif
  8087  000CFE  0009               	tblrd		*+
  8088  000D00  50F5               	movf	tablat,w,c
  8089  000D02  5C20               	subwf	i2printf@val,w,c
  8090  000D04  0009               	tblrd		*+
  8091  000D06  50F5               	movf	tablat,w,c
  8092  000D08  5821               	subwfb	i2printf@val+1,w,c
  8093  000D0A  A0D8               	btfss	status,0,c
  8094  000D0C  D028               	goto	i2l4804
  8095                           
  8096                           ;doprnt.c: 1318: break;
  8097  000D0E  2A25               	incf	i2printf@c,f,c
  8098  000D10  D7EA               	goto	i2l4774
  8099  000D12                     i2l4786:
  8100                           
  8101                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  8102  000D12  0E01               	movlw	1
  8103  000D14  6E25               	movwf	i2printf@c,c
  8104  000D16                     i2l4788:
  8105  000D16  0E06               	movlw	6
  8106  000D18  1825               	xorwf	i2printf@c,w,c
  8107  000D1A  B4D8               	btfsc	status,2,c
  8108  000D1C  D020               	goto	i2l4804
  8109                           
  8110                           ;doprnt.c: 1329: if(val < octpowers[c])
  8111  000D1E  5025               	movf	i2printf@c,w,c
  8112  000D20  0D02               	mullw	2
  8113  000D22  0ED0               	movlw	low _octpowers
  8114  000D24  24F3               	addwf	prodl,w,c
  8115  000D26  6EF6               	movwf	tblptrl,c
  8116  000D28  0EFD               	movlw	high _octpowers
  8117  000D2A  20F4               	addwfc	prodh,w,c
  8118  000D2C  6EF7               	movwf	tblptrh,c
  8119  000D2E                     	if	0	;There are less than 3 active tblptr bytes
  8120  000D2E                     	endif
  8121  000D2E  0009               	tblrd		*+
  8122  000D30  50F5               	movf	tablat,w,c
  8123  000D32  5C20               	subwf	i2printf@val,w,c
  8124  000D34  0009               	tblrd		*+
  8125  000D36  50F5               	movf	tablat,w,c
  8126  000D38  5821               	subwfb	i2printf@val+1,w,c
  8127  000D3A  A0D8               	btfss	status,0,c
  8128  000D3C  D010               	goto	i2l4804
  8129                           
  8130                           ;doprnt.c: 1330: break;
  8131  000D3E  2A25               	incf	i2printf@c,f,c
  8132  000D40  D7EA               	goto	i2l4788
  8133  000D42                     i2l4802:
  8134  000D42  5026               	movf	i2printf@flag,w,c
  8135  000D44  0BC0               	andlw	192
  8136                           
  8137                           ; Switch size 1, requested type "space"
  8138                           ; Number of cases is 4, Range of values is 0 to 192
  8139                           ; switch strategies available:
  8140                           ; Name         Instructions Cycles
  8141                           ; simple_byte           13     7 (average)
  8142                           ;	Chosen strategy is simple_byte
  8143  000D46  0A00               	xorlw	0	; case 0
  8144  000D48  B4D8               	btfsc	status,2,c
  8145  000D4A  D7B3               	goto	i2l4758
  8146  000D4C  0A40               	xorlw	64	; case 64
  8147  000D4E  B4D8               	btfsc	status,2,c
  8148  000D50  D7E0               	goto	i2l4786
  8149  000D52  0AC0               	xorlw	192	; case 128
  8150  000D54  B4D8               	btfsc	status,2,c
  8151  000D56  D7C5               	goto	i2l4772
  8152  000D58  0A40               	xorlw	64	; case 192
  8153  000D5A  B4D8               	btfsc	status,2,c
  8154  000D5C  D7AA               	goto	i2l4758
  8155  000D5E                     i2l4804:
  8156                           
  8157                           ;doprnt.c: 1339: if(c < prec)
  8158  000D5E  5025               	movf	i2printf@c,w,c
  8159  000D60  0A80               	xorlw	128
  8160  000D62  6E0F               	movwf	??i2_printf& (0+255),c
  8161  000D64  5022               	movf	i2printf@prec,w,c
  8162  000D66  0A80               	xorlw	128
  8163  000D68  5C0F               	subwf	??i2_printf& (0+255),w,c
  8164  000D6A  B0D8               	btfsc	status,0,c
  8165  000D6C  D003               	goto	i2l4808
  8166                           
  8167                           ;doprnt.c: 1340: c = prec;
  8168  000D6E  C022  F025         	movff	i2printf@prec,i2printf@c
  8169  000D72  D009               	goto	i2l4812
  8170  000D74                     i2l4808:
  8171                           
  8172                           ;doprnt.c: 1341: else if(prec < c)
  8173  000D74  5022               	movf	i2printf@prec,w,c
  8174  000D76  0A80               	xorlw	128
  8175  000D78  6E0F               	movwf	??i2_printf& (0+255),c
  8176  000D7A  5025               	movf	i2printf@c,w,c
  8177  000D7C  0A80               	xorlw	128
  8178  000D7E  5C0F               	subwf	??i2_printf& (0+255),w,c
  8179  000D80  A0D8               	btfss	status,0,c
  8180                           
  8181                           ;doprnt.c: 1342: prec = c;
  8182  000D82  C025  F022         	movff	i2printf@c,i2printf@prec
  8183  000D86                     i2l4812:
  8184                           
  8185                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8186  000D86  5023               	movf	i2printf@width,w,c
  8187  000D88  1024               	iorwf	i2printf@width+1,w,c
  8188  000D8A  B4D8               	btfsc	status,2,c
  8189  000D8C  D00D               	goto	i2l4818
  8190  000D8E  0E03               	movlw	3
  8191  000D90  1426               	andwf	i2printf@flag,w,c
  8192  000D92  6E0F               	movwf	??i2_printf& (0+255),c
  8193  000D94  0E00               	movlw	0
  8194  000D96  1427               	andwf	i2printf@flag+1,w,c
  8195  000D98  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8196  000D9A  500F               	movf	??i2_printf,w,c
  8197  000D9C  1010               	iorwf	??i2_printf+1,w,c
  8198  000D9E  B4D8               	btfsc	status,2,c
  8199  000DA0  D003               	goto	i2l4818
  8200                           
  8201                           ;doprnt.c: 1346: width--;
  8202  000DA2  0623               	decf	i2printf@width,f,c
  8203  000DA4  A0D8               	btfss	status,0,c
  8204  000DA6  0624               	decf	i2printf@width+1,f,c
  8205  000DA8                     i2l4818:
  8206                           
  8207                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8208  000DA8  AC27               	btfss	i2printf@flag+1,6,c
  8209  000DAA  D016               	goto	i2l4826
  8210                           
  8211                           ;doprnt.c: 1349: if(width > prec)
  8212  000DAC  0E80               	movlw	128
  8213  000DAE  BE22               	btfsc	i2printf@prec,7,c
  8214  000DB0  0E7F               	movlw	127
  8215  000DB2  6E0F               	movwf	??i2_printf& (0+255),c
  8216  000DB4  5023               	movf	i2printf@width,w,c
  8217  000DB6  5C22               	subwf	i2printf@prec,w,c
  8218  000DB8  5024               	movf	i2printf@width+1,w,c
  8219  000DBA  0A80               	xorlw	128
  8220  000DBC  580F               	subwfb	??i2_printf& (0+255),w,c
  8221  000DBE  B0D8               	btfsc	status,0,c
  8222  000DC0  D007               	goto	i2l4824
  8223                           
  8224                           ;doprnt.c: 1350: width -= prec;
  8225  000DC2  5022               	movf	i2printf@prec,w,c
  8226  000DC4  5E23               	subwf	i2printf@width,f,c
  8227  000DC6  0E00               	movlw	0
  8228  000DC8  BE22               	btfsc	i2printf@prec,7,c
  8229  000DCA  0EFF               	movlw	255
  8230  000DCC  5A24               	subwfb	i2printf@width+1,f,c
  8231  000DCE  D004               	goto	i2l4826
  8232  000DD0                     i2l4824:
  8233                           
  8234                           ;doprnt.c: 1351: else
  8235                           ;doprnt.c: 1352: width = 0;
  8236  000DD0  0E00               	movlw	0
  8237  000DD2  6E24               	movwf	i2printf@width+1,c
  8238  000DD4  0E00               	movlw	0
  8239  000DD6  6E23               	movwf	i2printf@width,c
  8240  000DD8                     i2l4826:
  8241                           
  8242                           ;doprnt.c: 1353: }
  8243                           ;doprnt.c: 1357: if((flag & (
  8244                           ;doprnt.c: 1359: 0x04|
  8245                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  8246  000DD8  0EC4               	movlw	196
  8247  000DDA  6E0F               	movwf	??i2_printf& (0+255),c
  8248  000DDC  0E08               	movlw	8
  8249  000DDE  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8250  000DE0  C026  F011         	movff	i2printf@flag,??i2_printf+2
  8251  000DE4  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  8252  000DE8  500F               	movf	??i2_printf,w,c
  8253  000DEA  1611               	andwf	??i2_printf+2,f,c
  8254  000DEC  5010               	movf	??i2_printf+1,w,c
  8255  000DEE  1612               	andwf	??i2_printf+3,f,c
  8256  000DF0  0E40               	movlw	64
  8257  000DF2  1811               	xorwf	??i2_printf+2,w,c
  8258  000DF4  E10C               	bnz	i2l4832
  8259  000DF6  0E08               	movlw	8
  8260  000DF8  1812               	xorwf	??i2_printf+3,w,c
  8261  000DFA  A4D8               	btfss	status,2,c
  8262  000DFC  D008               	goto	i2l4832
  8263                           
  8264                           ;doprnt.c: 1362: if(width)
  8265  000DFE  5023               	movf	i2printf@width,w,c
  8266  000E00  1024               	iorwf	i2printf@width+1,w,c
  8267  000E02  B4D8               	btfsc	status,2,c
  8268  000E04  D028               	goto	i2l4840
  8269                           
  8270                           ;doprnt.c: 1363: width--;
  8271  000E06  0623               	decf	i2printf@width,f,c
  8272  000E08  A0D8               	btfss	status,0,c
  8273  000E0A  0624               	decf	i2printf@width+1,f,c
  8274                           
  8275                           ;doprnt.c: 1364: } else
  8276  000E0C  D024               	goto	i2l4840
  8277  000E0E                     i2l4832:
  8278                           
  8279                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8280  000E0E  0EC0               	movlw	192
  8281  000E10  6E0F               	movwf	??i2_printf& (0+255),c
  8282  000E12  0E08               	movlw	8
  8283  000E14  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8284  000E16  C026  F011         	movff	i2printf@flag,??i2_printf+2
  8285  000E1A  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  8286  000E1E  500F               	movf	??i2_printf,w,c
  8287  000E20  1611               	andwf	??i2_printf+2,f,c
  8288  000E22  5010               	movf	??i2_printf+1,w,c
  8289  000E24  1612               	andwf	??i2_printf+3,f,c
  8290  000E26  0E80               	movlw	128
  8291  000E28  1811               	xorwf	??i2_printf+2,w,c
  8292  000E2A  E115               	bnz	i2l4840
  8293  000E2C  0E08               	movlw	8
  8294  000E2E  1812               	xorwf	??i2_printf+3,w,c
  8295  000E30  A4D8               	btfss	status,2,c
  8296  000E32  D011               	goto	i2l4840
  8297                           
  8298                           ;doprnt.c: 1372: if(width > 2)
  8299  000E34  BE24               	btfsc	i2printf@width+1,7,c
  8300  000E36  D00B               	goto	i2l4838
  8301  000E38  5024               	movf	i2printf@width+1,w,c
  8302  000E3A  E104               	bnz	i2u522_40
  8303  000E3C  0E03               	movlw	3
  8304  000E3E  5C23               	subwf	i2printf@width,w,c
  8305  000E40  A0D8               	btfss	status,0,c
  8306  000E42  D005               	goto	i2l4838
  8307  000E44                     i2u522_40:
  8308                           
  8309                           ;doprnt.c: 1373: width -= 2;
  8310  000E44  0EFE               	movlw	254
  8311  000E46  2623               	addwf	i2printf@width,f,c
  8312  000E48  0EFF               	movlw	255
  8313  000E4A  2224               	addwfc	i2printf@width+1,f,c
  8314  000E4C  D004               	goto	i2l4840
  8315  000E4E                     i2l4838:
  8316                           
  8317                           ;doprnt.c: 1374: else
  8318                           ;doprnt.c: 1375: width = 0;
  8319  000E4E  0E00               	movlw	0
  8320  000E50  6E24               	movwf	i2printf@width+1,c
  8321  000E52  0E00               	movlw	0
  8322  000E54  6E23               	movwf	i2printf@width,c
  8323  000E56                     i2l4840:
  8324                           
  8325                           ;doprnt.c: 1376: }
  8326                           ;doprnt.c: 1381: if(width > c)
  8327  000E56  0E80               	movlw	128
  8328  000E58  BE25               	btfsc	i2printf@c,7,c
  8329  000E5A  0E7F               	movlw	127
  8330  000E5C  6E0F               	movwf	??i2_printf& (0+255),c
  8331  000E5E  5023               	movf	i2printf@width,w,c
  8332  000E60  5C25               	subwf	i2printf@c,w,c
  8333  000E62  5024               	movf	i2printf@width+1,w,c
  8334  000E64  0A80               	xorlw	128
  8335  000E66  580F               	subwfb	??i2_printf& (0+255),w,c
  8336  000E68  B0D8               	btfsc	status,0,c
  8337  000E6A  D007               	goto	i2l4844
  8338                           
  8339                           ;doprnt.c: 1382: width -= c;
  8340  000E6C  5025               	movf	i2printf@c,w,c
  8341  000E6E  5E23               	subwf	i2printf@width,f,c
  8342  000E70  0E00               	movlw	0
  8343  000E72  BE25               	btfsc	i2printf@c,7,c
  8344  000E74  0EFF               	movlw	255
  8345  000E76  5A24               	subwfb	i2printf@width+1,f,c
  8346  000E78  D004               	goto	i2l4846
  8347  000E7A                     i2l4844:
  8348                           
  8349                           ;doprnt.c: 1383: else
  8350                           ;doprnt.c: 1384: width = 0;
  8351  000E7A  0E00               	movlw	0
  8352  000E7C  6E24               	movwf	i2printf@width+1,c
  8353  000E7E  0E00               	movlw	0
  8354  000E80  6E23               	movwf	i2printf@width,c
  8355  000E82                     i2l4846:
  8356                           
  8357                           ;doprnt.c: 1387: if(flag & 0x04) {
  8358  000E82  A426               	btfss	i2printf@flag,2,c
  8359  000E84  D042               	goto	i2l4872
  8360                           
  8361                           ;doprnt.c: 1392: if(flag & 0x03)
  8362  000E86  0E03               	movlw	3
  8363  000E88  1426               	andwf	i2printf@flag,w,c
  8364  000E8A  6E0F               	movwf	??i2_printf& (0+255),c
  8365  000E8C  0E00               	movlw	0
  8366  000E8E  1427               	andwf	i2printf@flag+1,w,c
  8367  000E90  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8368  000E92  500F               	movf	??i2_printf,w,c
  8369  000E94  1010               	iorwf	??i2_printf+1,w,c
  8370  000E96  B4D8               	btfsc	status,2,c
  8371  000E98  D004               	goto	i2l451
  8372                           
  8373                           ;doprnt.c: 1393: (putch('-') );
  8374  000E9A  0E2D               	movlw	45
  8375  000E9C  EC34  F018         	call	i2_putch
  8376  000EA0  D029               	goto	i2l4866
  8377  000EA2                     i2l451:
  8378                           
  8379                           ;doprnt.c: 1396: else
  8380                           ;doprnt.c: 1399: if(flag & 0x01)
  8381  000EA2  A026               	btfss	i2printf@flag,0,c
  8382  000EA4  D004               	goto	i2l4854
  8383                           
  8384                           ;doprnt.c: 1400: (putch(' ') );
  8385  000EA6  0E20               	movlw	32
  8386  000EA8  EC34  F018         	call	i2_putch
  8387  000EAC  D023               	goto	i2l4866
  8388  000EAE                     i2l4854:
  8389                           
  8390                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8391  000EAE  0EC0               	movlw	192
  8392  000EB0  6E0F               	movwf	??i2_printf& (0+255),c
  8393  000EB2  0E08               	movlw	8
  8394  000EB4  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8395  000EB6  C026  F011         	movff	i2printf@flag,??i2_printf+2
  8396  000EBA  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  8397  000EBE  500F               	movf	??i2_printf,w,c
  8398  000EC0  1611               	andwf	??i2_printf+2,f,c
  8399  000EC2  5010               	movf	??i2_printf+1,w,c
  8400  000EC4  1612               	andwf	??i2_printf+3,f,c
  8401  000EC6  0E80               	movlw	128
  8402  000EC8  1811               	xorwf	??i2_printf+2,w,c
  8403  000ECA  E114               	bnz	i2l4866
  8404  000ECC  0E08               	movlw	8
  8405  000ECE  1812               	xorwf	??i2_printf+3,w,c
  8406  000ED0  A4D8               	btfss	status,2,c
  8407  000ED2  D010               	goto	i2l4866
  8408                           
  8409                           ;doprnt.c: 1404: (putch('0') );
  8410  000ED4  0E30               	movlw	48
  8411  000ED6  EC34  F018         	call	i2_putch
  8412                           
  8413                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  8414  000EDA  BA26               	btfsc	i2printf@flag,5,c
  8415  000EDC  D004               	goto	i2l4862
  8416  000EDE  0E00               	movlw	0
  8417  000EE0  6E17               	movwf	i2_printf$486+1,c
  8418  000EE2  0E78               	movlw	120
  8419  000EE4  D003               	goto	L14
  8420  000EE6                     i2l4862:
  8421  000EE6  0E00               	movlw	0
  8422  000EE8  6E17               	movwf	i2_printf$486+1,c
  8423  000EEA  0E58               	movlw	88
  8424  000EEC                     L14:
  8425  000EEC  6E16               	movwf	i2_printf$486,c
  8426  000EEE  5016               	movf	i2_printf$486,w,c
  8427  000EF0  EC34  F018         	call	i2_putch
  8428  000EF4                     i2l4866:
  8429                           
  8430                           ;doprnt.c: 1412: }
  8431                           ;doprnt.c: 1415: if(width)
  8432  000EF4  5023               	movf	i2printf@width,w,c
  8433  000EF6  1024               	iorwf	i2printf@width+1,w,c
  8434  000EF8  B4D8               	btfsc	status,2,c
  8435  000EFA  D0E1               	goto	i2l4922
  8436                           
  8437                           ;doprnt.c: 1417: (putch('0') );
  8438                           
  8439                           ;doprnt.c: 1416: do
  8440  000EFC  0E30               	movlw	48
  8441  000EFE  EC34  F018         	call	i2_putch
  8442                           
  8443                           ;doprnt.c: 1418: while(--width);
  8444  000F02  0623               	decf	i2printf@width,f,c
  8445  000F04  A0D8               	btfss	status,0,c
  8446  000F06  0624               	decf	i2printf@width+1,f,c
  8447  000F08  D7F5               	goto	i2l4866
  8448  000F0A                     i2l4872:
  8449                           
  8450                           ;doprnt.c: 1422: {
  8451                           ;doprnt.c: 1424: if(width
  8452                           ;doprnt.c: 1426: && !(flag & 0x08)
  8453                           ;doprnt.c: 1428: )
  8454  000F0A  5023               	movf	i2printf@width,w,c
  8455  000F0C  1024               	iorwf	i2printf@width+1,w,c
  8456  000F0E  A4D8               	btfss	status,2,c
  8457  000F10  B626               	btfsc	i2printf@flag,3,c
  8458  000F12  D00A               	goto	i2l4880
  8459  000F14                     i2l4876:
  8460                           
  8461                           ;doprnt.c: 1430: (putch(' ') );
  8462  000F14  0E20               	movlw	32
  8463  000F16  EC34  F018         	call	i2_putch
  8464                           
  8465                           ;doprnt.c: 1431: while(--width);
  8466  000F1A  0623               	decf	i2printf@width,f,c
  8467  000F1C  A0D8               	btfss	status,0,c
  8468  000F1E  0624               	decf	i2printf@width+1,f,c
  8469  000F20  5023               	movf	i2printf@width,w,c
  8470  000F22  1024               	iorwf	i2printf@width+1,w,c
  8471  000F24  A4D8               	btfss	status,2,c
  8472  000F26  D7F6               	goto	i2l4876
  8473  000F28                     i2l4880:
  8474                           
  8475                           ;doprnt.c: 1438: if(flag & 0x03)
  8476  000F28  0E03               	movlw	3
  8477  000F2A  1426               	andwf	i2printf@flag,w,c
  8478  000F2C  6E0F               	movwf	??i2_printf& (0+255),c
  8479  000F2E  0E00               	movlw	0
  8480  000F30  1427               	andwf	i2printf@flag+1,w,c
  8481  000F32  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8482  000F34  500F               	movf	??i2_printf,w,c
  8483  000F36  1010               	iorwf	??i2_printf+1,w,c
  8484  000F38  B4D8               	btfsc	status,2,c
  8485  000F3A  D004               	goto	i2l467
  8486                           
  8487                           ;doprnt.c: 1439: (putch('-') );
  8488  000F3C  0E2D               	movlw	45
  8489  000F3E  EC34  F018         	call	i2_putch
  8490  000F42  D005               	goto	i2l4886
  8491  000F44                     i2l467:
  8492                           
  8493                           ;doprnt.c: 1443: else if(flag & 0x01)
  8494  000F44  A026               	btfss	i2printf@flag,0,c
  8495  000F46  D003               	goto	i2l4886
  8496                           
  8497                           ;doprnt.c: 1444: (putch(' ') );
  8498  000F48  0E20               	movlw	32
  8499  000F4A  EC34  F018         	call	i2_putch
  8500  000F4E                     i2l4886:
  8501                           
  8502                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  8503  000F4E  0EC0               	movlw	192
  8504  000F50  6E0F               	movwf	??i2_printf& (0+255),c
  8505  000F52  0E08               	movlw	8
  8506  000F54  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8507  000F56  C026  F011         	movff	i2printf@flag,??i2_printf+2
  8508  000F5A  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  8509  000F5E  500F               	movf	??i2_printf,w,c
  8510  000F60  1611               	andwf	??i2_printf+2,f,c
  8511  000F62  5010               	movf	??i2_printf+1,w,c
  8512  000F64  1612               	andwf	??i2_printf+3,f,c
  8513  000F66  0E40               	movlw	64
  8514  000F68  1811               	xorwf	??i2_printf+2,w,c
  8515  000F6A  E108               	bnz	i2l4890
  8516  000F6C  0E08               	movlw	8
  8517  000F6E  1812               	xorwf	??i2_printf+3,w,c
  8518  000F70  A4D8               	btfss	status,2,c
  8519  000F72  D004               	goto	i2l4890
  8520                           
  8521                           ;doprnt.c: 1449: (putch('0') );
  8522  000F74  0E30               	movlw	48
  8523  000F76  EC34  F018         	call	i2_putch
  8524  000F7A  D0A1               	goto	i2l4922
  8525  000F7C                     i2l4890:
  8526                           
  8527                           ;doprnt.c: 1450: else
  8528                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  8529  000F7C  0EC0               	movlw	192
  8530  000F7E  6E0F               	movwf	??i2_printf& (0+255),c
  8531  000F80  0E08               	movlw	8
  8532  000F82  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8533  000F84  C026  F011         	movff	i2printf@flag,??i2_printf+2
  8534  000F88  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  8535  000F8C  500F               	movf	??i2_printf,w,c
  8536  000F8E  1611               	andwf	??i2_printf+2,f,c
  8537  000F90  5010               	movf	??i2_printf+1,w,c
  8538  000F92  1612               	andwf	??i2_printf+3,f,c
  8539  000F94  0E80               	movlw	128
  8540  000F96  1811               	xorwf	??i2_printf+2,w,c
  8541  000F98  E103               	bnz	i2u537_41
  8542  000F9A  0E08               	movlw	8
  8543  000F9C  1812               	xorwf	??i2_printf+3,w,c
  8544  000F9E  A4D8               	btfss	status,2,c
  8545  000FA0                     i2u537_41:
  8546  000FA0  D08E               	goto	i2l4922
  8547                           
  8548                           ;doprnt.c: 1458: (putch('0') );
  8549  000FA2  0E30               	movlw	48
  8550  000FA4  EC34  F018         	call	i2_putch
  8551                           
  8552                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  8553  000FA8  BA26               	btfsc	i2printf@flag,5,c
  8554  000FAA  D004               	goto	i2l4898
  8555  000FAC  0E00               	movlw	0
  8556  000FAE  6E19               	movwf	i2_printf$487+1,c
  8557  000FB0  0E78               	movlw	120
  8558  000FB2  D003               	goto	L15
  8559  000FB4                     i2l4898:
  8560  000FB4  0E00               	movlw	0
  8561  000FB6  6E19               	movwf	i2_printf$487+1,c
  8562  000FB8  0E58               	movlw	88
  8563  000FBA                     L15:
  8564  000FBA  6E18               	movwf	i2_printf$487,c
  8565  000FBC  5018               	movf	i2_printf$487,w,c
  8566  000FBE  EC34  F018         	call	i2_putch
  8567                           
  8568                           ;doprnt.c: 1466: }
  8569                           ;doprnt.c: 1469: }
  8570                           ;doprnt.c: 1474: while(prec--) {
  8571  000FC2  D07D               	goto	i2l4922
  8572  000FC4                     i2l4902:
  8573                           
  8574                           ;doprnt.c: 1486: case 0xC0:
  8575                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8576  000FC4  5022               	movf	i2printf@prec,w,c
  8577  000FC6  0D02               	mullw	2
  8578  000FC8  0EDC               	movlw	low _dpowers
  8579  000FCA  24F3               	addwf	prodl,w,c
  8580  000FCC  6EF6               	movwf	tblptrl,c
  8581  000FCE  0EFD               	movlw	high _dpowers
  8582  000FD0  20F4               	addwfc	prodh,w,c
  8583  000FD2  6EF7               	movwf	tblptrh,c
  8584  000FD4                     	if	0	;There are less than 3 active tblptr bytes
  8585  000FD4                     	endif
  8586  000FD4  0009               	tblrd		*+
  8587  000FD6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8588  000FDA  000A               	tblrd		*-
  8589  000FDC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8590  000FE0  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8591  000FE4  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8592  000FE8  EC26  F016         	call	i2___lwdiv	;wreg free
  8593  000FEC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  8594  000FF0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  8595  000FF4  0E00               	movlw	0
  8596  000FF6  6E0B               	movwf	i2___lwmod@divisor+1,c
  8597  000FF8  0E0A               	movlw	10
  8598  000FFA  6E0A               	movwf	i2___lwmod@divisor,c
  8599  000FFC  EC9E  F016         	call	i2___lwmod	;wreg free
  8600  001000  5008               	movf	?i2___lwmod,w,c
  8601  001002  D049               	goto	L16
  8602  001004                     i2l4904:
  8603                           
  8604                           ;doprnt.c: 1499: {
  8605                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8606  001004  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8607  001008  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8608  00100C  5022               	movf	i2printf@prec,w,c
  8609  00100E  0D02               	mullw	2
  8610  001010  0EE6               	movlw	low _hexpowers
  8611  001012  24F3               	addwf	prodl,w,c
  8612  001014  6EF6               	movwf	tblptrl,c
  8613  001016  0EFD               	movlw	high _hexpowers
  8614  001018  20F4               	addwfc	prodh,w,c
  8615  00101A  6EF7               	movwf	tblptrh,c
  8616  00101C                     	if	0	;There are less than 3 active tblptr bytes
  8617  00101C                     	endif
  8618  00101C  0009               	tblrd		*+
  8619  00101E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8620  001022  000A               	tblrd		*-
  8621  001024  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8622  001028  EC26  F016         	call	i2___lwdiv	;wreg free
  8623  00102C  5001               	movf	?i2___lwdiv,w,c
  8624  00102E  0B0F               	andlw	15
  8625  001030  6E13               	movwf	i2printf@idx,c
  8626                           
  8627                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  8628  001032  BA26               	btfsc	i2printf@flag,5,c
  8629  001034  D004               	goto	i2l4910
  8630  001036  0EF4               	movlw	low STR_26
  8631  001038  6E1A               	movwf	i2_printf$493,c
  8632  00103A  0EFE               	movlw	high STR_26
  8633  00103C  D003               	goto	L17
  8634  00103E                     i2l4910:
  8635  00103E  0EE3               	movlw	low STR_25
  8636  001040  6E1A               	movwf	i2_printf$493,c
  8637  001042  0EFE               	movlw	high STR_25
  8638  001044                     L17:
  8639  001044  6E1B               	movwf	i2_printf$493+1,c
  8640  001046  5013               	movf	i2printf@idx,w,c
  8641  001048  0D01               	mullw	1
  8642  00104A  C01A  F00F         	movff	i2_printf$493,??i2_printf
  8643  00104E  C01B  F010         	movff	i2_printf$493+1,??i2_printf+1
  8644  001052  50F3               	movf	prodl,w,c
  8645  001054  260F               	addwf	??i2_printf,f,c
  8646  001056  50F4               	movf	prodh,w,c
  8647  001058  2210               	addwfc	??i2_printf+1,f,c
  8648  00105A  C00F  FFF6         	movff	??i2_printf,tblptrl
  8649  00105E  C010  FFF7         	movff	??i2_printf+1,tblptrh
  8650  001062                     	if	0	;tblptru may be non-zero
  8651  001062                     	endif
  8652  001062                     	if	0	;tblptru may be non-zero
  8653  001062                     	endif
  8654  001062  0008               	tblrd		*
  8655  001064  CFF5 F025          	movff	tablat,i2printf@c
  8656                           
  8657                           ;doprnt.c: 1508: }
  8658                           ;doprnt.c: 1510: break;
  8659  001068  D027               	goto	i2l4920
  8660  00106A                     i2l4914:
  8661                           
  8662                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  8663  00106A  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  8664  00106E  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  8665  001072  5022               	movf	i2printf@prec,w,c
  8666  001074  0D02               	mullw	2
  8667  001076  0ED0               	movlw	low _octpowers
  8668  001078  24F3               	addwf	prodl,w,c
  8669  00107A  6EF6               	movwf	tblptrl,c
  8670  00107C  0EFD               	movlw	high _octpowers
  8671  00107E  20F4               	addwfc	prodh,w,c
  8672  001080  6EF7               	movwf	tblptrh,c
  8673  001082                     	if	0	;There are less than 3 active tblptr bytes
  8674  001082                     	endif
  8675  001082  0009               	tblrd		*+
  8676  001084  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  8677  001088  000A               	tblrd		*-
  8678  00108A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  8679  00108E  EC26  F016         	call	i2___lwdiv	;wreg free
  8680  001092  5001               	movf	?i2___lwdiv,w,c
  8681  001094  0B07               	andlw	7
  8682  001096                     L16:
  8683  001096  0F30               	addlw	48
  8684  001098  6E25               	movwf	i2printf@c,c
  8685                           
  8686                           ;doprnt.c: 1523: }
  8687                           
  8688                           ;doprnt.c: 1520: break;
  8689  00109A  D00E               	goto	i2l4920
  8690  00109C                     i2l4918:
  8691  00109C  5026               	movf	i2printf@flag,w,c
  8692  00109E  0BC0               	andlw	192
  8693                           
  8694                           ; Switch size 1, requested type "space"
  8695                           ; Number of cases is 4, Range of values is 0 to 192
  8696                           ; switch strategies available:
  8697                           ; Name         Instructions Cycles
  8698                           ; simple_byte           13     7 (average)
  8699                           ;	Chosen strategy is simple_byte
  8700  0010A0  0A00               	xorlw	0	; case 0
  8701  0010A2  B4D8               	btfsc	status,2,c
  8702  0010A4  D78F               	goto	i2l4902
  8703  0010A6  0A40               	xorlw	64	; case 64
  8704  0010A8  B4D8               	btfsc	status,2,c
  8705  0010AA  D7DF               	goto	i2l4914
  8706  0010AC  0AC0               	xorlw	192	; case 128
  8707  0010AE  B4D8               	btfsc	status,2,c
  8708  0010B0  D7A9               	goto	i2l4904
  8709  0010B2  0A40               	xorlw	64	; case 192
  8710  0010B4  B4D8               	btfsc	status,2,c
  8711  0010B6  D786               	goto	i2l4902
  8712  0010B8                     i2l4920:
  8713                           
  8714                           ;doprnt.c: 1524: (putch(c) );
  8715  0010B8  5025               	movf	i2printf@c,w,c
  8716  0010BA  EC34  F018         	call	i2_putch
  8717  0010BE                     i2l4922:
  8718  0010BE  0622               	decf	i2printf@prec,f,c
  8719  0010C0  2822               	incf	i2printf@prec,w,c
  8720  0010C2  A4D8               	btfss	status,2,c
  8721  0010C4  D7EB               	goto	i2l4918
  8722                           
  8723                           ;doprnt.c: 1525: }
  8724                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  8725  0010C6  B626               	btfsc	i2printf@flag,3,c
  8726  0010C8  BE24               	btfsc	i2printf@width+1,7,c
  8727  0010CA  D00F               	goto	i2l4930
  8728  0010CC  5024               	movf	i2printf@width+1,w,c
  8729  0010CE  E103               	bnz	i2l4926
  8730  0010D0  0423               	decf	i2printf@width,w,c
  8731  0010D2  A0D8               	btfss	status,0,c
  8732  0010D4  D00A               	goto	i2l4930
  8733  0010D6                     i2l4926:
  8734                           
  8735                           ;doprnt.c: 1530: (putch(' ') );
  8736  0010D6  0E20               	movlw	32
  8737  0010D8  EC34  F018         	call	i2_putch
  8738                           
  8739                           ;doprnt.c: 1531: while(--width);
  8740  0010DC  0623               	decf	i2printf@width,f,c
  8741  0010DE  A0D8               	btfss	status,0,c
  8742  0010E0  0624               	decf	i2printf@width+1,f,c
  8743  0010E2  5023               	movf	i2printf@width,w,c
  8744  0010E4  1024               	iorwf	i2printf@width+1,w,c
  8745  0010E6  A4D8               	btfss	status,2,c
  8746  0010E8  D7F6               	goto	i2l4926
  8747  0010EA                     i2l4930:
  8748  0010EA  C00D  FFF6         	movff	i2printf@f,tblptrl
  8749  0010EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8750  0010F2  4A0D               	infsnz	i2printf@f,f,c
  8751  0010F4  2A0E               	incf	i2printf@f+1,f,c
  8752  0010F6                     	if	0	;tblptru may be non-zero
  8753  0010F6                     	endif
  8754  0010F6                     	if	0	;tblptru may be non-zero
  8755  0010F6                     	endif
  8756  0010F6  0008               	tblrd		*
  8757  0010F8  CFF5 F025          	movff	tablat,i2printf@c
  8758  0010FC  5025               	movf	i2printf@c,w,c
  8759  0010FE  B4D8               	btfsc	status,2,c
  8760  001100  0012               	return	
  8761  001102  D450               	goto	i2l4624
  8762  001104                     __end_ofi2_printf:
  8763                           	opt stack 0
  8764                           pclatu	equ	0xFFB
  8765                           pclath	equ	0xFFA
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           intcon2	equ	0xFF1
  8774                           intcon3	equ	0xFF0
  8775                           postinc0	equ	0xFEE
  8776                           fsr0h	equ	0xFEA
  8777                           fsr0l	equ	0xFE9
  8778                           wreg	equ	0xFE8
  8779                           fsr1h	equ	0xFE2
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           postdec2	equ	0xFDD
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function i2_putch *****************
  8789 ;; Defined at:
  8790 ;;		line 31 in file "lcd.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  data            1    wreg     unsigned char 
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  data            1    2[COMRAM] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;Total ram usage:        1 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    1
  8811 ;; This function calls:
  8812 ;;		i2_lcdNibble
  8813 ;; This function is called by:
  8814 ;;		i2_printf
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           	psect	text30
  8819  003068                     __ptext30:
  8820                           	opt stack 0
  8821  003068                     i2_putch:
  8822                           	opt stack 23
  8823                           
  8824                           ;incstack = 0
  8825                           ;i2putch@data stored from wreg
  8826  003068  6E03               	movwf	i2putch@data,c
  8827                           
  8828                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  8829  00306A  848C               	bsf	3980,2,c	;volatile
  8830                           
  8831                           ;lcd.c: 33: lcdNibble(data);
  8832  00306C  5003               	movf	i2putch@data,w,c
  8833  00306E  EC77  F016         	call	i2_lcdNibble
  8834  003072  0012               	return		;funcret
  8835  003074                     __end_ofi2_putch:
  8836                           	opt stack 0
  8837                           pclatu	equ	0xFFB
  8838                           pclath	equ	0xFFA
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           intcon3	equ	0xFF0
  8848                           postinc0	equ	0xFEE
  8849                           fsr0h	equ	0xFEA
  8850                           fsr0l	equ	0xFE9
  8851                           wreg	equ	0xFE8
  8852                           fsr1h	equ	0xFE2
  8853                           fsr1l	equ	0xFE1
  8854                           indf2	equ	0xFDF
  8855                           postinc2	equ	0xFDE
  8856                           postdec2	equ	0xFDD
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function i2_isdigit *****************
  8862 ;; Defined at:
  8863 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  c               1    wreg     unsigned char 
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  c               1    2[COMRAM] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;Total ram usage:        3 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; This function calls:
  8884 ;;		Nothing
  8885 ;; This function is called by:
  8886 ;;		i2_printf
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           	psect	text31
  8891  002FD2                     __ptext31:
  8892                           	opt stack 0
  8893  002FD2                     i2_isdigit:
  8894                           	opt stack 24
  8895                           
  8896                           ;incstack = 0
  8897                           ;i2isdigit@c stored from wreg
  8898  002FD2  6E03               	movwf	i2isdigit@c,c
  8899  002FD4  0E00               	movlw	0
  8900  002FD6  6E02               	movwf	i2_isdigit$707,c
  8901  002FD8  0E3A               	movlw	58
  8902  002FDA  6003               	cpfslt	i2isdigit@c,c
  8903  002FDC  D005               	goto	i2l4330
  8904  002FDE  0E2F               	movlw	47
  8905  002FE0  6403               	cpfsgt	i2isdigit@c,c
  8906  002FE2  D002               	goto	i2l4330
  8907  002FE4  0E01               	movlw	1
  8908  002FE6  6E02               	movwf	i2_isdigit$707,c
  8909  002FE8                     i2l4330:
  8910  002FE8  C002  F001         	movff	i2_isdigit$707,??i2_isdigit
  8911  002FEC  3001               	rrcf	??i2_isdigit,w,c
  8912  002FEE  0012               	return	
  8913  002FF0                     __end_ofi2_isdigit:
  8914                           	opt stack 0
  8915                           pclatu	equ	0xFFB
  8916                           pclath	equ	0xFFA
  8917                           tblptru	equ	0xFF8
  8918                           tblptrh	equ	0xFF7
  8919                           tblptrl	equ	0xFF6
  8920                           tablat	equ	0xFF5
  8921                           prodh	equ	0xFF4
  8922                           prodl	equ	0xFF3
  8923                           intcon	equ	0xFF2
  8924                           intcon2	equ	0xFF1
  8925                           intcon3	equ	0xFF0
  8926                           postinc0	equ	0xFEE
  8927                           fsr0h	equ	0xFEA
  8928                           fsr0l	equ	0xFE9
  8929                           wreg	equ	0xFE8
  8930                           fsr1h	equ	0xFE2
  8931                           fsr1l	equ	0xFE1
  8932                           indf2	equ	0xFDF
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           fsr2h	equ	0xFDA
  8936                           fsr2l	equ	0xFD9
  8937                           status	equ	0xFD8
  8938                           
  8939 ;; *************** function i2___lwmod *****************
  8940 ;; Defined at:
  8941 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  dividend        2    7[COMRAM] unsigned int 
  8944 ;;  divisor         2    9[COMRAM] unsigned int 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  __lwmod         1   11[COMRAM] unsigned char 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  2    7[COMRAM] unsigned int 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;Total ram usage:        5 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		i2_printf
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969                           	psect	text32
  8970  002D3C                     __ptext32:
  8971                           	opt stack 0
  8972  002D3C                     i2___lwmod:
  8973                           	opt stack 24
  8974                           
  8975                           ;incstack = 0
  8976  002D3C  500A               	movf	i2___lwmod@divisor,w,c
  8977  002D3E  100B               	iorwf	i2___lwmod@divisor+1,w,c
  8978  002D40  B4D8               	btfsc	status,2,c
  8979  002D42  D018               	goto	i2l912
  8980  002D44  0E01               	movlw	1
  8981  002D46  6E0C               	movwf	i2___lwmod@counter,c
  8982  002D48  D004               	goto	i2l4362
  8983  002D4A                     i2l4360:
  8984  002D4A  90D8               	bcf	status,0,c
  8985  002D4C  360A               	rlcf	i2___lwmod@divisor,f,c
  8986  002D4E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  8987  002D50  2A0C               	incf	i2___lwmod@counter,f,c
  8988  002D52                     i2l4362:
  8989  002D52  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  8990  002D54  D7FA               	goto	i2l4360
  8991  002D56                     i2l4364:
  8992  002D56  500A               	movf	i2___lwmod@divisor,w,c
  8993  002D58  5C08               	subwf	i2___lwmod@dividend,w,c
  8994  002D5A  500B               	movf	i2___lwmod@divisor+1,w,c
  8995  002D5C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  8996  002D5E  A0D8               	btfss	status,0,c
  8997  002D60  D004               	goto	i2l4368
  8998  002D62  500A               	movf	i2___lwmod@divisor,w,c
  8999  002D64  5E08               	subwf	i2___lwmod@dividend,f,c
  9000  002D66  500B               	movf	i2___lwmod@divisor+1,w,c
  9001  002D68  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9002  002D6A                     i2l4368:
  9003  002D6A  90D8               	bcf	status,0,c
  9004  002D6C  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9005  002D6E  320A               	rrcf	i2___lwmod@divisor,f,c
  9006  002D70  2E0C               	decfsz	i2___lwmod@counter,f,c
  9007  002D72  D7F1               	goto	i2l4364
  9008  002D74                     i2l912:
  9009  002D74  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9010  002D78  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9011  002D7C  0012               	return		;funcret
  9012  002D7E                     __end_ofi2___lwmod:
  9013                           	opt stack 0
  9014                           pclatu	equ	0xFFB
  9015                           pclath	equ	0xFFA
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           intcon2	equ	0xFF1
  9024                           intcon3	equ	0xFF0
  9025                           postinc0	equ	0xFEE
  9026                           fsr0h	equ	0xFEA
  9027                           fsr0l	equ	0xFE9
  9028                           wreg	equ	0xFE8
  9029                           fsr1h	equ	0xFE2
  9030                           fsr1l	equ	0xFE1
  9031                           indf2	equ	0xFDF
  9032                           postinc2	equ	0xFDE
  9033                           postdec2	equ	0xFDD
  9034                           fsr2h	equ	0xFDA
  9035                           fsr2l	equ	0xFD9
  9036                           status	equ	0xFD8
  9037                           
  9038 ;; *************** function i2___lwdiv *****************
  9039 ;; Defined at:
  9040 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  dividend        2    0[COMRAM] unsigned int 
  9043 ;;  divisor         2    2[COMRAM] unsigned int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9046 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  2    0[COMRAM] unsigned int 
  9049 ;; Registers used:
  9050 ;;		wreg, status,2, status,0
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9060 ;;Total ram usage:        7 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		i2_printf
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text33
  9070  002C4C                     __ptext33:
  9071                           	opt stack 0
  9072  002C4C                     i2___lwdiv:
  9073                           	opt stack 24
  9074                           
  9075                           ;incstack = 0
  9076  002C4C  0E00               	movlw	0
  9077  002C4E  6E06               	movwf	i2___lwdiv@quotient+1,c
  9078  002C50  0E00               	movlw	0
  9079  002C52  6E05               	movwf	i2___lwdiv@quotient,c
  9080  002C54  5003               	movf	i2___lwdiv@divisor,w,c
  9081  002C56  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9082  002C58  B4D8               	btfsc	status,2,c
  9083  002C5A  D01C               	goto	i2l902
  9084  002C5C  0E01               	movlw	1
  9085  002C5E  6E07               	movwf	i2___lwdiv@counter,c
  9086  002C60  D004               	goto	i2l4342
  9087  002C62                     i2l4340:
  9088  002C62  90D8               	bcf	status,0,c
  9089  002C64  3603               	rlcf	i2___lwdiv@divisor,f,c
  9090  002C66  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9091  002C68  2A07               	incf	i2___lwdiv@counter,f,c
  9092  002C6A                     i2l4342:
  9093  002C6A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9094  002C6C  D7FA               	goto	i2l4340
  9095  002C6E                     i2l4344:
  9096  002C6E  90D8               	bcf	status,0,c
  9097  002C70  3605               	rlcf	i2___lwdiv@quotient,f,c
  9098  002C72  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9099  002C74  5003               	movf	i2___lwdiv@divisor,w,c
  9100  002C76  5C01               	subwf	i2___lwdiv@dividend,w,c
  9101  002C78  5004               	movf	i2___lwdiv@divisor+1,w,c
  9102  002C7A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9103  002C7C  A0D8               	btfss	status,0,c
  9104  002C7E  D005               	goto	i2l4352
  9105  002C80  5003               	movf	i2___lwdiv@divisor,w,c
  9106  002C82  5E01               	subwf	i2___lwdiv@dividend,f,c
  9107  002C84  5004               	movf	i2___lwdiv@divisor+1,w,c
  9108  002C86  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9109  002C88  8005               	bsf	i2___lwdiv@quotient,0,c
  9110  002C8A                     i2l4352:
  9111  002C8A  90D8               	bcf	status,0,c
  9112  002C8C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9113  002C8E  3203               	rrcf	i2___lwdiv@divisor,f,c
  9114  002C90  2E07               	decfsz	i2___lwdiv@counter,f,c
  9115  002C92  D7ED               	goto	i2l4344
  9116  002C94                     i2l902:
  9117  002C94  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9118  002C98  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9119  002C9C  0012               	return		;funcret
  9120  002C9E                     __end_ofi2___lwdiv:
  9121                           	opt stack 0
  9122                           pclatu	equ	0xFFB
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           intcon3	equ	0xFF0
  9133                           postinc0	equ	0xFEE
  9134                           fsr0h	equ	0xFEA
  9135                           fsr0l	equ	0xFE9
  9136                           wreg	equ	0xFE8
  9137                           fsr1h	equ	0xFE2
  9138                           fsr1l	equ	0xFE1
  9139                           indf2	equ	0xFDF
  9140                           postinc2	equ	0xFDE
  9141                           postdec2	equ	0xFDD
  9142                           fsr2h	equ	0xFDA
  9143                           fsr2l	equ	0xFD9
  9144                           status	equ	0xFD8
  9145                           
  9146 ;; *************** function i2_lcdInst *****************
  9147 ;; Defined at:
  9148 ;;		line 26 in file "lcd.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;  data            1    wreg     unsigned char 
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;  data            1    2[COMRAM] unsigned char 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      void 
  9155 ;; Registers used:
  9156 ;;		wreg, status,2, status,0, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;Total ram usage:        1 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    1
  9169 ;; This function calls:
  9170 ;;		i2_lcdNibble
  9171 ;; This function is called by:
  9172 ;;		_isr
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text34
  9177  003074                     __ptext34:
  9178                           	opt stack 0
  9179  003074                     i2_lcdInst:
  9180                           	opt stack 24
  9181                           
  9182                           ;incstack = 0
  9183                           ;i2lcdInst@data stored from wreg
  9184  003074  6E03               	movwf	i2lcdInst@data,c
  9185                           
  9186                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  9187  003076  948C               	bcf	3980,2,c	;volatile
  9188                           
  9189                           ;lcd.c: 28: lcdNibble(data);
  9190  003078  5003               	movf	i2lcdInst@data,w,c
  9191  00307A  EC77  F016         	call	i2_lcdNibble
  9192  00307E  0012               	return		;funcret
  9193  003080                     __end_ofi2_lcdInst:
  9194                           	opt stack 0
  9195                           pclatu	equ	0xFFB
  9196                           pclath	equ	0xFFA
  9197                           tblptru	equ	0xFF8
  9198                           tblptrh	equ	0xFF7
  9199                           tblptrl	equ	0xFF6
  9200                           tablat	equ	0xFF5
  9201                           prodh	equ	0xFF4
  9202                           prodl	equ	0xFF3
  9203                           intcon	equ	0xFF2
  9204                           intcon2	equ	0xFF1
  9205                           intcon3	equ	0xFF0
  9206                           postinc0	equ	0xFEE
  9207                           fsr0h	equ	0xFEA
  9208                           fsr0l	equ	0xFE9
  9209                           wreg	equ	0xFE8
  9210                           fsr1h	equ	0xFE2
  9211                           fsr1l	equ	0xFE1
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           postdec2	equ	0xFDD
  9215                           fsr2h	equ	0xFDA
  9216                           fsr2l	equ	0xFD9
  9217                           status	equ	0xFD8
  9218                           
  9219 ;; *************** function i2_lcdNibble *****************
  9220 ;; Defined at:
  9221 ;;		line 36 in file "lcd.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;  data            1    wreg     unsigned char 
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;  data            1    1[COMRAM] unsigned char 
  9226 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, status,2, status,0
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;Total ram usage:        2 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; This function calls:
  9243 ;;		Nothing
  9244 ;; This function is called by:
  9245 ;;		i2_lcdInst
  9246 ;;		i2_putch
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text35
  9251  002CEE                     __ptext35:
  9252                           	opt stack 0
  9253  002CEE                     i2_lcdNibble:
  9254                           	opt stack 23
  9255                           
  9256                           ;incstack = 0
  9257                           ;i2lcdNibble@data stored from wreg
  9258  002CEE  6E02               	movwf	i2lcdNibble@data,c
  9259                           
  9260                           ;lcd.c: 38: char temp = data & 0xF0;
  9261  002CF0  5002               	movf	i2lcdNibble@data,w,c
  9262  002CF2  0BF0               	andlw	240
  9263  002CF4  6E01               	movwf	i2lcdNibble@temp,c
  9264                           
  9265                           ;lcd.c: 39: LATD = LATD & 0x0F;
  9266  002CF6  508C               	movf	3980,w,c	;volatile
  9267  002CF8  0B0F               	andlw	15
  9268  002CFA  6E8C               	movwf	3980,c	;volatile
  9269                           
  9270                           ;lcd.c: 40: LATD = temp | LATD;
  9271  002CFC  5001               	movf	i2lcdNibble@temp,w,c
  9272  002CFE  108C               	iorwf	3980,w,c	;volatile
  9273  002D00  6E8C               	movwf	3980,c	;volatile
  9274                           
  9275                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  9276  002D02  968C               	bcf	3980,3,c	;volatile
  9277                           
  9278                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9279  002D04  0E19               	movlw	25
  9280  002D06                     i2u568_47:
  9281  002D06  2EE8               	decfsz	wreg,f,c
  9282  002D08  D7FE               	bra	i2u568_47
  9283                           
  9284                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  9285  002D0A  868C               	bsf	3980,3,c	;volatile
  9286                           
  9287                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9288  002D0C  0E19               	movlw	25
  9289  002D0E                     i2u569_47:
  9290  002D0E  2EE8               	decfsz	wreg,f,c
  9291  002D10  D7FE               	bra	i2u569_47
  9292                           
  9293                           ;lcd.c: 47: data = data << 4;
  9294  002D12  3802               	swapf	i2lcdNibble@data,w,c
  9295  002D14  0BF0               	andlw	240
  9296  002D16  6E02               	movwf	i2lcdNibble@data,c
  9297                           
  9298                           ;lcd.c: 49: temp = data & 0xF0;
  9299  002D18  5002               	movf	i2lcdNibble@data,w,c
  9300  002D1A  0BF0               	andlw	240
  9301  002D1C  6E01               	movwf	i2lcdNibble@temp,c
  9302                           
  9303                           ;lcd.c: 50: LATD = LATD & 0x0F;
  9304  002D1E  508C               	movf	3980,w,c	;volatile
  9305  002D20  0B0F               	andlw	15
  9306  002D22  6E8C               	movwf	3980,c	;volatile
  9307                           
  9308                           ;lcd.c: 51: LATD = temp | LATD;
  9309  002D24  5001               	movf	i2lcdNibble@temp,w,c
  9310  002D26  108C               	iorwf	3980,w,c	;volatile
  9311  002D28  6E8C               	movwf	3980,c	;volatile
  9312                           
  9313                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  9314  002D2A  968C               	bcf	3980,3,c	;volatile
  9315                           
  9316                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9317  002D2C  0E19               	movlw	25
  9318  002D2E                     i2u570_47:
  9319  002D2E  2EE8               	decfsz	wreg,f,c
  9320  002D30  D7FE               	bra	i2u570_47
  9321                           
  9322                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  9323  002D32  868C               	bsf	3980,3,c	;volatile
  9324                           
  9325                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  9326  002D34  0E19               	movlw	25
  9327  002D36                     i2u571_47:
  9328  002D36  2EE8               	decfsz	wreg,f,c
  9329  002D38  D7FE               	bra	i2u571_47
  9330  002D3A  0012               	return		;funcret
  9331  002D3C                     __end_ofi2_lcdNibble:
  9332                           	opt stack 0
  9333                           pclatu	equ	0xFFB
  9334                           pclath	equ	0xFFA
  9335                           tblptru	equ	0xFF8
  9336                           tblptrh	equ	0xFF7
  9337                           tblptrl	equ	0xFF6
  9338                           tablat	equ	0xFF5
  9339                           prodh	equ	0xFF4
  9340                           prodl	equ	0xFF3
  9341                           intcon	equ	0xFF2
  9342                           intcon2	equ	0xFF1
  9343                           intcon3	equ	0xFF0
  9344                           postinc0	equ	0xFEE
  9345                           fsr0h	equ	0xFEA
  9346                           fsr0l	equ	0xFE9
  9347                           wreg	equ	0xFE8
  9348                           fsr1h	equ	0xFE2
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _servo_rotate0 *****************
  9358 ;; Defined at:
  9359 ;;		line 378 in file "main.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  degree          2   14[COMRAM] int 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  j               2   22[COMRAM] unsigned int 
  9364 ;;  i               2   20[COMRAM] unsigned int 
  9365 ;;  duty            2   18[COMRAM] int 
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  1    wreg      void 
  9368 ;; Registers used:
  9369 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;Total ram usage:       10 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    1
  9382 ;; This function calls:
  9383 ;;		___awdiv
  9384 ;;		i2___wmul
  9385 ;; This function is called by:
  9386 ;;		_isr
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text36
  9391  0025DA                     __ptext36:
  9392                           	opt stack 0
  9393  0025DA                     _servo_rotate0:
  9394                           	opt stack 24
  9395                           
  9396                           ;main.c: 379: unsigned int i;
  9397                           ;main.c: 380: unsigned int j;
  9398                           ;main.c: 381: int duty = degree*10/90;
  9399                           
  9400                           ;incstack = 0
  9401  0025DA  C00F  F001         	movff	servo_rotate0@degree,i2___wmul@multiplier
  9402  0025DE  C010  F002         	movff	servo_rotate0@degree+1,i2___wmul@multiplier+1
  9403  0025E2  0E00               	movlw	0
  9404  0025E4  6E04               	movwf	i2___wmul@multiplicand+1,c
  9405  0025E6  0E0A               	movlw	10
  9406  0025E8  6E03               	movwf	i2___wmul@multiplicand,c
  9407  0025EA  ECC4  F017         	call	i2___wmul	;wreg free
  9408  0025EE  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9409  0025F2  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9410  0025F6  0E00               	movlw	0
  9411  0025F8  6E0A               	movwf	___awdiv@divisor+1,c
  9412  0025FA  0E5A               	movlw	90
  9413  0025FC  6E09               	movwf	___awdiv@divisor,c
  9414  0025FE  EC79  F014         	call	___awdiv	;wreg free
  9415  002602  C007  F013         	movff	?___awdiv,servo_rotate0@duty
  9416  002606  C008  F014         	movff	?___awdiv+1,servo_rotate0@duty+1
  9417                           
  9418                           ;main.c: 382: for (i=0; i<50; i++) {
  9419  00260A  0E00               	movlw	0
  9420  00260C  6E16               	movwf	servo_rotate0@i+1,c
  9421  00260E  0E00               	movlw	0
  9422  002610  6E15               	movwf	servo_rotate0@i,c
  9423  002612                     i2l4568:
  9424  002612  5016               	movf	servo_rotate0@i+1,w,c
  9425  002614  E137               	bnz	i2l318
  9426  002616  0E32               	movlw	50
  9427  002618  5C15               	subwf	servo_rotate0@i,w,c
  9428  00261A  B0D8               	btfsc	status,0,c
  9429  00261C  0012               	return	
  9430                           
  9431                           ;main.c: 383: PORTCbits.RC0 = 1;
  9432  00261E  8082               	bsf	3970,0,c	;volatile
  9433                           
  9434                           ;main.c: 384: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
  9435  002620  0E00               	movlw	0
  9436  002622  6E18               	movwf	servo_rotate0@j+1,c
  9437  002624  0E00               	movlw	0
  9438  002626  6E17               	movwf	servo_rotate0@j,c
  9439  002628  D006               	goto	i2l312
  9440  00262A                     i2l4574:
  9441  00262A  0E53               	movlw	83
  9442  00262C                     i2u572_47:
  9443  00262C  2EE8               	decfsz	wreg,f,c
  9444  00262E  D7FE               	bra	i2u572_47
  9445  002630  F000               	nop	
  9446  002632  4A17               	infsnz	servo_rotate0@j,f,c
  9447  002634  2A18               	incf	servo_rotate0@j+1,f,c
  9448  002636                     i2l312:
  9449  002636  5013               	movf	servo_rotate0@duty,w,c
  9450  002638  5C17               	subwf	servo_rotate0@j,w,c
  9451  00263A  5014               	movf	servo_rotate0@duty+1,w,c
  9452  00263C  5818               	subwfb	servo_rotate0@j+1,w,c
  9453  00263E  A0D8               	btfss	status,0,c
  9454  002640  D7F4               	goto	i2l4574
  9455                           
  9456                           ;main.c: 385: PORTCbits.RC0 = 0;
  9457  002642  9082               	bcf	3970,0,c	;volatile
  9458                           
  9459                           ;main.c: 386: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
  9460  002644  0E00               	movlw	0
  9461  002646  6E18               	movwf	servo_rotate0@j+1,c
  9462  002648  0E00               	movlw	0
  9463  00264A  6E17               	movwf	servo_rotate0@j,c
  9464  00264C  D006               	goto	i2l315
  9465  00264E                     i2l4580:
  9466  00264E  0E53               	movlw	83
  9467  002650                     i2u573_47:
  9468  002650  2EE8               	decfsz	wreg,f,c
  9469  002652  D7FE               	bra	i2u573_47
  9470  002654  F000               	nop	
  9471  002656  4A17               	infsnz	servo_rotate0@j,f,c
  9472  002658  2A18               	incf	servo_rotate0@j+1,f,c
  9473  00265A                     i2l315:
  9474  00265A  C013  F011         	movff	servo_rotate0@duty,??_servo_rotate0
  9475  00265E  C014  F012         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
  9476  002662  1E11               	comf	??_servo_rotate0,f,c
  9477  002664  1E12               	comf	??_servo_rotate0+1,f,c
  9478  002666  4A11               	infsnz	??_servo_rotate0,f,c
  9479  002668  2A12               	incf	??_servo_rotate0+1,f,c
  9480  00266A  0EC8               	movlw	200
  9481  00266C  2611               	addwf	??_servo_rotate0,f,c
  9482  00266E  0E00               	movlw	0
  9483  002670  2212               	addwfc	??_servo_rotate0+1,f,c
  9484  002672  5011               	movf	??_servo_rotate0,w,c
  9485  002674  5C17               	subwf	servo_rotate0@j,w,c
  9486  002676  5012               	movf	??_servo_rotate0+1,w,c
  9487  002678  5818               	subwfb	servo_rotate0@j+1,w,c
  9488  00267A  A0D8               	btfss	status,0,c
  9489  00267C  D7E8               	goto	i2l4580
  9490  00267E  4A15               	infsnz	servo_rotate0@i,f,c
  9491  002680  2A16               	incf	servo_rotate0@i+1,f,c
  9492  002682  D7C7               	goto	i2l4568
  9493  002684                     i2l318:
  9494  002684  0012               	return		;funcret
  9495  002686                     __end_of_servo_rotate0:
  9496                           	opt stack 0
  9497                           pclatu	equ	0xFFB
  9498                           pclath	equ	0xFFA
  9499                           tblptru	equ	0xFF8
  9500                           tblptrh	equ	0xFF7
  9501                           tblptrl	equ	0xFF6
  9502                           tablat	equ	0xFF5
  9503                           prodh	equ	0xFF4
  9504                           prodl	equ	0xFF3
  9505                           intcon	equ	0xFF2
  9506                           intcon2	equ	0xFF1
  9507                           intcon3	equ	0xFF0
  9508                           postinc0	equ	0xFEE
  9509                           fsr0h	equ	0xFEA
  9510                           fsr0l	equ	0xFE9
  9511                           wreg	equ	0xFE8
  9512                           fsr1h	equ	0xFE2
  9513                           fsr1l	equ	0xFE1
  9514                           indf2	equ	0xFDF
  9515                           postinc2	equ	0xFDE
  9516                           postdec2	equ	0xFDD
  9517                           fsr2h	equ	0xFDA
  9518                           fsr2l	equ	0xFD9
  9519                           status	equ	0xFD8
  9520                           
  9521 ;; *************** function _read_time *****************
  9522 ;; Defined at:
  9523 ;;		line 272 in file "main.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;		None
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;  i               1    3[COMRAM] unsigned char 
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  1    wreg      void 
  9530 ;; Registers used:
  9531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9541 ;;Total ram usage:        1 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    2
  9544 ;; This function calls:
  9545 ;;		i2_I2C_Master_Read
  9546 ;;		i2_I2C_Master_Start
  9547 ;;		i2_I2C_Master_Stop
  9548 ;;		i2_I2C_Master_Write
  9549 ;; This function is called by:
  9550 ;;		_isr
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text37
  9555  002A66                     __ptext37:
  9556                           	opt stack 0
  9557  002A66                     _read_time:
  9558                           	opt stack 23
  9559                           
  9560                           ;main.c: 274: I2C_Master_Start();
  9561                           
  9562                           ;incstack = 0
  9563  002A66  EC56  F018         	call	i2_I2C_Master_Start	;wreg free
  9564                           
  9565                           ;main.c: 275: I2C_Master_Write(0b11010000);
  9566  002A6A  0E00               	movlw	0
  9567  002A6C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9568  002A6E  0ED0               	movlw	208
  9569  002A70  6E02               	movwf	i2I2C_Master_Write@d,c
  9570  002A72  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  9571                           
  9572                           ;main.c: 276: I2C_Master_Write(0x00);
  9573  002A76  0E00               	movlw	0
  9574  002A78  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9575  002A7A  0E00               	movlw	0
  9576  002A7C  6E02               	movwf	i2I2C_Master_Write@d,c
  9577  002A7E  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  9578                           
  9579                           ;main.c: 277: I2C_Master_Stop();
  9580  002A82  EC52  F018         	call	i2_I2C_Master_Stop	;wreg free
  9581                           
  9582                           ;main.c: 280: I2C_Master_Start();
  9583  002A86  EC56  F018         	call	i2_I2C_Master_Start	;wreg free
  9584                           
  9585                           ;main.c: 281: I2C_Master_Write(0b11010001);
  9586  002A8A  0E00               	movlw	0
  9587  002A8C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  9588  002A8E  0ED1               	movlw	209
  9589  002A90  6E02               	movwf	i2I2C_Master_Write@d,c
  9590  002A92  EC45  F018         	call	i2_I2C_Master_Write	;wreg free
  9591                           
  9592                           ;main.c: 282: for(unsigned char i=0;i<0x06;i++){
  9593  002A96  0E00               	movlw	0
  9594  002A98  6E04               	movwf	read_time@i,c
  9595  002A9A                     i2l4532:
  9596  002A9A  0E05               	movlw	5
  9597  002A9C  6404               	cpfsgt	read_time@i,c
  9598  002A9E  D001               	goto	i2l4536
  9599  002AA0  D00E               	goto	i2l4542
  9600  002AA2                     i2l4536:
  9601                           
  9602                           ;main.c: 283: time[i] = I2C_Master_Read(1);
  9603  002AA2  5004               	movf	read_time@i,w,c
  9604  002AA4  0D01               	mullw	1
  9605  002AA6  0EC9               	movlw	low _time
  9606  002AA8  24F3               	addwf	prodl,w,c
  9607  002AAA  6ED9               	movwf	fsr2l,c
  9608  002AAC  0E00               	movlw	high _time
  9609  002AAE  20F4               	addwfc	prodh,w,c
  9610  002AB0  6EDA               	movwf	fsr2h,c
  9611  002AB2  0E01               	movlw	1
  9612  002AB4  ECB1  F017         	call	i2_I2C_Master_Read
  9613  002AB8  6EDF               	movwf	indf2,c
  9614  002ABA  2A04               	incf	read_time@i,f,c
  9615  002ABC  D7EE               	goto	i2l4532
  9616  002ABE                     i2l4542:
  9617                           
  9618                           ;main.c: 284: }
  9619                           ;main.c: 285: time[6] = I2C_Master_Read(0);
  9620  002ABE  0E00               	movlw	0
  9621  002AC0  ECB1  F017         	call	i2_I2C_Master_Read
  9622  002AC4  0100               	movlb	0	; () banked
  9623  002AC6  6FCF               	movwf	(_time+6)& (0+255),b
  9624                           
  9625                           ;main.c: 286: I2C_Master_Stop();
  9626  002AC8  EC52  F018         	call	i2_I2C_Master_Stop	;wreg free
  9627  002ACC  0012               	return	
  9628  002ACE                     __end_of_read_time:
  9629                           	opt stack 0
  9630                           pclatu	equ	0xFFB
  9631                           pclath	equ	0xFFA
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           intcon	equ	0xFF2
  9639                           intcon2	equ	0xFF1
  9640                           intcon3	equ	0xFF0
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           fsr1h	equ	0xFE2
  9646                           fsr1l	equ	0xFE1
  9647                           indf2	equ	0xFDF
  9648                           postinc2	equ	0xFDE
  9649                           postdec2	equ	0xFDD
  9650                           fsr2h	equ	0xFDA
  9651                           fsr2l	equ	0xFD9
  9652                           status	equ	0xFD8
  9653                           
  9654 ;; *************** function i2_I2C_Master_Write *****************
  9655 ;; Defined at:
  9656 ;;		line 47 in file "I2C.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  d               2    1[COMRAM] unsigned int 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9673 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;Total ram usage:        2 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    1
  9677 ;; This function calls:
  9678 ;;		i2_I2C_Master_Wait
  9679 ;; This function is called by:
  9680 ;;		_read_time
  9681 ;;		i2_read_colorsensor
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text38
  9686  00308A                     __ptext38:
  9687                           	opt stack 0
  9688  00308A                     i2_I2C_Master_Write:
  9689                           	opt stack 23
  9690                           
  9691                           ;I2C.c: 49: I2C_Master_Wait();
  9692                           
  9693                           ;incstack = 0
  9694  00308A  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9695                           
  9696                           ;I2C.c: 50: SSPBUF = d;
  9697  00308E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  9698  003092  0012               	return		;funcret
  9699  003094                     __end_ofi2_I2C_Master_Write:
  9700                           	opt stack 0
  9701                           pclatu	equ	0xFFB
  9702                           pclath	equ	0xFFA
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           intcon2	equ	0xFF1
  9711                           intcon3	equ	0xFF0
  9712                           postinc0	equ	0xFEE
  9713                           fsr0h	equ	0xFEA
  9714                           fsr0l	equ	0xFE9
  9715                           wreg	equ	0xFE8
  9716                           fsr1h	equ	0xFE2
  9717                           fsr1l	equ	0xFE1
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           postdec2	equ	0xFDD
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function i2_I2C_Master_Stop *****************
  9726 ;; Defined at:
  9727 ;;		line 41 in file "I2C.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      void 
  9734 ;; Registers used:
  9735 ;;		wreg, status,2, status,0, cstack
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:    1
  9748 ;; This function calls:
  9749 ;;		i2_I2C_Master_Wait
  9750 ;; This function is called by:
  9751 ;;		_read_time
  9752 ;;		i2_read_colorsensor
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text39
  9757  0030A4                     __ptext39:
  9758                           	opt stack 0
  9759  0030A4                     i2_I2C_Master_Stop:
  9760                           	opt stack 23
  9761                           
  9762                           ;I2C.c: 43: I2C_Master_Wait();
  9763                           
  9764                           ;incstack = 0
  9765  0030A4  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9766                           
  9767                           ;I2C.c: 44: PEN = 1;
  9768  0030A8  84C5               	bsf	4037,2,c	;volatile
  9769  0030AA  0012               	return		;funcret
  9770  0030AC                     __end_ofi2_I2C_Master_Stop:
  9771                           	opt stack 0
  9772                           pclatu	equ	0xFFB
  9773                           pclath	equ	0xFFA
  9774                           tblptru	equ	0xFF8
  9775                           tblptrh	equ	0xFF7
  9776                           tblptrl	equ	0xFF6
  9777                           tablat	equ	0xFF5
  9778                           prodh	equ	0xFF4
  9779                           prodl	equ	0xFF3
  9780                           intcon	equ	0xFF2
  9781                           intcon2	equ	0xFF1
  9782                           intcon3	equ	0xFF0
  9783                           postinc0	equ	0xFEE
  9784                           fsr0h	equ	0xFEA
  9785                           fsr0l	equ	0xFE9
  9786                           wreg	equ	0xFE8
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function i2_I2C_Master_Start *****************
  9797 ;; Defined at:
  9798 ;;		line 29 in file "I2C.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  1    wreg      void 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;Total ram usage:        0 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    1
  9819 ;; This function calls:
  9820 ;;		i2_I2C_Master_Wait
  9821 ;; This function is called by:
  9822 ;;		_read_time
  9823 ;;		i2_read_colorsensor
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text40
  9828  0030AC                     __ptext40:
  9829                           	opt stack 0
  9830  0030AC                     i2_I2C_Master_Start:
  9831                           	opt stack 23
  9832                           
  9833                           ;I2C.c: 31: I2C_Master_Wait();
  9834                           
  9835                           ;incstack = 0
  9836  0030AC  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9837                           
  9838                           ;I2C.c: 32: SEN = 1;
  9839  0030B0  80C5               	bsf	4037,0,c	;volatile
  9840  0030B2  0012               	return		;funcret
  9841  0030B4                     __end_ofi2_I2C_Master_Start:
  9842                           	opt stack 0
  9843                           pclatu	equ	0xFFB
  9844                           pclath	equ	0xFFA
  9845                           tblptru	equ	0xFF8
  9846                           tblptrh	equ	0xFF7
  9847                           tblptrl	equ	0xFF6
  9848                           tablat	equ	0xFF5
  9849                           prodh	equ	0xFF4
  9850                           prodl	equ	0xFF3
  9851                           intcon	equ	0xFF2
  9852                           intcon2	equ	0xFF1
  9853                           intcon3	equ	0xFF0
  9854                           postinc0	equ	0xFEE
  9855                           fsr0h	equ	0xFEA
  9856                           fsr0l	equ	0xFE9
  9857                           wreg	equ	0xFE8
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function i2_I2C_Master_Read *****************
  9868 ;; Defined at:
  9869 ;;		line 61 in file "I2C.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  a               1    wreg     unsigned char 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;  a               1    1[COMRAM] unsigned char 
  9874 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      unsigned char 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2, status,0, cstack
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;Total ram usage:        2 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    1
  9891 ;; This function calls:
  9892 ;;		i2_I2C_Master_Wait
  9893 ;; This function is called by:
  9894 ;;		_read_time
  9895 ;;		i2_read_colorsensor
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text41
  9900  002F62                     __ptext41:
  9901                           	opt stack 0
  9902  002F62                     i2_I2C_Master_Read:
  9903                           	opt stack 23
  9904                           
  9905                           ;incstack = 0
  9906                           ;i2I2C_Master_Read@a stored from wreg
  9907  002F62  6E02               	movwf	i2I2C_Master_Read@a,c
  9908                           
  9909                           ;I2C.c: 63: unsigned char temp;
  9910                           ;I2C.c: 64: I2C_Master_Wait();
  9911  002F64  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9912                           
  9913                           ;I2C.c: 65: RCEN = 1;
  9914  002F68  86C5               	bsf	4037,3,c	;volatile
  9915                           
  9916                           ;I2C.c: 66: I2C_Master_Wait();
  9917  002F6A  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9918                           
  9919                           ;I2C.c: 67: temp = SSPBUF;
  9920  002F6E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  9921                           
  9922                           ;I2C.c: 68: I2C_Master_Wait();
  9923  002F72  EC1B  F018         	call	i2_I2C_Master_Wait	;wreg free
  9924                           
  9925                           ;I2C.c: 69: ACKDT = (a)?0:1;
  9926  002F76  5002               	movf	i2I2C_Master_Read@a,w,c
  9927  002F78  A4D8               	btfss	status,2,c
  9928  002F7A  D002               	goto	i2u460_40
  9929  002F7C  8AC5               	bsf	4037,5,c	;volatile
  9930  002F7E  D001               	goto	i2l4312
  9931  002F80                     i2u460_40:
  9932  002F80  9AC5               	bcf	4037,5,c	;volatile
  9933  002F82                     i2l4312:
  9934                           
  9935                           ;I2C.c: 70: ACKEN = 1;
  9936  002F82  88C5               	bsf	4037,4,c	;volatile
  9937                           
  9938                           ;I2C.c: 71: return temp;
  9939  002F84  5003               	movf	i2I2C_Master_Read@temp,w,c
  9940  002F86  0012               	return	
  9941  002F88                     __end_ofi2_I2C_Master_Read:
  9942                           	opt stack 0
  9943                           pclatu	equ	0xFFB
  9944                           pclath	equ	0xFFA
  9945                           tblptru	equ	0xFF8
  9946                           tblptrh	equ	0xFF7
  9947                           tblptrl	equ	0xFF6
  9948                           tablat	equ	0xFF5
  9949                           prodh	equ	0xFF4
  9950                           prodl	equ	0xFF3
  9951                           intcon	equ	0xFF2
  9952                           intcon2	equ	0xFF1
  9953                           intcon3	equ	0xFF0
  9954                           postinc0	equ	0xFEE
  9955                           fsr0h	equ	0xFEA
  9956                           fsr0l	equ	0xFE9
  9957                           wreg	equ	0xFE8
  9958                           fsr1h	equ	0xFE2
  9959                           fsr1l	equ	0xFE1
  9960                           indf2	equ	0xFDF
  9961                           postinc2	equ	0xFDE
  9962                           postdec2	equ	0xFDD
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8
  9966                           
  9967 ;; *************** function i2_I2C_Master_Wait *****************
  9968 ;; Defined at:
  9969 ;;		line 24 in file "I2C.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;Total ram usage:        1 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		i2_I2C_Master_Start
  9993 ;;		i2_I2C_Master_Stop
  9994 ;;		i2_I2C_Master_Write
  9995 ;;		i2_I2C_Master_Read
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text42
 10000  003036                     __ptext42:
 10001                           	opt stack 0
 10002  003036                     i2_I2C_Master_Wait:
 10003                           	opt stack 23
 10004  003036                     i2l34:
 10005  003036  B4C7               	btfsc	4039,2,c	;volatile
 10006  003038  D7FE               	goto	i2l34
 10007  00303A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 10008  00303E  0E1F               	movlw	31
 10009  003040  1601               	andwf	??i2_I2C_Master_Wait,f,c
 10010  003042  B4D8               	btfsc	status,2,c
 10011  003044  0012               	return	
 10012  003046  D7F7               	goto	i2l34
 10013  003048                     __end_ofi2_I2C_Master_Wait:
 10014                           	opt stack 0
 10015                           pclatu	equ	0xFFB
 10016                           pclath	equ	0xFFA
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon	equ	0xFF2
 10024                           intcon2	equ	0xFF1
 10025                           intcon3	equ	0xFF0
 10026                           postinc0	equ	0xFEE
 10027                           fsr0h	equ	0xFEA
 10028                           fsr0l	equ	0xFE9
 10029                           wreg	equ	0xFE8
 10030                           fsr1h	equ	0xFE2
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           fsr2h	equ	0xFDA
 10036                           fsr2l	equ	0xFD9
 10037                           status	equ	0xFD8
 10038                           
 10039 ;; *************** function _dec_to_hex *****************
 10040 ;; Defined at:
 10041 ;;		line 233 in file "main.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  num             2   98[COMRAM] int 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  quotient        2  112[COMRAM] int 
 10046 ;;  hexnum          2  110[COMRAM] int 
 10047 ;;  i               2  108[COMRAM] int 
 10048 ;;  temp            2  106[COMRAM] int 
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  2   98[COMRAM] int 
 10051 ;; Registers used:
 10052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10053 ;; Tracked objects:
 10054 ;;		On entry : 0/0
 10055 ;;		On exit  : 0/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10058 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;Total ram usage:       16 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; Hardware stack levels required when called:    5
 10065 ;; This function calls:
 10066 ;;		___awdiv
 10067 ;;		___awtoft
 10068 ;;		___ftadd
 10069 ;;		___ftmul
 10070 ;;		___fttol
 10071 ;;		_pow
 10072 ;; This function is called by:
 10073 ;;		_isr
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           	psect	text43
 10078  001BD4                     __ptext43:
 10079                           	opt stack 0
 10080  001BD4                     _dec_to_hex:
 10081                           	opt stack 20
 10082                           
 10083                           ;main.c: 234: int i = 0, quotient = num, temp, hexnum = 0;
 10084                           
 10085                           ;incstack = 0
 10086  001BD4  0E00               	movlw	0
 10087  001BD6  6E6E               	movwf	dec_to_hex@i+1,c
 10088  001BD8  0E00               	movlw	0
 10089  001BDA  6E6D               	movwf	dec_to_hex@i,c
 10090  001BDC  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
 10091  001BE0  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 10092  001BE4  0E00               	movlw	0
 10093  001BE6  6E70               	movwf	dec_to_hex@hexnum+1,c
 10094  001BE8  0E00               	movlw	0
 10095  001BEA  6E6F               	movwf	dec_to_hex@hexnum,c
 10096                           
 10097                           ;main.c: 236: while (quotient != 0) {
 10098  001BEC  D068               	goto	i2l4562
 10099  001BEE                     i2l4550:
 10100                           
 10101                           ;main.c: 237: temp = quotient % 16;
 10102  001BEE  0E0F               	movlw	15
 10103  001BF0  1471               	andwf	dec_to_hex@quotient,w,c
 10104  001BF2  6E6B               	movwf	dec_to_hex@temp,c
 10105  001BF4  6A6C               	clrf	dec_to_hex@temp+1,c
 10106                           
 10107                           ;main.c: 239: hexnum += temp*pow(10,i);
 10108  001BF6  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
 10109  001BFA  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
 10110  001BFE  ECFE  F016         	call	___awtoft	;wreg free
 10111  001C02  C009  F065         	movff	?___awtoft,_dec_to_hex$1150
 10112  001C06  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1150+1
 10113  001C0A  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1150+2
 10114                           
 10115                           ;main.c: 239: hexnum += temp*pow(10,i);
 10116  001C0E  C065  F055         	movff	_dec_to_hex$1150,pow@y
 10117  001C12  C066  F056         	movff	_dec_to_hex$1150+1,pow@y+1
 10118  001C16  C067  F057         	movff	_dec_to_hex$1150+2,pow@y+2
 10119  001C1A  0E00               	movlw	0
 10120  001C1C  6E52               	movwf	pow@x,c
 10121  001C1E  0E20               	movlw	32
 10122  001C20  6E53               	movwf	pow@x+1,c
 10123  001C22  0E41               	movlw	65
 10124  001C24  6E54               	movwf	pow@x+2,c
 10125  001C26  EC79  F00B         	call	_pow	;wreg free
 10126  001C2A  C052  F068         	movff	?_pow,_dec_to_hex$1151
 10127  001C2E  C053  F069         	movff	?_pow+1,_dec_to_hex$1151+1
 10128  001C32  C054  F06A         	movff	?_pow+2,_dec_to_hex$1151+2
 10129                           
 10130                           ;main.c: 239: hexnum += temp*pow(10,i);
 10131  001C36  C068  F010         	movff	_dec_to_hex$1151,___ftmul@f2
 10132  001C3A  C069  F011         	movff	_dec_to_hex$1151+1,___ftmul@f2+1
 10133  001C3E  C06A  F012         	movff	_dec_to_hex$1151+2,___ftmul@f2+2
 10134  001C42  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
 10135  001C46  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
 10136  001C4A  ECFE  F016         	call	___awtoft	;wreg free
 10137  001C4E  C009  F00D         	movff	?___awtoft,___ftmul@f1
 10138  001C52  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 10139  001C56  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 10140  001C5A  ECE2  F00E         	call	___ftmul	;wreg free
 10141  001C5E  C00D  F01F         	movff	?___ftmul,___ftadd@f2
 10142  001C62  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
 10143  001C66  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
 10144  001C6A  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
 10145  001C6E  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
 10146  001C72  ECFE  F016         	call	___awtoft	;wreg free
 10147  001C76  C009  F01C         	movff	?___awtoft,___ftadd@f1
 10148  001C7A  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
 10149  001C7E  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
 10150  001C82  ECA3  F00A         	call	___ftadd	;wreg free
 10151  001C86  C01C  F028         	movff	?___ftadd,___fttol@f1
 10152  001C8A  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
 10153  001C8E  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
 10154  001C92  EC68  F00E         	call	___fttol	;wreg free
 10155  001C96  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
 10156  001C9A  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
 10157                           
 10158                           ;main.c: 241: quotient = quotient / 16;
 10159  001C9E  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
 10160  001CA2  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
 10161  001CA6  0E00               	movlw	0
 10162  001CA8  6E0A               	movwf	___awdiv@divisor+1,c
 10163  001CAA  0E10               	movlw	16
 10164  001CAC  6E09               	movwf	___awdiv@divisor,c
 10165  001CAE  EC79  F014         	call	___awdiv	;wreg free
 10166  001CB2  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
 10167  001CB6  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
 10168                           
 10169                           ;main.c: 242: i += 1;
 10170  001CBA  4A6D               	infsnz	dec_to_hex@i,f,c
 10171  001CBC  2A6E               	incf	dec_to_hex@i+1,f,c
 10172  001CBE                     i2l4562:
 10173  001CBE  5071               	movf	dec_to_hex@quotient,w,c
 10174  001CC0  1072               	iorwf	dec_to_hex@quotient+1,w,c
 10175  001CC2  A4D8               	btfss	status,2,c
 10176  001CC4  D794               	goto	i2l4550
 10177                           
 10178                           ;main.c: 243: }
 10179                           ;main.c: 244: return hexnum;
 10180  001CC6  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
 10181  001CCA  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 10182  001CCE  0012               	return		;funcret
 10183  001CD0                     __end_of_dec_to_hex:
 10184                           	opt stack 0
 10185                           pclatu	equ	0xFFB
 10186                           pclath	equ	0xFFA
 10187                           tblptru	equ	0xFF8
 10188                           tblptrh	equ	0xFF7
 10189                           tblptrl	equ	0xFF6
 10190                           tablat	equ	0xFF5
 10191                           prodh	equ	0xFF4
 10192                           prodl	equ	0xFF3
 10193                           intcon	equ	0xFF2
 10194                           intcon2	equ	0xFF1
 10195                           intcon3	equ	0xFF0
 10196                           postinc0	equ	0xFEE
 10197                           fsr0h	equ	0xFEA
 10198                           fsr0l	equ	0xFE9
 10199                           wreg	equ	0xFE8
 10200                           fsr1h	equ	0xFE2
 10201                           fsr1l	equ	0xFE1
 10202                           indf2	equ	0xFDF
 10203                           postinc2	equ	0xFDE
 10204                           postdec2	equ	0xFDD
 10205                           fsr2h	equ	0xFDA
 10206                           fsr2l	equ	0xFD9
 10207                           status	equ	0xFD8
 10208                           
 10209 ;; *************** function _pow *****************
 10210 ;; Defined at:
 10211 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;  x               3   81[COMRAM] int 
 10214 ;;  y               3   84[COMRAM] int 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  yi              4   94[COMRAM] unsigned long 
 10217 ;;  sign            1   93[COMRAM] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;                  3   81[COMRAM] unsigned char 
 10220 ;; Registers used:
 10221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10227 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;Total ram usage:       17 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    4
 10234 ;; This function calls:
 10235 ;;		___ftge
 10236 ;;		___ftmul
 10237 ;;		___ftneg
 10238 ;;		___fttol
 10239 ;;		___lltoft
 10240 ;;		_exp
 10241 ;;		_log
 10242 ;; This function is called by:
 10243 ;;		_dec_to_hex
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text44
 10248  0016F2                     __ptext44:
 10249                           	opt stack 0
 10250  0016F2                     _pow:
 10251                           	opt stack 20
 10252                           
 10253                           ;incstack = 0
 10254  0016F2  0E00               	movlw	0
 10255  0016F4  6E5E               	movwf	pow@sign,c
 10256  0016F6  5052               	movf	pow@x,w,c
 10257  0016F8  1053               	iorwf	pow@x+1,w,c
 10258  0016FA  1054               	iorwf	pow@x+2,w,c
 10259  0016FC  A4D8               	btfss	status,2,c
 10260  0016FE  D01B               	goto	i2l4160
 10261  001700  0E00               	movlw	0
 10262  001702  6E01               	movwf	___ftge@ff1,c
 10263  001704  0E00               	movlw	0
 10264  001706  6E02               	movwf	___ftge@ff1+1,c
 10265  001708  0E00               	movlw	0
 10266  00170A  6E03               	movwf	___ftge@ff1+2,c
 10267  00170C  C055  F004         	movff	pow@y,___ftge@ff2
 10268  001710  C056  F005         	movff	pow@y+1,___ftge@ff2+1
 10269  001714  C057  F006         	movff	pow@y+2,___ftge@ff2+2
 10270  001718  EC31  F014         	call	___ftge	;wreg free
 10271  00171C  A0D8               	btfss	status,0,c
 10272  00171E  D004               	goto	i2l934
 10273  001720  0E00               	movlw	0
 10274  001722  6E79               	movwf	_errno+1,c
 10275  001724  0E21               	movlw	33
 10276  001726  6E78               	movwf	_errno,c
 10277  001728                     i2l934:
 10278  001728  0E00               	movlw	0
 10279  00172A  6E52               	movwf	?_pow,c
 10280  00172C  0E00               	movlw	0
 10281  00172E  6E53               	movwf	?_pow+1,c
 10282  001730  0E00               	movlw	0
 10283  001732  6E54               	movwf	?_pow+2,c
 10284  001734  0012               	return	
 10285  001736                     i2l4160:
 10286  001736  5055               	movf	pow@y,w,c
 10287  001738  1056               	iorwf	pow@y+1,w,c
 10288  00173A  1057               	iorwf	pow@y+2,w,c
 10289  00173C  A4D8               	btfss	status,2,c
 10290  00173E  D007               	goto	i2l4166
 10291  001740  0E00               	movlw	0
 10292  001742  6E52               	movwf	?_pow,c
 10293  001744  0E80               	movlw	128
 10294  001746  6E53               	movwf	?_pow+1,c
 10295  001748  0E3F               	movlw	63
 10296  00174A  6E54               	movwf	?_pow+2,c
 10297  00174C  0012               	return	
 10298  00174E                     i2l4166:
 10299  00174E  AE54               	btfss	pow@x+2,7,c
 10300  001750  D040               	goto	i2l4178
 10301  001752  C055  F028         	movff	pow@y,___fttol@f1
 10302  001756  C056  F029         	movff	pow@y+1,___fttol@f1+1
 10303  00175A  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 10304  00175E  EC68  F00E         	call	___fttol	;wreg free
 10305  001762  C028  F05F         	movff	?___fttol,pow@yi
 10306  001766  C029  F060         	movff	?___fttol+1,pow@yi+1
 10307  00176A  C02A  F061         	movff	?___fttol+2,pow@yi+2
 10308  00176E  C02B  F062         	movff	?___fttol+3,pow@yi+3
 10309  001772  C05F  F009         	movff	pow@yi,___lltoft@c
 10310  001776  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 10311  00177A  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 10312  00177E  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 10313  001782  ECF8  F015         	call	___lltoft	;wreg free
 10314  001786  5055               	movf	pow@y,w,c
 10315  001788  1809               	xorwf	?___lltoft,w,c
 10316  00178A  E107               	bnz	i2u443_40
 10317  00178C  5056               	movf	pow@y+1,w,c
 10318  00178E  180A               	xorwf	?___lltoft+1,w,c
 10319  001790  E104               	bnz	i2u443_40
 10320  001792  5057               	movf	pow@y+2,w,c
 10321  001794  180B               	xorwf	?___lltoft+2,w,c
 10322  001796  B4D8               	btfsc	status,2,c
 10323  001798  D00B               	goto	i2l4174
 10324  00179A                     i2u443_40:
 10325  00179A  0E00               	movlw	0
 10326  00179C  6E79               	movwf	_errno+1,c
 10327  00179E  0E21               	movlw	33
 10328  0017A0  6E78               	movwf	_errno,c
 10329  0017A2  0E00               	movlw	0
 10330  0017A4  6E52               	movwf	?_pow,c
 10331  0017A6  0E00               	movlw	0
 10332  0017A8  6E53               	movwf	?_pow+1,c
 10333  0017AA  0E00               	movlw	0
 10334  0017AC  6E54               	movwf	?_pow+2,c
 10335  0017AE  0012               	return	
 10336  0017B0                     i2l4174:
 10337  0017B0  505F               	movf	pow@yi,w,c
 10338  0017B2  0B01               	andlw	1
 10339  0017B4  6E5E               	movwf	pow@sign,c
 10340  0017B6  C052  F001         	movff	pow@x,___ftneg@f1
 10341  0017BA  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10342  0017BE  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10343  0017C2  ECD7  F017         	call	___ftneg	;wreg free
 10344  0017C6  C001  F052         	movff	?___ftneg,pow@x
 10345  0017CA  C002  F053         	movff	?___ftneg+1,pow@x+1
 10346  0017CE  C003  F054         	movff	?___ftneg+2,pow@x+2
 10347  0017D2                     i2l4178:
 10348  0017D2  C052  F034         	movff	pow@x,log@x
 10349  0017D6  C053  F035         	movff	pow@x+1,log@x+1
 10350  0017DA  C054  F036         	movff	pow@x+2,log@x+2
 10351  0017DE  ECD8  F00C         	call	_log	;wreg free
 10352  0017E2  C034  F058         	movff	?_log,_pow$1152
 10353  0017E6  C035  F059         	movff	?_log+1,_pow$1152+1
 10354  0017EA  C036  F05A         	movff	?_log+2,_pow$1152+2
 10355  0017EE  C058  F00D         	movff	_pow$1152,___ftmul@f1
 10356  0017F2  C059  F00E         	movff	_pow$1152+1,___ftmul@f1+1
 10357  0017F6  C05A  F00F         	movff	_pow$1152+2,___ftmul@f1+2
 10358  0017FA  C055  F010         	movff	pow@y,___ftmul@f2
 10359  0017FE  C056  F011         	movff	pow@y+1,___ftmul@f2+1
 10360  001802  C057  F012         	movff	pow@y+2,___ftmul@f2+2
 10361  001806  ECE2  F00E         	call	___ftmul	;wreg free
 10362  00180A  C00D  F05B         	movff	?___ftmul,_pow$1153
 10363  00180E  C00E  F05C         	movff	?___ftmul+1,_pow$1153+1
 10364  001812  C00F  F05D         	movff	?___ftmul+2,_pow$1153+2
 10365  001816  C05B  F049         	movff	_pow$1153,exp@x
 10366  00181A  C05C  F04A         	movff	_pow$1153+1,exp@x+1
 10367  00181E  C05D  F04B         	movff	_pow$1153+2,exp@x+2
 10368  001822  ECB1  F009         	call	_exp	;wreg free
 10369  001826  C049  F052         	movff	?_exp,pow@x
 10370  00182A  C04A  F053         	movff	?_exp+1,pow@x+1
 10371  00182E  C04B  F054         	movff	?_exp+2,pow@x+2
 10372  001832  505E               	movf	pow@sign,w,c
 10373  001834  B4D8               	btfsc	status,2,c
 10374  001836  D00F               	goto	i2l939
 10375  001838  C052  F001         	movff	pow@x,___ftneg@f1
 10376  00183C  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 10377  001840  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 10378  001844  ECD7  F017         	call	___ftneg	;wreg free
 10379  001848  C001  F052         	movff	?___ftneg,?_pow
 10380  00184C  C002  F053         	movff	?___ftneg+1,?_pow+1
 10381  001850  C003  F054         	movff	?___ftneg+2,?_pow+2
 10382  001854  0012               	return	
 10383  001856                     i2l939:
 10384  001856  C052  F052         	movff	pow@x,?_pow
 10385  00185A  C053  F053         	movff	pow@x+1,?_pow+1
 10386  00185E  C054  F054         	movff	pow@x+2,?_pow+2
 10387  001862  0012               	return		;funcret
 10388  001864                     __end_of_pow:
 10389                           	opt stack 0
 10390                           pclatu	equ	0xFFB
 10391                           pclath	equ	0xFFA
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon2	equ	0xFF1
 10400                           intcon3	equ	0xFF0
 10401                           postinc0	equ	0xFEE
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           fsr1h	equ	0xFE2
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _log *****************
 10415 ;; Defined at:
 10416 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  x               3   51[COMRAM] unsigned char 
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  exponent        2   54[COMRAM] int 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  3   51[COMRAM] int 
 10423 ;; Registers used:
 10424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10430 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;Total ram usage:        5 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    3
 10437 ;; This function calls:
 10438 ;;		___awtoft
 10439 ;;		___ftadd
 10440 ;;		___ftmul
 10441 ;;		_eval_poly
 10442 ;;		_frexp
 10443 ;; This function is called by:
 10444 ;;		_pow
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text45
 10449  0019B0                     __ptext45:
 10450                           	opt stack 0
 10451  0019B0                     _log:
 10452                           	opt stack 20
 10453                           
 10454                           ;incstack = 0
 10455  0019B0  AE36               	btfss	log@x+2,7,c
 10456  0019B2  D00B               	goto	i2l3724
 10457  0019B4  0E00               	movlw	0
 10458  0019B6  6E79               	movwf	_errno+1,c
 10459  0019B8  0E21               	movlw	33
 10460  0019BA  6E78               	movwf	_errno,c
 10461  0019BC  0E00               	movlw	0
 10462  0019BE  6E34               	movwf	?_log,c
 10463  0019C0  0E00               	movlw	0
 10464  0019C2  6E35               	movwf	?_log+1,c
 10465  0019C4  0E00               	movlw	0
 10466  0019C6  6E36               	movwf	?_log+2,c
 10467  0019C8  0012               	return	
 10468  0019CA                     i2l3724:
 10469  0019CA  5034               	movf	log@x,w,c
 10470  0019CC  1035               	iorwf	log@x+1,w,c
 10471  0019CE  1036               	iorwf	log@x+2,w,c
 10472  0019D0  A4D8               	btfss	status,2,c
 10473  0019D2  D00B               	goto	i2l3730
 10474  0019D4  0E00               	movlw	0
 10475  0019D6  6E79               	movwf	_errno+1,c
 10476  0019D8  0E22               	movlw	34
 10477  0019DA  6E78               	movwf	_errno,c
 10478  0019DC  0E00               	movlw	0
 10479  0019DE  6E34               	movwf	?_log,c
 10480  0019E0  0E00               	movlw	0
 10481  0019E2  6E35               	movwf	?_log+1,c
 10482  0019E4  0E00               	movlw	0
 10483  0019E6  6E36               	movwf	?_log+2,c
 10484  0019E8  0012               	return	
 10485  0019EA                     i2l3730:
 10486  0019EA  0E00               	movlw	0
 10487  0019EC  6E10               	movwf	___ftmul@f2,c
 10488  0019EE  0E00               	movlw	0
 10489  0019F0  6E11               	movwf	___ftmul@f2+1,c
 10490  0019F2  0E40               	movlw	64
 10491  0019F4  6E12               	movwf	___ftmul@f2+2,c
 10492  0019F6  0E37               	movlw	low log@exponent
 10493  0019F8  6E04               	movwf	frexp@eptr,c
 10494  0019FA  0E00               	movlw	high log@exponent
 10495  0019FC  6E05               	movwf	frexp@eptr+1,c
 10496  0019FE  C034  F001         	movff	log@x,frexp@value
 10497  001A02  C035  F002         	movff	log@x+1,frexp@value+1
 10498  001A06  C036  F003         	movff	log@x+2,frexp@value+2
 10499  001A0A  ECE9  F013         	call	_frexp	;wreg free
 10500  001A0E  C001  F00D         	movff	?_frexp,___ftmul@f1
 10501  001A12  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 10502  001A16  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 10503  001A1A  ECE2  F00E         	call	___ftmul	;wreg free
 10504  001A1E  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10505  001A22  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10506  001A26  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10507  001A2A  0E00               	movlw	0
 10508  001A2C  6E1F               	movwf	___ftadd@f2,c
 10509  001A2E  0E80               	movlw	128
 10510  001A30  6E20               	movwf	___ftadd@f2+1,c
 10511  001A32  0EBF               	movlw	191
 10512  001A34  6E21               	movwf	___ftadd@f2+2,c
 10513  001A36  ECA3  F00A         	call	___ftadd	;wreg free
 10514  001A3A  C01C  F034         	movff	?___ftadd,log@x
 10515  001A3E  C01D  F035         	movff	?___ftadd+1,log@x+1
 10516  001A42  C01E  F036         	movff	?___ftadd+2,log@x+2
 10517  001A46  0637               	decf	log@exponent,f,c
 10518  001A48  A0D8               	btfss	status,0,c
 10519  001A4A  0638               	decf	log@exponent+1,f,c
 10520  001A4C  C034  F028         	movff	log@x,eval_poly@x
 10521  001A50  C035  F029         	movff	log@x+1,eval_poly@x+1
 10522  001A54  C036  F02A         	movff	log@x+2,eval_poly@x+2
 10523  001A58  0E13               	movlw	low log@coeff
 10524  001A5A  6E2B               	movwf	eval_poly@d,c
 10525  001A5C  0EFE               	movlw	high log@coeff
 10526  001A5E  6E2C               	movwf	eval_poly@d+1,c
 10527  001A60  0E00               	movlw	0
 10528  001A62  6E2E               	movwf	eval_poly@n+1,c
 10529  001A64  0E08               	movlw	8
 10530  001A66  6E2D               	movwf	eval_poly@n,c
 10531  001A68  EC14  F011         	call	_eval_poly	;wreg free
 10532  001A6C  C028  F034         	movff	?_eval_poly,log@x
 10533  001A70  C029  F035         	movff	?_eval_poly+1,log@x+1
 10534  001A74  C02A  F036         	movff	?_eval_poly+2,log@x+2
 10535  001A78  0E72               	movlw	114
 10536  001A7A  6E10               	movwf	___ftmul@f2,c
 10537  001A7C  0E31               	movlw	49
 10538  001A7E  6E11               	movwf	___ftmul@f2+1,c
 10539  001A80  0E3F               	movlw	63
 10540  001A82  6E12               	movwf	___ftmul@f2+2,c
 10541  001A84  C037  F009         	movff	log@exponent,___awtoft@c
 10542  001A88  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 10543  001A8C  ECFE  F016         	call	___awtoft	;wreg free
 10544  001A90  C009  F00D         	movff	?___awtoft,___ftmul@f1
 10545  001A94  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 10546  001A98  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 10547  001A9C  ECE2  F00E         	call	___ftmul	;wreg free
 10548  001AA0  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 10549  001AA4  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 10550  001AA8  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 10551  001AAC  C034  F01F         	movff	log@x,___ftadd@f2
 10552  001AB0  C035  F020         	movff	log@x+1,___ftadd@f2+1
 10553  001AB4  C036  F021         	movff	log@x+2,___ftadd@f2+2
 10554  001AB8  ECA3  F00A         	call	___ftadd	;wreg free
 10555  001ABC  C01C  F034         	movff	?___ftadd,?_log
 10556  001AC0  C01D  F035         	movff	?___ftadd+1,?_log+1
 10557  001AC4  C01E  F036         	movff	?___ftadd+2,?_log+2
 10558  001AC8  0012               	return	
 10559  001ACA                     __end_of_log:
 10560                           	opt stack 0
 10561                           pclatu	equ	0xFFB
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           intcon3	equ	0xFF0
 10572                           postinc0	equ	0xFEE
 10573                           fsr0h	equ	0xFEA
 10574                           fsr0l	equ	0xFE9
 10575                           wreg	equ	0xFE8
 10576                           fsr1h	equ	0xFE2
 10577                           fsr1l	equ	0xFE1
 10578                           indf2	equ	0xFDF
 10579                           postinc2	equ	0xFDE
 10580                           postdec2	equ	0xFDD
 10581                           fsr2h	equ	0xFDA
 10582                           fsr2l	equ	0xFD9
 10583                           status	equ	0xFD8
 10584                           
 10585 ;; *************** function _exp *****************
 10586 ;; Defined at:
 10587 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;  x               3   72[COMRAM] int 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  exponent        2   78[COMRAM] int 
 10592 ;;  sign            1   80[COMRAM] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  3   72[COMRAM] unsigned char 
 10595 ;; Registers used:
 10596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;Total ram usage:        9 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    3
 10609 ;; This function calls:
 10610 ;;		___awtoft
 10611 ;;		___ftdiv
 10612 ;;		___ftge
 10613 ;;		___ftmul
 10614 ;;		___ftneg
 10615 ;;		___ftsub
 10616 ;;		___fttol
 10617 ;;		_eval_poly
 10618 ;;		_floor
 10619 ;;		_ldexp
 10620 ;; This function is called by:
 10621 ;;		_pow
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text46
 10626  001362                     __ptext46:
 10627                           	opt stack 0
 10628  001362                     _exp:
 10629                           	opt stack 20
 10630                           
 10631                           ;incstack = 0
 10632  001362  5049               	movf	exp@x,w,c
 10633  001364  104A               	iorwf	exp@x+1,w,c
 10634  001366  104B               	iorwf	exp@x+2,w,c
 10635  001368  A4D8               	btfss	status,2,c
 10636  00136A  D007               	goto	i2l3746
 10637  00136C  0E00               	movlw	0
 10638  00136E  6E49               	movwf	?_exp,c
 10639  001370  0E80               	movlw	128
 10640  001372  6E4A               	movwf	?_exp+1,c
 10641  001374  0E3F               	movlw	63
 10642  001376  6E4B               	movwf	?_exp+2,c
 10643  001378  0012               	return	
 10644  00137A                     i2l3746:
 10645  00137A  0E72               	movlw	114
 10646  00137C  6E01               	movwf	___ftge@ff1,c
 10647  00137E  0E31               	movlw	49
 10648  001380  6E02               	movwf	___ftge@ff1+1,c
 10649  001382  0E44               	movlw	68
 10650  001384  6E03               	movwf	___ftge@ff1+2,c
 10651  001386  C049  F004         	movff	exp@x,___ftge@ff2
 10652  00138A  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 10653  00138E  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 10654  001392  EC31  F014         	call	___ftge	;wreg free
 10655  001396  B0D8               	btfsc	status,0,c
 10656  001398  D00B               	goto	i2l3752
 10657  00139A  0E00               	movlw	0
 10658  00139C  6E79               	movwf	_errno+1,c
 10659  00139E  0E22               	movlw	34
 10660  0013A0  6E78               	movwf	_errno,c
 10661  0013A2  0EFF               	movlw	255
 10662  0013A4  6E49               	movwf	?_exp,c
 10663  0013A6  0E7F               	movlw	127
 10664  0013A8  6E4A               	movwf	?_exp+1,c
 10665  0013AA  0E7F               	movlw	127
 10666  0013AC  6E4B               	movwf	?_exp+2,c
 10667  0013AE  0012               	return	
 10668  0013B0                     i2l3752:
 10669  0013B0  C049  F001         	movff	exp@x,___ftge@ff1
 10670  0013B4  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 10671  0013B8  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 10672  0013BC  0E49               	movlw	73
 10673  0013BE  6E04               	movwf	___ftge@ff2,c
 10674  0013C0  0E3A               	movlw	58
 10675  0013C2  6E05               	movwf	___ftge@ff2+1,c
 10676  0013C4  0EC4               	movlw	196
 10677  0013C6  6E06               	movwf	___ftge@ff2+2,c
 10678  0013C8  EC31  F014         	call	___ftge	;wreg free
 10679  0013CC  B0D8               	btfsc	status,0,c
 10680  0013CE  D00B               	goto	i2l3758
 10681  0013D0  0E00               	movlw	0
 10682  0013D2  6E79               	movwf	_errno+1,c
 10683  0013D4  0E22               	movlw	34
 10684  0013D6  6E78               	movwf	_errno,c
 10685  0013D8  0E00               	movlw	0
 10686  0013DA  6E49               	movwf	?_exp,c
 10687  0013DC  0E00               	movlw	0
 10688  0013DE  6E4A               	movwf	?_exp+1,c
 10689  0013E0  0E00               	movlw	0
 10690  0013E2  6E4B               	movwf	?_exp+2,c
 10691  0013E4  0012               	return	
 10692  0013E6                     i2l3758:
 10693  0013E6  AE4B               	btfss	exp@x+2,7,c
 10694  0013E8  D002               	goto	i2u367_40
 10695  0013EA  0E01               	movlw	1
 10696  0013EC  D001               	goto	i2u368_40
 10697  0013EE                     i2u367_40:
 10698  0013EE  0E00               	movlw	0
 10699  0013F0                     i2u368_40:
 10700  0013F0  6E51               	movwf	exp@sign,c
 10701  0013F2  5051               	movf	exp@sign,w,c
 10702  0013F4  B4D8               	btfsc	status,2,c
 10703  0013F6  D00E               	goto	i2l1097
 10704  0013F8  C049  F001         	movff	exp@x,___ftneg@f1
 10705  0013FC  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 10706  001400  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 10707  001404  ECD7  F017         	call	___ftneg	;wreg free
 10708  001408  C001  F049         	movff	?___ftneg,exp@x
 10709  00140C  C002  F04A         	movff	?___ftneg+1,exp@x+1
 10710  001410  C003  F04B         	movff	?___ftneg+2,exp@x+2
 10711  001414                     i2l1097:
 10712  001414  C049  F00D         	movff	exp@x,___ftmul@f1
 10713  001418  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 10714  00141C  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 10715  001420  0EAA               	movlw	170
 10716  001422  6E10               	movwf	___ftmul@f2,c
 10717  001424  0EB8               	movlw	184
 10718  001426  6E11               	movwf	___ftmul@f2+1,c
 10719  001428  0E3F               	movlw	63
 10720  00142A  6E12               	movwf	___ftmul@f2+2,c
 10721  00142C  ECE2  F00E         	call	___ftmul	;wreg free
 10722  001430  C00D  F049         	movff	?___ftmul,exp@x
 10723  001434  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 10724  001438  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 10725  00143C  C049  F041         	movff	exp@x,floor@x
 10726  001440  C04A  F042         	movff	exp@x+1,floor@x+1
 10727  001444  C04B  F043         	movff	exp@x+2,floor@x+2
 10728  001448  ECCF  F00F         	call	_floor	;wreg free
 10729  00144C  C041  F04C         	movff	?_floor,_exp$1154
 10730  001450  C042  F04D         	movff	?_floor+1,_exp$1154+1
 10731  001454  C043  F04E         	movff	?_floor+2,_exp$1154+2
 10732  001458  C04C  F028         	movff	_exp$1154,___fttol@f1
 10733  00145C  C04D  F029         	movff	_exp$1154+1,___fttol@f1+1
 10734  001460  C04E  F02A         	movff	_exp$1154+2,___fttol@f1+2
 10735  001464  EC68  F00E         	call	___fttol	;wreg free
 10736  001468  C028  F04F         	movff	?___fttol,exp@exponent
 10737  00146C  C029  F050         	movff	?___fttol+1,exp@exponent+1
 10738  001470  C049  F028         	movff	exp@x,___ftsub@f1
 10739  001474  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 10740  001478  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 10741  00147C  C04F  F009         	movff	exp@exponent,___awtoft@c
 10742  001480  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 10743  001484  ECFE  F016         	call	___awtoft	;wreg free
 10744  001488  C009  F02B         	movff	?___awtoft,___ftsub@f2
 10745  00148C  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 10746  001490  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 10747  001494  ECBF  F016         	call	___ftsub	;wreg free
 10748  001498  C028  F049         	movff	?___ftsub,exp@x
 10749  00149C  C029  F04A         	movff	?___ftsub+1,exp@x+1
 10750  0014A0  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 10751  0014A4  C049  F028         	movff	exp@x,eval_poly@x
 10752  0014A8  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 10753  0014AC  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 10754  0014B0  0EF5               	movlw	low exp@coeff
 10755  0014B2  6E2B               	movwf	eval_poly@d,c
 10756  0014B4  0EFD               	movlw	high exp@coeff
 10757  0014B6  6E2C               	movwf	eval_poly@d+1,c
 10758  0014B8  0E00               	movlw	0
 10759  0014BA  6E2E               	movwf	eval_poly@n+1,c
 10760  0014BC  0E09               	movlw	9
 10761  0014BE  6E2D               	movwf	eval_poly@n,c
 10762  0014C0  EC14  F011         	call	_eval_poly	;wreg free
 10763  0014C4  C028  F034         	movff	?_eval_poly,ldexp@value
 10764  0014C8  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 10765  0014CC  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 10766  0014D0  C04F  F037         	movff	exp@exponent,ldexp@newexp
 10767  0014D4  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 10768  0014D8  EC7D  F011         	call	_ldexp	;wreg free
 10769  0014DC  C034  F049         	movff	?_ldexp,exp@x
 10770  0014E0  C035  F04A         	movff	?_ldexp+1,exp@x+1
 10771  0014E4  C036  F04B         	movff	?_ldexp+2,exp@x+2
 10772  0014E8  5051               	movf	exp@sign,w,c
 10773  0014EA  B4D8               	btfsc	status,2,c
 10774  0014EC  D025               	goto	i2l1098
 10775  0014EE  2849               	incf	exp@x,w,c
 10776  0014F0  E10E               	bnz	i2l3780
 10777  0014F2  0E7F               	movlw	127
 10778  0014F4  184A               	xorwf	exp@x+1,w,c
 10779  0014F6  E10B               	bnz	i2l3780
 10780  0014F8  0E7F               	movlw	127
 10781  0014FA  184B               	xorwf	exp@x+2,w,c
 10782  0014FC  A4D8               	btfss	status,2,c
 10783  0014FE  D007               	goto	i2l3780
 10784  001500  0E00               	movlw	0
 10785  001502  6E49               	movwf	?_exp,c
 10786  001504  0E00               	movlw	0
 10787  001506  6E4A               	movwf	?_exp+1,c
 10788  001508  0E00               	movlw	0
 10789  00150A  6E4B               	movwf	?_exp+2,c
 10790  00150C  0012               	return	
 10791  00150E                     i2l3780:
 10792  00150E  0E00               	movlw	0
 10793  001510  6E09               	movwf	___ftdiv@f1,c
 10794  001512  0E80               	movlw	128
 10795  001514  6E0A               	movwf	___ftdiv@f1+1,c
 10796  001516  0E3F               	movlw	63
 10797  001518  6E0B               	movwf	___ftdiv@f1+2,c
 10798  00151A  C049  F00C         	movff	exp@x,___ftdiv@f2
 10799  00151E  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 10800  001522  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 10801  001526  EC5C  F00F         	call	___ftdiv	;wreg free
 10802  00152A  C009  F049         	movff	?___ftdiv,?_exp
 10803  00152E  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 10804  001532  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 10805  001536  0012               	return	
 10806  001538                     i2l1098:
 10807  001538  C049  F049         	movff	exp@x,?_exp
 10808  00153C  C04A  F04A         	movff	exp@x+1,?_exp+1
 10809  001540  C04B  F04B         	movff	exp@x+2,?_exp+2
 10810  001544  0012               	return		;funcret
 10811  001546                     __end_of_exp:
 10812                           	opt stack 0
 10813                           pclatu	equ	0xFFB
 10814                           pclath	equ	0xFFA
 10815                           tblptru	equ	0xFF8
 10816                           tblptrh	equ	0xFF7
 10817                           tblptrl	equ	0xFF6
 10818                           tablat	equ	0xFF5
 10819                           prodh	equ	0xFF4
 10820                           prodl	equ	0xFF3
 10821                           intcon	equ	0xFF2
 10822                           intcon2	equ	0xFF1
 10823                           intcon3	equ	0xFF0
 10824                           postinc0	equ	0xFEE
 10825                           fsr0h	equ	0xFEA
 10826                           fsr0l	equ	0xFE9
 10827                           wreg	equ	0xFE8
 10828                           fsr1h	equ	0xFE2
 10829                           fsr1l	equ	0xFE1
 10830                           indf2	equ	0xFDF
 10831                           postinc2	equ	0xFDE
 10832                           postdec2	equ	0xFDD
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _ldexp *****************
 10838 ;; Defined at:
 10839 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  value           3   51[COMRAM] unsigned char 
 10842 ;;  newexp          2   54[COMRAM] int 
 10843 ;; Auto vars:     Size  Location     Type
 10844 ;;		None
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  3   51[COMRAM] int 
 10847 ;; Registers used:
 10848 ;;		wreg, status,2, status,0
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10854 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10857 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10858 ;;Total ram usage:        7 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_exp
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           	psect	text47
 10868  0022FA                     __ptext47:
 10869                           	opt stack 0
 10870  0022FA                     _ldexp:
 10871                           	opt stack 22
 10872                           
 10873                           ;incstack = 0
 10874  0022FA  5034               	movf	ldexp@value,w,c
 10875  0022FC  1035               	iorwf	ldexp@value+1,w,c
 10876  0022FE  1036               	iorwf	ldexp@value+2,w,c
 10877  002300  A4D8               	btfss	status,2,c
 10878  002302  D007               	goto	i2l3592
 10879  002304  0E00               	movlw	0
 10880  002306  6E34               	movwf	?_ldexp,c
 10881  002308  0E00               	movlw	0
 10882  00230A  6E35               	movwf	?_ldexp+1,c
 10883  00230C  0E00               	movlw	0
 10884  00230E  6E36               	movwf	?_ldexp+2,c
 10885  002310  0012               	return	
 10886  002312                     i2l3592:
 10887  002312  5036               	movf	ldexp@value+2,w,c
 10888  002314  0B7F               	andlw	127
 10889  002316  6E39               	movwf	??_ldexp& (0+255),c
 10890  002318  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 10891  00231A  90D8               	bcf	status,0,c
 10892  00231C  3639               	rlcf	??_ldexp,f,c
 10893  00231E  363A               	rlcf	??_ldexp+1,f,c
 10894  002320  5039               	movf	??_ldexp,w,c
 10895  002322  2637               	addwf	ldexp@newexp,f,c
 10896  002324  503A               	movf	??_ldexp+1,w,c
 10897  002326  2238               	addwfc	ldexp@newexp+1,f,c
 10898  002328  AE35               	btfss	ldexp@value+1,7,c
 10899  00232A  D003               	goto	i2u347_40
 10900  00232C  6A39               	clrf	??_ldexp& (0+255),c
 10901  00232E  2A39               	incf	??_ldexp& (0+255),f,c
 10902  002330  D001               	goto	i2u347_48
 10903  002332                     i2u347_40:
 10904  002332  6A39               	clrf	??_ldexp& (0+255),c
 10905  002334                     i2u347_48:
 10906  002334  5039               	movf	??_ldexp,w,c
 10907  002336  2637               	addwf	ldexp@newexp,f,c
 10908  002338  0E00               	movlw	0
 10909  00233A  2238               	addwfc	ldexp@newexp+1,f,c
 10910  00233C  AE38               	btfss	ldexp@newexp+1,7,c
 10911  00233E  D00B               	goto	i2l3600
 10912  002340  0E00               	movlw	0
 10913  002342  6E79               	movwf	_errno+1,c
 10914  002344  0E22               	movlw	34
 10915  002346  6E78               	movwf	_errno,c
 10916  002348  0E00               	movlw	0
 10917  00234A  6E34               	movwf	?_ldexp,c
 10918  00234C  0E00               	movlw	0
 10919  00234E  6E35               	movwf	?_ldexp+1,c
 10920  002350  0E00               	movlw	0
 10921  002352                     L18:
 10922  002352  6E36               	movwf	?_ldexp+2,c
 10923  002354  0012               	return	
 10924  002356                     i2l3600:
 10925  002356  BE38               	btfsc	ldexp@newexp+1,7,c
 10926  002358  D015               	goto	i2l3616
 10927  00235A  0438               	decf	ldexp@newexp+1,w,c
 10928  00235C  A0D8               	btfss	status,0,c
 10929  00235E  D012               	goto	i2l3616
 10930  002360  0E00               	movlw	0
 10931  002362  6E79               	movwf	_errno+1,c
 10932  002364  0E22               	movlw	34
 10933  002366  6E78               	movwf	_errno,c
 10934  002368  AE36               	btfss	ldexp@value+2,7,c
 10935  00236A  D006               	goto	i2l3612
 10936  00236C  0EFF               	movlw	255
 10937  00236E  6E34               	movwf	?_ldexp,c
 10938  002370  0E7F               	movlw	127
 10939  002372  6E35               	movwf	?_ldexp+1,c
 10940  002374  0EFF               	movlw	255
 10941  002376  D7ED               	goto	L18
 10942  002378                     i2l3612:
 10943  002378  0EFF               	movlw	255
 10944  00237A  6E34               	movwf	?_ldexp,c
 10945  00237C  0E7F               	movlw	127
 10946  00237E  6E35               	movwf	?_ldexp+1,c
 10947  002380  0E7F               	movlw	127
 10948  002382  D7E7               	goto	L18
 10949  002384                     i2l3616:
 10950  002384  3438               	rlcf	ldexp@newexp+1,w,c
 10951  002386  3038               	rrcf	ldexp@newexp+1,w,c
 10952  002388  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 10953  00238A  3037               	rrcf	ldexp@newexp,w,c
 10954  00238C  6E39               	movwf	??_ldexp& (0+255),c
 10955  00238E  5036               	movf	ldexp@value+2,w,c
 10956  002390  1839               	xorwf	??_ldexp,w,c
 10957  002392  0B80               	andlw	-128
 10958  002394  1839               	xorwf	??_ldexp,w,c
 10959  002396  6E36               	movwf	ldexp@value+2,c
 10960  002398  C037  F039         	movff	ldexp@newexp,??_ldexp
 10961  00239C  0E01               	movlw	1
 10962  00239E  1639               	andwf	??_ldexp,f,c
 10963  0023A0  3239               	rrcf	??_ldexp,f,c
 10964  0023A2  3239               	rrcf	??_ldexp,f,c
 10965  0023A4  5035               	movf	ldexp@value+1,w,c
 10966  0023A6  1839               	xorwf	??_ldexp,w,c
 10967  0023A8  0B7F               	andlw	-129
 10968  0023AA  1839               	xorwf	??_ldexp,w,c
 10969  0023AC  6E35               	movwf	ldexp@value+1,c
 10970  0023AE  C034  F034         	movff	ldexp@value,?_ldexp
 10971  0023B2  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 10972  0023B6  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 10973  0023BA  0012               	return	
 10974  0023BC                     __end_of_ldexp:
 10975                           	opt stack 0
 10976                           pclatu	equ	0xFFB
 10977                           pclath	equ	0xFFA
 10978                           tblptru	equ	0xFF8
 10979                           tblptrh	equ	0xFF7
 10980                           tblptrl	equ	0xFF6
 10981                           tablat	equ	0xFF5
 10982                           prodh	equ	0xFF4
 10983                           prodl	equ	0xFF3
 10984                           intcon	equ	0xFF2
 10985                           intcon2	equ	0xFF1
 10986                           intcon3	equ	0xFF0
 10987                           postinc0	equ	0xFEE
 10988                           fsr0h	equ	0xFEA
 10989                           fsr0l	equ	0xFE9
 10990                           wreg	equ	0xFE8
 10991                           fsr1h	equ	0xFE2
 10992                           fsr1l	equ	0xFE1
 10993                           indf2	equ	0xFDF
 10994                           postinc2	equ	0xFDE
 10995                           postdec2	equ	0xFDD
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _floor *****************
 11001 ;; Defined at:
 11002 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;  x               3   64[COMRAM] int 
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  i               3   67[COMRAM] int 
 11007 ;;  expon           2   70[COMRAM] int 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  3   64[COMRAM] int 
 11010 ;; Registers used:
 11011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11017 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11021 ;;Total ram usage:        8 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    2
 11024 ;; This function calls:
 11025 ;;		___altoft
 11026 ;;		___ftadd
 11027 ;;		___ftge
 11028 ;;		___fttol
 11029 ;;		_frexp
 11030 ;; This function is called by:
 11031 ;;		_exp
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text48
 11036  001F9E                     __ptext48:
 11037                           	opt stack 0
 11038  001F9E                     _floor:
 11039                           	opt stack 20
 11040                           
 11041                           ;incstack = 0
 11042  001F9E  C041  F001         	movff	floor@x,frexp@value
 11043  001FA2  C042  F002         	movff	floor@x+1,frexp@value+1
 11044  001FA6  C043  F003         	movff	floor@x+2,frexp@value+2
 11045  001FAA  0E47               	movlw	low floor@expon
 11046  001FAC  6E04               	movwf	frexp@eptr,c
 11047  001FAE  0E00               	movlw	high floor@expon
 11048  001FB0  6E05               	movwf	frexp@eptr+1,c
 11049  001FB2  ECE9  F013         	call	_frexp	;wreg free
 11050  001FB6  AE48               	btfss	floor@expon+1,7,c
 11051  001FB8  D010               	goto	i2l3570
 11052  001FBA  AE43               	btfss	floor@x+2,7,c
 11053  001FBC  D007               	goto	i2l3566
 11054  001FBE  0E00               	movlw	0
 11055  001FC0  6E41               	movwf	?_floor,c
 11056  001FC2  0E80               	movlw	128
 11057  001FC4  6E42               	movwf	?_floor+1,c
 11058  001FC6  0EBF               	movlw	191
 11059  001FC8  6E43               	movwf	?_floor+2,c
 11060  001FCA  0012               	return	
 11061  001FCC                     i2l3566:
 11062  001FCC  0E00               	movlw	0
 11063  001FCE  6E41               	movwf	?_floor,c
 11064  001FD0  0E00               	movlw	0
 11065  001FD2  6E42               	movwf	?_floor+1,c
 11066  001FD4  0E00               	movlw	0
 11067  001FD6  6E43               	movwf	?_floor+2,c
 11068  001FD8  0012               	return	
 11069  001FDA                     i2l3570:
 11070  001FDA  5048               	movf	floor@expon+1,w,c
 11071  001FDC  E104               	bnz	i2u343_40
 11072  001FDE  0E15               	movlw	21
 11073  001FE0  5C47               	subwf	floor@expon,w,c
 11074  001FE2  A0D8               	btfss	status,0,c
 11075  001FE4  D007               	goto	i2l3574
 11076  001FE6                     i2u343_40:
 11077  001FE6  C041  F041         	movff	floor@x,?_floor
 11078  001FEA  C042  F042         	movff	floor@x+1,?_floor+1
 11079  001FEE  C043  F043         	movff	floor@x+2,?_floor+2
 11080  001FF2  0012               	return	
 11081  001FF4                     i2l3574:
 11082  001FF4  C041  F028         	movff	floor@x,___fttol@f1
 11083  001FF8  C042  F029         	movff	floor@x+1,___fttol@f1+1
 11084  001FFC  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 11085  002000  EC68  F00E         	call	___fttol	;wreg free
 11086  002004  C028  F037         	movff	?___fttol,___altoft@c
 11087  002008  C029  F038         	movff	?___fttol+1,___altoft@c+1
 11088  00200C  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 11089  002010  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 11090  002014  ECF7  F014         	call	___altoft	;wreg free
 11091  002018  C037  F044         	movff	?___altoft,floor@i
 11092  00201C  C038  F045         	movff	?___altoft+1,floor@i+1
 11093  002020  C039  F046         	movff	?___altoft+2,floor@i+2
 11094  002024  C041  F001         	movff	floor@x,___ftge@ff1
 11095  002028  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 11096  00202C  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 11097  002030  C044  F004         	movff	floor@i,___ftge@ff2
 11098  002034  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 11099  002038  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 11100  00203C  EC31  F014         	call	___ftge	;wreg free
 11101  002040  B0D8               	btfsc	status,0,c
 11102  002042  D015               	goto	i2l1108
 11103  002044  C044  F01C         	movff	floor@i,___ftadd@f1
 11104  002048  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 11105  00204C  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 11106  002050  0E00               	movlw	0
 11107  002052  6E1F               	movwf	___ftadd@f2,c
 11108  002054  0E80               	movlw	128
 11109  002056  6E20               	movwf	___ftadd@f2+1,c
 11110  002058  0EBF               	movlw	191
 11111  00205A  6E21               	movwf	___ftadd@f2+2,c
 11112  00205C  ECA3  F00A         	call	___ftadd	;wreg free
 11113  002060  C01C  F041         	movff	?___ftadd,?_floor
 11114  002064  C01D  F042         	movff	?___ftadd+1,?_floor+1
 11115  002068  C01E  F043         	movff	?___ftadd+2,?_floor+2
 11116  00206C  0012               	return	
 11117  00206E                     i2l1108:
 11118  00206E  C044  F041         	movff	floor@i,?_floor
 11119  002072  C045  F042         	movff	floor@i+1,?_floor+1
 11120  002076  C046  F043         	movff	floor@i+2,?_floor+2
 11121  00207A  0012               	return		;funcret
 11122  00207C                     __end_of_floor:
 11123                           	opt stack 0
 11124                           pclatu	equ	0xFFB
 11125                           pclath	equ	0xFFA
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           intcon2	equ	0xFF1
 11134                           intcon3	equ	0xFF0
 11135                           postinc0	equ	0xFEE
 11136                           fsr0h	equ	0xFEA
 11137                           fsr0l	equ	0xFE9
 11138                           wreg	equ	0xFE8
 11139                           fsr1h	equ	0xFE2
 11140                           fsr1l	equ	0xFE1
 11141                           indf2	equ	0xFDF
 11142                           postinc2	equ	0xFDE
 11143                           postdec2	equ	0xFDD
 11144                           fsr2h	equ	0xFDA
 11145                           fsr2l	equ	0xFD9
 11146                           status	equ	0xFD8
 11147                           
 11148 ;; *************** function _frexp *****************
 11149 ;; Defined at:
 11150 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  value           3    0[COMRAM] int 
 11153 ;;  eptr            2    3[COMRAM] PTR int 
 11154 ;;		 -> log@exponent(2), floor@expon(2), 
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;		None
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  3    0[COMRAM] PTR int 
 11159 ;; Registers used:
 11160 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11166 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;Total ram usage:        7 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; This function calls:
 11173 ;;		Nothing
 11174 ;; This function is called by:
 11175 ;;		_floor
 11176 ;;		_log
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           	psect	text49
 11181  0027D2                     __ptext49:
 11182                           	opt stack 0
 11183  0027D2                     _frexp:
 11184                           	opt stack 22
 11185                           
 11186                           ;incstack = 0
 11187  0027D2  5001               	movf	frexp@value,w,c
 11188  0027D4  1002               	iorwf	frexp@value+1,w,c
 11189  0027D6  1003               	iorwf	frexp@value+2,w,c
 11190  0027D8  A4D8               	btfss	status,2,c
 11191  0027DA  D00F               	goto	i2l3446
 11192  0027DC  C004  FFD9         	movff	frexp@eptr,fsr2l
 11193  0027E0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11194  0027E4  0E00               	movlw	0
 11195  0027E6  6EDE               	movwf	postinc2,c
 11196  0027E8  0E00               	movlw	0
 11197  0027EA  6EDD               	movwf	postdec2,c
 11198  0027EC  0E00               	movlw	0
 11199  0027EE  6E01               	movwf	?_frexp,c
 11200  0027F0  0E00               	movlw	0
 11201  0027F2  6E02               	movwf	?_frexp+1,c
 11202  0027F4  0E00               	movlw	0
 11203  0027F6  6E03               	movwf	?_frexp+2,c
 11204  0027F8  0012               	return	
 11205  0027FA                     i2l3446:
 11206  0027FA  5003               	movf	frexp@value+2,w,c
 11207  0027FC  0B7F               	andlw	127
 11208  0027FE  6E06               	movwf	??_frexp& (0+255),c
 11209  002800  6A07               	clrf	(??_frexp+1)& (0+255),c
 11210  002802  90D8               	bcf	status,0,c
 11211  002804  3606               	rlcf	??_frexp,f,c
 11212  002806  3607               	rlcf	??_frexp+1,f,c
 11213  002808  C004  FFD9         	movff	frexp@eptr,fsr2l
 11214  00280C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11215  002810  C006  FFDE         	movff	??_frexp,postinc2
 11216  002814  C007  FFDD         	movff	??_frexp+1,postdec2
 11217  002818  AE02               	btfss	frexp@value+1,7,c
 11218  00281A  D003               	goto	i2u330_40
 11219  00281C  6A06               	clrf	??_frexp& (0+255),c
 11220  00281E  2A06               	incf	??_frexp& (0+255),f,c
 11221  002820  D001               	goto	i2u330_48
 11222  002822                     i2u330_40:
 11223  002822  6A06               	clrf	??_frexp& (0+255),c
 11224  002824                     i2u330_48:
 11225  002824  5006               	movf	??_frexp,w,c
 11226  002826  C004  FFD9         	movff	frexp@eptr,fsr2l
 11227  00282A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11228  00282E  12DE               	iorwf	postinc2,f,c
 11229  002830  0E00               	movlw	0
 11230  002832  12DD               	iorwf	postdec2,f,c
 11231  002834  C004  FFD9         	movff	frexp@eptr,fsr2l
 11232  002838  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 11233  00283C  0E82               	movlw	130
 11234  00283E  26DE               	addwf	postinc2,f,c
 11235  002840  0EFF               	movlw	255
 11236  002842  22DD               	addwfc	postdec2,f,c
 11237  002844  8003               	bsf	frexp@value+2,0,c
 11238  002846  8203               	bsf	frexp@value+2,1,c
 11239  002848  8403               	bsf	frexp@value+2,2,c
 11240  00284A  8603               	bsf	frexp@value+2,3,c
 11241  00284C  8803               	bsf	frexp@value+2,4,c
 11242  00284E  8A03               	bsf	frexp@value+2,5,c
 11243  002850  9C03               	bcf	frexp@value+2,6,c
 11244  002852  9E02               	bcf	frexp@value+1,7,c
 11245  002854  C001  F001         	movff	frexp@value,?_frexp
 11246  002858  C002  F002         	movff	frexp@value+1,?_frexp+1
 11247  00285C  C003  F003         	movff	frexp@value+2,?_frexp+2
 11248  002860  0012               	return	
 11249  002862                     __end_of_frexp:
 11250                           	opt stack 0
 11251                           pclatu	equ	0xFFB
 11252                           pclath	equ	0xFFA
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           intcon2	equ	0xFF1
 11261                           intcon3	equ	0xFF0
 11262                           postinc0	equ	0xFEE
 11263                           fsr0h	equ	0xFEA
 11264                           fsr0l	equ	0xFE9
 11265                           wreg	equ	0xFE8
 11266                           fsr1h	equ	0xFE2
 11267                           fsr1l	equ	0xFE1
 11268                           indf2	equ	0xFDF
 11269                           postinc2	equ	0xFDE
 11270                           postdec2	equ	0xFDD
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8
 11274                           
 11275 ;; *************** function ___fttol *****************
 11276 ;; Defined at:
 11277 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  f1              3   39[COMRAM] float 
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;  lval            4   49[COMRAM] unsigned long 
 11282 ;;  exp1            1   53[COMRAM] unsigned char 
 11283 ;;  sign1           1   48[COMRAM] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  4   39[COMRAM] long 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11293 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;Total ram usage:       15 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; This function calls:
 11300 ;;		Nothing
 11301 ;; This function is called by:
 11302 ;;		_dec_to_hex
 11303 ;;		_pow
 11304 ;;		_exp
 11305 ;;		_floor
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text50
 11310  001CD0                     __ptext50:
 11311                           	opt stack 0
 11312  001CD0                     ___fttol:
 11313                           	opt stack 21
 11314                           
 11315                           ;incstack = 0
 11316  001CD0  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 11317  001CD4  6A2D               	clrf	(??___fttol+1)& (0+255),c
 11318  001CD6  6A2E               	clrf	(??___fttol+2)& (0+255),c
 11319  001CD8  3429               	rlcf	___fttol@f1+1,w,c
 11320  001CDA  362C               	rlcf	??___fttol& (0+255),f,c
 11321  001CDC  E301               	bnc	u321_41
 11322  001CDE  802D               	bsf	(??___fttol+1)& (0+255),0,c
 11323  001CE0                     u321_41:
 11324  001CE0  502C               	movf	??___fttol,w,c
 11325  001CE2  6E36               	movwf	___fttol@exp1,c
 11326  001CE4  5036               	movf	___fttol@exp1,w,c
 11327  001CE6  A4D8               	btfss	status,2,c
 11328  001CE8  D009               	goto	i2l3398
 11329  001CEA  0E00               	movlw	0
 11330  001CEC  6E28               	movwf	?___fttol,c
 11331  001CEE  0E00               	movlw	0
 11332  001CF0  6E29               	movwf	?___fttol+1,c
 11333  001CF2  0E00               	movlw	0
 11334  001CF4  6E2A               	movwf	?___fttol+2,c
 11335  001CF6  0E00               	movlw	0
 11336  001CF8  6E2B               	movwf	?___fttol+3,c
 11337  001CFA  0012               	return	
 11338  001CFC                     i2l3398:
 11339  001CFC  0E17               	movlw	23
 11340  001CFE  6E2C               	movwf	??___fttol& (0+255),c
 11341  001D00  C028  F02D         	movff	___fttol@f1,??___fttol+1
 11342  001D04  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 11343  001D08  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 11344  001D0C  282C               	incf	??___fttol,w,c
 11345  001D0E  6E30               	movwf	(??___fttol+4)& (0+255),c
 11346  001D10  D004               	goto	i2u323_40
 11347  001D12                     i2u323_45:
 11348  001D12  90D8               	bcf	status,0,c
 11349  001D14  322F               	rrcf	??___fttol+3,f,c
 11350  001D16  322E               	rrcf	??___fttol+2,f,c
 11351  001D18  322D               	rrcf	??___fttol+1,f,c
 11352  001D1A                     i2u323_40:
 11353  001D1A  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 11354  001D1C  D7FA               	goto	i2u323_45
 11355  001D1E  502D               	movf	??___fttol+1,w,c
 11356  001D20  6E31               	movwf	___fttol@sign1,c
 11357  001D22  8E29               	bsf	___fttol@f1+1,7,c
 11358  001D24  0EFF               	movlw	255
 11359  001D26  1628               	andwf	___fttol@f1,f,c
 11360  001D28  0EFF               	movlw	255
 11361  001D2A  1629               	andwf	___fttol@f1+1,f,c
 11362  001D2C  0E00               	movlw	0
 11363  001D2E  162A               	andwf	___fttol@f1+2,f,c
 11364  001D30  5028               	movf	___fttol@f1,w,c
 11365  001D32  6E32               	movwf	___fttol@lval,c
 11366  001D34  5029               	movf	___fttol@f1+1,w,c
 11367  001D36  6E33               	movwf	___fttol@lval+1,c
 11368  001D38  502A               	movf	___fttol@f1+2,w,c
 11369  001D3A  6E34               	movwf	___fttol@lval+2,c
 11370  001D3C  6A35               	clrf	___fttol@lval+3,c
 11371  001D3E  0E8E               	movlw	142
 11372  001D40  5E36               	subwf	___fttol@exp1,f,c
 11373  001D42  AE36               	btfss	___fttol@exp1,7,c
 11374  001D44  D016               	goto	i2l3420
 11375  001D46  5036               	movf	___fttol@exp1,w,c
 11376  001D48  0A80               	xorlw	128
 11377  001D4A  0F8F               	addlw	143
 11378  001D4C  B0D8               	btfsc	status,0,c
 11379  001D4E  D009               	goto	i2l3416
 11380  001D50  0E00               	movlw	0
 11381  001D52  6E28               	movwf	?___fttol,c
 11382  001D54  0E00               	movlw	0
 11383  001D56  6E29               	movwf	?___fttol+1,c
 11384  001D58  0E00               	movlw	0
 11385  001D5A  6E2A               	movwf	?___fttol+2,c
 11386  001D5C  0E00               	movlw	0
 11387  001D5E  6E2B               	movwf	?___fttol+3,c
 11388  001D60  0012               	return	
 11389  001D62                     i2l3416:
 11390  001D62  90D8               	bcf	status,0,c
 11391  001D64  3235               	rrcf	___fttol@lval+3,f,c
 11392  001D66  3234               	rrcf	___fttol@lval+2,f,c
 11393  001D68  3233               	rrcf	___fttol@lval+1,f,c
 11394  001D6A  3232               	rrcf	___fttol@lval,f,c
 11395  001D6C  3E36               	incfsz	___fttol@exp1,f,c
 11396  001D6E  D7F9               	goto	i2l3416
 11397  001D70  D015               	goto	i2l3430
 11398  001D72                     i2l3420:
 11399  001D72  0E17               	movlw	23
 11400  001D74  6436               	cpfsgt	___fttol@exp1,c
 11401  001D76  D00F               	goto	i2l3428
 11402  001D78  0E00               	movlw	0
 11403  001D7A  6E28               	movwf	?___fttol,c
 11404  001D7C  0E00               	movlw	0
 11405  001D7E  6E29               	movwf	?___fttol+1,c
 11406  001D80  0E00               	movlw	0
 11407  001D82  6E2A               	movwf	?___fttol+2,c
 11408  001D84  0E00               	movlw	0
 11409  001D86  6E2B               	movwf	?___fttol+3,c
 11410  001D88  0012               	return	
 11411  001D8A                     i2l3426:
 11412  001D8A  90D8               	bcf	status,0,c
 11413  001D8C  3632               	rlcf	___fttol@lval,f,c
 11414  001D8E  3633               	rlcf	___fttol@lval+1,f,c
 11415  001D90  3634               	rlcf	___fttol@lval+2,f,c
 11416  001D92  3635               	rlcf	___fttol@lval+3,f,c
 11417  001D94  0636               	decf	___fttol@exp1,f,c
 11418  001D96                     i2l3428:
 11419  001D96  5036               	movf	___fttol@exp1,w,c
 11420  001D98  A4D8               	btfss	status,2,c
 11421  001D9A  D7F7               	goto	i2l3426
 11422  001D9C                     i2l3430:
 11423  001D9C  5031               	movf	___fttol@sign1,w,c
 11424  001D9E  B4D8               	btfsc	status,2,c
 11425  001DA0  D008               	goto	i2l3434
 11426  001DA2  1E35               	comf	___fttol@lval+3,f,c
 11427  001DA4  1E34               	comf	___fttol@lval+2,f,c
 11428  001DA6  1E33               	comf	___fttol@lval+1,f,c
 11429  001DA8  6C32               	negf	___fttol@lval,c
 11430  001DAA  0E00               	movlw	0
 11431  001DAC  2233               	addwfc	___fttol@lval+1,f,c
 11432  001DAE  2234               	addwfc	___fttol@lval+2,f,c
 11433  001DB0  2235               	addwfc	___fttol@lval+3,f,c
 11434  001DB2                     i2l3434:
 11435  001DB2  C032  F028         	movff	___fttol@lval,?___fttol
 11436  001DB6  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 11437  001DBA  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 11438  001DBE  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 11439  001DC2  0012               	return	
 11440  001DC4                     __end_of___fttol:
 11441                           	opt stack 0
 11442                           pclatu	equ	0xFFB
 11443                           pclath	equ	0xFFA
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           intcon3	equ	0xFF0
 11453                           postinc0	equ	0xFEE
 11454                           fsr0h	equ	0xFEA
 11455                           fsr0l	equ	0xFE9
 11456                           wreg	equ	0xFE8
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function ___ftge *****************
 11467 ;; Defined at:
 11468 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  ff1             3    0[COMRAM] float 
 11471 ;;  ff2             3    3[COMRAM] float 
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;		None
 11474 ;; Return value:  Size  Location     Type
 11475 ;;		None               void
 11476 ;; Registers used:
 11477 ;;		wreg, status,2, status,0
 11478 ;; Tracked objects:
 11479 ;;		On entry : 0/0
 11480 ;;		On exit  : 0/0
 11481 ;;		Unchanged: 0/0
 11482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11483 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;Total ram usage:        9 bytes
 11488 ;; Hardware stack levels used:    1
 11489 ;; This function calls:
 11490 ;;		Nothing
 11491 ;; This function is called by:
 11492 ;;		_pow
 11493 ;;		_exp
 11494 ;;		_floor
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           	psect	text51
 11499  002862                     __ptext51:
 11500                           	opt stack 0
 11501  002862                     ___ftge:
 11502                           	opt stack 21
 11503                           
 11504                           ;incstack = 0
 11505  002862  AE03               	btfss	___ftge@ff1+2,7,c
 11506  002864  D016               	goto	i2l3378
 11507  002866  C001  F007         	movff	___ftge@ff1,??___ftge
 11508  00286A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11509  00286E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11510  002872  1E07               	comf	??___ftge,f,c
 11511  002874  1E08               	comf	??___ftge+1,f,c
 11512  002876  1E09               	comf	??___ftge+2,f,c
 11513  002878  2A07               	incf	??___ftge,f,c
 11514  00287A  0E00               	movlw	0
 11515  00287C  2208               	addwfc	??___ftge+1,f,c
 11516  00287E  2209               	addwfc	??___ftge+2,f,c
 11517  002880  0E00               	movlw	0
 11518  002882  2407               	addwf	??___ftge,w,c
 11519  002884  6E01               	movwf	___ftge@ff1,c
 11520  002886  0E00               	movlw	0
 11521  002888  2008               	addwfc	??___ftge+1,w,c
 11522  00288A  6E02               	movwf	___ftge@ff1+1,c
 11523  00288C  0E80               	movlw	128
 11524  00288E  2009               	addwfc	??___ftge+2,w,c
 11525  002890  6E03               	movwf	___ftge@ff1+2,c
 11526  002892                     i2l3378:
 11527  002892  AE06               	btfss	___ftge@ff2+2,7,c
 11528  002894  D016               	goto	i2l3382
 11529  002896  C004  F007         	movff	___ftge@ff2,??___ftge
 11530  00289A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11531  00289E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11532  0028A2  1E07               	comf	??___ftge,f,c
 11533  0028A4  1E08               	comf	??___ftge+1,f,c
 11534  0028A6  1E09               	comf	??___ftge+2,f,c
 11535  0028A8  2A07               	incf	??___ftge,f,c
 11536  0028AA  0E00               	movlw	0
 11537  0028AC  2208               	addwfc	??___ftge+1,f,c
 11538  0028AE  2209               	addwfc	??___ftge+2,f,c
 11539  0028B0  0E00               	movlw	0
 11540  0028B2  2407               	addwf	??___ftge,w,c
 11541  0028B4  6E04               	movwf	___ftge@ff2,c
 11542  0028B6  0E00               	movlw	0
 11543  0028B8  2008               	addwfc	??___ftge+1,w,c
 11544  0028BA  6E05               	movwf	___ftge@ff2+1,c
 11545  0028BC  0E80               	movlw	128
 11546  0028BE  2009               	addwfc	??___ftge+2,w,c
 11547  0028C0  6E06               	movwf	___ftge@ff2+2,c
 11548  0028C2                     i2l3382:
 11549  0028C2  0E00               	movlw	0
 11550  0028C4  1A01               	xorwf	___ftge@ff1,f,c
 11551  0028C6  0E00               	movlw	0
 11552  0028C8  1A02               	xorwf	___ftge@ff1+1,f,c
 11553  0028CA  0E80               	movlw	128
 11554  0028CC  1A03               	xorwf	___ftge@ff1+2,f,c
 11555  0028CE  0E00               	movlw	0
 11556  0028D0  1A04               	xorwf	___ftge@ff2,f,c
 11557  0028D2  0E00               	movlw	0
 11558  0028D4  1A05               	xorwf	___ftge@ff2+1,f,c
 11559  0028D6  0E80               	movlw	128
 11560  0028D8  1A06               	xorwf	___ftge@ff2+2,f,c
 11561  0028DA  5004               	movf	___ftge@ff2,w,c
 11562  0028DC  5C01               	subwf	___ftge@ff1,w,c
 11563  0028DE  5005               	movf	___ftge@ff2+1,w,c
 11564  0028E0  5802               	subwfb	___ftge@ff1+1,w,c
 11565  0028E2  5006               	movf	___ftge@ff2+2,w,c
 11566  0028E4  5803               	subwfb	___ftge@ff1+2,w,c
 11567  0028E6  B0D8               	btfsc	status,0,c
 11568  0028E8  D002               	goto	i2l3388
 11569  0028EA  90D8               	bcf	status,0,c
 11570  0028EC  0012               	return	
 11571  0028EE                     i2l3388:
 11572  0028EE  80D8               	bsf	status,0,c
 11573  0028F0  0012               	return	
 11574  0028F2                     __end_of___ftge:
 11575                           	opt stack 0
 11576                           pclatu	equ	0xFFB
 11577                           pclath	equ	0xFFA
 11578                           tblptru	equ	0xFF8
 11579                           tblptrh	equ	0xFF7
 11580                           tblptrl	equ	0xFF6
 11581                           tablat	equ	0xFF5
 11582                           prodh	equ	0xFF4
 11583                           prodl	equ	0xFF3
 11584                           intcon	equ	0xFF2
 11585                           intcon2	equ	0xFF1
 11586                           intcon3	equ	0xFF0
 11587                           postinc0	equ	0xFEE
 11588                           fsr0h	equ	0xFEA
 11589                           fsr0l	equ	0xFE9
 11590                           wreg	equ	0xFE8
 11591                           fsr1h	equ	0xFE2
 11592                           fsr1l	equ	0xFE1
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function ___altoft *****************
 11601 ;; Defined at:
 11602 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  c               4   54[COMRAM] long 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  sign            1   63[COMRAM] unsigned char 
 11607 ;;  exp             1   62[COMRAM] unsigned char 
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  3   54[COMRAM] float 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0, cstack
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;Total ram usage:       10 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    1
 11624 ;; This function calls:
 11625 ;;		___ftpack
 11626 ;; This function is called by:
 11627 ;;		_floor
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           	psect	text52
 11632  0029EE                     __ptext52:
 11633                           	opt stack 0
 11634  0029EE                     ___altoft:
 11635                           	opt stack 20
 11636                           
 11637                           ;incstack = 0
 11638  0029EE  0E00               	movlw	0
 11639  0029F0  6E40               	movwf	___altoft@sign,c
 11640  0029F2  0E8E               	movlw	142
 11641  0029F4  6E3F               	movwf	___altoft@exp,c
 11642  0029F6  AE3A               	btfss	___altoft@c+3,7,c
 11643  0029F8  D011               	goto	i2l3250
 11644  0029FA  1E3A               	comf	___altoft@c+3,f,c
 11645  0029FC  1E39               	comf	___altoft@c+2,f,c
 11646  0029FE  1E38               	comf	___altoft@c+1,f,c
 11647  002A00  6C37               	negf	___altoft@c,c
 11648  002A02  0E00               	movlw	0
 11649  002A04  2238               	addwfc	___altoft@c+1,f,c
 11650  002A06  2239               	addwfc	___altoft@c+2,f,c
 11651  002A08  223A               	addwfc	___altoft@c+3,f,c
 11652  002A0A  0E01               	movlw	1
 11653  002A0C  6E40               	movwf	___altoft@sign,c
 11654  002A0E  D006               	goto	i2l3250
 11655  002A10                     i2l3248:
 11656  002A10  90D8               	bcf	status,0,c
 11657  002A12  323A               	rrcf	___altoft@c+3,f,c
 11658  002A14  3239               	rrcf	___altoft@c+2,f,c
 11659  002A16  3238               	rrcf	___altoft@c+1,f,c
 11660  002A18  3237               	rrcf	___altoft@c,f,c
 11661  002A1A  2A3F               	incf	___altoft@exp,f,c
 11662  002A1C                     i2l3250:
 11663  002A1C  0E00               	movlw	0
 11664  002A1E  1437               	andwf	___altoft@c,w,c
 11665  002A20  6E3B               	movwf	??___altoft& (0+255),c
 11666  002A22  0E00               	movlw	0
 11667  002A24  1438               	andwf	___altoft@c+1,w,c
 11668  002A26  6E3C               	movwf	(??___altoft+1)& (0+255),c
 11669  002A28  0E00               	movlw	0
 11670  002A2A  1439               	andwf	___altoft@c+2,w,c
 11671  002A2C  6E3D               	movwf	(??___altoft+2)& (0+255),c
 11672  002A2E  0EFF               	movlw	255
 11673  002A30  143A               	andwf	___altoft@c+3,w,c
 11674  002A32  6E3E               	movwf	(??___altoft+3)& (0+255),c
 11675  002A34  503B               	movf	??___altoft,w,c
 11676  002A36  103C               	iorwf	??___altoft+1,w,c
 11677  002A38  103D               	iorwf	??___altoft+2,w,c
 11678  002A3A  103E               	iorwf	??___altoft+3,w,c
 11679  002A3C  A4D8               	btfss	status,2,c
 11680  002A3E  D7E8               	goto	i2l3248
 11681  002A40  C037  F001         	movff	___altoft@c,___ftpack@arg
 11682  002A44  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 11683  002A48  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 11684  002A4C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 11685  002A50  C040  F005         	movff	___altoft@sign,___ftpack@sign
 11686  002A54  EC96  F012         	call	___ftpack	;wreg free
 11687  002A58  C001  F037         	movff	?___ftpack,?___altoft
 11688  002A5C  C002  F038         	movff	?___ftpack+1,?___altoft+1
 11689  002A60  C003  F039         	movff	?___ftpack+2,?___altoft+2
 11690  002A64  0012               	return	
 11691  002A66                     __end_of___altoft:
 11692                           	opt stack 0
 11693                           pclatu	equ	0xFFB
 11694                           pclath	equ	0xFFA
 11695                           tblptru	equ	0xFF8
 11696                           tblptrh	equ	0xFF7
 11697                           tblptrl	equ	0xFF6
 11698                           tablat	equ	0xFF5
 11699                           prodh	equ	0xFF4
 11700                           prodl	equ	0xFF3
 11701                           intcon	equ	0xFF2
 11702                           intcon2	equ	0xFF1
 11703                           intcon3	equ	0xFF0
 11704                           postinc0	equ	0xFEE
 11705                           fsr0h	equ	0xFEA
 11706                           fsr0l	equ	0xFE9
 11707                           wreg	equ	0xFE8
 11708                           fsr1h	equ	0xFE2
 11709                           fsr1l	equ	0xFE1
 11710                           indf2	equ	0xFDF
 11711                           postinc2	equ	0xFDE
 11712                           postdec2	equ	0xFDD
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _eval_poly *****************
 11718 ;; Defined at:
 11719 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;  x               3   39[COMRAM] float 
 11722 ;;  d               2   42[COMRAM] PTR const 
 11723 ;;		 -> log@coeff(27), exp@coeff(30), 
 11724 ;;  n               2   44[COMRAM] int 
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  res             3   48[COMRAM] int 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  3   39[COMRAM] int 
 11729 ;; Registers used:
 11730 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11736 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11738 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11739 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11740 ;;Total ram usage:       12 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    2
 11743 ;; This function calls:
 11744 ;;		___ftadd
 11745 ;;		___ftmul
 11746 ;;		i2___wmul
 11747 ;; This function is called by:
 11748 ;;		_exp
 11749 ;;		_log
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753                           	psect	text53
 11754  002228                     __ptext53:
 11755                           	opt stack 0
 11756  002228                     _eval_poly:
 11757                           	opt stack 20
 11758                           
 11759                           ;incstack = 0
 11760  002228  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11761  00222C  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11762  002230  0E00               	movlw	0
 11763  002232  6E04               	movwf	i2___wmul@multiplicand+1,c
 11764  002234  0E03               	movlw	3
 11765  002236  6E03               	movwf	i2___wmul@multiplicand,c
 11766  002238  ECC4  F017         	call	i2___wmul	;wreg free
 11767  00223C  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11768  002240  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11769  002244  5001               	movf	?i2___wmul,w,c
 11770  002246  262F               	addwf	??_eval_poly,f,c
 11771  002248  5002               	movf	?i2___wmul+1,w,c
 11772  00224A  2230               	addwfc	??_eval_poly+1,f,c
 11773  00224C  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11774  002250  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11775  002254                     	if	0	;tblptru may be non-zero
 11776  002254                     	endif
 11777  002254                     	if	0	;tblptru may be non-zero
 11778  002254                     	endif
 11779  002254  0009               	tblrd		*+
 11780  002256  CFF5 F031          	movff	tablat,eval_poly@res
 11781  00225A  0009               	tblrd		*+
 11782  00225C  CFF5 F032          	movff	tablat,eval_poly@res+1
 11783  002260  000A               	tblrd		*-
 11784  002262  CFF5 F033          	movff	tablat,eval_poly@res+2
 11785  002266  D03E               	goto	i2l3584
 11786  002268                     i2l3582:
 11787  002268  C031  F010         	movff	eval_poly@res,___ftmul@f2
 11788  00226C  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 11789  002270  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 11790  002274  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 11791  002278  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 11792  00227C  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 11793  002280  ECE2  F00E         	call	___ftmul	;wreg free
 11794  002284  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11795  002288  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11796  00228C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11797  002290  0E00               	movlw	0
 11798  002292  6E04               	movwf	i2___wmul@multiplicand+1,c
 11799  002294  0E03               	movlw	3
 11800  002296  6E03               	movwf	i2___wmul@multiplicand,c
 11801  002298  062D               	decf	eval_poly@n,f,c
 11802  00229A  A0D8               	btfss	status,0,c
 11803  00229C  062E               	decf	eval_poly@n+1,f,c
 11804  00229E  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 11805  0022A2  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 11806  0022A6  ECC4  F017         	call	i2___wmul	;wreg free
 11807  0022AA  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 11808  0022AE  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 11809  0022B2  5001               	movf	?i2___wmul,w,c
 11810  0022B4  262F               	addwf	??_eval_poly,f,c
 11811  0022B6  5002               	movf	?i2___wmul+1,w,c
 11812  0022B8  2230               	addwfc	??_eval_poly+1,f,c
 11813  0022BA  C02F  FFF6         	movff	??_eval_poly,tblptrl
 11814  0022BE  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 11815  0022C2                     	if	0	;tblptru may be non-zero
 11816  0022C2                     	endif
 11817  0022C2                     	if	0	;tblptru may be non-zero
 11818  0022C2                     	endif
 11819  0022C2  0009               	tblrd		*+
 11820  0022C4  CFF5 F01F          	movff	tablat,___ftadd@f2
 11821  0022C8  0009               	tblrd		*+
 11822  0022CA  CFF5 F020          	movff	tablat,___ftadd@f2+1
 11823  0022CE  000A               	tblrd		*-
 11824  0022D0  CFF5 F021          	movff	tablat,___ftadd@f2+2
 11825  0022D4  ECA3  F00A         	call	___ftadd	;wreg free
 11826  0022D8  C01C  F031         	movff	?___ftadd,eval_poly@res
 11827  0022DC  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 11828  0022E0  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 11829  0022E4                     i2l3584:
 11830  0022E4  502D               	movf	eval_poly@n,w,c
 11831  0022E6  102E               	iorwf	eval_poly@n+1,w,c
 11832  0022E8  A4D8               	btfss	status,2,c
 11833  0022EA  D7BE               	goto	i2l3582
 11834  0022EC  C031  F028         	movff	eval_poly@res,?_eval_poly
 11835  0022F0  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 11836  0022F4  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 11837  0022F8  0012               	return		;funcret
 11838  0022FA                     __end_of_eval_poly:
 11839                           	opt stack 0
 11840                           pclatu	equ	0xFFB
 11841                           pclath	equ	0xFFA
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           intcon2	equ	0xFF1
 11850                           intcon3	equ	0xFF0
 11851                           postinc0	equ	0xFEE
 11852                           fsr0h	equ	0xFEA
 11853                           fsr0l	equ	0xFE9
 11854                           wreg	equ	0xFE8
 11855                           fsr1h	equ	0xFE2
 11856                           fsr1l	equ	0xFE1
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function i2___wmul *****************
 11865 ;; Defined at:
 11866 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;  multiplier      2    0[COMRAM] unsigned int 
 11869 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;  __wmul          2    4[COMRAM] unsigned int 
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  2    0[COMRAM] unsigned int 
 11874 ;; Registers used:
 11875 ;;		wreg, status,2, status,0, prodl, prodh
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;Total ram usage:        6 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_isr
 11891 ;;		_servo_rotate0
 11892 ;;		_eval_poly
 11893 ;;		i2_printf
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           	psect	text54
 11898  002F88                     __ptext54:
 11899                           	opt stack 0
 11900  002F88                     i2___wmul:
 11901                           	opt stack 24
 11902                           
 11903                           ;incstack = 0
 11904  002F88  5001               	movf	i2___wmul@multiplier,w,c
 11905  002F8A  0203               	mulwf	i2___wmul@multiplicand,c
 11906  002F8C  CFF3 F005          	movff	prodl,i2___wmul@product
 11907  002F90  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11908  002F94  5001               	movf	i2___wmul@multiplier,w,c
 11909  002F96  0204               	mulwf	i2___wmul@multiplicand+1,c
 11910  002F98  50F3               	movf	prodl,w,c
 11911  002F9A  2606               	addwf	i2___wmul@product+1,f,c
 11912  002F9C  5002               	movf	i2___wmul@multiplier+1,w,c
 11913  002F9E  0203               	mulwf	i2___wmul@multiplicand,c
 11914  002FA0  50F3               	movf	prodl,w,c
 11915  002FA2  2606               	addwf	i2___wmul@product+1,f,c
 11916  002FA4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11917  002FA8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11918  002FAC  0012               	return	
 11919  002FAE                     __end_ofi2___wmul:
 11920                           	opt stack 0
 11921                           pclatu	equ	0xFFB
 11922                           pclath	equ	0xFFA
 11923                           tblptru	equ	0xFF8
 11924                           tblptrh	equ	0xFF7
 11925                           tblptrl	equ	0xFF6
 11926                           tablat	equ	0xFF5
 11927                           prodh	equ	0xFF4
 11928                           prodl	equ	0xFF3
 11929                           intcon	equ	0xFF2
 11930                           intcon2	equ	0xFF1
 11931                           intcon3	equ	0xFF0
 11932                           postinc0	equ	0xFEE
 11933                           fsr0h	equ	0xFEA
 11934                           fsr0l	equ	0xFE9
 11935                           wreg	equ	0xFE8
 11936                           fsr1h	equ	0xFE2
 11937                           fsr1l	equ	0xFE1
 11938                           indf2	equ	0xFDF
 11939                           postinc2	equ	0xFDE
 11940                           postdec2	equ	0xFDD
 11941                           fsr2h	equ	0xFDA
 11942                           fsr2l	equ	0xFD9
 11943                           status	equ	0xFD8
 11944                           
 11945 ;; *************** function ___ftmul *****************
 11946 ;; Defined at:
 11947 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;  f1              3   12[COMRAM] float 
 11950 ;;  f2              3   15[COMRAM] float 
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11953 ;;  sign            1   26[COMRAM] unsigned char 
 11954 ;;  cntr            1   25[COMRAM] unsigned char 
 11955 ;;  exp             1   21[COMRAM] unsigned char 
 11956 ;; Return value:  Size  Location     Type
 11957 ;;                  3   12[COMRAM] float 
 11958 ;; Registers used:
 11959 ;;		wreg, status,2, status,0, cstack
 11960 ;; Tracked objects:
 11961 ;;		On entry : 0/0
 11962 ;;		On exit  : 0/0
 11963 ;;		Unchanged: 0/0
 11964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;Total ram usage:       15 bytes
 11970 ;; Hardware stack levels used:    1
 11971 ;; Hardware stack levels required when called:    1
 11972 ;; This function calls:
 11973 ;;		___ftpack
 11974 ;; This function is called by:
 11975 ;;		_dec_to_hex
 11976 ;;		_pow
 11977 ;;		_exp
 11978 ;;		_log
 11979 ;;		_eval_poly
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	text55
 11984  001DC4                     __ptext55:
 11985                           	opt stack 0
 11986  001DC4                     ___ftmul:
 11987                           	opt stack 20
 11988                           
 11989                           ;incstack = 0
 11990  001DC4  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11991  001DC8  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11992  001DCA  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11993  001DCC  340E               	rlcf	___ftmul@f1+1,w,c
 11994  001DCE  3613               	rlcf	??___ftmul& (0+255),f,c
 11995  001DD0  E301               	bnc	u312_41
 11996  001DD2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11997  001DD4                     u312_41:
 11998  001DD4  5013               	movf	??___ftmul,w,c
 11999  001DD6  6E16               	movwf	___ftmul@exp,c
 12000  001DD8  5016               	movf	___ftmul@exp,w,c
 12001  001DDA  A4D8               	btfss	status,2,c
 12002  001DDC  D007               	goto	i2l3332
 12003  001DDE  0E00               	movlw	0
 12004  001DE0  6E0D               	movwf	?___ftmul,c
 12005  001DE2  0E00               	movlw	0
 12006  001DE4  6E0E               	movwf	?___ftmul+1,c
 12007  001DE6  0E00               	movlw	0
 12008  001DE8  6E0F               	movwf	?___ftmul+2,c
 12009  001DEA  0012               	return	
 12010  001DEC                     i2l3332:
 12011  001DEC  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 12012  001DF0  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12013  001DF2  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12014  001DF4  3411               	rlcf	___ftmul@f2+1,w,c
 12015  001DF6  3613               	rlcf	??___ftmul& (0+255),f,c
 12016  001DF8  E301               	bnc	u314_41
 12017  001DFA  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12018  001DFC                     u314_41:
 12019  001DFC  5013               	movf	??___ftmul,w,c
 12020  001DFE  6E1B               	movwf	___ftmul@sign,c
 12021  001E00  501B               	movf	___ftmul@sign,w,c
 12022  001E02  A4D8               	btfss	status,2,c
 12023  001E04  D007               	goto	i2l3338
 12024  001E06  0E00               	movlw	0
 12025  001E08  6E0D               	movwf	?___ftmul,c
 12026  001E0A  0E00               	movlw	0
 12027  001E0C  6E0E               	movwf	?___ftmul+1,c
 12028  001E0E  0E00               	movlw	0
 12029  001E10  6E0F               	movwf	?___ftmul+2,c
 12030  001E12  0012               	return	
 12031  001E14                     i2l3338:
 12032  001E14  501B               	movf	___ftmul@sign,w,c
 12033  001E16  0F7B               	addlw	123
 12034  001E18  2616               	addwf	___ftmul@exp,f,c
 12035  001E1A  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 12036  001E1E  5012               	movf	___ftmul@f2+2,w,c
 12037  001E20  1A1B               	xorwf	___ftmul@sign,f,c
 12038  001E22  0E80               	movlw	128
 12039  001E24  161B               	andwf	___ftmul@sign,f,c
 12040  001E26  8E0E               	bsf	___ftmul@f1+1,7,c
 12041  001E28  8E11               	bsf	___ftmul@f2+1,7,c
 12042  001E2A  0EFF               	movlw	255
 12043  001E2C  1610               	andwf	___ftmul@f2,f,c
 12044  001E2E  0EFF               	movlw	255
 12045  001E30  1611               	andwf	___ftmul@f2+1,f,c
 12046  001E32  0E00               	movlw	0
 12047  001E34  1612               	andwf	___ftmul@f2+2,f,c
 12048  001E36  0E00               	movlw	0
 12049  001E38  6E17               	movwf	___ftmul@f3_as_product,c
 12050  001E3A  0E00               	movlw	0
 12051  001E3C  6E18               	movwf	___ftmul@f3_as_product+1,c
 12052  001E3E  0E00               	movlw	0
 12053  001E40  6E19               	movwf	___ftmul@f3_as_product+2,c
 12054  001E42  0E07               	movlw	7
 12055  001E44  6E1A               	movwf	___ftmul@cntr,c
 12056  001E46                     i2l3352:
 12057  001E46  A00D               	btfss	___ftmul@f1,0,c
 12058  001E48  D006               	goto	i2l3356
 12059  001E4A  5010               	movf	___ftmul@f2,w,c
 12060  001E4C  2617               	addwf	___ftmul@f3_as_product,f,c
 12061  001E4E  5011               	movf	___ftmul@f2+1,w,c
 12062  001E50  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12063  001E52  5012               	movf	___ftmul@f2+2,w,c
 12064  001E54  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12065  001E56                     i2l3356:
 12066  001E56  90D8               	bcf	status,0,c
 12067  001E58  320F               	rrcf	___ftmul@f1+2,f,c
 12068  001E5A  320E               	rrcf	___ftmul@f1+1,f,c
 12069  001E5C  320D               	rrcf	___ftmul@f1,f,c
 12070  001E5E  90D8               	bcf	status,0,c
 12071  001E60  3610               	rlcf	___ftmul@f2,f,c
 12072  001E62  3611               	rlcf	___ftmul@f2+1,f,c
 12073  001E64  3612               	rlcf	___ftmul@f2+2,f,c
 12074  001E66  2E1A               	decfsz	___ftmul@cntr,f,c
 12075  001E68  D7EE               	goto	i2l3352
 12076  001E6A  0E09               	movlw	9
 12077  001E6C  6E1A               	movwf	___ftmul@cntr,c
 12078  001E6E                     i2l3362:
 12079  001E6E  A00D               	btfss	___ftmul@f1,0,c
 12080  001E70  D006               	goto	i2l3366
 12081  001E72  5010               	movf	___ftmul@f2,w,c
 12082  001E74  2617               	addwf	___ftmul@f3_as_product,f,c
 12083  001E76  5011               	movf	___ftmul@f2+1,w,c
 12084  001E78  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12085  001E7A  5012               	movf	___ftmul@f2+2,w,c
 12086  001E7C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12087  001E7E                     i2l3366:
 12088  001E7E  90D8               	bcf	status,0,c
 12089  001E80  320F               	rrcf	___ftmul@f1+2,f,c
 12090  001E82  320E               	rrcf	___ftmul@f1+1,f,c
 12091  001E84  320D               	rrcf	___ftmul@f1,f,c
 12092  001E86  90D8               	bcf	status,0,c
 12093  001E88  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 12094  001E8A  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 12095  001E8C  3217               	rrcf	___ftmul@f3_as_product,f,c
 12096  001E8E  2E1A               	decfsz	___ftmul@cntr,f,c
 12097  001E90  D7EE               	goto	i2l3362
 12098  001E92  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 12099  001E96  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12100  001E9A  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12101  001E9E  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 12102  001EA2  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 12103  001EA6  EC96  F012         	call	___ftpack	;wreg free
 12104  001EAA  C001  F00D         	movff	?___ftpack,?___ftmul
 12105  001EAE  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 12106  001EB2  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 12107  001EB6  0012               	return	
 12108  001EB8                     __end_of___ftmul:
 12109                           	opt stack 0
 12110                           pclatu	equ	0xFFB
 12111                           pclath	equ	0xFFA
 12112                           tblptru	equ	0xFF8
 12113                           tblptrh	equ	0xFF7
 12114                           tblptrl	equ	0xFF6
 12115                           tablat	equ	0xFF5
 12116                           prodh	equ	0xFF4
 12117                           prodl	equ	0xFF3
 12118                           intcon	equ	0xFF2
 12119                           intcon2	equ	0xFF1
 12120                           intcon3	equ	0xFF0
 12121                           postinc0	equ	0xFEE
 12122                           fsr0h	equ	0xFEA
 12123                           fsr0l	equ	0xFE9
 12124                           wreg	equ	0xFE8
 12125                           fsr1h	equ	0xFE2
 12126                           fsr1l	equ	0xFE1
 12127                           indf2	equ	0xFDF
 12128                           postinc2	equ	0xFDE
 12129                           postdec2	equ	0xFDD
 12130                           fsr2h	equ	0xFDA
 12131                           fsr2l	equ	0xFD9
 12132                           status	equ	0xFD8
 12133                           
 12134 ;; *************** function ___ftsub *****************
 12135 ;; Defined at:
 12136 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;  f1              3   39[COMRAM] float 
 12139 ;;  f2              3   42[COMRAM] float 
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;		None
 12142 ;; Return value:  Size  Location     Type
 12143 ;;                  3   39[COMRAM] float 
 12144 ;; Registers used:
 12145 ;;		wreg, status,2, status,0, cstack
 12146 ;; Tracked objects:
 12147 ;;		On entry : 0/0
 12148 ;;		On exit  : 0/0
 12149 ;;		Unchanged: 0/0
 12150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12151 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12155 ;;Total ram usage:        6 bytes
 12156 ;; Hardware stack levels used:    1
 12157 ;; Hardware stack levels required when called:    2
 12158 ;; This function calls:
 12159 ;;		___ftadd
 12160 ;; This function is called by:
 12161 ;;		_exp
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text56
 12166  002D7E                     __ptext56:
 12167                           	opt stack 0
 12168  002D7E                     ___ftsub:
 12169                           	opt stack 20
 12170                           
 12171                           ;incstack = 0
 12172  002D7E  502B               	movf	___ftsub@f2,w,c
 12173  002D80  102C               	iorwf	___ftsub@f2+1,w,c
 12174  002D82  102D               	iorwf	___ftsub@f2+2,w,c
 12175  002D84  B4D8               	btfsc	status,2,c
 12176  002D86  D006               	goto	i2l3536
 12177  002D88  0E00               	movlw	0
 12178  002D8A  1A2B               	xorwf	___ftsub@f2,f,c
 12179  002D8C  0E00               	movlw	0
 12180  002D8E  1A2C               	xorwf	___ftsub@f2+1,f,c
 12181  002D90  0E80               	movlw	128
 12182  002D92  1A2D               	xorwf	___ftsub@f2+2,f,c
 12183  002D94                     i2l3536:
 12184  002D94  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 12185  002D98  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 12186  002D9C  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 12187  002DA0  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 12188  002DA4  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 12189  002DA8  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 12190  002DAC  ECA3  F00A         	call	___ftadd	;wreg free
 12191  002DB0  C01C  F028         	movff	?___ftadd,?___ftsub
 12192  002DB4  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 12193  002DB8  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 12194  002DBC  0012               	return	
 12195  002DBE                     __end_of___ftsub:
 12196                           	opt stack 0
 12197                           pclatu	equ	0xFFB
 12198                           pclath	equ	0xFFA
 12199                           tblptru	equ	0xFF8
 12200                           tblptrh	equ	0xFF7
 12201                           tblptrl	equ	0xFF6
 12202                           tablat	equ	0xFF5
 12203                           prodh	equ	0xFF4
 12204                           prodl	equ	0xFF3
 12205                           intcon	equ	0xFF2
 12206                           intcon2	equ	0xFF1
 12207                           intcon3	equ	0xFF0
 12208                           postinc0	equ	0xFEE
 12209                           fsr0h	equ	0xFEA
 12210                           fsr0l	equ	0xFE9
 12211                           wreg	equ	0xFE8
 12212                           fsr1h	equ	0xFE2
 12213                           fsr1l	equ	0xFE1
 12214                           indf2	equ	0xFDF
 12215                           postinc2	equ	0xFDE
 12216                           postdec2	equ	0xFDD
 12217                           fsr2h	equ	0xFDA
 12218                           fsr2l	equ	0xFD9
 12219                           status	equ	0xFD8
 12220                           
 12221 ;; *************** function ___ftadd *****************
 12222 ;; Defined at:
 12223 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 12224 ;; Parameters:    Size  Location     Type
 12225 ;;  f1              3   27[COMRAM] float 
 12226 ;;  f2              3   30[COMRAM] float 
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;  exp1            1   38[COMRAM] unsigned char 
 12229 ;;  exp2            1   37[COMRAM] unsigned char 
 12230 ;;  sign            1   36[COMRAM] unsigned char 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  3   27[COMRAM] float 
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, status,0, cstack
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12240 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12241 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12243 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;Total ram usage:       12 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    1
 12247 ;; This function calls:
 12248 ;;		___ftpack
 12249 ;; This function is called by:
 12250 ;;		_dec_to_hex
 12251 ;;		___ftsub
 12252 ;;		_floor
 12253 ;;		_log
 12254 ;;		_eval_poly
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           	psect	text57
 12259  001546                     __ptext57:
 12260                           	opt stack 0
 12261  001546                     ___ftadd:
 12262                           	opt stack 20
 12263                           
 12264                           ;incstack = 0
 12265  001546  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 12266  00154A  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12267  00154C  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12268  00154E  341D               	rlcf	___ftadd@f1+1,w,c
 12269  001550  3622               	rlcf	??___ftadd& (0+255),f,c
 12270  001552  E301               	bnc	u291_41
 12271  001554  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12272  001556                     u291_41:
 12273  001556  5022               	movf	??___ftadd,w,c
 12274  001558  6E27               	movwf	___ftadd@exp1,c
 12275  00155A  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 12276  00155E  6A23               	clrf	(??___ftadd+1)& (0+255),c
 12277  001560  6A24               	clrf	(??___ftadd+2)& (0+255),c
 12278  001562  3420               	rlcf	___ftadd@f2+1,w,c
 12279  001564  3622               	rlcf	??___ftadd& (0+255),f,c
 12280  001566  E301               	bnc	u292_41
 12281  001568  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 12282  00156A                     u292_41:
 12283  00156A  5022               	movf	??___ftadd,w,c
 12284  00156C  6E26               	movwf	___ftadd@exp2,c
 12285  00156E  5027               	movf	___ftadd@exp1,w,c
 12286  001570  B4D8               	btfsc	status,2,c
 12287  001572  D00B               	goto	i2l742
 12288  001574  5026               	movf	___ftadd@exp2,w,c
 12289  001576  5C27               	subwf	___ftadd@exp1,w,c
 12290  001578  B0D8               	btfsc	status,0,c
 12291  00157A  D00E               	goto	i2l3264
 12292  00157C  5027               	movf	___ftadd@exp1,w,c
 12293  00157E  0800               	sublw	0
 12294  001580  2426               	addwf	___ftadd@exp2,w,c
 12295  001582  6E22               	movwf	??___ftadd& (0+255),c
 12296  001584  0E18               	movlw	24
 12297  001586  6422               	cpfsgt	??___ftadd,c
 12298  001588  D007               	goto	i2l3264
 12299  00158A                     i2l742:
 12300  00158A  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 12301  00158E  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 12302  001592  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 12303  001596  0012               	return	
 12304  001598                     i2l3264:
 12305  001598  5026               	movf	___ftadd@exp2,w,c
 12306  00159A  B4D8               	btfsc	status,2,c
 12307  00159C  D00B               	goto	i2l746
 12308  00159E  5027               	movf	___ftadd@exp1,w,c
 12309  0015A0  5C26               	subwf	___ftadd@exp2,w,c
 12310  0015A2  B0D8               	btfsc	status,0,c
 12311  0015A4  D00E               	goto	i2l3270
 12312  0015A6  5026               	movf	___ftadd@exp2,w,c
 12313  0015A8  0800               	sublw	0
 12314  0015AA  2427               	addwf	___ftadd@exp1,w,c
 12315  0015AC  6E22               	movwf	??___ftadd& (0+255),c
 12316  0015AE  0E18               	movlw	24
 12317  0015B0  6422               	cpfsgt	??___ftadd,c
 12318  0015B2  D007               	goto	i2l3270
 12319  0015B4                     i2l746:
 12320  0015B4  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 12321  0015B8  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 12322  0015BC  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 12323  0015C0  0012               	return	
 12324  0015C2                     i2l3270:
 12325  0015C2  0E06               	movlw	6
 12326  0015C4  6E25               	movwf	___ftadd@sign,c
 12327  0015C6  BE1E               	btfsc	___ftadd@f1+2,7,c
 12328  0015C8  8E25               	bsf	___ftadd@sign,7,c
 12329  0015CA  BE21               	btfsc	___ftadd@f2+2,7,c
 12330  0015CC  8C25               	bsf	___ftadd@sign,6,c
 12331  0015CE  8E1D               	bsf	___ftadd@f1+1,7,c
 12332  0015D0  0EFF               	movlw	255
 12333  0015D2  161C               	andwf	___ftadd@f1,f,c
 12334  0015D4  0EFF               	movlw	255
 12335  0015D6  161D               	andwf	___ftadd@f1+1,f,c
 12336  0015D8  0E00               	movlw	0
 12337  0015DA  161E               	andwf	___ftadd@f1+2,f,c
 12338  0015DC  8E20               	bsf	___ftadd@f2+1,7,c
 12339  0015DE  0EFF               	movlw	255
 12340  0015E0  161F               	andwf	___ftadd@f2,f,c
 12341  0015E2  0EFF               	movlw	255
 12342  0015E4  1620               	andwf	___ftadd@f2+1,f,c
 12343  0015E6  0E00               	movlw	0
 12344  0015E8  1621               	andwf	___ftadd@f2+2,f,c
 12345  0015EA  5026               	movf	___ftadd@exp2,w,c
 12346  0015EC  5C27               	subwf	___ftadd@exp1,w,c
 12347  0015EE  B0D8               	btfsc	status,0,c
 12348  0015F0  D01B               	goto	i2l3296
 12349  0015F2                     i2l3286:
 12350  0015F2  90D8               	bcf	status,0,c
 12351  0015F4  361F               	rlcf	___ftadd@f2,f,c
 12352  0015F6  3620               	rlcf	___ftadd@f2+1,f,c
 12353  0015F8  3621               	rlcf	___ftadd@f2+2,f,c
 12354  0015FA  0626               	decf	___ftadd@exp2,f,c
 12355  0015FC  5027               	movf	___ftadd@exp1,w,c
 12356  0015FE  1826               	xorwf	___ftadd@exp2,w,c
 12357  001600  B4D8               	btfsc	status,2,c
 12358  001602  D00D               	goto	i2l3294
 12359  001604  0625               	decf	___ftadd@sign,f,c
 12360  001606  C025  F022         	movff	___ftadd@sign,??___ftadd
 12361  00160A  0E07               	movlw	7
 12362  00160C  1622               	andwf	??___ftadd,f,c
 12363  00160E  B4D8               	btfsc	status,2,c
 12364  001610  D006               	goto	i2l3294
 12365  001612  D7EF               	goto	i2l3286
 12366  001614                     i2l3292:
 12367  001614  90D8               	bcf	status,0,c
 12368  001616  321E               	rrcf	___ftadd@f1+2,f,c
 12369  001618  321D               	rrcf	___ftadd@f1+1,f,c
 12370  00161A  321C               	rrcf	___ftadd@f1,f,c
 12371  00161C  2A27               	incf	___ftadd@exp1,f,c
 12372  00161E                     i2l3294:
 12373  00161E  5026               	movf	___ftadd@exp2,w,c
 12374  001620  1827               	xorwf	___ftadd@exp1,w,c
 12375  001622  B4D8               	btfsc	status,2,c
 12376  001624  D01F               	goto	i2l757
 12377  001626  D7F6               	goto	i2l3292
 12378  001628                     i2l3296:
 12379  001628  5027               	movf	___ftadd@exp1,w,c
 12380  00162A  5C26               	subwf	___ftadd@exp2,w,c
 12381  00162C  B0D8               	btfsc	status,0,c
 12382  00162E  D01A               	goto	i2l757
 12383  001630                     i2l3298:
 12384  001630  90D8               	bcf	status,0,c
 12385  001632  361C               	rlcf	___ftadd@f1,f,c
 12386  001634  361D               	rlcf	___ftadd@f1+1,f,c
 12387  001636  361E               	rlcf	___ftadd@f1+2,f,c
 12388  001638  0627               	decf	___ftadd@exp1,f,c
 12389  00163A  5027               	movf	___ftadd@exp1,w,c
 12390  00163C  1826               	xorwf	___ftadd@exp2,w,c
 12391  00163E  B4D8               	btfsc	status,2,c
 12392  001640  D00D               	goto	i2l3306
 12393  001642  0625               	decf	___ftadd@sign,f,c
 12394  001644  C025  F022         	movff	___ftadd@sign,??___ftadd
 12395  001648  0E07               	movlw	7
 12396  00164A  1622               	andwf	??___ftadd,f,c
 12397  00164C  B4D8               	btfsc	status,2,c
 12398  00164E  D006               	goto	i2l3306
 12399  001650  D7EF               	goto	i2l3298
 12400  001652                     i2l3304:
 12401  001652  90D8               	bcf	status,0,c
 12402  001654  3221               	rrcf	___ftadd@f2+2,f,c
 12403  001656  3220               	rrcf	___ftadd@f2+1,f,c
 12404  001658  321F               	rrcf	___ftadd@f2,f,c
 12405  00165A  2A26               	incf	___ftadd@exp2,f,c
 12406  00165C                     i2l3306:
 12407  00165C  5026               	movf	___ftadd@exp2,w,c
 12408  00165E  1827               	xorwf	___ftadd@exp1,w,c
 12409  001660  A4D8               	btfss	status,2,c
 12410  001662  D7F7               	goto	i2l3304
 12411  001664                     i2l757:
 12412  001664  AE25               	btfss	___ftadd@sign,7,c
 12413  001666  D00C               	goto	i2l766
 12414  001668  0EFF               	movlw	255
 12415  00166A  1A1C               	xorwf	___ftadd@f1,f,c
 12416  00166C  0EFF               	movlw	255
 12417  00166E  1A1D               	xorwf	___ftadd@f1+1,f,c
 12418  001670  0EFF               	movlw	255
 12419  001672  1A1E               	xorwf	___ftadd@f1+2,f,c
 12420  001674  0E01               	movlw	1
 12421  001676  261C               	addwf	___ftadd@f1,f,c
 12422  001678  0E00               	movlw	0
 12423  00167A  221D               	addwfc	___ftadd@f1+1,f,c
 12424  00167C  0E00               	movlw	0
 12425  00167E  221E               	addwfc	___ftadd@f1+2,f,c
 12426  001680                     i2l766:
 12427  001680  AC25               	btfss	___ftadd@sign,6,c
 12428  001682  D00C               	goto	i2l3312
 12429  001684  0EFF               	movlw	255
 12430  001686  1A1F               	xorwf	___ftadd@f2,f,c
 12431  001688  0EFF               	movlw	255
 12432  00168A  1A20               	xorwf	___ftadd@f2+1,f,c
 12433  00168C  0EFF               	movlw	255
 12434  00168E  1A21               	xorwf	___ftadd@f2+2,f,c
 12435  001690  0E01               	movlw	1
 12436  001692  261F               	addwf	___ftadd@f2,f,c
 12437  001694  0E00               	movlw	0
 12438  001696  2220               	addwfc	___ftadd@f2+1,f,c
 12439  001698  0E00               	movlw	0
 12440  00169A  2221               	addwfc	___ftadd@f2+2,f,c
 12441  00169C                     i2l3312:
 12442  00169C  0E00               	movlw	0
 12443  00169E  6E25               	movwf	___ftadd@sign,c
 12444  0016A0  501C               	movf	___ftadd@f1,w,c
 12445  0016A2  261F               	addwf	___ftadd@f2,f,c
 12446  0016A4  501D               	movf	___ftadd@f1+1,w,c
 12447  0016A6  2220               	addwfc	___ftadd@f2+1,f,c
 12448  0016A8  501E               	movf	___ftadd@f1+2,w,c
 12449  0016AA  2221               	addwfc	___ftadd@f2+2,f,c
 12450  0016AC  AE21               	btfss	___ftadd@f2+2,7,c
 12451  0016AE  D00E               	goto	i2l3322
 12452  0016B0  0EFF               	movlw	255
 12453  0016B2  1A1F               	xorwf	___ftadd@f2,f,c
 12454  0016B4  0EFF               	movlw	255
 12455  0016B6  1A20               	xorwf	___ftadd@f2+1,f,c
 12456  0016B8  0EFF               	movlw	255
 12457  0016BA  1A21               	xorwf	___ftadd@f2+2,f,c
 12458  0016BC  0E01               	movlw	1
 12459  0016BE  261F               	addwf	___ftadd@f2,f,c
 12460  0016C0  0E00               	movlw	0
 12461  0016C2  2220               	addwfc	___ftadd@f2+1,f,c
 12462  0016C4  0E00               	movlw	0
 12463  0016C6  2221               	addwfc	___ftadd@f2+2,f,c
 12464  0016C8  0E01               	movlw	1
 12465  0016CA  6E25               	movwf	___ftadd@sign,c
 12466  0016CC                     i2l3322:
 12467  0016CC  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 12468  0016D0  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 12469  0016D4  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 12470  0016D8  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 12471  0016DC  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 12472  0016E0  EC96  F012         	call	___ftpack	;wreg free
 12473  0016E4  C001  F01C         	movff	?___ftpack,?___ftadd
 12474  0016E8  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 12475  0016EC  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 12476  0016F0  0012               	return	
 12477  0016F2                     __end_of___ftadd:
 12478                           	opt stack 0
 12479                           pclatu	equ	0xFFB
 12480                           pclath	equ	0xFFA
 12481                           tblptru	equ	0xFF8
 12482                           tblptrh	equ	0xFF7
 12483                           tblptrl	equ	0xFF6
 12484                           tablat	equ	0xFF5
 12485                           prodh	equ	0xFF4
 12486                           prodl	equ	0xFF3
 12487                           intcon	equ	0xFF2
 12488                           intcon2	equ	0xFF1
 12489                           intcon3	equ	0xFF0
 12490                           postinc0	equ	0xFEE
 12491                           fsr0h	equ	0xFEA
 12492                           fsr0l	equ	0xFE9
 12493                           wreg	equ	0xFE8
 12494                           fsr1h	equ	0xFE2
 12495                           fsr1l	equ	0xFE1
 12496                           indf2	equ	0xFDF
 12497                           postinc2	equ	0xFDE
 12498                           postdec2	equ	0xFDD
 12499                           fsr2h	equ	0xFDA
 12500                           fsr2l	equ	0xFD9
 12501                           status	equ	0xFD8
 12502                           
 12503 ;; *************** function ___ftneg *****************
 12504 ;; Defined at:
 12505 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;  f1              3    0[COMRAM] float 
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;		None
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  3    0[COMRAM] float 
 12512 ;; Registers used:
 12513 ;;		wreg, status,2, status,0
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12519 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;Total ram usage:        3 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; This function calls:
 12526 ;;		Nothing
 12527 ;; This function is called by:
 12528 ;;		_pow
 12529 ;;		_exp
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           	psect	text58
 12534  002FAE                     __ptext58:
 12535                           	opt stack 0
 12536  002FAE                     ___ftneg:
 12537                           	opt stack 22
 12538                           
 12539                           ;incstack = 0
 12540  002FAE  5001               	movf	___ftneg@f1,w,c
 12541  002FB0  1002               	iorwf	___ftneg@f1+1,w,c
 12542  002FB2  1003               	iorwf	___ftneg@f1+2,w,c
 12543  002FB4  B4D8               	btfsc	status,2,c
 12544  002FB6  D006               	goto	i2l799
 12545  002FB8  0E00               	movlw	0
 12546  002FBA  1A01               	xorwf	___ftneg@f1,f,c
 12547  002FBC  0E00               	movlw	0
 12548  002FBE  1A02               	xorwf	___ftneg@f1+1,f,c
 12549  002FC0  0E80               	movlw	128
 12550  002FC2  1A03               	xorwf	___ftneg@f1+2,f,c
 12551  002FC4                     i2l799:
 12552  002FC4  C001  F001         	movff	___ftneg@f1,?___ftneg
 12553  002FC8  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 12554  002FCC  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 12555  002FD0  0012               	return		;funcret
 12556  002FD2                     __end_of___ftneg:
 12557                           	opt stack 0
 12558                           pclatu	equ	0xFFB
 12559                           pclath	equ	0xFFA
 12560                           tblptru	equ	0xFF8
 12561                           tblptrh	equ	0xFF7
 12562                           tblptrl	equ	0xFF6
 12563                           tablat	equ	0xFF5
 12564                           prodh	equ	0xFF4
 12565                           prodl	equ	0xFF3
 12566                           intcon	equ	0xFF2
 12567                           intcon2	equ	0xFF1
 12568                           intcon3	equ	0xFF0
 12569                           postinc0	equ	0xFEE
 12570                           fsr0h	equ	0xFEA
 12571                           fsr0l	equ	0xFE9
 12572                           wreg	equ	0xFE8
 12573                           fsr1h	equ	0xFE2
 12574                           fsr1l	equ	0xFE1
 12575                           indf2	equ	0xFDF
 12576                           postinc2	equ	0xFDE
 12577                           postdec2	equ	0xFDD
 12578                           fsr2h	equ	0xFDA
 12579                           fsr2l	equ	0xFD9
 12580                           status	equ	0xFD8
 12581                           
 12582 ;; *************** function ___ftdiv *****************
 12583 ;; Defined at:
 12584 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;  f1              3    8[COMRAM] float 
 12587 ;;  f2              3   11[COMRAM] float 
 12588 ;; Auto vars:     Size  Location     Type
 12589 ;;  f3              3   18[COMRAM] float 
 12590 ;;  sign            1   22[COMRAM] unsigned char 
 12591 ;;  exp             1   21[COMRAM] unsigned char 
 12592 ;;  cntr            1   17[COMRAM] unsigned char 
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  3    8[COMRAM] float 
 12595 ;; Registers used:
 12596 ;;		wreg, status,2, status,0, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12602 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12603 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12604 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;Total ram usage:       15 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    1
 12609 ;; This function calls:
 12610 ;;		___ftpack
 12611 ;; This function is called by:
 12612 ;;		_exp
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           	psect	text59
 12617  001EB8                     __ptext59:
 12618                           	opt stack 0
 12619  001EB8                     ___ftdiv:
 12620                           	opt stack 21
 12621                           
 12622                           ;incstack = 0
 12623  001EB8  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 12624  001EBC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12625  001EBE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12626  001EC0  340A               	rlcf	___ftdiv@f1+1,w,c
 12627  001EC2  360F               	rlcf	??___ftdiv& (0+255),f,c
 12628  001EC4  E301               	bnc	u333_41
 12629  001EC6  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12630  001EC8                     u333_41:
 12631  001EC8  500F               	movf	??___ftdiv,w,c
 12632  001ECA  6E16               	movwf	___ftdiv@exp,c
 12633  001ECC  5016               	movf	___ftdiv@exp,w,c
 12634  001ECE  A4D8               	btfss	status,2,c
 12635  001ED0  D007               	goto	i2l3492
 12636  001ED2  0E00               	movlw	0
 12637  001ED4  6E09               	movwf	?___ftdiv,c
 12638  001ED6  0E00               	movlw	0
 12639  001ED8  6E0A               	movwf	?___ftdiv+1,c
 12640  001EDA  0E00               	movlw	0
 12641  001EDC  6E0B               	movwf	?___ftdiv+2,c
 12642  001EDE  0012               	return	
 12643  001EE0                     i2l3492:
 12644  001EE0  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 12645  001EE4  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 12646  001EE6  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 12647  001EE8  340D               	rlcf	___ftdiv@f2+1,w,c
 12648  001EEA  360F               	rlcf	??___ftdiv& (0+255),f,c
 12649  001EEC  E301               	bnc	u335_41
 12650  001EEE  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 12651  001EF0                     u335_41:
 12652  001EF0  500F               	movf	??___ftdiv,w,c
 12653  001EF2  6E17               	movwf	___ftdiv@sign,c
 12654  001EF4  5017               	movf	___ftdiv@sign,w,c
 12655  001EF6  A4D8               	btfss	status,2,c
 12656  001EF8  D007               	goto	i2l3498
 12657  001EFA  0E00               	movlw	0
 12658  001EFC  6E09               	movwf	?___ftdiv,c
 12659  001EFE  0E00               	movlw	0
 12660  001F00  6E0A               	movwf	?___ftdiv+1,c
 12661  001F02  0E00               	movlw	0
 12662  001F04  6E0B               	movwf	?___ftdiv+2,c
 12663  001F06  0012               	return	
 12664  001F08                     i2l3498:
 12665  001F08  0E00               	movlw	0
 12666  001F0A  6E13               	movwf	___ftdiv@f3,c
 12667  001F0C  0E00               	movlw	0
 12668  001F0E  6E14               	movwf	___ftdiv@f3+1,c
 12669  001F10  0E00               	movlw	0
 12670  001F12  6E15               	movwf	___ftdiv@f3+2,c
 12671  001F14  5017               	movf	___ftdiv@sign,w,c
 12672  001F16  0F89               	addlw	137
 12673  001F18  5E16               	subwf	___ftdiv@exp,f,c
 12674  001F1A  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 12675  001F1E  500E               	movf	___ftdiv@f2+2,w,c
 12676  001F20  1A17               	xorwf	___ftdiv@sign,f,c
 12677  001F22  0E80               	movlw	128
 12678  001F24  1617               	andwf	___ftdiv@sign,f,c
 12679  001F26  8E0A               	bsf	___ftdiv@f1+1,7,c
 12680  001F28  0EFF               	movlw	255
 12681  001F2A  1609               	andwf	___ftdiv@f1,f,c
 12682  001F2C  0EFF               	movlw	255
 12683  001F2E  160A               	andwf	___ftdiv@f1+1,f,c
 12684  001F30  0E00               	movlw	0
 12685  001F32  160B               	andwf	___ftdiv@f1+2,f,c
 12686  001F34  8E0D               	bsf	___ftdiv@f2+1,7,c
 12687  001F36  0EFF               	movlw	255
 12688  001F38  160C               	andwf	___ftdiv@f2,f,c
 12689  001F3A  0EFF               	movlw	255
 12690  001F3C  160D               	andwf	___ftdiv@f2+1,f,c
 12691  001F3E  0E00               	movlw	0
 12692  001F40  160E               	andwf	___ftdiv@f2+2,f,c
 12693  001F42  0E18               	movlw	24
 12694  001F44  6E12               	movwf	___ftdiv@cntr,c
 12695  001F46                     i2l3518:
 12696  001F46  90D8               	bcf	status,0,c
 12697  001F48  3613               	rlcf	___ftdiv@f3,f,c
 12698  001F4A  3614               	rlcf	___ftdiv@f3+1,f,c
 12699  001F4C  3615               	rlcf	___ftdiv@f3+2,f,c
 12700  001F4E  500C               	movf	___ftdiv@f2,w,c
 12701  001F50  5C09               	subwf	___ftdiv@f1,w,c
 12702  001F52  500D               	movf	___ftdiv@f2+1,w,c
 12703  001F54  580A               	subwfb	___ftdiv@f1+1,w,c
 12704  001F56  500E               	movf	___ftdiv@f2+2,w,c
 12705  001F58  580B               	subwfb	___ftdiv@f1+2,w,c
 12706  001F5A  A0D8               	btfss	status,0,c
 12707  001F5C  D007               	goto	i2l777
 12708  001F5E  500C               	movf	___ftdiv@f2,w,c
 12709  001F60  5E09               	subwf	___ftdiv@f1,f,c
 12710  001F62  500D               	movf	___ftdiv@f2+1,w,c
 12711  001F64  5A0A               	subwfb	___ftdiv@f1+1,f,c
 12712  001F66  500E               	movf	___ftdiv@f2+2,w,c
 12713  001F68  5A0B               	subwfb	___ftdiv@f1+2,f,c
 12714  001F6A  8013               	bsf	___ftdiv@f3,0,c
 12715  001F6C                     i2l777:
 12716  001F6C  90D8               	bcf	status,0,c
 12717  001F6E  3609               	rlcf	___ftdiv@f1,f,c
 12718  001F70  360A               	rlcf	___ftdiv@f1+1,f,c
 12719  001F72  360B               	rlcf	___ftdiv@f1+2,f,c
 12720  001F74  2E12               	decfsz	___ftdiv@cntr,f,c
 12721  001F76  D7E7               	goto	i2l3518
 12722  001F78  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 12723  001F7C  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 12724  001F80  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 12725  001F84  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 12726  001F88  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 12727  001F8C  EC96  F012         	call	___ftpack	;wreg free
 12728  001F90  C001  F009         	movff	?___ftpack,?___ftdiv
 12729  001F94  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 12730  001F98  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 12731  001F9C  0012               	return	
 12732  001F9E                     __end_of___ftdiv:
 12733                           	opt stack 0
 12734                           pclatu	equ	0xFFB
 12735                           pclath	equ	0xFFA
 12736                           tblptru	equ	0xFF8
 12737                           tblptrh	equ	0xFF7
 12738                           tblptrl	equ	0xFF6
 12739                           tablat	equ	0xFF5
 12740                           prodh	equ	0xFF4
 12741                           prodl	equ	0xFF3
 12742                           intcon	equ	0xFF2
 12743                           intcon2	equ	0xFF1
 12744                           intcon3	equ	0xFF0
 12745                           postinc0	equ	0xFEE
 12746                           fsr0h	equ	0xFEA
 12747                           fsr0l	equ	0xFE9
 12748                           wreg	equ	0xFE8
 12749                           fsr1h	equ	0xFE2
 12750                           fsr1l	equ	0xFE1
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function ___awtoft *****************
 12759 ;; Defined at:
 12760 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  c               2    8[COMRAM] int 
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;  sign            1   11[COMRAM] unsigned char 
 12765 ;; Return value:  Size  Location     Type
 12766 ;;                  3    8[COMRAM] float 
 12767 ;; Registers used:
 12768 ;;		wreg, status,2, status,0, cstack
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12774 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;Total ram usage:        4 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; Hardware stack levels required when called:    1
 12781 ;; This function calls:
 12782 ;;		___ftpack
 12783 ;; This function is called by:
 12784 ;;		_dec_to_hex
 12785 ;;		_exp
 12786 ;;		_log
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           	psect	text60
 12791  002DFC                     __ptext60:
 12792                           	opt stack 0
 12793  002DFC                     ___awtoft:
 12794                           	opt stack 21
 12795                           
 12796                           ;incstack = 0
 12797  002DFC  0E00               	movlw	0
 12798  002DFE  6E0C               	movwf	___awtoft@sign,c
 12799  002E00  AE0A               	btfss	___awtoft@c+1,7,c
 12800  002E02  D006               	goto	i2l3548
 12801  002E04  6C09               	negf	___awtoft@c,c
 12802  002E06  1E0A               	comf	___awtoft@c+1,f,c
 12803  002E08  B0D8               	btfsc	status,0,c
 12804  002E0A  2A0A               	incf	___awtoft@c+1,f,c
 12805  002E0C  0E01               	movlw	1
 12806  002E0E  6E0C               	movwf	___awtoft@sign,c
 12807  002E10                     i2l3548:
 12808  002E10  C009  F001         	movff	___awtoft@c,___ftpack@arg
 12809  002E14  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 12810  002E18  6A03               	clrf	___ftpack@arg+2,c
 12811  002E1A  0E8E               	movlw	142
 12812  002E1C  6E04               	movwf	___ftpack@exp,c
 12813  002E1E  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 12814  002E22  EC96  F012         	call	___ftpack	;wreg free
 12815  002E26  C001  F009         	movff	?___ftpack,?___awtoft
 12816  002E2A  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 12817  002E2E  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 12818  002E32  0012               	return	
 12819  002E34                     __end_of___awtoft:
 12820                           	opt stack 0
 12821                           pclatu	equ	0xFFB
 12822                           pclath	equ	0xFFA
 12823                           tblptru	equ	0xFF8
 12824                           tblptrh	equ	0xFF7
 12825                           tblptrl	equ	0xFF6
 12826                           tablat	equ	0xFF5
 12827                           prodh	equ	0xFF4
 12828                           prodl	equ	0xFF3
 12829                           intcon	equ	0xFF2
 12830                           intcon2	equ	0xFF1
 12831                           intcon3	equ	0xFF0
 12832                           postinc0	equ	0xFEE
 12833                           fsr0h	equ	0xFEA
 12834                           fsr0l	equ	0xFE9
 12835                           wreg	equ	0xFE8
 12836                           fsr1h	equ	0xFE2
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function ___lltoft *****************
 12846 ;; Defined at:
 12847 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;  c               4    8[COMRAM] unsigned long 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  exp             1   16[COMRAM] unsigned char 
 12852 ;; Return value:  Size  Location     Type
 12853 ;;                  3    8[COMRAM] float 
 12854 ;; Registers used:
 12855 ;;		wreg, status,2, status,0, cstack
 12856 ;; Tracked objects:
 12857 ;;		On entry : 0/0
 12858 ;;		On exit  : 0/0
 12859 ;;		Unchanged: 0/0
 12860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;Total ram usage:        9 bytes
 12866 ;; Hardware stack levels used:    1
 12867 ;; Hardware stack levels required when called:    1
 12868 ;; This function calls:
 12869 ;;		___ftpack
 12870 ;; This function is called by:
 12871 ;;		_pow
 12872 ;; This function uses a non-reentrant model
 12873 ;;
 12874                           
 12875                           	psect	text61
 12876  002BF0                     __ptext61:
 12877                           	opt stack 0
 12878  002BF0                     ___lltoft:
 12879                           	opt stack 22
 12880                           
 12881                           ;incstack = 0
 12882  002BF0  0E8E               	movlw	142
 12883  002BF2  6E11               	movwf	___lltoft@exp,c
 12884  002BF4  D006               	goto	i2l3674
 12885  002BF6                     i2l3672:
 12886  002BF6  90D8               	bcf	status,0,c
 12887  002BF8  320C               	rrcf	___lltoft@c+3,f,c
 12888  002BFA  320B               	rrcf	___lltoft@c+2,f,c
 12889  002BFC  320A               	rrcf	___lltoft@c+1,f,c
 12890  002BFE  3209               	rrcf	___lltoft@c,f,c
 12891  002C00  2A11               	incf	___lltoft@exp,f,c
 12892  002C02                     i2l3674:
 12893  002C02  0E00               	movlw	0
 12894  002C04  1409               	andwf	___lltoft@c,w,c
 12895  002C06  6E0D               	movwf	??___lltoft& (0+255),c
 12896  002C08  0E00               	movlw	0
 12897  002C0A  140A               	andwf	___lltoft@c+1,w,c
 12898  002C0C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12899  002C0E  0E00               	movlw	0
 12900  002C10  140B               	andwf	___lltoft@c+2,w,c
 12901  002C12  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12902  002C14  0EFF               	movlw	255
 12903  002C16  140C               	andwf	___lltoft@c+3,w,c
 12904  002C18  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12905  002C1A  500D               	movf	??___lltoft,w,c
 12906  002C1C  100E               	iorwf	??___lltoft+1,w,c
 12907  002C1E  100F               	iorwf	??___lltoft+2,w,c
 12908  002C20  1010               	iorwf	??___lltoft+3,w,c
 12909  002C22  A4D8               	btfss	status,2,c
 12910  002C24  D7E8               	goto	i2l3672
 12911  002C26  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12912  002C2A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12913  002C2E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12914  002C32  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12915  002C36  0E00               	movlw	0
 12916  002C38  6E05               	movwf	___ftpack@sign,c
 12917  002C3A  EC96  F012         	call	___ftpack	;wreg free
 12918  002C3E  C001  F009         	movff	?___ftpack,?___lltoft
 12919  002C42  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12920  002C46  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12921  002C4A  0012               	return	
 12922  002C4C                     __end_of___lltoft:
 12923                           	opt stack 0
 12924                           pclatu	equ	0xFFB
 12925                           pclath	equ	0xFFA
 12926                           tblptru	equ	0xFF8
 12927                           tblptrh	equ	0xFF7
 12928                           tblptrl	equ	0xFF6
 12929                           tablat	equ	0xFF5
 12930                           prodh	equ	0xFF4
 12931                           prodl	equ	0xFF3
 12932                           intcon	equ	0xFF2
 12933                           intcon2	equ	0xFF1
 12934                           intcon3	equ	0xFF0
 12935                           postinc0	equ	0xFEE
 12936                           fsr0h	equ	0xFEA
 12937                           fsr0l	equ	0xFE9
 12938                           wreg	equ	0xFE8
 12939                           fsr1h	equ	0xFE2
 12940                           fsr1l	equ	0xFE1
 12941                           indf2	equ	0xFDF
 12942                           postinc2	equ	0xFDE
 12943                           postdec2	equ	0xFDD
 12944                           fsr2h	equ	0xFDA
 12945                           fsr2l	equ	0xFD9
 12946                           status	equ	0xFD8
 12947                           
 12948 ;; *************** function ___ftpack *****************
 12949 ;; Defined at:
 12950 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 12951 ;; Parameters:    Size  Location     Type
 12952 ;;  arg             3    0[COMRAM] unsigned um
 12953 ;;  exp             1    3[COMRAM] unsigned char 
 12954 ;;  sign            1    4[COMRAM] unsigned char 
 12955 ;; Auto vars:     Size  Location     Type
 12956 ;;		None
 12957 ;; Return value:  Size  Location     Type
 12958 ;;                  3    0[COMRAM] float 
 12959 ;; Registers used:
 12960 ;;		wreg, status,2, status,0
 12961 ;; Tracked objects:
 12962 ;;		On entry : 0/0
 12963 ;;		On exit  : 0/0
 12964 ;;		Unchanged: 0/0
 12965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12966 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12968 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12969 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;Total ram usage:        8 bytes
 12971 ;; Hardware stack levels used:    1
 12972 ;; This function calls:
 12973 ;;		Nothing
 12974 ;; This function is called by:
 12975 ;;		___altoft
 12976 ;;		___awtoft
 12977 ;;		___ftadd
 12978 ;;		___ftdiv
 12979 ;;		___ftmul
 12980 ;;		___lltoft
 12981 ;; This function uses a non-reentrant model
 12982 ;;
 12983                           
 12984                           	psect	text62
 12985  00252C                     __ptext62:
 12986                           	opt stack 0
 12987  00252C                     ___ftpack:
 12988                           	opt stack 20
 12989                           
 12990                           ;incstack = 0
 12991  00252C  5004               	movf	___ftpack@exp,w,c
 12992  00252E  B4D8               	btfsc	status,2,c
 12993  002530  D005               	goto	i2l3208
 12994  002532  5001               	movf	___ftpack@arg,w,c
 12995  002534  1002               	iorwf	___ftpack@arg+1,w,c
 12996  002536  1003               	iorwf	___ftpack@arg+2,w,c
 12997  002538  A4D8               	btfss	status,2,c
 12998  00253A  D00C               	goto	i2l3214
 12999  00253C                     i2l3208:
 13000  00253C  0E00               	movlw	0
 13001  00253E  6E01               	movwf	?___ftpack,c
 13002  002540  0E00               	movlw	0
 13003  002542  6E02               	movwf	?___ftpack+1,c
 13004  002544  0E00               	movlw	0
 13005  002546  6E03               	movwf	?___ftpack+2,c
 13006  002548  0012               	return	
 13007  00254A                     i2l3212:
 13008  00254A  2A04               	incf	___ftpack@exp,f,c
 13009  00254C  90D8               	bcf	status,0,c
 13010  00254E  3203               	rrcf	___ftpack@arg+2,f,c
 13011  002550  3202               	rrcf	___ftpack@arg+1,f,c
 13012  002552  3201               	rrcf	___ftpack@arg,f,c
 13013  002554                     i2l3214:
 13014  002554  0E00               	movlw	0
 13015  002556  1401               	andwf	___ftpack@arg,w,c
 13016  002558  6E06               	movwf	??___ftpack& (0+255),c
 13017  00255A  0E00               	movlw	0
 13018  00255C  1402               	andwf	___ftpack@arg+1,w,c
 13019  00255E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13020  002560  0EFE               	movlw	254
 13021  002562  1403               	andwf	___ftpack@arg+2,w,c
 13022  002564  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13023  002566  5006               	movf	??___ftpack,w,c
 13024  002568  1007               	iorwf	??___ftpack+1,w,c
 13025  00256A  1008               	iorwf	??___ftpack+2,w,c
 13026  00256C  B4D8               	btfsc	status,2,c
 13027  00256E  D00C               	goto	i2l3220
 13028  002570  D7EC               	goto	i2l3212
 13029  002572                     i2l3216:
 13030  002572  2A04               	incf	___ftpack@exp,f,c
 13031  002574  0E01               	movlw	1
 13032  002576  2601               	addwf	___ftpack@arg,f,c
 13033  002578  0E00               	movlw	0
 13034  00257A  2202               	addwfc	___ftpack@arg+1,f,c
 13035  00257C  0E00               	movlw	0
 13036  00257E  2203               	addwfc	___ftpack@arg+2,f,c
 13037  002580  90D8               	bcf	status,0,c
 13038  002582  3203               	rrcf	___ftpack@arg+2,f,c
 13039  002584  3202               	rrcf	___ftpack@arg+1,f,c
 13040  002586  3201               	rrcf	___ftpack@arg,f,c
 13041  002588                     i2l3220:
 13042  002588  0E00               	movlw	0
 13043  00258A  1401               	andwf	___ftpack@arg,w,c
 13044  00258C  6E06               	movwf	??___ftpack& (0+255),c
 13045  00258E  0E00               	movlw	0
 13046  002590  1402               	andwf	___ftpack@arg+1,w,c
 13047  002592  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13048  002594  0EFF               	movlw	255
 13049  002596  1403               	andwf	___ftpack@arg+2,w,c
 13050  002598  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13051  00259A  5006               	movf	??___ftpack,w,c
 13052  00259C  1007               	iorwf	??___ftpack+1,w,c
 13053  00259E  1008               	iorwf	??___ftpack+2,w,c
 13054  0025A0  B4D8               	btfsc	status,2,c
 13055  0025A2  D006               	goto	i2l3224
 13056  0025A4  D7E6               	goto	i2l3216
 13057  0025A6                     i2l3222:
 13058  0025A6  0604               	decf	___ftpack@exp,f,c
 13059  0025A8  90D8               	bcf	status,0,c
 13060  0025AA  3601               	rlcf	___ftpack@arg,f,c
 13061  0025AC  3602               	rlcf	___ftpack@arg+1,f,c
 13062  0025AE  3603               	rlcf	___ftpack@arg+2,f,c
 13063  0025B0                     i2l3224:
 13064  0025B0  BE02               	btfsc	___ftpack@arg+1,7,c
 13065  0025B2  D003               	goto	i2l719
 13066  0025B4  0E02               	movlw	2
 13067  0025B6  6004               	cpfslt	___ftpack@exp,c
 13068  0025B8  D7F6               	goto	i2l3222
 13069  0025BA                     i2l719:
 13070  0025BA  A004               	btfss	___ftpack@exp,0,c
 13071  0025BC  9E02               	bcf	___ftpack@arg+1,7,c
 13072  0025BE  90D8               	bcf	status,0,c
 13073  0025C0  3204               	rrcf	___ftpack@exp,f,c
 13074  0025C2  5004               	movf	___ftpack@exp,w,c
 13075  0025C4  1203               	iorwf	___ftpack@arg+2,f,c
 13076  0025C6  5005               	movf	___ftpack@sign,w,c
 13077  0025C8  A4D8               	btfss	status,2,c
 13078  0025CA  8E03               	bsf	___ftpack@arg+2,7,c
 13079  0025CC  C001  F001         	movff	___ftpack@arg,?___ftpack
 13080  0025D0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 13081  0025D4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 13082  0025D8  0012               	return	
 13083  0025DA                     __end_of___ftpack:
 13084                           	opt stack 0
 13085                           pclatu	equ	0xFFB
 13086                           pclath	equ	0xFFA
 13087                           tblptru	equ	0xFF8
 13088                           tblptrh	equ	0xFF7
 13089                           tblptrl	equ	0xFF6
 13090                           tablat	equ	0xFF5
 13091                           prodh	equ	0xFF4
 13092                           prodl	equ	0xFF3
 13093                           intcon	equ	0xFF2
 13094                           intcon2	equ	0xFF1
 13095                           intcon3	equ	0xFF0
 13096                           postinc0	equ	0xFEE
 13097                           fsr0h	equ	0xFEA
 13098                           fsr0l	equ	0xFE9
 13099                           wreg	equ	0xFE8
 13100                           fsr1h	equ	0xFE2
 13101                           fsr1l	equ	0xFE1
 13102                           indf2	equ	0xFDF
 13103                           postinc2	equ	0xFDE
 13104                           postdec2	equ	0xFDD
 13105                           fsr2h	equ	0xFDA
 13106                           fsr2l	equ	0xFD9
 13107                           status	equ	0xFD8
 13108                           
 13109 ;; *************** function ___awdiv *****************
 13110 ;; Defined at:
 13111 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 13112 ;; Parameters:    Size  Location     Type
 13113 ;;  dividend        2    6[COMRAM] int 
 13114 ;;  divisor         2    8[COMRAM] int 
 13115 ;; Auto vars:     Size  Location     Type
 13116 ;;  quotient        2   12[COMRAM] int 
 13117 ;;  sign            1   11[COMRAM] unsigned char 
 13118 ;;  counter         1   10[COMRAM] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  2    6[COMRAM] int 
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13128 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;Total ram usage:        8 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; This function calls:
 13135 ;;		Nothing
 13136 ;; This function is called by:
 13137 ;;		_dec_to_hex
 13138 ;;		_servo_rotate0
 13139 ;;		_servo_rotate1
 13140 ;;		_servo_rotate2
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           	psect	text63
 13145  0028F2                     __ptext63:
 13146                           	opt stack 0
 13147  0028F2                     ___awdiv:
 13148                           	opt stack 24
 13149                           
 13150                           ;incstack = 0
 13151  0028F2  0E00               	movlw	0
 13152  0028F4  6E0C               	movwf	___awdiv@sign,c
 13153  0028F6  AE0A               	btfss	___awdiv@divisor+1,7,c
 13154  0028F8  D006               	goto	i2l4198
 13155  0028FA  6C09               	negf	___awdiv@divisor,c
 13156  0028FC  1E0A               	comf	___awdiv@divisor+1,f,c
 13157  0028FE  B0D8               	btfsc	status,0,c
 13158  002900  2A0A               	incf	___awdiv@divisor+1,f,c
 13159  002902  0E01               	movlw	1
 13160  002904  6E0C               	movwf	___awdiv@sign,c
 13161  002906                     i2l4198:
 13162  002906  AE08               	btfss	___awdiv@dividend+1,7,c
 13163  002908  D006               	goto	i2l4204
 13164  00290A  6C07               	negf	___awdiv@dividend,c
 13165  00290C  1E08               	comf	___awdiv@dividend+1,f,c
 13166  00290E  B0D8               	btfsc	status,0,c
 13167  002910  2A08               	incf	___awdiv@dividend+1,f,c
 13168  002912  0E01               	movlw	1
 13169  002914  1A0C               	xorwf	___awdiv@sign,f,c
 13170  002916                     i2l4204:
 13171  002916  0E00               	movlw	0
 13172  002918  6E0E               	movwf	___awdiv@quotient+1,c
 13173  00291A  0E00               	movlw	0
 13174  00291C  6E0D               	movwf	___awdiv@quotient,c
 13175  00291E  5009               	movf	___awdiv@divisor,w,c
 13176  002920  100A               	iorwf	___awdiv@divisor+1,w,c
 13177  002922  B4D8               	btfsc	status,2,c
 13178  002924  D01C               	goto	i2l4226
 13179  002926  0E01               	movlw	1
 13180  002928  6E0B               	movwf	___awdiv@counter,c
 13181  00292A  D004               	goto	i2l4212
 13182  00292C                     i2l4210:
 13183  00292C  90D8               	bcf	status,0,c
 13184  00292E  3609               	rlcf	___awdiv@divisor,f,c
 13185  002930  360A               	rlcf	___awdiv@divisor+1,f,c
 13186  002932  2A0B               	incf	___awdiv@counter,f,c
 13187  002934                     i2l4212:
 13188  002934  AE0A               	btfss	___awdiv@divisor+1,7,c
 13189  002936  D7FA               	goto	i2l4210
 13190  002938                     i2l4214:
 13191  002938  90D8               	bcf	status,0,c
 13192  00293A  360D               	rlcf	___awdiv@quotient,f,c
 13193  00293C  360E               	rlcf	___awdiv@quotient+1,f,c
 13194  00293E  5009               	movf	___awdiv@divisor,w,c
 13195  002940  5C07               	subwf	___awdiv@dividend,w,c
 13196  002942  500A               	movf	___awdiv@divisor+1,w,c
 13197  002944  5808               	subwfb	___awdiv@dividend+1,w,c
 13198  002946  A0D8               	btfss	status,0,c
 13199  002948  D005               	goto	i2l4222
 13200  00294A  5009               	movf	___awdiv@divisor,w,c
 13201  00294C  5E07               	subwf	___awdiv@dividend,f,c
 13202  00294E  500A               	movf	___awdiv@divisor+1,w,c
 13203  002950  5A08               	subwfb	___awdiv@dividend+1,f,c
 13204  002952  800D               	bsf	___awdiv@quotient,0,c
 13205  002954                     i2l4222:
 13206  002954  90D8               	bcf	status,0,c
 13207  002956  320A               	rrcf	___awdiv@divisor+1,f,c
 13208  002958  3209               	rrcf	___awdiv@divisor,f,c
 13209  00295A  2E0B               	decfsz	___awdiv@counter,f,c
 13210  00295C  D7ED               	goto	i2l4214
 13211  00295E                     i2l4226:
 13212  00295E  500C               	movf	___awdiv@sign,w,c
 13213  002960  B4D8               	btfsc	status,2,c
 13214  002962  D004               	goto	i2l4230
 13215  002964  6C0D               	negf	___awdiv@quotient,c
 13216  002966  1E0E               	comf	___awdiv@quotient+1,f,c
 13217  002968  B0D8               	btfsc	status,0,c
 13218  00296A  2A0E               	incf	___awdiv@quotient+1,f,c
 13219  00296C                     i2l4230:
 13220  00296C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 13221  002970  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 13222  002974  0012               	return	
 13223  002976                     __end_of___awdiv:
 13224                           	opt stack 0
 13225                           pclatu	equ	0xFFB
 13226                           pclath	equ	0xFFA
 13227                           tblptru	equ	0xFF8
 13228                           tblptrh	equ	0xFF7
 13229                           tblptrl	equ	0xFF6
 13230                           tablat	equ	0xFF5
 13231                           prodh	equ	0xFF4
 13232                           prodl	equ	0xFF3
 13233                           intcon	equ	0xFF2
 13234                           intcon2	equ	0xFF1
 13235                           intcon3	equ	0xFF0
 13236                           postinc0	equ	0xFEE
 13237                           fsr0h	equ	0xFEA
 13238                           fsr0l	equ	0xFE9
 13239                           wreg	equ	0xFE8
 13240                           fsr1h	equ	0xFE2
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           pclatu	equ	0xFFB
 13249                           pclath	equ	0xFFA
 13250                           tblptru	equ	0xFF8
 13251                           tblptrh	equ	0xFF7
 13252                           tblptrl	equ	0xFF6
 13253                           tablat	equ	0xFF5
 13254                           prodh	equ	0xFF4
 13255                           prodl	equ	0xFF3
 13256                           intcon	equ	0xFF2
 13257                           intcon2	equ	0xFF1
 13258                           intcon3	equ	0xFF0
 13259                           postinc0	equ	0xFEE
 13260                           fsr0h	equ	0xFEA
 13261                           fsr0l	equ	0xFE9
 13262                           wreg	equ	0xFE8
 13263                           fsr1h	equ	0xFE2
 13264                           fsr1l	equ	0xFE1
 13265                           indf2	equ	0xFDF
 13266                           postinc2	equ	0xFDE
 13267                           postdec2	equ	0xFDD
 13268                           fsr2h	equ	0xFDA
 13269                           fsr2l	equ	0xFD9
 13270                           status	equ	0xFD8
 13271                           
 13272                           	psect	rparam
 13273  0000                     pclatu	equ	0xFFB
 13274                           pclath	equ	0xFFA
 13275                           tblptru	equ	0xFF8
 13276                           tblptrh	equ	0xFF7
 13277                           tblptrl	equ	0xFF6
 13278                           tablat	equ	0xFF5
 13279                           prodh	equ	0xFF4
 13280                           prodl	equ	0xFF3
 13281                           intcon	equ	0xFF2
 13282                           intcon2	equ	0xFF1
 13283                           intcon3	equ	0xFF0
 13284                           postinc0	equ	0xFEE
 13285                           fsr0h	equ	0xFEA
 13286                           fsr0l	equ	0xFE9
 13287                           wreg	equ	0xFE8
 13288                           fsr1h	equ	0xFE2
 13289                           fsr1l	equ	0xFE1
 13290                           indf2	equ	0xFDF
 13291                           postinc2	equ	0xFDE
 13292                           postdec2	equ	0xFDD
 13293                           fsr2h	equ	0xFDA
 13294                           fsr2l	equ	0xFD9
 13295                           status	equ	0xFD8
 13296                           
 13297                           	psect	temp
 13298  00007E                     btemp:
 13299                           	opt stack 0
 13300  00007E                     	ds	1
 13301  0000                     int$flags	set	btemp
 13302                           pclatu	equ	0xFFB
 13303                           pclath	equ	0xFFA
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           intcon2	equ	0xFF1
 13312                           intcon3	equ	0xFF0
 13313                           postinc0	equ	0xFEE
 13314                           fsr0h	equ	0xFEA
 13315                           fsr0l	equ	0xFE9
 13316                           wreg	equ	0xFE8
 13317                           fsr1h	equ	0xFE2
 13318                           fsr1l	equ	0xFE1
 13319                           indf2	equ	0xFDF
 13320                           postinc2	equ	0xFDE
 13321                           postdec2	equ	0xFDD
 13322                           fsr2h	equ	0xFDA
 13323                           fsr2l	equ	0xFD9
 13324                           status	equ	0xFD8


Data Sizes:
    Strings     465
    Constant    111
    Data        2
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     65      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf$493	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_26(CODE[17]), STR_25(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_24(CODE[15]), STR_23(CODE[16]), STR_22(CODE[25]), STR_21(CODE[24]), 
		 -> STR_20(CODE[22]), STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), 
		 -> STR_16(CODE[10]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), 
		 -> STR_4(CODE[23]), STR_3(CODE[8]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate0->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   45849
                                             63 BANK0      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    5971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    5971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7081
                                             61 BANK0      2     2      0
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                    11    11      0    1110
                                             19 BANK0     11    11      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    5971
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    6988
                                             61 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    6057
                                             61 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    6395
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              37    29      8    5836
                                             28 BANK0     33    25      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     925
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   0     0      0     904
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     904
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   76336
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (6) i2_read_colorsensor                                  11    11      0     384
                                              3 COMRAM    11    11      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            31    29      2    3590
                                             12 COMRAM    27    25      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     318
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2    1570
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     291
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     178
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69759
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58091
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18958
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31526
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8335
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     812
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     41      59       5       69.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6      34        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 22:55:15 2017

                ___altoft@exp 003F            i2_I2C_Master_Start 30AC            i2_I2C_Master_Write 308A  
               ___altoft@sign 0040                            l34 3022                ?_emergencystop 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 0092            i2___lwdiv@dividend 0001  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                ___ftadd@exp1 0027                  ___ftadd@exp2 0026                  ___ftadd@sign 0025  
                         l304 3008                           l451 0696                           l467 0772  
                         l397 0204                           l902 29E4                           l912 2B26  
                         l849 2466                  __CFG_CPB$OFF 000000                           _PEN 007E2A  
                __CFG_CPD$OFF 000000                           _SEN 007E28                           _PSA 007EAB  
         ?i2_I2C_Master_Start 0001           ?i2_I2C_Master_Write 0002                           _exp 1362  
                         _log 19B0                           _isr 0008                           _pow 16F2  
                         _ptr 007A                  ___awmod@sign 0095                           prod 000FF3  
                         wreg 000FE8                  ?_bottle_time 00BD                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 0012                  ___ftdiv@sign 0017                  __CFG_WDT$OFF 000000  
                        l4004 046A                          l4020 04A6                          l4030 04FC  
                        l4006 0470                          l4022 04C4                          l4120 081C  
                        l4104 077E                          l4122 0862                          l4050 05C4  
                        l4042 056E                          l4026 04E2                          l4132 08DC  
                        l4116 0808                          l4108 07BC                          l4140 093A  
                        l4044 0578                          l4036 0530                          l4062 065E  
                        l4144 0960                          l4128 08A6                          l4136 0914  
                        l4080 06F0                          l4072 06A4                          l4064 0668  
                        l4056 061C                          l4250 2770                          l4242 274C  
                        l4138 0932                          l4090 071E                          l4058 0626  
                        l4252 277C                          l4084 0702                          l4148 097A  
                        l4254 2782                          l4262 27B4                          l4246 275C  
                        l3710 2AF4                          l4094 0730                          l4502 191E  
                        l4280 2400                          l4416 247A                          l4266 27C8  
                        l4258 27A6                          l3714 2B18                          l3706 2AE2  
                        l4098 074A                          l4514 196C                          l3642 2F30  
                        l4434 24E0                          l4442 2502                          l4276 23EA  
                        l3708 2AEE                          l3660 2F58                          l3900 01DC  
                        l4508 194C                          l4428 24BE                          l4278 23FA  
                        l3902 01F2                          l4462 219C                          l3814 20B8  
                        l4288 2454                          l3920 0272                          l3904 01FA  
                        l3690 29A6                          l3914 0242                          l3906 0200  
                        l3850 0054                          l3842 0022                          l4490 18C2  
                        l4458 2192                          l3818 20CE                          l3940 02E8  
                        l3924 027A                          l3932 02AC                          l3908 020A  
                        l3852 005A                          l4484 1894                          l4468 21BC  
                        l3828 2122                          l3836 2150                          l3686 2994  
                        l3926 0280                          l3918 0268                          l3862 0098  
                        l3854 0060                          l3846 0038                          l4478 1866  
                        l3688 29A0                          l3944 0300                          l3936 02CA  
                        l3928 0298                          l3952 0320                          l3848 004E  
                        l4496 18F0                          l3698 29D6                          l3970 03D6  
                        l3938 02D0                          l3954 036A                          l3882 0160  
                        l3866 00B6                          l3874 012E                          l3858 006A  
                        l3948 0318                          ?_exp 0049                          ?_log 0034  
                        l3990 042E                          l3966 03BC                          l3894 01AE  
                        l3992 0434                          l3976 03F2                          l3896 01B6  
                        l3978 03F8                          l4970 1B34                          l4980 1B52  
                        l4972 1B3A                          ?_isr 0001                          l4982 1B58  
                        l4974 1B40                          l4976 1B46                          l4978 1B4C  
                        l4986 1B88                          l4988 1BB6                          ?_pow 0052  
          i2_read_colorsensor 2686                          STR_1 FFDF                          STR_2 FF05  
                        STR_3 FFF7                          STR_4 FE8D                          STR_5 FEA4  
                        STR_6 FF27                          STR_7 FF16                          STR_8 FF6B  
                        STR_9 FF5A                          _T0CS 007EAD                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u3510 2F2E                          u4311 07F0  
                        u4160 0610                          u4705 2BC0                          _RCEN 007E2B  
                        u5607 1BC4                          u5617 2CA6                          i2l34 3036  
                        u5627 2CE2                          u5637 2B50                          u5647 2B58  
                        u5657 2B82                          u5667 2B8A                          _TMR0 000FD6  
                        _RSEN 007E29                          _main 1ACA                  ___ftpack@arg 0001  
                        _keys FDBF                  ___ftpack@exp 0004                          _time 00C9  
                        fsr0h 000FEA                          fsr1h 000FE2            i2___lwdiv@quotient 0005  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 007E  
                        exp@x 0049                          log@x 0034                          isr@i 0075  
        ??i2_I2C_Master_Start 0002          ??i2_I2C_Master_Write 0004                          pow@x 0052  
                        pow@y 0055                          prodh 000FF4                          prodl 000FF3  
                        start 000E           ?i2_read_colorsensor 0001                 __CFG_IESO$OFF 000000  
             __end_ofi2_putch 3074                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001A  
                ___param_bank 000000                  ___ftmul@sign 001B                   i2_lcdNibble 2CEE  
               ?_bottle_count 0001                  ___fttol@exp1 0036                         ??_exp 004C  
                       ??_log 0037                  ___fttol@lval 0032                         ??_isr 0080  
                       ??_pow 0058              ?_I2C_Master_Init 009D              ?_I2C_Master_Read 0001  
            ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001                         ?_main 0001  
                       _ACKEN 007E2C                         _ACKDT 007E2D               __end_of___awdiv 2976  
             __end_of___ftadd 16F2                         STR_10 FF49                         STR_11 FF38  
                       STR_12 FF7C                         STR_20 FEBB                         STR_13 FF9E  
                       STR_21 FE47                         STR_14 FF8D                         STR_22 FE2E  
                       STR_23 FFC0                         STR_15 FFAF                         STR_16 FFED  
                       STR_24 FFD0                         STR_25 FEE3                         STR_17 FE76  
                       STR_26 FEF4                         STR_18 FED1                         STR_19 FE5F  
             __end_of___awmod 27D2               __end_of___ftdiv 1F9E               __end_of___ftneg 2FD2  
             __end_of___lldiv 2478               __end_of___ftmul 1EB8               ___awdiv@divisor 0009  
             __end_of___ftsub 2DBE               __end_of___fttol 1DC4                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA               __end_of___lwdiv 29EE  
             __end_of___lwmod 2B30                         i2l312 2636                         i2l225 12CA  
                       i2l315 265A                         i2l228 12C6                         i2l229 1156  
                       i2l318 2684                         i2l249 1326                         i2l451 0EA2  
                       i2l467 0F44                         i2l397 0B32                         i2l742 158A  
                       i2l902 2C94                         i2l719 25BA                         i2l912 2D74  
                       i2l746 15B4                         i2l757 1664                         i2l766 1680  
                       i2l934 1728                         i2l777 1F6C                         i2l939 1856  
             ___awdiv@counter 000B                         i2l799 2FC4          ??i2_read_colorsensor 0004  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
        _read_colorsensor$450 009B               ??_servo_rotate0 0011                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000             read_colorsensor@i 009C  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 3068                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000               __end_of_initLCD 2CEE                __CFG_EBTRB$OFF 000000  
                  i2isdigit@c 0003                 ___awtoft@sign 000C               __end_of_dpowers FDE6  
                       _color 00C1                         _floor 1F9E                         _etime 00D0  
                       _ldexp 22FA                         _frexp 27D2                         _errno 0078  
             __end_of_isdigit 2F62                 ___ftpack@sign 0005                         _putch 3048  
                       _stime 00D4                         pclath 000FFA                         tablat 000FF5  
                       pow@yi 005F               __end_of_timeset FDF5              __end_ofi2___wmul 2FAE  
             __end_of_standby 2E6A                         status 000FD8                __CFG_PBADEN$ON 000000  
               i2printf@width 0023                   exp@exponent 004F              __end_ofi2_printf 1104  
          __size_ofi2___lwdiv 0052            __size_ofi2___lwmod 0042                   ldexp@newexp 0037  
             __initialization 2DBE                   log@exponent 0037            __size_ofi2_lcdInst 000C  
             ??_emergencystop 00BD                ??_bottle_count 00BD                  __end_of_main 1BD4  
                __end_of_keys FDD0                    i2printf@ap 001E                    i2printf@cp 0014  
          __size_ofi2_isdigit 001E                        ??_main 00BF                 ___fttol@sign1 0031  
               __activetblptr 000002             ?_I2C_Master_Start 0001             ?_I2C_Master_Write 0091  
              servo_rotate0@i 0015                servo_rotate0@j 0017            ??_I2C_Master_Start 0091  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0093  
                      ?_floor 0041                        ?_ldexp 0034                        ?_frexp 0001  
            __end_of___altoft 2A66                        _T08BIT 007EAE              ___awdiv@dividend 0007  
             i2lcdNibble@data 0002              __end_of___awtoft 2E34                        ?_putch 0001  
            __end_of___ftpack 25DA               i2lcdNibble@temp 0001              __end_of___lltoft 2C4C  
                      _INT1IE 007F83                        _INT1IF 007F80                        i2l1108 206E  
                      i2l1097 1414                        i2l1098 1538                        i2l3220 2588  
                      i2l3212 254A                        i2l3222 25A6                        i2l3214 2554  
                      i2l3224 25B0                        i2l3216 2572                        i2l3208 253C  
                      i2l3312 169C                        i2l3304 1652                        i2l4210 292C  
                      i2l3322 16CC                        i2l3306 165C                        i2l3250 2A1C  
                      i2l5010 1180                        i2l4212 2934                        i2l4204 2916  
                      i2l3332 1DEC                        i2l3420 1D72                        i2l4230 296C  
                      i2l4222 2954                        i2l4214 2938                        i2l3270 15C2  
                      i2l3430 1D9C                        i2l5022 1232                        i2l5014 118C  
                      i2l3264 1598                        i2l3352 1E46                        i2l3248 2A10  
                      i2l3416 1D62                        i2l3600 2356                        i2l4160 1736  
                      i2l4312 2F82                        i2l5016 1196                        i2l5008 1178  
                      i2l4226 295E                        i2l3362 1E6E                        i2l3338 1E14  
                      i2l3434 1DB2                        i2l3426 1D8A                        i2l4330 2FE8  
                      i2l5050 1282                        i2l5026 1236                        i2l3292 1614  
                      i2l3356 1E56                        i2l3428 1D96                        i2l3612 2378  
                      i2l4340 2C62                        i2l3518 1F46                        i2l3294 161E  
                      i2l3286 15F2                        i2l3366 1E7E                        i2l3382 28C2  
                      i2l3446 27FA                        i2l4174 17B0                        i2l4166 174E  
                      i2l4342 2C6A                        i2l5046 1266                        i2l5038 1250  
                      i2l5054 1288                        i2l3296 1628                        i2l3536 2D94  
                      i2l3616 2384                        i2l4352 2C8A                        i2l4344 2C6E  
                      i2l4360 2D4A                        i2l4600 26CA                        i2l5072 12F2  
                      i2l5048 1274                        i2l3298 1630                        i2l3378 2892  
                      i2l3570 1FDA                        i2l3730 19EA                        i2l4178 17D2  
                      i2l4362 2D52                        i2l4610 2704                        i2l5082 1310  
                      i2l3548 2E10                        i2l3492 1EE0                        i2l3388 28EE  
                      i2l3724 19CA                        i2l4532 2A9A                        i2l4364 2D56  
                      i2l4700 0B72                        i2l4198 2906                        i2l3582 2268  
                      i2l3398 1CFC                        i2l3574 1FF4                        i2l3566 1FCC  
                      i2l4550 1BEE                        i2l4542 2ABE                        i2l4710 0B98  
                      i2l4702 0B7A                        i2l4630 09C6                        i2l5078 1308  
                      i2l3672 2BF6                        i2l3584 22E4                        i2l3592 2312  
                      i2l3752 13B0                        i2l4536 2AA2                        i2l4368 2D6A  
                      i2l4720 0BC6                        i2l4632 09CA                        i2l4640 09D8  
                      i2l4624 09A4                        i2l3674 2C02                        i2l3498 1F08  
                      i2l3746 137A                        i2l4562 1CBE                        i2l4802 0D42  
                      i2l4730 0BFE                        i2l4722 0BD8                        i2l4706 0B80  
                      i2l4714 0BAA                        i2l4634 09CE                        i2l4618 272A  
                      i2l3780 150E                        i2l4580 264E                        i2l4812 0D86  
                      i2l4804 0D5E                        i2l4708 0B86                        i2l4636 09D2  
                      i2l4628 09B4                        u312_41 1DD4                        i2l3758 13E6  
                      i2l4574 262A                        i2l4910 103E                        i2l4902 0FC4  
                      i2l4726 0BEC                        i2l4718 0BC0                        i2l4734 0C04  
                      i2l4568 2612                        i2l4904 1004                        i2l4920 10B8  
                      i2l4840 0E56                        i2l4832 0E0E                        i2l4824 0DD0  
                      i2l4808 0D74                        i2l4760 0CB6                        i2l4752 0CA0  
                      i2l4736 0C4A                        i2l4664 0AA8                        i2l4648 0A1C  
                      i2l4656 0A7A                        i2l4914 106A                        i2l4922 10BE  
                      i2l4826 0DD8                        i2l4818 0DA8                        i2l4690 0B36  
                      i2l4682 0B10                        i2l4930 10EA                        i2l4844 0E7A  
                      i2l4772 0CE2                        i2l4748 0C88                        i2l4676 0AEC  
                      i2l4684 0B26                        i2l4596 26BA                        u321_41 1CE0  
                      i2l4926 10D6                        i2l4918 109C                        i2l4862 0EE6  
                      i2l4854 0EAE                        i2l4846 0E82                        i2l4838 0E4E  
                      i2l4774 0CE6                        i2l4758 0CB2                        i2l4686 0B2C  
                      i2l4678 0AF2                        i2l4880 0F28                        i2l4872 0F0A  
                      i2l4696 0B5C                        i2l4688 0B30                        i2l4890 0F7C  
                      i2l4866 0EF4                        i2l4786 0D12                        i2l4876 0F14  
                      i2l4788 0D16                        u314_41 1DFC                        i2l4886 0F4E  
                      i2l4898 0FB4                        i2l4994 1144                        u333_41 1EC8  
                      u335_41 1EF0                        u291_41 1556                        u292_41 156A  
                      _TMR0IE 007F95                        _TMR0IF 007F92                     ??i2_putch 0003  
                      _TMR0ON 007EAF                        _SSPADD 000FC8                        _TRISC3 007CA3  
                      _TRISC4 007CA4                        _SSPBUF 000FC9                __CFG_XINST$OFF 000000  
           ?_read_colorsensor 0001                        ___ftge 2862                        ___wmul 2EA0  
          ??_read_colorsensor 0093                     ??___awdiv 000B                     ??___ftadd 0022  
              __CFG_STVREN$ON 000000                     ??___awmod 0094                     ??___ftdiv 000F  
                   ??___ftneg 0004                     ??___lldiv 0098                     ??___ftmul 0013  
                   ??___ftsub 002E                     ??___fttol 002C                     ??___lwdiv 0094  
                   ??___lwmod 009B                 dec_to_hex@num 0063                        clear_0 2DDC  
                      clear_1 2DE8              ___awdiv@quotient 000D               ___awmod@divisor 0092  
             ___awmod@counter 0094                     ??_lcdInst 0092                        _printf 0012  
                      floor@i 0044                        floor@x 0041         ___ftmul@f3_as_product 0017  
                   ??_initLCD 0093                     ??_isdigit 0090             __end_ofi2___lwdiv 2C9E  
                __mediumconst FDBE             __end_ofi2___lwmod 2D7E                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_standby 00BD  
           __end_ofi2_lcdInst 3080             __end_ofi2_isdigit 2FF0              __end_ofexp@coeff FE13  
        __size_of_bottle_time 0036              __end_oflog@coeff FE2E                    __accesstop 0080  
     __end_of__initialization 2DEE                    ___altoft@c 0037                    ___ftadd@f1 001C  
                  ___ftadd@f2 001F                    ___ftge@ff1 0001                    ___ftge@ff2 0004  
                eval_poly@res 0031                 ___rparam_used 000001                    ___ftdiv@f1 0009  
                  ___ftdiv@f2 000C                    ___ftdiv@f3 0013                    ___ftneg@f1 0001  
                  ___awtoft@c 0009                    ___ftmul@f1 000D                    ___ftmul@f2 0010  
                  ___ftsub@f1 0028                    ___ftsub@f2 002B                    ___fttol@f1 0028  
          i2___lwmod@dividend 0008                __pcstackCOMRAM 0001                  __pidataBANK0 30B4  
                  ___lltoft@c 0009                 __end_of_floor 207C                 __end_of_ldexp 23BC  
               __end_of_frexp 2862                 __end_of_putch 3058                  i2_printf$493 001A  
                i2_printf$486 0016                  i2_printf$487 0018                   i2printf@idx 0013  
                 i2printf@len 001C                   i2printf@val 0020            __size_of_date_time 00D2  
         servo_rotate0@degree 000F                     ?i2___wmul 0001            __size_of_lcdNibble 0060  
                 i2putch@data 0003                     ?i2_printf 000D   __size_of_I2C_ColorSens_Init 0034  
                     ??_floor 0044                       ??_ldexp 0039                       ??_frexp 0006  
        __end_of_bottle_count 19B0                    _dec_to_hex 1BD4                       ??_putch 0092  
                  __pbssBANK0 00C1            __size_of_eval_poly 00D2             servo_rotate0@duty 0013  
          __size_of_read_time 0068                       ?___ftge 0001                  ?i2_lcdNibble 0001  
                     ?___wmul 0090                     ?___altoft 0037                     ?___awtoft 0009  
                   ?___ftpack 0001                       ?_printf 009C            __size_of_operation 00B4  
                   ?___lltoft 0009                    ??i2___wmul 0005                    ??i2_printf 000F  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
           __end_of_date_time 2228                       i2_putch 3068             _bottle_count_disp 00D7  
 __size_ofi2_I2C_Master_Start 0008             __end_of_lcdNibble 2B90   __size_ofi2_I2C_Master_Write 000A  
               ?_operationend 0001                       __Hparam 0000                       __Lparam 0000  
             __size_of___ftge 0090                       ___awdiv 28F2                       ___ftadd 1546  
                     ___awmod 2730                       ___ftdiv 1EB8                       ___ftneg 2FAE  
                     ___lldiv 23BC               __size_of___wmul 0036                       ___ftmul 1DC4  
                     ___ftsub 2D7E                       ___fttol 1CD0                       ___lwdiv 2976  
                     ___lwmod 2ACE                    _curr_state 00D6                    ??___altoft 003B  
                     __pcinit 2DBE                    ??___awtoft 000C                    ??___ftpack 0006  
           __end_of_eval_poly 22FA                       __ramtop 1000                       _lcdInst 3058  
                  ??___lltoft 000D                       __ptext0 1ACA                       __ptext1 2E34  
                     __ptext2 300A                       __ptext3 2478                       __ptext4 207C  
                     __ptext5 2C9E                       __ptext6 2FF0                       __ptext7 2156  
                     __ptext8 2F0A                       __ptext9 2E6A               __size_of_printf 0988  
              dec_to_hex@temp 006B                       _initLCD 2C9E             __end_of_hexpowers FDEE  
               i2_isdigit$707 0002                       _dpowers FDDC                  __size_of_exp 01E4  
                __size_of_log 011A                       _isdigit 2F38                  __size_of_isr 135A  
 __size_ofi2_read_colorsensor 00AA                  __size_of_pow 0172              ___awmod@dividend 0090  
           __end_of_read_time 2ACE      __size_of_I2C_Master_Init 0060      __size_of_I2C_Master_Read 002E  
    __size_of_I2C_Master_Wait 0014                    date_time@i 00BD      __size_of_I2C_Master_Stop 0008  
       __end_of_servo_rotate0 2686                       _timeset FDEE                       _standby 2E34  
                 ?_dec_to_hex 0063                __pintcode_body 1104          end_of_initialization 2DEE  
           __end_of_octpowers FDDC                       exp@sign 0051                 __Lmediumconst FDBE  
                     int_func 1104           i2___wmul@multiplier 0001             __end_of_operation 252C  
              _operation_disp 00D2                ??_operationend 00BD     __size_of_I2C_Master_Start 0008  
   __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0094                       pow@sign 005E  
             ___lldiv@counter 009C                       printf@c 00BA                       printf@f 009C  
            I2C_Master_Init@c 009D              I2C_Master_Read@a 0091                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                    _printf$493 00AE  
                  _printf$486 00AA                    _printf$487 00AC         __end_of_emergencystop 300A  
                   _PORTCbits 000F82         __size_of_bottle_count 014C     __size_of_read_colorsensor 00DA  
   read_colorsensor@color_low 0095             i2_I2C_Master_Read 2F62             i2_I2C_Master_Wait 3036  
           i2_I2C_Master_Stop 30A4             i2___lwdiv@divisor 0003                     i2___lwdiv 2C4C  
                   i2___lwmod 2D3C             i2___lwdiv@counter 0007            ?i2_I2C_Master_Read 0001  
          ?i2_I2C_Master_Wait 0001  i2read_colorsensor@color_comb 000A  i2read_colorsensor@color_high 0008  
          ?i2_I2C_Master_Stop 0001                    _start_time 007C                     i2_lcdInst 3074  
                 ___ftdiv@exp 0016                   printf@width 00B8           ??i2_I2C_Master_Read 0002  
                   i2_isdigit 2FD2           ??i2_I2C_Master_Wait 0001           ??i2_I2C_Master_Stop 0002  
                 ___ftmul@exp 0016                  _bottle_count 1864                __end_of___ftge 28F2  
              __end_of___wmul 2ED6           __size_of_dec_to_hex 00FC          __size_ofi2_lcdNibble 004E  
               i2lcdInst@data 0003                    floor@expon 0047              i2___wmul@product 0005  
              __end_of_printf 099A                  i2printf@flag 0026     __end_ofi2_I2C_Master_Read 2F88  
   __end_ofi2_I2C_Master_Wait 3048                  i2printf@prec 0022           start_initialization 2DBE  
   __end_ofi2_I2C_Master_Stop 30AC                    eval_poly@d 002B                    eval_poly@n 002D  
                  eval_poly@x 0028             __size_ofi2___wmul 0026                    ldexp@value 0034  
                 __end_of_exp 1546                   __end_of_log 1ACA                   __end_of_isr 1362  
                 __end_of_pow 1864                     i2printf@c 0025                     i2printf@f 000D  
               ??_bottle_time 00BF         i2I2C_Master_Read@temp 0003                    ?i2___lwdiv 0001  
                  ?i2___lwmod 0008             __size_ofi2_printf 076A                    frexp@value 0001  
           ??_I2C_Master_Init 00A1             ??_I2C_Master_Read 0091             ??_I2C_Master_Wait 0090  
                  ?i2_lcdInst 0001             ??_I2C_Master_Stop 0091    read_colorsensor@color_comb 0099  
  read_colorsensor@color_high 0097                    ?i2_isdigit 0001                      ??___ftge 0007  
                    ??___wmul 0094                   __pdataBANK0 00D7              __CFG_LPT1OSC$OFF 000000  
                    ??_printf 00A4             __size_of___altoft 0078                    read_time@i 0004  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
  __end_of_I2C_ColorSens_Init 2F0A                   __pbssCOMRAM 0076          __end_of_operationend 3022  
               __pcstackBANK0 0080             i2___lwmod@divisor 000A             i2___lwmod@counter 000C  
                    ?i2_putch 0001           __end_of_bottle_time 2EA0              _I2C_Master_Start 309C  
         i2I2C_Master_Write@d 0002              _I2C_Master_Write 3080                     _date_time 2156  
            ___lwdiv@dividend 0090             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst FDBE                     _lcdNibble 2B30                      ?___awdiv 0007  
                    ?___ftadd 001C                      ?___awmod 0090                      ?___ftdiv 0009  
                    ?___ftneg 0001                      ?___lldiv 0090                      ?___ftmul 000D  
                    ?___ftsub 0028                      ?___fttol 0028                      ?___lwdiv 0090  
                    ?___lwmod 0097                      ?_lcdInst 0001              dec_to_hex@hexnum 006F  
                    ?_initLCD 0001        i2_read_colorsensor$450 000C                      ?_isdigit 0001  
            _read_colorsensor 207C    __size_ofi2_I2C_Master_Read 0026    __size_ofi2_I2C_Master_Wait 0012  
                   _eval_poly 2228    __size_ofi2_I2C_Master_Stop 0008                     _hexpowers FDE6  
                    ?_standby 0001              ___lwdiv@quotient 0094                __size_of_floor 00DE  
              __size_of_ldexp 00C2                __size_of_frexp 0090                  ??_dec_to_hex 0065  
                 ??i2___lwdiv 0005                   ??i2___lwmod 000C                     _read_time 2A66  
              __size_of_putch 0010    __end_ofi2_I2C_Master_Start 30B4    __end_ofi2_I2C_Master_Write 3094  
                 ??i2_lcdInst 0003                ___wmul@product 0094                      _LATDbits 000F8C  
                   _octpowers FDD0                   ??i2_isdigit 0001                    ?_date_time 0001  
                    i2u330_40 2822                      i2u323_40 1D1A                      i2u330_48 2824  
                    i2u323_45 1D12                      i2u343_40 1FE6                      i2u522_40 0E44  
                    i2u347_40 2332                      i2u443_40 179A                      i2u347_48 2334  
                    i2u460_40 2F80                      i2u367_40 13EE                     _operation 2478  
                    i2u368_40 13F0                      i2u537_41 0FA0                      i2u570_47 2D2E  
                    i2u571_47 2D36                      i2u572_47 262C                      i2u573_47 2650  
                    i2u567_47 1318                      i2u568_47 2D06                      i2u569_47 2D0E  
            __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001            __end_of_dec_to_hex 1CD0  
  __end_ofi2_read_colorsensor 2730             ___wmul@multiplier 0090                      i2___wmul 2F88  
               lcdNibble@data 0091                    printf@flag 00BB                 lcdNibble@temp 0090  
                  printf@prec 00B7                    ?_eval_poly 0028                      i2_printf 099A  
                 _bottle_time 2E6A           I2C_Master_Read@temp 0092                    ?_read_time 0001  
          dec_to_hex@quotient 0071              __size_ofi2_putch 000C                     frexp@eptr 0004  
                    __Hrparam 0000           i2read_colorsensor@i 000D                    ?_operation 0001  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000                   dec_to_hex@i 006D  
      __size_of_servo_rotate0 00AC               bottle_time@time 00BD              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 00A2              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024         i2___wmul@multiplicand 0003              __size_of___lldiv 00BC  
                    ___altoft 29EE              __size_of___ftmul 00F4              __size_of___ftsub 0040  
            __size_of___fttol 00F4              __size_of___lwdiv 0078              __size_of___lwmod 0062  
       __size_of_operationend 0018                      ___awtoft 2DFC                      ___ftpack 252C  
                    ___lltoft 2BF0                   _isdigit$707 0091            i2I2C_Master_Read@a 0002  
            __size_of_lcdInst 0010                      _exp$1154 004C               _I2C_Master_Init 2B90  
             _I2C_Master_Read 2F0A              __size_of_initLCD 0050               _I2C_Master_Wait 3022  
                    _isr$1250 0073               _I2C_Master_Stop 3094              __size_of_isdigit 002A  
             ___lwdiv@divisor 0092               ___lwdiv@counter 0096                      __ptext10 1864  
                    __ptext11 0012                      __ptext20 2B90                      __ptext12 3048  
                    __ptext21 23BC                      __ptext13 2F38                      __ptext30 3068  
                    __ptext22 2ED6                      __ptext14 2EA0                      __ptext31 2FD2  
                    __ptext23 3080                      __ptext15 2ACE                      __ptext40 30AC  
                    __ptext32 2D3C                      __ptext24 3094                      __ptext16 2976  
                    __ptext41 2F62                      __ptext33 2C4C                      __ptext25 309C  
                    __ptext17 3058                      __ptext50 1CD0                      __ptext42 3036  
                    __ptext34 3074                      __ptext26 3022                      __ptext18 2B30  
                    __ptext51 2862                      __ptext43 1BD4                      __ptext35 2CEE  
                    __ptext19 2730                      __ptext60 2DFC                      __ptext52 29EE  
                    __ptext44 16F2                      __ptext36 25DA                      __ptext28 2686  
                    __ptext61 2BF0                      __ptext53 2228                      __ptext45 19B0  
                    __ptext37 2A66                      __ptext29 099A                      __ptext62 252C  
                    __ptext54 2F88                      __ptext46 1362                      __ptext38 308A  
                    __ptext63 28F2                      __ptext55 1DC4                      __ptext47 22FA  
                    __ptext39 30A4                      __ptext56 2D7E                      __ptext48 1F9E  
                    __ptext57 1546                      __ptext49 27D2                      __ptext58 2FAE  
                    __ptext59 1EB8                      _end_time 0076              __size_of_standby 0036  
                    _pow$1152 0058                      _pow$1153 005B        __size_of_emergencystop 001A  
               __size_of_main 010A               _dec_to_hex$1150 0065               _dec_to_hex$1151 0068  
                 ??_date_time 00BD                  _operationend 300A                 ??i2_lcdNibble 0001  
                 ??_lcdNibble 0090                      int$flags 007E                     printf@idx 00B0  
                   printf@len 00B1                     printf@val 00B5                      exp@coeff FDF5  
                    log@coeff FE13                     putch@data 0092      __end_of_I2C_Master_Start 30A4  
    __end_of_I2C_Master_Write 308A                    _INTCONbits 000FF2                   ??_eval_poly 002F  
                    isdigit@c 0092                 _servo_rotate0 25DA                   ??_read_time 0004  
                    intlevel2 0000              ___lwmod@dividend 0097              ___lldiv@dividend 0090  
          _I2C_ColorSens_Init 2ED6      __end_of_read_colorsensor 2156                   ??_operation 00BD  
         ?_I2C_ColorSens_Init 0001                      printf@ap 00B3                      printf@cp 00A8  
     __end_of_I2C_Master_Init 2BF0       __end_of_I2C_Master_Read 2F38       __end_of_I2C_Master_Wait 3036  
     __end_of_I2C_Master_Stop 309C                   lcdInst@data 0092                 _emergencystop 2FF0  
         __end_ofi2_lcdNibble 2D3C              ___lldiv@quotient 0098             I2C_Master_Write@d 0091  
             ___lwmod@divisor 0099   i2read_colorsensor@color_low 0006               ___lwmod@counter 009B  
        ??_I2C_ColorSens_Init 0093                ?_servo_rotate0 000F  

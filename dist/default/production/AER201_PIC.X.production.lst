

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 07 17:51:01 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.40
    80                           ; Generated 01/12/2016 GMT
    81                           ; 
    82                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataBANK0
   115  00240E                     __pidataBANK0:
   116                           	opt stack 0
   117                           
   118                           ;initializer for _bottle_count_disp
   119  00240E  FFFF               	dw	65535
   120                           
   121                           	psect	mediumconst
   122  00FDEE                     __pmediumconst:
   123                           	opt stack 0
   124  00FDEE  00                 	db	0
   125  00FDEF                     _keys:
   126                           	opt stack 0
   127  00FDEF  31                 	db	49
   128  00FDF0  32                 	db	50
   129  00FDF1  33                 	db	51
   130  00FDF2  41                 	db	65
   131  00FDF3  34                 	db	52
   132  00FDF4  35                 	db	53
   133  00FDF5  36                 	db	54
   134  00FDF6  42                 	db	66
   135  00FDF7  37                 	db	55
   136  00FDF8  38                 	db	56
   137  00FDF9  39                 	db	57
   138  00FDFA  43                 	db	67
   139  00FDFB  2A                 	db	42
   140  00FDFC  30                 	db	48
   141  00FDFD  23                 	db	35
   142  00FDFE  44                 	db	68
   143  00FDFF  00                 	db	0
   144  00FE00                     __end_of_keys:
   145                           	opt stack 0
   146  00FE00                     _dpowers:
   147                           	opt stack 0
   148  00FE00  0001               	dw	1
   149  00FE02  000A               	dw	10
   150  00FE04  0064               	dw	100
   151  00FE06  03E8               	dw	1000
   152  00FE08  2710               	dw	10000
   153  00FE0A                     __end_of_dpowers:
   154                           	opt stack 0
   155  00FE0A                     _hexpowers:
   156                           	opt stack 0
   157  00FE0A  0001               	dw	1
   158  00FE0C  0010               	dw	16
   159  00FE0E  0100               	dw	256
   160  00FE10  1000               	dw	4096
   161  00FE12                     __end_of_hexpowers:
   162                           	opt stack 0
   163  00FE12                     _timeset:
   164                           	opt stack 0
   165  00FE12  50                 	db	80
   166  00FE13  35                 	db	53
   167  00FE14  21                 	db	33
   168  00FE15  08                 	db	8
   169  00FE16  05                 	db	5
   170  00FE17  02                 	db	2
   171  00FE18  17                 	db	23
   172  00FE19                     __end_of_timeset:
   173                           	opt stack 0
   174  00FE19                     exp@coeff:
   175                           	opt stack 0
   176  00FE19  00                 	db	0
   177  00FE1A  80                 	db	128
   178  00FE1B  3F                 	db	63
   179  00FE1C  72                 	db	114
   180  00FE1D  31                 	db	49
   181  00FE1E  3F                 	db	63
   182  00FE1F  FE                 	db	254
   183  00FE20  75                 	db	117
   184  00FE21  3E                 	db	62
   185  00FE22  58                 	db	88
   186  00FE23  63                 	db	99
   187  00FE24  3D                 	db	61
   188  00FE25  95                 	db	149
   189  00FE26  1D                 	db	29
   190  00FE27  3C                 	db	60
   191  00FE28  C5                 	db	197
   192  00FE29  AE                 	db	174
   193  00FE2A  3A                 	db	58
   194  00FE2B  79                 	db	121
   195  00FE2C  21                 	db	33
   196  00FE2D  39                 	db	57
   197  00FE2E  94                 	db	148
   198  00FE2F  80                 	db	128
   199  00FE30  37                 	db	55
   200  00FE31  93                 	db	147
   201  00FE32  A7                 	db	167
   202  00FE33  35                 	db	53
   203  00FE34  56                 	db	86
   204  00FE35  15                 	db	21
   205  00FE36  34                 	db	52
   206  00FE37                     __end_ofexp@coeff:
   207                           	opt stack 0
   208  00FE37                     log@coeff:
   209                           	opt stack 0
   210  00FE37  00                 	db	0
   211  00FE38  00                 	db	0
   212  00FE39  00                 	db	0
   213  00FE3A  00                 	db	0
   214  00FE3B  80                 	db	128
   215  00FE3C  3F                 	db	63
   216  00FE3D  F0                 	db	240
   217  00FE3E  FF                 	db	255
   218  00FE3F  BE                 	db	190
   219  00FE40  E2                 	db	226
   220  00FE41  A9                 	db	169
   221  00FE42  3E                 	db	62
   222  00FE43  83                 	db	131
   223  00FE44  76                 	db	118
   224  00FE45  BE                 	db	190
   225  00FE46  AE                 	db	174
   226  00FE47  2B                 	db	43
   227  00FE48  3E                 	db	62
   228  00FE49  3C                 	db	60
   229  00FE4A  C3                 	db	195
   230  00FE4B  BD                 	db	189
   231  00FE4C  D2                 	db	210
   232  00FE4D  13                 	db	19
   233  00FE4E  3D                 	db	61
   234  00FE4F  78                 	db	120
   235  00FE50  D3                 	db	211
   236  00FE51  BB                 	db	187
   237  00FE52                     __end_oflog@coeff:
   238                           	opt stack 0
   239  0000                     _TMR0	set	4054
   240  0000                     _ADCON0	set	4034
   241  0000                     _ADCON1	set	4033
   242  0000                     _INTCONbits	set	4082
   243  0000                     _LATA	set	3977
   244  0000                     _LATB	set	3978
   245  0000                     _LATC	set	3979
   246  0000                     _LATD	set	3980
   247  0000                     _LATDbits	set	3980
   248  0000                     _LATE	set	3981
   249  0000                     _PORTB	set	3969
   250  0000                     _PORTEbits	set	3972
   251  0000                     _SSPADD	set	4040
   252  0000                     _SSPBUF	set	4041
   253  0000                     _SSPCON1	set	4038
   254  0000                     _SSPCON2	set	4037
   255  0000                     _SSPSTAT	set	4039
   256  0000                     _TRISA	set	3986
   257  0000                     _TRISB	set	3987
   258  0000                     _TRISC	set	3988
   259  0000                     _TRISD	set	3989
   260  0000                     _TRISE	set	3990
   261  0000                     _ACKDT	set	32301
   262  0000                     _ACKEN	set	32300
   263  0000                     _INT1IE	set	32643
   264  0000                     _INT1IF	set	32640
   265  0000                     _PEN	set	32298
   266  0000                     _PSA	set	32427
   267  0000                     _RCEN	set	32299
   268  0000                     _RSEN	set	32297
   269  0000                     _SEN	set	32296
   270  0000                     _T08BIT	set	32430
   271  0000                     _T0CS	set	32429
   272  0000                     _T0PS0	set	32424
   273  0000                     _T0PS1	set	32425
   274  0000                     _T0PS2	set	32426
   275  0000                     _TMR0IE	set	32661
   276  0000                     _TMR0IF	set	32658
   277  0000                     _TMR0ON	set	32431
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FE52                     STR_21:
   282  00FE52  52                 	db	82	;'R'
   283  00FE53  75                 	db	117	;'u'
   284  00FE54  6E                 	db	110	;'n'
   285  00FE55  6E                 	db	110	;'n'
   286  00FE56  69                 	db	105	;'i'
   287  00FE57  6E                 	db	110	;'n'
   288  00FE58  67                 	db	103	;'g'
   289  00FE59  7E                 	db	126
   290  00FE5A  7E                 	db	126
   291  00FE5B  7E                 	db	126
   292  00FE5C  20                 	db	32
   293  00FE5D  20                 	db	32
   294  00FE5E  20                 	db	32
   295  00FE5F  20                 	db	32
   296  00FE60  20                 	db	32
   297  00FE61  20                 	db	32
   298  00FE62  20                 	db	32
   299  00FE63  20                 	db	32
   300  00FE64  20                 	db	32
   301  00FE65  20                 	db	32
   302  00FE66  20                 	db	32
   303  00FE67  20                 	db	32
   304  00FE68  20                 	db	32
   305  00FE69  20                 	db	32
   306  00FE6A  00                 	db	0
   307  00FE6B                     STR_20:
   308  00FE6B  52                 	db	82	;'R'
   309  00FE6C  75                 	db	117	;'u'
   310  00FE6D  6E                 	db	110	;'n'
   311  00FE6E  6E                 	db	110	;'n'
   312  00FE6F  69                 	db	105	;'i'
   313  00FE70  6E                 	db	110	;'n'
   314  00FE71  67                 	db	103	;'g'
   315  00FE72  7E                 	db	126
   316  00FE73  7E                 	db	126
   317  00FE74  20                 	db	32
   318  00FE75  20                 	db	32
   319  00FE76  20                 	db	32
   320  00FE77  20                 	db	32
   321  00FE78  20                 	db	32
   322  00FE79  20                 	db	32
   323  00FE7A  20                 	db	32
   324  00FE7B  20                 	db	32
   325  00FE7C  20                 	db	32
   326  00FE7D  20                 	db	32
   327  00FE7E  20                 	db	32
   328  00FE7F  20                 	db	32
   329  00FE80  20                 	db	32
   330  00FE81  20                 	db	32
   331  00FE82  00                 	db	0
   332  00FE83                     STR_19:
   333  00FE83  52                 	db	82	;'R'
   334  00FE84  75                 	db	117	;'u'
   335  00FE85  6E                 	db	110	;'n'
   336  00FE86  6E                 	db	110	;'n'
   337  00FE87  69                 	db	105	;'i'
   338  00FE88  6E                 	db	110	;'n'
   339  00FE89  67                 	db	103	;'g'
   340  00FE8A  7E                 	db	126
   341  00FE8B  20                 	db	32
   342  00FE8C  20                 	db	32
   343  00FE8D  20                 	db	32
   344  00FE8E  20                 	db	32
   345  00FE8F  20                 	db	32
   346  00FE90  20                 	db	32
   347  00FE91  20                 	db	32
   348  00FE92  20                 	db	32
   349  00FE93  20                 	db	32
   350  00FE94  20                 	db	32
   351  00FE95  20                 	db	32
   352  00FE96  20                 	db	32
   353  00FE97  20                 	db	32
   354  00FE98  20                 	db	32
   355  00FE99  00                 	db	0
   356  00FE9A                     STR_17:
   357  00FE9A  54                 	db	84	;'T'
   358  00FE9B  6F                 	db	111	;'o'
   359  00FE9C  74                 	db	116	;'t'
   360  00FE9D  61                 	db	97	;'a'
   361  00FE9E  6C                 	db	108	;'l'
   362  00FE9F  20                 	db	32
   363  00FEA0  4F                 	db	79	;'O'
   364  00FEA1  70                 	db	112	;'p'
   365  00FEA2  65                 	db	101	;'e'
   366  00FEA3  72                 	db	114	;'r'
   367  00FEA4  61                 	db	97	;'a'
   368  00FEA5  74                 	db	116	;'t'
   369  00FEA6  69                 	db	105	;'i'
   370  00FEA7  6F                 	db	111	;'o'
   371  00FEA8  6E                 	db	110	;'n'
   372  00FEA9  20                 	db	32
   373  00FEAA  20                 	db	32
   374  00FEAB  20                 	db	32
   375  00FEAC  20                 	db	32
   376  00FEAD  20                 	db	32
   377  00FEAE  20                 	db	32
   378  00FEAF  20                 	db	32
   379  00FEB0  00                 	db	0
   380  00FEB1                     STR_4:
   381  00FEB1  44                 	db	68	;'D'
   382  00FEB2  61                 	db	97	;'a'
   383  00FEB3  74                 	db	116	;'t'
   384  00FEB4  65                 	db	101	;'e'
   385  00FEB5  3A                 	db	58	;':'
   386  00FEB6  20                 	db	32
   387  00FEB7  25                 	db	37
   388  00FEB8  30                 	db	48	;'0'
   389  00FEB9  32                 	db	50	;'2'
   390  00FEBA  78                 	db	120	;'x'
   391  00FEBB  2F                 	db	47
   392  00FEBC  25                 	db	37
   393  00FEBD  30                 	db	48	;'0'
   394  00FEBE  32                 	db	50	;'2'
   395  00FEBF  78                 	db	120	;'x'
   396  00FEC0  2F                 	db	47
   397  00FEC1  25                 	db	37
   398  00FEC2  30                 	db	48	;'0'
   399  00FEC3  32                 	db	50	;'2'
   400  00FEC4  78                 	db	120	;'x'
   401  00FEC5  20                 	db	32
   402  00FEC6  20                 	db	32
   403  00FEC7  00                 	db	0
   404  00FEC8                     STR_5:
   405  00FEC8  54                 	db	84	;'T'
   406  00FEC9  69                 	db	105	;'i'
   407  00FECA  6D                 	db	109	;'m'
   408  00FECB  65                 	db	101	;'e'
   409  00FECC  3A                 	db	58	;':'
   410  00FECD  20                 	db	32
   411  00FECE  25                 	db	37
   412  00FECF  30                 	db	48	;'0'
   413  00FED0  32                 	db	50	;'2'
   414  00FED1  78                 	db	120	;'x'
   415  00FED2  3A                 	db	58	;':'
   416  00FED3  25                 	db	37
   417  00FED4  30                 	db	48	;'0'
   418  00FED5  32                 	db	50	;'2'
   419  00FED6  78                 	db	120	;'x'
   420  00FED7  3A                 	db	58	;':'
   421  00FED8  25                 	db	37
   422  00FED9  30                 	db	48	;'0'
   423  00FEDA  32                 	db	50	;'2'
   424  00FEDB  78                 	db	120	;'x'
   425  00FEDC  20                 	db	32
   426  00FEDD  20                 	db	32
   427  00FEDE  00                 	db	0
   428  00FEDF                     STR_18:
   429  00FEDF  54                 	db	84	;'T'
   430  00FEE0  69                 	db	105	;'i'
   431  00FEE1  6D                 	db	109	;'m'
   432  00FEE2  65                 	db	101	;'e'
   433  00FEE3  3A                 	db	58	;':'
   434  00FEE4  20                 	db	32
   435  00FEE5  25                 	db	37
   436  00FEE6  64                 	db	100	;'d'
   437  00FEE7  20                 	db	32
   438  00FEE8  73                 	db	115	;'s'
   439  00FEE9  20                 	db	32
   440  00FEEA  20                 	db	32
   441  00FEEB  20                 	db	32
   442  00FEEC  20                 	db	32
   443  00FEED  20                 	db	32
   444  00FEEE  20                 	db	32
   445  00FEEF  20                 	db	32
   446  00FEF0  00                 	db	0
   447  00FEF1                     STR_24:
   448  00FEF1  30                 	db	48	;'0'
   449  00FEF2  31                 	db	49	;'1'
   450  00FEF3  32                 	db	50	;'2'
   451  00FEF4  33                 	db	51	;'3'
   452  00FEF5  34                 	db	52	;'4'
   453  00FEF6  35                 	db	53	;'5'
   454  00FEF7  36                 	db	54	;'6'
   455  00FEF8  37                 	db	55	;'7'
   456  00FEF9  38                 	db	56	;'8'
   457  00FEFA  39                 	db	57	;'9'
   458  00FEFB  61                 	db	97	;'a'
   459  00FEFC  62                 	db	98	;'b'
   460  00FEFD  63                 	db	99	;'c'
   461  00FEFE  64                 	db	100	;'d'
   462  00FEFF  65                 	db	101	;'e'
   463  00FF00  66                 	db	102	;'f'
   464  00FF01  00                 	db	0
   465  00FF02                     STR_2:
   466  00FF02  73                 	db	115	;'s'
   467  00FF03  74                 	db	116	;'t'
   468  00FF04  61                 	db	97	;'a'
   469  00FF05  6E                 	db	110	;'n'
   470  00FF06  64                 	db	100	;'d'
   471  00FF07  62                 	db	98	;'b'
   472  00FF08  79                 	db	121	;'y'
   473  00FF09  20                 	db	32
   474  00FF0A  20                 	db	32
   475  00FF0B  20                 	db	32
   476  00FF0C  20                 	db	32
   477  00FF0D  20                 	db	32
   478  00FF0E  20                 	db	32
   479  00FF0F  20                 	db	32
   480  00FF10  20                 	db	32
   481  00FF11  20                 	db	32
   482  00FF12  00                 	db	0
   483  00FF13                     STR_7:
   484  00FF13  54                 	db	84	;'T'
   485  00FF14  6F                 	db	111	;'o'
   486  00FF15  74                 	db	116	;'t'
   487  00FF16  61                 	db	97	;'a'
   488  00FF17  6C                 	db	108	;'l'
   489  00FF18  3A                 	db	58	;':'
   490  00FF19  20                 	db	32
   491  00FF1A  31                 	db	49	;'1'
   492  00FF1B  30                 	db	48	;'0'
   493  00FF1C  20                 	db	32
   494  00FF1D  20                 	db	32
   495  00FF1E  20                 	db	32
   496  00FF1F  20                 	db	32
   497  00FF20  20                 	db	32
   498  00FF21  20                 	db	32
   499  00FF22  20                 	db	32
   500  00FF23  00                 	db	0
   501  00FF24                     STR_6:
   502  00FF24  42                 	db	66	;'B'
   503  00FF25  6F                 	db	111	;'o'
   504  00FF26  74                 	db	116	;'t'
   505  00FF27  74                 	db	116	;'t'
   506  00FF28  6C                 	db	108	;'l'
   507  00FF29  65                 	db	101	;'e'
   508  00FF2A  20                 	db	32
   509  00FF2B  43                 	db	67	;'C'
   510  00FF2C  6F                 	db	111	;'o'
   511  00FF2D  75                 	db	117	;'u'
   512  00FF2E  6E                 	db	110	;'n'
   513  00FF2F  74                 	db	116	;'t'
   514  00FF30  20                 	db	32
   515  00FF31  20                 	db	32
   516  00FF32  20                 	db	32
   517  00FF33  20                 	db	32
   518  00FF34  00                 	db	0
   519  00FF35                     STR_11:
   520  00FF35  59                 	db	89	;'Y'
   521  00FF36  4F                 	db	79	;'O'
   522  00FF37  50                 	db	80	;'P'
   523  00FF38  2D                 	db	45
   524  00FF39  43                 	db	67	;'C'
   525  00FF3A  41                 	db	65	;'A'
   526  00FF3B  50                 	db	80	;'P'
   527  00FF3C  2D                 	db	45
   528  00FF3D  4C                 	db	76	;'L'
   529  00FF3E  42                 	db	66	;'B'
   530  00FF3F  4C                 	db	76	;'L'
   531  00FF40  3A                 	db	58	;':'
   532  00FF41  20                 	db	32
   533  00FF42  30                 	db	48	;'0'
   534  00FF43  20                 	db	32
   535  00FF44  20                 	db	32
   536  00FF45  00                 	db	0
   537  00FF46                     STR_10:
   538  00FF46  59                 	db	89	;'Y'
   539  00FF47  4F                 	db	79	;'O'
   540  00FF48  50                 	db	80	;'P'
   541  00FF49  2D                 	db	45
   542  00FF4A  43                 	db	67	;'C'
   543  00FF4B  41                 	db	65	;'A'
   544  00FF4C  50                 	db	80	;'P'
   545  00FF4D  2B                 	db	43
   546  00FF4E  4C                 	db	76	;'L'
   547  00FF4F  42                 	db	66	;'B'
   548  00FF50  4C                 	db	76	;'L'
   549  00FF51  3A                 	db	58	;':'
   550  00FF52  20                 	db	32
   551  00FF53  31                 	db	49	;'1'
   552  00FF54  20                 	db	32
   553  00FF55  20                 	db	32
   554  00FF56  00                 	db	0
   555  00FF57                     STR_9:
   556  00FF57  59                 	db	89	;'Y'
   557  00FF58  4F                 	db	79	;'O'
   558  00FF59  50                 	db	80	;'P'
   559  00FF5A  2B                 	db	43
   560  00FF5B  43                 	db	67	;'C'
   561  00FF5C  41                 	db	65	;'A'
   562  00FF5D  50                 	db	80	;'P'
   563  00FF5E  2D                 	db	45
   564  00FF5F  4C                 	db	76	;'L'
   565  00FF60  42                 	db	66	;'B'
   566  00FF61  4C                 	db	76	;'L'
   567  00FF62  3A                 	db	58	;':'
   568  00FF63  20                 	db	32
   569  00FF64  31                 	db	49	;'1'
   570  00FF65  20                 	db	32
   571  00FF66  20                 	db	32
   572  00FF67  00                 	db	0
   573  00FF68                     STR_8:
   574  00FF68  59                 	db	89	;'Y'
   575  00FF69  4F                 	db	79	;'O'
   576  00FF6A  50                 	db	80	;'P'
   577  00FF6B  2B                 	db	43
   578  00FF6C  43                 	db	67	;'C'
   579  00FF6D  41                 	db	65	;'A'
   580  00FF6E  50                 	db	80	;'P'
   581  00FF6F  2B                 	db	43
   582  00FF70  4C                 	db	76	;'L'
   583  00FF71  42                 	db	66	;'B'
   584  00FF72  4C                 	db	76	;'L'
   585  00FF73  3A                 	db	58	;':'
   586  00FF74  20                 	db	32
   587  00FF75  33                 	db	51	;'3'
   588  00FF76  20                 	db	32
   589  00FF77  20                 	db	32
   590  00FF78  00                 	db	0
   591  00FF79                     STR_12:
   592  00FF79  45                 	db	69	;'E'
   593  00FF7A  53                 	db	83	;'S'
   594  00FF7B  4B                 	db	75	;'K'
   595  00FF7C  41                 	db	65	;'A'
   596  00FF7D  2B                 	db	43
   597  00FF7E  43                 	db	67	;'C'
   598  00FF7F  41                 	db	65	;'A'
   599  00FF80  50                 	db	80	;'P'
   600  00FF81  2B                 	db	43
   601  00FF82  4C                 	db	76	;'L'
   602  00FF83  42                 	db	66	;'B'
   603  00FF84  4C                 	db	76	;'L'
   604  00FF85  3A                 	db	58	;':'
   605  00FF86  20                 	db	32
   606  00FF87  31                 	db	49	;'1'
   607  00FF88  20                 	db	32
   608  00FF89  00                 	db	0
   609  00FF8A                     STR_14:
   610  00FF8A  45                 	db	69	;'E'
   611  00FF8B  53                 	db	83	;'S'
   612  00FF8C  4B                 	db	75	;'K'
   613  00FF8D  41                 	db	65	;'A'
   614  00FF8E  2D                 	db	45
   615  00FF8F  43                 	db	67	;'C'
   616  00FF90  41                 	db	65	;'A'
   617  00FF91  50                 	db	80	;'P'
   618  00FF92  2B                 	db	43
   619  00FF93  4C                 	db	76	;'L'
   620  00FF94  42                 	db	66	;'B'
   621  00FF95  4C                 	db	76	;'L'
   622  00FF96  3A                 	db	58	;':'
   623  00FF97  20                 	db	32
   624  00FF98  31                 	db	49	;'1'
   625  00FF99  20                 	db	32
   626  00FF9A  00                 	db	0
   627  00FF9B                     STR_13:
   628  00FF9B  45                 	db	69	;'E'
   629  00FF9C  53                 	db	83	;'S'
   630  00FF9D  4B                 	db	75	;'K'
   631  00FF9E  41                 	db	65	;'A'
   632  00FF9F  2B                 	db	43
   633  00FFA0  43                 	db	67	;'C'
   634  00FFA1  41                 	db	65	;'A'
   635  00FFA2  50                 	db	80	;'P'
   636  00FFA3  2D                 	db	45
   637  00FFA4  4C                 	db	76	;'L'
   638  00FFA5  42                 	db	66	;'B'
   639  00FFA6  4C                 	db	76	;'L'
   640  00FFA7  3A                 	db	58	;':'
   641  00FFA8  20                 	db	32
   642  00FFA9  31                 	db	49	;'1'
   643  00FFAA  20                 	db	32
   644  00FFAB  00                 	db	0
   645  00FFAC                     STR_15:
   646  00FFAC  45                 	db	69	;'E'
   647  00FFAD  53                 	db	83	;'S'
   648  00FFAE  4B                 	db	75	;'K'
   649  00FFAF  41                 	db	65	;'A'
   650  00FFB0  2D                 	db	45
   651  00FFB1  43                 	db	67	;'C'
   652  00FFB2  41                 	db	65	;'A'
   653  00FFB3  50                 	db	80	;'P'
   654  00FFB4  2D                 	db	45
   655  00FFB5  4C                 	db	76	;'L'
   656  00FFB6  42                 	db	66	;'B'
   657  00FFB7  4C                 	db	76	;'L'
   658  00FFB8  3A                 	db	58	;':'
   659  00FFB9  20                 	db	32
   660  00FFBA  32                 	db	50	;'2'
   661  00FFBB  20                 	db	32
   662  00FFBC  00                 	db	0
   663  00FFBD                     STR_22:
   664  00FFBD  4F                 	db	79	;'O'
   665  00FFBE  70                 	db	112	;'p'
   666  00FFBF  65                 	db	101	;'e'
   667  00FFC0  72                 	db	114	;'r'
   668  00FFC1  61                 	db	97	;'a'
   669  00FFC2  74                 	db	116	;'t'
   670  00FFC3  69                 	db	105	;'i'
   671  00FFC4  6F                 	db	111	;'o'
   672  00FFC5  6E                 	db	110	;'n'
   673  00FFC6  20                 	db	32
   674  00FFC7  44                 	db	68	;'D'
   675  00FFC8  6F                 	db	111	;'o'
   676  00FFC9  6E                 	db	110	;'n'
   677  00FFCA  65                 	db	101	;'e'
   678  00FFCB  21                 	db	33
   679  00FFCC  00                 	db	0
   680  00FFCD                     STR_23:
   681  00FFCD  45                 	db	69	;'E'
   682  00FFCE  4D                 	db	77	;'M'
   683  00FFCF  45                 	db	69	;'E'
   684  00FFD0  52                 	db	82	;'R'
   685  00FFD1  47                 	db	71	;'G'
   686  00FFD2  45                 	db	69	;'E'
   687  00FFD3  4E                 	db	78	;'N'
   688  00FFD4  43                 	db	67	;'C'
   689  00FFD5  59                 	db	89	;'Y'
   690  00FFD6  20                 	db	32
   691  00FFD7  53                 	db	83	;'S'
   692  00FFD8  54                 	db	84	;'T'
   693  00FFD9  4F                 	db	79	;'O'
   694  00FFDA  50                 	db	80	;'P'
   695  00FFDB  00                 	db	0
   696  00FFDC                     STR_1:
   697  00FFDC  62                 	db	98	;'b'
   698  00FFDD  61                 	db	97	;'a'
   699  00FFDE  64                 	db	100	;'d'
   700  00FFDF  20                 	db	32
   701  00FFE0  69                 	db	105	;'i'
   702  00FFE1  6E                 	db	110	;'n'
   703  00FFE2  74                 	db	116	;'t'
   704  00FFE3  65                 	db	101	;'e'
   705  00FFE4  72                 	db	114	;'r'
   706  00FFE5  72                 	db	114	;'r'
   707  00FFE6  75                 	db	117	;'u'
   708  00FFE7  70                 	db	112	;'p'
   709  00FFE8  74                 	db	116	;'t'
   710  00FFE9  00                 	db	0
   711  00FFEA                     STR_3:
   712  00FFEA  50                 	db	80	;'P'
   713  00FFEB  4F                 	db	79	;'O'
   714  00FFEC  52                 	db	82	;'R'
   715  00FFED  54                 	db	84	;'T'
   716  00FFEE  42                 	db	66	;'B'
   717  00FFEF  3A                 	db	58	;':'
   718  00FFF0  20                 	db	32
   719  00FFF1  25                 	db	37
   720  00FFF2  64                 	db	100	;'d'
   721  00FFF3  00                 	db	0
   722  00FFF4                     STR_16:
   723  00FFF4  45                 	db	69	;'E'
   724  00FFF5  52                 	db	82	;'R'
   725  00FFF6  52                 	db	82	;'R'
   726  00FFF7  4F                 	db	79	;'O'
   727  00FFF8  52                 	db	82	;'R'
   728  00FFF9  3A                 	db	58	;':'
   729  00FFFA  20                 	db	32
   730  00FFFB  25                 	db	37
   731  00FFFC  64                 	db	100	;'d'
   732  00FFFD  00                 	db	0
   733                           
   734                           ; #config settings
   735  00FFFE  00                 	db	0	; dummy byte at the end
   736  0000                     
   737                           	psect	cinit
   738  00210E                     __pcinit:
   739                           	opt stack 0
   740  00210E                     start_initialization:
   741                           	opt stack 0
   742  00210E                     __initialization:
   743                           	opt stack 0
   744                           
   745                           ; Initialize objects allocated to BANK0 (2 bytes)
   746                           ; load TBLPTR registers with __pidataBANK0
   747  00210E  0E0E               	movlw	low __pidataBANK0
   748  002110  6EF6               	movwf	tblptrl,c
   749  002112  0E24               	movlw	high __pidataBANK0
   750  002114  6EF7               	movwf	tblptrh,c
   751  002116  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   752  002118  6EF8               	movwf	tblptru,c
   753  00211A  0009               	tblrd		*+	;fetch initializer
   754  00211C  CFF5 F0C4          	movff	tablat,__pdataBANK0
   755  002120  0009               	tblrd		*+	;fetch initializer
   756  002122  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   757                           
   758                           ; Clear objects allocated to BANK0 (14 bytes)
   759  002126  EE00  F0B6         	lfsr	0,__pbssBANK0
   760  00212A  0E0E               	movlw	14
   761  00212C                     clear_0:
   762  00212C  6AEE               	clrf	postinc0,c
   763  00212E  06E8               	decf	wreg,f,c
   764  002130  E1FD               	bnz	clear_0
   765                           
   766                           ; Clear objects allocated to COMRAM (8 bytes)
   767  002132  EE00  F076         	lfsr	0,__pbssCOMRAM
   768  002136  0E08               	movlw	8
   769  002138                     clear_1:
   770  002138  6AEE               	clrf	postinc0,c
   771  00213A  06E8               	decf	wreg,f,c
   772  00213C  E1FD               	bnz	clear_1
   773  00213E                     end_of_initialization:
   774                           	opt stack 0
   775  00213E                     __end_of__initialization:
   776                           	opt stack 0
   777  00213E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   778  002140  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   779  002142  0E00               	movlw	low (__Lmediumconst shr (0+16))
   780  002144  6EF8               	movwf	tblptru,c
   781  002146  0100               	movlb	0
   782  002148  EF38  F008         	goto	_main	;jump to C main() function
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           tblptrl	equ	0xFF6
   786                           tablat	equ	0xFF5
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           
   790                           	psect	bssCOMRAM
   791  000076                     __pbssCOMRAM:
   792                           	opt stack 0
   793  000076                     _end_time:
   794                           	opt stack 0
   795  000076                     	ds	2
   796  000078                     _errno:
   797                           	opt stack 0
   798  000078                     	ds	2
   799  00007A                     _ptr:
   800                           	opt stack 0
   801  00007A                     	ds	2
   802  00007C                     _start_time:
   803                           	opt stack 0
   804  00007C                     	ds	2
   805                           tblptru	equ	0xFF8
   806                           tblptrh	equ	0xFF7
   807                           tblptrl	equ	0xFF6
   808                           tablat	equ	0xFF5
   809                           postinc0	equ	0xFEE
   810                           wreg	equ	0xFE8
   811                           
   812                           	psect	bssBANK0
   813  0000B6                     __pbssBANK0:
   814                           	opt stack 0
   815  0000B6                     _time:
   816                           	opt stack 0
   817  0000B6                     	ds	7
   818  0000BD                     _etime:
   819                           	opt stack 0
   820  0000BD                     	ds	2
   821  0000BF                     _operation_disp:
   822                           	opt stack 0
   823  0000BF                     	ds	2
   824  0000C1                     _stime:
   825                           	opt stack 0
   826  0000C1                     	ds	2
   827  0000C3                     _curr_state:
   828                           	opt stack 0
   829  0000C3                     	ds	1
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           
   837                           	psect	dataBANK0
   838  0000C4                     __pdataBANK0:
   839                           	opt stack 0
   840  0000C4                     _bottle_count_disp:
   841                           	opt stack 0
   842  0000C4                     	ds	2
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           
   850                           	psect	cstackBANK0
   851  000080                     __pcstackBANK0:
   852                           	opt stack 0
   853  000080                     ??_isr:
   854                           
   855                           ; 1 bytes @ 0x0
   856  000080                     	ds	16
   857  000090                     ??_isdigit:
   858  000090                     ??_I2C_Master_Wait:
   859  000090                     ?___wmul:
   860                           	opt stack 0
   861  000090                     ?___awmod:
   862                           	opt stack 0
   863  000090                     ?___lwdiv:
   864                           	opt stack 0
   865  000090                     ?___lldiv:
   866                           	opt stack 0
   867  000090                     lcdNibble@temp:
   868                           	opt stack 0
   869  000090                     ___wmul@multiplier:
   870                           	opt stack 0
   871  000090                     ___awmod@dividend:
   872                           	opt stack 0
   873  000090                     ___lwdiv@dividend:
   874                           	opt stack 0
   875  000090                     ___lldiv@dividend:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x10
   879  000090                     	ds	1
   880  000091                     I2C_Master_Read@a:
   881                           	opt stack 0
   882  000091                     lcdNibble@data:
   883                           	opt stack 0
   884  000091                     _isdigit$688:
   885                           	opt stack 0
   886  000091                     I2C_Master_Write@d:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x11
   890  000091                     	ds	1
   891  000092                     I2C_Master_Read@temp:
   892                           	opt stack 0
   893  000092                     lcdInst@data:
   894                           	opt stack 0
   895  000092                     putch@data:
   896                           	opt stack 0
   897  000092                     isdigit@c:
   898                           	opt stack 0
   899  000092                     ___wmul@multiplicand:
   900                           	opt stack 0
   901  000092                     ___awmod@divisor:
   902                           	opt stack 0
   903  000092                     ___lwdiv@divisor:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x12
   907  000092                     	ds	1
   908  000093                     ??_initLCD:
   909                           
   910                           ; 1 bytes @ 0x13
   911  000093                     	ds	1
   912  000094                     ___awmod@counter:
   913                           	opt stack 0
   914  000094                     ___wmul@product:
   915                           	opt stack 0
   916  000094                     ___lwdiv@quotient:
   917                           	opt stack 0
   918  000094                     ___lldiv@divisor:
   919                           	opt stack 0
   920                           
   921                           ; 4 bytes @ 0x14
   922  000094                     	ds	1
   923  000095                     ___awmod@sign:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x15
   927  000095                     	ds	1
   928  000096                     ___lwdiv@counter:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x16
   932  000096                     	ds	1
   933  000097                     ?___lwmod:
   934                           	opt stack 0
   935  000097                     ___lwmod@dividend:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x17
   939  000097                     	ds	1
   940  000098                     ___lldiv@quotient:
   941                           	opt stack 0
   942                           
   943                           ; 4 bytes @ 0x18
   944  000098                     	ds	1
   945  000099                     ___lwmod@divisor:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x19
   949  000099                     	ds	2
   950  00009B                     ___lwmod@counter:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x1B
   954  00009B                     	ds	1
   955  00009C                     ?_printf:
   956                           	opt stack 0
   957  00009C                     ___lldiv@counter:
   958                           	opt stack 0
   959  00009C                     printf@f:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x1C
   963  00009C                     	ds	1
   964  00009D                     I2C_Master_Init@c:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x1D
   968  00009D                     	ds	4
   969  0000A1                     ??_I2C_Master_Init:
   970                           
   971                           ; 1 bytes @ 0x21
   972  0000A1                     	ds	3
   973  0000A4                     ??_printf:
   974                           
   975                           ; 1 bytes @ 0x24
   976  0000A4                     	ds	4
   977  0000A8                     printf@idx:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x28
   981  0000A8                     	ds	1
   982  0000A9                     printf@ap:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x29
   986  0000A9                     	ds	2
   987  0000AB                     printf@prec:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x2B
   991  0000AB                     	ds	1
   992  0000AC                     printf@val:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x2C
   996  0000AC                     	ds	2
   997  0000AE                     printf@flag:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x2E
  1001  0000AE                     	ds	1
  1002  0000AF                     printf@width:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x2F
  1006  0000AF                     	ds	2
  1007  0000B1                     printf@c:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x31
  1011  0000B1                     	ds	1
  1012  0000B2                     ??_operation:
  1013  0000B2                     date_time@i:
  1014                           	opt stack 0
  1015  0000B2                     bottle_time@time:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x32
  1019  0000B2                     	ds	2
  1020  0000B4                     ??_main:
  1021                           
  1022                           ; 1 bytes @ 0x34
  1023  0000B4                     	ds	2
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           
  1031                           	psect	cstackCOMRAM
  1032  000001                     __pcstackCOMRAM:
  1033                           	opt stack 0
  1034  000001                     ??_servo_rotate:
  1035  000001                     ??i2_I2C_Master_Wait:
  1036  000001                     ??i2_isdigit:
  1037  000001                     ?___awdiv:
  1038                           	opt stack 0
  1039  000001                     ?i2___wmul:
  1040                           	opt stack 0
  1041  000001                     ?i2___lwdiv:
  1042                           	opt stack 0
  1043  000001                     ?___ftpack:
  1044                           	opt stack 0
  1045  000001                     ?_frexp:
  1046                           	opt stack 0
  1047  000001                     ?___ftneg:
  1048                           	opt stack 0
  1049  000001                     i2lcdNibble@temp:
  1050                           	opt stack 0
  1051  000001                     ___awdiv@dividend:
  1052                           	opt stack 0
  1053  000001                     i2___wmul@multiplier:
  1054                           	opt stack 0
  1055  000001                     i2___lwdiv@dividend:
  1056                           	opt stack 0
  1057  000001                     ___ftpack@arg:
  1058                           	opt stack 0
  1059  000001                     ___ftge@ff1:
  1060                           	opt stack 0
  1061  000001                     ___ftneg@f1:
  1062                           	opt stack 0
  1063  000001                     frexp@value:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x0
  1067  000001                     	ds	1
  1068  000002                     i2I2C_Master_Read@a:
  1069                           	opt stack 0
  1070  000002                     i2lcdNibble@data:
  1071                           	opt stack 0
  1072  000002                     i2_isdigit$688:
  1073                           	opt stack 0
  1074  000002                     servo_rotate@i:
  1075                           	opt stack 0
  1076  000002                     i2I2C_Master_Write@d:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x1
  1080  000002                     	ds	1
  1081  000003                     i2I2C_Master_Read@temp:
  1082                           	opt stack 0
  1083  000003                     i2lcdInst@data:
  1084                           	opt stack 0
  1085  000003                     i2putch@data:
  1086                           	opt stack 0
  1087  000003                     i2isdigit@c:
  1088                           	opt stack 0
  1089  000003                     ___awdiv@divisor:
  1090                           	opt stack 0
  1091  000003                     i2___wmul@multiplicand:
  1092                           	opt stack 0
  1093  000003                     i2___lwdiv@divisor:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x2
  1097  000003                     	ds	1
  1098  000004                     read_time@i:
  1099                           	opt stack 0
  1100  000004                     ___ftpack@exp:
  1101                           	opt stack 0
  1102  000004                     frexp@eptr:
  1103                           	opt stack 0
  1104  000004                     ___ftge@ff2:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x3
  1108  000004                     	ds	1
  1109  000005                     ___awdiv@counter:
  1110                           	opt stack 0
  1111  000005                     ___ftpack@sign:
  1112                           	opt stack 0
  1113  000005                     i2___wmul@product:
  1114                           	opt stack 0
  1115  000005                     i2___lwdiv@quotient:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x4
  1119  000005                     	ds	1
  1120  000006                     ??___ftpack:
  1121  000006                     ??_frexp:
  1122  000006                     ___awdiv@sign:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x5
  1126  000006                     	ds	1
  1127  000007                     ??___ftge:
  1128  000007                     i2___lwdiv@counter:
  1129                           	opt stack 0
  1130  000007                     ___awdiv@quotient:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x6
  1134  000007                     	ds	1
  1135  000008                     ?i2___lwmod:
  1136                           	opt stack 0
  1137  000008                     i2___lwmod@dividend:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x7
  1141  000008                     	ds	1
  1142  000009                     ?___ftdiv:
  1143                           	opt stack 0
  1144  000009                     ?___awtoft:
  1145                           	opt stack 0
  1146  000009                     ?___lltoft:
  1147                           	opt stack 0
  1148  000009                     ___awtoft@c:
  1149                           	opt stack 0
  1150  000009                     ___ftdiv@f1:
  1151                           	opt stack 0
  1152  000009                     ___lltoft@c:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x8
  1156  000009                     	ds	1
  1157  00000A                     i2___lwmod@divisor:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x9
  1161  00000A                     	ds	2
  1162  00000C                     ___awtoft@sign:
  1163                           	opt stack 0
  1164  00000C                     i2___lwmod@counter:
  1165                           	opt stack 0
  1166  00000C                     ___ftdiv@f2:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0xB
  1170  00000C                     	ds	1
  1171  00000D                     ??___lltoft:
  1172  00000D                     ?i2_printf:
  1173                           	opt stack 0
  1174  00000D                     ?___ftmul:
  1175                           	opt stack 0
  1176  00000D                     i2printf@f:
  1177                           	opt stack 0
  1178  00000D                     ___ftmul@f1:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0xC
  1182  00000D                     	ds	2
  1183  00000F                     ??___ftdiv:
  1184  00000F                     ??i2_printf:
  1185                           
  1186                           ; 1 bytes @ 0xE
  1187  00000F                     	ds	1
  1188  000010                     ___ftmul@f2:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0xF
  1192  000010                     	ds	1
  1193  000011                     ___lltoft@exp:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x10
  1197  000011                     	ds	1
  1198  000012                     ___ftdiv@cntr:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x11
  1202  000012                     	ds	1
  1203  000013                     ??___ftmul:
  1204  000013                     i2printf@idx:
  1205                           	opt stack 0
  1206  000013                     ___ftdiv@f3:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0x12
  1210  000013                     	ds	1
  1211  000014                     i2printf@ap:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x13
  1215  000014                     	ds	2
  1216  000016                     ___ftdiv@exp:
  1217                           	opt stack 0
  1218  000016                     ___ftmul@exp:
  1219                           	opt stack 0
  1220  000016                     i2printf@prec:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x15
  1224  000016                     	ds	1
  1225  000017                     ___ftdiv@sign:
  1226                           	opt stack 0
  1227  000017                     i2printf@val:
  1228                           	opt stack 0
  1229  000017                     ___ftmul@f3_as_product:
  1230                           	opt stack 0
  1231                           
  1232                           ; 3 bytes @ 0x16
  1233  000017                     	ds	2
  1234  000019                     i2printf@flag:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x18
  1238  000019                     	ds	1
  1239  00001A                     ___ftmul@cntr:
  1240                           	opt stack 0
  1241  00001A                     i2printf@width:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x19
  1245  00001A                     	ds	1
  1246  00001B                     ___ftmul@sign:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x1A
  1250  00001B                     	ds	1
  1251  00001C                     ?___ftadd:
  1252                           	opt stack 0
  1253  00001C                     i2printf@c:
  1254                           	opt stack 0
  1255  00001C                     ___ftadd@f1:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x1B
  1259  00001C                     	ds	3
  1260  00001F                     ___ftadd@f2:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x1E
  1264  00001F                     	ds	3
  1265  000022                     ??___ftadd:
  1266                           
  1267                           ; 1 bytes @ 0x21
  1268  000022                     	ds	3
  1269  000025                     ___ftadd@sign:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x24
  1273  000025                     	ds	1
  1274  000026                     ___ftadd@exp2:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x25
  1278  000026                     	ds	1
  1279  000027                     ___ftadd@exp1:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x26
  1283  000027                     	ds	1
  1284  000028                     ?___ftsub:
  1285                           	opt stack 0
  1286  000028                     ?_eval_poly:
  1287                           	opt stack 0
  1288  000028                     ?___fttol:
  1289                           	opt stack 0
  1290  000028                     ___ftsub@f1:
  1291                           	opt stack 0
  1292  000028                     ___fttol@f1:
  1293                           	opt stack 0
  1294  000028                     eval_poly@x:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x27
  1298  000028                     	ds	3
  1299  00002B                     eval_poly@d:
  1300                           	opt stack 0
  1301  00002B                     ___ftsub@f2:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x2A
  1305  00002B                     	ds	1
  1306  00002C                     ??___fttol:
  1307                           
  1308                           ; 1 bytes @ 0x2B
  1309  00002C                     	ds	1
  1310  00002D                     eval_poly@n:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x2C
  1314  00002D                     	ds	1
  1315  00002E                     
  1316                           ; 1 bytes @ 0x2D
  1317  00002E                     	ds	1
  1318  00002F                     ??_eval_poly:
  1319                           
  1320                           ; 1 bytes @ 0x2E
  1321  00002F                     	ds	2
  1322  000031                     ___fttol@sign1:
  1323                           	opt stack 0
  1324  000031                     eval_poly@res:
  1325                           	opt stack 0
  1326                           
  1327                           ; 3 bytes @ 0x30
  1328  000031                     	ds	1
  1329  000032                     ___fttol@lval:
  1330                           	opt stack 0
  1331                           
  1332                           ; 4 bytes @ 0x31
  1333  000032                     	ds	2
  1334  000034                     ?_log:
  1335                           	opt stack 0
  1336  000034                     ?_ldexp:
  1337                           	opt stack 0
  1338  000034                     ldexp@value:
  1339                           	opt stack 0
  1340  000034                     log@x:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x33
  1344  000034                     	ds	2
  1345  000036                     ___fttol@exp1:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x35
  1349  000036                     	ds	1
  1350  000037                     ?___altoft:
  1351                           	opt stack 0
  1352  000037                     ldexp@newexp:
  1353                           	opt stack 0
  1354  000037                     log@exponent:
  1355                           	opt stack 0
  1356  000037                     ___altoft@c:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x36
  1360  000037                     	ds	2
  1361  000039                     ??_ldexp:
  1362                           
  1363                           ; 1 bytes @ 0x38
  1364  000039                     	ds	2
  1365  00003B                     ??___altoft:
  1366                           
  1367                           ; 1 bytes @ 0x3A
  1368  00003B                     	ds	4
  1369  00003F                     ___altoft@exp:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x3E
  1373  00003F                     	ds	1
  1374  000040                     ___altoft@sign:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x3F
  1378  000040                     	ds	1
  1379  000041                     ?_floor:
  1380                           	opt stack 0
  1381  000041                     floor@x:
  1382                           	opt stack 0
  1383                           
  1384                           ; 3 bytes @ 0x40
  1385  000041                     	ds	3
  1386  000044                     floor@i:
  1387                           	opt stack 0
  1388                           
  1389                           ; 3 bytes @ 0x43
  1390  000044                     	ds	3
  1391  000047                     floor@expon:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x46
  1395  000047                     	ds	2
  1396  000049                     ?_exp:
  1397                           	opt stack 0
  1398  000049                     exp@x:
  1399                           	opt stack 0
  1400                           
  1401                           ; 3 bytes @ 0x48
  1402  000049                     	ds	3
  1403  00004C                     _exp$1127:
  1404                           	opt stack 0
  1405                           
  1406                           ; 3 bytes @ 0x4B
  1407  00004C                     	ds	3
  1408  00004F                     exp@exponent:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x4E
  1412  00004F                     	ds	2
  1413  000051                     exp@sign:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x50
  1417  000051                     	ds	1
  1418  000052                     ?_pow:
  1419                           	opt stack 0
  1420  000052                     pow@x:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x51
  1424  000052                     	ds	3
  1425  000055                     pow@y:
  1426                           	opt stack 0
  1427                           
  1428                           ; 3 bytes @ 0x54
  1429  000055                     	ds	3
  1430  000058                     _pow$1125:
  1431                           	opt stack 0
  1432                           
  1433                           ; 3 bytes @ 0x57
  1434  000058                     	ds	3
  1435  00005B                     _pow$1126:
  1436                           	opt stack 0
  1437                           
  1438                           ; 3 bytes @ 0x5A
  1439  00005B                     	ds	3
  1440  00005E                     pow@sign:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x5D
  1444  00005E                     	ds	1
  1445  00005F                     pow@yi:
  1446                           	opt stack 0
  1447                           
  1448                           ; 4 bytes @ 0x5E
  1449  00005F                     	ds	4
  1450  000063                     ?_dec_to_hex:
  1451                           	opt stack 0
  1452  000063                     dec_to_hex@num:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x62
  1456  000063                     	ds	2
  1457  000065                     _dec_to_hex$1123:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x64
  1461  000065                     	ds	3
  1462  000068                     _dec_to_hex$1124:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x67
  1466  000068                     	ds	3
  1467  00006B                     dec_to_hex@temp:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x6A
  1471  00006B                     	ds	2
  1472  00006D                     dec_to_hex@i:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x6C
  1476  00006D                     	ds	2
  1477  00006F                     dec_to_hex@hexnum:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x6E
  1481  00006F                     	ds	2
  1482  000071                     dec_to_hex@quotient:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x70
  1486  000071                     	ds	2
  1487  000073                     _isr$1211:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x72
  1491  000073                     	ds	2
  1492  000075                     isr@i:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x74
  1496  000075                     	ds	1
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           
  1504 ;;
  1505 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1506 ;;
  1507 ;; *************** function _main *****************
  1508 ;; Defined at:
  1509 ;;		line 57 in file "main.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        2 bytes
  1528 ;; Hardware stack levels required when called:   11
  1529 ;; This function calls:
  1530 ;;		_I2C_Master_Init
  1531 ;;		_bottle_count
  1532 ;;		_bottle_time
  1533 ;;		_date_time
  1534 ;;		_emergencystop
  1535 ;;		_initLCD
  1536 ;;		_operation
  1537 ;;		_operationend
  1538 ;;		_standby
  1539 ;; This function is called by:
  1540 ;;		Startup code after reset
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text0
  1545  001070                     __ptext0:
  1546                           	opt stack 0
  1547  001070                     _main:
  1548                           	opt stack 20
  1549                           
  1550                           ;main.c: 61: TRISA = 0xFF;
  1551                           
  1552                           ;incstack = 0
  1553  001070  6892               	setf	3986,c	;volatile
  1554                           
  1555                           ;main.c: 62: TRISB = 0xFF;
  1556  001072  6893               	setf	3987,c	;volatile
  1557                           
  1558                           ;main.c: 63: TRISC = 0x00;
  1559  001074  0E00               	movlw	0
  1560  001076  6E94               	movwf	3988,c	;volatile
  1561                           
  1562                           ;main.c: 64: TRISD = 0x00;
  1563  001078  0E00               	movlw	0
  1564  00107A  6E95               	movwf	3989,c	;volatile
  1565                           
  1566                           ;main.c: 65: TRISE = 0x00;
  1567  00107C  0E00               	movlw	0
  1568  00107E  6E96               	movwf	3990,c	;volatile
  1569                           
  1570                           ;main.c: 67: LATA = 0x00;
  1571  001080  0E00               	movlw	0
  1572  001082  6E89               	movwf	3977,c	;volatile
  1573                           
  1574                           ;main.c: 68: LATB = 0x00;
  1575  001084  0E00               	movlw	0
  1576  001086  6E8A               	movwf	3978,c	;volatile
  1577                           
  1578                           ;main.c: 69: LATC = 0x00;
  1579  001088  0E00               	movlw	0
  1580  00108A  6E8B               	movwf	3979,c	;volatile
  1581                           
  1582                           ;main.c: 70: LATD = 0x00;
  1583  00108C  0E00               	movlw	0
  1584  00108E  6E8C               	movwf	3980,c	;volatile
  1585                           
  1586                           ;main.c: 71: LATE = 0x00;
  1587  001090  0E00               	movlw	0
  1588  001092  6E8D               	movwf	3981,c	;volatile
  1589                           
  1590                           ;main.c: 73: ADCON0 = 0x00;
  1591  001094  0E00               	movlw	0
  1592  001096  6EC2               	movwf	4034,c	;volatile
  1593                           
  1594                           ;main.c: 74: ADCON1 = 0xFF;
  1595  001098  68C1               	setf	4033,c	;volatile
  1596                           
  1597                           ;main.c: 76: INT1IE = 1;
  1598  00109A  86F0               	bsf	intcon3,3,c	;volatile
  1599                           
  1600                           ;main.c: 78: nRBPU = 0;
  1601  00109C  9EF1               	bcf	intcon2,7,c	;volatile
  1602                           
  1603                           ;main.c: 80: initLCD();
  1604  00109E  ECF7  F00F         	call	_initLCD	;wreg free
  1605                           
  1606                           ;main.c: 81: I2C_Master_Init(10000);
  1607  0010A2  0E10               	movlw	16
  1608  0010A4  0100               	movlb	0	; () banked
  1609  0010A6  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1610  0010A8  0E27               	movlw	39
  1611  0010AA  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1612  0010AC  0E00               	movlw	0
  1613  0010AE  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1614  0010B0  0E00               	movlw	0
  1615  0010B2  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1616  0010B4  EC70  F00F         	call	_I2C_Master_Init	;wreg free
  1617                           
  1618                           ;main.c: 83: TMR0 = 0;
  1619  0010B8  0E00               	movlw	0
  1620  0010BA  6ED7               	movwf	4055,c	;volatile
  1621  0010BC  0E00               	movlw	0
  1622  0010BE  6ED6               	movwf	4054,c	;volatile
  1623                           
  1624                           ;main.c: 84: T08BIT = 0;
  1625  0010C0  9CD5               	bcf	4053,6,c	;volatile
  1626                           
  1627                           ;main.c: 85: T0CS = 0;
  1628  0010C2  9AD5               	bcf	4053,5,c	;volatile
  1629                           
  1630                           ;main.c: 86: PSA = 0;
  1631  0010C4  96D5               	bcf	4053,3,c	;volatile
  1632                           
  1633                           ;main.c: 87: T0PS2 = 1;
  1634  0010C6  84D5               	bsf	4053,2,c	;volatile
  1635                           
  1636                           ;main.c: 88: T0PS1 = 1;
  1637  0010C8  82D5               	bsf	4053,1,c	;volatile
  1638                           
  1639                           ;main.c: 89: T0PS0 = 1;
  1640  0010CA  80D5               	bsf	4053,0,c	;volatile
  1641                           
  1642                           ;main.c: 93: (INTCONbits.GIE = 1);
  1643  0010CC  8EF2               	bsf	intcon,7,c	;volatile
  1644                           
  1645                           ;main.c: 95: curr_state = STANDBY;
  1646  0010CE  0E00               	movlw	0
  1647  0010D0  0100               	movlb	0	; () banked
  1648  0010D2  6FC3               	movwf	_curr_state& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 98: switch(curr_state){
  1652                           
  1653                           ;main.c: 97: while(1){
  1654  0010D4  D02A               	goto	l3918
  1655  0010D6                     l3902:
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 100: standby();
  1659  0010D6  ECE1  F010         	call	_standby	;wreg free
  1660                           
  1661                           ;main.c: 101: break;
  1662  0010DA  D03E               	goto	l3920
  1663  0010DC                     l3904:
  1664                           
  1665                           ;main.c: 103: emergencystop();
  1666  0010DC  ECA5  F011         	call	_emergencystop	;wreg free
  1667                           
  1668                           ;main.c: 104: break;
  1669  0010E0  D03B               	goto	l3920
  1670  0010E2                     l3906:
  1671                           
  1672                           ;main.c: 106: operation();
  1673  0010E2  EC48  F00D         	call	_operation	;wreg free
  1674                           
  1675                           ;main.c: 107: break;
  1676  0010E6  D038               	goto	l3920
  1677  0010E8                     l3908:
  1678                           
  1679                           ;main.c: 109: operationend();
  1680  0010E8  ECB2  F011         	call	_operationend	;wreg free
  1681                           
  1682                           ;main.c: 110: break;
  1683  0010EC  D035               	goto	l3920
  1684  0010EE                     l3910:
  1685                           
  1686                           ;main.c: 112: date_time();
  1687  0010EE  EC0F  F00B         	call	_date_time	;wreg free
  1688                           
  1689                           ;main.c: 113: break;
  1690  0010F2  D032               	goto	l3920
  1691  0010F4                     l3912:
  1692                           
  1693                           ;main.c: 115: bottle_count();
  1694  0010F4  EC05  F007         	call	_bottle_count	;wreg free
  1695                           
  1696                           ;main.c: 116: break;
  1697  0010F8  D02F               	goto	l3920
  1698  0010FA                     l3914:
  1699                           
  1700                           ;main.c: 118: bottle_time(etime - stime);
  1701  0010FA  C0C1  F0B4         	movff	_stime,??_main
  1702  0010FE  C0C2  F0B5         	movff	_stime+1,??_main+1
  1703  001102  0100               	movlb	0	; () banked
  1704  001104  1FB4               	comf	??_main& (0+255),f,b
  1705  001106  1FB5               	comf	(??_main+1)& (0+255),f,b
  1706  001108  4BB4               	infsnz	??_main& (0+255),f,b
  1707  00110A  2BB5               	incf	(??_main+1)& (0+255),f,b
  1708  00110C  0100               	movlb	0	; () banked
  1709  00110E  51BD               	movf	_etime& (0+255),w,b
  1710  001110  0100               	movlb	0	; () banked
  1711  001112  25B4               	addwf	??_main& (0+255),w,b
  1712  001114  0100               	movlb	0	; () banked
  1713  001116  6FB2               	movwf	bottle_time@time& (0+255),b
  1714  001118  0100               	movlb	0	; () banked
  1715  00111A  51BE               	movf	(_etime+1)& (0+255),w,b
  1716  00111C  0100               	movlb	0	; () banked
  1717  00111E  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1718  001120  0100               	movlb	0	; () banked
  1719  001122  6FB3               	movwf	(bottle_time@time+1)& (0+255),b
  1720  001124  ECFC  F010         	call	_bottle_time	;wreg free
  1721                           
  1722                           ;main.c: 120: }
  1723                           
  1724                           ;main.c: 119: break;
  1725  001128  D017               	goto	l3920
  1726  00112A                     l3918:
  1727  00112A  0100               	movlb	0	; () banked
  1728  00112C  51C3               	movf	_curr_state& (0+255),w,b
  1729                           
  1730                           ; Switch size 1, requested type "space"
  1731                           ; Number of cases is 7, Range of values is 0 to 6
  1732                           ; switch strategies available:
  1733                           ; Name         Instructions Cycles
  1734                           ; simple_byte           22    12 (average)
  1735                           ;	Chosen strategy is simple_byte
  1736  00112E  0A00               	xorlw	0	; case 0
  1737  001130  B4D8               	btfsc	status,2,c
  1738  001132  D7D1               	goto	l3902
  1739  001134  0A01               	xorlw	1	; case 1
  1740  001136  B4D8               	btfsc	status,2,c
  1741  001138  D7D1               	goto	l3904
  1742  00113A  0A03               	xorlw	3	; case 2
  1743  00113C  B4D8               	btfsc	status,2,c
  1744  00113E  D7D1               	goto	l3906
  1745  001140  0A01               	xorlw	1	; case 3
  1746  001142  B4D8               	btfsc	status,2,c
  1747  001144  D7D1               	goto	l3908
  1748  001146  0A07               	xorlw	7	; case 4
  1749  001148  B4D8               	btfsc	status,2,c
  1750  00114A  D7D1               	goto	l3910
  1751  00114C  0A01               	xorlw	1	; case 5
  1752  00114E  B4D8               	btfsc	status,2,c
  1753  001150  D7D1               	goto	l3912
  1754  001152  0A03               	xorlw	3	; case 6
  1755  001154  B4D8               	btfsc	status,2,c
  1756  001156  D7D1               	goto	l3914
  1757  001158                     l3920:
  1758                           
  1759                           ;main.c: 121: _delay((unsigned long)((200)*(10000000/4000.0)));
  1760  001158  0E03               	movlw	3
  1761  00115A  0100               	movlb	0	; () banked
  1762  00115C  6FB5               	movwf	(??_main+1)& (0+255),b
  1763  00115E  0E8A               	movlw	138
  1764  001160  0100               	movlb	0	; () banked
  1765  001162  6FB4               	movwf	??_main& (0+255),b
  1766  001164  0E55               	movlw	85
  1767  001166                     u3727:
  1768  001166  2EE8               	decfsz	wreg,f,c
  1769  001168  D7FE               	bra	u3727
  1770  00116A  2FB4               	decfsz	??_main& (0+255),f,b
  1771  00116C  D7FC               	bra	u3727
  1772  00116E  2FB5               	decfsz	(??_main+1)& (0+255),f,b
  1773  001170  D7FA               	bra	u3727
  1774  001172  D000               	nop2	
  1775  001174  D7DA               	goto	l3918
  1776  001176                     __end_of_main:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           intcon	equ	0xFF2
  1783                           intcon2	equ	0xFF1
  1784                           intcon3	equ	0xFF0
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _standby *****************
  1790 ;; Defined at:
  1791 ;;		line 200 in file "main.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:   10
  1812 ;; This function calls:
  1813 ;;		_lcdInst
  1814 ;;		_printf
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text1
  1821  0021C2                     __ptext1:
  1822                           	opt stack 0
  1823  0021C2                     _standby:
  1824                           	opt stack 20
  1825                           
  1826                           ;main.c: 201: lcdInst(0b10000000);
  1827                           
  1828                           ;incstack = 0
  1829  0021C2  0E80               	movlw	128
  1830  0021C4  ECD9  F011         	call	_lcdInst
  1831                           
  1832                           ;main.c: 202: printf("standby         ");
  1833  0021C8  0E02               	movlw	low STR_2
  1834  0021CA  0100               	movlb	0	; () banked
  1835  0021CC  6F9C               	movwf	printf@f& (0+255),b
  1836  0021CE  0EFF               	movlw	high STR_2
  1837  0021D0  0100               	movlb	0	; () banked
  1838  0021D2  6F9D               	movwf	(printf@f+1)& (0+255),b
  1839  0021D4  EC09  F000         	call	_printf	;wreg free
  1840                           
  1841                           ;main.c: 203: lcdInst(0b11000000);
  1842  0021D8  0EC0               	movlw	192
  1843  0021DA  ECD9  F011         	call	_lcdInst
  1844                           
  1845                           ;main.c: 204: printf("PORTB: %d", PORTB);
  1846  0021DE  0EEA               	movlw	low STR_3
  1847  0021E0  0100               	movlb	0	; () banked
  1848  0021E2  6F9C               	movwf	printf@f& (0+255),b
  1849  0021E4  0EFF               	movlw	high STR_3
  1850  0021E6  0100               	movlb	0	; () banked
  1851  0021E8  6F9D               	movwf	(printf@f+1)& (0+255),b
  1852  0021EA  CF81 F09E          	movff	3969,?_printf+2	;volatile
  1853  0021EE  0100               	movlb	0	; () banked
  1854  0021F0  6B9F               	clrf	(?_printf+3)& (0+255),b
  1855  0021F2  EC09  F000         	call	_printf	;wreg free
  1856  0021F6  0012               	return	
  1857  0021F8                     __end_of_standby:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           intcon	equ	0xFF2
  1864                           intcon2	equ	0xFF1
  1865                           intcon3	equ	0xFF0
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _operationend *****************
  1871 ;; Defined at:
  1872 ;;		line 346 in file "main.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:   10
  1893 ;; This function calls:
  1894 ;;		_lcdInst
  1895 ;;		_printf
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text2
  1902  002364                     __ptext2:
  1903                           	opt stack 0
  1904  002364                     _operationend:
  1905                           	opt stack 20
  1906                           
  1907                           ;main.c: 347: lcdInst(0b10000000);
  1908                           
  1909                           ;incstack = 0
  1910  002364  0E80               	movlw	128
  1911  002366  ECD9  F011         	call	_lcdInst
  1912                           
  1913                           ;main.c: 348: printf("Operation Done!");
  1914  00236A  0EBD               	movlw	low STR_22
  1915  00236C  0100               	movlb	0	; () banked
  1916  00236E  6F9C               	movwf	printf@f& (0+255),b
  1917  002370  0EFF               	movlw	high STR_22
  1918  002372  0100               	movlb	0	; () banked
  1919  002374  6F9D               	movwf	(printf@f+1)& (0+255),b
  1920  002376  EC09  F000         	call	_printf	;wreg free
  1921  00237A  0012               	return	
  1922  00237C                     __end_of_operationend:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           intcon	equ	0xFF2
  1929                           intcon2	equ	0xFF1
  1930                           intcon3	equ	0xFF0
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           status	equ	0xFD8
  1934                           
  1935 ;; *************** function _operation *****************
  1936 ;; Defined at:
  1937 ;;		line 325 in file "main.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;		None
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        2 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:   10
  1958 ;; This function calls:
  1959 ;;		_lcdInst
  1960 ;;		_printf
  1961 ;; This function is called by:
  1962 ;;		_main
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text3
  1967  001A90                     __ptext3:
  1968                           	opt stack 0
  1969  001A90                     _operation:
  1970                           	opt stack 20
  1971                           
  1972                           ;main.c: 326: switch(operation_disp){
  1973                           
  1974                           ;incstack = 0
  1975  001A90  D033               	goto	l3602
  1976  001A92                     l3582:
  1977                           
  1978                           ;main.c: 328: lcdInst(0b10000000);
  1979  001A92  0E80               	movlw	128
  1980  001A94  ECD9  F011         	call	_lcdInst
  1981                           
  1982                           ;main.c: 329: printf("Running~              ");
  1983  001A98  0E83               	movlw	low STR_19
  1984  001A9A  0100               	movlb	0	; () banked
  1985  001A9C  6F9C               	movwf	printf@f& (0+255),b
  1986  001A9E  0EFE               	movlw	high STR_19
  1987  001AA0  0100               	movlb	0	; () banked
  1988  001AA2  6F9D               	movwf	(printf@f+1)& (0+255),b
  1989  001AA4  EC09  F000         	call	_printf	;wreg free
  1990                           
  1991                           ;main.c: 330: operation_disp = 1;
  1992  001AA8  0E00               	movlw	0
  1993  001AAA  0100               	movlb	0	; () banked
  1994  001AAC  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  1995  001AAE  0E01               	movlw	1
  1996  001AB0  6FBF               	movwf	_operation_disp& (0+255),b
  1997                           
  1998                           ;main.c: 331: break;
  1999  001AB2  0012               	return	
  2000  001AB4                     l3588:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 333: lcdInst(0b10000000);
  2004  001AB4  0E80               	movlw	128
  2005  001AB6  ECD9  F011         	call	_lcdInst
  2006                           
  2007                           ;main.c: 334: printf("Running~~              ");
  2008  001ABA  0E6B               	movlw	low STR_20
  2009  001ABC  0100               	movlb	0	; () banked
  2010  001ABE  6F9C               	movwf	printf@f& (0+255),b
  2011  001AC0  0EFE               	movlw	high STR_20
  2012  001AC2  0100               	movlb	0	; () banked
  2013  001AC4  6F9D               	movwf	(printf@f+1)& (0+255),b
  2014  001AC6  EC09  F000         	call	_printf	;wreg free
  2015                           
  2016                           ;main.c: 335: operation_disp = 2;
  2017  001ACA  0E00               	movlw	0
  2018  001ACC  0100               	movlb	0	; () banked
  2019  001ACE  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2020  001AD0  0E02               	movlw	2
  2021  001AD2  6FBF               	movwf	_operation_disp& (0+255),b
  2022                           
  2023                           ;main.c: 336: break;
  2024  001AD4  0012               	return	
  2025  001AD6                     l3594:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;main.c: 338: lcdInst(0b10000000);
  2029  001AD6  0E80               	movlw	128
  2030  001AD8  ECD9  F011         	call	_lcdInst
  2031                           
  2032                           ;main.c: 339: printf("Running~~~              ");
  2033  001ADC  0E52               	movlw	low STR_21
  2034  001ADE  0100               	movlb	0	; () banked
  2035  001AE0  6F9C               	movwf	printf@f& (0+255),b
  2036  001AE2  0EFE               	movlw	high STR_21
  2037  001AE4  0100               	movlb	0	; () banked
  2038  001AE6  6F9D               	movwf	(printf@f+1)& (0+255),b
  2039  001AE8  EC09  F000         	call	_printf	;wreg free
  2040                           
  2041                           ;main.c: 340: operation_disp = 0;
  2042  001AEC  0E00               	movlw	0
  2043  001AEE  0100               	movlb	0	; () banked
  2044  001AF0  6FC0               	movwf	(_operation_disp+1)& (0+255),b
  2045  001AF2  0E00               	movlw	0
  2046  001AF4  6FBF               	movwf	_operation_disp& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;main.c: 342: }
  2050                           
  2051                           ;main.c: 341: break;
  2052  001AF6  0012               	return	
  2053  001AF8                     l3602:
  2054  001AF8  C0BF  F0B2         	movff	_operation_disp,??_operation
  2055  001AFC  C0C0  F0B3         	movff	_operation_disp+1,??_operation+1
  2056                           
  2057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2058                           ; Switch size 1, requested type "space"
  2059                           ; Number of cases is 1, Range of values is 0 to 0
  2060                           ; switch strategies available:
  2061                           ; Name         Instructions Cycles
  2062                           ; simple_byte            4     3 (average)
  2063                           ;	Chosen strategy is simple_byte
  2064  001B00  0100               	movlb	0	; () banked
  2065  001B02  51B3               	movf	(??_operation+1)& (0+255),w,b
  2066  001B04  0A00               	xorlw	0	; case 0
  2067  001B06  A4D8               	btfss	status,2,c
  2068  001B08  0012               	return	
  2069                           
  2070                           ; BSR set to: 0
  2071                           ; Switch size 1, requested type "space"
  2072                           ; Number of cases is 3, Range of values is 0 to 2
  2073                           ; switch strategies available:
  2074                           ; Name         Instructions Cycles
  2075                           ; simple_byte           10     6 (average)
  2076                           ;	Chosen strategy is simple_byte
  2077  001B0A  0100               	movlb	0	; () banked
  2078  001B0C  51B2               	movf	??_operation& (0+255),w,b
  2079  001B0E  0A00               	xorlw	0	; case 0
  2080  001B10  B4D8               	btfsc	status,2,c
  2081  001B12  D7BF               	goto	l3582
  2082  001B14  0A01               	xorlw	1	; case 1
  2083  001B16  B4D8               	btfsc	status,2,c
  2084  001B18  D7CD               	goto	l3588
  2085  001B1A  0A03               	xorlw	3	; case 2
  2086  001B1C  A4D8               	btfss	status,2,c
  2087  001B1E  0012               	return	
  2088  001B20  D7DA               	goto	l3594
  2089  001B22                     __end_of_operation:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           intcon	equ	0xFF2
  2096                           intcon2	equ	0xFF1
  2097                           intcon3	equ	0xFF0
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _initLCD *****************
  2103 ;; Defined at:
  2104 ;;		line 14 in file "lcd.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:        1 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    9
  2125 ;; This function calls:
  2126 ;;		_lcdInst
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text4
  2133  001FEE                     __ptext4:
  2134                           	opt stack 0
  2135  001FEE                     _initLCD:
  2136                           	opt stack 21
  2137                           
  2138                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;incstack = 0
  2142  001FEE  0E31               	movlw	49
  2143  001FF0  0100               	movlb	0	; () banked
  2144  001FF2  6F93               	movwf	??_initLCD& (0+255),b
  2145  001FF4  0EB2               	movlw	178
  2146  001FF6                     u3737:
  2147  001FF6  2EE8               	decfsz	wreg,f,c
  2148  001FF8  D7FE               	bra	u3737
  2149  001FFA  2F93               	decfsz	??_initLCD& (0+255),f,b
  2150  001FFC  D7FC               	bra	u3737
  2151  001FFE  F000               	nop	
  2152                           
  2153                           ;lcd.c: 16: lcdInst(0b00110011);
  2154  002000  0E33               	movlw	51
  2155  002002  ECD9  F011         	call	_lcdInst
  2156                           
  2157                           ;lcd.c: 17: lcdInst(0b00110011);
  2158  002006  0E33               	movlw	51
  2159  002008  ECD9  F011         	call	_lcdInst
  2160                           
  2161                           ;lcd.c: 18: lcdInst(0b00110010);
  2162  00200C  0E32               	movlw	50
  2163  00200E  ECD9  F011         	call	_lcdInst
  2164                           
  2165                           ;lcd.c: 19: lcdInst(0b00101000);
  2166  002012  0E28               	movlw	40
  2167  002014  ECD9  F011         	call	_lcdInst
  2168                           
  2169                           ;lcd.c: 20: lcdInst(0b00001111);
  2170  002018  0E0F               	movlw	15
  2171  00201A  ECD9  F011         	call	_lcdInst
  2172                           
  2173                           ;lcd.c: 21: lcdInst(0b00000110);
  2174  00201E  0E06               	movlw	6
  2175  002020  ECD9  F011         	call	_lcdInst
  2176                           
  2177                           ;lcd.c: 22: lcdInst(0b00000001);
  2178  002024  0E01               	movlw	1
  2179  002026  ECD9  F011         	call	_lcdInst
  2180                           
  2181                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  2182  00202A  0E31               	movlw	49
  2183  00202C  0100               	movlb	0	; () banked
  2184  00202E  6F93               	movwf	??_initLCD& (0+255),b
  2185  002030  0EB2               	movlw	178
  2186  002032                     u3747:
  2187  002032  2EE8               	decfsz	wreg,f,c
  2188  002034  D7FE               	bra	u3747
  2189  002036  2F93               	decfsz	??_initLCD& (0+255),f,b
  2190  002038  D7FC               	bra	u3747
  2191  00203A  F000               	nop	
  2192  00203C  0012               	return		;funcret
  2193  00203E                     __end_of_initLCD:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           intcon	equ	0xFF2
  2200                           intcon2	equ	0xFF1
  2201                           intcon3	equ	0xFF0
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _emergencystop *****************
  2207 ;; Defined at:
  2208 ;;		line 352 in file "main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;Total ram usage:        0 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:   10
  2229 ;; This function calls:
  2230 ;;		_lcdInst
  2231 ;;		_printf
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text5
  2238  00234A                     __ptext5:
  2239                           	opt stack 0
  2240  00234A                     _emergencystop:
  2241                           	opt stack 20
  2242                           
  2243                           ;main.c: 353: lcdInst(0b10000000);
  2244                           
  2245                           ;incstack = 0
  2246  00234A  0E80               	movlw	128
  2247  00234C  ECD9  F011         	call	_lcdInst
  2248                           
  2249                           ;main.c: 354: printf("EMERGENCY STOP");
  2250  002350  0ECD               	movlw	low STR_23
  2251  002352  0100               	movlb	0	; () banked
  2252  002354  6F9C               	movwf	printf@f& (0+255),b
  2253  002356  0EFF               	movlw	high STR_23
  2254  002358  0100               	movlb	0	; () banked
  2255  00235A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2256  00235C  EC09  F000         	call	_printf	;wreg free
  2257                           
  2258                           ;main.c: 355: (INTCONbits.GIE = 0);
  2259  002360  9EF2               	bcf	intcon,7,c	;volatile
  2260  002362                     l293:
  2261  002362  D7FF               	goto	l293
  2262  002364                     __end_of_emergencystop:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           intcon	equ	0xFF2
  2269                           intcon2	equ	0xFF1
  2270                           intcon3	equ	0xFF0
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _date_time *****************
  2276 ;; Defined at:
  2277 ;;		line 232 in file "main.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  i               1   50[BANK0 ] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2295 ;;Total ram usage:        1 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:   10
  2298 ;; This function calls:
  2299 ;;		_I2C_Master_Read
  2300 ;;		_I2C_Master_Start
  2301 ;;		_I2C_Master_Stop
  2302 ;;		_I2C_Master_Write
  2303 ;;		_lcdInst
  2304 ;;		_printf
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text6
  2311  00161E                     __ptext6:
  2312                           	opt stack 0
  2313  00161E                     _date_time:
  2314                           	opt stack 20
  2315                           
  2316                           ;main.c: 234: I2C_Master_Start();
  2317                           
  2318                           ;incstack = 0
  2319  00161E  ECFB  F011         	call	_I2C_Master_Start	;wreg free
  2320                           
  2321                           ;main.c: 235: I2C_Master_Write(0b11010000);
  2322  001622  0E00               	movlw	0
  2323  001624  0100               	movlb	0	; () banked
  2324  001626  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2325  001628  0ED0               	movlw	208
  2326  00162A  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2327  00162C  ECED  F011         	call	_I2C_Master_Write	;wreg free
  2328                           
  2329                           ;main.c: 236: I2C_Master_Write(0x00);
  2330  001630  0E00               	movlw	0
  2331  001632  0100               	movlb	0	; () banked
  2332  001634  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2333  001636  0E00               	movlw	0
  2334  001638  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2335  00163A  ECED  F011         	call	_I2C_Master_Write	;wreg free
  2336                           
  2337                           ;main.c: 237: I2C_Master_Stop();
  2338  00163E  ECF7  F011         	call	_I2C_Master_Stop	;wreg free
  2339                           
  2340                           ;main.c: 240: I2C_Master_Start();
  2341  001642  ECFB  F011         	call	_I2C_Master_Start	;wreg free
  2342                           
  2343                           ;main.c: 241: I2C_Master_Write(0b11010001);
  2344  001646  0E00               	movlw	0
  2345  001648  0100               	movlb	0	; () banked
  2346  00164A  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2347  00164C  0ED1               	movlw	209
  2348  00164E  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2349  001650  ECED  F011         	call	_I2C_Master_Write	;wreg free
  2350                           
  2351                           ;main.c: 242: for(unsigned char i=0;i<0x06;i++){
  2352  001654  0E00               	movlw	0
  2353  001656  0100               	movlb	0	; () banked
  2354  001658  6FB2               	movwf	date_time@i& (0+255),b
  2355  00165A                     l3618:
  2356                           
  2357                           ; BSR set to: 0
  2358  00165A  0E05               	movlw	5
  2359  00165C  0100               	movlb	0	; () banked
  2360  00165E  65B2               	cpfsgt	date_time@i& (0+255),b
  2361  001660  D001               	goto	l3622
  2362  001662  D010               	goto	l3628
  2363  001664                     l3622:
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;main.c: 243: time[i] = I2C_Master_Read(1);
  2367  001664  0100               	movlb	0	; () banked
  2368  001666  51B2               	movf	date_time@i& (0+255),w,b
  2369  001668  0D01               	mullw	1
  2370  00166A  0EB6               	movlw	low _time
  2371  00166C  24F3               	addwf	prodl,w,c
  2372  00166E  6ED9               	movwf	fsr2l,c
  2373  001670  0E00               	movlw	high _time
  2374  001672  20F4               	addwfc	prodh,w,c
  2375  001674  6EDA               	movwf	fsr2h,c
  2376  001676  0E01               	movlw	1
  2377  001678  EC32  F011         	call	_I2C_Master_Read
  2378  00167C  6EDF               	movwf	indf2,c
  2379  00167E  0100               	movlb	0	; () banked
  2380  001680  2BB2               	incf	date_time@i& (0+255),f,b
  2381  001682  D7EB               	goto	l3618
  2382  001684                     l3628:
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;main.c: 244: }
  2386                           ;main.c: 245: time[6] = I2C_Master_Read(0);
  2387  001684  0E00               	movlw	0
  2388  001686  EC32  F011         	call	_I2C_Master_Read
  2389  00168A  0100               	movlb	0	; () banked
  2390  00168C  6FBC               	movwf	(_time+6)& (0+255),b
  2391                           
  2392                           ;main.c: 246: I2C_Master_Stop();
  2393  00168E  ECF7  F011         	call	_I2C_Master_Stop	;wreg free
  2394                           
  2395                           ;main.c: 249: lcdInst(0b10000000);
  2396  001692  0E80               	movlw	128
  2397  001694  ECD9  F011         	call	_lcdInst
  2398                           
  2399                           ;main.c: 250: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  2400  001698  0EB1               	movlw	low STR_4
  2401  00169A  0100               	movlb	0	; () banked
  2402  00169C  6F9C               	movwf	printf@f& (0+255),b
  2403  00169E  0EFE               	movlw	high STR_4
  2404  0016A0  0100               	movlb	0	; () banked
  2405  0016A2  6F9D               	movwf	(printf@f+1)& (0+255),b
  2406  0016A4  C0BB  F09E         	movff	_time+5,?_printf+2
  2407  0016A8  0100               	movlb	0	; () banked
  2408  0016AA  6B9F               	clrf	(?_printf+3)& (0+255),b
  2409  0016AC  C0BA  F0A0         	movff	_time+4,?_printf+4
  2410  0016B0  0100               	movlb	0	; () banked
  2411  0016B2  6BA1               	clrf	(?_printf+5)& (0+255),b
  2412  0016B4  C0BC  F0A2         	movff	_time+6,?_printf+6
  2413  0016B8  0100               	movlb	0	; () banked
  2414  0016BA  6BA3               	clrf	(?_printf+7)& (0+255),b
  2415  0016BC  EC09  F000         	call	_printf	;wreg free
  2416                           
  2417                           ;main.c: 251: lcdInst(0b11000000);
  2418  0016C0  0EC0               	movlw	192
  2419  0016C2  ECD9  F011         	call	_lcdInst
  2420                           
  2421                           ;main.c: 252: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  2422  0016C6  0EC8               	movlw	low STR_5
  2423  0016C8  0100               	movlb	0	; () banked
  2424  0016CA  6F9C               	movwf	printf@f& (0+255),b
  2425  0016CC  0EFE               	movlw	high STR_5
  2426  0016CE  0100               	movlb	0	; () banked
  2427  0016D0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2428  0016D2  C0B8  F09E         	movff	_time+2,?_printf+2
  2429  0016D6  0100               	movlb	0	; () banked
  2430  0016D8  6B9F               	clrf	(?_printf+3)& (0+255),b
  2431  0016DA  C0B7  F0A0         	movff	_time+1,?_printf+4
  2432  0016DE  0100               	movlb	0	; () banked
  2433  0016E0  6BA1               	clrf	(?_printf+5)& (0+255),b
  2434  0016E2  C0B6  F0A2         	movff	_time,?_printf+6
  2435  0016E6  0100               	movlb	0	; () banked
  2436  0016E8  6BA3               	clrf	(?_printf+7)& (0+255),b
  2437  0016EA  EC09  F000         	call	_printf	;wreg free
  2438  0016EE  0012               	return	
  2439  0016F0                     __end_of_date_time:
  2440                           	opt stack 0
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           intcon	equ	0xFF2
  2448                           intcon2	equ	0xFF1
  2449                           intcon3	equ	0xFF0
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           indf2	equ	0xFDF
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _I2C_Master_Write *****************
  2458 ;; Defined at:
  2459 ;;		line 47 in file "I2C.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  d               2   17[BANK0 ] unsigned int 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;		None
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      void 
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;Total ram usage:        2 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    8
  2480 ;; This function calls:
  2481 ;;		_I2C_Master_Wait
  2482 ;; This function is called by:
  2483 ;;		_date_time
  2484 ;;		_set_time
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text7
  2489  0023DA                     __ptext7:
  2490                           	opt stack 0
  2491  0023DA                     _I2C_Master_Write:
  2492                           	opt stack 21
  2493                           
  2494                           ;I2C.c: 49: I2C_Master_Wait();
  2495                           
  2496                           ;incstack = 0
  2497  0023DA  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2498                           
  2499                           ;I2C.c: 50: SSPBUF = d;
  2500  0023DE  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2501  0023E2  0012               	return		;funcret
  2502  0023E4                     __end_of_I2C_Master_Write:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           intcon2	equ	0xFF1
  2512                           intcon3	equ	0xFF0
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           indf2	equ	0xFDF
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _I2C_Master_Stop *****************
  2521 ;; Defined at:
  2522 ;;		line 41 in file "I2C.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      void 
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;Total ram usage:        0 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    8
  2543 ;; This function calls:
  2544 ;;		_I2C_Master_Wait
  2545 ;; This function is called by:
  2546 ;;		_date_time
  2547 ;;		_set_time
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text8
  2552  0023EE                     __ptext8:
  2553                           	opt stack 0
  2554  0023EE                     _I2C_Master_Stop:
  2555                           	opt stack 21
  2556                           
  2557                           ;I2C.c: 43: I2C_Master_Wait();
  2558                           
  2559                           ;incstack = 0
  2560  0023EE  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2561                           
  2562                           ;I2C.c: 44: PEN = 1;
  2563  0023F2  84C5               	bsf	4037,2,c	;volatile
  2564  0023F4  0012               	return		;funcret
  2565  0023F6                     __end_of_I2C_Master_Stop:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           intcon	equ	0xFF2
  2574                           intcon2	equ	0xFF1
  2575                           intcon3	equ	0xFF0
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           indf2	equ	0xFDF
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _I2C_Master_Start *****************
  2584 ;; Defined at:
  2585 ;;		line 29 in file "I2C.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    8
  2606 ;; This function calls:
  2607 ;;		_I2C_Master_Wait
  2608 ;; This function is called by:
  2609 ;;		_date_time
  2610 ;;		_set_time
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text9
  2615  0023F6                     __ptext9:
  2616                           	opt stack 0
  2617  0023F6                     _I2C_Master_Start:
  2618                           	opt stack 21
  2619                           
  2620                           ;I2C.c: 31: I2C_Master_Wait();
  2621                           
  2622                           ;incstack = 0
  2623  0023F6  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2624                           
  2625                           ;I2C.c: 32: SEN = 1;
  2626  0023FA  80C5               	bsf	4037,0,c	;volatile
  2627  0023FC  0012               	return		;funcret
  2628  0023FE                     __end_of_I2C_Master_Start:
  2629                           	opt stack 0
  2630                           tblptru	equ	0xFF8
  2631                           tblptrh	equ	0xFF7
  2632                           tblptrl	equ	0xFF6
  2633                           tablat	equ	0xFF5
  2634                           prodh	equ	0xFF4
  2635                           prodl	equ	0xFF3
  2636                           intcon	equ	0xFF2
  2637                           intcon2	equ	0xFF1
  2638                           intcon3	equ	0xFF0
  2639                           postinc0	equ	0xFEE
  2640                           wreg	equ	0xFE8
  2641                           indf2	equ	0xFDF
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _I2C_Master_Read *****************
  2647 ;; Defined at:
  2648 ;;		line 53 in file "I2C.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  a               1    wreg     unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  a               1   17[BANK0 ] unsigned char 
  2653 ;;  temp            1   18[BANK0 ] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      unsigned char 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;Total ram usage:        2 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    8
  2670 ;; This function calls:
  2671 ;;		_I2C_Master_Wait
  2672 ;; This function is called by:
  2673 ;;		_date_time
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text10
  2678  002264                     __ptext10:
  2679                           	opt stack 0
  2680  002264                     _I2C_Master_Read:
  2681                           	opt stack 21
  2682                           
  2683                           ;incstack = 0
  2684                           ;I2C_Master_Read@a stored from wreg
  2685  002264  0100               	movlb	0	; () banked
  2686  002266  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2687                           
  2688                           ;I2C.c: 55: unsigned char temp;
  2689                           ;I2C.c: 56: I2C_Master_Wait();
  2690  002268  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2691                           
  2692                           ;I2C.c: 57: RCEN = 1;
  2693  00226C  86C5               	bsf	4037,3,c	;volatile
  2694                           
  2695                           ;I2C.c: 58: I2C_Master_Wait();
  2696  00226E  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2697                           
  2698                           ;I2C.c: 59: temp = SSPBUF;
  2699  002272  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2700                           
  2701                           ;I2C.c: 60: I2C_Master_Wait();
  2702  002276  ECBE  F011         	call	_I2C_Master_Wait	;wreg free
  2703                           
  2704                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2705  00227A  0100               	movlb	0	; () banked
  2706  00227C  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2707  00227E  0100               	movlb	0	; () banked
  2708  002280  A4D8               	btfss	status,2,c
  2709  002282  D002               	goto	u2780
  2710  002284  8AC5               	bsf	4037,5,c	;volatile
  2711  002286  D001               	goto	l3178
  2712  002288                     u2780:
  2713  002288  9AC5               	bcf	4037,5,c	;volatile
  2714  00228A                     l3178:
  2715                           
  2716                           ;I2C.c: 62: ACKEN = 1;
  2717  00228A  88C5               	bsf	4037,4,c	;volatile
  2718                           
  2719                           ;I2C.c: 63: return temp;
  2720  00228C  0100               	movlb	0	; () banked
  2721  00228E  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2722  002290  0012               	return	
  2723  002292                     __end_of_I2C_Master_Read:
  2724                           	opt stack 0
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           intcon2	equ	0xFF1
  2733                           intcon3	equ	0xFF0
  2734                           postinc0	equ	0xFEE
  2735                           wreg	equ	0xFE8
  2736                           indf2	equ	0xFDF
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _I2C_Master_Wait *****************
  2742 ;; Defined at:
  2743 ;;		line 24 in file "I2C.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        1 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    7
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_I2C_Master_Start
  2768 ;;		_I2C_Master_Stop
  2769 ;;		_I2C_Master_Write
  2770 ;;		_I2C_Master_Read
  2771 ;;		_I2C_Master_RepeatedStart
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text11
  2776  00237C                     __ptext11:
  2777                           	opt stack 0
  2778  00237C                     _I2C_Master_Wait:
  2779                           	opt stack 21
  2780  00237C                     l34:
  2781  00237C  B4C7               	btfsc	4039,2,c	;volatile
  2782  00237E  D7FE               	goto	l34
  2783  002380  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  2784  002384  0E1F               	movlw	31
  2785  002386  0100               	movlb	0	; () banked
  2786  002388  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  2787  00238A  B4D8               	btfsc	status,2,c
  2788  00238C  0012               	return	
  2789  00238E  D7F6               	goto	l34
  2790  002390                     __end_of_I2C_Master_Wait:
  2791                           	opt stack 0
  2792                           tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           intcon	equ	0xFF2
  2799                           intcon2	equ	0xFF1
  2800                           intcon3	equ	0xFF0
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           indf2	equ	0xFDF
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _bottle_time *****************
  2809 ;; Defined at:
  2810 ;;		line 317 in file "main.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  time            2   50[BANK0 ] int 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;Total ram usage:        2 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:   10
  2831 ;; This function calls:
  2832 ;;		_lcdInst
  2833 ;;		_printf
  2834 ;; This function is called by:
  2835 ;;		_main
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text12
  2840  0021F8                     __ptext12:
  2841                           	opt stack 0
  2842  0021F8                     _bottle_time:
  2843                           	opt stack 20
  2844                           
  2845                           ;main.c: 318: lcdInst(0b10000000);
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;incstack = 0
  2849  0021F8  0E80               	movlw	128
  2850  0021FA  ECD9  F011         	call	_lcdInst
  2851                           
  2852                           ;main.c: 319: printf("Total Operation       ");
  2853  0021FE  0E9A               	movlw	low STR_17
  2854  002200  0100               	movlb	0	; () banked
  2855  002202  6F9C               	movwf	printf@f& (0+255),b
  2856  002204  0EFE               	movlw	high STR_17
  2857  002206  0100               	movlb	0	; () banked
  2858  002208  6F9D               	movwf	(printf@f+1)& (0+255),b
  2859  00220A  EC09  F000         	call	_printf	;wreg free
  2860                           
  2861                           ;main.c: 320: lcdInst(0b11000000);
  2862  00220E  0EC0               	movlw	192
  2863  002210  ECD9  F011         	call	_lcdInst
  2864                           
  2865                           ;main.c: 321: printf("Time: %d s       ", time);
  2866  002214  0EDF               	movlw	low STR_18
  2867  002216  0100               	movlb	0	; () banked
  2868  002218  6F9C               	movwf	printf@f& (0+255),b
  2869  00221A  0EFE               	movlw	high STR_18
  2870  00221C  0100               	movlb	0	; () banked
  2871  00221E  6F9D               	movwf	(printf@f+1)& (0+255),b
  2872  002220  C0B2  F09E         	movff	bottle_time@time,?_printf+2
  2873  002224  C0B3  F09F         	movff	bottle_time@time+1,?_printf+3
  2874  002228  EC09  F000         	call	_printf	;wreg free
  2875  00222C  0012               	return	
  2876  00222E                     __end_of_bottle_time:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           tblptrh	equ	0xFF7
  2880                           tblptrl	equ	0xFF6
  2881                           tablat	equ	0xFF5
  2882                           prodh	equ	0xFF4
  2883                           prodl	equ	0xFF3
  2884                           intcon	equ	0xFF2
  2885                           intcon2	equ	0xFF1
  2886                           intcon3	equ	0xFF0
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           indf2	equ	0xFDF
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _bottle_count *****************
  2895 ;; Defined at:
  2896 ;;		line 275 in file "main.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:   10
  2917 ;; This function calls:
  2918 ;;		___awmod
  2919 ;;		_lcdInst
  2920 ;;		_printf
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text13
  2927  000E0A                     __ptext13:
  2928                           	opt stack 0
  2929  000E0A                     _bottle_count:
  2930                           	opt stack 20
  2931                           
  2932                           ;main.c: 276: switch(bottle_count_disp % 5){
  2933                           
  2934                           ;incstack = 0
  2935  000E0A  D083               	goto	l3674
  2936  000E0C                     l3638:
  2937                           
  2938                           ;main.c: 278: lcdInst(0b10000000);
  2939  000E0C  0E80               	movlw	128
  2940  000E0E  ECD9  F011         	call	_lcdInst
  2941                           
  2942                           ;main.c: 279: printf("Bottle Count    ");
  2943  000E12  0E24               	movlw	low STR_6
  2944  000E14  0100               	movlb	0	; () banked
  2945  000E16  6F9C               	movwf	printf@f& (0+255),b
  2946  000E18  0EFF               	movlw	high STR_6
  2947  000E1A  0100               	movlb	0	; () banked
  2948  000E1C  6F9D               	movwf	(printf@f+1)& (0+255),b
  2949  000E1E  EC09  F000         	call	_printf	;wreg free
  2950                           
  2951                           ;main.c: 280: lcdInst(0b11000000);
  2952  000E22  0EC0               	movlw	192
  2953  000E24  ECD9  F011         	call	_lcdInst
  2954                           
  2955                           ;main.c: 281: printf("Total: 10       ");
  2956  000E28  0E13               	movlw	low STR_7
  2957  000E2A  0100               	movlb	0	; () banked
  2958  000E2C  6F9C               	movwf	printf@f& (0+255),b
  2959  000E2E  0EFF               	movlw	high STR_7
  2960  000E30  0100               	movlb	0	; () banked
  2961  000E32  6F9D               	movwf	(printf@f+1)& (0+255),b
  2962  000E34  EC09  F000         	call	_printf	;wreg free
  2963                           
  2964                           ;main.c: 282: break;
  2965  000E38  0012               	return	
  2966  000E3A                     l3644:
  2967                           
  2968                           ;main.c: 284: lcdInst(0b10000000);
  2969  000E3A  0E80               	movlw	128
  2970  000E3C  ECD9  F011         	call	_lcdInst
  2971                           
  2972                           ;main.c: 285: printf("YOP+CAP+LBL: 3  ");
  2973  000E40  0E68               	movlw	low STR_8
  2974  000E42  0100               	movlb	0	; () banked
  2975  000E44  6F9C               	movwf	printf@f& (0+255),b
  2976  000E46  0EFF               	movlw	high STR_8
  2977  000E48  0100               	movlb	0	; () banked
  2978  000E4A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2979  000E4C  EC09  F000         	call	_printf	;wreg free
  2980                           
  2981                           ;main.c: 286: lcdInst(0b11000000);
  2982  000E50  0EC0               	movlw	192
  2983  000E52  ECD9  F011         	call	_lcdInst
  2984                           
  2985                           ;main.c: 287: printf("YOP+CAP-LBL: 1  ");
  2986  000E56  0E57               	movlw	low STR_9
  2987  000E58  0100               	movlb	0	; () banked
  2988  000E5A  6F9C               	movwf	printf@f& (0+255),b
  2989  000E5C  0EFF               	movlw	high STR_9
  2990  000E5E  0100               	movlb	0	; () banked
  2991  000E60  6F9D               	movwf	(printf@f+1)& (0+255),b
  2992  000E62  EC09  F000         	call	_printf	;wreg free
  2993                           
  2994                           ;main.c: 288: break;
  2995  000E66  0012               	return	
  2996  000E68                     l3650:
  2997                           
  2998                           ;main.c: 290: lcdInst(0b10000000);
  2999  000E68  0E80               	movlw	128
  3000  000E6A  ECD9  F011         	call	_lcdInst
  3001                           
  3002                           ;main.c: 291: printf("YOP-CAP+LBL: 1  ");
  3003  000E6E  0E46               	movlw	low STR_10
  3004  000E70  0100               	movlb	0	; () banked
  3005  000E72  6F9C               	movwf	printf@f& (0+255),b
  3006  000E74  0EFF               	movlw	high STR_10
  3007  000E76  0100               	movlb	0	; () banked
  3008  000E78  6F9D               	movwf	(printf@f+1)& (0+255),b
  3009  000E7A  EC09  F000         	call	_printf	;wreg free
  3010                           
  3011                           ;main.c: 292: lcdInst(0b11000000);
  3012  000E7E  0EC0               	movlw	192
  3013  000E80  ECD9  F011         	call	_lcdInst
  3014                           
  3015                           ;main.c: 293: printf("YOP-CAP-LBL: 0  ");
  3016  000E84  0E35               	movlw	low STR_11
  3017  000E86  0100               	movlb	0	; () banked
  3018  000E88  6F9C               	movwf	printf@f& (0+255),b
  3019  000E8A  0EFF               	movlw	high STR_11
  3020  000E8C  0100               	movlb	0	; () banked
  3021  000E8E  6F9D               	movwf	(printf@f+1)& (0+255),b
  3022  000E90  EC09  F000         	call	_printf	;wreg free
  3023                           
  3024                           ;main.c: 294: break;
  3025  000E94  0012               	return	
  3026  000E96                     l3656:
  3027                           
  3028                           ;main.c: 296: lcdInst(0b10000000);
  3029  000E96  0E80               	movlw	128
  3030  000E98  ECD9  F011         	call	_lcdInst
  3031                           
  3032                           ;main.c: 297: printf("ESKA+CAP+LBL: 1 ");
  3033  000E9C  0E79               	movlw	low STR_12
  3034  000E9E  0100               	movlb	0	; () banked
  3035  000EA0  6F9C               	movwf	printf@f& (0+255),b
  3036  000EA2  0EFF               	movlw	high STR_12
  3037  000EA4  0100               	movlb	0	; () banked
  3038  000EA6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3039  000EA8  EC09  F000         	call	_printf	;wreg free
  3040                           
  3041                           ;main.c: 298: lcdInst(0b11000000);
  3042  000EAC  0EC0               	movlw	192
  3043  000EAE  ECD9  F011         	call	_lcdInst
  3044                           
  3045                           ;main.c: 299: printf("ESKA+CAP-LBL: 1 ");
  3046  000EB2  0E9B               	movlw	low STR_13
  3047  000EB4  0100               	movlb	0	; () banked
  3048  000EB6  6F9C               	movwf	printf@f& (0+255),b
  3049  000EB8  0EFF               	movlw	high STR_13
  3050  000EBA  0100               	movlb	0	; () banked
  3051  000EBC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3052  000EBE  EC09  F000         	call	_printf	;wreg free
  3053                           
  3054                           ;main.c: 300: break;
  3055  000EC2  0012               	return	
  3056  000EC4                     l3662:
  3057                           
  3058                           ;main.c: 302: lcdInst(0b10000000);
  3059  000EC4  0E80               	movlw	128
  3060  000EC6  ECD9  F011         	call	_lcdInst
  3061                           
  3062                           ;main.c: 303: printf("ESKA-CAP+LBL: 1 ");
  3063  000ECA  0E8A               	movlw	low STR_14
  3064  000ECC  0100               	movlb	0	; () banked
  3065  000ECE  6F9C               	movwf	printf@f& (0+255),b
  3066  000ED0  0EFF               	movlw	high STR_14
  3067  000ED2  0100               	movlb	0	; () banked
  3068  000ED4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3069  000ED6  EC09  F000         	call	_printf	;wreg free
  3070                           
  3071                           ;main.c: 304: lcdInst(0b11000000);
  3072  000EDA  0EC0               	movlw	192
  3073  000EDC  ECD9  F011         	call	_lcdInst
  3074                           
  3075                           ;main.c: 305: printf("ESKA-CAP-LBL: 2 ");
  3076  000EE0  0EAC               	movlw	low STR_15
  3077  000EE2  0100               	movlb	0	; () banked
  3078  000EE4  6F9C               	movwf	printf@f& (0+255),b
  3079  000EE6  0EFF               	movlw	high STR_15
  3080  000EE8  0100               	movlb	0	; () banked
  3081  000EEA  6F9D               	movwf	(printf@f+1)& (0+255),b
  3082  000EEC  EC09  F000         	call	_printf	;wreg free
  3083                           
  3084                           ;main.c: 306: break;
  3085  000EF0  0012               	return	
  3086  000EF2                     l3668:
  3087                           
  3088                           ;main.c: 309: lcdInst(0b10000000);
  3089  000EF2  0E80               	movlw	128
  3090  000EF4  ECD9  F011         	call	_lcdInst
  3091                           
  3092                           ;main.c: 310: printf("ERROR: %d", bottle_count_disp);
  3093  000EF8  0EF4               	movlw	low STR_16
  3094  000EFA  0100               	movlb	0	; () banked
  3095  000EFC  6F9C               	movwf	printf@f& (0+255),b
  3096  000EFE  0EFF               	movlw	high STR_16
  3097  000F00  0100               	movlb	0	; () banked
  3098  000F02  6F9D               	movwf	(printf@f+1)& (0+255),b
  3099  000F04  C0C4  F09E         	movff	_bottle_count_disp,?_printf+2
  3100  000F08  C0C5  F09F         	movff	_bottle_count_disp+1,?_printf+3
  3101  000F0C  EC09  F000         	call	_printf	;wreg free
  3102  000F10  D7F0               	goto	l3668
  3103  000F12                     l3674:
  3104  000F12  C0C4  F090         	movff	_bottle_count_disp,___awmod@dividend
  3105  000F16  C0C5  F091         	movff	_bottle_count_disp+1,___awmod@dividend+1
  3106  000F1A  0E00               	movlw	0
  3107  000F1C  0100               	movlb	0	; () banked
  3108  000F1E  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3109  000F20  0E05               	movlw	5
  3110  000F22  6F92               	movwf	___awmod@divisor& (0+255),b
  3111  000F24  ECF7  F00C         	call	___awmod	;wreg free
  3112                           
  3113                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 1, Range of values is 0 to 0
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte            4     3 (average)
  3119                           ;	Chosen strategy is simple_byte
  3120  000F28  0100               	movlb	0	; () banked
  3121  000F2A  5191               	movf	(?___awmod+1)& (0+255),w,b
  3122  000F2C  0A00               	xorlw	0	; case 0
  3123  000F2E  A4D8               	btfss	status,2,c
  3124  000F30  D7E0               	goto	l3668
  3125                           
  3126                           ; BSR set to: 0
  3127                           ; Switch size 1, requested type "space"
  3128                           ; Number of cases is 5, Range of values is 0 to 4
  3129                           ; switch strategies available:
  3130                           ; Name         Instructions Cycles
  3131                           ; simple_byte           16     9 (average)
  3132                           ;	Chosen strategy is simple_byte
  3133  000F32  0100               	movlb	0	; () banked
  3134  000F34  5190               	movf	?___awmod& (0+255),w,b
  3135  000F36  0A00               	xorlw	0	; case 0
  3136  000F38  B4D8               	btfsc	status,2,c
  3137  000F3A  D768               	goto	l3638
  3138  000F3C  0A01               	xorlw	1	; case 1
  3139  000F3E  B4D8               	btfsc	status,2,c
  3140  000F40  D77C               	goto	l3644
  3141  000F42  0A03               	xorlw	3	; case 2
  3142  000F44  B4D8               	btfsc	status,2,c
  3143  000F46  D790               	goto	l3650
  3144  000F48  0A01               	xorlw	1	; case 3
  3145  000F4A  B4D8               	btfsc	status,2,c
  3146  000F4C  D7A4               	goto	l3656
  3147  000F4E  0A07               	xorlw	7	; case 4
  3148  000F50  B4D8               	btfsc	status,2,c
  3149  000F52  D7B8               	goto	l3662
  3150  000F54  D7CE               	goto	l3668
  3151  000F56                     __end_of_bottle_count:
  3152                           	opt stack 0
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           prodh	equ	0xFF4
  3158                           prodl	equ	0xFF3
  3159                           intcon	equ	0xFF2
  3160                           intcon2	equ	0xFF1
  3161                           intcon3	equ	0xFF0
  3162                           postinc0	equ	0xFEE
  3163                           wreg	equ	0xFE8
  3164                           indf2	equ	0xFDF
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function _printf *****************
  3170 ;; Defined at:
  3171 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  3174 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  3175 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  3176 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  3177 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  3178 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  3179 ;;		 -> STR_3(10), STR_2(17), STR_1(14), 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  idx             1   40[BANK0 ] unsigned char 
  3182 ;;  tmpval          4    0        struct .
  3183 ;;  cp              3    0        PTR const unsigned char 
  3184 ;;  width           2   47[BANK0 ] int 
  3185 ;;  val             2   44[BANK0 ] unsigned int 
  3186 ;;  ap              2   41[BANK0 ] PTR void [1]
  3187 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3188 ;;  len             2    0        unsigned int 
  3189 ;;  c               1   49[BANK0 ] char 
  3190 ;;  flag            1   46[BANK0 ] unsigned char 
  3191 ;;  prec            1   43[BANK0 ] char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  2   28[BANK0 ] int 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3201 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;Total ram usage:       22 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    9
  3208 ;; This function calls:
  3209 ;;		___lwdiv
  3210 ;;		___lwmod
  3211 ;;		___wmul
  3212 ;;		_isdigit
  3213 ;;		_putch
  3214 ;; This function is called by:
  3215 ;;		_standby
  3216 ;;		_date_time
  3217 ;;		_bottle_count
  3218 ;;		_bottle_time
  3219 ;;		_operation
  3220 ;;		_operationend
  3221 ;;		_emergencystop
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text14
  3226  000012                     __ptext14:
  3227                           	opt stack 0
  3228  000012                     _printf:
  3229                           	opt stack 20
  3230                           
  3231                           ;doprnt.c: 466: va_list ap;
  3232                           ;doprnt.c: 499: signed char c;
  3233                           ;doprnt.c: 501: int width;
  3234                           ;doprnt.c: 506: signed char prec;
  3235                           ;doprnt.c: 508: unsigned char flag;
  3236                           ;doprnt.c: 523: union {
  3237                           ;doprnt.c: 524: unsigned long vd;
  3238                           ;doprnt.c: 525: double integ;
  3239                           ;doprnt.c: 526: } tmpval;
  3240                           ;doprnt.c: 528: unsigned int val;
  3241                           ;doprnt.c: 529: unsigned len;
  3242                           ;doprnt.c: 530: const char * cp;
  3243                           ;doprnt.c: 533: *ap = __va_start();
  3244                           
  3245                           ;incstack = 0
  3246  000012  0E9E               	movlw	low (?_printf+2)
  3247  000014  0100               	movlb	0	; () banked
  3248  000016  6FA9               	movwf	printf@ap& (0+255),b
  3249  000018  0E00               	movlw	high (?_printf+2)
  3250  00001A  0100               	movlb	0	; () banked
  3251  00001C  6FAA               	movwf	(printf@ap+1)& (0+255),b
  3252                           
  3253                           ;doprnt.c: 536: while(c = *f++) {
  3254  00001E  D1C4               	goto	l3316
  3255  000020                     l3190:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 538: if(c != '%')
  3259  000020  0E25               	movlw	37
  3260  000022  0100               	movlb	0	; () banked
  3261  000024  19B1               	xorwf	printf@c& (0+255),w,b
  3262  000026  B4D8               	btfsc	status,2,c
  3263  000028  D005               	goto	l3194
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;doprnt.c: 540: {
  3267                           ;doprnt.c: 541: (putch(c) );
  3268  00002A  0100               	movlb	0	; () banked
  3269  00002C  51B1               	movf	printf@c& (0+255),w,b
  3270  00002E  ECD1  F011         	call	_putch
  3271                           
  3272                           ;doprnt.c: 542: continue;
  3273  000032  D1BA               	goto	l3316
  3274  000034                     l3194:
  3275                           
  3276                           ;doprnt.c: 543: }
  3277                           ;doprnt.c: 546: width = 0;
  3278  000034  0E00               	movlw	0
  3279  000036  0100               	movlb	0	; () banked
  3280  000038  6FB0               	movwf	(printf@width+1)& (0+255),b
  3281  00003A  0E00               	movlw	0
  3282  00003C  6FAF               	movwf	printf@width& (0+255),b
  3283                           
  3284                           ;doprnt.c: 548: flag = 0;
  3285  00003E  0E00               	movlw	0
  3286  000040  0100               	movlb	0	; () banked
  3287  000042  6FAE               	movwf	printf@flag& (0+255),b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;doprnt.c: 551: switch(*f) {
  3291                           
  3292                           ;doprnt.c: 550: for(;;) {
  3293  000044  D005               	goto	l3200
  3294  000046                     l3196:
  3295                           
  3296                           ;doprnt.c: 580: flag |= 0x04;
  3297  000046  0100               	movlb	0	; () banked
  3298  000048  85AE               	bsf	printf@flag& (0+255),2,b
  3299                           
  3300                           ;doprnt.c: 581: f++;
  3301  00004A  0100               	movlb	0	; () banked
  3302  00004C  4B9C               	infsnz	printf@f& (0+255),f,b
  3303  00004E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3304  000050                     l3200:
  3305  000050  C09C  FFF6         	movff	printf@f,tblptrl
  3306  000054  C09D  FFF7         	movff	printf@f+1,tblptrh
  3307  000058                     	if	0	;tblptru may be non-zero
  3308  000058                     	endif
  3309  000058                     	if	0	;tblptru may be non-zero
  3310  000058                     	endif
  3311  000058  0008               	tblrd		*
  3312  00005A  50F5               	movf	tablat,w,c
  3313                           
  3314                           ; Switch size 1, requested type "space"
  3315                           ; Number of cases is 1, Range of values is 48 to 48
  3316                           ; switch strategies available:
  3317                           ; Name         Instructions Cycles
  3318                           ; simple_byte            4     3 (average)
  3319                           ;	Chosen strategy is simple_byte
  3320  00005C  0A30               	xorlw	48	; case 48
  3321  00005E  B4D8               	btfsc	status,2,c
  3322  000060  D7F2               	goto	l3196
  3323                           
  3324                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3325                           
  3326                           ;doprnt.c: 586: }
  3327                           
  3328                           ;doprnt.c: 585: break;
  3329  000062  C09C  FFF6         	movff	printf@f,tblptrl
  3330  000066  C09D  FFF7         	movff	printf@f+1,tblptrh
  3331  00006A                     	if	0	;tblptru may be non-zero
  3332  00006A                     	endif
  3333  00006A                     	if	0	;tblptru may be non-zero
  3334  00006A                     	endif
  3335  00006A  0008               	tblrd		*
  3336  00006C  50F5               	movf	tablat,w,c
  3337  00006E  EC49  F011         	call	_isdigit
  3338  000072  A0D8               	btfss	status,0,c
  3339  000074  D044               	goto	l3218
  3340                           
  3341                           ;doprnt.c: 598: width = 0;
  3342  000076  0E00               	movlw	0
  3343  000078  0100               	movlb	0	; () banked
  3344  00007A  6FB0               	movwf	(printf@width+1)& (0+255),b
  3345  00007C  0E00               	movlw	0
  3346  00007E  6FAF               	movwf	printf@width& (0+255),b
  3347  000080                     l3206:
  3348                           
  3349                           ;doprnt.c: 600: width *= 10;
  3350  000080  C0AF  F090         	movff	printf@width,___wmul@multiplier
  3351  000084  C0B0  F091         	movff	printf@width+1,___wmul@multiplier+1
  3352  000088  0E00               	movlw	0
  3353  00008A  0100               	movlb	0	; () banked
  3354  00008C  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3355  00008E  0E0A               	movlw	10
  3356  000090  6F92               	movwf	___wmul@multiplicand& (0+255),b
  3357  000092  EC17  F011         	call	___wmul	;wreg free
  3358  000096  C090  F0AF         	movff	?___wmul,printf@width
  3359  00009A  C091  F0B0         	movff	?___wmul+1,printf@width+1
  3360                           
  3361                           ;doprnt.c: 601: width += *f++ - '0';
  3362  00009E  0ED0               	movlw	208
  3363  0000A0  0100               	movlb	0	; () banked
  3364  0000A2  6FA4               	movwf	??_printf& (0+255),b
  3365  0000A4  0EFF               	movlw	255
  3366  0000A6  0100               	movlb	0	; () banked
  3367  0000A8  6FA5               	movwf	(??_printf+1)& (0+255),b
  3368  0000AA  C09C  FFF6         	movff	printf@f,tblptrl
  3369  0000AE  C09D  FFF7         	movff	printf@f+1,tblptrh
  3370  0000B2                     	if	0	;tblptru may be non-zero
  3371  0000B2                     	endif
  3372  0000B2                     	if	0	;tblptru may be non-zero
  3373  0000B2                     	endif
  3374  0000B2  0008               	tblrd		*
  3375  0000B4  50F5               	movf	tablat,w,c
  3376  0000B6  0100               	movlb	0	; () banked
  3377  0000B8  6FA6               	movwf	(??_printf+2)& (0+255),b
  3378  0000BA  6BA7               	clrf	(??_printf+3)& (0+255),b
  3379  0000BC  0100               	movlb	0	; () banked
  3380  0000BE  51A4               	movf	??_printf& (0+255),w,b
  3381  0000C0  0100               	movlb	0	; () banked
  3382  0000C2  27A6               	addwf	(??_printf+2)& (0+255),f,b
  3383  0000C4  0100               	movlb	0	; () banked
  3384  0000C6  51A5               	movf	(??_printf+1)& (0+255),w,b
  3385  0000C8  0100               	movlb	0	; () banked
  3386  0000CA  23A7               	addwfc	(??_printf+3)& (0+255),f,b
  3387  0000CC  0100               	movlb	0	; () banked
  3388  0000CE  51A6               	movf	(??_printf+2)& (0+255),w,b
  3389  0000D0  0100               	movlb	0	; () banked
  3390  0000D2  27AF               	addwf	printf@width& (0+255),f,b
  3391  0000D4  0100               	movlb	0	; () banked
  3392  0000D6  51A7               	movf	(??_printf+3)& (0+255),w,b
  3393  0000D8  0100               	movlb	0	; () banked
  3394  0000DA  23B0               	addwfc	(printf@width+1)& (0+255),f,b
  3395                           
  3396                           ; BSR set to: 0
  3397  0000DC  0100               	movlb	0	; () banked
  3398  0000DE  4B9C               	infsnz	printf@f& (0+255),f,b
  3399  0000E0  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3403  0000E2  C09C  FFF6         	movff	printf@f,tblptrl
  3404  0000E6  C09D  FFF7         	movff	printf@f+1,tblptrh
  3405  0000EA                     	if	0	;tblptru may be non-zero
  3406  0000EA                     	endif
  3407  0000EA                     	if	0	;tblptru may be non-zero
  3408  0000EA                     	endif
  3409  0000EA  0008               	tblrd		*
  3410  0000EC  50F5               	movf	tablat,w,c
  3411  0000EE  EC49  F011         	call	_isdigit
  3412  0000F2  A0D8               	btfss	status,0,c
  3413  0000F4  D004               	goto	l3218
  3414  0000F6  D7C4               	goto	l3206
  3415  0000F8                     l3214:
  3416                           
  3417                           ;doprnt.c: 721: flag |= 0x80;
  3418  0000F8  0100               	movlb	0	; () banked
  3419  0000FA  8FAE               	bsf	printf@flag& (0+255),7,b
  3420                           
  3421                           ;doprnt.c: 723: break;
  3422  0000FC  D019               	goto	l333
  3423  0000FE                     l3218:
  3424  0000FE  C09C  FFF6         	movff	printf@f,tblptrl
  3425  000102  C09D  FFF7         	movff	printf@f+1,tblptrh
  3426  000106  0100               	movlb	0	; () banked
  3427  000108  4B9C               	infsnz	printf@f& (0+255),f,b
  3428  00010A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3429  00010C                     	if	0	;tblptru may be non-zero
  3430  00010C                     	endif
  3431  00010C                     	if	0	;tblptru may be non-zero
  3432  00010C                     	endif
  3433  00010C  0008               	tblrd		*
  3434  00010E  CFF5 F0B1          	movff	tablat,printf@c
  3435  000112  0100               	movlb	0	; () banked
  3436  000114  51B1               	movf	printf@c& (0+255),w,b
  3437                           
  3438                           ; Switch size 1, requested type "space"
  3439                           ; Number of cases is 4, Range of values is 0 to 120
  3440                           ; switch strategies available:
  3441                           ; Name         Instructions Cycles
  3442                           ; simple_byte           13     7 (average)
  3443                           ;	Chosen strategy is simple_byte
  3444  000116  0A00               	xorlw	0	; case 0
  3445  000118  B4D8               	btfsc	status,2,c
  3446  00011A  0012               	return	
  3447  00011C  0A64               	xorlw	100	; case 100
  3448  00011E  B4D8               	btfsc	status,2,c
  3449  000120  D007               	goto	l333
  3450  000122  0A0D               	xorlw	13	; case 105
  3451  000124  B4D8               	btfsc	status,2,c
  3452  000126  D004               	goto	l333
  3453  000128  0A11               	xorlw	17	; case 120
  3454  00012A  B4D8               	btfsc	status,2,c
  3455  00012C  D7E5               	goto	l3214
  3456  00012E  D13C               	goto	l3316
  3457  000130                     l333:
  3458                           
  3459                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3460  000130  0100               	movlb	0	; () banked
  3461  000132  BFAE               	btfsc	printf@flag& (0+255),7,b
  3462  000134  D019               	goto	l3230
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;doprnt.c: 1253: {
  3466                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3467  000136  C0A9  FFD9         	movff	printf@ap,fsr2l
  3468  00013A  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3469  00013E  CFDE F0AC          	movff	postinc2,printf@val
  3470  000142  CFDD F0AD          	movff	postdec2,printf@val+1
  3471                           
  3472                           ; BSR set to: 0
  3473  000146  0E02               	movlw	2
  3474  000148  0100               	movlb	0	; () banked
  3475  00014A  27A9               	addwf	printf@ap& (0+255),f,b
  3476  00014C  0E00               	movlw	0
  3477  00014E  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;doprnt.c: 1261: if((int)val < 0) {
  3481  000150  0100               	movlb	0	; () banked
  3482  000152  AFAD               	btfss	(printf@val+1)& (0+255),7,b
  3483  000154  D053               	goto	l3264
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;doprnt.c: 1262: flag |= 0x03;
  3487  000156  0E03               	movlw	3
  3488  000158  0100               	movlb	0	; () banked
  3489  00015A  13AE               	iorwf	printf@flag& (0+255),f,b
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;doprnt.c: 1263: val = -val;
  3493  00015C  0100               	movlb	0	; () banked
  3494  00015E  6DAC               	negf	printf@val& (0+255),b
  3495  000160  1FAD               	comf	(printf@val+1)& (0+255),f,b
  3496  000162  B0D8               	btfsc	status,0,c
  3497  000164  2BAD               	incf	(printf@val+1)& (0+255),f,b
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;doprnt.c: 1264: }
  3501                           ;doprnt.c: 1266: }
  3502  000166  D04A               	goto	l3264
  3503  000168                     l3230:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;doprnt.c: 1268: else
  3507                           ;doprnt.c: 1273: {
  3508                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3509  000168  C0A9  FFD9         	movff	printf@ap,fsr2l
  3510  00016C  C0AA  FFDA         	movff	printf@ap+1,fsr2h
  3511  000170  CFDE F0AC          	movff	postinc2,printf@val
  3512  000174  CFDD F0AD          	movff	postdec2,printf@val+1
  3513                           
  3514                           ; BSR set to: 0
  3515  000178  0E02               	movlw	2
  3516  00017A  0100               	movlb	0	; () banked
  3517  00017C  27A9               	addwf	printf@ap& (0+255),f,b
  3518  00017E  0E00               	movlw	0
  3519  000180  23AA               	addwfc	(printf@ap+1)& (0+255),f,b
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;doprnt.c: 1287: }
  3523                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3524  000182  D03C               	goto	l3264
  3525  000184                     l3234:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3529  000184  0E01               	movlw	1
  3530  000186  0100               	movlb	0	; () banked
  3531  000188  6FB1               	movwf	printf@c& (0+255),b
  3532  00018A                     l3236:
  3533                           
  3534                           ; BSR set to: 0
  3535  00018A  0E05               	movlw	5
  3536  00018C  0100               	movlb	0	; () banked
  3537  00018E  19B1               	xorwf	printf@c& (0+255),w,b
  3538  000190  B4D8               	btfsc	status,2,c
  3539  000192  D03D               	goto	l3266
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;doprnt.c: 1306: if(val < dpowers[c])
  3543                           
  3544                           ; BSR set to: 0
  3545                           
  3546                           ; BSR set to: 0
  3547  000194  0100               	movlb	0	; () banked
  3548  000196  51B1               	movf	printf@c& (0+255),w,b
  3549  000198  0D02               	mullw	2
  3550  00019A  0E00               	movlw	low _dpowers
  3551  00019C  24F3               	addwf	prodl,w,c
  3552  00019E  6EF6               	movwf	tblptrl,c
  3553  0001A0  0EFE               	movlw	high _dpowers
  3554  0001A2  20F4               	addwfc	prodh,w,c
  3555  0001A4  6EF7               	movwf	tblptrh,c
  3556  0001A6                     	if	0	;There are less than 3 active tblptr bytes
  3557  0001A6                     	endif
  3558  0001A6  0009               	tblrd		*+
  3559  0001A8  50F5               	movf	tablat,w,c
  3560  0001AA  0100               	movlb	0	; () banked
  3561  0001AC  5DAC               	subwf	printf@val& (0+255),w,b
  3562  0001AE  0009               	tblrd		*+
  3563  0001B0  50F5               	movf	tablat,w,c
  3564  0001B2  0100               	movlb	0	; () banked
  3565  0001B4  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3566  0001B6  A0D8               	btfss	status,0,c
  3567  0001B8  D02A               	goto	l3266
  3568                           
  3569                           ; BSR set to: 0
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;doprnt.c: 1307: break;
  3575  0001BA  0100               	movlb	0	; () banked
  3576  0001BC  2BB1               	incf	printf@c& (0+255),f,b
  3577  0001BE  D7E5               	goto	l3236
  3578  0001C0                     l3248:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3582  0001C0  0E01               	movlw	1
  3583  0001C2  0100               	movlb	0	; () banked
  3584  0001C4  6FB1               	movwf	printf@c& (0+255),b
  3585  0001C6                     l3250:
  3586                           
  3587                           ; BSR set to: 0
  3588  0001C6  0E04               	movlw	4
  3589  0001C8  0100               	movlb	0	; () banked
  3590  0001CA  19B1               	xorwf	printf@c& (0+255),w,b
  3591  0001CC  B4D8               	btfsc	status,2,c
  3592  0001CE  D01F               	goto	l3266
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3596                           
  3597                           ; BSR set to: 0
  3598                           
  3599                           ; BSR set to: 0
  3600  0001D0  0100               	movlb	0	; () banked
  3601  0001D2  51B1               	movf	printf@c& (0+255),w,b
  3602  0001D4  0D02               	mullw	2
  3603  0001D6  0E0A               	movlw	low _hexpowers
  3604  0001D8  24F3               	addwf	prodl,w,c
  3605  0001DA  6EF6               	movwf	tblptrl,c
  3606  0001DC  0EFE               	movlw	high _hexpowers
  3607  0001DE  20F4               	addwfc	prodh,w,c
  3608  0001E0  6EF7               	movwf	tblptrh,c
  3609  0001E2                     	if	0	;There are less than 3 active tblptr bytes
  3610  0001E2                     	endif
  3611  0001E2  0009               	tblrd		*+
  3612  0001E4  50F5               	movf	tablat,w,c
  3613  0001E6  0100               	movlb	0	; () banked
  3614  0001E8  5DAC               	subwf	printf@val& (0+255),w,b
  3615  0001EA  0009               	tblrd		*+
  3616  0001EC  50F5               	movf	tablat,w,c
  3617  0001EE  0100               	movlb	0	; () banked
  3618  0001F0  59AD               	subwfb	(printf@val+1)& (0+255),w,b
  3619  0001F2  A0D8               	btfss	status,0,c
  3620  0001F4  D00C               	goto	l3266
  3621                           
  3622                           ; BSR set to: 0
  3623                           
  3624                           ; BSR set to: 0
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;doprnt.c: 1318: break;
  3628  0001F6  0100               	movlb	0	; () banked
  3629  0001F8  2BB1               	incf	printf@c& (0+255),f,b
  3630  0001FA  D7E5               	goto	l3250
  3631  0001FC                     l3264:
  3632                           
  3633                           ; BSR set to: 0
  3634  0001FC  0100               	movlb	0	; () banked
  3635  0001FE  51AE               	movf	printf@flag& (0+255),w,b
  3636  000200  0B80               	andlw	128
  3637                           
  3638                           ; Switch size 1, requested type "space"
  3639                           ; Number of cases is 2, Range of values is 0 to 128
  3640                           ; switch strategies available:
  3641                           ; Name         Instructions Cycles
  3642                           ; simple_byte            7     4 (average)
  3643                           ;	Chosen strategy is simple_byte
  3644  000202  0A00               	xorlw	0	; case 0
  3645  000204  B4D8               	btfsc	status,2,c
  3646  000206  D7BE               	goto	l3234
  3647  000208  0A80               	xorlw	128	; case 128
  3648  00020A  B4D8               	btfsc	status,2,c
  3649  00020C  D7D9               	goto	l3248
  3650  00020E                     l3266:
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3654  00020E  0100               	movlb	0	; () banked
  3655  000210  51AF               	movf	printf@width& (0+255),w,b
  3656  000212  0100               	movlb	0	; () banked
  3657  000214  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3658  000216  B4D8               	btfsc	status,2,c
  3659  000218  D00B               	goto	l3272
  3660                           
  3661                           ; BSR set to: 0
  3662  00021A  C0AE  F0A4         	movff	printf@flag,??_printf
  3663  00021E  0E03               	movlw	3
  3664  000220  0100               	movlb	0	; () banked
  3665  000222  17A4               	andwf	??_printf& (0+255),f,b
  3666  000224  B4D8               	btfsc	status,2,c
  3667  000226  D004               	goto	l3272
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 1346: width--;
  3671  000228  0100               	movlb	0	; () banked
  3672  00022A  07AF               	decf	printf@width& (0+255),f,b
  3673  00022C  A0D8               	btfss	status,0,c
  3674  00022E  07B0               	decf	(printf@width+1)& (0+255),f,b
  3675  000230                     l3272:
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;doprnt.c: 1381: if(width > c)
  3679  000230  0E80               	movlw	128
  3680  000232  0100               	movlb	0	; () banked
  3681  000234  BFB1               	btfsc	printf@c& (0+255),7,b
  3682  000236  0E7F               	movlw	127
  3683  000238  0100               	movlb	0	; () banked
  3684  00023A  6FA4               	movwf	??_printf& (0+255),b
  3685  00023C  0100               	movlb	0	; () banked
  3686  00023E  51AF               	movf	printf@width& (0+255),w,b
  3687  000240  0100               	movlb	0	; () banked
  3688  000242  5DB1               	subwf	printf@c& (0+255),w,b
  3689  000244  0100               	movlb	0	; () banked
  3690  000246  51B0               	movf	(printf@width+1)& (0+255),w,b
  3691  000248  0A80               	xorlw	128
  3692  00024A  0100               	movlb	0	; () banked
  3693  00024C  59A4               	subwfb	??_printf& (0+255),w,b
  3694  00024E  B0D8               	btfsc	status,0,c
  3695  000250  D00B               	goto	l3276
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1382: width -= c;
  3699  000252  0100               	movlb	0	; () banked
  3700  000254  51B1               	movf	printf@c& (0+255),w,b
  3701  000256  0100               	movlb	0	; () banked
  3702  000258  5FAF               	subwf	printf@width& (0+255),f,b
  3703  00025A  0E00               	movlw	0
  3704  00025C  0100               	movlb	0	; () banked
  3705  00025E  BFB1               	btfsc	printf@c& (0+255),7,b
  3706  000260  0EFF               	movlw	255
  3707  000262  0100               	movlb	0	; () banked
  3708  000264  5BB0               	subwfb	(printf@width+1)& (0+255),f,b
  3709  000266  D005               	goto	l3278
  3710  000268                     l3276:
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;doprnt.c: 1383: else
  3714                           ;doprnt.c: 1384: width = 0;
  3715  000268  0E00               	movlw	0
  3716  00026A  0100               	movlb	0	; () banked
  3717  00026C  6FB0               	movwf	(printf@width+1)& (0+255),b
  3718  00026E  0E00               	movlw	0
  3719  000270  6FAF               	movwf	printf@width& (0+255),b
  3720  000272                     l3278:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;doprnt.c: 1387: if(flag & 0x04) {
  3724  000272  0100               	movlb	0	; () banked
  3725  000274  A5AE               	btfss	printf@flag& (0+255),2,b
  3726  000276  D018               	goto	l3290
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;doprnt.c: 1392: if(flag & 0x03)
  3730  000278  C0AE  F0A4         	movff	printf@flag,??_printf
  3731  00027C  0E03               	movlw	3
  3732  00027E  0100               	movlb	0	; () banked
  3733  000280  17A4               	andwf	??_printf& (0+255),f,b
  3734  000282  B4D8               	btfsc	status,2,c
  3735  000284  D003               	goto	l3284
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;doprnt.c: 1393: (putch('-') );
  3739  000286  0E2D               	movlw	45
  3740  000288  ECD1  F011         	call	_putch
  3741  00028C                     l3284:
  3742                           
  3743                           ;doprnt.c: 1415: if(width)
  3744  00028C  0100               	movlb	0	; () banked
  3745  00028E  51AF               	movf	printf@width& (0+255),w,b
  3746  000290  0100               	movlb	0	; () banked
  3747  000292  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3748  000294  B4D8               	btfsc	status,2,c
  3749  000296  D025               	goto	l3300
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;doprnt.c: 1417: (putch('0') );
  3753                           
  3754                           ; BSR set to: 0
  3755                           
  3756                           ;doprnt.c: 1416: do
  3757  000298  0E30               	movlw	48
  3758  00029A  ECD1  F011         	call	_putch
  3759                           
  3760                           ;doprnt.c: 1418: while(--width);
  3761  00029E  0100               	movlb	0	; () banked
  3762  0002A0  07AF               	decf	printf@width& (0+255),f,b
  3763  0002A2  A0D8               	btfss	status,0,c
  3764  0002A4  07B0               	decf	(printf@width+1)& (0+255),f,b
  3765  0002A6  D7F2               	goto	l3284
  3766  0002A8                     l3290:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;doprnt.c: 1422: {
  3770                           ;doprnt.c: 1424: if(width
  3771                           ;doprnt.c: 1428: )
  3772  0002A8  0100               	movlb	0	; () banked
  3773  0002AA  51AF               	movf	printf@width& (0+255),w,b
  3774  0002AC  0100               	movlb	0	; () banked
  3775  0002AE  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3776  0002B0  B4D8               	btfsc	status,2,c
  3777  0002B2  D00D               	goto	l3296
  3778  0002B4                     l3292:
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;doprnt.c: 1430: (putch(' ') );
  3782  0002B4  0E20               	movlw	32
  3783  0002B6  ECD1  F011         	call	_putch
  3784                           
  3785                           ;doprnt.c: 1431: while(--width);
  3786  0002BA  0100               	movlb	0	; () banked
  3787  0002BC  07AF               	decf	printf@width& (0+255),f,b
  3788  0002BE  A0D8               	btfss	status,0,c
  3789  0002C0  07B0               	decf	(printf@width+1)& (0+255),f,b
  3790  0002C2  0100               	movlb	0	; () banked
  3791  0002C4  51AF               	movf	printf@width& (0+255),w,b
  3792  0002C6  0100               	movlb	0	; () banked
  3793  0002C8  11B0               	iorwf	(printf@width+1)& (0+255),w,b
  3794  0002CA  A4D8               	btfss	status,2,c
  3795  0002CC  D7F3               	goto	l3292
  3796  0002CE                     l3296:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 1438: if(flag & 0x03)
  3800  0002CE  C0AE  F0A4         	movff	printf@flag,??_printf
  3801  0002D2  0E03               	movlw	3
  3802  0002D4  0100               	movlb	0	; () banked
  3803  0002D6  17A4               	andwf	??_printf& (0+255),f,b
  3804  0002D8  B4D8               	btfsc	status,2,c
  3805  0002DA  D003               	goto	l3300
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;doprnt.c: 1439: (putch('-') );
  3809  0002DC  0E2D               	movlw	45
  3810  0002DE  ECD1  F011         	call	_putch
  3811  0002E2                     l3300:
  3812                           
  3813                           ;doprnt.c: 1469: }
  3814                           ;doprnt.c: 1472: prec = c;
  3815  0002E2  C0B1  F0AB         	movff	printf@c,printf@prec
  3816                           
  3817                           ;doprnt.c: 1474: while(prec--) {
  3818  0002E6  D05A               	goto	l3314
  3819  0002E8                     l3302:
  3820                           
  3821                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3822  0002E8  0100               	movlb	0	; () banked
  3823  0002EA  51AB               	movf	printf@prec& (0+255),w,b
  3824  0002EC  0D02               	mullw	2
  3825  0002EE  0E00               	movlw	low _dpowers
  3826  0002F0  24F3               	addwf	prodl,w,c
  3827  0002F2  6EF6               	movwf	tblptrl,c
  3828  0002F4  0EFE               	movlw	high _dpowers
  3829  0002F6  20F4               	addwfc	prodh,w,c
  3830  0002F8  6EF7               	movwf	tblptrh,c
  3831  0002FA                     	if	0	;There are less than 3 active tblptr bytes
  3832  0002FA                     	endif
  3833  0002FA  0009               	tblrd		*+
  3834  0002FC  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3835  000300  000A               	tblrd		*-
  3836  000302  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3837  000306  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3838  00030A  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3839  00030E  EC63  F00E         	call	___lwdiv	;wreg free
  3840  000312  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  3841  000316  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  3842  00031A  0E00               	movlw	0
  3843  00031C  0100               	movlb	0	; () banked
  3844  00031E  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  3845  000320  0E0A               	movlw	10
  3846  000322  6F99               	movwf	___lwmod@divisor& (0+255),b
  3847  000324  EC0F  F00F         	call	___lwmod	;wreg free
  3848  000328  0100               	movlb	0	; () banked
  3849  00032A  5197               	movf	?___lwmod& (0+255),w,b
  3850  00032C  0F30               	addlw	48
  3851  00032E  0100               	movlb	0	; () banked
  3852  000330  6FB1               	movwf	printf@c& (0+255),b
  3853                           
  3854                           ;doprnt.c: 1491: break;
  3855  000332  D030               	goto	l3312
  3856  000334                     l3304:
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;doprnt.c: 1499: {
  3860                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3861  000334  C0AC  F090         	movff	printf@val,___lwdiv@dividend
  3862  000338  C0AD  F091         	movff	printf@val+1,___lwdiv@dividend+1
  3863  00033C  0100               	movlb	0	; () banked
  3864  00033E  51AB               	movf	printf@prec& (0+255),w,b
  3865  000340  0D02               	mullw	2
  3866  000342  0E0A               	movlw	low _hexpowers
  3867  000344  24F3               	addwf	prodl,w,c
  3868  000346  6EF6               	movwf	tblptrl,c
  3869  000348  0EFE               	movlw	high _hexpowers
  3870  00034A  20F4               	addwfc	prodh,w,c
  3871  00034C  6EF7               	movwf	tblptrh,c
  3872  00034E                     	if	0	;There are less than 3 active tblptr bytes
  3873  00034E                     	endif
  3874  00034E  0009               	tblrd		*+
  3875  000350  CFF5 F092          	movff	tablat,___lwdiv@divisor
  3876  000354  000A               	tblrd		*-
  3877  000356  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  3878  00035A  EC63  F00E         	call	___lwdiv	;wreg free
  3879  00035E  0100               	movlb	0	; () banked
  3880  000360  5190               	movf	?___lwdiv& (0+255),w,b
  3881  000362  0B0F               	andlw	15
  3882  000364  0100               	movlb	0	; () banked
  3883  000366  6FA8               	movwf	printf@idx& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3887  000368  0100               	movlb	0	; () banked
  3888  00036A  51A8               	movf	printf@idx& (0+255),w,b
  3889  00036C  0D01               	mullw	1
  3890  00036E  0EF1               	movlw	low STR_24
  3891  000370  24F3               	addwf	prodl,w,c
  3892  000372  6EF6               	movwf	tblptrl,c
  3893  000374  0EFE               	movlw	high STR_24
  3894  000376  20F4               	addwfc	prodh,w,c
  3895  000378  6EF7               	movwf	tblptrh,c
  3896  00037A                     	if	0	;There are less than 3 active tblptr bytes
  3897  00037A                     	endif
  3898  00037A  0008               	tblrd		*
  3899  00037C  CFF5 F0B1          	movff	tablat,printf@c
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;doprnt.c: 1523: }
  3903                           
  3904                           ;doprnt.c: 1508: }
  3905                           ;doprnt.c: 1510: break;
  3906  000380  D009               	goto	l3312
  3907  000382                     l3310:
  3908  000382  0100               	movlb	0	; () banked
  3909  000384  51AE               	movf	printf@flag& (0+255),w,b
  3910  000386  0B80               	andlw	128
  3911                           
  3912                           ; Switch size 1, requested type "space"
  3913                           ; Number of cases is 2, Range of values is 0 to 128
  3914                           ; switch strategies available:
  3915                           ; Name         Instructions Cycles
  3916                           ; simple_byte            7     4 (average)
  3917                           ;	Chosen strategy is simple_byte
  3918  000388  0A00               	xorlw	0	; case 0
  3919  00038A  B4D8               	btfsc	status,2,c
  3920  00038C  D7AD               	goto	l3302
  3921  00038E  0A80               	xorlw	128	; case 128
  3922  000390  B4D8               	btfsc	status,2,c
  3923  000392  D7D0               	goto	l3304
  3924  000394                     l3312:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;doprnt.c: 1524: (putch(c) );
  3928  000394  0100               	movlb	0	; () banked
  3929  000396  51B1               	movf	printf@c& (0+255),w,b
  3930  000398  ECD1  F011         	call	_putch
  3931  00039C                     l3314:
  3932  00039C  0100               	movlb	0	; () banked
  3933  00039E  07AB               	decf	printf@prec& (0+255),f,b
  3934  0003A0  0100               	movlb	0	; () banked
  3935  0003A2  29AB               	incf	printf@prec& (0+255),w,b
  3936  0003A4  A4D8               	btfss	status,2,c
  3937  0003A6  D7ED               	goto	l3310
  3938  0003A8                     l3316:
  3939  0003A8  C09C  FFF6         	movff	printf@f,tblptrl
  3940  0003AC  C09D  FFF7         	movff	printf@f+1,tblptrh
  3941  0003B0  0100               	movlb	0	; () banked
  3942  0003B2  4B9C               	infsnz	printf@f& (0+255),f,b
  3943  0003B4  2B9D               	incf	(printf@f+1)& (0+255),f,b
  3944  0003B6                     	if	0	;tblptru may be non-zero
  3945  0003B6                     	endif
  3946  0003B6                     	if	0	;tblptru may be non-zero
  3947  0003B6                     	endif
  3948  0003B6  0008               	tblrd		*
  3949  0003B8  CFF5 F0B1          	movff	tablat,printf@c
  3950  0003BC  0100               	movlb	0	; () banked
  3951  0003BE  51B1               	movf	printf@c& (0+255),w,b
  3952  0003C0  B4D8               	btfsc	status,2,c
  3953  0003C2  0012               	return	
  3954  0003C4  D62D               	goto	l3190
  3955  0003C6                     __end_of_printf:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           intcon2	equ	0xFF1
  3965                           intcon3	equ	0xFF0
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _putch *****************
  3976 ;; Defined at:
  3977 ;;		line 31 in file "lcd.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  data            1    wreg     unsigned char 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  data            1   18[BANK0 ] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:        1 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    8
  3998 ;; This function calls:
  3999 ;;		_lcdNibble
  4000 ;; This function is called by:
  4001 ;;		_printf
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text15
  4006  0023A2                     __ptext15:
  4007                           	opt stack 0
  4008  0023A2                     _putch:
  4009                           	opt stack 20
  4010                           
  4011                           ;incstack = 0
  4012                           ;putch@data stored from wreg
  4013  0023A2  0100               	movlb	0	; () banked
  4014  0023A4  6F92               	movwf	putch@data& (0+255),b
  4015                           
  4016                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4017  0023A6  848C               	bsf	3980,2,c	;volatile
  4018                           
  4019                           ;lcd.c: 33: lcdNibble(data);
  4020  0023A8  0100               	movlb	0	; () banked
  4021  0023AA  5192               	movf	putch@data& (0+255),w,b
  4022  0023AC  EC40  F00F         	call	_lcdNibble
  4023  0023B0  0012               	return		;funcret
  4024  0023B2                     __end_of_putch:
  4025                           	opt stack 0
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           tblptrl	equ	0xFF6
  4029                           tablat	equ	0xFF5
  4030                           prodh	equ	0xFF4
  4031                           prodl	equ	0xFF3
  4032                           intcon	equ	0xFF2
  4033                           intcon2	equ	0xFF1
  4034                           intcon3	equ	0xFF0
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _isdigit *****************
  4045 ;; Defined at:
  4046 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  c               1    wreg     unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  c               1   18[BANK0 ] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;Total ram usage:        3 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    7
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_printf
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text16
  4075  002292                     __ptext16:
  4076                           	opt stack 0
  4077  002292                     _isdigit:
  4078                           	opt stack 21
  4079                           
  4080                           ;incstack = 0
  4081                           ;isdigit@c stored from wreg
  4082  002292  0100               	movlb	0	; () banked
  4083  002294  6F92               	movwf	isdigit@c& (0+255),b
  4084  002296  0E00               	movlw	0
  4085  002298  0100               	movlb	0	; () banked
  4086  00229A  6F91               	movwf	_isdigit$688& (0+255),b
  4087                           
  4088                           ; BSR set to: 0
  4089  00229C  0E3A               	movlw	58
  4090  00229E  0100               	movlb	0	; () banked
  4091  0022A0  6192               	cpfslt	isdigit@c& (0+255),b
  4092  0022A2  D007               	goto	l3012
  4093                           
  4094                           ; BSR set to: 0
  4095  0022A4  0E2F               	movlw	47
  4096  0022A6  0100               	movlb	0	; () banked
  4097  0022A8  6592               	cpfsgt	isdigit@c& (0+255),b
  4098  0022AA  D003               	goto	l3012
  4099                           
  4100                           ; BSR set to: 0
  4101  0022AC  0E01               	movlw	1
  4102  0022AE  0100               	movlb	0	; () banked
  4103  0022B0  6F91               	movwf	_isdigit$688& (0+255),b
  4104  0022B2                     l3012:
  4105                           
  4106                           ; BSR set to: 0
  4107  0022B2  C091  F090         	movff	_isdigit$688,??_isdigit
  4108  0022B6  0100               	movlb	0	; () banked
  4109  0022B8  3190               	rrcf	??_isdigit& (0+255),w,b
  4110  0022BA  0012               	return	
  4111  0022BC                     __end_of_isdigit:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           intcon2	equ	0xFF1
  4121                           intcon3	equ	0xFF0
  4122                           postinc0	equ	0xFEE
  4123                           wreg	equ	0xFE8
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function ___wmul *****************
  4132 ;; Defined at:
  4133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  multiplier      2   16[BANK0 ] unsigned int 
  4136 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  product         2   20[BANK0 ] unsigned int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  2   16[BANK0 ] unsigned int 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, prodl, prodh
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4148 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;Total ram usage:        6 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    7
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_printf
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text17
  4163  00222E                     __ptext17:
  4164                           	opt stack 0
  4165  00222E                     ___wmul:
  4166                           	opt stack 21
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;incstack = 0
  4170  00222E  0100               	movlb	0	; () banked
  4171  002230  5190               	movf	___wmul@multiplier& (0+255),w,b
  4172  002232  0100               	movlb	0	; () banked
  4173  002234  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4174  002236  CFF3 F094          	movff	prodl,___wmul@product
  4175  00223A  CFF4 F095          	movff	prodh,___wmul@product+1
  4176  00223E  0100               	movlb	0	; () banked
  4177  002240  5190               	movf	___wmul@multiplier& (0+255),w,b
  4178  002242  0100               	movlb	0	; () banked
  4179  002244  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4180  002246  50F3               	movf	prodl,w,c
  4181  002248  0100               	movlb	0	; () banked
  4182  00224A  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4183  00224C  0100               	movlb	0	; () banked
  4184  00224E  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4185  002250  0100               	movlb	0	; () banked
  4186  002252  0392               	mulwf	___wmul@multiplicand& (0+255),b
  4187  002254  50F3               	movf	prodl,w,c
  4188  002256  0100               	movlb	0	; () banked
  4189  002258  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192  00225A  C094  F090         	movff	___wmul@product,?___wmul
  4193  00225E  C095  F091         	movff	___wmul@product+1,?___wmul+1
  4194  002262  0012               	return	
  4195  002264                     __end_of___wmul:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon2	equ	0xFF1
  4205                           intcon3	equ	0xFF0
  4206                           postinc0	equ	0xFEE
  4207                           wreg	equ	0xFE8
  4208                           indf2	equ	0xFDF
  4209                           postinc2	equ	0xFDE
  4210                           postdec2	equ	0xFDD
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function ___lwmod *****************
  4216 ;; Defined at:
  4217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  dividend        2   23[BANK0 ] unsigned int 
  4220 ;;  divisor         2   25[BANK0 ] unsigned int 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  counter         1   27[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2   23[BANK0 ] unsigned int 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        5 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    7
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_printf
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           	psect	text18
  4247  001E1E                     __ptext18:
  4248                           	opt stack 0
  4249  001E1E                     ___lwmod:
  4250                           	opt stack 21
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;incstack = 0
  4254  001E1E  0100               	movlb	0	; () banked
  4255  001E20  5199               	movf	___lwmod@divisor& (0+255),w,b
  4256  001E22  0100               	movlb	0	; () banked
  4257  001E24  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4258  001E26  B4D8               	btfsc	status,2,c
  4259  001E28  D026               	goto	l788
  4260                           
  4261                           ; BSR set to: 0
  4262  001E2A  0E01               	movlw	1
  4263  001E2C  0100               	movlb	0	; () banked
  4264  001E2E  6F9B               	movwf	___lwmod@counter& (0+255),b
  4265  001E30  D006               	goto	l3060
  4266  001E32                     l3058:
  4267                           
  4268                           ; BSR set to: 0
  4269  001E32  0100               	movlb	0	; () banked
  4270  001E34  90D8               	bcf	status,0,c
  4271  001E36  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  4272  001E38  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4273  001E3A  0100               	movlb	0	; () banked
  4274  001E3C  2B9B               	incf	___lwmod@counter& (0+255),f,b
  4275  001E3E                     l3060:
  4276                           
  4277                           ; BSR set to: 0
  4278  001E3E  0100               	movlb	0	; () banked
  4279  001E40  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4280  001E42  D7F7               	goto	l3058
  4281  001E44                     l3062:
  4282                           
  4283                           ; BSR set to: 0
  4284  001E44  0100               	movlb	0	; () banked
  4285  001E46  5199               	movf	___lwmod@divisor& (0+255),w,b
  4286  001E48  0100               	movlb	0	; () banked
  4287  001E4A  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  4288  001E4C  0100               	movlb	0	; () banked
  4289  001E4E  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4290  001E50  0100               	movlb	0	; () banked
  4291  001E52  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4292  001E54  A0D8               	btfss	status,0,c
  4293  001E56  D008               	goto	l3066
  4294                           
  4295                           ; BSR set to: 0
  4296  001E58  0100               	movlb	0	; () banked
  4297  001E5A  5199               	movf	___lwmod@divisor& (0+255),w,b
  4298  001E5C  0100               	movlb	0	; () banked
  4299  001E5E  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  4300  001E60  0100               	movlb	0	; () banked
  4301  001E62  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4302  001E64  0100               	movlb	0	; () banked
  4303  001E66  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4304  001E68                     l3066:
  4305                           
  4306                           ; BSR set to: 0
  4307  001E68  0100               	movlb	0	; () banked
  4308  001E6A  90D8               	bcf	status,0,c
  4309  001E6C  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4310  001E6E  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  4311                           
  4312                           ; BSR set to: 0
  4313  001E70  0100               	movlb	0	; () banked
  4314  001E72  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  4315  001E74  D7E7               	goto	l3062
  4316  001E76                     l788:
  4317                           
  4318                           ; BSR set to: 0
  4319  001E76  C097  F097         	movff	___lwmod@dividend,?___lwmod
  4320  001E7A  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  4321                           
  4322                           ; BSR set to: 0
  4323  001E7E  0012               	return		;funcret
  4324  001E80                     __end_of___lwmod:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           intcon2	equ	0xFF1
  4334                           intcon3	equ	0xFF0
  4335                           postinc0	equ	0xFEE
  4336                           wreg	equ	0xFE8
  4337                           indf2	equ	0xFDF
  4338                           postinc2	equ	0xFDE
  4339                           postdec2	equ	0xFDD
  4340                           fsr2h	equ	0xFDA
  4341                           fsr2l	equ	0xFD9
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function ___lwdiv *****************
  4345 ;; Defined at:
  4346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  dividend        2   16[BANK0 ] unsigned int 
  4349 ;;  divisor         2   18[BANK0 ] unsigned int 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  quotient        2   20[BANK0 ] unsigned int 
  4352 ;;  counter         1   22[BANK0 ] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  2   16[BANK0 ] unsigned int 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:        7 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    7
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_printf
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text19
  4377  001CC6                     __ptext19:
  4378                           	opt stack 0
  4379  001CC6                     ___lwdiv:
  4380                           	opt stack 21
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;incstack = 0
  4384  001CC6  0E00               	movlw	0
  4385  001CC8  0100               	movlb	0	; () banked
  4386  001CCA  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4387  001CCC  0E00               	movlw	0
  4388  001CCE  6F94               	movwf	___lwdiv@quotient& (0+255),b
  4389                           
  4390                           ; BSR set to: 0
  4391  001CD0  0100               	movlb	0	; () banked
  4392  001CD2  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4393  001CD4  0100               	movlb	0	; () banked
  4394  001CD6  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4395  001CD8  B4D8               	btfsc	status,2,c
  4396  001CDA  D02C               	goto	l778
  4397                           
  4398                           ; BSR set to: 0
  4399  001CDC  0E01               	movlw	1
  4400  001CDE  0100               	movlb	0	; () banked
  4401  001CE0  6F96               	movwf	___lwdiv@counter& (0+255),b
  4402  001CE2  D006               	goto	l3040
  4403  001CE4                     l3038:
  4404                           
  4405                           ; BSR set to: 0
  4406  001CE4  0100               	movlb	0	; () banked
  4407  001CE6  90D8               	bcf	status,0,c
  4408  001CE8  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  4409  001CEA  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4410  001CEC  0100               	movlb	0	; () banked
  4411  001CEE  2B96               	incf	___lwdiv@counter& (0+255),f,b
  4412  001CF0                     l3040:
  4413                           
  4414                           ; BSR set to: 0
  4415  001CF0  0100               	movlb	0	; () banked
  4416  001CF2  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4417  001CF4  D7F7               	goto	l3038
  4418  001CF6                     l3042:
  4419                           
  4420                           ; BSR set to: 0
  4421  001CF6  0100               	movlb	0	; () banked
  4422  001CF8  90D8               	bcf	status,0,c
  4423  001CFA  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  4424  001CFC  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4425                           
  4426                           ; BSR set to: 0
  4427  001CFE  0100               	movlb	0	; () banked
  4428  001D00  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4429  001D02  0100               	movlb	0	; () banked
  4430  001D04  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  4431  001D06  0100               	movlb	0	; () banked
  4432  001D08  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4433  001D0A  0100               	movlb	0	; () banked
  4434  001D0C  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4435  001D0E  A0D8               	btfss	status,0,c
  4436  001D10  D00A               	goto	l3050
  4437                           
  4438                           ; BSR set to: 0
  4439  001D12  0100               	movlb	0	; () banked
  4440  001D14  5192               	movf	___lwdiv@divisor& (0+255),w,b
  4441  001D16  0100               	movlb	0	; () banked
  4442  001D18  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  4443  001D1A  0100               	movlb	0	; () banked
  4444  001D1C  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4445  001D1E  0100               	movlb	0	; () banked
  4446  001D20  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4447                           
  4448                           ; BSR set to: 0
  4449  001D22  0100               	movlb	0	; () banked
  4450  001D24  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  4451  001D26                     l3050:
  4452                           
  4453                           ; BSR set to: 0
  4454  001D26  0100               	movlb	0	; () banked
  4455  001D28  90D8               	bcf	status,0,c
  4456  001D2A  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4457  001D2C  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  4458                           
  4459                           ; BSR set to: 0
  4460  001D2E  0100               	movlb	0	; () banked
  4461  001D30  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  4462  001D32  D7E1               	goto	l3042
  4463  001D34                     l778:
  4464                           
  4465                           ; BSR set to: 0
  4466  001D34  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  4467  001D38  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4468                           
  4469                           ; BSR set to: 0
  4470  001D3C  0012               	return		;funcret
  4471  001D3E                     __end_of___lwdiv:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           intcon	equ	0xFF2
  4480                           intcon2	equ	0xFF1
  4481                           intcon3	equ	0xFF0
  4482                           postinc0	equ	0xFEE
  4483                           wreg	equ	0xFE8
  4484                           indf2	equ	0xFDF
  4485                           postinc2	equ	0xFDE
  4486                           postdec2	equ	0xFDD
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           
  4491 ;; *************** function _lcdInst *****************
  4492 ;; Defined at:
  4493 ;;		line 26 in file "lcd.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  data            1    wreg     unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  data            1   18[BANK0 ] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        1 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    8
  4514 ;; This function calls:
  4515 ;;		_lcdNibble
  4516 ;; This function is called by:
  4517 ;;		_initLCD
  4518 ;;		_standby
  4519 ;;		_date_time
  4520 ;;		_bottle_count
  4521 ;;		_bottle_time
  4522 ;;		_operation
  4523 ;;		_operationend
  4524 ;;		_emergencystop
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text20
  4529  0023B2                     __ptext20:
  4530                           	opt stack 0
  4531  0023B2                     _lcdInst:
  4532                           	opt stack 21
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;incstack = 0
  4536                           ;lcdInst@data stored from wreg
  4537  0023B2  0100               	movlb	0	; () banked
  4538  0023B4  6F92               	movwf	lcdInst@data& (0+255),b
  4539                           
  4540                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  4541  0023B6  948C               	bcf	3980,2,c	;volatile
  4542                           
  4543                           ;lcd.c: 28: lcdNibble(data);
  4544  0023B8  0100               	movlb	0	; () banked
  4545  0023BA  5192               	movf	lcdInst@data& (0+255),w,b
  4546  0023BC  EC40  F00F         	call	_lcdNibble
  4547  0023C0  0012               	return		;funcret
  4548  0023C2                     __end_of_lcdInst:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           intcon2	equ	0xFF1
  4558                           intcon3	equ	0xFF0
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _lcdNibble *****************
  4569 ;; Defined at:
  4570 ;;		line 36 in file "lcd.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  data            1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  data            1   17[BANK0 ] unsigned char 
  4575 ;;  temp            1   16[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;Total ram usage:        2 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    7
  4592 ;; This function calls:
  4593 ;;		Nothing
  4594 ;; This function is called by:
  4595 ;;		_lcdInst
  4596 ;;		_putch
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text21
  4601  001E80                     __ptext21:
  4602                           	opt stack 0
  4603  001E80                     _lcdNibble:
  4604                           	opt stack 20
  4605                           
  4606                           ;incstack = 0
  4607                           ;lcdNibble@data stored from wreg
  4608  001E80  0100               	movlb	0	; () banked
  4609  001E82  6F91               	movwf	lcdNibble@data& (0+255),b
  4610                           
  4611                           ;lcd.c: 38: char temp = data & 0xF0;
  4612  001E84  0100               	movlb	0	; () banked
  4613  001E86  5191               	movf	lcdNibble@data& (0+255),w,b
  4614  001E88  0BF0               	andlw	240
  4615  001E8A  0100               	movlb	0	; () banked
  4616  001E8C  6F90               	movwf	lcdNibble@temp& (0+255),b
  4617                           
  4618                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4619  001E8E  508C               	movf	3980,w,c	;volatile
  4620  001E90  0B0F               	andlw	15
  4621  001E92  6E8C               	movwf	3980,c	;volatile
  4622                           
  4623                           ;lcd.c: 40: LATD = temp | LATD;
  4624  001E94  0100               	movlb	0	; () banked
  4625  001E96  5190               	movf	lcdNibble@temp& (0+255),w,b
  4626  001E98  108C               	iorwf	3980,w,c	;volatile
  4627  001E9A  6E8C               	movwf	3980,c	;volatile
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4631  001E9C  968C               	bcf	3980,3,c	;volatile
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4635  001E9E  0E19               	movlw	25
  4636  001EA0                     u3757:
  4637  001EA0  2EE8               	decfsz	wreg,f,c
  4638  001EA2  D7FE               	bra	u3757
  4639                           
  4640                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4641  001EA4  868C               	bsf	3980,3,c	;volatile
  4642                           
  4643                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4644  001EA6  0E19               	movlw	25
  4645  001EA8                     u3767:
  4646  001EA8  2EE8               	decfsz	wreg,f,c
  4647  001EAA  D7FE               	bra	u3767
  4648                           
  4649                           ;lcd.c: 47: data = data << 4;
  4650  001EAC  0100               	movlb	0	; () banked
  4651  001EAE  3991               	swapf	lcdNibble@data& (0+255),w,b
  4652  001EB0  0BF0               	andlw	240
  4653  001EB2  0100               	movlb	0	; () banked
  4654  001EB4  6F91               	movwf	lcdNibble@data& (0+255),b
  4655                           
  4656                           ;lcd.c: 49: temp = data & 0xF0;
  4657  001EB6  0100               	movlb	0	; () banked
  4658  001EB8  5191               	movf	lcdNibble@data& (0+255),w,b
  4659  001EBA  0BF0               	andlw	240
  4660  001EBC  0100               	movlb	0	; () banked
  4661  001EBE  6F90               	movwf	lcdNibble@temp& (0+255),b
  4662                           
  4663                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4664  001EC0  508C               	movf	3980,w,c	;volatile
  4665  001EC2  0B0F               	andlw	15
  4666  001EC4  6E8C               	movwf	3980,c	;volatile
  4667                           
  4668                           ;lcd.c: 51: LATD = temp | LATD;
  4669  001EC6  0100               	movlb	0	; () banked
  4670  001EC8  5190               	movf	lcdNibble@temp& (0+255),w,b
  4671  001ECA  108C               	iorwf	3980,w,c	;volatile
  4672  001ECC  6E8C               	movwf	3980,c	;volatile
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4676  001ECE  968C               	bcf	3980,3,c	;volatile
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4680  001ED0  0E19               	movlw	25
  4681  001ED2                     u3777:
  4682  001ED2  2EE8               	decfsz	wreg,f,c
  4683  001ED4  D7FE               	bra	u3777
  4684                           
  4685                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4686  001ED6  868C               	bsf	3980,3,c	;volatile
  4687                           
  4688                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  4689  001ED8  0E19               	movlw	25
  4690  001EDA                     u3787:
  4691  001EDA  2EE8               	decfsz	wreg,f,c
  4692  001EDC  D7FE               	bra	u3787
  4693  001EDE  0012               	return		;funcret
  4694  001EE0                     __end_of_lcdNibble:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           intcon2	equ	0xFF1
  4704                           intcon3	equ	0xFF0
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function ___awmod *****************
  4715 ;; Defined at:
  4716 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  dividend        2   16[BANK0 ] int 
  4719 ;;  divisor         2   18[BANK0 ] int 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  sign            1   21[BANK0 ] unsigned char 
  4722 ;;  counter         1   20[BANK0 ] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  2   16[BANK0 ] int 
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, status,0
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;Total ram usage:        6 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    7
  4739 ;; This function calls:
  4740 ;;		Nothing
  4741 ;; This function is called by:
  4742 ;;		_bottle_count
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text22
  4747  0019EE                     __ptext22:
  4748                           	opt stack 0
  4749  0019EE                     ___awmod:
  4750                           	opt stack 22
  4751                           
  4752                           ;incstack = 0
  4753  0019EE  0E00               	movlw	0
  4754  0019F0  0100               	movlb	0	; () banked
  4755  0019F2  6F95               	movwf	___awmod@sign& (0+255),b
  4756                           
  4757                           ; BSR set to: 0
  4758  0019F4  0100               	movlb	0	; () banked
  4759  0019F6  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4760  0019F8  D008               	goto	l3410
  4761                           
  4762                           ; BSR set to: 0
  4763  0019FA  0100               	movlb	0	; () banked
  4764  0019FC  6D90               	negf	___awmod@dividend& (0+255),b
  4765  0019FE  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4766  001A00  B0D8               	btfsc	status,0,c
  4767  001A02  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4768                           
  4769                           ; BSR set to: 0
  4770  001A04  0E01               	movlw	1
  4771  001A06  0100               	movlb	0	; () banked
  4772  001A08  6F95               	movwf	___awmod@sign& (0+255),b
  4773  001A0A                     l3410:
  4774                           
  4775                           ; BSR set to: 0
  4776  001A0A  0100               	movlb	0	; () banked
  4777  001A0C  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4778  001A0E  D005               	goto	l3414
  4779                           
  4780                           ; BSR set to: 0
  4781  001A10  0100               	movlb	0	; () banked
  4782  001A12  6D92               	negf	___awmod@divisor& (0+255),b
  4783  001A14  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  4784  001A16  B0D8               	btfsc	status,0,c
  4785  001A18  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  4786  001A1A                     l3414:
  4787                           
  4788                           ; BSR set to: 0
  4789  001A1A  0100               	movlb	0	; () banked
  4790  001A1C  5192               	movf	___awmod@divisor& (0+255),w,b
  4791  001A1E  0100               	movlb	0	; () banked
  4792  001A20  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4793  001A22  B4D8               	btfsc	status,2,c
  4794  001A24  D026               	goto	l3430
  4795                           
  4796                           ; BSR set to: 0
  4797  001A26  0E01               	movlw	1
  4798  001A28  0100               	movlb	0	; () banked
  4799  001A2A  6F94               	movwf	___awmod@counter& (0+255),b
  4800  001A2C  D006               	goto	l3420
  4801  001A2E                     l3418:
  4802                           
  4803                           ; BSR set to: 0
  4804  001A2E  0100               	movlb	0	; () banked
  4805  001A30  90D8               	bcf	status,0,c
  4806  001A32  3792               	rlcf	___awmod@divisor& (0+255),f,b
  4807  001A34  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4808  001A36  0100               	movlb	0	; () banked
  4809  001A38  2B94               	incf	___awmod@counter& (0+255),f,b
  4810  001A3A                     l3420:
  4811                           
  4812                           ; BSR set to: 0
  4813  001A3A  0100               	movlb	0	; () banked
  4814  001A3C  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4815  001A3E  D7F7               	goto	l3418
  4816  001A40                     l3422:
  4817                           
  4818                           ; BSR set to: 0
  4819  001A40  0100               	movlb	0	; () banked
  4820  001A42  5192               	movf	___awmod@divisor& (0+255),w,b
  4821  001A44  0100               	movlb	0	; () banked
  4822  001A46  5D90               	subwf	___awmod@dividend& (0+255),w,b
  4823  001A48  0100               	movlb	0	; () banked
  4824  001A4A  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4825  001A4C  0100               	movlb	0	; () banked
  4826  001A4E  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4827  001A50  A0D8               	btfss	status,0,c
  4828  001A52  D008               	goto	l3426
  4829                           
  4830                           ; BSR set to: 0
  4831  001A54  0100               	movlb	0	; () banked
  4832  001A56  5192               	movf	___awmod@divisor& (0+255),w,b
  4833  001A58  0100               	movlb	0	; () banked
  4834  001A5A  5F90               	subwf	___awmod@dividend& (0+255),f,b
  4835  001A5C  0100               	movlb	0	; () banked
  4836  001A5E  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  4837  001A60  0100               	movlb	0	; () banked
  4838  001A62  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4839  001A64                     l3426:
  4840                           
  4841                           ; BSR set to: 0
  4842  001A64  0100               	movlb	0	; () banked
  4843  001A66  90D8               	bcf	status,0,c
  4844  001A68  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4845  001A6A  3392               	rrcf	___awmod@divisor& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848  001A6C  0100               	movlb	0	; () banked
  4849  001A6E  2F94               	decfsz	___awmod@counter& (0+255),f,b
  4850  001A70  D7E7               	goto	l3422
  4851  001A72                     l3430:
  4852                           
  4853                           ; BSR set to: 0
  4854  001A72  0100               	movlb	0	; () banked
  4855  001A74  5195               	movf	___awmod@sign& (0+255),w,b
  4856  001A76  0100               	movlb	0	; () banked
  4857  001A78  B4D8               	btfsc	status,2,c
  4858  001A7A  D005               	goto	l3434
  4859                           
  4860                           ; BSR set to: 0
  4861  001A7C  0100               	movlb	0	; () banked
  4862  001A7E  6D90               	negf	___awmod@dividend& (0+255),b
  4863  001A80  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  4864  001A82  B0D8               	btfsc	status,0,c
  4865  001A84  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  4866  001A86                     l3434:
  4867                           
  4868                           ; BSR set to: 0
  4869  001A86  C090  F090         	movff	___awmod@dividend,?___awmod
  4870  001A8A  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  4871  001A8E  0012               	return	
  4872  001A90                     __end_of___awmod:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           intcon2	equ	0xFF1
  4882                           intcon3	equ	0xFF0
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function _I2C_Master_Init *****************
  4893 ;; Defined at:
  4894 ;;		line 13 in file "I2C.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  c               4   29[BANK0 ] const unsigned long 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4908 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;Total ram usage:        8 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    8
  4915 ;; This function calls:
  4916 ;;		___lldiv
  4917 ;; This function is called by:
  4918 ;;		_main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text23
  4923  001EE0                     __ptext23:
  4924                           	opt stack 0
  4925  001EE0                     _I2C_Master_Init:
  4926                           	opt stack 22
  4927                           
  4928                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;incstack = 0
  4932  001EE0  0E00               	movlw	0
  4933  001EE2  6EC7               	movwf	4039,c	;volatile
  4934                           
  4935                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  4936  001EE4  0E28               	movlw	40
  4937  001EE6  6EC6               	movwf	4038,c	;volatile
  4938                           
  4939                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  4940  001EE8  0E00               	movlw	0
  4941  001EEA  6EC5               	movwf	4037,c	;volatile
  4942                           
  4943                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  4944  001EEC  0E80               	movlw	128
  4945  001EEE  0100               	movlb	0	; () banked
  4946  001EF0  6F90               	movwf	___lldiv@dividend& (0+255),b
  4947  001EF2  0E96               	movlw	150
  4948  001EF4  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  4949  001EF6  0E98               	movlw	152
  4950  001EF8  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  4951  001EFA  0E00               	movlw	0
  4952  001EFC  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  4953  001EFE  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4954  001F02  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4955  001F06  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4956  001F0A  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4957  001F0E  0E02               	movlw	2
  4958  001F10                     u3345:
  4959  001F10  90D8               	bcf	status,0,c
  4960  001F12  0100               	movlb	0	; () banked
  4961  001F14  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4962  001F16  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4963  001F18  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4964  001F1A  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4965  001F1C  2EE8               	decfsz	wreg,f,c
  4966  001F1E  D7F8               	goto	u3345
  4967  001F20  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  4968  001F24  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4969  001F28  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4970  001F2C  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4971  001F30  EC42  F00C         	call	___lldiv	;wreg free
  4972  001F34  0100               	movlb	0	; () banked
  4973  001F36  0590               	decf	?___lldiv& (0+255),w,b
  4974  001F38  6EC8               	movwf	4040,c	;volatile
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;I2C.c: 20: TRISC3 = 1;
  4978  001F3A  8694               	bsf	3988,3,c	;volatile
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;I2C.c: 21: TRISC4 = 1;
  4982  001F3C  8894               	bsf	3988,4,c	;volatile
  4983                           
  4984                           ; BSR set to: 0
  4985  001F3E  0012               	return		;funcret
  4986  001F40                     __end_of_I2C_Master_Init:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           intcon3	equ	0xFF0
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___lldiv *****************
  5007 ;; Defined at:
  5008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  dividend        4   16[BANK0 ] unsigned long 
  5011 ;;  divisor         4   20[BANK0 ] unsigned long 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  quotient        4   24[BANK0 ] unsigned long 
  5014 ;;  counter         1   28[BANK0 ] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  4   16[BANK0 ] unsigned long 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:       13 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    7
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_I2C_Master_Init
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text24
  5039  001884                     __ptext24:
  5040                           	opt stack 0
  5041  001884                     ___lldiv:
  5042                           	opt stack 22
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;incstack = 0
  5046  001884  0E00               	movlw	0
  5047  001886  0100               	movlb	0	; () banked
  5048  001888  6F98               	movwf	___lldiv@quotient& (0+255),b
  5049  00188A  0E00               	movlw	0
  5050  00188C  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  5051  00188E  0E00               	movlw	0
  5052  001890  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5053  001892  0E00               	movlw	0
  5054  001894  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5055                           
  5056                           ; BSR set to: 0
  5057  001896  0100               	movlb	0	; () banked
  5058  001898  5194               	movf	___lldiv@divisor& (0+255),w,b
  5059  00189A  0100               	movlb	0	; () banked
  5060  00189C  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5061  00189E  0100               	movlb	0	; () banked
  5062  0018A0  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5063  0018A2  0100               	movlb	0	; () banked
  5064  0018A4  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5065  0018A6  B4D8               	btfsc	status,2,c
  5066  0018A8  D042               	goto	l725
  5067                           
  5068                           ; BSR set to: 0
  5069  0018AA  0E01               	movlw	1
  5070  0018AC  0100               	movlb	0	; () banked
  5071  0018AE  6F9C               	movwf	___lldiv@counter& (0+255),b
  5072  0018B0  D008               	goto	l3446
  5073  0018B2                     l3444:
  5074                           
  5075                           ; BSR set to: 0
  5076  0018B2  0100               	movlb	0	; () banked
  5077  0018B4  90D8               	bcf	status,0,c
  5078  0018B6  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  5079  0018B8  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5080  0018BA  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5081  0018BC  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5082  0018BE  0100               	movlb	0	; () banked
  5083  0018C0  2B9C               	incf	___lldiv@counter& (0+255),f,b
  5084  0018C2                     l3446:
  5085                           
  5086                           ; BSR set to: 0
  5087  0018C2  0100               	movlb	0	; () banked
  5088  0018C4  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5089  0018C6  D7F5               	goto	l3444
  5090  0018C8                     l3448:
  5091                           
  5092                           ; BSR set to: 0
  5093  0018C8  0100               	movlb	0	; () banked
  5094  0018CA  90D8               	bcf	status,0,c
  5095  0018CC  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  5096  0018CE  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5097  0018D0  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5098  0018D2  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5099                           
  5100                           ; BSR set to: 0
  5101  0018D4  0100               	movlb	0	; () banked
  5102  0018D6  5194               	movf	___lldiv@divisor& (0+255),w,b
  5103  0018D8  0100               	movlb	0	; () banked
  5104  0018DA  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  5105  0018DC  0100               	movlb	0	; () banked
  5106  0018DE  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5107  0018E0  0100               	movlb	0	; () banked
  5108  0018E2  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5109  0018E4  0100               	movlb	0	; () banked
  5110  0018E6  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5111  0018E8  0100               	movlb	0	; () banked
  5112  0018EA  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5113  0018EC  0100               	movlb	0	; () banked
  5114  0018EE  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5115  0018F0  0100               	movlb	0	; () banked
  5116  0018F2  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5117  0018F4  A0D8               	btfss	status,0,c
  5118  0018F6  D012               	goto	l3456
  5119                           
  5120                           ; BSR set to: 0
  5121  0018F8  0100               	movlb	0	; () banked
  5122  0018FA  5194               	movf	___lldiv@divisor& (0+255),w,b
  5123  0018FC  0100               	movlb	0	; () banked
  5124  0018FE  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  5125  001900  0100               	movlb	0	; () banked
  5126  001902  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5127  001904  0100               	movlb	0	; () banked
  5128  001906  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5129  001908  0100               	movlb	0	; () banked
  5130  00190A  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5131  00190C  0100               	movlb	0	; () banked
  5132  00190E  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5133  001910  0100               	movlb	0	; () banked
  5134  001912  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5135  001914  0100               	movlb	0	; () banked
  5136  001916  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5137                           
  5138                           ; BSR set to: 0
  5139  001918  0100               	movlb	0	; () banked
  5140  00191A  8198               	bsf	___lldiv@quotient& (0+255),0,b
  5141  00191C                     l3456:
  5142                           
  5143                           ; BSR set to: 0
  5144  00191C  0100               	movlb	0	; () banked
  5145  00191E  90D8               	bcf	status,0,c
  5146  001920  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5147  001922  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5148  001924  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5149  001926  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  5150                           
  5151                           ; BSR set to: 0
  5152  001928  0100               	movlb	0	; () banked
  5153  00192A  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  5154  00192C  D7CD               	goto	l3448
  5155  00192E                     l725:
  5156                           
  5157                           ; BSR set to: 0
  5158  00192E  C098  F090         	movff	___lldiv@quotient,?___lldiv
  5159  001932  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  5160  001936  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  5161  00193A  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  5162                           
  5163                           ; BSR set to: 0
  5164  00193E  0012               	return		;funcret
  5165  001940                     __end_of___lldiv:
  5166                           	opt stack 0
  5167                           tblptru	equ	0xFF8
  5168                           tblptrh	equ	0xFF7
  5169                           tblptrl	equ	0xFF6
  5170                           tablat	equ	0xFF5
  5171                           prodh	equ	0xFF4
  5172                           prodl	equ	0xFF3
  5173                           intcon	equ	0xFF2
  5174                           intcon2	equ	0xFF1
  5175                           intcon3	equ	0xFF0
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           postdec2	equ	0xFDD
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _isr *****************
  5186 ;; Defined at:
  5187 ;;		line 127 in file "main.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;  i               1  116[COMRAM] unsigned char 
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5203 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5204 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5205 ;;Total ram usage:       19 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    6
  5208 ;; This function calls:
  5209 ;;		_dec_to_hex
  5210 ;;		_read_time
  5211 ;;		_servo_rotate
  5212 ;;		i2___wmul
  5213 ;;		i2_lcdInst
  5214 ;;		i2_printf
  5215 ;; This function is called by:
  5216 ;;		Interrupt level 2
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	intcode
  5221  000008                     __pintcode:
  5222                           	opt stack 0
  5223  000008                     _isr:
  5224                           	opt stack 20
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;incstack = 0
  5228  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5229  00000A  ED69  F003         	call	int_func,f	;refresh shadow registers
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           intcon	equ	0xFF2
  5237                           intcon2	equ	0xFF1
  5238                           intcon3	equ	0xFF0
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248                           	psect	intcode_body
  5249  0006D2                     __pintcode_body:
  5250                           	opt stack 20
  5251  0006D2                     int_func:
  5252                           	opt stack 20
  5253  0006D2  0006               	pop		; remove dummy address from shadow register refresh
  5254  0006D4  CFFA F082          	movff	pclath,??_isr+2
  5255  0006D8  CFFB F083          	movff	pclatu,??_isr+3
  5256  0006DC  CFE9 F084          	movff	fsr0l,??_isr+4
  5257  0006E0  CFEA F085          	movff	fsr0h,??_isr+5
  5258  0006E4  CFE1 F086          	movff	fsr1l,??_isr+6
  5259  0006E8  CFE2 F087          	movff	fsr1h,??_isr+7
  5260  0006EC  CFD9 F088          	movff	fsr2l,??_isr+8
  5261  0006F0  CFDA F089          	movff	fsr2h,??_isr+9
  5262  0006F4  CFF3 F08A          	movff	prodl,??_isr+10
  5263  0006F8  CFF4 F08B          	movff	prodh,??_isr+11
  5264  0006FC  CFF6 F08C          	movff	tblptrl,??_isr+12
  5265  000700  CFF7 F08D          	movff	tblptrh,??_isr+13
  5266  000704  CFF8 F08E          	movff	tblptru,??_isr+14
  5267  000708  CFF5 F08F          	movff	tablat,??_isr+15
  5268                           
  5269                           ;main.c: 128: if (INT1IF) {
  5270  00070C  B0F0               	btfsc	intcon3,0,c	;volatile
  5271  00070E  D095               	goto	i2l3982
  5272  000710  D0AF               	goto	i2l216
  5273  000712                     i2l3926:
  5274                           
  5275                           ;main.c: 131: curr_state = STANDBY;
  5276  000712  0E00               	movlw	0
  5277  000714  0100               	movlb	0	; () banked
  5278  000716  6FC3               	movwf	_curr_state& (0+255),b
  5279                           
  5280                           ;main.c: 132: bottle_count_disp = 0;
  5281  000718  0E00               	movlw	0
  5282  00071A  0100               	movlb	0	; () banked
  5283  00071C  6FC5               	movwf	(_bottle_count_disp+1)& (0+255),b
  5284  00071E  0E00               	movlw	0
  5285  000720  6FC4               	movwf	_bottle_count_disp& (0+255),b
  5286                           
  5287                           ;main.c: 133: break;
  5288  000722  D0A4               	goto	i2l219
  5289  000724                     i2l220:
  5290                           
  5291                           ;main.c: 135: TMR0IE = 1;
  5292  000724  8AF2               	bsf	intcon,5,c	;volatile
  5293                           
  5294                           ;main.c: 136: TMR0ON = 1;
  5295  000726  8ED5               	bsf	4053,7,c	;volatile
  5296                           
  5297                           ;main.c: 137: TMR0 = 0;
  5298  000728  0E00               	movlw	0
  5299  00072A  6ED7               	movwf	4055,c	;volatile
  5300  00072C  0E00               	movlw	0
  5301  00072E  6ED6               	movwf	4054,c	;volatile
  5302                           
  5303                           ;main.c: 138: read_time();
  5304  000730  ECDB  F00E         	call	_read_time	;wreg free
  5305                           
  5306                           ;main.c: 139: start_time[1] = time[1];
  5307  000734  C0B7  F07D         	movff	_time+1,_start_time+1
  5308                           
  5309                           ;main.c: 140: start_time[0] = time[0];
  5310  000738  C0B6  F07C         	movff	_time,_start_time
  5311                           
  5312                           ;main.c: 141: lcdInst(0b00000001);
  5313  00073C  0E01               	movlw	1
  5314  00073E  ECE7  F011         	call	i2_lcdInst
  5315                           
  5316                           ;main.c: 142: curr_state = OPERATION;
  5317  000742  0E02               	movlw	2
  5318  000744  D069               	goto	L3
  5319  000746                     i2l3940:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;main.c: 143: bottle_count_disp = -1;
  5323  000746  0100               	movlb	0	; () banked
  5324  000748  69C4               	setf	_bottle_count_disp& (0+255),b
  5325  00074A  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5326                           
  5327                           ;main.c: 144: break;
  5328  00074C  D08F               	goto	i2l219
  5329  00074E                     i2l3942:
  5330                           
  5331                           ;main.c: 146: curr_state = BOTTLECOUNT;
  5332  00074E  0E05               	movlw	5
  5333  000750  0100               	movlb	0	; () banked
  5334  000752  6FC3               	movwf	_curr_state& (0+255),b
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;main.c: 147: bottle_count_disp += 1;
  5338  000754  0100               	movlb	0	; () banked
  5339  000756  4BC4               	infsnz	_bottle_count_disp& (0+255),f,b
  5340  000758  2BC5               	incf	(_bottle_count_disp+1)& (0+255),f,b
  5341  00075A                     i2l3946:
  5342  00075A  0E1F               	movlw	31
  5343  00075C  1881               	xorwf	3969,w,c	;volatile
  5344  00075E  A4D8               	btfss	status,2,c
  5345  000760  D085               	goto	i2l219
  5346  000762  D7FB               	goto	i2l3946
  5347  000764                     i2l3948:
  5348                           
  5349                           ;main.c: 151: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5350  000764  C07D  F063         	movff	_start_time+1,dec_to_hex@num
  5351  000768  6A64               	clrf	dec_to_hex@num+1,c
  5352  00076A  ECBB  F008         	call	_dec_to_hex	;wreg free
  5353  00076E  C063  F073         	movff	?_dec_to_hex,_isr$1211
  5354  000772  C064  F074         	movff	?_dec_to_hex+1,_isr$1211+1
  5355                           
  5356                           ;main.c: 151: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  5357  000776  C073  F001         	movff	_isr$1211,i2___wmul@multiplier
  5358  00077A  C074  F002         	movff	_isr$1211+1,i2___wmul@multiplier+1
  5359  00077E  0E00               	movlw	0
  5360  000780  6E04               	movwf	i2___wmul@multiplicand+1,c
  5361  000782  0E3C               	movlw	60
  5362  000784  6E03               	movwf	i2___wmul@multiplicand,c
  5363  000786  EC71  F011         	call	i2___wmul	;wreg free
  5364  00078A  C001  F080         	movff	?i2___wmul,??_isr
  5365  00078E  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5366  000792  C07C  F063         	movff	_start_time,dec_to_hex@num
  5367  000796  6A64               	clrf	dec_to_hex@num+1,c
  5368  000798  ECBB  F008         	call	_dec_to_hex	;wreg free
  5369  00079C  5063               	movf	?_dec_to_hex,w,c
  5370  00079E  0100               	movlb	0	; () banked
  5371  0007A0  2580               	addwf	??_isr& (0+255),w,b
  5372  0007A2  0100               	movlb	0	; () banked
  5373  0007A4  6FC1               	movwf	_stime& (0+255),b
  5374  0007A6  5064               	movf	?_dec_to_hex+1,w,c
  5375  0007A8  0100               	movlb	0	; () banked
  5376  0007AA  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5377  0007AC  0100               	movlb	0	; () banked
  5378  0007AE  6FC2               	movwf	(_stime+1)& (0+255),b
  5379                           
  5380                           ;main.c: 152: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5381  0007B0  C077  F063         	movff	_end_time+1,dec_to_hex@num
  5382  0007B4  6A64               	clrf	dec_to_hex@num+1,c
  5383  0007B6  ECBB  F008         	call	_dec_to_hex	;wreg free
  5384  0007BA  C063  F073         	movff	?_dec_to_hex,_isr$1211
  5385  0007BE  C064  F074         	movff	?_dec_to_hex+1,_isr$1211+1
  5386                           
  5387                           ;main.c: 152: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  5388  0007C2  C073  F001         	movff	_isr$1211,i2___wmul@multiplier
  5389  0007C6  C074  F002         	movff	_isr$1211+1,i2___wmul@multiplier+1
  5390  0007CA  0E00               	movlw	0
  5391  0007CC  6E04               	movwf	i2___wmul@multiplicand+1,c
  5392  0007CE  0E3C               	movlw	60
  5393  0007D0  6E03               	movwf	i2___wmul@multiplicand,c
  5394  0007D2  EC71  F011         	call	i2___wmul	;wreg free
  5395  0007D6  C001  F080         	movff	?i2___wmul,??_isr
  5396  0007DA  C002  F081         	movff	?i2___wmul+1,??_isr+1
  5397  0007DE  C076  F063         	movff	_end_time,dec_to_hex@num
  5398  0007E2  6A64               	clrf	dec_to_hex@num+1,c
  5399  0007E4  ECBB  F008         	call	_dec_to_hex	;wreg free
  5400  0007E8  5063               	movf	?_dec_to_hex,w,c
  5401  0007EA  0100               	movlb	0	; () banked
  5402  0007EC  2580               	addwf	??_isr& (0+255),w,b
  5403  0007EE  0100               	movlb	0	; () banked
  5404  0007F0  6FBD               	movwf	_etime& (0+255),b
  5405  0007F2  5064               	movf	?_dec_to_hex+1,w,c
  5406  0007F4  0100               	movlb	0	; () banked
  5407  0007F6  2181               	addwfc	(??_isr+1)& (0+255),w,b
  5408  0007F8  0100               	movlb	0	; () banked
  5409  0007FA  6FBE               	movwf	(_etime+1)& (0+255),b
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;main.c: 153: curr_state = BOTTLETIME;
  5413  0007FC  0E06               	movlw	6
  5414  0007FE  D00C               	goto	L3
  5415  000800                     i2l3954:
  5416                           
  5417                           ;main.c: 157: curr_state = DATETIME;
  5418  000800  0E04               	movlw	4
  5419  000802  D00A               	goto	L3
  5420  000804                     i2l3958:
  5421                           
  5422                           ;main.c: 161: read_time();
  5423  000804  ECDB  F00E         	call	_read_time	;wreg free
  5424                           
  5425                           ;main.c: 162: end_time[1] = time[1];
  5426  000808  C0B7  F077         	movff	_time+1,_end_time+1
  5427                           
  5428                           ;main.c: 163: end_time[0] = time[0];
  5429  00080C  C0B6  F076         	movff	_time,_end_time
  5430                           
  5431                           ;main.c: 164: lcdInst(0b00000001);
  5432  000810  0E01               	movlw	1
  5433  000812  ECE7  F011         	call	i2_lcdInst
  5434                           
  5435                           ;main.c: 165: curr_state = OPERATIONEND;
  5436  000816  0E03               	movlw	3
  5437  000818                     L3:
  5438  000818  0100               	movlb	0	; () banked
  5439  00081A  6FC3               	movwf	_curr_state& (0+255),b
  5440  00081C  D794               	goto	i2l3940
  5441  00081E                     i2l3970:
  5442                           
  5443                           ;main.c: 169: lcdInst(0b00000001);
  5444  00081E  0E01               	movlw	1
  5445  000820  ECE7  F011         	call	i2_lcdInst
  5446                           
  5447                           ;main.c: 170: curr_state = EMERGENCYSTOP;
  5448  000824  0E01               	movlw	1
  5449  000826  0100               	movlb	0	; () banked
  5450  000828  6FC3               	movwf	_curr_state& (0+255),b
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;main.c: 171: bottle_count_disp = -1;
  5454  00082A  0100               	movlb	0	; () banked
  5455  00082C  69C4               	setf	_bottle_count_disp& (0+255),b
  5456  00082E  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;main.c: 172: TMR0ON = 0;
  5460  000830  9ED5               	bcf	4053,7,c	;volatile
  5461                           
  5462                           ;main.c: 173: break;
  5463  000832  D01C               	goto	i2l219
  5464  000834                     i2l3978:
  5465                           
  5466                           ;main.c: 175: servo_rotate();
  5467  000834  ECA6  F010         	call	_servo_rotate	;wreg free
  5468                           
  5469                           ;main.c: 177: }
  5470                           
  5471                           ;main.c: 176: break;
  5472  000838  D019               	goto	i2l219
  5473  00083A                     i2l3982:
  5474  00083A  5081               	movf	3969,w,c	;volatile
  5475                           
  5476                           ; Switch size 1, requested type "space"
  5477                           ; Number of cases is 8, Range of values is 15 to 239
  5478                           ; switch strategies available:
  5479                           ; Name         Instructions Cycles
  5480                           ; simple_byte           25    13 (average)
  5481                           ;	Chosen strategy is simple_byte
  5482  00083C  0A0F               	xorlw	15	; case 15
  5483  00083E  B4D8               	btfsc	status,2,c
  5484  000840  D771               	goto	i2l220
  5485  000842  0A10               	xorlw	16	; case 31
  5486  000844  B4D8               	btfsc	status,2,c
  5487  000846  D783               	goto	i2l3942
  5488  000848  0A30               	xorlw	48	; case 47
  5489  00084A  B4D8               	btfsc	status,2,c
  5490  00084C  D78B               	goto	i2l3948
  5491  00084E  0A10               	xorlw	16	; case 63
  5492  000850  B4D8               	btfsc	status,2,c
  5493  000852  D7D6               	goto	i2l3954
  5494  000854  0A70               	xorlw	112	; case 79
  5495  000856  B4D8               	btfsc	status,2,c
  5496  000858  D7D5               	goto	i2l3958
  5497  00085A  0A30               	xorlw	48	; case 127
  5498  00085C  B4D8               	btfsc	status,2,c
  5499  00085E  D7EA               	goto	i2l3978
  5500  000860  0AB0               	xorlw	176	; case 207
  5501  000862  B4D8               	btfsc	status,2,c
  5502  000864  D7DC               	goto	i2l3970
  5503  000866  0A20               	xorlw	32	; case 239
  5504  000868  B4D8               	btfsc	status,2,c
  5505  00086A  D753               	goto	i2l3926
  5506  00086C                     i2l219:
  5507                           
  5508                           ;main.c: 178: INT1IF = 0;
  5509  00086C  90F0               	bcf	intcon3,0,c	;volatile
  5510                           
  5511                           ;main.c: 179: }
  5512  00086E  D02E               	goto	i2l238
  5513  000870                     i2l216:
  5514                           
  5515                           ;main.c: 180: else if (TMR0IF) {
  5516  000870  A4F2               	btfss	intcon,2,c	;volatile
  5517  000872  D012               	goto	i2l4000
  5518                           
  5519                           ;main.c: 181: TMR0ON = 0;
  5520  000874  9ED5               	bcf	4053,7,c	;volatile
  5521                           
  5522                           ;main.c: 182: read_time();
  5523  000876  ECDB  F00E         	call	_read_time	;wreg free
  5524                           
  5525                           ;main.c: 183: end_time[1] = time[1];
  5526  00087A  C0B7  F077         	movff	_time+1,_end_time+1
  5527                           
  5528                           ;main.c: 184: end_time[0] = time[0];
  5529  00087E  C0B6  F076         	movff	_time,_end_time
  5530                           
  5531                           ;main.c: 185: lcdInst(0b00000001);
  5532  000882  0E01               	movlw	1
  5533  000884  ECE7  F011         	call	i2_lcdInst
  5534                           
  5535                           ;main.c: 186: curr_state = OPERATIONEND;
  5536  000888  0E03               	movlw	3
  5537  00088A  0100               	movlb	0	; () banked
  5538  00088C  6FC3               	movwf	_curr_state& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;main.c: 187: bottle_count_disp = -1;
  5542  00088E  0100               	movlb	0	; () banked
  5543  000890  69C4               	setf	_bottle_count_disp& (0+255),b
  5544  000892  69C5               	setf	(_bottle_count_disp+1)& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;main.c: 188: TMR0IF = 0;
  5548  000894  94F2               	bcf	intcon,2,c	;volatile
  5549                           
  5550                           ;main.c: 189: }
  5551  000896  D01A               	goto	i2l238
  5552  000898                     i2l4000:
  5553                           
  5554                           ;main.c: 192: lcdInst(0b10000000);
  5555  000898  0E80               	movlw	128
  5556  00089A  ECE7  F011         	call	i2_lcdInst
  5557                           
  5558                           ;main.c: 193: printf("bad interrupt");
  5559  00089E  0EDC               	movlw	low STR_1
  5560  0008A0  6E0D               	movwf	i2printf@f,c
  5561  0008A2  0EFF               	movlw	high STR_1
  5562  0008A4  6E0E               	movwf	i2printf@f+1,c
  5563  0008A6  ECE3  F001         	call	i2_printf	;wreg free
  5564                           
  5565                           ;main.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  5566  0008AA  0E00               	movlw	0
  5567  0008AC  6E75               	movwf	isr@i,c
  5568  0008AE                     i2l4006:
  5569  0008AE  0E63               	movlw	99
  5570  0008B0  6475               	cpfsgt	isr@i,c
  5571  0008B2  D001               	goto	i2l4010
  5572  0008B4  D7F1               	goto	i2l4000
  5573  0008B6                     i2l4010:
  5574  0008B6  0E21               	movlw	33
  5575  0008B8  0100               	movlb	0	; () banked
  5576  0008BA  6F80               	movwf	??_isr& (0+255),b
  5577  0008BC  0E76               	movlw	118
  5578  0008BE                     i2u379_47:
  5579  0008BE  2EE8               	decfsz	wreg,f,c
  5580  0008C0  D7FE               	bra	i2u379_47
  5581  0008C2  2F80               	decfsz	??_isr& (0+255),f,b
  5582  0008C4  D7FC               	bra	i2u379_47
  5583  0008C6  F000               	nop	
  5584  0008C8  2A75               	incf	isr@i,f,c
  5585  0008CA  D7F1               	goto	i2l4006
  5586  0008CC                     i2l238:
  5587  0008CC  C08F  FFF5         	movff	??_isr+15,tablat
  5588  0008D0  C08E  FFF8         	movff	??_isr+14,tblptru
  5589  0008D4  C08D  FFF7         	movff	??_isr+13,tblptrh
  5590  0008D8  C08C  FFF6         	movff	??_isr+12,tblptrl
  5591  0008DC  C08B  FFF4         	movff	??_isr+11,prodh
  5592  0008E0  C08A  FFF3         	movff	??_isr+10,prodl
  5593  0008E4  C089  FFDA         	movff	??_isr+9,fsr2h
  5594  0008E8  C088  FFD9         	movff	??_isr+8,fsr2l
  5595  0008EC  C087  FFE2         	movff	??_isr+7,fsr1h
  5596  0008F0  C086  FFE1         	movff	??_isr+6,fsr1l
  5597  0008F4  C085  FFEA         	movff	??_isr+5,fsr0h
  5598  0008F8  C084  FFE9         	movff	??_isr+4,fsr0l
  5599  0008FC  C083  FFFB         	movff	??_isr+3,pclatu
  5600  000900  C082  FFFA         	movff	??_isr+2,pclath
  5601  000904  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5602  000906  0011               	retfie		f
  5603  000908                     __end_of_isr:
  5604                           	opt stack 0
  5605                           pclatu	equ	0xFFB
  5606                           pclath	equ	0xFFA
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           intcon	equ	0xFF2
  5614                           intcon2	equ	0xFF1
  5615                           intcon3	equ	0xFF0
  5616                           postinc0	equ	0xFEE
  5617                           fsr0h	equ	0xFEA
  5618                           fsr0l	equ	0xFE9
  5619                           wreg	equ	0xFE8
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function i2_printf *****************
  5630 ;; Defined at:
  5631 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5634 ;;		 -> STR_23(15), STR_22(16), STR_21(25), STR_20(24), 
  5635 ;;		 -> STR_19(23), STR_18(18), STR_17(23), STR_16(10), 
  5636 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  5637 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  5638 ;;		 -> STR_7(17), STR_6(17), STR_5(23), STR_4(23), 
  5639 ;;		 -> STR_3(10), STR_2(17), STR_1(14), 
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  printf          4    0        struct .
  5642 ;;  printf          3    0        PTR const unsigned char 
  5643 ;;  printf          2   25[COMRAM] int 
  5644 ;;  printf          2   22[COMRAM] unsigned int 
  5645 ;;  printf          2   19[COMRAM] PTR void [1]
  5646 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5647 ;;  printf          2    0        unsigned int 
  5648 ;;  printf          1   27[COMRAM] char 
  5649 ;;  printf          1   24[COMRAM] unsigned char 
  5650 ;;  printf          1   21[COMRAM] char 
  5651 ;;  printf          1   18[COMRAM] unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  2   12[COMRAM] int 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5661 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5663 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5664 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5665 ;;Total ram usage:       16 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    2
  5668 ;; This function calls:
  5669 ;;		i2___lwdiv
  5670 ;;		i2___lwmod
  5671 ;;		i2___wmul
  5672 ;;		i2_isdigit
  5673 ;;		i2_putch
  5674 ;; This function is called by:
  5675 ;;		_isr
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text26
  5680  0003C6                     __ptext26:
  5681                           	opt stack 0
  5682  0003C6                     i2_printf:
  5683                           	opt stack 23
  5684                           
  5685                           ;doprnt.c: 466: va_list ap;
  5686                           ;doprnt.c: 499: signed char c;
  5687                           ;doprnt.c: 501: int width;
  5688                           ;doprnt.c: 506: signed char prec;
  5689                           ;doprnt.c: 508: unsigned char flag;
  5690                           ;doprnt.c: 523: union {
  5691                           ;doprnt.c: 524: unsigned long vd;
  5692                           ;doprnt.c: 525: double integ;
  5693                           ;doprnt.c: 526: } tmpval;
  5694                           ;doprnt.c: 528: unsigned int val;
  5695                           ;doprnt.c: 529: unsigned len;
  5696                           ;doprnt.c: 530: const char * cp;
  5697                           ;doprnt.c: 533: *ap = __va_start();
  5698                           
  5699                           ;incstack = 0
  5700  0003C6  0E0F               	movlw	low (?i2_printf+2)
  5701  0003C8  6E14               	movwf	i2printf@ap,c
  5702  0003CA  0E00               	movlw	high (?i2_printf+2)
  5703  0003CC  6E15               	movwf	i2printf@ap+1,c
  5704                           
  5705                           ;doprnt.c: 536: while(c = *f++) {
  5706  0003CE  D174               	goto	i2l3868
  5707  0003D0                     i2l3742:
  5708                           
  5709                           ;doprnt.c: 538: if(c != '%')
  5710  0003D0  0E25               	movlw	37
  5711  0003D2  181C               	xorwf	i2printf@c,w,c
  5712  0003D4  B4D8               	btfsc	status,2,c
  5713  0003D6  D004               	goto	i2l3746
  5714                           
  5715                           ;doprnt.c: 540: {
  5716                           ;doprnt.c: 541: (putch(c) );
  5717  0003D8  501C               	movf	i2printf@c,w,c
  5718  0003DA  ECE1  F011         	call	i2_putch
  5719                           
  5720                           ;doprnt.c: 542: continue;
  5721  0003DE  D16C               	goto	i2l3868
  5722  0003E0                     i2l3746:
  5723                           
  5724                           ;doprnt.c: 543: }
  5725                           ;doprnt.c: 546: width = 0;
  5726  0003E0  0E00               	movlw	0
  5727  0003E2  6E1B               	movwf	i2printf@width+1,c
  5728  0003E4  0E00               	movlw	0
  5729  0003E6  6E1A               	movwf	i2printf@width,c
  5730                           
  5731                           ;doprnt.c: 548: flag = 0;
  5732  0003E8  0E00               	movlw	0
  5733  0003EA  6E19               	movwf	i2printf@flag,c
  5734                           
  5735                           ;doprnt.c: 551: switch(*f) {
  5736                           
  5737                           ;doprnt.c: 550: for(;;) {
  5738  0003EC  D003               	goto	i2l3752
  5739  0003EE                     i2l3748:
  5740                           
  5741                           ;doprnt.c: 580: flag |= 0x04;
  5742  0003EE  8419               	bsf	i2printf@flag,2,c
  5743                           
  5744                           ;doprnt.c: 581: f++;
  5745  0003F0  4A0D               	infsnz	i2printf@f,f,c
  5746  0003F2  2A0E               	incf	i2printf@f+1,f,c
  5747  0003F4                     i2l3752:
  5748  0003F4  C00D  FFF6         	movff	i2printf@f,tblptrl
  5749  0003F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5750  0003FC                     	if	0	;tblptru may be non-zero
  5751  0003FC                     	endif
  5752  0003FC                     	if	0	;tblptru may be non-zero
  5753  0003FC                     	endif
  5754  0003FC  0008               	tblrd		*
  5755  0003FE  50F5               	movf	tablat,w,c
  5756                           
  5757                           ; Switch size 1, requested type "space"
  5758                           ; Number of cases is 1, Range of values is 48 to 48
  5759                           ; switch strategies available:
  5760                           ; Name         Instructions Cycles
  5761                           ; simple_byte            4     3 (average)
  5762                           ;	Chosen strategy is simple_byte
  5763  000400  0A30               	xorlw	48	; case 48
  5764  000402  B4D8               	btfsc	status,2,c
  5765  000404  D7F4               	goto	i2l3748
  5766                           
  5767                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5768                           
  5769                           ;doprnt.c: 586: }
  5770                           
  5771                           ;doprnt.c: 585: break;
  5772  000406  C00D  FFF6         	movff	i2printf@f,tblptrl
  5773  00040A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5774  00040E                     	if	0	;tblptru may be non-zero
  5775  00040E                     	endif
  5776  00040E                     	if	0	;tblptru may be non-zero
  5777  00040E                     	endif
  5778  00040E  0008               	tblrd		*
  5779  000410  50F5               	movf	tablat,w,c
  5780  000412  EC96  F011         	call	i2_isdigit
  5781  000416  A0D8               	btfss	status,0,c
  5782  000418  D035               	goto	i2l3770
  5783                           
  5784                           ;doprnt.c: 598: width = 0;
  5785  00041A  0E00               	movlw	0
  5786  00041C  6E1B               	movwf	i2printf@width+1,c
  5787  00041E  0E00               	movlw	0
  5788  000420  6E1A               	movwf	i2printf@width,c
  5789  000422                     i2l3758:
  5790                           
  5791                           ;doprnt.c: 600: width *= 10;
  5792  000422  C01A  F001         	movff	i2printf@width,i2___wmul@multiplier
  5793  000426  C01B  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  5794  00042A  0E00               	movlw	0
  5795  00042C  6E04               	movwf	i2___wmul@multiplicand+1,c
  5796  00042E  0E0A               	movlw	10
  5797  000430  6E03               	movwf	i2___wmul@multiplicand,c
  5798  000432  EC71  F011         	call	i2___wmul	;wreg free
  5799  000436  C001  F01A         	movff	?i2___wmul,i2printf@width
  5800  00043A  C002  F01B         	movff	?i2___wmul+1,i2printf@width+1
  5801                           
  5802                           ;doprnt.c: 601: width += *f++ - '0';
  5803  00043E  0ED0               	movlw	208
  5804  000440  6E0F               	movwf	??i2_printf& (0+255),c
  5805  000442  0EFF               	movlw	255
  5806  000444  6E10               	movwf	(??i2_printf+1)& (0+255),c
  5807  000446  C00D  FFF6         	movff	i2printf@f,tblptrl
  5808  00044A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5809  00044E                     	if	0	;tblptru may be non-zero
  5810  00044E                     	endif
  5811  00044E                     	if	0	;tblptru may be non-zero
  5812  00044E                     	endif
  5813  00044E  0008               	tblrd		*
  5814  000450  50F5               	movf	tablat,w,c
  5815  000452  6E11               	movwf	(??i2_printf+2)& (0+255),c
  5816  000454  6A12               	clrf	(??i2_printf+3)& (0+255),c
  5817  000456  500F               	movf	??i2_printf,w,c
  5818  000458  2611               	addwf	??i2_printf+2,f,c
  5819  00045A  5010               	movf	??i2_printf+1,w,c
  5820  00045C  2212               	addwfc	??i2_printf+3,f,c
  5821  00045E  5011               	movf	??i2_printf+2,w,c
  5822  000460  261A               	addwf	i2printf@width,f,c
  5823  000462  5012               	movf	??i2_printf+3,w,c
  5824  000464  221B               	addwfc	i2printf@width+1,f,c
  5825  000466  4A0D               	infsnz	i2printf@f,f,c
  5826  000468  2A0E               	incf	i2printf@f+1,f,c
  5827                           
  5828                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5829  00046A  C00D  FFF6         	movff	i2printf@f,tblptrl
  5830  00046E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5831  000472                     	if	0	;tblptru may be non-zero
  5832  000472                     	endif
  5833  000472                     	if	0	;tblptru may be non-zero
  5834  000472                     	endif
  5835  000472  0008               	tblrd		*
  5836  000474  50F5               	movf	tablat,w,c
  5837  000476  EC96  F011         	call	i2_isdigit
  5838  00047A  A0D8               	btfss	status,0,c
  5839  00047C  D003               	goto	i2l3770
  5840  00047E  D7D1               	goto	i2l3758
  5841  000480                     i2l3766:
  5842                           
  5843                           ;doprnt.c: 721: flag |= 0x80;
  5844  000480  8E19               	bsf	i2printf@flag,7,c
  5845                           
  5846                           ;doprnt.c: 723: break;
  5847  000482  D017               	goto	i2l333
  5848  000484                     i2l3770:
  5849  000484  C00D  FFF6         	movff	i2printf@f,tblptrl
  5850  000488  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  5851  00048C  4A0D               	infsnz	i2printf@f,f,c
  5852  00048E  2A0E               	incf	i2printf@f+1,f,c
  5853  000490                     	if	0	;tblptru may be non-zero
  5854  000490                     	endif
  5855  000490                     	if	0	;tblptru may be non-zero
  5856  000490                     	endif
  5857  000490  0008               	tblrd		*
  5858  000492  CFF5 F01C          	movff	tablat,i2printf@c
  5859  000496  501C               	movf	i2printf@c,w,c
  5860                           
  5861                           ; Switch size 1, requested type "space"
  5862                           ; Number of cases is 4, Range of values is 0 to 120
  5863                           ; switch strategies available:
  5864                           ; Name         Instructions Cycles
  5865                           ; simple_byte           13     7 (average)
  5866                           ;	Chosen strategy is simple_byte
  5867  000498  0A00               	xorlw	0	; case 0
  5868  00049A  B4D8               	btfsc	status,2,c
  5869  00049C  0012               	return	
  5870  00049E  0A64               	xorlw	100	; case 100
  5871  0004A0  B4D8               	btfsc	status,2,c
  5872  0004A2  D007               	goto	i2l333
  5873  0004A4  0A0D               	xorlw	13	; case 105
  5874  0004A6  B4D8               	btfsc	status,2,c
  5875  0004A8  D004               	goto	i2l333
  5876  0004AA  0A11               	xorlw	17	; case 120
  5877  0004AC  B4D8               	btfsc	status,2,c
  5878  0004AE  D7E8               	goto	i2l3766
  5879  0004B0  D103               	goto	i2l3868
  5880  0004B2                     i2l333:
  5881                           
  5882                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5883  0004B2  BE19               	btfsc	i2printf@flag,7,c
  5884  0004B4  D015               	goto	i2l3782
  5885                           
  5886                           ;doprnt.c: 1253: {
  5887                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5888  0004B6  C014  FFD9         	movff	i2printf@ap,fsr2l
  5889  0004BA  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  5890  0004BE  CFDE F017          	movff	postinc2,i2printf@val
  5891  0004C2  CFDD F018          	movff	postdec2,i2printf@val+1
  5892  0004C6  0E02               	movlw	2
  5893  0004C8  2614               	addwf	i2printf@ap,f,c
  5894  0004CA  0E00               	movlw	0
  5895  0004CC  2215               	addwfc	i2printf@ap+1,f,c
  5896                           
  5897                           ;doprnt.c: 1261: if((int)val < 0) {
  5898  0004CE  AE18               	btfss	i2printf@val+1,7,c
  5899  0004D0  D044               	goto	i2l3816
  5900                           
  5901                           ;doprnt.c: 1262: flag |= 0x03;
  5902  0004D2  0E03               	movlw	3
  5903  0004D4  1219               	iorwf	i2printf@flag,f,c
  5904                           
  5905                           ;doprnt.c: 1263: val = -val;
  5906  0004D6  6C17               	negf	i2printf@val,c
  5907  0004D8  1E18               	comf	i2printf@val+1,f,c
  5908  0004DA  B0D8               	btfsc	status,0,c
  5909  0004DC  2A18               	incf	i2printf@val+1,f,c
  5910                           
  5911                           ;doprnt.c: 1264: }
  5912                           ;doprnt.c: 1266: }
  5913  0004DE  D03D               	goto	i2l3816
  5914  0004E0                     i2l3782:
  5915                           
  5916                           ;doprnt.c: 1268: else
  5917                           ;doprnt.c: 1273: {
  5918                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5919  0004E0  C014  FFD9         	movff	i2printf@ap,fsr2l
  5920  0004E4  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  5921  0004E8  CFDE F017          	movff	postinc2,i2printf@val
  5922  0004EC  CFDD F018          	movff	postdec2,i2printf@val+1
  5923  0004F0  0E02               	movlw	2
  5924  0004F2  2614               	addwf	i2printf@ap,f,c
  5925  0004F4  0E00               	movlw	0
  5926  0004F6  2215               	addwfc	i2printf@ap+1,f,c
  5927                           
  5928                           ;doprnt.c: 1287: }
  5929                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5930  0004F8  D030               	goto	i2l3816
  5931  0004FA                     i2l3786:
  5932                           
  5933                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5934  0004FA  0E01               	movlw	1
  5935  0004FC  6E1C               	movwf	i2printf@c,c
  5936  0004FE                     i2l3788:
  5937  0004FE  0E05               	movlw	5
  5938  000500  181C               	xorwf	i2printf@c,w,c
  5939  000502  B4D8               	btfsc	status,2,c
  5940  000504  D032               	goto	i2l3818
  5941                           
  5942                           ;doprnt.c: 1306: if(val < dpowers[c])
  5943  000506  501C               	movf	i2printf@c,w,c
  5944  000508  0D02               	mullw	2
  5945  00050A  0E00               	movlw	low _dpowers
  5946  00050C  24F3               	addwf	prodl,w,c
  5947  00050E  6EF6               	movwf	tblptrl,c
  5948  000510  0EFE               	movlw	high _dpowers
  5949  000512  20F4               	addwfc	prodh,w,c
  5950  000514  6EF7               	movwf	tblptrh,c
  5951  000516                     	if	0	;There are less than 3 active tblptr bytes
  5952  000516                     	endif
  5953  000516  0009               	tblrd		*+
  5954  000518  50F5               	movf	tablat,w,c
  5955  00051A  5C17               	subwf	i2printf@val,w,c
  5956  00051C  0009               	tblrd		*+
  5957  00051E  50F5               	movf	tablat,w,c
  5958  000520  5818               	subwfb	i2printf@val+1,w,c
  5959  000522  A0D8               	btfss	status,0,c
  5960  000524  D022               	goto	i2l3818
  5961                           
  5962                           ;doprnt.c: 1307: break;
  5963  000526  2A1C               	incf	i2printf@c,f,c
  5964  000528  D7EA               	goto	i2l3788
  5965  00052A                     i2l3800:
  5966                           
  5967                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5968  00052A  0E01               	movlw	1
  5969  00052C  6E1C               	movwf	i2printf@c,c
  5970  00052E                     i2l3802:
  5971  00052E  0E04               	movlw	4
  5972  000530  181C               	xorwf	i2printf@c,w,c
  5973  000532  B4D8               	btfsc	status,2,c
  5974  000534  D01A               	goto	i2l3818
  5975                           
  5976                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5977  000536  501C               	movf	i2printf@c,w,c
  5978  000538  0D02               	mullw	2
  5979  00053A  0E0A               	movlw	low _hexpowers
  5980  00053C  24F3               	addwf	prodl,w,c
  5981  00053E  6EF6               	movwf	tblptrl,c
  5982  000540  0EFE               	movlw	high _hexpowers
  5983  000542  20F4               	addwfc	prodh,w,c
  5984  000544  6EF7               	movwf	tblptrh,c
  5985  000546                     	if	0	;There are less than 3 active tblptr bytes
  5986  000546                     	endif
  5987  000546  0009               	tblrd		*+
  5988  000548  50F5               	movf	tablat,w,c
  5989  00054A  5C17               	subwf	i2printf@val,w,c
  5990  00054C  0009               	tblrd		*+
  5991  00054E  50F5               	movf	tablat,w,c
  5992  000550  5818               	subwfb	i2printf@val+1,w,c
  5993  000552  A0D8               	btfss	status,0,c
  5994  000554  D00A               	goto	i2l3818
  5995                           
  5996                           ;doprnt.c: 1318: break;
  5997  000556  2A1C               	incf	i2printf@c,f,c
  5998  000558  D7EA               	goto	i2l3802
  5999  00055A                     i2l3816:
  6000  00055A  5019               	movf	i2printf@flag,w,c
  6001  00055C  0B80               	andlw	128
  6002                           
  6003                           ; Switch size 1, requested type "space"
  6004                           ; Number of cases is 2, Range of values is 0 to 128
  6005                           ; switch strategies available:
  6006                           ; Name         Instructions Cycles
  6007                           ; simple_byte            7     4 (average)
  6008                           ;	Chosen strategy is simple_byte
  6009  00055E  0A00               	xorlw	0	; case 0
  6010  000560  B4D8               	btfsc	status,2,c
  6011  000562  D7CB               	goto	i2l3786
  6012  000564  0A80               	xorlw	128	; case 128
  6013  000566  B4D8               	btfsc	status,2,c
  6014  000568  D7E0               	goto	i2l3800
  6015  00056A                     i2l3818:
  6016                           
  6017                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6018  00056A  501A               	movf	i2printf@width,w,c
  6019  00056C  101B               	iorwf	i2printf@width+1,w,c
  6020  00056E  B4D8               	btfsc	status,2,c
  6021  000570  D009               	goto	i2l3824
  6022  000572  C019  F00F         	movff	i2printf@flag,??i2_printf
  6023  000576  0E03               	movlw	3
  6024  000578  160F               	andwf	??i2_printf,f,c
  6025  00057A  B4D8               	btfsc	status,2,c
  6026  00057C  D003               	goto	i2l3824
  6027                           
  6028                           ;doprnt.c: 1346: width--;
  6029  00057E  061A               	decf	i2printf@width,f,c
  6030  000580  A0D8               	btfss	status,0,c
  6031  000582  061B               	decf	i2printf@width+1,f,c
  6032  000584                     i2l3824:
  6033                           
  6034                           ;doprnt.c: 1381: if(width > c)
  6035  000584  0E80               	movlw	128
  6036  000586  BE1C               	btfsc	i2printf@c,7,c
  6037  000588  0E7F               	movlw	127
  6038  00058A  6E0F               	movwf	??i2_printf& (0+255),c
  6039  00058C  501A               	movf	i2printf@width,w,c
  6040  00058E  5C1C               	subwf	i2printf@c,w,c
  6041  000590  501B               	movf	i2printf@width+1,w,c
  6042  000592  0A80               	xorlw	128
  6043  000594  580F               	subwfb	??i2_printf& (0+255),w,c
  6044  000596  B0D8               	btfsc	status,0,c
  6045  000598  D007               	goto	i2l3828
  6046                           
  6047                           ;doprnt.c: 1382: width -= c;
  6048  00059A  501C               	movf	i2printf@c,w,c
  6049  00059C  5E1A               	subwf	i2printf@width,f,c
  6050  00059E  0E00               	movlw	0
  6051  0005A0  BE1C               	btfsc	i2printf@c,7,c
  6052  0005A2  0EFF               	movlw	255
  6053  0005A4  5A1B               	subwfb	i2printf@width+1,f,c
  6054  0005A6  D004               	goto	i2l3830
  6055  0005A8                     i2l3828:
  6056                           
  6057                           ;doprnt.c: 1383: else
  6058                           ;doprnt.c: 1384: width = 0;
  6059  0005A8  0E00               	movlw	0
  6060  0005AA  6E1B               	movwf	i2printf@width+1,c
  6061  0005AC  0E00               	movlw	0
  6062  0005AE  6E1A               	movwf	i2printf@width,c
  6063  0005B0                     i2l3830:
  6064                           
  6065                           ;doprnt.c: 1387: if(flag & 0x04) {
  6066  0005B0  A419               	btfss	i2printf@flag,2,c
  6067  0005B2  D014               	goto	i2l3842
  6068                           
  6069                           ;doprnt.c: 1392: if(flag & 0x03)
  6070  0005B4  C019  F00F         	movff	i2printf@flag,??i2_printf
  6071  0005B8  0E03               	movlw	3
  6072  0005BA  160F               	andwf	??i2_printf,f,c
  6073  0005BC  B4D8               	btfsc	status,2,c
  6074  0005BE  D003               	goto	i2l3836
  6075                           
  6076                           ;doprnt.c: 1393: (putch('-') );
  6077  0005C0  0E2D               	movlw	45
  6078  0005C2  ECE1  F011         	call	i2_putch
  6079  0005C6                     i2l3836:
  6080                           
  6081                           ;doprnt.c: 1415: if(width)
  6082  0005C6  501A               	movf	i2printf@width,w,c
  6083  0005C8  101B               	iorwf	i2printf@width+1,w,c
  6084  0005CA  B4D8               	btfsc	status,2,c
  6085  0005CC  D01E               	goto	i2l3852
  6086                           
  6087                           ;doprnt.c: 1417: (putch('0') );
  6088                           
  6089                           ;doprnt.c: 1416: do
  6090  0005CE  0E30               	movlw	48
  6091  0005D0  ECE1  F011         	call	i2_putch
  6092                           
  6093                           ;doprnt.c: 1418: while(--width);
  6094  0005D4  061A               	decf	i2printf@width,f,c
  6095  0005D6  A0D8               	btfss	status,0,c
  6096  0005D8  061B               	decf	i2printf@width+1,f,c
  6097  0005DA  D7F5               	goto	i2l3836
  6098  0005DC                     i2l3842:
  6099                           
  6100                           ;doprnt.c: 1422: {
  6101                           ;doprnt.c: 1424: if(width
  6102                           ;doprnt.c: 1428: )
  6103  0005DC  501A               	movf	i2printf@width,w,c
  6104  0005DE  101B               	iorwf	i2printf@width+1,w,c
  6105  0005E0  B4D8               	btfsc	status,2,c
  6106  0005E2  D00A               	goto	i2l3848
  6107  0005E4                     i2l3844:
  6108                           
  6109                           ;doprnt.c: 1430: (putch(' ') );
  6110  0005E4  0E20               	movlw	32
  6111  0005E6  ECE1  F011         	call	i2_putch
  6112                           
  6113                           ;doprnt.c: 1431: while(--width);
  6114  0005EA  061A               	decf	i2printf@width,f,c
  6115  0005EC  A0D8               	btfss	status,0,c
  6116  0005EE  061B               	decf	i2printf@width+1,f,c
  6117  0005F0  501A               	movf	i2printf@width,w,c
  6118  0005F2  101B               	iorwf	i2printf@width+1,w,c
  6119  0005F4  A4D8               	btfss	status,2,c
  6120  0005F6  D7F6               	goto	i2l3844
  6121  0005F8                     i2l3848:
  6122                           
  6123                           ;doprnt.c: 1438: if(flag & 0x03)
  6124  0005F8  C019  F00F         	movff	i2printf@flag,??i2_printf
  6125  0005FC  0E03               	movlw	3
  6126  0005FE  160F               	andwf	??i2_printf,f,c
  6127  000600  B4D8               	btfsc	status,2,c
  6128  000602  D003               	goto	i2l3852
  6129                           
  6130                           ;doprnt.c: 1439: (putch('-') );
  6131  000604  0E2D               	movlw	45
  6132  000606  ECE1  F011         	call	i2_putch
  6133  00060A                     i2l3852:
  6134                           
  6135                           ;doprnt.c: 1469: }
  6136                           ;doprnt.c: 1472: prec = c;
  6137  00060A  C01C  F016         	movff	i2printf@c,i2printf@prec
  6138                           
  6139                           ;doprnt.c: 1474: while(prec--) {
  6140  00060E  D050               	goto	i2l3866
  6141  000610                     i2l3854:
  6142                           
  6143                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6144  000610  5016               	movf	i2printf@prec,w,c
  6145  000612  0D02               	mullw	2
  6146  000614  0E00               	movlw	low _dpowers
  6147  000616  24F3               	addwf	prodl,w,c
  6148  000618  6EF6               	movwf	tblptrl,c
  6149  00061A  0EFE               	movlw	high _dpowers
  6150  00061C  20F4               	addwfc	prodh,w,c
  6151  00061E  6EF7               	movwf	tblptrh,c
  6152  000620                     	if	0	;There are less than 3 active tblptr bytes
  6153  000620                     	endif
  6154  000620  0009               	tblrd		*+
  6155  000622  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6156  000626  000A               	tblrd		*-
  6157  000628  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6158  00062C  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6159  000630  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6160  000634  ECCE  F00F         	call	i2___lwdiv	;wreg free
  6161  000638  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6162  00063C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6163  000640  0E00               	movlw	0
  6164  000642  6E0B               	movwf	i2___lwmod@divisor+1,c
  6165  000644  0E0A               	movlw	10
  6166  000646  6E0A               	movwf	i2___lwmod@divisor,c
  6167  000648  EC46  F010         	call	i2___lwmod	;wreg free
  6168  00064C  5008               	movf	?i2___lwmod,w,c
  6169  00064E  0F30               	addlw	48
  6170  000650  6E1C               	movwf	i2printf@c,c
  6171                           
  6172                           ;doprnt.c: 1491: break;
  6173  000652  D02B               	goto	i2l3864
  6174  000654                     i2l3856:
  6175                           
  6176                           ;doprnt.c: 1499: {
  6177                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6178  000654  C017  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6179  000658  C018  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6180  00065C  5016               	movf	i2printf@prec,w,c
  6181  00065E  0D02               	mullw	2
  6182  000660  0E0A               	movlw	low _hexpowers
  6183  000662  24F3               	addwf	prodl,w,c
  6184  000664  6EF6               	movwf	tblptrl,c
  6185  000666  0EFE               	movlw	high _hexpowers
  6186  000668  20F4               	addwfc	prodh,w,c
  6187  00066A  6EF7               	movwf	tblptrh,c
  6188  00066C                     	if	0	;There are less than 3 active tblptr bytes
  6189  00066C                     	endif
  6190  00066C  0009               	tblrd		*+
  6191  00066E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6192  000672  000A               	tblrd		*-
  6193  000674  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6194  000678  ECCE  F00F         	call	i2___lwdiv	;wreg free
  6195  00067C  5001               	movf	?i2___lwdiv,w,c
  6196  00067E  0B0F               	andlw	15
  6197  000680  6E13               	movwf	i2printf@idx,c
  6198                           
  6199                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6200  000682  5013               	movf	i2printf@idx,w,c
  6201  000684  0D01               	mullw	1
  6202  000686  0EF1               	movlw	low STR_24
  6203  000688  24F3               	addwf	prodl,w,c
  6204  00068A  6EF6               	movwf	tblptrl,c
  6205  00068C  0EFE               	movlw	high STR_24
  6206  00068E  20F4               	addwfc	prodh,w,c
  6207  000690  6EF7               	movwf	tblptrh,c
  6208  000692                     	if	0	;There are less than 3 active tblptr bytes
  6209  000692                     	endif
  6210  000692  0008               	tblrd		*
  6211  000694  CFF5 F01C          	movff	tablat,i2printf@c
  6212                           
  6213                           ;doprnt.c: 1523: }
  6214                           
  6215                           ;doprnt.c: 1508: }
  6216                           ;doprnt.c: 1510: break;
  6217  000698  D008               	goto	i2l3864
  6218  00069A                     i2l3862:
  6219  00069A  5019               	movf	i2printf@flag,w,c
  6220  00069C  0B80               	andlw	128
  6221                           
  6222                           ; Switch size 1, requested type "space"
  6223                           ; Number of cases is 2, Range of values is 0 to 128
  6224                           ; switch strategies available:
  6225                           ; Name         Instructions Cycles
  6226                           ; simple_byte            7     4 (average)
  6227                           ;	Chosen strategy is simple_byte
  6228  00069E  0A00               	xorlw	0	; case 0
  6229  0006A0  B4D8               	btfsc	status,2,c
  6230  0006A2  D7B6               	goto	i2l3854
  6231  0006A4  0A80               	xorlw	128	; case 128
  6232  0006A6  B4D8               	btfsc	status,2,c
  6233  0006A8  D7D5               	goto	i2l3856
  6234  0006AA                     i2l3864:
  6235                           
  6236                           ;doprnt.c: 1524: (putch(c) );
  6237  0006AA  501C               	movf	i2printf@c,w,c
  6238  0006AC  ECE1  F011         	call	i2_putch
  6239  0006B0                     i2l3866:
  6240  0006B0  0616               	decf	i2printf@prec,f,c
  6241  0006B2  2816               	incf	i2printf@prec,w,c
  6242  0006B4  A4D8               	btfss	status,2,c
  6243  0006B6  D7F1               	goto	i2l3862
  6244  0006B8                     i2l3868:
  6245  0006B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  6246  0006BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6247  0006C0  4A0D               	infsnz	i2printf@f,f,c
  6248  0006C2  2A0E               	incf	i2printf@f+1,f,c
  6249  0006C4                     	if	0	;tblptru may be non-zero
  6250  0006C4                     	endif
  6251  0006C4                     	if	0	;tblptru may be non-zero
  6252  0006C4                     	endif
  6253  0006C4  0008               	tblrd		*
  6254  0006C6  CFF5 F01C          	movff	tablat,i2printf@c
  6255  0006CA  501C               	movf	i2printf@c,w,c
  6256  0006CC  B4D8               	btfsc	status,2,c
  6257  0006CE  0012               	return	
  6258  0006D0  D67F               	goto	i2l3742
  6259  0006D2                     __end_ofi2_printf:
  6260                           	opt stack 0
  6261                           pclatu	equ	0xFFB
  6262                           pclath	equ	0xFFA
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon2	equ	0xFF1
  6271                           intcon3	equ	0xFF0
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function i2_putch *****************
  6286 ;; Defined at:
  6287 ;;		line 31 in file "lcd.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  data            1    wreg     unsigned char 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;  data            1    2[COMRAM] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;Total ram usage:        1 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    1
  6308 ;; This function calls:
  6309 ;;		i2_lcdNibble
  6310 ;; This function is called by:
  6311 ;;		i2_printf
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text27
  6316  0023C2                     __ptext27:
  6317                           	opt stack 0
  6318  0023C2                     i2_putch:
  6319                           	opt stack 23
  6320                           
  6321                           ;incstack = 0
  6322                           ;i2putch@data stored from wreg
  6323  0023C2  6E03               	movwf	i2putch@data,c
  6324                           
  6325                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6326  0023C4  848C               	bsf	3980,2,c	;volatile
  6327                           
  6328                           ;lcd.c: 33: lcdNibble(data);
  6329  0023C6  5003               	movf	i2putch@data,w,c
  6330  0023C8  EC1F  F010         	call	i2_lcdNibble
  6331  0023CC  0012               	return		;funcret
  6332  0023CE                     __end_ofi2_putch:
  6333                           	opt stack 0
  6334                           pclatu	equ	0xFFB
  6335                           pclath	equ	0xFFA
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           intcon2	equ	0xFF1
  6344                           intcon3	equ	0xFF0
  6345                           postinc0	equ	0xFEE
  6346                           fsr0h	equ	0xFEA
  6347                           fsr0l	equ	0xFE9
  6348                           wreg	equ	0xFE8
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function i2_isdigit *****************
  6359 ;; Defined at:
  6360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  c               1    wreg     unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  c               1    2[COMRAM] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        3 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; This function calls:
  6381 ;;		Nothing
  6382 ;; This function is called by:
  6383 ;;		i2_printf
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text28
  6388  00232C                     __ptext28:
  6389                           	opt stack 0
  6390  00232C                     i2_isdigit:
  6391                           	opt stack 24
  6392                           
  6393                           ;incstack = 0
  6394                           ;i2isdigit@c stored from wreg
  6395  00232C  6E03               	movwf	i2isdigit@c,c
  6396  00232E  0E00               	movlw	0
  6397  002330  6E02               	movwf	i2_isdigit$688,c
  6398  002332  0E3A               	movlw	58
  6399  002334  6003               	cpfslt	i2isdigit@c,c
  6400  002336  D005               	goto	i2l3498
  6401  002338  0E2F               	movlw	47
  6402  00233A  6403               	cpfsgt	i2isdigit@c,c
  6403  00233C  D002               	goto	i2l3498
  6404  00233E  0E01               	movlw	1
  6405  002340  6E02               	movwf	i2_isdigit$688,c
  6406  002342                     i2l3498:
  6407  002342  C002  F001         	movff	i2_isdigit$688,??i2_isdigit
  6408  002346  3001               	rrcf	??i2_isdigit,w,c
  6409  002348  0012               	return	
  6410  00234A                     __end_ofi2_isdigit:
  6411                           	opt stack 0
  6412                           pclatu	equ	0xFFB
  6413                           pclath	equ	0xFFA
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           intcon2	equ	0xFF1
  6422                           intcon3	equ	0xFF0
  6423                           postinc0	equ	0xFEE
  6424                           fsr0h	equ	0xFEA
  6425                           fsr0l	equ	0xFE9
  6426                           wreg	equ	0xFE8
  6427                           fsr1h	equ	0xFE2
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function i2___lwmod *****************
  6437 ;; Defined at:
  6438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  dividend        2    7[COMRAM] unsigned int 
  6441 ;;  divisor         2    9[COMRAM] unsigned int 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  2    7[COMRAM] unsigned int 
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, status,0
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;Total ram usage:        5 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; This function calls:
  6460 ;;		Nothing
  6461 ;; This function is called by:
  6462 ;;		i2_printf
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text29
  6467  00208C                     __ptext29:
  6468                           	opt stack 0
  6469  00208C                     i2___lwmod:
  6470                           	opt stack 24
  6471                           
  6472                           ;incstack = 0
  6473  00208C  500A               	movf	i2___lwmod@divisor,w,c
  6474  00208E  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6475  002090  B4D8               	btfsc	status,2,c
  6476  002092  D018               	goto	i2l788
  6477  002094  0E01               	movlw	1
  6478  002096  6E0C               	movwf	i2___lwmod@counter,c
  6479  002098  D004               	goto	i2l3530
  6480  00209A                     i2l3528:
  6481  00209A  90D8               	bcf	status,0,c
  6482  00209C  360A               	rlcf	i2___lwmod@divisor,f,c
  6483  00209E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6484  0020A0  2A0C               	incf	i2___lwmod@counter,f,c
  6485  0020A2                     i2l3530:
  6486  0020A2  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6487  0020A4  D7FA               	goto	i2l3528
  6488  0020A6                     i2l3532:
  6489  0020A6  500A               	movf	i2___lwmod@divisor,w,c
  6490  0020A8  5C08               	subwf	i2___lwmod@dividend,w,c
  6491  0020AA  500B               	movf	i2___lwmod@divisor+1,w,c
  6492  0020AC  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6493  0020AE  A0D8               	btfss	status,0,c
  6494  0020B0  D004               	goto	i2l3536
  6495  0020B2  500A               	movf	i2___lwmod@divisor,w,c
  6496  0020B4  5E08               	subwf	i2___lwmod@dividend,f,c
  6497  0020B6  500B               	movf	i2___lwmod@divisor+1,w,c
  6498  0020B8  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6499  0020BA                     i2l3536:
  6500  0020BA  90D8               	bcf	status,0,c
  6501  0020BC  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6502  0020BE  320A               	rrcf	i2___lwmod@divisor,f,c
  6503  0020C0  2E0C               	decfsz	i2___lwmod@counter,f,c
  6504  0020C2  D7F1               	goto	i2l3532
  6505  0020C4                     i2l788:
  6506  0020C4  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6507  0020C8  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6508  0020CC  0012               	return		;funcret
  6509  0020CE                     __end_ofi2___lwmod:
  6510                           	opt stack 0
  6511                           pclatu	equ	0xFFB
  6512                           pclath	equ	0xFFA
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           intcon2	equ	0xFF1
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           fsr0h	equ	0xFEA
  6524                           fsr0l	equ	0xFE9
  6525                           wreg	equ	0xFE8
  6526                           fsr1h	equ	0xFE2
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function i2___lwdiv *****************
  6536 ;; Defined at:
  6537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  dividend        2    0[COMRAM] unsigned int 
  6540 ;;  divisor         2    2[COMRAM] unsigned int 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6543 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  2    0[COMRAM] unsigned int 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;Total ram usage:        7 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; This function calls:
  6560 ;;		Nothing
  6561 ;; This function is called by:
  6562 ;;		i2_printf
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text30
  6567  001F9C                     __ptext30:
  6568                           	opt stack 0
  6569  001F9C                     i2___lwdiv:
  6570                           	opt stack 24
  6571                           
  6572                           ;incstack = 0
  6573  001F9C  0E00               	movlw	0
  6574  001F9E  6E06               	movwf	i2___lwdiv@quotient+1,c
  6575  001FA0  0E00               	movlw	0
  6576  001FA2  6E05               	movwf	i2___lwdiv@quotient,c
  6577  001FA4  5003               	movf	i2___lwdiv@divisor,w,c
  6578  001FA6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6579  001FA8  B4D8               	btfsc	status,2,c
  6580  001FAA  D01C               	goto	i2l778
  6581  001FAC  0E01               	movlw	1
  6582  001FAE  6E07               	movwf	i2___lwdiv@counter,c
  6583  001FB0  D004               	goto	i2l3510
  6584  001FB2                     i2l3508:
  6585  001FB2  90D8               	bcf	status,0,c
  6586  001FB4  3603               	rlcf	i2___lwdiv@divisor,f,c
  6587  001FB6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6588  001FB8  2A07               	incf	i2___lwdiv@counter,f,c
  6589  001FBA                     i2l3510:
  6590  001FBA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6591  001FBC  D7FA               	goto	i2l3508
  6592  001FBE                     i2l3512:
  6593  001FBE  90D8               	bcf	status,0,c
  6594  001FC0  3605               	rlcf	i2___lwdiv@quotient,f,c
  6595  001FC2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6596  001FC4  5003               	movf	i2___lwdiv@divisor,w,c
  6597  001FC6  5C01               	subwf	i2___lwdiv@dividend,w,c
  6598  001FC8  5004               	movf	i2___lwdiv@divisor+1,w,c
  6599  001FCA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6600  001FCC  A0D8               	btfss	status,0,c
  6601  001FCE  D005               	goto	i2l3520
  6602  001FD0  5003               	movf	i2___lwdiv@divisor,w,c
  6603  001FD2  5E01               	subwf	i2___lwdiv@dividend,f,c
  6604  001FD4  5004               	movf	i2___lwdiv@divisor+1,w,c
  6605  001FD6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6606  001FD8  8005               	bsf	i2___lwdiv@quotient,0,c
  6607  001FDA                     i2l3520:
  6608  001FDA  90D8               	bcf	status,0,c
  6609  001FDC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6610  001FDE  3203               	rrcf	i2___lwdiv@divisor,f,c
  6611  001FE0  2E07               	decfsz	i2___lwdiv@counter,f,c
  6612  001FE2  D7ED               	goto	i2l3512
  6613  001FE4                     i2l778:
  6614  001FE4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6615  001FE8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6616  001FEC  0012               	return		;funcret
  6617  001FEE                     __end_ofi2___lwdiv:
  6618                           	opt stack 0
  6619                           pclatu	equ	0xFFB
  6620                           pclath	equ	0xFFA
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           intcon2	equ	0xFF1
  6629                           intcon3	equ	0xFF0
  6630                           postinc0	equ	0xFEE
  6631                           fsr0h	equ	0xFEA
  6632                           fsr0l	equ	0xFE9
  6633                           wreg	equ	0xFE8
  6634                           fsr1h	equ	0xFE2
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8
  6642                           
  6643 ;; *************** function i2_lcdInst *****************
  6644 ;; Defined at:
  6645 ;;		line 26 in file "lcd.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  data            1    wreg     unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  data            1    2[COMRAM] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;Total ram usage:        1 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    1
  6666 ;; This function calls:
  6667 ;;		i2_lcdNibble
  6668 ;; This function is called by:
  6669 ;;		_isr
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text31
  6674  0023CE                     __ptext31:
  6675                           	opt stack 0
  6676  0023CE                     i2_lcdInst:
  6677                           	opt stack 24
  6678                           
  6679                           ;incstack = 0
  6680                           ;i2lcdInst@data stored from wreg
  6681  0023CE  6E03               	movwf	i2lcdInst@data,c
  6682                           
  6683                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6684  0023D0  948C               	bcf	3980,2,c	;volatile
  6685                           
  6686                           ;lcd.c: 28: lcdNibble(data);
  6687  0023D2  5003               	movf	i2lcdInst@data,w,c
  6688  0023D4  EC1F  F010         	call	i2_lcdNibble
  6689  0023D8  0012               	return		;funcret
  6690  0023DA                     __end_ofi2_lcdInst:
  6691                           	opt stack 0
  6692                           pclatu	equ	0xFFB
  6693                           pclath	equ	0xFFA
  6694                           tblptru	equ	0xFF8
  6695                           tblptrh	equ	0xFF7
  6696                           tblptrl	equ	0xFF6
  6697                           tablat	equ	0xFF5
  6698                           prodh	equ	0xFF4
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           intcon2	equ	0xFF1
  6702                           intcon3	equ	0xFF0
  6703                           postinc0	equ	0xFEE
  6704                           fsr0h	equ	0xFEA
  6705                           fsr0l	equ	0xFE9
  6706                           wreg	equ	0xFE8
  6707                           fsr1h	equ	0xFE2
  6708                           fsr1l	equ	0xFE1
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8
  6715                           
  6716 ;; *************** function i2_lcdNibble *****************
  6717 ;; Defined at:
  6718 ;;		line 36 in file "lcd.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;  data            1    wreg     unsigned char 
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  data            1    1[COMRAM] unsigned char 
  6723 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  1    wreg      void 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, status,0
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;Total ram usage:        2 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; This function calls:
  6740 ;;		Nothing
  6741 ;; This function is called by:
  6742 ;;		i2_lcdInst
  6743 ;;		i2_putch
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           	psect	text32
  6748  00203E                     __ptext32:
  6749                           	opt stack 0
  6750  00203E                     i2_lcdNibble:
  6751                           	opt stack 23
  6752                           
  6753                           ;incstack = 0
  6754                           ;i2lcdNibble@data stored from wreg
  6755  00203E  6E02               	movwf	i2lcdNibble@data,c
  6756                           
  6757                           ;lcd.c: 38: char temp = data & 0xF0;
  6758  002040  5002               	movf	i2lcdNibble@data,w,c
  6759  002042  0BF0               	andlw	240
  6760  002044  6E01               	movwf	i2lcdNibble@temp,c
  6761                           
  6762                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6763  002046  508C               	movf	3980,w,c	;volatile
  6764  002048  0B0F               	andlw	15
  6765  00204A  6E8C               	movwf	3980,c	;volatile
  6766                           
  6767                           ;lcd.c: 40: LATD = temp | LATD;
  6768  00204C  5001               	movf	i2lcdNibble@temp,w,c
  6769  00204E  108C               	iorwf	3980,w,c	;volatile
  6770  002050  6E8C               	movwf	3980,c	;volatile
  6771                           
  6772                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6773  002052  968C               	bcf	3980,3,c	;volatile
  6774                           
  6775                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6776  002054  0E19               	movlw	25
  6777  002056                     i2u380_47:
  6778  002056  2EE8               	decfsz	wreg,f,c
  6779  002058  D7FE               	bra	i2u380_47
  6780                           
  6781                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6782  00205A  868C               	bsf	3980,3,c	;volatile
  6783                           
  6784                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6785  00205C  0E19               	movlw	25
  6786  00205E                     i2u381_47:
  6787  00205E  2EE8               	decfsz	wreg,f,c
  6788  002060  D7FE               	bra	i2u381_47
  6789                           
  6790                           ;lcd.c: 47: data = data << 4;
  6791  002062  3802               	swapf	i2lcdNibble@data,w,c
  6792  002064  0BF0               	andlw	240
  6793  002066  6E02               	movwf	i2lcdNibble@data,c
  6794                           
  6795                           ;lcd.c: 49: temp = data & 0xF0;
  6796  002068  5002               	movf	i2lcdNibble@data,w,c
  6797  00206A  0BF0               	andlw	240
  6798  00206C  6E01               	movwf	i2lcdNibble@temp,c
  6799                           
  6800                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6801  00206E  508C               	movf	3980,w,c	;volatile
  6802  002070  0B0F               	andlw	15
  6803  002072  6E8C               	movwf	3980,c	;volatile
  6804                           
  6805                           ;lcd.c: 51: LATD = temp | LATD;
  6806  002074  5001               	movf	i2lcdNibble@temp,w,c
  6807  002076  108C               	iorwf	3980,w,c	;volatile
  6808  002078  6E8C               	movwf	3980,c	;volatile
  6809                           
  6810                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6811  00207A  968C               	bcf	3980,3,c	;volatile
  6812                           
  6813                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6814  00207C  0E19               	movlw	25
  6815  00207E                     i2u382_47:
  6816  00207E  2EE8               	decfsz	wreg,f,c
  6817  002080  D7FE               	bra	i2u382_47
  6818                           
  6819                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6820  002082  868C               	bsf	3980,3,c	;volatile
  6821                           
  6822                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6823  002084  0E19               	movlw	25
  6824  002086                     i2u383_47:
  6825  002086  2EE8               	decfsz	wreg,f,c
  6826  002088  D7FE               	bra	i2u383_47
  6827  00208A  0012               	return		;funcret
  6828  00208C                     __end_ofi2_lcdNibble:
  6829                           	opt stack 0
  6830                           pclatu	equ	0xFFB
  6831                           pclath	equ	0xFFA
  6832                           tblptru	equ	0xFF8
  6833                           tblptrh	equ	0xFF7
  6834                           tblptrl	equ	0xFF6
  6835                           tablat	equ	0xFF5
  6836                           prodh	equ	0xFF4
  6837                           prodl	equ	0xFF3
  6838                           intcon	equ	0xFF2
  6839                           intcon2	equ	0xFF1
  6840                           intcon3	equ	0xFF0
  6841                           postinc0	equ	0xFEE
  6842                           fsr0h	equ	0xFEA
  6843                           fsr0l	equ	0xFE9
  6844                           wreg	equ	0xFE8
  6845                           fsr1h	equ	0xFE2
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _servo_rotate *****************
  6855 ;; Defined at:
  6856 ;;		line 360 in file "main.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  i               2    1[COMRAM] unsigned int 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2, status,0
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;Total ram usage:        3 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_isr
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text33
  6884  00214C                     __ptext33:
  6885                           	opt stack 0
  6886  00214C                     _servo_rotate:
  6887                           	opt stack 25
  6888                           
  6889                           ;main.c: 361: unsigned int i;
  6890                           ;main.c: 362: for (i=0; i<50; i++) {
  6891                           
  6892                           ;incstack = 0
  6893  00214C  0E00               	movlw	0
  6894  00214E  6E03               	movwf	servo_rotate@i+1,c
  6895  002150  0E00               	movlw	0
  6896  002152  6E02               	movwf	servo_rotate@i,c
  6897  002154                     i2l3726:
  6898  002154  5003               	movf	servo_rotate@i+1,w,c
  6899  002156  E118               	bnz	i2l301
  6900  002158  0E32               	movlw	50
  6901  00215A  5C02               	subwf	servo_rotate@i,w,c
  6902  00215C  B0D8               	btfsc	status,0,c
  6903  00215E  0012               	return	
  6904                           
  6905                           ;main.c: 363: PORTEbits.RE0 = 1;
  6906  002160  8084               	bsf	3972,0,c	;volatile
  6907                           
  6908                           ;main.c: 364: _delay((unsigned long)((1500)*(10000000/4000000.0)));
  6909  002162  0E05               	movlw	5
  6910  002164  6E01               	movwf	??_servo_rotate& (0+255),c
  6911  002166  0EDE               	movlw	222
  6912  002168                     i2u384_47:
  6913  002168  2EE8               	decfsz	wreg,f,c
  6914  00216A  D7FE               	bra	i2u384_47
  6915  00216C  2E01               	decfsz	??_servo_rotate& (0+255),f,c
  6916  00216E  D7FC               	bra	i2u384_47
  6917                           
  6918                           ;main.c: 365: PORTEbits.RE0 =0;
  6919  002170  9084               	bcf	3972,0,c	;volatile
  6920                           
  6921                           ;main.c: 366: _delay((unsigned long)((18500)*(10000000/4000000.0)));
  6922  002172  0E3D               	movlw	61
  6923  002174  6E01               	movwf	??_servo_rotate& (0+255),c
  6924  002176  0E0F               	movlw	15
  6925  002178                     i2u385_47:
  6926  002178  2EE8               	decfsz	wreg,f,c
  6927  00217A  D7FE               	bra	i2u385_47
  6928  00217C  2E01               	decfsz	??_servo_rotate& (0+255),f,c
  6929  00217E  D7FC               	bra	i2u385_47
  6930  002180  F000               	nop	
  6931  002182  4A02               	infsnz	servo_rotate@i,f,c
  6932  002184  2A03               	incf	servo_rotate@i+1,f,c
  6933  002186  D7E6               	goto	i2l3726
  6934  002188                     i2l301:
  6935  002188  0012               	return		;funcret
  6936  00218A                     __end_of_servo_rotate:
  6937                           	opt stack 0
  6938                           pclatu	equ	0xFFB
  6939                           pclath	equ	0xFFA
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           intcon	equ	0xFF2
  6947                           intcon2	equ	0xFF1
  6948                           intcon3	equ	0xFF0
  6949                           postinc0	equ	0xFEE
  6950                           fsr0h	equ	0xFEA
  6951                           fsr0l	equ	0xFE9
  6952                           wreg	equ	0xFE8
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function _read_time *****************
  6963 ;; Defined at:
  6964 ;;		line 257 in file "main.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  i               1    3[COMRAM] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  1    wreg      void 
  6971 ;; Registers used:
  6972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        1 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    2
  6985 ;; This function calls:
  6986 ;;		i2_I2C_Master_Read
  6987 ;;		i2_I2C_Master_Start
  6988 ;;		i2_I2C_Master_Stop
  6989 ;;		i2_I2C_Master_Write
  6990 ;; This function is called by:
  6991 ;;		_isr
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text34
  6996  001DB6                     __ptext34:
  6997                           	opt stack 0
  6998  001DB6                     _read_time:
  6999                           	opt stack 23
  7000                           
  7001                           ;main.c: 259: I2C_Master_Start();
  7002                           
  7003                           ;incstack = 0
  7004  001DB6  EC03  F012         	call	i2_I2C_Master_Start	;wreg free
  7005                           
  7006                           ;main.c: 260: I2C_Master_Write(0b11010000);
  7007  001DBA  0E00               	movlw	0
  7008  001DBC  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7009  001DBE  0ED0               	movlw	208
  7010  001DC0  6E02               	movwf	i2I2C_Master_Write@d,c
  7011  001DC2  ECF2  F011         	call	i2_I2C_Master_Write	;wreg free
  7012                           
  7013                           ;main.c: 261: I2C_Master_Write(0x00);
  7014  001DC6  0E00               	movlw	0
  7015  001DC8  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7016  001DCA  0E00               	movlw	0
  7017  001DCC  6E02               	movwf	i2I2C_Master_Write@d,c
  7018  001DCE  ECF2  F011         	call	i2_I2C_Master_Write	;wreg free
  7019                           
  7020                           ;main.c: 262: I2C_Master_Stop();
  7021  001DD2  ECFF  F011         	call	i2_I2C_Master_Stop	;wreg free
  7022                           
  7023                           ;main.c: 265: I2C_Master_Start();
  7024  001DD6  EC03  F012         	call	i2_I2C_Master_Start	;wreg free
  7025                           
  7026                           ;main.c: 266: I2C_Master_Write(0b11010001);
  7027  001DDA  0E00               	movlw	0
  7028  001DDC  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7029  001DDE  0ED1               	movlw	209
  7030  001DE0  6E02               	movwf	i2I2C_Master_Write@d,c
  7031  001DE2  ECF2  F011         	call	i2_I2C_Master_Write	;wreg free
  7032                           
  7033                           ;main.c: 267: for(unsigned char i=0;i<0x06;i++){
  7034  001DE6  0E00               	movlw	0
  7035  001DE8  6E04               	movwf	read_time@i,c
  7036  001DEA                     i2l3692:
  7037  001DEA  0E05               	movlw	5
  7038  001DEC  6404               	cpfsgt	read_time@i,c
  7039  001DEE  D001               	goto	i2l3696
  7040  001DF0  D00E               	goto	i2l3702
  7041  001DF2                     i2l3696:
  7042                           
  7043                           ;main.c: 268: time[i] = I2C_Master_Read(1);
  7044  001DF2  5004               	movf	read_time@i,w,c
  7045  001DF4  0D01               	mullw	1
  7046  001DF6  0EB6               	movlw	low _time
  7047  001DF8  24F3               	addwf	prodl,w,c
  7048  001DFA  6ED9               	movwf	fsr2l,c
  7049  001DFC  0E00               	movlw	high _time
  7050  001DFE  20F4               	addwfc	prodh,w,c
  7051  001E00  6EDA               	movwf	fsr2h,c
  7052  001E02  0E01               	movlw	1
  7053  001E04  EC5E  F011         	call	i2_I2C_Master_Read
  7054  001E08  6EDF               	movwf	indf2,c
  7055  001E0A  2A04               	incf	read_time@i,f,c
  7056  001E0C  D7EE               	goto	i2l3692
  7057  001E0E                     i2l3702:
  7058                           
  7059                           ;main.c: 269: }
  7060                           ;main.c: 270: time[6] = I2C_Master_Read(0);
  7061  001E0E  0E00               	movlw	0
  7062  001E10  EC5E  F011         	call	i2_I2C_Master_Read
  7063  001E14  0100               	movlb	0	; () banked
  7064  001E16  6FBC               	movwf	(_time+6)& (0+255),b
  7065                           
  7066                           ;main.c: 271: I2C_Master_Stop();
  7067  001E18  ECFF  F011         	call	i2_I2C_Master_Stop	;wreg free
  7068  001E1C  0012               	return	
  7069  001E1E                     __end_of_read_time:
  7070                           	opt stack 0
  7071                           pclatu	equ	0xFFB
  7072                           pclath	equ	0xFFA
  7073                           tblptru	equ	0xFF8
  7074                           tblptrh	equ	0xFF7
  7075                           tblptrl	equ	0xFF6
  7076                           tablat	equ	0xFF5
  7077                           prodh	equ	0xFF4
  7078                           prodl	equ	0xFF3
  7079                           intcon	equ	0xFF2
  7080                           intcon2	equ	0xFF1
  7081                           intcon3	equ	0xFF0
  7082                           postinc0	equ	0xFEE
  7083                           fsr0h	equ	0xFEA
  7084                           fsr0l	equ	0xFE9
  7085                           wreg	equ	0xFE8
  7086                           fsr1h	equ	0xFE2
  7087                           fsr1l	equ	0xFE1
  7088                           indf2	equ	0xFDF
  7089                           postinc2	equ	0xFDE
  7090                           postdec2	equ	0xFDD
  7091                           fsr2h	equ	0xFDA
  7092                           fsr2l	equ	0xFD9
  7093                           status	equ	0xFD8
  7094                           
  7095 ;; *************** function i2_I2C_Master_Write *****************
  7096 ;; Defined at:
  7097 ;;		line 47 in file "I2C.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;  d               2    1[COMRAM] unsigned int 
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;		None
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, status,2, status,0, cstack
  7106 ;; Tracked objects:
  7107 ;;		On entry : 0/0
  7108 ;;		On exit  : 0/0
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7115 ;;Total ram usage:        2 bytes
  7116 ;; Hardware stack levels used:    1
  7117 ;; Hardware stack levels required when called:    1
  7118 ;; This function calls:
  7119 ;;		i2_I2C_Master_Wait
  7120 ;; This function is called by:
  7121 ;;		_read_time
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           	psect	text35
  7126  0023E4                     __ptext35:
  7127                           	opt stack 0
  7128  0023E4                     i2_I2C_Master_Write:
  7129                           	opt stack 23
  7130                           
  7131                           ;I2C.c: 49: I2C_Master_Wait();
  7132                           
  7133                           ;incstack = 0
  7134  0023E4  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7135                           
  7136                           ;I2C.c: 50: SSPBUF = d;
  7137  0023E8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  7138  0023EC  0012               	return		;funcret
  7139  0023EE                     __end_ofi2_I2C_Master_Write:
  7140                           	opt stack 0
  7141                           pclatu	equ	0xFFB
  7142                           pclath	equ	0xFFA
  7143                           tblptru	equ	0xFF8
  7144                           tblptrh	equ	0xFF7
  7145                           tblptrl	equ	0xFF6
  7146                           tablat	equ	0xFF5
  7147                           prodh	equ	0xFF4
  7148                           prodl	equ	0xFF3
  7149                           intcon	equ	0xFF2
  7150                           intcon2	equ	0xFF1
  7151                           intcon3	equ	0xFF0
  7152                           postinc0	equ	0xFEE
  7153                           fsr0h	equ	0xFEA
  7154                           fsr0l	equ	0xFE9
  7155                           wreg	equ	0xFE8
  7156                           fsr1h	equ	0xFE2
  7157                           fsr1l	equ	0xFE1
  7158                           indf2	equ	0xFDF
  7159                           postinc2	equ	0xFDE
  7160                           postdec2	equ	0xFDD
  7161                           fsr2h	equ	0xFDA
  7162                           fsr2l	equ	0xFD9
  7163                           status	equ	0xFD8
  7164                           
  7165 ;; *************** function i2_I2C_Master_Stop *****************
  7166 ;; Defined at:
  7167 ;;		line 41 in file "I2C.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;		None
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;		None
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, cstack
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;Total ram usage:        0 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    1
  7188 ;; This function calls:
  7189 ;;		i2_I2C_Master_Wait
  7190 ;; This function is called by:
  7191 ;;		_read_time
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	text36
  7196  0023FE                     __ptext36:
  7197                           	opt stack 0
  7198  0023FE                     i2_I2C_Master_Stop:
  7199                           	opt stack 23
  7200                           
  7201                           ;I2C.c: 43: I2C_Master_Wait();
  7202                           
  7203                           ;incstack = 0
  7204  0023FE  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7205                           
  7206                           ;I2C.c: 44: PEN = 1;
  7207  002402  84C5               	bsf	4037,2,c	;volatile
  7208  002404  0012               	return		;funcret
  7209  002406                     __end_ofi2_I2C_Master_Stop:
  7210                           	opt stack 0
  7211                           pclatu	equ	0xFFB
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           intcon3	equ	0xFF0
  7222                           postinc0	equ	0xFEE
  7223                           fsr0h	equ	0xFEA
  7224                           fsr0l	equ	0xFE9
  7225                           wreg	equ	0xFE8
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function i2_I2C_Master_Start *****************
  7236 ;; Defined at:
  7237 ;;		line 29 in file "I2C.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg, status,2, status,0, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;Total ram usage:        0 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    1
  7258 ;; This function calls:
  7259 ;;		i2_I2C_Master_Wait
  7260 ;; This function is called by:
  7261 ;;		_read_time
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           	psect	text37
  7266  002406                     __ptext37:
  7267                           	opt stack 0
  7268  002406                     i2_I2C_Master_Start:
  7269                           	opt stack 23
  7270                           
  7271                           ;I2C.c: 31: I2C_Master_Wait();
  7272                           
  7273                           ;incstack = 0
  7274  002406  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7275                           
  7276                           ;I2C.c: 32: SEN = 1;
  7277  00240A  80C5               	bsf	4037,0,c	;volatile
  7278  00240C  0012               	return		;funcret
  7279  00240E                     __end_ofi2_I2C_Master_Start:
  7280                           	opt stack 0
  7281                           pclatu	equ	0xFFB
  7282                           pclath	equ	0xFFA
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           intcon	equ	0xFF2
  7290                           intcon2	equ	0xFF1
  7291                           intcon3	equ	0xFF0
  7292                           postinc0	equ	0xFEE
  7293                           fsr0h	equ	0xFEA
  7294                           fsr0l	equ	0xFE9
  7295                           wreg	equ	0xFE8
  7296                           fsr1h	equ	0xFE2
  7297                           fsr1l	equ	0xFE1
  7298                           indf2	equ	0xFDF
  7299                           postinc2	equ	0xFDE
  7300                           postdec2	equ	0xFDD
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305 ;; *************** function i2_I2C_Master_Read *****************
  7306 ;; Defined at:
  7307 ;;		line 53 in file "I2C.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  a               1    wreg     unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  a               1    1[COMRAM] unsigned char 
  7312 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      unsigned char 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    1
  7329 ;; This function calls:
  7330 ;;		i2_I2C_Master_Wait
  7331 ;; This function is called by:
  7332 ;;		_read_time
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text38
  7337  0022BC                     __ptext38:
  7338                           	opt stack 0
  7339  0022BC                     i2_I2C_Master_Read:
  7340                           	opt stack 23
  7341                           
  7342                           ;incstack = 0
  7343                           ;i2I2C_Master_Read@a stored from wreg
  7344  0022BC  6E02               	movwf	i2I2C_Master_Read@a,c
  7345                           
  7346                           ;I2C.c: 55: unsigned char temp;
  7347                           ;I2C.c: 56: I2C_Master_Wait();
  7348  0022BE  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7349                           
  7350                           ;I2C.c: 57: RCEN = 1;
  7351  0022C2  86C5               	bsf	4037,3,c	;volatile
  7352                           
  7353                           ;I2C.c: 58: I2C_Master_Wait();
  7354  0022C4  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7355                           
  7356                           ;I2C.c: 59: temp = SSPBUF;
  7357  0022C8  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  7358                           
  7359                           ;I2C.c: 60: I2C_Master_Wait();
  7360  0022CC  ECC8  F011         	call	i2_I2C_Master_Wait	;wreg free
  7361                           
  7362                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7363  0022D0  5002               	movf	i2I2C_Master_Read@a,w,c
  7364  0022D2  A4D8               	btfss	status,2,c
  7365  0022D4  D002               	goto	i2u324_40
  7366  0022D6  8AC5               	bsf	4037,5,c	;volatile
  7367  0022D8  D001               	goto	i2l3480
  7368  0022DA                     i2u324_40:
  7369  0022DA  9AC5               	bcf	4037,5,c	;volatile
  7370  0022DC                     i2l3480:
  7371                           
  7372                           ;I2C.c: 62: ACKEN = 1;
  7373  0022DC  88C5               	bsf	4037,4,c	;volatile
  7374                           
  7375                           ;I2C.c: 63: return temp;
  7376  0022DE  5003               	movf	i2I2C_Master_Read@temp,w,c
  7377  0022E0  0012               	return	
  7378  0022E2                     __end_ofi2_I2C_Master_Read:
  7379                           	opt stack 0
  7380                           pclatu	equ	0xFFB
  7381                           pclath	equ	0xFFA
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           intcon2	equ	0xFF1
  7390                           intcon3	equ	0xFF0
  7391                           postinc0	equ	0xFEE
  7392                           fsr0h	equ	0xFEA
  7393                           fsr0l	equ	0xFE9
  7394                           wreg	equ	0xFE8
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           postdec2	equ	0xFDD
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404 ;; *************** function i2_I2C_Master_Wait *****************
  7405 ;; Defined at:
  7406 ;;		line 24 in file "I2C.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, status,2, status,0
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;Total ram usage:        1 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		i2_I2C_Master_Start
  7430 ;;		i2_I2C_Master_Stop
  7431 ;;		i2_I2C_Master_Write
  7432 ;;		i2_I2C_Master_Read
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           	psect	text39
  7437  002390                     __ptext39:
  7438                           	opt stack 0
  7439  002390                     i2_I2C_Master_Wait:
  7440                           	opt stack 23
  7441  002390                     i2l34:
  7442  002390  B4C7               	btfsc	4039,2,c	;volatile
  7443  002392  D7FE               	goto	i2l34
  7444  002394  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  7445  002398  0E1F               	movlw	31
  7446  00239A  1601               	andwf	??i2_I2C_Master_Wait,f,c
  7447  00239C  B4D8               	btfsc	status,2,c
  7448  00239E  0012               	return	
  7449  0023A0  D7F7               	goto	i2l34
  7450  0023A2                     __end_ofi2_I2C_Master_Wait:
  7451                           	opt stack 0
  7452                           pclatu	equ	0xFFB
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon2	equ	0xFF1
  7462                           intcon3	equ	0xFF0
  7463                           postinc0	equ	0xFEE
  7464                           fsr0h	equ	0xFEA
  7465                           fsr0l	equ	0xFE9
  7466                           wreg	equ	0xFE8
  7467                           fsr1h	equ	0xFE2
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function _dec_to_hex *****************
  7477 ;; Defined at:
  7478 ;;		line 218 in file "main.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  num             2   98[COMRAM] int 
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  quotient        2  112[COMRAM] int 
  7483 ;;  hexnum          2  110[COMRAM] int 
  7484 ;;  i               2  108[COMRAM] int 
  7485 ;;  temp            2  106[COMRAM] int 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  2   98[COMRAM] int 
  7488 ;; Registers used:
  7489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;Total ram usage:       16 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    5
  7502 ;; This function calls:
  7503 ;;		___awdiv
  7504 ;;		___awtoft
  7505 ;;		___ftadd
  7506 ;;		___ftmul
  7507 ;;		___fttol
  7508 ;;		_pow
  7509 ;; This function is called by:
  7510 ;;		_isr
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text40
  7515  001176                     __ptext40:
  7516                           	opt stack 0
  7517  001176                     _dec_to_hex:
  7518                           	opt stack 20
  7519                           
  7520                           ;main.c: 219: int i = 0, quotient = num, temp, hexnum = 0;
  7521                           
  7522                           ;incstack = 0
  7523  001176  0E00               	movlw	0
  7524  001178  6E6E               	movwf	dec_to_hex@i+1,c
  7525  00117A  0E00               	movlw	0
  7526  00117C  6E6D               	movwf	dec_to_hex@i,c
  7527  00117E  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  7528  001182  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  7529  001186  0E00               	movlw	0
  7530  001188  6E70               	movwf	dec_to_hex@hexnum+1,c
  7531  00118A  0E00               	movlw	0
  7532  00118C  6E6F               	movwf	dec_to_hex@hexnum,c
  7533                           
  7534                           ;main.c: 221: while (quotient != 0) {
  7535  00118E  D068               	goto	i2l3722
  7536  001190                     i2l3710:
  7537                           
  7538                           ;main.c: 222: temp = quotient % 16;
  7539  001190  0E0F               	movlw	15
  7540  001192  1471               	andwf	dec_to_hex@quotient,w,c
  7541  001194  6E6B               	movwf	dec_to_hex@temp,c
  7542  001196  6A6C               	clrf	dec_to_hex@temp+1,c
  7543                           
  7544                           ;main.c: 224: hexnum += temp*pow(10,i);
  7545  001198  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  7546  00119C  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  7547  0011A0  ECC5  F010         	call	___awtoft	;wreg free
  7548  0011A4  C009  F065         	movff	?___awtoft,_dec_to_hex$1123
  7549  0011A8  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1123+1
  7550  0011AC  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1123+2
  7551                           
  7552                           ;main.c: 224: hexnum += temp*pow(10,i);
  7553  0011B0  C065  F055         	movff	_dec_to_hex$1123,pow@y
  7554  0011B4  C066  F056         	movff	_dec_to_hex$1123+1,pow@y+1
  7555  0011B8  C067  F057         	movff	_dec_to_hex$1123+2,pow@y+2
  7556  0011BC  0E00               	movlw	0
  7557  0011BE  6E52               	movwf	pow@x,c
  7558  0011C0  0E20               	movlw	32
  7559  0011C2  6E53               	movwf	pow@x+1,c
  7560  0011C4  0E41               	movlw	65
  7561  0011C6  6E54               	movwf	pow@x+2,c
  7562  0011C8  EC4C  F006         	call	_pow	;wreg free
  7563  0011CC  C052  F068         	movff	?_pow,_dec_to_hex$1124
  7564  0011D0  C053  F069         	movff	?_pow+1,_dec_to_hex$1124+1
  7565  0011D4  C054  F06A         	movff	?_pow+2,_dec_to_hex$1124+2
  7566                           
  7567                           ;main.c: 224: hexnum += temp*pow(10,i);
  7568  0011D8  C068  F010         	movff	_dec_to_hex$1124,___ftmul@f2
  7569  0011DC  C069  F011         	movff	_dec_to_hex$1124+1,___ftmul@f2+1
  7570  0011E0  C06A  F012         	movff	_dec_to_hex$1124+2,___ftmul@f2+2
  7571  0011E4  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  7572  0011E8  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  7573  0011EC  ECC5  F010         	call	___awtoft	;wreg free
  7574  0011F0  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7575  0011F4  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7576  0011F8  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7577  0011FC  ECB3  F009         	call	___ftmul	;wreg free
  7578  001200  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  7579  001204  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  7580  001208  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  7581  00120C  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  7582  001210  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  7583  001214  ECC5  F010         	call	___awtoft	;wreg free
  7584  001218  C009  F01C         	movff	?___awtoft,___ftadd@f1
  7585  00121C  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  7586  001220  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  7587  001224  EC76  F005         	call	___ftadd	;wreg free
  7588  001228  C01C  F028         	movff	?___ftadd,___fttol@f1
  7589  00122C  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  7590  001230  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  7591  001234  EC39  F009         	call	___fttol	;wreg free
  7592  001238  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  7593  00123C  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  7594                           
  7595                           ;main.c: 226: quotient = quotient / 16;
  7596  001240  C071  F001         	movff	dec_to_hex@quotient,___awdiv@dividend
  7597  001244  C072  F002         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  7598  001248  0E00               	movlw	0
  7599  00124A  6E04               	movwf	___awdiv@divisor+1,c
  7600  00124C  0E10               	movlw	16
  7601  00124E  6E03               	movwf	___awdiv@divisor,c
  7602  001250  EC21  F00E         	call	___awdiv	;wreg free
  7603  001254  C001  F071         	movff	?___awdiv,dec_to_hex@quotient
  7604  001258  C002  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  7605                           
  7606                           ;main.c: 227: i += 1;
  7607  00125C  4A6D               	infsnz	dec_to_hex@i,f,c
  7608  00125E  2A6E               	incf	dec_to_hex@i+1,f,c
  7609  001260                     i2l3722:
  7610  001260  5071               	movf	dec_to_hex@quotient,w,c
  7611  001262  1072               	iorwf	dec_to_hex@quotient+1,w,c
  7612  001264  A4D8               	btfss	status,2,c
  7613  001266  D794               	goto	i2l3710
  7614                           
  7615                           ;main.c: 228: }
  7616                           ;main.c: 229: return hexnum;
  7617  001268  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  7618  00126C  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  7619  001270  0012               	return		;funcret
  7620  001272                     __end_of_dec_to_hex:
  7621                           	opt stack 0
  7622                           pclatu	equ	0xFFB
  7623                           pclath	equ	0xFFA
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           intcon2	equ	0xFF1
  7632                           intcon3	equ	0xFF0
  7633                           postinc0	equ	0xFEE
  7634                           fsr0h	equ	0xFEA
  7635                           fsr0l	equ	0xFE9
  7636                           wreg	equ	0xFE8
  7637                           fsr1h	equ	0xFE2
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function _pow *****************
  7647 ;; Defined at:
  7648 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  x               3   81[COMRAM] int 
  7651 ;;  y               3   84[COMRAM] int 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  yi              4   94[COMRAM] unsigned long 
  7654 ;;  sign            1   93[COMRAM] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  3   81[COMRAM] unsigned char 
  7657 ;; Registers used:
  7658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7664 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;Total ram usage:       17 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    4
  7671 ;; This function calls:
  7672 ;;		___ftge
  7673 ;;		___ftmul
  7674 ;;		___ftneg
  7675 ;;		___fttol
  7676 ;;		___lltoft
  7677 ;;		_exp
  7678 ;;		_log
  7679 ;; This function is called by:
  7680 ;;		_dec_to_hex
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           	psect	text41
  7685  000C98                     __ptext41:
  7686                           	opt stack 0
  7687  000C98                     _pow:
  7688                           	opt stack 20
  7689                           
  7690                           ;incstack = 0
  7691  000C98  0E00               	movlw	0
  7692  000C9A  6E5E               	movwf	pow@sign,c
  7693  000C9C  5052               	movf	pow@x,w,c
  7694  000C9E  1053               	iorwf	pow@x+1,w,c
  7695  000CA0  1054               	iorwf	pow@x+2,w,c
  7696  000CA2  A4D8               	btfss	status,2,c
  7697  000CA4  D01B               	goto	i2l3328
  7698  000CA6  0E00               	movlw	0
  7699  000CA8  6E01               	movwf	___ftge@ff1,c
  7700  000CAA  0E00               	movlw	0
  7701  000CAC  6E02               	movwf	___ftge@ff1+1,c
  7702  000CAE  0E00               	movlw	0
  7703  000CB0  6E03               	movwf	___ftge@ff1+2,c
  7704  000CB2  C055  F004         	movff	pow@y,___ftge@ff2
  7705  000CB6  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  7706  000CBA  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  7707  000CBE  ECD9  F00D         	call	___ftge	;wreg free
  7708  000CC2  A0D8               	btfss	status,0,c
  7709  000CC4  D004               	goto	i2l810
  7710  000CC6  0E00               	movlw	0
  7711  000CC8  6E79               	movwf	_errno+1,c
  7712  000CCA  0E21               	movlw	33
  7713  000CCC  6E78               	movwf	_errno,c
  7714  000CCE                     i2l810:
  7715  000CCE  0E00               	movlw	0
  7716  000CD0  6E52               	movwf	?_pow,c
  7717  000CD2  0E00               	movlw	0
  7718  000CD4  6E53               	movwf	?_pow+1,c
  7719  000CD6  0E00               	movlw	0
  7720  000CD8  6E54               	movwf	?_pow+2,c
  7721  000CDA  0012               	return	
  7722  000CDC                     i2l3328:
  7723  000CDC  5055               	movf	pow@y,w,c
  7724  000CDE  1056               	iorwf	pow@y+1,w,c
  7725  000CE0  1057               	iorwf	pow@y+2,w,c
  7726  000CE2  A4D8               	btfss	status,2,c
  7727  000CE4  D007               	goto	i2l3334
  7728  000CE6  0E00               	movlw	0
  7729  000CE8  6E52               	movwf	?_pow,c
  7730  000CEA  0E80               	movlw	128
  7731  000CEC  6E53               	movwf	?_pow+1,c
  7732  000CEE  0E3F               	movlw	63
  7733  000CF0  6E54               	movwf	?_pow+2,c
  7734  000CF2  0012               	return	
  7735  000CF4                     i2l3334:
  7736  000CF4  AE54               	btfss	pow@x+2,7,c
  7737  000CF6  D040               	goto	i2l3346
  7738  000CF8  C055  F028         	movff	pow@y,___fttol@f1
  7739  000CFC  C056  F029         	movff	pow@y+1,___fttol@f1+1
  7740  000D00  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  7741  000D04  EC39  F009         	call	___fttol	;wreg free
  7742  000D08  C028  F05F         	movff	?___fttol,pow@yi
  7743  000D0C  C029  F060         	movff	?___fttol+1,pow@yi+1
  7744  000D10  C02A  F061         	movff	?___fttol+2,pow@yi+2
  7745  000D14  C02B  F062         	movff	?___fttol+3,pow@yi+3
  7746  000D18  C05F  F009         	movff	pow@yi,___lltoft@c
  7747  000D1C  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  7748  000D20  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  7749  000D24  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  7750  000D28  ECA0  F00F         	call	___lltoft	;wreg free
  7751  000D2C  5055               	movf	pow@y,w,c
  7752  000D2E  1809               	xorwf	?___lltoft,w,c
  7753  000D30  E107               	bnz	i2u307_40
  7754  000D32  5056               	movf	pow@y+1,w,c
  7755  000D34  180A               	xorwf	?___lltoft+1,w,c
  7756  000D36  E104               	bnz	i2u307_40
  7757  000D38  5057               	movf	pow@y+2,w,c
  7758  000D3A  180B               	xorwf	?___lltoft+2,w,c
  7759  000D3C  B4D8               	btfsc	status,2,c
  7760  000D3E  D00B               	goto	i2l3342
  7761  000D40                     i2u307_40:
  7762  000D40  0E00               	movlw	0
  7763  000D42  6E79               	movwf	_errno+1,c
  7764  000D44  0E21               	movlw	33
  7765  000D46  6E78               	movwf	_errno,c
  7766  000D48  0E00               	movlw	0
  7767  000D4A  6E52               	movwf	?_pow,c
  7768  000D4C  0E00               	movlw	0
  7769  000D4E  6E53               	movwf	?_pow+1,c
  7770  000D50  0E00               	movlw	0
  7771  000D52  6E54               	movwf	?_pow+2,c
  7772  000D54  0012               	return	
  7773  000D56                     i2l3342:
  7774  000D56  505F               	movf	pow@yi,w,c
  7775  000D58  0B01               	andlw	1
  7776  000D5A  6E5E               	movwf	pow@sign,c
  7777  000D5C  C052  F001         	movff	pow@x,___ftneg@f1
  7778  000D60  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  7779  000D64  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  7780  000D68  EC84  F011         	call	___ftneg	;wreg free
  7781  000D6C  C001  F052         	movff	?___ftneg,pow@x
  7782  000D70  C002  F053         	movff	?___ftneg+1,pow@x+1
  7783  000D74  C003  F054         	movff	?___ftneg+2,pow@x+2
  7784  000D78                     i2l3346:
  7785  000D78  C052  F034         	movff	pow@x,log@x
  7786  000D7C  C053  F035         	movff	pow@x+1,log@x+1
  7787  000D80  C054  F036         	movff	pow@x+2,log@x+2
  7788  000D84  ECAB  F007         	call	_log	;wreg free
  7789  000D88  C034  F058         	movff	?_log,_pow$1125
  7790  000D8C  C035  F059         	movff	?_log+1,_pow$1125+1
  7791  000D90  C036  F05A         	movff	?_log+2,_pow$1125+2
  7792  000D94  C058  F00D         	movff	_pow$1125,___ftmul@f1
  7793  000D98  C059  F00E         	movff	_pow$1125+1,___ftmul@f1+1
  7794  000D9C  C05A  F00F         	movff	_pow$1125+2,___ftmul@f1+2
  7795  000DA0  C055  F010         	movff	pow@y,___ftmul@f2
  7796  000DA4  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  7797  000DA8  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  7798  000DAC  ECB3  F009         	call	___ftmul	;wreg free
  7799  000DB0  C00D  F05B         	movff	?___ftmul,_pow$1126
  7800  000DB4  C00E  F05C         	movff	?___ftmul+1,_pow$1126+1
  7801  000DB8  C00F  F05D         	movff	?___ftmul+2,_pow$1126+2
  7802  000DBC  C05B  F049         	movff	_pow$1126,exp@x
  7803  000DC0  C05C  F04A         	movff	_pow$1126+1,exp@x+1
  7804  000DC4  C05D  F04B         	movff	_pow$1126+2,exp@x+2
  7805  000DC8  EC84  F004         	call	_exp	;wreg free
  7806  000DCC  C049  F052         	movff	?_exp,pow@x
  7807  000DD0  C04A  F053         	movff	?_exp+1,pow@x+1
  7808  000DD4  C04B  F054         	movff	?_exp+2,pow@x+2
  7809  000DD8  505E               	movf	pow@sign,w,c
  7810  000DDA  B4D8               	btfsc	status,2,c
  7811  000DDC  D00F               	goto	i2l815
  7812  000DDE  C052  F001         	movff	pow@x,___ftneg@f1
  7813  000DE2  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  7814  000DE6  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  7815  000DEA  EC84  F011         	call	___ftneg	;wreg free
  7816  000DEE  C001  F052         	movff	?___ftneg,?_pow
  7817  000DF2  C002  F053         	movff	?___ftneg+1,?_pow+1
  7818  000DF6  C003  F054         	movff	?___ftneg+2,?_pow+2
  7819  000DFA  0012               	return	
  7820  000DFC                     i2l815:
  7821  000DFC  C052  F052         	movff	pow@x,?_pow
  7822  000E00  C053  F053         	movff	pow@x+1,?_pow+1
  7823  000E04  C054  F054         	movff	pow@x+2,?_pow+2
  7824  000E08  0012               	return		;funcret
  7825  000E0A                     __end_of_pow:
  7826                           	opt stack 0
  7827                           pclatu	equ	0xFFB
  7828                           pclath	equ	0xFFA
  7829                           tblptru	equ	0xFF8
  7830                           tblptrh	equ	0xFF7
  7831                           tblptrl	equ	0xFF6
  7832                           tablat	equ	0xFF5
  7833                           prodh	equ	0xFF4
  7834                           prodl	equ	0xFF3
  7835                           intcon	equ	0xFF2
  7836                           intcon2	equ	0xFF1
  7837                           intcon3	equ	0xFF0
  7838                           postinc0	equ	0xFEE
  7839                           fsr0h	equ	0xFEA
  7840                           fsr0l	equ	0xFE9
  7841                           wreg	equ	0xFE8
  7842                           fsr1h	equ	0xFE2
  7843                           fsr1l	equ	0xFE1
  7844                           indf2	equ	0xFDF
  7845                           postinc2	equ	0xFDE
  7846                           postdec2	equ	0xFDD
  7847                           fsr2h	equ	0xFDA
  7848                           fsr2l	equ	0xFD9
  7849                           status	equ	0xFD8
  7850                           
  7851 ;; *************** function _log *****************
  7852 ;; Defined at:
  7853 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;  x               3   51[COMRAM] unsigned char 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;  exponent        2   54[COMRAM] int 
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  3   51[COMRAM] int 
  7860 ;; Registers used:
  7861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7867 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;Total ram usage:        5 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    3
  7874 ;; This function calls:
  7875 ;;		___awtoft
  7876 ;;		___ftadd
  7877 ;;		___ftmul
  7878 ;;		_eval_poly
  7879 ;;		_frexp
  7880 ;; This function is called by:
  7881 ;;		_pow
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text42
  7886  000F56                     __ptext42:
  7887                           	opt stack 0
  7888  000F56                     _log:
  7889                           	opt stack 20
  7890                           
  7891                           ;incstack = 0
  7892  000F56  AE36               	btfss	log@x+2,7,c
  7893  000F58  D00B               	goto	i2l3076
  7894  000F5A  0E00               	movlw	0
  7895  000F5C  6E79               	movwf	_errno+1,c
  7896  000F5E  0E21               	movlw	33
  7897  000F60  6E78               	movwf	_errno,c
  7898  000F62  0E00               	movlw	0
  7899  000F64  6E34               	movwf	?_log,c
  7900  000F66  0E00               	movlw	0
  7901  000F68  6E35               	movwf	?_log+1,c
  7902  000F6A  0E00               	movlw	0
  7903  000F6C  6E36               	movwf	?_log+2,c
  7904  000F6E  0012               	return	
  7905  000F70                     i2l3076:
  7906  000F70  5034               	movf	log@x,w,c
  7907  000F72  1035               	iorwf	log@x+1,w,c
  7908  000F74  1036               	iorwf	log@x+2,w,c
  7909  000F76  A4D8               	btfss	status,2,c
  7910  000F78  D00B               	goto	i2l3082
  7911  000F7A  0E00               	movlw	0
  7912  000F7C  6E79               	movwf	_errno+1,c
  7913  000F7E  0E22               	movlw	34
  7914  000F80  6E78               	movwf	_errno,c
  7915  000F82  0E00               	movlw	0
  7916  000F84  6E34               	movwf	?_log,c
  7917  000F86  0E00               	movlw	0
  7918  000F88  6E35               	movwf	?_log+1,c
  7919  000F8A  0E00               	movlw	0
  7920  000F8C  6E36               	movwf	?_log+2,c
  7921  000F8E  0012               	return	
  7922  000F90                     i2l3082:
  7923  000F90  0E00               	movlw	0
  7924  000F92  6E10               	movwf	___ftmul@f2,c
  7925  000F94  0E00               	movlw	0
  7926  000F96  6E11               	movwf	___ftmul@f2+1,c
  7927  000F98  0E40               	movlw	64
  7928  000F9A  6E12               	movwf	___ftmul@f2+2,c
  7929  000F9C  0E37               	movlw	low log@exponent
  7930  000F9E  6E04               	movwf	frexp@eptr,c
  7931  000FA0  0E00               	movlw	high log@exponent
  7932  000FA2  6E05               	movwf	frexp@eptr+1,c
  7933  000FA4  C034  F001         	movff	log@x,frexp@value
  7934  000FA8  C035  F002         	movff	log@x+1,frexp@value+1
  7935  000FAC  C036  F003         	movff	log@x+2,frexp@value+2
  7936  000FB0  EC91  F00D         	call	_frexp	;wreg free
  7937  000FB4  C001  F00D         	movff	?_frexp,___ftmul@f1
  7938  000FB8  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  7939  000FBC  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  7940  000FC0  ECB3  F009         	call	___ftmul	;wreg free
  7941  000FC4  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  7942  000FC8  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  7943  000FCC  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  7944  000FD0  0E00               	movlw	0
  7945  000FD2  6E1F               	movwf	___ftadd@f2,c
  7946  000FD4  0E80               	movlw	128
  7947  000FD6  6E20               	movwf	___ftadd@f2+1,c
  7948  000FD8  0EBF               	movlw	191
  7949  000FDA  6E21               	movwf	___ftadd@f2+2,c
  7950  000FDC  EC76  F005         	call	___ftadd	;wreg free
  7951  000FE0  C01C  F034         	movff	?___ftadd,log@x
  7952  000FE4  C01D  F035         	movff	?___ftadd+1,log@x+1
  7953  000FE8  C01E  F036         	movff	?___ftadd+2,log@x+2
  7954  000FEC  0637               	decf	log@exponent,f,c
  7955  000FEE  A0D8               	btfss	status,0,c
  7956  000FF0  0638               	decf	log@exponent+1,f,c
  7957  000FF2  C034  F028         	movff	log@x,eval_poly@x
  7958  000FF6  C035  F029         	movff	log@x+1,eval_poly@x+1
  7959  000FFA  C036  F02A         	movff	log@x+2,eval_poly@x+2
  7960  000FFE  0E37               	movlw	low log@coeff
  7961  001000  6E2B               	movwf	eval_poly@d,c
  7962  001002  0EFE               	movlw	high log@coeff
  7963  001004  6E2C               	movwf	eval_poly@d+1,c
  7964  001006  0E00               	movlw	0
  7965  001008  6E2E               	movwf	eval_poly@n+1,c
  7966  00100A  0E08               	movlw	8
  7967  00100C  6E2D               	movwf	eval_poly@n,c
  7968  00100E  EC78  F00B         	call	_eval_poly	;wreg free
  7969  001012  C028  F034         	movff	?_eval_poly,log@x
  7970  001016  C029  F035         	movff	?_eval_poly+1,log@x+1
  7971  00101A  C02A  F036         	movff	?_eval_poly+2,log@x+2
  7972  00101E  0E72               	movlw	114
  7973  001020  6E10               	movwf	___ftmul@f2,c
  7974  001022  0E31               	movlw	49
  7975  001024  6E11               	movwf	___ftmul@f2+1,c
  7976  001026  0E3F               	movlw	63
  7977  001028  6E12               	movwf	___ftmul@f2+2,c
  7978  00102A  C037  F009         	movff	log@exponent,___awtoft@c
  7979  00102E  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  7980  001032  ECC5  F010         	call	___awtoft	;wreg free
  7981  001036  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7982  00103A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7983  00103E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7984  001042  ECB3  F009         	call	___ftmul	;wreg free
  7985  001046  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  7986  00104A  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  7987  00104E  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  7988  001052  C034  F01F         	movff	log@x,___ftadd@f2
  7989  001056  C035  F020         	movff	log@x+1,___ftadd@f2+1
  7990  00105A  C036  F021         	movff	log@x+2,___ftadd@f2+2
  7991  00105E  EC76  F005         	call	___ftadd	;wreg free
  7992  001062  C01C  F034         	movff	?___ftadd,?_log
  7993  001066  C01D  F035         	movff	?___ftadd+1,?_log+1
  7994  00106A  C01E  F036         	movff	?___ftadd+2,?_log+2
  7995  00106E  0012               	return	
  7996  001070                     __end_of_log:
  7997                           	opt stack 0
  7998                           pclatu	equ	0xFFB
  7999                           pclath	equ	0xFFA
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           intcon2	equ	0xFF1
  8008                           intcon3	equ	0xFF0
  8009                           postinc0	equ	0xFEE
  8010                           fsr0h	equ	0xFEA
  8011                           fsr0l	equ	0xFE9
  8012                           wreg	equ	0xFE8
  8013                           fsr1h	equ	0xFE2
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function _exp *****************
  8023 ;; Defined at:
  8024 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  x               3   72[COMRAM] int 
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;  exponent        2   78[COMRAM] int 
  8029 ;;  sign            1   80[COMRAM] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  3   72[COMRAM] unsigned char 
  8032 ;; Registers used:
  8033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8039 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;Total ram usage:        9 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    3
  8046 ;; This function calls:
  8047 ;;		___awtoft
  8048 ;;		___ftdiv
  8049 ;;		___ftge
  8050 ;;		___ftmul
  8051 ;;		___ftneg
  8052 ;;		___ftsub
  8053 ;;		___fttol
  8054 ;;		_eval_poly
  8055 ;;		_floor
  8056 ;;		_ldexp
  8057 ;; This function is called by:
  8058 ;;		_pow
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text43
  8063  000908                     __ptext43:
  8064                           	opt stack 0
  8065  000908                     _exp:
  8066                           	opt stack 20
  8067                           
  8068                           ;incstack = 0
  8069  000908  5049               	movf	exp@x,w,c
  8070  00090A  104A               	iorwf	exp@x+1,w,c
  8071  00090C  104B               	iorwf	exp@x+2,w,c
  8072  00090E  A4D8               	btfss	status,2,c
  8073  000910  D007               	goto	i2l3098
  8074  000912  0E00               	movlw	0
  8075  000914  6E49               	movwf	?_exp,c
  8076  000916  0E80               	movlw	128
  8077  000918  6E4A               	movwf	?_exp+1,c
  8078  00091A  0E3F               	movlw	63
  8079  00091C  6E4B               	movwf	?_exp+2,c
  8080  00091E  0012               	return	
  8081  000920                     i2l3098:
  8082  000920  0E72               	movlw	114
  8083  000922  6E01               	movwf	___ftge@ff1,c
  8084  000924  0E31               	movlw	49
  8085  000926  6E02               	movwf	___ftge@ff1+1,c
  8086  000928  0E44               	movlw	68
  8087  00092A  6E03               	movwf	___ftge@ff1+2,c
  8088  00092C  C049  F004         	movff	exp@x,___ftge@ff2
  8089  000930  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  8090  000934  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  8091  000938  ECD9  F00D         	call	___ftge	;wreg free
  8092  00093C  B0D8               	btfsc	status,0,c
  8093  00093E  D00B               	goto	i2l3104
  8094  000940  0E00               	movlw	0
  8095  000942  6E79               	movwf	_errno+1,c
  8096  000944  0E22               	movlw	34
  8097  000946  6E78               	movwf	_errno,c
  8098  000948  0EFF               	movlw	255
  8099  00094A  6E49               	movwf	?_exp,c
  8100  00094C  0E7F               	movlw	127
  8101  00094E  6E4A               	movwf	?_exp+1,c
  8102  000950  0E7F               	movlw	127
  8103  000952  6E4B               	movwf	?_exp+2,c
  8104  000954  0012               	return	
  8105  000956                     i2l3104:
  8106  000956  C049  F001         	movff	exp@x,___ftge@ff1
  8107  00095A  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  8108  00095E  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  8109  000962  0E49               	movlw	73
  8110  000964  6E04               	movwf	___ftge@ff2,c
  8111  000966  0E3A               	movlw	58
  8112  000968  6E05               	movwf	___ftge@ff2+1,c
  8113  00096A  0EC4               	movlw	196
  8114  00096C  6E06               	movwf	___ftge@ff2+2,c
  8115  00096E  ECD9  F00D         	call	___ftge	;wreg free
  8116  000972  B0D8               	btfsc	status,0,c
  8117  000974  D00B               	goto	i2l3110
  8118  000976  0E00               	movlw	0
  8119  000978  6E79               	movwf	_errno+1,c
  8120  00097A  0E22               	movlw	34
  8121  00097C  6E78               	movwf	_errno,c
  8122  00097E  0E00               	movlw	0
  8123  000980  6E49               	movwf	?_exp,c
  8124  000982  0E00               	movlw	0
  8125  000984  6E4A               	movwf	?_exp+1,c
  8126  000986  0E00               	movlw	0
  8127  000988  6E4B               	movwf	?_exp+2,c
  8128  00098A  0012               	return	
  8129  00098C                     i2l3110:
  8130  00098C  AE4B               	btfss	exp@x+2,7,c
  8131  00098E  D002               	goto	i2u271_40
  8132  000990  0E01               	movlw	1
  8133  000992  D001               	goto	i2u272_40
  8134  000994                     i2u271_40:
  8135  000994  0E00               	movlw	0
  8136  000996                     i2u272_40:
  8137  000996  6E51               	movwf	exp@sign,c
  8138  000998  5051               	movf	exp@sign,w,c
  8139  00099A  B4D8               	btfsc	status,2,c
  8140  00099C  D00E               	goto	i2l973
  8141  00099E  C049  F001         	movff	exp@x,___ftneg@f1
  8142  0009A2  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  8143  0009A6  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  8144  0009AA  EC84  F011         	call	___ftneg	;wreg free
  8145  0009AE  C001  F049         	movff	?___ftneg,exp@x
  8146  0009B2  C002  F04A         	movff	?___ftneg+1,exp@x+1
  8147  0009B6  C003  F04B         	movff	?___ftneg+2,exp@x+2
  8148  0009BA                     i2l973:
  8149  0009BA  C049  F00D         	movff	exp@x,___ftmul@f1
  8150  0009BE  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  8151  0009C2  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  8152  0009C6  0EAA               	movlw	170
  8153  0009C8  6E10               	movwf	___ftmul@f2,c
  8154  0009CA  0EB8               	movlw	184
  8155  0009CC  6E11               	movwf	___ftmul@f2+1,c
  8156  0009CE  0E3F               	movlw	63
  8157  0009D0  6E12               	movwf	___ftmul@f2+2,c
  8158  0009D2  ECB3  F009         	call	___ftmul	;wreg free
  8159  0009D6  C00D  F049         	movff	?___ftmul,exp@x
  8160  0009DA  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  8161  0009DE  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  8162  0009E2  C049  F041         	movff	exp@x,floor@x
  8163  0009E6  C04A  F042         	movff	exp@x+1,floor@x+1
  8164  0009EA  C04B  F043         	movff	exp@x+2,floor@x+2
  8165  0009EE  ECA0  F00A         	call	_floor	;wreg free
  8166  0009F2  C041  F04C         	movff	?_floor,_exp$1127
  8167  0009F6  C042  F04D         	movff	?_floor+1,_exp$1127+1
  8168  0009FA  C043  F04E         	movff	?_floor+2,_exp$1127+2
  8169  0009FE  C04C  F028         	movff	_exp$1127,___fttol@f1
  8170  000A02  C04D  F029         	movff	_exp$1127+1,___fttol@f1+1
  8171  000A06  C04E  F02A         	movff	_exp$1127+2,___fttol@f1+2
  8172  000A0A  EC39  F009         	call	___fttol	;wreg free
  8173  000A0E  C028  F04F         	movff	?___fttol,exp@exponent
  8174  000A12  C029  F050         	movff	?___fttol+1,exp@exponent+1
  8175  000A16  C049  F028         	movff	exp@x,___ftsub@f1
  8176  000A1A  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  8177  000A1E  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  8178  000A22  C04F  F009         	movff	exp@exponent,___awtoft@c
  8179  000A26  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  8180  000A2A  ECC5  F010         	call	___awtoft	;wreg free
  8181  000A2E  C009  F02B         	movff	?___awtoft,___ftsub@f2
  8182  000A32  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  8183  000A36  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  8184  000A3A  EC67  F010         	call	___ftsub	;wreg free
  8185  000A3E  C028  F049         	movff	?___ftsub,exp@x
  8186  000A42  C029  F04A         	movff	?___ftsub+1,exp@x+1
  8187  000A46  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  8188  000A4A  C049  F028         	movff	exp@x,eval_poly@x
  8189  000A4E  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  8190  000A52  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  8191  000A56  0E19               	movlw	low exp@coeff
  8192  000A58  6E2B               	movwf	eval_poly@d,c
  8193  000A5A  0EFE               	movlw	high exp@coeff
  8194  000A5C  6E2C               	movwf	eval_poly@d+1,c
  8195  000A5E  0E00               	movlw	0
  8196  000A60  6E2E               	movwf	eval_poly@n+1,c
  8197  000A62  0E09               	movlw	9
  8198  000A64  6E2D               	movwf	eval_poly@n,c
  8199  000A66  EC78  F00B         	call	_eval_poly	;wreg free
  8200  000A6A  C028  F034         	movff	?_eval_poly,ldexp@value
  8201  000A6E  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  8202  000A72  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  8203  000A76  C04F  F037         	movff	exp@exponent,ldexp@newexp
  8204  000A7A  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  8205  000A7E  ECE1  F00B         	call	_ldexp	;wreg free
  8206  000A82  C034  F049         	movff	?_ldexp,exp@x
  8207  000A86  C035  F04A         	movff	?_ldexp+1,exp@x+1
  8208  000A8A  C036  F04B         	movff	?_ldexp+2,exp@x+2
  8209  000A8E  5051               	movf	exp@sign,w,c
  8210  000A90  B4D8               	btfsc	status,2,c
  8211  000A92  D025               	goto	i2l974
  8212  000A94  2849               	incf	exp@x,w,c
  8213  000A96  E10E               	bnz	i2l3132
  8214  000A98  0E7F               	movlw	127
  8215  000A9A  184A               	xorwf	exp@x+1,w,c
  8216  000A9C  E10B               	bnz	i2l3132
  8217  000A9E  0E7F               	movlw	127
  8218  000AA0  184B               	xorwf	exp@x+2,w,c
  8219  000AA2  A4D8               	btfss	status,2,c
  8220  000AA4  D007               	goto	i2l3132
  8221  000AA6  0E00               	movlw	0
  8222  000AA8  6E49               	movwf	?_exp,c
  8223  000AAA  0E00               	movlw	0
  8224  000AAC  6E4A               	movwf	?_exp+1,c
  8225  000AAE  0E00               	movlw	0
  8226  000AB0  6E4B               	movwf	?_exp+2,c
  8227  000AB2  0012               	return	
  8228  000AB4                     i2l3132:
  8229  000AB4  0E00               	movlw	0
  8230  000AB6  6E09               	movwf	___ftdiv@f1,c
  8231  000AB8  0E80               	movlw	128
  8232  000ABA  6E0A               	movwf	___ftdiv@f1+1,c
  8233  000ABC  0E3F               	movlw	63
  8234  000ABE  6E0B               	movwf	___ftdiv@f1+2,c
  8235  000AC0  C049  F00C         	movff	exp@x,___ftdiv@f2
  8236  000AC4  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  8237  000AC8  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  8238  000ACC  EC2D  F00A         	call	___ftdiv	;wreg free
  8239  000AD0  C009  F049         	movff	?___ftdiv,?_exp
  8240  000AD4  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  8241  000AD8  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  8242  000ADC  0012               	return	
  8243  000ADE                     i2l974:
  8244  000ADE  C049  F049         	movff	exp@x,?_exp
  8245  000AE2  C04A  F04A         	movff	exp@x+1,?_exp+1
  8246  000AE6  C04B  F04B         	movff	exp@x+2,?_exp+2
  8247  000AEA  0012               	return		;funcret
  8248  000AEC                     __end_of_exp:
  8249                           	opt stack 0
  8250                           pclatu	equ	0xFFB
  8251                           pclath	equ	0xFFA
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           intcon	equ	0xFF2
  8259                           intcon2	equ	0xFF1
  8260                           intcon3	equ	0xFF0
  8261                           postinc0	equ	0xFEE
  8262                           fsr0h	equ	0xFEA
  8263                           fsr0l	equ	0xFE9
  8264                           wreg	equ	0xFE8
  8265                           fsr1h	equ	0xFE2
  8266                           fsr1l	equ	0xFE1
  8267                           indf2	equ	0xFDF
  8268                           postinc2	equ	0xFDE
  8269                           postdec2	equ	0xFDD
  8270                           fsr2h	equ	0xFDA
  8271                           fsr2l	equ	0xFD9
  8272                           status	equ	0xFD8
  8273                           
  8274 ;; *************** function _ldexp *****************
  8275 ;; Defined at:
  8276 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  value           3   51[COMRAM] unsigned char 
  8279 ;;  newexp          2   54[COMRAM] int 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;		None
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  3   51[COMRAM] int 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8291 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;Total ram usage:        7 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_exp
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text44
  8305  0017C2                     __ptext44:
  8306                           	opt stack 0
  8307  0017C2                     _ldexp:
  8308                           	opt stack 22
  8309                           
  8310                           ;incstack = 0
  8311  0017C2  5034               	movf	ldexp@value,w,c
  8312  0017C4  1035               	iorwf	ldexp@value+1,w,c
  8313  0017C6  1036               	iorwf	ldexp@value+2,w,c
  8314  0017C8  A4D8               	btfss	status,2,c
  8315  0017CA  D007               	goto	i2l2966
  8316  0017CC  0E00               	movlw	0
  8317  0017CE  6E34               	movwf	?_ldexp,c
  8318  0017D0  0E00               	movlw	0
  8319  0017D2  6E35               	movwf	?_ldexp+1,c
  8320  0017D4  0E00               	movlw	0
  8321  0017D6  6E36               	movwf	?_ldexp+2,c
  8322  0017D8  0012               	return	
  8323  0017DA                     i2l2966:
  8324  0017DA  5036               	movf	ldexp@value+2,w,c
  8325  0017DC  0B7F               	andlw	127
  8326  0017DE  6E39               	movwf	??_ldexp& (0+255),c
  8327  0017E0  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  8328  0017E2  90D8               	bcf	status,0,c
  8329  0017E4  3639               	rlcf	??_ldexp,f,c
  8330  0017E6  363A               	rlcf	??_ldexp+1,f,c
  8331  0017E8  5039               	movf	??_ldexp,w,c
  8332  0017EA  2637               	addwf	ldexp@newexp,f,c
  8333  0017EC  503A               	movf	??_ldexp+1,w,c
  8334  0017EE  2238               	addwfc	ldexp@newexp+1,f,c
  8335  0017F0  AE35               	btfss	ldexp@value+1,7,c
  8336  0017F2  D003               	goto	i2u251_40
  8337  0017F4  6A39               	clrf	??_ldexp& (0+255),c
  8338  0017F6  2A39               	incf	??_ldexp& (0+255),f,c
  8339  0017F8  D001               	goto	i2u251_48
  8340  0017FA                     i2u251_40:
  8341  0017FA  6A39               	clrf	??_ldexp& (0+255),c
  8342  0017FC                     i2u251_48:
  8343  0017FC  5039               	movf	??_ldexp,w,c
  8344  0017FE  2637               	addwf	ldexp@newexp,f,c
  8345  001800  0E00               	movlw	0
  8346  001802  2238               	addwfc	ldexp@newexp+1,f,c
  8347  001804  AE38               	btfss	ldexp@newexp+1,7,c
  8348  001806  D00B               	goto	i2l2974
  8349  001808  0E00               	movlw	0
  8350  00180A  6E79               	movwf	_errno+1,c
  8351  00180C  0E22               	movlw	34
  8352  00180E  6E78               	movwf	_errno,c
  8353  001810  0E00               	movlw	0
  8354  001812  6E34               	movwf	?_ldexp,c
  8355  001814  0E00               	movlw	0
  8356  001816  6E35               	movwf	?_ldexp+1,c
  8357  001818  0E00               	movlw	0
  8358  00181A                     L4:
  8359  00181A  6E36               	movwf	?_ldexp+2,c
  8360  00181C  0012               	return	
  8361  00181E                     i2l2974:
  8362  00181E  BE38               	btfsc	ldexp@newexp+1,7,c
  8363  001820  D015               	goto	i2l2990
  8364  001822  0438               	decf	ldexp@newexp+1,w,c
  8365  001824  A0D8               	btfss	status,0,c
  8366  001826  D012               	goto	i2l2990
  8367  001828  0E00               	movlw	0
  8368  00182A  6E79               	movwf	_errno+1,c
  8369  00182C  0E22               	movlw	34
  8370  00182E  6E78               	movwf	_errno,c
  8371  001830  AE36               	btfss	ldexp@value+2,7,c
  8372  001832  D006               	goto	i2l2986
  8373  001834  0EFF               	movlw	255
  8374  001836  6E34               	movwf	?_ldexp,c
  8375  001838  0E7F               	movlw	127
  8376  00183A  6E35               	movwf	?_ldexp+1,c
  8377  00183C  0EFF               	movlw	255
  8378  00183E  D7ED               	goto	L4
  8379  001840                     i2l2986:
  8380  001840  0EFF               	movlw	255
  8381  001842  6E34               	movwf	?_ldexp,c
  8382  001844  0E7F               	movlw	127
  8383  001846  6E35               	movwf	?_ldexp+1,c
  8384  001848  0E7F               	movlw	127
  8385  00184A  D7E7               	goto	L4
  8386  00184C                     i2l2990:
  8387  00184C  3438               	rlcf	ldexp@newexp+1,w,c
  8388  00184E  3038               	rrcf	ldexp@newexp+1,w,c
  8389  001850  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  8390  001852  3037               	rrcf	ldexp@newexp,w,c
  8391  001854  6E39               	movwf	??_ldexp& (0+255),c
  8392  001856  5036               	movf	ldexp@value+2,w,c
  8393  001858  1839               	xorwf	??_ldexp,w,c
  8394  00185A  0B80               	andlw	-128
  8395  00185C  1839               	xorwf	??_ldexp,w,c
  8396  00185E  6E36               	movwf	ldexp@value+2,c
  8397  001860  C037  F039         	movff	ldexp@newexp,??_ldexp
  8398  001864  0E01               	movlw	1
  8399  001866  1639               	andwf	??_ldexp,f,c
  8400  001868  3239               	rrcf	??_ldexp,f,c
  8401  00186A  3239               	rrcf	??_ldexp,f,c
  8402  00186C  5035               	movf	ldexp@value+1,w,c
  8403  00186E  1839               	xorwf	??_ldexp,w,c
  8404  001870  0B7F               	andlw	-129
  8405  001872  1839               	xorwf	??_ldexp,w,c
  8406  001874  6E35               	movwf	ldexp@value+1,c
  8407  001876  C034  F034         	movff	ldexp@value,?_ldexp
  8408  00187A  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  8409  00187E  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  8410  001882  0012               	return	
  8411  001884                     __end_of_ldexp:
  8412                           	opt stack 0
  8413                           pclatu	equ	0xFFB
  8414                           pclath	equ	0xFFA
  8415                           tblptru	equ	0xFF8
  8416                           tblptrh	equ	0xFF7
  8417                           tblptrl	equ	0xFF6
  8418                           tablat	equ	0xFF5
  8419                           prodh	equ	0xFF4
  8420                           prodl	equ	0xFF3
  8421                           intcon	equ	0xFF2
  8422                           intcon2	equ	0xFF1
  8423                           intcon3	equ	0xFF0
  8424                           postinc0	equ	0xFEE
  8425                           fsr0h	equ	0xFEA
  8426                           fsr0l	equ	0xFE9
  8427                           wreg	equ	0xFE8
  8428                           fsr1h	equ	0xFE2
  8429                           fsr1l	equ	0xFE1
  8430                           indf2	equ	0xFDF
  8431                           postinc2	equ	0xFDE
  8432                           postdec2	equ	0xFDD
  8433                           fsr2h	equ	0xFDA
  8434                           fsr2l	equ	0xFD9
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function _floor *****************
  8438 ;; Defined at:
  8439 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  x               3   64[COMRAM] int 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;  i               3   67[COMRAM] int 
  8444 ;;  expon           2   70[COMRAM] int 
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  3   64[COMRAM] int 
  8447 ;; Registers used:
  8448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8454 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;Total ram usage:        8 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    2
  8461 ;; This function calls:
  8462 ;;		___altoft
  8463 ;;		___ftadd
  8464 ;;		___ftge
  8465 ;;		___fttol
  8466 ;;		_frexp
  8467 ;; This function is called by:
  8468 ;;		_exp
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text45
  8473  001540                     __ptext45:
  8474                           	opt stack 0
  8475  001540                     _floor:
  8476                           	opt stack 20
  8477                           
  8478                           ;incstack = 0
  8479  001540  C041  F001         	movff	floor@x,frexp@value
  8480  001544  C042  F002         	movff	floor@x+1,frexp@value+1
  8481  001548  C043  F003         	movff	floor@x+2,frexp@value+2
  8482  00154C  0E47               	movlw	low floor@expon
  8483  00154E  6E04               	movwf	frexp@eptr,c
  8484  001550  0E00               	movlw	high floor@expon
  8485  001552  6E05               	movwf	frexp@eptr+1,c
  8486  001554  EC91  F00D         	call	_frexp	;wreg free
  8487  001558  AE48               	btfss	floor@expon+1,7,c
  8488  00155A  D010               	goto	i2l2944
  8489  00155C  AE43               	btfss	floor@x+2,7,c
  8490  00155E  D007               	goto	i2l2940
  8491  001560  0E00               	movlw	0
  8492  001562  6E41               	movwf	?_floor,c
  8493  001564  0E80               	movlw	128
  8494  001566  6E42               	movwf	?_floor+1,c
  8495  001568  0EBF               	movlw	191
  8496  00156A  6E43               	movwf	?_floor+2,c
  8497  00156C  0012               	return	
  8498  00156E                     i2l2940:
  8499  00156E  0E00               	movlw	0
  8500  001570  6E41               	movwf	?_floor,c
  8501  001572  0E00               	movlw	0
  8502  001574  6E42               	movwf	?_floor+1,c
  8503  001576  0E00               	movlw	0
  8504  001578  6E43               	movwf	?_floor+2,c
  8505  00157A  0012               	return	
  8506  00157C                     i2l2944:
  8507  00157C  5048               	movf	floor@expon+1,w,c
  8508  00157E  E104               	bnz	i2u247_40
  8509  001580  0E15               	movlw	21
  8510  001582  5C47               	subwf	floor@expon,w,c
  8511  001584  A0D8               	btfss	status,0,c
  8512  001586  D007               	goto	i2l2948
  8513  001588                     i2u247_40:
  8514  001588  C041  F041         	movff	floor@x,?_floor
  8515  00158C  C042  F042         	movff	floor@x+1,?_floor+1
  8516  001590  C043  F043         	movff	floor@x+2,?_floor+2
  8517  001594  0012               	return	
  8518  001596                     i2l2948:
  8519  001596  C041  F028         	movff	floor@x,___fttol@f1
  8520  00159A  C042  F029         	movff	floor@x+1,___fttol@f1+1
  8521  00159E  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  8522  0015A2  EC39  F009         	call	___fttol	;wreg free
  8523  0015A6  C028  F037         	movff	?___fttol,___altoft@c
  8524  0015AA  C029  F038         	movff	?___fttol+1,___altoft@c+1
  8525  0015AE  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  8526  0015B2  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  8527  0015B6  EC9F  F00E         	call	___altoft	;wreg free
  8528  0015BA  C037  F044         	movff	?___altoft,floor@i
  8529  0015BE  C038  F045         	movff	?___altoft+1,floor@i+1
  8530  0015C2  C039  F046         	movff	?___altoft+2,floor@i+2
  8531  0015C6  C041  F001         	movff	floor@x,___ftge@ff1
  8532  0015CA  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  8533  0015CE  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  8534  0015D2  C044  F004         	movff	floor@i,___ftge@ff2
  8535  0015D6  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  8536  0015DA  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  8537  0015DE  ECD9  F00D         	call	___ftge	;wreg free
  8538  0015E2  B0D8               	btfsc	status,0,c
  8539  0015E4  D015               	goto	i2l984
  8540  0015E6  C044  F01C         	movff	floor@i,___ftadd@f1
  8541  0015EA  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  8542  0015EE  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  8543  0015F2  0E00               	movlw	0
  8544  0015F4  6E1F               	movwf	___ftadd@f2,c
  8545  0015F6  0E80               	movlw	128
  8546  0015F8  6E20               	movwf	___ftadd@f2+1,c
  8547  0015FA  0EBF               	movlw	191
  8548  0015FC  6E21               	movwf	___ftadd@f2+2,c
  8549  0015FE  EC76  F005         	call	___ftadd	;wreg free
  8550  001602  C01C  F041         	movff	?___ftadd,?_floor
  8551  001606  C01D  F042         	movff	?___ftadd+1,?_floor+1
  8552  00160A  C01E  F043         	movff	?___ftadd+2,?_floor+2
  8553  00160E  0012               	return	
  8554  001610                     i2l984:
  8555  001610  C044  F041         	movff	floor@i,?_floor
  8556  001614  C045  F042         	movff	floor@i+1,?_floor+1
  8557  001618  C046  F043         	movff	floor@i+2,?_floor+2
  8558  00161C  0012               	return		;funcret
  8559  00161E                     __end_of_floor:
  8560                           	opt stack 0
  8561                           pclatu	equ	0xFFB
  8562                           pclath	equ	0xFFA
  8563                           tblptru	equ	0xFF8
  8564                           tblptrh	equ	0xFF7
  8565                           tblptrl	equ	0xFF6
  8566                           tablat	equ	0xFF5
  8567                           prodh	equ	0xFF4
  8568                           prodl	equ	0xFF3
  8569                           intcon	equ	0xFF2
  8570                           intcon2	equ	0xFF1
  8571                           intcon3	equ	0xFF0
  8572                           postinc0	equ	0xFEE
  8573                           fsr0h	equ	0xFEA
  8574                           fsr0l	equ	0xFE9
  8575                           wreg	equ	0xFE8
  8576                           fsr1h	equ	0xFE2
  8577                           fsr1l	equ	0xFE1
  8578                           indf2	equ	0xFDF
  8579                           postinc2	equ	0xFDE
  8580                           postdec2	equ	0xFDD
  8581                           fsr2h	equ	0xFDA
  8582                           fsr2l	equ	0xFD9
  8583                           status	equ	0xFD8
  8584                           
  8585 ;; *************** function _frexp *****************
  8586 ;; Defined at:
  8587 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;  value           3    0[COMRAM] int 
  8590 ;;  eptr            2    3[COMRAM] PTR int 
  8591 ;;		 -> log@exponent(2), floor@expon(2), 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;		None
  8594 ;; Return value:  Size  Location     Type
  8595 ;;                  3    0[COMRAM] PTR int 
  8596 ;; Registers used:
  8597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8603 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;Total ram usage:        7 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; This function calls:
  8610 ;;		Nothing
  8611 ;; This function is called by:
  8612 ;;		_floor
  8613 ;;		_log
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           	psect	text46
  8618  001B22                     __ptext46:
  8619                           	opt stack 0
  8620  001B22                     _frexp:
  8621                           	opt stack 22
  8622                           
  8623                           ;incstack = 0
  8624  001B22  5001               	movf	frexp@value,w,c
  8625  001B24  1002               	iorwf	frexp@value+1,w,c
  8626  001B26  1003               	iorwf	frexp@value+2,w,c
  8627  001B28  A4D8               	btfss	status,2,c
  8628  001B2A  D00F               	goto	i2l2824
  8629  001B2C  C004  FFD9         	movff	frexp@eptr,fsr2l
  8630  001B30  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8631  001B34  0E00               	movlw	0
  8632  001B36  6EDE               	movwf	postinc2,c
  8633  001B38  0E00               	movlw	0
  8634  001B3A  6EDD               	movwf	postdec2,c
  8635  001B3C  0E00               	movlw	0
  8636  001B3E  6E01               	movwf	?_frexp,c
  8637  001B40  0E00               	movlw	0
  8638  001B42  6E02               	movwf	?_frexp+1,c
  8639  001B44  0E00               	movlw	0
  8640  001B46  6E03               	movwf	?_frexp+2,c
  8641  001B48  0012               	return	
  8642  001B4A                     i2l2824:
  8643  001B4A  5003               	movf	frexp@value+2,w,c
  8644  001B4C  0B7F               	andlw	127
  8645  001B4E  6E06               	movwf	??_frexp& (0+255),c
  8646  001B50  6A07               	clrf	(??_frexp+1)& (0+255),c
  8647  001B52  90D8               	bcf	status,0,c
  8648  001B54  3606               	rlcf	??_frexp,f,c
  8649  001B56  3607               	rlcf	??_frexp+1,f,c
  8650  001B58  C004  FFD9         	movff	frexp@eptr,fsr2l
  8651  001B5C  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8652  001B60  C006  FFDE         	movff	??_frexp,postinc2
  8653  001B64  C007  FFDD         	movff	??_frexp+1,postdec2
  8654  001B68  AE02               	btfss	frexp@value+1,7,c
  8655  001B6A  D003               	goto	i2u236_40
  8656  001B6C  6A06               	clrf	??_frexp& (0+255),c
  8657  001B6E  2A06               	incf	??_frexp& (0+255),f,c
  8658  001B70  D001               	goto	i2u236_48
  8659  001B72                     i2u236_40:
  8660  001B72  6A06               	clrf	??_frexp& (0+255),c
  8661  001B74                     i2u236_48:
  8662  001B74  5006               	movf	??_frexp,w,c
  8663  001B76  C004  FFD9         	movff	frexp@eptr,fsr2l
  8664  001B7A  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8665  001B7E  12DE               	iorwf	postinc2,f,c
  8666  001B80  0E00               	movlw	0
  8667  001B82  12DD               	iorwf	postdec2,f,c
  8668  001B84  C004  FFD9         	movff	frexp@eptr,fsr2l
  8669  001B88  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  8670  001B8C  0E82               	movlw	130
  8671  001B8E  26DE               	addwf	postinc2,f,c
  8672  001B90  0EFF               	movlw	255
  8673  001B92  22DD               	addwfc	postdec2,f,c
  8674  001B94  8003               	bsf	frexp@value+2,0,c
  8675  001B96  8203               	bsf	frexp@value+2,1,c
  8676  001B98  8403               	bsf	frexp@value+2,2,c
  8677  001B9A  8603               	bsf	frexp@value+2,3,c
  8678  001B9C  8803               	bsf	frexp@value+2,4,c
  8679  001B9E  8A03               	bsf	frexp@value+2,5,c
  8680  001BA0  9C03               	bcf	frexp@value+2,6,c
  8681  001BA2  9E02               	bcf	frexp@value+1,7,c
  8682  001BA4  C001  F001         	movff	frexp@value,?_frexp
  8683  001BA8  C002  F002         	movff	frexp@value+1,?_frexp+1
  8684  001BAC  C003  F003         	movff	frexp@value+2,?_frexp+2
  8685  001BB0  0012               	return	
  8686  001BB2                     __end_of_frexp:
  8687                           	opt stack 0
  8688                           pclatu	equ	0xFFB
  8689                           pclath	equ	0xFFA
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           intcon2	equ	0xFF1
  8698                           intcon3	equ	0xFF0
  8699                           postinc0	equ	0xFEE
  8700                           fsr0h	equ	0xFEA
  8701                           fsr0l	equ	0xFE9
  8702                           wreg	equ	0xFE8
  8703                           fsr1h	equ	0xFE2
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           postdec2	equ	0xFDD
  8708                           fsr2h	equ	0xFDA
  8709                           fsr2l	equ	0xFD9
  8710                           status	equ	0xFD8
  8711                           
  8712 ;; *************** function ___fttol *****************
  8713 ;; Defined at:
  8714 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;  f1              3   39[COMRAM] float 
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;  lval            4   49[COMRAM] unsigned long 
  8719 ;;  exp1            1   53[COMRAM] unsigned char 
  8720 ;;  sign1           1   48[COMRAM] unsigned char 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  4   39[COMRAM] long 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;Total ram usage:       15 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; This function calls:
  8737 ;;		Nothing
  8738 ;; This function is called by:
  8739 ;;		_dec_to_hex
  8740 ;;		_pow
  8741 ;;		_exp
  8742 ;;		_floor
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           	psect	text47
  8747  001272                     __ptext47:
  8748                           	opt stack 0
  8749  001272                     ___fttol:
  8750                           	opt stack 21
  8751                           
  8752                           ;incstack = 0
  8753  001272  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  8754  001276  6A2D               	clrf	(??___fttol+1)& (0+255),c
  8755  001278  6A2E               	clrf	(??___fttol+2)& (0+255),c
  8756  00127A  3429               	rlcf	___fttol@f1+1,w,c
  8757  00127C  362C               	rlcf	??___fttol& (0+255),f,c
  8758  00127E  E301               	bnc	u227_41
  8759  001280  802D               	bsf	(??___fttol+1)& (0+255),0,c
  8760  001282                     u227_41:
  8761  001282  502C               	movf	??___fttol,w,c
  8762  001284  6E36               	movwf	___fttol@exp1,c
  8763  001286  5036               	movf	___fttol@exp1,w,c
  8764  001288  A4D8               	btfss	status,2,c
  8765  00128A  D009               	goto	i2l2776
  8766  00128C  0E00               	movlw	0
  8767  00128E  6E28               	movwf	?___fttol,c
  8768  001290  0E00               	movlw	0
  8769  001292  6E29               	movwf	?___fttol+1,c
  8770  001294  0E00               	movlw	0
  8771  001296  6E2A               	movwf	?___fttol+2,c
  8772  001298  0E00               	movlw	0
  8773  00129A  6E2B               	movwf	?___fttol+3,c
  8774  00129C  0012               	return	
  8775  00129E                     i2l2776:
  8776  00129E  0E17               	movlw	23
  8777  0012A0  6E2C               	movwf	??___fttol& (0+255),c
  8778  0012A2  C028  F02D         	movff	___fttol@f1,??___fttol+1
  8779  0012A6  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  8780  0012AA  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  8781  0012AE  282C               	incf	??___fttol,w,c
  8782  0012B0  6E30               	movwf	(??___fttol+4)& (0+255),c
  8783  0012B2  D004               	goto	i2u229_40
  8784  0012B4                     i2u229_45:
  8785  0012B4  90D8               	bcf	status,0,c
  8786  0012B6  322F               	rrcf	??___fttol+3,f,c
  8787  0012B8  322E               	rrcf	??___fttol+2,f,c
  8788  0012BA  322D               	rrcf	??___fttol+1,f,c
  8789  0012BC                     i2u229_40:
  8790  0012BC  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  8791  0012BE  D7FA               	goto	i2u229_45
  8792  0012C0  502D               	movf	??___fttol+1,w,c
  8793  0012C2  6E31               	movwf	___fttol@sign1,c
  8794  0012C4  8E29               	bsf	___fttol@f1+1,7,c
  8795  0012C6  0EFF               	movlw	255
  8796  0012C8  1628               	andwf	___fttol@f1,f,c
  8797  0012CA  0EFF               	movlw	255
  8798  0012CC  1629               	andwf	___fttol@f1+1,f,c
  8799  0012CE  0E00               	movlw	0
  8800  0012D0  162A               	andwf	___fttol@f1+2,f,c
  8801  0012D2  5028               	movf	___fttol@f1,w,c
  8802  0012D4  6E32               	movwf	___fttol@lval,c
  8803  0012D6  5029               	movf	___fttol@f1+1,w,c
  8804  0012D8  6E33               	movwf	___fttol@lval+1,c
  8805  0012DA  502A               	movf	___fttol@f1+2,w,c
  8806  0012DC  6E34               	movwf	___fttol@lval+2,c
  8807  0012DE  6A35               	clrf	___fttol@lval+3,c
  8808  0012E0  0E8E               	movlw	142
  8809  0012E2  5E36               	subwf	___fttol@exp1,f,c
  8810  0012E4  AE36               	btfss	___fttol@exp1,7,c
  8811  0012E6  D016               	goto	i2l2798
  8812  0012E8  5036               	movf	___fttol@exp1,w,c
  8813  0012EA  0A80               	xorlw	128
  8814  0012EC  0F8F               	addlw	143
  8815  0012EE  B0D8               	btfsc	status,0,c
  8816  0012F0  D009               	goto	i2l2794
  8817  0012F2  0E00               	movlw	0
  8818  0012F4  6E28               	movwf	?___fttol,c
  8819  0012F6  0E00               	movlw	0
  8820  0012F8  6E29               	movwf	?___fttol+1,c
  8821  0012FA  0E00               	movlw	0
  8822  0012FC  6E2A               	movwf	?___fttol+2,c
  8823  0012FE  0E00               	movlw	0
  8824  001300  6E2B               	movwf	?___fttol+3,c
  8825  001302  0012               	return	
  8826  001304                     i2l2794:
  8827  001304  90D8               	bcf	status,0,c
  8828  001306  3235               	rrcf	___fttol@lval+3,f,c
  8829  001308  3234               	rrcf	___fttol@lval+2,f,c
  8830  00130A  3233               	rrcf	___fttol@lval+1,f,c
  8831  00130C  3232               	rrcf	___fttol@lval,f,c
  8832  00130E  3E36               	incfsz	___fttol@exp1,f,c
  8833  001310  D7F9               	goto	i2l2794
  8834  001312  D015               	goto	i2l2808
  8835  001314                     i2l2798:
  8836  001314  0E17               	movlw	23
  8837  001316  6436               	cpfsgt	___fttol@exp1,c
  8838  001318  D00F               	goto	i2l2806
  8839  00131A  0E00               	movlw	0
  8840  00131C  6E28               	movwf	?___fttol,c
  8841  00131E  0E00               	movlw	0
  8842  001320  6E29               	movwf	?___fttol+1,c
  8843  001322  0E00               	movlw	0
  8844  001324  6E2A               	movwf	?___fttol+2,c
  8845  001326  0E00               	movlw	0
  8846  001328  6E2B               	movwf	?___fttol+3,c
  8847  00132A  0012               	return	
  8848  00132C                     i2l2804:
  8849  00132C  90D8               	bcf	status,0,c
  8850  00132E  3632               	rlcf	___fttol@lval,f,c
  8851  001330  3633               	rlcf	___fttol@lval+1,f,c
  8852  001332  3634               	rlcf	___fttol@lval+2,f,c
  8853  001334  3635               	rlcf	___fttol@lval+3,f,c
  8854  001336  0636               	decf	___fttol@exp1,f,c
  8855  001338                     i2l2806:
  8856  001338  5036               	movf	___fttol@exp1,w,c
  8857  00133A  A4D8               	btfss	status,2,c
  8858  00133C  D7F7               	goto	i2l2804
  8859  00133E                     i2l2808:
  8860  00133E  5031               	movf	___fttol@sign1,w,c
  8861  001340  B4D8               	btfsc	status,2,c
  8862  001342  D008               	goto	i2l2812
  8863  001344  1E35               	comf	___fttol@lval+3,f,c
  8864  001346  1E34               	comf	___fttol@lval+2,f,c
  8865  001348  1E33               	comf	___fttol@lval+1,f,c
  8866  00134A  6C32               	negf	___fttol@lval,c
  8867  00134C  0E00               	movlw	0
  8868  00134E  2233               	addwfc	___fttol@lval+1,f,c
  8869  001350  2234               	addwfc	___fttol@lval+2,f,c
  8870  001352  2235               	addwfc	___fttol@lval+3,f,c
  8871  001354                     i2l2812:
  8872  001354  C032  F028         	movff	___fttol@lval,?___fttol
  8873  001358  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  8874  00135C  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  8875  001360  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  8876  001364  0012               	return	
  8877  001366                     __end_of___fttol:
  8878                           	opt stack 0
  8879                           pclatu	equ	0xFFB
  8880                           pclath	equ	0xFFA
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           intcon2	equ	0xFF1
  8889                           intcon3	equ	0xFF0
  8890                           postinc0	equ	0xFEE
  8891                           fsr0h	equ	0xFEA
  8892                           fsr0l	equ	0xFE9
  8893                           wreg	equ	0xFE8
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           postdec2	equ	0xFDD
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function ___ftge *****************
  8904 ;; Defined at:
  8905 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  ff1             3    0[COMRAM] float 
  8908 ;;  ff2             3    3[COMRAM] float 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;		None               void
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8920 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;Total ram usage:        9 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_pow
  8930 ;;		_exp
  8931 ;;		_floor
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text48
  8936  001BB2                     __ptext48:
  8937                           	opt stack 0
  8938  001BB2                     ___ftge:
  8939                           	opt stack 21
  8940                           
  8941                           ;incstack = 0
  8942  001BB2  AE03               	btfss	___ftge@ff1+2,7,c
  8943  001BB4  D016               	goto	i2l2756
  8944  001BB6  C001  F007         	movff	___ftge@ff1,??___ftge
  8945  001BBA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8946  001BBE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8947  001BC2  1E07               	comf	??___ftge,f,c
  8948  001BC4  1E08               	comf	??___ftge+1,f,c
  8949  001BC6  1E09               	comf	??___ftge+2,f,c
  8950  001BC8  2A07               	incf	??___ftge,f,c
  8951  001BCA  0E00               	movlw	0
  8952  001BCC  2208               	addwfc	??___ftge+1,f,c
  8953  001BCE  2209               	addwfc	??___ftge+2,f,c
  8954  001BD0  0E00               	movlw	0
  8955  001BD2  2407               	addwf	??___ftge,w,c
  8956  001BD4  6E01               	movwf	___ftge@ff1,c
  8957  001BD6  0E00               	movlw	0
  8958  001BD8  2008               	addwfc	??___ftge+1,w,c
  8959  001BDA  6E02               	movwf	___ftge@ff1+1,c
  8960  001BDC  0E80               	movlw	128
  8961  001BDE  2009               	addwfc	??___ftge+2,w,c
  8962  001BE0  6E03               	movwf	___ftge@ff1+2,c
  8963  001BE2                     i2l2756:
  8964  001BE2  AE06               	btfss	___ftge@ff2+2,7,c
  8965  001BE4  D016               	goto	i2l2760
  8966  001BE6  C004  F007         	movff	___ftge@ff2,??___ftge
  8967  001BEA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8968  001BEE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8969  001BF2  1E07               	comf	??___ftge,f,c
  8970  001BF4  1E08               	comf	??___ftge+1,f,c
  8971  001BF6  1E09               	comf	??___ftge+2,f,c
  8972  001BF8  2A07               	incf	??___ftge,f,c
  8973  001BFA  0E00               	movlw	0
  8974  001BFC  2208               	addwfc	??___ftge+1,f,c
  8975  001BFE  2209               	addwfc	??___ftge+2,f,c
  8976  001C00  0E00               	movlw	0
  8977  001C02  2407               	addwf	??___ftge,w,c
  8978  001C04  6E04               	movwf	___ftge@ff2,c
  8979  001C06  0E00               	movlw	0
  8980  001C08  2008               	addwfc	??___ftge+1,w,c
  8981  001C0A  6E05               	movwf	___ftge@ff2+1,c
  8982  001C0C  0E80               	movlw	128
  8983  001C0E  2009               	addwfc	??___ftge+2,w,c
  8984  001C10  6E06               	movwf	___ftge@ff2+2,c
  8985  001C12                     i2l2760:
  8986  001C12  0E00               	movlw	0
  8987  001C14  1A01               	xorwf	___ftge@ff1,f,c
  8988  001C16  0E00               	movlw	0
  8989  001C18  1A02               	xorwf	___ftge@ff1+1,f,c
  8990  001C1A  0E80               	movlw	128
  8991  001C1C  1A03               	xorwf	___ftge@ff1+2,f,c
  8992  001C1E  0E00               	movlw	0
  8993  001C20  1A04               	xorwf	___ftge@ff2,f,c
  8994  001C22  0E00               	movlw	0
  8995  001C24  1A05               	xorwf	___ftge@ff2+1,f,c
  8996  001C26  0E80               	movlw	128
  8997  001C28  1A06               	xorwf	___ftge@ff2+2,f,c
  8998  001C2A  5004               	movf	___ftge@ff2,w,c
  8999  001C2C  5C01               	subwf	___ftge@ff1,w,c
  9000  001C2E  5005               	movf	___ftge@ff2+1,w,c
  9001  001C30  5802               	subwfb	___ftge@ff1+1,w,c
  9002  001C32  5006               	movf	___ftge@ff2+2,w,c
  9003  001C34  5803               	subwfb	___ftge@ff1+2,w,c
  9004  001C36  B0D8               	btfsc	status,0,c
  9005  001C38  D002               	goto	i2l2766
  9006  001C3A  90D8               	bcf	status,0,c
  9007  001C3C  0012               	return	
  9008  001C3E                     i2l2766:
  9009  001C3E  80D8               	bsf	status,0,c
  9010  001C40  0012               	return	
  9011  001C42                     __end_of___ftge:
  9012                           	opt stack 0
  9013                           pclatu	equ	0xFFB
  9014                           pclath	equ	0xFFA
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           intcon3	equ	0xFF0
  9024                           postinc0	equ	0xFEE
  9025                           fsr0h	equ	0xFEA
  9026                           fsr0l	equ	0xFE9
  9027                           wreg	equ	0xFE8
  9028                           fsr1h	equ	0xFE2
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function ___altoft *****************
  9038 ;; Defined at:
  9039 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  c               4   54[COMRAM] long 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  sign            1   63[COMRAM] unsigned char 
  9044 ;;  exp             1   62[COMRAM] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  3   54[COMRAM] float 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:       10 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    1
  9061 ;; This function calls:
  9062 ;;		___ftpack
  9063 ;; This function is called by:
  9064 ;;		_floor
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           	psect	text49
  9069  001D3E                     __ptext49:
  9070                           	opt stack 0
  9071  001D3E                     ___altoft:
  9072                           	opt stack 20
  9073                           
  9074                           ;incstack = 0
  9075  001D3E  0E00               	movlw	0
  9076  001D40  6E40               	movwf	___altoft@sign,c
  9077  001D42  0E8E               	movlw	142
  9078  001D44  6E3F               	movwf	___altoft@exp,c
  9079  001D46  AE3A               	btfss	___altoft@c+3,7,c
  9080  001D48  D011               	goto	i2l2628
  9081  001D4A  1E3A               	comf	___altoft@c+3,f,c
  9082  001D4C  1E39               	comf	___altoft@c+2,f,c
  9083  001D4E  1E38               	comf	___altoft@c+1,f,c
  9084  001D50  6C37               	negf	___altoft@c,c
  9085  001D52  0E00               	movlw	0
  9086  001D54  2238               	addwfc	___altoft@c+1,f,c
  9087  001D56  2239               	addwfc	___altoft@c+2,f,c
  9088  001D58  223A               	addwfc	___altoft@c+3,f,c
  9089  001D5A  0E01               	movlw	1
  9090  001D5C  6E40               	movwf	___altoft@sign,c
  9091  001D5E  D006               	goto	i2l2628
  9092  001D60                     i2l2626:
  9093  001D60  90D8               	bcf	status,0,c
  9094  001D62  323A               	rrcf	___altoft@c+3,f,c
  9095  001D64  3239               	rrcf	___altoft@c+2,f,c
  9096  001D66  3238               	rrcf	___altoft@c+1,f,c
  9097  001D68  3237               	rrcf	___altoft@c,f,c
  9098  001D6A  2A3F               	incf	___altoft@exp,f,c
  9099  001D6C                     i2l2628:
  9100  001D6C  0E00               	movlw	0
  9101  001D6E  1437               	andwf	___altoft@c,w,c
  9102  001D70  6E3B               	movwf	??___altoft& (0+255),c
  9103  001D72  0E00               	movlw	0
  9104  001D74  1438               	andwf	___altoft@c+1,w,c
  9105  001D76  6E3C               	movwf	(??___altoft+1)& (0+255),c
  9106  001D78  0E00               	movlw	0
  9107  001D7A  1439               	andwf	___altoft@c+2,w,c
  9108  001D7C  6E3D               	movwf	(??___altoft+2)& (0+255),c
  9109  001D7E  0EFF               	movlw	255
  9110  001D80  143A               	andwf	___altoft@c+3,w,c
  9111  001D82  6E3E               	movwf	(??___altoft+3)& (0+255),c
  9112  001D84  503B               	movf	??___altoft,w,c
  9113  001D86  103C               	iorwf	??___altoft+1,w,c
  9114  001D88  103D               	iorwf	??___altoft+2,w,c
  9115  001D8A  103E               	iorwf	??___altoft+3,w,c
  9116  001D8C  A4D8               	btfss	status,2,c
  9117  001D8E  D7E8               	goto	i2l2626
  9118  001D90  C037  F001         	movff	___altoft@c,___ftpack@arg
  9119  001D94  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  9120  001D98  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  9121  001D9C  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  9122  001DA0  C040  F005         	movff	___altoft@sign,___ftpack@sign
  9123  001DA4  ECA0  F00C         	call	___ftpack	;wreg free
  9124  001DA8  C001  F037         	movff	?___ftpack,?___altoft
  9125  001DAC  C002  F038         	movff	?___ftpack+1,?___altoft+1
  9126  001DB0  C003  F039         	movff	?___ftpack+2,?___altoft+2
  9127  001DB4  0012               	return	
  9128  001DB6                     __end_of___altoft:
  9129                           	opt stack 0
  9130                           pclatu	equ	0xFFB
  9131                           pclath	equ	0xFFA
  9132                           tblptru	equ	0xFF8
  9133                           tblptrh	equ	0xFF7
  9134                           tblptrl	equ	0xFF6
  9135                           tablat	equ	0xFF5
  9136                           prodh	equ	0xFF4
  9137                           prodl	equ	0xFF3
  9138                           intcon	equ	0xFF2
  9139                           intcon2	equ	0xFF1
  9140                           intcon3	equ	0xFF0
  9141                           postinc0	equ	0xFEE
  9142                           fsr0h	equ	0xFEA
  9143                           fsr0l	equ	0xFE9
  9144                           wreg	equ	0xFE8
  9145                           fsr1h	equ	0xFE2
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           postdec2	equ	0xFDD
  9150                           fsr2h	equ	0xFDA
  9151                           fsr2l	equ	0xFD9
  9152                           status	equ	0xFD8
  9153                           
  9154 ;; *************** function _eval_poly *****************
  9155 ;; Defined at:
  9156 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  x               3   39[COMRAM] float 
  9159 ;;  d               2   42[COMRAM] PTR const 
  9160 ;;		 -> log@coeff(27), exp@coeff(30), 
  9161 ;;  n               2   44[COMRAM] int 
  9162 ;; Auto vars:     Size  Location     Type
  9163 ;;  res             3   48[COMRAM] int 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;                  3   39[COMRAM] int 
  9166 ;; Registers used:
  9167 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9173 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9176 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;Total ram usage:       12 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:    2
  9180 ;; This function calls:
  9181 ;;		___ftadd
  9182 ;;		___ftmul
  9183 ;;		i2___wmul
  9184 ;; This function is called by:
  9185 ;;		_exp
  9186 ;;		_log
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           	psect	text50
  9191  0016F0                     __ptext50:
  9192                           	opt stack 0
  9193  0016F0                     _eval_poly:
  9194                           	opt stack 20
  9195                           
  9196                           ;incstack = 0
  9197  0016F0  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9198  0016F4  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9199  0016F8  0E00               	movlw	0
  9200  0016FA  6E04               	movwf	i2___wmul@multiplicand+1,c
  9201  0016FC  0E03               	movlw	3
  9202  0016FE  6E03               	movwf	i2___wmul@multiplicand,c
  9203  001700  EC71  F011         	call	i2___wmul	;wreg free
  9204  001704  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9205  001708  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9206  00170C  5001               	movf	?i2___wmul,w,c
  9207  00170E  262F               	addwf	??_eval_poly,f,c
  9208  001710  5002               	movf	?i2___wmul+1,w,c
  9209  001712  2230               	addwfc	??_eval_poly+1,f,c
  9210  001714  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9211  001718  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9212  00171C                     	if	0	;tblptru may be non-zero
  9213  00171C                     	endif
  9214  00171C                     	if	0	;tblptru may be non-zero
  9215  00171C                     	endif
  9216  00171C  0009               	tblrd		*+
  9217  00171E  CFF5 F031          	movff	tablat,eval_poly@res
  9218  001722  0009               	tblrd		*+
  9219  001724  CFF5 F032          	movff	tablat,eval_poly@res+1
  9220  001728  000A               	tblrd		*-
  9221  00172A  CFF5 F033          	movff	tablat,eval_poly@res+2
  9222  00172E  D03E               	goto	i2l2958
  9223  001730                     i2l2956:
  9224  001730  C031  F010         	movff	eval_poly@res,___ftmul@f2
  9225  001734  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  9226  001738  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  9227  00173C  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  9228  001740  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  9229  001744  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  9230  001748  ECB3  F009         	call	___ftmul	;wreg free
  9231  00174C  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  9232  001750  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  9233  001754  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  9234  001758  0E00               	movlw	0
  9235  00175A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9236  00175C  0E03               	movlw	3
  9237  00175E  6E03               	movwf	i2___wmul@multiplicand,c
  9238  001760  062D               	decf	eval_poly@n,f,c
  9239  001762  A0D8               	btfss	status,0,c
  9240  001764  062E               	decf	eval_poly@n+1,f,c
  9241  001766  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
  9242  00176A  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
  9243  00176E  EC71  F011         	call	i2___wmul	;wreg free
  9244  001772  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  9245  001776  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  9246  00177A  5001               	movf	?i2___wmul,w,c
  9247  00177C  262F               	addwf	??_eval_poly,f,c
  9248  00177E  5002               	movf	?i2___wmul+1,w,c
  9249  001780  2230               	addwfc	??_eval_poly+1,f,c
  9250  001782  C02F  FFF6         	movff	??_eval_poly,tblptrl
  9251  001786  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  9252  00178A                     	if	0	;tblptru may be non-zero
  9253  00178A                     	endif
  9254  00178A                     	if	0	;tblptru may be non-zero
  9255  00178A                     	endif
  9256  00178A  0009               	tblrd		*+
  9257  00178C  CFF5 F01F          	movff	tablat,___ftadd@f2
  9258  001790  0009               	tblrd		*+
  9259  001792  CFF5 F020          	movff	tablat,___ftadd@f2+1
  9260  001796  000A               	tblrd		*-
  9261  001798  CFF5 F021          	movff	tablat,___ftadd@f2+2
  9262  00179C  EC76  F005         	call	___ftadd	;wreg free
  9263  0017A0  C01C  F031         	movff	?___ftadd,eval_poly@res
  9264  0017A4  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  9265  0017A8  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  9266  0017AC                     i2l2958:
  9267  0017AC  502D               	movf	eval_poly@n,w,c
  9268  0017AE  102E               	iorwf	eval_poly@n+1,w,c
  9269  0017B0  A4D8               	btfss	status,2,c
  9270  0017B2  D7BE               	goto	i2l2956
  9271  0017B4  C031  F028         	movff	eval_poly@res,?_eval_poly
  9272  0017B8  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  9273  0017BC  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  9274  0017C0  0012               	return		;funcret
  9275  0017C2                     __end_of_eval_poly:
  9276                           	opt stack 0
  9277                           pclatu	equ	0xFFB
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           intcon3	equ	0xFF0
  9288                           postinc0	equ	0xFEE
  9289                           fsr0h	equ	0xFEA
  9290                           fsr0l	equ	0xFE9
  9291                           wreg	equ	0xFE8
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function i2___wmul *****************
  9302 ;; Defined at:
  9303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  multiplier      2    0[COMRAM] unsigned int 
  9306 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;  __wmul          2    4[COMRAM] unsigned int 
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  2    0[COMRAM] unsigned int 
  9311 ;; Registers used:
  9312 ;;		wreg, status,2, status,0, prodl, prodh
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;Total ram usage:        6 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		_isr
  9328 ;;		_eval_poly
  9329 ;;		i2_printf
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           	psect	text51
  9334  0022E2                     __ptext51:
  9335                           	opt stack 0
  9336  0022E2                     i2___wmul:
  9337                           	opt stack 24
  9338                           
  9339                           ;incstack = 0
  9340  0022E2  5001               	movf	i2___wmul@multiplier,w,c
  9341  0022E4  0203               	mulwf	i2___wmul@multiplicand,c
  9342  0022E6  CFF3 F005          	movff	prodl,i2___wmul@product
  9343  0022EA  CFF4 F006          	movff	prodh,i2___wmul@product+1
  9344  0022EE  5001               	movf	i2___wmul@multiplier,w,c
  9345  0022F0  0204               	mulwf	i2___wmul@multiplicand+1,c
  9346  0022F2  50F3               	movf	prodl,w,c
  9347  0022F4  2606               	addwf	i2___wmul@product+1,f,c
  9348  0022F6  5002               	movf	i2___wmul@multiplier+1,w,c
  9349  0022F8  0203               	mulwf	i2___wmul@multiplicand,c
  9350  0022FA  50F3               	movf	prodl,w,c
  9351  0022FC  2606               	addwf	i2___wmul@product+1,f,c
  9352  0022FE  C005  F001         	movff	i2___wmul@product,?i2___wmul
  9353  002302  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  9354  002306  0012               	return	
  9355  002308                     __end_ofi2___wmul:
  9356                           	opt stack 0
  9357                           pclatu	equ	0xFFB
  9358                           pclath	equ	0xFFA
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           prodh	equ	0xFF4
  9364                           prodl	equ	0xFF3
  9365                           intcon	equ	0xFF2
  9366                           intcon2	equ	0xFF1
  9367                           intcon3	equ	0xFF0
  9368                           postinc0	equ	0xFEE
  9369                           fsr0h	equ	0xFEA
  9370                           fsr0l	equ	0xFE9
  9371                           wreg	equ	0xFE8
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function ___ftmul *****************
  9382 ;; Defined at:
  9383 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  f1              3   12[COMRAM] float 
  9386 ;;  f2              3   15[COMRAM] float 
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  9389 ;;  sign            1   26[COMRAM] unsigned char 
  9390 ;;  cntr            1   25[COMRAM] unsigned char 
  9391 ;;  exp             1   21[COMRAM] unsigned char 
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  3   12[COMRAM] float 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0, cstack
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9401 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;Total ram usage:       15 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    1
  9408 ;; This function calls:
  9409 ;;		___ftpack
  9410 ;; This function is called by:
  9411 ;;		_dec_to_hex
  9412 ;;		_pow
  9413 ;;		_exp
  9414 ;;		_log
  9415 ;;		_eval_poly
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text52
  9420  001366                     __ptext52:
  9421                           	opt stack 0
  9422  001366                     ___ftmul:
  9423                           	opt stack 20
  9424                           
  9425                           ;incstack = 0
  9426  001366  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  9427  00136A  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9428  00136C  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9429  00136E  340E               	rlcf	___ftmul@f1+1,w,c
  9430  001370  3613               	rlcf	??___ftmul& (0+255),f,c
  9431  001372  E301               	bnc	u218_41
  9432  001374  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9433  001376                     u218_41:
  9434  001376  5013               	movf	??___ftmul,w,c
  9435  001378  6E16               	movwf	___ftmul@exp,c
  9436  00137A  5016               	movf	___ftmul@exp,w,c
  9437  00137C  A4D8               	btfss	status,2,c
  9438  00137E  D007               	goto	i2l2710
  9439  001380  0E00               	movlw	0
  9440  001382  6E0D               	movwf	?___ftmul,c
  9441  001384  0E00               	movlw	0
  9442  001386  6E0E               	movwf	?___ftmul+1,c
  9443  001388  0E00               	movlw	0
  9444  00138A  6E0F               	movwf	?___ftmul+2,c
  9445  00138C  0012               	return	
  9446  00138E                     i2l2710:
  9447  00138E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  9448  001392  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9449  001394  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9450  001396  3411               	rlcf	___ftmul@f2+1,w,c
  9451  001398  3613               	rlcf	??___ftmul& (0+255),f,c
  9452  00139A  E301               	bnc	u220_41
  9453  00139C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9454  00139E                     u220_41:
  9455  00139E  5013               	movf	??___ftmul,w,c
  9456  0013A0  6E1B               	movwf	___ftmul@sign,c
  9457  0013A2  501B               	movf	___ftmul@sign,w,c
  9458  0013A4  A4D8               	btfss	status,2,c
  9459  0013A6  D007               	goto	i2l2716
  9460  0013A8  0E00               	movlw	0
  9461  0013AA  6E0D               	movwf	?___ftmul,c
  9462  0013AC  0E00               	movlw	0
  9463  0013AE  6E0E               	movwf	?___ftmul+1,c
  9464  0013B0  0E00               	movlw	0
  9465  0013B2  6E0F               	movwf	?___ftmul+2,c
  9466  0013B4  0012               	return	
  9467  0013B6                     i2l2716:
  9468  0013B6  501B               	movf	___ftmul@sign,w,c
  9469  0013B8  0F7B               	addlw	123
  9470  0013BA  2616               	addwf	___ftmul@exp,f,c
  9471  0013BC  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  9472  0013C0  5012               	movf	___ftmul@f2+2,w,c
  9473  0013C2  1A1B               	xorwf	___ftmul@sign,f,c
  9474  0013C4  0E80               	movlw	128
  9475  0013C6  161B               	andwf	___ftmul@sign,f,c
  9476  0013C8  8E0E               	bsf	___ftmul@f1+1,7,c
  9477  0013CA  8E11               	bsf	___ftmul@f2+1,7,c
  9478  0013CC  0EFF               	movlw	255
  9479  0013CE  1610               	andwf	___ftmul@f2,f,c
  9480  0013D0  0EFF               	movlw	255
  9481  0013D2  1611               	andwf	___ftmul@f2+1,f,c
  9482  0013D4  0E00               	movlw	0
  9483  0013D6  1612               	andwf	___ftmul@f2+2,f,c
  9484  0013D8  0E00               	movlw	0
  9485  0013DA  6E17               	movwf	___ftmul@f3_as_product,c
  9486  0013DC  0E00               	movlw	0
  9487  0013DE  6E18               	movwf	___ftmul@f3_as_product+1,c
  9488  0013E0  0E00               	movlw	0
  9489  0013E2  6E19               	movwf	___ftmul@f3_as_product+2,c
  9490  0013E4  0E07               	movlw	7
  9491  0013E6  6E1A               	movwf	___ftmul@cntr,c
  9492  0013E8                     i2l2730:
  9493  0013E8  A00D               	btfss	___ftmul@f1,0,c
  9494  0013EA  D006               	goto	i2l2734
  9495  0013EC  5010               	movf	___ftmul@f2,w,c
  9496  0013EE  2617               	addwf	___ftmul@f3_as_product,f,c
  9497  0013F0  5011               	movf	___ftmul@f2+1,w,c
  9498  0013F2  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9499  0013F4  5012               	movf	___ftmul@f2+2,w,c
  9500  0013F6  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9501  0013F8                     i2l2734:
  9502  0013F8  90D8               	bcf	status,0,c
  9503  0013FA  320F               	rrcf	___ftmul@f1+2,f,c
  9504  0013FC  320E               	rrcf	___ftmul@f1+1,f,c
  9505  0013FE  320D               	rrcf	___ftmul@f1,f,c
  9506  001400  90D8               	bcf	status,0,c
  9507  001402  3610               	rlcf	___ftmul@f2,f,c
  9508  001404  3611               	rlcf	___ftmul@f2+1,f,c
  9509  001406  3612               	rlcf	___ftmul@f2+2,f,c
  9510  001408  2E1A               	decfsz	___ftmul@cntr,f,c
  9511  00140A  D7EE               	goto	i2l2730
  9512  00140C  0E09               	movlw	9
  9513  00140E  6E1A               	movwf	___ftmul@cntr,c
  9514  001410                     i2l2740:
  9515  001410  A00D               	btfss	___ftmul@f1,0,c
  9516  001412  D006               	goto	i2l2744
  9517  001414  5010               	movf	___ftmul@f2,w,c
  9518  001416  2617               	addwf	___ftmul@f3_as_product,f,c
  9519  001418  5011               	movf	___ftmul@f2+1,w,c
  9520  00141A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9521  00141C  5012               	movf	___ftmul@f2+2,w,c
  9522  00141E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9523  001420                     i2l2744:
  9524  001420  90D8               	bcf	status,0,c
  9525  001422  320F               	rrcf	___ftmul@f1+2,f,c
  9526  001424  320E               	rrcf	___ftmul@f1+1,f,c
  9527  001426  320D               	rrcf	___ftmul@f1,f,c
  9528  001428  90D8               	bcf	status,0,c
  9529  00142A  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  9530  00142C  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  9531  00142E  3217               	rrcf	___ftmul@f3_as_product,f,c
  9532  001430  2E1A               	decfsz	___ftmul@cntr,f,c
  9533  001432  D7EE               	goto	i2l2740
  9534  001434  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9535  001438  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9536  00143C  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9537  001440  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  9538  001444  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  9539  001448  ECA0  F00C         	call	___ftpack	;wreg free
  9540  00144C  C001  F00D         	movff	?___ftpack,?___ftmul
  9541  001450  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  9542  001454  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  9543  001458  0012               	return	
  9544  00145A                     __end_of___ftmul:
  9545                           	opt stack 0
  9546                           pclatu	equ	0xFFB
  9547                           pclath	equ	0xFFA
  9548                           tblptru	equ	0xFF8
  9549                           tblptrh	equ	0xFF7
  9550                           tblptrl	equ	0xFF6
  9551                           tablat	equ	0xFF5
  9552                           prodh	equ	0xFF4
  9553                           prodl	equ	0xFF3
  9554                           intcon	equ	0xFF2
  9555                           intcon2	equ	0xFF1
  9556                           intcon3	equ	0xFF0
  9557                           postinc0	equ	0xFEE
  9558                           fsr0h	equ	0xFEA
  9559                           fsr0l	equ	0xFE9
  9560                           wreg	equ	0xFE8
  9561                           fsr1h	equ	0xFE2
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function ___ftsub *****************
  9571 ;; Defined at:
  9572 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  f1              3   39[COMRAM] float 
  9575 ;;  f2              3   42[COMRAM] float 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;		None
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  3   39[COMRAM] float 
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:        6 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    2
  9594 ;; This function calls:
  9595 ;;		___ftadd
  9596 ;; This function is called by:
  9597 ;;		_exp
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text53
  9602  0020CE                     __ptext53:
  9603                           	opt stack 0
  9604  0020CE                     ___ftsub:
  9605                           	opt stack 20
  9606                           
  9607                           ;incstack = 0
  9608  0020CE  502B               	movf	___ftsub@f2,w,c
  9609  0020D0  102C               	iorwf	___ftsub@f2+1,w,c
  9610  0020D2  102D               	iorwf	___ftsub@f2+2,w,c
  9611  0020D4  B4D8               	btfsc	status,2,c
  9612  0020D6  D006               	goto	i2l2910
  9613  0020D8  0E00               	movlw	0
  9614  0020DA  1A2B               	xorwf	___ftsub@f2,f,c
  9615  0020DC  0E00               	movlw	0
  9616  0020DE  1A2C               	xorwf	___ftsub@f2+1,f,c
  9617  0020E0  0E80               	movlw	128
  9618  0020E2  1A2D               	xorwf	___ftsub@f2+2,f,c
  9619  0020E4                     i2l2910:
  9620  0020E4  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  9621  0020E8  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  9622  0020EC  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  9623  0020F0  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  9624  0020F4  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  9625  0020F8  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  9626  0020FC  EC76  F005         	call	___ftadd	;wreg free
  9627  002100  C01C  F028         	movff	?___ftadd,?___ftsub
  9628  002104  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  9629  002108  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  9630  00210C  0012               	return	
  9631  00210E                     __end_of___ftsub:
  9632                           	opt stack 0
  9633                           pclatu	equ	0xFFB
  9634                           pclath	equ	0xFFA
  9635                           tblptru	equ	0xFF8
  9636                           tblptrh	equ	0xFF7
  9637                           tblptrl	equ	0xFF6
  9638                           tablat	equ	0xFF5
  9639                           prodh	equ	0xFF4
  9640                           prodl	equ	0xFF3
  9641                           intcon	equ	0xFF2
  9642                           intcon2	equ	0xFF1
  9643                           intcon3	equ	0xFF0
  9644                           postinc0	equ	0xFEE
  9645                           fsr0h	equ	0xFEA
  9646                           fsr0l	equ	0xFE9
  9647                           wreg	equ	0xFE8
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function ___ftadd *****************
  9658 ;; Defined at:
  9659 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  f1              3   27[COMRAM] float 
  9662 ;;  f2              3   30[COMRAM] float 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  exp1            1   38[COMRAM] unsigned char 
  9665 ;;  exp2            1   37[COMRAM] unsigned char 
  9666 ;;  sign            1   36[COMRAM] unsigned char 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  3   27[COMRAM] float 
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0, cstack
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9676 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:       12 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    1
  9683 ;; This function calls:
  9684 ;;		___ftpack
  9685 ;; This function is called by:
  9686 ;;		_dec_to_hex
  9687 ;;		___ftsub
  9688 ;;		_floor
  9689 ;;		_log
  9690 ;;		_eval_poly
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text54
  9695  000AEC                     __ptext54:
  9696                           	opt stack 0
  9697  000AEC                     ___ftadd:
  9698                           	opt stack 20
  9699                           
  9700                           ;incstack = 0
  9701  000AEC  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  9702  000AF0  6A23               	clrf	(??___ftadd+1)& (0+255),c
  9703  000AF2  6A24               	clrf	(??___ftadd+2)& (0+255),c
  9704  000AF4  341D               	rlcf	___ftadd@f1+1,w,c
  9705  000AF6  3622               	rlcf	??___ftadd& (0+255),f,c
  9706  000AF8  E301               	bnc	u197_41
  9707  000AFA  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  9708  000AFC                     u197_41:
  9709  000AFC  5022               	movf	??___ftadd,w,c
  9710  000AFE  6E27               	movwf	___ftadd@exp1,c
  9711  000B00  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  9712  000B04  6A23               	clrf	(??___ftadd+1)& (0+255),c
  9713  000B06  6A24               	clrf	(??___ftadd+2)& (0+255),c
  9714  000B08  3420               	rlcf	___ftadd@f2+1,w,c
  9715  000B0A  3622               	rlcf	??___ftadd& (0+255),f,c
  9716  000B0C  E301               	bnc	u198_41
  9717  000B0E  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  9718  000B10                     u198_41:
  9719  000B10  5022               	movf	??___ftadd,w,c
  9720  000B12  6E26               	movwf	___ftadd@exp2,c
  9721  000B14  5027               	movf	___ftadd@exp1,w,c
  9722  000B16  B4D8               	btfsc	status,2,c
  9723  000B18  D00B               	goto	i2l618
  9724  000B1A  5026               	movf	___ftadd@exp2,w,c
  9725  000B1C  5C27               	subwf	___ftadd@exp1,w,c
  9726  000B1E  B0D8               	btfsc	status,0,c
  9727  000B20  D00E               	goto	i2l2642
  9728  000B22  5027               	movf	___ftadd@exp1,w,c
  9729  000B24  0800               	sublw	0
  9730  000B26  2426               	addwf	___ftadd@exp2,w,c
  9731  000B28  6E22               	movwf	??___ftadd& (0+255),c
  9732  000B2A  0E18               	movlw	24
  9733  000B2C  6422               	cpfsgt	??___ftadd,c
  9734  000B2E  D007               	goto	i2l2642
  9735  000B30                     i2l618:
  9736  000B30  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  9737  000B34  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  9738  000B38  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  9739  000B3C  0012               	return	
  9740  000B3E                     i2l2642:
  9741  000B3E  5026               	movf	___ftadd@exp2,w,c
  9742  000B40  B4D8               	btfsc	status,2,c
  9743  000B42  D00B               	goto	i2l622
  9744  000B44  5027               	movf	___ftadd@exp1,w,c
  9745  000B46  5C26               	subwf	___ftadd@exp2,w,c
  9746  000B48  B0D8               	btfsc	status,0,c
  9747  000B4A  D00E               	goto	i2l2648
  9748  000B4C  5026               	movf	___ftadd@exp2,w,c
  9749  000B4E  0800               	sublw	0
  9750  000B50  2427               	addwf	___ftadd@exp1,w,c
  9751  000B52  6E22               	movwf	??___ftadd& (0+255),c
  9752  000B54  0E18               	movlw	24
  9753  000B56  6422               	cpfsgt	??___ftadd,c
  9754  000B58  D007               	goto	i2l2648
  9755  000B5A                     i2l622:
  9756  000B5A  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  9757  000B5E  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  9758  000B62  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  9759  000B66  0012               	return	
  9760  000B68                     i2l2648:
  9761  000B68  0E06               	movlw	6
  9762  000B6A  6E25               	movwf	___ftadd@sign,c
  9763  000B6C  BE1E               	btfsc	___ftadd@f1+2,7,c
  9764  000B6E  8E25               	bsf	___ftadd@sign,7,c
  9765  000B70  BE21               	btfsc	___ftadd@f2+2,7,c
  9766  000B72  8C25               	bsf	___ftadd@sign,6,c
  9767  000B74  8E1D               	bsf	___ftadd@f1+1,7,c
  9768  000B76  0EFF               	movlw	255
  9769  000B78  161C               	andwf	___ftadd@f1,f,c
  9770  000B7A  0EFF               	movlw	255
  9771  000B7C  161D               	andwf	___ftadd@f1+1,f,c
  9772  000B7E  0E00               	movlw	0
  9773  000B80  161E               	andwf	___ftadd@f1+2,f,c
  9774  000B82  8E20               	bsf	___ftadd@f2+1,7,c
  9775  000B84  0EFF               	movlw	255
  9776  000B86  161F               	andwf	___ftadd@f2,f,c
  9777  000B88  0EFF               	movlw	255
  9778  000B8A  1620               	andwf	___ftadd@f2+1,f,c
  9779  000B8C  0E00               	movlw	0
  9780  000B8E  1621               	andwf	___ftadd@f2+2,f,c
  9781  000B90  5026               	movf	___ftadd@exp2,w,c
  9782  000B92  5C27               	subwf	___ftadd@exp1,w,c
  9783  000B94  B0D8               	btfsc	status,0,c
  9784  000B96  D01B               	goto	i2l2674
  9785  000B98                     i2l2664:
  9786  000B98  90D8               	bcf	status,0,c
  9787  000B9A  361F               	rlcf	___ftadd@f2,f,c
  9788  000B9C  3620               	rlcf	___ftadd@f2+1,f,c
  9789  000B9E  3621               	rlcf	___ftadd@f2+2,f,c
  9790  000BA0  0626               	decf	___ftadd@exp2,f,c
  9791  000BA2  5027               	movf	___ftadd@exp1,w,c
  9792  000BA4  1826               	xorwf	___ftadd@exp2,w,c
  9793  000BA6  B4D8               	btfsc	status,2,c
  9794  000BA8  D00D               	goto	i2l2672
  9795  000BAA  0625               	decf	___ftadd@sign,f,c
  9796  000BAC  C025  F022         	movff	___ftadd@sign,??___ftadd
  9797  000BB0  0E07               	movlw	7
  9798  000BB2  1622               	andwf	??___ftadd,f,c
  9799  000BB4  B4D8               	btfsc	status,2,c
  9800  000BB6  D006               	goto	i2l2672
  9801  000BB8  D7EF               	goto	i2l2664
  9802  000BBA                     i2l2670:
  9803  000BBA  90D8               	bcf	status,0,c
  9804  000BBC  321E               	rrcf	___ftadd@f1+2,f,c
  9805  000BBE  321D               	rrcf	___ftadd@f1+1,f,c
  9806  000BC0  321C               	rrcf	___ftadd@f1,f,c
  9807  000BC2  2A27               	incf	___ftadd@exp1,f,c
  9808  000BC4                     i2l2672:
  9809  000BC4  5026               	movf	___ftadd@exp2,w,c
  9810  000BC6  1827               	xorwf	___ftadd@exp1,w,c
  9811  000BC8  B4D8               	btfsc	status,2,c
  9812  000BCA  D01F               	goto	i2l633
  9813  000BCC  D7F6               	goto	i2l2670
  9814  000BCE                     i2l2674:
  9815  000BCE  5027               	movf	___ftadd@exp1,w,c
  9816  000BD0  5C26               	subwf	___ftadd@exp2,w,c
  9817  000BD2  B0D8               	btfsc	status,0,c
  9818  000BD4  D01A               	goto	i2l633
  9819  000BD6                     i2l2676:
  9820  000BD6  90D8               	bcf	status,0,c
  9821  000BD8  361C               	rlcf	___ftadd@f1,f,c
  9822  000BDA  361D               	rlcf	___ftadd@f1+1,f,c
  9823  000BDC  361E               	rlcf	___ftadd@f1+2,f,c
  9824  000BDE  0627               	decf	___ftadd@exp1,f,c
  9825  000BE0  5027               	movf	___ftadd@exp1,w,c
  9826  000BE2  1826               	xorwf	___ftadd@exp2,w,c
  9827  000BE4  B4D8               	btfsc	status,2,c
  9828  000BE6  D00D               	goto	i2l2684
  9829  000BE8  0625               	decf	___ftadd@sign,f,c
  9830  000BEA  C025  F022         	movff	___ftadd@sign,??___ftadd
  9831  000BEE  0E07               	movlw	7
  9832  000BF0  1622               	andwf	??___ftadd,f,c
  9833  000BF2  B4D8               	btfsc	status,2,c
  9834  000BF4  D006               	goto	i2l2684
  9835  000BF6  D7EF               	goto	i2l2676
  9836  000BF8                     i2l2682:
  9837  000BF8  90D8               	bcf	status,0,c
  9838  000BFA  3221               	rrcf	___ftadd@f2+2,f,c
  9839  000BFC  3220               	rrcf	___ftadd@f2+1,f,c
  9840  000BFE  321F               	rrcf	___ftadd@f2,f,c
  9841  000C00  2A26               	incf	___ftadd@exp2,f,c
  9842  000C02                     i2l2684:
  9843  000C02  5026               	movf	___ftadd@exp2,w,c
  9844  000C04  1827               	xorwf	___ftadd@exp1,w,c
  9845  000C06  A4D8               	btfss	status,2,c
  9846  000C08  D7F7               	goto	i2l2682
  9847  000C0A                     i2l633:
  9848  000C0A  AE25               	btfss	___ftadd@sign,7,c
  9849  000C0C  D00C               	goto	i2l642
  9850  000C0E  0EFF               	movlw	255
  9851  000C10  1A1C               	xorwf	___ftadd@f1,f,c
  9852  000C12  0EFF               	movlw	255
  9853  000C14  1A1D               	xorwf	___ftadd@f1+1,f,c
  9854  000C16  0EFF               	movlw	255
  9855  000C18  1A1E               	xorwf	___ftadd@f1+2,f,c
  9856  000C1A  0E01               	movlw	1
  9857  000C1C  261C               	addwf	___ftadd@f1,f,c
  9858  000C1E  0E00               	movlw	0
  9859  000C20  221D               	addwfc	___ftadd@f1+1,f,c
  9860  000C22  0E00               	movlw	0
  9861  000C24  221E               	addwfc	___ftadd@f1+2,f,c
  9862  000C26                     i2l642:
  9863  000C26  AC25               	btfss	___ftadd@sign,6,c
  9864  000C28  D00C               	goto	i2l2690
  9865  000C2A  0EFF               	movlw	255
  9866  000C2C  1A1F               	xorwf	___ftadd@f2,f,c
  9867  000C2E  0EFF               	movlw	255
  9868  000C30  1A20               	xorwf	___ftadd@f2+1,f,c
  9869  000C32  0EFF               	movlw	255
  9870  000C34  1A21               	xorwf	___ftadd@f2+2,f,c
  9871  000C36  0E01               	movlw	1
  9872  000C38  261F               	addwf	___ftadd@f2,f,c
  9873  000C3A  0E00               	movlw	0
  9874  000C3C  2220               	addwfc	___ftadd@f2+1,f,c
  9875  000C3E  0E00               	movlw	0
  9876  000C40  2221               	addwfc	___ftadd@f2+2,f,c
  9877  000C42                     i2l2690:
  9878  000C42  0E00               	movlw	0
  9879  000C44  6E25               	movwf	___ftadd@sign,c
  9880  000C46  501C               	movf	___ftadd@f1,w,c
  9881  000C48  261F               	addwf	___ftadd@f2,f,c
  9882  000C4A  501D               	movf	___ftadd@f1+1,w,c
  9883  000C4C  2220               	addwfc	___ftadd@f2+1,f,c
  9884  000C4E  501E               	movf	___ftadd@f1+2,w,c
  9885  000C50  2221               	addwfc	___ftadd@f2+2,f,c
  9886  000C52  AE21               	btfss	___ftadd@f2+2,7,c
  9887  000C54  D00E               	goto	i2l2700
  9888  000C56  0EFF               	movlw	255
  9889  000C58  1A1F               	xorwf	___ftadd@f2,f,c
  9890  000C5A  0EFF               	movlw	255
  9891  000C5C  1A20               	xorwf	___ftadd@f2+1,f,c
  9892  000C5E  0EFF               	movlw	255
  9893  000C60  1A21               	xorwf	___ftadd@f2+2,f,c
  9894  000C62  0E01               	movlw	1
  9895  000C64  261F               	addwf	___ftadd@f2,f,c
  9896  000C66  0E00               	movlw	0
  9897  000C68  2220               	addwfc	___ftadd@f2+1,f,c
  9898  000C6A  0E00               	movlw	0
  9899  000C6C  2221               	addwfc	___ftadd@f2+2,f,c
  9900  000C6E  0E01               	movlw	1
  9901  000C70  6E25               	movwf	___ftadd@sign,c
  9902  000C72                     i2l2700:
  9903  000C72  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  9904  000C76  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9905  000C7A  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9906  000C7E  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  9907  000C82  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  9908  000C86  ECA0  F00C         	call	___ftpack	;wreg free
  9909  000C8A  C001  F01C         	movff	?___ftpack,?___ftadd
  9910  000C8E  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  9911  000C92  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  9912  000C96  0012               	return	
  9913  000C98                     __end_of___ftadd:
  9914                           	opt stack 0
  9915                           pclatu	equ	0xFFB
  9916                           pclath	equ	0xFFA
  9917                           tblptru	equ	0xFF8
  9918                           tblptrh	equ	0xFF7
  9919                           tblptrl	equ	0xFF6
  9920                           tablat	equ	0xFF5
  9921                           prodh	equ	0xFF4
  9922                           prodl	equ	0xFF3
  9923                           intcon	equ	0xFF2
  9924                           intcon2	equ	0xFF1
  9925                           intcon3	equ	0xFF0
  9926                           postinc0	equ	0xFEE
  9927                           fsr0h	equ	0xFEA
  9928                           fsr0l	equ	0xFE9
  9929                           wreg	equ	0xFE8
  9930                           fsr1h	equ	0xFE2
  9931                           fsr1l	equ	0xFE1
  9932                           indf2	equ	0xFDF
  9933                           postinc2	equ	0xFDE
  9934                           postdec2	equ	0xFDD
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8
  9938                           
  9939 ;; *************** function ___ftneg *****************
  9940 ;; Defined at:
  9941 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  f1              3    0[COMRAM] float 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;		None
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  3    0[COMRAM] float 
  9948 ;; Registers used:
  9949 ;;		wreg, status,2, status,0
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9955 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9958 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9959 ;;Total ram usage:        3 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; This function calls:
  9962 ;;		Nothing
  9963 ;; This function is called by:
  9964 ;;		_pow
  9965 ;;		_exp
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           	psect	text55
  9970  002308                     __ptext55:
  9971                           	opt stack 0
  9972  002308                     ___ftneg:
  9973                           	opt stack 22
  9974                           
  9975                           ;incstack = 0
  9976  002308  5001               	movf	___ftneg@f1,w,c
  9977  00230A  1002               	iorwf	___ftneg@f1+1,w,c
  9978  00230C  1003               	iorwf	___ftneg@f1+2,w,c
  9979  00230E  B4D8               	btfsc	status,2,c
  9980  002310  D006               	goto	i2l675
  9981  002312  0E00               	movlw	0
  9982  002314  1A01               	xorwf	___ftneg@f1,f,c
  9983  002316  0E00               	movlw	0
  9984  002318  1A02               	xorwf	___ftneg@f1+1,f,c
  9985  00231A  0E80               	movlw	128
  9986  00231C  1A03               	xorwf	___ftneg@f1+2,f,c
  9987  00231E                     i2l675:
  9988  00231E  C001  F001         	movff	___ftneg@f1,?___ftneg
  9989  002322  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9990  002326  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9991  00232A  0012               	return		;funcret
  9992  00232C                     __end_of___ftneg:
  9993                           	opt stack 0
  9994                           pclatu	equ	0xFFB
  9995                           pclath	equ	0xFFA
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon2	equ	0xFF1
 10004                           intcon3	equ	0xFF0
 10005                           postinc0	equ	0xFEE
 10006                           fsr0h	equ	0xFEA
 10007                           fsr0l	equ	0xFE9
 10008                           wreg	equ	0xFE8
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function ___ftdiv *****************
 10019 ;; Defined at:
 10020 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  f1              3    8[COMRAM] float 
 10023 ;;  f2              3   11[COMRAM] float 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  f3              3   18[COMRAM] float 
 10026 ;;  sign            1   22[COMRAM] unsigned char 
 10027 ;;  exp             1   21[COMRAM] unsigned char 
 10028 ;;  cntr            1   17[COMRAM] unsigned char 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  3    8[COMRAM] float 
 10031 ;; Registers used:
 10032 ;;		wreg, status,2, status,0, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10038 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;Total ram usage:       15 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    1
 10045 ;; This function calls:
 10046 ;;		___ftpack
 10047 ;; This function is called by:
 10048 ;;		_exp
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text56
 10053  00145A                     __ptext56:
 10054                           	opt stack 0
 10055  00145A                     ___ftdiv:
 10056                           	opt stack 21
 10057                           
 10058                           ;incstack = 0
 10059  00145A  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 10060  00145E  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10061  001460  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10062  001462  340A               	rlcf	___ftdiv@f1+1,w,c
 10063  001464  360F               	rlcf	??___ftdiv& (0+255),f,c
 10064  001466  E301               	bnc	u237_41
 10065  001468  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10066  00146A                     u237_41:
 10067  00146A  500F               	movf	??___ftdiv,w,c
 10068  00146C  6E16               	movwf	___ftdiv@exp,c
 10069  00146E  5016               	movf	___ftdiv@exp,w,c
 10070  001470  A4D8               	btfss	status,2,c
 10071  001472  D007               	goto	i2l2866
 10072  001474  0E00               	movlw	0
 10073  001476  6E09               	movwf	?___ftdiv,c
 10074  001478  0E00               	movlw	0
 10075  00147A  6E0A               	movwf	?___ftdiv+1,c
 10076  00147C  0E00               	movlw	0
 10077  00147E  6E0B               	movwf	?___ftdiv+2,c
 10078  001480  0012               	return	
 10079  001482                     i2l2866:
 10080  001482  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 10081  001486  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 10082  001488  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 10083  00148A  340D               	rlcf	___ftdiv@f2+1,w,c
 10084  00148C  360F               	rlcf	??___ftdiv& (0+255),f,c
 10085  00148E  E301               	bnc	u239_41
 10086  001490  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 10087  001492                     u239_41:
 10088  001492  500F               	movf	??___ftdiv,w,c
 10089  001494  6E17               	movwf	___ftdiv@sign,c
 10090  001496  5017               	movf	___ftdiv@sign,w,c
 10091  001498  A4D8               	btfss	status,2,c
 10092  00149A  D007               	goto	i2l2872
 10093  00149C  0E00               	movlw	0
 10094  00149E  6E09               	movwf	?___ftdiv,c
 10095  0014A0  0E00               	movlw	0
 10096  0014A2  6E0A               	movwf	?___ftdiv+1,c
 10097  0014A4  0E00               	movlw	0
 10098  0014A6  6E0B               	movwf	?___ftdiv+2,c
 10099  0014A8  0012               	return	
 10100  0014AA                     i2l2872:
 10101  0014AA  0E00               	movlw	0
 10102  0014AC  6E13               	movwf	___ftdiv@f3,c
 10103  0014AE  0E00               	movlw	0
 10104  0014B0  6E14               	movwf	___ftdiv@f3+1,c
 10105  0014B2  0E00               	movlw	0
 10106  0014B4  6E15               	movwf	___ftdiv@f3+2,c
 10107  0014B6  5017               	movf	___ftdiv@sign,w,c
 10108  0014B8  0F89               	addlw	137
 10109  0014BA  5E16               	subwf	___ftdiv@exp,f,c
 10110  0014BC  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 10111  0014C0  500E               	movf	___ftdiv@f2+2,w,c
 10112  0014C2  1A17               	xorwf	___ftdiv@sign,f,c
 10113  0014C4  0E80               	movlw	128
 10114  0014C6  1617               	andwf	___ftdiv@sign,f,c
 10115  0014C8  8E0A               	bsf	___ftdiv@f1+1,7,c
 10116  0014CA  0EFF               	movlw	255
 10117  0014CC  1609               	andwf	___ftdiv@f1,f,c
 10118  0014CE  0EFF               	movlw	255
 10119  0014D0  160A               	andwf	___ftdiv@f1+1,f,c
 10120  0014D2  0E00               	movlw	0
 10121  0014D4  160B               	andwf	___ftdiv@f1+2,f,c
 10122  0014D6  8E0D               	bsf	___ftdiv@f2+1,7,c
 10123  0014D8  0EFF               	movlw	255
 10124  0014DA  160C               	andwf	___ftdiv@f2,f,c
 10125  0014DC  0EFF               	movlw	255
 10126  0014DE  160D               	andwf	___ftdiv@f2+1,f,c
 10127  0014E0  0E00               	movlw	0
 10128  0014E2  160E               	andwf	___ftdiv@f2+2,f,c
 10129  0014E4  0E18               	movlw	24
 10130  0014E6  6E12               	movwf	___ftdiv@cntr,c
 10131  0014E8                     i2l2892:
 10132  0014E8  90D8               	bcf	status,0,c
 10133  0014EA  3613               	rlcf	___ftdiv@f3,f,c
 10134  0014EC  3614               	rlcf	___ftdiv@f3+1,f,c
 10135  0014EE  3615               	rlcf	___ftdiv@f3+2,f,c
 10136  0014F0  500C               	movf	___ftdiv@f2,w,c
 10137  0014F2  5C09               	subwf	___ftdiv@f1,w,c
 10138  0014F4  500D               	movf	___ftdiv@f2+1,w,c
 10139  0014F6  580A               	subwfb	___ftdiv@f1+1,w,c
 10140  0014F8  500E               	movf	___ftdiv@f2+2,w,c
 10141  0014FA  580B               	subwfb	___ftdiv@f1+2,w,c
 10142  0014FC  A0D8               	btfss	status,0,c
 10143  0014FE  D007               	goto	i2l653
 10144  001500  500C               	movf	___ftdiv@f2,w,c
 10145  001502  5E09               	subwf	___ftdiv@f1,f,c
 10146  001504  500D               	movf	___ftdiv@f2+1,w,c
 10147  001506  5A0A               	subwfb	___ftdiv@f1+1,f,c
 10148  001508  500E               	movf	___ftdiv@f2+2,w,c
 10149  00150A  5A0B               	subwfb	___ftdiv@f1+2,f,c
 10150  00150C  8013               	bsf	___ftdiv@f3,0,c
 10151  00150E                     i2l653:
 10152  00150E  90D8               	bcf	status,0,c
 10153  001510  3609               	rlcf	___ftdiv@f1,f,c
 10154  001512  360A               	rlcf	___ftdiv@f1+1,f,c
 10155  001514  360B               	rlcf	___ftdiv@f1+2,f,c
 10156  001516  2E12               	decfsz	___ftdiv@cntr,f,c
 10157  001518  D7E7               	goto	i2l2892
 10158  00151A  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 10159  00151E  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10160  001522  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10161  001526  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 10162  00152A  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 10163  00152E  ECA0  F00C         	call	___ftpack	;wreg free
 10164  001532  C001  F009         	movff	?___ftpack,?___ftdiv
 10165  001536  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 10166  00153A  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 10167  00153E  0012               	return	
 10168  001540                     __end_of___ftdiv:
 10169                           	opt stack 0
 10170                           pclatu	equ	0xFFB
 10171                           pclath	equ	0xFFA
 10172                           tblptru	equ	0xFF8
 10173                           tblptrh	equ	0xFF7
 10174                           tblptrl	equ	0xFF6
 10175                           tablat	equ	0xFF5
 10176                           prodh	equ	0xFF4
 10177                           prodl	equ	0xFF3
 10178                           intcon	equ	0xFF2
 10179                           intcon2	equ	0xFF1
 10180                           intcon3	equ	0xFF0
 10181                           postinc0	equ	0xFEE
 10182                           fsr0h	equ	0xFEA
 10183                           fsr0l	equ	0xFE9
 10184                           wreg	equ	0xFE8
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           indf2	equ	0xFDF
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function ___awtoft *****************
 10195 ;; Defined at:
 10196 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  c               2    8[COMRAM] int 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  sign            1   11[COMRAM] unsigned char 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  3    8[COMRAM] float 
 10203 ;; Registers used:
 10204 ;;		wreg, status,2, status,0, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10210 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10213 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10214 ;;Total ram usage:        4 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    1
 10217 ;; This function calls:
 10218 ;;		___ftpack
 10219 ;; This function is called by:
 10220 ;;		_dec_to_hex
 10221 ;;		_exp
 10222 ;;		_log
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           	psect	text57
 10227  00218A                     __ptext57:
 10228                           	opt stack 0
 10229  00218A                     ___awtoft:
 10230                           	opt stack 21
 10231                           
 10232                           ;incstack = 0
 10233  00218A  0E00               	movlw	0
 10234  00218C  6E0C               	movwf	___awtoft@sign,c
 10235  00218E  AE0A               	btfss	___awtoft@c+1,7,c
 10236  002190  D006               	goto	i2l2922
 10237  002192  6C09               	negf	___awtoft@c,c
 10238  002194  1E0A               	comf	___awtoft@c+1,f,c
 10239  002196  B0D8               	btfsc	status,0,c
 10240  002198  2A0A               	incf	___awtoft@c+1,f,c
 10241  00219A  0E01               	movlw	1
 10242  00219C  6E0C               	movwf	___awtoft@sign,c
 10243  00219E                     i2l2922:
 10244  00219E  C009  F001         	movff	___awtoft@c,___ftpack@arg
 10245  0021A2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 10246  0021A6  6A03               	clrf	___ftpack@arg+2,c
 10247  0021A8  0E8E               	movlw	142
 10248  0021AA  6E04               	movwf	___ftpack@exp,c
 10249  0021AC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 10250  0021B0  ECA0  F00C         	call	___ftpack	;wreg free
 10251  0021B4  C001  F009         	movff	?___ftpack,?___awtoft
 10252  0021B8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 10253  0021BC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 10254  0021C0  0012               	return	
 10255  0021C2                     __end_of___awtoft:
 10256                           	opt stack 0
 10257                           pclatu	equ	0xFFB
 10258                           pclath	equ	0xFFA
 10259                           tblptru	equ	0xFF8
 10260                           tblptrh	equ	0xFF7
 10261                           tblptrl	equ	0xFF6
 10262                           tablat	equ	0xFF5
 10263                           prodh	equ	0xFF4
 10264                           prodl	equ	0xFF3
 10265                           intcon	equ	0xFF2
 10266                           intcon2	equ	0xFF1
 10267                           intcon3	equ	0xFF0
 10268                           postinc0	equ	0xFEE
 10269                           fsr0h	equ	0xFEA
 10270                           fsr0l	equ	0xFE9
 10271                           wreg	equ	0xFE8
 10272                           fsr1h	equ	0xFE2
 10273                           fsr1l	equ	0xFE1
 10274                           indf2	equ	0xFDF
 10275                           postinc2	equ	0xFDE
 10276                           postdec2	equ	0xFDD
 10277                           fsr2h	equ	0xFDA
 10278                           fsr2l	equ	0xFD9
 10279                           status	equ	0xFD8
 10280                           
 10281 ;; *************** function ___lltoft *****************
 10282 ;; Defined at:
 10283 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;  c               4    8[COMRAM] unsigned long 
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;  exp             1   16[COMRAM] unsigned char 
 10288 ;; Return value:  Size  Location     Type
 10289 ;;                  3    8[COMRAM] float 
 10290 ;; Registers used:
 10291 ;;		wreg, status,2, status,0, cstack
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;Total ram usage:        9 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    1
 10304 ;; This function calls:
 10305 ;;		___ftpack
 10306 ;; This function is called by:
 10307 ;;		_pow
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           	psect	text58
 10312  001F40                     __ptext58:
 10313                           	opt stack 0
 10314  001F40                     ___lltoft:
 10315                           	opt stack 22
 10316                           
 10317                           ;incstack = 0
 10318  001F40  0E8E               	movlw	142
 10319  001F42  6E11               	movwf	___lltoft@exp,c
 10320  001F44  D006               	goto	i2l3026
 10321  001F46                     i2l3024:
 10322  001F46  90D8               	bcf	status,0,c
 10323  001F48  320C               	rrcf	___lltoft@c+3,f,c
 10324  001F4A  320B               	rrcf	___lltoft@c+2,f,c
 10325  001F4C  320A               	rrcf	___lltoft@c+1,f,c
 10326  001F4E  3209               	rrcf	___lltoft@c,f,c
 10327  001F50  2A11               	incf	___lltoft@exp,f,c
 10328  001F52                     i2l3026:
 10329  001F52  0E00               	movlw	0
 10330  001F54  1409               	andwf	___lltoft@c,w,c
 10331  001F56  6E0D               	movwf	??___lltoft& (0+255),c
 10332  001F58  0E00               	movlw	0
 10333  001F5A  140A               	andwf	___lltoft@c+1,w,c
 10334  001F5C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10335  001F5E  0E00               	movlw	0
 10336  001F60  140B               	andwf	___lltoft@c+2,w,c
 10337  001F62  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10338  001F64  0EFF               	movlw	255
 10339  001F66  140C               	andwf	___lltoft@c+3,w,c
 10340  001F68  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10341  001F6A  500D               	movf	??___lltoft,w,c
 10342  001F6C  100E               	iorwf	??___lltoft+1,w,c
 10343  001F6E  100F               	iorwf	??___lltoft+2,w,c
 10344  001F70  1010               	iorwf	??___lltoft+3,w,c
 10345  001F72  A4D8               	btfss	status,2,c
 10346  001F74  D7E8               	goto	i2l3024
 10347  001F76  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10348  001F7A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10349  001F7E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10350  001F82  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10351  001F86  0E00               	movlw	0
 10352  001F88  6E05               	movwf	___ftpack@sign,c
 10353  001F8A  ECA0  F00C         	call	___ftpack	;wreg free
 10354  001F8E  C001  F009         	movff	?___ftpack,?___lltoft
 10355  001F92  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10356  001F96  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10357  001F9A  0012               	return	
 10358  001F9C                     __end_of___lltoft:
 10359                           	opt stack 0
 10360                           pclatu	equ	0xFFB
 10361                           pclath	equ	0xFFA
 10362                           tblptru	equ	0xFF8
 10363                           tblptrh	equ	0xFF7
 10364                           tblptrl	equ	0xFF6
 10365                           tablat	equ	0xFF5
 10366                           prodh	equ	0xFF4
 10367                           prodl	equ	0xFF3
 10368                           intcon	equ	0xFF2
 10369                           intcon2	equ	0xFF1
 10370                           intcon3	equ	0xFF0
 10371                           postinc0	equ	0xFEE
 10372                           fsr0h	equ	0xFEA
 10373                           fsr0l	equ	0xFE9
 10374                           wreg	equ	0xFE8
 10375                           fsr1h	equ	0xFE2
 10376                           fsr1l	equ	0xFE1
 10377                           indf2	equ	0xFDF
 10378                           postinc2	equ	0xFDE
 10379                           postdec2	equ	0xFDD
 10380                           fsr2h	equ	0xFDA
 10381                           fsr2l	equ	0xFD9
 10382                           status	equ	0xFD8
 10383                           
 10384 ;; *************** function ___ftpack *****************
 10385 ;; Defined at:
 10386 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;  arg             3    0[COMRAM] unsigned um
 10389 ;;  exp             1    3[COMRAM] unsigned char 
 10390 ;;  sign            1    4[COMRAM] unsigned char 
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;		None
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  3    0[COMRAM] float 
 10395 ;; Registers used:
 10396 ;;		wreg, status,2, status,0
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10402 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;Total ram usage:        8 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; This function calls:
 10409 ;;		Nothing
 10410 ;; This function is called by:
 10411 ;;		___altoft
 10412 ;;		___awtoft
 10413 ;;		___ftadd
 10414 ;;		___ftdiv
 10415 ;;		___ftmul
 10416 ;;		___lltoft
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           	psect	text59
 10421  001940                     __ptext59:
 10422                           	opt stack 0
 10423  001940                     ___ftpack:
 10424                           	opt stack 20
 10425                           
 10426                           ;incstack = 0
 10427  001940  5004               	movf	___ftpack@exp,w,c
 10428  001942  B4D8               	btfsc	status,2,c
 10429  001944  D005               	goto	i2l2586
 10430  001946  5001               	movf	___ftpack@arg,w,c
 10431  001948  1002               	iorwf	___ftpack@arg+1,w,c
 10432  00194A  1003               	iorwf	___ftpack@arg+2,w,c
 10433  00194C  A4D8               	btfss	status,2,c
 10434  00194E  D00C               	goto	i2l2592
 10435  001950                     i2l2586:
 10436  001950  0E00               	movlw	0
 10437  001952  6E01               	movwf	?___ftpack,c
 10438  001954  0E00               	movlw	0
 10439  001956  6E02               	movwf	?___ftpack+1,c
 10440  001958  0E00               	movlw	0
 10441  00195A  6E03               	movwf	?___ftpack+2,c
 10442  00195C  0012               	return	
 10443  00195E                     i2l2590:
 10444  00195E  2A04               	incf	___ftpack@exp,f,c
 10445  001960  90D8               	bcf	status,0,c
 10446  001962  3203               	rrcf	___ftpack@arg+2,f,c
 10447  001964  3202               	rrcf	___ftpack@arg+1,f,c
 10448  001966  3201               	rrcf	___ftpack@arg,f,c
 10449  001968                     i2l2592:
 10450  001968  0E00               	movlw	0
 10451  00196A  1401               	andwf	___ftpack@arg,w,c
 10452  00196C  6E06               	movwf	??___ftpack& (0+255),c
 10453  00196E  0E00               	movlw	0
 10454  001970  1402               	andwf	___ftpack@arg+1,w,c
 10455  001972  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10456  001974  0EFE               	movlw	254
 10457  001976  1403               	andwf	___ftpack@arg+2,w,c
 10458  001978  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10459  00197A  5006               	movf	??___ftpack,w,c
 10460  00197C  1007               	iorwf	??___ftpack+1,w,c
 10461  00197E  1008               	iorwf	??___ftpack+2,w,c
 10462  001980  B4D8               	btfsc	status,2,c
 10463  001982  D00C               	goto	i2l2598
 10464  001984  D7EC               	goto	i2l2590
 10465  001986                     i2l2594:
 10466  001986  2A04               	incf	___ftpack@exp,f,c
 10467  001988  0E01               	movlw	1
 10468  00198A  2601               	addwf	___ftpack@arg,f,c
 10469  00198C  0E00               	movlw	0
 10470  00198E  2202               	addwfc	___ftpack@arg+1,f,c
 10471  001990  0E00               	movlw	0
 10472  001992  2203               	addwfc	___ftpack@arg+2,f,c
 10473  001994  90D8               	bcf	status,0,c
 10474  001996  3203               	rrcf	___ftpack@arg+2,f,c
 10475  001998  3202               	rrcf	___ftpack@arg+1,f,c
 10476  00199A  3201               	rrcf	___ftpack@arg,f,c
 10477  00199C                     i2l2598:
 10478  00199C  0E00               	movlw	0
 10479  00199E  1401               	andwf	___ftpack@arg,w,c
 10480  0019A0  6E06               	movwf	??___ftpack& (0+255),c
 10481  0019A2  0E00               	movlw	0
 10482  0019A4  1402               	andwf	___ftpack@arg+1,w,c
 10483  0019A6  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10484  0019A8  0EFF               	movlw	255
 10485  0019AA  1403               	andwf	___ftpack@arg+2,w,c
 10486  0019AC  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10487  0019AE  5006               	movf	??___ftpack,w,c
 10488  0019B0  1007               	iorwf	??___ftpack+1,w,c
 10489  0019B2  1008               	iorwf	??___ftpack+2,w,c
 10490  0019B4  B4D8               	btfsc	status,2,c
 10491  0019B6  D006               	goto	i2l2602
 10492  0019B8  D7E6               	goto	i2l2594
 10493  0019BA                     i2l2600:
 10494  0019BA  0604               	decf	___ftpack@exp,f,c
 10495  0019BC  90D8               	bcf	status,0,c
 10496  0019BE  3601               	rlcf	___ftpack@arg,f,c
 10497  0019C0  3602               	rlcf	___ftpack@arg+1,f,c
 10498  0019C2  3603               	rlcf	___ftpack@arg+2,f,c
 10499  0019C4                     i2l2602:
 10500  0019C4  BE02               	btfsc	___ftpack@arg+1,7,c
 10501  0019C6  D003               	goto	i2l595
 10502  0019C8  0E02               	movlw	2
 10503  0019CA  6004               	cpfslt	___ftpack@exp,c
 10504  0019CC  D7F6               	goto	i2l2600
 10505  0019CE                     i2l595:
 10506  0019CE  A004               	btfss	___ftpack@exp,0,c
 10507  0019D0  9E02               	bcf	___ftpack@arg+1,7,c
 10508  0019D2  90D8               	bcf	status,0,c
 10509  0019D4  3204               	rrcf	___ftpack@exp,f,c
 10510  0019D6  5004               	movf	___ftpack@exp,w,c
 10511  0019D8  1203               	iorwf	___ftpack@arg+2,f,c
 10512  0019DA  5005               	movf	___ftpack@sign,w,c
 10513  0019DC  A4D8               	btfss	status,2,c
 10514  0019DE  8E03               	bsf	___ftpack@arg+2,7,c
 10515  0019E0  C001  F001         	movff	___ftpack@arg,?___ftpack
 10516  0019E4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10517  0019E8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10518  0019EC  0012               	return	
 10519  0019EE                     __end_of___ftpack:
 10520                           	opt stack 0
 10521                           pclatu	equ	0xFFB
 10522                           pclath	equ	0xFFA
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           intcon2	equ	0xFF1
 10531                           intcon3	equ	0xFF0
 10532                           postinc0	equ	0xFEE
 10533                           fsr0h	equ	0xFEA
 10534                           fsr0l	equ	0xFE9
 10535                           wreg	equ	0xFE8
 10536                           fsr1h	equ	0xFE2
 10537                           fsr1l	equ	0xFE1
 10538                           indf2	equ	0xFDF
 10539                           postinc2	equ	0xFDE
 10540                           postdec2	equ	0xFDD
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function ___awdiv *****************
 10546 ;; Defined at:
 10547 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  dividend        2    0[COMRAM] int 
 10550 ;;  divisor         2    2[COMRAM] int 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  quotient        2    6[COMRAM] int 
 10553 ;;  sign            1    5[COMRAM] unsigned char 
 10554 ;;  counter         1    4[COMRAM] unsigned char 
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  2    0[COMRAM] int 
 10557 ;; Registers used:
 10558 ;;		wreg, status,2, status,0
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10567 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10568 ;;Total ram usage:        8 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; This function calls:
 10571 ;;		Nothing
 10572 ;; This function is called by:
 10573 ;;		_dec_to_hex
 10574 ;; This function uses a non-reentrant model
 10575 ;;
 10576                           
 10577                           	psect	text60
 10578  001C42                     __ptext60:
 10579                           	opt stack 0
 10580  001C42                     ___awdiv:
 10581                           	opt stack 24
 10582                           
 10583                           ;incstack = 0
 10584  001C42  0E00               	movlw	0
 10585  001C44  6E06               	movwf	___awdiv@sign,c
 10586  001C46  AE04               	btfss	___awdiv@divisor+1,7,c
 10587  001C48  D006               	goto	i2l3366
 10588  001C4A  6C03               	negf	___awdiv@divisor,c
 10589  001C4C  1E04               	comf	___awdiv@divisor+1,f,c
 10590  001C4E  B0D8               	btfsc	status,0,c
 10591  001C50  2A04               	incf	___awdiv@divisor+1,f,c
 10592  001C52  0E01               	movlw	1
 10593  001C54  6E06               	movwf	___awdiv@sign,c
 10594  001C56                     i2l3366:
 10595  001C56  AE02               	btfss	___awdiv@dividend+1,7,c
 10596  001C58  D006               	goto	i2l3372
 10597  001C5A  6C01               	negf	___awdiv@dividend,c
 10598  001C5C  1E02               	comf	___awdiv@dividend+1,f,c
 10599  001C5E  B0D8               	btfsc	status,0,c
 10600  001C60  2A02               	incf	___awdiv@dividend+1,f,c
 10601  001C62  0E01               	movlw	1
 10602  001C64  1A06               	xorwf	___awdiv@sign,f,c
 10603  001C66                     i2l3372:
 10604  001C66  0E00               	movlw	0
 10605  001C68  6E08               	movwf	___awdiv@quotient+1,c
 10606  001C6A  0E00               	movlw	0
 10607  001C6C  6E07               	movwf	___awdiv@quotient,c
 10608  001C6E  5003               	movf	___awdiv@divisor,w,c
 10609  001C70  1004               	iorwf	___awdiv@divisor+1,w,c
 10610  001C72  B4D8               	btfsc	status,2,c
 10611  001C74  D01C               	goto	i2l3394
 10612  001C76  0E01               	movlw	1
 10613  001C78  6E05               	movwf	___awdiv@counter,c
 10614  001C7A  D004               	goto	i2l3380
 10615  001C7C                     i2l3378:
 10616  001C7C  90D8               	bcf	status,0,c
 10617  001C7E  3603               	rlcf	___awdiv@divisor,f,c
 10618  001C80  3604               	rlcf	___awdiv@divisor+1,f,c
 10619  001C82  2A05               	incf	___awdiv@counter,f,c
 10620  001C84                     i2l3380:
 10621  001C84  AE04               	btfss	___awdiv@divisor+1,7,c
 10622  001C86  D7FA               	goto	i2l3378
 10623  001C88                     i2l3382:
 10624  001C88  90D8               	bcf	status,0,c
 10625  001C8A  3607               	rlcf	___awdiv@quotient,f,c
 10626  001C8C  3608               	rlcf	___awdiv@quotient+1,f,c
 10627  001C8E  5003               	movf	___awdiv@divisor,w,c
 10628  001C90  5C01               	subwf	___awdiv@dividend,w,c
 10629  001C92  5004               	movf	___awdiv@divisor+1,w,c
 10630  001C94  5802               	subwfb	___awdiv@dividend+1,w,c
 10631  001C96  A0D8               	btfss	status,0,c
 10632  001C98  D005               	goto	i2l3390
 10633  001C9A  5003               	movf	___awdiv@divisor,w,c
 10634  001C9C  5E01               	subwf	___awdiv@dividend,f,c
 10635  001C9E  5004               	movf	___awdiv@divisor+1,w,c
 10636  001CA0  5A02               	subwfb	___awdiv@dividend+1,f,c
 10637  001CA2  8007               	bsf	___awdiv@quotient,0,c
 10638  001CA4                     i2l3390:
 10639  001CA4  90D8               	bcf	status,0,c
 10640  001CA6  3204               	rrcf	___awdiv@divisor+1,f,c
 10641  001CA8  3203               	rrcf	___awdiv@divisor,f,c
 10642  001CAA  2E05               	decfsz	___awdiv@counter,f,c
 10643  001CAC  D7ED               	goto	i2l3382
 10644  001CAE                     i2l3394:
 10645  001CAE  5006               	movf	___awdiv@sign,w,c
 10646  001CB0  B4D8               	btfsc	status,2,c
 10647  001CB2  D004               	goto	i2l3398
 10648  001CB4  6C07               	negf	___awdiv@quotient,c
 10649  001CB6  1E08               	comf	___awdiv@quotient+1,f,c
 10650  001CB8  B0D8               	btfsc	status,0,c
 10651  001CBA  2A08               	incf	___awdiv@quotient+1,f,c
 10652  001CBC                     i2l3398:
 10653  001CBC  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10654  001CC0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10655  001CC4  0012               	return	
 10656  001CC6                     __end_of___awdiv:
 10657                           	opt stack 0
 10658                           pclatu	equ	0xFFB
 10659                           pclath	equ	0xFFA
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           intcon2	equ	0xFF1
 10668                           intcon3	equ	0xFF0
 10669                           postinc0	equ	0xFEE
 10670                           fsr0h	equ	0xFEA
 10671                           fsr0l	equ	0xFE9
 10672                           wreg	equ	0xFE8
 10673                           fsr1h	equ	0xFE2
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           postdec2	equ	0xFDD
 10678                           fsr2h	equ	0xFDA
 10679                           fsr2l	equ	0xFD9
 10680                           status	equ	0xFD8
 10681                           pclatu	equ	0xFFB
 10682                           pclath	equ	0xFFA
 10683                           tblptru	equ	0xFF8
 10684                           tblptrh	equ	0xFF7
 10685                           tblptrl	equ	0xFF6
 10686                           tablat	equ	0xFF5
 10687                           prodh	equ	0xFF4
 10688                           prodl	equ	0xFF3
 10689                           intcon	equ	0xFF2
 10690                           intcon2	equ	0xFF1
 10691                           intcon3	equ	0xFF0
 10692                           postinc0	equ	0xFEE
 10693                           fsr0h	equ	0xFEA
 10694                           fsr0l	equ	0xFE9
 10695                           wreg	equ	0xFE8
 10696                           fsr1h	equ	0xFE2
 10697                           fsr1l	equ	0xFE1
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705                           	psect	rparam
 10706  0000                     pclatu	equ	0xFFB
 10707                           pclath	equ	0xFFA
 10708                           tblptru	equ	0xFF8
 10709                           tblptrh	equ	0xFF7
 10710                           tblptrl	equ	0xFF6
 10711                           tablat	equ	0xFF5
 10712                           prodh	equ	0xFF4
 10713                           prodl	equ	0xFF3
 10714                           intcon	equ	0xFF2
 10715                           intcon2	equ	0xFF1
 10716                           intcon3	equ	0xFF0
 10717                           postinc0	equ	0xFEE
 10718                           fsr0h	equ	0xFEA
 10719                           fsr0l	equ	0xFE9
 10720                           wreg	equ	0xFE8
 10721                           fsr1h	equ	0xFE2
 10722                           fsr1l	equ	0xFE1
 10723                           indf2	equ	0xFDF
 10724                           postinc2	equ	0xFDE
 10725                           postdec2	equ	0xFDD
 10726                           fsr2h	equ	0xFDA
 10727                           fsr2l	equ	0xFD9
 10728                           status	equ	0xFD8
 10729                           
 10730                           	psect	temp
 10731  00007E                     btemp:
 10732                           	opt stack 0
 10733  00007E                     	ds	1
 10734  0000                     int$flags	set	btemp
 10735                           pclatu	equ	0xFFB
 10736                           pclath	equ	0xFFA
 10737                           tblptru	equ	0xFF8
 10738                           tblptrh	equ	0xFF7
 10739                           tblptrl	equ	0xFF6
 10740                           tablat	equ	0xFF5
 10741                           prodh	equ	0xFF4
 10742                           prodl	equ	0xFF3
 10743                           intcon	equ	0xFF2
 10744                           intcon2	equ	0xFF1
 10745                           intcon3	equ	0xFF0
 10746                           postinc0	equ	0xFEE
 10747                           fsr0h	equ	0xFEA
 10748                           fsr0l	equ	0xFE9
 10749                           wreg	equ	0xFE8
 10750                           fsr1h	equ	0xFE2
 10751                           fsr1l	equ	0xFE1
 10752                           indf2	equ	0xFDF
 10753                           postinc2	equ	0xFDE
 10754                           postdec2	equ	0xFDD
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8


Data Sizes:
    Strings     428
    Constant    99
    Data        2
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     125
    BANK0           128     54      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_23(CODE[15]), STR_22(CODE[16]), STR_21(CODE[25]), STR_20(CODE[24]), 
		 -> STR_19(CODE[23]), STR_18(CODE[18]), STR_17(CODE[23]), STR_16(CODE[10]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[23]), STR_4(CODE[23]), 
		 -> STR_3(CODE[10]), STR_2(CODE[17]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack

Critical Paths under _main in BANK0

    _main->_bottle_time
    _main->_operation
    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _date_time->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30207
                                             52 BANK0      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    4079
                                             50 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    4079
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0    4712
                                             50 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     520
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          2     0      2    4165
                                             50 BANK0      2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    4503
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    3944
                                             28 BANK0     22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     593
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 21    21      0   72340
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                       _servo_rotate
                           i2___wmul
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            25    23      2    2120
                                             12 COMRAM    16    14      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate                                         3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   69271
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   57987
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   18906
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31474
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8283
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      46       5       54.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 07 17:51:01 2017

               ___altoft@exp 003F           i2_I2C_Master_Start 2406           i2_I2C_Master_Write 23E4  
              ___altoft@sign 0040                           l34 237C               ?_emergencystop 0001  
               ___awdiv@sign 0006          ___wmul@multiplicand 0092           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l333 0130                          l293 2362                          l725 192E  
                        l778 1D34                          l788 1E76                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        _exp 0908                          _log 0F56                          _isr 0008  
                        _pow 0C98                          _ptr 007A                 ___awmod@sign 0095  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 00B2  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0012                 ___ftdiv@sign 0017  
               __CFG_WDT$OFF 000000                         l3012 22B2                         l3040 1CF0  
                       l3200 0050                         l3050 1D26                         l3042 1CF6  
                       l3060 1E3E                         l3300 02E2                         l3038 1CE4  
                       l3062 1E44                         l3302 02E8                         l3310 0382  
                       l3230 0168                         l3214 00F8                         l3206 0080  
                       l3304 0334                         l3312 0394                         l3410 1A0A  
                       l3066 1E68                         l3058 1E32                         l3314 039C  
                       l3250 01C6                         l3234 0184                         l3218 00FE  
                       l3420 1A3A                         l3236 018A                         l3316 03A8  
                       l3422 1A40                         l3430 1A72                         l3414 1A1A  
                       l3190 0020                         l3272 0230                         l3248 01C0  
                       l3264 01FC                         l3434 1A86                         l3426 1A64  
                       l3418 1A2E                         l3290 02A8                         l3266 020E  
                       l3194 0034                         l3178 228A                         l3602 1AF8  
                       l3444 18B2                         l3292 02B4                         l3284 028C  
                       l3276 0268                         l3196 0046                         l3446 18C2  
                       l3278 0272                         l3622 1664                         l3456 191C  
                       l3448 18C8                         l3296 02CE                         l3650 0E68  
                       l3618 165A                         l3644 0E3A                         l3628 1684  
                       l3662 0EC4                         l3638 0E0C                         l3582 1A92  
                       l3910 10EE                         l3902 10D6                         l3656 0E96  
                       l3912 10F4                         l3904 10DC                         l3920 1158  
                       l3674 0F12                         l3594 1AD6                         l3914 10FA  
                       l3906 10E2                         l3668 0EF2                         l3588 1AB4  
                       l3908 10E8                         l3918 112A                         ?_exp 0049  
                       ?_log 0034                         ?_isr 0001                         ?_pow 0052  
                       STR_1 FFDC                         STR_2 FF02                         STR_3 FFEA  
                       STR_4 FEB1                         STR_5 FEC8                         STR_6 FF24  
                       STR_7 FF13                         STR_8 FF68                         STR_9 FF57  
                       _T0CS 007EAD                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u3345 1F10                         u2780 2288                         u3727 1166  
                       u3737 1FF6                         u3747 2032                         _RCEN 007E2B  
                       u3757 1EA0                         u3767 1EA8                         u3777 1ED2  
                       i2l34 2390                         u3787 1EDA                         _TMR0 000FD6  
                       _RSEN 007E29                         _main 1070                 ___ftpack@arg 0001  
                       _keys FDEF                 ___ftpack@exp 0004                         _time 00B6  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007E  
                       exp@x 0049                         log@x 0034                         isr@i 0075  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         pow@x 0052  
                       pow@y 0055                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000              __end_ofi2_putch 23CE  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A                 ___param_bank 000000  
               ___ftmul@sign 001B                  i2_lcdNibble 203E                ?_bottle_count 0001  
               ___fttol@exp1 0036                        ??_exp 004C                        ??_log 0037  
               ___fttol@lval 0032                        ??_isr 0080                        ??_pow 0058  
           ?_I2C_Master_Init 009D             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                servo_rotate@i 0002                        ?_main 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D              __end_of___awdiv 1CC6  
            __end_of___ftadd 0C98                        STR_10 FF46                        STR_11 FF35  
                      STR_12 FF79                        STR_20 FE6B                        STR_13 FF9B  
                      STR_21 FE52                        STR_22 FFBD                        STR_14 FF8A  
                      STR_23 FFCD                        STR_15 FFAC                        STR_16 FFF4  
                      STR_24 FEF1                        STR_17 FE9A                        STR_18 FEDF  
                      STR_19 FE83              __end_of___awmod 1A90              __end_of___ftdiv 1540  
            __end_of___ftneg 232C              __end_of___lldiv 1940              __end_of___ftmul 145A  
            ___awdiv@divisor 0003              __end_of___ftsub 210E              __end_of___fttol 1366  
                      _T0PS0 007EA8                        _T0PS1 007EA9                        _T0PS2 007EAA  
            __end_of___lwdiv 1D3E              __end_of___lwmod 1E80                        i2l220 0724  
                      i2l301 2188                        i2l216 0870                        i2l219 086C  
                      i2l333 04B2                        i2l238 08CC                        i2l622 0B5A  
                      i2l633 0C0A                        i2l642 0C26                        i2l618 0B30  
                      i2l810 0CCE                        i2l653 150E                        i2l815 0DFC  
                      i2l595 19CE                        i2l675 231E                        i2l778 1FE4  
                      i2l788 20C4              ___awdiv@counter 0005                        i2l973 09BA  
                      i2l974 0ADE                        i2l984 1610                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011              __end_of_lcdInst 23C2  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 203E               __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003  
              ___awtoft@sign 000C              __end_of_dpowers FE0A                        _floor 1540  
                      _etime 00BD                        _ldexp 17C2                        _frexp 1B22  
                      _errno 0078              __end_of_isdigit 22BC                ___ftpack@sign 0005  
                      _putch 23A2                        _stime 00C1                        pclath 000FFA  
                      tablat 000FF5                        pow@yi 005F              __end_of_timeset FE19  
           __end_ofi2___wmul 2308              __end_of_standby 21F8                        status 000FD8  
             __CFG_PBADEN$ON 000000                i2printf@width 001A                  exp@exponent 004F  
           __end_ofi2_printf 06D2           __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042  
                ldexp@newexp 0037              __initialization 210E                  log@exponent 0037  
         __size_ofi2_lcdInst 000C              ??_emergencystop 00B2               ??_bottle_count 00B2  
               __end_of_main 1176                 __end_of_keys FE00                   i2printf@ap 0014  
         __size_ofi2_isdigit 001E                       ??_main 00B4                ___fttol@sign1 0031  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0091  
         ??_I2C_Master_Start 0091                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0093                       ?_floor 0041                       ?_ldexp 0034  
                     ?_frexp 0001             __end_of___altoft 1DB6                       _T08BIT 007EAE  
           ___awdiv@dividend 0001              i2lcdNibble@data 0002             __end_of___awtoft 21C2  
                     ?_putch 0001             __end_of___ftpack 19EE              i2lcdNibble@temp 0001  
           __end_of___lltoft 1F9C                       _INT1IE 007F83                       _INT1IF 007F80  
                     i2l3110 098C                       i2l3024 1F46                       i2l3104 0956  
                     i2l4000 0898                       i2l3026 1F52                       i2l4010 08B6  
                     i2l3132 0AB4                       u220_41 139E                       i2l4006 08AE  
                     i2l2600 19BA                       i2l2602 19C4                       i2l3082 0F90  
                     i2l2700 0C72                       i2l3076 0F70                       i2l2710 138E  
                     i2l3342 0D56                       i2l3334 0CF4                       i2l3510 1FBA  
                     i2l3328 0CDC                       i2l3520 1FDA                       i2l3512 1FBE  
                     i2l2642 0B3E                       i2l2730 13E8                       i2l2626 1D60  
                     i2l3098 0920                       i2l3346 0D78                       i2l3530 20A2  
                     i2l3380 1C84                       i2l3372 1C66                       i2l2740 1410  
                     i2l2716 13B6                       i2l2628 1D6C                       i2l2812 1354  
                     i2l2804 132C                       i2l3508 1FB2                       i2l3532 20A6  
                     i2l3390 1CA4                       i2l3382 1C88                       i2l3366 1C56  
                     i2l2590 195E                       i2l2670 0BBA                       i2l2910 20E4  
                     i2l2734 13F8                       i2l2806 1338                       i2l3710 1190  
                     i2l3702 1E0E                       i2l2592 1968                       i2l2672 0BC4  
                     i2l2664 0B98                       i2l2648 0B68                       i2l2744 1420  
                     i2l2760 1C12                       i2l2808 133E                       i2l2824 1B4A  
                     i2l3480 22DC                       i2l3536 20BA                       i2l3528 209A  
                     i2l3800 052A                       i2l3378 1C7C                       i2l3394 1CAE  
                     i2l2594 1986                       i2l2586 1950                       i2l2922 219E  
                     i2l2690 0C42                       i2l2682 0BF8                       i2l2674 0BCE  
                     i2l3722 1260                       i2l3802 052E                       i2l2684 0C02  
                     i2l2676 0BD6                       i2l2756 1BE2                       i2l2940 156E  
                     i2l3398 1CBC                       i2l2598 199C                       i2l2766 1C3E  
                     i2l3726 2154                       i2l3830 05B0                       i2l3742 03D0  
                     i2l2872 14AA                       i2l2776 129E                       i2l2944 157C  
                     i2l3824 0584                       i2l3816 055A                       i2l3752 03F4  
                     i2l2866 1482                       i2l2794 1304                       i2l3498 2342  
                     i2l3842 05DC                       i2l3818 056A                       i2l3770 0484  
                     i2l3746 03E0                       i2l2892 14E8                       i2l2956 1730  
                     i2l2948 1596                       i2l3692 1DEA                       i2l3844 05E4  
                     i2l3852 060A                       i2l3836 05C6                       i2l3828 05A8  
                     i2l3748 03EE                       i2l3940 0746                       i2l2958 17AC  
                     i2l2798 1314                       i2l2990 184C                       i2l2974 181E  
                     i2l2966 17DA                       i2l3854 0610                       i2l3862 069A  
                     i2l3782 04E0                       i2l3766 0480                       i2l3758 0422  
                     i2l3942 074E                       i2l3926 0712                       i2l3696 1DF2  
                     i2l3856 0654                       i2l3864 06AA                       i2l3848 05F8  
                     i2l2986 1840                       i2l3866 06B0                       i2l3786 04FA  
                     i2l3970 081E                       i2l3954 0800                       i2l3946 075A  
                     i2l3788 04FE                       i2l3868 06B8                       i2l3948 0764  
                     i2l3958 0804                       i2l3982 083A                       i2l3978 0834  
                     u218_41 1376                       u227_41 1282                       u237_41 146A  
                     u239_41 1492                       u197_41 0AFC                       u198_41 0B10  
                     _TMR0IE 007F95                       _TMR0IF 007F92                    ??i2_putch 0003  
                     _TMR0ON 007EAF                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
                     ___ftge 1BB2                       ___wmul 222E                    ??___awdiv 0005  
                  ??___ftadd 0022               __CFG_STVREN$ON 000000                    ??___awmod 0094  
                  ??___ftdiv 000F                    ??___ftneg 0004                    ??___lldiv 0098  
                  ??___ftmul 0013                    ??___ftsub 002E                    ??___fttol 002C  
                  ??___lwdiv 0094                    ??___lwmod 009B                dec_to_hex@num 0063  
                     clear_0 212C                       clear_1 2138             ___awdiv@quotient 0007  
            ___awmod@divisor 0092              ___awmod@counter 0094                    ??_lcdInst 0092  
                     _printf 0012                       floor@i 0044                       floor@x 0041  
      ___ftmul@f3_as_product 0017                    ??_initLCD 0093                    ??_isdigit 0090  
          __end_ofi2___lwdiv 1FEE                 __mediumconst FDEE            __end_ofi2___lwmod 20CE  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_standby 00B2            __end_ofi2_lcdInst 23DA            __end_ofi2_isdigit 234A  
           __end_ofexp@coeff FE37         __size_of_bottle_time 0036             __end_oflog@coeff FE52  
                 __accesstop 0080      __end_of__initialization 213E                   ___altoft@c 0037  
                 ___ftadd@f1 001C                   ___ftadd@f2 001F                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                 eval_poly@res 0031                ___rparam_used 000001  
                 ___ftdiv@f1 0009                   ___ftdiv@f2 000C                   ___ftdiv@f3 0013  
                 ___ftneg@f1 0001                   ___awtoft@c 0009                   ___ftmul@f1 000D  
                 ___ftmul@f2 0010                   ___ftsub@f1 0028                   ___ftsub@f2 002B  
                 ___fttol@f1 0028           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 240E                   ___lltoft@c 0009                __end_of_floor 161E  
              __end_of_ldexp 1884                __end_of_frexp 1BB2                __end_of_putch 23B2  
                i2printf@idx 0013                  i2printf@val 0017           __size_of_date_time 00D2  
                  ?i2___wmul 0001           __size_of_lcdNibble 0060                  i2putch@data 0003  
                  ?i2_printf 000D                      ??_floor 0044                      ??_ldexp 0039  
                    ??_frexp 0006         __end_of_bottle_count 0F56                   _dec_to_hex 1176  
                    ??_putch 0092                   __pbssBANK0 00B6           __size_of_eval_poly 00D2  
         __size_of_read_time 0068                      ?___ftge 0001                 ?i2_lcdNibble 0001  
                    ?___wmul 0090                    ?___altoft 0037                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 009C           __size_of_operation 0092  
                  ?___lltoft 0009                   ??i2___wmul 0005                   ??i2_printf 000F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
          __end_of_date_time 16F0                      i2_putch 23C2            _bottle_count_disp 00C4  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1EE0  __size_ofi2_I2C_Master_Write 000A  
              ?_operationend 0001                      __Hparam 0000                      __Lparam 0000  
            __size_of___ftge 0090                      ___awdiv 1C42                      ___ftadd 0AEC  
                    ___awmod 19EE                      ___ftdiv 145A                      ___ftneg 2308  
                    ___lldiv 1884              __size_of___wmul 0036                      ___ftmul 1366  
                    ___ftsub 20CE                      ___fttol 1272                      ___lwdiv 1CC6  
                    ___lwmod 1E1E                   _curr_state 00C3                   ??___altoft 003B  
                    __pcinit 210E                   ??___awtoft 000C                   ??___ftpack 0006  
          __end_of_eval_poly 17C2                      __ramtop 1000                      _lcdInst 23B2  
                 ??___lltoft 000D                      __ptext0 1070                      __ptext1 21C2  
                    __ptext2 2364                      __ptext3 1A90                      __ptext4 1FEE  
                    __ptext5 234A                      __ptext6 161E                      __ptext7 23DA  
                    __ptext8 23EE                      __ptext9 23F6              __size_of_printf 03B4  
             dec_to_hex@temp 006B                      _initLCD 1FEE            __end_of_hexpowers FE12  
              i2_isdigit$688 0002                      _dpowers FE00                 __size_of_exp 01E4  
               __size_of_log 011A                      _isdigit 2292                 __size_of_isr 0900  
               __size_of_pow 0172             ___awmod@dividend 0090            __end_of_read_time 1E1E  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014  
                 date_time@i 00B2     __size_of_I2C_Master_Stop 0008                      _timeset FE12  
                    _standby 21C2                  ?_dec_to_hex 0063               __pintcode_body 06D2  
       end_of_initialization 213E                      exp@sign 0051                __Lmediumconst FDEE  
                    int_func 06D2          i2___wmul@multiplier 0001            __end_of_operation 1B22  
             _operation_disp 00BF               ??_operationend 00B2    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0094                      pow@sign 005E  
            ___lldiv@counter 009C                      printf@c 00B1                      printf@f 009C  
           I2C_Master_Init@c 009D             I2C_Master_Read@a 0091                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE        __end_of_emergencystop 2364  
              ?_servo_rotate 0001                    _PORTEbits 000F84        __size_of_bottle_count 014C  
          i2_I2C_Master_Read 22BC            i2_I2C_Master_Wait 2390            i2_I2C_Master_Stop 23FE  
          i2___lwdiv@divisor 0003                    i2___lwdiv 1F9C                    i2___lwmod 208C  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                   _start_time 007C                    i2_lcdInst 23CE  
                ___ftdiv@exp 0016                  printf@width 00AF          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 232C          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
                ___ftmul@exp 0016                 _bottle_count 0E0A               __end_of___ftge 1C42  
             __end_of___wmul 2264          __size_of_dec_to_hex 00FC               ??_servo_rotate 0001  
       __size_ofi2_lcdNibble 004E                i2lcdInst@data 0003                   floor@expon 0047  
           i2___wmul@product 0005               __end_of_printf 03C6                 i2printf@flag 0019  
  __end_ofi2_I2C_Master_Read 22E2    __end_ofi2_I2C_Master_Wait 23A2                 i2printf@prec 0016  
        start_initialization 210E    __end_ofi2_I2C_Master_Stop 2406                   eval_poly@d 002B  
                 eval_poly@n 002D                   eval_poly@x 0028            __size_ofi2___wmul 0026  
                 ldexp@value 0034                  __end_of_exp 0AEC                  __end_of_log 1070  
                __end_of_isr 0908                  __end_of_pow 0E0A                    i2printf@c 001C  
                  i2printf@f 000D                ??_bottle_time 00B4        i2I2C_Master_Read@temp 0003  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 030C  
                 frexp@value 0001            ??_I2C_Master_Init 00A1            ??_I2C_Master_Read 0091  
          ??_I2C_Master_Wait 0090                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0091  
                 ?i2_isdigit 0001                     ??___ftge 0007                     ??___wmul 0094  
                __pdataBANK0 00C4             __CFG_LPT1OSC$OFF 000000                     ??_printf 00A4  
          __size_of___altoft 0078                   read_time@i 0004            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of___lltoft 005C                  __pbssCOMRAM 0076  
       __end_of_operationend 237C                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                     ?i2_putch 0001          __end_of_bottle_time 222E  
           _I2C_Master_Start 23F6          i2I2C_Master_Write@d 0002             _I2C_Master_Write 23DA  
                  _date_time 161E             ___lwdiv@dividend 0090            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FDEE                    _lcdNibble 1E80  
                   ?___awdiv 0001                     ?___ftadd 001C                     ?___awmod 0090  
                   ?___ftdiv 0009                     ?___ftneg 0001                     ?___lldiv 0090  
                   ?___ftmul 000D                     ?___ftsub 0028                     ?___fttol 0028  
                   ?___lwdiv 0090                     ?___lwmod 0097                     ?_lcdInst 0001  
           dec_to_hex@hexnum 006F                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 16F0  
 __size_ofi2_I2C_Master_Stop 0008                    _hexpowers FE0A                     ?_standby 0001  
           ___lwdiv@quotient 0094               __size_of_floor 00DE               __size_of_ldexp 00C2  
             __size_of_frexp 0090                 ??_dec_to_hex 0065                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C                    _read_time 1DB6               __size_of_putch 0010  
 __end_ofi2_I2C_Master_Start 240E   __end_ofi2_I2C_Master_Write 23EE                  ??i2_lcdInst 0003  
       __end_of_servo_rotate 218A               ___wmul@product 0094                     _LATDbits 000F8C  
                ??i2_isdigit 0001                   ?_date_time 0001                     i2u251_40 17FA  
                   i2u307_40 0D40                     i2u236_40 1B72                     i2u251_48 17FC  
                   i2u324_40 22DA                     i2u229_40 12BC                     i2u236_48 1B74  
                   i2u229_45 12B4                     i2u247_40 1588                     i2u271_40 0994  
                   i2u272_40 0996                     i2u380_47 2056                     i2u381_47 205E  
                   i2u382_47 207E                     i2u383_47 2086                    _operation 1A90  
                   i2u384_47 2168                     i2u385_47 2178                     i2u379_47 08BE  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001           __end_of_dec_to_hex 1272  
          ___wmul@multiplier 0090                     i2___wmul 22E2                lcdNibble@data 0091  
                 printf@flag 00AE                lcdNibble@temp 0090                   printf@prec 00AB  
                 ?_eval_poly 0028                     i2_printf 03C6                  _bottle_time 21F8  
        I2C_Master_Read@temp 0092                   ?_read_time 0001           dec_to_hex@quotient 0071  
           __size_ofi2_putch 000C                    frexp@eptr 0004                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
                dec_to_hex@i 006D              bottle_time@time 00B2             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024        i2___wmul@multiplicand 0003             __size_of___lldiv 00BC  
                   ___altoft 1D3E             __size_of___ftmul 00F4             __size_of___ftsub 0040  
           __size_of___fttol 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
      __size_of_operationend 0018                     ___awtoft 218A                     ___ftpack 1940  
                   ___lltoft 1F40                  _isdigit$688 0091           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010                     _exp$1127 004C              _I2C_Master_Init 1EE0  
            _I2C_Master_Read 2264             __size_of_initLCD 0050              _I2C_Master_Wait 237C  
                   _isr$1211 0073              _I2C_Master_Stop 23EE             __size_of_isdigit 002A  
            ___lwdiv@divisor 0092              ___lwdiv@counter 0096                     __ptext10 2264  
                   __ptext11 237C                     __ptext20 23B2                     __ptext12 21F8  
                   __ptext21 1E80                     __ptext13 0E0A                     __ptext30 1F9C  
                   __ptext22 19EE                     __ptext14 0012                     __ptext31 23CE  
                   __ptext23 1EE0                     __ptext15 23A2                     __ptext40 1176  
                   __ptext32 203E                     __ptext24 1884                     __ptext16 2292  
                   __ptext41 0C98                     __ptext33 214C                     __ptext17 222E  
                   __ptext50 16F0                     __ptext42 0F56                     __ptext34 1DB6  
                   __ptext26 03C6                     __ptext18 1E1E                     __ptext51 22E2  
                   __ptext43 0908                     __ptext35 23E4                     __ptext27 23C2  
                   __ptext19 1CC6                     __ptext60 1C42                     __ptext52 1366  
                   __ptext44 17C2                     __ptext36 23FE                     __ptext28 232C  
                   __ptext53 20CE                     __ptext45 1540                     __ptext37 2406  
                   __ptext29 208C                     __ptext54 0AEC                     __ptext46 1B22  
                   __ptext38 22BC                     __ptext55 2308                     __ptext47 1272  
                   __ptext39 2390                     __ptext56 145A                     __ptext48 1BB2  
                   __ptext57 218A                     __ptext49 1D3E                     __ptext58 1F40  
                   __ptext59 1940                     _end_time 0076             __size_of_standby 0036  
                   _pow$1125 0058                     _pow$1126 005B       __size_of_emergencystop 001A  
              __size_of_main 0106              _dec_to_hex$1123 0065              _dec_to_hex$1124 0068  
                ??_date_time 00B2                 _operationend 2364                ??i2_lcdNibble 0001  
                ??_lcdNibble 0090                     int$flags 007E                    printf@idx 00A8  
                  printf@val 00AC                     exp@coeff FE19                     log@coeff FE37  
                  putch@data 0092     __end_of_I2C_Master_Start 23FE     __end_of_I2C_Master_Write 23E4  
                 _INTCONbits 000FF2                  ??_eval_poly 002F                     isdigit@c 0092  
      __size_of_servo_rotate 003E                  ??_read_time 0004                     intlevel2 0000  
           ___lwmod@dividend 0097             ___lldiv@dividend 0090                  ??_operation 00B2  
                   printf@ap 00A9      __end_of_I2C_Master_Init 1F40      __end_of_I2C_Master_Read 2292  
    __end_of_I2C_Master_Wait 2390      __end_of_I2C_Master_Stop 23F6                  lcdInst@data 0092  
              _emergencystop 234A                 _servo_rotate 214C          __end_ofi2_lcdNibble 208C  
           ___lldiv@quotient 0098            I2C_Master_Write@d 0091              ___lwmod@divisor 0099  
            ___lwmod@counter 009B  

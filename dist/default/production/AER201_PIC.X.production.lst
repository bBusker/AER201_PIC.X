

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Apr 07 17:28:17 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 1.40
   103                           ; Generated 01/12/2016 GMT
   104                           ; 
   105                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F4620 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataBANK1
   138  005972                     __pidataBANK1:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _bottle_count_disp
   142  005972  FFFF               	dw	65535
   143                           
   144                           	psect	mediumconst
   145  00FDB6                     __pmediumconst:
   146                           	opt stack 0
   147  00FDB6  00                 	db	0
   148  00FDB7                     _dpowers:
   149                           	opt stack 0
   150  00FDB7  0001               	dw	1
   151  00FDB9  0000               	dw	0
   152  00FDBB  000A               	dw	10
   153  00FDBD  0000               	dw	0
   154  00FDBF  0064               	dw	100
   155  00FDC1  0000               	dw	0
   156  00FDC3  03E8               	dw	1000
   157  00FDC5  0000               	dw	0
   158  00FDC7  2710               	dw	10000
   159  00FDC9  0000               	dw	0
   160  00FDCB  86A0               	dw	34464
   161  00FDCD  0001               	dw	1
   162  00FDCF  4240               	dw	16960
   163  00FDD1  000F               	dw	15
   164  00FDD3  9680               	dw	38528
   165  00FDD5  0098               	dw	152
   166  00FDD7  E100               	dw	57600
   167  00FDD9  05F5               	dw	1525
   168  00FDDB  CA00               	dw	51712
   169  00FDDD  3B9A               	dw	15258
   170  00FDDF                     __end_of_dpowers:
   171                           	opt stack 0
   172  00FDDF                     __npowers_:
   173                           	opt stack 0
   174  00FDDF  00                 	db	0
   175  00FDE0  80                 	db	128
   176  00FDE1  3F                 	db	63
   177  00FDE2  CD                 	db	205
   178  00FDE3  CC                 	db	204
   179  00FDE4  3D                 	db	61
   180  00FDE5  D7                 	db	215
   181  00FDE6  23                 	db	35
   182  00FDE7  3C                 	db	60
   183  00FDE8  12                 	db	18
   184  00FDE9  83                 	db	131
   185  00FDEA  3A                 	db	58
   186  00FDEB  B7                 	db	183
   187  00FDEC  D1                 	db	209
   188  00FDED  38                 	db	56
   189  00FDEE  C6                 	db	198
   190  00FDEF  27                 	db	39
   191  00FDF0  37                 	db	55
   192  00FDF1  38                 	db	56
   193  00FDF2  86                 	db	134
   194  00FDF3  35                 	db	53
   195  00FDF4  C0                 	db	192
   196  00FDF5  D6                 	db	214
   197  00FDF6  33                 	db	51
   198  00FDF7  CC                 	db	204
   199  00FDF8  2B                 	db	43
   200  00FDF9  32                 	db	50
   201  00FDFA  70                 	db	112
   202  00FDFB  89                 	db	137
   203  00FDFC  30                 	db	48
   204  00FDFD  E7                 	db	231
   205  00FDFE  DB                 	db	219
   206  00FDFF  2E                 	db	46
   207  00FE00  E5                 	db	229
   208  00FE01  3C                 	db	60
   209  00FE02  1E                 	db	30
   210  00FE03  42                 	db	66
   211  00FE04  A2                 	db	162
   212  00FE05  0D                 	db	13
   213  00FE06                     __end_of__npowers_:
   214                           	opt stack 0
   215  00FE06                     __powers_:
   216                           	opt stack 0
   217  00FE06  00                 	db	0
   218  00FE07  80                 	db	128
   219  00FE08  3F                 	db	63
   220  00FE09  00                 	db	0
   221  00FE0A  20                 	db	32
   222  00FE0B  41                 	db	65
   223  00FE0C  00                 	db	0
   224  00FE0D  C8                 	db	200
   225  00FE0E  42                 	db	66
   226  00FE0F  00                 	db	0
   227  00FE10  7A                 	db	122
   228  00FE11  44                 	db	68
   229  00FE12  40                 	db	64
   230  00FE13  1C                 	db	28
   231  00FE14  46                 	db	70
   232  00FE15  50                 	db	80
   233  00FE16  C3                 	db	195
   234  00FE17  47                 	db	71
   235  00FE18  24                 	db	36
   236  00FE19  74                 	db	116
   237  00FE1A  49                 	db	73
   238  00FE1B  97                 	db	151
   239  00FE1C  18                 	db	24
   240  00FE1D  4B                 	db	75
   241  00FE1E  BC                 	db	188
   242  00FE1F  BE                 	db	190
   243  00FE20  4C                 	db	76
   244  00FE21  6B                 	db	107
   245  00FE22  6E                 	db	110
   246  00FE23  4E                 	db	78
   247  00FE24  03                 	db	3
   248  00FE25  15                 	db	21
   249  00FE26  50                 	db	80
   250  00FE27  79                 	db	121
   251  00FE28  AD                 	db	173
   252  00FE29  60                 	db	96
   253  00FE2A  F3                 	db	243
   254  00FE2B  49                 	db	73
   255  00FE2C  71                 	db	113
   256  00FE2D                     __end_of__powers_:
   257                           	opt stack 0
   258  00FE2D                     _hexpowers:
   259                           	opt stack 0
   260  00FE2D  0001               	dw	1
   261  00FE2F  0000               	dw	0
   262  00FE31  0010               	dw	16
   263  00FE33  0000               	dw	0
   264  00FE35  0100               	dw	256
   265  00FE37  0000               	dw	0
   266  00FE39  1000               	dw	4096
   267  00FE3B  0000               	dw	0
   268  00FE3D  0000               	dw	0
   269  00FE3F  0001               	dw	1
   270  00FE41  0000               	dw	0
   271  00FE43  0010               	dw	16
   272  00FE45  0000               	dw	0
   273  00FE47  0100               	dw	256
   274  00FE49  0000               	dw	0
   275  00FE4B  1000               	dw	4096
   276  00FE4D                     __end_of_hexpowers:
   277                           	opt stack 0
   278  00FE4D                     _keys:
   279                           	opt stack 0
   280  00FE4D  31                 	db	49
   281  00FE4E  32                 	db	50
   282  00FE4F  33                 	db	51
   283  00FE50  41                 	db	65
   284  00FE51  34                 	db	52
   285  00FE52  35                 	db	53
   286  00FE53  36                 	db	54
   287  00FE54  42                 	db	66
   288  00FE55  37                 	db	55
   289  00FE56  38                 	db	56
   290  00FE57  39                 	db	57
   291  00FE58  43                 	db	67
   292  00FE59  2A                 	db	42
   293  00FE5A  30                 	db	48
   294  00FE5B  23                 	db	35
   295  00FE5C  44                 	db	68
   296  00FE5D  00                 	db	0
   297  00FE5E                     __end_of_keys:
   298                           	opt stack 0
   299  00FE5E                     _timeset:
   300                           	opt stack 0
   301  00FE5E  50                 	db	80
   302  00FE5F  35                 	db	53
   303  00FE60  21                 	db	33
   304  00FE61  08                 	db	8
   305  00FE62  05                 	db	5
   306  00FE63  02                 	db	2
   307  00FE64  17                 	db	23
   308  00FE65                     __end_of_timeset:
   309                           	opt stack 0
   310  00FE65                     exp@coeff:
   311                           	opt stack 0
   312  00FE65  00                 	db	0
   313  00FE66  80                 	db	128
   314  00FE67  3F                 	db	63
   315  00FE68  72                 	db	114
   316  00FE69  31                 	db	49
   317  00FE6A  3F                 	db	63
   318  00FE6B  FE                 	db	254
   319  00FE6C  75                 	db	117
   320  00FE6D  3E                 	db	62
   321  00FE6E  58                 	db	88
   322  00FE6F  63                 	db	99
   323  00FE70  3D                 	db	61
   324  00FE71  95                 	db	149
   325  00FE72  1D                 	db	29
   326  00FE73  3C                 	db	60
   327  00FE74  C5                 	db	197
   328  00FE75  AE                 	db	174
   329  00FE76  3A                 	db	58
   330  00FE77  79                 	db	121
   331  00FE78  21                 	db	33
   332  00FE79  39                 	db	57
   333  00FE7A  94                 	db	148
   334  00FE7B  80                 	db	128
   335  00FE7C  37                 	db	55
   336  00FE7D  93                 	db	147
   337  00FE7E  A7                 	db	167
   338  00FE7F  35                 	db	53
   339  00FE80  56                 	db	86
   340  00FE81  15                 	db	21
   341  00FE82  34                 	db	52
   342  00FE83                     __end_ofexp@coeff:
   343                           	opt stack 0
   344  00FE83                     log@coeff:
   345                           	opt stack 0
   346  00FE83  00                 	db	0
   347  00FE84  00                 	db	0
   348  00FE85  00                 	db	0
   349  00FE86  00                 	db	0
   350  00FE87  80                 	db	128
   351  00FE88  3F                 	db	63
   352  00FE89  F0                 	db	240
   353  00FE8A  FF                 	db	255
   354  00FE8B  BE                 	db	190
   355  00FE8C  E2                 	db	226
   356  00FE8D  A9                 	db	169
   357  00FE8E  3E                 	db	62
   358  00FE8F  83                 	db	131
   359  00FE90  76                 	db	118
   360  00FE91  BE                 	db	190
   361  00FE92  AE                 	db	174
   362  00FE93  2B                 	db	43
   363  00FE94  3E                 	db	62
   364  00FE95  3C                 	db	60
   365  00FE96  C3                 	db	195
   366  00FE97  BD                 	db	189
   367  00FE98  D2                 	db	210
   368  00FE99  13                 	db	19
   369  00FE9A  3D                 	db	61
   370  00FE9B  78                 	db	120
   371  00FE9C  D3                 	db	211
   372  00FE9D  BB                 	db	187
   373  00FE9E                     __end_oflog@coeff:
   374                           	opt stack 0
   375  0000                     _TMR0	set	4054
   376  0000                     _TMR1	set	4046
   377  0000                     _TMR3	set	4018
   378  0000                     _ADCON0	set	4034
   379  0000                     _ADCON1	set	4033
   380  0000                     _INTCONbits	set	4082
   381  0000                     _LATA	set	3977
   382  0000                     _LATAbits	set	3977
   383  0000                     _LATB	set	3978
   384  0000                     _LATC	set	3979
   385  0000                     _LATCbits	set	3979
   386  0000                     _LATD	set	3980
   387  0000                     _LATDbits	set	3980
   388  0000                     _LATE	set	3981
   389  0000                     _PORTAbits	set	3968
   390  0000                     _PORTB	set	3969
   391  0000                     _SSPADD	set	4040
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1	set	4038
   394  0000                     _SSPCON2	set	4037
   395  0000                     _SSPSTAT	set	4039
   396  0000                     _T1CON	set	4045
   397  0000                     _T3CON	set	4017
   398  0000                     _TRISA	set	3986
   399  0000                     _TRISB	set	3987
   400  0000                     _TRISC	set	3988
   401  0000                     _TRISD	set	3989
   402  0000                     _TRISE	set	3990
   403  0000                     _ACKDT	set	32301
   404  0000                     _ACKEN	set	32300
   405  0000                     _GIE	set	32663
   406  0000                     _INT0IE	set	32660
   407  0000                     _INT1IE	set	32643
   408  0000                     _INT1IF	set	32640
   409  0000                     _INT2IE	set	32644
   410  0000                     _PEIE	set	32662
   411  0000                     _PEN	set	32298
   412  0000                     _PSA	set	32427
   413  0000                     _RCEN	set	32299
   414  0000                     _RSEN	set	32297
   415  0000                     _SEN	set	32296
   416  0000                     _T08BIT	set	32430
   417  0000                     _T0CS	set	32429
   418  0000                     _T0PS0	set	32424
   419  0000                     _T0PS1	set	32425
   420  0000                     _T0PS2	set	32426
   421  0000                     _T1CKPS0	set	32364
   422  0000                     _T1CKPS1	set	32365
   423  0000                     _T3CKPS0	set	32140
   424  0000                     _T3CKPS1	set	32141
   425  0000                     _TMR0IE	set	32661
   426  0000                     _TMR0IF	set	32658
   427  0000                     _TMR0ON	set	32431
   428  0000                     _TMR1CS	set	32361
   429  0000                     _TMR1IE	set	31976
   430  0000                     _TMR1IF	set	31984
   431  0000                     _TMR1ON	set	32360
   432  0000                     _TMR3CS	set	32137
   433  0000                     _TMR3IE	set	32001
   434  0000                     _TMR3IF	set	32009
   435  0000                     _TMR3ON	set	32136
   436  0000                     _TRISC3	set	31907
   437  0000                     _TRISC4	set	31908
   438  0000                     _nRBPU	set	32655
   439  00FE9E                     STR_3:
   440  00FE9E  47                 	db	71	;'G'
   441  00FE9F  25                 	db	37
   442  00FEA0  75                 	db	117	;'u'
   443  00FEA1  20                 	db	32
   444  00FEA2  42                 	db	66	;'B'
   445  00FEA3  25                 	db	37
   446  00FEA4  75                 	db	117	;'u'
   447  00FEA5  20                 	db	32
   448  00FEA6  20                 	db	32
   449  00FEA7  20                 	db	32
   450  00FEA8  20                 	db	32
   451  00FEA9  20                 	db	32
   452  00FEAA  20                 	db	32
   453  00FEAB  20                 	db	32
   454  00FEAC  20                 	db	32
   455  00FEAD  20                 	db	32
   456  00FEAE  20                 	db	32
   457  00FEAF  20                 	db	32
   458  00FEB0  20                 	db	32
   459  00FEB1  20                 	db	32
   460  00FEB2  20                 	db	32
   461  00FEB3  20                 	db	32
   462  00FEB4  20                 	db	32
   463  00FEB5  00                 	db	0
   464  00FEB6                     STR_2:
   465  00FEB6  43                 	db	67	;'C'
   466  00FEB7  25                 	db	37
   467  00FEB8  75                 	db	117	;'u'
   468  00FEB9  20                 	db	32
   469  00FEBA  52                 	db	82	;'R'
   470  00FEBB  25                 	db	37
   471  00FEBC  75                 	db	117	;'u'
   472  00FEBD  20                 	db	32
   473  00FEBE  20                 	db	32
   474  00FEBF  20                 	db	32
   475  00FEC0  20                 	db	32
   476  00FEC1  20                 	db	32
   477  00FEC2  20                 	db	32
   478  00FEC3  20                 	db	32
   479  00FEC4  20                 	db	32
   480  00FEC5  20                 	db	32
   481  00FEC6  20                 	db	32
   482  00FEC7  20                 	db	32
   483  00FEC8  20                 	db	32
   484  00FEC9  20                 	db	32
   485  00FECA  20                 	db	32
   486  00FECB  20                 	db	32
   487  00FECC  20                 	db	32
   488  00FECD  00                 	db	0
   489  00FECE                     STR_16:
   490  00FECE  54                 	db	84	;'T'
   491  00FECF  6F                 	db	111	;'o'
   492  00FED0  74                 	db	116	;'t'
   493  00FED1  61                 	db	97	;'a'
   494  00FED2  6C                 	db	108	;'l'
   495  00FED3  20                 	db	32
   496  00FED4  4F                 	db	79	;'O'
   497  00FED5  70                 	db	112	;'p'
   498  00FED6  65                 	db	101	;'e'
   499  00FED7  72                 	db	114	;'r'
   500  00FED8  61                 	db	97	;'a'
   501  00FED9  74                 	db	116	;'t'
   502  00FEDA  69                 	db	105	;'i'
   503  00FEDB  6F                 	db	111	;'o'
   504  00FEDC  6E                 	db	110	;'n'
   505  00FEDD  20                 	db	32
   506  00FEDE  20                 	db	32
   507  00FEDF  20                 	db	32
   508  00FEE0  20                 	db	32
   509  00FEE1  20                 	db	32
   510  00FEE2  20                 	db	32
   511  00FEE3  20                 	db	32
   512  00FEE4  00                 	db	0
   513  00FEE5                     STR_7:
   514  00FEE5  44                 	db	68	;'D'
   515  00FEE6  61                 	db	97	;'a'
   516  00FEE7  74                 	db	116	;'t'
   517  00FEE8  65                 	db	101	;'e'
   518  00FEE9  3A                 	db	58	;':'
   519  00FEEA  20                 	db	32
   520  00FEEB  25                 	db	37
   521  00FEEC  30                 	db	48	;'0'
   522  00FEED  32                 	db	50	;'2'
   523  00FEEE  78                 	db	120	;'x'
   524  00FEEF  2F                 	db	47
   525  00FEF0  25                 	db	37
   526  00FEF1  30                 	db	48	;'0'
   527  00FEF2  32                 	db	50	;'2'
   528  00FEF3  78                 	db	120	;'x'
   529  00FEF4  2F                 	db	47
   530  00FEF5  25                 	db	37
   531  00FEF6  30                 	db	48	;'0'
   532  00FEF7  32                 	db	50	;'2'
   533  00FEF8  78                 	db	120	;'x'
   534  00FEF9  20                 	db	32
   535  00FEFA  20                 	db	32
   536  00FEFB  00                 	db	0
   537  00FEFC                     STR_8:
   538  00FEFC  54                 	db	84	;'T'
   539  00FEFD  69                 	db	105	;'i'
   540  00FEFE  6D                 	db	109	;'m'
   541  00FEFF  65                 	db	101	;'e'
   542  00FF00  3A                 	db	58	;':'
   543  00FF01  20                 	db	32
   544  00FF02  25                 	db	37
   545  00FF03  30                 	db	48	;'0'
   546  00FF04  32                 	db	50	;'2'
   547  00FF05  78                 	db	120	;'x'
   548  00FF06  3A                 	db	58	;':'
   549  00FF07  25                 	db	37
   550  00FF08  30                 	db	48	;'0'
   551  00FF09  32                 	db	50	;'2'
   552  00FF0A  78                 	db	120	;'x'
   553  00FF0B  3A                 	db	58	;':'
   554  00FF0C  25                 	db	37
   555  00FF0D  30                 	db	48	;'0'
   556  00FF0E  32                 	db	50	;'2'
   557  00FF0F  78                 	db	120	;'x'
   558  00FF10  20                 	db	32
   559  00FF11  20                 	db	32
   560  00FF12  00                 	db	0
   561  00FF13                     STR_17:
   562  00FF13  54                 	db	84	;'T'
   563  00FF14  69                 	db	105	;'i'
   564  00FF15  6D                 	db	109	;'m'
   565  00FF16  65                 	db	101	;'e'
   566  00FF17  3A                 	db	58	;':'
   567  00FF18  20                 	db	32
   568  00FF19  25                 	db	37
   569  00FF1A  64                 	db	100	;'d'
   570  00FF1B  20                 	db	32
   571  00FF1C  73                 	db	115	;'s'
   572  00FF1D  20                 	db	32
   573  00FF1E  20                 	db	32
   574  00FF1F  20                 	db	32
   575  00FF20  20                 	db	32
   576  00FF21  20                 	db	32
   577  00FF22  20                 	db	32
   578  00FF23  20                 	db	32
   579  00FF24  00                 	db	0
   580  00FF25                     STR_23:
   581  00FF25  30                 	db	48	;'0'
   582  00FF26  31                 	db	49	;'1'
   583  00FF27  32                 	db	50	;'2'
   584  00FF28  33                 	db	51	;'3'
   585  00FF29  34                 	db	52	;'4'
   586  00FF2A  35                 	db	53	;'5'
   587  00FF2B  36                 	db	54	;'6'
   588  00FF2C  37                 	db	55	;'7'
   589  00FF2D  38                 	db	56	;'8'
   590  00FF2E  39                 	db	57	;'9'
   591  00FF2F  61                 	db	97	;'a'
   592  00FF30  62                 	db	98	;'b'
   593  00FF31  63                 	db	99	;'c'
   594  00FF32  64                 	db	100	;'d'
   595  00FF33  65                 	db	101	;'e'
   596  00FF34  66                 	db	102	;'f'
   597  00FF35  00                 	db	0
   598  00FF36                     STR_10:
   599  00FF36  54                 	db	84	;'T'
   600  00FF37  6F                 	db	111	;'o'
   601  00FF38  74                 	db	116	;'t'
   602  00FF39  61                 	db	97	;'a'
   603  00FF3A  6C                 	db	108	;'l'
   604  00FF3B  3A                 	db	58	;':'
   605  00FF3C  20                 	db	32
   606  00FF3D  25                 	db	37
   607  00FF3E  64                 	db	100	;'d'
   608  00FF3F  20                 	db	32
   609  00FF40  20                 	db	32
   610  00FF41  20                 	db	32
   611  00FF42  20                 	db	32
   612  00FF43  20                 	db	32
   613  00FF44  20                 	db	32
   614  00FF45  20                 	db	32
   615  00FF46  00                 	db	0
   616  00FF47                     STR_9:
   617  00FF47  42                 	db	66	;'B'
   618  00FF48  6F                 	db	111	;'o'
   619  00FF49  74                 	db	116	;'t'
   620  00FF4A  74                 	db	116	;'t'
   621  00FF4B  6C                 	db	108	;'l'
   622  00FF4C  65                 	db	101	;'e'
   623  00FF4D  20                 	db	32
   624  00FF4E  43                 	db	67	;'C'
   625  00FF4F  6F                 	db	111	;'o'
   626  00FF50  75                 	db	117	;'u'
   627  00FF51  6E                 	db	110	;'n'
   628  00FF52  74                 	db	116	;'t'
   629  00FF53  20                 	db	32
   630  00FF54  20                 	db	32
   631  00FF55  20                 	db	32
   632  00FF56  20                 	db	32
   633  00FF57  00                 	db	0
   634  00FF58                     STR_11:
   635  00FF58  59                 	db	89	;'Y'
   636  00FF59  4F                 	db	79	;'O'
   637  00FF5A  50                 	db	80	;'P'
   638  00FF5B  20                 	db	32
   639  00FF5C  57                 	db	87	;'W'
   640  00FF5D  2F                 	db	47
   641  00FF5E  20                 	db	32
   642  00FF5F  43                 	db	67	;'C'
   643  00FF60  41                 	db	65	;'A'
   644  00FF61  50                 	db	80	;'P'
   645  00FF62  3A                 	db	58	;':'
   646  00FF63  20                 	db	32
   647  00FF64  25                 	db	37
   648  00FF65  64                 	db	100	;'d'
   649  00FF66  20                 	db	32
   650  00FF67  20                 	db	32
   651  00FF68  00                 	db	0
   652  00FF69                     STR_12:
   653  00FF69  59                 	db	89	;'Y'
   654  00FF6A  4F                 	db	79	;'O'
   655  00FF6B  50                 	db	80	;'P'
   656  00FF6C  20                 	db	32
   657  00FF6D  4E                 	db	78	;'N'
   658  00FF6E  4F                 	db	79	;'O'
   659  00FF6F  20                 	db	32
   660  00FF70  43                 	db	67	;'C'
   661  00FF71  41                 	db	65	;'A'
   662  00FF72  50                 	db	80	;'P'
   663  00FF73  3A                 	db	58	;':'
   664  00FF74  20                 	db	32
   665  00FF75  25                 	db	37
   666  00FF76  64                 	db	100	;'d'
   667  00FF77  20                 	db	32
   668  00FF78  20                 	db	32
   669  00FF79  00                 	db	0
   670  00FF7A                     STR_13:
   671  00FF7A  45                 	db	69	;'E'
   672  00FF7B  53                 	db	83	;'S'
   673  00FF7C  4B                 	db	75	;'K'
   674  00FF7D  41                 	db	65	;'A'
   675  00FF7E  20                 	db	32
   676  00FF7F  57                 	db	87	;'W'
   677  00FF80  2F                 	db	47
   678  00FF81  20                 	db	32
   679  00FF82  43                 	db	67	;'C'
   680  00FF83  41                 	db	65	;'A'
   681  00FF84  50                 	db	80	;'P'
   682  00FF85  3A                 	db	58	;':'
   683  00FF86  20                 	db	32
   684  00FF87  25                 	db	37
   685  00FF88  64                 	db	100	;'d'
   686  00FF89  20                 	db	32
   687  00FF8A  00                 	db	0
   688  00FF8B                     STR_14:
   689  00FF8B  45                 	db	69	;'E'
   690  00FF8C  53                 	db	83	;'S'
   691  00FF8D  4B                 	db	75	;'K'
   692  00FF8E  41                 	db	65	;'A'
   693  00FF8F  20                 	db	32
   694  00FF90  4E                 	db	78	;'N'
   695  00FF91  4F                 	db	79	;'O'
   696  00FF92  20                 	db	32
   697  00FF93  43                 	db	67	;'C'
   698  00FF94  41                 	db	65	;'A'
   699  00FF95  50                 	db	80	;'P'
   700  00FF96  3A                 	db	58	;':'
   701  00FF97  20                 	db	32
   702  00FF98  25                 	db	37
   703  00FF99  64                 	db	100	;'d'
   704  00FF9A  20                 	db	32
   705  00FF9B  00                 	db	0
   706  00FF9C                     STR_21:
   707  00FF9C  4F                 	db	79	;'O'
   708  00FF9D  70                 	db	112	;'p'
   709  00FF9E  65                 	db	101	;'e'
   710  00FF9F  72                 	db	114	;'r'
   711  00FFA0  61                 	db	97	;'a'
   712  00FFA1  74                 	db	116	;'t'
   713  00FFA2  69                 	db	105	;'i'
   714  00FFA3  6F                 	db	111	;'o'
   715  00FFA4  6E                 	db	110	;'n'
   716  00FFA5  20                 	db	32
   717  00FFA6  44                 	db	68	;'D'
   718  00FFA7  6F                 	db	111	;'o'
   719  00FFA8  6E                 	db	110	;'n'
   720  00FFA9  65                 	db	101	;'e'
   721  00FFAA  21                 	db	33
   722  00FFAB  00                 	db	0
   723  00FFAC                     STR_15:
   724  00FFAC  45                 	db	69	;'E'
   725  00FFAD  52                 	db	82	;'R'
   726  00FFAE  52                 	db	82	;'R'
   727  00FFAF  3A                 	db	58	;':'
   728  00FFB0  20                 	db	32
   729  00FFB1  42                 	db	66	;'B'
   730  00FFB2  41                 	db	65	;'A'
   731  00FFB3  44                 	db	68	;'D'
   732  00FFB4  20                 	db	32
   733  00FFB5  42                 	db	66	;'B'
   734  00FFB6  54                 	db	84	;'T'
   735  00FFB7  4C                 	db	76	;'L'
   736  00FFB8  43                 	db	67	;'C'
   737  00FFB9  4E                 	db	78	;'N'
   738  00FFBA  54                 	db	84	;'T'
   739  00FFBB  00                 	db	0
   740  00FFBC                     STR_22:
   741  00FFBC  45                 	db	69	;'E'
   742  00FFBD  4D                 	db	77	;'M'
   743  00FFBE  45                 	db	69	;'E'
   744  00FFBF  52                 	db	82	;'R'
   745  00FFC0  47                 	db	71	;'G'
   746  00FFC1  45                 	db	69	;'E'
   747  00FFC2  4E                 	db	78	;'N'
   748  00FFC3  43                 	db	67	;'C'
   749  00FFC4  59                 	db	89	;'Y'
   750  00FFC5  20                 	db	32
   751  00FFC6  53                 	db	83	;'S'
   752  00FFC7  54                 	db	84	;'T'
   753  00FFC8  4F                 	db	79	;'O'
   754  00FFC9  50                 	db	80	;'P'
   755  00FFCA  00                 	db	0
   756  00FFCB                     STR_4:
   757  00FFCB  45                 	db	69	;'E'
   758  00FFCC  52                 	db	82	;'R'
   759  00FFCD  52                 	db	82	;'R'
   760  00FFCE  3A                 	db	58	;':'
   761  00FFCF  20                 	db	32
   762  00FFD0  42                 	db	66	;'B'
   763  00FFD1  41                 	db	65	;'A'
   764  00FFD2  44                 	db	68	;'D'
   765  00FFD3  20                 	db	32
   766  00FFD4  49                 	db	73	;'I'
   767  00FFD5  53                 	db	83	;'S'
   768  00FFD6  52                 	db	82	;'R'
   769  00FFD7  00                 	db	0
   770  00FFD8                     STR_6:
   771  00FFD8  25                 	db	37
   772  00FFD9  64                 	db	100	;'d'
   773  00FFDA  20                 	db	32
   774  00FFDB  20                 	db	32
   775  00FFDC  20                 	db	32
   776  00FFDD  20                 	db	32
   777  00FFDE  20                 	db	32
   778  00FFDF  20                 	db	32
   779  00FFE0  00                 	db	0
   780  00FFE1                     STR_1:
   781  00FFE1  72                 	db	114	;'r'
   782  00FFE2  75                 	db	117	;'u'
   783  00FFE3  6E                 	db	110	;'n'
   784  00FFE4  6E                 	db	110	;'n'
   785  00FFE5  69                 	db	105	;'i'
   786  00FFE6  6E                 	db	110	;'n'
   787  00FFE7  67                 	db	103	;'g'
   788  00FFE8  00                 	db	0
   789  00FFE9                     STR_5:
   790  00FFE9  73                 	db	115	;'s'
   791  00FFEA  74                 	db	116	;'t'
   792  00FFEB  61                 	db	97	;'a'
   793  00FFEC  6E                 	db	110	;'n'
   794  00FFED  64                 	db	100	;'d'
   795  00FFEE  62                 	db	98	;'b'
   796  00FFEF  79                 	db	121	;'y'
   797  00FFF0  00                 	db	0
   798  00FFF1                     STR_20:
   799  00FFF1  25                 	db	37
   800  00FFF2  64                 	db	100	;'d'
   801  00FFF3  2C                 	db	44
   802  00FFF4  20                 	db	32
   803  00FFF5  25                 	db	37
   804  00FFF6  64                 	db	100	;'d'
   805  00FFF7  00                 	db	0
   806  00FFF8                     STR_18:
   807  00FFF8  25                 	db	37
   808  00FFF9  66                 	db	102	;'f'
   809  00FFFA  20                 	db	32
   810  00FFFB  00                 	db	0
   811  00FFFC                     STR_19:
   812  00FFFC  25                 	db	37
   813  00FFFD  66                 	db	102	;'f'
   814  00FFFE  00                 	db	0
   815                           
   816                           ; #config settings
   817  00FFFF  00                 	db	0	; dummy byte at the end
   818  0000                     
   819                           	psect	cinit
   820  0055E6                     __pcinit:
   821                           	opt stack 0
   822  0055E6                     start_initialization:
   823                           	opt stack 0
   824  0055E6                     __initialization:
   825                           	opt stack 0
   826                           
   827                           ; Initialize objects allocated to BANK1 (2 bytes)
   828                           ; load TBLPTR registers with __pidataBANK1
   829  0055E6  0E72               	movlw	low __pidataBANK1
   830  0055E8  6EF6               	movwf	tblptrl,c
   831  0055EA  0E59               	movlw	high __pidataBANK1
   832  0055EC  6EF7               	movwf	tblptrh,c
   833  0055EE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   834  0055F0  6EF8               	movwf	tblptru,c
   835  0055F2  0009               	tblrd		*+	;fetch initializer
   836  0055F4  CFF5 F185          	movff	tablat,__pdataBANK1
   837  0055F8  0009               	tblrd		*+	;fetch initializer
   838  0055FA  CFF5 F186          	movff	tablat,__pdataBANK1+1
   839                           
   840                           ; Clear objects allocated to BANK1 (63 bytes)
   841  0055FE  EE01  F046         	lfsr	0,__pbssBANK1
   842  005602  0E3F               	movlw	63
   843  005604                     clear_0:
   844  005604  6AEE               	clrf	postinc0,c
   845  005606  06E8               	decf	wreg,f,c
   846  005608  E1FD               	bnz	clear_0
   847                           
   848                           ; Clear objects allocated to BANK0 (32 bytes)
   849  00560A  EE00  F0C2         	lfsr	0,__pbssBANK0
   850  00560E  0E20               	movlw	32
   851  005610                     clear_1:
   852  005610  6AEE               	clrf	postinc0,c
   853  005612  06E8               	decf	wreg,f,c
   854  005614  E1FD               	bnz	clear_1
   855                           
   856                           ; Clear objects allocated to COMRAM (5 bytes)
   857  005616  6A7E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   858  005618  6A7D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   859  00561A  6A7C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   860  00561C  6A7B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   861  00561E  6A7A               	clrf	__pbssCOMRAM& (0+255),c
   862  005620                     end_of_initialization:
   863                           	opt stack 0
   864  005620                     __end_of__initialization:
   865                           	opt stack 0
   866  005620  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   867  005622  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   868  005624  0E00               	movlw	low (__Lmediumconst shr (0+16))
   869  005626  6EF8               	movwf	tblptru,c
   870  005628  0100               	movlb	0
   871  00562A  EFD9  F018         	goto	_main	;jump to C main() function
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           
   879                           	psect	bssCOMRAM
   880  00007A                     __pbssCOMRAM:
   881                           	opt stack 0
   882  00007A                     _i:
   883                           	opt stack 0
   884  00007A                     	ds	2
   885  00007C                     _j:
   886                           	opt stack 0
   887  00007C                     	ds	2
   888  00007E                     _servo0_flag:
   889                           	opt stack 0
   890  00007E                     	ds	1
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           postinc0	equ	0xFEE
   896                           wreg	equ	0xFE8
   897                           
   898                           	psect	bssBANK0
   899  0000C2                     __pbssBANK0:
   900                           	opt stack 0
   901  0000C2                     _color:
   902                           	opt stack 0
   903  0000C2                     	ds	8
   904  0000CA                     _color_high:
   905                           	opt stack 0
   906  0000CA                     	ds	4
   907  0000CE                     _color_low:
   908                           	opt stack 0
   909  0000CE                     	ds	4
   910  0000D2                     _b:
   911                           	opt stack 0
   912  0000D2                     	ds	3
   913  0000D5                     _r:
   914                           	opt stack 0
   915  0000D5                     	ds	3
   916  0000D8                     _bottle_read_bot:
   917                           	opt stack 0
   918  0000D8                     	ds	2
   919  0000DA                     _bottle_read_top:
   920                           	opt stack 0
   921  0000DA                     	ds	2
   922  0000DC                     _end_time:
   923                           	opt stack 0
   924  0000DC                     	ds	2
   925  0000DE                     _start_time:
   926                           	opt stack 0
   927  0000DE                     	ds	2
   928  0000E0                     _curr_state:
   929                           	opt stack 0
   930  0000E0                     	ds	1
   931  0000E1                     _servo1_flag:
   932                           	opt stack 0
   933  0000E1                     	ds	1
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           
   941                           	psect	bssBANK1
   942  000146                     __pbssBANK1:
   943                           	opt stack 0
   944  000146                     _bottle_count_array:
   945                           	opt stack 0
   946  000146                     	ds	10
   947  000150                     _colorprev:
   948                           	opt stack 0
   949  000150                     	ds	8
   950  000158                     _time:
   951                           	opt stack 0
   952  000158                     	ds	7
   953  00015F                     _testint:
   954                           	opt stack 0
   955  00015F                     	ds	6
   956  000165                     _b_p:
   957                           	opt stack 0
   958  000165                     	ds	3
   959  000168                     _r_p:
   960                           	opt stack 0
   961  000168                     	ds	3
   962  00016B                     _errno:
   963                           	opt stack 0
   964  00016B                     	ds	2
   965  00016D                     _etime:
   966                           	opt stack 0
   967  00016D                     	ds	2
   968  00016F                     _flag_bottle:
   969                           	opt stack 0
   970  00016F                     	ds	2
   971  000171                     _flag_bottle_high:
   972                           	opt stack 0
   973  000171                     	ds	2
   974  000173                     _flag_picbug:
   975                           	opt stack 0
   976  000173                     	ds	2
   977  000175                     _flag_top_read:
   978                           	opt stack 0
   979  000175                     	ds	2
   980  000177                     _flag_yopNC:
   981                           	opt stack 0
   982  000177                     	ds	2
   983  000179                     _operation_disp:
   984                           	opt stack 0
   985  000179                     	ds	2
   986  00017B                     _operation_time:
   987                           	opt stack 0
   988  00017B                     	ds	2
   989  00017D                     _servo0_timer:
   990                           	opt stack 0
   991  00017D                     	ds	2
   992  00017F                     _servo1_timer:
   993                           	opt stack 0
   994  00017F                     	ds	2
   995  000181                     _stime:
   996                           	opt stack 0
   997  000181                     	ds	2
   998  000183                     _testflag:
   999                           	opt stack 0
  1000  000183                     	ds	2
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           
  1008                           	psect	dataBANK1
  1009  000185                     __pdataBANK1:
  1010                           	opt stack 0
  1011  000185                     _bottle_count_disp:
  1012                           	opt stack 0
  1013  000185                     	ds	2
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           
  1021                           	psect	cstackBANK1
  1022  000100                     __pcstackBANK1:
  1023                           	opt stack 0
  1024  000100                     ?_fround:
  1025                           	opt stack 0
  1026  000100                     ?_scale:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x0
  1030  000100                     	ds	3
  1031  000103                     _fround$1307:
  1032                           	opt stack 0
  1033  000103                     _scale$1308:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x3
  1037  000103                     	ds	3
  1038  000106                     scale@scl:
  1039                           	opt stack 0
  1040  000106                     _fround$1306:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0x6
  1044  000106                     	ds	1
  1045  000107                     ?___fttol:
  1046                           	opt stack 0
  1047  000107                     ___fttol@f1:
  1048                           	opt stack 0
  1049                           
  1050                           ; 3 bytes @ 0x7
  1051  000107                     	ds	2
  1052  000109                     fround@prec:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x9
  1056  000109                     	ds	1
  1057  00010A                     ?___ftadd:
  1058                           	opt stack 0
  1059  00010A                     ___ftadd@f1:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0xA
  1063  00010A                     	ds	1
  1064  00010B                     ??___fttol:
  1065                           
  1066                           ; 1 bytes @ 0xB
  1067  00010B                     	ds	2
  1068  00010D                     ___ftadd@f2:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0xD
  1072  00010D                     	ds	3
  1073  000110                     ??___ftadd:
  1074  000110                     ___fttol@sign1:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x10
  1078  000110                     	ds	1
  1079  000111                     ___fttol@lval:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0x11
  1083  000111                     	ds	2
  1084  000113                     ___ftadd@sign:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x13
  1088  000113                     	ds	1
  1089  000114                     ___ftadd@exp2:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x14
  1093  000114                     	ds	1
  1094  000115                     ___ftadd@exp1:
  1095                           	opt stack 0
  1096  000115                     ___fttol@exp1:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x15
  1100  000115                     	ds	1
  1101  000116                     ?___ftsub:
  1102                           	opt stack 0
  1103  000116                     ___ftsub@f1:
  1104                           	opt stack 0
  1105                           
  1106                           ; 3 bytes @ 0x16
  1107  000116                     	ds	3
  1108  000119                     ___ftsub@f2:
  1109                           	opt stack 0
  1110                           
  1111                           ; 3 bytes @ 0x19
  1112  000119                     	ds	3
  1113  00011C                     ?_printf:
  1114                           	opt stack 0
  1115  00011C                     printf@f:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x1C
  1119  00011C                     	ds	8
  1120  000124                     ??_printf:
  1121                           
  1122                           ; 1 bytes @ 0x24
  1123  000124                     	ds	6
  1124  00012A                     _printf$1309:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x2A
  1128  00012A                     	ds	3
  1129  00012D                     printf@idx:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x2D
  1133  00012D                     	ds	1
  1134  00012E                     printf@ap:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x2E
  1138  00012E                     	ds	2
  1139  000130                     printf@prec:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x30
  1143  000130                     	ds	2
  1144  000132                     printf@tmpval:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0x32
  1148  000132                     	ds	4
  1149  000136                     printf@width:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x36
  1153  000136                     	ds	2
  1154  000138                     printf@exp:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x38
  1158  000138                     	ds	2
  1159  00013A                     printf@val:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x3A
  1163  00013A                     	ds	4
  1164  00013E                     printf@flag:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x3E
  1168  00013E                     	ds	2
  1169  000140                     printf@fval:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x40
  1173  000140                     	ds	3
  1174  000143                     printf@c:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x43
  1178  000143                     	ds	1
  1179  000144                     ??_main:
  1180                           
  1181                           ; 1 bytes @ 0x44
  1182  000144                     	ds	2
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           
  1190                           	psect	cstackBANK0
  1191  000080                     __pcstackBANK0:
  1192                           	opt stack 0
  1193  000080                     _dec_to_hex$1528:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x0
  1197  000080                     	ds	3
  1198  000083                     _dec_to_hex$1529:
  1199                           	opt stack 0
  1200                           
  1201                           ; 3 bytes @ 0x3
  1202  000083                     	ds	3
  1203  000086                     dec_to_hex@temp:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x6
  1207  000086                     	ds	2
  1208  000088                     dec_to_hex@i:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x8
  1212  000088                     	ds	2
  1213  00008A                     dec_to_hex@hexnum:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0xA
  1217  00008A                     	ds	2
  1218  00008C                     dec_to_hex@quotient:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0xC
  1222  00008C                     	ds	2
  1223  00008E                     ??_isr:
  1224                           
  1225                           ; 1 bytes @ 0xE
  1226  00008E                     	ds	16
  1227  00009E                     ??_isdigit:
  1228  00009E                     ??_I2C_Master_Wait:
  1229  00009E                     ?___awmod:
  1230                           	opt stack 0
  1231  00009E                     ?___ftpack:
  1232                           	opt stack 0
  1233  00009E                     ?___ftneg:
  1234                           	opt stack 0
  1235  00009E                     ?__tdiv_to_l_:
  1236                           	opt stack 0
  1237  00009E                     ?__div_to_l_:
  1238                           	opt stack 0
  1239  00009E                     ?___lldiv:
  1240                           	opt stack 0
  1241  00009E                     lcdNibble@temp:
  1242                           	opt stack 0
  1243  00009E                     ___awmod@dividend:
  1244                           	opt stack 0
  1245  00009E                     __div_to_l_@f1:
  1246                           	opt stack 0
  1247  00009E                     ___ftpack@arg:
  1248                           	opt stack 0
  1249  00009E                     __tdiv_to_l_@f1:
  1250                           	opt stack 0
  1251  00009E                     ___ftneg@f1:
  1252                           	opt stack 0
  1253  00009E                     ___lldiv@dividend:
  1254                           	opt stack 0
  1255                           
  1256                           ; 4 bytes @ 0x1E
  1257  00009E                     	ds	1
  1258  00009F                     I2C_Master_Read@a:
  1259                           	opt stack 0
  1260  00009F                     lcdNibble@data:
  1261                           	opt stack 0
  1262  00009F                     _isdigit$853:
  1263                           	opt stack 0
  1264  00009F                     I2C_Master_Write@d:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x1F
  1268  00009F                     	ds	1
  1269  0000A0                     I2C_Master_Read@temp:
  1270                           	opt stack 0
  1271  0000A0                     lcdInst@data:
  1272                           	opt stack 0
  1273  0000A0                     putch@data:
  1274                           	opt stack 0
  1275  0000A0                     isdigit@c:
  1276                           	opt stack 0
  1277  0000A0                     ___awmod@divisor:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x20
  1281  0000A0                     	ds	1
  1282  0000A1                     ??_read_colorsensor:
  1283  0000A1                     ??_I2C_ColorSens_Init:
  1284  0000A1                     ??_initLCD:
  1285  0000A1                     ___ftpack@exp:
  1286                           	opt stack 0
  1287  0000A1                     __div_to_l_@f2:
  1288                           	opt stack 0
  1289  0000A1                     __tdiv_to_l_@f2:
  1290                           	opt stack 0
  1291                           
  1292                           ; 3 bytes @ 0x21
  1293  0000A1                     	ds	1
  1294  0000A2                     ___awmod@counter:
  1295                           	opt stack 0
  1296  0000A2                     ___ftpack@sign:
  1297                           	opt stack 0
  1298  0000A2                     ___lldiv@divisor:
  1299                           	opt stack 0
  1300                           
  1301                           ; 4 bytes @ 0x22
  1302  0000A2                     	ds	1
  1303  0000A3                     ??___ftpack:
  1304  0000A3                     ___awmod@sign:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x23
  1308  0000A3                     	ds	1
  1309  0000A4                     ??__tdiv_to_l_:
  1310  0000A4                     ?___awdiv:
  1311                           	opt stack 0
  1312  0000A4                     ___awdiv@dividend:
  1313                           	opt stack 0
  1314  0000A4                     __div_to_l_@quot:
  1315                           	opt stack 0
  1316                           
  1317                           ; 4 bytes @ 0x24
  1318  0000A4                     	ds	2
  1319  0000A6                     ?___ftdiv:
  1320                           	opt stack 0
  1321  0000A6                     ?___awtoft:
  1322                           	opt stack 0
  1323  0000A6                     ?___lltoft:
  1324                           	opt stack 0
  1325  0000A6                     ___awdiv@divisor:
  1326                           	opt stack 0
  1327  0000A6                     ___awtoft@c:
  1328                           	opt stack 0
  1329  0000A6                     ___ftdiv@f1:
  1330                           	opt stack 0
  1331  0000A6                     ___lldiv@quotient:
  1332                           	opt stack 0
  1333  0000A6                     ___lltoft@c:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0x26
  1337  0000A6                     	ds	1
  1338  0000A7                     __tdiv_to_l_@quot:
  1339                           	opt stack 0
  1340                           
  1341                           ; 4 bytes @ 0x27
  1342  0000A7                     	ds	1
  1343  0000A8                     ___awdiv@counter:
  1344                           	opt stack 0
  1345  0000A8                     __div_to_l_@cntr:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x28
  1349  0000A8                     	ds	1
  1350  0000A9                     ___awdiv@sign:
  1351                           	opt stack 0
  1352  0000A9                     ___awtoft@sign:
  1353                           	opt stack 0
  1354  0000A9                     __div_to_l_@exp1:
  1355                           	opt stack 0
  1356  0000A9                     ___ftdiv@f2:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x29
  1360  0000A9                     	ds	1
  1361  0000AA                     ??___lltoft:
  1362  0000AA                     ___lldiv@counter:
  1363                           	opt stack 0
  1364  0000AA                     ___awdiv@quotient:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x2A
  1368  0000AA                     	ds	1
  1369  0000AB                     ?___llmod:
  1370                           	opt stack 0
  1371  0000AB                     __tdiv_to_l_@cntr:
  1372                           	opt stack 0
  1373  0000AB                     I2C_Master_Init@c:
  1374                           	opt stack 0
  1375  0000AB                     ___llmod@dividend:
  1376                           	opt stack 0
  1377                           
  1378                           ; 4 bytes @ 0x2B
  1379  0000AB                     	ds	1
  1380  0000AC                     ??___ftdiv:
  1381  0000AC                     ?___wmul:
  1382                           	opt stack 0
  1383  0000AC                     __tdiv_to_l_@exp1:
  1384                           	opt stack 0
  1385  0000AC                     ___wmul@multiplier:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x2C
  1389  0000AC                     	ds	2
  1390  0000AE                     ___lltoft@exp:
  1391                           	opt stack 0
  1392  0000AE                     ___wmul@multiplicand:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x2E
  1396  0000AE                     	ds	1
  1397  0000AF                     ??_I2C_Master_Init:
  1398  0000AF                     ___ftdiv@cntr:
  1399                           	opt stack 0
  1400  0000AF                     ___llmod@divisor:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x2F
  1404  0000AF                     	ds	1
  1405  0000B0                     ___wmul@product:
  1406                           	opt stack 0
  1407  0000B0                     ___ftdiv@f3:
  1408                           	opt stack 0
  1409                           
  1410                           ; 3 bytes @ 0x30
  1411  0000B0                     	ds	2
  1412  0000B2                     ?___ftmul:
  1413                           	opt stack 0
  1414  0000B2                     ___ftmul@f1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x32
  1418  0000B2                     	ds	1
  1419  0000B3                     ___ftdiv@exp:
  1420                           	opt stack 0
  1421  0000B3                     ___llmod@counter:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x33
  1425  0000B3                     	ds	1
  1426  0000B4                     ___ftdiv@sign:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x34
  1430  0000B4                     	ds	1
  1431  0000B5                     ___ftge@ff1:
  1432                           	opt stack 0
  1433  0000B5                     ___ftmul@f2:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x35
  1437  0000B5                     	ds	3
  1438  0000B8                     ??___ftmul:
  1439  0000B8                     ___ftge@ff2:
  1440                           	opt stack 0
  1441                           
  1442                           ; 3 bytes @ 0x38
  1443  0000B8                     	ds	3
  1444  0000BB                     ??___ftge:
  1445  0000BB                     ___ftmul@exp:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x3B
  1449  0000BB                     	ds	1
  1450  0000BC                     ___ftmul@f3_as_product:
  1451                           	opt stack 0
  1452                           
  1453                           ; 3 bytes @ 0x3C
  1454  0000BC                     	ds	3
  1455  0000BF                     ___ftmul@cntr:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x3F
  1459  0000BF                     	ds	1
  1460  0000C0                     ___ftmul@sign:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x40
  1464  0000C0                     	ds	1
  1465  0000C1                     date_time@i:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x41
  1469  0000C1                     	ds	1
  1470                           tblptru	equ	0xFF8
  1471                           tblptrh	equ	0xFF7
  1472                           tblptrl	equ	0xFF6
  1473                           tablat	equ	0xFF5
  1474                           postinc0	equ	0xFEE
  1475                           wreg	equ	0xFE8
  1476                           
  1477                           	psect	cstackCOMRAM
  1478  000001                     __pcstackCOMRAM:
  1479                           	opt stack 0
  1480  000001                     ??i2_I2C_Master_Wait:
  1481  000001                     ??i2_isdigit:
  1482  000001                     ?i2___awmod:
  1483                           	opt stack 0
  1484  000001                     ?_frexp:
  1485                           	opt stack 0
  1486  000001                     ?i2___ftpack:
  1487                           	opt stack 0
  1488  000001                     ?i2___ftneg:
  1489                           	opt stack 0
  1490  000001                     ?i2__div_to_l_:
  1491                           	opt stack 0
  1492  000001                     ?i2__tdiv_to_l_:
  1493                           	opt stack 0
  1494  000001                     ?i2___lldiv:
  1495                           	opt stack 0
  1496  000001                     i2lcdNibble@temp:
  1497                           	opt stack 0
  1498  000001                     i2___awmod@dividend:
  1499                           	opt stack 0
  1500  000001                     frexp@value:
  1501                           	opt stack 0
  1502  000001                     i2__div_to_l_@f1:
  1503                           	opt stack 0
  1504  000001                     i2___ftpack@arg:
  1505                           	opt stack 0
  1506  000001                     i2__tdiv_to_l_@f1:
  1507                           	opt stack 0
  1508  000001                     i2___ftge@ff1:
  1509                           	opt stack 0
  1510  000001                     i2___ftneg@f1:
  1511                           	opt stack 0
  1512  000001                     i2___lldiv@dividend:
  1513                           	opt stack 0
  1514                           
  1515                           ; 4 bytes @ 0x0
  1516  000001                     	ds	1
  1517  000002                     i2I2C_Master_Read@a:
  1518                           	opt stack 0
  1519  000002                     i2lcdNibble@data:
  1520                           	opt stack 0
  1521  000002                     i2_isdigit$853:
  1522                           	opt stack 0
  1523  000002                     i2I2C_Master_Write@d:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x1
  1527  000002                     	ds	1
  1528  000003                     i2I2C_Master_Read@temp:
  1529                           	opt stack 0
  1530  000003                     i2lcdInst@data:
  1531                           	opt stack 0
  1532  000003                     i2putch@data:
  1533                           	opt stack 0
  1534  000003                     i2isdigit@c:
  1535                           	opt stack 0
  1536  000003                     i2___awmod@divisor:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x2
  1540  000003                     	ds	1
  1541  000004                     ??i2_read_colorsensor:
  1542  000004                     read_time@i:
  1543                           	opt stack 0
  1544  000004                     i2___ftpack@exp:
  1545                           	opt stack 0
  1546  000004                     frexp@eptr:
  1547                           	opt stack 0
  1548  000004                     i2__div_to_l_@f2:
  1549                           	opt stack 0
  1550  000004                     i2__tdiv_to_l_@f2:
  1551                           	opt stack 0
  1552  000004                     i2___ftge@ff2:
  1553                           	opt stack 0
  1554                           
  1555                           ; 3 bytes @ 0x3
  1556  000004                     	ds	1
  1557  000005                     i2___awmod@counter:
  1558                           	opt stack 0
  1559  000005                     i2___ftpack@sign:
  1560                           	opt stack 0
  1561  000005                     i2___lldiv@divisor:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x4
  1565  000005                     	ds	1
  1566  000006                     ??_frexp:
  1567  000006                     ??i2___ftpack:
  1568  000006                     i2___awmod@sign:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x5
  1572  000006                     	ds	1
  1573  000007                     ??i2__tdiv_to_l_:
  1574  000007                     ??i2___ftge:
  1575  000007                     ?i2___awdiv:
  1576                           	opt stack 0
  1577  000007                     i2___awdiv@dividend:
  1578                           	opt stack 0
  1579  000007                     i2__div_to_l_@quot:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0x6
  1583  000007                     	ds	2
  1584  000009                     ?i2___awtoft:
  1585                           	opt stack 0
  1586  000009                     ?i2___ftdiv:
  1587                           	opt stack 0
  1588  000009                     ?i2___lltoft:
  1589                           	opt stack 0
  1590  000009                     i2___awdiv@divisor:
  1591                           	opt stack 0
  1592  000009                     i2___awtoft@c:
  1593                           	opt stack 0
  1594  000009                     i2___ftdiv@f1:
  1595                           	opt stack 0
  1596  000009                     i2___lldiv@quotient:
  1597                           	opt stack 0
  1598  000009                     i2___lltoft@c:
  1599                           	opt stack 0
  1600                           
  1601                           ; 4 bytes @ 0x8
  1602  000009                     	ds	1
  1603  00000A                     i2__tdiv_to_l_@quot:
  1604                           	opt stack 0
  1605                           
  1606                           ; 4 bytes @ 0x9
  1607  00000A                     	ds	1
  1608  00000B                     i2___awdiv@counter:
  1609                           	opt stack 0
  1610  00000B                     i2__div_to_l_@cntr:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0xA
  1614  00000B                     	ds	1
  1615  00000C                     i2___awdiv@sign:
  1616                           	opt stack 0
  1617  00000C                     i2___awtoft@sign:
  1618                           	opt stack 0
  1619  00000C                     i2__div_to_l_@exp1:
  1620                           	opt stack 0
  1621  00000C                     i2___ftdiv@f2:
  1622                           	opt stack 0
  1623                           
  1624                           ; 3 bytes @ 0xB
  1625  00000C                     	ds	1
  1626  00000D                     ??i2___lltoft:
  1627  00000D                     i2___lldiv@counter:
  1628                           	opt stack 0
  1629  00000D                     i2___awdiv@quotient:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0xC
  1633  00000D                     	ds	1
  1634  00000E                     ?i2___llmod:
  1635                           	opt stack 0
  1636  00000E                     i2__tdiv_to_l_@cntr:
  1637                           	opt stack 0
  1638  00000E                     i2___llmod@dividend:
  1639                           	opt stack 0
  1640                           
  1641                           ; 4 bytes @ 0xD
  1642  00000E                     	ds	1
  1643  00000F                     ??i2___ftdiv:
  1644  00000F                     ?i2___wmul:
  1645                           	opt stack 0
  1646  00000F                     i2__tdiv_to_l_@exp1:
  1647                           	opt stack 0
  1648  00000F                     i2___wmul@multiplier:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0xE
  1652  00000F                     	ds	2
  1653  000011                     i2___lltoft@exp:
  1654                           	opt stack 0
  1655  000011                     i2___wmul@multiplicand:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x10
  1659  000011                     	ds	1
  1660  000012                     i2___ftdiv@cntr:
  1661                           	opt stack 0
  1662  000012                     i2___llmod@divisor:
  1663                           	opt stack 0
  1664                           
  1665                           ; 4 bytes @ 0x11
  1666  000012                     	ds	1
  1667  000013                     i2___wmul@product:
  1668                           	opt stack 0
  1669  000013                     i2___ftdiv@f3:
  1670                           	opt stack 0
  1671                           
  1672                           ; 3 bytes @ 0x12
  1673  000013                     	ds	2
  1674  000015                     ?i2___ftmul:
  1675                           	opt stack 0
  1676  000015                     i2___ftmul@f1:
  1677                           	opt stack 0
  1678                           
  1679                           ; 3 bytes @ 0x14
  1680  000015                     	ds	1
  1681  000016                     i2___ftdiv@exp:
  1682                           	opt stack 0
  1683  000016                     i2___llmod@counter:
  1684                           	opt stack 0
  1685                           
  1686                           ; 1 bytes @ 0x15
  1687  000016                     	ds	1
  1688  000017                     i2___ftdiv@sign:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0x16
  1692  000017                     	ds	1
  1693  000018                     i2___ftmul@f2:
  1694                           	opt stack 0
  1695                           
  1696                           ; 3 bytes @ 0x17
  1697  000018                     	ds	3
  1698  00001B                     ??i2___ftmul:
  1699                           
  1700                           ; 1 bytes @ 0x1A
  1701  00001B                     	ds	3
  1702  00001E                     i2___ftmul@exp:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x1D
  1706  00001E                     	ds	1
  1707  00001F                     i2___ftmul@f3_as_product:
  1708                           	opt stack 0
  1709                           
  1710                           ; 3 bytes @ 0x1E
  1711  00001F                     	ds	3
  1712  000022                     i2___ftmul@cntr:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0x21
  1716  000022                     	ds	1
  1717  000023                     i2___ftmul@sign:
  1718                           	opt stack 0
  1719                           
  1720                           ; 1 bytes @ 0x22
  1721  000023                     	ds	1
  1722  000024                     ?i2_fround:
  1723                           	opt stack 0
  1724  000024                     ?i2_scale:
  1725                           	opt stack 0
  1726                           
  1727                           ; 3 bytes @ 0x23
  1728  000024                     	ds	3
  1729  000027                     i2_fround$1534:
  1730                           	opt stack 0
  1731  000027                     i2_scale$1535:
  1732                           	opt stack 0
  1733                           
  1734                           ; 3 bytes @ 0x26
  1735  000027                     	ds	3
  1736  00002A                     i2scale@scl:
  1737                           	opt stack 0
  1738  00002A                     i2_fround$1533:
  1739                           	opt stack 0
  1740                           
  1741                           ; 3 bytes @ 0x29
  1742  00002A                     	ds	3
  1743  00002D                     i2fround@prec:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x2C
  1747  00002D                     	ds	1
  1748  00002E                     ?i2___ftadd:
  1749                           	opt stack 0
  1750  00002E                     i2___ftadd@f1:
  1751                           	opt stack 0
  1752                           
  1753                           ; 3 bytes @ 0x2D
  1754  00002E                     	ds	3
  1755  000031                     i2___ftadd@f2:
  1756                           	opt stack 0
  1757                           
  1758                           ; 3 bytes @ 0x30
  1759  000031                     	ds	3
  1760  000034                     ??i2___ftadd:
  1761                           
  1762                           ; 1 bytes @ 0x33
  1763  000034                     	ds	3
  1764  000037                     i2___ftadd@sign:
  1765                           	opt stack 0
  1766                           
  1767                           ; 1 bytes @ 0x36
  1768  000037                     	ds	1
  1769  000038                     i2___ftadd@exp2:
  1770                           	opt stack 0
  1771                           
  1772                           ; 1 bytes @ 0x37
  1773  000038                     	ds	1
  1774  000039                     i2___ftadd@exp1:
  1775                           	opt stack 0
  1776                           
  1777                           ; 1 bytes @ 0x38
  1778  000039                     	ds	1
  1779  00003A                     ?_eval_poly:
  1780                           	opt stack 0
  1781  00003A                     ?i2___ftsub:
  1782                           	opt stack 0
  1783  00003A                     ?i2___fttol:
  1784                           	opt stack 0
  1785  00003A                     eval_poly@x:
  1786                           	opt stack 0
  1787  00003A                     i2___ftsub@f1:
  1788                           	opt stack 0
  1789  00003A                     i2___fttol@f1:
  1790                           	opt stack 0
  1791                           
  1792                           ; 3 bytes @ 0x39
  1793  00003A                     	ds	3
  1794  00003D                     eval_poly@d:
  1795                           	opt stack 0
  1796  00003D                     i2___ftsub@f2:
  1797                           	opt stack 0
  1798                           
  1799                           ; 3 bytes @ 0x3C
  1800  00003D                     	ds	1
  1801  00003E                     ??i2___fttol:
  1802                           
  1803                           ; 1 bytes @ 0x3D
  1804  00003E                     	ds	1
  1805  00003F                     eval_poly@n:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x3E
  1809  00003F                     	ds	1
  1810  000040                     
  1811                           ; 1 bytes @ 0x3F
  1812  000040                     	ds	1
  1813  000041                     ??_eval_poly:
  1814                           
  1815                           ; 1 bytes @ 0x40
  1816  000041                     	ds	2
  1817  000043                     i2___fttol@sign1:
  1818                           	opt stack 0
  1819  000043                     eval_poly@res:
  1820                           	opt stack 0
  1821                           
  1822                           ; 3 bytes @ 0x42
  1823  000043                     	ds	1
  1824  000044                     i2___fttol@lval:
  1825                           	opt stack 0
  1826                           
  1827                           ; 4 bytes @ 0x43
  1828  000044                     	ds	2
  1829  000046                     ?_log:
  1830                           	opt stack 0
  1831  000046                     ?_ldexp:
  1832                           	opt stack 0
  1833  000046                     ldexp@value:
  1834                           	opt stack 0
  1835  000046                     log@x:
  1836                           	opt stack 0
  1837                           
  1838                           ; 3 bytes @ 0x45
  1839  000046                     	ds	2
  1840  000048                     i2___fttol@exp1:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x47
  1844  000048                     	ds	1
  1845  000049                     ?i2_printf:
  1846                           	opt stack 0
  1847  000049                     ?___altoft:
  1848                           	opt stack 0
  1849  000049                     ldexp@newexp:
  1850                           	opt stack 0
  1851  000049                     log@exponent:
  1852                           	opt stack 0
  1853  000049                     i2printf@f:
  1854                           	opt stack 0
  1855  000049                     ___altoft@c:
  1856                           	opt stack 0
  1857                           
  1858                           ; 4 bytes @ 0x48
  1859  000049                     	ds	2
  1860  00004B                     ??_ldexp:
  1861                           
  1862                           ; 1 bytes @ 0x4A
  1863  00004B                     	ds	2
  1864  00004D                     ??___altoft:
  1865                           
  1866                           ; 1 bytes @ 0x4C
  1867  00004D                     	ds	2
  1868  00004F                     ??i2_printf:
  1869                           
  1870                           ; 1 bytes @ 0x4E
  1871  00004F                     	ds	2
  1872  000051                     ___altoft@exp:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x50
  1876  000051                     	ds	1
  1877  000052                     ___altoft@sign:
  1878                           	opt stack 0
  1879                           
  1880                           ; 1 bytes @ 0x51
  1881  000052                     	ds	1
  1882  000053                     ?_floor:
  1883                           	opt stack 0
  1884  000053                     floor@x:
  1885                           	opt stack 0
  1886                           
  1887                           ; 3 bytes @ 0x52
  1888  000053                     	ds	2
  1889  000055                     i2_printf$1536:
  1890                           	opt stack 0
  1891                           
  1892                           ; 3 bytes @ 0x54
  1893  000055                     	ds	1
  1894  000056                     floor@i:
  1895                           	opt stack 0
  1896                           
  1897                           ; 3 bytes @ 0x55
  1898  000056                     	ds	2
  1899  000058                     i2printf@idx:
  1900                           	opt stack 0
  1901                           
  1902                           ; 1 bytes @ 0x57
  1903  000058                     	ds	1
  1904  000059                     floor@expon:
  1905                           	opt stack 0
  1906  000059                     i2printf@ap:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x58
  1910  000059                     	ds	2
  1911  00005B                     ?_exp:
  1912                           	opt stack 0
  1913  00005B                     i2printf@prec:
  1914                           	opt stack 0
  1915  00005B                     exp@x:
  1916                           	opt stack 0
  1917                           
  1918                           ; 3 bytes @ 0x5A
  1919  00005B                     	ds	2
  1920  00005D                     i2printf@tmpval:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x5C
  1924  00005D                     	ds	1
  1925  00005E                     _exp$1532:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x5D
  1929  00005E                     	ds	3
  1930  000061                     exp@exponent:
  1931                           	opt stack 0
  1932  000061                     i2printf@width:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x60
  1936  000061                     	ds	2
  1937  000063                     exp@sign:
  1938                           	opt stack 0
  1939  000063                     i2printf@exp:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x62
  1943  000063                     	ds	1
  1944  000064                     ?_pow:
  1945                           	opt stack 0
  1946  000064                     pow@x:
  1947                           	opt stack 0
  1948                           
  1949                           ; 3 bytes @ 0x63
  1950  000064                     	ds	1
  1951  000065                     i2printf@val:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x64
  1955  000065                     	ds	2
  1956  000067                     pow@y:
  1957                           	opt stack 0
  1958                           
  1959                           ; 3 bytes @ 0x66
  1960  000067                     	ds	2
  1961  000069                     i2printf@flag:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x68
  1965  000069                     	ds	1
  1966  00006A                     _pow$1530:
  1967                           	opt stack 0
  1968                           
  1969                           ; 3 bytes @ 0x69
  1970  00006A                     	ds	1
  1971  00006B                     i2printf@fval:
  1972                           	opt stack 0
  1973                           
  1974                           ; 3 bytes @ 0x6A
  1975  00006B                     	ds	2
  1976  00006D                     _pow$1531:
  1977                           	opt stack 0
  1978                           
  1979                           ; 3 bytes @ 0x6C
  1980  00006D                     	ds	1
  1981  00006E                     i2printf@c:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0x6D
  1985  00006E                     	ds	2
  1986  000070                     pow@sign:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x6F
  1990  000070                     	ds	1
  1991  000071                     pow@yi:
  1992                           	opt stack 0
  1993                           
  1994                           ; 4 bytes @ 0x70
  1995  000071                     	ds	4
  1996  000075                     ?_dec_to_hex:
  1997                           	opt stack 0
  1998  000075                     dec_to_hex@num:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x74
  2002  000075                     	ds	2
  2003  000077                     isr@i:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x76
  2007  000077                     	ds	1
  2008  000078                     _isr$1527:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x77
  2012  000078                     	ds	2
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           
  2020 ;;
  2021 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2022 ;;
  2023 ;; *************** function _main *****************
  2024 ;; Defined at:
  2025 ;;		line 16 in file "main.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      void 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:        2 bytes
  2044 ;; Hardware stack levels required when called:   12
  2045 ;; This function calls:
  2046 ;;		_I2C_ColorSens_Init
  2047 ;;		_I2C_Master_Init
  2048 ;;		_bottle_count
  2049 ;;		_bottle_time
  2050 ;;		_date_time
  2051 ;;		_emergencystop
  2052 ;;		_initLCD
  2053 ;;		_operation
  2054 ;;		_operationend
  2055 ;;		_standby
  2056 ;; This function is called by:
  2057 ;;		Startup code after reset
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text0
  2062  0031B2                     __ptext0:
  2063                           	opt stack 0
  2064  0031B2                     _main:
  2065                           	opt stack 19
  2066                           
  2067                           ;main.c: 23: TRISA = 0b11111011;
  2068                           
  2069                           ;incstack = 0
  2070  0031B2  0EFB               	movlw	251
  2071  0031B4  6E92               	movwf	3986,c	;volatile
  2072                           
  2073                           ;main.c: 24: TRISB = 0xFF;
  2074  0031B6  6893               	setf	3987,c	;volatile
  2075                           
  2076                           ;main.c: 25: TRISC = 0x00;
  2077  0031B8  0E00               	movlw	0
  2078  0031BA  6E94               	movwf	3988,c	;volatile
  2079                           
  2080                           ;main.c: 26: TRISD = 0x00;
  2081  0031BC  0E00               	movlw	0
  2082  0031BE  6E95               	movwf	3989,c	;volatile
  2083                           
  2084                           ;main.c: 27: TRISE = 0x00;
  2085  0031C0  0E00               	movlw	0
  2086  0031C2  6E96               	movwf	3990,c	;volatile
  2087                           
  2088                           ;main.c: 29: LATA = 0x00;
  2089  0031C4  0E00               	movlw	0
  2090  0031C6  6E89               	movwf	3977,c	;volatile
  2091                           
  2092                           ;main.c: 30: LATB = 0x00;
  2093  0031C8  0E00               	movlw	0
  2094  0031CA  6E8A               	movwf	3978,c	;volatile
  2095                           
  2096                           ;main.c: 31: LATC = 0x00;
  2097  0031CC  0E00               	movlw	0
  2098  0031CE  6E8B               	movwf	3979,c	;volatile
  2099                           
  2100                           ;main.c: 32: LATD = 0x00;
  2101  0031D0  0E00               	movlw	0
  2102  0031D2  6E8C               	movwf	3980,c	;volatile
  2103                           
  2104                           ;main.c: 33: LATE = 0x00;
  2105  0031D4  0E00               	movlw	0
  2106  0031D6  6E8D               	movwf	3981,c	;volatile
  2107                           
  2108                           ;main.c: 35: ADCON0 = 0x00;
  2109  0031D8  0E00               	movlw	0
  2110  0031DA  6EC2               	movwf	4034,c	;volatile
  2111                           
  2112                           ;main.c: 36: ADCON1 = 0xFF;
  2113  0031DC  68C1               	setf	4033,c	;volatile
  2114                           
  2115                           ;main.c: 39: GIE = 1;
  2116  0031DE  8EF2               	bsf	intcon,7,c	;volatile
  2117                           
  2118                           ;main.c: 40: PEIE = 1;
  2119  0031E0  8CF2               	bsf	intcon,6,c	;volatile
  2120                           
  2121                           ;main.c: 41: INT1IE = 1;
  2122  0031E2  86F0               	bsf	intcon3,3,c	;volatile
  2123                           
  2124                           ;main.c: 42: INT0IE = 0;
  2125  0031E4  98F2               	bcf	intcon,4,c	;volatile
  2126                           
  2127                           ;main.c: 43: INT2IE = 0;
  2128  0031E6  98F0               	bcf	intcon3,4,c	;volatile
  2129                           
  2130                           ;main.c: 45: nRBPU = 0;
  2131  0031E8  9EF1               	bcf	intcon2,7,c	;volatile
  2132                           
  2133                           ;main.c: 47: initLCD();
  2134  0031EA  EC7E  F02A         	call	_initLCD	;wreg free
  2135                           
  2136                           ;main.c: 48: I2C_Master_Init(10000);
  2137  0031EE  0E10               	movlw	16
  2138  0031F0  0100               	movlb	0	; () banked
  2139  0031F2  6FAB               	movwf	I2C_Master_Init@c& (0+255),b
  2140  0031F4  0E27               	movlw	39
  2141  0031F6  6FAC               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2142  0031F8  0E00               	movlw	0
  2143  0031FA  6FAD               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2144  0031FC  0E00               	movlw	0
  2145  0031FE  6FAE               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2146  003200  EC20  F02A         	call	_I2C_Master_Init	;wreg free
  2147                           
  2148                           ;main.c: 49: I2C_ColorSens_Init();
  2149  003204  EC3D  F021         	call	_I2C_ColorSens_Init	;wreg free
  2150                           
  2151                           ;main.c: 52: TMR0 = 0;
  2152  003208  0E00               	movlw	0
  2153  00320A  6ED7               	movwf	4055,c	;volatile
  2154  00320C  0E00               	movlw	0
  2155  00320E  6ED6               	movwf	4054,c	;volatile
  2156                           
  2157                           ;main.c: 53: T08BIT = 0;
  2158  003210  9CD5               	bcf	4053,6,c	;volatile
  2159                           
  2160                           ;main.c: 54: T0CS = 0;
  2161  003212  9AD5               	bcf	4053,5,c	;volatile
  2162                           
  2163                           ;main.c: 55: PSA = 0;
  2164  003214  96D5               	bcf	4053,3,c	;volatile
  2165                           
  2166                           ;main.c: 56: T0PS2 = 1;
  2167  003216  84D5               	bsf	4053,2,c	;volatile
  2168                           
  2169                           ;main.c: 57: T0PS1 = 1;
  2170  003218  82D5               	bsf	4053,1,c	;volatile
  2171                           
  2172                           ;main.c: 58: T0PS0 = 1;
  2173  00321A  80D5               	bsf	4053,0,c	;volatile
  2174                           
  2175                           ;main.c: 60: TMR1 = 0;
  2176  00321C  0E00               	movlw	0
  2177  00321E  6ECF               	movwf	4047,c	;volatile
  2178  003220  0E00               	movlw	0
  2179  003222  6ECE               	movwf	4046,c	;volatile
  2180                           
  2181                           ;main.c: 61: servo0_flag = 0;
  2182  003224  0E00               	movlw	0
  2183  003226  6E7E               	movwf	_servo0_flag,c
  2184                           
  2185                           ;main.c: 62: servo0_timer = 1;
  2186  003228  0E00               	movlw	0
  2187  00322A  0101               	movlb	1	; () banked
  2188  00322C  6F7E               	movwf	(_servo0_timer+1)& (0+255),b
  2189  00322E  0E01               	movlw	1
  2190  003230  6F7D               	movwf	_servo0_timer& (0+255),b
  2191                           
  2192                           ; BSR set to: 1
  2193                           ;main.c: 63: T1CON = 0b10000001;
  2194  003232  0E81               	movlw	129
  2195  003234  6ECD               	movwf	4045,c	;volatile
  2196                           
  2197                           ; BSR set to: 1
  2198                           ;main.c: 64: TMR1ON = 1;
  2199  003236  80CD               	bsf	4045,0,c	;volatile
  2200                           
  2201                           ; BSR set to: 1
  2202                           ;main.c: 65: TMR1CS = 0;
  2203  003238  92CD               	bcf	4045,1,c	;volatile
  2204                           
  2205                           ; BSR set to: 1
  2206                           ;main.c: 66: T1CKPS1 = 0;
  2207  00323A  9ACD               	bcf	4045,5,c	;volatile
  2208                           
  2209                           ; BSR set to: 1
  2210                           ;main.c: 67: T1CKPS0 = 0;
  2211  00323C  98CD               	bcf	4045,4,c	;volatile
  2212                           
  2213                           ; BSR set to: 1
  2214                           ;main.c: 68: TMR1IE = 1;
  2215  00323E  809D               	bsf	3997,0,c	;volatile
  2216                           
  2217                           ; BSR set to: 1
  2218                           ;main.c: 70: TMR3 = 0;
  2219  003240  0E00               	movlw	0
  2220  003242  6EB3               	movwf	4019,c	;volatile
  2221  003244  0E00               	movlw	0
  2222  003246  6EB2               	movwf	4018,c	;volatile
  2223                           
  2224                           ; BSR set to: 1
  2225                           ;main.c: 71: servo1_flag = 0;
  2226  003248  0E00               	movlw	0
  2227  00324A  0100               	movlb	0	; () banked
  2228  00324C  6FE1               	movwf	_servo1_flag& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;main.c: 72: servo1_timer = 1;
  2232  00324E  0E00               	movlw	0
  2233  003250  0101               	movlb	1	; () banked
  2234  003252  6F80               	movwf	(_servo1_timer+1)& (0+255),b
  2235  003254  0E01               	movlw	1
  2236  003256  6F7F               	movwf	_servo1_timer& (0+255),b
  2237                           
  2238                           ; BSR set to: 1
  2239                           ;main.c: 73: T3CON = 0b1000001;
  2240  003258  0E41               	movlw	65
  2241  00325A  6EB1               	movwf	4017,c	;volatile
  2242                           
  2243                           ; BSR set to: 1
  2244                           ;main.c: 74: TMR3ON = 1;
  2245  00325C  80B1               	bsf	4017,0,c	;volatile
  2246                           
  2247                           ; BSR set to: 1
  2248                           ;main.c: 75: TMR3CS = 0;
  2249  00325E  92B1               	bcf	4017,1,c	;volatile
  2250                           
  2251                           ; BSR set to: 1
  2252                           ;main.c: 76: T3CKPS1 = 0;
  2253  003260  9AB1               	bcf	4017,5,c	;volatile
  2254                           
  2255                           ; BSR set to: 1
  2256                           ;main.c: 77: T3CKPS0 = 0;
  2257  003262  98B1               	bcf	4017,4,c	;volatile
  2258                           
  2259                           ; BSR set to: 1
  2260                           ;main.c: 78: TMR3IE = 1;
  2261  003264  82A0               	bsf	4000,1,c	;volatile
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;main.c: 83: curr_state = STANDBY;
  2265  003266  0E00               	movlw	0
  2266  003268  0100               	movlb	0	; () banked
  2267  00326A  6FE0               	movwf	_curr_state& (0+255),b
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;main.c: 86: switch(curr_state){
  2271                           
  2272                           ;main.c: 85: while(1){
  2273  00326C  D05F               	goto	l7986
  2274  00326E                     l7958:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;main.c: 88: standby();
  2278  00326E  EC59  F02B         	call	_standby	;wreg free
  2279                           
  2280                           ;main.c: 89: _delay((unsigned long)((500)*(10000000/4000.0)));
  2281  003272  0E07               	movlw	7
  2282  003274  0101               	movlb	1	; () banked
  2283  003276  6F45               	movwf	(??_main+1)& (0+255),b
  2284  003278  0E58               	movlw	88
  2285  00327A  0101               	movlb	1	; () banked
  2286  00327C  6F44               	movwf	??_main& (0+255),b
  2287  00327E  0E59               	movlw	89
  2288  003280                     u9037:
  2289  003280  2EE8               	decfsz	wreg,f,c
  2290  003282  D7FE               	bra	u9037
  2291  003284  2F44               	decfsz	??_main& (0+255),f,b
  2292  003286  D7FC               	bra	u9037
  2293  003288  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2294  00328A  D7FA               	bra	u9037
  2295  00328C  D04E               	goto	L4
  2296  00328E                     l7962:
  2297                           
  2298                           ;main.c: 92: emergencystop();
  2299  00328E  EC44  F02C         	call	_emergencystop	;wreg free
  2300                           
  2301                           ;main.c: 93: break;
  2302  003292  D04C               	goto	l7986
  2303  003294                     l7964:
  2304                           
  2305                           ;main.c: 95: operation();
  2306  003294  EC6E  F00F         	call	_operation	;wreg free
  2307                           
  2308                           ;main.c: 96: _delay((unsigned long)((3)*(10000000/4000.0)));
  2309  003298  0E0A               	movlw	10
  2310  00329A  0101               	movlb	1	; () banked
  2311  00329C  6F44               	movwf	??_main& (0+255),b
  2312  00329E  0EBC               	movlw	188
  2313  0032A0                     u9047:
  2314  0032A0  2EE8               	decfsz	wreg,f,c
  2315  0032A2  D7FE               	bra	u9047
  2316  0032A4  2F44               	decfsz	??_main& (0+255),f,b
  2317  0032A6  D7FC               	bra	u9047
  2318  0032A8  F000               	nop	
  2319                           
  2320                           ;main.c: 97: break;
  2321  0032AA  D040               	goto	l7986
  2322  0032AC                     l7968:
  2323                           
  2324                           ;main.c: 99: operationend();
  2325  0032AC  EC64  F02C         	call	_operationend	;wreg free
  2326                           
  2327                           ;main.c: 100: _delay((unsigned long)((500)*(10000000/4000.0)));
  2328  0032B0  0E07               	movlw	7
  2329  0032B2  0101               	movlb	1	; () banked
  2330  0032B4  6F45               	movwf	(??_main+1)& (0+255),b
  2331  0032B6  0E58               	movlw	88
  2332  0032B8  0101               	movlb	1	; () banked
  2333  0032BA  6F44               	movwf	??_main& (0+255),b
  2334  0032BC  0E59               	movlw	89
  2335  0032BE                     u9057:
  2336  0032BE  2EE8               	decfsz	wreg,f,c
  2337  0032C0  D7FE               	bra	u9057
  2338  0032C2  2F44               	decfsz	??_main& (0+255),f,b
  2339  0032C4  D7FC               	bra	u9057
  2340  0032C6  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2341  0032C8  D7FA               	bra	u9057
  2342  0032CA  D02F               	goto	L4
  2343  0032CC                     l7972:
  2344                           
  2345                           ;main.c: 103: date_time();
  2346  0032CC  EC79  F024         	call	_date_time	;wreg free
  2347                           
  2348                           ;main.c: 104: _delay((unsigned long)((300)*(10000000/4000.0)));
  2349  0032D0  0E04               	movlw	4
  2350  0032D2  0101               	movlb	1	; () banked
  2351  0032D4  6F45               	movwf	(??_main+1)& (0+255),b
  2352  0032D6  0ECF               	movlw	207
  2353  0032D8  0101               	movlb	1	; () banked
  2354  0032DA  6F44               	movwf	??_main& (0+255),b
  2355  0032DC  0E01               	movlw	1
  2356  0032DE                     u9067:
  2357  0032DE  2EE8               	decfsz	wreg,f,c
  2358  0032E0  D7FE               	bra	u9067
  2359  0032E2  2F44               	decfsz	??_main& (0+255),f,b
  2360  0032E4  D7FC               	bra	u9067
  2361  0032E6  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2362  0032E8  D7FA               	bra	u9067
  2363  0032EA  D01F               	goto	L4
  2364  0032EC                     l7976:
  2365                           
  2366                           ;main.c: 107: bottle_count();
  2367  0032EC  ECBB  F020         	call	_bottle_count	;wreg free
  2368                           
  2369                           ;main.c: 108: _delay((unsigned long)((300)*(10000000/4000.0)));
  2370  0032F0  0E04               	movlw	4
  2371  0032F2  0101               	movlb	1	; () banked
  2372  0032F4  6F45               	movwf	(??_main+1)& (0+255),b
  2373  0032F6  0ECF               	movlw	207
  2374  0032F8  0101               	movlb	1	; () banked
  2375  0032FA  6F44               	movwf	??_main& (0+255),b
  2376  0032FC  0E01               	movlw	1
  2377  0032FE                     u9077:
  2378  0032FE  2EE8               	decfsz	wreg,f,c
  2379  003300  D7FE               	bra	u9077
  2380  003302  2F44               	decfsz	??_main& (0+255),f,b
  2381  003304  D7FC               	bra	u9077
  2382  003306  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2383  003308  D7FA               	bra	u9077
  2384  00330A  D00F               	goto	L4
  2385  00330C                     l7980:
  2386                           
  2387                           ;main.c: 111: bottle_time();
  2388  00330C  EC92  F02B         	call	_bottle_time	;wreg free
  2389                           
  2390                           ;main.c: 112: _delay((unsigned long)((300)*(10000000/4000.0)));
  2391  003310  0E04               	movlw	4
  2392  003312  0101               	movlb	1	; () banked
  2393  003314  6F45               	movwf	(??_main+1)& (0+255),b
  2394  003316  0ECF               	movlw	207
  2395  003318  0101               	movlb	1	; () banked
  2396  00331A  6F44               	movwf	??_main& (0+255),b
  2397  00331C  0E01               	movlw	1
  2398  00331E                     u9087:
  2399  00331E  2EE8               	decfsz	wreg,f,c
  2400  003320  D7FE               	bra	u9087
  2401  003322  2F44               	decfsz	??_main& (0+255),f,b
  2402  003324  D7FC               	bra	u9087
  2403  003326  2F45               	decfsz	(??_main+1)& (0+255),f,b
  2404  003328  D7FA               	bra	u9087
  2405  00332A                     L4:
  2406  00332A  D000               	nop2	
  2407  00332C                     l7986:
  2408  00332C  0100               	movlb	0	; () banked
  2409  00332E  51E0               	movf	_curr_state& (0+255),w,b
  2410                           
  2411                           ; Switch size 1, requested type "space"
  2412                           ; Number of cases is 7, Range of values is 0 to 6
  2413                           ; switch strategies available:
  2414                           ; Name         Instructions Cycles
  2415                           ; simple_byte           22    12 (average)
  2416                           ;	Chosen strategy is simple_byte
  2417  003330  0A00               	xorlw	0	; case 0
  2418  003332  B4D8               	btfsc	status,2,c
  2419  003334  D79C               	goto	l7958
  2420  003336  0A01               	xorlw	1	; case 1
  2421  003338  B4D8               	btfsc	status,2,c
  2422  00333A  D7A9               	goto	l7962
  2423  00333C  0A03               	xorlw	3	; case 2
  2424  00333E  B4D8               	btfsc	status,2,c
  2425  003340  D7A9               	goto	l7964
  2426  003342  0A01               	xorlw	1	; case 3
  2427  003344  B4D8               	btfsc	status,2,c
  2428  003346  D7B2               	goto	l7968
  2429  003348  0A07               	xorlw	7	; case 4
  2430  00334A  B4D8               	btfsc	status,2,c
  2431  00334C  D7BF               	goto	l7972
  2432  00334E  0A01               	xorlw	1	; case 5
  2433  003350  B4D8               	btfsc	status,2,c
  2434  003352  D7CC               	goto	l7976
  2435  003354  0A03               	xorlw	3	; case 6
  2436  003356  B4D8               	btfsc	status,2,c
  2437  003358  D7D9               	goto	l7980
  2438                           
  2439                           ; BSR set to: 0
  2440                           
  2441                           ; BSR set to: 0
  2442  00335A  D7E8               	goto	l7986
  2443  00335C                     __end_of_main:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           intcon3	equ	0xFF0
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _standby *****************
  2457 ;; Defined at:
  2458 ;;		line 249 in file "main.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:   11
  2479 ;; This function calls:
  2480 ;;		_lcdInst
  2481 ;;		_printf
  2482 ;;		_read_colorsensor
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text1
  2489  0056B2                     __ptext1:
  2490                           	opt stack 0
  2491  0056B2                     _standby:
  2492                           	opt stack 19
  2493                           
  2494                           ;main.c: 250: lcdInst(0b10000000);
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;incstack = 0
  2498  0056B2  0E80               	movlw	128
  2499  0056B4  EC8B  F02C         	call	_lcdInst
  2500                           
  2501                           ;main.c: 251: printf("standby");
  2502  0056B8  0EE9               	movlw	low STR_5
  2503  0056BA  0101               	movlb	1	; () banked
  2504  0056BC  6F1C               	movwf	printf@f& (0+255),b
  2505  0056BE  0EFF               	movlw	high STR_5
  2506  0056C0  0101               	movlb	1	; () banked
  2507  0056C2  6F1D               	movwf	(printf@f+1)& (0+255),b
  2508  0056C4  EC09  F000         	call	_printf	;wreg free
  2509                           
  2510                           ;main.c: 252: lcdInst(0b11000000);
  2511  0056C8  0EC0               	movlw	192
  2512  0056CA  EC8B  F02C         	call	_lcdInst
  2513                           
  2514                           ;main.c: 253: read_colorsensor();
  2515  0056CE  ECBC  F021         	call	_read_colorsensor	;wreg free
  2516                           
  2517                           ;main.c: 254: printf("%d      ", color[0]);
  2518  0056D2  0ED8               	movlw	low STR_6
  2519  0056D4  0101               	movlb	1	; () banked
  2520  0056D6  6F1C               	movwf	printf@f& (0+255),b
  2521  0056D8  0EFF               	movlw	high STR_6
  2522  0056DA  0101               	movlb	1	; () banked
  2523  0056DC  6F1D               	movwf	(printf@f+1)& (0+255),b
  2524  0056DE  C0C2  F11E         	movff	_color,?_printf+2
  2525  0056E2  C0C3  F11F         	movff	_color+1,?_printf+3
  2526  0056E6  EC09  F000         	call	_printf	;wreg free
  2527  0056EA  0012               	return	
  2528  0056EC                     __end_of_standby:
  2529                           	opt stack 0
  2530                           tblptru	equ	0xFF8
  2531                           tblptrh	equ	0xFF7
  2532                           tblptrl	equ	0xFF6
  2533                           tablat	equ	0xFF5
  2534                           intcon	equ	0xFF2
  2535                           intcon2	equ	0xFF1
  2536                           intcon3	equ	0xFF0
  2537                           postinc0	equ	0xFEE
  2538                           wreg	equ	0xFE8
  2539                           status	equ	0xFD8
  2540                           
  2541 ;; *************** function _operationend *****************
  2542 ;; Defined at:
  2543 ;;		line 449 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;Total ram usage:        0 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:   11
  2564 ;; This function calls:
  2565 ;;		_lcdInst
  2566 ;;		_printf
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text2
  2573  0058C8                     __ptext2:
  2574                           	opt stack 0
  2575  0058C8                     _operationend:
  2576                           	opt stack 19
  2577                           
  2578                           ;main.c: 450: lcdInst(0b10000000);
  2579                           
  2580                           ;incstack = 0
  2581  0058C8  0E80               	movlw	128
  2582  0058CA  EC8B  F02C         	call	_lcdInst
  2583                           
  2584                           ;main.c: 451: printf("Operation Done!");
  2585  0058CE  0E9C               	movlw	low STR_21
  2586  0058D0  0101               	movlb	1	; () banked
  2587  0058D2  6F1C               	movwf	printf@f& (0+255),b
  2588  0058D4  0EFF               	movlw	high STR_21
  2589  0058D6  0101               	movlb	1	; () banked
  2590  0058D8  6F1D               	movwf	(printf@f+1)& (0+255),b
  2591  0058DA  EC09  F000         	call	_printf	;wreg free
  2592  0058DE  0012               	return	
  2593  0058E0                     __end_of_operationend:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           intcon	equ	0xFF2
  2600                           intcon2	equ	0xFF1
  2601                           intcon3	equ	0xFF0
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _operation *****************
  2607 ;; Defined at:
  2608 ;;		line 361 in file "main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:   11
  2629 ;; This function calls:
  2630 ;;		___awtoft
  2631 ;;		___ftdiv
  2632 ;;		___ftge
  2633 ;;		_lcdInst
  2634 ;;		_printf
  2635 ;;		_read_colorsensor
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text3
  2642  001EDC                     __ptext3:
  2643                           	opt stack 0
  2644  001EDC                     _operation:
  2645                           	opt stack 19
  2646                           
  2647                           ;main.c: 379: colorprev[0] = color[0];
  2648                           
  2649                           ;incstack = 0
  2650  001EDC  C0C2  F150         	movff	_color,_colorprev
  2651  001EE0  C0C3  F151         	movff	_color+1,_colorprev+1
  2652                           
  2653                           ;main.c: 380: colorprev[1] = color[1];
  2654  001EE4  C0C4  F152         	movff	_color+2,_colorprev+2
  2655  001EE8  C0C5  F153         	movff	_color+3,_colorprev+3
  2656                           
  2657                           ;main.c: 381: colorprev[2] = color[2];
  2658  001EEC  C0C6  F154         	movff	_color+4,_colorprev+4
  2659  001EF0  C0C7  F155         	movff	_color+5,_colorprev+5
  2660                           
  2661                           ;main.c: 382: colorprev[3] = color[3];
  2662  001EF4  C0C8  F156         	movff	_color+6,_colorprev+6
  2663  001EF8  C0C9  F157         	movff	_color+7,_colorprev+7
  2664                           
  2665                           ;main.c: 384: GIE = 0;
  2666  001EFC  9EF2               	bcf	intcon,7,c	;volatile
  2667                           
  2668                           ;main.c: 385: read_colorsensor();
  2669  001EFE  ECBC  F021         	call	_read_colorsensor	;wreg free
  2670                           
  2671                           ;main.c: 386: if(color[0]>17){
  2672  001F02  0100               	movlb	0	; () banked
  2673  001F04  BFC3               	btfsc	(_color+1)& (0+255),7,b
  2674  001F06  D147               	goto	l7760
  2675  001F08  0100               	movlb	0	; () banked
  2676  001F0A  51C3               	movf	(_color+1)& (0+255),w,b
  2677  001F0C  E105               	bnz	u8840
  2678  001F0E  0E12               	movlw	18
  2679  001F10  0100               	movlb	0	; () banked
  2680  001F12  5DC2               	subwf	_color& (0+255),w,b
  2681  001F14  A0D8               	btfss	status,0,c
  2682  001F16  D13F               	goto	l7760
  2683  001F18                     u8840:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 387: flag_bottle = 1;
  2687  001F18  0E00               	movlw	0
  2688  001F1A  0101               	movlb	1	; () banked
  2689  001F1C  6F70               	movwf	(_flag_bottle+1)& (0+255),b
  2690  001F1E  0E01               	movlw	1
  2691  001F20  6F6F               	movwf	_flag_bottle& (0+255),b
  2692                           
  2693                           ; BSR set to: 1
  2694                           ;main.c: 388: flag_picbug += 1;
  2695  001F22  0101               	movlb	1	; () banked
  2696  001F24  4B73               	infsnz	_flag_picbug& (0+255),f,b
  2697  001F26  2B74               	incf	(_flag_picbug+1)& (0+255),f,b
  2698                           
  2699                           ; BSR set to: 1
  2700                           ;main.c: 390: if(color[0]>300)flag_yopNC = 1;
  2701  001F28  0100               	movlb	0	; () banked
  2702  001F2A  BFC3               	btfsc	(_color+1)& (0+255),7,b
  2703  001F2C  D00D               	goto	l7728
  2704  001F2E  0E2D               	movlw	45
  2705  001F30  0100               	movlb	0	; () banked
  2706  001F32  5DC2               	subwf	_color& (0+255),w,b
  2707  001F34  0E01               	movlw	1
  2708  001F36  0100               	movlb	0	; () banked
  2709  001F38  59C3               	subwfb	(_color+1)& (0+255),w,b
  2710  001F3A  A0D8               	btfss	status,0,c
  2711  001F3C  D005               	goto	l7728
  2712                           
  2713                           ; BSR set to: 0
  2714  001F3E  0E00               	movlw	0
  2715  001F40  0101               	movlb	1	; () banked
  2716  001F42  6F78               	movwf	(_flag_yopNC+1)& (0+255),b
  2717  001F44  0E01               	movlw	1
  2718  001F46  6F77               	movwf	_flag_yopNC& (0+255),b
  2719  001F48                     l7728:
  2720                           
  2721                           ;main.c: 391: if(color[0]>30){
  2722  001F48  0100               	movlb	0	; () banked
  2723  001F4A  BFC3               	btfsc	(_color+1)& (0+255),7,b
  2724  001F4C  D0A2               	goto	l7746
  2725  001F4E  0100               	movlb	0	; () banked
  2726  001F50  51C3               	movf	(_color+1)& (0+255),w,b
  2727  001F52  E105               	bnz	u8860
  2728  001F54  0E1F               	movlw	31
  2729  001F56  0100               	movlb	0	; () banked
  2730  001F58  5DC2               	subwf	_color& (0+255),w,b
  2731  001F5A  A0D8               	btfss	status,0,c
  2732  001F5C  D09A               	goto	l7746
  2733  001F5E                     u8860:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 392: if(!flag_top_read){
  2737  001F5E  0101               	movlb	1	; () banked
  2738  001F60  5175               	movf	_flag_top_read& (0+255),w,b
  2739  001F62  0101               	movlb	1	; () banked
  2740  001F64  1176               	iorwf	(_flag_top_read+1)& (0+255),w,b
  2741  001F66  A4D8               	btfss	status,2,c
  2742  001F68  D08F               	goto	l399
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;main.c: 393: r = (float) color[1];
  2746  001F6A  C0C4  F0A6         	movff	_color+2,___awtoft@c
  2747  001F6E  C0C5  F0A7         	movff	_color+3,___awtoft@c+1
  2748  001F72  EC17  F02B         	call	___awtoft	;wreg free
  2749  001F76  C0A6  F0D5         	movff	?___awtoft,_r
  2750  001F7A  C0A7  F0D6         	movff	?___awtoft+1,_r+1
  2751  001F7E  C0A8  F0D7         	movff	?___awtoft+2,_r+2
  2752                           
  2753                           ;main.c: 394: b = (float) color[3];
  2754  001F82  C0C8  F0A6         	movff	_color+6,___awtoft@c
  2755  001F86  C0C9  F0A7         	movff	_color+7,___awtoft@c+1
  2756  001F8A  EC17  F02B         	call	___awtoft	;wreg free
  2757  001F8E  C0A6  F0D2         	movff	?___awtoft,_b
  2758  001F92  C0A7  F0D3         	movff	?___awtoft+1,_b+1
  2759  001F96  C0A8  F0D4         	movff	?___awtoft+2,_b+2
  2760                           
  2761                           ;main.c: 395: lcdInst(0b10000000);
  2762  001F9A  0E80               	movlw	128
  2763  001F9C  EC8B  F02C         	call	_lcdInst
  2764                           
  2765                           ;main.c: 396: printf("%f ", r/b);
  2766  001FA0  0EF8               	movlw	low STR_18
  2767  001FA2  0101               	movlb	1	; () banked
  2768  001FA4  6F1C               	movwf	printf@f& (0+255),b
  2769  001FA6  0EFF               	movlw	high STR_18
  2770  001FA8  0101               	movlb	1	; () banked
  2771  001FAA  6F1D               	movwf	(printf@f+1)& (0+255),b
  2772  001FAC  C0D5  F0A6         	movff	_r,___ftdiv@f1
  2773  001FB0  C0D6  F0A7         	movff	_r+1,___ftdiv@f1+1
  2774  001FB4  C0D7  F0A8         	movff	_r+2,___ftdiv@f1+2
  2775  001FB8  C0D2  F0A9         	movff	_b,___ftdiv@f2
  2776  001FBC  C0D3  F0AA         	movff	_b+1,___ftdiv@f2+1
  2777  001FC0  C0D4  F0AB         	movff	_b+2,___ftdiv@f2+2
  2778  001FC4  ECAB  F01C         	call	___ftdiv	;wreg free
  2779  001FC8  C0A6  F11E         	movff	?___ftdiv,?_printf+2
  2780  001FCC  C0A7  F11F         	movff	?___ftdiv+1,?_printf+3
  2781  001FD0  C0A8  F120         	movff	?___ftdiv+2,?_printf+4
  2782  001FD4  EC09  F000         	call	_printf	;wreg free
  2783                           
  2784                           ;main.c: 397: if(r/b > 2) bottle_read_top = 1;
  2785  001FD8  0E00               	movlw	0
  2786  001FDA  0100               	movlb	0	; () banked
  2787  001FDC  6FB5               	movwf	___ftge@ff1& (0+255),b
  2788  001FDE  0E00               	movlw	0
  2789  001FE0  0100               	movlb	0	; () banked
  2790  001FE2  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2791  001FE4  0E40               	movlw	64
  2792  001FE6  0100               	movlb	0	; () banked
  2793  001FE8  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2794  001FEA  C0D2  F0A9         	movff	_b,___ftdiv@f2
  2795  001FEE  C0D3  F0AA         	movff	_b+1,___ftdiv@f2+1
  2796  001FF2  C0D4  F0AB         	movff	_b+2,___ftdiv@f2+2
  2797  001FF6  C0D5  F0A6         	movff	_r,___ftdiv@f1
  2798  001FFA  C0D6  F0A7         	movff	_r+1,___ftdiv@f1+1
  2799  001FFE  C0D7  F0A8         	movff	_r+2,___ftdiv@f1+2
  2800  002002  ECAB  F01C         	call	___ftdiv	;wreg free
  2801  002006  C0A6  F0B8         	movff	?___ftdiv,___ftge@ff2
  2802  00200A  C0A7  F0B9         	movff	?___ftdiv+1,___ftge@ff2+1
  2803  00200E  C0A8  F0BA         	movff	?___ftdiv+2,___ftge@ff2+2
  2804  002012  EC4B  F025         	call	___ftge	;wreg free
  2805  002016  0100               	movlb	0	; () banked
  2806  002018  B0D8               	btfsc	status,0,c
  2807  00201A  D005               	goto	l7740
  2808                           
  2809                           ; BSR set to: 0
  2810  00201C  0E00               	movlw	0
  2811  00201E  0100               	movlb	0	; () banked
  2812  002020  6FDB               	movwf	(_bottle_read_top+1)& (0+255),b
  2813  002022  0E01               	movlw	1
  2814  002024  D02B               	goto	L6
  2815  002026                     l7740:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 398: else if(r/b < 0.75) bottle_read_top = 2;
  2819  002026  C0D2  F0A9         	movff	_b,___ftdiv@f2
  2820  00202A  C0D3  F0AA         	movff	_b+1,___ftdiv@f2+1
  2821  00202E  C0D4  F0AB         	movff	_b+2,___ftdiv@f2+2
  2822  002032  C0D5  F0A6         	movff	_r,___ftdiv@f1
  2823  002036  C0D6  F0A7         	movff	_r+1,___ftdiv@f1+1
  2824  00203A  C0D7  F0A8         	movff	_r+2,___ftdiv@f1+2
  2825  00203E  ECAB  F01C         	call	___ftdiv	;wreg free
  2826  002042  C0A6  F0B5         	movff	?___ftdiv,___ftge@ff1
  2827  002046  C0A7  F0B6         	movff	?___ftdiv+1,___ftge@ff1+1
  2828  00204A  C0A8  F0B7         	movff	?___ftdiv+2,___ftge@ff1+2
  2829  00204E  0E00               	movlw	0
  2830  002050  0100               	movlb	0	; () banked
  2831  002052  6FB8               	movwf	___ftge@ff2& (0+255),b
  2832  002054  0E40               	movlw	64
  2833  002056  0100               	movlb	0	; () banked
  2834  002058  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2835  00205A  0E3F               	movlw	63
  2836  00205C  0100               	movlb	0	; () banked
  2837  00205E  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2838  002060  EC4B  F025         	call	___ftge	;wreg free
  2839  002064  0100               	movlb	0	; () banked
  2840  002066  B0D8               	btfsc	status,0,c
  2841  002068  D005               	goto	l7744
  2842                           
  2843                           ; BSR set to: 0
  2844  00206A  0E00               	movlw	0
  2845  00206C  0100               	movlb	0	; () banked
  2846  00206E  6FDB               	movwf	(_bottle_read_top+1)& (0+255),b
  2847  002070  0E02               	movlw	2
  2848  002072  D004               	goto	L6
  2849  002074                     l7744:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 399: else bottle_read_top = 0;
  2853  002074  0E00               	movlw	0
  2854  002076  0100               	movlb	0	; () banked
  2855  002078  6FDB               	movwf	(_bottle_read_top+1)& (0+255),b
  2856  00207A  0E00               	movlw	0
  2857  00207C                     L6:
  2858  00207C  6FDA               	movwf	_bottle_read_top& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;main.c: 400: flag_top_read = 1;
  2862                           
  2863                           ; BSR set to: 0
  2864  00207E  0E00               	movlw	0
  2865  002080  0101               	movlb	1	; () banked
  2866  002082  6F76               	movwf	(_flag_top_read+1)& (0+255),b
  2867  002084  0E01               	movlw	1
  2868  002086  6F75               	movwf	_flag_top_read& (0+255),b
  2869  002088                     l399:
  2870                           
  2871                           ; BSR set to: 1
  2872                           ;main.c: 401: }
  2873                           ;main.c: 402: flag_bottle_high = 1;
  2874  002088  0E00               	movlw	0
  2875  00208A  0101               	movlb	1	; () banked
  2876  00208C  6F72               	movwf	(_flag_bottle_high+1)& (0+255),b
  2877  00208E  0E01               	movlw	1
  2878  002090  D080               	goto	L7
  2879  002092                     l7746:
  2880                           
  2881                           ;main.c: 404: else if(color[0]<30){
  2882  002092  0100               	movlb	0	; () banked
  2883  002094  BFC3               	btfsc	(_color+1)& (0+255),7,b
  2884  002096  D008               	goto	l7748
  2885  002098  0100               	movlb	0	; () banked
  2886  00209A  51C3               	movf	(_color+1)& (0+255),w,b
  2887  00209C  E104               	bnz	u8901
  2888  00209E  0E1E               	movlw	30
  2889  0020A0  0100               	movlb	0	; () banked
  2890  0020A2  5DC2               	subwf	_color& (0+255),w,b
  2891  0020A4  B0D8               	btfsc	status,0,c
  2892  0020A6                     u8901:
  2893  0020A6  D114               	goto	l7810
  2894  0020A8                     l7748:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;main.c: 405: if(flag_bottle_high){
  2898  0020A8  0101               	movlb	1	; () banked
  2899  0020AA  5171               	movf	_flag_bottle_high& (0+255),w,b
  2900  0020AC  0101               	movlb	1	; () banked
  2901  0020AE  1172               	iorwf	(_flag_bottle_high+1)& (0+255),w,b
  2902  0020B0  B4D8               	btfsc	status,2,c
  2903  0020B2  D10E               	goto	l7810
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;main.c: 406: r_p = (float) colorprev[1];
  2907  0020B4  C152  F0A6         	movff	_colorprev+2,___awtoft@c
  2908  0020B8  C153  F0A7         	movff	_colorprev+3,___awtoft@c+1
  2909  0020BC  EC17  F02B         	call	___awtoft	;wreg free
  2910  0020C0  C0A6  F168         	movff	?___awtoft,_r_p
  2911  0020C4  C0A7  F169         	movff	?___awtoft+1,_r_p+1
  2912  0020C8  C0A8  F16A         	movff	?___awtoft+2,_r_p+2
  2913                           
  2914                           ;main.c: 407: b_p = (float) colorprev[3];
  2915  0020CC  C156  F0A6         	movff	_colorprev+6,___awtoft@c
  2916  0020D0  C157  F0A7         	movff	_colorprev+7,___awtoft@c+1
  2917  0020D4  EC17  F02B         	call	___awtoft	;wreg free
  2918  0020D8  C0A6  F165         	movff	?___awtoft,_b_p
  2919  0020DC  C0A7  F166         	movff	?___awtoft+1,_b_p+1
  2920  0020E0  C0A8  F167         	movff	?___awtoft+2,_b_p+2
  2921                           
  2922                           ;main.c: 408: if(r_p/b_p > 3.2) bottle_read_bot = 1;
  2923  0020E4  0ECD               	movlw	205
  2924  0020E6  0100               	movlb	0	; () banked
  2925  0020E8  6FB5               	movwf	___ftge@ff1& (0+255),b
  2926  0020EA  0E4C               	movlw	76
  2927  0020EC  0100               	movlb	0	; () banked
  2928  0020EE  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2929  0020F0  0E40               	movlw	64
  2930  0020F2  0100               	movlb	0	; () banked
  2931  0020F4  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2932  0020F6  C165  F0A9         	movff	_b_p,___ftdiv@f2
  2933  0020FA  C166  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  2934  0020FE  C167  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  2935  002102  C168  F0A6         	movff	_r_p,___ftdiv@f1
  2936  002106  C169  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  2937  00210A  C16A  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  2938  00210E  ECAB  F01C         	call	___ftdiv	;wreg free
  2939  002112  C0A6  F0B8         	movff	?___ftdiv,___ftge@ff2
  2940  002116  C0A7  F0B9         	movff	?___ftdiv+1,___ftge@ff2+1
  2941  00211A  C0A8  F0BA         	movff	?___ftdiv+2,___ftge@ff2+2
  2942  00211E  EC4B  F025         	call	___ftge	;wreg free
  2943  002122  0100               	movlb	0	; () banked
  2944  002124  B0D8               	btfsc	status,0,c
  2945  002126  D005               	goto	l7754
  2946                           
  2947                           ; BSR set to: 0
  2948  002128  0E00               	movlw	0
  2949  00212A  0100               	movlb	0	; () banked
  2950  00212C  6FD9               	movwf	(_bottle_read_bot+1)& (0+255),b
  2951  00212E  0E01               	movlw	1
  2952  002130  D02B               	goto	L9
  2953  002132                     l7754:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;main.c: 409: else if(r_p/b_p < 0.75) bottle_read_bot = 2;
  2957  002132  C165  F0A9         	movff	_b_p,___ftdiv@f2
  2958  002136  C166  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  2959  00213A  C167  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  2960  00213E  C168  F0A6         	movff	_r_p,___ftdiv@f1
  2961  002142  C169  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  2962  002146  C16A  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  2963  00214A  ECAB  F01C         	call	___ftdiv	;wreg free
  2964  00214E  C0A6  F0B5         	movff	?___ftdiv,___ftge@ff1
  2965  002152  C0A7  F0B6         	movff	?___ftdiv+1,___ftge@ff1+1
  2966  002156  C0A8  F0B7         	movff	?___ftdiv+2,___ftge@ff1+2
  2967  00215A  0E00               	movlw	0
  2968  00215C  0100               	movlb	0	; () banked
  2969  00215E  6FB8               	movwf	___ftge@ff2& (0+255),b
  2970  002160  0E40               	movlw	64
  2971  002162  0100               	movlb	0	; () banked
  2972  002164  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2973  002166  0E3F               	movlw	63
  2974  002168  0100               	movlb	0	; () banked
  2975  00216A  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2976  00216C  EC4B  F025         	call	___ftge	;wreg free
  2977  002170  0100               	movlb	0	; () banked
  2978  002172  B0D8               	btfsc	status,0,c
  2979  002174  D005               	goto	l7758
  2980                           
  2981                           ; BSR set to: 0
  2982  002176  0E00               	movlw	0
  2983  002178  0100               	movlb	0	; () banked
  2984  00217A  6FD9               	movwf	(_bottle_read_bot+1)& (0+255),b
  2985  00217C  0E02               	movlw	2
  2986  00217E  D004               	goto	L9
  2987  002180                     l7758:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 410: else bottle_read_bot = 0;
  2991  002180  0E00               	movlw	0
  2992  002182  0100               	movlb	0	; () banked
  2993  002184  6FD9               	movwf	(_bottle_read_bot+1)& (0+255),b
  2994  002186  0E00               	movlw	0
  2995  002188                     L9:
  2996  002188  6FD8               	movwf	_bottle_read_bot& (0+255),b
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;main.c: 411: flag_bottle_high = 0;
  3000                           
  3001                           ; BSR set to: 0
  3002  00218A  0E00               	movlw	0
  3003  00218C  0101               	movlb	1	; () banked
  3004  00218E  6F72               	movwf	(_flag_bottle_high+1)& (0+255),b
  3005  002190  0E00               	movlw	0
  3006  002192                     L7:
  3007  002192  6F71               	movwf	_flag_bottle_high& (0+255),b
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;main.c: 412: }
  3011                           ;main.c: 413: }
  3012                           ;main.c: 414: }
  3013                           
  3014                           ; BSR set to: 1
  3015                           
  3016                           ; BSR set to: 1
  3017  002194  D09D               	goto	l7810
  3018  002196                     l7760:
  3019                           
  3020                           ;main.c: 416: else if(flag_bottle && flag_picbug>20){
  3021  002196  0101               	movlb	1	; () banked
  3022  002198  516F               	movf	_flag_bottle& (0+255),w,b
  3023  00219A  0101               	movlb	1	; () banked
  3024  00219C  1170               	iorwf	(_flag_bottle+1)& (0+255),w,b
  3025  00219E  B4D8               	btfsc	status,2,c
  3026  0021A0  D097               	goto	l7810
  3027                           
  3028                           ; BSR set to: 1
  3029  0021A2  0101               	movlb	1	; () banked
  3030  0021A4  BF74               	btfsc	(_flag_picbug+1)& (0+255),7,b
  3031  0021A6  D094               	goto	l7810
  3032  0021A8  0101               	movlb	1	; () banked
  3033  0021AA  5174               	movf	(_flag_picbug+1)& (0+255),w,b
  3034  0021AC  E105               	bnz	u8950
  3035  0021AE  0E15               	movlw	21
  3036  0021B0  0101               	movlb	1	; () banked
  3037  0021B2  5D73               	subwf	_flag_picbug& (0+255),w,b
  3038  0021B4  A0D8               	btfss	status,0,c
  3039  0021B6  D08C               	goto	l7810
  3040  0021B8                     u8950:
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;main.c: 417: flag_picbug = 0;
  3044  0021B8  0E00               	movlw	0
  3045  0021BA  0101               	movlb	1	; () banked
  3046  0021BC  6F74               	movwf	(_flag_picbug+1)& (0+255),b
  3047  0021BE  0E00               	movlw	0
  3048  0021C0  6F73               	movwf	_flag_picbug& (0+255),b
  3049                           
  3050                           ; BSR set to: 1
  3051                           ;main.c: 418: bottle_count_array[0] += 1;
  3052  0021C2  0101               	movlb	1	; () banked
  3053  0021C4  4B46               	infsnz	_bottle_count_array& (0+255),f,b
  3054  0021C6  2B47               	incf	(_bottle_count_array+1)& (0+255),f,b
  3055                           
  3056                           ; BSR set to: 1
  3057                           ;main.c: 419: TMR0 = 0;
  3058  0021C8  0E00               	movlw	0
  3059  0021CA  6ED7               	movwf	4055,c	;volatile
  3060  0021CC  0E00               	movlw	0
  3061  0021CE  6ED6               	movwf	4054,c	;volatile
  3062                           
  3063                           ; BSR set to: 1
  3064                           ;main.c: 420: if(bottle_read_top == 2 || bottle_read_bot == 2){
  3065  0021D0  0E02               	movlw	2
  3066  0021D2  0100               	movlb	0	; () banked
  3067  0021D4  19DA               	xorwf	_bottle_read_top& (0+255),w,b
  3068  0021D6  0100               	movlb	0	; () banked
  3069  0021D8  11DB               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  3070  0021DA  B4D8               	btfsc	status,2,c
  3071  0021DC  D007               	goto	l7774
  3072                           
  3073                           ; BSR set to: 0
  3074  0021DE  0E02               	movlw	2
  3075  0021E0  0100               	movlb	0	; () banked
  3076  0021E2  19D8               	xorwf	_bottle_read_bot& (0+255),w,b
  3077  0021E4  0100               	movlb	0	; () banked
  3078  0021E6  11D9               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  3079  0021E8  A4D8               	btfss	status,2,c
  3080  0021EA  D004               	goto	l7778
  3081  0021EC                     l7774:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 421: bottle_count_array[3] += 1;
  3085  0021EC  0101               	movlb	1	; () banked
  3086  0021EE  4B4C               	infsnz	(_bottle_count_array+6)& (0+255),f,b
  3087  0021F0  2B4D               	incf	(_bottle_count_array+7)& (0+255),f,b
  3088  0021F2  D026               	goto	l7794
  3089  0021F4                     l7778:
  3090                           
  3091                           ;main.c: 424: else if(bottle_read_top == 1 || bottle_read_bot == 1){
  3092  0021F4  0100               	movlb	0	; () banked
  3093  0021F6  05DA               	decf	_bottle_read_top& (0+255),w,b
  3094  0021F8  0100               	movlb	0	; () banked
  3095  0021FA  11DB               	iorwf	(_bottle_read_top+1)& (0+255),w,b
  3096  0021FC  B4D8               	btfsc	status,2,c
  3097  0021FE  D006               	goto	l7782
  3098                           
  3099                           ; BSR set to: 0
  3100  002200  0100               	movlb	0	; () banked
  3101  002202  05D8               	decf	_bottle_read_bot& (0+255),w,b
  3102  002204  0100               	movlb	0	; () banked
  3103  002206  11D9               	iorwf	(_bottle_read_bot+1)& (0+255),w,b
  3104  002208  A4D8               	btfss	status,2,c
  3105  00220A  D008               	goto	l7786
  3106  00220C                     l7782:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 425: bottle_count_array[1] += 1;
  3110  00220C  0101               	movlb	1	; () banked
  3111  00220E  4B48               	infsnz	(_bottle_count_array+2)& (0+255),f,b
  3112  002210  2B49               	incf	(_bottle_count_array+3)& (0+255),f,b
  3113                           
  3114                           ; BSR set to: 1
  3115                           ;main.c: 426: servo0_timer = 1;
  3116  002212  0E00               	movlw	0
  3117  002214  0101               	movlb	1	; () banked
  3118  002216  6F7E               	movwf	(_servo0_timer+1)& (0+255),b
  3119  002218  0E01               	movlw	1
  3120  00221A  D00D               	goto	L10
  3121  00221C                     l7786:
  3122                           
  3123                           ;main.c: 429: else if(flag_yopNC){
  3124  00221C  0101               	movlb	1	; () banked
  3125  00221E  5177               	movf	_flag_yopNC& (0+255),w,b
  3126  002220  0101               	movlb	1	; () banked
  3127  002222  1178               	iorwf	(_flag_yopNC+1)& (0+255),w,b
  3128  002224  B4D8               	btfsc	status,2,c
  3129  002226  D009               	goto	l7792
  3130                           
  3131                           ; BSR set to: 1
  3132                           ;main.c: 430: bottle_count_array[2] += 1;
  3133  002228  0101               	movlb	1	; () banked
  3134  00222A  4B4A               	infsnz	(_bottle_count_array+4)& (0+255),f,b
  3135  00222C  2B4B               	incf	(_bottle_count_array+5)& (0+255),f,b
  3136                           
  3137                           ; BSR set to: 1
  3138                           ;main.c: 431: servo0_timer = 0;
  3139  00222E  0E00               	movlw	0
  3140  002230  0101               	movlb	1	; () banked
  3141  002232  6F7E               	movwf	(_servo0_timer+1)& (0+255),b
  3142  002234  0E00               	movlw	0
  3143  002236                     L10:
  3144  002236  6F7D               	movwf	_servo0_timer& (0+255),b
  3145                           
  3146                           ;main.c: 432: }
  3147  002238  D008               	goto	l7796
  3148  00223A                     l7792:
  3149                           
  3150                           ; BSR set to: 1
  3151                           ;main.c: 433: else{
  3152                           ;main.c: 434: bottle_count_array[4] += 1;
  3153  00223A  0101               	movlb	1	; () banked
  3154  00223C  4B4E               	infsnz	(_bottle_count_array+8)& (0+255),f,b
  3155  00223E  2B4F               	incf	(_bottle_count_array+9)& (0+255),f,b
  3156  002240                     l7794:
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;main.c: 435: servo1_timer = 1;
  3160  002240  0E00               	movlw	0
  3161  002242  0101               	movlb	1	; () banked
  3162  002244  6F80               	movwf	(_servo1_timer+1)& (0+255),b
  3163  002246  0E01               	movlw	1
  3164  002248  6F7F               	movwf	_servo1_timer& (0+255),b
  3165  00224A                     l7796:
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;main.c: 436: }
  3169                           ;main.c: 437: flag_bottle = 0;
  3170  00224A  0E00               	movlw	0
  3171  00224C  0101               	movlb	1	; () banked
  3172  00224E  6F70               	movwf	(_flag_bottle+1)& (0+255),b
  3173  002250  0E00               	movlw	0
  3174  002252  6F6F               	movwf	_flag_bottle& (0+255),b
  3175                           
  3176                           ; BSR set to: 1
  3177                           ;main.c: 438: flag_bottle_high = 0;
  3178  002254  0E00               	movlw	0
  3179  002256  0101               	movlb	1	; () banked
  3180  002258  6F72               	movwf	(_flag_bottle_high+1)& (0+255),b
  3181  00225A  0E00               	movlw	0
  3182  00225C  6F71               	movwf	_flag_bottle_high& (0+255),b
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;main.c: 439: flag_top_read = 0;
  3186  00225E  0E00               	movlw	0
  3187  002260  0101               	movlb	1	; () banked
  3188  002262  6F76               	movwf	(_flag_top_read+1)& (0+255),b
  3189  002264  0E00               	movlw	0
  3190  002266  6F75               	movwf	_flag_top_read& (0+255),b
  3191                           
  3192                           ; BSR set to: 1
  3193                           ;main.c: 440: flag_yopNC = 0;
  3194  002268  0E00               	movlw	0
  3195  00226A  0101               	movlb	1	; () banked
  3196  00226C  6F78               	movwf	(_flag_yopNC+1)& (0+255),b
  3197  00226E  0E00               	movlw	0
  3198  002270  6F77               	movwf	_flag_yopNC& (0+255),b
  3199                           
  3200                           ; BSR set to: 1
  3201                           ;main.c: 441: printf("%f", r_p/b_p);
  3202  002272  0EFC               	movlw	low STR_19
  3203  002274  0101               	movlb	1	; () banked
  3204  002276  6F1C               	movwf	printf@f& (0+255),b
  3205  002278  0EFF               	movlw	high STR_19
  3206  00227A  0101               	movlb	1	; () banked
  3207  00227C  6F1D               	movwf	(printf@f+1)& (0+255),b
  3208  00227E  C168  F0A6         	movff	_r_p,___ftdiv@f1
  3209  002282  C169  F0A7         	movff	_r_p+1,___ftdiv@f1+1
  3210  002286  C16A  F0A8         	movff	_r_p+2,___ftdiv@f1+2
  3211  00228A  C165  F0A9         	movff	_b_p,___ftdiv@f2
  3212  00228E  C166  F0AA         	movff	_b_p+1,___ftdiv@f2+1
  3213  002292  C167  F0AB         	movff	_b_p+2,___ftdiv@f2+2
  3214  002296  ECAB  F01C         	call	___ftdiv	;wreg free
  3215  00229A  C0A6  F11E         	movff	?___ftdiv,?_printf+2
  3216  00229E  C0A7  F11F         	movff	?___ftdiv+1,?_printf+3
  3217  0022A2  C0A8  F120         	movff	?___ftdiv+2,?_printf+4
  3218  0022A6  EC09  F000         	call	_printf	;wreg free
  3219                           
  3220                           ;main.c: 442: lcdInst(0b11000000);
  3221  0022AA  0EC0               	movlw	192
  3222  0022AC  EC8B  F02C         	call	_lcdInst
  3223                           
  3224                           ;main.c: 443: printf("%d, %d", bottle_read_top, bottle_read_bot);
  3225  0022B0  0EF1               	movlw	low STR_20
  3226  0022B2  0101               	movlb	1	; () banked
  3227  0022B4  6F1C               	movwf	printf@f& (0+255),b
  3228  0022B6  0EFF               	movlw	high STR_20
  3229  0022B8  0101               	movlb	1	; () banked
  3230  0022BA  6F1D               	movwf	(printf@f+1)& (0+255),b
  3231  0022BC  C0DA  F11E         	movff	_bottle_read_top,?_printf+2
  3232  0022C0  C0DB  F11F         	movff	_bottle_read_top+1,?_printf+3
  3233  0022C4  C0D8  F120         	movff	_bottle_read_bot,?_printf+4
  3234  0022C8  C0D9  F121         	movff	_bottle_read_bot+1,?_printf+5
  3235  0022CC  EC09  F000         	call	_printf	;wreg free
  3236  0022D0                     l7810:
  3237                           
  3238                           ;main.c: 444: }
  3239                           ;main.c: 445: GIE = 1;
  3240  0022D0  8EF2               	bsf	intcon,7,c	;volatile
  3241  0022D2  0012               	return	
  3242  0022D4                     __end_of_operation:
  3243                           	opt stack 0
  3244                           tblptru	equ	0xFF8
  3245                           tblptrh	equ	0xFF7
  3246                           tblptrl	equ	0xFF6
  3247                           tablat	equ	0xFF5
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           intcon3	equ	0xFF0
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           status	equ	0xFD8
  3254                           
  3255 ;; *************** function _read_colorsensor *****************
  3256 ;; Defined at:
  3257 ;;		line 487 in file "main.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;Total ram usage:        2 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    9
  3278 ;; This function calls:
  3279 ;;		_I2C_Master_Read
  3280 ;;		_I2C_Master_Start
  3281 ;;		_I2C_Master_Stop
  3282 ;;		_I2C_Master_Write
  3283 ;; This function is called by:
  3284 ;;		_standby
  3285 ;;		_operation
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text4
  3290  004378                     __ptext4:
  3291                           	opt stack 0
  3292  004378                     _read_colorsensor:
  3293                           	opt stack 20
  3294                           
  3295                           ;main.c: 506: I2C_Master_Start();
  3296                           
  3297                           ;incstack = 0
  3298  004378  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
  3299                           
  3300                           ;main.c: 507: I2C_Master_Write(0b01010011);
  3301  00437C  0E00               	movlw	0
  3302  00437E  0100               	movlb	0	; () banked
  3303  004380  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3304  004382  0E53               	movlw	83
  3305  004384  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  3306  004386  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
  3307                           
  3308                           ;main.c: 508: color_low[0] = I2C_Master_Read(1);
  3309  00438A  0E01               	movlw	1
  3310  00438C  ECE0  F02B         	call	_I2C_Master_Read
  3311  004390  0100               	movlb	0	; () banked
  3312  004392  6FCE               	movwf	_color_low& (0+255),b
  3313                           
  3314                           ;main.c: 509: color_high[0] = I2C_Master_Read(1);
  3315  004394  0E01               	movlw	1
  3316  004396  ECE0  F02B         	call	_I2C_Master_Read
  3317  00439A  0100               	movlb	0	; () banked
  3318  00439C  6FCA               	movwf	_color_high& (0+255),b
  3319                           
  3320                           ;main.c: 510: color_low[1] = I2C_Master_Read(1);
  3321  00439E  0E01               	movlw	1
  3322  0043A0  ECE0  F02B         	call	_I2C_Master_Read
  3323  0043A4  0100               	movlb	0	; () banked
  3324  0043A6  6FCF               	movwf	(_color_low+1)& (0+255),b
  3325                           
  3326                           ;main.c: 511: color_high[1] = I2C_Master_Read(1);
  3327  0043A8  0E01               	movlw	1
  3328  0043AA  ECE0  F02B         	call	_I2C_Master_Read
  3329  0043AE  0100               	movlb	0	; () banked
  3330  0043B0  6FCB               	movwf	(_color_high+1)& (0+255),b
  3331                           
  3332                           ;main.c: 512: color_low[2] = I2C_Master_Read(1);
  3333  0043B2  0E01               	movlw	1
  3334  0043B4  ECE0  F02B         	call	_I2C_Master_Read
  3335  0043B8  0100               	movlb	0	; () banked
  3336  0043BA  6FD0               	movwf	(_color_low+2)& (0+255),b
  3337                           
  3338                           ;main.c: 513: color_high[2] = I2C_Master_Read(1);
  3339  0043BC  0E01               	movlw	1
  3340  0043BE  ECE0  F02B         	call	_I2C_Master_Read
  3341  0043C2  0100               	movlb	0	; () banked
  3342  0043C4  6FCC               	movwf	(_color_high+2)& (0+255),b
  3343                           
  3344                           ;main.c: 514: color_low[3] = I2C_Master_Read(1);
  3345  0043C6  0E01               	movlw	1
  3346  0043C8  ECE0  F02B         	call	_I2C_Master_Read
  3347  0043CC  0100               	movlb	0	; () banked
  3348  0043CE  6FD1               	movwf	(_color_low+3)& (0+255),b
  3349                           
  3350                           ;main.c: 515: color_high[3] = I2C_Master_Read(0);
  3351  0043D0  0E00               	movlw	0
  3352  0043D2  ECE0  F02B         	call	_I2C_Master_Read
  3353  0043D6  0100               	movlb	0	; () banked
  3354  0043D8  6FCD               	movwf	(_color_high+3)& (0+255),b
  3355                           
  3356                           ;main.c: 516: I2C_Master_Stop();
  3357  0043DA  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
  3358                           
  3359                           ;main.c: 517: color[0] = (color_high[0] << 8)|(color_low[0]);
  3360  0043DE  0100               	movlb	0	; () banked
  3361  0043E0  51CE               	movf	_color_low& (0+255),w,b
  3362  0043E2  C0CA  F0A1         	movff	_color_high,??_read_colorsensor
  3363  0043E6  0100               	movlb	0	; () banked
  3364  0043E8  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3365  0043EA  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3366  0043EE  0100               	movlb	0	; () banked
  3367  0043F0  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3368  0043F2  0100               	movlb	0	; () banked
  3369  0043F4  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3370  0043F6  0100               	movlb	0	; () banked
  3371  0043F8  6FC2               	movwf	_color& (0+255),b
  3372  0043FA  0100               	movlb	0	; () banked
  3373  0043FC  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3374  0043FE  0100               	movlb	0	; () banked
  3375  004400  6FC3               	movwf	(_color+1)& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;main.c: 518: color[1] = (color_high[1] << 8)|(color_low[1]);
  3379  004402  0100               	movlb	0	; () banked
  3380  004404  51CF               	movf	(_color_low+1)& (0+255),w,b
  3381  004406  C0CB  F0A1         	movff	_color_high+1,??_read_colorsensor
  3382  00440A  0100               	movlb	0	; () banked
  3383  00440C  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3384  00440E  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3385  004412  0100               	movlb	0	; () banked
  3386  004414  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3387  004416  0100               	movlb	0	; () banked
  3388  004418  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3389  00441A  0100               	movlb	0	; () banked
  3390  00441C  6FC4               	movwf	(_color+2)& (0+255),b
  3391  00441E  0100               	movlb	0	; () banked
  3392  004420  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3393  004422  0100               	movlb	0	; () banked
  3394  004424  6FC5               	movwf	(_color+3)& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;main.c: 519: color[2] = (color_high[2] << 8)|(color_low[2]);
  3398  004426  0100               	movlb	0	; () banked
  3399  004428  51D0               	movf	(_color_low+2)& (0+255),w,b
  3400  00442A  C0CC  F0A1         	movff	_color_high+2,??_read_colorsensor
  3401  00442E  0100               	movlb	0	; () banked
  3402  004430  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3403  004432  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3404  004436  0100               	movlb	0	; () banked
  3405  004438  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3406  00443A  0100               	movlb	0	; () banked
  3407  00443C  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3408  00443E  0100               	movlb	0	; () banked
  3409  004440  6FC6               	movwf	(_color+4)& (0+255),b
  3410  004442  0100               	movlb	0	; () banked
  3411  004444  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3412  004446  0100               	movlb	0	; () banked
  3413  004448  6FC7               	movwf	(_color+5)& (0+255),b
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 520: color[3] = (color_high[3] << 8)|(color_low[3]);
  3417  00444A  0100               	movlb	0	; () banked
  3418  00444C  51D1               	movf	(_color_low+3)& (0+255),w,b
  3419  00444E  C0CD  F0A1         	movff	_color_high+3,??_read_colorsensor
  3420  004452  0100               	movlb	0	; () banked
  3421  004454  6BA2               	clrf	(??_read_colorsensor+1)& (0+255),b
  3422  004456  C0A1  F0A2         	movff	??_read_colorsensor,??_read_colorsensor+1
  3423  00445A  0100               	movlb	0	; () banked
  3424  00445C  6BA1               	clrf	??_read_colorsensor& (0+255),b
  3425  00445E  0100               	movlb	0	; () banked
  3426  004460  11A1               	iorwf	??_read_colorsensor& (0+255),w,b
  3427  004462  0100               	movlb	0	; () banked
  3428  004464  6FC8               	movwf	(_color+6)& (0+255),b
  3429  004466  0100               	movlb	0	; () banked
  3430  004468  51A2               	movf	(??_read_colorsensor+1)& (0+255),w,b
  3431  00446A  0100               	movlb	0	; () banked
  3432  00446C  6FC9               	movwf	(_color+7)& (0+255),b
  3433  00446E  0012               	return	
  3434  004470                     __end_of_read_colorsensor:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           intcon3	equ	0xFF0
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function ___ftdiv *****************
  3448 ;; Defined at:
  3449 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  f1              3   38[BANK0 ] float 
  3452 ;;  f2              3   41[BANK0 ] float 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  f3              3   48[BANK0 ] float 
  3455 ;;  sign            1   52[BANK0 ] unsigned char 
  3456 ;;  exp             1   51[BANK0 ] unsigned char 
  3457 ;;  cntr            1   47[BANK0 ] unsigned char 
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  3   38[BANK0 ] float 
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3467 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;Total ram usage:       15 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    8
  3474 ;; This function calls:
  3475 ;;		___ftpack
  3476 ;; This function is called by:
  3477 ;;		_operation
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text5
  3482  003956                     __ptext5:
  3483                           	opt stack 0
  3484  003956                     ___ftdiv:
  3485                           	opt stack 21
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;incstack = 0
  3489  003956  C0A8  F0AC         	movff	___ftdiv@f1+2,??___ftdiv
  3490  00395A  0100               	movlb	0	; () banked
  3491  00395C  6BAD               	clrf	(??___ftdiv+1)& (0+255),b
  3492  00395E  6BAE               	clrf	(??___ftdiv+2)& (0+255),b
  3493  003960  0100               	movlb	0	; () banked
  3494  003962  35A7               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3495  003964  0100               	movlb	0	; () banked
  3496  003966  37AC               	rlcf	??___ftdiv& (0+255),f,b
  3497  003968  E301               	bnc	u8781
  3498  00396A  81AD               	bsf	(??___ftdiv+1)& (0+255),0,b
  3499  00396C                     u8781:
  3500  00396C  0100               	movlb	0	; () banked
  3501  00396E  51AC               	movf	??___ftdiv& (0+255),w,b
  3502  003970  0100               	movlb	0	; () banked
  3503  003972  6FB3               	movwf	___ftdiv@exp& (0+255),b
  3504  003974  0100               	movlb	0	; () banked
  3505  003976  51B3               	movf	___ftdiv@exp& (0+255),w,b
  3506  003978  A4D8               	btfss	status,2,c
  3507  00397A  D00A               	goto	l7644
  3508                           
  3509                           ; BSR set to: 0
  3510  00397C  0E00               	movlw	0
  3511  00397E  0100               	movlb	0	; () banked
  3512  003980  6FA6               	movwf	?___ftdiv& (0+255),b
  3513  003982  0E00               	movlw	0
  3514  003984  0100               	movlb	0	; () banked
  3515  003986  6FA7               	movwf	(?___ftdiv+1)& (0+255),b
  3516  003988  0E00               	movlw	0
  3517  00398A  0100               	movlb	0	; () banked
  3518  00398C  6FA8               	movwf	(?___ftdiv+2)& (0+255),b
  3519                           
  3520                           ; BSR set to: 0
  3521  00398E  0012               	return	
  3522  003990                     l7644:
  3523                           
  3524                           ; BSR set to: 0
  3525  003990  C0AB  F0AC         	movff	___ftdiv@f2+2,??___ftdiv
  3526  003994  0100               	movlb	0	; () banked
  3527  003996  6BAD               	clrf	(??___ftdiv+1)& (0+255),b
  3528  003998  6BAE               	clrf	(??___ftdiv+2)& (0+255),b
  3529  00399A  0100               	movlb	0	; () banked
  3530  00399C  35AA               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3531  00399E  0100               	movlb	0	; () banked
  3532  0039A0  37AC               	rlcf	??___ftdiv& (0+255),f,b
  3533  0039A2  E301               	bnc	u8801
  3534  0039A4  81AD               	bsf	(??___ftdiv+1)& (0+255),0,b
  3535  0039A6                     u8801:
  3536  0039A6  0100               	movlb	0	; () banked
  3537  0039A8  51AC               	movf	??___ftdiv& (0+255),w,b
  3538  0039AA  0100               	movlb	0	; () banked
  3539  0039AC  6FB4               	movwf	___ftdiv@sign& (0+255),b
  3540  0039AE  0100               	movlb	0	; () banked
  3541  0039B0  51B4               	movf	___ftdiv@sign& (0+255),w,b
  3542  0039B2  A4D8               	btfss	status,2,c
  3543  0039B4  D00A               	goto	l7650
  3544                           
  3545                           ; BSR set to: 0
  3546  0039B6  0E00               	movlw	0
  3547  0039B8  0100               	movlb	0	; () banked
  3548  0039BA  6FA6               	movwf	?___ftdiv& (0+255),b
  3549  0039BC  0E00               	movlw	0
  3550  0039BE  0100               	movlb	0	; () banked
  3551  0039C0  6FA7               	movwf	(?___ftdiv+1)& (0+255),b
  3552  0039C2  0E00               	movlw	0
  3553  0039C4  0100               	movlb	0	; () banked
  3554  0039C6  6FA8               	movwf	(?___ftdiv+2)& (0+255),b
  3555                           
  3556                           ; BSR set to: 0
  3557  0039C8  0012               	return	
  3558  0039CA                     l7650:
  3559                           
  3560                           ; BSR set to: 0
  3561  0039CA  0E00               	movlw	0
  3562  0039CC  0100               	movlb	0	; () banked
  3563  0039CE  6FB0               	movwf	___ftdiv@f3& (0+255),b
  3564  0039D0  0E00               	movlw	0
  3565  0039D2  0100               	movlb	0	; () banked
  3566  0039D4  6FB1               	movwf	(___ftdiv@f3+1)& (0+255),b
  3567  0039D6  0E00               	movlw	0
  3568  0039D8  0100               	movlb	0	; () banked
  3569  0039DA  6FB2               	movwf	(___ftdiv@f3+2)& (0+255),b
  3570                           
  3571                           ; BSR set to: 0
  3572  0039DC  0100               	movlb	0	; () banked
  3573  0039DE  51B4               	movf	___ftdiv@sign& (0+255),w,b
  3574  0039E0  0F89               	addlw	137
  3575  0039E2  0100               	movlb	0	; () banked
  3576  0039E4  5FB3               	subwf	___ftdiv@exp& (0+255),f,b
  3577                           
  3578                           ; BSR set to: 0
  3579  0039E6  C0A8  F0B4         	movff	___ftdiv@f1+2,___ftdiv@sign
  3580                           
  3581                           ; BSR set to: 0
  3582  0039EA  0100               	movlb	0	; () banked
  3583  0039EC  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3584  0039EE  0100               	movlb	0	; () banked
  3585  0039F0  1BB4               	xorwf	___ftdiv@sign& (0+255),f,b
  3586                           
  3587                           ; BSR set to: 0
  3588  0039F2  0E80               	movlw	128
  3589  0039F4  0100               	movlb	0	; () banked
  3590  0039F6  17B4               	andwf	___ftdiv@sign& (0+255),f,b
  3591                           
  3592                           ; BSR set to: 0
  3593  0039F8  0100               	movlb	0	; () banked
  3594  0039FA  8FA7               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3595                           
  3596                           ; BSR set to: 0
  3597  0039FC  0EFF               	movlw	255
  3598  0039FE  0100               	movlb	0	; () banked
  3599  003A00  17A6               	andwf	___ftdiv@f1& (0+255),f,b
  3600  003A02  0EFF               	movlw	255
  3601  003A04  0100               	movlb	0	; () banked
  3602  003A06  17A7               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3603  003A08  0E00               	movlw	0
  3604  003A0A  0100               	movlb	0	; () banked
  3605  003A0C  17A8               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608  003A0E  0100               	movlb	0	; () banked
  3609  003A10  8FAA               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3610                           
  3611                           ; BSR set to: 0
  3612  003A12  0EFF               	movlw	255
  3613  003A14  0100               	movlb	0	; () banked
  3614  003A16  17A9               	andwf	___ftdiv@f2& (0+255),f,b
  3615  003A18  0EFF               	movlw	255
  3616  003A1A  0100               	movlb	0	; () banked
  3617  003A1C  17AA               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3618  003A1E  0E00               	movlw	0
  3619  003A20  0100               	movlb	0	; () banked
  3620  003A22  17AB               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3621                           
  3622                           ; BSR set to: 0
  3623  003A24  0E18               	movlw	24
  3624  003A26  0100               	movlb	0	; () banked
  3625  003A28  6FAF               	movwf	___ftdiv@cntr& (0+255),b
  3626  003A2A                     l7670:
  3627                           
  3628                           ; BSR set to: 0
  3629  003A2A  0100               	movlb	0	; () banked
  3630  003A2C  90D8               	bcf	status,0,c
  3631  003A2E  37B0               	rlcf	___ftdiv@f3& (0+255),f,b
  3632  003A30  37B1               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3633  003A32  37B2               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3634                           
  3635                           ; BSR set to: 0
  3636  003A34  0100               	movlb	0	; () banked
  3637  003A36  51A9               	movf	___ftdiv@f2& (0+255),w,b
  3638  003A38  0100               	movlb	0	; () banked
  3639  003A3A  5DA6               	subwf	___ftdiv@f1& (0+255),w,b
  3640  003A3C  0100               	movlb	0	; () banked
  3641  003A3E  51AA               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3642  003A40  0100               	movlb	0	; () banked
  3643  003A42  59A7               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3644  003A44  0100               	movlb	0	; () banked
  3645  003A46  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3646  003A48  0100               	movlb	0	; () banked
  3647  003A4A  59A8               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3648  003A4C  A0D8               	btfss	status,0,c
  3649  003A4E  D00E               	goto	l902
  3650                           
  3651                           ; BSR set to: 0
  3652  003A50  0100               	movlb	0	; () banked
  3653  003A52  51A9               	movf	___ftdiv@f2& (0+255),w,b
  3654  003A54  0100               	movlb	0	; () banked
  3655  003A56  5FA6               	subwf	___ftdiv@f1& (0+255),f,b
  3656  003A58  0100               	movlb	0	; () banked
  3657  003A5A  51AA               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3658  003A5C  0100               	movlb	0	; () banked
  3659  003A5E  5BA7               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3660  003A60  0100               	movlb	0	; () banked
  3661  003A62  51AB               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3662  003A64  0100               	movlb	0	; () banked
  3663  003A66  5BA8               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3664                           
  3665                           ; BSR set to: 0
  3666  003A68  0100               	movlb	0	; () banked
  3667  003A6A  81B0               	bsf	___ftdiv@f3& (0+255),0,b
  3668  003A6C                     l902:
  3669                           
  3670                           ; BSR set to: 0
  3671  003A6C  0100               	movlb	0	; () banked
  3672  003A6E  90D8               	bcf	status,0,c
  3673  003A70  37A6               	rlcf	___ftdiv@f1& (0+255),f,b
  3674  003A72  37A7               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3675  003A74  37A8               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3676                           
  3677                           ; BSR set to: 0
  3678  003A76  0100               	movlb	0	; () banked
  3679  003A78  2FAF               	decfsz	___ftdiv@cntr& (0+255),f,b
  3680  003A7A  D7D7               	goto	l7670
  3681                           
  3682                           ; BSR set to: 0
  3683                           
  3684                           ; BSR set to: 0
  3685  003A7C  C0B0  F09E         	movff	___ftdiv@f3,___ftpack@arg
  3686  003A80  C0B1  F09F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3687  003A84  C0B2  F0A0         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3688  003A88  C0B3  F0A1         	movff	___ftdiv@exp,___ftpack@exp
  3689  003A8C  C0B4  F0A2         	movff	___ftdiv@sign,___ftpack@sign
  3690  003A90  ECAF  F01F         	call	___ftpack	;wreg free
  3691  003A94  C09E  F0A6         	movff	?___ftpack,?___ftdiv
  3692  003A98  C09F  F0A7         	movff	?___ftpack+1,?___ftdiv+1
  3693  003A9C  C0A0  F0A8         	movff	?___ftpack+2,?___ftdiv+2
  3694  003AA0  0012               	return	
  3695  003AA2                     __end_of___ftdiv:
  3696                           	opt stack 0
  3697                           tblptru	equ	0xFF8
  3698                           tblptrh	equ	0xFF7
  3699                           tblptrl	equ	0xFF6
  3700                           tablat	equ	0xFF5
  3701                           intcon	equ	0xFF2
  3702                           intcon2	equ	0xFF1
  3703                           intcon3	equ	0xFF0
  3704                           postinc0	equ	0xFEE
  3705                           wreg	equ	0xFE8
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function ___awtoft *****************
  3709 ;; Defined at:
  3710 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  c               2   38[BANK0 ] int 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  sign            1   41[BANK0 ] unsigned char 
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  3   38[BANK0 ] float 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3724 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;Total ram usage:        4 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    8
  3731 ;; This function calls:
  3732 ;;		___ftpack
  3733 ;; This function is called by:
  3734 ;;		_operation
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text6
  3739  00562E                     __ptext6:
  3740                           	opt stack 0
  3741  00562E                     ___awtoft:
  3742                           	opt stack 21
  3743                           
  3744                           ;incstack = 0
  3745  00562E  0E00               	movlw	0
  3746  005630  0100               	movlb	0	; () banked
  3747  005632  6FA9               	movwf	___awtoft@sign& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750  005634  0100               	movlb	0	; () banked
  3751  005636  AFA7               	btfss	(___awtoft@c+1)& (0+255),7,b
  3752  005638  D008               	goto	l7692
  3753                           
  3754                           ; BSR set to: 0
  3755  00563A  0100               	movlb	0	; () banked
  3756  00563C  6DA6               	negf	___awtoft@c& (0+255),b
  3757  00563E  1FA7               	comf	(___awtoft@c+1)& (0+255),f,b
  3758  005640  B0D8               	btfsc	status,0,c
  3759  005642  2BA7               	incf	(___awtoft@c+1)& (0+255),f,b
  3760                           
  3761                           ; BSR set to: 0
  3762  005644  0E01               	movlw	1
  3763  005646  0100               	movlb	0	; () banked
  3764  005648  6FA9               	movwf	___awtoft@sign& (0+255),b
  3765  00564A                     l7692:
  3766                           
  3767                           ; BSR set to: 0
  3768  00564A  C0A6  F09E         	movff	___awtoft@c,___ftpack@arg
  3769  00564E  C0A7  F09F         	movff	___awtoft@c+1,___ftpack@arg+1
  3770  005652  0100               	movlb	0	; () banked
  3771  005654  6BA0               	clrf	(___ftpack@arg+2)& (0+255),b
  3772  005656  0E8E               	movlw	142
  3773  005658  0100               	movlb	0	; () banked
  3774  00565A  6FA1               	movwf	___ftpack@exp& (0+255),b
  3775  00565C  C0A9  F0A2         	movff	___awtoft@sign,___ftpack@sign
  3776  005660  ECAF  F01F         	call	___ftpack	;wreg free
  3777  005664  C09E  F0A6         	movff	?___ftpack,?___awtoft
  3778  005668  C09F  F0A7         	movff	?___ftpack+1,?___awtoft+1
  3779  00566C  C0A0  F0A8         	movff	?___ftpack+2,?___awtoft+2
  3780  005670  0012               	return	
  3781  005672                     __end_of___awtoft:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           intcon	equ	0xFF2
  3788                           intcon2	equ	0xFF1
  3789                           intcon3	equ	0xFF0
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           status	equ	0xFD8
  3793                           
  3794 ;; *************** function _initLCD *****************
  3795 ;; Defined at:
  3796 ;;		line 14 in file "lcd.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        1 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    9
  3817 ;; This function calls:
  3818 ;;		_lcdInst
  3819 ;; This function is called by:
  3820 ;;		_main
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text7
  3825  0054FC                     __ptext7:
  3826                           	opt stack 0
  3827  0054FC                     _initLCD:
  3828                           	opt stack 21
  3829                           
  3830                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3831                           
  3832                           ;incstack = 0
  3833  0054FC  0E31               	movlw	49
  3834  0054FE  0100               	movlb	0	; () banked
  3835  005500  6FA1               	movwf	??_initLCD& (0+255),b
  3836  005502  0EB2               	movlw	178
  3837  005504                     u9097:
  3838  005504  2EE8               	decfsz	wreg,f,c
  3839  005506  D7FE               	bra	u9097
  3840  005508  2FA1               	decfsz	??_initLCD& (0+255),f,b
  3841  00550A  D7FC               	bra	u9097
  3842  00550C  F000               	nop	
  3843                           
  3844                           ;lcd.c: 16: lcdInst(0b00110011);
  3845  00550E  0E33               	movlw	51
  3846  005510  EC8B  F02C         	call	_lcdInst
  3847                           
  3848                           ;lcd.c: 17: lcdInst(0b00110011);
  3849  005514  0E33               	movlw	51
  3850  005516  EC8B  F02C         	call	_lcdInst
  3851                           
  3852                           ;lcd.c: 18: lcdInst(0b00110010);
  3853  00551A  0E32               	movlw	50
  3854  00551C  EC8B  F02C         	call	_lcdInst
  3855                           
  3856                           ;lcd.c: 19: lcdInst(0b00101000);
  3857  005520  0E28               	movlw	40
  3858  005522  EC8B  F02C         	call	_lcdInst
  3859                           
  3860                           ;lcd.c: 20: lcdInst(0b00001111);
  3861  005526  0E0F               	movlw	15
  3862  005528  EC8B  F02C         	call	_lcdInst
  3863                           
  3864                           ;lcd.c: 21: lcdInst(0b00000110);
  3865  00552C  0E06               	movlw	6
  3866  00552E  EC8B  F02C         	call	_lcdInst
  3867                           
  3868                           ;lcd.c: 22: lcdInst(0b00000001);
  3869  005532  0E01               	movlw	1
  3870  005534  EC8B  F02C         	call	_lcdInst
  3871                           
  3872                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  3873  005538  0E31               	movlw	49
  3874  00553A  0100               	movlb	0	; () banked
  3875  00553C  6FA1               	movwf	??_initLCD& (0+255),b
  3876  00553E  0EB2               	movlw	178
  3877  005540                     u9107:
  3878  005540  2EE8               	decfsz	wreg,f,c
  3879  005542  D7FE               	bra	u9107
  3880  005544  2FA1               	decfsz	??_initLCD& (0+255),f,b
  3881  005546  D7FC               	bra	u9107
  3882  005548  F000               	nop	
  3883  00554A  0012               	return		;funcret
  3884  00554C                     __end_of_initLCD:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           intcon	equ	0xFF2
  3891                           intcon2	equ	0xFF1
  3892                           intcon3	equ	0xFF0
  3893                           postinc0	equ	0xFEE
  3894                           wreg	equ	0xFE8
  3895                           status	equ	0xFD8
  3896                           
  3897 ;; *************** function _emergencystop *****************
  3898 ;; Defined at:
  3899 ;;		line 455 in file "main.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;		None
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;		None
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;Total ram usage:        0 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:   11
  3920 ;; This function calls:
  3921 ;;		_lcdInst
  3922 ;;		_printf
  3923 ;; This function is called by:
  3924 ;;		_main
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text8
  3929  005888                     __ptext8:
  3930                           	opt stack 0
  3931  005888                     _emergencystop:
  3932                           	opt stack 19
  3933                           
  3934                           ;main.c: 456: (INTCONbits.GIE = 0);
  3935                           
  3936                           ;incstack = 0
  3937  005888  9EF2               	bcf	intcon,7,c	;volatile
  3938                           
  3939                           ;main.c: 457: PORTAbits.RA2 = 0;
  3940  00588A  9480               	bcf	3968,2,c	;volatile
  3941                           
  3942                           ;main.c: 458: lcdInst(0b00000001);
  3943  00588C  0E01               	movlw	1
  3944  00588E  EC8B  F02C         	call	_lcdInst
  3945                           
  3946                           ;main.c: 459: lcdInst(0b10000000);
  3947  005892  0E80               	movlw	128
  3948  005894  EC8B  F02C         	call	_lcdInst
  3949                           
  3950                           ;main.c: 460: printf("EMERGENCY STOP");
  3951  005898  0EBC               	movlw	low STR_22
  3952  00589A  0101               	movlb	1	; () banked
  3953  00589C  6F1C               	movwf	printf@f& (0+255),b
  3954  00589E  0EFF               	movlw	high STR_22
  3955  0058A0  0101               	movlb	1	; () banked
  3956  0058A2  6F1D               	movwf	(printf@f+1)& (0+255),b
  3957  0058A4  EC09  F000         	call	_printf	;wreg free
  3958  0058A8                     l429:
  3959  0058A8  D7FF               	goto	l429
  3960  0058AA                     __end_of_emergencystop:
  3961                           	opt stack 0
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           intcon	equ	0xFF2
  3967                           intcon2	equ	0xFF1
  3968                           intcon3	equ	0xFF0
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _date_time *****************
  3974 ;; Defined at:
  3975 ;;		line 280 in file "main.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  i               1   65[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        1 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:   11
  3996 ;; This function calls:
  3997 ;;		_I2C_Master_Read
  3998 ;;		_I2C_Master_Start
  3999 ;;		_I2C_Master_Stop
  4000 ;;		_I2C_Master_Write
  4001 ;;		_lcdInst
  4002 ;;		_printf
  4003 ;; This function is called by:
  4004 ;;		_main
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text9
  4009  0048F2                     __ptext9:
  4010                           	opt stack 0
  4011  0048F2                     _date_time:
  4012                           	opt stack 19
  4013                           
  4014                           ;main.c: 282: I2C_Master_Start();
  4015                           
  4016                           ;incstack = 0
  4017  0048F2  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
  4018                           
  4019                           ;main.c: 283: I2C_Master_Write(0b11010000);
  4020  0048F6  0E00               	movlw	0
  4021  0048F8  0100               	movlb	0	; () banked
  4022  0048FA  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4023  0048FC  0ED0               	movlw	208
  4024  0048FE  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4025  004900  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
  4026                           
  4027                           ;main.c: 284: I2C_Master_Write(0x00);
  4028  004904  0E00               	movlw	0
  4029  004906  0100               	movlb	0	; () banked
  4030  004908  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4031  00490A  0E00               	movlw	0
  4032  00490C  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4033  00490E  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
  4034                           
  4035                           ;main.c: 285: I2C_Master_Stop();
  4036  004912  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
  4037                           
  4038                           ;main.c: 288: I2C_Master_Start();
  4039  004916  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
  4040                           
  4041                           ;main.c: 289: I2C_Master_Write(0b11010001);
  4042  00491A  0E00               	movlw	0
  4043  00491C  0100               	movlb	0	; () banked
  4044  00491E  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4045  004920  0ED1               	movlw	209
  4046  004922  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
  4047  004924  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
  4048                           
  4049                           ;main.c: 290: for(unsigned char i=0;i<0x06;i++){
  4050  004928  0E00               	movlw	0
  4051  00492A  0100               	movlb	0	; () banked
  4052  00492C  6FC1               	movwf	date_time@i& (0+255),b
  4053  00492E                     l7824:
  4054                           
  4055                           ; BSR set to: 0
  4056  00492E  0E05               	movlw	5
  4057  004930  0100               	movlb	0	; () banked
  4058  004932  65C1               	cpfsgt	date_time@i& (0+255),b
  4059  004934  D001               	goto	l7828
  4060  004936  D010               	goto	l7834
  4061  004938                     l7828:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;main.c: 291: time[i] = I2C_Master_Read(1);
  4065  004938  0100               	movlb	0	; () banked
  4066  00493A  51C1               	movf	date_time@i& (0+255),w,b
  4067  00493C  0D01               	mullw	1
  4068  00493E  0E58               	movlw	low _time
  4069  004940  24F3               	addwf	prodl,w,c
  4070  004942  6ED9               	movwf	fsr2l,c
  4071  004944  0E01               	movlw	high _time
  4072  004946  20F4               	addwfc	prodh,w,c
  4073  004948  6EDA               	movwf	fsr2h,c
  4074  00494A  0E01               	movlw	1
  4075  00494C  ECE0  F02B         	call	_I2C_Master_Read
  4076  004950  6EDF               	movwf	indf2,c
  4077  004952  0100               	movlb	0	; () banked
  4078  004954  2BC1               	incf	date_time@i& (0+255),f,b
  4079  004956  D7EB               	goto	l7824
  4080  004958                     l7834:
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;main.c: 292: }
  4084                           ;main.c: 293: time[6] = I2C_Master_Read(0);
  4085  004958  0E00               	movlw	0
  4086  00495A  ECE0  F02B         	call	_I2C_Master_Read
  4087  00495E  0101               	movlb	1	; () banked
  4088  004960  6F5E               	movwf	(_time+6)& (0+255),b
  4089                           
  4090                           ;main.c: 294: I2C_Master_Stop();
  4091  004962  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
  4092                           
  4093                           ;main.c: 297: lcdInst(0b10000000);
  4094  004966  0E80               	movlw	128
  4095  004968  EC8B  F02C         	call	_lcdInst
  4096                           
  4097                           ;main.c: 298: printf("Date: %02x/%02x/%02x  ", time[5],time[4],time[6]);
  4098  00496C  0EE5               	movlw	low STR_7
  4099  00496E  0101               	movlb	1	; () banked
  4100  004970  6F1C               	movwf	printf@f& (0+255),b
  4101  004972  0EFE               	movlw	high STR_7
  4102  004974  0101               	movlb	1	; () banked
  4103  004976  6F1D               	movwf	(printf@f+1)& (0+255),b
  4104  004978  C15D  F11E         	movff	_time+5,?_printf+2
  4105  00497C  0101               	movlb	1	; () banked
  4106  00497E  6B1F               	clrf	(?_printf+3)& (0+255),b
  4107  004980  C15C  F120         	movff	_time+4,?_printf+4
  4108  004984  0101               	movlb	1	; () banked
  4109  004986  6B21               	clrf	(?_printf+5)& (0+255),b
  4110  004988  C15E  F122         	movff	_time+6,?_printf+6
  4111  00498C  0101               	movlb	1	; () banked
  4112  00498E  6B23               	clrf	(?_printf+7)& (0+255),b
  4113  004990  EC09  F000         	call	_printf	;wreg free
  4114                           
  4115                           ;main.c: 299: lcdInst(0b11000000);
  4116  004994  0EC0               	movlw	192
  4117  004996  EC8B  F02C         	call	_lcdInst
  4118                           
  4119                           ;main.c: 300: printf("Time: %02x:%02x:%02x  ", time[2],time[1],time[0]);
  4120  00499A  0EFC               	movlw	low STR_8
  4121  00499C  0101               	movlb	1	; () banked
  4122  00499E  6F1C               	movwf	printf@f& (0+255),b
  4123  0049A0  0EFE               	movlw	high STR_8
  4124  0049A2  0101               	movlb	1	; () banked
  4125  0049A4  6F1D               	movwf	(printf@f+1)& (0+255),b
  4126  0049A6  C15A  F11E         	movff	_time+2,?_printf+2
  4127  0049AA  0101               	movlb	1	; () banked
  4128  0049AC  6B1F               	clrf	(?_printf+3)& (0+255),b
  4129  0049AE  C159  F120         	movff	_time+1,?_printf+4
  4130  0049B2  0101               	movlb	1	; () banked
  4131  0049B4  6B21               	clrf	(?_printf+5)& (0+255),b
  4132  0049B6  C158  F122         	movff	_time,?_printf+6
  4133  0049BA  0101               	movlb	1	; () banked
  4134  0049BC  6B23               	clrf	(?_printf+7)& (0+255),b
  4135  0049BE  EC09  F000         	call	_printf	;wreg free
  4136  0049C2  0012               	return	
  4137  0049C4                     __end_of_date_time:
  4138                           	opt stack 0
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           intcon3	equ	0xFF0
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           indf2	equ	0xFDF
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _I2C_Master_Read *****************
  4156 ;; Defined at:
  4157 ;;		line 110 in file "I2C.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  a               1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  a               1   31[BANK0 ] unsigned char 
  4162 ;;  temp            1   32[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      unsigned char 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        2 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    8
  4179 ;; This function calls:
  4180 ;;		_I2C_Master_Wait
  4181 ;; This function is called by:
  4182 ;;		_date_time
  4183 ;;		_read_colorsensor
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text10
  4188  0057C0                     __ptext10:
  4189                           	opt stack 0
  4190  0057C0                     _I2C_Master_Read:
  4191                           	opt stack 20
  4192                           
  4193                           ;incstack = 0
  4194                           ;I2C_Master_Read@a stored from wreg
  4195  0057C0  0100               	movlb	0	; () banked
  4196  0057C2  6F9F               	movwf	I2C_Master_Read@a& (0+255),b
  4197                           
  4198                           ;I2C.c: 112: unsigned char temp;
  4199                           ;I2C.c: 113: I2C_Master_Wait();
  4200  0057C4  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
  4201                           
  4202                           ;I2C.c: 114: RCEN = 1;
  4203  0057C8  86C5               	bsf	4037,3,c	;volatile
  4204                           
  4205                           ;I2C.c: 115: I2C_Master_Wait();
  4206  0057CA  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
  4207                           
  4208                           ;I2C.c: 116: temp = SSPBUF;
  4209  0057CE  CFC9 F0A0          	movff	4041,I2C_Master_Read@temp	;volatile
  4210                           
  4211                           ;I2C.c: 117: I2C_Master_Wait();
  4212  0057D2  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
  4213                           
  4214                           ;I2C.c: 118: ACKDT = (a)?0:1;
  4215  0057D6  0100               	movlb	0	; () banked
  4216  0057D8  519F               	movf	I2C_Master_Read@a& (0+255),w,b
  4217  0057DA  0100               	movlb	0	; () banked
  4218  0057DC  A4D8               	btfss	status,2,c
  4219  0057DE  D002               	goto	u5030
  4220  0057E0  8AC5               	bsf	4037,5,c	;volatile
  4221  0057E2  D001               	goto	l4880
  4222  0057E4                     u5030:
  4223  0057E4  9AC5               	bcf	4037,5,c	;volatile
  4224  0057E6                     l4880:
  4225                           
  4226                           ;I2C.c: 119: ACKEN = 1;
  4227  0057E6  88C5               	bsf	4037,4,c	;volatile
  4228                           
  4229                           ;I2C.c: 120: return temp;
  4230  0057E8  0100               	movlb	0	; () banked
  4231  0057EA  51A0               	movf	I2C_Master_Read@temp& (0+255),w,b
  4232  0057EC  0012               	return	
  4233  0057EE                     __end_of_I2C_Master_Read:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon2	equ	0xFF1
  4243                           intcon3	equ	0xFF0
  4244                           postinc0	equ	0xFEE
  4245                           wreg	equ	0xFE8
  4246                           indf2	equ	0xFDF
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function _bottle_time *****************
  4252 ;; Defined at:
  4253 ;;		line 353 in file "main.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;Total ram usage:        0 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:   11
  4274 ;; This function calls:
  4275 ;;		_lcdInst
  4276 ;;		_printf
  4277 ;; This function is called by:
  4278 ;;		_main
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text11
  4283  005724                     __ptext11:
  4284                           	opt stack 0
  4285  005724                     _bottle_time:
  4286                           	opt stack 19
  4287                           
  4288                           ;main.c: 354: lcdInst(0b10000000);
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;incstack = 0
  4292  005724  0E80               	movlw	128
  4293  005726  EC8B  F02C         	call	_lcdInst
  4294                           
  4295                           ;main.c: 355: printf("Total Operation       ");
  4296  00572A  0ECE               	movlw	low STR_16
  4297  00572C  0101               	movlb	1	; () banked
  4298  00572E  6F1C               	movwf	printf@f& (0+255),b
  4299  005730  0EFE               	movlw	high STR_16
  4300  005732  0101               	movlb	1	; () banked
  4301  005734  6F1D               	movwf	(printf@f+1)& (0+255),b
  4302  005736  EC09  F000         	call	_printf	;wreg free
  4303                           
  4304                           ;main.c: 356: lcdInst(0b11000000);
  4305  00573A  0EC0               	movlw	192
  4306  00573C  EC8B  F02C         	call	_lcdInst
  4307                           
  4308                           ;main.c: 357: printf("Time: %d s       ", operation_time);
  4309  005740  0E13               	movlw	low STR_17
  4310  005742  0101               	movlb	1	; () banked
  4311  005744  6F1C               	movwf	printf@f& (0+255),b
  4312  005746  0EFF               	movlw	high STR_17
  4313  005748  0101               	movlb	1	; () banked
  4314  00574A  6F1D               	movwf	(printf@f+1)& (0+255),b
  4315  00574C  C17B  F11E         	movff	_operation_time,?_printf+2
  4316  005750  C17C  F11F         	movff	_operation_time+1,?_printf+3
  4317  005754  EC09  F000         	call	_printf	;wreg free
  4318  005758  0012               	return	
  4319  00575A                     __end_of_bottle_time:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           intcon2	equ	0xFF1
  4329                           intcon3	equ	0xFF0
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           indf2	equ	0xFDF
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _bottle_count *****************
  4338 ;; Defined at:
  4339 ;;		line 323 in file "main.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        0 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:   11
  4360 ;; This function calls:
  4361 ;;		___awmod
  4362 ;;		_lcdInst
  4363 ;;		_printf
  4364 ;; This function is called by:
  4365 ;;		_main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text12
  4370  004176                     __ptext12:
  4371                           	opt stack 0
  4372  004176                     _bottle_count:
  4373                           	opt stack 19
  4374                           
  4375                           ;main.c: 324: switch(bottle_count_disp % 3){
  4376                           
  4377                           ;incstack = 0
  4378  004176  D065               	goto	l7868
  4379  004178                     l7844:
  4380                           
  4381                           ;main.c: 326: lcdInst(0b10000000);
  4382  004178  0E80               	movlw	128
  4383  00417A  EC8B  F02C         	call	_lcdInst
  4384                           
  4385                           ;main.c: 327: printf("Bottle Count    ");
  4386  00417E  0E47               	movlw	low STR_9
  4387  004180  0101               	movlb	1	; () banked
  4388  004182  6F1C               	movwf	printf@f& (0+255),b
  4389  004184  0EFF               	movlw	high STR_9
  4390  004186  0101               	movlb	1	; () banked
  4391  004188  6F1D               	movwf	(printf@f+1)& (0+255),b
  4392  00418A  EC09  F000         	call	_printf	;wreg free
  4393                           
  4394                           ;main.c: 328: lcdInst(0b11000000);
  4395  00418E  0EC0               	movlw	192
  4396  004190  EC8B  F02C         	call	_lcdInst
  4397                           
  4398                           ;main.c: 329: printf("Total: %d       ", bottle_count_array[0]);
  4399  004194  0E36               	movlw	low STR_10
  4400  004196  0101               	movlb	1	; () banked
  4401  004198  6F1C               	movwf	printf@f& (0+255),b
  4402  00419A  0EFF               	movlw	high STR_10
  4403  00419C  0101               	movlb	1	; () banked
  4404  00419E  6F1D               	movwf	(printf@f+1)& (0+255),b
  4405  0041A0  C146  F11E         	movff	_bottle_count_array,?_printf+2
  4406  0041A4  C147  F11F         	movff	_bottle_count_array+1,?_printf+3
  4407  0041A8  EC09  F000         	call	_printf	;wreg free
  4408                           
  4409                           ;main.c: 330: break;
  4410  0041AC  0012               	return	
  4411  0041AE                     l7850:
  4412                           
  4413                           ;main.c: 332: lcdInst(0b10000000);
  4414  0041AE  0E80               	movlw	128
  4415  0041B0  EC8B  F02C         	call	_lcdInst
  4416                           
  4417                           ;main.c: 333: printf("YOP W/ CAP: %d  ", bottle_count_array[1]);
  4418  0041B4  0E58               	movlw	low STR_11
  4419  0041B6  0101               	movlb	1	; () banked
  4420  0041B8  6F1C               	movwf	printf@f& (0+255),b
  4421  0041BA  0EFF               	movlw	high STR_11
  4422  0041BC  0101               	movlb	1	; () banked
  4423  0041BE  6F1D               	movwf	(printf@f+1)& (0+255),b
  4424  0041C0  C148  F11E         	movff	_bottle_count_array+2,?_printf+2
  4425  0041C4  C149  F11F         	movff	_bottle_count_array+3,?_printf+3
  4426  0041C8  EC09  F000         	call	_printf	;wreg free
  4427                           
  4428                           ;main.c: 334: lcdInst(0b11000000);
  4429  0041CC  0EC0               	movlw	192
  4430  0041CE  EC8B  F02C         	call	_lcdInst
  4431                           
  4432                           ;main.c: 335: printf("YOP NO CAP: %d  ", bottle_count_array[2]);
  4433  0041D2  0E69               	movlw	low STR_12
  4434  0041D4  0101               	movlb	1	; () banked
  4435  0041D6  6F1C               	movwf	printf@f& (0+255),b
  4436  0041D8  0EFF               	movlw	high STR_12
  4437  0041DA  0101               	movlb	1	; () banked
  4438  0041DC  6F1D               	movwf	(printf@f+1)& (0+255),b
  4439  0041DE  C14A  F11E         	movff	_bottle_count_array+4,?_printf+2
  4440  0041E2  C14B  F11F         	movff	_bottle_count_array+5,?_printf+3
  4441  0041E6  EC09  F000         	call	_printf	;wreg free
  4442                           
  4443                           ;main.c: 336: break;
  4444  0041EA  0012               	return	
  4445  0041EC                     l7856:
  4446                           
  4447                           ;main.c: 338: lcdInst(0b10000000);
  4448  0041EC  0E80               	movlw	128
  4449  0041EE  EC8B  F02C         	call	_lcdInst
  4450                           
  4451                           ;main.c: 339: printf("ESKA W/ CAP: %d ", bottle_count_array[3]);
  4452  0041F2  0E7A               	movlw	low STR_13
  4453  0041F4  0101               	movlb	1	; () banked
  4454  0041F6  6F1C               	movwf	printf@f& (0+255),b
  4455  0041F8  0EFF               	movlw	high STR_13
  4456  0041FA  0101               	movlb	1	; () banked
  4457  0041FC  6F1D               	movwf	(printf@f+1)& (0+255),b
  4458  0041FE  C14C  F11E         	movff	_bottle_count_array+6,?_printf+2
  4459  004202  C14D  F11F         	movff	_bottle_count_array+7,?_printf+3
  4460  004206  EC09  F000         	call	_printf	;wreg free
  4461                           
  4462                           ;main.c: 340: lcdInst(0b11000000);
  4463  00420A  0EC0               	movlw	192
  4464  00420C  EC8B  F02C         	call	_lcdInst
  4465                           
  4466                           ;main.c: 341: printf("ESKA NO CAP: %d ", bottle_count_array[4]);
  4467  004210  0E8B               	movlw	low STR_14
  4468  004212  0101               	movlb	1	; () banked
  4469  004214  6F1C               	movwf	printf@f& (0+255),b
  4470  004216  0EFF               	movlw	high STR_14
  4471  004218  0101               	movlb	1	; () banked
  4472  00421A  6F1D               	movwf	(printf@f+1)& (0+255),b
  4473  00421C  C14E  F11E         	movff	_bottle_count_array+8,?_printf+2
  4474  004220  C14F  F11F         	movff	_bottle_count_array+9,?_printf+3
  4475  004224  EC09  F000         	call	_printf	;wreg free
  4476                           
  4477                           ;main.c: 342: break;
  4478  004228  0012               	return	
  4479  00422A                     l7862:
  4480                           
  4481                           ;main.c: 345: lcdInst(0b10000000);
  4482  00422A  0E80               	movlw	128
  4483  00422C  EC8B  F02C         	call	_lcdInst
  4484                           
  4485                           ;main.c: 346: printf("ERR: BAD BTLCNT");
  4486  004230  0EAC               	movlw	low STR_15
  4487  004232  0101               	movlb	1	; () banked
  4488  004234  6F1C               	movwf	printf@f& (0+255),b
  4489  004236  0EFF               	movlw	high STR_15
  4490  004238  0101               	movlb	1	; () banked
  4491  00423A  6F1D               	movwf	(printf@f+1)& (0+255),b
  4492  00423C  EC09  F000         	call	_printf	;wreg free
  4493  004240  D7F4               	goto	l7862
  4494  004242                     l7868:
  4495  004242  C185  F09E         	movff	_bottle_count_disp,___awmod@dividend
  4496  004246  C186  F09F         	movff	_bottle_count_disp+1,___awmod@dividend+1
  4497  00424A  0E00               	movlw	0
  4498  00424C  0100               	movlb	0	; () banked
  4499  00424E  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  4500  004250  0E03               	movlw	3
  4501  004252  6FA0               	movwf	___awmod@divisor& (0+255),b
  4502  004254  EC26  F027         	call	___awmod	;wreg free
  4503                           
  4504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4505                           ; Switch size 1, requested type "space"
  4506                           ; Number of cases is 1, Range of values is 0 to 0
  4507                           ; switch strategies available:
  4508                           ; Name         Instructions Cycles
  4509                           ; simple_byte            4     3 (average)
  4510                           ;	Chosen strategy is simple_byte
  4511  004258  0100               	movlb	0	; () banked
  4512  00425A  519F               	movf	(?___awmod+1)& (0+255),w,b
  4513  00425C  0A00               	xorlw	0	; case 0
  4514  00425E  A4D8               	btfss	status,2,c
  4515  004260  D7E4               	goto	l7862
  4516                           
  4517                           ; BSR set to: 0
  4518                           ; Switch size 1, requested type "space"
  4519                           ; Number of cases is 3, Range of values is 0 to 2
  4520                           ; switch strategies available:
  4521                           ; Name         Instructions Cycles
  4522                           ; simple_byte           10     6 (average)
  4523                           ;	Chosen strategy is simple_byte
  4524  004262  0100               	movlb	0	; () banked
  4525  004264  519E               	movf	?___awmod& (0+255),w,b
  4526  004266  0A00               	xorlw	0	; case 0
  4527  004268  B4D8               	btfsc	status,2,c
  4528  00426A  D786               	goto	l7844
  4529  00426C  0A01               	xorlw	1	; case 1
  4530  00426E  B4D8               	btfsc	status,2,c
  4531  004270  D79E               	goto	l7850
  4532  004272  0A03               	xorlw	3	; case 2
  4533  004274  B4D8               	btfsc	status,2,c
  4534  004276  D7BA               	goto	l7856
  4535  004278  D7D8               	goto	l7862
  4536  00427A                     __end_of_bottle_count:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           intcon	equ	0xFF2
  4545                           intcon2	equ	0xFF1
  4546                           intcon3	equ	0xFF0
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf2	equ	0xFDF
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _printf *****************
  4555 ;; Defined at:
  4556 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  f               2   28[BANK1 ] PTR const unsigned char 
  4559 ;;		 -> STR_22(15), STR_21(16), STR_20(7), STR_19(3), 
  4560 ;;		 -> STR_18(4), STR_17(18), STR_16(23), STR_15(16), 
  4561 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  4562 ;;		 -> STR_10(17), STR_9(17), STR_8(23), STR_7(23), 
  4563 ;;		 -> STR_6(9), STR_5(8), STR_4(13), STR_3(24), 
  4564 ;;		 -> STR_2(24), STR_1(8), 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  idx             1   45[BANK1 ] unsigned char 
  4567 ;;  val             4   58[BANK1 ] unsigned long 
  4568 ;;  tmpval          4   50[BANK1 ] struct .
  4569 ;;  fval            3   64[BANK1 ] struct .
  4570 ;;  cp              3    0        PTR const unsigned char 
  4571 ;;  flag            2   62[BANK1 ] unsigned short 
  4572 ;;  exp             2   56[BANK1 ] int 
  4573 ;;  width           2   54[BANK1 ] int 
  4574 ;;  prec            2   48[BANK1 ] int 
  4575 ;;  ap              2   46[BANK1 ] PTR void [1]
  4576 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4577 ;;  len             2    0        unsigned int 
  4578 ;;  c               1   67[BANK1 ] char 
  4579 ;;  d               1    0        unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  2   28[BANK1 ] int 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:       40 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:   10
  4596 ;; This function calls:
  4597 ;;		___awdiv
  4598 ;;		___ftadd
  4599 ;;		___ftge
  4600 ;;		___ftmul
  4601 ;;		___ftneg
  4602 ;;		___ftsub
  4603 ;;		___fttol
  4604 ;;		___lldiv
  4605 ;;		___llmod
  4606 ;;		___lltoft
  4607 ;;		___wmul
  4608 ;;		__div_to_l_
  4609 ;;		__tdiv_to_l_
  4610 ;;		_fround
  4611 ;;		_isdigit
  4612 ;;		_putch
  4613 ;;		_scale
  4614 ;; This function is called by:
  4615 ;;		_standby
  4616 ;;		_date_time
  4617 ;;		_bottle_count
  4618 ;;		_bottle_time
  4619 ;;		_operation
  4620 ;;		_operationend
  4621 ;;		_emergencystop
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text13
  4626  000012                     __ptext13:
  4627                           	opt stack 0
  4628  000012                     _printf:
  4629                           	opt stack 19
  4630                           
  4631                           ;doprnt.c: 466: va_list ap;
  4632                           ;doprnt.c: 499: signed char c;
  4633                           ;doprnt.c: 501: int width;
  4634                           ;doprnt.c: 504: int prec;
  4635                           ;doprnt.c: 508: unsigned short flag;
  4636                           ;doprnt.c: 515: char d;
  4637                           ;doprnt.c: 516: double fval;
  4638                           ;doprnt.c: 517: int exp;
  4639                           ;doprnt.c: 523: union {
  4640                           ;doprnt.c: 524: unsigned long vd;
  4641                           ;doprnt.c: 525: double integ;
  4642                           ;doprnt.c: 526: } tmpval;
  4643                           ;doprnt.c: 528: unsigned long val;
  4644                           ;doprnt.c: 529: unsigned len;
  4645                           ;doprnt.c: 530: const char * cp;
  4646                           ;doprnt.c: 533: *ap = __va_start();
  4647                           
  4648                           ;incstack = 0
  4649  000012  0E1E               	movlw	low (?_printf+2)
  4650  000014  0101               	movlb	1	; () banked
  4651  000016  6F2E               	movwf	printf@ap& (0+255),b
  4652  000018  0E01               	movlw	high (?_printf+2)
  4653  00001A  0101               	movlb	1	; () banked
  4654  00001C  6F2F               	movwf	(printf@ap+1)& (0+255),b
  4655                           
  4656                           ;doprnt.c: 536: while(c = *f++) {
  4657  00001E  EFEE  F005         	goto	l7636
  4658  000022                     l7346:
  4659                           
  4660                           ; BSR set to: 1
  4661                           ;doprnt.c: 538: if(c != '%')
  4662  000022  0E25               	movlw	37
  4663  000024  0101               	movlb	1	; () banked
  4664  000026  1943               	xorwf	printf@c& (0+255),w,b
  4665  000028  B4D8               	btfsc	status,2,c
  4666  00002A  D006               	goto	l7350
  4667                           
  4668                           ; BSR set to: 1
  4669                           ;doprnt.c: 540: {
  4670                           ;doprnt.c: 541: (putch(c) );
  4671  00002C  0101               	movlb	1	; () banked
  4672  00002E  5143               	movf	printf@c& (0+255),w,b
  4673  000030  EC83  F02C         	call	_putch
  4674                           
  4675                           ;doprnt.c: 542: continue;
  4676  000034  EFEE  F005         	goto	l7636
  4677  000038                     l7350:
  4678                           
  4679                           ;doprnt.c: 543: }
  4680                           ;doprnt.c: 546: width = 0;
  4681  000038  0E00               	movlw	0
  4682  00003A  0101               	movlb	1	; () banked
  4683  00003C  6F37               	movwf	(printf@width+1)& (0+255),b
  4684  00003E  0E00               	movlw	0
  4685  000040  6F36               	movwf	printf@width& (0+255),b
  4686                           
  4687                           ;doprnt.c: 548: flag = 0;
  4688  000042  0E00               	movlw	0
  4689  000044  0101               	movlb	1	; () banked
  4690  000046  6F3F               	movwf	(printf@flag+1)& (0+255),b
  4691  000048  0E00               	movlw	0
  4692  00004A  6F3E               	movwf	printf@flag& (0+255),b
  4693                           
  4694                           ; BSR set to: 1
  4695                           ;doprnt.c: 551: switch(*f) {
  4696                           
  4697                           ;doprnt.c: 550: for(;;) {
  4698  00004C  D005               	goto	l7356
  4699  00004E                     l7352:
  4700                           
  4701                           ;doprnt.c: 580: flag |= 0x04;
  4702  00004E  0101               	movlb	1	; () banked
  4703  000050  853E               	bsf	printf@flag& (0+255),2,b
  4704                           
  4705                           ;doprnt.c: 581: f++;
  4706  000052  0101               	movlb	1	; () banked
  4707  000054  4B1C               	infsnz	printf@f& (0+255),f,b
  4708  000056  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4709  000058                     l7356:
  4710  000058  C11C  FFF6         	movff	printf@f,tblptrl
  4711  00005C  C11D  FFF7         	movff	printf@f+1,tblptrh
  4712  000060                     	if	0	;tblptru may be non-zero
  4713  000060                     	endif
  4714  000060                     	if	0	;tblptru may be non-zero
  4715  000060                     	endif
  4716  000060  0008               	tblrd		*
  4717  000062  50F5               	movf	tablat,w,c
  4718                           
  4719                           ; Switch size 1, requested type "space"
  4720                           ; Number of cases is 1, Range of values is 48 to 48
  4721                           ; switch strategies available:
  4722                           ; Name         Instructions Cycles
  4723                           ; simple_byte            4     3 (average)
  4724                           ;	Chosen strategy is simple_byte
  4725  000064  0A30               	xorlw	48	; case 48
  4726  000066  B4D8               	btfsc	status,2,c
  4727  000068  D7F2               	goto	l7352
  4728                           
  4729                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4730                           
  4731                           ;doprnt.c: 586: }
  4732                           
  4733                           ;doprnt.c: 585: break;
  4734  00006A  C11C  FFF6         	movff	printf@f,tblptrl
  4735  00006E  C11D  FFF7         	movff	printf@f+1,tblptrh
  4736  000072                     	if	0	;tblptru may be non-zero
  4737  000072                     	endif
  4738  000072                     	if	0	;tblptru may be non-zero
  4739  000072                     	endif
  4740  000072  0008               	tblrd		*
  4741  000074  50F5               	movf	tablat,w,c
  4742  000076  ECF7  F02B         	call	_isdigit
  4743  00007A  A0D8               	btfss	status,0,c
  4744  00007C  D04B               	goto	l7378
  4745                           
  4746                           ;doprnt.c: 598: width = 0;
  4747  00007E  0E00               	movlw	0
  4748  000080  0101               	movlb	1	; () banked
  4749  000082  6F37               	movwf	(printf@width+1)& (0+255),b
  4750  000084  0E00               	movlw	0
  4751  000086  6F36               	movwf	printf@width& (0+255),b
  4752  000088                     l7362:
  4753                           
  4754                           ;doprnt.c: 600: width *= 10;
  4755  000088  C136  F0AC         	movff	printf@width,___wmul@multiplier
  4756  00008C  C137  F0AD         	movff	printf@width+1,___wmul@multiplier+1
  4757  000090  0E00               	movlw	0
  4758  000092  0100               	movlb	0	; () banked
  4759  000094  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4760  000096  0E0A               	movlw	10
  4761  000098  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  4762  00009A  ECAD  F02B         	call	___wmul	;wreg free
  4763  00009E  C0AC  F136         	movff	?___wmul,printf@width
  4764  0000A2  C0AD  F137         	movff	?___wmul+1,printf@width+1
  4765                           
  4766                           ;doprnt.c: 601: width += *f++ - '0';
  4767  0000A6  0ED0               	movlw	208
  4768  0000A8  0101               	movlb	1	; () banked
  4769  0000AA  6F24               	movwf	??_printf& (0+255),b
  4770  0000AC  0EFF               	movlw	255
  4771  0000AE  0101               	movlb	1	; () banked
  4772  0000B0  6F25               	movwf	(??_printf+1)& (0+255),b
  4773  0000B2  C11C  FFF6         	movff	printf@f,tblptrl
  4774  0000B6  C11D  FFF7         	movff	printf@f+1,tblptrh
  4775  0000BA                     	if	0	;tblptru may be non-zero
  4776  0000BA                     	endif
  4777  0000BA                     	if	0	;tblptru may be non-zero
  4778  0000BA                     	endif
  4779  0000BA  0008               	tblrd		*
  4780  0000BC  50F5               	movf	tablat,w,c
  4781  0000BE  0101               	movlb	1	; () banked
  4782  0000C0  6F26               	movwf	(??_printf+2)& (0+255),b
  4783  0000C2  6B27               	clrf	(??_printf+3)& (0+255),b
  4784  0000C4  0101               	movlb	1	; () banked
  4785  0000C6  5124               	movf	??_printf& (0+255),w,b
  4786  0000C8  0101               	movlb	1	; () banked
  4787  0000CA  2726               	addwf	(??_printf+2)& (0+255),f,b
  4788  0000CC  0101               	movlb	1	; () banked
  4789  0000CE  5125               	movf	(??_printf+1)& (0+255),w,b
  4790  0000D0  0101               	movlb	1	; () banked
  4791  0000D2  2327               	addwfc	(??_printf+3)& (0+255),f,b
  4792  0000D4  0101               	movlb	1	; () banked
  4793  0000D6  5126               	movf	(??_printf+2)& (0+255),w,b
  4794  0000D8  0101               	movlb	1	; () banked
  4795  0000DA  2736               	addwf	printf@width& (0+255),f,b
  4796  0000DC  0101               	movlb	1	; () banked
  4797  0000DE  5127               	movf	(??_printf+3)& (0+255),w,b
  4798  0000E0  0101               	movlb	1	; () banked
  4799  0000E2  2337               	addwfc	(printf@width+1)& (0+255),f,b
  4800                           
  4801                           ; BSR set to: 1
  4802  0000E4  0101               	movlb	1	; () banked
  4803  0000E6  4B1C               	infsnz	printf@f& (0+255),f,b
  4804  0000E8  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4805                           
  4806                           ; BSR set to: 1
  4807                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4808  0000EA  C11C  FFF6         	movff	printf@f,tblptrl
  4809  0000EE  C11D  FFF7         	movff	printf@f+1,tblptrh
  4810  0000F2                     	if	0	;tblptru may be non-zero
  4811  0000F2                     	endif
  4812  0000F2                     	if	0	;tblptru may be non-zero
  4813  0000F2                     	endif
  4814  0000F2  0008               	tblrd		*
  4815  0000F4  50F5               	movf	tablat,w,c
  4816  0000F6  ECF7  F02B         	call	_isdigit
  4817  0000FA  A0D8               	btfss	status,0,c
  4818  0000FC  D00B               	goto	l7378
  4819  0000FE  D7C4               	goto	l7362
  4820  000100                     l7370:
  4821                           
  4822                           ;doprnt.c: 663: flag |= 0x400;
  4823  000100  0101               	movlb	1	; () banked
  4824  000102  853F               	bsf	(printf@flag+1)& (0+255),2,b
  4825                           
  4826                           ; BSR set to: 1
  4827                           ;doprnt.c: 698: case 'i':
  4828                           ;doprnt.c: 699: break;
  4829                           
  4830                           ; BSR set to: 1
  4831                           
  4832                           ;doprnt.c: 697: case 'd':
  4833                           
  4834                           ;doprnt.c: 664: break;
  4835  000104  D027               	goto	l7380
  4836  000106                     l7372:
  4837                           
  4838                           ; BSR set to: 1
  4839                           ;doprnt.c: 721: flag |= 0x80;
  4840  000106  0101               	movlb	1	; () banked
  4841  000108  8F3E               	bsf	printf@flag& (0+255),7,b
  4842                           
  4843                           ;doprnt.c: 723: break;
  4844  00010A  D024               	goto	l7380
  4845  00010C                     l7374:
  4846                           
  4847                           ; BSR set to: 1
  4848                           ;doprnt.c: 818: flag |= 0xC0;
  4849  00010C  0EC0               	movlw	192
  4850  00010E  0101               	movlb	1	; () banked
  4851  000110  133E               	iorwf	printf@flag& (0+255),f,b
  4852                           
  4853                           ; BSR set to: 1
  4854                           ;doprnt.c: 822: }
  4855                           
  4856                           ;doprnt.c: 819: break;
  4857  000112  D020               	goto	l7380
  4858  000114                     l7378:
  4859  000114  C11C  FFF6         	movff	printf@f,tblptrl
  4860  000118  C11D  FFF7         	movff	printf@f+1,tblptrh
  4861  00011C  0101               	movlb	1	; () banked
  4862  00011E  4B1C               	infsnz	printf@f& (0+255),f,b
  4863  000120  2B1D               	incf	(printf@f+1)& (0+255),f,b
  4864  000122                     	if	0	;tblptru may be non-zero
  4865  000122                     	endif
  4866  000122                     	if	0	;tblptru may be non-zero
  4867  000122                     	endif
  4868  000122  0008               	tblrd		*
  4869  000124  CFF5 F143          	movff	tablat,printf@c
  4870  000128  0101               	movlb	1	; () banked
  4871  00012A  5143               	movf	printf@c& (0+255),w,b
  4872                           
  4873                           ; Switch size 1, requested type "space"
  4874                           ; Number of cases is 6, Range of values is 0 to 120
  4875                           ; switch strategies available:
  4876                           ; Name         Instructions Cycles
  4877                           ; simple_byte           19    10 (average)
  4878                           ;	Chosen strategy is simple_byte
  4879  00012C  0A00               	xorlw	0	; case 0
  4880  00012E  B4D8               	btfsc	status,2,c
  4881  000130  0012               	return	
  4882  000132  0A64               	xorlw	100	; case 100
  4883  000134  B4D8               	btfsc	status,2,c
  4884  000136  D00E               	goto	l7380
  4885  000138  0A02               	xorlw	2	; case 102
  4886  00013A  B4D8               	btfsc	status,2,c
  4887  00013C  D7E1               	goto	l7370
  4888  00013E  0A0F               	xorlw	15	; case 105
  4889  000140  B4D8               	btfsc	status,2,c
  4890  000142  D008               	goto	l7380
  4891  000144  0A1C               	xorlw	28	; case 117
  4892  000146  B4D8               	btfsc	status,2,c
  4893  000148  D7E1               	goto	l7374
  4894  00014A  0A0D               	xorlw	13	; case 120
  4895  00014C  B4D8               	btfsc	status,2,c
  4896  00014E  D7DB               	goto	l7372
  4897  000150  EFEE  F005         	goto	l7636
  4898  000154                     l7380:
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;doprnt.c: 825: if(flag & (0x700)) {
  4902  000154  0E07               	movlw	7
  4903  000156  0101               	movlb	1	; () banked
  4904  000158  153F               	andwf	(printf@flag+1)& (0+255),w,b
  4905  00015A  B4D8               	btfsc	status,2,c
  4906  00015C  D37A               	goto	l7538
  4907                           
  4908                           ; BSR set to: 1
  4909                           ;doprnt.c: 829: prec = 6;
  4910  00015E  0E00               	movlw	0
  4911  000160  0101               	movlb	1	; () banked
  4912  000162  6F31               	movwf	(printf@prec+1)& (0+255),b
  4913  000164  0E06               	movlw	6
  4914  000166  6F30               	movwf	printf@prec& (0+255),b
  4915                           
  4916                           ; BSR set to: 1
  4917                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4918  000168  C12E  FFD9         	movff	printf@ap,fsr2l
  4919  00016C  C12F  FFDA         	movff	printf@ap+1,fsr2h
  4920  000170  CFDE F140          	movff	postinc2,printf@fval
  4921  000174  CFDE F141          	movff	postinc2,printf@fval+1
  4922  000178  CFDD F142          	movff	postdec2,printf@fval+2
  4923                           
  4924                           ; BSR set to: 1
  4925  00017C  0E03               	movlw	3
  4926  00017E  0101               	movlb	1	; () banked
  4927  000180  272E               	addwf	printf@ap& (0+255),f,b
  4928  000182  0E00               	movlw	0
  4929  000184  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 1
  4932                           ;doprnt.c: 831: if(fval < 0.0) {
  4933  000186  0101               	movlb	1	; () banked
  4934  000188  AF42               	btfss	(printf@fval+2)& (0+255),7,b
  4935  00018A  D011               	goto	l7394
  4936                           
  4937                           ; BSR set to: 1
  4938                           ;doprnt.c: 832: fval = -fval;
  4939  00018C  C140  F09E         	movff	printf@fval,___ftneg@f1
  4940  000190  C141  F09F         	movff	printf@fval+1,___ftneg@f1+1
  4941  000194  C142  F0A0         	movff	printf@fval+2,___ftneg@f1+2
  4942  000198  ECC8  F02B         	call	___ftneg	;wreg free
  4943  00019C  C09E  F140         	movff	?___ftneg,printf@fval
  4944  0001A0  C09F  F141         	movff	?___ftneg+1,printf@fval+1
  4945  0001A4  C0A0  F142         	movff	?___ftneg+2,printf@fval+2
  4946                           
  4947                           ;doprnt.c: 833: flag |= 0x03;
  4948  0001A8  0E03               	movlw	3
  4949  0001AA  0101               	movlb	1	; () banked
  4950  0001AC  133E               	iorwf	printf@flag& (0+255),f,b
  4951  0001AE                     l7394:
  4952                           
  4953                           ; BSR set to: 1
  4954                           ;doprnt.c: 834: }
  4955                           ;doprnt.c: 835: exp = 0;
  4956  0001AE  0E00               	movlw	0
  4957  0001B0  0101               	movlb	1	; () banked
  4958  0001B2  6F39               	movwf	(printf@exp+1)& (0+255),b
  4959  0001B4  0E00               	movlw	0
  4960  0001B6  6F38               	movwf	printf@exp& (0+255),b
  4961                           
  4962                           ; BSR set to: 1
  4963                           ;doprnt.c: 836: if( fval!=0) {
  4964  0001B8  0101               	movlb	1	; () banked
  4965  0001BA  5140               	movf	printf@fval& (0+255),w,b
  4966  0001BC  0101               	movlb	1	; () banked
  4967  0001BE  1141               	iorwf	(printf@fval+1)& (0+255),w,b
  4968  0001C0  0101               	movlb	1	; () banked
  4969  0001C2  1142               	iorwf	(printf@fval+2)& (0+255),w,b
  4970  0001C4  B4D8               	btfsc	status,2,c
  4971  0001C6  D09B               	goto	l7422
  4972                           
  4973                           ; BSR set to: 1
  4974                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4975  0001C8  0E82               	movlw	130
  4976  0001CA  0101               	movlb	1	; () banked
  4977  0001CC  6F24               	movwf	??_printf& (0+255),b
  4978  0001CE  0EFF               	movlw	255
  4979  0001D0  0101               	movlb	1	; () banked
  4980  0001D2  6F25               	movwf	(??_printf+1)& (0+255),b
  4981  0001D4  C140  F126         	movff	printf@fval,??_printf+2
  4982  0001D8  C141  F127         	movff	printf@fval+1,??_printf+3
  4983  0001DC  C142  F128         	movff	printf@fval+2,??_printf+4
  4984  0001E0  C143  F129         	movff	printf@fval+3,??_printf+5
  4985  0001E4  0E10               	movlw	16
  4986  0001E6  D006               	goto	u8320
  4987  0001E8                     u8325:
  4988  0001E8  0101               	movlb	1	; () banked
  4989  0001EA  90D8               	bcf	status,0,c
  4990  0001EC  3329               	rrcf	(??_printf+5)& (0+255),f,b
  4991  0001EE  3328               	rrcf	(??_printf+4)& (0+255),f,b
  4992  0001F0  3327               	rrcf	(??_printf+3)& (0+255),f,b
  4993  0001F2  3326               	rrcf	(??_printf+2)& (0+255),f,b
  4994  0001F4                     u8320:
  4995  0001F4  2EE8               	decfsz	wreg,f,c
  4996  0001F6  D7F8               	goto	u8325
  4997  0001F8  0101               	movlb	1	; () banked
  4998  0001FA  5126               	movf	(??_printf+2)& (0+255),w,b
  4999  0001FC  0101               	movlb	1	; () banked
  5000  0001FE  2524               	addwf	??_printf& (0+255),w,b
  5001  000200  0101               	movlb	1	; () banked
  5002  000202  6F38               	movwf	printf@exp& (0+255),b
  5003  000204  0E00               	movlw	0
  5004  000206  0101               	movlb	1	; () banked
  5005  000208  2125               	addwfc	(??_printf+1)& (0+255),w,b
  5006  00020A  0101               	movlb	1	; () banked
  5007  00020C  6F39               	movwf	(printf@exp+1)& (0+255),b
  5008                           
  5009                           ; BSR set to: 1
  5010                           ;doprnt.c: 838: exp--;
  5011  00020E  0101               	movlb	1	; () banked
  5012  000210  0738               	decf	printf@exp& (0+255),f,b
  5013  000212  A0D8               	btfss	status,0,c
  5014  000214  0739               	decf	(printf@exp+1)& (0+255),f,b
  5015                           
  5016                           ; BSR set to: 1
  5017                           ;doprnt.c: 839: exp *= 3;
  5018  000216  C138  F0AC         	movff	printf@exp,___wmul@multiplier
  5019  00021A  C139  F0AD         	movff	printf@exp+1,___wmul@multiplier+1
  5020  00021E  0E00               	movlw	0
  5021  000220  0100               	movlb	0	; () banked
  5022  000222  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5023  000224  0E03               	movlw	3
  5024  000226  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  5025  000228  ECAD  F02B         	call	___wmul	;wreg free
  5026  00022C  C0AC  F138         	movff	?___wmul,printf@exp
  5027  000230  C0AD  F139         	movff	?___wmul+1,printf@exp+1
  5028                           
  5029                           ;doprnt.c: 840: exp /= 10;
  5030  000234  C138  F0A4         	movff	printf@exp,___awdiv@dividend
  5031  000238  C139  F0A5         	movff	printf@exp+1,___awdiv@dividend+1
  5032  00023C  0E00               	movlw	0
  5033  00023E  0100               	movlb	0	; () banked
  5034  000240  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  5035  000242  0E0A               	movlw	10
  5036  000244  6FA6               	movwf	___awdiv@divisor& (0+255),b
  5037  000246  EC12  F026         	call	___awdiv	;wreg free
  5038  00024A  C0A4  F138         	movff	?___awdiv,printf@exp
  5039  00024E  C0A5  F139         	movff	?___awdiv+1,printf@exp+1
  5040                           
  5041                           ;doprnt.c: 841: if(exp < 0)
  5042  000252  0101               	movlb	1	; () banked
  5043  000254  AF39               	btfss	(printf@exp+1)& (0+255),7,b
  5044  000256  D004               	goto	l7410
  5045                           
  5046                           ; BSR set to: 1
  5047                           ;doprnt.c: 842: exp--;
  5048  000258  0101               	movlb	1	; () banked
  5049  00025A  0738               	decf	printf@exp& (0+255),f,b
  5050  00025C  A0D8               	btfss	status,0,c
  5051  00025E  0739               	decf	(printf@exp+1)& (0+255),f,b
  5052  000260                     l7410:
  5053                           
  5054                           ; BSR set to: 1
  5055                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5056  000260  0101               	movlb	1	; () banked
  5057  000262  5138               	movf	printf@exp& (0+255),w,b
  5058  000264  0800               	sublw	0
  5059  000266  ECED  F00A         	call	_scale
  5060  00026A  C100  F132         	movff	?_scale,printf@tmpval
  5061  00026E  C101  F133         	movff	?_scale+1,printf@tmpval+1
  5062  000272  C102  F134         	movff	?_scale+2,printf@tmpval+2
  5063                           
  5064                           ;doprnt.c: 847: tmpval.integ *= fval;
  5065  000276  C132  F0B2         	movff	printf@tmpval,___ftmul@f1
  5066  00027A  C133  F0B3         	movff	printf@tmpval+1,___ftmul@f1+1
  5067  00027E  C134  F0B4         	movff	printf@tmpval+2,___ftmul@f1+2
  5068  000282  C140  F0B5         	movff	printf@fval,___ftmul@f2
  5069  000286  C141  F0B6         	movff	printf@fval+1,___ftmul@f2+1
  5070  00028A  C142  F0B7         	movff	printf@fval+2,___ftmul@f2+2
  5071  00028E  ECFC  F01B         	call	___ftmul	;wreg free
  5072  000292  C0B2  F132         	movff	?___ftmul,printf@tmpval
  5073  000296  C0B3  F133         	movff	?___ftmul+1,printf@tmpval+1
  5074  00029A  C0B4  F134         	movff	?___ftmul+2,printf@tmpval+2
  5075                           
  5076                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5077  00029E  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5078  0002A2  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5079  0002A6  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5080  0002AA  0E00               	movlw	0
  5081  0002AC  0100               	movlb	0	; () banked
  5082  0002AE  6FB8               	movwf	___ftge@ff2& (0+255),b
  5083  0002B0  0E80               	movlw	128
  5084  0002B2  0100               	movlb	0	; () banked
  5085  0002B4  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5086  0002B6  0E3F               	movlw	63
  5087  0002B8  0100               	movlb	0	; () banked
  5088  0002BA  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5089  0002BC  EC4B  F025         	call	___ftge	;wreg free
  5090  0002C0  0100               	movlb	0	; () banked
  5091  0002C2  B0D8               	btfsc	status,0,c
  5092  0002C4  D005               	goto	l7418
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;doprnt.c: 849: exp--;
  5096  0002C6  0101               	movlb	1	; () banked
  5097  0002C8  0738               	decf	printf@exp& (0+255),f,b
  5098  0002CA  A0D8               	btfss	status,0,c
  5099  0002CC  0739               	decf	(printf@exp+1)& (0+255),f,b
  5100  0002CE  D017               	goto	l7422
  5101  0002D0                     l7418:
  5102                           
  5103                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5104  0002D0  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5105  0002D4  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5106  0002D8  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5107  0002DC  0E00               	movlw	0
  5108  0002DE  0100               	movlb	0	; () banked
  5109  0002E0  6FB8               	movwf	___ftge@ff2& (0+255),b
  5110  0002E2  0E20               	movlw	32
  5111  0002E4  0100               	movlb	0	; () banked
  5112  0002E6  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5113  0002E8  0E41               	movlw	65
  5114  0002EA  0100               	movlb	0	; () banked
  5115  0002EC  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5116  0002EE  EC4B  F025         	call	___ftge	;wreg free
  5117  0002F2  0100               	movlb	0	; () banked
  5118  0002F4  A0D8               	btfss	status,0,c
  5119  0002F6  D003               	goto	l7422
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 851: exp++;
  5123  0002F8  0101               	movlb	1	; () banked
  5124  0002FA  4B38               	infsnz	printf@exp& (0+255),f,b
  5125  0002FC  2B39               	incf	(printf@exp+1)& (0+255),f,b
  5126  0002FE                     l7422:
  5127                           
  5128                           ;doprnt.c: 852: }
  5129                           ;doprnt.c: 1112: if(prec <= 12)
  5130  0002FE  0101               	movlb	1	; () banked
  5131  000300  BF31               	btfsc	(printf@prec+1)& (0+255),7,b
  5132  000302  D008               	goto	l7424
  5133  000304  0101               	movlb	1	; () banked
  5134  000306  5131               	movf	(printf@prec+1)& (0+255),w,b
  5135  000308  E11D               	bnz	l7426
  5136  00030A  0E0D               	movlw	13
  5137  00030C  0101               	movlb	1	; () banked
  5138  00030E  5D30               	subwf	printf@prec& (0+255),w,b
  5139  000310  B0D8               	btfsc	status,0,c
  5140  000312  D018               	goto	l7426
  5141  000314                     l7424:
  5142                           
  5143                           ; BSR set to: 1
  5144                           ;doprnt.c: 1113: fval += fround(prec);
  5145  000314  C140  F10A         	movff	printf@fval,___ftadd@f1
  5146  000318  C141  F10B         	movff	printf@fval+1,___ftadd@f1+1
  5147  00031C  C142  F10C         	movff	printf@fval+2,___ftadd@f1+2
  5148  000320  0101               	movlb	1	; () banked
  5149  000322  5130               	movf	printf@prec& (0+255),w,b
  5150  000324  EC62  F013         	call	_fround
  5151  000328  C100  F10D         	movff	?_fround,___ftadd@f2
  5152  00032C  C101  F10E         	movff	?_fround+1,___ftadd@f2+1
  5153  000330  C102  F10F         	movff	?_fround+2,___ftadd@f2+2
  5154  000334  ECB8  F014         	call	___ftadd	;wreg free
  5155  000338  C10A  F140         	movff	?___ftadd,printf@fval
  5156  00033C  C10B  F141         	movff	?___ftadd+1,printf@fval+1
  5157  000340  C10C  F142         	movff	?___ftadd+2,printf@fval+2
  5158  000344                     l7426:
  5159                           
  5160                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5161  000344  0101               	movlb	1	; () banked
  5162  000346  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5163  000348  D008               	goto	l7428
  5164  00034A  0101               	movlb	1	; () banked
  5165  00034C  5139               	movf	(printf@exp+1)& (0+255),w,b
  5166  00034E  E12A               	bnz	l7434
  5167  000350  0E0A               	movlw	10
  5168  000352  0101               	movlb	1	; () banked
  5169  000354  5D38               	subwf	printf@exp& (0+255),w,b
  5170  000356  B0D8               	btfsc	status,0,c
  5171  000358  D025               	goto	l7434
  5172  00035A                     l7428:
  5173                           
  5174                           ; BSR set to: 1
  5175  00035A  0101               	movlb	1	; () banked
  5176  00035C  5140               	movf	printf@fval& (0+255),w,b
  5177  00035E  0101               	movlb	1	; () banked
  5178  000360  1141               	iorwf	(printf@fval+1)& (0+255),w,b
  5179  000362  0101               	movlb	1	; () banked
  5180  000364  1142               	iorwf	(printf@fval+2)& (0+255),w,b
  5181  000366  B4D8               	btfsc	status,2,c
  5182  000368  D063               	goto	l7448
  5183                           
  5184                           ; BSR set to: 1
  5185  00036A  C140  F107         	movff	printf@fval,___fttol@f1
  5186  00036E  C141  F108         	movff	printf@fval+1,___fttol@f1+1
  5187  000372  C142  F109         	movff	printf@fval+2,___fttol@f1+2
  5188  000376  EC51  F01D         	call	___fttol	;wreg free
  5189  00037A  0101               	movlb	1	; () banked
  5190  00037C  5107               	movf	?___fttol& (0+255),w,b
  5191  00037E  0101               	movlb	1	; () banked
  5192  000380  1108               	iorwf	(?___fttol+1)& (0+255),w,b
  5193  000382  0101               	movlb	1	; () banked
  5194  000384  1109               	iorwf	(?___fttol+2)& (0+255),w,b
  5195  000386  0101               	movlb	1	; () banked
  5196  000388  110A               	iorwf	(?___fttol+3)& (0+255),w,b
  5197  00038A  A4D8               	btfss	status,2,c
  5198  00038C  D051               	goto	l7448
  5199                           
  5200                           ; BSR set to: 1
  5201  00038E  0101               	movlb	1	; () banked
  5202  000390  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5203  000392  D04E               	goto	l7448
  5204  000394  0101               	movlb	1	; () banked
  5205  000396  5139               	movf	(printf@exp+1)& (0+255),w,b
  5206  000398  E105               	bnz	l7434
  5207  00039A  0E02               	movlw	2
  5208  00039C  0101               	movlb	1	; () banked
  5209  00039E  5D38               	subwf	printf@exp& (0+255),w,b
  5210  0003A0  A0D8               	btfss	status,0,c
  5211  0003A2  D046               	goto	l7448
  5212  0003A4                     l7434:
  5213                           
  5214                           ; BSR set to: 1
  5215                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5216  0003A4  C132  F0B5         	movff	printf@tmpval,___ftge@ff1
  5217  0003A8  C133  F0B6         	movff	printf@tmpval+1,___ftge@ff1+1
  5218  0003AC  C134  F0B7         	movff	printf@tmpval+2,___ftge@ff1+2
  5219  0003B0  0E70               	movlw	112
  5220  0003B2  0100               	movlb	0	; () banked
  5221  0003B4  6FB8               	movwf	___ftge@ff2& (0+255),b
  5222  0003B6  0E89               	movlw	137
  5223  0003B8  0100               	movlb	0	; () banked
  5224  0003BA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  5225  0003BC  0E40               	movlw	64
  5226  0003BE  0100               	movlb	0	; () banked
  5227  0003C0  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  5228  0003C2  EC4B  F025         	call	___ftge	;wreg free
  5229  0003C6  0100               	movlb	0	; () banked
  5230  0003C8  B0D8               	btfsc	status,0,c
  5231  0003CA  D003               	goto	l7438
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5235  0003CC  0101               	movlb	1	; () banked
  5236  0003CE  0EF7               	movlw	247
  5237  0003D0  D002               	goto	L11
  5238  0003D2                     l7438:
  5239                           
  5240                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5241  0003D2  0101               	movlb	1	; () banked
  5242  0003D4  0EF8               	movlw	248
  5243  0003D6                     L11:
  5244  0003D6  2738               	addwf	printf@exp& (0+255),f,b
  5245  0003D8  0EFF               	movlw	255
  5246  0003DA  2339               	addwfc	(printf@exp+1)& (0+255),f,b
  5247                           
  5248                           ; BSR set to: 1
  5249                           ;doprnt.c: 1124: }
  5250                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5251                           
  5252                           ; BSR set to: 1
  5253  0003DC  0101               	movlb	1	; () banked
  5254  0003DE  5138               	movf	printf@exp& (0+255),w,b
  5255  0003E0  ECED  F00A         	call	_scale
  5256  0003E4  C100  F132         	movff	?_scale,printf@tmpval
  5257  0003E8  C101  F133         	movff	?_scale+1,printf@tmpval+1
  5258  0003EC  C102  F134         	movff	?_scale+2,printf@tmpval+2
  5259                           
  5260                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5261  0003F0  C140  F09E         	movff	printf@fval,__tdiv_to_l_@f1
  5262  0003F4  C141  F09F         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5263  0003F8  C142  F0A0         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5264  0003FC  C132  F0A1         	movff	printf@tmpval,__tdiv_to_l_@f2
  5265  000400  C133  F0A2         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5266  000404  C134  F0A3         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5267  000408  ECAE  F019         	call	__tdiv_to_l_	;wreg free
  5268  00040C  C09E  F13A         	movff	?__tdiv_to_l_,printf@val
  5269  000410  C09F  F13B         	movff	?__tdiv_to_l_+1,printf@val+1
  5270  000414  C0A0  F13C         	movff	?__tdiv_to_l_+2,printf@val+2
  5271  000418  C0A1  F13D         	movff	?__tdiv_to_l_+3,printf@val+3
  5272                           
  5273                           ;doprnt.c: 1129: fval = 0.0;
  5274  00041C  0E00               	movlw	0
  5275  00041E  0101               	movlb	1	; () banked
  5276  000420  6F40               	movwf	printf@fval& (0+255),b
  5277  000422  0E00               	movlw	0
  5278  000424  0101               	movlb	1	; () banked
  5279  000426  6F41               	movwf	(printf@fval+1)& (0+255),b
  5280  000428  0E00               	movlw	0
  5281  00042A  0101               	movlb	1	; () banked
  5282  00042C  6F42               	movwf	(printf@fval+2)& (0+255),b
  5283                           
  5284                           ;doprnt.c: 1130: } else {
  5285  00042E  D033               	goto	l7452
  5286  000430                     l7448:
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5290  000430  C140  F107         	movff	printf@fval,___fttol@f1
  5291  000434  C141  F108         	movff	printf@fval+1,___fttol@f1+1
  5292  000438  C142  F109         	movff	printf@fval+2,___fttol@f1+2
  5293  00043C  EC51  F01D         	call	___fttol	;wreg free
  5294  000440  C107  F13A         	movff	?___fttol,printf@val
  5295  000444  C108  F13B         	movff	?___fttol+1,printf@val+1
  5296  000448  C109  F13C         	movff	?___fttol+2,printf@val+2
  5297  00044C  C10A  F13D         	movff	?___fttol+3,printf@val+3
  5298                           
  5299                           ;doprnt.c: 1132: fval -= (double)val;
  5300  000450  C140  F116         	movff	printf@fval,___ftsub@f1
  5301  000454  C141  F117         	movff	printf@fval+1,___ftsub@f1+1
  5302  000458  C142  F118         	movff	printf@fval+2,___ftsub@f1+2
  5303  00045C  C13A  F0A6         	movff	printf@val,___lltoft@c
  5304  000460  C13B  F0A7         	movff	printf@val+1,___lltoft@c+1
  5305  000464  C13C  F0A8         	movff	printf@val+2,___lltoft@c+2
  5306  000468  C13D  F0A9         	movff	printf@val+3,___lltoft@c+3
  5307  00046C  ECD7  F028         	call	___lltoft	;wreg free
  5308  000470  C0A6  F119         	movff	?___lltoft,___ftsub@f2
  5309  000474  C0A7  F11A         	movff	?___lltoft+1,___ftsub@f2+1
  5310  000478  C0A8  F11B         	movff	?___lltoft+2,___ftsub@f2+2
  5311  00047C  ECCD  F02A         	call	___ftsub	;wreg free
  5312  000480  C116  F140         	movff	?___ftsub,printf@fval
  5313  000484  C117  F141         	movff	?___ftsub+1,printf@fval+1
  5314  000488  C118  F142         	movff	?___ftsub+2,printf@fval+2
  5315                           
  5316                           ;doprnt.c: 1133: exp = 0;
  5317  00048C  0E00               	movlw	0
  5318  00048E  0101               	movlb	1	; () banked
  5319  000490  6F39               	movwf	(printf@exp+1)& (0+255),b
  5320  000492  0E00               	movlw	0
  5321  000494  6F38               	movwf	printf@exp& (0+255),b
  5322  000496                     l7452:
  5323                           
  5324                           ; BSR set to: 1
  5325                           ;doprnt.c: 1134: }
  5326                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5327  000496  0E01               	movlw	1
  5328  000498  0101               	movlb	1	; () banked
  5329  00049A  6F43               	movwf	printf@c& (0+255),b
  5330  00049C                     l7454:
  5331                           
  5332                           ; BSR set to: 1
  5333  00049C  0E0A               	movlw	10
  5334  00049E  0101               	movlb	1	; () banked
  5335  0004A0  1943               	xorwf	printf@c& (0+255),w,b
  5336  0004A2  B4D8               	btfsc	status,2,c
  5337  0004A4  D01E               	goto	l7466
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;doprnt.c: 1137: if(val < dpowers[c])
  5341                           
  5342                           ; BSR set to: 1
  5343                           
  5344                           ; BSR set to: 1
  5345  0004A6  0101               	movlb	1	; () banked
  5346  0004A8  5143               	movf	printf@c& (0+255),w,b
  5347  0004AA  0D04               	mullw	4
  5348  0004AC  0EB7               	movlw	low _dpowers
  5349  0004AE  24F3               	addwf	prodl,w,c
  5350  0004B0  6EF6               	movwf	tblptrl,c
  5351  0004B2  0EFD               	movlw	high _dpowers
  5352  0004B4  20F4               	addwfc	prodh,w,c
  5353  0004B6  6EF7               	movwf	tblptrh,c
  5354  0004B8                     	if	0	;There are less than 3 active tblptr bytes
  5355  0004B8                     	endif
  5356  0004B8  0009               	tblrd		*+
  5357  0004BA  50F5               	movf	tablat,w,c
  5358  0004BC  0101               	movlb	1	; () banked
  5359  0004BE  5D3A               	subwf	printf@val& (0+255),w,b
  5360  0004C0  0009               	tblrd		*+
  5361  0004C2  50F5               	movf	tablat,w,c
  5362  0004C4  0101               	movlb	1	; () banked
  5363  0004C6  593B               	subwfb	(printf@val+1)& (0+255),w,b
  5364  0004C8  0009               	tblrd		*+
  5365  0004CA  50F5               	movf	tablat,w,c
  5366  0004CC  0101               	movlb	1	; () banked
  5367  0004CE  593C               	subwfb	(printf@val+2)& (0+255),w,b
  5368  0004D0  0009               	tblrd		*+
  5369  0004D2  50F5               	movf	tablat,w,c
  5370  0004D4  0101               	movlb	1	; () banked
  5371  0004D6  593D               	subwfb	(printf@val+3)& (0+255),w,b
  5372  0004D8  A0D8               	btfss	status,0,c
  5373  0004DA  D003               	goto	l7466
  5374                           
  5375                           ; BSR set to: 1
  5376                           
  5377                           ; BSR set to: 1
  5378                           
  5379                           ; BSR set to: 1
  5380                           ;doprnt.c: 1138: break;
  5381  0004DC  0101               	movlb	1	; () banked
  5382  0004DE  2B43               	incf	printf@c& (0+255),f,b
  5383  0004E0  D7DD               	goto	l7454
  5384  0004E2                     l7466:
  5385                           
  5386                           ; BSR set to: 1
  5387                           ;doprnt.c: 1142: width -= prec + c + exp;
  5388  0004E2  C143  F124         	movff	printf@c,??_printf
  5389  0004E6  0101               	movlb	1	; () banked
  5390  0004E8  6B25               	clrf	(??_printf+1)& (0+255),b
  5391  0004EA  BF24               	btfsc	??_printf& (0+255),7,b
  5392  0004EC  0725               	decf	(??_printf+1)& (0+255),f,b
  5393  0004EE  0101               	movlb	1	; () banked
  5394  0004F0  5130               	movf	printf@prec& (0+255),w,b
  5395  0004F2  0101               	movlb	1	; () banked
  5396  0004F4  2724               	addwf	??_printf& (0+255),f,b
  5397  0004F6  0101               	movlb	1	; () banked
  5398  0004F8  5131               	movf	(printf@prec+1)& (0+255),w,b
  5399  0004FA  0101               	movlb	1	; () banked
  5400  0004FC  2325               	addwfc	(??_printf+1)& (0+255),f,b
  5401  0004FE  0101               	movlb	1	; () banked
  5402  000500  5138               	movf	printf@exp& (0+255),w,b
  5403  000502  0101               	movlb	1	; () banked
  5404  000504  2724               	addwf	??_printf& (0+255),f,b
  5405  000506  0101               	movlb	1	; () banked
  5406  000508  5139               	movf	(printf@exp+1)& (0+255),w,b
  5407  00050A  0101               	movlb	1	; () banked
  5408  00050C  2325               	addwfc	(??_printf+1)& (0+255),f,b
  5409  00050E  0101               	movlb	1	; () banked
  5410  000510  5124               	movf	??_printf& (0+255),w,b
  5411  000512  0101               	movlb	1	; () banked
  5412  000514  5F36               	subwf	printf@width& (0+255),f,b
  5413  000516  0101               	movlb	1	; () banked
  5414  000518  5125               	movf	(??_printf+1)& (0+255),w,b
  5415  00051A  0101               	movlb	1	; () banked
  5416  00051C  5B37               	subwfb	(printf@width+1)& (0+255),f,b
  5417                           
  5418                           ;doprnt.c: 1143: if(
  5419                           ;doprnt.c: 1147: prec)
  5420  00051E  0101               	movlb	1	; () banked
  5421  000520  5130               	movf	printf@prec& (0+255),w,b
  5422  000522  0101               	movlb	1	; () banked
  5423  000524  1131               	iorwf	(printf@prec+1)& (0+255),w,b
  5424  000526  B4D8               	btfsc	status,2,c
  5425  000528  D004               	goto	l7470
  5426                           
  5427                           ; BSR set to: 1
  5428                           ;doprnt.c: 1148: width--;
  5429  00052A  0101               	movlb	1	; () banked
  5430  00052C  0736               	decf	printf@width& (0+255),f,b
  5431  00052E  A0D8               	btfss	status,0,c
  5432  000530  0737               	decf	(printf@width+1)& (0+255),f,b
  5433  000532                     l7470:
  5434                           
  5435                           ; BSR set to: 1
  5436                           ;doprnt.c: 1149: if(flag & 0x03)
  5437  000532  0E03               	movlw	3
  5438  000534  0101               	movlb	1	; () banked
  5439  000536  153E               	andwf	printf@flag& (0+255),w,b
  5440  000538  0101               	movlb	1	; () banked
  5441  00053A  6F24               	movwf	??_printf& (0+255),b
  5442  00053C  0E00               	movlw	0
  5443  00053E  0101               	movlb	1	; () banked
  5444  000540  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5445  000542  0101               	movlb	1	; () banked
  5446  000544  6F25               	movwf	(??_printf+1)& (0+255),b
  5447  000546  0101               	movlb	1	; () banked
  5448  000548  5124               	movf	??_printf& (0+255),w,b
  5449  00054A  0101               	movlb	1	; () banked
  5450  00054C  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5451  00054E  B4D8               	btfsc	status,2,c
  5452  000550  D004               	goto	l7474
  5453                           
  5454                           ; BSR set to: 1
  5455                           ;doprnt.c: 1150: width--;
  5456  000552  0101               	movlb	1	; () banked
  5457  000554  0736               	decf	printf@width& (0+255),f,b
  5458  000556  A0D8               	btfss	status,0,c
  5459  000558  0737               	decf	(printf@width+1)& (0+255),f,b
  5460  00055A                     l7474:
  5461                           
  5462                           ; BSR set to: 1
  5463                           ;doprnt.c: 1153: if(flag & 0x04) {
  5464  00055A  0101               	movlb	1	; () banked
  5465  00055C  A53E               	btfss	printf@flag& (0+255),2,b
  5466  00055E  D02D               	goto	l7490
  5467                           
  5468                           ; BSR set to: 1
  5469                           ;doprnt.c: 1157: if(flag & 0x03)
  5470  000560  0E03               	movlw	3
  5471  000562  0101               	movlb	1	; () banked
  5472  000564  153E               	andwf	printf@flag& (0+255),w,b
  5473  000566  0101               	movlb	1	; () banked
  5474  000568  6F24               	movwf	??_printf& (0+255),b
  5475  00056A  0E00               	movlw	0
  5476  00056C  0101               	movlb	1	; () banked
  5477  00056E  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5478  000570  0101               	movlb	1	; () banked
  5479  000572  6F25               	movwf	(??_printf+1)& (0+255),b
  5480  000574  0101               	movlb	1	; () banked
  5481  000576  5124               	movf	??_printf& (0+255),w,b
  5482  000578  0101               	movlb	1	; () banked
  5483  00057A  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5484  00057C  B4D8               	btfsc	status,2,c
  5485  00057E  D00B               	goto	l7484
  5486                           
  5487                           ; BSR set to: 1
  5488                           ;doprnt.c: 1159: (putch('-') );
  5489  000580  0E2D               	movlw	45
  5490  000582  EC83  F02C         	call	_putch
  5491                           
  5492                           ;doprnt.c: 1168: while(width > 0) {
  5493  000586  D007               	goto	l7484
  5494  000588                     l7480:
  5495                           
  5496                           ;doprnt.c: 1169: (putch('0') );
  5497  000588  0E30               	movlw	48
  5498  00058A  EC83  F02C         	call	_putch
  5499                           
  5500                           ;doprnt.c: 1170: width--;
  5501  00058E  0101               	movlb	1	; () banked
  5502  000590  0736               	decf	printf@width& (0+255),f,b
  5503  000592  A0D8               	btfss	status,0,c
  5504  000594  0737               	decf	(printf@width+1)& (0+255),f,b
  5505  000596                     l7484:
  5506  000596  0101               	movlb	1	; () banked
  5507  000598  BF37               	btfsc	(printf@width+1)& (0+255),7,b
  5508  00059A  D074               	goto	l7502
  5509  00059C  0101               	movlb	1	; () banked
  5510  00059E  5137               	movf	(printf@width+1)& (0+255),w,b
  5511  0005A0  E1F3               	bnz	l7480
  5512  0005A2  0101               	movlb	1	; () banked
  5513  0005A4  0536               	decf	printf@width& (0+255),w,b
  5514  0005A6  A0D8               	btfss	status,0,c
  5515  0005A8  D06D               	goto	l7502
  5516  0005AA  D7EE               	goto	l7480
  5517  0005AC                     l7486:
  5518                           
  5519                           ; BSR set to: 1
  5520                           ;doprnt.c: 1181: (putch(' ') );
  5521  0005AC  0E20               	movlw	32
  5522  0005AE  EC83  F02C         	call	_putch
  5523                           
  5524                           ;doprnt.c: 1182: width--;
  5525  0005B2  0101               	movlb	1	; () banked
  5526  0005B4  0736               	decf	printf@width& (0+255),f,b
  5527  0005B6  A0D8               	btfss	status,0,c
  5528  0005B8  0737               	decf	(printf@width+1)& (0+255),f,b
  5529  0005BA                     l7490:
  5530                           
  5531                           ; BSR set to: 1
  5532  0005BA  0101               	movlb	1	; () banked
  5533  0005BC  BF37               	btfsc	(printf@width+1)& (0+255),7,b
  5534  0005BE  D007               	goto	l7492
  5535  0005C0  0101               	movlb	1	; () banked
  5536  0005C2  5137               	movf	(printf@width+1)& (0+255),w,b
  5537  0005C4  E1F3               	bnz	l7486
  5538  0005C6  0101               	movlb	1	; () banked
  5539  0005C8  0536               	decf	printf@width& (0+255),w,b
  5540  0005CA  B0D8               	btfsc	status,0,c
  5541  0005CC  D7EF               	goto	l7486
  5542  0005CE                     l7492:
  5543                           
  5544                           ; BSR set to: 1
  5545                           ;doprnt.c: 1183: }
  5546                           ;doprnt.c: 1188: if(flag & 0x03)
  5547  0005CE  0E03               	movlw	3
  5548  0005D0  0101               	movlb	1	; () banked
  5549  0005D2  153E               	andwf	printf@flag& (0+255),w,b
  5550  0005D4  0101               	movlb	1	; () banked
  5551  0005D6  6F24               	movwf	??_printf& (0+255),b
  5552  0005D8  0E00               	movlw	0
  5553  0005DA  0101               	movlb	1	; () banked
  5554  0005DC  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5555  0005DE  0101               	movlb	1	; () banked
  5556  0005E0  6F25               	movwf	(??_printf+1)& (0+255),b
  5557  0005E2  0101               	movlb	1	; () banked
  5558  0005E4  5124               	movf	??_printf& (0+255),w,b
  5559  0005E6  0101               	movlb	1	; () banked
  5560  0005E8  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5561  0005EA  B4D8               	btfsc	status,2,c
  5562  0005EC  D04B               	goto	l7502
  5563                           
  5564                           ; BSR set to: 1
  5565                           ;doprnt.c: 1190: (putch('-') );
  5566  0005EE  0E2D               	movlw	45
  5567  0005F0  EC83  F02C         	call	_putch
  5568                           
  5569                           ;doprnt.c: 1195: }
  5570                           ;doprnt.c: 1196: while(c--) {
  5571  0005F4  D047               	goto	l7502
  5572  0005F6                     l7496:
  5573                           
  5574                           ;doprnt.c: 1200: {
  5575                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5576  0005F6  C13A  F09E         	movff	printf@val,___lldiv@dividend
  5577  0005FA  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  5578  0005FE  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  5579  000602  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  5580  000606  0101               	movlb	1	; () banked
  5581  000608  5143               	movf	printf@c& (0+255),w,b
  5582  00060A  0D04               	mullw	4
  5583  00060C  0EB7               	movlw	low _dpowers
  5584  00060E  24F3               	addwf	prodl,w,c
  5585  000610  6EF6               	movwf	tblptrl,c
  5586  000612  0EFD               	movlw	high _dpowers
  5587  000614  20F4               	addwfc	prodh,w,c
  5588  000616  6EF7               	movwf	tblptrh,c
  5589  000618                     	if	0	;There are less than 3 active tblptr bytes
  5590  000618                     	endif
  5591  000618  0009               	tblrd		*+
  5592  00061A  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  5593  00061E  0009               	tblrd		*+
  5594  000620  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  5595  000624  0009               	tblrd		*+
  5596  000626  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  5597  00062A  000A               	tblrd		*-
  5598  00062C  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  5599  000630  EC71  F026         	call	___lldiv	;wreg free
  5600  000634  C09E  F132         	movff	?___lldiv,printf@tmpval
  5601  000638  C09F  F133         	movff	?___lldiv+1,printf@tmpval+1
  5602  00063C  C0A0  F134         	movff	?___lldiv+2,printf@tmpval+2
  5603  000640  C0A1  F135         	movff	?___lldiv+3,printf@tmpval+3
  5604                           
  5605                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5606  000644  C132  F0AB         	movff	printf@tmpval,___llmod@dividend
  5607  000648  C133  F0AC         	movff	printf@tmpval+1,___llmod@dividend+1
  5608  00064C  C134  F0AD         	movff	printf@tmpval+2,___llmod@dividend+2
  5609  000650  C135  F0AE         	movff	printf@tmpval+3,___llmod@dividend+3
  5610  000654  0E0A               	movlw	10
  5611  000656  0100               	movlb	0	; () banked
  5612  000658  6FAF               	movwf	___llmod@divisor& (0+255),b
  5613  00065A  0E00               	movlw	0
  5614  00065C  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  5615  00065E  0E00               	movlw	0
  5616  000660  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  5617  000662  0E00               	movlw	0
  5618  000664  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  5619  000666  EC77  F027         	call	___llmod	;wreg free
  5620  00066A  C0AB  F132         	movff	?___llmod,printf@tmpval
  5621  00066E  C0AC  F133         	movff	?___llmod+1,printf@tmpval+1
  5622  000672  C0AD  F134         	movff	?___llmod+2,printf@tmpval+2
  5623  000676  C0AE  F135         	movff	?___llmod+3,printf@tmpval+3
  5624                           
  5625                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5626  00067A  0101               	movlb	1	; () banked
  5627  00067C  5132               	movf	printf@tmpval& (0+255),w,b
  5628  00067E  0F30               	addlw	48
  5629  000680  EC83  F02C         	call	_putch
  5630  000684                     l7502:
  5631  000684  0101               	movlb	1	; () banked
  5632  000686  0743               	decf	printf@c& (0+255),f,b
  5633  000688  0101               	movlb	1	; () banked
  5634  00068A  2943               	incf	printf@c& (0+255),w,b
  5635  00068C  B4D8               	btfsc	status,2,c
  5636  00068E  D008               	goto	l7508
  5637  000690  D7B2               	goto	l7496
  5638  000692                     l7504:
  5639                           
  5640                           ; BSR set to: 1
  5641                           ;doprnt.c: 1208: (putch('0') );
  5642  000692  0E30               	movlw	48
  5643  000694  EC83  F02C         	call	_putch
  5644                           
  5645                           ;doprnt.c: 1209: exp--;
  5646  000698  0101               	movlb	1	; () banked
  5647  00069A  0738               	decf	printf@exp& (0+255),f,b
  5648  00069C  A0D8               	btfss	status,0,c
  5649  00069E  0739               	decf	(printf@exp+1)& (0+255),f,b
  5650  0006A0                     l7508:
  5651                           
  5652                           ; BSR set to: 1
  5653  0006A0  0101               	movlb	1	; () banked
  5654  0006A2  BF39               	btfsc	(printf@exp+1)& (0+255),7,b
  5655  0006A4  D007               	goto	l7510
  5656  0006A6  0101               	movlb	1	; () banked
  5657  0006A8  5139               	movf	(printf@exp+1)& (0+255),w,b
  5658  0006AA  E1F3               	bnz	l7504
  5659  0006AC  0101               	movlb	1	; () banked
  5660  0006AE  0538               	decf	printf@exp& (0+255),w,b
  5661  0006B0  B0D8               	btfsc	status,0,c
  5662  0006B2  D7EF               	goto	l7504
  5663  0006B4                     l7510:
  5664                           
  5665                           ; BSR set to: 1
  5666                           ;doprnt.c: 1210: }
  5667                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5668  0006B4  0101               	movlb	1	; () banked
  5669  0006B6  BF31               	btfsc	(printf@prec+1)& (0+255),7,b
  5670  0006B8  D00C               	goto	l557
  5671  0006BA  0101               	movlb	1	; () banked
  5672  0006BC  5131               	movf	(printf@prec+1)& (0+255),w,b
  5673  0006BE  E105               	bnz	u8540
  5674  0006C0  0E09               	movlw	9
  5675  0006C2  0101               	movlb	1	; () banked
  5676  0006C4  5D30               	subwf	printf@prec& (0+255),w,b
  5677  0006C6  A0D8               	btfss	status,0,c
  5678  0006C8  D004               	goto	l557
  5679  0006CA                     u8540:
  5680                           
  5681                           ; BSR set to: 1
  5682                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5683  0006CA  0E08               	movlw	8
  5684  0006CC  0101               	movlb	1	; () banked
  5685  0006CE  6F43               	movwf	printf@c& (0+255),b
  5686  0006D0  D002               	goto	l7514
  5687  0006D2                     l557:
  5688                           
  5689                           ; BSR set to: 1
  5690                           ;doprnt.c: 1213: else
  5691                           ;doprnt.c: 1214: c = prec;
  5692  0006D2  C130  F143         	movff	printf@prec,printf@c
  5693  0006D6                     l7514:
  5694                           
  5695                           ; BSR set to: 1
  5696                           ;doprnt.c: 1215: prec -= c;
  5697  0006D6  0101               	movlb	1	; () banked
  5698  0006D8  5143               	movf	printf@c& (0+255),w,b
  5699  0006DA  0101               	movlb	1	; () banked
  5700  0006DC  5F30               	subwf	printf@prec& (0+255),f,b
  5701  0006DE  0E00               	movlw	0
  5702  0006E0  0101               	movlb	1	; () banked
  5703  0006E2  BF43               	btfsc	printf@c& (0+255),7,b
  5704  0006E4  0EFF               	movlw	255
  5705  0006E6  0101               	movlb	1	; () banked
  5706  0006E8  5B31               	subwfb	(printf@prec+1)& (0+255),f,b
  5707                           
  5708                           ; BSR set to: 1
  5709                           ;doprnt.c: 1219: if(c)
  5710  0006EA  0101               	movlb	1	; () banked
  5711  0006EC  5143               	movf	printf@c& (0+255),w,b
  5712  0006EE  0101               	movlb	1	; () banked
  5713  0006F0  B4D8               	btfsc	status,2,c
  5714  0006F2  D003               	goto	l7520
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;doprnt.c: 1221: (putch('.') );
  5718  0006F4  0E2E               	movlw	46
  5719  0006F6  EC83  F02C         	call	_putch
  5720  0006FA                     l7520:
  5721                           
  5722                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5723  0006FA  0101               	movlb	1	; () banked
  5724  0006FC  5143               	movf	printf@c& (0+255),w,b
  5725  0006FE  ECED  F00A         	call	_scale
  5726  000702  C100  F12A         	movff	?_scale,_printf$1309
  5727  000706  C101  F12B         	movff	?_scale+1,_printf$1309+1
  5728  00070A  C102  F12C         	movff	?_scale+2,_printf$1309+2
  5729                           
  5730                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5731  00070E  C140  F0B5         	movff	printf@fval,___ftmul@f2
  5732  000712  C141  F0B6         	movff	printf@fval+1,___ftmul@f2+1
  5733  000716  C142  F0B7         	movff	printf@fval+2,___ftmul@f2+2
  5734  00071A  C12A  F0B2         	movff	_printf$1309,___ftmul@f1
  5735  00071E  C12B  F0B3         	movff	_printf$1309+1,___ftmul@f1+1
  5736  000722  C12C  F0B4         	movff	_printf$1309+2,___ftmul@f1+2
  5737  000726  ECFC  F01B         	call	___ftmul	;wreg free
  5738  00072A  C0B2  F107         	movff	?___ftmul,___fttol@f1
  5739  00072E  C0B3  F108         	movff	?___ftmul+1,___fttol@f1+1
  5740  000732  C0B4  F109         	movff	?___ftmul+2,___fttol@f1+2
  5741  000736  EC51  F01D         	call	___fttol	;wreg free
  5742  00073A  C107  F13A         	movff	?___fttol,printf@val
  5743  00073E  C108  F13B         	movff	?___fttol+1,printf@val+1
  5744  000742  C109  F13C         	movff	?___fttol+2,printf@val+2
  5745  000746  C10A  F13D         	movff	?___fttol+3,printf@val+3
  5746                           
  5747                           ;doprnt.c: 1228: while(c--) {
  5748  00074A  D06E               	goto	l7530
  5749  00074C                     l7524:
  5750                           
  5751                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5752  00074C  C13A  F09E         	movff	printf@val,___lldiv@dividend
  5753  000750  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  5754  000754  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  5755  000758  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  5756  00075C  0101               	movlb	1	; () banked
  5757  00075E  5143               	movf	printf@c& (0+255),w,b
  5758  000760  0D04               	mullw	4
  5759  000762  0EB7               	movlw	low _dpowers
  5760  000764  24F3               	addwf	prodl,w,c
  5761  000766  6EF6               	movwf	tblptrl,c
  5762  000768  0EFD               	movlw	high _dpowers
  5763  00076A  20F4               	addwfc	prodh,w,c
  5764  00076C  6EF7               	movwf	tblptrh,c
  5765  00076E                     	if	0	;There are less than 3 active tblptr bytes
  5766  00076E                     	endif
  5767  00076E  0009               	tblrd		*+
  5768  000770  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  5769  000774  0009               	tblrd		*+
  5770  000776  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  5771  00077A  0009               	tblrd		*+
  5772  00077C  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  5773  000780  000A               	tblrd		*-
  5774  000782  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  5775  000786  EC71  F026         	call	___lldiv	;wreg free
  5776  00078A  C09E  F132         	movff	?___lldiv,printf@tmpval
  5777  00078E  C09F  F133         	movff	?___lldiv+1,printf@tmpval+1
  5778  000792  C0A0  F134         	movff	?___lldiv+2,printf@tmpval+2
  5779  000796  C0A1  F135         	movff	?___lldiv+3,printf@tmpval+3
  5780                           
  5781                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5782  00079A  C132  F0AB         	movff	printf@tmpval,___llmod@dividend
  5783  00079E  C133  F0AC         	movff	printf@tmpval+1,___llmod@dividend+1
  5784  0007A2  C134  F0AD         	movff	printf@tmpval+2,___llmod@dividend+2
  5785  0007A6  C135  F0AE         	movff	printf@tmpval+3,___llmod@dividend+3
  5786  0007AA  0E0A               	movlw	10
  5787  0007AC  0100               	movlb	0	; () banked
  5788  0007AE  6FAF               	movwf	___llmod@divisor& (0+255),b
  5789  0007B0  0E00               	movlw	0
  5790  0007B2  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  5791  0007B4  0E00               	movlw	0
  5792  0007B6  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  5793  0007B8  0E00               	movlw	0
  5794  0007BA  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  5795  0007BC  EC77  F027         	call	___llmod	;wreg free
  5796  0007C0  C0AB  F132         	movff	?___llmod,printf@tmpval
  5797  0007C4  C0AC  F133         	movff	?___llmod+1,printf@tmpval+1
  5798  0007C8  C0AD  F134         	movff	?___llmod+2,printf@tmpval+2
  5799  0007CC  C0AE  F135         	movff	?___llmod+3,printf@tmpval+3
  5800                           
  5801                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5802  0007D0  0101               	movlb	1	; () banked
  5803  0007D2  5132               	movf	printf@tmpval& (0+255),w,b
  5804  0007D4  0F30               	addlw	48
  5805  0007D6  EC83  F02C         	call	_putch
  5806                           
  5807                           ;doprnt.c: 1232: val %= dpowers[c];
  5808  0007DA  C13A  F0AB         	movff	printf@val,___llmod@dividend
  5809  0007DE  C13B  F0AC         	movff	printf@val+1,___llmod@dividend+1
  5810  0007E2  C13C  F0AD         	movff	printf@val+2,___llmod@dividend+2
  5811  0007E6  C13D  F0AE         	movff	printf@val+3,___llmod@dividend+3
  5812  0007EA  0101               	movlb	1	; () banked
  5813  0007EC  5143               	movf	printf@c& (0+255),w,b
  5814  0007EE  0D04               	mullw	4
  5815  0007F0  0EB7               	movlw	low _dpowers
  5816  0007F2  24F3               	addwf	prodl,w,c
  5817  0007F4  6EF6               	movwf	tblptrl,c
  5818  0007F6  0EFD               	movlw	high _dpowers
  5819  0007F8  20F4               	addwfc	prodh,w,c
  5820  0007FA  6EF7               	movwf	tblptrh,c
  5821  0007FC                     	if	0	;There are less than 3 active tblptr bytes
  5822  0007FC                     	endif
  5823  0007FC  0009               	tblrd		*+
  5824  0007FE  CFF5 F0AF          	movff	tablat,___llmod@divisor
  5825  000802  0009               	tblrd		*+
  5826  000804  CFF5 F0B0          	movff	tablat,___llmod@divisor+1
  5827  000808  0009               	tblrd		*+
  5828  00080A  CFF5 F0B1          	movff	tablat,___llmod@divisor+2
  5829  00080E  000A               	tblrd		*-
  5830  000810  CFF5 F0B2          	movff	tablat,___llmod@divisor+3
  5831  000814  EC77  F027         	call	___llmod	;wreg free
  5832  000818  C0AB  F13A         	movff	?___llmod,printf@val
  5833  00081C  C0AC  F13B         	movff	?___llmod+1,printf@val+1
  5834  000820  C0AD  F13C         	movff	?___llmod+2,printf@val+2
  5835  000824  C0AE  F13D         	movff	?___llmod+3,printf@val+3
  5836  000828                     l7530:
  5837  000828  0101               	movlb	1	; () banked
  5838  00082A  0743               	decf	printf@c& (0+255),f,b
  5839  00082C  0101               	movlb	1	; () banked
  5840  00082E  2943               	incf	printf@c& (0+255),w,b
  5841  000830  B4D8               	btfsc	status,2,c
  5842  000832  D008               	goto	l7536
  5843  000834  D78B               	goto	l7524
  5844  000836                     l7532:
  5845                           
  5846                           ; BSR set to: 1
  5847                           ;doprnt.c: 1236: (putch('0') );
  5848  000836  0E30               	movlw	48
  5849  000838  EC83  F02C         	call	_putch
  5850                           
  5851                           ;doprnt.c: 1237: prec--;
  5852  00083C  0101               	movlb	1	; () banked
  5853  00083E  0730               	decf	printf@prec& (0+255),f,b
  5854  000840  A0D8               	btfss	status,0,c
  5855  000842  0731               	decf	(printf@prec+1)& (0+255),f,b
  5856  000844                     l7536:
  5857                           
  5858                           ; BSR set to: 1
  5859  000844  0101               	movlb	1	; () banked
  5860  000846  5130               	movf	printf@prec& (0+255),w,b
  5861  000848  0101               	movlb	1	; () banked
  5862  00084A  1131               	iorwf	(printf@prec+1)& (0+255),w,b
  5863  00084C  B4D8               	btfsc	status,2,c
  5864  00084E  D1C6               	goto	l7636
  5865  000850  D7F2               	goto	l7532
  5866  000852                     l7538:
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;doprnt.c: 1246: }
  5870                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5871  000852  0EC0               	movlw	192
  5872  000854  0101               	movlb	1	; () banked
  5873  000856  153E               	andwf	printf@flag& (0+255),w,b
  5874  000858  0101               	movlb	1	; () banked
  5875  00085A  6F24               	movwf	??_printf& (0+255),b
  5876  00085C  0E00               	movlw	0
  5877  00085E  0101               	movlb	1	; () banked
  5878  000860  153F               	andwf	(printf@flag+1)& (0+255),w,b
  5879  000862  0101               	movlb	1	; () banked
  5880  000864  6F25               	movwf	(??_printf+1)& (0+255),b
  5881  000866  0101               	movlb	1	; () banked
  5882  000868  5124               	movf	??_printf& (0+255),w,b
  5883  00086A  0101               	movlb	1	; () banked
  5884  00086C  1125               	iorwf	(??_printf+1)& (0+255),w,b
  5885  00086E  A4D8               	btfss	status,2,c
  5886  000870  D023               	goto	l7550
  5887                           
  5888                           ; BSR set to: 1
  5889                           ;doprnt.c: 1253: {
  5890                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5891  000872  C12E  FFD9         	movff	printf@ap,fsr2l
  5892  000876  C12F  FFDA         	movff	printf@ap+1,fsr2h
  5893  00087A  CFDE F13A          	movff	postinc2,printf@val
  5894  00087E  CFDD F13B          	movff	postdec2,printf@val+1
  5895  000882  0101               	movlb	1	; () banked
  5896  000884  0E00               	movlw	0
  5897  000886  BF3B               	btfsc	(printf@val+1)& (0+255),7,b
  5898  000888  0EFF               	movlw	-1
  5899  00088A  6F3C               	movwf	(printf@val+2)& (0+255),b
  5900  00088C  6F3D               	movwf	(printf@val+3)& (0+255),b
  5901                           
  5902                           ; BSR set to: 1
  5903  00088E  0E02               	movlw	2
  5904  000890  0101               	movlb	1	; () banked
  5905  000892  272E               	addwf	printf@ap& (0+255),f,b
  5906  000894  0E00               	movlw	0
  5907  000896  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  5908                           
  5909                           ; BSR set to: 1
  5910                           ;doprnt.c: 1261: if((long)val < 0) {
  5911  000898  0101               	movlb	1	; () banked
  5912  00089A  AF3D               	btfss	(printf@val+3)& (0+255),7,b
  5913  00089C  D06E               	goto	l7584
  5914                           
  5915                           ; BSR set to: 1
  5916                           ;doprnt.c: 1262: flag |= 0x03;
  5917  00089E  0E03               	movlw	3
  5918  0008A0  0101               	movlb	1	; () banked
  5919  0008A2  133E               	iorwf	printf@flag& (0+255),f,b
  5920                           
  5921                           ; BSR set to: 1
  5922                           ;doprnt.c: 1263: val = -val;
  5923  0008A4  0101               	movlb	1	; () banked
  5924  0008A6  1F3D               	comf	(printf@val+3)& (0+255),f,b
  5925  0008A8  1F3C               	comf	(printf@val+2)& (0+255),f,b
  5926  0008AA  1F3B               	comf	(printf@val+1)& (0+255),f,b
  5927  0008AC  6D3A               	negf	printf@val& (0+255),b
  5928  0008AE  0E00               	movlw	0
  5929  0008B0  233B               	addwfc	(printf@val+1)& (0+255),f,b
  5930  0008B2  233C               	addwfc	(printf@val+2)& (0+255),f,b
  5931  0008B4  233D               	addwfc	(printf@val+3)& (0+255),f,b
  5932                           
  5933                           ; BSR set to: 1
  5934                           ;doprnt.c: 1264: }
  5935                           ;doprnt.c: 1266: }
  5936  0008B6  D061               	goto	l7584
  5937  0008B8                     l7550:
  5938                           
  5939                           ; BSR set to: 1
  5940                           ;doprnt.c: 1268: else
  5941                           ;doprnt.c: 1273: {
  5942                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5943  0008B8  C12E  FFD9         	movff	printf@ap,fsr2l
  5944  0008BC  C12F  FFDA         	movff	printf@ap+1,fsr2h
  5945  0008C0  CFDE F124          	movff	postinc2,??_printf
  5946  0008C4  CFDD F125          	movff	postdec2,??_printf+1
  5947  0008C8  C124  F13A         	movff	??_printf,printf@val
  5948  0008CC  C125  F13B         	movff	??_printf+1,printf@val+1
  5949  0008D0  0101               	movlb	1	; () banked
  5950  0008D2  6B3C               	clrf	(printf@val+2)& (0+255),b
  5951  0008D4  6B3D               	clrf	(printf@val+3)& (0+255),b
  5952                           
  5953                           ; BSR set to: 1
  5954  0008D6  0E02               	movlw	2
  5955  0008D8  0101               	movlb	1	; () banked
  5956  0008DA  272E               	addwf	printf@ap& (0+255),f,b
  5957  0008DC  0E00               	movlw	0
  5958  0008DE  232F               	addwfc	(printf@ap+1)& (0+255),f,b
  5959                           
  5960                           ; BSR set to: 1
  5961                           ;doprnt.c: 1287: }
  5962                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  5963  0008E0  D04C               	goto	l7584
  5964  0008E2                     l7554:
  5965                           
  5966                           ; BSR set to: 1
  5967                           ;doprnt.c: 1302: case 0xC0:
  5968                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5969  0008E2  0E01               	movlw	1
  5970  0008E4  0101               	movlb	1	; () banked
  5971  0008E6  6F43               	movwf	printf@c& (0+255),b
  5972  0008E8                     l7556:
  5973                           
  5974                           ; BSR set to: 1
  5975  0008E8  0E0A               	movlw	10
  5976  0008EA  0101               	movlb	1	; () banked
  5977  0008EC  1943               	xorwf	printf@c& (0+255),w,b
  5978  0008EE  B4D8               	btfsc	status,2,c
  5979  0008F0  D050               	goto	l7586
  5980                           
  5981                           ; BSR set to: 1
  5982                           ;doprnt.c: 1306: if(val < dpowers[c])
  5983                           
  5984                           ; BSR set to: 1
  5985                           
  5986                           ; BSR set to: 1
  5987  0008F2  0101               	movlb	1	; () banked
  5988  0008F4  5143               	movf	printf@c& (0+255),w,b
  5989  0008F6  0D04               	mullw	4
  5990  0008F8  0EB7               	movlw	low _dpowers
  5991  0008FA  24F3               	addwf	prodl,w,c
  5992  0008FC  6EF6               	movwf	tblptrl,c
  5993  0008FE  0EFD               	movlw	high _dpowers
  5994  000900  20F4               	addwfc	prodh,w,c
  5995  000902  6EF7               	movwf	tblptrh,c
  5996  000904                     	if	0	;There are less than 3 active tblptr bytes
  5997  000904                     	endif
  5998  000904  0009               	tblrd		*+
  5999  000906  50F5               	movf	tablat,w,c
  6000  000908  0101               	movlb	1	; () banked
  6001  00090A  5D3A               	subwf	printf@val& (0+255),w,b
  6002  00090C  0009               	tblrd		*+
  6003  00090E  50F5               	movf	tablat,w,c
  6004  000910  0101               	movlb	1	; () banked
  6005  000912  593B               	subwfb	(printf@val+1)& (0+255),w,b
  6006  000914  0009               	tblrd		*+
  6007  000916  50F5               	movf	tablat,w,c
  6008  000918  0101               	movlb	1	; () banked
  6009  00091A  593C               	subwfb	(printf@val+2)& (0+255),w,b
  6010  00091C  0009               	tblrd		*+
  6011  00091E  50F5               	movf	tablat,w,c
  6012  000920  0101               	movlb	1	; () banked
  6013  000922  593D               	subwfb	(printf@val+3)& (0+255),w,b
  6014  000924  A0D8               	btfss	status,0,c
  6015  000926  D035               	goto	l7586
  6016                           
  6017                           ; BSR set to: 1
  6018                           
  6019                           ; BSR set to: 1
  6020                           
  6021                           ; BSR set to: 1
  6022                           ;doprnt.c: 1307: break;
  6023  000928  0101               	movlb	1	; () banked
  6024  00092A  2B43               	incf	printf@c& (0+255),f,b
  6025  00092C  D7DD               	goto	l7556
  6026  00092E                     l7568:
  6027                           
  6028                           ; BSR set to: 1
  6029                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6030  00092E  0E01               	movlw	1
  6031  000930  0101               	movlb	1	; () banked
  6032  000932  6F43               	movwf	printf@c& (0+255),b
  6033  000934                     l7570:
  6034                           
  6035                           ; BSR set to: 1
  6036  000934  0E08               	movlw	8
  6037  000936  0101               	movlb	1	; () banked
  6038  000938  1943               	xorwf	printf@c& (0+255),w,b
  6039  00093A  B4D8               	btfsc	status,2,c
  6040  00093C  D02A               	goto	l7586
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6044                           
  6045                           ; BSR set to: 1
  6046                           
  6047                           ; BSR set to: 1
  6048  00093E  0101               	movlb	1	; () banked
  6049  000940  5143               	movf	printf@c& (0+255),w,b
  6050  000942  0D04               	mullw	4
  6051  000944  0E2D               	movlw	low _hexpowers
  6052  000946  24F3               	addwf	prodl,w,c
  6053  000948  6EF6               	movwf	tblptrl,c
  6054  00094A  0EFE               	movlw	high _hexpowers
  6055  00094C  20F4               	addwfc	prodh,w,c
  6056  00094E  6EF7               	movwf	tblptrh,c
  6057  000950                     	if	0	;There are less than 3 active tblptr bytes
  6058  000950                     	endif
  6059  000950  0009               	tblrd		*+
  6060  000952  50F5               	movf	tablat,w,c
  6061  000954  0101               	movlb	1	; () banked
  6062  000956  5D3A               	subwf	printf@val& (0+255),w,b
  6063  000958  0009               	tblrd		*+
  6064  00095A  50F5               	movf	tablat,w,c
  6065  00095C  0101               	movlb	1	; () banked
  6066  00095E  593B               	subwfb	(printf@val+1)& (0+255),w,b
  6067  000960  0009               	tblrd		*+
  6068  000962  50F5               	movf	tablat,w,c
  6069  000964  0101               	movlb	1	; () banked
  6070  000966  593C               	subwfb	(printf@val+2)& (0+255),w,b
  6071  000968  0009               	tblrd		*+
  6072  00096A  50F5               	movf	tablat,w,c
  6073  00096C  0101               	movlb	1	; () banked
  6074  00096E  593D               	subwfb	(printf@val+3)& (0+255),w,b
  6075  000970  A0D8               	btfss	status,0,c
  6076  000972  D00F               	goto	l7586
  6077                           
  6078                           ; BSR set to: 1
  6079                           
  6080                           ; BSR set to: 1
  6081                           
  6082                           ; BSR set to: 1
  6083                           ;doprnt.c: 1318: break;
  6084  000974  0101               	movlb	1	; () banked
  6085  000976  2B43               	incf	printf@c& (0+255),f,b
  6086  000978  D7DD               	goto	l7570
  6087  00097A                     l7584:
  6088                           
  6089                           ; BSR set to: 1
  6090  00097A  0101               	movlb	1	; () banked
  6091  00097C  513E               	movf	printf@flag& (0+255),w,b
  6092  00097E  0BC0               	andlw	192
  6093                           
  6094                           ; Switch size 1, requested type "space"
  6095                           ; Number of cases is 3, Range of values is 0 to 192
  6096                           ; switch strategies available:
  6097                           ; Name         Instructions Cycles
  6098                           ; simple_byte           10     6 (average)
  6099                           ;	Chosen strategy is simple_byte
  6100  000980  0A00               	xorlw	0	; case 0
  6101  000982  B4D8               	btfsc	status,2,c
  6102  000984  D7AE               	goto	l7554
  6103  000986  0A80               	xorlw	128	; case 128
  6104  000988  B4D8               	btfsc	status,2,c
  6105  00098A  D7D1               	goto	l7568
  6106  00098C  0A40               	xorlw	64	; case 192
  6107  00098E  B4D8               	btfsc	status,2,c
  6108  000990  D7A8               	goto	l7554
  6109  000992                     l7586:
  6110                           
  6111                           ; BSR set to: 1
  6112                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6113  000992  0101               	movlb	1	; () banked
  6114  000994  5136               	movf	printf@width& (0+255),w,b
  6115  000996  0101               	movlb	1	; () banked
  6116  000998  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6117  00099A  B4D8               	btfsc	status,2,c
  6118  00099C  D014               	goto	l7592
  6119                           
  6120                           ; BSR set to: 1
  6121  00099E  0E03               	movlw	3
  6122  0009A0  0101               	movlb	1	; () banked
  6123  0009A2  153E               	andwf	printf@flag& (0+255),w,b
  6124  0009A4  0101               	movlb	1	; () banked
  6125  0009A6  6F24               	movwf	??_printf& (0+255),b
  6126  0009A8  0E00               	movlw	0
  6127  0009AA  0101               	movlb	1	; () banked
  6128  0009AC  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6129  0009AE  0101               	movlb	1	; () banked
  6130  0009B0  6F25               	movwf	(??_printf+1)& (0+255),b
  6131  0009B2  0101               	movlb	1	; () banked
  6132  0009B4  5124               	movf	??_printf& (0+255),w,b
  6133  0009B6  0101               	movlb	1	; () banked
  6134  0009B8  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6135  0009BA  B4D8               	btfsc	status,2,c
  6136  0009BC  D004               	goto	l7592
  6137                           
  6138                           ; BSR set to: 1
  6139                           ;doprnt.c: 1346: width--;
  6140  0009BE  0101               	movlb	1	; () banked
  6141  0009C0  0736               	decf	printf@width& (0+255),f,b
  6142  0009C2  A0D8               	btfss	status,0,c
  6143  0009C4  0737               	decf	(printf@width+1)& (0+255),f,b
  6144  0009C6                     l7592:
  6145                           
  6146                           ; BSR set to: 1
  6147                           ;doprnt.c: 1381: if(width > c)
  6148  0009C6  0E80               	movlw	128
  6149  0009C8  0101               	movlb	1	; () banked
  6150  0009CA  BF43               	btfsc	printf@c& (0+255),7,b
  6151  0009CC  0E7F               	movlw	127
  6152  0009CE  0101               	movlb	1	; () banked
  6153  0009D0  6F24               	movwf	??_printf& (0+255),b
  6154  0009D2  0101               	movlb	1	; () banked
  6155  0009D4  5136               	movf	printf@width& (0+255),w,b
  6156  0009D6  0101               	movlb	1	; () banked
  6157  0009D8  5D43               	subwf	printf@c& (0+255),w,b
  6158  0009DA  0101               	movlb	1	; () banked
  6159  0009DC  5137               	movf	(printf@width+1)& (0+255),w,b
  6160  0009DE  0A80               	xorlw	128
  6161  0009E0  0101               	movlb	1	; () banked
  6162  0009E2  5924               	subwfb	??_printf& (0+255),w,b
  6163  0009E4  B0D8               	btfsc	status,0,c
  6164  0009E6  D00B               	goto	l7596
  6165                           
  6166                           ; BSR set to: 1
  6167                           ;doprnt.c: 1382: width -= c;
  6168  0009E8  0101               	movlb	1	; () banked
  6169  0009EA  5143               	movf	printf@c& (0+255),w,b
  6170  0009EC  0101               	movlb	1	; () banked
  6171  0009EE  5F36               	subwf	printf@width& (0+255),f,b
  6172  0009F0  0E00               	movlw	0
  6173  0009F2  0101               	movlb	1	; () banked
  6174  0009F4  BF43               	btfsc	printf@c& (0+255),7,b
  6175  0009F6  0EFF               	movlw	255
  6176  0009F8  0101               	movlb	1	; () banked
  6177  0009FA  5B37               	subwfb	(printf@width+1)& (0+255),f,b
  6178  0009FC  D005               	goto	l7598
  6179  0009FE                     l7596:
  6180                           
  6181                           ; BSR set to: 1
  6182                           ;doprnt.c: 1383: else
  6183                           ;doprnt.c: 1384: width = 0;
  6184  0009FE  0E00               	movlw	0
  6185  000A00  0101               	movlb	1	; () banked
  6186  000A02  6F37               	movwf	(printf@width+1)& (0+255),b
  6187  000A04  0E00               	movlw	0
  6188  000A06  6F36               	movwf	printf@width& (0+255),b
  6189  000A08                     l7598:
  6190                           
  6191                           ; BSR set to: 1
  6192                           ;doprnt.c: 1387: if(flag & 0x04) {
  6193  000A08  0101               	movlb	1	; () banked
  6194  000A0A  A53E               	btfss	printf@flag& (0+255),2,b
  6195  000A0C  D021               	goto	l7610
  6196                           
  6197                           ; BSR set to: 1
  6198                           ;doprnt.c: 1392: if(flag & 0x03)
  6199  000A0E  0E03               	movlw	3
  6200  000A10  0101               	movlb	1	; () banked
  6201  000A12  153E               	andwf	printf@flag& (0+255),w,b
  6202  000A14  0101               	movlb	1	; () banked
  6203  000A16  6F24               	movwf	??_printf& (0+255),b
  6204  000A18  0E00               	movlw	0
  6205  000A1A  0101               	movlb	1	; () banked
  6206  000A1C  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6207  000A1E  0101               	movlb	1	; () banked
  6208  000A20  6F25               	movwf	(??_printf+1)& (0+255),b
  6209  000A22  0101               	movlb	1	; () banked
  6210  000A24  5124               	movf	??_printf& (0+255),w,b
  6211  000A26  0101               	movlb	1	; () banked
  6212  000A28  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6213  000A2A  B4D8               	btfsc	status,2,c
  6214  000A2C  D003               	goto	l7604
  6215                           
  6216                           ; BSR set to: 1
  6217                           ;doprnt.c: 1393: (putch('-') );
  6218  000A2E  0E2D               	movlw	45
  6219  000A30  EC83  F02C         	call	_putch
  6220  000A34                     l7604:
  6221                           
  6222                           ;doprnt.c: 1415: if(width)
  6223  000A34  0101               	movlb	1	; () banked
  6224  000A36  5136               	movf	printf@width& (0+255),w,b
  6225  000A38  0101               	movlb	1	; () banked
  6226  000A3A  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6227  000A3C  B4D8               	btfsc	status,2,c
  6228  000A3E  D02E               	goto	l7620
  6229                           
  6230                           ; BSR set to: 1
  6231                           ;doprnt.c: 1417: (putch('0') );
  6232                           
  6233                           ; BSR set to: 1
  6234                           
  6235                           ;doprnt.c: 1416: do
  6236  000A40  0E30               	movlw	48
  6237  000A42  EC83  F02C         	call	_putch
  6238                           
  6239                           ;doprnt.c: 1418: while(--width);
  6240  000A46  0101               	movlb	1	; () banked
  6241  000A48  0736               	decf	printf@width& (0+255),f,b
  6242  000A4A  A0D8               	btfss	status,0,c
  6243  000A4C  0737               	decf	(printf@width+1)& (0+255),f,b
  6244  000A4E  D7F2               	goto	l7604
  6245  000A50                     l7610:
  6246                           
  6247                           ; BSR set to: 1
  6248                           ;doprnt.c: 1422: {
  6249                           ;doprnt.c: 1424: if(width
  6250                           ;doprnt.c: 1428: )
  6251  000A50  0101               	movlb	1	; () banked
  6252  000A52  5136               	movf	printf@width& (0+255),w,b
  6253  000A54  0101               	movlb	1	; () banked
  6254  000A56  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6255  000A58  B4D8               	btfsc	status,2,c
  6256  000A5A  D00D               	goto	l7616
  6257  000A5C                     l7612:
  6258                           
  6259                           ; BSR set to: 1
  6260                           ;doprnt.c: 1430: (putch(' ') );
  6261  000A5C  0E20               	movlw	32
  6262  000A5E  EC83  F02C         	call	_putch
  6263                           
  6264                           ;doprnt.c: 1431: while(--width);
  6265  000A62  0101               	movlb	1	; () banked
  6266  000A64  0736               	decf	printf@width& (0+255),f,b
  6267  000A66  A0D8               	btfss	status,0,c
  6268  000A68  0737               	decf	(printf@width+1)& (0+255),f,b
  6269  000A6A  0101               	movlb	1	; () banked
  6270  000A6C  5136               	movf	printf@width& (0+255),w,b
  6271  000A6E  0101               	movlb	1	; () banked
  6272  000A70  1137               	iorwf	(printf@width+1)& (0+255),w,b
  6273  000A72  A4D8               	btfss	status,2,c
  6274  000A74  D7F3               	goto	l7612
  6275  000A76                     l7616:
  6276                           
  6277                           ; BSR set to: 1
  6278                           ;doprnt.c: 1438: if(flag & 0x03)
  6279  000A76  0E03               	movlw	3
  6280  000A78  0101               	movlb	1	; () banked
  6281  000A7A  153E               	andwf	printf@flag& (0+255),w,b
  6282  000A7C  0101               	movlb	1	; () banked
  6283  000A7E  6F24               	movwf	??_printf& (0+255),b
  6284  000A80  0E00               	movlw	0
  6285  000A82  0101               	movlb	1	; () banked
  6286  000A84  153F               	andwf	(printf@flag+1)& (0+255),w,b
  6287  000A86  0101               	movlb	1	; () banked
  6288  000A88  6F25               	movwf	(??_printf+1)& (0+255),b
  6289  000A8A  0101               	movlb	1	; () banked
  6290  000A8C  5124               	movf	??_printf& (0+255),w,b
  6291  000A8E  0101               	movlb	1	; () banked
  6292  000A90  1125               	iorwf	(??_printf+1)& (0+255),w,b
  6293  000A92  B4D8               	btfsc	status,2,c
  6294  000A94  D003               	goto	l7620
  6295                           
  6296                           ; BSR set to: 1
  6297                           ;doprnt.c: 1439: (putch('-') );
  6298  000A96  0E2D               	movlw	45
  6299  000A98  EC83  F02C         	call	_putch
  6300  000A9C                     l7620:
  6301                           
  6302                           ;doprnt.c: 1469: }
  6303                           ;doprnt.c: 1472: prec = c;
  6304  000A9C  0101               	movlb	1	; () banked
  6305  000A9E  5143               	movf	printf@c& (0+255),w,b
  6306  000AA0  0101               	movlb	1	; () banked
  6307  000AA2  6F30               	movwf	printf@prec& (0+255),b
  6308  000AA4  6B31               	clrf	(printf@prec+1)& (0+255),b
  6309  000AA6  BF30               	btfsc	printf@prec& (0+255),7,b
  6310  000AA8  0731               	decf	(printf@prec+1)& (0+255),f,b
  6311                           
  6312                           ;doprnt.c: 1474: while(prec--) {
  6313  000AAA  D08D               	goto	l7634
  6314  000AAC                     l7622:
  6315                           
  6316                           ; BSR set to: 1
  6317                           ;doprnt.c: 1486: case 0xC0:
  6318                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6319  000AAC  C130  F124         	movff	printf@prec,??_printf
  6320  000AB0  C131  F125         	movff	printf@prec+1,??_printf+1
  6321  000AB4  0101               	movlb	1	; () banked
  6322  000AB6  90D8               	bcf	status,0,c
  6323  000AB8  3724               	rlcf	??_printf& (0+255),f,b
  6324  000ABA  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6325  000ABC  0101               	movlb	1	; () banked
  6326  000ABE  90D8               	bcf	status,0,c
  6327  000AC0  3724               	rlcf	??_printf& (0+255),f,b
  6328  000AC2  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6329  000AC4  0EB7               	movlw	low _dpowers
  6330  000AC6  0101               	movlb	1	; () banked
  6331  000AC8  2524               	addwf	??_printf& (0+255),w,b
  6332  000ACA  6EF6               	movwf	tblptrl,c
  6333  000ACC  0EFD               	movlw	high _dpowers
  6334  000ACE  2125               	addwfc	(??_printf+1)& (0+255),w,b
  6335  000AD0  6EF7               	movwf	tblptrh,c
  6336  000AD2                     	if	0	;There are less than 3 active tblptr bytes
  6337  000AD2                     	endif
  6338  000AD2  0009               	tblrd		*+
  6339  000AD4  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  6340  000AD8  0009               	tblrd		*+
  6341  000ADA  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  6342  000ADE  0009               	tblrd		*+
  6343  000AE0  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  6344  000AE4  000A               	tblrd		*-
  6345  000AE6  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  6346  000AEA  C13A  F09E         	movff	printf@val,___lldiv@dividend
  6347  000AEE  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  6348  000AF2  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  6349  000AF6  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  6350  000AFA  EC71  F026         	call	___lldiv	;wreg free
  6351  000AFE  C09E  F0AB         	movff	?___lldiv,___llmod@dividend
  6352  000B02  C09F  F0AC         	movff	?___lldiv+1,___llmod@dividend+1
  6353  000B06  C0A0  F0AD         	movff	?___lldiv+2,___llmod@dividend+2
  6354  000B0A  C0A1  F0AE         	movff	?___lldiv+3,___llmod@dividend+3
  6355  000B0E  0E0A               	movlw	10
  6356  000B10  0100               	movlb	0	; () banked
  6357  000B12  6FAF               	movwf	___llmod@divisor& (0+255),b
  6358  000B14  0E00               	movlw	0
  6359  000B16  6FB0               	movwf	(___llmod@divisor+1)& (0+255),b
  6360  000B18  0E00               	movlw	0
  6361  000B1A  6FB1               	movwf	(___llmod@divisor+2)& (0+255),b
  6362  000B1C  0E00               	movlw	0
  6363  000B1E  6FB2               	movwf	(___llmod@divisor+3)& (0+255),b
  6364  000B20  EC77  F027         	call	___llmod	;wreg free
  6365  000B24  0100               	movlb	0	; () banked
  6366  000B26  51AB               	movf	?___llmod& (0+255),w,b
  6367  000B28  0F30               	addlw	48
  6368  000B2A  0101               	movlb	1	; () banked
  6369  000B2C  6F43               	movwf	printf@c& (0+255),b
  6370                           
  6371                           ;doprnt.c: 1491: break;
  6372  000B2E  D047               	goto	l7632
  6373  000B30                     l7624:
  6374                           
  6375                           ; BSR set to: 1
  6376                           ;doprnt.c: 1499: {
  6377                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6378  000B30  C13A  F09E         	movff	printf@val,___lldiv@dividend
  6379  000B34  C13B  F09F         	movff	printf@val+1,___lldiv@dividend+1
  6380  000B38  C13C  F0A0         	movff	printf@val+2,___lldiv@dividend+2
  6381  000B3C  C13D  F0A1         	movff	printf@val+3,___lldiv@dividend+3
  6382  000B40  C130  F124         	movff	printf@prec,??_printf
  6383  000B44  C131  F125         	movff	printf@prec+1,??_printf+1
  6384  000B48  0101               	movlb	1	; () banked
  6385  000B4A  90D8               	bcf	status,0,c
  6386  000B4C  3724               	rlcf	??_printf& (0+255),f,b
  6387  000B4E  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6388  000B50  0101               	movlb	1	; () banked
  6389  000B52  90D8               	bcf	status,0,c
  6390  000B54  3724               	rlcf	??_printf& (0+255),f,b
  6391  000B56  3725               	rlcf	(??_printf+1)& (0+255),f,b
  6392  000B58  0E2D               	movlw	low _hexpowers
  6393  000B5A  0101               	movlb	1	; () banked
  6394  000B5C  2524               	addwf	??_printf& (0+255),w,b
  6395  000B5E  6EF6               	movwf	tblptrl,c
  6396  000B60  0EFE               	movlw	high _hexpowers
  6397  000B62  2125               	addwfc	(??_printf+1)& (0+255),w,b
  6398  000B64  6EF7               	movwf	tblptrh,c
  6399  000B66                     	if	0	;There are less than 3 active tblptr bytes
  6400  000B66                     	endif
  6401  000B66  0009               	tblrd		*+
  6402  000B68  CFF5 F0A2          	movff	tablat,___lldiv@divisor
  6403  000B6C  0009               	tblrd		*+
  6404  000B6E  CFF5 F0A3          	movff	tablat,___lldiv@divisor+1
  6405  000B72  0009               	tblrd		*+
  6406  000B74  CFF5 F0A4          	movff	tablat,___lldiv@divisor+2
  6407  000B78  000A               	tblrd		*-
  6408  000B7A  CFF5 F0A5          	movff	tablat,___lldiv@divisor+3
  6409  000B7E  EC71  F026         	call	___lldiv	;wreg free
  6410  000B82  0100               	movlb	0	; () banked
  6411  000B84  519E               	movf	?___lldiv& (0+255),w,b
  6412  000B86  0B0F               	andlw	15
  6413  000B88  0101               	movlb	1	; () banked
  6414  000B8A  6F2D               	movwf	printf@idx& (0+255),b
  6415                           
  6416                           ; BSR set to: 1
  6417                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6418  000B8C  0101               	movlb	1	; () banked
  6419  000B8E  512D               	movf	printf@idx& (0+255),w,b
  6420  000B90  0D01               	mullw	1
  6421  000B92  0E25               	movlw	low STR_23
  6422  000B94  24F3               	addwf	prodl,w,c
  6423  000B96  6EF6               	movwf	tblptrl,c
  6424  000B98  0EFF               	movlw	high STR_23
  6425  000B9A  20F4               	addwfc	prodh,w,c
  6426  000B9C  6EF7               	movwf	tblptrh,c
  6427  000B9E                     	if	0	;There are less than 3 active tblptr bytes
  6428  000B9E                     	endif
  6429  000B9E  0008               	tblrd		*
  6430  000BA0  CFF5 F143          	movff	tablat,printf@c
  6431                           
  6432                           ; BSR set to: 1
  6433                           ;doprnt.c: 1523: }
  6434                           
  6435                           ;doprnt.c: 1508: }
  6436                           ;doprnt.c: 1510: break;
  6437  000BA4  D00C               	goto	l7632
  6438  000BA6                     l7630:
  6439                           
  6440                           ; BSR set to: 1
  6441  000BA6  0101               	movlb	1	; () banked
  6442  000BA8  513E               	movf	printf@flag& (0+255),w,b
  6443  000BAA  0BC0               	andlw	192
  6444                           
  6445                           ; Switch size 1, requested type "space"
  6446                           ; Number of cases is 3, Range of values is 0 to 192
  6447                           ; switch strategies available:
  6448                           ; Name         Instructions Cycles
  6449                           ; simple_byte           10     6 (average)
  6450                           ;	Chosen strategy is simple_byte
  6451  000BAC  0A00               	xorlw	0	; case 0
  6452  000BAE  B4D8               	btfsc	status,2,c
  6453  000BB0  D77D               	goto	l7622
  6454  000BB2  0A80               	xorlw	128	; case 128
  6455  000BB4  B4D8               	btfsc	status,2,c
  6456  000BB6  D7BC               	goto	l7624
  6457  000BB8  0A40               	xorlw	64	; case 192
  6458  000BBA  B4D8               	btfsc	status,2,c
  6459  000BBC  D777               	goto	l7622
  6460  000BBE                     l7632:
  6461                           
  6462                           ; BSR set to: 1
  6463                           ;doprnt.c: 1524: (putch(c) );
  6464  000BBE  0101               	movlb	1	; () banked
  6465  000BC0  5143               	movf	printf@c& (0+255),w,b
  6466  000BC2  EC83  F02C         	call	_putch
  6467  000BC6                     l7634:
  6468  000BC6  0101               	movlb	1	; () banked
  6469  000BC8  0730               	decf	printf@prec& (0+255),f,b
  6470  000BCA  A0D8               	btfss	status,0,c
  6471  000BCC  0731               	decf	(printf@prec+1)& (0+255),f,b
  6472  000BCE  0101               	movlb	1	; () banked
  6473  000BD0  2930               	incf	printf@prec& (0+255),w,b
  6474  000BD2  E1E9               	bnz	l7630
  6475  000BD4  0101               	movlb	1	; () banked
  6476  000BD6  2931               	incf	(printf@prec+1)& (0+255),w,b
  6477  000BD8  A4D8               	btfss	status,2,c
  6478  000BDA  D7E5               	goto	l7630
  6479  000BDC                     l7636:
  6480  000BDC  C11C  FFF6         	movff	printf@f,tblptrl
  6481  000BE0  C11D  FFF7         	movff	printf@f+1,tblptrh
  6482  000BE4  0101               	movlb	1	; () banked
  6483  000BE6  4B1C               	infsnz	printf@f& (0+255),f,b
  6484  000BE8  2B1D               	incf	(printf@f+1)& (0+255),f,b
  6485  000BEA                     	if	0	;tblptru may be non-zero
  6486  000BEA                     	endif
  6487  000BEA                     	if	0	;tblptru may be non-zero
  6488  000BEA                     	endif
  6489  000BEA  0008               	tblrd		*
  6490  000BEC  CFF5 F143          	movff	tablat,printf@c
  6491  000BF0  0101               	movlb	1	; () banked
  6492  000BF2  5143               	movf	printf@c& (0+255),w,b
  6493  000BF4  B4D8               	btfsc	status,2,c
  6494  000BF6  0012               	return	
  6495  000BF8  EF11  F000         	goto	l7346
  6496  000BFC                     __end_of_printf:
  6497                           	opt stack 0
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           intcon2	equ	0xFF1
  6506                           intcon3	equ	0xFF0
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _scale *****************
  6517 ;; Defined at:
  6518 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  scl             1    wreg     char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  scl             1    6[BANK1 ] char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  3    0[BANK1 ] char 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6532 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;Total ram usage:        7 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    9
  6539 ;; This function calls:
  6540 ;;		___awdiv
  6541 ;;		___awmod
  6542 ;;		___ftmul
  6543 ;;		___wmul
  6544 ;; This function is called by:
  6545 ;;		_printf
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text14
  6550  0015DA                     __ptext14:
  6551                           	opt stack 0
  6552  0015DA                     _scale:
  6553                           	opt stack 19
  6554                           
  6555                           ;incstack = 0
  6556                           ;scale@scl stored from wreg
  6557  0015DA  0101               	movlb	1	; () banked
  6558  0015DC  6F06               	movwf	scale@scl& (0+255),b
  6559                           
  6560                           ;doprnt.c: 428: if(scl < 0) {
  6561  0015DE  0101               	movlb	1	; () banked
  6562  0015E0  AF06               	btfss	scale@scl& (0+255),7,b
  6563  0015E2  D12A               	goto	l7262
  6564                           
  6565                           ; BSR set to: 1
  6566                           ;doprnt.c: 429: scl = -scl;
  6567  0015E4  0101               	movlb	1	; () banked
  6568  0015E6  6D06               	negf	scale@scl& (0+255),b
  6569                           
  6570                           ;doprnt.c: 430: if(scl>=110)
  6571  0015E8  0101               	movlb	1	; () banked
  6572  0015EA  5106               	movf	scale@scl& (0+255),w,b
  6573  0015EC  0A80               	xorlw	128
  6574  0015EE  0F12               	addlw	-238
  6575  0015F0  A0D8               	btfss	status,0,c
  6576  0015F2  D0AC               	goto	l7252
  6577                           
  6578                           ; BSR set to: 1
  6579                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6580  0015F4  0E00               	movlw	0
  6581  0015F6  0100               	movlb	0	; () banked
  6582  0015F8  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6583  0015FA  0E03               	movlw	3
  6584  0015FC  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6585  0015FE  0E00               	movlw	0
  6586  001600  0100               	movlb	0	; () banked
  6587  001602  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6588  001604  0E0A               	movlw	10
  6589  001606  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6590  001608  0E00               	movlw	0
  6591  00160A  0100               	movlb	0	; () banked
  6592  00160C  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6593  00160E  0E64               	movlw	100
  6594  001610  6FA0               	movwf	___awmod@divisor& (0+255),b
  6595  001612  0101               	movlb	1	; () banked
  6596  001614  5106               	movf	scale@scl& (0+255),w,b
  6597  001616  0100               	movlb	0	; () banked
  6598  001618  6F9E               	movwf	___awmod@dividend& (0+255),b
  6599  00161A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6600  00161C  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6601  00161E  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6602  001620  EC26  F027         	call	___awmod	;wreg free
  6603  001624  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  6604  001628  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  6605  00162C  EC12  F026         	call	___awdiv	;wreg free
  6606  001630  0E09               	movlw	9
  6607  001632  0100               	movlb	0	; () banked
  6608  001634  25A4               	addwf	?___awdiv& (0+255),w,b
  6609  001636  0100               	movlb	0	; () banked
  6610  001638  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6611  00163A  0E00               	movlw	0
  6612  00163C  0100               	movlb	0	; () banked
  6613  00163E  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6614  001640  0100               	movlb	0	; () banked
  6615  001642  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6616  001644  ECAD  F02B         	call	___wmul	;wreg free
  6617  001648  0EDF               	movlw	low __npowers_
  6618  00164A  0100               	movlb	0	; () banked
  6619  00164C  25AC               	addwf	?___wmul& (0+255),w,b
  6620  00164E  6EF6               	movwf	tblptrl,c
  6621  001650  0EFD               	movlw	high __npowers_
  6622  001652  0100               	movlb	0	; () banked
  6623  001654  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6624  001656  6EF7               	movwf	tblptrh,c
  6625  001658                     	if	0	;There are less than 3 active tblptr bytes
  6626  001658                     	endif
  6627  001658  0009               	tblrd		*+
  6628  00165A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6629  00165E  0009               	tblrd		*+
  6630  001660  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6631  001664  000A               	tblrd		*-
  6632  001666  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6633  00166A  0E00               	movlw	0
  6634  00166C  0100               	movlb	0	; () banked
  6635  00166E  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6636  001670  0E64               	movlw	100
  6637  001672  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6638  001674  0101               	movlb	1	; () banked
  6639  001676  5106               	movf	scale@scl& (0+255),w,b
  6640  001678  0100               	movlb	0	; () banked
  6641  00167A  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6642  00167C  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6643  00167E  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6644  001680  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6645  001682  EC12  F026         	call	___awdiv	;wreg free
  6646  001686  0E12               	movlw	18
  6647  001688  0100               	movlb	0	; () banked
  6648  00168A  25A4               	addwf	?___awdiv& (0+255),w,b
  6649  00168C  0100               	movlb	0	; () banked
  6650  00168E  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6651  001690  0E00               	movlw	0
  6652  001692  0100               	movlb	0	; () banked
  6653  001694  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6654  001696  0100               	movlb	0	; () banked
  6655  001698  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6656  00169A  0E00               	movlw	0
  6657  00169C  0100               	movlb	0	; () banked
  6658  00169E  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6659  0016A0  0E03               	movlw	3
  6660  0016A2  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6661  0016A4  ECAD  F02B         	call	___wmul	;wreg free
  6662  0016A8  0EDF               	movlw	low __npowers_
  6663  0016AA  0100               	movlb	0	; () banked
  6664  0016AC  25AC               	addwf	?___wmul& (0+255),w,b
  6665  0016AE  6EF6               	movwf	tblptrl,c
  6666  0016B0  0EFD               	movlw	high __npowers_
  6667  0016B2  0100               	movlb	0	; () banked
  6668  0016B4  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6669  0016B6  6EF7               	movwf	tblptrh,c
  6670  0016B8                     	if	0	;There are less than 3 active tblptr bytes
  6671  0016B8                     	endif
  6672  0016B8  0009               	tblrd		*+
  6673  0016BA  CFF5 F0B2          	movff	tablat,___ftmul@f1
  6674  0016BE  0009               	tblrd		*+
  6675  0016C0  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  6676  0016C4  000A               	tblrd		*-
  6677  0016C6  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  6678  0016CA  ECFC  F01B         	call	___ftmul	;wreg free
  6679  0016CE  C0B2  F103         	movff	?___ftmul,_scale$1308
  6680  0016D2  C0B3  F104         	movff	?___ftmul+1,_scale$1308+1
  6681  0016D6  C0B4  F105         	movff	?___ftmul+2,_scale$1308+2
  6682                           
  6683                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6684  0016DA  C103  F0B2         	movff	_scale$1308,___ftmul@f1
  6685  0016DE  C104  F0B3         	movff	_scale$1308+1,___ftmul@f1+1
  6686  0016E2  C105  F0B4         	movff	_scale$1308+2,___ftmul@f1+2
  6687  0016E6  0E00               	movlw	0
  6688  0016E8  0100               	movlb	0	; () banked
  6689  0016EA  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6690  0016EC  0E03               	movlw	3
  6691  0016EE  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6692  0016F0  0E00               	movlw	0
  6693  0016F2  0100               	movlb	0	; () banked
  6694  0016F4  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6695  0016F6  0E0A               	movlw	10
  6696  0016F8  6FA0               	movwf	___awmod@divisor& (0+255),b
  6697  0016FA  0101               	movlb	1	; () banked
  6698  0016FC  5106               	movf	scale@scl& (0+255),w,b
  6699  0016FE  0100               	movlb	0	; () banked
  6700  001700  6F9E               	movwf	___awmod@dividend& (0+255),b
  6701  001702  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6702  001704  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6703  001706  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6704  001708  EC26  F027         	call	___awmod	;wreg free
  6705  00170C  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  6706  001710  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  6707  001714  ECAD  F02B         	call	___wmul	;wreg free
  6708  001718  0EDF               	movlw	low __npowers_
  6709  00171A  0100               	movlb	0	; () banked
  6710  00171C  25AC               	addwf	?___wmul& (0+255),w,b
  6711  00171E  6EF6               	movwf	tblptrl,c
  6712  001720  0EFD               	movlw	high __npowers_
  6713  001722  0100               	movlb	0	; () banked
  6714  001724  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6715  001726  6EF7               	movwf	tblptrh,c
  6716  001728                     	if	0	;There are less than 3 active tblptr bytes
  6717  001728                     	endif
  6718  001728  0009               	tblrd		*+
  6719  00172A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6720  00172E  0009               	tblrd		*+
  6721  001730  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6722  001734  000A               	tblrd		*-
  6723  001736  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6724  00173A  ECFC  F01B         	call	___ftmul	;wreg free
  6725  00173E  C0B2  F100         	movff	?___ftmul,?_scale
  6726  001742  C0B3  F101         	movff	?___ftmul+1,?_scale+1
  6727  001746  C0B4  F102         	movff	?___ftmul+2,?_scale+2
  6728  00174A  0012               	return	
  6729  00174C                     l7252:
  6730                           
  6731                           ;doprnt.c: 432: else if(scl > 10)
  6732  00174C  0101               	movlb	1	; () banked
  6733  00174E  5106               	movf	scale@scl& (0+255),w,b
  6734  001750  0A80               	xorlw	128
  6735  001752  0F75               	addlw	-139
  6736  001754  A0D8               	btfss	status,0,c
  6737  001756  D05D               	goto	l7258
  6738                           
  6739                           ; BSR set to: 1
  6740                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6741  001758  0E00               	movlw	0
  6742  00175A  0100               	movlb	0	; () banked
  6743  00175C  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6744  00175E  0E0A               	movlw	10
  6745  001760  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6746  001762  0101               	movlb	1	; () banked
  6747  001764  5106               	movf	scale@scl& (0+255),w,b
  6748  001766  0100               	movlb	0	; () banked
  6749  001768  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6750  00176A  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6751  00176C  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6752  00176E  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6753  001770  EC12  F026         	call	___awdiv	;wreg free
  6754  001774  0E09               	movlw	9
  6755  001776  0100               	movlb	0	; () banked
  6756  001778  25A4               	addwf	?___awdiv& (0+255),w,b
  6757  00177A  0100               	movlb	0	; () banked
  6758  00177C  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6759  00177E  0E00               	movlw	0
  6760  001780  0100               	movlb	0	; () banked
  6761  001782  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6762  001784  0100               	movlb	0	; () banked
  6763  001786  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6764  001788  0E00               	movlw	0
  6765  00178A  0100               	movlb	0	; () banked
  6766  00178C  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6767  00178E  0E03               	movlw	3
  6768  001790  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6769  001792  ECAD  F02B         	call	___wmul	;wreg free
  6770  001796  0EDF               	movlw	low __npowers_
  6771  001798  0100               	movlb	0	; () banked
  6772  00179A  25AC               	addwf	?___wmul& (0+255),w,b
  6773  00179C  6EF6               	movwf	tblptrl,c
  6774  00179E  0EFD               	movlw	high __npowers_
  6775  0017A0  0100               	movlb	0	; () banked
  6776  0017A2  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6777  0017A4  6EF7               	movwf	tblptrh,c
  6778  0017A6                     	if	0	;There are less than 3 active tblptr bytes
  6779  0017A6                     	endif
  6780  0017A6  0009               	tblrd		*+
  6781  0017A8  CFF5 F0B2          	movff	tablat,___ftmul@f1
  6782  0017AC  0009               	tblrd		*+
  6783  0017AE  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  6784  0017B2  000A               	tblrd		*-
  6785  0017B4  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  6786  0017B8  0E00               	movlw	0
  6787  0017BA  0100               	movlb	0	; () banked
  6788  0017BC  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6789  0017BE  0E03               	movlw	3
  6790  0017C0  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6791  0017C2  0E00               	movlw	0
  6792  0017C4  0100               	movlb	0	; () banked
  6793  0017C6  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6794  0017C8  0E0A               	movlw	10
  6795  0017CA  6FA0               	movwf	___awmod@divisor& (0+255),b
  6796  0017CC  0101               	movlb	1	; () banked
  6797  0017CE  5106               	movf	scale@scl& (0+255),w,b
  6798  0017D0  0100               	movlb	0	; () banked
  6799  0017D2  6F9E               	movwf	___awmod@dividend& (0+255),b
  6800  0017D4  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6801  0017D6  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6802  0017D8  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6803  0017DA  EC26  F027         	call	___awmod	;wreg free
  6804  0017DE  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  6805  0017E2  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  6806  0017E6  ECAD  F02B         	call	___wmul	;wreg free
  6807  0017EA  0EDF               	movlw	low __npowers_
  6808  0017EC  0100               	movlb	0	; () banked
  6809  0017EE  25AC               	addwf	?___wmul& (0+255),w,b
  6810  0017F0  6EF6               	movwf	tblptrl,c
  6811  0017F2  0EFD               	movlw	high __npowers_
  6812  0017F4  0100               	movlb	0	; () banked
  6813  0017F6  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6814  0017F8  6EF7               	movwf	tblptrh,c
  6815  0017FA                     	if	0	;There are less than 3 active tblptr bytes
  6816  0017FA                     	endif
  6817  0017FA  0009               	tblrd		*+
  6818  0017FC  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6819  001800  0009               	tblrd		*+
  6820  001802  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6821  001806  000A               	tblrd		*-
  6822  001808  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6823  00180C  ECFC  F01B         	call	___ftmul	;wreg free
  6824  001810  D796               	goto	L12
  6825  001812                     l7258:
  6826                           
  6827                           ;doprnt.c: 434: return _npowers_[scl];
  6828  001812  0101               	movlb	1	; () banked
  6829  001814  5106               	movf	scale@scl& (0+255),w,b
  6830  001816  0D03               	mullw	3
  6831  001818  0EDF               	movlw	low __npowers_
  6832  00181A  24F3               	addwf	prodl,w,c
  6833  00181C  6EF6               	movwf	tblptrl,c
  6834  00181E  0EFD               	movlw	high __npowers_
  6835  001820  20F4               	addwfc	prodh,w,c
  6836  001822  6EF7               	movwf	tblptrh,c
  6837  001824                     	if	0	;There are less than 3 active tblptr bytes
  6838  001824                     	endif
  6839  001824  0009               	tblrd		*+
  6840  001826  CFF5 F100          	movff	tablat,?_scale
  6841  00182A  0009               	tblrd		*+
  6842  00182C  CFF5 F101          	movff	tablat,?_scale+1
  6843  001830  000A               	tblrd		*-
  6844  001832  CFF5 F102          	movff	tablat,?_scale+2
  6845                           
  6846                           ; BSR set to: 1
  6847  001836  0012               	return	
  6848  001838                     l7262:
  6849                           
  6850                           ; BSR set to: 1
  6851                           ;doprnt.c: 435: }
  6852                           ;doprnt.c: 436: if(scl>=110)
  6853  001838  0101               	movlb	1	; () banked
  6854  00183A  5106               	movf	scale@scl& (0+255),w,b
  6855  00183C  0A80               	xorlw	128
  6856  00183E  0F12               	addlw	-238
  6857  001840  A0D8               	btfss	status,0,c
  6858  001842  D0AC               	goto	l7270
  6859                           
  6860                           ; BSR set to: 1
  6861                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6862  001844  0E00               	movlw	0
  6863  001846  0100               	movlb	0	; () banked
  6864  001848  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6865  00184A  0E03               	movlw	3
  6866  00184C  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6867  00184E  0E00               	movlw	0
  6868  001850  0100               	movlb	0	; () banked
  6869  001852  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6870  001854  0E0A               	movlw	10
  6871  001856  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6872  001858  0E00               	movlw	0
  6873  00185A  0100               	movlb	0	; () banked
  6874  00185C  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6875  00185E  0E64               	movlw	100
  6876  001860  6FA0               	movwf	___awmod@divisor& (0+255),b
  6877  001862  0101               	movlb	1	; () banked
  6878  001864  5106               	movf	scale@scl& (0+255),w,b
  6879  001866  0100               	movlb	0	; () banked
  6880  001868  6F9E               	movwf	___awmod@dividend& (0+255),b
  6881  00186A  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6882  00186C  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6883  00186E  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6884  001870  EC26  F027         	call	___awmod	;wreg free
  6885  001874  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  6886  001878  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  6887  00187C  EC12  F026         	call	___awdiv	;wreg free
  6888  001880  0E09               	movlw	9
  6889  001882  0100               	movlb	0	; () banked
  6890  001884  25A4               	addwf	?___awdiv& (0+255),w,b
  6891  001886  0100               	movlb	0	; () banked
  6892  001888  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6893  00188A  0E00               	movlw	0
  6894  00188C  0100               	movlb	0	; () banked
  6895  00188E  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6896  001890  0100               	movlb	0	; () banked
  6897  001892  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6898  001894  ECAD  F02B         	call	___wmul	;wreg free
  6899  001898  0E06               	movlw	low __powers_
  6900  00189A  0100               	movlb	0	; () banked
  6901  00189C  25AC               	addwf	?___wmul& (0+255),w,b
  6902  00189E  6EF6               	movwf	tblptrl,c
  6903  0018A0  0EFE               	movlw	high __powers_
  6904  0018A2  0100               	movlb	0	; () banked
  6905  0018A4  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6906  0018A6  6EF7               	movwf	tblptrh,c
  6907  0018A8                     	if	0	;There are less than 3 active tblptr bytes
  6908  0018A8                     	endif
  6909  0018A8  0009               	tblrd		*+
  6910  0018AA  CFF5 F0B5          	movff	tablat,___ftmul@f2
  6911  0018AE  0009               	tblrd		*+
  6912  0018B0  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  6913  0018B4  000A               	tblrd		*-
  6914  0018B6  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  6915  0018BA  0E00               	movlw	0
  6916  0018BC  0100               	movlb	0	; () banked
  6917  0018BE  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  6918  0018C0  0E64               	movlw	100
  6919  0018C2  6FA6               	movwf	___awdiv@divisor& (0+255),b
  6920  0018C4  0101               	movlb	1	; () banked
  6921  0018C6  5106               	movf	scale@scl& (0+255),w,b
  6922  0018C8  0100               	movlb	0	; () banked
  6923  0018CA  6FA4               	movwf	___awdiv@dividend& (0+255),b
  6924  0018CC  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  6925  0018CE  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  6926  0018D0  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  6927  0018D2  EC12  F026         	call	___awdiv	;wreg free
  6928  0018D6  0E12               	movlw	18
  6929  0018D8  0100               	movlb	0	; () banked
  6930  0018DA  25A4               	addwf	?___awdiv& (0+255),w,b
  6931  0018DC  0100               	movlb	0	; () banked
  6932  0018DE  6FAC               	movwf	___wmul@multiplier& (0+255),b
  6933  0018E0  0E00               	movlw	0
  6934  0018E2  0100               	movlb	0	; () banked
  6935  0018E4  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  6936  0018E6  0100               	movlb	0	; () banked
  6937  0018E8  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  6938  0018EA  0E00               	movlw	0
  6939  0018EC  0100               	movlb	0	; () banked
  6940  0018EE  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6941  0018F0  0E03               	movlw	3
  6942  0018F2  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6943  0018F4  ECAD  F02B         	call	___wmul	;wreg free
  6944  0018F8  0E06               	movlw	low __powers_
  6945  0018FA  0100               	movlb	0	; () banked
  6946  0018FC  25AC               	addwf	?___wmul& (0+255),w,b
  6947  0018FE  6EF6               	movwf	tblptrl,c
  6948  001900  0EFE               	movlw	high __powers_
  6949  001902  0100               	movlb	0	; () banked
  6950  001904  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6951  001906  6EF7               	movwf	tblptrh,c
  6952  001908                     	if	0	;There are less than 3 active tblptr bytes
  6953  001908                     	endif
  6954  001908  0009               	tblrd		*+
  6955  00190A  CFF5 F0B2          	movff	tablat,___ftmul@f1
  6956  00190E  0009               	tblrd		*+
  6957  001910  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  6958  001914  000A               	tblrd		*-
  6959  001916  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  6960  00191A  ECFC  F01B         	call	___ftmul	;wreg free
  6961  00191E  C0B2  F103         	movff	?___ftmul,_scale$1308
  6962  001922  C0B3  F104         	movff	?___ftmul+1,_scale$1308+1
  6963  001926  C0B4  F105         	movff	?___ftmul+2,_scale$1308+2
  6964                           
  6965                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6966  00192A  C103  F0B2         	movff	_scale$1308,___ftmul@f1
  6967  00192E  C104  F0B3         	movff	_scale$1308+1,___ftmul@f1+1
  6968  001932  C105  F0B4         	movff	_scale$1308+2,___ftmul@f1+2
  6969  001936  0E00               	movlw	0
  6970  001938  0100               	movlb	0	; () banked
  6971  00193A  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6972  00193C  0E03               	movlw	3
  6973  00193E  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  6974  001940  0E00               	movlw	0
  6975  001942  0100               	movlb	0	; () banked
  6976  001944  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  6977  001946  0E0A               	movlw	10
  6978  001948  6FA0               	movwf	___awmod@divisor& (0+255),b
  6979  00194A  0101               	movlb	1	; () banked
  6980  00194C  5106               	movf	scale@scl& (0+255),w,b
  6981  00194E  0100               	movlb	0	; () banked
  6982  001950  6F9E               	movwf	___awmod@dividend& (0+255),b
  6983  001952  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  6984  001954  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  6985  001956  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  6986  001958  EC26  F027         	call	___awmod	;wreg free
  6987  00195C  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  6988  001960  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  6989  001964  ECAD  F02B         	call	___wmul	;wreg free
  6990  001968  0E06               	movlw	low __powers_
  6991  00196A  0100               	movlb	0	; () banked
  6992  00196C  25AC               	addwf	?___wmul& (0+255),w,b
  6993  00196E  6EF6               	movwf	tblptrl,c
  6994  001970  0EFE               	movlw	high __powers_
  6995  001972  0100               	movlb	0	; () banked
  6996  001974  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  6997  001976  6EF7               	movwf	tblptrh,c
  6998  001978                     	if	0	;There are less than 3 active tblptr bytes
  6999  001978                     	endif
  7000  001978  0009               	tblrd		*+
  7001  00197A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7002  00197E  0009               	tblrd		*+
  7003  001980  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7004  001984  000A               	tblrd		*-
  7005  001986  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7006  00198A  ECFC  F01B         	call	___ftmul	;wreg free
  7007  00198E  C0B2  F100         	movff	?___ftmul,?_scale
  7008  001992  C0B3  F101         	movff	?___ftmul+1,?_scale+1
  7009  001996  C0B4  F102         	movff	?___ftmul+2,?_scale+2
  7010  00199A  0012               	return	
  7011  00199C                     l7270:
  7012                           
  7013                           ;doprnt.c: 438: else if(scl > 10)
  7014  00199C  0101               	movlb	1	; () banked
  7015  00199E  5106               	movf	scale@scl& (0+255),w,b
  7016  0019A0  0A80               	xorlw	128
  7017  0019A2  0F75               	addlw	-139
  7018  0019A4  A0D8               	btfss	status,0,c
  7019  0019A6  D05D               	goto	l7276
  7020                           
  7021                           ; BSR set to: 1
  7022                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7023  0019A8  0E00               	movlw	0
  7024  0019AA  0100               	movlb	0	; () banked
  7025  0019AC  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7026  0019AE  0E0A               	movlw	10
  7027  0019B0  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7028  0019B2  0101               	movlb	1	; () banked
  7029  0019B4  5106               	movf	scale@scl& (0+255),w,b
  7030  0019B6  0100               	movlb	0	; () banked
  7031  0019B8  6FA4               	movwf	___awdiv@dividend& (0+255),b
  7032  0019BA  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7033  0019BC  BFA4               	btfsc	___awdiv@dividend& (0+255),7,b
  7034  0019BE  07A5               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7035  0019C0  EC12  F026         	call	___awdiv	;wreg free
  7036  0019C4  0E09               	movlw	9
  7037  0019C6  0100               	movlb	0	; () banked
  7038  0019C8  25A4               	addwf	?___awdiv& (0+255),w,b
  7039  0019CA  0100               	movlb	0	; () banked
  7040  0019CC  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7041  0019CE  0E00               	movlw	0
  7042  0019D0  0100               	movlb	0	; () banked
  7043  0019D2  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7044  0019D4  0100               	movlb	0	; () banked
  7045  0019D6  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7046  0019D8  0E00               	movlw	0
  7047  0019DA  0100               	movlb	0	; () banked
  7048  0019DC  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7049  0019DE  0E03               	movlw	3
  7050  0019E0  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7051  0019E2  ECAD  F02B         	call	___wmul	;wreg free
  7052  0019E6  0E06               	movlw	low __powers_
  7053  0019E8  0100               	movlb	0	; () banked
  7054  0019EA  25AC               	addwf	?___wmul& (0+255),w,b
  7055  0019EC  6EF6               	movwf	tblptrl,c
  7056  0019EE  0EFE               	movlw	high __powers_
  7057  0019F0  0100               	movlb	0	; () banked
  7058  0019F2  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7059  0019F4  6EF7               	movwf	tblptrh,c
  7060  0019F6                     	if	0	;There are less than 3 active tblptr bytes
  7061  0019F6                     	endif
  7062  0019F6  0009               	tblrd		*+
  7063  0019F8  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7064  0019FC  0009               	tblrd		*+
  7065  0019FE  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7066  001A02  000A               	tblrd		*-
  7067  001A04  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7068  001A08  0E00               	movlw	0
  7069  001A0A  0100               	movlb	0	; () banked
  7070  001A0C  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7071  001A0E  0E03               	movlw	3
  7072  001A10  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7073  001A12  0E00               	movlw	0
  7074  001A14  0100               	movlb	0	; () banked
  7075  001A16  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7076  001A18  0E0A               	movlw	10
  7077  001A1A  6FA0               	movwf	___awmod@divisor& (0+255),b
  7078  001A1C  0101               	movlb	1	; () banked
  7079  001A1E  5106               	movf	scale@scl& (0+255),w,b
  7080  001A20  0100               	movlb	0	; () banked
  7081  001A22  6F9E               	movwf	___awmod@dividend& (0+255),b
  7082  001A24  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7083  001A26  BF9E               	btfsc	___awmod@dividend& (0+255),7,b
  7084  001A28  079F               	decf	(___awmod@dividend+1)& (0+255),f,b
  7085  001A2A  EC26  F027         	call	___awmod	;wreg free
  7086  001A2E  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7087  001A32  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7088  001A36  ECAD  F02B         	call	___wmul	;wreg free
  7089  001A3A  0E06               	movlw	low __powers_
  7090  001A3C  0100               	movlb	0	; () banked
  7091  001A3E  25AC               	addwf	?___wmul& (0+255),w,b
  7092  001A40  6EF6               	movwf	tblptrl,c
  7093  001A42  0EFE               	movlw	high __powers_
  7094  001A44  0100               	movlb	0	; () banked
  7095  001A46  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7096  001A48  6EF7               	movwf	tblptrh,c
  7097  001A4A                     	if	0	;There are less than 3 active tblptr bytes
  7098  001A4A                     	endif
  7099  001A4A  0009               	tblrd		*+
  7100  001A4C  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7101  001A50  0009               	tblrd		*+
  7102  001A52  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7103  001A56  000A               	tblrd		*-
  7104  001A58  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7105  001A5C  ECFC  F01B         	call	___ftmul	;wreg free
  7106  001A60  D796               	goto	L13
  7107  001A62                     l7276:
  7108                           
  7109                           ;doprnt.c: 440: return _powers_[scl];
  7110  001A62  0101               	movlb	1	; () banked
  7111  001A64  5106               	movf	scale@scl& (0+255),w,b
  7112  001A66  0D03               	mullw	3
  7113  001A68  0E06               	movlw	low __powers_
  7114  001A6A  24F3               	addwf	prodl,w,c
  7115  001A6C  6EF6               	movwf	tblptrl,c
  7116  001A6E  0EFE               	movlw	high __powers_
  7117  001A70  20F4               	addwfc	prodh,w,c
  7118  001A72  6EF7               	movwf	tblptrh,c
  7119  001A74                     	if	0	;There are less than 3 active tblptr bytes
  7120  001A74                     	endif
  7121  001A74  0009               	tblrd		*+
  7122  001A76  CFF5 F100          	movff	tablat,?_scale
  7123  001A7A  0009               	tblrd		*+
  7124  001A7C  CFF5 F101          	movff	tablat,?_scale+1
  7125  001A80  000A               	tblrd		*-
  7126  001A82  CFF5 F102          	movff	tablat,?_scale+2
  7127  001A86  0012               	return	
  7128  001A88                     __end_of_scale:
  7129                           	opt stack 0
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           intcon2	equ	0xFF1
  7138                           intcon3	equ	0xFF0
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function _putch *****************
  7149 ;; Defined at:
  7150 ;;		line 31 in file "lcd.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  data            1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  data            1   32[BANK0 ] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:        1 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    8
  7171 ;; This function calls:
  7172 ;;		_lcdNibble
  7173 ;; This function is called by:
  7174 ;;		_printf
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text15
  7179  005906                     __ptext15:
  7180                           	opt stack 0
  7181  005906                     _putch:
  7182                           	opt stack 20
  7183                           
  7184                           ;incstack = 0
  7185                           ;putch@data stored from wreg
  7186  005906  0100               	movlb	0	; () banked
  7187  005908  6FA0               	movwf	putch@data& (0+255),b
  7188                           
  7189                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  7190  00590A  848C               	bsf	3980,2,c	;volatile
  7191                           
  7192                           ;lcd.c: 33: lcdNibble(data);
  7193  00590C  0100               	movlb	0	; () banked
  7194  00590E  51A0               	movf	putch@data& (0+255),w,b
  7195  005910  ECF0  F029         	call	_lcdNibble
  7196  005914  0012               	return		;funcret
  7197  005916                     __end_of_putch:
  7198                           	opt stack 0
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           intcon	equ	0xFF2
  7206                           intcon2	equ	0xFF1
  7207                           intcon3	equ	0xFF0
  7208                           postinc0	equ	0xFEE
  7209                           wreg	equ	0xFE8
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           fsr2h	equ	0xFDA
  7214                           fsr2l	equ	0xFD9
  7215                           status	equ	0xFD8
  7216                           
  7217 ;; *************** function _isdigit *****************
  7218 ;; Defined at:
  7219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  c               1    wreg     unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  c               1   32[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;Total ram usage:        3 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    7
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_printf
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           	psect	text16
  7248  0057EE                     __ptext16:
  7249                           	opt stack 0
  7250  0057EE                     _isdigit:
  7251                           	opt stack 21
  7252                           
  7253                           ;incstack = 0
  7254                           ;isdigit@c stored from wreg
  7255  0057EE  0100               	movlb	0	; () banked
  7256  0057F0  6FA0               	movwf	isdigit@c& (0+255),b
  7257  0057F2  0E00               	movlw	0
  7258  0057F4  0100               	movlb	0	; () banked
  7259  0057F6  6F9F               	movwf	_isdigit$853& (0+255),b
  7260                           
  7261                           ; BSR set to: 0
  7262  0057F8  0E3A               	movlw	58
  7263  0057FA  0100               	movlb	0	; () banked
  7264  0057FC  61A0               	cpfslt	isdigit@c& (0+255),b
  7265  0057FE  D007               	goto	l4958
  7266                           
  7267                           ; BSR set to: 0
  7268  005800  0E2F               	movlw	47
  7269  005802  0100               	movlb	0	; () banked
  7270  005804  65A0               	cpfsgt	isdigit@c& (0+255),b
  7271  005806  D003               	goto	l4958
  7272                           
  7273                           ; BSR set to: 0
  7274  005808  0E01               	movlw	1
  7275  00580A  0100               	movlb	0	; () banked
  7276  00580C  6F9F               	movwf	_isdigit$853& (0+255),b
  7277  00580E                     l4958:
  7278                           
  7279                           ; BSR set to: 0
  7280  00580E  C09F  F09E         	movff	_isdigit$853,??_isdigit
  7281  005812  0100               	movlb	0	; () banked
  7282  005814  319E               	rrcf	??_isdigit& (0+255),w,b
  7283  005816  0012               	return	
  7284  005818                     __end_of_isdigit:
  7285                           	opt stack 0
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           intcon2	equ	0xFF1
  7294                           intcon3	equ	0xFF0
  7295                           postinc0	equ	0xFEE
  7296                           wreg	equ	0xFE8
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _fround *****************
  7305 ;; Defined at:
  7306 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  prec            1    wreg     unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  prec            1    9[BANK1 ] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  3    0[BANK1 ] unsigned char 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:       10 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    9
  7327 ;; This function calls:
  7328 ;;		___awdiv
  7329 ;;		___awmod
  7330 ;;		___ftmul
  7331 ;;		___wmul
  7332 ;; This function is called by:
  7333 ;;		_printf
  7334 ;; This function uses a non-reentrant model
  7335 ;;
  7336                           
  7337                           	psect	text17
  7338  0026C4                     __ptext17:
  7339                           	opt stack 0
  7340  0026C4                     _fround:
  7341                           	opt stack 19
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;incstack = 0
  7345                           ;fround@prec stored from wreg
  7346  0026C4  0101               	movlb	1	; () banked
  7347  0026C6  6F09               	movwf	fround@prec& (0+255),b
  7348                           
  7349                           ;doprnt.c: 413: if(prec>=110)
  7350  0026C8  0E6D               	movlw	109
  7351  0026CA  0101               	movlb	1	; () banked
  7352  0026CC  6509               	cpfsgt	fround@prec& (0+255),b
  7353  0026CE  D0BA               	goto	l7230
  7354                           
  7355                           ; BSR set to: 1
  7356                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7357  0026D0  0E00               	movlw	0
  7358  0026D2  0100               	movlb	0	; () banked
  7359  0026D4  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7360  0026D6  0E03               	movlw	3
  7361  0026D8  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7362  0026DA  0E00               	movlw	0
  7363  0026DC  0100               	movlb	0	; () banked
  7364  0026DE  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7365  0026E0  0E0A               	movlw	10
  7366  0026E2  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7367  0026E4  0E00               	movlw	0
  7368  0026E6  0100               	movlb	0	; () banked
  7369  0026E8  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7370  0026EA  0E64               	movlw	100
  7371  0026EC  6FA0               	movwf	___awmod@divisor& (0+255),b
  7372  0026EE  C109  F09E         	movff	fround@prec,___awmod@dividend
  7373  0026F2  0100               	movlb	0	; () banked
  7374  0026F4  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7375  0026F6  EC26  F027         	call	___awmod	;wreg free
  7376  0026FA  C09E  F0A4         	movff	?___awmod,___awdiv@dividend
  7377  0026FE  C09F  F0A5         	movff	?___awmod+1,___awdiv@dividend+1
  7378  002702  EC12  F026         	call	___awdiv	;wreg free
  7379  002706  0E09               	movlw	9
  7380  002708  0100               	movlb	0	; () banked
  7381  00270A  25A4               	addwf	?___awdiv& (0+255),w,b
  7382  00270C  0100               	movlb	0	; () banked
  7383  00270E  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7384  002710  0E00               	movlw	0
  7385  002712  0100               	movlb	0	; () banked
  7386  002714  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7387  002716  0100               	movlb	0	; () banked
  7388  002718  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7389  00271A  ECAD  F02B         	call	___wmul	;wreg free
  7390  00271E  0EDF               	movlw	low __npowers_
  7391  002720  0100               	movlb	0	; () banked
  7392  002722  25AC               	addwf	?___wmul& (0+255),w,b
  7393  002724  6EF6               	movwf	tblptrl,c
  7394  002726  0EFD               	movlw	high __npowers_
  7395  002728  0100               	movlb	0	; () banked
  7396  00272A  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7397  00272C  6EF7               	movwf	tblptrh,c
  7398  00272E                     	if	0	;There are less than 3 active tblptr bytes
  7399  00272E                     	endif
  7400  00272E  0009               	tblrd		*+
  7401  002730  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7402  002734  0009               	tblrd		*+
  7403  002736  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7404  00273A  000A               	tblrd		*-
  7405  00273C  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7406  002740  0E00               	movlw	0
  7407  002742  0100               	movlb	0	; () banked
  7408  002744  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7409  002746  0E64               	movlw	100
  7410  002748  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7411  00274A  C109  F0A4         	movff	fround@prec,___awdiv@dividend
  7412  00274E  0100               	movlb	0	; () banked
  7413  002750  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7414  002752  EC12  F026         	call	___awdiv	;wreg free
  7415  002756  0E12               	movlw	18
  7416  002758  0100               	movlb	0	; () banked
  7417  00275A  25A4               	addwf	?___awdiv& (0+255),w,b
  7418  00275C  0100               	movlb	0	; () banked
  7419  00275E  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7420  002760  0E00               	movlw	0
  7421  002762  0100               	movlb	0	; () banked
  7422  002764  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7423  002766  0100               	movlb	0	; () banked
  7424  002768  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7425  00276A  0E00               	movlw	0
  7426  00276C  0100               	movlb	0	; () banked
  7427  00276E  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7428  002770  0E03               	movlw	3
  7429  002772  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7430  002774  ECAD  F02B         	call	___wmul	;wreg free
  7431  002778  0EDF               	movlw	low __npowers_
  7432  00277A  0100               	movlb	0	; () banked
  7433  00277C  25AC               	addwf	?___wmul& (0+255),w,b
  7434  00277E  6EF6               	movwf	tblptrl,c
  7435  002780  0EFD               	movlw	high __npowers_
  7436  002782  0100               	movlb	0	; () banked
  7437  002784  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7438  002786  6EF7               	movwf	tblptrh,c
  7439  002788                     	if	0	;There are less than 3 active tblptr bytes
  7440  002788                     	endif
  7441  002788  0009               	tblrd		*+
  7442  00278A  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7443  00278E  0009               	tblrd		*+
  7444  002790  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7445  002794  000A               	tblrd		*-
  7446  002796  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7447  00279A  ECFC  F01B         	call	___ftmul	;wreg free
  7448  00279E  C0B2  F106         	movff	?___ftmul,_fround$1306
  7449  0027A2  C0B3  F107         	movff	?___ftmul+1,_fround$1306+1
  7450  0027A6  C0B4  F108         	movff	?___ftmul+2,_fround$1306+2
  7451                           
  7452                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7453  0027AA  0E00               	movlw	0
  7454  0027AC  0100               	movlb	0	; () banked
  7455  0027AE  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7456  0027B0  0E03               	movlw	3
  7457  0027B2  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7458  0027B4  0E00               	movlw	0
  7459  0027B6  0100               	movlb	0	; () banked
  7460  0027B8  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7461  0027BA  0E0A               	movlw	10
  7462  0027BC  6FA0               	movwf	___awmod@divisor& (0+255),b
  7463  0027BE  C109  F09E         	movff	fround@prec,___awmod@dividend
  7464  0027C2  0100               	movlb	0	; () banked
  7465  0027C4  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7466  0027C6  EC26  F027         	call	___awmod	;wreg free
  7467  0027CA  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7468  0027CE  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7469  0027D2  ECAD  F02B         	call	___wmul	;wreg free
  7470  0027D6  0EDF               	movlw	low __npowers_
  7471  0027D8  0100               	movlb	0	; () banked
  7472  0027DA  25AC               	addwf	?___wmul& (0+255),w,b
  7473  0027DC  6EF6               	movwf	tblptrl,c
  7474  0027DE  0EFD               	movlw	high __npowers_
  7475  0027E0  0100               	movlb	0	; () banked
  7476  0027E2  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7477  0027E4  6EF7               	movwf	tblptrh,c
  7478  0027E6                     	if	0	;There are less than 3 active tblptr bytes
  7479  0027E6                     	endif
  7480  0027E6  0009               	tblrd		*+
  7481  0027E8  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7482  0027EC  0009               	tblrd		*+
  7483  0027EE  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7484  0027F2  000A               	tblrd		*-
  7485  0027F4  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7486  0027F8  C106  F0B2         	movff	_fround$1306,___ftmul@f1
  7487  0027FC  C107  F0B3         	movff	_fround$1306+1,___ftmul@f1+1
  7488  002800  C108  F0B4         	movff	_fround$1306+2,___ftmul@f1+2
  7489  002804  ECFC  F01B         	call	___ftmul	;wreg free
  7490  002808  C0B2  F103         	movff	?___ftmul,_fround$1307
  7491  00280C  C0B3  F104         	movff	?___ftmul+1,_fround$1307+1
  7492  002810  C0B4  F105         	movff	?___ftmul+2,_fround$1307+2
  7493                           
  7494                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7495  002814  C103  F0B2         	movff	_fround$1307,___ftmul@f1
  7496  002818  C104  F0B3         	movff	_fround$1307+1,___ftmul@f1+1
  7497  00281C  C105  F0B4         	movff	_fround$1307+2,___ftmul@f1+2
  7498  002820  0E00               	movlw	0
  7499  002822  0100               	movlb	0	; () banked
  7500  002824  6FB5               	movwf	___ftmul@f2& (0+255),b
  7501  002826  0E00               	movlw	0
  7502  002828  0100               	movlb	0	; () banked
  7503  00282A  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7504  00282C  0E3F               	movlw	63
  7505  00282E  0100               	movlb	0	; () banked
  7506  002830  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7507  002832  ECFC  F01B         	call	___ftmul	;wreg free
  7508  002836  C0B2  F100         	movff	?___ftmul,?_fround
  7509  00283A  C0B3  F101         	movff	?___ftmul+1,?_fround+1
  7510  00283E  C0B4  F102         	movff	?___ftmul+2,?_fround+2
  7511  002842  0012               	return	
  7512  002844                     l7230:
  7513                           
  7514                           ;doprnt.c: 415: else if(prec > 10)
  7515  002844  0E0A               	movlw	10
  7516  002846  0101               	movlb	1	; () banked
  7517  002848  6509               	cpfsgt	fround@prec& (0+255),b
  7518  00284A  D06E               	goto	l7238
  7519                           
  7520                           ; BSR set to: 1
  7521                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7522  00284C  0E00               	movlw	0
  7523  00284E  0100               	movlb	0	; () banked
  7524  002850  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7525  002852  0E03               	movlw	3
  7526  002854  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7527  002856  0E00               	movlw	0
  7528  002858  0100               	movlb	0	; () banked
  7529  00285A  6FA1               	movwf	(___awmod@divisor+1)& (0+255),b
  7530  00285C  0E0A               	movlw	10
  7531  00285E  6FA0               	movwf	___awmod@divisor& (0+255),b
  7532  002860  C109  F09E         	movff	fround@prec,___awmod@dividend
  7533  002864  0100               	movlb	0	; () banked
  7534  002866  6B9F               	clrf	(___awmod@dividend+1)& (0+255),b
  7535  002868  EC26  F027         	call	___awmod	;wreg free
  7536  00286C  C09E  F0AC         	movff	?___awmod,___wmul@multiplier
  7537  002870  C09F  F0AD         	movff	?___awmod+1,___wmul@multiplier+1
  7538  002874  ECAD  F02B         	call	___wmul	;wreg free
  7539  002878  0EDF               	movlw	low __npowers_
  7540  00287A  0100               	movlb	0	; () banked
  7541  00287C  25AC               	addwf	?___wmul& (0+255),w,b
  7542  00287E  6EF6               	movwf	tblptrl,c
  7543  002880  0EFD               	movlw	high __npowers_
  7544  002882  0100               	movlb	0	; () banked
  7545  002884  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7546  002886  6EF7               	movwf	tblptrh,c
  7547  002888                     	if	0	;There are less than 3 active tblptr bytes
  7548  002888                     	endif
  7549  002888  0009               	tblrd		*+
  7550  00288A  CFF5 F0B5          	movff	tablat,___ftmul@f2
  7551  00288E  0009               	tblrd		*+
  7552  002890  CFF5 F0B6          	movff	tablat,___ftmul@f2+1
  7553  002894  000A               	tblrd		*-
  7554  002896  CFF5 F0B7          	movff	tablat,___ftmul@f2+2
  7555  00289A  0E00               	movlw	0
  7556  00289C  0100               	movlb	0	; () banked
  7557  00289E  6FA7               	movwf	(___awdiv@divisor+1)& (0+255),b
  7558  0028A0  0E0A               	movlw	10
  7559  0028A2  6FA6               	movwf	___awdiv@divisor& (0+255),b
  7560  0028A4  C109  F0A4         	movff	fround@prec,___awdiv@dividend
  7561  0028A8  0100               	movlb	0	; () banked
  7562  0028AA  6BA5               	clrf	(___awdiv@dividend+1)& (0+255),b
  7563  0028AC  EC12  F026         	call	___awdiv	;wreg free
  7564  0028B0  0E09               	movlw	9
  7565  0028B2  0100               	movlb	0	; () banked
  7566  0028B4  25A4               	addwf	?___awdiv& (0+255),w,b
  7567  0028B6  0100               	movlb	0	; () banked
  7568  0028B8  6FAC               	movwf	___wmul@multiplier& (0+255),b
  7569  0028BA  0E00               	movlw	0
  7570  0028BC  0100               	movlb	0	; () banked
  7571  0028BE  21A5               	addwfc	(?___awdiv+1)& (0+255),w,b
  7572  0028C0  0100               	movlb	0	; () banked
  7573  0028C2  6FAD               	movwf	(___wmul@multiplier+1)& (0+255),b
  7574  0028C4  0E00               	movlw	0
  7575  0028C6  0100               	movlb	0	; () banked
  7576  0028C8  6FAF               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7577  0028CA  0E03               	movlw	3
  7578  0028CC  6FAE               	movwf	___wmul@multiplicand& (0+255),b
  7579  0028CE  ECAD  F02B         	call	___wmul	;wreg free
  7580  0028D2  0EDF               	movlw	low __npowers_
  7581  0028D4  0100               	movlb	0	; () banked
  7582  0028D6  25AC               	addwf	?___wmul& (0+255),w,b
  7583  0028D8  6EF6               	movwf	tblptrl,c
  7584  0028DA  0EFD               	movlw	high __npowers_
  7585  0028DC  0100               	movlb	0	; () banked
  7586  0028DE  21AD               	addwfc	(?___wmul+1)& (0+255),w,b
  7587  0028E0  6EF7               	movwf	tblptrh,c
  7588  0028E2                     	if	0	;There are less than 3 active tblptr bytes
  7589  0028E2                     	endif
  7590  0028E2  0009               	tblrd		*+
  7591  0028E4  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7592  0028E8  0009               	tblrd		*+
  7593  0028EA  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7594  0028EE  000A               	tblrd		*-
  7595  0028F0  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7596  0028F4  ECFC  F01B         	call	___ftmul	;wreg free
  7597  0028F8  C0B2  F106         	movff	?___ftmul,_fround$1306
  7598  0028FC  C0B3  F107         	movff	?___ftmul+1,_fround$1306+1
  7599  002900  C0B4  F108         	movff	?___ftmul+2,_fround$1306+2
  7600                           
  7601                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7602  002904  C106  F0B2         	movff	_fround$1306,___ftmul@f1
  7603  002908  C107  F0B3         	movff	_fround$1306+1,___ftmul@f1+1
  7604  00290C  C108  F0B4         	movff	_fround$1306+2,___ftmul@f1+2
  7605  002910  0E00               	movlw	0
  7606  002912  0100               	movlb	0	; () banked
  7607  002914  6FB5               	movwf	___ftmul@f2& (0+255),b
  7608  002916  0E00               	movlw	0
  7609  002918  0100               	movlb	0	; () banked
  7610  00291A  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7611  00291C  0E3F               	movlw	63
  7612  00291E  0100               	movlb	0	; () banked
  7613  002920  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7614  002922  ECFC  F01B         	call	___ftmul	;wreg free
  7615  002926  D787               	goto	L14
  7616  002928                     l7238:
  7617                           
  7618                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7619  002928  0101               	movlb	1	; () banked
  7620  00292A  5109               	movf	fround@prec& (0+255),w,b
  7621  00292C  0D03               	mullw	3
  7622  00292E  0EDF               	movlw	low __npowers_
  7623  002930  24F3               	addwf	prodl,w,c
  7624  002932  6EF6               	movwf	tblptrl,c
  7625  002934  0EFD               	movlw	high __npowers_
  7626  002936  20F4               	addwfc	prodh,w,c
  7627  002938  6EF7               	movwf	tblptrh,c
  7628  00293A                     	if	0	;There are less than 3 active tblptr bytes
  7629  00293A                     	endif
  7630  00293A  0009               	tblrd		*+
  7631  00293C  CFF5 F0B2          	movff	tablat,___ftmul@f1
  7632  002940  0009               	tblrd		*+
  7633  002942  CFF5 F0B3          	movff	tablat,___ftmul@f1+1
  7634  002946  000A               	tblrd		*-
  7635  002948  CFF5 F0B4          	movff	tablat,___ftmul@f1+2
  7636  00294C  0E00               	movlw	0
  7637  00294E  0100               	movlb	0	; () banked
  7638  002950  6FB5               	movwf	___ftmul@f2& (0+255),b
  7639  002952  0E00               	movlw	0
  7640  002954  0100               	movlb	0	; () banked
  7641  002956  6FB6               	movwf	(___ftmul@f2+1)& (0+255),b
  7642  002958  0E3F               	movlw	63
  7643  00295A  0100               	movlb	0	; () banked
  7644  00295C  6FB7               	movwf	(___ftmul@f2+2)& (0+255),b
  7645  00295E  ECFC  F01B         	call	___ftmul	;wreg free
  7646  002962  C0B2  F100         	movff	?___ftmul,?_fround
  7647  002966  C0B3  F101         	movff	?___ftmul+1,?_fround+1
  7648  00296A  C0B4  F102         	movff	?___ftmul+2,?_fround+2
  7649  00296E  0012               	return	
  7650  002970                     __end_of_fround:
  7651                           	opt stack 0
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           intcon	equ	0xFF2
  7659                           intcon2	equ	0xFF1
  7660                           intcon3	equ	0xFF0
  7661                           postinc0	equ	0xFEE
  7662                           wreg	equ	0xFE8
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function ___wmul *****************
  7671 ;; Defined at:
  7672 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  multiplier      2   44[BANK0 ] unsigned int 
  7675 ;;  multiplicand    2   46[BANK0 ] unsigned int 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  product         2   48[BANK0 ] unsigned int 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  2   44[BANK0 ] unsigned int 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0, prodl, prodh
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;Total ram usage:        6 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    7
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_fround
  7698 ;;		_scale
  7699 ;;		_printf
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text18
  7704  00575A                     __ptext18:
  7705                           	opt stack 0
  7706  00575A                     ___wmul:
  7707                           	opt stack 20
  7708                           
  7709                           ;incstack = 0
  7710  00575A  0100               	movlb	0	; () banked
  7711  00575C  51AC               	movf	___wmul@multiplier& (0+255),w,b
  7712  00575E  0100               	movlb	0	; () banked
  7713  005760  03AE               	mulwf	___wmul@multiplicand& (0+255),b
  7714  005762  CFF3 F0B0          	movff	prodl,___wmul@product
  7715  005766  CFF4 F0B1          	movff	prodh,___wmul@product+1
  7716  00576A  0100               	movlb	0	; () banked
  7717  00576C  51AC               	movf	___wmul@multiplier& (0+255),w,b
  7718  00576E  0100               	movlb	0	; () banked
  7719  005770  03AF               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7720  005772  50F3               	movf	prodl,w,c
  7721  005774  0100               	movlb	0	; () banked
  7722  005776  27B1               	addwf	(___wmul@product+1)& (0+255),f,b
  7723  005778  0100               	movlb	0	; () banked
  7724  00577A  51AD               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7725  00577C  0100               	movlb	0	; () banked
  7726  00577E  03AE               	mulwf	___wmul@multiplicand& (0+255),b
  7727  005780  50F3               	movf	prodl,w,c
  7728  005782  0100               	movlb	0	; () banked
  7729  005784  27B1               	addwf	(___wmul@product+1)& (0+255),f,b
  7730                           
  7731                           ; BSR set to: 0
  7732  005786  C0B0  F0AC         	movff	___wmul@product,?___wmul
  7733  00578A  C0B1  F0AD         	movff	___wmul@product+1,?___wmul+1
  7734  00578E  0012               	return	
  7735  005790                     __end_of___wmul:
  7736                           	opt stack 0
  7737                           tblptru	equ	0xFF8
  7738                           tblptrh	equ	0xFF7
  7739                           tblptrl	equ	0xFF6
  7740                           tablat	equ	0xFF5
  7741                           prodh	equ	0xFF4
  7742                           prodl	equ	0xFF3
  7743                           intcon	equ	0xFF2
  7744                           intcon2	equ	0xFF1
  7745                           intcon3	equ	0xFF0
  7746                           postinc0	equ	0xFEE
  7747                           wreg	equ	0xFE8
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function ___ftmul *****************
  7756 ;; Defined at:
  7757 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  f1              3   50[BANK0 ] float 
  7760 ;;  f2              3   53[BANK0 ] float 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  f3_as_produc    3   60[BANK0 ] unsigned um
  7763 ;;  sign            1   64[BANK0 ] unsigned char 
  7764 ;;  cntr            1   63[BANK0 ] unsigned char 
  7765 ;;  exp             1   59[BANK0 ] unsigned char 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  3   50[BANK0 ] float 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7775 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;Total ram usage:       15 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    8
  7782 ;; This function calls:
  7783 ;;		___ftpack
  7784 ;; This function is called by:
  7785 ;;		_fround
  7786 ;;		_scale
  7787 ;;		_printf
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text19
  7792  0037F8                     __ptext19:
  7793                           	opt stack 0
  7794  0037F8                     ___ftmul:
  7795                           	opt stack 19
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;incstack = 0
  7799  0037F8  C0B4  F0B8         	movff	___ftmul@f1+2,??___ftmul
  7800  0037FC  0100               	movlb	0	; () banked
  7801  0037FE  6BB9               	clrf	(??___ftmul+1)& (0+255),b
  7802  003800  6BBA               	clrf	(??___ftmul+2)& (0+255),b
  7803  003802  0100               	movlb	0	; () banked
  7804  003804  35B3               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7805  003806  0100               	movlb	0	; () banked
  7806  003808  37B8               	rlcf	??___ftmul& (0+255),f,b
  7807  00380A  E301               	bnc	u7911
  7808  00380C  81B9               	bsf	(??___ftmul+1)& (0+255),0,b
  7809  00380E                     u7911:
  7810  00380E  0100               	movlb	0	; () banked
  7811  003810  51B8               	movf	??___ftmul& (0+255),w,b
  7812  003812  0100               	movlb	0	; () banked
  7813  003814  6FBB               	movwf	___ftmul@exp& (0+255),b
  7814  003816  0100               	movlb	0	; () banked
  7815  003818  51BB               	movf	___ftmul@exp& (0+255),w,b
  7816  00381A  A4D8               	btfss	status,2,c
  7817  00381C  D00A               	goto	l7098
  7818                           
  7819                           ; BSR set to: 0
  7820  00381E  0E00               	movlw	0
  7821  003820  0100               	movlb	0	; () banked
  7822  003822  6FB2               	movwf	?___ftmul& (0+255),b
  7823  003824  0E00               	movlw	0
  7824  003826  0100               	movlb	0	; () banked
  7825  003828  6FB3               	movwf	(?___ftmul+1)& (0+255),b
  7826  00382A  0E00               	movlw	0
  7827  00382C  0100               	movlb	0	; () banked
  7828  00382E  6FB4               	movwf	(?___ftmul+2)& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831  003830  0012               	return	
  7832  003832                     l7098:
  7833                           
  7834                           ; BSR set to: 0
  7835  003832  C0B7  F0B8         	movff	___ftmul@f2+2,??___ftmul
  7836  003836  0100               	movlb	0	; () banked
  7837  003838  6BB9               	clrf	(??___ftmul+1)& (0+255),b
  7838  00383A  6BBA               	clrf	(??___ftmul+2)& (0+255),b
  7839  00383C  0100               	movlb	0	; () banked
  7840  00383E  35B6               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7841  003840  0100               	movlb	0	; () banked
  7842  003842  37B8               	rlcf	??___ftmul& (0+255),f,b
  7843  003844  E301               	bnc	u7931
  7844  003846  81B9               	bsf	(??___ftmul+1)& (0+255),0,b
  7845  003848                     u7931:
  7846  003848  0100               	movlb	0	; () banked
  7847  00384A  51B8               	movf	??___ftmul& (0+255),w,b
  7848  00384C  0100               	movlb	0	; () banked
  7849  00384E  6FC0               	movwf	___ftmul@sign& (0+255),b
  7850  003850  0100               	movlb	0	; () banked
  7851  003852  51C0               	movf	___ftmul@sign& (0+255),w,b
  7852  003854  A4D8               	btfss	status,2,c
  7853  003856  D00A               	goto	l7104
  7854                           
  7855                           ; BSR set to: 0
  7856  003858  0E00               	movlw	0
  7857  00385A  0100               	movlb	0	; () banked
  7858  00385C  6FB2               	movwf	?___ftmul& (0+255),b
  7859  00385E  0E00               	movlw	0
  7860  003860  0100               	movlb	0	; () banked
  7861  003862  6FB3               	movwf	(?___ftmul+1)& (0+255),b
  7862  003864  0E00               	movlw	0
  7863  003866  0100               	movlb	0	; () banked
  7864  003868  6FB4               	movwf	(?___ftmul+2)& (0+255),b
  7865                           
  7866                           ; BSR set to: 0
  7867  00386A  0012               	return	
  7868  00386C                     l7104:
  7869                           
  7870                           ; BSR set to: 0
  7871  00386C  0100               	movlb	0	; () banked
  7872  00386E  51C0               	movf	___ftmul@sign& (0+255),w,b
  7873  003870  0F7B               	addlw	123
  7874  003872  0100               	movlb	0	; () banked
  7875  003874  27BB               	addwf	___ftmul@exp& (0+255),f,b
  7876                           
  7877                           ; BSR set to: 0
  7878  003876  C0B4  F0C0         	movff	___ftmul@f1+2,___ftmul@sign
  7879  00387A  0100               	movlb	0	; () banked
  7880  00387C  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  7881  00387E  0100               	movlb	0	; () banked
  7882  003880  1BC0               	xorwf	___ftmul@sign& (0+255),f,b
  7883  003882  0E80               	movlw	128
  7884  003884  0100               	movlb	0	; () banked
  7885  003886  17C0               	andwf	___ftmul@sign& (0+255),f,b
  7886                           
  7887                           ; BSR set to: 0
  7888  003888  0100               	movlb	0	; () banked
  7889  00388A  8FB3               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7890                           
  7891                           ; BSR set to: 0
  7892  00388C  0100               	movlb	0	; () banked
  7893  00388E  8FB6               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7894                           
  7895                           ; BSR set to: 0
  7896  003890  0EFF               	movlw	255
  7897  003892  0100               	movlb	0	; () banked
  7898  003894  17B5               	andwf	___ftmul@f2& (0+255),f,b
  7899  003896  0EFF               	movlw	255
  7900  003898  0100               	movlb	0	; () banked
  7901  00389A  17B6               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7902  00389C  0E00               	movlw	0
  7903  00389E  0100               	movlb	0	; () banked
  7904  0038A0  17B7               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7905                           
  7906                           ; BSR set to: 0
  7907  0038A2  0E00               	movlw	0
  7908  0038A4  0100               	movlb	0	; () banked
  7909  0038A6  6FBC               	movwf	___ftmul@f3_as_product& (0+255),b
  7910  0038A8  0E00               	movlw	0
  7911  0038AA  0100               	movlb	0	; () banked
  7912  0038AC  6FBD               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7913  0038AE  0E00               	movlw	0
  7914  0038B0  0100               	movlb	0	; () banked
  7915  0038B2  6FBE               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7916                           
  7917                           ; BSR set to: 0
  7918  0038B4  0E07               	movlw	7
  7919  0038B6  0100               	movlb	0	; () banked
  7920  0038B8  6FBF               	movwf	___ftmul@cntr& (0+255),b
  7921  0038BA                     l7118:
  7922                           
  7923                           ; BSR set to: 0
  7924  0038BA  0100               	movlb	0	; () banked
  7925  0038BC  A1B2               	btfss	___ftmul@f1& (0+255),0,b
  7926  0038BE  D00C               	goto	l7122
  7927                           
  7928                           ; BSR set to: 0
  7929  0038C0  0100               	movlb	0	; () banked
  7930  0038C2  51B5               	movf	___ftmul@f2& (0+255),w,b
  7931  0038C4  0100               	movlb	0	; () banked
  7932  0038C6  27BC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7933  0038C8  0100               	movlb	0	; () banked
  7934  0038CA  51B6               	movf	(___ftmul@f2+1)& (0+255),w,b
  7935  0038CC  0100               	movlb	0	; () banked
  7936  0038CE  23BD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7937  0038D0  0100               	movlb	0	; () banked
  7938  0038D2  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  7939  0038D4  0100               	movlb	0	; () banked
  7940  0038D6  23BE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7941  0038D8                     l7122:
  7942                           
  7943                           ; BSR set to: 0
  7944  0038D8  0100               	movlb	0	; () banked
  7945  0038DA  90D8               	bcf	status,0,c
  7946  0038DC  33B4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7947  0038DE  33B3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7948  0038E0  33B2               	rrcf	___ftmul@f1& (0+255),f,b
  7949  0038E2  0100               	movlb	0	; () banked
  7950  0038E4  90D8               	bcf	status,0,c
  7951  0038E6  37B5               	rlcf	___ftmul@f2& (0+255),f,b
  7952  0038E8  37B6               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7953  0038EA  37B7               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 0
  7956  0038EC  0100               	movlb	0	; () banked
  7957  0038EE  2FBF               	decfsz	___ftmul@cntr& (0+255),f,b
  7958  0038F0  D7E4               	goto	l7118
  7959                           
  7960                           ; BSR set to: 0
  7961                           
  7962                           ; BSR set to: 0
  7963  0038F2  0E09               	movlw	9
  7964  0038F4  0100               	movlb	0	; () banked
  7965  0038F6  6FBF               	movwf	___ftmul@cntr& (0+255),b
  7966  0038F8                     l7128:
  7967                           
  7968                           ; BSR set to: 0
  7969  0038F8  0100               	movlb	0	; () banked
  7970  0038FA  A1B2               	btfss	___ftmul@f1& (0+255),0,b
  7971  0038FC  D00C               	goto	l7132
  7972                           
  7973                           ; BSR set to: 0
  7974  0038FE  0100               	movlb	0	; () banked
  7975  003900  51B5               	movf	___ftmul@f2& (0+255),w,b
  7976  003902  0100               	movlb	0	; () banked
  7977  003904  27BC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7978  003906  0100               	movlb	0	; () banked
  7979  003908  51B6               	movf	(___ftmul@f2+1)& (0+255),w,b
  7980  00390A  0100               	movlb	0	; () banked
  7981  00390C  23BD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7982  00390E  0100               	movlb	0	; () banked
  7983  003910  51B7               	movf	(___ftmul@f2+2)& (0+255),w,b
  7984  003912  0100               	movlb	0	; () banked
  7985  003914  23BE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7986  003916                     l7132:
  7987                           
  7988                           ; BSR set to: 0
  7989  003916  0100               	movlb	0	; () banked
  7990  003918  90D8               	bcf	status,0,c
  7991  00391A  33B4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7992  00391C  33B3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7993  00391E  33B2               	rrcf	___ftmul@f1& (0+255),f,b
  7994  003920  0100               	movlb	0	; () banked
  7995  003922  90D8               	bcf	status,0,c
  7996  003924  33BE               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7997  003926  33BD               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7998  003928  33BC               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7999                           
  8000                           ; BSR set to: 0
  8001  00392A  0100               	movlb	0	; () banked
  8002  00392C  2FBF               	decfsz	___ftmul@cntr& (0+255),f,b
  8003  00392E  D7E4               	goto	l7128
  8004                           
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  003930  C0BC  F09E         	movff	___ftmul@f3_as_product,___ftpack@arg
  8009  003934  C0BD  F09F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8010  003938  C0BE  F0A0         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8011  00393C  C0BB  F0A1         	movff	___ftmul@exp,___ftpack@exp
  8012  003940  C0C0  F0A2         	movff	___ftmul@sign,___ftpack@sign
  8013  003944  ECAF  F01F         	call	___ftpack	;wreg free
  8014  003948  C09E  F0B2         	movff	?___ftpack,?___ftmul
  8015  00394C  C09F  F0B3         	movff	?___ftpack+1,?___ftmul+1
  8016  003950  C0A0  F0B4         	movff	?___ftpack+2,?___ftmul+2
  8017  003954  0012               	return	
  8018  003956                     __end_of___ftmul:
  8019                           	opt stack 0
  8020                           tblptru	equ	0xFF8
  8021                           tblptrh	equ	0xFF7
  8022                           tblptrl	equ	0xFF6
  8023                           tablat	equ	0xFF5
  8024                           prodh	equ	0xFF4
  8025                           prodl	equ	0xFF3
  8026                           intcon	equ	0xFF2
  8027                           intcon2	equ	0xFF1
  8028                           intcon3	equ	0xFF0
  8029                           postinc0	equ	0xFEE
  8030                           wreg	equ	0xFE8
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function ___awmod *****************
  8039 ;; Defined at:
  8040 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  dividend        2   30[BANK0 ] int 
  8043 ;;  divisor         2   32[BANK0 ] int 
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  sign            1   35[BANK0 ] unsigned char 
  8046 ;;  counter         1   34[BANK0 ] unsigned char 
  8047 ;; Return value:  Size  Location     Type
  8048 ;;                  2   30[BANK0 ] int 
  8049 ;; Registers used:
  8050 ;;		wreg, status,2, status,0
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : 0/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8056 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;Total ram usage:        6 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; Hardware stack levels required when called:    7
  8063 ;; This function calls:
  8064 ;;		Nothing
  8065 ;; This function is called by:
  8066 ;;		_bottle_count
  8067 ;;		_fround
  8068 ;;		_scale
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text20
  8073  004E4C                     __ptext20:
  8074                           	opt stack 0
  8075  004E4C                     ___awmod:
  8076                           	opt stack 20
  8077                           
  8078                           ;incstack = 0
  8079  004E4C  0E00               	movlw	0
  8080  004E4E  0100               	movlb	0	; () banked
  8081  004E50  6FA3               	movwf	___awmod@sign& (0+255),b
  8082                           
  8083                           ; BSR set to: 0
  8084  004E52  0100               	movlb	0	; () banked
  8085  004E54  AF9F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8086  004E56  D008               	goto	l7192
  8087                           
  8088                           ; BSR set to: 0
  8089  004E58  0100               	movlb	0	; () banked
  8090  004E5A  6D9E               	negf	___awmod@dividend& (0+255),b
  8091  004E5C  1F9F               	comf	(___awmod@dividend+1)& (0+255),f,b
  8092  004E5E  B0D8               	btfsc	status,0,c
  8093  004E60  2B9F               	incf	(___awmod@dividend+1)& (0+255),f,b
  8094                           
  8095                           ; BSR set to: 0
  8096  004E62  0E01               	movlw	1
  8097  004E64  0100               	movlb	0	; () banked
  8098  004E66  6FA3               	movwf	___awmod@sign& (0+255),b
  8099  004E68                     l7192:
  8100                           
  8101                           ; BSR set to: 0
  8102  004E68  0100               	movlb	0	; () banked
  8103  004E6A  AFA1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8104  004E6C  D005               	goto	l7196
  8105                           
  8106                           ; BSR set to: 0
  8107  004E6E  0100               	movlb	0	; () banked
  8108  004E70  6DA0               	negf	___awmod@divisor& (0+255),b
  8109  004E72  1FA1               	comf	(___awmod@divisor+1)& (0+255),f,b
  8110  004E74  B0D8               	btfsc	status,0,c
  8111  004E76  2BA1               	incf	(___awmod@divisor+1)& (0+255),f,b
  8112  004E78                     l7196:
  8113                           
  8114                           ; BSR set to: 0
  8115  004E78  0100               	movlb	0	; () banked
  8116  004E7A  51A0               	movf	___awmod@divisor& (0+255),w,b
  8117  004E7C  0100               	movlb	0	; () banked
  8118  004E7E  11A1               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8119  004E80  B4D8               	btfsc	status,2,c
  8120  004E82  D026               	goto	l7212
  8121                           
  8122                           ; BSR set to: 0
  8123  004E84  0E01               	movlw	1
  8124  004E86  0100               	movlb	0	; () banked
  8125  004E88  6FA2               	movwf	___awmod@counter& (0+255),b
  8126  004E8A  D006               	goto	l7202
  8127  004E8C                     l7200:
  8128                           
  8129                           ; BSR set to: 0
  8130  004E8C  0100               	movlb	0	; () banked
  8131  004E8E  90D8               	bcf	status,0,c
  8132  004E90  37A0               	rlcf	___awmod@divisor& (0+255),f,b
  8133  004E92  37A1               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8134  004E94  0100               	movlb	0	; () banked
  8135  004E96  2BA2               	incf	___awmod@counter& (0+255),f,b
  8136  004E98                     l7202:
  8137                           
  8138                           ; BSR set to: 0
  8139  004E98  0100               	movlb	0	; () banked
  8140  004E9A  AFA1               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8141  004E9C  D7F7               	goto	l7200
  8142  004E9E                     l7204:
  8143                           
  8144                           ; BSR set to: 0
  8145  004E9E  0100               	movlb	0	; () banked
  8146  004EA0  51A0               	movf	___awmod@divisor& (0+255),w,b
  8147  004EA2  0100               	movlb	0	; () banked
  8148  004EA4  5D9E               	subwf	___awmod@dividend& (0+255),w,b
  8149  004EA6  0100               	movlb	0	; () banked
  8150  004EA8  51A1               	movf	(___awmod@divisor+1)& (0+255),w,b
  8151  004EAA  0100               	movlb	0	; () banked
  8152  004EAC  599F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8153  004EAE  A0D8               	btfss	status,0,c
  8154  004EB0  D008               	goto	l7208
  8155                           
  8156                           ; BSR set to: 0
  8157  004EB2  0100               	movlb	0	; () banked
  8158  004EB4  51A0               	movf	___awmod@divisor& (0+255),w,b
  8159  004EB6  0100               	movlb	0	; () banked
  8160  004EB8  5F9E               	subwf	___awmod@dividend& (0+255),f,b
  8161  004EBA  0100               	movlb	0	; () banked
  8162  004EBC  51A1               	movf	(___awmod@divisor+1)& (0+255),w,b
  8163  004EBE  0100               	movlb	0	; () banked
  8164  004EC0  5B9F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8165  004EC2                     l7208:
  8166                           
  8167                           ; BSR set to: 0
  8168  004EC2  0100               	movlb	0	; () banked
  8169  004EC4  90D8               	bcf	status,0,c
  8170  004EC6  33A1               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8171  004EC8  33A0               	rrcf	___awmod@divisor& (0+255),f,b
  8172                           
  8173                           ; BSR set to: 0
  8174  004ECA  0100               	movlb	0	; () banked
  8175  004ECC  2FA2               	decfsz	___awmod@counter& (0+255),f,b
  8176  004ECE  D7E7               	goto	l7204
  8177  004ED0                     l7212:
  8178                           
  8179                           ; BSR set to: 0
  8180  004ED0  0100               	movlb	0	; () banked
  8181  004ED2  51A3               	movf	___awmod@sign& (0+255),w,b
  8182  004ED4  0100               	movlb	0	; () banked
  8183  004ED6  B4D8               	btfsc	status,2,c
  8184  004ED8  D005               	goto	l7216
  8185                           
  8186                           ; BSR set to: 0
  8187  004EDA  0100               	movlb	0	; () banked
  8188  004EDC  6D9E               	negf	___awmod@dividend& (0+255),b
  8189  004EDE  1F9F               	comf	(___awmod@dividend+1)& (0+255),f,b
  8190  004EE0  B0D8               	btfsc	status,0,c
  8191  004EE2  2B9F               	incf	(___awmod@dividend+1)& (0+255),f,b
  8192  004EE4                     l7216:
  8193                           
  8194                           ; BSR set to: 0
  8195  004EE4  C09E  F09E         	movff	___awmod@dividend,?___awmod
  8196  004EE8  C09F  F09F         	movff	___awmod@dividend+1,?___awmod+1
  8197  004EEC  0012               	return	
  8198  004EEE                     __end_of___awmod:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           intcon	equ	0xFF2
  8207                           intcon2	equ	0xFF1
  8208                           intcon3	equ	0xFF0
  8209                           postinc0	equ	0xFEE
  8210                           wreg	equ	0xFE8
  8211                           indf2	equ	0xFDF
  8212                           postinc2	equ	0xFDE
  8213                           postdec2	equ	0xFDD
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function ___awdiv *****************
  8219 ;; Defined at:
  8220 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;  dividend        2   36[BANK0 ] int 
  8223 ;;  divisor         2   38[BANK0 ] int 
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  quotient        2   42[BANK0 ] int 
  8226 ;;  sign            1   41[BANK0 ] unsigned char 
  8227 ;;  counter         1   40[BANK0 ] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  2   36[BANK0 ] int 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;Total ram usage:        8 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    7
  8244 ;; This function calls:
  8245 ;;		Nothing
  8246 ;; This function is called by:
  8247 ;;		_fround
  8248 ;;		_scale
  8249 ;;		_printf
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text21
  8254  004C24                     __ptext21:
  8255                           	opt stack 0
  8256  004C24                     ___awdiv:
  8257                           	opt stack 20
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;incstack = 0
  8261  004C24  0E00               	movlw	0
  8262  004C26  0100               	movlb	0	; () banked
  8263  004C28  6FA9               	movwf	___awdiv@sign& (0+255),b
  8264                           
  8265                           ; BSR set to: 0
  8266  004C2A  0100               	movlb	0	; () banked
  8267  004C2C  AFA7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8268  004C2E  D008               	goto	l7148
  8269                           
  8270                           ; BSR set to: 0
  8271  004C30  0100               	movlb	0	; () banked
  8272  004C32  6DA6               	negf	___awdiv@divisor& (0+255),b
  8273  004C34  1FA7               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8274  004C36  B0D8               	btfsc	status,0,c
  8275  004C38  2BA7               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8276                           
  8277                           ; BSR set to: 0
  8278  004C3A  0E01               	movlw	1
  8279  004C3C  0100               	movlb	0	; () banked
  8280  004C3E  6FA9               	movwf	___awdiv@sign& (0+255),b
  8281  004C40                     l7148:
  8282                           
  8283                           ; BSR set to: 0
  8284  004C40  0100               	movlb	0	; () banked
  8285  004C42  AFA5               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8286  004C44  D008               	goto	l7154
  8287                           
  8288                           ; BSR set to: 0
  8289  004C46  0100               	movlb	0	; () banked
  8290  004C48  6DA4               	negf	___awdiv@dividend& (0+255),b
  8291  004C4A  1FA5               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8292  004C4C  B0D8               	btfsc	status,0,c
  8293  004C4E  2BA5               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8294                           
  8295                           ; BSR set to: 0
  8296  004C50  0E01               	movlw	1
  8297  004C52  0100               	movlb	0	; () banked
  8298  004C54  1BA9               	xorwf	___awdiv@sign& (0+255),f,b
  8299  004C56                     l7154:
  8300                           
  8301                           ; BSR set to: 0
  8302  004C56  0E00               	movlw	0
  8303  004C58  0100               	movlb	0	; () banked
  8304  004C5A  6FAB               	movwf	(___awdiv@quotient+1)& (0+255),b
  8305  004C5C  0E00               	movlw	0
  8306  004C5E  6FAA               	movwf	___awdiv@quotient& (0+255),b
  8307                           
  8308                           ; BSR set to: 0
  8309  004C60  0100               	movlb	0	; () banked
  8310  004C62  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8311  004C64  0100               	movlb	0	; () banked
  8312  004C66  11A7               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8313  004C68  B4D8               	btfsc	status,2,c
  8314  004C6A  D02C               	goto	l7176
  8315                           
  8316                           ; BSR set to: 0
  8317  004C6C  0E01               	movlw	1
  8318  004C6E  0100               	movlb	0	; () banked
  8319  004C70  6FA8               	movwf	___awdiv@counter& (0+255),b
  8320  004C72  D006               	goto	l7162
  8321  004C74                     l7160:
  8322                           
  8323                           ; BSR set to: 0
  8324  004C74  0100               	movlb	0	; () banked
  8325  004C76  90D8               	bcf	status,0,c
  8326  004C78  37A6               	rlcf	___awdiv@divisor& (0+255),f,b
  8327  004C7A  37A7               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8328  004C7C  0100               	movlb	0	; () banked
  8329  004C7E  2BA8               	incf	___awdiv@counter& (0+255),f,b
  8330  004C80                     l7162:
  8331                           
  8332                           ; BSR set to: 0
  8333  004C80  0100               	movlb	0	; () banked
  8334  004C82  AFA7               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8335  004C84  D7F7               	goto	l7160
  8336  004C86                     l7164:
  8337                           
  8338                           ; BSR set to: 0
  8339  004C86  0100               	movlb	0	; () banked
  8340  004C88  90D8               	bcf	status,0,c
  8341  004C8A  37AA               	rlcf	___awdiv@quotient& (0+255),f,b
  8342  004C8C  37AB               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8343                           
  8344                           ; BSR set to: 0
  8345  004C8E  0100               	movlb	0	; () banked
  8346  004C90  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8347  004C92  0100               	movlb	0	; () banked
  8348  004C94  5DA4               	subwf	___awdiv@dividend& (0+255),w,b
  8349  004C96  0100               	movlb	0	; () banked
  8350  004C98  51A7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8351  004C9A  0100               	movlb	0	; () banked
  8352  004C9C  59A5               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8353  004C9E  A0D8               	btfss	status,0,c
  8354  004CA0  D00A               	goto	l7172
  8355                           
  8356                           ; BSR set to: 0
  8357  004CA2  0100               	movlb	0	; () banked
  8358  004CA4  51A6               	movf	___awdiv@divisor& (0+255),w,b
  8359  004CA6  0100               	movlb	0	; () banked
  8360  004CA8  5FA4               	subwf	___awdiv@dividend& (0+255),f,b
  8361  004CAA  0100               	movlb	0	; () banked
  8362  004CAC  51A7               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8363  004CAE  0100               	movlb	0	; () banked
  8364  004CB0  5BA5               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8365                           
  8366                           ; BSR set to: 0
  8367  004CB2  0100               	movlb	0	; () banked
  8368  004CB4  81AA               	bsf	___awdiv@quotient& (0+255),0,b
  8369  004CB6                     l7172:
  8370                           
  8371                           ; BSR set to: 0
  8372  004CB6  0100               	movlb	0	; () banked
  8373  004CB8  90D8               	bcf	status,0,c
  8374  004CBA  33A7               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8375  004CBC  33A6               	rrcf	___awdiv@divisor& (0+255),f,b
  8376                           
  8377                           ; BSR set to: 0
  8378  004CBE  0100               	movlb	0	; () banked
  8379  004CC0  2FA8               	decfsz	___awdiv@counter& (0+255),f,b
  8380  004CC2  D7E1               	goto	l7164
  8381  004CC4                     l7176:
  8382                           
  8383                           ; BSR set to: 0
  8384  004CC4  0100               	movlb	0	; () banked
  8385  004CC6  51A9               	movf	___awdiv@sign& (0+255),w,b
  8386  004CC8  0100               	movlb	0	; () banked
  8387  004CCA  B4D8               	btfsc	status,2,c
  8388  004CCC  D005               	goto	l7180
  8389                           
  8390                           ; BSR set to: 0
  8391  004CCE  0100               	movlb	0	; () banked
  8392  004CD0  6DAA               	negf	___awdiv@quotient& (0+255),b
  8393  004CD2  1FAB               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8394  004CD4  B0D8               	btfsc	status,0,c
  8395  004CD6  2BAB               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8396  004CD8                     l7180:
  8397                           
  8398                           ; BSR set to: 0
  8399  004CD8  C0AA  F0A4         	movff	___awdiv@quotient,?___awdiv
  8400  004CDC  C0AB  F0A5         	movff	___awdiv@quotient+1,?___awdiv+1
  8401  004CE0  0012               	return	
  8402  004CE2                     __end_of___awdiv:
  8403                           	opt stack 0
  8404                           tblptru	equ	0xFF8
  8405                           tblptrh	equ	0xFF7
  8406                           tblptrl	equ	0xFF6
  8407                           tablat	equ	0xFF5
  8408                           prodh	equ	0xFF4
  8409                           prodl	equ	0xFF3
  8410                           intcon	equ	0xFF2
  8411                           intcon2	equ	0xFF1
  8412                           intcon3	equ	0xFF0
  8413                           postinc0	equ	0xFEE
  8414                           wreg	equ	0xFE8
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function __tdiv_to_l_ *****************
  8423 ;; Defined at:
  8424 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  f1              3   30[BANK0 ] float 
  8427 ;;  f2              3   33[BANK0 ] float 
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;  quot            4   39[BANK0 ] unsigned long 
  8430 ;;  exp1            1   44[BANK0 ] unsigned char 
  8431 ;;  cntr            1   43[BANK0 ] unsigned char 
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  4   30[BANK0 ] unsigned long 
  8434 ;; Registers used:
  8435 ;;		wreg, status,2, status,0
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:       15 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    7
  8448 ;; This function calls:
  8449 ;;		Nothing
  8450 ;; This function is called by:
  8451 ;;		_printf
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text22
  8456  00335C                     __ptext22:
  8457                           	opt stack 0
  8458  00335C                     __tdiv_to_l_:
  8459                           	opt stack 21
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;incstack = 0
  8463  00335C  C0A0  F0A4         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8464  003360  0100               	movlb	0	; () banked
  8465  003362  6BA5               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8466  003364  6BA6               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8467  003366  0100               	movlb	0	; () banked
  8468  003368  359F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8469  00336A  0100               	movlb	0	; () banked
  8470  00336C  37A4               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8471  00336E  E301               	bnc	u5141
  8472  003370  81A5               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8473  003372                     u5141:
  8474  003372  0100               	movlb	0	; () banked
  8475  003374  51A4               	movf	??__tdiv_to_l_& (0+255),w,b
  8476  003376  0100               	movlb	0	; () banked
  8477  003378  6FAC               	movwf	__tdiv_to_l_@exp1& (0+255),b
  8478  00337A  0100               	movlb	0	; () banked
  8479  00337C  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8480  00337E  A4D8               	btfss	status,2,c
  8481  003380  D00A               	goto	l4968
  8482                           
  8483                           ; BSR set to: 0
  8484  003382  0E00               	movlw	0
  8485  003384  0100               	movlb	0	; () banked
  8486  003386  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8487  003388  0E00               	movlw	0
  8488  00338A  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8489  00338C  0E00               	movlw	0
  8490  00338E  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8491  003390  0E00               	movlw	0
  8492  003392  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8493                           
  8494                           ; BSR set to: 0
  8495  003394  0012               	return	
  8496  003396                     l4968:
  8497                           
  8498                           ; BSR set to: 0
  8499  003396  C0A3  F0A4         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8500  00339A  0100               	movlb	0	; () banked
  8501  00339C  6BA5               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  8502  00339E  6BA6               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  8503  0033A0  0100               	movlb	0	; () banked
  8504  0033A2  35A2               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8505  0033A4  0100               	movlb	0	; () banked
  8506  0033A6  37A4               	rlcf	??__tdiv_to_l_& (0+255),f,b
  8507  0033A8  E301               	bnc	u5161
  8508  0033AA  81A5               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  8509  0033AC                     u5161:
  8510  0033AC  0100               	movlb	0	; () banked
  8511  0033AE  51A4               	movf	??__tdiv_to_l_& (0+255),w,b
  8512  0033B0  0100               	movlb	0	; () banked
  8513  0033B2  6FAB               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8514  0033B4  0100               	movlb	0	; () banked
  8515  0033B6  51AB               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8516  0033B8  A4D8               	btfss	status,2,c
  8517  0033BA  D00A               	goto	l4974
  8518                           
  8519                           ; BSR set to: 0
  8520  0033BC  0E00               	movlw	0
  8521  0033BE  0100               	movlb	0	; () banked
  8522  0033C0  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8523  0033C2  0E00               	movlw	0
  8524  0033C4  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8525  0033C6  0E00               	movlw	0
  8526  0033C8  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8527  0033CA  0E00               	movlw	0
  8528  0033CC  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531  0033CE  0012               	return	
  8532  0033D0                     l4974:
  8533                           
  8534                           ; BSR set to: 0
  8535  0033D0  0100               	movlb	0	; () banked
  8536  0033D2  8F9F               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  8537                           
  8538                           ; BSR set to: 0
  8539  0033D4  0EFF               	movlw	255
  8540  0033D6  0100               	movlb	0	; () banked
  8541  0033D8  179E               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  8542  0033DA  0EFF               	movlw	255
  8543  0033DC  0100               	movlb	0	; () banked
  8544  0033DE  179F               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8545  0033E0  0E00               	movlw	0
  8546  0033E2  0100               	movlb	0	; () banked
  8547  0033E4  17A0               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8548  0033E6  0100               	movlb	0	; () banked
  8549  0033E8  8FA2               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  8550                           
  8551                           ; BSR set to: 0
  8552  0033EA  0EFF               	movlw	255
  8553  0033EC  0100               	movlb	0	; () banked
  8554  0033EE  17A1               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  8555  0033F0  0EFF               	movlw	255
  8556  0033F2  0100               	movlb	0	; () banked
  8557  0033F4  17A2               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  8558  0033F6  0E00               	movlw	0
  8559  0033F8  0100               	movlb	0	; () banked
  8560  0033FA  17A3               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  8561                           
  8562                           ; BSR set to: 0
  8563  0033FC  0E00               	movlw	0
  8564  0033FE  0100               	movlb	0	; () banked
  8565  003400  6FA7               	movwf	__tdiv_to_l_@quot& (0+255),b
  8566  003402  0E00               	movlw	0
  8567  003404  6FA8               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  8568  003406  0E00               	movlw	0
  8569  003408  6FA9               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  8570  00340A  0E00               	movlw	0
  8571  00340C  6FAA               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  8572                           
  8573                           ; BSR set to: 0
  8574  00340E  0E7F               	movlw	127
  8575  003410  0100               	movlb	0	; () banked
  8576  003412  5FAC               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8577                           
  8578                           ; BSR set to: 0
  8579  003414  0100               	movlb	0	; () banked
  8580  003416  51AB               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  8581  003418  0F98               	addlw	152
  8582  00341A  0100               	movlb	0	; () banked
  8583  00341C  5FAC               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  8584                           
  8585                           ; BSR set to: 0
  8586  00341E  0E18               	movlw	24
  8587  003420  0100               	movlb	0	; () banked
  8588  003422  6FAB               	movwf	__tdiv_to_l_@cntr& (0+255),b
  8589  003424                     l909:
  8590                           
  8591                           ; BSR set to: 0
  8592  003424  0100               	movlb	0	; () banked
  8593  003426  90D8               	bcf	status,0,c
  8594  003428  37A7               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8595  00342A  37A8               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8596  00342C  37A9               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8597  00342E  37AA               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8598                           
  8599                           ; BSR set to: 0
  8600  003430  0100               	movlb	0	; () banked
  8601  003432  51A1               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8602  003434  0100               	movlb	0	; () banked
  8603  003436  5D9E               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  8604  003438  0100               	movlb	0	; () banked
  8605  00343A  51A2               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8606  00343C  0100               	movlb	0	; () banked
  8607  00343E  599F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  8608  003440  0100               	movlb	0	; () banked
  8609  003442  51A3               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8610  003444  0100               	movlb	0	; () banked
  8611  003446  59A0               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  8612  003448  A0D8               	btfss	status,0,c
  8613  00344A  D00E               	goto	l910
  8614                           
  8615                           ; BSR set to: 0
  8616  00344C  0100               	movlb	0	; () banked
  8617  00344E  51A1               	movf	__tdiv_to_l_@f2& (0+255),w,b
  8618  003450  0100               	movlb	0	; () banked
  8619  003452  5F9E               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  8620  003454  0100               	movlb	0	; () banked
  8621  003456  51A2               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  8622  003458  0100               	movlb	0	; () banked
  8623  00345A  5B9F               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8624  00345C  0100               	movlb	0	; () banked
  8625  00345E  51A3               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  8626  003460  0100               	movlb	0	; () banked
  8627  003462  5BA0               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8628                           
  8629                           ; BSR set to: 0
  8630  003464  0100               	movlb	0	; () banked
  8631  003466  81A7               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  8632  003468                     l910:
  8633                           
  8634                           ; BSR set to: 0
  8635  003468  0100               	movlb	0	; () banked
  8636  00346A  90D8               	bcf	status,0,c
  8637  00346C  379E               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  8638  00346E  379F               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  8639  003470  37A0               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642  003472  0100               	movlb	0	; () banked
  8643  003474  2FAB               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  8644  003476  D7D6               	goto	l909
  8645                           
  8646                           ; BSR set to: 0
  8647                           
  8648                           ; BSR set to: 0
  8649  003478  0100               	movlb	0	; () banked
  8650  00347A  AFAC               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  8651  00347C  D01A               	goto	l5008
  8652                           
  8653                           ; BSR set to: 0
  8654  00347E  0100               	movlb	0	; () banked
  8655  003480  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8656  003482  0A80               	xorlw	128
  8657  003484  0F97               	addlw	151
  8658  003486  B0D8               	btfsc	status,0,c
  8659  003488  D00A               	goto	l5004
  8660                           
  8661                           ; BSR set to: 0
  8662  00348A  0E00               	movlw	0
  8663  00348C  0100               	movlb	0	; () banked
  8664  00348E  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8665  003490  0E00               	movlw	0
  8666  003492  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8667  003494  0E00               	movlw	0
  8668  003496  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8669  003498  0E00               	movlw	0
  8670  00349A  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8671                           
  8672                           ; BSR set to: 0
  8673  00349C  0012               	return	
  8674  00349E                     l5004:
  8675                           
  8676                           ; BSR set to: 0
  8677  00349E  0100               	movlb	0	; () banked
  8678  0034A0  90D8               	bcf	status,0,c
  8679  0034A2  33AA               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8680  0034A4  33A9               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8681  0034A6  33A8               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8682  0034A8  33A7               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  8683                           
  8684                           ; BSR set to: 0
  8685  0034AA  0100               	movlb	0	; () banked
  8686  0034AC  3FAC               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  8687  0034AE  D7F7               	goto	l5004
  8688                           
  8689                           ; BSR set to: 0
  8690  0034B0  D01B               	goto	l916
  8691  0034B2                     l5008:
  8692                           
  8693                           ; BSR set to: 0
  8694  0034B2  0E17               	movlw	23
  8695  0034B4  0100               	movlb	0	; () banked
  8696  0034B6  65AC               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  8697  0034B8  D012               	goto	l5016
  8698                           
  8699                           ; BSR set to: 0
  8700  0034BA  0E00               	movlw	0
  8701  0034BC  0100               	movlb	0	; () banked
  8702  0034BE  6F9E               	movwf	?__tdiv_to_l_& (0+255),b
  8703  0034C0  0E00               	movlw	0
  8704  0034C2  6F9F               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  8705  0034C4  0E00               	movlw	0
  8706  0034C6  6FA0               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  8707  0034C8  0E00               	movlw	0
  8708  0034CA  6FA1               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  8709                           
  8710                           ; BSR set to: 0
  8711  0034CC  0012               	return	
  8712  0034CE                     l5014:
  8713                           
  8714                           ; BSR set to: 0
  8715  0034CE  0100               	movlb	0	; () banked
  8716  0034D0  90D8               	bcf	status,0,c
  8717  0034D2  37A7               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  8718  0034D4  37A8               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  8719  0034D6  37A9               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  8720  0034D8  37AA               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  8721  0034DA  0100               	movlb	0	; () banked
  8722  0034DC  07AC               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  8723  0034DE                     l5016:
  8724                           
  8725                           ; BSR set to: 0
  8726  0034DE  0100               	movlb	0	; () banked
  8727  0034E0  51AC               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  8728  0034E2  0100               	movlb	0	; () banked
  8729  0034E4  A4D8               	btfss	status,2,c
  8730  0034E6  D7F3               	goto	l5014
  8731  0034E8                     l916:
  8732                           
  8733                           ; BSR set to: 0
  8734  0034E8  C0A7  F09E         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8735  0034EC  C0A8  F09F         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8736  0034F0  C0A9  F0A0         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8737  0034F4  C0AA  F0A1         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8738                           
  8739                           ; BSR set to: 0
  8740  0034F8  0012               	return		;funcret
  8741  0034FA                     __end_of__tdiv_to_l_:
  8742                           	opt stack 0
  8743                           tblptru	equ	0xFF8
  8744                           tblptrh	equ	0xFF7
  8745                           tblptrl	equ	0xFF6
  8746                           tablat	equ	0xFF5
  8747                           prodh	equ	0xFF4
  8748                           prodl	equ	0xFF3
  8749                           intcon	equ	0xFF2
  8750                           intcon2	equ	0xFF1
  8751                           intcon3	equ	0xFF0
  8752                           postinc0	equ	0xFEE
  8753                           wreg	equ	0xFE8
  8754                           indf2	equ	0xFDF
  8755                           postinc2	equ	0xFDE
  8756                           postdec2	equ	0xFDD
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8
  8760                           
  8761 ;; *************** function __div_to_l_ *****************
  8762 ;; Defined at:
  8763 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  f1              3   30[BANK0 ] unsigned long 
  8766 ;;  f2              3   33[BANK0 ] unsigned long 
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;  quot            4   36[BANK0 ] unsigned long 
  8769 ;;  exp1            1   41[BANK0 ] unsigned char 
  8770 ;;  cntr            1   40[BANK0 ] unsigned char 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;                  4   30[BANK0 ] unsigned long 
  8773 ;; Registers used:
  8774 ;;		wreg, status,2, status,0
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8780 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8781 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;Total ram usage:       12 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    7
  8787 ;; This function calls:
  8788 ;;		Nothing
  8789 ;; This function is called by:
  8790 ;;		_printf
  8791 ;; This function uses a non-reentrant model
  8792 ;;
  8793                           
  8794                           	psect	text23
  8795  0034FA                     __ptext23:
  8796                           	opt stack 0
  8797  0034FA                     __div_to_l_:
  8798                           	opt stack 21
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;incstack = 0
  8802  0034FA  0100               	movlb	0	; () banked
  8803  0034FC  35A0               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  8804  0034FE  35A1               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  8805  003500  0100               	movlb	0	; () banked
  8806  003502  6FA9               	movwf	__div_to_l_@exp1& (0+255),b
  8807  003504  0100               	movlb	0	; () banked
  8808  003506  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  8809  003508  A4D8               	btfss	status,2,c
  8810  00350A  D00A               	goto	l5024
  8811                           
  8812                           ; BSR set to: 0
  8813  00350C  0E00               	movlw	0
  8814  00350E  0100               	movlb	0	; () banked
  8815  003510  6F9E               	movwf	?__div_to_l_& (0+255),b
  8816  003512  0E00               	movlw	0
  8817  003514  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  8818  003516  0E00               	movlw	0
  8819  003518  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  8820  00351A  0E00               	movlw	0
  8821  00351C  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824  00351E  0012               	return	
  8825  003520                     l5024:
  8826                           
  8827                           ; BSR set to: 0
  8828  003520  0100               	movlb	0	; () banked
  8829  003522  35A3               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  8830  003524  35A4               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  8831  003526  0100               	movlb	0	; () banked
  8832  003528  6FA8               	movwf	__div_to_l_@cntr& (0+255),b
  8833  00352A  0100               	movlb	0	; () banked
  8834  00352C  51A8               	movf	__div_to_l_@cntr& (0+255),w,b
  8835  00352E  A4D8               	btfss	status,2,c
  8836  003530  D00A               	goto	l5030
  8837                           
  8838                           ; BSR set to: 0
  8839  003532  0E00               	movlw	0
  8840  003534  0100               	movlb	0	; () banked
  8841  003536  6F9E               	movwf	?__div_to_l_& (0+255),b
  8842  003538  0E00               	movlw	0
  8843  00353A  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  8844  00353C  0E00               	movlw	0
  8845  00353E  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  8846  003540  0E00               	movlw	0
  8847  003542  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  8848                           
  8849                           ; BSR set to: 0
  8850  003544  0012               	return	
  8851  003546                     l5030:
  8852                           
  8853                           ; BSR set to: 0
  8854  003546  0100               	movlb	0	; () banked
  8855  003548  8FA0               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  8856                           
  8857                           ; BSR set to: 0
  8858  00354A  0EFF               	movlw	255
  8859  00354C  0100               	movlb	0	; () banked
  8860  00354E  179E               	andwf	__div_to_l_@f1& (0+255),f,b
  8861  003550  0EFF               	movlw	255
  8862  003552  179F               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  8863  003554  0EFF               	movlw	255
  8864  003556  17A0               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  8865  003558  0E00               	movlw	0
  8866  00355A  17A1               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  8867                           
  8868                           ; BSR set to: 0
  8869  00355C  0100               	movlb	0	; () banked
  8870  00355E  8FA3               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  8871  003560  0EFF               	movlw	255
  8872  003562  0100               	movlb	0	; () banked
  8873  003564  17A1               	andwf	__div_to_l_@f2& (0+255),f,b
  8874  003566  0EFF               	movlw	255
  8875  003568  17A2               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  8876  00356A  0EFF               	movlw	255
  8877  00356C  17A3               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  8878  00356E  0E00               	movlw	0
  8879  003570  17A4               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  8880                           
  8881                           ; BSR set to: 0
  8882  003572  0E00               	movlw	0
  8883  003574  0100               	movlb	0	; () banked
  8884  003576  6FA4               	movwf	__div_to_l_@quot& (0+255),b
  8885  003578  0E00               	movlw	0
  8886  00357A  6FA5               	movwf	(__div_to_l_@quot+1)& (0+255),b
  8887  00357C  0E00               	movlw	0
  8888  00357E  6FA6               	movwf	(__div_to_l_@quot+2)& (0+255),b
  8889  003580  0E00               	movlw	0
  8890  003582  6FA7               	movwf	(__div_to_l_@quot+3)& (0+255),b
  8891                           
  8892                           ; BSR set to: 0
  8893  003584  0E7F               	movlw	127
  8894  003586  0100               	movlb	0	; () banked
  8895  003588  5FA9               	subwf	__div_to_l_@exp1& (0+255),f,b
  8896                           
  8897                           ; BSR set to: 0
  8898  00358A  0100               	movlb	0	; () banked
  8899  00358C  51A8               	movf	__div_to_l_@cntr& (0+255),w,b
  8900  00358E  0FA0               	addlw	160
  8901  003590  0100               	movlb	0	; () banked
  8902  003592  5FA9               	subwf	__div_to_l_@exp1& (0+255),f,b
  8903                           
  8904                           ; BSR set to: 0
  8905  003594  0E20               	movlw	32
  8906  003596  0100               	movlb	0	; () banked
  8907  003598  6FA8               	movwf	__div_to_l_@cntr& (0+255),b
  8908  00359A                     l5044:
  8909                           
  8910                           ; BSR set to: 0
  8911  00359A  0100               	movlb	0	; () banked
  8912  00359C  90D8               	bcf	status,0,c
  8913  00359E  37A4               	rlcf	__div_to_l_@quot& (0+255),f,b
  8914  0035A0  37A5               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  8915  0035A2  37A6               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  8916  0035A4  37A7               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  8917                           
  8918                           ; BSR set to: 0
  8919  0035A6  0100               	movlb	0	; () banked
  8920  0035A8  51A1               	movf	__div_to_l_@f2& (0+255),w,b
  8921  0035AA  0100               	movlb	0	; () banked
  8922  0035AC  5D9E               	subwf	__div_to_l_@f1& (0+255),w,b
  8923  0035AE  0100               	movlb	0	; () banked
  8924  0035B0  51A2               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  8925  0035B2  0100               	movlb	0	; () banked
  8926  0035B4  599F               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  8927  0035B6  0100               	movlb	0	; () banked
  8928  0035B8  51A3               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  8929  0035BA  0100               	movlb	0	; () banked
  8930  0035BC  59A0               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  8931  0035BE  0100               	movlb	0	; () banked
  8932  0035C0  51A4               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  8933  0035C2  0100               	movlb	0	; () banked
  8934  0035C4  59A1               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  8935  0035C6  A0D8               	btfss	status,0,c
  8936  0035C8  D012               	goto	l5052
  8937                           
  8938                           ; BSR set to: 0
  8939  0035CA  0100               	movlb	0	; () banked
  8940  0035CC  51A1               	movf	__div_to_l_@f2& (0+255),w,b
  8941  0035CE  0100               	movlb	0	; () banked
  8942  0035D0  5F9E               	subwf	__div_to_l_@f1& (0+255),f,b
  8943  0035D2  0100               	movlb	0	; () banked
  8944  0035D4  51A2               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  8945  0035D6  0100               	movlb	0	; () banked
  8946  0035D8  5B9F               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  8947  0035DA  0100               	movlb	0	; () banked
  8948  0035DC  51A3               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  8949  0035DE  0100               	movlb	0	; () banked
  8950  0035E0  5BA0               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  8951  0035E2  0100               	movlb	0	; () banked
  8952  0035E4  51A4               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  8953  0035E6  0100               	movlb	0	; () banked
  8954  0035E8  5BA1               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  8955                           
  8956                           ; BSR set to: 0
  8957  0035EA  0100               	movlb	0	; () banked
  8958  0035EC  81A4               	bsf	__div_to_l_@quot& (0+255),0,b
  8959  0035EE                     l5052:
  8960                           
  8961                           ; BSR set to: 0
  8962  0035EE  0100               	movlb	0	; () banked
  8963  0035F0  90D8               	bcf	status,0,c
  8964  0035F2  379E               	rlcf	__div_to_l_@f1& (0+255),f,b
  8965  0035F4  379F               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  8966  0035F6  37A0               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  8967  0035F8  37A1               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  8968                           
  8969                           ; BSR set to: 0
  8970  0035FA  0100               	movlb	0	; () banked
  8971  0035FC  2FA8               	decfsz	__div_to_l_@cntr& (0+255),f,b
  8972  0035FE  D7CD               	goto	l5044
  8973                           
  8974                           ; BSR set to: 0
  8975                           
  8976                           ; BSR set to: 0
  8977  003600  0100               	movlb	0	; () banked
  8978  003602  AFA9               	btfss	__div_to_l_@exp1& (0+255),7,b
  8979  003604  D01A               	goto	l5068
  8980                           
  8981                           ; BSR set to: 0
  8982  003606  0100               	movlb	0	; () banked
  8983  003608  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  8984  00360A  0A80               	xorlw	128
  8985  00360C  0F9F               	addlw	159
  8986  00360E  B0D8               	btfsc	status,0,c
  8987  003610  D00A               	goto	l5064
  8988                           
  8989                           ; BSR set to: 0
  8990  003612  0E00               	movlw	0
  8991  003614  0100               	movlb	0	; () banked
  8992  003616  6F9E               	movwf	?__div_to_l_& (0+255),b
  8993  003618  0E00               	movlw	0
  8994  00361A  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  8995  00361C  0E00               	movlw	0
  8996  00361E  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  8997  003620  0E00               	movlw	0
  8998  003622  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  8999                           
  9000                           ; BSR set to: 0
  9001  003624  0012               	return	
  9002  003626                     l5064:
  9003                           
  9004                           ; BSR set to: 0
  9005  003626  0100               	movlb	0	; () banked
  9006  003628  90D8               	bcf	status,0,c
  9007  00362A  33A7               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  9008  00362C  33A6               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  9009  00362E  33A5               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  9010  003630  33A4               	rrcf	__div_to_l_@quot& (0+255),f,b
  9011                           
  9012                           ; BSR set to: 0
  9013  003632  0100               	movlb	0	; () banked
  9014  003634  3FA9               	incfsz	__div_to_l_@exp1& (0+255),f,b
  9015  003636  D7F7               	goto	l5064
  9016                           
  9017                           ; BSR set to: 0
  9018  003638  D01B               	goto	l812
  9019  00363A                     l5068:
  9020                           
  9021                           ; BSR set to: 0
  9022  00363A  0E1F               	movlw	31
  9023  00363C  0100               	movlb	0	; () banked
  9024  00363E  65A9               	cpfsgt	__div_to_l_@exp1& (0+255),b
  9025  003640  D012               	goto	l5076
  9026                           
  9027                           ; BSR set to: 0
  9028  003642  0E00               	movlw	0
  9029  003644  0100               	movlb	0	; () banked
  9030  003646  6F9E               	movwf	?__div_to_l_& (0+255),b
  9031  003648  0E00               	movlw	0
  9032  00364A  6F9F               	movwf	(?__div_to_l_+1)& (0+255),b
  9033  00364C  0E00               	movlw	0
  9034  00364E  6FA0               	movwf	(?__div_to_l_+2)& (0+255),b
  9035  003650  0E00               	movlw	0
  9036  003652  6FA1               	movwf	(?__div_to_l_+3)& (0+255),b
  9037                           
  9038                           ; BSR set to: 0
  9039  003654  0012               	return	
  9040  003656                     l5074:
  9041                           
  9042                           ; BSR set to: 0
  9043  003656  0100               	movlb	0	; () banked
  9044  003658  90D8               	bcf	status,0,c
  9045  00365A  37A4               	rlcf	__div_to_l_@quot& (0+255),f,b
  9046  00365C  37A5               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  9047  00365E  37A6               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  9048  003660  37A7               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  9049  003662  0100               	movlb	0	; () banked
  9050  003664  07A9               	decf	__div_to_l_@exp1& (0+255),f,b
  9051  003666                     l5076:
  9052                           
  9053                           ; BSR set to: 0
  9054  003666  0100               	movlb	0	; () banked
  9055  003668  51A9               	movf	__div_to_l_@exp1& (0+255),w,b
  9056  00366A  0100               	movlb	0	; () banked
  9057  00366C  A4D8               	btfss	status,2,c
  9058  00366E  D7F3               	goto	l5074
  9059  003670                     l812:
  9060                           
  9061                           ; BSR set to: 0
  9062  003670  C0A4  F09E         	movff	__div_to_l_@quot,?__div_to_l_
  9063  003674  C0A5  F09F         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9064  003678  C0A6  F0A0         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9065  00367C  C0A7  F0A1         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9066                           
  9067                           ; BSR set to: 0
  9068  003680  0012               	return		;funcret
  9069  003682                     __end_of__div_to_l_:
  9070                           	opt stack 0
  9071                           tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodh	equ	0xFF4
  9076                           prodl	equ	0xFF3
  9077                           intcon	equ	0xFF2
  9078                           intcon2	equ	0xFF1
  9079                           intcon3	equ	0xFF0
  9080                           postinc0	equ	0xFEE
  9081                           wreg	equ	0xFE8
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function ___lltoft *****************
  9090 ;; Defined at:
  9091 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  c               4   38[BANK0 ] unsigned long 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  exp             1   46[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  3   38[BANK0 ] float 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9105 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;Total ram usage:        9 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    8
  9112 ;; This function calls:
  9113 ;;		___ftpack
  9114 ;; This function is called by:
  9115 ;;		_printf
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           	psect	text24
  9120  0051AE                     __ptext24:
  9121                           	opt stack 0
  9122  0051AE                     ___lltoft:
  9123                           	opt stack 20
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;incstack = 0
  9127  0051AE  0E8E               	movlw	142
  9128  0051B0  0100               	movlb	0	; () banked
  9129  0051B2  6FAE               	movwf	___lltoft@exp& (0+255),b
  9130  0051B4  D008               	goto	l7338
  9131  0051B6                     l7336:
  9132                           
  9133                           ; BSR set to: 0
  9134  0051B6  0100               	movlb	0	; () banked
  9135  0051B8  90D8               	bcf	status,0,c
  9136  0051BA  33A9               	rrcf	(___lltoft@c+3)& (0+255),f,b
  9137  0051BC  33A8               	rrcf	(___lltoft@c+2)& (0+255),f,b
  9138  0051BE  33A7               	rrcf	(___lltoft@c+1)& (0+255),f,b
  9139  0051C0  33A6               	rrcf	___lltoft@c& (0+255),f,b
  9140  0051C2  0100               	movlb	0	; () banked
  9141  0051C4  2BAE               	incf	___lltoft@exp& (0+255),f,b
  9142  0051C6                     l7338:
  9143                           
  9144                           ; BSR set to: 0
  9145  0051C6  0E00               	movlw	0
  9146  0051C8  0100               	movlb	0	; () banked
  9147  0051CA  15A6               	andwf	___lltoft@c& (0+255),w,b
  9148  0051CC  0100               	movlb	0	; () banked
  9149  0051CE  6FAA               	movwf	??___lltoft& (0+255),b
  9150  0051D0  0E00               	movlw	0
  9151  0051D2  0100               	movlb	0	; () banked
  9152  0051D4  15A7               	andwf	(___lltoft@c+1)& (0+255),w,b
  9153  0051D6  0100               	movlb	0	; () banked
  9154  0051D8  6FAB               	movwf	(??___lltoft+1)& (0+255),b
  9155  0051DA  0E00               	movlw	0
  9156  0051DC  0100               	movlb	0	; () banked
  9157  0051DE  15A8               	andwf	(___lltoft@c+2)& (0+255),w,b
  9158  0051E0  0100               	movlb	0	; () banked
  9159  0051E2  6FAC               	movwf	(??___lltoft+2)& (0+255),b
  9160  0051E4  0EFF               	movlw	255
  9161  0051E6  0100               	movlb	0	; () banked
  9162  0051E8  15A9               	andwf	(___lltoft@c+3)& (0+255),w,b
  9163  0051EA  0100               	movlb	0	; () banked
  9164  0051EC  6FAD               	movwf	(??___lltoft+3)& (0+255),b
  9165  0051EE  0100               	movlb	0	; () banked
  9166  0051F0  51AA               	movf	??___lltoft& (0+255),w,b
  9167  0051F2  0100               	movlb	0	; () banked
  9168  0051F4  11AB               	iorwf	(??___lltoft+1)& (0+255),w,b
  9169  0051F6  0100               	movlb	0	; () banked
  9170  0051F8  11AC               	iorwf	(??___lltoft+2)& (0+255),w,b
  9171  0051FA  0100               	movlb	0	; () banked
  9172  0051FC  11AD               	iorwf	(??___lltoft+3)& (0+255),w,b
  9173  0051FE  A4D8               	btfss	status,2,c
  9174  005200  D7DA               	goto	l7336
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179  005202  C0A6  F09E         	movff	___lltoft@c,___ftpack@arg
  9180  005206  C0A7  F09F         	movff	___lltoft@c+1,___ftpack@arg+1
  9181  00520A  C0A8  F0A0         	movff	___lltoft@c+2,___ftpack@arg+2
  9182  00520E  C0AE  F0A1         	movff	___lltoft@exp,___ftpack@exp
  9183  005212  0E00               	movlw	0
  9184  005214  0100               	movlb	0	; () banked
  9185  005216  6FA2               	movwf	___ftpack@sign& (0+255),b
  9186  005218  ECAF  F01F         	call	___ftpack	;wreg free
  9187  00521C  C09E  F0A6         	movff	?___ftpack,?___lltoft
  9188  005220  C09F  F0A7         	movff	?___ftpack+1,?___lltoft+1
  9189  005224  C0A0  F0A8         	movff	?___ftpack+2,?___lltoft+2
  9190  005228  0012               	return	
  9191  00522A                     __end_of___lltoft:
  9192                           	opt stack 0
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           intcon	equ	0xFF2
  9200                           intcon2	equ	0xFF1
  9201                           intcon3	equ	0xFF0
  9202                           postinc0	equ	0xFEE
  9203                           wreg	equ	0xFE8
  9204                           indf2	equ	0xFDF
  9205                           postinc2	equ	0xFDE
  9206                           postdec2	equ	0xFDD
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function ___llmod *****************
  9212 ;; Defined at:
  9213 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  dividend        4   43[BANK0 ] unsigned long 
  9216 ;;  divisor         4   47[BANK0 ] unsigned long 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  counter         1   51[BANK0 ] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  4   43[BANK0 ] unsigned long 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        9 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    7
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_printf
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text25
  9243  004EEE                     __ptext25:
  9244                           	opt stack 0
  9245  004EEE                     ___llmod:
  9246                           	opt stack 21
  9247                           
  9248                           ;incstack = 0
  9249  004EEE  0100               	movlb	0	; () banked
  9250  004EF0  51AF               	movf	___llmod@divisor& (0+255),w,b
  9251  004EF2  0100               	movlb	0	; () banked
  9252  004EF4  11B0               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9253  004EF6  0100               	movlb	0	; () banked
  9254  004EF8  11B1               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9255  004EFA  0100               	movlb	0	; () banked
  9256  004EFC  11B2               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9257  004EFE  B4D8               	btfsc	status,2,c
  9258  004F00  D03A               	goto	l1001
  9259                           
  9260                           ; BSR set to: 0
  9261  004F02  0E01               	movlw	1
  9262  004F04  0100               	movlb	0	; () banked
  9263  004F06  6FB3               	movwf	___llmod@counter& (0+255),b
  9264  004F08  D008               	goto	l5182
  9265  004F0A                     l5180:
  9266                           
  9267                           ; BSR set to: 0
  9268  004F0A  0100               	movlb	0	; () banked
  9269  004F0C  90D8               	bcf	status,0,c
  9270  004F0E  37AF               	rlcf	___llmod@divisor& (0+255),f,b
  9271  004F10  37B0               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9272  004F12  37B1               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9273  004F14  37B2               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9274  004F16  0100               	movlb	0	; () banked
  9275  004F18  2BB3               	incf	___llmod@counter& (0+255),f,b
  9276  004F1A                     l5182:
  9277                           
  9278                           ; BSR set to: 0
  9279  004F1A  0100               	movlb	0	; () banked
  9280  004F1C  AFB2               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9281  004F1E  D7F5               	goto	l5180
  9282  004F20                     l5184:
  9283                           
  9284                           ; BSR set to: 0
  9285  004F20  0100               	movlb	0	; () banked
  9286  004F22  51AF               	movf	___llmod@divisor& (0+255),w,b
  9287  004F24  0100               	movlb	0	; () banked
  9288  004F26  5DAB               	subwf	___llmod@dividend& (0+255),w,b
  9289  004F28  0100               	movlb	0	; () banked
  9290  004F2A  51B0               	movf	(___llmod@divisor+1)& (0+255),w,b
  9291  004F2C  0100               	movlb	0	; () banked
  9292  004F2E  59AC               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9293  004F30  0100               	movlb	0	; () banked
  9294  004F32  51B1               	movf	(___llmod@divisor+2)& (0+255),w,b
  9295  004F34  0100               	movlb	0	; () banked
  9296  004F36  59AD               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9297  004F38  0100               	movlb	0	; () banked
  9298  004F3A  51B2               	movf	(___llmod@divisor+3)& (0+255),w,b
  9299  004F3C  0100               	movlb	0	; () banked
  9300  004F3E  59AE               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9301  004F40  A0D8               	btfss	status,0,c
  9302  004F42  D010               	goto	l5188
  9303                           
  9304                           ; BSR set to: 0
  9305  004F44  0100               	movlb	0	; () banked
  9306  004F46  51AF               	movf	___llmod@divisor& (0+255),w,b
  9307  004F48  0100               	movlb	0	; () banked
  9308  004F4A  5FAB               	subwf	___llmod@dividend& (0+255),f,b
  9309  004F4C  0100               	movlb	0	; () banked
  9310  004F4E  51B0               	movf	(___llmod@divisor+1)& (0+255),w,b
  9311  004F50  0100               	movlb	0	; () banked
  9312  004F52  5BAC               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9313  004F54  0100               	movlb	0	; () banked
  9314  004F56  51B1               	movf	(___llmod@divisor+2)& (0+255),w,b
  9315  004F58  0100               	movlb	0	; () banked
  9316  004F5A  5BAD               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9317  004F5C  0100               	movlb	0	; () banked
  9318  004F5E  51B2               	movf	(___llmod@divisor+3)& (0+255),w,b
  9319  004F60  0100               	movlb	0	; () banked
  9320  004F62  5BAE               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9321  004F64                     l5188:
  9322                           
  9323                           ; BSR set to: 0
  9324  004F64  0100               	movlb	0	; () banked
  9325  004F66  90D8               	bcf	status,0,c
  9326  004F68  33B2               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9327  004F6A  33B1               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9328  004F6C  33B0               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9329  004F6E  33AF               	rrcf	___llmod@divisor& (0+255),f,b
  9330                           
  9331                           ; BSR set to: 0
  9332  004F70  0100               	movlb	0	; () banked
  9333  004F72  2FB3               	decfsz	___llmod@counter& (0+255),f,b
  9334  004F74  D7D5               	goto	l5184
  9335  004F76                     l1001:
  9336                           
  9337                           ; BSR set to: 0
  9338  004F76  C0AB  F0AB         	movff	___llmod@dividend,?___llmod
  9339  004F7A  C0AC  F0AC         	movff	___llmod@dividend+1,?___llmod+1
  9340  004F7E  C0AD  F0AD         	movff	___llmod@dividend+2,?___llmod+2
  9341  004F82  C0AE  F0AE         	movff	___llmod@dividend+3,?___llmod+3
  9342                           
  9343                           ; BSR set to: 0
  9344  004F86  0012               	return		;funcret
  9345  004F88                     __end_of___llmod:
  9346                           	opt stack 0
  9347                           tblptru	equ	0xFF8
  9348                           tblptrh	equ	0xFF7
  9349                           tblptrl	equ	0xFF6
  9350                           tablat	equ	0xFF5
  9351                           prodh	equ	0xFF4
  9352                           prodl	equ	0xFF3
  9353                           intcon	equ	0xFF2
  9354                           intcon2	equ	0xFF1
  9355                           intcon3	equ	0xFF0
  9356                           postinc0	equ	0xFEE
  9357                           wreg	equ	0xFE8
  9358                           indf2	equ	0xFDF
  9359                           postinc2	equ	0xFDE
  9360                           postdec2	equ	0xFDD
  9361                           fsr2h	equ	0xFDA
  9362                           fsr2l	equ	0xFD9
  9363                           status	equ	0xFD8
  9364                           
  9365 ;; *************** function ___fttol *****************
  9366 ;; Defined at:
  9367 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;  f1              3    7[BANK1 ] float 
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  lval            4   17[BANK1 ] unsigned long 
  9372 ;;  exp1            1   21[BANK1 ] unsigned char 
  9373 ;;  sign1           1   16[BANK1 ] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  4    7[BANK1 ] long 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9383 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;Total ram usage:       15 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    7
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_printf
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text26
  9398  003AA2                     __ptext26:
  9399                           	opt stack 0
  9400  003AA2                     ___fttol:
  9401                           	opt stack 21
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;incstack = 0
  9405  003AA2  C109  F10B         	movff	___fttol@f1+2,??___fttol
  9406  003AA6  0101               	movlb	1	; () banked
  9407  003AA8  6B0C               	clrf	(??___fttol+1)& (0+255),b
  9408  003AAA  6B0D               	clrf	(??___fttol+2)& (0+255),b
  9409  003AAC  0101               	movlb	1	; () banked
  9410  003AAE  3508               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9411  003AB0  0101               	movlb	1	; () banked
  9412  003AB2  370B               	rlcf	??___fttol& (0+255),f,b
  9413  003AB4  E301               	bnc	u8171
  9414  003AB6  810C               	bsf	(??___fttol+1)& (0+255),0,b
  9415  003AB8                     u8171:
  9416  003AB8  0101               	movlb	1	; () banked
  9417  003ABA  510B               	movf	??___fttol& (0+255),w,b
  9418  003ABC  0101               	movlb	1	; () banked
  9419  003ABE  6F15               	movwf	___fttol@exp1& (0+255),b
  9420  003AC0  0101               	movlb	1	; () banked
  9421  003AC2  5115               	movf	___fttol@exp1& (0+255),w,b
  9422  003AC4  A4D8               	btfss	status,2,c
  9423  003AC6  D00A               	goto	l7294
  9424                           
  9425                           ; BSR set to: 1
  9426  003AC8  0E00               	movlw	0
  9427  003ACA  0101               	movlb	1	; () banked
  9428  003ACC  6F07               	movwf	?___fttol& (0+255),b
  9429  003ACE  0E00               	movlw	0
  9430  003AD0  6F08               	movwf	(?___fttol+1)& (0+255),b
  9431  003AD2  0E00               	movlw	0
  9432  003AD4  6F09               	movwf	(?___fttol+2)& (0+255),b
  9433  003AD6  0E00               	movlw	0
  9434  003AD8  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9435                           
  9436                           ; BSR set to: 1
  9437  003ADA  0012               	return	
  9438  003ADC                     l7294:
  9439                           
  9440                           ; BSR set to: 1
  9441  003ADC  0E17               	movlw	23
  9442  003ADE  0101               	movlb	1	; () banked
  9443  003AE0  6F0B               	movwf	??___fttol& (0+255),b
  9444  003AE2  C107  F10C         	movff	___fttol@f1,??___fttol+1
  9445  003AE6  C108  F10D         	movff	___fttol@f1+1,??___fttol+2
  9446  003AEA  C109  F10E         	movff	___fttol@f1+2,??___fttol+3
  9447  003AEE  0101               	movlb	1	; () banked
  9448  003AF0  290B               	incf	??___fttol& (0+255),w,b
  9449  003AF2  0101               	movlb	1	; () banked
  9450  003AF4  6F0F               	movwf	(??___fttol+4)& (0+255),b
  9451  003AF6  D005               	goto	u8190
  9452  003AF8                     u8195:
  9453  003AF8  0101               	movlb	1	; () banked
  9454  003AFA  90D8               	bcf	status,0,c
  9455  003AFC  330E               	rrcf	(??___fttol+3)& (0+255),f,b
  9456  003AFE  330D               	rrcf	(??___fttol+2)& (0+255),f,b
  9457  003B00  330C               	rrcf	(??___fttol+1)& (0+255),f,b
  9458  003B02                     u8190:
  9459  003B02  0101               	movlb	1	; () banked
  9460  003B04  2F0F               	decfsz	(??___fttol+4)& (0+255),f,b
  9461  003B06  D7F8               	goto	u8195
  9462  003B08  0101               	movlb	1	; () banked
  9463  003B0A  510C               	movf	(??___fttol+1)& (0+255),w,b
  9464  003B0C  0101               	movlb	1	; () banked
  9465  003B0E  6F10               	movwf	___fttol@sign1& (0+255),b
  9466                           
  9467                           ; BSR set to: 1
  9468  003B10  0101               	movlb	1	; () banked
  9469  003B12  8F08               	bsf	(___fttol@f1+1)& (0+255),7,b
  9470                           
  9471                           ; BSR set to: 1
  9472  003B14  0EFF               	movlw	255
  9473  003B16  0101               	movlb	1	; () banked
  9474  003B18  1707               	andwf	___fttol@f1& (0+255),f,b
  9475  003B1A  0EFF               	movlw	255
  9476  003B1C  0101               	movlb	1	; () banked
  9477  003B1E  1708               	andwf	(___fttol@f1+1)& (0+255),f,b
  9478  003B20  0E00               	movlw	0
  9479  003B22  0101               	movlb	1	; () banked
  9480  003B24  1709               	andwf	(___fttol@f1+2)& (0+255),f,b
  9481                           
  9482                           ; BSR set to: 1
  9483  003B26  0101               	movlb	1	; () banked
  9484  003B28  5107               	movf	___fttol@f1& (0+255),w,b
  9485  003B2A  0101               	movlb	1	; () banked
  9486  003B2C  6F11               	movwf	___fttol@lval& (0+255),b
  9487  003B2E  0101               	movlb	1	; () banked
  9488  003B30  5108               	movf	(___fttol@f1+1)& (0+255),w,b
  9489  003B32  0101               	movlb	1	; () banked
  9490  003B34  6F12               	movwf	(___fttol@lval+1)& (0+255),b
  9491  003B36  0101               	movlb	1	; () banked
  9492  003B38  5109               	movf	(___fttol@f1+2)& (0+255),w,b
  9493  003B3A  0101               	movlb	1	; () banked
  9494  003B3C  6F13               	movwf	(___fttol@lval+2)& (0+255),b
  9495  003B3E  0101               	movlb	1	; () banked
  9496  003B40  6B14               	clrf	(___fttol@lval+3)& (0+255),b
  9497                           
  9498                           ; BSR set to: 1
  9499  003B42  0E8E               	movlw	142
  9500  003B44  0101               	movlb	1	; () banked
  9501  003B46  5F15               	subwf	___fttol@exp1& (0+255),f,b
  9502                           
  9503                           ; BSR set to: 1
  9504  003B48  0101               	movlb	1	; () banked
  9505  003B4A  AF15               	btfss	___fttol@exp1& (0+255),7,b
  9506  003B4C  D01A               	goto	l7316
  9507                           
  9508                           ; BSR set to: 1
  9509  003B4E  0101               	movlb	1	; () banked
  9510  003B50  5115               	movf	___fttol@exp1& (0+255),w,b
  9511  003B52  0A80               	xorlw	128
  9512  003B54  0F8F               	addlw	143
  9513  003B56  B0D8               	btfsc	status,0,c
  9514  003B58  D00A               	goto	l7312
  9515                           
  9516                           ; BSR set to: 1
  9517  003B5A  0E00               	movlw	0
  9518  003B5C  0101               	movlb	1	; () banked
  9519  003B5E  6F07               	movwf	?___fttol& (0+255),b
  9520  003B60  0E00               	movlw	0
  9521  003B62  6F08               	movwf	(?___fttol+1)& (0+255),b
  9522  003B64  0E00               	movlw	0
  9523  003B66  6F09               	movwf	(?___fttol+2)& (0+255),b
  9524  003B68  0E00               	movlw	0
  9525  003B6A  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9526                           
  9527                           ; BSR set to: 1
  9528  003B6C  0012               	return	
  9529  003B6E                     l7312:
  9530                           
  9531                           ; BSR set to: 1
  9532  003B6E  0101               	movlb	1	; () banked
  9533  003B70  90D8               	bcf	status,0,c
  9534  003B72  3314               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9535  003B74  3313               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9536  003B76  3312               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9537  003B78  3311               	rrcf	___fttol@lval& (0+255),f,b
  9538                           
  9539                           ; BSR set to: 1
  9540  003B7A  0101               	movlb	1	; () banked
  9541  003B7C  3F15               	incfsz	___fttol@exp1& (0+255),f,b
  9542  003B7E  D7F7               	goto	l7312
  9543                           
  9544                           ; BSR set to: 1
  9545  003B80  D01B               	goto	l7326
  9546  003B82                     l7316:
  9547                           
  9548                           ; BSR set to: 1
  9549  003B82  0E17               	movlw	23
  9550  003B84  0101               	movlb	1	; () banked
  9551  003B86  6515               	cpfsgt	___fttol@exp1& (0+255),b
  9552  003B88  D012               	goto	l7324
  9553                           
  9554                           ; BSR set to: 1
  9555  003B8A  0E00               	movlw	0
  9556  003B8C  0101               	movlb	1	; () banked
  9557  003B8E  6F07               	movwf	?___fttol& (0+255),b
  9558  003B90  0E00               	movlw	0
  9559  003B92  6F08               	movwf	(?___fttol+1)& (0+255),b
  9560  003B94  0E00               	movlw	0
  9561  003B96  6F09               	movwf	(?___fttol+2)& (0+255),b
  9562  003B98  0E00               	movlw	0
  9563  003B9A  6F0A               	movwf	(?___fttol+3)& (0+255),b
  9564                           
  9565                           ; BSR set to: 1
  9566  003B9C  0012               	return	
  9567  003B9E                     l7322:
  9568                           
  9569                           ; BSR set to: 1
  9570  003B9E  0101               	movlb	1	; () banked
  9571  003BA0  90D8               	bcf	status,0,c
  9572  003BA2  3711               	rlcf	___fttol@lval& (0+255),f,b
  9573  003BA4  3712               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9574  003BA6  3713               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9575  003BA8  3714               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9576  003BAA  0101               	movlb	1	; () banked
  9577  003BAC  0715               	decf	___fttol@exp1& (0+255),f,b
  9578  003BAE                     l7324:
  9579                           
  9580                           ; BSR set to: 1
  9581  003BAE  0101               	movlb	1	; () banked
  9582  003BB0  5115               	movf	___fttol@exp1& (0+255),w,b
  9583  003BB2  0101               	movlb	1	; () banked
  9584  003BB4  A4D8               	btfss	status,2,c
  9585  003BB6  D7F3               	goto	l7322
  9586  003BB8                     l7326:
  9587                           
  9588                           ; BSR set to: 1
  9589  003BB8  0101               	movlb	1	; () banked
  9590  003BBA  5110               	movf	___fttol@sign1& (0+255),w,b
  9591  003BBC  0101               	movlb	1	; () banked
  9592  003BBE  B4D8               	btfsc	status,2,c
  9593  003BC0  D009               	goto	l7330
  9594                           
  9595                           ; BSR set to: 1
  9596  003BC2  0101               	movlb	1	; () banked
  9597  003BC4  1F14               	comf	(___fttol@lval+3)& (0+255),f,b
  9598  003BC6  1F13               	comf	(___fttol@lval+2)& (0+255),f,b
  9599  003BC8  1F12               	comf	(___fttol@lval+1)& (0+255),f,b
  9600  003BCA  6D11               	negf	___fttol@lval& (0+255),b
  9601  003BCC  0E00               	movlw	0
  9602  003BCE  2312               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9603  003BD0  2313               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9604  003BD2  2314               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9605  003BD4                     l7330:
  9606                           
  9607                           ; BSR set to: 1
  9608  003BD4  C111  F107         	movff	___fttol@lval,?___fttol
  9609  003BD8  C112  F108         	movff	___fttol@lval+1,?___fttol+1
  9610  003BDC  C113  F109         	movff	___fttol@lval+2,?___fttol+2
  9611  003BE0  C114  F10A         	movff	___fttol@lval+3,?___fttol+3
  9612  003BE4  0012               	return	
  9613  003BE6                     __end_of___fttol:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           intcon2	equ	0xFF1
  9623                           intcon3	equ	0xFF0
  9624                           postinc0	equ	0xFEE
  9625                           wreg	equ	0xFE8
  9626                           indf2	equ	0xFDF
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function ___ftsub *****************
  9634 ;; Defined at:
  9635 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  f1              3   22[BANK1 ] float 
  9638 ;;  f2              3   25[BANK1 ] float 
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;		None
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  3   22[BANK1 ] float 
  9643 ;; Registers used:
  9644 ;;		wreg, status,2, status,0, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9650 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9654 ;;Total ram usage:        6 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    9
  9657 ;; This function calls:
  9658 ;;		___ftadd
  9659 ;; This function is called by:
  9660 ;;		_printf
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text27
  9665  00559A                     __ptext27:
  9666                           	opt stack 0
  9667  00559A                     ___ftsub:
  9668                           	opt stack 19
  9669                           
  9670                           ; BSR set to: 1
  9671                           ;incstack = 0
  9672  00559A  0101               	movlb	1	; () banked
  9673  00559C  5119               	movf	___ftsub@f2& (0+255),w,b
  9674  00559E  0101               	movlb	1	; () banked
  9675  0055A0  111A               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9676  0055A2  0101               	movlb	1	; () banked
  9677  0055A4  111B               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9678  0055A6  B4D8               	btfsc	status,2,c
  9679  0055A8  D009               	goto	l7284
  9680                           
  9681                           ; BSR set to: 1
  9682  0055AA  0E00               	movlw	0
  9683  0055AC  0101               	movlb	1	; () banked
  9684  0055AE  1B19               	xorwf	___ftsub@f2& (0+255),f,b
  9685  0055B0  0E00               	movlw	0
  9686  0055B2  0101               	movlb	1	; () banked
  9687  0055B4  1B1A               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9688  0055B6  0E80               	movlw	128
  9689  0055B8  0101               	movlb	1	; () banked
  9690  0055BA  1B1B               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9691  0055BC                     l7284:
  9692                           
  9693                           ; BSR set to: 1
  9694  0055BC  C116  F10A         	movff	___ftsub@f1,___ftadd@f1
  9695  0055C0  C117  F10B         	movff	___ftsub@f1+1,___ftadd@f1+1
  9696  0055C4  C118  F10C         	movff	___ftsub@f1+2,___ftadd@f1+2
  9697  0055C8  C119  F10D         	movff	___ftsub@f2,___ftadd@f2
  9698  0055CC  C11A  F10E         	movff	___ftsub@f2+1,___ftadd@f2+1
  9699  0055D0  C11B  F10F         	movff	___ftsub@f2+2,___ftadd@f2+2
  9700  0055D4  ECB8  F014         	call	___ftadd	;wreg free
  9701  0055D8  C10A  F116         	movff	?___ftadd,?___ftsub
  9702  0055DC  C10B  F117         	movff	?___ftadd+1,?___ftsub+1
  9703  0055E0  C10C  F118         	movff	?___ftadd+2,?___ftsub+2
  9704  0055E4  0012               	return	
  9705  0055E6                     __end_of___ftsub:
  9706                           	opt stack 0
  9707                           tblptru	equ	0xFF8
  9708                           tblptrh	equ	0xFF7
  9709                           tblptrl	equ	0xFF6
  9710                           tablat	equ	0xFF5
  9711                           prodh	equ	0xFF4
  9712                           prodl	equ	0xFF3
  9713                           intcon	equ	0xFF2
  9714                           intcon2	equ	0xFF1
  9715                           intcon3	equ	0xFF0
  9716                           postinc0	equ	0xFEE
  9717                           wreg	equ	0xFE8
  9718                           indf2	equ	0xFDF
  9719                           postinc2	equ	0xFDE
  9720                           postdec2	equ	0xFDD
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function ___ftadd *****************
  9726 ;; Defined at:
  9727 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;  f1              3   10[BANK1 ] float 
  9730 ;;  f2              3   13[BANK1 ] float 
  9731 ;; Auto vars:     Size  Location     Type
  9732 ;;  exp1            1   21[BANK1 ] unsigned char 
  9733 ;;  exp2            1   20[BANK1 ] unsigned char 
  9734 ;;  sign            1   19[BANK1 ] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  3   10[BANK1 ] float 
  9737 ;; Registers used:
  9738 ;;		wreg, status,2, status,0, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9744 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9747 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9748 ;;Total ram usage:       12 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    8
  9751 ;; This function calls:
  9752 ;;		___ftpack
  9753 ;; This function is called by:
  9754 ;;		_printf
  9755 ;;		___ftsub
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           	psect	text28
  9760  002970                     __ptext28:
  9761                           	opt stack 0
  9762  002970                     ___ftadd:
  9763                           	opt stack 19
  9764                           
  9765                           ;incstack = 0
  9766  002970  C10C  F110         	movff	___ftadd@f1+2,??___ftadd
  9767  002974  0101               	movlb	1	; () banked
  9768  002976  6B11               	clrf	(??___ftadd+1)& (0+255),b
  9769  002978  6B12               	clrf	(??___ftadd+2)& (0+255),b
  9770  00297A  0101               	movlb	1	; () banked
  9771  00297C  350B               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9772  00297E  0101               	movlb	1	; () banked
  9773  002980  3710               	rlcf	??___ftadd& (0+255),f,b
  9774  002982  E301               	bnc	u7701
  9775  002984  8111               	bsf	(??___ftadd+1)& (0+255),0,b
  9776  002986                     u7701:
  9777  002986  0101               	movlb	1	; () banked
  9778  002988  5110               	movf	??___ftadd& (0+255),w,b
  9779  00298A  0101               	movlb	1	; () banked
  9780  00298C  6F15               	movwf	___ftadd@exp1& (0+255),b
  9781  00298E  C10F  F110         	movff	___ftadd@f2+2,??___ftadd
  9782  002992  0101               	movlb	1	; () banked
  9783  002994  6B11               	clrf	(??___ftadd+1)& (0+255),b
  9784  002996  6B12               	clrf	(??___ftadd+2)& (0+255),b
  9785  002998  0101               	movlb	1	; () banked
  9786  00299A  350E               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9787  00299C  0101               	movlb	1	; () banked
  9788  00299E  3710               	rlcf	??___ftadd& (0+255),f,b
  9789  0029A0  E301               	bnc	u7711
  9790  0029A2  8111               	bsf	(??___ftadd+1)& (0+255),0,b
  9791  0029A4                     u7711:
  9792  0029A4  0101               	movlb	1	; () banked
  9793  0029A6  5110               	movf	??___ftadd& (0+255),w,b
  9794  0029A8  0101               	movlb	1	; () banked
  9795  0029AA  6F14               	movwf	___ftadd@exp2& (0+255),b
  9796                           
  9797                           ; BSR set to: 1
  9798  0029AC  0101               	movlb	1	; () banked
  9799  0029AE  5115               	movf	___ftadd@exp1& (0+255),w,b
  9800  0029B0  0101               	movlb	1	; () banked
  9801  0029B2  B4D8               	btfsc	status,2,c
  9802  0029B4  D011               	goto	l867
  9803                           
  9804                           ; BSR set to: 1
  9805  0029B6  0101               	movlb	1	; () banked
  9806  0029B8  5114               	movf	___ftadd@exp2& (0+255),w,b
  9807  0029BA  0101               	movlb	1	; () banked
  9808  0029BC  5D15               	subwf	___ftadd@exp1& (0+255),w,b
  9809  0029BE  B0D8               	btfsc	status,0,c
  9810  0029C0  D012               	goto	l7030
  9811                           
  9812                           ; BSR set to: 1
  9813  0029C2  0101               	movlb	1	; () banked
  9814  0029C4  5115               	movf	___ftadd@exp1& (0+255),w,b
  9815  0029C6  0800               	sublw	0
  9816  0029C8  0101               	movlb	1	; () banked
  9817  0029CA  2514               	addwf	___ftadd@exp2& (0+255),w,b
  9818  0029CC  0101               	movlb	1	; () banked
  9819  0029CE  6F10               	movwf	??___ftadd& (0+255),b
  9820  0029D0  0E18               	movlw	24
  9821  0029D2  0101               	movlb	1	; () banked
  9822  0029D4  6510               	cpfsgt	??___ftadd& (0+255),b
  9823  0029D6  D007               	goto	l7030
  9824  0029D8                     l867:
  9825                           
  9826                           ; BSR set to: 1
  9827  0029D8  C10D  F10A         	movff	___ftadd@f2,?___ftadd
  9828  0029DC  C10E  F10B         	movff	___ftadd@f2+1,?___ftadd+1
  9829  0029E0  C10F  F10C         	movff	___ftadd@f2+2,?___ftadd+2
  9830  0029E4  0012               	return	
  9831  0029E6                     l7030:
  9832                           
  9833                           ; BSR set to: 1
  9834  0029E6  0101               	movlb	1	; () banked
  9835  0029E8  5114               	movf	___ftadd@exp2& (0+255),w,b
  9836  0029EA  0101               	movlb	1	; () banked
  9837  0029EC  B4D8               	btfsc	status,2,c
  9838  0029EE  D011               	goto	l871
  9839                           
  9840                           ; BSR set to: 1
  9841  0029F0  0101               	movlb	1	; () banked
  9842  0029F2  5115               	movf	___ftadd@exp1& (0+255),w,b
  9843  0029F4  0101               	movlb	1	; () banked
  9844  0029F6  5D14               	subwf	___ftadd@exp2& (0+255),w,b
  9845  0029F8  B0D8               	btfsc	status,0,c
  9846  0029FA  D012               	goto	l7036
  9847                           
  9848                           ; BSR set to: 1
  9849  0029FC  0101               	movlb	1	; () banked
  9850  0029FE  5114               	movf	___ftadd@exp2& (0+255),w,b
  9851  002A00  0800               	sublw	0
  9852  002A02  0101               	movlb	1	; () banked
  9853  002A04  2515               	addwf	___ftadd@exp1& (0+255),w,b
  9854  002A06  0101               	movlb	1	; () banked
  9855  002A08  6F10               	movwf	??___ftadd& (0+255),b
  9856  002A0A  0E18               	movlw	24
  9857  002A0C  0101               	movlb	1	; () banked
  9858  002A0E  6510               	cpfsgt	??___ftadd& (0+255),b
  9859  002A10  D007               	goto	l7036
  9860  002A12                     l871:
  9861                           
  9862                           ; BSR set to: 1
  9863  002A12  C10A  F10A         	movff	___ftadd@f1,?___ftadd
  9864  002A16  C10B  F10B         	movff	___ftadd@f1+1,?___ftadd+1
  9865  002A1A  C10C  F10C         	movff	___ftadd@f1+2,?___ftadd+2
  9866  002A1E  0012               	return	
  9867  002A20                     l7036:
  9868                           
  9869                           ; BSR set to: 1
  9870  002A20  0E06               	movlw	6
  9871  002A22  0101               	movlb	1	; () banked
  9872  002A24  6F13               	movwf	___ftadd@sign& (0+255),b
  9873                           
  9874                           ; BSR set to: 1
  9875  002A26  0101               	movlb	1	; () banked
  9876  002A28  AF0C               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9877  002A2A  D002               	goto	l7042
  9878                           
  9879                           ; BSR set to: 1
  9880  002A2C  0101               	movlb	1	; () banked
  9881  002A2E  8F13               	bsf	___ftadd@sign& (0+255),7,b
  9882  002A30                     l7042:
  9883                           
  9884                           ; BSR set to: 1
  9885  002A30  0101               	movlb	1	; () banked
  9886  002A32  AF0F               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9887  002A34  D002               	goto	l873
  9888                           
  9889                           ; BSR set to: 1
  9890  002A36  0101               	movlb	1	; () banked
  9891  002A38  8D13               	bsf	___ftadd@sign& (0+255),6,b
  9892  002A3A                     l873:
  9893                           
  9894                           ; BSR set to: 1
  9895  002A3A  0101               	movlb	1	; () banked
  9896  002A3C  8F0B               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9897                           
  9898                           ; BSR set to: 1
  9899  002A3E  0EFF               	movlw	255
  9900  002A40  0101               	movlb	1	; () banked
  9901  002A42  170A               	andwf	___ftadd@f1& (0+255),f,b
  9902  002A44  0EFF               	movlw	255
  9903  002A46  0101               	movlb	1	; () banked
  9904  002A48  170B               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9905  002A4A  0E00               	movlw	0
  9906  002A4C  0101               	movlb	1	; () banked
  9907  002A4E  170C               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9908  002A50  0101               	movlb	1	; () banked
  9909  002A52  8F0E               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9910                           
  9911                           ; BSR set to: 1
  9912  002A54  0EFF               	movlw	255
  9913  002A56  0101               	movlb	1	; () banked
  9914  002A58  170D               	andwf	___ftadd@f2& (0+255),f,b
  9915  002A5A  0EFF               	movlw	255
  9916  002A5C  0101               	movlb	1	; () banked
  9917  002A5E  170E               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9918  002A60  0E00               	movlw	0
  9919  002A62  0101               	movlb	1	; () banked
  9920  002A64  170F               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9921                           
  9922                           ; BSR set to: 1
  9923  002A66  0101               	movlb	1	; () banked
  9924  002A68  5114               	movf	___ftadd@exp2& (0+255),w,b
  9925  002A6A  0101               	movlb	1	; () banked
  9926  002A6C  5D15               	subwf	___ftadd@exp1& (0+255),w,b
  9927  002A6E  B0D8               	btfsc	status,0,c
  9928  002A70  D025               	goto	l7062
  9929  002A72                     l7052:
  9930                           
  9931                           ; BSR set to: 1
  9932  002A72  0101               	movlb	1	; () banked
  9933  002A74  90D8               	bcf	status,0,c
  9934  002A76  370D               	rlcf	___ftadd@f2& (0+255),f,b
  9935  002A78  370E               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9936  002A7A  370F               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9937  002A7C  0101               	movlb	1	; () banked
  9938  002A7E  0714               	decf	___ftadd@exp2& (0+255),f,b
  9939                           
  9940                           ; BSR set to: 1
  9941  002A80  0101               	movlb	1	; () banked
  9942  002A82  5115               	movf	___ftadd@exp1& (0+255),w,b
  9943  002A84  0101               	movlb	1	; () banked
  9944  002A86  1914               	xorwf	___ftadd@exp2& (0+255),w,b
  9945  002A88  B4D8               	btfsc	status,2,c
  9946  002A8A  D011               	goto	l7060
  9947                           
  9948                           ; BSR set to: 1
  9949  002A8C  0101               	movlb	1	; () banked
  9950  002A8E  0713               	decf	___ftadd@sign& (0+255),f,b
  9951  002A90  C113  F110         	movff	___ftadd@sign,??___ftadd
  9952  002A94  0E07               	movlw	7
  9953  002A96  0101               	movlb	1	; () banked
  9954  002A98  1710               	andwf	??___ftadd& (0+255),f,b
  9955  002A9A  B4D8               	btfsc	status,2,c
  9956  002A9C  D008               	goto	l7060
  9957  002A9E  D7E9               	goto	l7052
  9958  002AA0                     l7058:
  9959                           
  9960                           ; BSR set to: 1
  9961  002AA0  0101               	movlb	1	; () banked
  9962  002AA2  90D8               	bcf	status,0,c
  9963  002AA4  330C               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9964  002AA6  330B               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9965  002AA8  330A               	rrcf	___ftadd@f1& (0+255),f,b
  9966  002AAA  0101               	movlb	1	; () banked
  9967  002AAC  2B15               	incf	___ftadd@exp1& (0+255),f,b
  9968  002AAE                     l7060:
  9969                           
  9970                           ; BSR set to: 1
  9971  002AAE  0101               	movlb	1	; () banked
  9972  002AB0  5114               	movf	___ftadd@exp2& (0+255),w,b
  9973  002AB2  0101               	movlb	1	; () banked
  9974  002AB4  1915               	xorwf	___ftadd@exp1& (0+255),w,b
  9975  002AB6  B4D8               	btfsc	status,2,c
  9976  002AB8  D02B               	goto	l882
  9977  002ABA  D7F2               	goto	l7058
  9978  002ABC                     l7062:
  9979                           
  9980                           ; BSR set to: 1
  9981  002ABC  0101               	movlb	1	; () banked
  9982  002ABE  5115               	movf	___ftadd@exp1& (0+255),w,b
  9983  002AC0  0101               	movlb	1	; () banked
  9984  002AC2  5D14               	subwf	___ftadd@exp2& (0+255),w,b
  9985  002AC4  B0D8               	btfsc	status,0,c
  9986  002AC6  D024               	goto	l882
  9987  002AC8                     l7064:
  9988                           
  9989                           ; BSR set to: 1
  9990  002AC8  0101               	movlb	1	; () banked
  9991  002ACA  90D8               	bcf	status,0,c
  9992  002ACC  370A               	rlcf	___ftadd@f1& (0+255),f,b
  9993  002ACE  370B               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9994  002AD0  370C               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9995  002AD2  0101               	movlb	1	; () banked
  9996  002AD4  0715               	decf	___ftadd@exp1& (0+255),f,b
  9997                           
  9998                           ; BSR set to: 1
  9999  002AD6  0101               	movlb	1	; () banked
 10000  002AD8  5115               	movf	___ftadd@exp1& (0+255),w,b
 10001  002ADA  0101               	movlb	1	; () banked
 10002  002ADC  1914               	xorwf	___ftadd@exp2& (0+255),w,b
 10003  002ADE  B4D8               	btfsc	status,2,c
 10004  002AE0  D011               	goto	l7072
 10005                           
 10006                           ; BSR set to: 1
 10007  002AE2  0101               	movlb	1	; () banked
 10008  002AE4  0713               	decf	___ftadd@sign& (0+255),f,b
 10009  002AE6  C113  F110         	movff	___ftadd@sign,??___ftadd
 10010  002AEA  0E07               	movlw	7
 10011  002AEC  0101               	movlb	1	; () banked
 10012  002AEE  1710               	andwf	??___ftadd& (0+255),f,b
 10013  002AF0  B4D8               	btfsc	status,2,c
 10014  002AF2  D008               	goto	l7072
 10015  002AF4  D7E9               	goto	l7064
 10016  002AF6                     l7070:
 10017                           
 10018                           ; BSR set to: 1
 10019  002AF6  0101               	movlb	1	; () banked
 10020  002AF8  90D8               	bcf	status,0,c
 10021  002AFA  330F               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10022  002AFC  330E               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10023  002AFE  330D               	rrcf	___ftadd@f2& (0+255),f,b
 10024  002B00  0101               	movlb	1	; () banked
 10025  002B02  2B14               	incf	___ftadd@exp2& (0+255),f,b
 10026  002B04                     l7072:
 10027                           
 10028                           ; BSR set to: 1
 10029  002B04  0101               	movlb	1	; () banked
 10030  002B06  5114               	movf	___ftadd@exp2& (0+255),w,b
 10031  002B08  0101               	movlb	1	; () banked
 10032  002B0A  1915               	xorwf	___ftadd@exp1& (0+255),w,b
 10033  002B0C  A4D8               	btfss	status,2,c
 10034  002B0E  D7F3               	goto	l7070
 10035  002B10                     l882:
 10036                           
 10037                           ; BSR set to: 1
 10038  002B10  0101               	movlb	1	; () banked
 10039  002B12  AF13               	btfss	___ftadd@sign& (0+255),7,b
 10040  002B14  D012               	goto	l891
 10041                           
 10042                           ; BSR set to: 1
 10043  002B16  0EFF               	movlw	255
 10044  002B18  0101               	movlb	1	; () banked
 10045  002B1A  1B0A               	xorwf	___ftadd@f1& (0+255),f,b
 10046  002B1C  0EFF               	movlw	255
 10047  002B1E  0101               	movlb	1	; () banked
 10048  002B20  1B0B               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10049  002B22  0EFF               	movlw	255
 10050  002B24  0101               	movlb	1	; () banked
 10051  002B26  1B0C               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10052  002B28  0E01               	movlw	1
 10053  002B2A  0101               	movlb	1	; () banked
 10054  002B2C  270A               	addwf	___ftadd@f1& (0+255),f,b
 10055  002B2E  0E00               	movlw	0
 10056  002B30  0101               	movlb	1	; () banked
 10057  002B32  230B               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10058  002B34  0E00               	movlw	0
 10059  002B36  0101               	movlb	1	; () banked
 10060  002B38  230C               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10061  002B3A                     l891:
 10062                           
 10063                           ; BSR set to: 1
 10064  002B3A  0101               	movlb	1	; () banked
 10065  002B3C  AD13               	btfss	___ftadd@sign& (0+255),6,b
 10066  002B3E  D012               	goto	l7078
 10067                           
 10068                           ; BSR set to: 1
 10069  002B40  0EFF               	movlw	255
 10070  002B42  0101               	movlb	1	; () banked
 10071  002B44  1B0D               	xorwf	___ftadd@f2& (0+255),f,b
 10072  002B46  0EFF               	movlw	255
 10073  002B48  0101               	movlb	1	; () banked
 10074  002B4A  1B0E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10075  002B4C  0EFF               	movlw	255
 10076  002B4E  0101               	movlb	1	; () banked
 10077  002B50  1B0F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10078  002B52  0E01               	movlw	1
 10079  002B54  0101               	movlb	1	; () banked
 10080  002B56  270D               	addwf	___ftadd@f2& (0+255),f,b
 10081  002B58  0E00               	movlw	0
 10082  002B5A  0101               	movlb	1	; () banked
 10083  002B5C  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10084  002B5E  0E00               	movlw	0
 10085  002B60  0101               	movlb	1	; () banked
 10086  002B62  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10087  002B64                     l7078:
 10088                           
 10089                           ; BSR set to: 1
 10090  002B64  0E00               	movlw	0
 10091  002B66  0101               	movlb	1	; () banked
 10092  002B68  6F13               	movwf	___ftadd@sign& (0+255),b
 10093                           
 10094                           ; BSR set to: 1
 10095  002B6A  0101               	movlb	1	; () banked
 10096  002B6C  510A               	movf	___ftadd@f1& (0+255),w,b
 10097  002B6E  0101               	movlb	1	; () banked
 10098  002B70  270D               	addwf	___ftadd@f2& (0+255),f,b
 10099  002B72  0101               	movlb	1	; () banked
 10100  002B74  510B               	movf	(___ftadd@f1+1)& (0+255),w,b
 10101  002B76  0101               	movlb	1	; () banked
 10102  002B78  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10103  002B7A  0101               	movlb	1	; () banked
 10104  002B7C  510C               	movf	(___ftadd@f1+2)& (0+255),w,b
 10105  002B7E  0101               	movlb	1	; () banked
 10106  002B80  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10107                           
 10108                           ; BSR set to: 1
 10109  002B82  0101               	movlb	1	; () banked
 10110  002B84  AF0F               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10111  002B86  D015               	goto	l7088
 10112                           
 10113                           ; BSR set to: 1
 10114  002B88  0EFF               	movlw	255
 10115  002B8A  0101               	movlb	1	; () banked
 10116  002B8C  1B0D               	xorwf	___ftadd@f2& (0+255),f,b
 10117  002B8E  0EFF               	movlw	255
 10118  002B90  0101               	movlb	1	; () banked
 10119  002B92  1B0E               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10120  002B94  0EFF               	movlw	255
 10121  002B96  0101               	movlb	1	; () banked
 10122  002B98  1B0F               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10123  002B9A  0E01               	movlw	1
 10124  002B9C  0101               	movlb	1	; () banked
 10125  002B9E  270D               	addwf	___ftadd@f2& (0+255),f,b
 10126  002BA0  0E00               	movlw	0
 10127  002BA2  0101               	movlb	1	; () banked
 10128  002BA4  230E               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10129  002BA6  0E00               	movlw	0
 10130  002BA8  0101               	movlb	1	; () banked
 10131  002BAA  230F               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10132                           
 10133                           ; BSR set to: 1
 10134  002BAC  0E01               	movlw	1
 10135  002BAE  0101               	movlb	1	; () banked
 10136  002BB0  6F13               	movwf	___ftadd@sign& (0+255),b
 10137  002BB2                     l7088:
 10138                           
 10139                           ; BSR set to: 1
 10140  002BB2  C10D  F09E         	movff	___ftadd@f2,___ftpack@arg
 10141  002BB6  C10E  F09F         	movff	___ftadd@f2+1,___ftpack@arg+1
 10142  002BBA  C10F  F0A0         	movff	___ftadd@f2+2,___ftpack@arg+2
 10143  002BBE  C115  F0A1         	movff	___ftadd@exp1,___ftpack@exp
 10144  002BC2  C113  F0A2         	movff	___ftadd@sign,___ftpack@sign
 10145  002BC6  ECAF  F01F         	call	___ftpack	;wreg free
 10146  002BCA  C09E  F10A         	movff	?___ftpack,?___ftadd
 10147  002BCE  C09F  F10B         	movff	?___ftpack+1,?___ftadd+1
 10148  002BD2  C0A0  F10C         	movff	?___ftpack+2,?___ftadd+2
 10149  002BD6  0012               	return	
 10150  002BD8                     __end_of___ftadd:
 10151                           	opt stack 0
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           prodh	equ	0xFF4
 10157                           prodl	equ	0xFF3
 10158                           intcon	equ	0xFF2
 10159                           intcon2	equ	0xFF1
 10160                           intcon3	equ	0xFF0
 10161                           postinc0	equ	0xFEE
 10162                           wreg	equ	0xFE8
 10163                           indf2	equ	0xFDF
 10164                           postinc2	equ	0xFDE
 10165                           postdec2	equ	0xFDD
 10166                           fsr2h	equ	0xFDA
 10167                           fsr2l	equ	0xFD9
 10168                           status	equ	0xFD8
 10169                           
 10170 ;; *************** function ___ftpack *****************
 10171 ;; Defined at:
 10172 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;  arg             3   30[BANK0 ] unsigned um
 10175 ;;  exp             1   33[BANK0 ] unsigned char 
 10176 ;;  sign            1   34[BANK0 ] unsigned char 
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  3   30[BANK0 ] float 
 10181 ;; Registers used:
 10182 ;;		wreg, status,2, status,0
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10188 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10191 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;Total ram usage:        8 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    7
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		___awtoft
 10199 ;;		___ftadd
 10200 ;;		___ftdiv
 10201 ;;		___ftmul
 10202 ;;		___lltoft
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text29
 10207  003F5E                     __ptext29:
 10208                           	opt stack 0
 10209  003F5E                     ___ftpack:
 10210                           	opt stack 19
 10211                           
 10212                           ;incstack = 0
 10213  003F5E  0100               	movlb	0	; () banked
 10214  003F60  51A1               	movf	___ftpack@exp& (0+255),w,b
 10215  003F62  0100               	movlb	0	; () banked
 10216  003F64  B4D8               	btfsc	status,2,c
 10217  003F66  D008               	goto	l6984
 10218                           
 10219                           ; BSR set to: 0
 10220  003F68  0100               	movlb	0	; () banked
 10221  003F6A  519E               	movf	___ftpack@arg& (0+255),w,b
 10222  003F6C  0100               	movlb	0	; () banked
 10223  003F6E  119F               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10224  003F70  0100               	movlb	0	; () banked
 10225  003F72  11A0               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10226  003F74  A4D8               	btfss	status,2,c
 10227  003F76  D011               	goto	l6990
 10228  003F78                     l6984:
 10229                           
 10230                           ; BSR set to: 0
 10231  003F78  0E00               	movlw	0
 10232  003F7A  0100               	movlb	0	; () banked
 10233  003F7C  6F9E               	movwf	?___ftpack& (0+255),b
 10234  003F7E  0E00               	movlw	0
 10235  003F80  0100               	movlb	0	; () banked
 10236  003F82  6F9F               	movwf	(?___ftpack+1)& (0+255),b
 10237  003F84  0E00               	movlw	0
 10238  003F86  0100               	movlb	0	; () banked
 10239  003F88  6FA0               	movwf	(?___ftpack+2)& (0+255),b
 10240                           
 10241                           ; BSR set to: 0
 10242  003F8A  0012               	return	
 10243  003F8C                     l6988:
 10244                           
 10245                           ; BSR set to: 0
 10246  003F8C  0100               	movlb	0	; () banked
 10247  003F8E  2BA1               	incf	___ftpack@exp& (0+255),f,b
 10248  003F90  0100               	movlb	0	; () banked
 10249  003F92  90D8               	bcf	status,0,c
 10250  003F94  33A0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10251  003F96  339F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10252  003F98  339E               	rrcf	___ftpack@arg& (0+255),f,b
 10253  003F9A                     l6990:
 10254                           
 10255                           ; BSR set to: 0
 10256  003F9A  0E00               	movlw	0
 10257  003F9C  0100               	movlb	0	; () banked
 10258  003F9E  159E               	andwf	___ftpack@arg& (0+255),w,b
 10259  003FA0  0100               	movlb	0	; () banked
 10260  003FA2  6FA3               	movwf	??___ftpack& (0+255),b
 10261  003FA4  0E00               	movlw	0
 10262  003FA6  0100               	movlb	0	; () banked
 10263  003FA8  159F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10264  003FAA  0100               	movlb	0	; () banked
 10265  003FAC  6FA4               	movwf	(??___ftpack+1)& (0+255),b
 10266  003FAE  0EFE               	movlw	254
 10267  003FB0  0100               	movlb	0	; () banked
 10268  003FB2  15A0               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10269  003FB4  0100               	movlb	0	; () banked
 10270  003FB6  6FA5               	movwf	(??___ftpack+2)& (0+255),b
 10271  003FB8  0100               	movlb	0	; () banked
 10272  003FBA  51A3               	movf	??___ftpack& (0+255),w,b
 10273  003FBC  0100               	movlb	0	; () banked
 10274  003FBE  11A4               	iorwf	(??___ftpack+1)& (0+255),w,b
 10275  003FC0  0100               	movlb	0	; () banked
 10276  003FC2  11A5               	iorwf	(??___ftpack+2)& (0+255),w,b
 10277  003FC4  B4D8               	btfsc	status,2,c
 10278  003FC6  D011               	goto	l6996
 10279  003FC8  D7E1               	goto	l6988
 10280  003FCA                     l6992:
 10281                           
 10282                           ; BSR set to: 0
 10283  003FCA  0100               	movlb	0	; () banked
 10284  003FCC  2BA1               	incf	___ftpack@exp& (0+255),f,b
 10285                           
 10286                           ; BSR set to: 0
 10287  003FCE  0E01               	movlw	1
 10288  003FD0  0100               	movlb	0	; () banked
 10289  003FD2  279E               	addwf	___ftpack@arg& (0+255),f,b
 10290  003FD4  0E00               	movlw	0
 10291  003FD6  0100               	movlb	0	; () banked
 10292  003FD8  239F               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10293  003FDA  0E00               	movlw	0
 10294  003FDC  0100               	movlb	0	; () banked
 10295  003FDE  23A0               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10296  003FE0  0100               	movlb	0	; () banked
 10297  003FE2  90D8               	bcf	status,0,c
 10298  003FE4  33A0               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10299  003FE6  339F               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10300  003FE8  339E               	rrcf	___ftpack@arg& (0+255),f,b
 10301  003FEA                     l6996:
 10302                           
 10303                           ; BSR set to: 0
 10304  003FEA  0E00               	movlw	0
 10305  003FEC  0100               	movlb	0	; () banked
 10306  003FEE  159E               	andwf	___ftpack@arg& (0+255),w,b
 10307  003FF0  0100               	movlb	0	; () banked
 10308  003FF2  6FA3               	movwf	??___ftpack& (0+255),b
 10309  003FF4  0E00               	movlw	0
 10310  003FF6  0100               	movlb	0	; () banked
 10311  003FF8  159F               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10312  003FFA  0100               	movlb	0	; () banked
 10313  003FFC  6FA4               	movwf	(??___ftpack+1)& (0+255),b
 10314  003FFE  0EFF               	movlw	255
 10315  004000  0100               	movlb	0	; () banked
 10316  004002  15A0               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10317  004004  0100               	movlb	0	; () banked
 10318  004006  6FA5               	movwf	(??___ftpack+2)& (0+255),b
 10319  004008  0100               	movlb	0	; () banked
 10320  00400A  51A3               	movf	??___ftpack& (0+255),w,b
 10321  00400C  0100               	movlb	0	; () banked
 10322  00400E  11A4               	iorwf	(??___ftpack+1)& (0+255),w,b
 10323  004010  0100               	movlb	0	; () banked
 10324  004012  11A5               	iorwf	(??___ftpack+2)& (0+255),w,b
 10325  004014  B4D8               	btfsc	status,2,c
 10326  004016  D008               	goto	l7000
 10327  004018  D7D8               	goto	l6992
 10328  00401A                     l6998:
 10329                           
 10330                           ; BSR set to: 0
 10331  00401A  0100               	movlb	0	; () banked
 10332  00401C  07A1               	decf	___ftpack@exp& (0+255),f,b
 10333  00401E  0100               	movlb	0	; () banked
 10334  004020  90D8               	bcf	status,0,c
 10335  004022  379E               	rlcf	___ftpack@arg& (0+255),f,b
 10336  004024  379F               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10337  004026  37A0               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10338  004028                     l7000:
 10339                           
 10340                           ; BSR set to: 0
 10341  004028  0100               	movlb	0	; () banked
 10342  00402A  BF9F               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10343  00402C  D004               	goto	l844
 10344                           
 10345                           ; BSR set to: 0
 10346  00402E  0E02               	movlw	2
 10347  004030  0100               	movlb	0	; () banked
 10348  004032  61A1               	cpfslt	___ftpack@exp& (0+255),b
 10349  004034  D7F2               	goto	l6998
 10350  004036                     l844:
 10351                           
 10352                           ; BSR set to: 0
 10353  004036  0100               	movlb	0	; () banked
 10354  004038  B1A1               	btfsc	___ftpack@exp& (0+255),0,b
 10355  00403A  D002               	goto	l7006
 10356                           
 10357                           ; BSR set to: 0
 10358  00403C  0100               	movlb	0	; () banked
 10359  00403E  9F9F               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10360  004040                     l7006:
 10361                           
 10362                           ; BSR set to: 0
 10363  004040  0100               	movlb	0	; () banked
 10364  004042  90D8               	bcf	status,0,c
 10365  004044  33A1               	rrcf	___ftpack@exp& (0+255),f,b
 10366  004046  0100               	movlb	0	; () banked
 10367  004048  51A1               	movf	___ftpack@exp& (0+255),w,b
 10368  00404A  0100               	movlb	0	; () banked
 10369  00404C  13A0               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10370                           
 10371                           ; BSR set to: 0
 10372  00404E  0100               	movlb	0	; () banked
 10373  004050  51A2               	movf	___ftpack@sign& (0+255),w,b
 10374  004052  0100               	movlb	0	; () banked
 10375  004054  B4D8               	btfsc	status,2,c
 10376  004056  D002               	goto	l7012
 10377                           
 10378                           ; BSR set to: 0
 10379  004058  0100               	movlb	0	; () banked
 10380  00405A  8FA0               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10381  00405C                     l7012:
 10382                           
 10383                           ; BSR set to: 0
 10384  00405C  C09E  F09E         	movff	___ftpack@arg,?___ftpack
 10385  004060  C09F  F09F         	movff	___ftpack@arg+1,?___ftpack+1
 10386  004064  C0A0  F0A0         	movff	___ftpack@arg+2,?___ftpack+2
 10387  004068  0012               	return	
 10388  00406A                     __end_of___ftpack:
 10389                           	opt stack 0
 10390                           tblptru	equ	0xFF8
 10391                           tblptrh	equ	0xFF7
 10392                           tblptrl	equ	0xFF6
 10393                           tablat	equ	0xFF5
 10394                           prodh	equ	0xFF4
 10395                           prodl	equ	0xFF3
 10396                           intcon	equ	0xFF2
 10397                           intcon2	equ	0xFF1
 10398                           intcon3	equ	0xFF0
 10399                           postinc0	equ	0xFEE
 10400                           wreg	equ	0xFE8
 10401                           indf2	equ	0xFDF
 10402                           postinc2	equ	0xFDE
 10403                           postdec2	equ	0xFDD
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408 ;; *************** function ___ftneg *****************
 10409 ;; Defined at:
 10410 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  f1              3   30[BANK0 ] float 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  3   30[BANK0 ] float 
 10417 ;; Registers used:
 10418 ;;		wreg, status,2, status,0
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10424 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;Total ram usage:        3 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    7
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_printf
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text30
 10439  005790                     __ptext30:
 10440                           	opt stack 0
 10441  005790                     ___ftneg:
 10442                           	opt stack 21
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;incstack = 0
 10446  005790  0100               	movlb	0	; () banked
 10447  005792  519E               	movf	___ftneg@f1& (0+255),w,b
 10448  005794  0100               	movlb	0	; () banked
 10449  005796  119F               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10450  005798  0100               	movlb	0	; () banked
 10451  00579A  11A0               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10452  00579C  B4D8               	btfsc	status,2,c
 10453  00579E  D009               	goto	l941
 10454                           
 10455                           ; BSR set to: 0
 10456  0057A0  0E00               	movlw	0
 10457  0057A2  0100               	movlb	0	; () banked
 10458  0057A4  1B9E               	xorwf	___ftneg@f1& (0+255),f,b
 10459  0057A6  0E00               	movlw	0
 10460  0057A8  0100               	movlb	0	; () banked
 10461  0057AA  1B9F               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10462  0057AC  0E80               	movlw	128
 10463  0057AE  0100               	movlb	0	; () banked
 10464  0057B0  1BA0               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10465  0057B2                     l941:
 10466                           
 10467                           ; BSR set to: 0
 10468  0057B2  C09E  F09E         	movff	___ftneg@f1,?___ftneg
 10469  0057B6  C09F  F09F         	movff	___ftneg@f1+1,?___ftneg+1
 10470  0057BA  C0A0  F0A0         	movff	___ftneg@f1+2,?___ftneg+2
 10471                           
 10472                           ; BSR set to: 0
 10473  0057BE  0012               	return		;funcret
 10474  0057C0                     __end_of___ftneg:
 10475                           	opt stack 0
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           intcon2	equ	0xFF1
 10484                           intcon3	equ	0xFF0
 10485                           postinc0	equ	0xFEE
 10486                           wreg	equ	0xFE8
 10487                           indf2	equ	0xFDF
 10488                           postinc2	equ	0xFDE
 10489                           postdec2	equ	0xFDD
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function ___ftge *****************
 10495 ;; Defined at:
 10496 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  ff1             3   53[BANK0 ] float 
 10499 ;;  ff2             3   56[BANK0 ] float 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;		None               void
 10504 ;; Registers used:
 10505 ;;		wreg, status,2, status,0
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:        9 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    7
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_operation
 10522 ;;		_printf
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text31
 10527  004A96                     __ptext31:
 10528                           	opt stack 0
 10529  004A96                     ___ftge:
 10530                           	opt stack 21
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;incstack = 0
 10534  004A96  0100               	movlb	0	; () banked
 10535  004A98  AFB7               	btfss	(___ftge@ff1+2)& (0+255),7,b
 10536  004A9A  D01D               	goto	l5090
 10537                           
 10538                           ; BSR set to: 0
 10539  004A9C  C0B5  F0BB         	movff	___ftge@ff1,??___ftge
 10540  004AA0  C0B6  F0BC         	movff	___ftge@ff1+1,??___ftge+1
 10541  004AA4  C0B7  F0BD         	movff	___ftge@ff1+2,??___ftge+2
 10542  004AA8  0100               	movlb	0	; () banked
 10543  004AAA  1FBB               	comf	??___ftge& (0+255),f,b
 10544  004AAC  1FBC               	comf	(??___ftge+1)& (0+255),f,b
 10545  004AAE  1FBD               	comf	(??___ftge+2)& (0+255),f,b
 10546  004AB0  2BBB               	incf	??___ftge& (0+255),f,b
 10547  004AB2  0E00               	movlw	0
 10548  004AB4  23BC               	addwfc	(??___ftge+1)& (0+255),f,b
 10549  004AB6  23BD               	addwfc	(??___ftge+2)& (0+255),f,b
 10550  004AB8  0E00               	movlw	0
 10551  004ABA  0100               	movlb	0	; () banked
 10552  004ABC  25BB               	addwf	??___ftge& (0+255),w,b
 10553  004ABE  0100               	movlb	0	; () banked
 10554  004AC0  6FB5               	movwf	___ftge@ff1& (0+255),b
 10555  004AC2  0E00               	movlw	0
 10556  004AC4  0100               	movlb	0	; () banked
 10557  004AC6  21BC               	addwfc	(??___ftge+1)& (0+255),w,b
 10558  004AC8  0100               	movlb	0	; () banked
 10559  004ACA  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
 10560  004ACC  0E80               	movlw	128
 10561  004ACE  0100               	movlb	0	; () banked
 10562  004AD0  21BD               	addwfc	(??___ftge+2)& (0+255),w,b
 10563  004AD2  0100               	movlb	0	; () banked
 10564  004AD4  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
 10565  004AD6                     l5090:
 10566                           
 10567                           ; BSR set to: 0
 10568  004AD6  0100               	movlb	0	; () banked
 10569  004AD8  AFBA               	btfss	(___ftge@ff2+2)& (0+255),7,b
 10570  004ADA  D01D               	goto	l5094
 10571                           
 10572                           ; BSR set to: 0
 10573  004ADC  C0B8  F0BB         	movff	___ftge@ff2,??___ftge
 10574  004AE0  C0B9  F0BC         	movff	___ftge@ff2+1,??___ftge+1
 10575  004AE4  C0BA  F0BD         	movff	___ftge@ff2+2,??___ftge+2
 10576  004AE8  0100               	movlb	0	; () banked
 10577  004AEA  1FBB               	comf	??___ftge& (0+255),f,b
 10578  004AEC  1FBC               	comf	(??___ftge+1)& (0+255),f,b
 10579  004AEE  1FBD               	comf	(??___ftge+2)& (0+255),f,b
 10580  004AF0  2BBB               	incf	??___ftge& (0+255),f,b
 10581  004AF2  0E00               	movlw	0
 10582  004AF4  23BC               	addwfc	(??___ftge+1)& (0+255),f,b
 10583  004AF6  23BD               	addwfc	(??___ftge+2)& (0+255),f,b
 10584  004AF8  0E00               	movlw	0
 10585  004AFA  0100               	movlb	0	; () banked
 10586  004AFC  25BB               	addwf	??___ftge& (0+255),w,b
 10587  004AFE  0100               	movlb	0	; () banked
 10588  004B00  6FB8               	movwf	___ftge@ff2& (0+255),b
 10589  004B02  0E00               	movlw	0
 10590  004B04  0100               	movlb	0	; () banked
 10591  004B06  21BC               	addwfc	(??___ftge+1)& (0+255),w,b
 10592  004B08  0100               	movlb	0	; () banked
 10593  004B0A  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
 10594  004B0C  0E80               	movlw	128
 10595  004B0E  0100               	movlb	0	; () banked
 10596  004B10  21BD               	addwfc	(??___ftge+2)& (0+255),w,b
 10597  004B12  0100               	movlb	0	; () banked
 10598  004B14  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
 10599  004B16                     l5094:
 10600                           
 10601                           ; BSR set to: 0
 10602  004B16  0E00               	movlw	0
 10603  004B18  0100               	movlb	0	; () banked
 10604  004B1A  1BB5               	xorwf	___ftge@ff1& (0+255),f,b
 10605  004B1C  0E00               	movlw	0
 10606  004B1E  0100               	movlb	0	; () banked
 10607  004B20  1BB6               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 10608  004B22  0E80               	movlw	128
 10609  004B24  0100               	movlb	0	; () banked
 10610  004B26  1BB7               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 10611                           
 10612                           ; BSR set to: 0
 10613  004B28  0E00               	movlw	0
 10614  004B2A  0100               	movlb	0	; () banked
 10615  004B2C  1BB8               	xorwf	___ftge@ff2& (0+255),f,b
 10616  004B2E  0E00               	movlw	0
 10617  004B30  0100               	movlb	0	; () banked
 10618  004B32  1BB9               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 10619  004B34  0E80               	movlw	128
 10620  004B36  0100               	movlb	0	; () banked
 10621  004B38  1BBA               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 10622  004B3A  0100               	movlb	0	; () banked
 10623  004B3C  51B8               	movf	___ftge@ff2& (0+255),w,b
 10624  004B3E  0100               	movlb	0	; () banked
 10625  004B40  5DB5               	subwf	___ftge@ff1& (0+255),w,b
 10626  004B42  0100               	movlb	0	; () banked
 10627  004B44  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
 10628  004B46  0100               	movlb	0	; () banked
 10629  004B48  59B6               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 10630  004B4A  0100               	movlb	0	; () banked
 10631  004B4C  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
 10632  004B4E  0100               	movlb	0	; () banked
 10633  004B50  59B7               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 10634  004B52  B0D8               	btfsc	status,0,c
 10635  004B54  D002               	goto	l5100
 10636                           
 10637                           ; BSR set to: 0
 10638  004B56  90D8               	bcf	status,0,c
 10639  004B58  0012               	return	
 10640  004B5A                     l5100:
 10641                           
 10642                           ; BSR set to: 0
 10643  004B5A  80D8               	bsf	status,0,c
 10644                           
 10645                           ; BSR set to: 0
 10646  004B5C  0012               	return	
 10647  004B5E                     __end_of___ftge:
 10648                           	opt stack 0
 10649                           tblptru	equ	0xFF8
 10650                           tblptrh	equ	0xFF7
 10651                           tblptrl	equ	0xFF6
 10652                           tablat	equ	0xFF5
 10653                           prodh	equ	0xFF4
 10654                           prodl	equ	0xFF3
 10655                           intcon	equ	0xFF2
 10656                           intcon2	equ	0xFF1
 10657                           intcon3	equ	0xFF0
 10658                           postinc0	equ	0xFEE
 10659                           wreg	equ	0xFE8
 10660                           indf2	equ	0xFDF
 10661                           postinc2	equ	0xFDE
 10662                           postdec2	equ	0xFDD
 10663                           fsr2h	equ	0xFDA
 10664                           fsr2l	equ	0xFD9
 10665                           status	equ	0xFD8
 10666                           
 10667 ;; *************** function _lcdInst *****************
 10668 ;; Defined at:
 10669 ;;		line 26 in file "lcd.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;  data            1    wreg     unsigned char 
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;  data            1   32[BANK0 ] unsigned char 
 10674 ;; Return value:  Size  Location     Type
 10675 ;;                  1    wreg      void 
 10676 ;; Registers used:
 10677 ;;		wreg, status,2, status,0, cstack
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;Total ram usage:        1 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    8
 10690 ;; This function calls:
 10691 ;;		_lcdNibble
 10692 ;; This function is called by:
 10693 ;;		_initLCD
 10694 ;;		_standby
 10695 ;;		_date_time
 10696 ;;		_bottle_count
 10697 ;;		_bottle_time
 10698 ;;		_operation
 10699 ;;		_operationend
 10700 ;;		_emergencystop
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text32
 10705  005916                     __ptext32:
 10706                           	opt stack 0
 10707  005916                     _lcdInst:
 10708                           	opt stack 21
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;incstack = 0
 10712                           ;lcdInst@data stored from wreg
 10713  005916  0100               	movlb	0	; () banked
 10714  005918  6FA0               	movwf	lcdInst@data& (0+255),b
 10715                           
 10716                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 10717  00591A  948C               	bcf	3980,2,c	;volatile
 10718                           
 10719                           ;lcd.c: 28: lcdNibble(data);
 10720  00591C  0100               	movlb	0	; () banked
 10721  00591E  51A0               	movf	lcdInst@data& (0+255),w,b
 10722  005920  ECF0  F029         	call	_lcdNibble
 10723  005924  0012               	return		;funcret
 10724  005926                     __end_of_lcdInst:
 10725                           	opt stack 0
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           intcon2	equ	0xFF1
 10734                           intcon3	equ	0xFF0
 10735                           postinc0	equ	0xFEE
 10736                           wreg	equ	0xFE8
 10737                           indf2	equ	0xFDF
 10738                           postinc2	equ	0xFDE
 10739                           postdec2	equ	0xFDD
 10740                           fsr2h	equ	0xFDA
 10741                           fsr2l	equ	0xFD9
 10742                           status	equ	0xFD8
 10743                           
 10744 ;; *************** function _lcdNibble *****************
 10745 ;; Defined at:
 10746 ;;		line 36 in file "lcd.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;  data            1    wreg     unsigned char 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;  data            1   31[BANK0 ] unsigned char 
 10751 ;;  temp            1   30[BANK0 ] unsigned char 
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  1    wreg      void 
 10754 ;; Registers used:
 10755 ;;		wreg, status,2, status,0
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;Total ram usage:        2 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    7
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_lcdInst
 10772 ;;		_putch
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text33
 10777  0053E0                     __ptext33:
 10778                           	opt stack 0
 10779  0053E0                     _lcdNibble:
 10780                           	opt stack 20
 10781                           
 10782                           ;incstack = 0
 10783                           ;lcdNibble@data stored from wreg
 10784  0053E0  0100               	movlb	0	; () banked
 10785  0053E2  6F9F               	movwf	lcdNibble@data& (0+255),b
 10786                           
 10787                           ;lcd.c: 38: char temp = data & 0xF0;
 10788  0053E4  0100               	movlb	0	; () banked
 10789  0053E6  519F               	movf	lcdNibble@data& (0+255),w,b
 10790  0053E8  0BF0               	andlw	240
 10791  0053EA  0100               	movlb	0	; () banked
 10792  0053EC  6F9E               	movwf	lcdNibble@temp& (0+255),b
 10793                           
 10794                           ;lcd.c: 39: LATD = LATD & 0x0F;
 10795  0053EE  508C               	movf	3980,w,c	;volatile
 10796  0053F0  0B0F               	andlw	15
 10797  0053F2  6E8C               	movwf	3980,c	;volatile
 10798                           
 10799                           ;lcd.c: 40: LATD = temp | LATD;
 10800  0053F4  0100               	movlb	0	; () banked
 10801  0053F6  519E               	movf	lcdNibble@temp& (0+255),w,b
 10802  0053F8  108C               	iorwf	3980,w,c	;volatile
 10803  0053FA  6E8C               	movwf	3980,c	;volatile
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 10807  0053FC  968C               	bcf	3980,3,c	;volatile
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10811  0053FE  0E19               	movlw	25
 10812  005400                     u9117:
 10813  005400  2EE8               	decfsz	wreg,f,c
 10814  005402  D7FE               	bra	u9117
 10815                           
 10816                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 10817  005404  868C               	bsf	3980,3,c	;volatile
 10818                           
 10819                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10820  005406  0E19               	movlw	25
 10821  005408                     u9127:
 10822  005408  2EE8               	decfsz	wreg,f,c
 10823  00540A  D7FE               	bra	u9127
 10824                           
 10825                           ;lcd.c: 47: data = data << 4;
 10826  00540C  0100               	movlb	0	; () banked
 10827  00540E  399F               	swapf	lcdNibble@data& (0+255),w,b
 10828  005410  0BF0               	andlw	240
 10829  005412  0100               	movlb	0	; () banked
 10830  005414  6F9F               	movwf	lcdNibble@data& (0+255),b
 10831                           
 10832                           ;lcd.c: 49: temp = data & 0xF0;
 10833  005416  0100               	movlb	0	; () banked
 10834  005418  519F               	movf	lcdNibble@data& (0+255),w,b
 10835  00541A  0BF0               	andlw	240
 10836  00541C  0100               	movlb	0	; () banked
 10837  00541E  6F9E               	movwf	lcdNibble@temp& (0+255),b
 10838                           
 10839                           ;lcd.c: 50: LATD = LATD & 0x0F;
 10840  005420  508C               	movf	3980,w,c	;volatile
 10841  005422  0B0F               	andlw	15
 10842  005424  6E8C               	movwf	3980,c	;volatile
 10843                           
 10844                           ;lcd.c: 51: LATD = temp | LATD;
 10845  005426  0100               	movlb	0	; () banked
 10846  005428  519E               	movf	lcdNibble@temp& (0+255),w,b
 10847  00542A  108C               	iorwf	3980,w,c	;volatile
 10848  00542C  6E8C               	movwf	3980,c	;volatile
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 10852  00542E  968C               	bcf	3980,3,c	;volatile
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10856  005430  0E19               	movlw	25
 10857  005432                     u9137:
 10858  005432  2EE8               	decfsz	wreg,f,c
 10859  005434  D7FE               	bra	u9137
 10860                           
 10861                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 10862  005436  868C               	bsf	3980,3,c	;volatile
 10863                           
 10864                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10865  005438  0E19               	movlw	25
 10866  00543A                     u9147:
 10867  00543A  2EE8               	decfsz	wreg,f,c
 10868  00543C  D7FE               	bra	u9147
 10869  00543E  0012               	return		;funcret
 10870  005440                     __end_of_lcdNibble:
 10871                           	opt stack 0
 10872                           tblptru	equ	0xFF8
 10873                           tblptrh	equ	0xFF7
 10874                           tblptrl	equ	0xFF6
 10875                           tablat	equ	0xFF5
 10876                           prodh	equ	0xFF4
 10877                           prodl	equ	0xFF3
 10878                           intcon	equ	0xFF2
 10879                           intcon2	equ	0xFF1
 10880                           intcon3	equ	0xFF0
 10881                           postinc0	equ	0xFEE
 10882                           wreg	equ	0xFE8
 10883                           indf2	equ	0xFDF
 10884                           postinc2	equ	0xFDE
 10885                           postdec2	equ	0xFDD
 10886                           fsr2h	equ	0xFDA
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _I2C_Master_Init *****************
 10891 ;; Defined at:
 10892 ;;		line 14 in file "I2C.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  c               4   43[BANK0 ] const unsigned long 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, status,2, status,0, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:        8 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    8
 10913 ;; This function calls:
 10914 ;;		___lldiv
 10915 ;; This function is called by:
 10916 ;;		_main
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text34
 10921  005440                     __ptext34:
 10922                           	opt stack 0
 10923  005440                     _I2C_Master_Init:
 10924                           	opt stack 22
 10925                           
 10926                           ;I2C.c: 17: SSPSTAT = 0b00000000;
 10927                           
 10928                           ;incstack = 0
 10929  005440  0E00               	movlw	0
 10930  005442  6EC7               	movwf	4039,c	;volatile
 10931                           
 10932                           ;I2C.c: 18: SSPCON1 = 0b00101000;
 10933  005444  0E28               	movlw	40
 10934  005446  6EC6               	movwf	4038,c	;volatile
 10935                           
 10936                           ;I2C.c: 19: SSPCON2 = 0b00000000;
 10937  005448  0E00               	movlw	0
 10938  00544A  6EC5               	movwf	4037,c	;volatile
 10939                           
 10940                           ;I2C.c: 20: SSPADD = (10000000/(4*c))-1;
 10941  00544C  0E80               	movlw	128
 10942  00544E  0100               	movlb	0	; () banked
 10943  005450  6F9E               	movwf	___lldiv@dividend& (0+255),b
 10944  005452  0E96               	movlw	150
 10945  005454  6F9F               	movwf	(___lldiv@dividend+1)& (0+255),b
 10946  005456  0E98               	movlw	152
 10947  005458  6FA0               	movwf	(___lldiv@dividend+2)& (0+255),b
 10948  00545A  0E00               	movlw	0
 10949  00545C  6FA1               	movwf	(___lldiv@dividend+3)& (0+255),b
 10950  00545E  C0AB  F0AF         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10951  005462  C0AC  F0B0         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10952  005466  C0AD  F0B1         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10953  00546A  C0AE  F0B2         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10954  00546E  0E02               	movlw	2
 10955  005470                     u6725:
 10956  005470  90D8               	bcf	status,0,c
 10957  005472  0100               	movlb	0	; () banked
 10958  005474  37AF               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10959  005476  37B0               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10960  005478  37B1               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10961  00547A  37B2               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10962  00547C  2EE8               	decfsz	wreg,f,c
 10963  00547E  D7F8               	goto	u6725
 10964  005480  C0AF  F0A2         	movff	??_I2C_Master_Init,___lldiv@divisor
 10965  005484  C0B0  F0A3         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10966  005488  C0B1  F0A4         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10967  00548C  C0B2  F0A5         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10968  005490  EC71  F026         	call	___lldiv	;wreg free
 10969  005494  0100               	movlb	0	; () banked
 10970  005496  059E               	decf	?___lldiv& (0+255),w,b
 10971  005498  6EC8               	movwf	4040,c	;volatile
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;I2C.c: 21: TRISC3 = 1;
 10975  00549A  8694               	bsf	3988,3,c	;volatile
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;I2C.c: 22: TRISC4 = 1;
 10979  00549C  8894               	bsf	3988,4,c	;volatile
 10980                           
 10981                           ; BSR set to: 0
 10982  00549E  0012               	return		;funcret
 10983  0054A0                     __end_of_I2C_Master_Init:
 10984                           	opt stack 0
 10985                           tblptru	equ	0xFF8
 10986                           tblptrh	equ	0xFF7
 10987                           tblptrl	equ	0xFF6
 10988                           tablat	equ	0xFF5
 10989                           prodh	equ	0xFF4
 10990                           prodl	equ	0xFF3
 10991                           intcon	equ	0xFF2
 10992                           intcon2	equ	0xFF1
 10993                           intcon3	equ	0xFF0
 10994                           postinc0	equ	0xFEE
 10995                           wreg	equ	0xFE8
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           fsr2h	equ	0xFDA
 11000                           fsr2l	equ	0xFD9
 11001                           status	equ	0xFD8
 11002                           
 11003 ;; *************** function ___lldiv *****************
 11004 ;; Defined at:
 11005 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  dividend        4   30[BANK0 ] unsigned long 
 11008 ;;  divisor         4   34[BANK0 ] unsigned long 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  quotient        4   38[BANK0 ] unsigned long 
 11011 ;;  counter         1   42[BANK0 ] unsigned char 
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  4   30[BANK0 ] unsigned long 
 11014 ;; Registers used:
 11015 ;;		wreg, status,2, status,0
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11021 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;Total ram usage:       13 bytes
 11026 ;; Hardware stack levels used:    1
 11027 ;; Hardware stack levels required when called:    7
 11028 ;; This function calls:
 11029 ;;		Nothing
 11030 ;; This function is called by:
 11031 ;;		_I2C_Master_Init
 11032 ;;		_printf
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           	psect	text35
 11037  004CE2                     __ptext35:
 11038                           	opt stack 0
 11039  004CE2                     ___lldiv:
 11040                           	opt stack 21
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;incstack = 0
 11044  004CE2  0E00               	movlw	0
 11045  004CE4  0100               	movlb	0	; () banked
 11046  004CE6  6FA6               	movwf	___lldiv@quotient& (0+255),b
 11047  004CE8  0E00               	movlw	0
 11048  004CEA  6FA7               	movwf	(___lldiv@quotient+1)& (0+255),b
 11049  004CEC  0E00               	movlw	0
 11050  004CEE  6FA8               	movwf	(___lldiv@quotient+2)& (0+255),b
 11051  004CF0  0E00               	movlw	0
 11052  004CF2  6FA9               	movwf	(___lldiv@quotient+3)& (0+255),b
 11053                           
 11054                           ; BSR set to: 0
 11055  004CF4  0100               	movlb	0	; () banked
 11056  004CF6  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11057  004CF8  0100               	movlb	0	; () banked
 11058  004CFA  11A3               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11059  004CFC  0100               	movlb	0	; () banked
 11060  004CFE  11A4               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11061  004D00  0100               	movlb	0	; () banked
 11062  004D02  11A5               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11063  004D04  B4D8               	btfsc	status,2,c
 11064  004D06  D042               	goto	l991
 11065                           
 11066                           ; BSR set to: 0
 11067  004D08  0E01               	movlw	1
 11068  004D0A  0100               	movlb	0	; () banked
 11069  004D0C  6FAA               	movwf	___lldiv@counter& (0+255),b
 11070  004D0E  D008               	goto	l5162
 11071  004D10                     l5160:
 11072                           
 11073                           ; BSR set to: 0
 11074  004D10  0100               	movlb	0	; () banked
 11075  004D12  90D8               	bcf	status,0,c
 11076  004D14  37A2               	rlcf	___lldiv@divisor& (0+255),f,b
 11077  004D16  37A3               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11078  004D18  37A4               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11079  004D1A  37A5               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11080  004D1C  0100               	movlb	0	; () banked
 11081  004D1E  2BAA               	incf	___lldiv@counter& (0+255),f,b
 11082  004D20                     l5162:
 11083                           
 11084                           ; BSR set to: 0
 11085  004D20  0100               	movlb	0	; () banked
 11086  004D22  AFA5               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11087  004D24  D7F5               	goto	l5160
 11088  004D26                     l5164:
 11089                           
 11090                           ; BSR set to: 0
 11091  004D26  0100               	movlb	0	; () banked
 11092  004D28  90D8               	bcf	status,0,c
 11093  004D2A  37A6               	rlcf	___lldiv@quotient& (0+255),f,b
 11094  004D2C  37A7               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11095  004D2E  37A8               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11096  004D30  37A9               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11097                           
 11098                           ; BSR set to: 0
 11099  004D32  0100               	movlb	0	; () banked
 11100  004D34  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11101  004D36  0100               	movlb	0	; () banked
 11102  004D38  5D9E               	subwf	___lldiv@dividend& (0+255),w,b
 11103  004D3A  0100               	movlb	0	; () banked
 11104  004D3C  51A3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11105  004D3E  0100               	movlb	0	; () banked
 11106  004D40  599F               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11107  004D42  0100               	movlb	0	; () banked
 11108  004D44  51A4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11109  004D46  0100               	movlb	0	; () banked
 11110  004D48  59A0               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11111  004D4A  0100               	movlb	0	; () banked
 11112  004D4C  51A5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11113  004D4E  0100               	movlb	0	; () banked
 11114  004D50  59A1               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11115  004D52  A0D8               	btfss	status,0,c
 11116  004D54  D012               	goto	l5172
 11117                           
 11118                           ; BSR set to: 0
 11119  004D56  0100               	movlb	0	; () banked
 11120  004D58  51A2               	movf	___lldiv@divisor& (0+255),w,b
 11121  004D5A  0100               	movlb	0	; () banked
 11122  004D5C  5F9E               	subwf	___lldiv@dividend& (0+255),f,b
 11123  004D5E  0100               	movlb	0	; () banked
 11124  004D60  51A3               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11125  004D62  0100               	movlb	0	; () banked
 11126  004D64  5B9F               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11127  004D66  0100               	movlb	0	; () banked
 11128  004D68  51A4               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11129  004D6A  0100               	movlb	0	; () banked
 11130  004D6C  5BA0               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11131  004D6E  0100               	movlb	0	; () banked
 11132  004D70  51A5               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11133  004D72  0100               	movlb	0	; () banked
 11134  004D74  5BA1               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11135                           
 11136                           ; BSR set to: 0
 11137  004D76  0100               	movlb	0	; () banked
 11138  004D78  81A6               	bsf	___lldiv@quotient& (0+255),0,b
 11139  004D7A                     l5172:
 11140                           
 11141                           ; BSR set to: 0
 11142  004D7A  0100               	movlb	0	; () banked
 11143  004D7C  90D8               	bcf	status,0,c
 11144  004D7E  33A5               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11145  004D80  33A4               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11146  004D82  33A3               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11147  004D84  33A2               	rrcf	___lldiv@divisor& (0+255),f,b
 11148                           
 11149                           ; BSR set to: 0
 11150  004D86  0100               	movlb	0	; () banked
 11151  004D88  2FAA               	decfsz	___lldiv@counter& (0+255),f,b
 11152  004D8A  D7CD               	goto	l5164
 11153  004D8C                     l991:
 11154                           
 11155                           ; BSR set to: 0
 11156  004D8C  C0A6  F09E         	movff	___lldiv@quotient,?___lldiv
 11157  004D90  C0A7  F09F         	movff	___lldiv@quotient+1,?___lldiv+1
 11158  004D94  C0A8  F0A0         	movff	___lldiv@quotient+2,?___lldiv+2
 11159  004D98  C0A9  F0A1         	movff	___lldiv@quotient+3,?___lldiv+3
 11160                           
 11161                           ; BSR set to: 0
 11162  004D9C  0012               	return		;funcret
 11163  004D9E                     __end_of___lldiv:
 11164                           	opt stack 0
 11165                           tblptru	equ	0xFF8
 11166                           tblptrh	equ	0xFF7
 11167                           tblptrl	equ	0xFF6
 11168                           tablat	equ	0xFF5
 11169                           prodh	equ	0xFF4
 11170                           prodl	equ	0xFF3
 11171                           intcon	equ	0xFF2
 11172                           intcon2	equ	0xFF1
 11173                           intcon3	equ	0xFF0
 11174                           postinc0	equ	0xFEE
 11175                           wreg	equ	0xFE8
 11176                           indf2	equ	0xFDF
 11177                           postinc2	equ	0xFDE
 11178                           postdec2	equ	0xFDD
 11179                           fsr2h	equ	0xFDA
 11180                           fsr2l	equ	0xFD9
 11181                           status	equ	0xFD8
 11182                           
 11183 ;; *************** function _I2C_ColorSens_Init *****************
 11184 ;; Defined at:
 11185 ;;		line 54 in file "I2C.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;		None
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;		None
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  1    wreg      void 
 11192 ;; Registers used:
 11193 ;;		wreg, status,2, status,0, cstack
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11203 ;;Total ram usage:        1 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; Hardware stack levels required when called:    9
 11206 ;; This function calls:
 11207 ;;		_I2C_Master_Start
 11208 ;;		_I2C_Master_Stop
 11209 ;;		_I2C_Master_Write
 11210 ;; This function is called by:
 11211 ;;		_main
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           	psect	text36
 11216  00427A                     __ptext36:
 11217                           	opt stack 0
 11218  00427A                     _I2C_ColorSens_Init:
 11219                           	opt stack 21
 11220                           
 11221                           ;I2C.c: 55: I2C_Master_Start();
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;incstack = 0
 11225  00427A  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
 11226                           
 11227                           ;I2C.c: 56: I2C_Master_Write(0b01010010);
 11228  00427E  0E00               	movlw	0
 11229  004280  0100               	movlb	0	; () banked
 11230  004282  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11231  004284  0E52               	movlw	82
 11232  004286  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11233  004288  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11234                           
 11235                           ;I2C.c: 57: I2C_Master_Write(0b10000000);
 11236  00428C  0E00               	movlw	0
 11237  00428E  0100               	movlb	0	; () banked
 11238  004290  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11239  004292  0E80               	movlw	128
 11240  004294  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11241  004296  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11242                           
 11243                           ;I2C.c: 58: I2C_Master_Write(0b00000001);
 11244  00429A  0E00               	movlw	0
 11245  00429C  0100               	movlb	0	; () banked
 11246  00429E  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11247  0042A0  0E01               	movlw	1
 11248  0042A2  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11249  0042A4  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11250                           
 11251                           ;I2C.c: 59: I2C_Master_Stop();
 11252  0042A8  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
 11253                           
 11254                           ;I2C.c: 61: _delay((unsigned long)((3)*(10000000/4000.0)));
 11255  0042AC  0E0A               	movlw	10
 11256  0042AE  0100               	movlb	0	; () banked
 11257  0042B0  6FA1               	movwf	??_I2C_ColorSens_Init& (0+255),b
 11258  0042B2  0EBC               	movlw	188
 11259  0042B4                     u9157:
 11260  0042B4  2EE8               	decfsz	wreg,f,c
 11261  0042B6  D7FE               	bra	u9157
 11262  0042B8  2FA1               	decfsz	??_I2C_ColorSens_Init& (0+255),f,b
 11263  0042BA  D7FC               	bra	u9157
 11264  0042BC  F000               	nop	
 11265                           
 11266                           ;I2C.c: 63: I2C_Master_Start();
 11267  0042BE  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
 11268                           
 11269                           ;I2C.c: 64: I2C_Master_Write(0b01010010);
 11270  0042C2  0E00               	movlw	0
 11271  0042C4  0100               	movlb	0	; () banked
 11272  0042C6  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11273  0042C8  0E52               	movlw	82
 11274  0042CA  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11275  0042CC  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11276                           
 11277                           ;I2C.c: 65: I2C_Master_Write(0b10000000);
 11278  0042D0  0E00               	movlw	0
 11279  0042D2  0100               	movlb	0	; () banked
 11280  0042D4  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11281  0042D6  0E80               	movlw	128
 11282  0042D8  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11283  0042DA  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11284                           
 11285                           ;I2C.c: 66: I2C_Master_Write(0b00000011);
 11286  0042DE  0E00               	movlw	0
 11287  0042E0  0100               	movlb	0	; () banked
 11288  0042E2  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11289  0042E4  0E03               	movlw	3
 11290  0042E6  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11291  0042E8  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11292                           
 11293                           ;I2C.c: 67: I2C_Master_Stop();
 11294  0042EC  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
 11295                           
 11296                           ;I2C.c: 69: I2C_Master_Start();
 11297  0042F0  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
 11298                           
 11299                           ;I2C.c: 70: I2C_Master_Write(0b01010010);
 11300  0042F4  0E00               	movlw	0
 11301  0042F6  0100               	movlb	0	; () banked
 11302  0042F8  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11303  0042FA  0E52               	movlw	82
 11304  0042FC  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11305  0042FE  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11306                           
 11307                           ;I2C.c: 71: I2C_Master_Write(0b10001111);
 11308  004302  0E00               	movlw	0
 11309  004304  0100               	movlb	0	; () banked
 11310  004306  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11311  004308  0E8F               	movlw	143
 11312  00430A  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11313  00430C  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11314                           
 11315                           ;I2C.c: 72: I2C_Master_Write(0b00000010);
 11316  004310  0E00               	movlw	0
 11317  004312  0100               	movlb	0	; () banked
 11318  004314  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11319  004316  0E02               	movlw	2
 11320  004318  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11321  00431A  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11322                           
 11323                           ;I2C.c: 73: I2C_Master_Stop();
 11324  00431E  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
 11325                           
 11326                           ;I2C.c: 90: I2C_Master_Start();
 11327  004322  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
 11328                           
 11329                           ;I2C.c: 91: I2C_Master_Write(0b01010010);
 11330  004326  0E00               	movlw	0
 11331  004328  0100               	movlb	0	; () banked
 11332  00432A  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11333  00432C  0E52               	movlw	82
 11334  00432E  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11335  004330  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11336                           
 11337                           ;I2C.c: 92: I2C_Master_Write(0b10000001);
 11338  004334  0E00               	movlw	0
 11339  004336  0100               	movlb	0	; () banked
 11340  004338  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11341  00433A  0E81               	movlw	129
 11342  00433C  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11343  00433E  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11344                           
 11345                           ;I2C.c: 93: I2C_Master_Write(0b11111111);
 11346  004342  0E00               	movlw	0
 11347  004344  0100               	movlb	0	; () banked
 11348  004346  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11349  004348  699F               	setf	I2C_Master_Write@d& (0+255),b
 11350  00434A  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11351                           
 11352                           ;I2C.c: 94: I2C_Master_Stop();
 11353  00434E  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
 11354                           
 11355                           ;I2C.c: 96: I2C_Master_Start();
 11356  004352  ECAD  F02C         	call	_I2C_Master_Start	;wreg free
 11357                           
 11358                           ;I2C.c: 97: I2C_Master_Write(0b01010010);
 11359  004356  0E00               	movlw	0
 11360  004358  0100               	movlb	0	; () banked
 11361  00435A  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11362  00435C  0E52               	movlw	82
 11363  00435E  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11364  004360  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11365                           
 11366                           ;I2C.c: 98: I2C_Master_Write(0b10110100);
 11367  004364  0E00               	movlw	0
 11368  004366  0100               	movlb	0	; () banked
 11369  004368  6FA0               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 11370  00436A  0EB4               	movlw	180
 11371  00436C  6F9F               	movwf	I2C_Master_Write@d& (0+255),b
 11372  00436E  EC9F  F02C         	call	_I2C_Master_Write	;wreg free
 11373                           
 11374                           ;I2C.c: 99: I2C_Master_Stop();
 11375  004372  ECA9  F02C         	call	_I2C_Master_Stop	;wreg free
 11376  004376  0012               	return		;funcret
 11377  004378                     __end_of_I2C_ColorSens_Init:
 11378                           	opt stack 0
 11379                           tblptru	equ	0xFF8
 11380                           tblptrh	equ	0xFF7
 11381                           tblptrl	equ	0xFF6
 11382                           tablat	equ	0xFF5
 11383                           prodh	equ	0xFF4
 11384                           prodl	equ	0xFF3
 11385                           intcon	equ	0xFF2
 11386                           intcon2	equ	0xFF1
 11387                           intcon3	equ	0xFF0
 11388                           postinc0	equ	0xFEE
 11389                           wreg	equ	0xFE8
 11390                           indf2	equ	0xFDF
 11391                           postinc2	equ	0xFDE
 11392                           postdec2	equ	0xFDD
 11393                           fsr2h	equ	0xFDA
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _I2C_Master_Write *****************
 11398 ;; Defined at:
 11399 ;;		line 48 in file "I2C.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;  d               2   31[BANK0 ] unsigned int 
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;		None
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, status,2, status,0, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11413 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;Total ram usage:        2 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    8
 11420 ;; This function calls:
 11421 ;;		_I2C_Master_Wait
 11422 ;; This function is called by:
 11423 ;;		_I2C_ColorSens_Init
 11424 ;;		_date_time
 11425 ;;		_read_colorsensor
 11426 ;;		_I2C_ColorSens_ClearInt
 11427 ;;		_set_time
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           	psect	text37
 11432  00593E                     __ptext37:
 11433                           	opt stack 0
 11434  00593E                     _I2C_Master_Write:
 11435                           	opt stack 20
 11436                           
 11437                           ;I2C.c: 50: I2C_Master_Wait();
 11438                           
 11439                           ;incstack = 0
 11440  00593E  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
 11441                           
 11442                           ;I2C.c: 51: SSPBUF = d;
 11443  005942  C09F  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 11444  005946  0012               	return		;funcret
 11445  005948                     __end_of_I2C_Master_Write:
 11446                           	opt stack 0
 11447                           tblptru	equ	0xFF8
 11448                           tblptrh	equ	0xFF7
 11449                           tblptrl	equ	0xFF6
 11450                           tablat	equ	0xFF5
 11451                           prodh	equ	0xFF4
 11452                           prodl	equ	0xFF3
 11453                           intcon	equ	0xFF2
 11454                           intcon2	equ	0xFF1
 11455                           intcon3	equ	0xFF0
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           fsr2h	equ	0xFDA
 11462                           fsr2l	equ	0xFD9
 11463                           status	equ	0xFD8
 11464                           
 11465 ;; *************** function _I2C_Master_Stop *****************
 11466 ;; Defined at:
 11467 ;;		line 42 in file "I2C.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;		None
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;		None
 11472 ;; Return value:  Size  Location     Type
 11473 ;;                  1    wreg      void 
 11474 ;; Registers used:
 11475 ;;		wreg, status,2, status,0, cstack
 11476 ;; Tracked objects:
 11477 ;;		On entry : 0/0
 11478 ;;		On exit  : 0/0
 11479 ;;		Unchanged: 0/0
 11480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;Total ram usage:        0 bytes
 11486 ;; Hardware stack levels used:    1
 11487 ;; Hardware stack levels required when called:    8
 11488 ;; This function calls:
 11489 ;;		_I2C_Master_Wait
 11490 ;; This function is called by:
 11491 ;;		_I2C_ColorSens_Init
 11492 ;;		_date_time
 11493 ;;		_read_colorsensor
 11494 ;;		_I2C_ColorSens_ClearInt
 11495 ;;		_set_time
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           	psect	text38
 11500  005952                     __ptext38:
 11501                           	opt stack 0
 11502  005952                     _I2C_Master_Stop:
 11503                           	opt stack 20
 11504                           
 11505                           ;I2C.c: 44: I2C_Master_Wait();
 11506                           
 11507                           ;incstack = 0
 11508  005952  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
 11509                           
 11510                           ;I2C.c: 45: PEN = 1;
 11511  005956  84C5               	bsf	4037,2,c	;volatile
 11512  005958  0012               	return		;funcret
 11513  00595A                     __end_of_I2C_Master_Stop:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           intcon3	equ	0xFF0
 11524                           postinc0	equ	0xFEE
 11525                           wreg	equ	0xFE8
 11526                           indf2	equ	0xFDF
 11527                           postinc2	equ	0xFDE
 11528                           postdec2	equ	0xFDD
 11529                           fsr2h	equ	0xFDA
 11530                           fsr2l	equ	0xFD9
 11531                           status	equ	0xFD8
 11532                           
 11533 ;; *************** function _I2C_Master_Start *****************
 11534 ;; Defined at:
 11535 ;;		line 30 in file "I2C.c"
 11536 ;; Parameters:    Size  Location     Type
 11537 ;;		None
 11538 ;; Auto vars:     Size  Location     Type
 11539 ;;		None
 11540 ;; Return value:  Size  Location     Type
 11541 ;;                  1    wreg      void 
 11542 ;; Registers used:
 11543 ;;		wreg, status,2, status,0, cstack
 11544 ;; Tracked objects:
 11545 ;;		On entry : 0/0
 11546 ;;		On exit  : 0/0
 11547 ;;		Unchanged: 0/0
 11548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;Total ram usage:        0 bytes
 11554 ;; Hardware stack levels used:    1
 11555 ;; Hardware stack levels required when called:    8
 11556 ;; This function calls:
 11557 ;;		_I2C_Master_Wait
 11558 ;; This function is called by:
 11559 ;;		_I2C_ColorSens_Init
 11560 ;;		_date_time
 11561 ;;		_read_colorsensor
 11562 ;;		_I2C_ColorSens_ClearInt
 11563 ;;		_set_time
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text39
 11568  00595A                     __ptext39:
 11569                           	opt stack 0
 11570  00595A                     _I2C_Master_Start:
 11571                           	opt stack 20
 11572                           
 11573                           ;I2C.c: 32: I2C_Master_Wait();
 11574                           
 11575                           ;incstack = 0
 11576  00595A  EC70  F02C         	call	_I2C_Master_Wait	;wreg free
 11577                           
 11578                           ;I2C.c: 33: SEN = 1;
 11579  00595E  80C5               	bsf	4037,0,c	;volatile
 11580  005960  0012               	return		;funcret
 11581  005962                     __end_of_I2C_Master_Start:
 11582                           	opt stack 0
 11583                           tblptru	equ	0xFF8
 11584                           tblptrh	equ	0xFF7
 11585                           tblptrl	equ	0xFF6
 11586                           tablat	equ	0xFF5
 11587                           prodh	equ	0xFF4
 11588                           prodl	equ	0xFF3
 11589                           intcon	equ	0xFF2
 11590                           intcon2	equ	0xFF1
 11591                           intcon3	equ	0xFF0
 11592                           postinc0	equ	0xFEE
 11593                           wreg	equ	0xFE8
 11594                           indf2	equ	0xFDF
 11595                           postinc2	equ	0xFDE
 11596                           postdec2	equ	0xFDD
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8
 11600                           
 11601 ;; *************** function _I2C_Master_Wait *****************
 11602 ;; Defined at:
 11603 ;;		line 25 in file "I2C.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;		None
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;		None
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1    wreg      void 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;Total ram usage:        1 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    7
 11624 ;; This function calls:
 11625 ;;		Nothing
 11626 ;; This function is called by:
 11627 ;;		_I2C_Master_Start
 11628 ;;		_I2C_Master_Stop
 11629 ;;		_I2C_Master_Write
 11630 ;;		_I2C_Master_Read
 11631 ;;		_I2C_Master_RepeatedStart
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           	psect	text40
 11636  0058E0                     __ptext40:
 11637                           	opt stack 0
 11638  0058E0                     _I2C_Master_Wait:
 11639                           	opt stack 20
 11640  0058E0                     l34:
 11641  0058E0  B4C7               	btfsc	4039,2,c	;volatile
 11642  0058E2  D7FE               	goto	l34
 11643  0058E4  CFC5 F09E          	movff	4037,??_I2C_Master_Wait	;volatile
 11644  0058E8  0E1F               	movlw	31
 11645  0058EA  0100               	movlb	0	; () banked
 11646  0058EC  179E               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11647  0058EE  B4D8               	btfsc	status,2,c
 11648  0058F0  0012               	return	
 11649  0058F2  D7F6               	goto	l34
 11650  0058F4                     __end_of_I2C_Master_Wait:
 11651                           	opt stack 0
 11652                           tblptru	equ	0xFF8
 11653                           tblptrh	equ	0xFF7
 11654                           tblptrl	equ	0xFF6
 11655                           tablat	equ	0xFF5
 11656                           prodh	equ	0xFF4
 11657                           prodl	equ	0xFF3
 11658                           intcon	equ	0xFF2
 11659                           intcon2	equ	0xFF1
 11660                           intcon3	equ	0xFF0
 11661                           postinc0	equ	0xFEE
 11662                           wreg	equ	0xFE8
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           fsr2h	equ	0xFDA
 11667                           fsr2l	equ	0xFD9
 11668                           status	equ	0xFD8
 11669                           
 11670 ;; *************** function _isr *****************
 11671 ;; Defined at:
 11672 ;;		line 121 in file "main.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;		None
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;  i               1  118[COMRAM] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;Total ram usage:       19 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:    6
 11693 ;; This function calls:
 11694 ;;		_dec_to_hex
 11695 ;;		_read_time
 11696 ;;		i2___wmul
 11697 ;;		i2_lcdInst
 11698 ;;		i2_printf
 11699 ;;		i2_read_colorsensor
 11700 ;; This function is called by:
 11701 ;;		Interrupt level 2
 11702 ;; This function uses a non-reentrant model
 11703 ;;
 11704                           
 11705                           	psect	intcode
 11706  000008                     __pintcode:
 11707                           	opt stack 0
 11708  000008                     _isr:
 11709                           	opt stack 19
 11710                           
 11711                           ; BSR set to: 0
 11712                           ;incstack = 0
 11713  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11714  00000A  ED44  F00D         	call	int_func,f	;refresh shadow registers
 11715                           tblptru	equ	0xFF8
 11716                           tblptrh	equ	0xFF7
 11717                           tblptrl	equ	0xFF6
 11718                           tablat	equ	0xFF5
 11719                           prodh	equ	0xFF4
 11720                           prodl	equ	0xFF3
 11721                           intcon	equ	0xFF2
 11722                           intcon2	equ	0xFF1
 11723                           intcon3	equ	0xFF0
 11724                           postinc0	equ	0xFEE
 11725                           wreg	equ	0xFE8
 11726                           indf2	equ	0xFDF
 11727                           postinc2	equ	0xFDE
 11728                           postdec2	equ	0xFDD
 11729                           fsr2h	equ	0xFDA
 11730                           fsr2l	equ	0xFD9
 11731                           status	equ	0xFD8
 11732                           
 11733                           	psect	intcode_body
 11734  001A88                     __pintcode_body:
 11735                           	opt stack 19
 11736  001A88                     int_func:
 11737                           	opt stack 19
 11738  001A88  0006               	pop		; remove dummy address from shadow register refresh
 11739  001A8A  CFFA F090          	movff	pclath,??_isr+2
 11740  001A8E  CFFB F091          	movff	pclatu,??_isr+3
 11741  001A92  CFE9 F092          	movff	fsr0l,??_isr+4
 11742  001A96  CFEA F093          	movff	fsr0h,??_isr+5
 11743  001A9A  CFE1 F094          	movff	fsr1l,??_isr+6
 11744  001A9E  CFE2 F095          	movff	fsr1h,??_isr+7
 11745  001AA2  CFD9 F096          	movff	fsr2l,??_isr+8
 11746  001AA6  CFDA F097          	movff	fsr2h,??_isr+9
 11747  001AAA  CFF3 F098          	movff	prodl,??_isr+10
 11748  001AAE  CFF4 F099          	movff	prodh,??_isr+11
 11749  001AB2  CFF6 F09A          	movff	tblptrl,??_isr+12
 11750  001AB6  CFF7 F09B          	movff	tblptrh,??_isr+13
 11751  001ABA  CFF8 F09C          	movff	tblptru,??_isr+14
 11752  001ABE  CFF5 F09D          	movff	tablat,??_isr+15
 11753                           
 11754                           ;main.c: 122: if (INT1IF) {
 11755  001AC2  B0F0               	btfsc	intcon3,0,c	;volatile
 11756  001AC4  D109               	goto	i2l6842
 11757  001AC6  D134               	goto	i2l316
 11758  001AC8                     i2l318:
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;main.c: 125: LATAbits.LATA2 = 1;
 11762  001AC8  8489               	bsf	3977,2,c	;volatile
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;main.c: 130: read_time();
 11766  001ACA  EC89  F029         	call	_read_time	;wreg free
 11767                           
 11768                           ;main.c: 131: start_time[1] = time[1];
 11769  001ACE  C159  F0DF         	movff	_time+1,_start_time+1
 11770                           
 11771                           ;main.c: 132: start_time[0] = time[0];
 11772  001AD2  C158  F0DE         	movff	_time,_start_time
 11773                           
 11774                           ;main.c: 133: for(i=0;i<5;i++){
 11775  001AD6  0E00               	movlw	0
 11776  001AD8  6E7B               	movwf	_i+1,c
 11777  001ADA  0E00               	movlw	0
 11778  001ADC  6E7A               	movwf	_i,c
 11779  001ADE                     i2l6768:
 11780  001ADE  BE7B               	btfsc	_i+1,7,c
 11781  001AE0  D006               	goto	i2l6772
 11782  001AE2  507B               	movf	_i+1,w,c
 11783  001AE4  E114               	bnz	i2l6778
 11784  001AE6  0E05               	movlw	5
 11785  001AE8  5C7A               	subwf	_i,w,c
 11786  001AEA  B0D8               	btfsc	status,0,c
 11787  001AEC  D010               	goto	i2l6778
 11788  001AEE                     i2l6772:
 11789                           
 11790                           ;main.c: 134: bottle_count_array[i] = 0;
 11791  001AEE  90D8               	bcf	status,0,c
 11792  001AF0  347A               	rlcf	_i,w,c
 11793  001AF2  6ED9               	movwf	fsr2l,c
 11794  001AF4  347B               	rlcf	_i+1,w,c
 11795  001AF6  6EDA               	movwf	fsr2h,c
 11796  001AF8  0E46               	movlw	low _bottle_count_array
 11797  001AFA  26D9               	addwf	fsr2l,f,c
 11798  001AFC  0E01               	movlw	high _bottle_count_array
 11799  001AFE  22DA               	addwfc	fsr2h,f,c
 11800  001B00  0E00               	movlw	0
 11801  001B02  6EDE               	movwf	postinc2,c
 11802  001B04  0E00               	movlw	0
 11803  001B06  6EDD               	movwf	postdec2,c
 11804  001B08  4A7A               	infsnz	_i,f,c
 11805  001B0A  2A7B               	incf	_i+1,f,c
 11806  001B0C  D7E8               	goto	i2l6768
 11807  001B0E                     i2l6778:
 11808                           
 11809                           ;main.c: 135: }
 11810                           ;main.c: 136: lcdInst(0b00000001);
 11811  001B0E  0E01               	movlw	1
 11812  001B10  EC99  F02C         	call	i2_lcdInst
 11813                           
 11814                           ;main.c: 137: _delay((unsigned long)((100)*(10000000/4000.0)));
 11815  001B14  0E02               	movlw	2
 11816  001B16  0100               	movlb	0	; () banked
 11817  001B18  6F8F               	movwf	(??_isr+1)& (0+255),b
 11818  001B1A  0E45               	movlw	69
 11819  001B1C  0100               	movlb	0	; () banked
 11820  001B1E  6F8E               	movwf	??_isr& (0+255),b
 11821  001B20  0EA9               	movlw	169
 11822  001B22                     i2u916_47:
 11823  001B22  2EE8               	decfsz	wreg,f,c
 11824  001B24  D7FE               	bra	i2u916_47
 11825  001B26  2F8E               	decfsz	??_isr& (0+255),f,b
 11826  001B28  D7FC               	bra	i2u916_47
 11827  001B2A  2F8F               	decfsz	(??_isr+1)& (0+255),f,b
 11828  001B2C  D7FA               	bra	i2u916_47
 11829  001B2E  D000               	nop2	
 11830                           
 11831                           ;main.c: 138: lcdInst(0b10000000);
 11832  001B30  0E80               	movlw	128
 11833  001B32  EC99  F02C         	call	i2_lcdInst
 11834                           
 11835                           ;main.c: 139: printf("running");
 11836  001B36  0EE1               	movlw	low STR_1
 11837  001B38  6E49               	movwf	i2printf@f,c
 11838  001B3A  0EFF               	movlw	high STR_1
 11839  001B3C  6E4A               	movwf	i2printf@f+1,c
 11840  001B3E  ECFE  F005         	call	i2_printf	;wreg free
 11841                           
 11842                           ;main.c: 140: bottle_count_disp = -1;
 11843  001B42  0101               	movlb	1	; () banked
 11844  001B44  6985               	setf	_bottle_count_disp& (0+255),b
 11845  001B46  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 11846                           
 11847                           ; BSR set to: 1
 11848                           ;main.c: 141: curr_state = OPERATION;
 11849  001B48  0E02               	movlw	2
 11850  001B4A  D0B8               	goto	L19
 11851  001B4C                     i2l6790:
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;main.c: 144: bottle_count_disp += 1;
 11855  001B4C  0101               	movlb	1	; () banked
 11856  001B4E  4B85               	infsnz	_bottle_count_disp& (0+255),f,b
 11857  001B50  2B86               	incf	(_bottle_count_disp+1)& (0+255),f,b
 11858                           
 11859                           ; BSR set to: 1
 11860                           ;main.c: 145: curr_state = BOTTLECOUNT;
 11861  001B52  0E05               	movlw	5
 11862  001B54  0100               	movlb	0	; () banked
 11863  001B56  6FE0               	movwf	_curr_state& (0+255),b
 11864  001B58                     i2l6794:
 11865  001B58  0E1F               	movlw	31
 11866  001B5A  1881               	xorwf	3969,w,c	;volatile
 11867  001B5C  A4D8               	btfss	status,2,c
 11868  001B5E  D0E6               	goto	i2l321
 11869  001B60  D7FB               	goto	i2l6794
 11870  001B62                     i2l6796:
 11871                           
 11872                           ;main.c: 149: operation_time = etime - stime;
 11873  001B62  C181  F08E         	movff	_stime,??_isr
 11874  001B66  C182  F08F         	movff	_stime+1,??_isr+1
 11875  001B6A  0100               	movlb	0	; () banked
 11876  001B6C  1F8E               	comf	??_isr& (0+255),f,b
 11877  001B6E  1F8F               	comf	(??_isr+1)& (0+255),f,b
 11878  001B70  4B8E               	infsnz	??_isr& (0+255),f,b
 11879  001B72  2B8F               	incf	(??_isr+1)& (0+255),f,b
 11880  001B74  0101               	movlb	1	; () banked
 11881  001B76  516D               	movf	_etime& (0+255),w,b
 11882  001B78  0100               	movlb	0	; () banked
 11883  001B7A  258E               	addwf	??_isr& (0+255),w,b
 11884  001B7C  0101               	movlb	1	; () banked
 11885  001B7E  6F7B               	movwf	_operation_time& (0+255),b
 11886  001B80  0101               	movlb	1	; () banked
 11887  001B82  516E               	movf	(_etime+1)& (0+255),w,b
 11888  001B84  0100               	movlb	0	; () banked
 11889  001B86  218F               	addwfc	(??_isr+1)& (0+255),w,b
 11890  001B88  0101               	movlb	1	; () banked
 11891  001B8A  6F7C               	movwf	(_operation_time+1)& (0+255),b
 11892                           
 11893                           ; BSR set to: 1
 11894                           ;main.c: 150: bottle_count_disp = -1;
 11895  001B8C  0101               	movlb	1	; () banked
 11896  001B8E  6985               	setf	_bottle_count_disp& (0+255),b
 11897  001B90  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 11898                           
 11899                           ; BSR set to: 1
 11900                           ;main.c: 151: curr_state = BOTTLETIME;
 11901  001B92  0E06               	movlw	6
 11902  001B94  D093               	goto	L19
 11903  001B96                     i2l327:
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;main.c: 154: bottle_count_disp = -1;
 11907  001B96  0101               	movlb	1	; () banked
 11908  001B98  6985               	setf	_bottle_count_disp& (0+255),b
 11909  001B9A  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 11910                           
 11911                           ; BSR set to: 1
 11912                           ;main.c: 155: curr_state = DATETIME;
 11913  001B9C  0E04               	movlw	4
 11914  001B9E  D08E               	goto	L19
 11915  001BA0                     i2l328:
 11916                           
 11917                           ; BSR set to: 0
 11918                           ;main.c: 158: LATAbits.LATA2 = 0;
 11919  001BA0  9489               	bcf	3977,2,c	;volatile
 11920                           
 11921                           ;main.c: 159: TMR0IE = 0;
 11922  001BA2  9AF2               	bcf	intcon,5,c	;volatile
 11923                           
 11924                           ;main.c: 160: TMR0ON = 0;
 11925  001BA4  9ED5               	bcf	4053,7,c	;volatile
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;main.c: 162: read_time();
 11929  001BA6  EC89  F029         	call	_read_time	;wreg free
 11930                           
 11931                           ;main.c: 163: end_time[1] = time[1];
 11932  001BAA  C159  F0DD         	movff	_time+1,_end_time+1
 11933                           
 11934                           ;main.c: 164: end_time[0] = time[0];
 11935  001BAE  C158  F0DC         	movff	_time,_end_time
 11936                           
 11937                           ;main.c: 165: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 11938  001BB2  C0DF  F075         	movff	_start_time+1,dec_to_hex@num
 11939  001BB6  6A76               	clrf	dec_to_hex@num+1,c
 11940  001BB8  EC35  F020         	call	_dec_to_hex	;wreg free
 11941  001BBC  C075  F078         	movff	?_dec_to_hex,_isr$1527
 11942  001BC0  C076  F079         	movff	?_dec_to_hex+1,_isr$1527+1
 11943                           
 11944                           ;main.c: 165: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 11945  001BC4  C078  F00F         	movff	_isr$1527,i2___wmul@multiplier
 11946  001BC8  C079  F010         	movff	_isr$1527+1,i2___wmul@multiplier+1
 11947  001BCC  0E00               	movlw	0
 11948  001BCE  6E12               	movwf	i2___wmul@multiplicand+1,c
 11949  001BD0  0E3C               	movlw	60
 11950  001BD2  6E11               	movwf	i2___wmul@multiplicand,c
 11951  001BD4  EC1F  F02C         	call	i2___wmul	;wreg free
 11952  001BD8  C00F  F08E         	movff	?i2___wmul,??_isr
 11953  001BDC  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 11954  001BE0  C0DE  F075         	movff	_start_time,dec_to_hex@num
 11955  001BE4  6A76               	clrf	dec_to_hex@num+1,c
 11956  001BE6  EC35  F020         	call	_dec_to_hex	;wreg free
 11957  001BEA  5075               	movf	?_dec_to_hex,w,c
 11958  001BEC  0100               	movlb	0	; () banked
 11959  001BEE  258E               	addwf	??_isr& (0+255),w,b
 11960  001BF0  0101               	movlb	1	; () banked
 11961  001BF2  6F81               	movwf	_stime& (0+255),b
 11962  001BF4  5076               	movf	?_dec_to_hex+1,w,c
 11963  001BF6  0100               	movlb	0	; () banked
 11964  001BF8  218F               	addwfc	(??_isr+1)& (0+255),w,b
 11965  001BFA  0101               	movlb	1	; () banked
 11966  001BFC  6F82               	movwf	(_stime+1)& (0+255),b
 11967                           
 11968                           ; BSR set to: 1
 11969                           ;main.c: 166: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 11970  001BFE  C0DD  F075         	movff	_end_time+1,dec_to_hex@num
 11971  001C02  6A76               	clrf	dec_to_hex@num+1,c
 11972  001C04  EC35  F020         	call	_dec_to_hex	;wreg free
 11973  001C08  C075  F078         	movff	?_dec_to_hex,_isr$1527
 11974  001C0C  C076  F079         	movff	?_dec_to_hex+1,_isr$1527+1
 11975                           
 11976                           ;main.c: 166: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 11977  001C10  C078  F00F         	movff	_isr$1527,i2___wmul@multiplier
 11978  001C14  C079  F010         	movff	_isr$1527+1,i2___wmul@multiplier+1
 11979  001C18  0E00               	movlw	0
 11980  001C1A  6E12               	movwf	i2___wmul@multiplicand+1,c
 11981  001C1C  0E3C               	movlw	60
 11982  001C1E  6E11               	movwf	i2___wmul@multiplicand,c
 11983  001C20  EC1F  F02C         	call	i2___wmul	;wreg free
 11984  001C24  C00F  F08E         	movff	?i2___wmul,??_isr
 11985  001C28  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 11986  001C2C  C0DC  F075         	movff	_end_time,dec_to_hex@num
 11987  001C30  6A76               	clrf	dec_to_hex@num+1,c
 11988  001C32  EC35  F020         	call	_dec_to_hex	;wreg free
 11989  001C36  5075               	movf	?_dec_to_hex,w,c
 11990  001C38  0100               	movlb	0	; () banked
 11991  001C3A  258E               	addwf	??_isr& (0+255),w,b
 11992  001C3C  0101               	movlb	1	; () banked
 11993  001C3E  6F6D               	movwf	_etime& (0+255),b
 11994  001C40  5076               	movf	?_dec_to_hex+1,w,c
 11995  001C42  0100               	movlb	0	; () banked
 11996  001C44  218F               	addwfc	(??_isr+1)& (0+255),w,b
 11997  001C46  0101               	movlb	1	; () banked
 11998  001C48  6F6E               	movwf	(_etime+1)& (0+255),b
 11999                           
 12000                           ; BSR set to: 1
 12001                           ;main.c: 167: lcdInst(0b00000001);
 12002  001C4A  0E01               	movlw	1
 12003  001C4C  EC99  F02C         	call	i2_lcdInst
 12004                           
 12005                           ;main.c: 168: bottle_count_disp = -1;
 12006  001C50  0101               	movlb	1	; () banked
 12007  001C52  6985               	setf	_bottle_count_disp& (0+255),b
 12008  001C54  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 12009                           
 12010                           ; BSR set to: 1
 12011                           ;main.c: 169: curr_state = OPERATIONEND;
 12012  001C56  0E03               	movlw	3
 12013  001C58  D031               	goto	L19
 12014  001C5A                     i2l6824:
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;main.c: 172: read_colorsensor();
 12018  001C5A  EC0E  F024         	call	i2_read_colorsensor	;wreg free
 12019                           
 12020                           ;main.c: 173: lcdInst(0b10000000);
 12021  001C5E  0E80               	movlw	128
 12022  001C60  EC99  F02C         	call	i2_lcdInst
 12023                           
 12024                           ;main.c: 174: printf("C%u R%u                ", color[0], color[1]);
 12025  001C64  0EB6               	movlw	low STR_2
 12026  001C66  6E49               	movwf	i2printf@f,c
 12027  001C68  0EFE               	movlw	high STR_2
 12028  001C6A  6E4A               	movwf	i2printf@f+1,c
 12029  001C6C  C0C2  F04B         	movff	_color,?i2_printf+2
 12030  001C70  C0C3  F04C         	movff	_color+1,?i2_printf+3
 12031  001C74  C0C4  F04D         	movff	_color+2,?i2_printf+4
 12032  001C78  C0C5  F04E         	movff	_color+3,?i2_printf+5
 12033  001C7C  ECFE  F005         	call	i2_printf	;wreg free
 12034                           
 12035                           ;main.c: 175: lcdInst(0b11000000);
 12036  001C80  0EC0               	movlw	192
 12037  001C82  EC99  F02C         	call	i2_lcdInst
 12038                           
 12039                           ;main.c: 176: printf("G%u B%u                ", color[2], color[3]);
 12040  001C86  0E9E               	movlw	low STR_3
 12041  001C88  6E49               	movwf	i2printf@f,c
 12042  001C8A  0EFE               	movlw	high STR_3
 12043  001C8C  6E4A               	movwf	i2printf@f+1,c
 12044  001C8E  C0C6  F04B         	movff	_color+4,?i2_printf+2
 12045  001C92  C0C7  F04C         	movff	_color+5,?i2_printf+3
 12046  001C96  C0C8  F04D         	movff	_color+6,?i2_printf+4
 12047  001C9A  C0C9  F04E         	movff	_color+7,?i2_printf+5
 12048  001C9E  ECFE  F005         	call	i2_printf	;wreg free
 12049                           
 12050                           ;main.c: 177: break;
 12051  001CA2  D044               	goto	i2l321
 12052  001CA4                     i2l330:
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;main.c: 179: LATAbits.LATA2 = 0;
 12056  001CA4  9489               	bcf	3977,2,c	;volatile
 12057                           
 12058                           ;main.c: 180: (INTCONbits.GIE = 0);
 12059  001CA6  9EF2               	bcf	intcon,7,c	;volatile
 12060                           
 12061                           ;main.c: 181: TMR0ON = 0;
 12062  001CA8  9ED5               	bcf	4053,7,c	;volatile
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;main.c: 182: lcdInst(0b00000001);
 12066  001CAA  0E01               	movlw	1
 12067  001CAC  EC99  F02C         	call	i2_lcdInst
 12068                           
 12069                           ;main.c: 183: curr_state = EMERGENCYSTOP;
 12070  001CB0  0E01               	movlw	1
 12071  001CB2  D004               	goto	L19
 12072  001CB4                     i2l331:
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;main.c: 186: bottle_count_disp = -1;
 12076  001CB4  0101               	movlb	1	; () banked
 12077  001CB6  6985               	setf	_bottle_count_disp& (0+255),b
 12078  001CB8  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 12079                           
 12080                           ; BSR set to: 1
 12081                           ;main.c: 187: curr_state = STANDBY;
 12082  001CBA  0E00               	movlw	0
 12083  001CBC                     L19:
 12084  001CBC  0100               	movlb	0	; () banked
 12085  001CBE  6FE0               	movwf	_curr_state& (0+255),b
 12086                           
 12087                           ;main.c: 189: break;
 12088  001CC0  D035               	goto	i2l321
 12089  001CC2                     i2l6836:
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;main.c: 191: servo0_timer = 1;
 12093  001CC2  0E00               	movlw	0
 12094  001CC4  0101               	movlb	1	; () banked
 12095  001CC6  6F7E               	movwf	(_servo0_timer+1)& (0+255),b
 12096  001CC8  0E01               	movlw	1
 12097  001CCA  D004               	goto	L20
 12098  001CCC                     i2l6838:
 12099                           
 12100                           ;main.c: 194: servo0_timer = 0;
 12101  001CCC  0E00               	movlw	0
 12102  001CCE  0101               	movlb	1	; () banked
 12103  001CD0  6F7E               	movwf	(_servo0_timer+1)& (0+255),b
 12104  001CD2  0E00               	movlw	0
 12105  001CD4                     L20:
 12106  001CD4  6F7D               	movwf	_servo0_timer& (0+255),b
 12107                           
 12108                           ; BSR set to: 1
 12109                           ;main.c: 196: }
 12110                           
 12111                           ;main.c: 195: break;
 12112  001CD6  D02A               	goto	i2l321
 12113  001CD8                     i2l6842:
 12114  001CD8  3881               	swapf	3969,w,c	;volatile
 12115  001CDA  0B0F               	andlw	15
 12116  001CDC  0100               	movlb	0	; () banked
 12117  001CDE  6F8E               	movwf	??_isr& (0+255),b
 12118  001CE0  6B8F               	clrf	(??_isr+1)& (0+255),b
 12119                           
 12120                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12121                           ; Switch size 1, requested type "space"
 12122                           ; Number of cases is 1, Range of values is 0 to 0
 12123                           ; switch strategies available:
 12124                           ; Name         Instructions Cycles
 12125                           ; simple_byte            4     3 (average)
 12126                           ;	Chosen strategy is simple_byte
 12127  001CE2  0100               	movlb	0	; () banked
 12128  001CE4  518F               	movf	(??_isr+1)& (0+255),w,b
 12129  001CE6  0A00               	xorlw	0	; case 0
 12130  001CE8  A4D8               	btfss	status,2,c
 12131  001CEA  D020               	goto	i2l321
 12132                           
 12133                           ; BSR set to: 0
 12134                           ; Switch size 1, requested type "space"
 12135                           ; Number of cases is 10, Range of values is 0 to 14
 12136                           ; switch strategies available:
 12137                           ; Name         Instructions Cycles
 12138                           ; simple_byte           31    16 (average)
 12139                           ;	Chosen strategy is simple_byte
 12140  001CEC  0100               	movlb	0	; () banked
 12141  001CEE  518E               	movf	??_isr& (0+255),w,b
 12142  001CF0  0A00               	xorlw	0	; case 0
 12143  001CF2  B4D8               	btfsc	status,2,c
 12144  001CF4  D6E9               	goto	i2l318
 12145  001CF6  0A01               	xorlw	1	; case 1
 12146  001CF8  B4D8               	btfsc	status,2,c
 12147  001CFA  D728               	goto	i2l6790
 12148  001CFC  0A03               	xorlw	3	; case 2
 12149  001CFE  B4D8               	btfsc	status,2,c
 12150  001D00  D730               	goto	i2l6796
 12151  001D02  0A01               	xorlw	1	; case 3
 12152  001D04  B4D8               	btfsc	status,2,c
 12153  001D06  D747               	goto	i2l327
 12154  001D08  0A07               	xorlw	7	; case 4
 12155  001D0A  B4D8               	btfsc	status,2,c
 12156  001D0C  D749               	goto	i2l328
 12157  001D0E  0A01               	xorlw	1	; case 5
 12158  001D10  B4D8               	btfsc	status,2,c
 12159  001D12  D7A3               	goto	i2l6824
 12160  001D14  0A02               	xorlw	2	; case 7
 12161  001D16  B4D8               	btfsc	status,2,c
 12162  001D18  D7D4               	goto	i2l6836
 12163  001D1A  0A0C               	xorlw	12	; case 11
 12164  001D1C  B4D8               	btfsc	status,2,c
 12165  001D1E  D7D6               	goto	i2l6838
 12166  001D20  0A07               	xorlw	7	; case 12
 12167  001D22  B4D8               	btfsc	status,2,c
 12168  001D24  D7BF               	goto	i2l330
 12169  001D26  0A02               	xorlw	2	; case 14
 12170  001D28  B4D8               	btfsc	status,2,c
 12171  001D2A  D7C4               	goto	i2l331
 12172  001D2C                     i2l321:
 12173                           
 12174                           ;main.c: 197: INT1IF = 0;
 12175  001D2C  90F0               	bcf	intcon3,0,c	;volatile
 12176                           
 12177                           ;main.c: 198: }
 12178  001D2E  D0B8               	goto	i2l354
 12179  001D30                     i2l316:
 12180                           
 12181                           ;main.c: 199: else if (TMR1IF){
 12182  001D30  A09E               	btfss	3998,0,c	;volatile
 12183  001D32  D01D               	goto	i2l335
 12184                           
 12185                           ;main.c: 200: if(servo0_flag){
 12186  001D34  507E               	movf	_servo0_flag,w,c
 12187  001D36  B4D8               	btfsc	status,2,c
 12188  001D38  D007               	goto	i2l336
 12189                           
 12190                           ;main.c: 201: LATCbits.LATC0 = 0;
 12191  001D3A  908B               	bcf	3979,0,c	;volatile
 12192                           
 12193                           ;main.c: 202: TMR1 = 16517;
 12194  001D3C  0E40               	movlw	64
 12195  001D3E  6ECF               	movwf	4047,c	;volatile
 12196  001D40  0E85               	movlw	133
 12197  001D42  6ECE               	movwf	4046,c	;volatile
 12198                           
 12199                           ;main.c: 203: servo0_flag = 0;
 12200  001D44  0E00               	movlw	0
 12201  001D46  D010               	goto	L21
 12202  001D48                     i2l336:
 12203                           
 12204                           ;main.c: 205: else{
 12205                           ;main.c: 206: LATCbits.LATC0 = 1;
 12206  001D48  808B               	bsf	3979,0,c	;volatile
 12207                           
 12208                           ;main.c: 207: if(servo0_timer) TMR1 = 63000;
 12209  001D4A  0101               	movlb	1	; () banked
 12210  001D4C  517D               	movf	_servo0_timer& (0+255),w,b
 12211  001D4E  0101               	movlb	1	; () banked
 12212  001D50  117E               	iorwf	(_servo0_timer+1)& (0+255),w,b
 12213  001D52  B4D8               	btfsc	status,2,c
 12214  001D54  D004               	goto	i2l6854
 12215                           
 12216                           ; BSR set to: 1
 12217  001D56  0EF6               	movlw	246
 12218  001D58  6ECF               	movwf	4047,c	;volatile
 12219  001D5A  0E18               	movlw	24
 12220  001D5C  D003               	goto	L22
 12221  001D5E                     i2l6854:
 12222                           
 12223                           ; BSR set to: 1
 12224                           ;main.c: 208: else TMR1 = 62000;
 12225  001D5E  0EF2               	movlw	242
 12226  001D60  6ECF               	movwf	4047,c	;volatile
 12227  001D62  0E30               	movlw	48
 12228  001D64                     L22:
 12229  001D64  6ECE               	movwf	4046,c	;volatile
 12230                           
 12231                           ; BSR set to: 1
 12232                           ;main.c: 209: servo0_flag = 1;
 12233  001D66  0E01               	movlw	1
 12234  001D68                     L21:
 12235  001D68  6E7E               	movwf	_servo0_flag,c
 12236                           
 12237                           ;main.c: 210: }
 12238                           ;main.c: 211: TMR1IF = 0;
 12239                           
 12240                           ; BSR set to: 1
 12241  001D6A  909E               	bcf	3998,0,c	;volatile
 12242                           
 12243                           ;main.c: 212: }
 12244  001D6C  D099               	goto	i2l354
 12245  001D6E                     i2l335:
 12246                           
 12247                           ;main.c: 213: else if (TMR3IF){
 12248  001D6E  A2A1               	btfss	4001,1,c	;volatile
 12249  001D70  D01F               	goto	i2l341
 12250                           
 12251                           ;main.c: 214: if(servo1_flag){
 12252  001D72  0100               	movlb	0	; () banked
 12253  001D74  51E1               	movf	_servo1_flag& (0+255),w,b
 12254  001D76  B4D8               	btfsc	status,2,c
 12255  001D78  D007               	goto	i2l342
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;main.c: 215: LATCbits.LATC1 = 0;
 12259  001D7A  928B               	bcf	3979,1,c	;volatile
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;main.c: 216: TMR3 = 16517;
 12263  001D7C  0E40               	movlw	64
 12264  001D7E  6EB3               	movwf	4019,c	;volatile
 12265  001D80  0E85               	movlw	133
 12266  001D82  6EB2               	movwf	4018,c	;volatile
 12267                           
 12268                           ;main.c: 217: servo1_flag = 0;
 12269  001D84  0E00               	movlw	0
 12270  001D86  D010               	goto	L23
 12271  001D88                     i2l342:
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;main.c: 219: else{
 12275                           ;main.c: 220: LATCbits.LATC1 = 1;
 12276  001D88  828B               	bsf	3979,1,c	;volatile
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;main.c: 221: if(servo1_timer) TMR3 = 62000;
 12280  001D8A  0101               	movlb	1	; () banked
 12281  001D8C  517F               	movf	_servo1_timer& (0+255),w,b
 12282  001D8E  0101               	movlb	1	; () banked
 12283  001D90  1180               	iorwf	(_servo1_timer+1)& (0+255),w,b
 12284  001D92  B4D8               	btfsc	status,2,c
 12285  001D94  D004               	goto	i2l6868
 12286                           
 12287                           ; BSR set to: 1
 12288  001D96  0EF2               	movlw	242
 12289  001D98  6EB3               	movwf	4019,c	;volatile
 12290  001D9A  0E30               	movlw	48
 12291  001D9C  D003               	goto	L24
 12292  001D9E                     i2l6868:
 12293                           
 12294                           ; BSR set to: 1
 12295                           ;main.c: 222: else TMR3 = 63000;
 12296  001D9E  0EF6               	movlw	246
 12297  001DA0  6EB3               	movwf	4019,c	;volatile
 12298  001DA2  0E18               	movlw	24
 12299  001DA4                     L24:
 12300  001DA4  6EB2               	movwf	4018,c	;volatile
 12301                           
 12302                           ; BSR set to: 1
 12303                           ;main.c: 223: servo1_flag = 1;
 12304  001DA6  0E01               	movlw	1
 12305  001DA8                     L23:
 12306  001DA8  0100               	movlb	0	; () banked
 12307  001DAA  6FE1               	movwf	_servo1_flag& (0+255),b
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;main.c: 224: }
 12311                           ;main.c: 225: TMR3IF = 0;
 12312                           
 12313                           ; BSR set to: 0
 12314  001DAC  92A1               	bcf	4001,1,c	;volatile
 12315                           
 12316                           ;main.c: 226: }
 12317  001DAE  D078               	goto	i2l354
 12318  001DB0                     i2l341:
 12319                           
 12320                           ;main.c: 227: else if (TMR0IF){
 12321  001DB0  A4F2               	btfss	intcon,2,c	;volatile
 12322  001DB2  D05C               	goto	i2l6894
 12323                           
 12324                           ;main.c: 228: LATAbits.LATA2 = 0;
 12325  001DB4  9489               	bcf	3977,2,c	;volatile
 12326                           
 12327                           ;main.c: 229: TMR0ON = 0;
 12328  001DB6  9ED5               	bcf	4053,7,c	;volatile
 12329                           
 12330                           ;main.c: 230: read_time();
 12331  001DB8  EC89  F029         	call	_read_time	;wreg free
 12332                           
 12333                           ;main.c: 231: end_time[1] = time[1];
 12334  001DBC  C159  F0DD         	movff	_time+1,_end_time+1
 12335                           
 12336                           ;main.c: 232: end_time[0] = time[0];
 12337  001DC0  C158  F0DC         	movff	_time,_end_time
 12338                           
 12339                           ;main.c: 233: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12340  001DC4  C0DF  F075         	movff	_start_time+1,dec_to_hex@num
 12341  001DC8  6A76               	clrf	dec_to_hex@num+1,c
 12342  001DCA  EC35  F020         	call	_dec_to_hex	;wreg free
 12343  001DCE  C075  F078         	movff	?_dec_to_hex,_isr$1527
 12344  001DD2  C076  F079         	movff	?_dec_to_hex+1,_isr$1527+1
 12345                           
 12346                           ;main.c: 233: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
 12347  001DD6  C078  F00F         	movff	_isr$1527,i2___wmul@multiplier
 12348  001DDA  C079  F010         	movff	_isr$1527+1,i2___wmul@multiplier+1
 12349  001DDE  0E00               	movlw	0
 12350  001DE0  6E12               	movwf	i2___wmul@multiplicand+1,c
 12351  001DE2  0E3C               	movlw	60
 12352  001DE4  6E11               	movwf	i2___wmul@multiplicand,c
 12353  001DE6  EC1F  F02C         	call	i2___wmul	;wreg free
 12354  001DEA  C00F  F08E         	movff	?i2___wmul,??_isr
 12355  001DEE  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12356  001DF2  C0DE  F075         	movff	_start_time,dec_to_hex@num
 12357  001DF6  6A76               	clrf	dec_to_hex@num+1,c
 12358  001DF8  EC35  F020         	call	_dec_to_hex	;wreg free
 12359  001DFC  5075               	movf	?_dec_to_hex,w,c
 12360  001DFE  0100               	movlb	0	; () banked
 12361  001E00  258E               	addwf	??_isr& (0+255),w,b
 12362  001E02  0101               	movlb	1	; () banked
 12363  001E04  6F81               	movwf	_stime& (0+255),b
 12364  001E06  5076               	movf	?_dec_to_hex+1,w,c
 12365  001E08  0100               	movlb	0	; () banked
 12366  001E0A  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12367  001E0C  0101               	movlb	1	; () banked
 12368  001E0E  6F82               	movwf	(_stime+1)& (0+255),b
 12369                           
 12370                           ; BSR set to: 1
 12371                           ;main.c: 234: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12372  001E10  C0DD  F075         	movff	_end_time+1,dec_to_hex@num
 12373  001E14  6A76               	clrf	dec_to_hex@num+1,c
 12374  001E16  EC35  F020         	call	_dec_to_hex	;wreg free
 12375  001E1A  C075  F078         	movff	?_dec_to_hex,_isr$1527
 12376  001E1E  C076  F079         	movff	?_dec_to_hex+1,_isr$1527+1
 12377                           
 12378                           ;main.c: 234: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
 12379  001E22  C078  F00F         	movff	_isr$1527,i2___wmul@multiplier
 12380  001E26  C079  F010         	movff	_isr$1527+1,i2___wmul@multiplier+1
 12381  001E2A  0E00               	movlw	0
 12382  001E2C  6E12               	movwf	i2___wmul@multiplicand+1,c
 12383  001E2E  0E3C               	movlw	60
 12384  001E30  6E11               	movwf	i2___wmul@multiplicand,c
 12385  001E32  EC1F  F02C         	call	i2___wmul	;wreg free
 12386  001E36  C00F  F08E         	movff	?i2___wmul,??_isr
 12387  001E3A  C010  F08F         	movff	?i2___wmul+1,??_isr+1
 12388  001E3E  C0DC  F075         	movff	_end_time,dec_to_hex@num
 12389  001E42  6A76               	clrf	dec_to_hex@num+1,c
 12390  001E44  EC35  F020         	call	_dec_to_hex	;wreg free
 12391  001E48  5075               	movf	?_dec_to_hex,w,c
 12392  001E4A  0100               	movlb	0	; () banked
 12393  001E4C  258E               	addwf	??_isr& (0+255),w,b
 12394  001E4E  0101               	movlb	1	; () banked
 12395  001E50  6F6D               	movwf	_etime& (0+255),b
 12396  001E52  5076               	movf	?_dec_to_hex+1,w,c
 12397  001E54  0100               	movlb	0	; () banked
 12398  001E56  218F               	addwfc	(??_isr+1)& (0+255),w,b
 12399  001E58  0101               	movlb	1	; () banked
 12400  001E5A  6F6E               	movwf	(_etime+1)& (0+255),b
 12401                           
 12402                           ; BSR set to: 1
 12403                           ;main.c: 235: curr_state = OPERATIONEND;
 12404  001E5C  0E03               	movlw	3
 12405  001E5E  0100               	movlb	0	; () banked
 12406  001E60  6FE0               	movwf	_curr_state& (0+255),b
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;main.c: 236: bottle_count_disp = -1;
 12410  001E62  0101               	movlb	1	; () banked
 12411  001E64  6985               	setf	_bottle_count_disp& (0+255),b
 12412  001E66  6986               	setf	(_bottle_count_disp+1)& (0+255),b
 12413                           
 12414                           ; BSR set to: 1
 12415                           ;main.c: 237: TMR0IF = 0;
 12416  001E68  94F2               	bcf	intcon,2,c	;volatile
 12417                           
 12418                           ;main.c: 238: }
 12419  001E6A  D01A               	goto	i2l354
 12420  001E6C                     i2l6894:
 12421                           
 12422                           ;main.c: 241: lcdInst(0b10000000);
 12423  001E6C  0E80               	movlw	128
 12424  001E6E  EC99  F02C         	call	i2_lcdInst
 12425                           
 12426                           ;main.c: 242: printf("ERR: BAD ISR");
 12427  001E72  0ECB               	movlw	low STR_4
 12428  001E74  6E49               	movwf	i2printf@f,c
 12429  001E76  0EFF               	movlw	high STR_4
 12430  001E78  6E4A               	movwf	i2printf@f+1,c
 12431  001E7A  ECFE  F005         	call	i2_printf	;wreg free
 12432                           
 12433                           ;main.c: 243: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
 12434  001E7E  0E00               	movlw	0
 12435  001E80  6E77               	movwf	isr@i,c
 12436  001E82                     i2l6900:
 12437  001E82  0E63               	movlw	99
 12438  001E84  6477               	cpfsgt	isr@i,c
 12439  001E86  D001               	goto	i2l6904
 12440  001E88  D7F1               	goto	i2l6894
 12441  001E8A                     i2l6904:
 12442  001E8A  0E21               	movlw	33
 12443  001E8C  0100               	movlb	0	; () banked
 12444  001E8E  6F8E               	movwf	??_isr& (0+255),b
 12445  001E90  0E76               	movlw	118
 12446  001E92                     i2u917_47:
 12447  001E92  2EE8               	decfsz	wreg,f,c
 12448  001E94  D7FE               	bra	i2u917_47
 12449  001E96  2F8E               	decfsz	??_isr& (0+255),f,b
 12450  001E98  D7FC               	bra	i2u917_47
 12451  001E9A  F000               	nop	
 12452  001E9C  2A77               	incf	isr@i,f,c
 12453  001E9E  D7F1               	goto	i2l6900
 12454  001EA0                     i2l354:
 12455  001EA0  C09D  FFF5         	movff	??_isr+15,tablat
 12456  001EA4  C09C  FFF8         	movff	??_isr+14,tblptru
 12457  001EA8  C09B  FFF7         	movff	??_isr+13,tblptrh
 12458  001EAC  C09A  FFF6         	movff	??_isr+12,tblptrl
 12459  001EB0  C099  FFF4         	movff	??_isr+11,prodh
 12460  001EB4  C098  FFF3         	movff	??_isr+10,prodl
 12461  001EB8  C097  FFDA         	movff	??_isr+9,fsr2h
 12462  001EBC  C096  FFD9         	movff	??_isr+8,fsr2l
 12463  001EC0  C095  FFE2         	movff	??_isr+7,fsr1h
 12464  001EC4  C094  FFE1         	movff	??_isr+6,fsr1l
 12465  001EC8  C093  FFEA         	movff	??_isr+5,fsr0h
 12466  001ECC  C092  FFE9         	movff	??_isr+4,fsr0l
 12467  001ED0  C091  FFFB         	movff	??_isr+3,pclatu
 12468  001ED4  C090  FFFA         	movff	??_isr+2,pclath
 12469  001ED8  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12470  001EDA  0011               	retfie		f
 12471  001EDC                     __end_of_isr:
 12472                           	opt stack 0
 12473                           pclatu	equ	0xFFB
 12474                           pclath	equ	0xFFA
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           intcon2	equ	0xFF1
 12483                           intcon3	equ	0xFF0
 12484                           postinc0	equ	0xFEE
 12485                           fsr0h	equ	0xFEA
 12486                           fsr0l	equ	0xFE9
 12487                           wreg	equ	0xFE8
 12488                           fsr1h	equ	0xFE2
 12489                           fsr1l	equ	0xFE1
 12490                           indf2	equ	0xFDF
 12491                           postinc2	equ	0xFDE
 12492                           postdec2	equ	0xFDD
 12493                           fsr2h	equ	0xFDA
 12494                           fsr2l	equ	0xFD9
 12495                           status	equ	0xFD8
 12496                           
 12497 ;; *************** function i2_read_colorsensor *****************
 12498 ;; Defined at:
 12499 ;;		line 487 in file "main.c"
 12500 ;; Parameters:    Size  Location     Type
 12501 ;;		None
 12502 ;; Auto vars:     Size  Location     Type
 12503 ;;		None
 12504 ;; Return value:  Size  Location     Type
 12505 ;;                  1    wreg      void 
 12506 ;; Registers used:
 12507 ;;		wreg, status,2, status,0, cstack
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12517 ;;Total ram usage:        2 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:    2
 12520 ;; This function calls:
 12521 ;;		i2_I2C_Master_Read
 12522 ;;		i2_I2C_Master_Start
 12523 ;;		i2_I2C_Master_Stop
 12524 ;;		i2_I2C_Master_Write
 12525 ;; This function is called by:
 12526 ;;		_isr
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           	psect	text42
 12531  00481C                     __ptext42:
 12532                           	opt stack 0
 12533  00481C                     i2_read_colorsensor:
 12534                           	opt stack 22
 12535                           
 12536                           ;main.c: 506: I2C_Master_Start();
 12537                           
 12538                           ;incstack = 0
 12539  00481C  ECB5  F02C         	call	i2_I2C_Master_Start	;wreg free
 12540                           
 12541                           ;main.c: 507: I2C_Master_Write(0b01010011);
 12542  004820  0E00               	movlw	0
 12543  004822  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12544  004824  0E53               	movlw	83
 12545  004826  6E02               	movwf	i2I2C_Master_Write@d,c
 12546  004828  ECA4  F02C         	call	i2_I2C_Master_Write	;wreg free
 12547                           
 12548                           ;main.c: 508: color_low[0] = I2C_Master_Read(1);
 12549  00482C  0E01               	movlw	1
 12550  00482E  EC0C  F02C         	call	i2_I2C_Master_Read
 12551  004832  0100               	movlb	0	; () banked
 12552  004834  6FCE               	movwf	_color_low& (0+255),b
 12553                           
 12554                           ;main.c: 509: color_high[0] = I2C_Master_Read(1);
 12555  004836  0E01               	movlw	1
 12556  004838  EC0C  F02C         	call	i2_I2C_Master_Read
 12557  00483C  0100               	movlb	0	; () banked
 12558  00483E  6FCA               	movwf	_color_high& (0+255),b
 12559                           
 12560                           ;main.c: 510: color_low[1] = I2C_Master_Read(1);
 12561  004840  0E01               	movlw	1
 12562  004842  EC0C  F02C         	call	i2_I2C_Master_Read
 12563  004846  0100               	movlb	0	; () banked
 12564  004848  6FCF               	movwf	(_color_low+1)& (0+255),b
 12565                           
 12566                           ;main.c: 511: color_high[1] = I2C_Master_Read(1);
 12567  00484A  0E01               	movlw	1
 12568  00484C  EC0C  F02C         	call	i2_I2C_Master_Read
 12569  004850  0100               	movlb	0	; () banked
 12570  004852  6FCB               	movwf	(_color_high+1)& (0+255),b
 12571                           
 12572                           ;main.c: 512: color_low[2] = I2C_Master_Read(1);
 12573  004854  0E01               	movlw	1
 12574  004856  EC0C  F02C         	call	i2_I2C_Master_Read
 12575  00485A  0100               	movlb	0	; () banked
 12576  00485C  6FD0               	movwf	(_color_low+2)& (0+255),b
 12577                           
 12578                           ;main.c: 513: color_high[2] = I2C_Master_Read(1);
 12579  00485E  0E01               	movlw	1
 12580  004860  EC0C  F02C         	call	i2_I2C_Master_Read
 12581  004864  0100               	movlb	0	; () banked
 12582  004866  6FCC               	movwf	(_color_high+2)& (0+255),b
 12583                           
 12584                           ;main.c: 514: color_low[3] = I2C_Master_Read(1);
 12585  004868  0E01               	movlw	1
 12586  00486A  EC0C  F02C         	call	i2_I2C_Master_Read
 12587  00486E  0100               	movlb	0	; () banked
 12588  004870  6FD1               	movwf	(_color_low+3)& (0+255),b
 12589                           
 12590                           ;main.c: 515: color_high[3] = I2C_Master_Read(0);
 12591  004872  0E00               	movlw	0
 12592  004874  EC0C  F02C         	call	i2_I2C_Master_Read
 12593  004878  0100               	movlb	0	; () banked
 12594  00487A  6FCD               	movwf	(_color_high+3)& (0+255),b
 12595                           
 12596                           ;main.c: 516: I2C_Master_Stop();
 12597  00487C  ECB1  F02C         	call	i2_I2C_Master_Stop	;wreg free
 12598                           
 12599                           ;main.c: 517: color[0] = (color_high[0] << 8)|(color_low[0]);
 12600  004880  0100               	movlb	0	; () banked
 12601  004882  51CE               	movf	_color_low& (0+255),w,b
 12602  004884  C0CA  F004         	movff	_color_high,??i2_read_colorsensor
 12603  004888  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12604  00488A  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12605  00488E  6A04               	clrf	??i2_read_colorsensor,c
 12606  004890  1004               	iorwf	??i2_read_colorsensor,w,c
 12607  004892  0100               	movlb	0	; () banked
 12608  004894  6FC2               	movwf	_color& (0+255),b
 12609  004896  5005               	movf	??i2_read_colorsensor+1,w,c
 12610  004898  0100               	movlb	0	; () banked
 12611  00489A  6FC3               	movwf	(_color+1)& (0+255),b
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;main.c: 518: color[1] = (color_high[1] << 8)|(color_low[1]);
 12615  00489C  0100               	movlb	0	; () banked
 12616  00489E  51CF               	movf	(_color_low+1)& (0+255),w,b
 12617  0048A0  C0CB  F004         	movff	_color_high+1,??i2_read_colorsensor
 12618  0048A4  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12619  0048A6  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12620  0048AA  6A04               	clrf	??i2_read_colorsensor,c
 12621  0048AC  1004               	iorwf	??i2_read_colorsensor,w,c
 12622  0048AE  0100               	movlb	0	; () banked
 12623  0048B0  6FC4               	movwf	(_color+2)& (0+255),b
 12624  0048B2  5005               	movf	??i2_read_colorsensor+1,w,c
 12625  0048B4  0100               	movlb	0	; () banked
 12626  0048B6  6FC5               	movwf	(_color+3)& (0+255),b
 12627                           
 12628                           ; BSR set to: 0
 12629                           ;main.c: 519: color[2] = (color_high[2] << 8)|(color_low[2]);
 12630  0048B8  0100               	movlb	0	; () banked
 12631  0048BA  51D0               	movf	(_color_low+2)& (0+255),w,b
 12632  0048BC  C0CC  F004         	movff	_color_high+2,??i2_read_colorsensor
 12633  0048C0  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12634  0048C2  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12635  0048C6  6A04               	clrf	??i2_read_colorsensor,c
 12636  0048C8  1004               	iorwf	??i2_read_colorsensor,w,c
 12637  0048CA  0100               	movlb	0	; () banked
 12638  0048CC  6FC6               	movwf	(_color+4)& (0+255),b
 12639  0048CE  5005               	movf	??i2_read_colorsensor+1,w,c
 12640  0048D0  0100               	movlb	0	; () banked
 12641  0048D2  6FC7               	movwf	(_color+5)& (0+255),b
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;main.c: 520: color[3] = (color_high[3] << 8)|(color_low[3]);
 12645  0048D4  0100               	movlb	0	; () banked
 12646  0048D6  51D1               	movf	(_color_low+3)& (0+255),w,b
 12647  0048D8  C0CD  F004         	movff	_color_high+3,??i2_read_colorsensor
 12648  0048DC  6A05               	clrf	(??i2_read_colorsensor+1)& (0+255),c
 12649  0048DE  C004  F005         	movff	??i2_read_colorsensor,??i2_read_colorsensor+1
 12650  0048E2  6A04               	clrf	??i2_read_colorsensor,c
 12651  0048E4  1004               	iorwf	??i2_read_colorsensor,w,c
 12652  0048E6  0100               	movlb	0	; () banked
 12653  0048E8  6FC8               	movwf	(_color+6)& (0+255),b
 12654  0048EA  5005               	movf	??i2_read_colorsensor+1,w,c
 12655  0048EC  0100               	movlb	0	; () banked
 12656  0048EE  6FC9               	movwf	(_color+7)& (0+255),b
 12657  0048F0  0012               	return	
 12658  0048F2                     __end_ofi2_read_colorsensor:
 12659                           	opt stack 0
 12660                           pclatu	equ	0xFFB
 12661                           pclath	equ	0xFFA
 12662                           tblptru	equ	0xFF8
 12663                           tblptrh	equ	0xFF7
 12664                           tblptrl	equ	0xFF6
 12665                           tablat	equ	0xFF5
 12666                           prodh	equ	0xFF4
 12667                           prodl	equ	0xFF3
 12668                           intcon	equ	0xFF2
 12669                           intcon2	equ	0xFF1
 12670                           intcon3	equ	0xFF0
 12671                           postinc0	equ	0xFEE
 12672                           fsr0h	equ	0xFEA
 12673                           fsr0l	equ	0xFE9
 12674                           wreg	equ	0xFE8
 12675                           fsr1h	equ	0xFE2
 12676                           fsr1l	equ	0xFE1
 12677                           indf2	equ	0xFDF
 12678                           postinc2	equ	0xFDE
 12679                           postdec2	equ	0xFDD
 12680                           fsr2h	equ	0xFDA
 12681                           fsr2l	equ	0xFD9
 12682                           status	equ	0xFD8
 12683                           
 12684 ;; *************** function i2_printf *****************
 12685 ;; Defined at:
 12686 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12687 ;; Parameters:    Size  Location     Type
 12688 ;;  f               2   72[COMRAM] PTR const unsigned char 
 12689 ;;		 -> STR_22(15), STR_21(16), STR_20(7), STR_19(3), 
 12690 ;;		 -> STR_18(4), STR_17(18), STR_16(23), STR_15(16), 
 12691 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
 12692 ;;		 -> STR_10(17), STR_9(17), STR_8(23), STR_7(23), 
 12693 ;;		 -> STR_6(9), STR_5(8), STR_4(13), STR_3(24), 
 12694 ;;		 -> STR_2(24), STR_1(8), 
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;  printf          4  100[COMRAM] unsigned long 
 12697 ;;  printf          4   92[COMRAM] struct .
 12698 ;;  printf          3  106[COMRAM] struct .
 12699 ;;  printf          3    0        PTR const unsigned char 
 12700 ;;  printf          2  104[COMRAM] unsigned short 
 12701 ;;  printf          2   98[COMRAM] int 
 12702 ;;  printf          2   96[COMRAM] int 
 12703 ;;  printf          2   90[COMRAM] int 
 12704 ;;  printf          2   88[COMRAM] PTR void [1]
 12705 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12706 ;;  printf          2    0        unsigned int 
 12707 ;;  printf          1  109[COMRAM] char 
 12708 ;;  printf          1   87[COMRAM] unsigned char 
 12709 ;;  printf          1    0        unsigned char 
 12710 ;; Return value:  Size  Location     Type
 12711 ;;                  2   72[COMRAM] int 
 12712 ;; Registers used:
 12713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12714 ;; Tracked objects:
 12715 ;;		On entry : 0/0
 12716 ;;		On exit  : 0/0
 12717 ;;		Unchanged: 0/0
 12718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12719 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12720 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12721 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12722 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;Total ram usage:       38 bytes
 12724 ;; Hardware stack levels used:    1
 12725 ;; Hardware stack levels required when called:    3
 12726 ;; This function calls:
 12727 ;;		i2___awdiv
 12728 ;;		i2___ftadd
 12729 ;;		i2___ftge
 12730 ;;		i2___ftmul
 12731 ;;		i2___ftneg
 12732 ;;		i2___ftsub
 12733 ;;		i2___fttol
 12734 ;;		i2___lldiv
 12735 ;;		i2___llmod
 12736 ;;		i2___lltoft
 12737 ;;		i2___wmul
 12738 ;;		i2__div_to_l_
 12739 ;;		i2__tdiv_to_l_
 12740 ;;		i2_fround
 12741 ;;		i2_isdigit
 12742 ;;		i2_putch
 12743 ;;		i2_scale
 12744 ;; This function is called by:
 12745 ;;		_isr
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           	psect	text43
 12750  000BFC                     __ptext43:
 12751                           	opt stack 0
 12752  000BFC                     i2_printf:
 12753                           	opt stack 21
 12754                           
 12755                           ;doprnt.c: 466: va_list ap;
 12756                           ;doprnt.c: 499: signed char c;
 12757                           ;doprnt.c: 501: int width;
 12758                           ;doprnt.c: 504: int prec;
 12759                           ;doprnt.c: 508: unsigned short flag;
 12760                           ;doprnt.c: 515: char d;
 12761                           ;doprnt.c: 516: double fval;
 12762                           ;doprnt.c: 517: int exp;
 12763                           ;doprnt.c: 523: union {
 12764                           ;doprnt.c: 524: unsigned long vd;
 12765                           ;doprnt.c: 525: double integ;
 12766                           ;doprnt.c: 526: } tmpval;
 12767                           ;doprnt.c: 528: unsigned long val;
 12768                           ;doprnt.c: 529: unsigned len;
 12769                           ;doprnt.c: 530: const char * cp;
 12770                           ;doprnt.c: 533: *ap = __va_start();
 12771                           
 12772                           ; BSR set to: 0
 12773                           ;incstack = 0
 12774  000BFC  0E4B               	movlw	low (?i2_printf+2)
 12775  000BFE  6E59               	movwf	i2printf@ap,c
 12776  000C00  0E00               	movlw	high (?i2_printf+2)
 12777  000C02  6E5A               	movwf	i2printf@ap+1,c
 12778                           
 12779                           ;doprnt.c: 536: while(c = *f++) {
 12780  000C04  EFDF  F00A         	goto	i2l6642
 12781  000C08                     i2l6352:
 12782                           
 12783                           ;doprnt.c: 538: if(c != '%')
 12784  000C08  0E25               	movlw	37
 12785  000C0A  186E               	xorwf	i2printf@c,w,c
 12786  000C0C  B4D8               	btfsc	status,2,c
 12787  000C0E  D005               	goto	i2l6356
 12788                           
 12789                           ;doprnt.c: 540: {
 12790                           ;doprnt.c: 541: (putch(c) );
 12791  000C10  506E               	movf	i2printf@c,w,c
 12792  000C12  EC93  F02C         	call	i2_putch
 12793                           
 12794                           ;doprnt.c: 542: continue;
 12795  000C16  EFDF  F00A         	goto	i2l6642
 12796  000C1A                     i2l6356:
 12797                           
 12798                           ;doprnt.c: 543: }
 12799                           ;doprnt.c: 546: width = 0;
 12800  000C1A  0E00               	movlw	0
 12801  000C1C  6E62               	movwf	i2printf@width+1,c
 12802  000C1E  0E00               	movlw	0
 12803  000C20  6E61               	movwf	i2printf@width,c
 12804                           
 12805                           ;doprnt.c: 548: flag = 0;
 12806  000C22  0E00               	movlw	0
 12807  000C24  6E6A               	movwf	i2printf@flag+1,c
 12808  000C26  0E00               	movlw	0
 12809  000C28  6E69               	movwf	i2printf@flag,c
 12810                           
 12811                           ;doprnt.c: 551: switch(*f) {
 12812                           
 12813                           ;doprnt.c: 550: for(;;) {
 12814  000C2A  D003               	goto	i2l6362
 12815  000C2C                     i2l6358:
 12816                           
 12817                           ;doprnt.c: 580: flag |= 0x04;
 12818  000C2C  8469               	bsf	i2printf@flag,2,c
 12819                           
 12820                           ;doprnt.c: 581: f++;
 12821  000C2E  4A49               	infsnz	i2printf@f,f,c
 12822  000C30  2A4A               	incf	i2printf@f+1,f,c
 12823  000C32                     i2l6362:
 12824  000C32  C049  FFF6         	movff	i2printf@f,tblptrl
 12825  000C36  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12826  000C3A                     	if	0	;tblptru may be non-zero
 12827  000C3A                     	endif
 12828  000C3A                     	if	0	;tblptru may be non-zero
 12829  000C3A                     	endif
 12830  000C3A  0008               	tblrd		*
 12831  000C3C  50F5               	movf	tablat,w,c
 12832                           
 12833                           ; Switch size 1, requested type "space"
 12834                           ; Number of cases is 1, Range of values is 48 to 48
 12835                           ; switch strategies available:
 12836                           ; Name         Instructions Cycles
 12837                           ; simple_byte            4     3 (average)
 12838                           ;	Chosen strategy is simple_byte
 12839  000C3E  0A30               	xorlw	48	; case 48
 12840  000C40  B4D8               	btfsc	status,2,c
 12841  000C42  D7F4               	goto	i2l6358
 12842                           
 12843                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12844                           
 12845                           ;doprnt.c: 586: }
 12846                           
 12847                           ;doprnt.c: 585: break;
 12848  000C44  C049  FFF6         	movff	i2printf@f,tblptrl
 12849  000C48  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12850  000C4C                     	if	0	;tblptru may be non-zero
 12851  000C4C                     	endif
 12852  000C4C                     	if	0	;tblptru may be non-zero
 12853  000C4C                     	endif
 12854  000C4C  0008               	tblrd		*
 12855  000C4E  50F5               	movf	tablat,w,c
 12856  000C50  EC55  F02C         	call	i2_isdigit
 12857  000C54  A0D8               	btfss	status,0,c
 12858  000C56  D03A               	goto	i2l6384
 12859                           
 12860                           ;doprnt.c: 598: width = 0;
 12861  000C58  0E00               	movlw	0
 12862  000C5A  6E62               	movwf	i2printf@width+1,c
 12863  000C5C  0E00               	movlw	0
 12864  000C5E  6E61               	movwf	i2printf@width,c
 12865  000C60                     i2l6368:
 12866                           
 12867                           ;doprnt.c: 600: width *= 10;
 12868  000C60  C061  F00F         	movff	i2printf@width,i2___wmul@multiplier
 12869  000C64  C062  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12870  000C68  0E00               	movlw	0
 12871  000C6A  6E12               	movwf	i2___wmul@multiplicand+1,c
 12872  000C6C  0E0A               	movlw	10
 12873  000C6E  6E11               	movwf	i2___wmul@multiplicand,c
 12874  000C70  EC1F  F02C         	call	i2___wmul	;wreg free
 12875  000C74  C00F  F061         	movff	?i2___wmul,i2printf@width
 12876  000C78  C010  F062         	movff	?i2___wmul+1,i2printf@width+1
 12877                           
 12878                           ;doprnt.c: 601: width += *f++ - '0';
 12879  000C7C  0ED0               	movlw	208
 12880  000C7E  6E4F               	movwf	??i2_printf& (0+255),c
 12881  000C80  0EFF               	movlw	255
 12882  000C82  6E50               	movwf	(??i2_printf+1)& (0+255),c
 12883  000C84  C049  FFF6         	movff	i2printf@f,tblptrl
 12884  000C88  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12885  000C8C                     	if	0	;tblptru may be non-zero
 12886  000C8C                     	endif
 12887  000C8C                     	if	0	;tblptru may be non-zero
 12888  000C8C                     	endif
 12889  000C8C  0008               	tblrd		*
 12890  000C8E  50F5               	movf	tablat,w,c
 12891  000C90  6E51               	movwf	(??i2_printf+2)& (0+255),c
 12892  000C92  6A52               	clrf	(??i2_printf+3)& (0+255),c
 12893  000C94  504F               	movf	??i2_printf,w,c
 12894  000C96  2651               	addwf	??i2_printf+2,f,c
 12895  000C98  5050               	movf	??i2_printf+1,w,c
 12896  000C9A  2252               	addwfc	??i2_printf+3,f,c
 12897  000C9C  5051               	movf	??i2_printf+2,w,c
 12898  000C9E  2661               	addwf	i2printf@width,f,c
 12899  000CA0  5052               	movf	??i2_printf+3,w,c
 12900  000CA2  2262               	addwfc	i2printf@width+1,f,c
 12901  000CA4  4A49               	infsnz	i2printf@f,f,c
 12902  000CA6  2A4A               	incf	i2printf@f+1,f,c
 12903                           
 12904                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12905  000CA8  C049  FFF6         	movff	i2printf@f,tblptrl
 12906  000CAC  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12907  000CB0                     	if	0	;tblptru may be non-zero
 12908  000CB0                     	endif
 12909  000CB0                     	if	0	;tblptru may be non-zero
 12910  000CB0                     	endif
 12911  000CB0  0008               	tblrd		*
 12912  000CB2  50F5               	movf	tablat,w,c
 12913  000CB4  EC55  F02C         	call	i2_isdigit
 12914  000CB8  A0D8               	btfss	status,0,c
 12915  000CBA  D008               	goto	i2l6384
 12916  000CBC  D7D1               	goto	i2l6368
 12917  000CBE                     i2l6376:
 12918                           
 12919                           ;doprnt.c: 663: flag |= 0x400;
 12920  000CBE  846A               	bsf	i2printf@flag+1,2,c
 12921                           
 12922                           ;doprnt.c: 698: case 'i':
 12923                           ;doprnt.c: 699: break;
 12924                           
 12925                           ;doprnt.c: 697: case 'd':
 12926                           
 12927                           ;doprnt.c: 664: break;
 12928  000CC0  D023               	goto	i2l6386
 12929  000CC2                     i2l6378:
 12930                           
 12931                           ;doprnt.c: 721: flag |= 0x80;
 12932  000CC2  8E69               	bsf	i2printf@flag,7,c
 12933                           
 12934                           ;doprnt.c: 723: break;
 12935  000CC4  D021               	goto	i2l6386
 12936  000CC6                     i2l6380:
 12937                           
 12938                           ;doprnt.c: 818: flag |= 0xC0;
 12939  000CC6  0EC0               	movlw	192
 12940  000CC8  1269               	iorwf	i2printf@flag,f,c
 12941                           
 12942                           ;doprnt.c: 822: }
 12943                           
 12944                           ;doprnt.c: 819: break;
 12945  000CCA  D01E               	goto	i2l6386
 12946  000CCC                     i2l6384:
 12947  000CCC  C049  FFF6         	movff	i2printf@f,tblptrl
 12948  000CD0  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 12949  000CD4  4A49               	infsnz	i2printf@f,f,c
 12950  000CD6  2A4A               	incf	i2printf@f+1,f,c
 12951  000CD8                     	if	0	;tblptru may be non-zero
 12952  000CD8                     	endif
 12953  000CD8                     	if	0	;tblptru may be non-zero
 12954  000CD8                     	endif
 12955  000CD8  0008               	tblrd		*
 12956  000CDA  CFF5 F06E          	movff	tablat,i2printf@c
 12957  000CDE  506E               	movf	i2printf@c,w,c
 12958                           
 12959                           ; Switch size 1, requested type "space"
 12960                           ; Number of cases is 6, Range of values is 0 to 120
 12961                           ; switch strategies available:
 12962                           ; Name         Instructions Cycles
 12963                           ; simple_byte           19    10 (average)
 12964                           ;	Chosen strategy is simple_byte
 12965  000CE0  0A00               	xorlw	0	; case 0
 12966  000CE2  B4D8               	btfsc	status,2,c
 12967  000CE4  0012               	return	
 12968  000CE6  0A64               	xorlw	100	; case 100
 12969  000CE8  B4D8               	btfsc	status,2,c
 12970  000CEA  D00E               	goto	i2l6386
 12971  000CEC  0A02               	xorlw	2	; case 102
 12972  000CEE  B4D8               	btfsc	status,2,c
 12973  000CF0  D7E6               	goto	i2l6376
 12974  000CF2  0A0F               	xorlw	15	; case 105
 12975  000CF4  B4D8               	btfsc	status,2,c
 12976  000CF6  D008               	goto	i2l6386
 12977  000CF8  0A1C               	xorlw	28	; case 117
 12978  000CFA  B4D8               	btfsc	status,2,c
 12979  000CFC  D7E4               	goto	i2l6380
 12980  000CFE  0A0D               	xorlw	13	; case 120
 12981  000D00  B4D8               	btfsc	status,2,c
 12982  000D02  D7DF               	goto	i2l6378
 12983  000D04  EFDF  F00A         	goto	i2l6642
 12984  000D08                     i2l6386:
 12985                           
 12986                           ;doprnt.c: 825: if(flag & (0x700)) {
 12987  000D08  0E07               	movlw	7
 12988  000D0A  146A               	andwf	i2printf@flag+1,w,c
 12989  000D0C  B4D8               	btfsc	status,2,c
 12990  000D0E  D2EC               	goto	i2l6544
 12991                           
 12992                           ;doprnt.c: 829: prec = 6;
 12993  000D10  0E00               	movlw	0
 12994  000D12  6E5C               	movwf	i2printf@prec+1,c
 12995  000D14  0E06               	movlw	6
 12996  000D16  6E5B               	movwf	i2printf@prec,c
 12997                           
 12998                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 12999  000D18  C059  FFD9         	movff	i2printf@ap,fsr2l
 13000  000D1C  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13001  000D20  CFDE F06B          	movff	postinc2,i2printf@fval
 13002  000D24  CFDE F06C          	movff	postinc2,i2printf@fval+1
 13003  000D28  CFDD F06D          	movff	postdec2,i2printf@fval+2
 13004  000D2C  0E03               	movlw	3
 13005  000D2E  2659               	addwf	i2printf@ap,f,c
 13006  000D30  0E00               	movlw	0
 13007  000D32  225A               	addwfc	i2printf@ap+1,f,c
 13008                           
 13009                           ;doprnt.c: 831: if(fval < 0.0) {
 13010  000D34  AE6D               	btfss	i2printf@fval+2,7,c
 13011  000D36  D010               	goto	i2l6400
 13012                           
 13013                           ;doprnt.c: 832: fval = -fval;
 13014  000D38  C06B  F001         	movff	i2printf@fval,i2___ftneg@f1
 13015  000D3C  C06C  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 13016  000D40  C06D  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 13017  000D44  EC32  F02C         	call	i2___ftneg	;wreg free
 13018  000D48  C001  F06B         	movff	?i2___ftneg,i2printf@fval
 13019  000D4C  C002  F06C         	movff	?i2___ftneg+1,i2printf@fval+1
 13020  000D50  C003  F06D         	movff	?i2___ftneg+2,i2printf@fval+2
 13021                           
 13022                           ;doprnt.c: 833: flag |= 0x03;
 13023  000D54  0E03               	movlw	3
 13024  000D56  1269               	iorwf	i2printf@flag,f,c
 13025  000D58                     i2l6400:
 13026                           
 13027                           ;doprnt.c: 834: }
 13028                           ;doprnt.c: 835: exp = 0;
 13029  000D58  0E00               	movlw	0
 13030  000D5A  6E64               	movwf	i2printf@exp+1,c
 13031  000D5C  0E00               	movlw	0
 13032  000D5E  6E63               	movwf	i2printf@exp,c
 13033                           
 13034                           ;doprnt.c: 836: if( fval!=0) {
 13035  000D60  506B               	movf	i2printf@fval,w,c
 13036  000D62  106C               	iorwf	i2printf@fval+1,w,c
 13037  000D64  106D               	iorwf	i2printf@fval+2,w,c
 13038  000D66  B4D8               	btfsc	status,2,c
 13039  000D68  D083               	goto	i2l6428
 13040                           
 13041                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13042  000D6A  0E82               	movlw	130
 13043  000D6C  6E4F               	movwf	??i2_printf& (0+255),c
 13044  000D6E  0EFF               	movlw	255
 13045  000D70  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13046  000D72  C06B  F051         	movff	i2printf@fval,??i2_printf+2
 13047  000D76  C06C  F052         	movff	i2printf@fval+1,??i2_printf+3
 13048  000D7A  C06D  F053         	movff	i2printf@fval+2,??i2_printf+4
 13049  000D7E  C06E  F054         	movff	i2printf@fval+3,??i2_printf+5
 13050  000D82  0E10               	movlw	16
 13051  000D84  D005               	goto	i2u701_40
 13052  000D86                     i2u701_45:
 13053  000D86  90D8               	bcf	status,0,c
 13054  000D88  3254               	rrcf	??i2_printf+5,f,c
 13055  000D8A  3253               	rrcf	??i2_printf+4,f,c
 13056  000D8C  3252               	rrcf	??i2_printf+3,f,c
 13057  000D8E  3251               	rrcf	??i2_printf+2,f,c
 13058  000D90                     i2u701_40:
 13059  000D90  2EE8               	decfsz	wreg,f,c
 13060  000D92  D7F9               	goto	i2u701_45
 13061  000D94  5051               	movf	??i2_printf+2,w,c
 13062  000D96  244F               	addwf	??i2_printf,w,c
 13063  000D98  6E63               	movwf	i2printf@exp,c
 13064  000D9A  0E00               	movlw	0
 13065  000D9C  2050               	addwfc	??i2_printf+1,w,c
 13066  000D9E  6E64               	movwf	i2printf@exp+1,c
 13067                           
 13068                           ;doprnt.c: 838: exp--;
 13069  000DA0  0663               	decf	i2printf@exp,f,c
 13070  000DA2  A0D8               	btfss	status,0,c
 13071  000DA4  0664               	decf	i2printf@exp+1,f,c
 13072                           
 13073                           ;doprnt.c: 839: exp *= 3;
 13074  000DA6  C063  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 13075  000DAA  C064  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 13076  000DAE  0E00               	movlw	0
 13077  000DB0  6E12               	movwf	i2___wmul@multiplicand+1,c
 13078  000DB2  0E03               	movlw	3
 13079  000DB4  6E11               	movwf	i2___wmul@multiplicand,c
 13080  000DB6  EC1F  F02C         	call	i2___wmul	;wreg free
 13081  000DBA  C00F  F063         	movff	?i2___wmul,i2printf@exp
 13082  000DBE  C010  F064         	movff	?i2___wmul+1,i2printf@exp+1
 13083                           
 13084                           ;doprnt.c: 840: exp /= 10;
 13085  000DC2  C063  F007         	movff	i2printf@exp,i2___awdiv@dividend
 13086  000DC6  C064  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 13087  000DCA  0E00               	movlw	0
 13088  000DCC  6E0A               	movwf	i2___awdiv@divisor+1,c
 13089  000DCE  0E0A               	movlw	10
 13090  000DD0  6E09               	movwf	i2___awdiv@divisor,c
 13091  000DD2  EC54  F028         	call	i2___awdiv	;wreg free
 13092  000DD6  C007  F063         	movff	?i2___awdiv,i2printf@exp
 13093  000DDA  C008  F064         	movff	?i2___awdiv+1,i2printf@exp+1
 13094                           
 13095                           ;doprnt.c: 841: if(exp < 0)
 13096  000DDE  AE64               	btfss	i2printf@exp+1,7,c
 13097  000DE0  D003               	goto	i2l6416
 13098                           
 13099                           ;doprnt.c: 842: exp--;
 13100  000DE2  0663               	decf	i2printf@exp,f,c
 13101  000DE4  A0D8               	btfss	status,0,c
 13102  000DE6  0664               	decf	i2printf@exp+1,f,c
 13103  000DE8                     i2l6416:
 13104                           
 13105                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13106  000DE8  5063               	movf	i2printf@exp,w,c
 13107  000DEA  0800               	sublw	0
 13108  000DEC  EC6A  F011         	call	i2_scale
 13109  000DF0  C024  F05D         	movff	?i2_scale,i2printf@tmpval
 13110  000DF4  C025  F05E         	movff	?i2_scale+1,i2printf@tmpval+1
 13111  000DF8  C026  F05F         	movff	?i2_scale+2,i2printf@tmpval+2
 13112                           
 13113                           ;doprnt.c: 847: tmpval.integ *= fval;
 13114  000DFC  C05D  F015         	movff	i2printf@tmpval,i2___ftmul@f1
 13115  000E00  C05E  F016         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 13116  000E04  C05F  F017         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 13117  000E08  C06B  F018         	movff	i2printf@fval,i2___ftmul@f2
 13118  000E0C  C06C  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13119  000E10  C06D  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13120  000E14  ECB2  F022         	call	i2___ftmul	;wreg free
 13121  000E18  C015  F05D         	movff	?i2___ftmul,i2printf@tmpval
 13122  000E1C  C016  F05E         	movff	?i2___ftmul+1,i2printf@tmpval+1
 13123  000E20  C017  F05F         	movff	?i2___ftmul+2,i2printf@tmpval+2
 13124                           
 13125                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13126  000E24  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13127  000E28  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13128  000E2C  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13129  000E30  0E00               	movlw	0
 13130  000E32  6E04               	movwf	i2___ftge@ff2,c
 13131  000E34  0E80               	movlw	128
 13132  000E36  6E05               	movwf	i2___ftge@ff2+1,c
 13133  000E38  0E3F               	movlw	63
 13134  000E3A  6E06               	movwf	i2___ftge@ff2+2,c
 13135  000E3C  ECC4  F027         	call	i2___ftge	;wreg free
 13136  000E40  B0D8               	btfsc	status,0,c
 13137  000E42  D004               	goto	i2l6424
 13138                           
 13139                           ;doprnt.c: 849: exp--;
 13140  000E44  0663               	decf	i2printf@exp,f,c
 13141  000E46  A0D8               	btfss	status,0,c
 13142  000E48  0664               	decf	i2printf@exp+1,f,c
 13143  000E4A  D012               	goto	i2l6428
 13144  000E4C                     i2l6424:
 13145                           
 13146                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13147  000E4C  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13148  000E50  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13149  000E54  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13150  000E58  0E00               	movlw	0
 13151  000E5A  6E04               	movwf	i2___ftge@ff2,c
 13152  000E5C  0E20               	movlw	32
 13153  000E5E  6E05               	movwf	i2___ftge@ff2+1,c
 13154  000E60  0E41               	movlw	65
 13155  000E62  6E06               	movwf	i2___ftge@ff2+2,c
 13156  000E64  ECC4  F027         	call	i2___ftge	;wreg free
 13157  000E68  A0D8               	btfss	status,0,c
 13158  000E6A  D002               	goto	i2l6428
 13159                           
 13160                           ;doprnt.c: 851: exp++;
 13161  000E6C  4A63               	infsnz	i2printf@exp,f,c
 13162  000E6E  2A64               	incf	i2printf@exp+1,f,c
 13163  000E70                     i2l6428:
 13164                           
 13165                           ;doprnt.c: 852: }
 13166                           ;doprnt.c: 1112: if(prec <= 12)
 13167  000E70  BE5C               	btfsc	i2printf@prec+1,7,c
 13168  000E72  D006               	goto	i2l6430
 13169  000E74  505C               	movf	i2printf@prec+1,w,c
 13170  000E76  E11B               	bnz	i2l6432
 13171  000E78  0E0D               	movlw	13
 13172  000E7A  5C5B               	subwf	i2printf@prec,w,c
 13173  000E7C  B0D8               	btfsc	status,0,c
 13174  000E7E  D017               	goto	i2l6432
 13175  000E80                     i2l6430:
 13176                           
 13177                           ;doprnt.c: 1113: fval += fround(prec);
 13178  000E80  C06B  F02E         	movff	i2printf@fval,i2___ftadd@f1
 13179  000E84  C06C  F02F         	movff	i2printf@fval+1,i2___ftadd@f1+1
 13180  000E88  C06D  F030         	movff	i2printf@fval+2,i2___ftadd@f1+2
 13181  000E8C  505B               	movf	i2printf@prec,w,c
 13182  000E8E  ECEC  F015         	call	i2_fround
 13183  000E92  C024  F031         	movff	?i2_fround,i2___ftadd@f2
 13184  000E96  C025  F032         	movff	?i2_fround+1,i2___ftadd@f2+1
 13185  000E9A  C026  F033         	movff	?i2_fround+2,i2___ftadd@f2+2
 13186  000E9E  EC03  F018         	call	i2___ftadd	;wreg free
 13187  000EA2  C02E  F06B         	movff	?i2___ftadd,i2printf@fval
 13188  000EA6  C02F  F06C         	movff	?i2___ftadd+1,i2printf@fval+1
 13189  000EAA  C030  F06D         	movff	?i2___ftadd+2,i2printf@fval+2
 13190  000EAE                     i2l6432:
 13191                           
 13192                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13193  000EAE  BE64               	btfsc	i2printf@exp+1,7,c
 13194  000EB0  D006               	goto	i2l6434
 13195  000EB2  5064               	movf	i2printf@exp+1,w,c
 13196  000EB4  E11E               	bnz	i2l6440
 13197  000EB6  0E0A               	movlw	10
 13198  000EB8  5C63               	subwf	i2printf@exp,w,c
 13199  000EBA  B0D8               	btfsc	status,0,c
 13200  000EBC  D01A               	goto	i2l6440
 13201  000EBE                     i2l6434:
 13202  000EBE  506B               	movf	i2printf@fval,w,c
 13203  000EC0  106C               	iorwf	i2printf@fval+1,w,c
 13204  000EC2  106D               	iorwf	i2printf@fval+2,w,c
 13205  000EC4  B4D8               	btfsc	status,2,c
 13206  000EC6  D051               	goto	i2l6454
 13207  000EC8  C06B  F03A         	movff	i2printf@fval,i2___fttol@f1
 13208  000ECC  C06C  F03B         	movff	i2printf@fval+1,i2___fttol@f1+1
 13209  000ED0  C06D  F03C         	movff	i2printf@fval+2,i2___fttol@f1+2
 13210  000ED4  EC38  F022         	call	i2___fttol	;wreg free
 13211  000ED8  503A               	movf	?i2___fttol,w,c
 13212  000EDA  103B               	iorwf	?i2___fttol+1,w,c
 13213  000EDC  103C               	iorwf	?i2___fttol+2,w,c
 13214  000EDE  103D               	iorwf	?i2___fttol+3,w,c
 13215  000EE0  B4D8               	btfsc	status,2,c
 13216  000EE2  BE64               	btfsc	i2printf@exp+1,7,c
 13217  000EE4  D042               	goto	i2l6454
 13218  000EE6  5064               	movf	i2printf@exp+1,w,c
 13219  000EE8  E104               	bnz	i2l6440
 13220  000EEA  0E02               	movlw	2
 13221  000EEC  5C63               	subwf	i2printf@exp,w,c
 13222  000EEE  A0D8               	btfss	status,0,c
 13223  000EF0  D03C               	goto	i2l6454
 13224  000EF2                     i2l6440:
 13225                           
 13226                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13227  000EF2  C05D  F001         	movff	i2printf@tmpval,i2___ftge@ff1
 13228  000EF6  C05E  F002         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 13229  000EFA  C05F  F003         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 13230  000EFE  0E70               	movlw	112
 13231  000F00  6E04               	movwf	i2___ftge@ff2,c
 13232  000F02  0E89               	movlw	137
 13233  000F04  6E05               	movwf	i2___ftge@ff2+1,c
 13234  000F06  0E40               	movlw	64
 13235  000F08  6E06               	movwf	i2___ftge@ff2+2,c
 13236  000F0A  ECC4  F027         	call	i2___ftge	;wreg free
 13237  000F0E  B0D8               	btfsc	status,0,c
 13238  000F10  D002               	goto	i2l6444
 13239                           
 13240                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13241  000F12  0EF7               	movlw	247
 13242  000F14  D001               	goto	L25
 13243  000F16                     i2l6444:
 13244                           
 13245                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13246  000F16  0EF8               	movlw	248
 13247  000F18                     L25:
 13248  000F18  2663               	addwf	i2printf@exp,f,c
 13249  000F1A  0EFF               	movlw	255
 13250  000F1C  2264               	addwfc	i2printf@exp+1,f,c
 13251                           
 13252                           ;doprnt.c: 1124: }
 13253                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13254  000F1E  5063               	movf	i2printf@exp,w,c
 13255  000F20  EC6A  F011         	call	i2_scale
 13256  000F24  C024  F05D         	movff	?i2_scale,i2printf@tmpval
 13257  000F28  C025  F05E         	movff	?i2_scale+1,i2printf@tmpval+1
 13258  000F2C  C026  F05F         	movff	?i2_scale+2,i2printf@tmpval+2
 13259                           
 13260                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13261  000F30  C06B  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 13262  000F34  C06C  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 13263  000F38  C06D  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 13264  000F3C  C05D  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 13265  000F40  C05E  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 13266  000F44  C05F  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 13267  000F48  ECF3  F01D         	call	i2__tdiv_to_l_	;wreg free
 13268  000F4C  C001  F065         	movff	?i2__tdiv_to_l_,i2printf@val
 13269  000F50  C002  F066         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 13270  000F54  C003  F067         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 13271  000F58  C004  F068         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 13272                           
 13273                           ;doprnt.c: 1129: fval = 0.0;
 13274  000F5C  0E00               	movlw	0
 13275  000F5E  6E6B               	movwf	i2printf@fval,c
 13276  000F60  0E00               	movlw	0
 13277  000F62  6E6C               	movwf	i2printf@fval+1,c
 13278  000F64  0E00               	movlw	0
 13279  000F66  6E6D               	movwf	i2printf@fval+2,c
 13280                           
 13281                           ;doprnt.c: 1130: } else {
 13282  000F68  D032               	goto	i2l6458
 13283  000F6A                     i2l6454:
 13284                           
 13285                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13286  000F6A  C06B  F03A         	movff	i2printf@fval,i2___fttol@f1
 13287  000F6E  C06C  F03B         	movff	i2printf@fval+1,i2___fttol@f1+1
 13288  000F72  C06D  F03C         	movff	i2printf@fval+2,i2___fttol@f1+2
 13289  000F76  EC38  F022         	call	i2___fttol	;wreg free
 13290  000F7A  C03A  F065         	movff	?i2___fttol,i2printf@val
 13291  000F7E  C03B  F066         	movff	?i2___fttol+1,i2printf@val+1
 13292  000F82  C03C  F067         	movff	?i2___fttol+2,i2printf@val+2
 13293  000F86  C03D  F068         	movff	?i2___fttol+3,i2printf@val+3
 13294                           
 13295                           ;doprnt.c: 1132: fval -= (double)val;
 13296  000F8A  C06B  F03A         	movff	i2printf@fval,i2___ftsub@f1
 13297  000F8E  C06C  F03B         	movff	i2printf@fval+1,i2___ftsub@f1+1
 13298  000F92  C06D  F03C         	movff	i2printf@fval+2,i2___ftsub@f1+2
 13299  000F96  C065  F009         	movff	i2printf@val,i2___lltoft@c
 13300  000F9A  C066  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 13301  000F9E  C067  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 13302  000FA2  C068  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 13303  000FA6  EC50  F02A         	call	i2___lltoft	;wreg free
 13304  000FAA  C009  F03D         	movff	?i2___lltoft,i2___ftsub@f2
 13305  000FAE  C00A  F03E         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 13306  000FB2  C00B  F03F         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 13307  000FB6  EC39  F02B         	call	i2___ftsub	;wreg free
 13308  000FBA  C03A  F06B         	movff	?i2___ftsub,i2printf@fval
 13309  000FBE  C03B  F06C         	movff	?i2___ftsub+1,i2printf@fval+1
 13310  000FC2  C03C  F06D         	movff	?i2___ftsub+2,i2printf@fval+2
 13311                           
 13312                           ;doprnt.c: 1133: exp = 0;
 13313  000FC6  0E00               	movlw	0
 13314  000FC8  6E64               	movwf	i2printf@exp+1,c
 13315  000FCA  0E00               	movlw	0
 13316  000FCC  6E63               	movwf	i2printf@exp,c
 13317  000FCE                     i2l6458:
 13318                           
 13319                           ;doprnt.c: 1134: }
 13320                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13321  000FCE  0E01               	movlw	1
 13322  000FD0  6E6E               	movwf	i2printf@c,c
 13323  000FD2                     i2l6460:
 13324  000FD2  0E0A               	movlw	10
 13325  000FD4  186E               	xorwf	i2printf@c,w,c
 13326  000FD6  B4D8               	btfsc	status,2,c
 13327  000FD8  D018               	goto	i2l6472
 13328                           
 13329                           ;doprnt.c: 1137: if(val < dpowers[c])
 13330  000FDA  506E               	movf	i2printf@c,w,c
 13331  000FDC  0D04               	mullw	4
 13332  000FDE  0EB7               	movlw	low _dpowers
 13333  000FE0  24F3               	addwf	prodl,w,c
 13334  000FE2  6EF6               	movwf	tblptrl,c
 13335  000FE4  0EFD               	movlw	high _dpowers
 13336  000FE6  20F4               	addwfc	prodh,w,c
 13337  000FE8  6EF7               	movwf	tblptrh,c
 13338  000FEA                     	if	0	;There are less than 3 active tblptr bytes
 13339  000FEA                     	endif
 13340  000FEA  0009               	tblrd		*+
 13341  000FEC  50F5               	movf	tablat,w,c
 13342  000FEE  5C65               	subwf	i2printf@val,w,c
 13343  000FF0  0009               	tblrd		*+
 13344  000FF2  50F5               	movf	tablat,w,c
 13345  000FF4  5866               	subwfb	i2printf@val+1,w,c
 13346  000FF6  0009               	tblrd		*+
 13347  000FF8  50F5               	movf	tablat,w,c
 13348  000FFA  5867               	subwfb	i2printf@val+2,w,c
 13349  000FFC  0009               	tblrd		*+
 13350  000FFE  50F5               	movf	tablat,w,c
 13351  001000  5868               	subwfb	i2printf@val+3,w,c
 13352  001002  A0D8               	btfss	status,0,c
 13353  001004  D002               	goto	i2l6472
 13354                           
 13355                           ;doprnt.c: 1138: break;
 13356  001006  2A6E               	incf	i2printf@c,f,c
 13357  001008  D7E4               	goto	i2l6460
 13358  00100A                     i2l6472:
 13359                           
 13360                           ;doprnt.c: 1142: width -= prec + c + exp;
 13361  00100A  C06E  F04F         	movff	i2printf@c,??i2_printf
 13362  00100E  6A50               	clrf	(??i2_printf+1)& (0+255),c
 13363  001010  BE4F               	btfsc	??i2_printf& (0+255),7,c
 13364  001012  0650               	decf	(??i2_printf+1)& (0+255),f,c
 13365  001014  505B               	movf	i2printf@prec,w,c
 13366  001016  264F               	addwf	??i2_printf,f,c
 13367  001018  505C               	movf	i2printf@prec+1,w,c
 13368  00101A  2250               	addwfc	??i2_printf+1,f,c
 13369  00101C  5063               	movf	i2printf@exp,w,c
 13370  00101E  264F               	addwf	??i2_printf,f,c
 13371  001020  5064               	movf	i2printf@exp+1,w,c
 13372  001022  2250               	addwfc	??i2_printf+1,f,c
 13373  001024  504F               	movf	??i2_printf,w,c
 13374  001026  5E61               	subwf	i2printf@width,f,c
 13375  001028  5050               	movf	??i2_printf+1,w,c
 13376  00102A  5A62               	subwfb	i2printf@width+1,f,c
 13377                           
 13378                           ;doprnt.c: 1143: if(
 13379                           ;doprnt.c: 1147: prec)
 13380  00102C  505B               	movf	i2printf@prec,w,c
 13381  00102E  105C               	iorwf	i2printf@prec+1,w,c
 13382  001030  B4D8               	btfsc	status,2,c
 13383  001032  D003               	goto	i2l6476
 13384                           
 13385                           ;doprnt.c: 1148: width--;
 13386  001034  0661               	decf	i2printf@width,f,c
 13387  001036  A0D8               	btfss	status,0,c
 13388  001038  0662               	decf	i2printf@width+1,f,c
 13389  00103A                     i2l6476:
 13390                           
 13391                           ;doprnt.c: 1149: if(flag & 0x03)
 13392  00103A  0E03               	movlw	3
 13393  00103C  1469               	andwf	i2printf@flag,w,c
 13394  00103E  6E4F               	movwf	??i2_printf& (0+255),c
 13395  001040  0E00               	movlw	0
 13396  001042  146A               	andwf	i2printf@flag+1,w,c
 13397  001044  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13398  001046  504F               	movf	??i2_printf,w,c
 13399  001048  1050               	iorwf	??i2_printf+1,w,c
 13400  00104A  B4D8               	btfsc	status,2,c
 13401  00104C  D003               	goto	i2l6480
 13402                           
 13403                           ;doprnt.c: 1150: width--;
 13404  00104E  0661               	decf	i2printf@width,f,c
 13405  001050  A0D8               	btfss	status,0,c
 13406  001052  0662               	decf	i2printf@width+1,f,c
 13407  001054                     i2l6480:
 13408                           
 13409                           ;doprnt.c: 1153: if(flag & 0x04) {
 13410  001054  A469               	btfss	i2printf@flag,2,c
 13411  001056  D022               	goto	i2l6496
 13412                           
 13413                           ;doprnt.c: 1157: if(flag & 0x03)
 13414  001058  0E03               	movlw	3
 13415  00105A  1469               	andwf	i2printf@flag,w,c
 13416  00105C  6E4F               	movwf	??i2_printf& (0+255),c
 13417  00105E  0E00               	movlw	0
 13418  001060  146A               	andwf	i2printf@flag+1,w,c
 13419  001062  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13420  001064  504F               	movf	??i2_printf,w,c
 13421  001066  1050               	iorwf	??i2_printf+1,w,c
 13422  001068  B4D8               	btfsc	status,2,c
 13423  00106A  D00A               	goto	i2l6490
 13424                           
 13425                           ;doprnt.c: 1159: (putch('-') );
 13426  00106C  0E2D               	movlw	45
 13427  00106E  EC93  F02C         	call	i2_putch
 13428                           
 13429                           ;doprnt.c: 1168: while(width > 0) {
 13430  001072  D006               	goto	i2l6490
 13431  001074                     i2l6486:
 13432                           
 13433                           ;doprnt.c: 1169: (putch('0') );
 13434  001074  0E30               	movlw	48
 13435  001076  EC93  F02C         	call	i2_putch
 13436                           
 13437                           ;doprnt.c: 1170: width--;
 13438  00107A  0661               	decf	i2printf@width,f,c
 13439  00107C  A0D8               	btfss	status,0,c
 13440  00107E  0662               	decf	i2printf@width+1,f,c
 13441  001080                     i2l6490:
 13442  001080  BE62               	btfsc	i2printf@width+1,7,c
 13443  001082  D065               	goto	i2l6508
 13444  001084  5062               	movf	i2printf@width+1,w,c
 13445  001086  E1F6               	bnz	i2l6486
 13446  001088  0461               	decf	i2printf@width,w,c
 13447  00108A  A0D8               	btfss	status,0,c
 13448  00108C  D060               	goto	i2l6508
 13449  00108E  D7F2               	goto	i2l6486
 13450  001090                     i2l6492:
 13451                           
 13452                           ;doprnt.c: 1181: (putch(' ') );
 13453  001090  0E20               	movlw	32
 13454  001092  EC93  F02C         	call	i2_putch
 13455                           
 13456                           ;doprnt.c: 1182: width--;
 13457  001096  0661               	decf	i2printf@width,f,c
 13458  001098  A0D8               	btfss	status,0,c
 13459  00109A  0662               	decf	i2printf@width+1,f,c
 13460  00109C                     i2l6496:
 13461  00109C  BE62               	btfsc	i2printf@width+1,7,c
 13462  00109E  D005               	goto	i2l6498
 13463  0010A0  5062               	movf	i2printf@width+1,w,c
 13464  0010A2  E1F6               	bnz	i2l6492
 13465  0010A4  0461               	decf	i2printf@width,w,c
 13466  0010A6  B0D8               	btfsc	status,0,c
 13467  0010A8  D7F3               	goto	i2l6492
 13468  0010AA                     i2l6498:
 13469                           
 13470                           ;doprnt.c: 1183: }
 13471                           ;doprnt.c: 1188: if(flag & 0x03)
 13472  0010AA  0E03               	movlw	3
 13473  0010AC  1469               	andwf	i2printf@flag,w,c
 13474  0010AE  6E4F               	movwf	??i2_printf& (0+255),c
 13475  0010B0  0E00               	movlw	0
 13476  0010B2  146A               	andwf	i2printf@flag+1,w,c
 13477  0010B4  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13478  0010B6  504F               	movf	??i2_printf,w,c
 13479  0010B8  1050               	iorwf	??i2_printf+1,w,c
 13480  0010BA  B4D8               	btfsc	status,2,c
 13481  0010BC  D048               	goto	i2l6508
 13482                           
 13483                           ;doprnt.c: 1190: (putch('-') );
 13484  0010BE  0E2D               	movlw	45
 13485  0010C0  EC93  F02C         	call	i2_putch
 13486                           
 13487                           ;doprnt.c: 1195: }
 13488                           ;doprnt.c: 1196: while(c--) {
 13489  0010C4  D044               	goto	i2l6508
 13490  0010C6                     i2l6502:
 13491                           
 13492                           ;doprnt.c: 1200: {
 13493                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13494  0010C6  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 13495  0010CA  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13496  0010CE  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13497  0010D2  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13498  0010D6  506E               	movf	i2printf@c,w,c
 13499  0010D8  0D04               	mullw	4
 13500  0010DA  0EB7               	movlw	low _dpowers
 13501  0010DC  24F3               	addwf	prodl,w,c
 13502  0010DE  6EF6               	movwf	tblptrl,c
 13503  0010E0  0EFD               	movlw	high _dpowers
 13504  0010E2  20F4               	addwfc	prodh,w,c
 13505  0010E4  6EF7               	movwf	tblptrh,c
 13506  0010E6                     	if	0	;There are less than 3 active tblptr bytes
 13507  0010E6                     	endif
 13508  0010E6  0009               	tblrd		*+
 13509  0010E8  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13510  0010EC  0009               	tblrd		*+
 13511  0010EE  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13512  0010F2  0009               	tblrd		*+
 13513  0010F4  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13514  0010F8  000A               	tblrd		*-
 13515  0010FA  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13516  0010FE  EC96  F028         	call	i2___lldiv	;wreg free
 13517  001102  C001  F05D         	movff	?i2___lldiv,i2printf@tmpval
 13518  001106  C002  F05E         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13519  00110A  C003  F05F         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13520  00110E  C004  F060         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13521                           
 13522                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13523  001112  C05D  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13524  001116  C05E  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13525  00111A  C05F  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13526  00111E  C060  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13527  001122  0E0A               	movlw	10
 13528  001124  6E12               	movwf	i2___llmod@divisor,c
 13529  001126  0E00               	movlw	0
 13530  001128  6E13               	movwf	i2___llmod@divisor+1,c
 13531  00112A  0E00               	movlw	0
 13532  00112C  6E14               	movwf	i2___llmod@divisor+2,c
 13533  00112E  0E00               	movlw	0
 13534  001130  6E15               	movwf	i2___llmod@divisor+3,c
 13535  001132  ECBD  F029         	call	i2___llmod	;wreg free
 13536  001136  C00E  F05D         	movff	?i2___llmod,i2printf@tmpval
 13537  00113A  C00F  F05E         	movff	?i2___llmod+1,i2printf@tmpval+1
 13538  00113E  C010  F05F         	movff	?i2___llmod+2,i2printf@tmpval+2
 13539  001142  C011  F060         	movff	?i2___llmod+3,i2printf@tmpval+3
 13540                           
 13541                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13542  001146  505D               	movf	i2printf@tmpval,w,c
 13543  001148  0F30               	addlw	48
 13544  00114A  EC93  F02C         	call	i2_putch
 13545  00114E                     i2l6508:
 13546  00114E  066E               	decf	i2printf@c,f,c
 13547  001150  286E               	incf	i2printf@c,w,c
 13548  001152  B4D8               	btfsc	status,2,c
 13549  001154  D007               	goto	i2l6514
 13550  001156  D7B7               	goto	i2l6502
 13551  001158                     i2l6510:
 13552                           
 13553                           ;doprnt.c: 1208: (putch('0') );
 13554  001158  0E30               	movlw	48
 13555  00115A  EC93  F02C         	call	i2_putch
 13556                           
 13557                           ;doprnt.c: 1209: exp--;
 13558  00115E  0663               	decf	i2printf@exp,f,c
 13559  001160  A0D8               	btfss	status,0,c
 13560  001162  0664               	decf	i2printf@exp+1,f,c
 13561  001164                     i2l6514:
 13562  001164  BE64               	btfsc	i2printf@exp+1,7,c
 13563  001166  D005               	goto	i2l6516
 13564  001168  5064               	movf	i2printf@exp+1,w,c
 13565  00116A  E1F6               	bnz	i2l6510
 13566  00116C  0463               	decf	i2printf@exp,w,c
 13567  00116E  B0D8               	btfsc	status,0,c
 13568  001170  D7F3               	goto	i2l6510
 13569  001172                     i2l6516:
 13570                           
 13571                           ;doprnt.c: 1210: }
 13572                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13573  001172  BE5C               	btfsc	i2printf@prec+1,7,c
 13574  001174  D009               	goto	i2l557
 13575  001176  505C               	movf	i2printf@prec+1,w,c
 13576  001178  E104               	bnz	i2u723_40
 13577  00117A  0E09               	movlw	9
 13578  00117C  5C5B               	subwf	i2printf@prec,w,c
 13579  00117E  A0D8               	btfss	status,0,c
 13580  001180  D003               	goto	i2l557
 13581  001182                     i2u723_40:
 13582                           
 13583                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13584  001182  0E08               	movlw	8
 13585  001184  6E6E               	movwf	i2printf@c,c
 13586  001186  D002               	goto	i2l6520
 13587  001188                     i2l557:
 13588                           
 13589                           ;doprnt.c: 1213: else
 13590                           ;doprnt.c: 1214: c = prec;
 13591  001188  C05B  F06E         	movff	i2printf@prec,i2printf@c
 13592  00118C                     i2l6520:
 13593                           
 13594                           ;doprnt.c: 1215: prec -= c;
 13595  00118C  506E               	movf	i2printf@c,w,c
 13596  00118E  5E5B               	subwf	i2printf@prec,f,c
 13597  001190  0E00               	movlw	0
 13598  001192  BE6E               	btfsc	i2printf@c,7,c
 13599  001194  0EFF               	movlw	255
 13600  001196  5A5C               	subwfb	i2printf@prec+1,f,c
 13601                           
 13602                           ;doprnt.c: 1219: if(c)
 13603  001198  506E               	movf	i2printf@c,w,c
 13604  00119A  B4D8               	btfsc	status,2,c
 13605  00119C  D003               	goto	i2l6526
 13606                           
 13607                           ;doprnt.c: 1221: (putch('.') );
 13608  00119E  0E2E               	movlw	46
 13609  0011A0  EC93  F02C         	call	i2_putch
 13610  0011A4                     i2l6526:
 13611                           
 13612                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13613  0011A4  506E               	movf	i2printf@c,w,c
 13614  0011A6  EC6A  F011         	call	i2_scale
 13615  0011AA  C024  F055         	movff	?i2_scale,i2_printf$1536
 13616  0011AE  C025  F056         	movff	?i2_scale+1,i2_printf$1536+1
 13617  0011B2  C026  F057         	movff	?i2_scale+2,i2_printf$1536+2
 13618                           
 13619                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13620  0011B6  C06B  F018         	movff	i2printf@fval,i2___ftmul@f2
 13621  0011BA  C06C  F019         	movff	i2printf@fval+1,i2___ftmul@f2+1
 13622  0011BE  C06D  F01A         	movff	i2printf@fval+2,i2___ftmul@f2+2
 13623  0011C2  C055  F015         	movff	i2_printf$1536,i2___ftmul@f1
 13624  0011C6  C056  F016         	movff	i2_printf$1536+1,i2___ftmul@f1+1
 13625  0011CA  C057  F017         	movff	i2_printf$1536+2,i2___ftmul@f1+2
 13626  0011CE  ECB2  F022         	call	i2___ftmul	;wreg free
 13627  0011D2  C015  F03A         	movff	?i2___ftmul,i2___fttol@f1
 13628  0011D6  C016  F03B         	movff	?i2___ftmul+1,i2___fttol@f1+1
 13629  0011DA  C017  F03C         	movff	?i2___ftmul+2,i2___fttol@f1+2
 13630  0011DE  EC38  F022         	call	i2___fttol	;wreg free
 13631  0011E2  C03A  F065         	movff	?i2___fttol,i2printf@val
 13632  0011E6  C03B  F066         	movff	?i2___fttol+1,i2printf@val+1
 13633  0011EA  C03C  F067         	movff	?i2___fttol+2,i2printf@val+2
 13634  0011EE  C03D  F068         	movff	?i2___fttol+3,i2printf@val+3
 13635                           
 13636                           ;doprnt.c: 1228: while(c--) {
 13637  0011F2  D06A               	goto	i2l6536
 13638  0011F4                     i2l6530:
 13639                           
 13640                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13641  0011F4  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 13642  0011F8  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 13643  0011FC  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 13644  001200  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 13645  001204  506E               	movf	i2printf@c,w,c
 13646  001206  0D04               	mullw	4
 13647  001208  0EB7               	movlw	low _dpowers
 13648  00120A  24F3               	addwf	prodl,w,c
 13649  00120C  6EF6               	movwf	tblptrl,c
 13650  00120E  0EFD               	movlw	high _dpowers
 13651  001210  20F4               	addwfc	prodh,w,c
 13652  001212  6EF7               	movwf	tblptrh,c
 13653  001214                     	if	0	;There are less than 3 active tblptr bytes
 13654  001214                     	endif
 13655  001214  0009               	tblrd		*+
 13656  001216  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 13657  00121A  0009               	tblrd		*+
 13658  00121C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 13659  001220  0009               	tblrd		*+
 13660  001222  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 13661  001226  000A               	tblrd		*-
 13662  001228  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 13663  00122C  EC96  F028         	call	i2___lldiv	;wreg free
 13664  001230  C001  F05D         	movff	?i2___lldiv,i2printf@tmpval
 13665  001234  C002  F05E         	movff	?i2___lldiv+1,i2printf@tmpval+1
 13666  001238  C003  F05F         	movff	?i2___lldiv+2,i2printf@tmpval+2
 13667  00123C  C004  F060         	movff	?i2___lldiv+3,i2printf@tmpval+3
 13668                           
 13669                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13670  001240  C05D  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 13671  001244  C05E  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 13672  001248  C05F  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 13673  00124C  C060  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 13674  001250  0E0A               	movlw	10
 13675  001252  6E12               	movwf	i2___llmod@divisor,c
 13676  001254  0E00               	movlw	0
 13677  001256  6E13               	movwf	i2___llmod@divisor+1,c
 13678  001258  0E00               	movlw	0
 13679  00125A  6E14               	movwf	i2___llmod@divisor+2,c
 13680  00125C  0E00               	movlw	0
 13681  00125E  6E15               	movwf	i2___llmod@divisor+3,c
 13682  001260  ECBD  F029         	call	i2___llmod	;wreg free
 13683  001264  C00E  F05D         	movff	?i2___llmod,i2printf@tmpval
 13684  001268  C00F  F05E         	movff	?i2___llmod+1,i2printf@tmpval+1
 13685  00126C  C010  F05F         	movff	?i2___llmod+2,i2printf@tmpval+2
 13686  001270  C011  F060         	movff	?i2___llmod+3,i2printf@tmpval+3
 13687                           
 13688                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13689  001274  505D               	movf	i2printf@tmpval,w,c
 13690  001276  0F30               	addlw	48
 13691  001278  EC93  F02C         	call	i2_putch
 13692                           
 13693                           ;doprnt.c: 1232: val %= dpowers[c];
 13694  00127C  C065  F00E         	movff	i2printf@val,i2___llmod@dividend
 13695  001280  C066  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 13696  001284  C067  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 13697  001288  C068  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 13698  00128C  506E               	movf	i2printf@c,w,c
 13699  00128E  0D04               	mullw	4
 13700  001290  0EB7               	movlw	low _dpowers
 13701  001292  24F3               	addwf	prodl,w,c
 13702  001294  6EF6               	movwf	tblptrl,c
 13703  001296  0EFD               	movlw	high _dpowers
 13704  001298  20F4               	addwfc	prodh,w,c
 13705  00129A  6EF7               	movwf	tblptrh,c
 13706  00129C                     	if	0	;There are less than 3 active tblptr bytes
 13707  00129C                     	endif
 13708  00129C  0009               	tblrd		*+
 13709  00129E  CFF5 F012          	movff	tablat,i2___llmod@divisor
 13710  0012A2  0009               	tblrd		*+
 13711  0012A4  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 13712  0012A8  0009               	tblrd		*+
 13713  0012AA  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 13714  0012AE  000A               	tblrd		*-
 13715  0012B0  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 13716  0012B4  ECBD  F029         	call	i2___llmod	;wreg free
 13717  0012B8  C00E  F065         	movff	?i2___llmod,i2printf@val
 13718  0012BC  C00F  F066         	movff	?i2___llmod+1,i2printf@val+1
 13719  0012C0  C010  F067         	movff	?i2___llmod+2,i2printf@val+2
 13720  0012C4  C011  F068         	movff	?i2___llmod+3,i2printf@val+3
 13721  0012C8                     i2l6536:
 13722  0012C8  066E               	decf	i2printf@c,f,c
 13723  0012CA  286E               	incf	i2printf@c,w,c
 13724  0012CC  B4D8               	btfsc	status,2,c
 13725  0012CE  D007               	goto	i2l6542
 13726  0012D0  D791               	goto	i2l6530
 13727  0012D2                     i2l6538:
 13728                           
 13729                           ;doprnt.c: 1236: (putch('0') );
 13730  0012D2  0E30               	movlw	48
 13731  0012D4  EC93  F02C         	call	i2_putch
 13732                           
 13733                           ;doprnt.c: 1237: prec--;
 13734  0012D8  065B               	decf	i2printf@prec,f,c
 13735  0012DA  A0D8               	btfss	status,0,c
 13736  0012DC  065C               	decf	i2printf@prec+1,f,c
 13737  0012DE                     i2l6542:
 13738  0012DE  505B               	movf	i2printf@prec,w,c
 13739  0012E0  105C               	iorwf	i2printf@prec+1,w,c
 13740  0012E2  B4D8               	btfsc	status,2,c
 13741  0012E4  D16C               	goto	i2l6642
 13742  0012E6  D7F5               	goto	i2l6538
 13743  0012E8                     i2l6544:
 13744                           
 13745                           ;doprnt.c: 1246: }
 13746                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 13747  0012E8  0EC0               	movlw	192
 13748  0012EA  1469               	andwf	i2printf@flag,w,c
 13749  0012EC  6E4F               	movwf	??i2_printf& (0+255),c
 13750  0012EE  0E00               	movlw	0
 13751  0012F0  146A               	andwf	i2printf@flag+1,w,c
 13752  0012F2  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13753  0012F4  504F               	movf	??i2_printf,w,c
 13754  0012F6  1050               	iorwf	??i2_printf+1,w,c
 13755  0012F8  A4D8               	btfss	status,2,c
 13756  0012FA  D01E               	goto	i2l6556
 13757                           
 13758                           ;doprnt.c: 1253: {
 13759                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13760  0012FC  C059  FFD9         	movff	i2printf@ap,fsr2l
 13761  001300  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13762  001304  CFDE F065          	movff	postinc2,i2printf@val
 13763  001308  CFDD F066          	movff	postdec2,i2printf@val+1
 13764  00130C  0E00               	movlw	0
 13765  00130E  BE66               	btfsc	i2printf@val+1,7,c
 13766  001310  0EFF               	movlw	-1
 13767  001312  6E67               	movwf	i2printf@val+2,c
 13768  001314  6E68               	movwf	i2printf@val+3,c
 13769  001316  0E02               	movlw	2
 13770  001318  2659               	addwf	i2printf@ap,f,c
 13771  00131A  0E00               	movlw	0
 13772  00131C  225A               	addwfc	i2printf@ap+1,f,c
 13773                           
 13774                           ;doprnt.c: 1261: if((long)val < 0) {
 13775  00131E  AE68               	btfss	i2printf@val+3,7,c
 13776  001320  D05A               	goto	i2l6590
 13777                           
 13778                           ;doprnt.c: 1262: flag |= 0x03;
 13779  001322  0E03               	movlw	3
 13780  001324  1269               	iorwf	i2printf@flag,f,c
 13781                           
 13782                           ;doprnt.c: 1263: val = -val;
 13783  001326  1E68               	comf	i2printf@val+3,f,c
 13784  001328  1E67               	comf	i2printf@val+2,f,c
 13785  00132A  1E66               	comf	i2printf@val+1,f,c
 13786  00132C  6C65               	negf	i2printf@val,c
 13787  00132E  0E00               	movlw	0
 13788  001330  2266               	addwfc	i2printf@val+1,f,c
 13789  001332  2267               	addwfc	i2printf@val+2,f,c
 13790  001334  2268               	addwfc	i2printf@val+3,f,c
 13791                           
 13792                           ;doprnt.c: 1264: }
 13793                           ;doprnt.c: 1266: }
 13794  001336  D04F               	goto	i2l6590
 13795  001338                     i2l6556:
 13796                           
 13797                           ;doprnt.c: 1268: else
 13798                           ;doprnt.c: 1273: {
 13799                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13800  001338  C059  FFD9         	movff	i2printf@ap,fsr2l
 13801  00133C  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 13802  001340  CFDE F04F          	movff	postinc2,??i2_printf
 13803  001344  CFDD F050          	movff	postdec2,??i2_printf+1
 13804  001348  C04F  F065         	movff	??i2_printf,i2printf@val
 13805  00134C  C050  F066         	movff	??i2_printf+1,i2printf@val+1
 13806  001350  6A67               	clrf	i2printf@val+2,c
 13807  001352  6A68               	clrf	i2printf@val+3,c
 13808  001354  0E02               	movlw	2
 13809  001356  2659               	addwf	i2printf@ap,f,c
 13810  001358  0E00               	movlw	0
 13811  00135A  225A               	addwfc	i2printf@ap+1,f,c
 13812                           
 13813                           ;doprnt.c: 1287: }
 13814                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 13815  00135C  D03C               	goto	i2l6590
 13816  00135E                     i2l6560:
 13817                           
 13818                           ;doprnt.c: 1302: case 0xC0:
 13819                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13820  00135E  0E01               	movlw	1
 13821  001360  6E6E               	movwf	i2printf@c,c
 13822  001362                     i2l6562:
 13823  001362  0E0A               	movlw	10
 13824  001364  186E               	xorwf	i2printf@c,w,c
 13825  001366  B4D8               	btfsc	status,2,c
 13826  001368  D041               	goto	i2l6592
 13827                           
 13828                           ;doprnt.c: 1306: if(val < dpowers[c])
 13829  00136A  506E               	movf	i2printf@c,w,c
 13830  00136C  0D04               	mullw	4
 13831  00136E  0EB7               	movlw	low _dpowers
 13832  001370  24F3               	addwf	prodl,w,c
 13833  001372  6EF6               	movwf	tblptrl,c
 13834  001374  0EFD               	movlw	high _dpowers
 13835  001376  20F4               	addwfc	prodh,w,c
 13836  001378  6EF7               	movwf	tblptrh,c
 13837  00137A                     	if	0	;There are less than 3 active tblptr bytes
 13838  00137A                     	endif
 13839  00137A  0009               	tblrd		*+
 13840  00137C  50F5               	movf	tablat,w,c
 13841  00137E  5C65               	subwf	i2printf@val,w,c
 13842  001380  0009               	tblrd		*+
 13843  001382  50F5               	movf	tablat,w,c
 13844  001384  5866               	subwfb	i2printf@val+1,w,c
 13845  001386  0009               	tblrd		*+
 13846  001388  50F5               	movf	tablat,w,c
 13847  00138A  5867               	subwfb	i2printf@val+2,w,c
 13848  00138C  0009               	tblrd		*+
 13849  00138E  50F5               	movf	tablat,w,c
 13850  001390  5868               	subwfb	i2printf@val+3,w,c
 13851  001392  A0D8               	btfss	status,0,c
 13852  001394  D02B               	goto	i2l6592
 13853                           
 13854                           ;doprnt.c: 1307: break;
 13855  001396  2A6E               	incf	i2printf@c,f,c
 13856  001398  D7E4               	goto	i2l6562
 13857  00139A                     i2l6574:
 13858                           
 13859                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13860  00139A  0E01               	movlw	1
 13861  00139C  6E6E               	movwf	i2printf@c,c
 13862  00139E                     i2l6576:
 13863  00139E  0E08               	movlw	8
 13864  0013A0  186E               	xorwf	i2printf@c,w,c
 13865  0013A2  B4D8               	btfsc	status,2,c
 13866  0013A4  D023               	goto	i2l6592
 13867                           
 13868                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13869  0013A6  506E               	movf	i2printf@c,w,c
 13870  0013A8  0D04               	mullw	4
 13871  0013AA  0E2D               	movlw	low _hexpowers
 13872  0013AC  24F3               	addwf	prodl,w,c
 13873  0013AE  6EF6               	movwf	tblptrl,c
 13874  0013B0  0EFE               	movlw	high _hexpowers
 13875  0013B2  20F4               	addwfc	prodh,w,c
 13876  0013B4  6EF7               	movwf	tblptrh,c
 13877  0013B6                     	if	0	;There are less than 3 active tblptr bytes
 13878  0013B6                     	endif
 13879  0013B6  0009               	tblrd		*+
 13880  0013B8  50F5               	movf	tablat,w,c
 13881  0013BA  5C65               	subwf	i2printf@val,w,c
 13882  0013BC  0009               	tblrd		*+
 13883  0013BE  50F5               	movf	tablat,w,c
 13884  0013C0  5866               	subwfb	i2printf@val+1,w,c
 13885  0013C2  0009               	tblrd		*+
 13886  0013C4  50F5               	movf	tablat,w,c
 13887  0013C6  5867               	subwfb	i2printf@val+2,w,c
 13888  0013C8  0009               	tblrd		*+
 13889  0013CA  50F5               	movf	tablat,w,c
 13890  0013CC  5868               	subwfb	i2printf@val+3,w,c
 13891  0013CE  A0D8               	btfss	status,0,c
 13892  0013D0  D00D               	goto	i2l6592
 13893                           
 13894                           ;doprnt.c: 1318: break;
 13895  0013D2  2A6E               	incf	i2printf@c,f,c
 13896  0013D4  D7E4               	goto	i2l6576
 13897  0013D6                     i2l6590:
 13898  0013D6  5069               	movf	i2printf@flag,w,c
 13899  0013D8  0BC0               	andlw	192
 13900                           
 13901                           ; Switch size 1, requested type "space"
 13902                           ; Number of cases is 3, Range of values is 0 to 192
 13903                           ; switch strategies available:
 13904                           ; Name         Instructions Cycles
 13905                           ; simple_byte           10     6 (average)
 13906                           ;	Chosen strategy is simple_byte
 13907  0013DA  0A00               	xorlw	0	; case 0
 13908  0013DC  B4D8               	btfsc	status,2,c
 13909  0013DE  D7BF               	goto	i2l6560
 13910  0013E0  0A80               	xorlw	128	; case 128
 13911  0013E2  B4D8               	btfsc	status,2,c
 13912  0013E4  D7DA               	goto	i2l6574
 13913  0013E6  0A40               	xorlw	64	; case 192
 13914  0013E8  B4D8               	btfsc	status,2,c
 13915  0013EA  D7B9               	goto	i2l6560
 13916  0013EC                     i2l6592:
 13917                           
 13918                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13919  0013EC  5061               	movf	i2printf@width,w,c
 13920  0013EE  1062               	iorwf	i2printf@width+1,w,c
 13921  0013F0  B4D8               	btfsc	status,2,c
 13922  0013F2  D00D               	goto	i2l6598
 13923  0013F4  0E03               	movlw	3
 13924  0013F6  1469               	andwf	i2printf@flag,w,c
 13925  0013F8  6E4F               	movwf	??i2_printf& (0+255),c
 13926  0013FA  0E00               	movlw	0
 13927  0013FC  146A               	andwf	i2printf@flag+1,w,c
 13928  0013FE  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13929  001400  504F               	movf	??i2_printf,w,c
 13930  001402  1050               	iorwf	??i2_printf+1,w,c
 13931  001404  B4D8               	btfsc	status,2,c
 13932  001406  D003               	goto	i2l6598
 13933                           
 13934                           ;doprnt.c: 1346: width--;
 13935  001408  0661               	decf	i2printf@width,f,c
 13936  00140A  A0D8               	btfss	status,0,c
 13937  00140C  0662               	decf	i2printf@width+1,f,c
 13938  00140E                     i2l6598:
 13939                           
 13940                           ;doprnt.c: 1381: if(width > c)
 13941  00140E  0E80               	movlw	128
 13942  001410  BE6E               	btfsc	i2printf@c,7,c
 13943  001412  0E7F               	movlw	127
 13944  001414  6E4F               	movwf	??i2_printf& (0+255),c
 13945  001416  5061               	movf	i2printf@width,w,c
 13946  001418  5C6E               	subwf	i2printf@c,w,c
 13947  00141A  5062               	movf	i2printf@width+1,w,c
 13948  00141C  0A80               	xorlw	128
 13949  00141E  584F               	subwfb	??i2_printf& (0+255),w,c
 13950  001420  B0D8               	btfsc	status,0,c
 13951  001422  D007               	goto	i2l6602
 13952                           
 13953                           ;doprnt.c: 1382: width -= c;
 13954  001424  506E               	movf	i2printf@c,w,c
 13955  001426  5E61               	subwf	i2printf@width,f,c
 13956  001428  0E00               	movlw	0
 13957  00142A  BE6E               	btfsc	i2printf@c,7,c
 13958  00142C  0EFF               	movlw	255
 13959  00142E  5A62               	subwfb	i2printf@width+1,f,c
 13960  001430  D004               	goto	i2l6604
 13961  001432                     i2l6602:
 13962                           
 13963                           ;doprnt.c: 1383: else
 13964                           ;doprnt.c: 1384: width = 0;
 13965  001432  0E00               	movlw	0
 13966  001434  6E62               	movwf	i2printf@width+1,c
 13967  001436  0E00               	movlw	0
 13968  001438  6E61               	movwf	i2printf@width,c
 13969  00143A                     i2l6604:
 13970                           
 13971                           ;doprnt.c: 1387: if(flag & 0x04) {
 13972  00143A  A469               	btfss	i2printf@flag,2,c
 13973  00143C  D018               	goto	i2l6616
 13974                           
 13975                           ;doprnt.c: 1392: if(flag & 0x03)
 13976  00143E  0E03               	movlw	3
 13977  001440  1469               	andwf	i2printf@flag,w,c
 13978  001442  6E4F               	movwf	??i2_printf& (0+255),c
 13979  001444  0E00               	movlw	0
 13980  001446  146A               	andwf	i2printf@flag+1,w,c
 13981  001448  6E50               	movwf	(??i2_printf+1)& (0+255),c
 13982  00144A  504F               	movf	??i2_printf,w,c
 13983  00144C  1050               	iorwf	??i2_printf+1,w,c
 13984  00144E  B4D8               	btfsc	status,2,c
 13985  001450  D003               	goto	i2l6610
 13986                           
 13987                           ;doprnt.c: 1393: (putch('-') );
 13988  001452  0E2D               	movlw	45
 13989  001454  EC93  F02C         	call	i2_putch
 13990  001458                     i2l6610:
 13991                           
 13992                           ;doprnt.c: 1415: if(width)
 13993  001458  5061               	movf	i2printf@width,w,c
 13994  00145A  1062               	iorwf	i2printf@width+1,w,c
 13995  00145C  B4D8               	btfsc	status,2,c
 13996  00145E  D022               	goto	i2l6626
 13997                           
 13998                           ;doprnt.c: 1417: (putch('0') );
 13999                           
 14000                           ;doprnt.c: 1416: do
 14001  001460  0E30               	movlw	48
 14002  001462  EC93  F02C         	call	i2_putch
 14003                           
 14004                           ;doprnt.c: 1418: while(--width);
 14005  001466  0661               	decf	i2printf@width,f,c
 14006  001468  A0D8               	btfss	status,0,c
 14007  00146A  0662               	decf	i2printf@width+1,f,c
 14008  00146C  D7F5               	goto	i2l6610
 14009  00146E                     i2l6616:
 14010                           
 14011                           ;doprnt.c: 1422: {
 14012                           ;doprnt.c: 1424: if(width
 14013                           ;doprnt.c: 1428: )
 14014  00146E  5061               	movf	i2printf@width,w,c
 14015  001470  1062               	iorwf	i2printf@width+1,w,c
 14016  001472  B4D8               	btfsc	status,2,c
 14017  001474  D00A               	goto	i2l6622
 14018  001476                     i2l6618:
 14019                           
 14020                           ;doprnt.c: 1430: (putch(' ') );
 14021  001476  0E20               	movlw	32
 14022  001478  EC93  F02C         	call	i2_putch
 14023                           
 14024                           ;doprnt.c: 1431: while(--width);
 14025  00147C  0661               	decf	i2printf@width,f,c
 14026  00147E  A0D8               	btfss	status,0,c
 14027  001480  0662               	decf	i2printf@width+1,f,c
 14028  001482  5061               	movf	i2printf@width,w,c
 14029  001484  1062               	iorwf	i2printf@width+1,w,c
 14030  001486  A4D8               	btfss	status,2,c
 14031  001488  D7F6               	goto	i2l6618
 14032  00148A                     i2l6622:
 14033                           
 14034                           ;doprnt.c: 1438: if(flag & 0x03)
 14035  00148A  0E03               	movlw	3
 14036  00148C  1469               	andwf	i2printf@flag,w,c
 14037  00148E  6E4F               	movwf	??i2_printf& (0+255),c
 14038  001490  0E00               	movlw	0
 14039  001492  146A               	andwf	i2printf@flag+1,w,c
 14040  001494  6E50               	movwf	(??i2_printf+1)& (0+255),c
 14041  001496  504F               	movf	??i2_printf,w,c
 14042  001498  1050               	iorwf	??i2_printf+1,w,c
 14043  00149A  B4D8               	btfsc	status,2,c
 14044  00149C  D003               	goto	i2l6626
 14045                           
 14046                           ;doprnt.c: 1439: (putch('-') );
 14047  00149E  0E2D               	movlw	45
 14048  0014A0  EC93  F02C         	call	i2_putch
 14049  0014A4                     i2l6626:
 14050                           
 14051                           ;doprnt.c: 1469: }
 14052                           ;doprnt.c: 1472: prec = c;
 14053  0014A4  506E               	movf	i2printf@c,w,c
 14054  0014A6  6E5B               	movwf	i2printf@prec,c
 14055  0014A8  6A5C               	clrf	i2printf@prec+1,c
 14056  0014AA  BE5B               	btfsc	i2printf@prec,7,c
 14057  0014AC  065C               	decf	i2printf@prec+1,f,c
 14058                           
 14059                           ;doprnt.c: 1474: while(prec--) {
 14060  0014AE  D07F               	goto	i2l6640
 14061  0014B0                     i2l6628:
 14062                           
 14063                           ;doprnt.c: 1486: case 0xC0:
 14064                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14065  0014B0  C05B  F04F         	movff	i2printf@prec,??i2_printf
 14066  0014B4  C05C  F050         	movff	i2printf@prec+1,??i2_printf+1
 14067  0014B8  90D8               	bcf	status,0,c
 14068  0014BA  364F               	rlcf	??i2_printf,f,c
 14069  0014BC  3650               	rlcf	??i2_printf+1,f,c
 14070  0014BE  90D8               	bcf	status,0,c
 14071  0014C0  364F               	rlcf	??i2_printf,f,c
 14072  0014C2  3650               	rlcf	??i2_printf+1,f,c
 14073  0014C4  0EB7               	movlw	low _dpowers
 14074  0014C6  244F               	addwf	??i2_printf,w,c
 14075  0014C8  6EF6               	movwf	tblptrl,c
 14076  0014CA  0EFD               	movlw	high _dpowers
 14077  0014CC  2050               	addwfc	??i2_printf+1,w,c
 14078  0014CE  6EF7               	movwf	tblptrh,c
 14079  0014D0                     	if	0	;There are less than 3 active tblptr bytes
 14080  0014D0                     	endif
 14081  0014D0  0009               	tblrd		*+
 14082  0014D2  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14083  0014D6  0009               	tblrd		*+
 14084  0014D8  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14085  0014DC  0009               	tblrd		*+
 14086  0014DE  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14087  0014E2  000A               	tblrd		*-
 14088  0014E4  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14089  0014E8  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 14090  0014EC  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14091  0014F0  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14092  0014F4  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14093  0014F8  EC96  F028         	call	i2___lldiv	;wreg free
 14094  0014FC  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 14095  001500  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 14096  001504  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 14097  001508  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 14098  00150C  0E0A               	movlw	10
 14099  00150E  6E12               	movwf	i2___llmod@divisor,c
 14100  001510  0E00               	movlw	0
 14101  001512  6E13               	movwf	i2___llmod@divisor+1,c
 14102  001514  0E00               	movlw	0
 14103  001516  6E14               	movwf	i2___llmod@divisor+2,c
 14104  001518  0E00               	movlw	0
 14105  00151A  6E15               	movwf	i2___llmod@divisor+3,c
 14106  00151C  ECBD  F029         	call	i2___llmod	;wreg free
 14107  001520  500E               	movf	?i2___llmod,w,c
 14108  001522  0F30               	addlw	48
 14109  001524  6E6E               	movwf	i2printf@c,c
 14110                           
 14111                           ;doprnt.c: 1491: break;
 14112  001526  D040               	goto	i2l6638
 14113  001528                     i2l6630:
 14114                           
 14115                           ;doprnt.c: 1499: {
 14116                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14117  001528  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 14118  00152C  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 14119  001530  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 14120  001534  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 14121  001538  C05B  F04F         	movff	i2printf@prec,??i2_printf
 14122  00153C  C05C  F050         	movff	i2printf@prec+1,??i2_printf+1
 14123  001540  90D8               	bcf	status,0,c
 14124  001542  364F               	rlcf	??i2_printf,f,c
 14125  001544  3650               	rlcf	??i2_printf+1,f,c
 14126  001546  90D8               	bcf	status,0,c
 14127  001548  364F               	rlcf	??i2_printf,f,c
 14128  00154A  3650               	rlcf	??i2_printf+1,f,c
 14129  00154C  0E2D               	movlw	low _hexpowers
 14130  00154E  244F               	addwf	??i2_printf,w,c
 14131  001550  6EF6               	movwf	tblptrl,c
 14132  001552  0EFE               	movlw	high _hexpowers
 14133  001554  2050               	addwfc	??i2_printf+1,w,c
 14134  001556  6EF7               	movwf	tblptrh,c
 14135  001558                     	if	0	;There are less than 3 active tblptr bytes
 14136  001558                     	endif
 14137  001558  0009               	tblrd		*+
 14138  00155A  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 14139  00155E  0009               	tblrd		*+
 14140  001560  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 14141  001564  0009               	tblrd		*+
 14142  001566  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 14143  00156A  000A               	tblrd		*-
 14144  00156C  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 14145  001570  EC96  F028         	call	i2___lldiv	;wreg free
 14146  001574  5001               	movf	?i2___lldiv,w,c
 14147  001576  0B0F               	andlw	15
 14148  001578  6E58               	movwf	i2printf@idx,c
 14149                           
 14150                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14151  00157A  5058               	movf	i2printf@idx,w,c
 14152  00157C  0D01               	mullw	1
 14153  00157E  0E25               	movlw	low STR_23
 14154  001580  24F3               	addwf	prodl,w,c
 14155  001582  6EF6               	movwf	tblptrl,c
 14156  001584  0EFF               	movlw	high STR_23
 14157  001586  20F4               	addwfc	prodh,w,c
 14158  001588  6EF7               	movwf	tblptrh,c
 14159  00158A                     	if	0	;There are less than 3 active tblptr bytes
 14160  00158A                     	endif
 14161  00158A  0008               	tblrd		*
 14162  00158C  CFF5 F06E          	movff	tablat,i2printf@c
 14163                           
 14164                           ;doprnt.c: 1523: }
 14165                           
 14166                           ;doprnt.c: 1508: }
 14167                           ;doprnt.c: 1510: break;
 14168  001590  D00B               	goto	i2l6638
 14169  001592                     i2l6636:
 14170  001592  5069               	movf	i2printf@flag,w,c
 14171  001594  0BC0               	andlw	192
 14172                           
 14173                           ; Switch size 1, requested type "space"
 14174                           ; Number of cases is 3, Range of values is 0 to 192
 14175                           ; switch strategies available:
 14176                           ; Name         Instructions Cycles
 14177                           ; simple_byte           10     6 (average)
 14178                           ;	Chosen strategy is simple_byte
 14179  001596  0A00               	xorlw	0	; case 0
 14180  001598  B4D8               	btfsc	status,2,c
 14181  00159A  D78A               	goto	i2l6628
 14182  00159C  0A80               	xorlw	128	; case 128
 14183  00159E  B4D8               	btfsc	status,2,c
 14184  0015A0  D7C3               	goto	i2l6630
 14185  0015A2  0A40               	xorlw	64	; case 192
 14186  0015A4  B4D8               	btfsc	status,2,c
 14187  0015A6  D784               	goto	i2l6628
 14188  0015A8                     i2l6638:
 14189                           
 14190                           ;doprnt.c: 1524: (putch(c) );
 14191  0015A8  506E               	movf	i2printf@c,w,c
 14192  0015AA  EC93  F02C         	call	i2_putch
 14193  0015AE                     i2l6640:
 14194  0015AE  065B               	decf	i2printf@prec,f,c
 14195  0015B0  A0D8               	btfss	status,0,c
 14196  0015B2  065C               	decf	i2printf@prec+1,f,c
 14197  0015B4  285B               	incf	i2printf@prec,w,c
 14198  0015B6  E1ED               	bnz	i2l6636
 14199  0015B8  285C               	incf	i2printf@prec+1,w,c
 14200  0015BA  A4D8               	btfss	status,2,c
 14201  0015BC  D7EA               	goto	i2l6636
 14202  0015BE                     i2l6642:
 14203  0015BE  C049  FFF6         	movff	i2printf@f,tblptrl
 14204  0015C2  C04A  FFF7         	movff	i2printf@f+1,tblptrh
 14205  0015C6  4A49               	infsnz	i2printf@f,f,c
 14206  0015C8  2A4A               	incf	i2printf@f+1,f,c
 14207  0015CA                     	if	0	;tblptru may be non-zero
 14208  0015CA                     	endif
 14209  0015CA                     	if	0	;tblptru may be non-zero
 14210  0015CA                     	endif
 14211  0015CA  0008               	tblrd		*
 14212  0015CC  CFF5 F06E          	movff	tablat,i2printf@c
 14213  0015D0  506E               	movf	i2printf@c,w,c
 14214  0015D2  B4D8               	btfsc	status,2,c
 14215  0015D4  0012               	return	
 14216  0015D6  EF04  F006         	goto	i2l6352
 14217  0015DA                     __end_ofi2_printf:
 14218                           	opt stack 0
 14219                           pclatu	equ	0xFFB
 14220                           pclath	equ	0xFFA
 14221                           tblptru	equ	0xFF8
 14222                           tblptrh	equ	0xFF7
 14223                           tblptrl	equ	0xFF6
 14224                           tablat	equ	0xFF5
 14225                           prodh	equ	0xFF4
 14226                           prodl	equ	0xFF3
 14227                           intcon	equ	0xFF2
 14228                           intcon2	equ	0xFF1
 14229                           intcon3	equ	0xFF0
 14230                           postinc0	equ	0xFEE
 14231                           fsr0h	equ	0xFEA
 14232                           fsr0l	equ	0xFE9
 14233                           wreg	equ	0xFE8
 14234                           fsr1h	equ	0xFE2
 14235                           fsr1l	equ	0xFE1
 14236                           indf2	equ	0xFDF
 14237                           postinc2	equ	0xFDE
 14238                           postdec2	equ	0xFDD
 14239                           fsr2h	equ	0xFDA
 14240                           fsr2l	equ	0xFD9
 14241                           status	equ	0xFD8
 14242                           
 14243 ;; *************** function i2_scale *****************
 14244 ;; Defined at:
 14245 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14246 ;; Parameters:    Size  Location     Type
 14247 ;;  scl             1    wreg     char 
 14248 ;; Auto vars:     Size  Location     Type
 14249 ;;  scl             1   41[COMRAM] char 
 14250 ;; Return value:  Size  Location     Type
 14251 ;;                  3   35[COMRAM] char 
 14252 ;; Registers used:
 14253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14254 ;; Tracked objects:
 14255 ;;		On entry : 0/0
 14256 ;;		On exit  : 0/0
 14257 ;;		Unchanged: 0/0
 14258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14259 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14260 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14262 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14263 ;;Total ram usage:        7 bytes
 14264 ;; Hardware stack levels used:    1
 14265 ;; Hardware stack levels required when called:    2
 14266 ;; This function calls:
 14267 ;;		i2___awdiv
 14268 ;;		i2___awmod
 14269 ;;		i2___ftmul
 14270 ;;		i2___wmul
 14271 ;; This function is called by:
 14272 ;;		i2_printf
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           	psect	text44
 14277  0022D4                     __ptext44:
 14278                           	opt stack 0
 14279  0022D4                     i2_scale:
 14280                           	opt stack 21
 14281                           
 14282                           ;incstack = 0
 14283                           ;i2scale@scl stored from wreg
 14284  0022D4  6E2A               	movwf	i2scale@scl,c
 14285                           
 14286                           ;doprnt.c: 428: if(scl < 0) {
 14287  0022D6  AE2A               	btfss	i2scale@scl,7,c
 14288  0022D8  D0FB               	goto	i2l5860
 14289                           
 14290                           ;doprnt.c: 429: scl = -scl;
 14291  0022DA  6C2A               	negf	i2scale@scl,c
 14292                           
 14293                           ;doprnt.c: 430: if(scl>=110)
 14294  0022DC  502A               	movf	i2scale@scl,w,c
 14295  0022DE  0A80               	xorlw	128
 14296  0022E0  0F12               	addlw	-238
 14297  0022E2  A0D8               	btfss	status,0,c
 14298  0022E4  D091               	goto	i2l5850
 14299                           
 14300                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14301  0022E6  0E00               	movlw	0
 14302  0022E8  6E12               	movwf	i2___wmul@multiplicand+1,c
 14303  0022EA  0E03               	movlw	3
 14304  0022EC  6E11               	movwf	i2___wmul@multiplicand,c
 14305  0022EE  0E00               	movlw	0
 14306  0022F0  6E0A               	movwf	i2___awdiv@divisor+1,c
 14307  0022F2  0E0A               	movlw	10
 14308  0022F4  6E09               	movwf	i2___awdiv@divisor,c
 14309  0022F6  0E00               	movlw	0
 14310  0022F8  6E04               	movwf	i2___awmod@divisor+1,c
 14311  0022FA  0E64               	movlw	100
 14312  0022FC  6E03               	movwf	i2___awmod@divisor,c
 14313  0022FE  502A               	movf	i2scale@scl,w,c
 14314  002300  6E01               	movwf	i2___awmod@dividend,c
 14315  002302  6A02               	clrf	i2___awmod@dividend+1,c
 14316  002304  BE01               	btfsc	i2___awmod@dividend,7,c
 14317  002306  0602               	decf	i2___awmod@dividend+1,f,c
 14318  002308  EC51  F029         	call	i2___awmod	;wreg free
 14319  00230C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14320  002310  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14321  002314  EC54  F028         	call	i2___awdiv	;wreg free
 14322  002318  0E09               	movlw	9
 14323  00231A  2407               	addwf	?i2___awdiv,w,c
 14324  00231C  6E0F               	movwf	i2___wmul@multiplier,c
 14325  00231E  0E00               	movlw	0
 14326  002320  2008               	addwfc	?i2___awdiv+1,w,c
 14327  002322  6E10               	movwf	i2___wmul@multiplier+1,c
 14328  002324  EC1F  F02C         	call	i2___wmul	;wreg free
 14329  002328  0EDF               	movlw	low __npowers_
 14330  00232A  240F               	addwf	?i2___wmul,w,c
 14331  00232C  6EF6               	movwf	tblptrl,c
 14332  00232E  0EFD               	movlw	high __npowers_
 14333  002330  2010               	addwfc	?i2___wmul+1,w,c
 14334  002332  6EF7               	movwf	tblptrh,c
 14335  002334                     	if	0	;There are less than 3 active tblptr bytes
 14336  002334                     	endif
 14337  002334  0009               	tblrd		*+
 14338  002336  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14339  00233A  0009               	tblrd		*+
 14340  00233C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14341  002340  000A               	tblrd		*-
 14342  002342  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14343  002346  0E00               	movlw	0
 14344  002348  6E0A               	movwf	i2___awdiv@divisor+1,c
 14345  00234A  0E64               	movlw	100
 14346  00234C  6E09               	movwf	i2___awdiv@divisor,c
 14347  00234E  502A               	movf	i2scale@scl,w,c
 14348  002350  6E07               	movwf	i2___awdiv@dividend,c
 14349  002352  6A08               	clrf	i2___awdiv@dividend+1,c
 14350  002354  BE07               	btfsc	i2___awdiv@dividend,7,c
 14351  002356  0608               	decf	i2___awdiv@dividend+1,f,c
 14352  002358  EC54  F028         	call	i2___awdiv	;wreg free
 14353  00235C  0E12               	movlw	18
 14354  00235E  2407               	addwf	?i2___awdiv,w,c
 14355  002360  6E0F               	movwf	i2___wmul@multiplier,c
 14356  002362  0E00               	movlw	0
 14357  002364  2008               	addwfc	?i2___awdiv+1,w,c
 14358  002366  6E10               	movwf	i2___wmul@multiplier+1,c
 14359  002368  0E00               	movlw	0
 14360  00236A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14361  00236C  0E03               	movlw	3
 14362  00236E  6E11               	movwf	i2___wmul@multiplicand,c
 14363  002370  EC1F  F02C         	call	i2___wmul	;wreg free
 14364  002374  0EDF               	movlw	low __npowers_
 14365  002376  240F               	addwf	?i2___wmul,w,c
 14366  002378  6EF6               	movwf	tblptrl,c
 14367  00237A  0EFD               	movlw	high __npowers_
 14368  00237C  2010               	addwfc	?i2___wmul+1,w,c
 14369  00237E  6EF7               	movwf	tblptrh,c
 14370  002380                     	if	0	;There are less than 3 active tblptr bytes
 14371  002380                     	endif
 14372  002380  0009               	tblrd		*+
 14373  002382  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14374  002386  0009               	tblrd		*+
 14375  002388  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14376  00238C  000A               	tblrd		*-
 14377  00238E  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14378  002392  ECB2  F022         	call	i2___ftmul	;wreg free
 14379  002396  C015  F027         	movff	?i2___ftmul,i2_scale$1535
 14380  00239A  C016  F028         	movff	?i2___ftmul+1,i2_scale$1535+1
 14381  00239E  C017  F029         	movff	?i2___ftmul+2,i2_scale$1535+2
 14382                           
 14383                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14384  0023A2  C027  F015         	movff	i2_scale$1535,i2___ftmul@f1
 14385  0023A6  C028  F016         	movff	i2_scale$1535+1,i2___ftmul@f1+1
 14386  0023AA  C029  F017         	movff	i2_scale$1535+2,i2___ftmul@f1+2
 14387  0023AE  0E00               	movlw	0
 14388  0023B0  6E12               	movwf	i2___wmul@multiplicand+1,c
 14389  0023B2  0E03               	movlw	3
 14390  0023B4  6E11               	movwf	i2___wmul@multiplicand,c
 14391  0023B6  0E00               	movlw	0
 14392  0023B8  6E04               	movwf	i2___awmod@divisor+1,c
 14393  0023BA  0E0A               	movlw	10
 14394  0023BC  6E03               	movwf	i2___awmod@divisor,c
 14395  0023BE  502A               	movf	i2scale@scl,w,c
 14396  0023C0  6E01               	movwf	i2___awmod@dividend,c
 14397  0023C2  6A02               	clrf	i2___awmod@dividend+1,c
 14398  0023C4  BE01               	btfsc	i2___awmod@dividend,7,c
 14399  0023C6  0602               	decf	i2___awmod@dividend+1,f,c
 14400  0023C8  EC51  F029         	call	i2___awmod	;wreg free
 14401  0023CC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14402  0023D0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14403  0023D4  EC1F  F02C         	call	i2___wmul	;wreg free
 14404  0023D8  0EDF               	movlw	low __npowers_
 14405  0023DA  240F               	addwf	?i2___wmul,w,c
 14406  0023DC  6EF6               	movwf	tblptrl,c
 14407  0023DE  0EFD               	movlw	high __npowers_
 14408  0023E0  2010               	addwfc	?i2___wmul+1,w,c
 14409  0023E2  6EF7               	movwf	tblptrh,c
 14410  0023E4                     	if	0	;There are less than 3 active tblptr bytes
 14411  0023E4                     	endif
 14412  0023E4  0009               	tblrd		*+
 14413  0023E6  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14414  0023EA  0009               	tblrd		*+
 14415  0023EC  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14416  0023F0  000A               	tblrd		*-
 14417  0023F2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14418  0023F6  ECB2  F022         	call	i2___ftmul	;wreg free
 14419  0023FA  C015  F024         	movff	?i2___ftmul,?i2_scale
 14420  0023FE  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14421  002402  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14422  002406  0012               	return	
 14423  002408                     i2l5850:
 14424                           
 14425                           ;doprnt.c: 432: else if(scl > 10)
 14426  002408  502A               	movf	i2scale@scl,w,c
 14427  00240A  0A80               	xorlw	128
 14428  00240C  0F75               	addlw	-139
 14429  00240E  A0D8               	btfss	status,0,c
 14430  002410  D04D               	goto	i2l5856
 14431                           
 14432                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14433  002412  0E00               	movlw	0
 14434  002414  6E0A               	movwf	i2___awdiv@divisor+1,c
 14435  002416  0E0A               	movlw	10
 14436  002418  6E09               	movwf	i2___awdiv@divisor,c
 14437  00241A  502A               	movf	i2scale@scl,w,c
 14438  00241C  6E07               	movwf	i2___awdiv@dividend,c
 14439  00241E  6A08               	clrf	i2___awdiv@dividend+1,c
 14440  002420  BE07               	btfsc	i2___awdiv@dividend,7,c
 14441  002422  0608               	decf	i2___awdiv@dividend+1,f,c
 14442  002424  EC54  F028         	call	i2___awdiv	;wreg free
 14443  002428  0E09               	movlw	9
 14444  00242A  2407               	addwf	?i2___awdiv,w,c
 14445  00242C  6E0F               	movwf	i2___wmul@multiplier,c
 14446  00242E  0E00               	movlw	0
 14447  002430  2008               	addwfc	?i2___awdiv+1,w,c
 14448  002432  6E10               	movwf	i2___wmul@multiplier+1,c
 14449  002434  0E00               	movlw	0
 14450  002436  6E12               	movwf	i2___wmul@multiplicand+1,c
 14451  002438  0E03               	movlw	3
 14452  00243A  6E11               	movwf	i2___wmul@multiplicand,c
 14453  00243C  EC1F  F02C         	call	i2___wmul	;wreg free
 14454  002440  0EDF               	movlw	low __npowers_
 14455  002442  240F               	addwf	?i2___wmul,w,c
 14456  002444  6EF6               	movwf	tblptrl,c
 14457  002446  0EFD               	movlw	high __npowers_
 14458  002448  2010               	addwfc	?i2___wmul+1,w,c
 14459  00244A  6EF7               	movwf	tblptrh,c
 14460  00244C                     	if	0	;There are less than 3 active tblptr bytes
 14461  00244C                     	endif
 14462  00244C  0009               	tblrd		*+
 14463  00244E  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14464  002452  0009               	tblrd		*+
 14465  002454  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14466  002458  000A               	tblrd		*-
 14467  00245A  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14468  00245E  0E00               	movlw	0
 14469  002460  6E12               	movwf	i2___wmul@multiplicand+1,c
 14470  002462  0E03               	movlw	3
 14471  002464  6E11               	movwf	i2___wmul@multiplicand,c
 14472  002466  0E00               	movlw	0
 14473  002468  6E04               	movwf	i2___awmod@divisor+1,c
 14474  00246A  0E0A               	movlw	10
 14475  00246C  6E03               	movwf	i2___awmod@divisor,c
 14476  00246E  502A               	movf	i2scale@scl,w,c
 14477  002470  6E01               	movwf	i2___awmod@dividend,c
 14478  002472  6A02               	clrf	i2___awmod@dividend+1,c
 14479  002474  BE01               	btfsc	i2___awmod@dividend,7,c
 14480  002476  0602               	decf	i2___awmod@dividend+1,f,c
 14481  002478  EC51  F029         	call	i2___awmod	;wreg free
 14482  00247C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14483  002480  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14484  002484  EC1F  F02C         	call	i2___wmul	;wreg free
 14485  002488  0EDF               	movlw	low __npowers_
 14486  00248A  240F               	addwf	?i2___wmul,w,c
 14487  00248C  6EF6               	movwf	tblptrl,c
 14488  00248E  0EFD               	movlw	high __npowers_
 14489  002490  2010               	addwfc	?i2___wmul+1,w,c
 14490  002492  6EF7               	movwf	tblptrh,c
 14491  002494                     	if	0	;There are less than 3 active tblptr bytes
 14492  002494                     	endif
 14493  002494  0009               	tblrd		*+
 14494  002496  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14495  00249A  0009               	tblrd		*+
 14496  00249C  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14497  0024A0  000A               	tblrd		*-
 14498  0024A2  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14499  0024A6  ECB2  F022         	call	i2___ftmul	;wreg free
 14500  0024AA  D7A7               	goto	L26
 14501  0024AC                     i2l5856:
 14502                           
 14503                           ;doprnt.c: 434: return _npowers_[scl];
 14504  0024AC  502A               	movf	i2scale@scl,w,c
 14505  0024AE  0D03               	mullw	3
 14506  0024B0  0EDF               	movlw	low __npowers_
 14507  0024B2  24F3               	addwf	prodl,w,c
 14508  0024B4  6EF6               	movwf	tblptrl,c
 14509  0024B6  0EFD               	movlw	high __npowers_
 14510  0024B8  20F4               	addwfc	prodh,w,c
 14511  0024BA  6EF7               	movwf	tblptrh,c
 14512  0024BC                     	if	0	;There are less than 3 active tblptr bytes
 14513  0024BC                     	endif
 14514  0024BC  0009               	tblrd		*+
 14515  0024BE  CFF5 F024          	movff	tablat,?i2_scale
 14516  0024C2  0009               	tblrd		*+
 14517  0024C4  CFF5 F025          	movff	tablat,?i2_scale+1
 14518  0024C8  000A               	tblrd		*-
 14519  0024CA  CFF5 F026          	movff	tablat,?i2_scale+2
 14520  0024CE  0012               	return	
 14521  0024D0                     i2l5860:
 14522                           
 14523                           ;doprnt.c: 435: }
 14524                           ;doprnt.c: 436: if(scl>=110)
 14525  0024D0  502A               	movf	i2scale@scl,w,c
 14526  0024D2  0A80               	xorlw	128
 14527  0024D4  0F12               	addlw	-238
 14528  0024D6  A0D8               	btfss	status,0,c
 14529  0024D8  D091               	goto	i2l5868
 14530                           
 14531                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14532  0024DA  0E00               	movlw	0
 14533  0024DC  6E12               	movwf	i2___wmul@multiplicand+1,c
 14534  0024DE  0E03               	movlw	3
 14535  0024E0  6E11               	movwf	i2___wmul@multiplicand,c
 14536  0024E2  0E00               	movlw	0
 14537  0024E4  6E0A               	movwf	i2___awdiv@divisor+1,c
 14538  0024E6  0E0A               	movlw	10
 14539  0024E8  6E09               	movwf	i2___awdiv@divisor,c
 14540  0024EA  0E00               	movlw	0
 14541  0024EC  6E04               	movwf	i2___awmod@divisor+1,c
 14542  0024EE  0E64               	movlw	100
 14543  0024F0  6E03               	movwf	i2___awmod@divisor,c
 14544  0024F2  502A               	movf	i2scale@scl,w,c
 14545  0024F4  6E01               	movwf	i2___awmod@dividend,c
 14546  0024F6  6A02               	clrf	i2___awmod@dividend+1,c
 14547  0024F8  BE01               	btfsc	i2___awmod@dividend,7,c
 14548  0024FA  0602               	decf	i2___awmod@dividend+1,f,c
 14549  0024FC  EC51  F029         	call	i2___awmod	;wreg free
 14550  002500  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14551  002504  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14552  002508  EC54  F028         	call	i2___awdiv	;wreg free
 14553  00250C  0E09               	movlw	9
 14554  00250E  2407               	addwf	?i2___awdiv,w,c
 14555  002510  6E0F               	movwf	i2___wmul@multiplier,c
 14556  002512  0E00               	movlw	0
 14557  002514  2008               	addwfc	?i2___awdiv+1,w,c
 14558  002516  6E10               	movwf	i2___wmul@multiplier+1,c
 14559  002518  EC1F  F02C         	call	i2___wmul	;wreg free
 14560  00251C  0E06               	movlw	low __powers_
 14561  00251E  240F               	addwf	?i2___wmul,w,c
 14562  002520  6EF6               	movwf	tblptrl,c
 14563  002522  0EFE               	movlw	high __powers_
 14564  002524  2010               	addwfc	?i2___wmul+1,w,c
 14565  002526  6EF7               	movwf	tblptrh,c
 14566  002528                     	if	0	;There are less than 3 active tblptr bytes
 14567  002528                     	endif
 14568  002528  0009               	tblrd		*+
 14569  00252A  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14570  00252E  0009               	tblrd		*+
 14571  002530  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14572  002534  000A               	tblrd		*-
 14573  002536  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14574  00253A  0E00               	movlw	0
 14575  00253C  6E0A               	movwf	i2___awdiv@divisor+1,c
 14576  00253E  0E64               	movlw	100
 14577  002540  6E09               	movwf	i2___awdiv@divisor,c
 14578  002542  502A               	movf	i2scale@scl,w,c
 14579  002544  6E07               	movwf	i2___awdiv@dividend,c
 14580  002546  6A08               	clrf	i2___awdiv@dividend+1,c
 14581  002548  BE07               	btfsc	i2___awdiv@dividend,7,c
 14582  00254A  0608               	decf	i2___awdiv@dividend+1,f,c
 14583  00254C  EC54  F028         	call	i2___awdiv	;wreg free
 14584  002550  0E12               	movlw	18
 14585  002552  2407               	addwf	?i2___awdiv,w,c
 14586  002554  6E0F               	movwf	i2___wmul@multiplier,c
 14587  002556  0E00               	movlw	0
 14588  002558  2008               	addwfc	?i2___awdiv+1,w,c
 14589  00255A  6E10               	movwf	i2___wmul@multiplier+1,c
 14590  00255C  0E00               	movlw	0
 14591  00255E  6E12               	movwf	i2___wmul@multiplicand+1,c
 14592  002560  0E03               	movlw	3
 14593  002562  6E11               	movwf	i2___wmul@multiplicand,c
 14594  002564  EC1F  F02C         	call	i2___wmul	;wreg free
 14595  002568  0E06               	movlw	low __powers_
 14596  00256A  240F               	addwf	?i2___wmul,w,c
 14597  00256C  6EF6               	movwf	tblptrl,c
 14598  00256E  0EFE               	movlw	high __powers_
 14599  002570  2010               	addwfc	?i2___wmul+1,w,c
 14600  002572  6EF7               	movwf	tblptrh,c
 14601  002574                     	if	0	;There are less than 3 active tblptr bytes
 14602  002574                     	endif
 14603  002574  0009               	tblrd		*+
 14604  002576  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14605  00257A  0009               	tblrd		*+
 14606  00257C  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14607  002580  000A               	tblrd		*-
 14608  002582  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14609  002586  ECB2  F022         	call	i2___ftmul	;wreg free
 14610  00258A  C015  F027         	movff	?i2___ftmul,i2_scale$1535
 14611  00258E  C016  F028         	movff	?i2___ftmul+1,i2_scale$1535+1
 14612  002592  C017  F029         	movff	?i2___ftmul+2,i2_scale$1535+2
 14613                           
 14614                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14615  002596  C027  F015         	movff	i2_scale$1535,i2___ftmul@f1
 14616  00259A  C028  F016         	movff	i2_scale$1535+1,i2___ftmul@f1+1
 14617  00259E  C029  F017         	movff	i2_scale$1535+2,i2___ftmul@f1+2
 14618  0025A2  0E00               	movlw	0
 14619  0025A4  6E12               	movwf	i2___wmul@multiplicand+1,c
 14620  0025A6  0E03               	movlw	3
 14621  0025A8  6E11               	movwf	i2___wmul@multiplicand,c
 14622  0025AA  0E00               	movlw	0
 14623  0025AC  6E04               	movwf	i2___awmod@divisor+1,c
 14624  0025AE  0E0A               	movlw	10
 14625  0025B0  6E03               	movwf	i2___awmod@divisor,c
 14626  0025B2  502A               	movf	i2scale@scl,w,c
 14627  0025B4  6E01               	movwf	i2___awmod@dividend,c
 14628  0025B6  6A02               	clrf	i2___awmod@dividend+1,c
 14629  0025B8  BE01               	btfsc	i2___awmod@dividend,7,c
 14630  0025BA  0602               	decf	i2___awmod@dividend+1,f,c
 14631  0025BC  EC51  F029         	call	i2___awmod	;wreg free
 14632  0025C0  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14633  0025C4  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14634  0025C8  EC1F  F02C         	call	i2___wmul	;wreg free
 14635  0025CC  0E06               	movlw	low __powers_
 14636  0025CE  240F               	addwf	?i2___wmul,w,c
 14637  0025D0  6EF6               	movwf	tblptrl,c
 14638  0025D2  0EFE               	movlw	high __powers_
 14639  0025D4  2010               	addwfc	?i2___wmul+1,w,c
 14640  0025D6  6EF7               	movwf	tblptrh,c
 14641  0025D8                     	if	0	;There are less than 3 active tblptr bytes
 14642  0025D8                     	endif
 14643  0025D8  0009               	tblrd		*+
 14644  0025DA  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14645  0025DE  0009               	tblrd		*+
 14646  0025E0  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14647  0025E4  000A               	tblrd		*-
 14648  0025E6  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14649  0025EA  ECB2  F022         	call	i2___ftmul	;wreg free
 14650  0025EE  C015  F024         	movff	?i2___ftmul,?i2_scale
 14651  0025F2  C016  F025         	movff	?i2___ftmul+1,?i2_scale+1
 14652  0025F6  C017  F026         	movff	?i2___ftmul+2,?i2_scale+2
 14653  0025FA  0012               	return	
 14654  0025FC                     i2l5868:
 14655                           
 14656                           ;doprnt.c: 438: else if(scl > 10)
 14657  0025FC  502A               	movf	i2scale@scl,w,c
 14658  0025FE  0A80               	xorlw	128
 14659  002600  0F75               	addlw	-139
 14660  002602  A0D8               	btfss	status,0,c
 14661  002604  D04D               	goto	i2l5874
 14662                           
 14663                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14664  002606  0E00               	movlw	0
 14665  002608  6E0A               	movwf	i2___awdiv@divisor+1,c
 14666  00260A  0E0A               	movlw	10
 14667  00260C  6E09               	movwf	i2___awdiv@divisor,c
 14668  00260E  502A               	movf	i2scale@scl,w,c
 14669  002610  6E07               	movwf	i2___awdiv@dividend,c
 14670  002612  6A08               	clrf	i2___awdiv@dividend+1,c
 14671  002614  BE07               	btfsc	i2___awdiv@dividend,7,c
 14672  002616  0608               	decf	i2___awdiv@dividend+1,f,c
 14673  002618  EC54  F028         	call	i2___awdiv	;wreg free
 14674  00261C  0E09               	movlw	9
 14675  00261E  2407               	addwf	?i2___awdiv,w,c
 14676  002620  6E0F               	movwf	i2___wmul@multiplier,c
 14677  002622  0E00               	movlw	0
 14678  002624  2008               	addwfc	?i2___awdiv+1,w,c
 14679  002626  6E10               	movwf	i2___wmul@multiplier+1,c
 14680  002628  0E00               	movlw	0
 14681  00262A  6E12               	movwf	i2___wmul@multiplicand+1,c
 14682  00262C  0E03               	movlw	3
 14683  00262E  6E11               	movwf	i2___wmul@multiplicand,c
 14684  002630  EC1F  F02C         	call	i2___wmul	;wreg free
 14685  002634  0E06               	movlw	low __powers_
 14686  002636  240F               	addwf	?i2___wmul,w,c
 14687  002638  6EF6               	movwf	tblptrl,c
 14688  00263A  0EFE               	movlw	high __powers_
 14689  00263C  2010               	addwfc	?i2___wmul+1,w,c
 14690  00263E  6EF7               	movwf	tblptrh,c
 14691  002640                     	if	0	;There are less than 3 active tblptr bytes
 14692  002640                     	endif
 14693  002640  0009               	tblrd		*+
 14694  002642  CFF5 F015          	movff	tablat,i2___ftmul@f1
 14695  002646  0009               	tblrd		*+
 14696  002648  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 14697  00264C  000A               	tblrd		*-
 14698  00264E  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 14699  002652  0E00               	movlw	0
 14700  002654  6E12               	movwf	i2___wmul@multiplicand+1,c
 14701  002656  0E03               	movlw	3
 14702  002658  6E11               	movwf	i2___wmul@multiplicand,c
 14703  00265A  0E00               	movlw	0
 14704  00265C  6E04               	movwf	i2___awmod@divisor+1,c
 14705  00265E  0E0A               	movlw	10
 14706  002660  6E03               	movwf	i2___awmod@divisor,c
 14707  002662  502A               	movf	i2scale@scl,w,c
 14708  002664  6E01               	movwf	i2___awmod@dividend,c
 14709  002666  6A02               	clrf	i2___awmod@dividend+1,c
 14710  002668  BE01               	btfsc	i2___awmod@dividend,7,c
 14711  00266A  0602               	decf	i2___awmod@dividend+1,f,c
 14712  00266C  EC51  F029         	call	i2___awmod	;wreg free
 14713  002670  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 14714  002674  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 14715  002678  EC1F  F02C         	call	i2___wmul	;wreg free
 14716  00267C  0E06               	movlw	low __powers_
 14717  00267E  240F               	addwf	?i2___wmul,w,c
 14718  002680  6EF6               	movwf	tblptrl,c
 14719  002682  0EFE               	movlw	high __powers_
 14720  002684  2010               	addwfc	?i2___wmul+1,w,c
 14721  002686  6EF7               	movwf	tblptrh,c
 14722  002688                     	if	0	;There are less than 3 active tblptr bytes
 14723  002688                     	endif
 14724  002688  0009               	tblrd		*+
 14725  00268A  CFF5 F018          	movff	tablat,i2___ftmul@f2
 14726  00268E  0009               	tblrd		*+
 14727  002690  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 14728  002694  000A               	tblrd		*-
 14729  002696  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 14730  00269A  ECB2  F022         	call	i2___ftmul	;wreg free
 14731  00269E  D7A7               	goto	L27
 14732  0026A0                     i2l5874:
 14733                           
 14734                           ;doprnt.c: 440: return _powers_[scl];
 14735  0026A0  502A               	movf	i2scale@scl,w,c
 14736  0026A2  0D03               	mullw	3
 14737  0026A4  0E06               	movlw	low __powers_
 14738  0026A6  24F3               	addwf	prodl,w,c
 14739  0026A8  6EF6               	movwf	tblptrl,c
 14740  0026AA  0EFE               	movlw	high __powers_
 14741  0026AC  20F4               	addwfc	prodh,w,c
 14742  0026AE  6EF7               	movwf	tblptrh,c
 14743  0026B0                     	if	0	;There are less than 3 active tblptr bytes
 14744  0026B0                     	endif
 14745  0026B0  0009               	tblrd		*+
 14746  0026B2  CFF5 F024          	movff	tablat,?i2_scale
 14747  0026B6  0009               	tblrd		*+
 14748  0026B8  CFF5 F025          	movff	tablat,?i2_scale+1
 14749  0026BC  000A               	tblrd		*-
 14750  0026BE  CFF5 F026          	movff	tablat,?i2_scale+2
 14751  0026C2  0012               	return	
 14752  0026C4                     __end_ofi2_scale:
 14753                           	opt stack 0
 14754                           pclatu	equ	0xFFB
 14755                           pclath	equ	0xFFA
 14756                           tblptru	equ	0xFF8
 14757                           tblptrh	equ	0xFF7
 14758                           tblptrl	equ	0xFF6
 14759                           tablat	equ	0xFF5
 14760                           prodh	equ	0xFF4
 14761                           prodl	equ	0xFF3
 14762                           intcon	equ	0xFF2
 14763                           intcon2	equ	0xFF1
 14764                           intcon3	equ	0xFF0
 14765                           postinc0	equ	0xFEE
 14766                           fsr0h	equ	0xFEA
 14767                           fsr0l	equ	0xFE9
 14768                           wreg	equ	0xFE8
 14769                           fsr1h	equ	0xFE2
 14770                           fsr1l	equ	0xFE1
 14771                           indf2	equ	0xFDF
 14772                           postinc2	equ	0xFDE
 14773                           postdec2	equ	0xFDD
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function i2_putch *****************
 14779 ;; Defined at:
 14780 ;;		line 31 in file "lcd.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  data            1    wreg     unsigned char 
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;  data            1    2[COMRAM] unsigned char 
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  1    wreg      void 
 14787 ;; Registers used:
 14788 ;;		wreg, status,2, status,0, cstack
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;Total ram usage:        1 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    1
 14801 ;; This function calls:
 14802 ;;		i2_lcdNibble
 14803 ;; This function is called by:
 14804 ;;		i2_printf
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text45
 14809  005926                     __ptext45:
 14810                           	opt stack 0
 14811  005926                     i2_putch:
 14812                           	opt stack 22
 14813                           
 14814                           ;incstack = 0
 14815                           ;i2putch@data stored from wreg
 14816  005926  6E03               	movwf	i2putch@data,c
 14817                           
 14818                           ;lcd.c: 32: LATDbits.LATD2 = 1;
 14819  005928  848C               	bsf	3980,2,c	;volatile
 14820                           
 14821                           ;lcd.c: 33: lcdNibble(data);
 14822  00592A  5003               	movf	i2putch@data,w,c
 14823  00592C  ECA6  F02A         	call	i2_lcdNibble
 14824  005930  0012               	return		;funcret
 14825  005932                     __end_ofi2_putch:
 14826                           	opt stack 0
 14827                           pclatu	equ	0xFFB
 14828                           pclath	equ	0xFFA
 14829                           tblptru	equ	0xFF8
 14830                           tblptrh	equ	0xFF7
 14831                           tblptrl	equ	0xFF6
 14832                           tablat	equ	0xFF5
 14833                           prodh	equ	0xFF4
 14834                           prodl	equ	0xFF3
 14835                           intcon	equ	0xFF2
 14836                           intcon2	equ	0xFF1
 14837                           intcon3	equ	0xFF0
 14838                           postinc0	equ	0xFEE
 14839                           fsr0h	equ	0xFEA
 14840                           fsr0l	equ	0xFE9
 14841                           wreg	equ	0xFE8
 14842                           fsr1h	equ	0xFE2
 14843                           fsr1l	equ	0xFE1
 14844                           indf2	equ	0xFDF
 14845                           postinc2	equ	0xFDE
 14846                           postdec2	equ	0xFDD
 14847                           fsr2h	equ	0xFDA
 14848                           fsr2l	equ	0xFD9
 14849                           status	equ	0xFD8
 14850                           
 14851 ;; *************** function i2_isdigit *****************
 14852 ;; Defined at:
 14853 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14854 ;; Parameters:    Size  Location     Type
 14855 ;;  c               1    wreg     unsigned char 
 14856 ;; Auto vars:     Size  Location     Type
 14857 ;;  c               1    2[COMRAM] unsigned char 
 14858 ;; Return value:  Size  Location     Type
 14859 ;;		None               void
 14860 ;; Registers used:
 14861 ;;		wreg, status,2, status,0
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14870 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14871 ;;Total ram usage:        3 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; This function calls:
 14874 ;;		Nothing
 14875 ;; This function is called by:
 14876 ;;		i2_printf
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           	psect	text46
 14881  0058AA                     __ptext46:
 14882                           	opt stack 0
 14883  0058AA                     i2_isdigit:
 14884                           	opt stack 23
 14885                           
 14886                           ;incstack = 0
 14887                           ;i2isdigit@c stored from wreg
 14888  0058AA  6E03               	movwf	i2isdigit@c,c
 14889  0058AC  0E00               	movlw	0
 14890  0058AE  6E02               	movwf	i2_isdigit$853,c
 14891  0058B0  0E3A               	movlw	58
 14892  0058B2  6003               	cpfslt	i2isdigit@c,c
 14893  0058B4  D005               	goto	i2l6002
 14894  0058B6  0E2F               	movlw	47
 14895  0058B8  6403               	cpfsgt	i2isdigit@c,c
 14896  0058BA  D002               	goto	i2l6002
 14897  0058BC  0E01               	movlw	1
 14898  0058BE  6E02               	movwf	i2_isdigit$853,c
 14899  0058C0                     i2l6002:
 14900  0058C0  C002  F001         	movff	i2_isdigit$853,??i2_isdigit
 14901  0058C4  3001               	rrcf	??i2_isdigit,w,c
 14902  0058C6  0012               	return	
 14903  0058C8                     __end_ofi2_isdigit:
 14904                           	opt stack 0
 14905                           pclatu	equ	0xFFB
 14906                           pclath	equ	0xFFA
 14907                           tblptru	equ	0xFF8
 14908                           tblptrh	equ	0xFF7
 14909                           tblptrl	equ	0xFF6
 14910                           tablat	equ	0xFF5
 14911                           prodh	equ	0xFF4
 14912                           prodl	equ	0xFF3
 14913                           intcon	equ	0xFF2
 14914                           intcon2	equ	0xFF1
 14915                           intcon3	equ	0xFF0
 14916                           postinc0	equ	0xFEE
 14917                           fsr0h	equ	0xFEA
 14918                           fsr0l	equ	0xFE9
 14919                           wreg	equ	0xFE8
 14920                           fsr1h	equ	0xFE2
 14921                           fsr1l	equ	0xFE1
 14922                           indf2	equ	0xFDF
 14923                           postinc2	equ	0xFDE
 14924                           postdec2	equ	0xFDD
 14925                           fsr2h	equ	0xFDA
 14926                           fsr2l	equ	0xFD9
 14927                           status	equ	0xFD8
 14928                           
 14929 ;; *************** function i2_fround *****************
 14930 ;; Defined at:
 14931 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14932 ;; Parameters:    Size  Location     Type
 14933 ;;  prec            1    wreg     unsigned char 
 14934 ;; Auto vars:     Size  Location     Type
 14935 ;;  prec            1   44[COMRAM] unsigned char 
 14936 ;; Return value:  Size  Location     Type
 14937 ;;                  3   35[COMRAM] unsigned char 
 14938 ;; Registers used:
 14939 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14940 ;; Tracked objects:
 14941 ;;		On entry : 0/0
 14942 ;;		On exit  : 0/0
 14943 ;;		Unchanged: 0/0
 14944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14945 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14946 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14948 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14949 ;;Total ram usage:       10 bytes
 14950 ;; Hardware stack levels used:    1
 14951 ;; Hardware stack levels required when called:    2
 14952 ;; This function calls:
 14953 ;;		i2___awdiv
 14954 ;;		i2___awmod
 14955 ;;		i2___ftmul
 14956 ;;		i2___wmul
 14957 ;; This function is called by:
 14958 ;;		i2_printf
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           	psect	text47
 14963  002BD8                     __ptext47:
 14964                           	opt stack 0
 14965  002BD8                     i2_fround:
 14966                           	opt stack 21
 14967                           
 14968                           ;incstack = 0
 14969                           ;i2fround@prec stored from wreg
 14970  002BD8  6E2D               	movwf	i2fround@prec,c
 14971                           
 14972                           ;doprnt.c: 413: if(prec>=110)
 14973  002BDA  0E6D               	movlw	109
 14974  002BDC  642D               	cpfsgt	i2fround@prec,c
 14975  002BDE  D09F               	goto	i2l5828
 14976                           
 14977                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14978  002BE0  0E00               	movlw	0
 14979  002BE2  6E12               	movwf	i2___wmul@multiplicand+1,c
 14980  002BE4  0E03               	movlw	3
 14981  002BE6  6E11               	movwf	i2___wmul@multiplicand,c
 14982  002BE8  0E00               	movlw	0
 14983  002BEA  6E0A               	movwf	i2___awdiv@divisor+1,c
 14984  002BEC  0E0A               	movlw	10
 14985  002BEE  6E09               	movwf	i2___awdiv@divisor,c
 14986  002BF0  0E00               	movlw	0
 14987  002BF2  6E04               	movwf	i2___awmod@divisor+1,c
 14988  002BF4  0E64               	movlw	100
 14989  002BF6  6E03               	movwf	i2___awmod@divisor,c
 14990  002BF8  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 14991  002BFC  6A02               	clrf	i2___awmod@dividend+1,c
 14992  002BFE  EC51  F029         	call	i2___awmod	;wreg free
 14993  002C02  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 14994  002C06  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 14995  002C0A  EC54  F028         	call	i2___awdiv	;wreg free
 14996  002C0E  0E09               	movlw	9
 14997  002C10  2407               	addwf	?i2___awdiv,w,c
 14998  002C12  6E0F               	movwf	i2___wmul@multiplier,c
 14999  002C14  0E00               	movlw	0
 15000  002C16  2008               	addwfc	?i2___awdiv+1,w,c
 15001  002C18  6E10               	movwf	i2___wmul@multiplier+1,c
 15002  002C1A  EC1F  F02C         	call	i2___wmul	;wreg free
 15003  002C1E  0EDF               	movlw	low __npowers_
 15004  002C20  240F               	addwf	?i2___wmul,w,c
 15005  002C22  6EF6               	movwf	tblptrl,c
 15006  002C24  0EFD               	movlw	high __npowers_
 15007  002C26  2010               	addwfc	?i2___wmul+1,w,c
 15008  002C28  6EF7               	movwf	tblptrh,c
 15009  002C2A                     	if	0	;There are less than 3 active tblptr bytes
 15010  002C2A                     	endif
 15011  002C2A  0009               	tblrd		*+
 15012  002C2C  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15013  002C30  0009               	tblrd		*+
 15014  002C32  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15015  002C36  000A               	tblrd		*-
 15016  002C38  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15017  002C3C  0E00               	movlw	0
 15018  002C3E  6E0A               	movwf	i2___awdiv@divisor+1,c
 15019  002C40  0E64               	movlw	100
 15020  002C42  6E09               	movwf	i2___awdiv@divisor,c
 15021  002C44  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15022  002C48  6A08               	clrf	i2___awdiv@dividend+1,c
 15023  002C4A  EC54  F028         	call	i2___awdiv	;wreg free
 15024  002C4E  0E12               	movlw	18
 15025  002C50  2407               	addwf	?i2___awdiv,w,c
 15026  002C52  6E0F               	movwf	i2___wmul@multiplier,c
 15027  002C54  0E00               	movlw	0
 15028  002C56  2008               	addwfc	?i2___awdiv+1,w,c
 15029  002C58  6E10               	movwf	i2___wmul@multiplier+1,c
 15030  002C5A  0E00               	movlw	0
 15031  002C5C  6E12               	movwf	i2___wmul@multiplicand+1,c
 15032  002C5E  0E03               	movlw	3
 15033  002C60  6E11               	movwf	i2___wmul@multiplicand,c
 15034  002C62  EC1F  F02C         	call	i2___wmul	;wreg free
 15035  002C66  0EDF               	movlw	low __npowers_
 15036  002C68  240F               	addwf	?i2___wmul,w,c
 15037  002C6A  6EF6               	movwf	tblptrl,c
 15038  002C6C  0EFD               	movlw	high __npowers_
 15039  002C6E  2010               	addwfc	?i2___wmul+1,w,c
 15040  002C70  6EF7               	movwf	tblptrh,c
 15041  002C72                     	if	0	;There are less than 3 active tblptr bytes
 15042  002C72                     	endif
 15043  002C72  0009               	tblrd		*+
 15044  002C74  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15045  002C78  0009               	tblrd		*+
 15046  002C7A  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15047  002C7E  000A               	tblrd		*-
 15048  002C80  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15049  002C84  ECB2  F022         	call	i2___ftmul	;wreg free
 15050  002C88  C015  F02A         	movff	?i2___ftmul,i2_fround$1533
 15051  002C8C  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1533+1
 15052  002C90  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1533+2
 15053                           
 15054                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15055  002C94  0E00               	movlw	0
 15056  002C96  6E12               	movwf	i2___wmul@multiplicand+1,c
 15057  002C98  0E03               	movlw	3
 15058  002C9A  6E11               	movwf	i2___wmul@multiplicand,c
 15059  002C9C  0E00               	movlw	0
 15060  002C9E  6E04               	movwf	i2___awmod@divisor+1,c
 15061  002CA0  0E0A               	movlw	10
 15062  002CA2  6E03               	movwf	i2___awmod@divisor,c
 15063  002CA4  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15064  002CA8  6A02               	clrf	i2___awmod@dividend+1,c
 15065  002CAA  EC51  F029         	call	i2___awmod	;wreg free
 15066  002CAE  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15067  002CB2  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15068  002CB6  EC1F  F02C         	call	i2___wmul	;wreg free
 15069  002CBA  0EDF               	movlw	low __npowers_
 15070  002CBC  240F               	addwf	?i2___wmul,w,c
 15071  002CBE  6EF6               	movwf	tblptrl,c
 15072  002CC0  0EFD               	movlw	high __npowers_
 15073  002CC2  2010               	addwfc	?i2___wmul+1,w,c
 15074  002CC4  6EF7               	movwf	tblptrh,c
 15075  002CC6                     	if	0	;There are less than 3 active tblptr bytes
 15076  002CC6                     	endif
 15077  002CC6  0009               	tblrd		*+
 15078  002CC8  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15079  002CCC  0009               	tblrd		*+
 15080  002CCE  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15081  002CD2  000A               	tblrd		*-
 15082  002CD4  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15083  002CD8  C02A  F015         	movff	i2_fround$1533,i2___ftmul@f1
 15084  002CDC  C02B  F016         	movff	i2_fround$1533+1,i2___ftmul@f1+1
 15085  002CE0  C02C  F017         	movff	i2_fround$1533+2,i2___ftmul@f1+2
 15086  002CE4  ECB2  F022         	call	i2___ftmul	;wreg free
 15087  002CE8  C015  F027         	movff	?i2___ftmul,i2_fround$1534
 15088  002CEC  C016  F028         	movff	?i2___ftmul+1,i2_fround$1534+1
 15089  002CF0  C017  F029         	movff	?i2___ftmul+2,i2_fround$1534+2
 15090                           
 15091                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15092  002CF4  C027  F015         	movff	i2_fround$1534,i2___ftmul@f1
 15093  002CF8  C028  F016         	movff	i2_fround$1534+1,i2___ftmul@f1+1
 15094  002CFC  C029  F017         	movff	i2_fround$1534+2,i2___ftmul@f1+2
 15095  002D00  0E00               	movlw	0
 15096  002D02  6E18               	movwf	i2___ftmul@f2,c
 15097  002D04  0E00               	movlw	0
 15098  002D06  6E19               	movwf	i2___ftmul@f2+1,c
 15099  002D08  0E3F               	movlw	63
 15100  002D0A  6E1A               	movwf	i2___ftmul@f2+2,c
 15101  002D0C  ECB2  F022         	call	i2___ftmul	;wreg free
 15102  002D10  C015  F024         	movff	?i2___ftmul,?i2_fround
 15103  002D14  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15104  002D18  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15105  002D1C  0012               	return	
 15106  002D1E                     i2l5828:
 15107                           
 15108                           ;doprnt.c: 415: else if(prec > 10)
 15109  002D1E  0E0A               	movlw	10
 15110  002D20  642D               	cpfsgt	i2fround@prec,c
 15111  002D22  D05D               	goto	i2l5836
 15112                           
 15113                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15114  002D24  0E00               	movlw	0
 15115  002D26  6E12               	movwf	i2___wmul@multiplicand+1,c
 15116  002D28  0E03               	movlw	3
 15117  002D2A  6E11               	movwf	i2___wmul@multiplicand,c
 15118  002D2C  0E00               	movlw	0
 15119  002D2E  6E04               	movwf	i2___awmod@divisor+1,c
 15120  002D30  0E0A               	movlw	10
 15121  002D32  6E03               	movwf	i2___awmod@divisor,c
 15122  002D34  C02D  F001         	movff	i2fround@prec,i2___awmod@dividend
 15123  002D38  6A02               	clrf	i2___awmod@dividend+1,c
 15124  002D3A  EC51  F029         	call	i2___awmod	;wreg free
 15125  002D3E  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 15126  002D42  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 15127  002D46  EC1F  F02C         	call	i2___wmul	;wreg free
 15128  002D4A  0EDF               	movlw	low __npowers_
 15129  002D4C  240F               	addwf	?i2___wmul,w,c
 15130  002D4E  6EF6               	movwf	tblptrl,c
 15131  002D50  0EFD               	movlw	high __npowers_
 15132  002D52  2010               	addwfc	?i2___wmul+1,w,c
 15133  002D54  6EF7               	movwf	tblptrh,c
 15134  002D56                     	if	0	;There are less than 3 active tblptr bytes
 15135  002D56                     	endif
 15136  002D56  0009               	tblrd		*+
 15137  002D58  CFF5 F018          	movff	tablat,i2___ftmul@f2
 15138  002D5C  0009               	tblrd		*+
 15139  002D5E  CFF5 F019          	movff	tablat,i2___ftmul@f2+1
 15140  002D62  000A               	tblrd		*-
 15141  002D64  CFF5 F01A          	movff	tablat,i2___ftmul@f2+2
 15142  002D68  0E00               	movlw	0
 15143  002D6A  6E0A               	movwf	i2___awdiv@divisor+1,c
 15144  002D6C  0E0A               	movlw	10
 15145  002D6E  6E09               	movwf	i2___awdiv@divisor,c
 15146  002D70  C02D  F007         	movff	i2fround@prec,i2___awdiv@dividend
 15147  002D74  6A08               	clrf	i2___awdiv@dividend+1,c
 15148  002D76  EC54  F028         	call	i2___awdiv	;wreg free
 15149  002D7A  0E09               	movlw	9
 15150  002D7C  2407               	addwf	?i2___awdiv,w,c
 15151  002D7E  6E0F               	movwf	i2___wmul@multiplier,c
 15152  002D80  0E00               	movlw	0
 15153  002D82  2008               	addwfc	?i2___awdiv+1,w,c
 15154  002D84  6E10               	movwf	i2___wmul@multiplier+1,c
 15155  002D86  0E00               	movlw	0
 15156  002D88  6E12               	movwf	i2___wmul@multiplicand+1,c
 15157  002D8A  0E03               	movlw	3
 15158  002D8C  6E11               	movwf	i2___wmul@multiplicand,c
 15159  002D8E  EC1F  F02C         	call	i2___wmul	;wreg free
 15160  002D92  0EDF               	movlw	low __npowers_
 15161  002D94  240F               	addwf	?i2___wmul,w,c
 15162  002D96  6EF6               	movwf	tblptrl,c
 15163  002D98  0EFD               	movlw	high __npowers_
 15164  002D9A  2010               	addwfc	?i2___wmul+1,w,c
 15165  002D9C  6EF7               	movwf	tblptrh,c
 15166  002D9E                     	if	0	;There are less than 3 active tblptr bytes
 15167  002D9E                     	endif
 15168  002D9E  0009               	tblrd		*+
 15169  002DA0  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15170  002DA4  0009               	tblrd		*+
 15171  002DA6  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15172  002DAA  000A               	tblrd		*-
 15173  002DAC  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15174  002DB0  ECB2  F022         	call	i2___ftmul	;wreg free
 15175  002DB4  C015  F02A         	movff	?i2___ftmul,i2_fround$1533
 15176  002DB8  C016  F02B         	movff	?i2___ftmul+1,i2_fround$1533+1
 15177  002DBC  C017  F02C         	movff	?i2___ftmul+2,i2_fround$1533+2
 15178                           
 15179                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15180  002DC0  C02A  F015         	movff	i2_fround$1533,i2___ftmul@f1
 15181  002DC4  C02B  F016         	movff	i2_fround$1533+1,i2___ftmul@f1+1
 15182  002DC8  C02C  F017         	movff	i2_fround$1533+2,i2___ftmul@f1+2
 15183  002DCC  0E00               	movlw	0
 15184  002DCE  6E18               	movwf	i2___ftmul@f2,c
 15185  002DD0  0E00               	movlw	0
 15186  002DD2  6E19               	movwf	i2___ftmul@f2+1,c
 15187  002DD4  0E3F               	movlw	63
 15188  002DD6  6E1A               	movwf	i2___ftmul@f2+2,c
 15189  002DD8  ECB2  F022         	call	i2___ftmul	;wreg free
 15190  002DDC  D799               	goto	L28
 15191  002DDE                     i2l5836:
 15192                           
 15193                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15194  002DDE  502D               	movf	i2fround@prec,w,c
 15195  002DE0  0D03               	mullw	3
 15196  002DE2  0EDF               	movlw	low __npowers_
 15197  002DE4  24F3               	addwf	prodl,w,c
 15198  002DE6  6EF6               	movwf	tblptrl,c
 15199  002DE8  0EFD               	movlw	high __npowers_
 15200  002DEA  20F4               	addwfc	prodh,w,c
 15201  002DEC  6EF7               	movwf	tblptrh,c
 15202  002DEE                     	if	0	;There are less than 3 active tblptr bytes
 15203  002DEE                     	endif
 15204  002DEE  0009               	tblrd		*+
 15205  002DF0  CFF5 F015          	movff	tablat,i2___ftmul@f1
 15206  002DF4  0009               	tblrd		*+
 15207  002DF6  CFF5 F016          	movff	tablat,i2___ftmul@f1+1
 15208  002DFA  000A               	tblrd		*-
 15209  002DFC  CFF5 F017          	movff	tablat,i2___ftmul@f1+2
 15210  002E00  0E00               	movlw	0
 15211  002E02  6E18               	movwf	i2___ftmul@f2,c
 15212  002E04  0E00               	movlw	0
 15213  002E06  6E19               	movwf	i2___ftmul@f2+1,c
 15214  002E08  0E3F               	movlw	63
 15215  002E0A  6E1A               	movwf	i2___ftmul@f2+2,c
 15216  002E0C  ECB2  F022         	call	i2___ftmul	;wreg free
 15217  002E10  C015  F024         	movff	?i2___ftmul,?i2_fround
 15218  002E14  C016  F025         	movff	?i2___ftmul+1,?i2_fround+1
 15219  002E18  C017  F026         	movff	?i2___ftmul+2,?i2_fround+2
 15220  002E1C  0012               	return	
 15221  002E1E                     __end_ofi2_fround:
 15222                           	opt stack 0
 15223                           pclatu	equ	0xFFB
 15224                           pclath	equ	0xFFA
 15225                           tblptru	equ	0xFF8
 15226                           tblptrh	equ	0xFF7
 15227                           tblptrl	equ	0xFF6
 15228                           tablat	equ	0xFF5
 15229                           prodh	equ	0xFF4
 15230                           prodl	equ	0xFF3
 15231                           intcon	equ	0xFF2
 15232                           intcon2	equ	0xFF1
 15233                           intcon3	equ	0xFF0
 15234                           postinc0	equ	0xFEE
 15235                           fsr0h	equ	0xFEA
 15236                           fsr0l	equ	0xFE9
 15237                           wreg	equ	0xFE8
 15238                           fsr1h	equ	0xFE2
 15239                           fsr1l	equ	0xFE1
 15240                           indf2	equ	0xFDF
 15241                           postinc2	equ	0xFDE
 15242                           postdec2	equ	0xFDD
 15243                           fsr2h	equ	0xFDA
 15244                           fsr2l	equ	0xFD9
 15245                           status	equ	0xFD8
 15246                           
 15247 ;; *************** function i2___awmod *****************
 15248 ;; Defined at:
 15249 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;  dividend        2    0[COMRAM] int 
 15252 ;;  divisor         2    2[COMRAM] int 
 15253 ;; Auto vars:     Size  Location     Type
 15254 ;;  __awmod         1    5[COMRAM] unsigned char 
 15255 ;;  __awmod         1    4[COMRAM] unsigned char 
 15256 ;; Return value:  Size  Location     Type
 15257 ;;                  2    0[COMRAM] int 
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, status,0
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15268 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;Total ram usage:        6 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; This function calls:
 15272 ;;		Nothing
 15273 ;; This function is called by:
 15274 ;;		i2_fround
 15275 ;;		i2_scale
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text48
 15280  0052A2                     __ptext48:
 15281                           	opt stack 0
 15282  0052A2                     i2___awmod:
 15283                           	opt stack 22
 15284                           
 15285                           ;incstack = 0
 15286  0052A2  0E00               	movlw	0
 15287  0052A4  6E06               	movwf	i2___awmod@sign,c
 15288  0052A6  AE02               	btfss	i2___awmod@dividend+1,7,c
 15289  0052A8  D006               	goto	i2l5342
 15290  0052AA  6C01               	negf	i2___awmod@dividend,c
 15291  0052AC  1E02               	comf	i2___awmod@dividend+1,f,c
 15292  0052AE  B0D8               	btfsc	status,0,c
 15293  0052B0  2A02               	incf	i2___awmod@dividend+1,f,c
 15294  0052B2  0E01               	movlw	1
 15295  0052B4  6E06               	movwf	i2___awmod@sign,c
 15296  0052B6                     i2l5342:
 15297  0052B6  AE04               	btfss	i2___awmod@divisor+1,7,c
 15298  0052B8  D004               	goto	i2l5346
 15299  0052BA  6C03               	negf	i2___awmod@divisor,c
 15300  0052BC  1E04               	comf	i2___awmod@divisor+1,f,c
 15301  0052BE  B0D8               	btfsc	status,0,c
 15302  0052C0  2A04               	incf	i2___awmod@divisor+1,f,c
 15303  0052C2                     i2l5346:
 15304  0052C2  5003               	movf	i2___awmod@divisor,w,c
 15305  0052C4  1004               	iorwf	i2___awmod@divisor+1,w,c
 15306  0052C6  B4D8               	btfsc	status,2,c
 15307  0052C8  D018               	goto	i2l5362
 15308  0052CA  0E01               	movlw	1
 15309  0052CC  6E05               	movwf	i2___awmod@counter,c
 15310  0052CE  D004               	goto	i2l5352
 15311  0052D0                     i2l5350:
 15312  0052D0  90D8               	bcf	status,0,c
 15313  0052D2  3603               	rlcf	i2___awmod@divisor,f,c
 15314  0052D4  3604               	rlcf	i2___awmod@divisor+1,f,c
 15315  0052D6  2A05               	incf	i2___awmod@counter,f,c
 15316  0052D8                     i2l5352:
 15317  0052D8  AE04               	btfss	i2___awmod@divisor+1,7,c
 15318  0052DA  D7FA               	goto	i2l5350
 15319  0052DC                     i2l5354:
 15320  0052DC  5003               	movf	i2___awmod@divisor,w,c
 15321  0052DE  5C01               	subwf	i2___awmod@dividend,w,c
 15322  0052E0  5004               	movf	i2___awmod@divisor+1,w,c
 15323  0052E2  5802               	subwfb	i2___awmod@dividend+1,w,c
 15324  0052E4  A0D8               	btfss	status,0,c
 15325  0052E6  D004               	goto	i2l5358
 15326  0052E8  5003               	movf	i2___awmod@divisor,w,c
 15327  0052EA  5E01               	subwf	i2___awmod@dividend,f,c
 15328  0052EC  5004               	movf	i2___awmod@divisor+1,w,c
 15329  0052EE  5A02               	subwfb	i2___awmod@dividend+1,f,c
 15330  0052F0                     i2l5358:
 15331  0052F0  90D8               	bcf	status,0,c
 15332  0052F2  3204               	rrcf	i2___awmod@divisor+1,f,c
 15333  0052F4  3203               	rrcf	i2___awmod@divisor,f,c
 15334  0052F6  2E05               	decfsz	i2___awmod@counter,f,c
 15335  0052F8  D7F1               	goto	i2l5354
 15336  0052FA                     i2l5362:
 15337  0052FA  5006               	movf	i2___awmod@sign,w,c
 15338  0052FC  B4D8               	btfsc	status,2,c
 15339  0052FE  D004               	goto	i2l5366
 15340  005300  6C01               	negf	i2___awmod@dividend,c
 15341  005302  1E02               	comf	i2___awmod@dividend+1,f,c
 15342  005304  B0D8               	btfsc	status,0,c
 15343  005306  2A02               	incf	i2___awmod@dividend+1,f,c
 15344  005308                     i2l5366:
 15345  005308  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 15346  00530C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 15347  005310  0012               	return	
 15348  005312                     __end_ofi2___awmod:
 15349                           	opt stack 0
 15350                           pclatu	equ	0xFFB
 15351                           pclath	equ	0xFFA
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           intcon3	equ	0xFF0
 15361                           postinc0	equ	0xFEE
 15362                           fsr0h	equ	0xFEA
 15363                           fsr0l	equ	0xFE9
 15364                           wreg	equ	0xFE8
 15365                           fsr1h	equ	0xFE2
 15366                           fsr1l	equ	0xFE1
 15367                           indf2	equ	0xFDF
 15368                           postinc2	equ	0xFDE
 15369                           postdec2	equ	0xFDD
 15370                           fsr2h	equ	0xFDA
 15371                           fsr2l	equ	0xFD9
 15372                           status	equ	0xFD8
 15373                           
 15374 ;; *************** function i2__tdiv_to_l_ *****************
 15375 ;; Defined at:
 15376 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;  f1              3    0[COMRAM] float 
 15379 ;;  f2              3    3[COMRAM] float 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 15382 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 15383 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  4    0[COMRAM] unsigned long 
 15386 ;; Registers used:
 15387 ;;		wreg, status,2, status,0
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15396 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15397 ;;Total ram usage:       15 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		i2_printf
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text49
 15407  003BE6                     __ptext49:
 15408                           	opt stack 0
 15409  003BE6                     i2__tdiv_to_l_:
 15410                           	opt stack 23
 15411                           
 15412                           ;incstack = 0
 15413  003BE6  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 15414  003BEA  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15415  003BEC  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15416  003BEE  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 15417  003BF0  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15418  003BF2  E301               	bnc	u655_41
 15419  003BF4  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15420  003BF6                     u655_41:
 15421  003BF6  5007               	movf	??i2__tdiv_to_l_,w,c
 15422  003BF8  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 15423  003BFA  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15424  003BFC  A4D8               	btfss	status,2,c
 15425  003BFE  D009               	goto	i2l5944
 15426  003C00  0E00               	movlw	0
 15427  003C02  6E01               	movwf	?i2__tdiv_to_l_,c
 15428  003C04  0E00               	movlw	0
 15429  003C06  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15430  003C08  0E00               	movlw	0
 15431  003C0A  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15432  003C0C  0E00               	movlw	0
 15433  003C0E  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15434  003C10  0012               	return	
 15435  003C12                     i2l5944:
 15436  003C12  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 15437  003C16  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 15438  003C18  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 15439  003C1A  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 15440  003C1C  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 15441  003C1E  E301               	bnc	u657_41
 15442  003C20  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 15443  003C22                     u657_41:
 15444  003C22  5007               	movf	??i2__tdiv_to_l_,w,c
 15445  003C24  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15446  003C26  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15447  003C28  A4D8               	btfss	status,2,c
 15448  003C2A  D009               	goto	i2l5950
 15449  003C2C  0E00               	movlw	0
 15450  003C2E  6E01               	movwf	?i2__tdiv_to_l_,c
 15451  003C30  0E00               	movlw	0
 15452  003C32  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15453  003C34  0E00               	movlw	0
 15454  003C36  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15455  003C38  0E00               	movlw	0
 15456  003C3A  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15457  003C3C  0012               	return	
 15458  003C3E                     i2l5950:
 15459  003C3E  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 15460  003C40  0EFF               	movlw	255
 15461  003C42  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 15462  003C44  0EFF               	movlw	255
 15463  003C46  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 15464  003C48  0E00               	movlw	0
 15465  003C4A  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 15466  003C4C  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 15467  003C4E  0EFF               	movlw	255
 15468  003C50  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 15469  003C52  0EFF               	movlw	255
 15470  003C54  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 15471  003C56  0E00               	movlw	0
 15472  003C58  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 15473  003C5A  0E00               	movlw	0
 15474  003C5C  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 15475  003C5E  0E00               	movlw	0
 15476  003C60  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 15477  003C62  0E00               	movlw	0
 15478  003C64  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 15479  003C66  0E00               	movlw	0
 15480  003C68  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 15481  003C6A  0E7F               	movlw	127
 15482  003C6C  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15483  003C6E  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 15484  003C70  0F98               	addlw	152
 15485  003C72  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 15486  003C74  0E18               	movlw	24
 15487  003C76  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 15488  003C78                     i2l909:
 15489  003C78  90D8               	bcf	status,0,c
 15490  003C7A  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15491  003C7C  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15492  003C7E  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15493  003C80  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15494  003C82  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15495  003C84  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 15496  003C86  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15497  003C88  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 15498  003C8A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15499  003C8C  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 15500  003C8E  A0D8               	btfss	status,0,c
 15501  003C90  D007               	goto	i2l910
 15502  003C92  5004               	movf	i2__tdiv_to_l_@f2,w,c
 15503  003C94  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 15504  003C96  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 15505  003C98  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 15506  003C9A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 15507  003C9C  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 15508  003C9E  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 15509  003CA0                     i2l910:
 15510  003CA0  90D8               	bcf	status,0,c
 15511  003CA2  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 15512  003CA4  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 15513  003CA6  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 15514  003CA8  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 15515  003CAA  D7E6               	goto	i2l909
 15516  003CAC  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 15517  003CAE  D016               	goto	i2l5984
 15518  003CB0  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15519  003CB2  0A80               	xorlw	128
 15520  003CB4  0F97               	addlw	151
 15521  003CB6  B0D8               	btfsc	status,0,c
 15522  003CB8  D009               	goto	i2l5980
 15523  003CBA  0E00               	movlw	0
 15524  003CBC  6E01               	movwf	?i2__tdiv_to_l_,c
 15525  003CBE  0E00               	movlw	0
 15526  003CC0  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15527  003CC2  0E00               	movlw	0
 15528  003CC4  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15529  003CC6  0E00               	movlw	0
 15530  003CC8  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15531  003CCA  0012               	return	
 15532  003CCC                     i2l5980:
 15533  003CCC  90D8               	bcf	status,0,c
 15534  003CCE  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 15535  003CD0  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 15536  003CD2  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 15537  003CD4  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 15538  003CD6  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 15539  003CD8  D7F9               	goto	i2l5980
 15540  003CDA  D015               	goto	i2l916
 15541  003CDC                     i2l5984:
 15542  003CDC  0E17               	movlw	23
 15543  003CDE  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 15544  003CE0  D00F               	goto	i2l5992
 15545  003CE2  0E00               	movlw	0
 15546  003CE4  6E01               	movwf	?i2__tdiv_to_l_,c
 15547  003CE6  0E00               	movlw	0
 15548  003CE8  6E02               	movwf	?i2__tdiv_to_l_+1,c
 15549  003CEA  0E00               	movlw	0
 15550  003CEC  6E03               	movwf	?i2__tdiv_to_l_+2,c
 15551  003CEE  0E00               	movlw	0
 15552  003CF0  6E04               	movwf	?i2__tdiv_to_l_+3,c
 15553  003CF2  0012               	return	
 15554  003CF4                     i2l5990:
 15555  003CF4  90D8               	bcf	status,0,c
 15556  003CF6  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 15557  003CF8  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 15558  003CFA  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 15559  003CFC  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 15560  003CFE  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 15561  003D00                     i2l5992:
 15562  003D00  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 15563  003D02  A4D8               	btfss	status,2,c
 15564  003D04  D7F7               	goto	i2l5990
 15565  003D06                     i2l916:
 15566  003D06  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 15567  003D0A  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 15568  003D0E  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 15569  003D12  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 15570  003D16  0012               	return		;funcret
 15571  003D18                     __end_ofi2__tdiv_to_l_:
 15572                           	opt stack 0
 15573                           pclatu	equ	0xFFB
 15574                           pclath	equ	0xFFA
 15575                           tblptru	equ	0xFF8
 15576                           tblptrh	equ	0xFF7
 15577                           tblptrl	equ	0xFF6
 15578                           tablat	equ	0xFF5
 15579                           prodh	equ	0xFF4
 15580                           prodl	equ	0xFF3
 15581                           intcon	equ	0xFF2
 15582                           intcon2	equ	0xFF1
 15583                           intcon3	equ	0xFF0
 15584                           postinc0	equ	0xFEE
 15585                           fsr0h	equ	0xFEA
 15586                           fsr0l	equ	0xFE9
 15587                           wreg	equ	0xFE8
 15588                           fsr1h	equ	0xFE2
 15589                           fsr1l	equ	0xFE1
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8
 15596                           
 15597 ;; *************** function i2__div_to_l_ *****************
 15598 ;; Defined at:
 15599 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  f1              3    0[COMRAM] unsigned long 
 15602 ;;  f2              3    3[COMRAM] unsigned long 
 15603 ;; Auto vars:     Size  Location     Type
 15604 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 15605 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 15606 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 15607 ;; Return value:  Size  Location     Type
 15608 ;;                  4    0[COMRAM] unsigned long 
 15609 ;; Registers used:
 15610 ;;		wreg, status,2, status,0
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15616 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15617 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;Total ram usage:       12 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; This function calls:
 15623 ;;		Nothing
 15624 ;; This function is called by:
 15625 ;;		i2_printf
 15626 ;; This function uses a non-reentrant model
 15627 ;;
 15628                           
 15629                           	psect	text50
 15630  003D18                     __ptext50:
 15631                           	opt stack 0
 15632  003D18                     i2__div_to_l_:
 15633                           	opt stack 23
 15634                           
 15635                           ;incstack = 0
 15636  003D18  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 15637  003D1A  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 15638  003D1C  6E0C               	movwf	i2__div_to_l_@exp1,c
 15639  003D1E  500C               	movf	i2__div_to_l_@exp1,w,c
 15640  003D20  A4D8               	btfss	status,2,c
 15641  003D22  D009               	goto	i2l5884
 15642  003D24  0E00               	movlw	0
 15643  003D26  6E01               	movwf	?i2__div_to_l_,c
 15644  003D28  0E00               	movlw	0
 15645  003D2A  6E02               	movwf	?i2__div_to_l_+1,c
 15646  003D2C  0E00               	movlw	0
 15647  003D2E  6E03               	movwf	?i2__div_to_l_+2,c
 15648  003D30  0E00               	movlw	0
 15649  003D32  6E04               	movwf	?i2__div_to_l_+3,c
 15650  003D34  0012               	return	
 15651  003D36                     i2l5884:
 15652  003D36  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 15653  003D38  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 15654  003D3A  6E0B               	movwf	i2__div_to_l_@cntr,c
 15655  003D3C  500B               	movf	i2__div_to_l_@cntr,w,c
 15656  003D3E  A4D8               	btfss	status,2,c
 15657  003D40  D009               	goto	i2l5890
 15658  003D42  0E00               	movlw	0
 15659  003D44  6E01               	movwf	?i2__div_to_l_,c
 15660  003D46  0E00               	movlw	0
 15661  003D48  6E02               	movwf	?i2__div_to_l_+1,c
 15662  003D4A  0E00               	movlw	0
 15663  003D4C  6E03               	movwf	?i2__div_to_l_+2,c
 15664  003D4E  0E00               	movlw	0
 15665  003D50  6E04               	movwf	?i2__div_to_l_+3,c
 15666  003D52  0012               	return	
 15667  003D54                     i2l5890:
 15668  003D54  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 15669  003D56  0EFF               	movlw	255
 15670  003D58  1601               	andwf	i2__div_to_l_@f1,f,c
 15671  003D5A  0EFF               	movlw	255
 15672  003D5C  1602               	andwf	i2__div_to_l_@f1+1,f,c
 15673  003D5E  0EFF               	movlw	255
 15674  003D60  1603               	andwf	i2__div_to_l_@f1+2,f,c
 15675  003D62  0E00               	movlw	0
 15676  003D64  1604               	andwf	i2__div_to_l_@f1+3,f,c
 15677  003D66  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 15678  003D68  0EFF               	movlw	255
 15679  003D6A  1604               	andwf	i2__div_to_l_@f2,f,c
 15680  003D6C  0EFF               	movlw	255
 15681  003D6E  1605               	andwf	i2__div_to_l_@f2+1,f,c
 15682  003D70  0EFF               	movlw	255
 15683  003D72  1606               	andwf	i2__div_to_l_@f2+2,f,c
 15684  003D74  0E00               	movlw	0
 15685  003D76  1607               	andwf	i2__div_to_l_@f2+3,f,c
 15686  003D78  0E00               	movlw	0
 15687  003D7A  6E07               	movwf	i2__div_to_l_@quot,c
 15688  003D7C  0E00               	movlw	0
 15689  003D7E  6E08               	movwf	i2__div_to_l_@quot+1,c
 15690  003D80  0E00               	movlw	0
 15691  003D82  6E09               	movwf	i2__div_to_l_@quot+2,c
 15692  003D84  0E00               	movlw	0
 15693  003D86  6E0A               	movwf	i2__div_to_l_@quot+3,c
 15694  003D88  0E7F               	movlw	127
 15695  003D8A  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15696  003D8C  500B               	movf	i2__div_to_l_@cntr,w,c
 15697  003D8E  0FA0               	addlw	160
 15698  003D90  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 15699  003D92  0E20               	movlw	32
 15700  003D94  6E0B               	movwf	i2__div_to_l_@cntr,c
 15701  003D96                     i2l5904:
 15702  003D96  90D8               	bcf	status,0,c
 15703  003D98  3607               	rlcf	i2__div_to_l_@quot,f,c
 15704  003D9A  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15705  003D9C  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15706  003D9E  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15707  003DA0  5004               	movf	i2__div_to_l_@f2,w,c
 15708  003DA2  5C01               	subwf	i2__div_to_l_@f1,w,c
 15709  003DA4  5005               	movf	i2__div_to_l_@f2+1,w,c
 15710  003DA6  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 15711  003DA8  5006               	movf	i2__div_to_l_@f2+2,w,c
 15712  003DAA  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 15713  003DAC  5007               	movf	i2__div_to_l_@f2+3,w,c
 15714  003DAE  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 15715  003DB0  A0D8               	btfss	status,0,c
 15716  003DB2  D009               	goto	i2l5912
 15717  003DB4  5004               	movf	i2__div_to_l_@f2,w,c
 15718  003DB6  5E01               	subwf	i2__div_to_l_@f1,f,c
 15719  003DB8  5005               	movf	i2__div_to_l_@f2+1,w,c
 15720  003DBA  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 15721  003DBC  5006               	movf	i2__div_to_l_@f2+2,w,c
 15722  003DBE  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 15723  003DC0  5007               	movf	i2__div_to_l_@f2+3,w,c
 15724  003DC2  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 15725  003DC4  8007               	bsf	i2__div_to_l_@quot,0,c
 15726  003DC6                     i2l5912:
 15727  003DC6  90D8               	bcf	status,0,c
 15728  003DC8  3601               	rlcf	i2__div_to_l_@f1,f,c
 15729  003DCA  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 15730  003DCC  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 15731  003DCE  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 15732  003DD0  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 15733  003DD2  D7E1               	goto	i2l5904
 15734  003DD4  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 15735  003DD6  D016               	goto	i2l5928
 15736  003DD8  500C               	movf	i2__div_to_l_@exp1,w,c
 15737  003DDA  0A80               	xorlw	128
 15738  003DDC  0F9F               	addlw	159
 15739  003DDE  B0D8               	btfsc	status,0,c
 15740  003DE0  D009               	goto	i2l5924
 15741  003DE2  0E00               	movlw	0
 15742  003DE4  6E01               	movwf	?i2__div_to_l_,c
 15743  003DE6  0E00               	movlw	0
 15744  003DE8  6E02               	movwf	?i2__div_to_l_+1,c
 15745  003DEA  0E00               	movlw	0
 15746  003DEC  6E03               	movwf	?i2__div_to_l_+2,c
 15747  003DEE  0E00               	movlw	0
 15748  003DF0  6E04               	movwf	?i2__div_to_l_+3,c
 15749  003DF2  0012               	return	
 15750  003DF4                     i2l5924:
 15751  003DF4  90D8               	bcf	status,0,c
 15752  003DF6  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 15753  003DF8  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 15754  003DFA  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 15755  003DFC  3207               	rrcf	i2__div_to_l_@quot,f,c
 15756  003DFE  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 15757  003E00  D7F9               	goto	i2l5924
 15758  003E02  D015               	goto	i2l812
 15759  003E04                     i2l5928:
 15760  003E04  0E1F               	movlw	31
 15761  003E06  640C               	cpfsgt	i2__div_to_l_@exp1,c
 15762  003E08  D00F               	goto	i2l5936
 15763  003E0A  0E00               	movlw	0
 15764  003E0C  6E01               	movwf	?i2__div_to_l_,c
 15765  003E0E  0E00               	movlw	0
 15766  003E10  6E02               	movwf	?i2__div_to_l_+1,c
 15767  003E12  0E00               	movlw	0
 15768  003E14  6E03               	movwf	?i2__div_to_l_+2,c
 15769  003E16  0E00               	movlw	0
 15770  003E18  6E04               	movwf	?i2__div_to_l_+3,c
 15771  003E1A  0012               	return	
 15772  003E1C                     i2l5934:
 15773  003E1C  90D8               	bcf	status,0,c
 15774  003E1E  3607               	rlcf	i2__div_to_l_@quot,f,c
 15775  003E20  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 15776  003E22  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 15777  003E24  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 15778  003E26  060C               	decf	i2__div_to_l_@exp1,f,c
 15779  003E28                     i2l5936:
 15780  003E28  500C               	movf	i2__div_to_l_@exp1,w,c
 15781  003E2A  A4D8               	btfss	status,2,c
 15782  003E2C  D7F7               	goto	i2l5934
 15783  003E2E                     i2l812:
 15784  003E2E  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 15785  003E32  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 15786  003E36  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 15787  003E3A  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 15788  003E3E  0012               	return		;funcret
 15789  003E40                     __end_ofi2__div_to_l_:
 15790                           	opt stack 0
 15791                           pclatu	equ	0xFFB
 15792                           pclath	equ	0xFFA
 15793                           tblptru	equ	0xFF8
 15794                           tblptrh	equ	0xFF7
 15795                           tblptrl	equ	0xFF6
 15796                           tablat	equ	0xFF5
 15797                           prodh	equ	0xFF4
 15798                           prodl	equ	0xFF3
 15799                           intcon	equ	0xFF2
 15800                           intcon2	equ	0xFF1
 15801                           intcon3	equ	0xFF0
 15802                           postinc0	equ	0xFEE
 15803                           fsr0h	equ	0xFEA
 15804                           fsr0l	equ	0xFE9
 15805                           wreg	equ	0xFE8
 15806                           fsr1h	equ	0xFE2
 15807                           fsr1l	equ	0xFE1
 15808                           indf2	equ	0xFDF
 15809                           postinc2	equ	0xFDE
 15810                           postdec2	equ	0xFDD
 15811                           fsr2h	equ	0xFDA
 15812                           fsr2l	equ	0xFD9
 15813                           status	equ	0xFD8
 15814                           
 15815 ;; *************** function i2___llmod *****************
 15816 ;; Defined at:
 15817 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
 15818 ;; Parameters:    Size  Location     Type
 15819 ;;  dividend        4   13[COMRAM] unsigned long 
 15820 ;;  divisor         4   17[COMRAM] unsigned long 
 15821 ;; Auto vars:     Size  Location     Type
 15822 ;;  __llmod         1   21[COMRAM] unsigned char 
 15823 ;; Return value:  Size  Location     Type
 15824 ;;                  4   13[COMRAM] unsigned long 
 15825 ;; Registers used:
 15826 ;;		wreg, status,2, status,0
 15827 ;; Tracked objects:
 15828 ;;		On entry : 0/0
 15829 ;;		On exit  : 0/0
 15830 ;;		Unchanged: 0/0
 15831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15832 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;Total ram usage:        9 bytes
 15837 ;; Hardware stack levels used:    1
 15838 ;; This function calls:
 15839 ;;		Nothing
 15840 ;; This function is called by:
 15841 ;;		i2_printf
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           	psect	text51
 15846  00537A                     __ptext51:
 15847                           	opt stack 0
 15848  00537A                     i2___llmod:
 15849                           	opt stack 23
 15850                           
 15851                           ;incstack = 0
 15852  00537A  5012               	movf	i2___llmod@divisor,w,c
 15853  00537C  1013               	iorwf	i2___llmod@divisor+1,w,c
 15854  00537E  1014               	iorwf	i2___llmod@divisor+2,w,c
 15855  005380  1015               	iorwf	i2___llmod@divisor+3,w,c
 15856  005382  B4D8               	btfsc	status,2,c
 15857  005384  D024               	goto	i2l1001
 15858  005386  0E01               	movlw	1
 15859  005388  6E16               	movwf	i2___llmod@counter,c
 15860  00538A  D006               	goto	i2l6034
 15861  00538C                     i2l6032:
 15862  00538C  90D8               	bcf	status,0,c
 15863  00538E  3612               	rlcf	i2___llmod@divisor,f,c
 15864  005390  3613               	rlcf	i2___llmod@divisor+1,f,c
 15865  005392  3614               	rlcf	i2___llmod@divisor+2,f,c
 15866  005394  3615               	rlcf	i2___llmod@divisor+3,f,c
 15867  005396  2A16               	incf	i2___llmod@counter,f,c
 15868  005398                     i2l6034:
 15869  005398  AE15               	btfss	i2___llmod@divisor+3,7,c
 15870  00539A  D7F8               	goto	i2l6032
 15871  00539C                     i2l6036:
 15872  00539C  5012               	movf	i2___llmod@divisor,w,c
 15873  00539E  5C0E               	subwf	i2___llmod@dividend,w,c
 15874  0053A0  5013               	movf	i2___llmod@divisor+1,w,c
 15875  0053A2  580F               	subwfb	i2___llmod@dividend+1,w,c
 15876  0053A4  5014               	movf	i2___llmod@divisor+2,w,c
 15877  0053A6  5810               	subwfb	i2___llmod@dividend+2,w,c
 15878  0053A8  5015               	movf	i2___llmod@divisor+3,w,c
 15879  0053AA  5811               	subwfb	i2___llmod@dividend+3,w,c
 15880  0053AC  A0D8               	btfss	status,0,c
 15881  0053AE  D008               	goto	i2l6040
 15882  0053B0  5012               	movf	i2___llmod@divisor,w,c
 15883  0053B2  5E0E               	subwf	i2___llmod@dividend,f,c
 15884  0053B4  5013               	movf	i2___llmod@divisor+1,w,c
 15885  0053B6  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 15886  0053B8  5014               	movf	i2___llmod@divisor+2,w,c
 15887  0053BA  5A10               	subwfb	i2___llmod@dividend+2,f,c
 15888  0053BC  5015               	movf	i2___llmod@divisor+3,w,c
 15889  0053BE  5A11               	subwfb	i2___llmod@dividend+3,f,c
 15890  0053C0                     i2l6040:
 15891  0053C0  90D8               	bcf	status,0,c
 15892  0053C2  3215               	rrcf	i2___llmod@divisor+3,f,c
 15893  0053C4  3214               	rrcf	i2___llmod@divisor+2,f,c
 15894  0053C6  3213               	rrcf	i2___llmod@divisor+1,f,c
 15895  0053C8  3212               	rrcf	i2___llmod@divisor,f,c
 15896  0053CA  2E16               	decfsz	i2___llmod@counter,f,c
 15897  0053CC  D7E7               	goto	i2l6036
 15898  0053CE                     i2l1001:
 15899  0053CE  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 15900  0053D2  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 15901  0053D6  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 15902  0053DA  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 15903  0053DE  0012               	return		;funcret
 15904  0053E0                     __end_ofi2___llmod:
 15905                           	opt stack 0
 15906                           pclatu	equ	0xFFB
 15907                           pclath	equ	0xFFA
 15908                           tblptru	equ	0xFF8
 15909                           tblptrh	equ	0xFF7
 15910                           tblptrl	equ	0xFF6
 15911                           tablat	equ	0xFF5
 15912                           prodh	equ	0xFF4
 15913                           prodl	equ	0xFF3
 15914                           intcon	equ	0xFF2
 15915                           intcon2	equ	0xFF1
 15916                           intcon3	equ	0xFF0
 15917                           postinc0	equ	0xFEE
 15918                           fsr0h	equ	0xFEA
 15919                           fsr0l	equ	0xFE9
 15920                           wreg	equ	0xFE8
 15921                           fsr1h	equ	0xFE2
 15922                           fsr1l	equ	0xFE1
 15923                           indf2	equ	0xFDF
 15924                           postinc2	equ	0xFDE
 15925                           postdec2	equ	0xFDD
 15926                           fsr2h	equ	0xFDA
 15927                           fsr2l	equ	0xFD9
 15928                           status	equ	0xFD8
 15929                           
 15930 ;; *************** function i2___lldiv *****************
 15931 ;; Defined at:
 15932 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 15933 ;; Parameters:    Size  Location     Type
 15934 ;;  dividend        4    0[COMRAM] unsigned long 
 15935 ;;  divisor         4    4[COMRAM] unsigned long 
 15936 ;; Auto vars:     Size  Location     Type
 15937 ;;  __lldiv         4    8[COMRAM] unsigned long 
 15938 ;;  __lldiv         1   12[COMRAM] unsigned char 
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  4    0[COMRAM] unsigned long 
 15941 ;; Registers used:
 15942 ;;		wreg, status,2, status,0
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15948 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15949 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15951 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15952 ;;Total ram usage:       13 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; This function calls:
 15955 ;;		Nothing
 15956 ;; This function is called by:
 15957 ;;		i2_printf
 15958 ;; This function uses a non-reentrant model
 15959 ;;
 15960                           
 15961                           	psect	text52
 15962  00512C                     __ptext52:
 15963                           	opt stack 0
 15964  00512C                     i2___lldiv:
 15965                           	opt stack 23
 15966                           
 15967                           ;incstack = 0
 15968  00512C  0E00               	movlw	0
 15969  00512E  6E09               	movwf	i2___lldiv@quotient,c
 15970  005130  0E00               	movlw	0
 15971  005132  6E0A               	movwf	i2___lldiv@quotient+1,c
 15972  005134  0E00               	movlw	0
 15973  005136  6E0B               	movwf	i2___lldiv@quotient+2,c
 15974  005138  0E00               	movlw	0
 15975  00513A  6E0C               	movwf	i2___lldiv@quotient+3,c
 15976  00513C  5005               	movf	i2___lldiv@divisor,w,c
 15977  00513E  1006               	iorwf	i2___lldiv@divisor+1,w,c
 15978  005140  1007               	iorwf	i2___lldiv@divisor+2,w,c
 15979  005142  1008               	iorwf	i2___lldiv@divisor+3,w,c
 15980  005144  B4D8               	btfsc	status,2,c
 15981  005146  D02A               	goto	i2l991
 15982  005148  0E01               	movlw	1
 15983  00514A  6E0D               	movwf	i2___lldiv@counter,c
 15984  00514C  D006               	goto	i2l6014
 15985  00514E                     i2l6012:
 15986  00514E  90D8               	bcf	status,0,c
 15987  005150  3605               	rlcf	i2___lldiv@divisor,f,c
 15988  005152  3606               	rlcf	i2___lldiv@divisor+1,f,c
 15989  005154  3607               	rlcf	i2___lldiv@divisor+2,f,c
 15990  005156  3608               	rlcf	i2___lldiv@divisor+3,f,c
 15991  005158  2A0D               	incf	i2___lldiv@counter,f,c
 15992  00515A                     i2l6014:
 15993  00515A  AE08               	btfss	i2___lldiv@divisor+3,7,c
 15994  00515C  D7F8               	goto	i2l6012
 15995  00515E                     i2l6016:
 15996  00515E  90D8               	bcf	status,0,c
 15997  005160  3609               	rlcf	i2___lldiv@quotient,f,c
 15998  005162  360A               	rlcf	i2___lldiv@quotient+1,f,c
 15999  005164  360B               	rlcf	i2___lldiv@quotient+2,f,c
 16000  005166  360C               	rlcf	i2___lldiv@quotient+3,f,c
 16001  005168  5005               	movf	i2___lldiv@divisor,w,c
 16002  00516A  5C01               	subwf	i2___lldiv@dividend,w,c
 16003  00516C  5006               	movf	i2___lldiv@divisor+1,w,c
 16004  00516E  5802               	subwfb	i2___lldiv@dividend+1,w,c
 16005  005170  5007               	movf	i2___lldiv@divisor+2,w,c
 16006  005172  5803               	subwfb	i2___lldiv@dividend+2,w,c
 16007  005174  5008               	movf	i2___lldiv@divisor+3,w,c
 16008  005176  5804               	subwfb	i2___lldiv@dividend+3,w,c
 16009  005178  A0D8               	btfss	status,0,c
 16010  00517A  D009               	goto	i2l6024
 16011  00517C  5005               	movf	i2___lldiv@divisor,w,c
 16012  00517E  5E01               	subwf	i2___lldiv@dividend,f,c
 16013  005180  5006               	movf	i2___lldiv@divisor+1,w,c
 16014  005182  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 16015  005184  5007               	movf	i2___lldiv@divisor+2,w,c
 16016  005186  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 16017  005188  5008               	movf	i2___lldiv@divisor+3,w,c
 16018  00518A  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 16019  00518C  8009               	bsf	i2___lldiv@quotient,0,c
 16020  00518E                     i2l6024:
 16021  00518E  90D8               	bcf	status,0,c
 16022  005190  3208               	rrcf	i2___lldiv@divisor+3,f,c
 16023  005192  3207               	rrcf	i2___lldiv@divisor+2,f,c
 16024  005194  3206               	rrcf	i2___lldiv@divisor+1,f,c
 16025  005196  3205               	rrcf	i2___lldiv@divisor,f,c
 16026  005198  2E0D               	decfsz	i2___lldiv@counter,f,c
 16027  00519A  D7E1               	goto	i2l6016
 16028  00519C                     i2l991:
 16029  00519C  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 16030  0051A0  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 16031  0051A4  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 16032  0051A8  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 16033  0051AC  0012               	return		;funcret
 16034  0051AE                     __end_ofi2___lldiv:
 16035                           	opt stack 0
 16036                           pclatu	equ	0xFFB
 16037                           pclath	equ	0xFFA
 16038                           tblptru	equ	0xFF8
 16039                           tblptrh	equ	0xFF7
 16040                           tblptrl	equ	0xFF6
 16041                           tablat	equ	0xFF5
 16042                           prodh	equ	0xFF4
 16043                           prodl	equ	0xFF3
 16044                           intcon	equ	0xFF2
 16045                           intcon2	equ	0xFF1
 16046                           intcon3	equ	0xFF0
 16047                           postinc0	equ	0xFEE
 16048                           fsr0h	equ	0xFEA
 16049                           fsr0l	equ	0xFE9
 16050                           wreg	equ	0xFE8
 16051                           fsr1h	equ	0xFE2
 16052                           fsr1l	equ	0xFE1
 16053                           indf2	equ	0xFDF
 16054                           postinc2	equ	0xFDE
 16055                           postdec2	equ	0xFDD
 16056                           fsr2h	equ	0xFDA
 16057                           fsr2l	equ	0xFD9
 16058                           status	equ	0xFD8
 16059                           
 16060 ;; *************** function i2_lcdInst *****************
 16061 ;; Defined at:
 16062 ;;		line 26 in file "lcd.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;  data            1    wreg     unsigned char 
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  data            1    2[COMRAM] unsigned char 
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  1    wreg      void 
 16069 ;; Registers used:
 16070 ;;		wreg, status,2, status,0, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16080 ;;Total ram usage:        1 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    1
 16083 ;; This function calls:
 16084 ;;		i2_lcdNibble
 16085 ;; This function is called by:
 16086 ;;		_isr
 16087 ;; This function uses a non-reentrant model
 16088 ;;
 16089                           
 16090                           	psect	text53
 16091  005932                     __ptext53:
 16092                           	opt stack 0
 16093  005932                     i2_lcdInst:
 16094                           	opt stack 23
 16095                           
 16096                           ;incstack = 0
 16097                           ;i2lcdInst@data stored from wreg
 16098  005932  6E03               	movwf	i2lcdInst@data,c
 16099                           
 16100                           ;lcd.c: 27: LATDbits.LATD2 = 0;
 16101  005934  948C               	bcf	3980,2,c	;volatile
 16102                           
 16103                           ;lcd.c: 28: lcdNibble(data);
 16104  005936  5003               	movf	i2lcdInst@data,w,c
 16105  005938  ECA6  F02A         	call	i2_lcdNibble
 16106  00593C  0012               	return		;funcret
 16107  00593E                     __end_ofi2_lcdInst:
 16108                           	opt stack 0
 16109                           pclatu	equ	0xFFB
 16110                           pclath	equ	0xFFA
 16111                           tblptru	equ	0xFF8
 16112                           tblptrh	equ	0xFF7
 16113                           tblptrl	equ	0xFF6
 16114                           tablat	equ	0xFF5
 16115                           prodh	equ	0xFF4
 16116                           prodl	equ	0xFF3
 16117                           intcon	equ	0xFF2
 16118                           intcon2	equ	0xFF1
 16119                           intcon3	equ	0xFF0
 16120                           postinc0	equ	0xFEE
 16121                           fsr0h	equ	0xFEA
 16122                           fsr0l	equ	0xFE9
 16123                           wreg	equ	0xFE8
 16124                           fsr1h	equ	0xFE2
 16125                           fsr1l	equ	0xFE1
 16126                           indf2	equ	0xFDF
 16127                           postinc2	equ	0xFDE
 16128                           postdec2	equ	0xFDD
 16129                           fsr2h	equ	0xFDA
 16130                           fsr2l	equ	0xFD9
 16131                           status	equ	0xFD8
 16132                           
 16133 ;; *************** function i2_lcdNibble *****************
 16134 ;; Defined at:
 16135 ;;		line 36 in file "lcd.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;  data            1    wreg     unsigned char 
 16138 ;; Auto vars:     Size  Location     Type
 16139 ;;  data            1    1[COMRAM] unsigned char 
 16140 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 16141 ;; Return value:  Size  Location     Type
 16142 ;;                  1    wreg      void 
 16143 ;; Registers used:
 16144 ;;		wreg, status,2, status,0
 16145 ;; Tracked objects:
 16146 ;;		On entry : 0/0
 16147 ;;		On exit  : 0/0
 16148 ;;		Unchanged: 0/0
 16149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16154 ;;Total ram usage:        2 bytes
 16155 ;; Hardware stack levels used:    1
 16156 ;; This function calls:
 16157 ;;		Nothing
 16158 ;; This function is called by:
 16159 ;;		i2_lcdInst
 16160 ;;		i2_putch
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           	psect	text54
 16165  00554C                     __ptext54:
 16166                           	opt stack 0
 16167  00554C                     i2_lcdNibble:
 16168                           	opt stack 22
 16169                           
 16170                           ;incstack = 0
 16171                           ;i2lcdNibble@data stored from wreg
 16172  00554C  6E02               	movwf	i2lcdNibble@data,c
 16173                           
 16174                           ;lcd.c: 38: char temp = data & 0xF0;
 16175  00554E  5002               	movf	i2lcdNibble@data,w,c
 16176  005550  0BF0               	andlw	240
 16177  005552  6E01               	movwf	i2lcdNibble@temp,c
 16178                           
 16179                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16180  005554  508C               	movf	3980,w,c	;volatile
 16181  005556  0B0F               	andlw	15
 16182  005558  6E8C               	movwf	3980,c	;volatile
 16183                           
 16184                           ;lcd.c: 40: LATD = temp | LATD;
 16185  00555A  5001               	movf	i2lcdNibble@temp,w,c
 16186  00555C  108C               	iorwf	3980,w,c	;volatile
 16187  00555E  6E8C               	movwf	3980,c	;volatile
 16188                           
 16189                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 16190  005560  968C               	bcf	3980,3,c	;volatile
 16191                           
 16192                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16193  005562  0E19               	movlw	25
 16194  005564                     i2u918_47:
 16195  005564  2EE8               	decfsz	wreg,f,c
 16196  005566  D7FE               	bra	i2u918_47
 16197                           
 16198                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 16199  005568  868C               	bsf	3980,3,c	;volatile
 16200                           
 16201                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16202  00556A  0E19               	movlw	25
 16203  00556C                     i2u919_47:
 16204  00556C  2EE8               	decfsz	wreg,f,c
 16205  00556E  D7FE               	bra	i2u919_47
 16206                           
 16207                           ;lcd.c: 47: data = data << 4;
 16208  005570  3802               	swapf	i2lcdNibble@data,w,c
 16209  005572  0BF0               	andlw	240
 16210  005574  6E02               	movwf	i2lcdNibble@data,c
 16211                           
 16212                           ;lcd.c: 49: temp = data & 0xF0;
 16213  005576  5002               	movf	i2lcdNibble@data,w,c
 16214  005578  0BF0               	andlw	240
 16215  00557A  6E01               	movwf	i2lcdNibble@temp,c
 16216                           
 16217                           ;lcd.c: 50: LATD = LATD & 0x0F;
 16218  00557C  508C               	movf	3980,w,c	;volatile
 16219  00557E  0B0F               	andlw	15
 16220  005580  6E8C               	movwf	3980,c	;volatile
 16221                           
 16222                           ;lcd.c: 51: LATD = temp | LATD;
 16223  005582  5001               	movf	i2lcdNibble@temp,w,c
 16224  005584  108C               	iorwf	3980,w,c	;volatile
 16225  005586  6E8C               	movwf	3980,c	;volatile
 16226                           
 16227                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 16228  005588  968C               	bcf	3980,3,c	;volatile
 16229                           
 16230                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16231  00558A  0E19               	movlw	25
 16232  00558C                     i2u920_47:
 16233  00558C  2EE8               	decfsz	wreg,f,c
 16234  00558E  D7FE               	bra	i2u920_47
 16235                           
 16236                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 16237  005590  868C               	bsf	3980,3,c	;volatile
 16238                           
 16239                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
 16240  005592  0E19               	movlw	25
 16241  005594                     i2u921_47:
 16242  005594  2EE8               	decfsz	wreg,f,c
 16243  005596  D7FE               	bra	i2u921_47
 16244  005598  0012               	return		;funcret
 16245  00559A                     __end_ofi2_lcdNibble:
 16246                           	opt stack 0
 16247                           pclatu	equ	0xFFB
 16248                           pclath	equ	0xFFA
 16249                           tblptru	equ	0xFF8
 16250                           tblptrh	equ	0xFF7
 16251                           tblptrl	equ	0xFF6
 16252                           tablat	equ	0xFF5
 16253                           prodh	equ	0xFF4
 16254                           prodl	equ	0xFF3
 16255                           intcon	equ	0xFF2
 16256                           intcon2	equ	0xFF1
 16257                           intcon3	equ	0xFF0
 16258                           postinc0	equ	0xFEE
 16259                           fsr0h	equ	0xFEA
 16260                           fsr0l	equ	0xFE9
 16261                           wreg	equ	0xFE8
 16262                           fsr1h	equ	0xFE2
 16263                           fsr1l	equ	0xFE1
 16264                           indf2	equ	0xFDF
 16265                           postinc2	equ	0xFDE
 16266                           postdec2	equ	0xFDD
 16267                           fsr2h	equ	0xFDA
 16268                           fsr2l	equ	0xFD9
 16269                           status	equ	0xFD8
 16270                           
 16271 ;; *************** function _read_time *****************
 16272 ;; Defined at:
 16273 ;;		line 305 in file "main.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;		None
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  i               1    3[COMRAM] unsigned char 
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  1    wreg      void 
 16280 ;; Registers used:
 16281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;Total ram usage:        1 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    2
 16294 ;; This function calls:
 16295 ;;		i2_I2C_Master_Read
 16296 ;;		i2_I2C_Master_Start
 16297 ;;		i2_I2C_Master_Stop
 16298 ;;		i2_I2C_Master_Write
 16299 ;; This function is called by:
 16300 ;;		_isr
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           	psect	text55
 16305  005312                     __ptext55:
 16306                           	opt stack 0
 16307  005312                     _read_time:
 16308                           	opt stack 22
 16309                           
 16310                           ;main.c: 307: I2C_Master_Start();
 16311                           
 16312                           ;incstack = 0
 16313  005312  ECB5  F02C         	call	i2_I2C_Master_Start	;wreg free
 16314                           
 16315                           ;main.c: 308: I2C_Master_Write(0b11010000);
 16316  005316  0E00               	movlw	0
 16317  005318  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16318  00531A  0ED0               	movlw	208
 16319  00531C  6E02               	movwf	i2I2C_Master_Write@d,c
 16320  00531E  ECA4  F02C         	call	i2_I2C_Master_Write	;wreg free
 16321                           
 16322                           ;main.c: 309: I2C_Master_Write(0x00);
 16323  005322  0E00               	movlw	0
 16324  005324  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16325  005326  0E00               	movlw	0
 16326  005328  6E02               	movwf	i2I2C_Master_Write@d,c
 16327  00532A  ECA4  F02C         	call	i2_I2C_Master_Write	;wreg free
 16328                           
 16329                           ;main.c: 310: I2C_Master_Stop();
 16330  00532E  ECB1  F02C         	call	i2_I2C_Master_Stop	;wreg free
 16331                           
 16332                           ;main.c: 313: I2C_Master_Start();
 16333  005332  ECB5  F02C         	call	i2_I2C_Master_Start	;wreg free
 16334                           
 16335                           ;main.c: 314: I2C_Master_Write(0b11010001);
 16336  005336  0E00               	movlw	0
 16337  005338  6E03               	movwf	i2I2C_Master_Write@d+1,c
 16338  00533A  0ED1               	movlw	209
 16339  00533C  6E02               	movwf	i2I2C_Master_Write@d,c
 16340  00533E  ECA4  F02C         	call	i2_I2C_Master_Write	;wreg free
 16341                           
 16342                           ;main.c: 315: for(unsigned char i=0;i<0x06;i++){
 16343  005342  0E00               	movlw	0
 16344  005344  6E04               	movwf	read_time@i,c
 16345  005346                     i2l6302:
 16346  005346  0E05               	movlw	5
 16347  005348  6404               	cpfsgt	read_time@i,c
 16348  00534A  D001               	goto	i2l6306
 16349  00534C  D00E               	goto	i2l6312
 16350  00534E                     i2l6306:
 16351                           
 16352                           ;main.c: 316: time[i] = I2C_Master_Read(1);
 16353  00534E  5004               	movf	read_time@i,w,c
 16354  005350  0D01               	mullw	1
 16355  005352  0E58               	movlw	low _time
 16356  005354  24F3               	addwf	prodl,w,c
 16357  005356  6ED9               	movwf	fsr2l,c
 16358  005358  0E01               	movlw	high _time
 16359  00535A  20F4               	addwfc	prodh,w,c
 16360  00535C  6EDA               	movwf	fsr2h,c
 16361  00535E  0E01               	movlw	1
 16362  005360  EC0C  F02C         	call	i2_I2C_Master_Read
 16363  005364  6EDF               	movwf	indf2,c
 16364  005366  2A04               	incf	read_time@i,f,c
 16365  005368  D7EE               	goto	i2l6302
 16366  00536A                     i2l6312:
 16367                           
 16368                           ;main.c: 317: }
 16369                           ;main.c: 318: time[6] = I2C_Master_Read(0);
 16370  00536A  0E00               	movlw	0
 16371  00536C  EC0C  F02C         	call	i2_I2C_Master_Read
 16372  005370  0101               	movlb	1	; () banked
 16373  005372  6F5E               	movwf	(_time+6)& (0+255),b
 16374                           
 16375                           ;main.c: 319: I2C_Master_Stop();
 16376  005374  ECB1  F02C         	call	i2_I2C_Master_Stop	;wreg free
 16377  005378  0012               	return	
 16378  00537A                     __end_of_read_time:
 16379                           	opt stack 0
 16380                           pclatu	equ	0xFFB
 16381                           pclath	equ	0xFFA
 16382                           tblptru	equ	0xFF8
 16383                           tblptrh	equ	0xFF7
 16384                           tblptrl	equ	0xFF6
 16385                           tablat	equ	0xFF5
 16386                           prodh	equ	0xFF4
 16387                           prodl	equ	0xFF3
 16388                           intcon	equ	0xFF2
 16389                           intcon2	equ	0xFF1
 16390                           intcon3	equ	0xFF0
 16391                           postinc0	equ	0xFEE
 16392                           fsr0h	equ	0xFEA
 16393                           fsr0l	equ	0xFE9
 16394                           wreg	equ	0xFE8
 16395                           fsr1h	equ	0xFE2
 16396                           fsr1l	equ	0xFE1
 16397                           indf2	equ	0xFDF
 16398                           postinc2	equ	0xFDE
 16399                           postdec2	equ	0xFDD
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function i2_I2C_Master_Write *****************
 16405 ;; Defined at:
 16406 ;;		line 48 in file "I2C.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;  d               2    1[COMRAM] unsigned int 
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;		None
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, status,2, status,0, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;Total ram usage:        2 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    1
 16427 ;; This function calls:
 16428 ;;		i2_I2C_Master_Wait
 16429 ;; This function is called by:
 16430 ;;		_read_time
 16431 ;;		i2_read_colorsensor
 16432 ;; This function uses a non-reentrant model
 16433 ;;
 16434                           
 16435                           	psect	text56
 16436  005948                     __ptext56:
 16437                           	opt stack 0
 16438  005948                     i2_I2C_Master_Write:
 16439                           	opt stack 22
 16440                           
 16441                           ;I2C.c: 50: I2C_Master_Wait();
 16442                           
 16443                           ;incstack = 0
 16444  005948  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16445                           
 16446                           ;I2C.c: 51: SSPBUF = d;
 16447  00594C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 16448  005950  0012               	return		;funcret
 16449  005952                     __end_ofi2_I2C_Master_Write:
 16450                           	opt stack 0
 16451                           pclatu	equ	0xFFB
 16452                           pclath	equ	0xFFA
 16453                           tblptru	equ	0xFF8
 16454                           tblptrh	equ	0xFF7
 16455                           tblptrl	equ	0xFF6
 16456                           tablat	equ	0xFF5
 16457                           prodh	equ	0xFF4
 16458                           prodl	equ	0xFF3
 16459                           intcon	equ	0xFF2
 16460                           intcon2	equ	0xFF1
 16461                           intcon3	equ	0xFF0
 16462                           postinc0	equ	0xFEE
 16463                           fsr0h	equ	0xFEA
 16464                           fsr0l	equ	0xFE9
 16465                           wreg	equ	0xFE8
 16466                           fsr1h	equ	0xFE2
 16467                           fsr1l	equ	0xFE1
 16468                           indf2	equ	0xFDF
 16469                           postinc2	equ	0xFDE
 16470                           postdec2	equ	0xFDD
 16471                           fsr2h	equ	0xFDA
 16472                           fsr2l	equ	0xFD9
 16473                           status	equ	0xFD8
 16474                           
 16475 ;; *************** function i2_I2C_Master_Stop *****************
 16476 ;; Defined at:
 16477 ;;		line 42 in file "I2C.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;		None
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;		None
 16482 ;; Return value:  Size  Location     Type
 16483 ;;                  1    wreg      void 
 16484 ;; Registers used:
 16485 ;;		wreg, status,2, status,0, cstack
 16486 ;; Tracked objects:
 16487 ;;		On entry : 0/0
 16488 ;;		On exit  : 0/0
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;Total ram usage:        0 bytes
 16496 ;; Hardware stack levels used:    1
 16497 ;; Hardware stack levels required when called:    1
 16498 ;; This function calls:
 16499 ;;		i2_I2C_Master_Wait
 16500 ;; This function is called by:
 16501 ;;		_read_time
 16502 ;;		i2_read_colorsensor
 16503 ;; This function uses a non-reentrant model
 16504 ;;
 16505                           
 16506                           	psect	text57
 16507  005962                     __ptext57:
 16508                           	opt stack 0
 16509  005962                     i2_I2C_Master_Stop:
 16510                           	opt stack 22
 16511                           
 16512                           ;I2C.c: 44: I2C_Master_Wait();
 16513                           
 16514                           ;incstack = 0
 16515  005962  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16516                           
 16517                           ;I2C.c: 45: PEN = 1;
 16518  005966  84C5               	bsf	4037,2,c	;volatile
 16519  005968  0012               	return		;funcret
 16520  00596A                     __end_ofi2_I2C_Master_Stop:
 16521                           	opt stack 0
 16522                           pclatu	equ	0xFFB
 16523                           pclath	equ	0xFFA
 16524                           tblptru	equ	0xFF8
 16525                           tblptrh	equ	0xFF7
 16526                           tblptrl	equ	0xFF6
 16527                           tablat	equ	0xFF5
 16528                           prodh	equ	0xFF4
 16529                           prodl	equ	0xFF3
 16530                           intcon	equ	0xFF2
 16531                           intcon2	equ	0xFF1
 16532                           intcon3	equ	0xFF0
 16533                           postinc0	equ	0xFEE
 16534                           fsr0h	equ	0xFEA
 16535                           fsr0l	equ	0xFE9
 16536                           wreg	equ	0xFE8
 16537                           fsr1h	equ	0xFE2
 16538                           fsr1l	equ	0xFE1
 16539                           indf2	equ	0xFDF
 16540                           postinc2	equ	0xFDE
 16541                           postdec2	equ	0xFDD
 16542                           fsr2h	equ	0xFDA
 16543                           fsr2l	equ	0xFD9
 16544                           status	equ	0xFD8
 16545                           
 16546 ;; *************** function i2_I2C_Master_Start *****************
 16547 ;; Defined at:
 16548 ;;		line 30 in file "I2C.c"
 16549 ;; Parameters:    Size  Location     Type
 16550 ;;		None
 16551 ;; Auto vars:     Size  Location     Type
 16552 ;;		None
 16553 ;; Return value:  Size  Location     Type
 16554 ;;                  1    wreg      void 
 16555 ;; Registers used:
 16556 ;;		wreg, status,2, status,0, cstack
 16557 ;; Tracked objects:
 16558 ;;		On entry : 0/0
 16559 ;;		On exit  : 0/0
 16560 ;;		Unchanged: 0/0
 16561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16566 ;;Total ram usage:        0 bytes
 16567 ;; Hardware stack levels used:    1
 16568 ;; Hardware stack levels required when called:    1
 16569 ;; This function calls:
 16570 ;;		i2_I2C_Master_Wait
 16571 ;; This function is called by:
 16572 ;;		_read_time
 16573 ;;		i2_read_colorsensor
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           	psect	text58
 16578  00596A                     __ptext58:
 16579                           	opt stack 0
 16580  00596A                     i2_I2C_Master_Start:
 16581                           	opt stack 22
 16582                           
 16583                           ;I2C.c: 32: I2C_Master_Wait();
 16584                           
 16585                           ;incstack = 0
 16586  00596A  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16587                           
 16588                           ;I2C.c: 33: SEN = 1;
 16589  00596E  80C5               	bsf	4037,0,c	;volatile
 16590  005970  0012               	return		;funcret
 16591  005972                     __end_ofi2_I2C_Master_Start:
 16592                           	opt stack 0
 16593                           pclatu	equ	0xFFB
 16594                           pclath	equ	0xFFA
 16595                           tblptru	equ	0xFF8
 16596                           tblptrh	equ	0xFF7
 16597                           tblptrl	equ	0xFF6
 16598                           tablat	equ	0xFF5
 16599                           prodh	equ	0xFF4
 16600                           prodl	equ	0xFF3
 16601                           intcon	equ	0xFF2
 16602                           intcon2	equ	0xFF1
 16603                           intcon3	equ	0xFF0
 16604                           postinc0	equ	0xFEE
 16605                           fsr0h	equ	0xFEA
 16606                           fsr0l	equ	0xFE9
 16607                           wreg	equ	0xFE8
 16608                           fsr1h	equ	0xFE2
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function i2_I2C_Master_Read *****************
 16618 ;; Defined at:
 16619 ;;		line 110 in file "I2C.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  a               1    wreg     unsigned char 
 16622 ;; Auto vars:     Size  Location     Type
 16623 ;;  a               1    1[COMRAM] unsigned char 
 16624 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 16625 ;; Return value:  Size  Location     Type
 16626 ;;                  1    wreg      unsigned char 
 16627 ;; Registers used:
 16628 ;;		wreg, status,2, status,0, cstack
 16629 ;; Tracked objects:
 16630 ;;		On entry : 0/0
 16631 ;;		On exit  : 0/0
 16632 ;;		Unchanged: 0/0
 16633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;Total ram usage:        2 bytes
 16639 ;; Hardware stack levels used:    1
 16640 ;; Hardware stack levels required when called:    1
 16641 ;; This function calls:
 16642 ;;		i2_I2C_Master_Wait
 16643 ;; This function is called by:
 16644 ;;		_read_time
 16645 ;;		i2_read_colorsensor
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	text59
 16650  005818                     __ptext59:
 16651                           	opt stack 0
 16652  005818                     i2_I2C_Master_Read:
 16653                           	opt stack 22
 16654                           
 16655                           ;incstack = 0
 16656                           ;i2I2C_Master_Read@a stored from wreg
 16657  005818  6E02               	movwf	i2I2C_Master_Read@a,c
 16658                           
 16659                           ;I2C.c: 112: unsigned char temp;
 16660                           ;I2C.c: 113: I2C_Master_Wait();
 16661  00581A  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16662                           
 16663                           ;I2C.c: 114: RCEN = 1;
 16664  00581E  86C5               	bsf	4037,3,c	;volatile
 16665                           
 16666                           ;I2C.c: 115: I2C_Master_Wait();
 16667  005820  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16668                           
 16669                           ;I2C.c: 116: temp = SSPBUF;
 16670  005824  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 16671                           
 16672                           ;I2C.c: 117: I2C_Master_Wait();
 16673  005828  EC7A  F02C         	call	i2_I2C_Master_Wait	;wreg free
 16674                           
 16675                           ;I2C.c: 118: ACKDT = (a)?0:1;
 16676  00582C  5002               	movf	i2I2C_Master_Read@a,w,c
 16677  00582E  A4D8               	btfss	status,2,c
 16678  005830  D002               	goto	i2u639_40
 16679  005832  8AC5               	bsf	4037,5,c	;volatile
 16680  005834  D001               	goto	i2l5808
 16681  005836                     i2u639_40:
 16682  005836  9AC5               	bcf	4037,5,c	;volatile
 16683  005838                     i2l5808:
 16684                           
 16685                           ;I2C.c: 119: ACKEN = 1;
 16686  005838  88C5               	bsf	4037,4,c	;volatile
 16687                           
 16688                           ;I2C.c: 120: return temp;
 16689  00583A  5003               	movf	i2I2C_Master_Read@temp,w,c
 16690  00583C  0012               	return	
 16691  00583E                     __end_ofi2_I2C_Master_Read:
 16692                           	opt stack 0
 16693                           pclatu	equ	0xFFB
 16694                           pclath	equ	0xFFA
 16695                           tblptru	equ	0xFF8
 16696                           tblptrh	equ	0xFF7
 16697                           tblptrl	equ	0xFF6
 16698                           tablat	equ	0xFF5
 16699                           prodh	equ	0xFF4
 16700                           prodl	equ	0xFF3
 16701                           intcon	equ	0xFF2
 16702                           intcon2	equ	0xFF1
 16703                           intcon3	equ	0xFF0
 16704                           postinc0	equ	0xFEE
 16705                           fsr0h	equ	0xFEA
 16706                           fsr0l	equ	0xFE9
 16707                           wreg	equ	0xFE8
 16708                           fsr1h	equ	0xFE2
 16709                           fsr1l	equ	0xFE1
 16710                           indf2	equ	0xFDF
 16711                           postinc2	equ	0xFDE
 16712                           postdec2	equ	0xFDD
 16713                           fsr2h	equ	0xFDA
 16714                           fsr2l	equ	0xFD9
 16715                           status	equ	0xFD8
 16716                           
 16717 ;; *************** function i2_I2C_Master_Wait *****************
 16718 ;; Defined at:
 16719 ;;		line 25 in file "I2C.c"
 16720 ;; Parameters:    Size  Location     Type
 16721 ;;		None
 16722 ;; Auto vars:     Size  Location     Type
 16723 ;;		None
 16724 ;; Return value:  Size  Location     Type
 16725 ;;                  1    wreg      void 
 16726 ;; Registers used:
 16727 ;;		wreg, status,2, status,0
 16728 ;; Tracked objects:
 16729 ;;		On entry : 0/0
 16730 ;;		On exit  : 0/0
 16731 ;;		Unchanged: 0/0
 16732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16737 ;;Total ram usage:        1 bytes
 16738 ;; Hardware stack levels used:    1
 16739 ;; This function calls:
 16740 ;;		Nothing
 16741 ;; This function is called by:
 16742 ;;		i2_I2C_Master_Start
 16743 ;;		i2_I2C_Master_Stop
 16744 ;;		i2_I2C_Master_Write
 16745 ;;		i2_I2C_Master_Read
 16746 ;; This function uses a non-reentrant model
 16747 ;;
 16748                           
 16749                           	psect	text60
 16750  0058F4                     __ptext60:
 16751                           	opt stack 0
 16752  0058F4                     i2_I2C_Master_Wait:
 16753                           	opt stack 22
 16754  0058F4                     i2l34:
 16755  0058F4  B4C7               	btfsc	4039,2,c	;volatile
 16756  0058F6  D7FE               	goto	i2l34
 16757  0058F8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 16758  0058FC  0E1F               	movlw	31
 16759  0058FE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 16760  005900  B4D8               	btfsc	status,2,c
 16761  005902  0012               	return	
 16762  005904  D7F7               	goto	i2l34
 16763  005906                     __end_ofi2_I2C_Master_Wait:
 16764                           	opt stack 0
 16765                           pclatu	equ	0xFFB
 16766                           pclath	equ	0xFFA
 16767                           tblptru	equ	0xFF8
 16768                           tblptrh	equ	0xFF7
 16769                           tblptrl	equ	0xFF6
 16770                           tablat	equ	0xFF5
 16771                           prodh	equ	0xFF4
 16772                           prodl	equ	0xFF3
 16773                           intcon	equ	0xFF2
 16774                           intcon2	equ	0xFF1
 16775                           intcon3	equ	0xFF0
 16776                           postinc0	equ	0xFEE
 16777                           fsr0h	equ	0xFEA
 16778                           fsr0l	equ	0xFE9
 16779                           wreg	equ	0xFE8
 16780                           fsr1h	equ	0xFE2
 16781                           fsr1l	equ	0xFE1
 16782                           indf2	equ	0xFDF
 16783                           postinc2	equ	0xFDE
 16784                           postdec2	equ	0xFDD
 16785                           fsr2h	equ	0xFDA
 16786                           fsr2l	equ	0xFD9
 16787                           status	equ	0xFD8
 16788                           
 16789 ;; *************** function _dec_to_hex *****************
 16790 ;; Defined at:
 16791 ;;		line 268 in file "main.c"
 16792 ;; Parameters:    Size  Location     Type
 16793 ;;  num             2  116[COMRAM] int 
 16794 ;; Auto vars:     Size  Location     Type
 16795 ;;  quotient        2   12[BANK0 ] int 
 16796 ;;  hexnum          2   10[BANK0 ] int 
 16797 ;;  i               2    8[BANK0 ] int 
 16798 ;;  temp            2    6[BANK0 ] int 
 16799 ;; Return value:  Size  Location     Type
 16800 ;;                  2  116[COMRAM] int 
 16801 ;; Registers used:
 16802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16803 ;; Tracked objects:
 16804 ;;		On entry : 0/0
 16805 ;;		On exit  : 0/0
 16806 ;;		Unchanged: 0/0
 16807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16809 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Totals:         2      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;Total ram usage:       16 bytes
 16813 ;; Hardware stack levels used:    1
 16814 ;; Hardware stack levels required when called:    5
 16815 ;; This function calls:
 16816 ;;		_pow
 16817 ;;		i2___awdiv
 16818 ;;		i2___awtoft
 16819 ;;		i2___ftadd
 16820 ;;		i2___ftmul
 16821 ;;		i2___fttol
 16822 ;; This function is called by:
 16823 ;;		_isr
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text61
 16828  00406A                     __ptext61:
 16829                           	opt stack 0
 16830  00406A                     _dec_to_hex:
 16831                           	opt stack 19
 16832                           
 16833                           ;main.c: 269: int i = 0, quotient = num, temp, hexnum = 0;
 16834                           
 16835                           ;incstack = 0
 16836  00406A  0E00               	movlw	0
 16837  00406C  0100               	movlb	0	; () banked
 16838  00406E  6F89               	movwf	(dec_to_hex@i+1)& (0+255),b
 16839  004070  0E00               	movlw	0
 16840  004072  6F88               	movwf	dec_to_hex@i& (0+255),b
 16841                           
 16842                           ; BSR set to: 0
 16843  004074  C075  F08C         	movff	dec_to_hex@num,dec_to_hex@quotient
 16844  004078  C076  F08D         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 16845  00407C  0E00               	movlw	0
 16846  00407E  0100               	movlb	0	; () banked
 16847  004080  6F8B               	movwf	(dec_to_hex@hexnum+1)& (0+255),b
 16848  004082  0E00               	movlw	0
 16849  004084  6F8A               	movwf	dec_to_hex@hexnum& (0+255),b
 16850                           
 16851                           ;main.c: 271: while (quotient != 0) {
 16852  004086  D06C               	goto	i2l6332
 16853  004088                     i2l6320:
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;main.c: 272: temp = quotient % 16;
 16857  004088  0E0F               	movlw	15
 16858  00408A  0100               	movlb	0	; () banked
 16859  00408C  158C               	andwf	dec_to_hex@quotient& (0+255),w,b
 16860  00408E  0100               	movlb	0	; () banked
 16861  004090  6F86               	movwf	dec_to_hex@temp& (0+255),b
 16862  004092  0100               	movlb	0	; () banked
 16863  004094  6B87               	clrf	(dec_to_hex@temp+1)& (0+255),b
 16864                           
 16865                           ; BSR set to: 0
 16866                           ;main.c: 273: hexnum += temp*pow(10,i);
 16867  004096  C088  F009         	movff	dec_to_hex@i,i2___awtoft@c
 16868  00409A  C089  F00A         	movff	dec_to_hex@i+1,i2___awtoft@c+1
 16869  00409E  EC76  F02B         	call	i2___awtoft	;wreg free
 16870  0040A2  C009  F080         	movff	?i2___awtoft,_dec_to_hex$1528
 16871  0040A6  C00A  F081         	movff	?i2___awtoft+1,_dec_to_hex$1528+1
 16872  0040AA  C00B  F082         	movff	?i2___awtoft+2,_dec_to_hex$1528+2
 16873                           
 16874                           ;main.c: 273: hexnum += temp*pow(10,i);
 16875  0040AE  C080  F067         	movff	_dec_to_hex$1528,pow@y
 16876  0040B2  C081  F068         	movff	_dec_to_hex$1528+1,pow@y+1
 16877  0040B6  C082  F069         	movff	_dec_to_hex$1528+2,pow@y+2
 16878  0040BA  0E00               	movlw	0
 16879  0040BC  6E64               	movwf	pow@x,c
 16880  0040BE  0E20               	movlw	32
 16881  0040C0  6E65               	movwf	pow@x+1,c
 16882  0040C2  0E41               	movlw	65
 16883  0040C4  6E66               	movwf	pow@x+2,c
 16884  0040C6  EC41  F01B         	call	_pow	;wreg free
 16885  0040CA  C064  F083         	movff	?_pow,_dec_to_hex$1529
 16886  0040CE  C065  F084         	movff	?_pow+1,_dec_to_hex$1529+1
 16887  0040D2  C066  F085         	movff	?_pow+2,_dec_to_hex$1529+2
 16888                           
 16889                           ;main.c: 273: hexnum += temp*pow(10,i);
 16890  0040D6  C083  F018         	movff	_dec_to_hex$1529,i2___ftmul@f2
 16891  0040DA  C084  F019         	movff	_dec_to_hex$1529+1,i2___ftmul@f2+1
 16892  0040DE  C085  F01A         	movff	_dec_to_hex$1529+2,i2___ftmul@f2+2
 16893  0040E2  C086  F009         	movff	dec_to_hex@temp,i2___awtoft@c
 16894  0040E6  C087  F00A         	movff	dec_to_hex@temp+1,i2___awtoft@c+1
 16895  0040EA  EC76  F02B         	call	i2___awtoft	;wreg free
 16896  0040EE  C009  F015         	movff	?i2___awtoft,i2___ftmul@f1
 16897  0040F2  C00A  F016         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 16898  0040F6  C00B  F017         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 16899  0040FA  ECB2  F022         	call	i2___ftmul	;wreg free
 16900  0040FE  C015  F031         	movff	?i2___ftmul,i2___ftadd@f2
 16901  004102  C016  F032         	movff	?i2___ftmul+1,i2___ftadd@f2+1
 16902  004106  C017  F033         	movff	?i2___ftmul+2,i2___ftadd@f2+2
 16903  00410A  C08A  F009         	movff	dec_to_hex@hexnum,i2___awtoft@c
 16904  00410E  C08B  F00A         	movff	dec_to_hex@hexnum+1,i2___awtoft@c+1
 16905  004112  EC76  F02B         	call	i2___awtoft	;wreg free
 16906  004116  C009  F02E         	movff	?i2___awtoft,i2___ftadd@f1
 16907  00411A  C00A  F02F         	movff	?i2___awtoft+1,i2___ftadd@f1+1
 16908  00411E  C00B  F030         	movff	?i2___awtoft+2,i2___ftadd@f1+2
 16909  004122  EC03  F018         	call	i2___ftadd	;wreg free
 16910  004126  C02E  F03A         	movff	?i2___ftadd,i2___fttol@f1
 16911  00412A  C02F  F03B         	movff	?i2___ftadd+1,i2___fttol@f1+1
 16912  00412E  C030  F03C         	movff	?i2___ftadd+2,i2___fttol@f1+2
 16913  004132  EC38  F022         	call	i2___fttol	;wreg free
 16914  004136  C03A  F08A         	movff	?i2___fttol,dec_to_hex@hexnum
 16915  00413A  C03B  F08B         	movff	?i2___fttol+1,dec_to_hex@hexnum+1
 16916                           
 16917                           ;main.c: 274: quotient = quotient / 16;
 16918  00413E  C08C  F007         	movff	dec_to_hex@quotient,i2___awdiv@dividend
 16919  004142  C08D  F008         	movff	dec_to_hex@quotient+1,i2___awdiv@dividend+1
 16920  004146  0E00               	movlw	0
 16921  004148  6E0A               	movwf	i2___awdiv@divisor+1,c
 16922  00414A  0E10               	movlw	16
 16923  00414C  6E09               	movwf	i2___awdiv@divisor,c
 16924  00414E  EC54  F028         	call	i2___awdiv	;wreg free
 16925  004152  C007  F08C         	movff	?i2___awdiv,dec_to_hex@quotient
 16926  004156  C008  F08D         	movff	?i2___awdiv+1,dec_to_hex@quotient+1
 16927                           
 16928                           ;main.c: 275: i += 1;
 16929  00415A  0100               	movlb	0	; () banked
 16930  00415C  4B88               	infsnz	dec_to_hex@i& (0+255),f,b
 16931  00415E  2B89               	incf	(dec_to_hex@i+1)& (0+255),f,b
 16932  004160                     i2l6332:
 16933                           
 16934                           ; BSR set to: 0
 16935  004160  0100               	movlb	0	; () banked
 16936  004162  518C               	movf	dec_to_hex@quotient& (0+255),w,b
 16937  004164  0100               	movlb	0	; () banked
 16938  004166  118D               	iorwf	(dec_to_hex@quotient+1)& (0+255),w,b
 16939  004168  A4D8               	btfss	status,2,c
 16940  00416A  D78E               	goto	i2l6320
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;main.c: 276: }
 16944                           ;main.c: 277: return hexnum;
 16945  00416C  C08A  F075         	movff	dec_to_hex@hexnum,?_dec_to_hex
 16946  004170  C08B  F076         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 16947                           
 16948                           ; BSR set to: 0
 16949  004174  0012               	return		;funcret
 16950  004176                     __end_of_dec_to_hex:
 16951                           	opt stack 0
 16952                           pclatu	equ	0xFFB
 16953                           pclath	equ	0xFFA
 16954                           tblptru	equ	0xFF8
 16955                           tblptrh	equ	0xFF7
 16956                           tblptrl	equ	0xFF6
 16957                           tablat	equ	0xFF5
 16958                           prodh	equ	0xFF4
 16959                           prodl	equ	0xFF3
 16960                           intcon	equ	0xFF2
 16961                           intcon2	equ	0xFF1
 16962                           intcon3	equ	0xFF0
 16963                           postinc0	equ	0xFEE
 16964                           fsr0h	equ	0xFEA
 16965                           fsr0l	equ	0xFE9
 16966                           wreg	equ	0xFE8
 16967                           fsr1h	equ	0xFE2
 16968                           fsr1l	equ	0xFE1
 16969                           indf2	equ	0xFDF
 16970                           postinc2	equ	0xFDE
 16971                           postdec2	equ	0xFDD
 16972                           fsr2h	equ	0xFDA
 16973                           fsr2l	equ	0xFD9
 16974                           status	equ	0xFD8
 16975                           
 16976 ;; *************** function i2___awdiv *****************
 16977 ;; Defined at:
 16978 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 16979 ;; Parameters:    Size  Location     Type
 16980 ;;  dividend        2    6[COMRAM] int 
 16981 ;;  divisor         2    8[COMRAM] int 
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  __awdiv         2   12[COMRAM] int 
 16984 ;;  __awdiv         1   11[COMRAM] unsigned char 
 16985 ;;  __awdiv         1   10[COMRAM] unsigned char 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  2    6[COMRAM] int 
 16988 ;; Registers used:
 16989 ;;		wreg, status,2, status,0
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16999 ;;Total ram usage:        8 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; This function calls:
 17002 ;;		Nothing
 17003 ;; This function is called by:
 17004 ;;		_dec_to_hex
 17005 ;;		i2_fround
 17006 ;;		i2_scale
 17007 ;;		i2_printf
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text62
 17012  0050A8                     __ptext62:
 17013                           	opt stack 0
 17014  0050A8                     i2___awdiv:
 17015                           	opt stack 22
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;incstack = 0
 17019  0050A8  0E00               	movlw	0
 17020  0050AA  6E0C               	movwf	i2___awdiv@sign,c
 17021  0050AC  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17022  0050AE  D006               	goto	i2l5298
 17023  0050B0  6C09               	negf	i2___awdiv@divisor,c
 17024  0050B2  1E0A               	comf	i2___awdiv@divisor+1,f,c
 17025  0050B4  B0D8               	btfsc	status,0,c
 17026  0050B6  2A0A               	incf	i2___awdiv@divisor+1,f,c
 17027  0050B8  0E01               	movlw	1
 17028  0050BA  6E0C               	movwf	i2___awdiv@sign,c
 17029  0050BC                     i2l5298:
 17030  0050BC  AE08               	btfss	i2___awdiv@dividend+1,7,c
 17031  0050BE  D006               	goto	i2l5304
 17032  0050C0  6C07               	negf	i2___awdiv@dividend,c
 17033  0050C2  1E08               	comf	i2___awdiv@dividend+1,f,c
 17034  0050C4  B0D8               	btfsc	status,0,c
 17035  0050C6  2A08               	incf	i2___awdiv@dividend+1,f,c
 17036  0050C8  0E01               	movlw	1
 17037  0050CA  1A0C               	xorwf	i2___awdiv@sign,f,c
 17038  0050CC                     i2l5304:
 17039  0050CC  0E00               	movlw	0
 17040  0050CE  6E0E               	movwf	i2___awdiv@quotient+1,c
 17041  0050D0  0E00               	movlw	0
 17042  0050D2  6E0D               	movwf	i2___awdiv@quotient,c
 17043  0050D4  5009               	movf	i2___awdiv@divisor,w,c
 17044  0050D6  100A               	iorwf	i2___awdiv@divisor+1,w,c
 17045  0050D8  B4D8               	btfsc	status,2,c
 17046  0050DA  D01C               	goto	i2l5326
 17047  0050DC  0E01               	movlw	1
 17048  0050DE  6E0B               	movwf	i2___awdiv@counter,c
 17049  0050E0  D004               	goto	i2l5312
 17050  0050E2                     i2l5310:
 17051  0050E2  90D8               	bcf	status,0,c
 17052  0050E4  3609               	rlcf	i2___awdiv@divisor,f,c
 17053  0050E6  360A               	rlcf	i2___awdiv@divisor+1,f,c
 17054  0050E8  2A0B               	incf	i2___awdiv@counter,f,c
 17055  0050EA                     i2l5312:
 17056  0050EA  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17057  0050EC  D7FA               	goto	i2l5310
 17058  0050EE                     i2l5314:
 17059  0050EE  90D8               	bcf	status,0,c
 17060  0050F0  360D               	rlcf	i2___awdiv@quotient,f,c
 17061  0050F2  360E               	rlcf	i2___awdiv@quotient+1,f,c
 17062  0050F4  5009               	movf	i2___awdiv@divisor,w,c
 17063  0050F6  5C07               	subwf	i2___awdiv@dividend,w,c
 17064  0050F8  500A               	movf	i2___awdiv@divisor+1,w,c
 17065  0050FA  5808               	subwfb	i2___awdiv@dividend+1,w,c
 17066  0050FC  A0D8               	btfss	status,0,c
 17067  0050FE  D005               	goto	i2l5322
 17068  005100  5009               	movf	i2___awdiv@divisor,w,c
 17069  005102  5E07               	subwf	i2___awdiv@dividend,f,c
 17070  005104  500A               	movf	i2___awdiv@divisor+1,w,c
 17071  005106  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 17072  005108  800D               	bsf	i2___awdiv@quotient,0,c
 17073  00510A                     i2l5322:
 17074  00510A  90D8               	bcf	status,0,c
 17075  00510C  320A               	rrcf	i2___awdiv@divisor+1,f,c
 17076  00510E  3209               	rrcf	i2___awdiv@divisor,f,c
 17077  005110  2E0B               	decfsz	i2___awdiv@counter,f,c
 17078  005112  D7ED               	goto	i2l5314
 17079  005114                     i2l5326:
 17080  005114  500C               	movf	i2___awdiv@sign,w,c
 17081  005116  B4D8               	btfsc	status,2,c
 17082  005118  D004               	goto	i2l5330
 17083  00511A  6C0D               	negf	i2___awdiv@quotient,c
 17084  00511C  1E0E               	comf	i2___awdiv@quotient+1,f,c
 17085  00511E  B0D8               	btfsc	status,0,c
 17086  005120  2A0E               	incf	i2___awdiv@quotient+1,f,c
 17087  005122                     i2l5330:
 17088  005122  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 17089  005126  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17090  00512A  0012               	return	
 17091  00512C                     __end_ofi2___awdiv:
 17092                           	opt stack 0
 17093                           pclatu	equ	0xFFB
 17094                           pclath	equ	0xFFA
 17095                           tblptru	equ	0xFF8
 17096                           tblptrh	equ	0xFF7
 17097                           tblptrl	equ	0xFF6
 17098                           tablat	equ	0xFF5
 17099                           prodh	equ	0xFF4
 17100                           prodl	equ	0xFF3
 17101                           intcon	equ	0xFF2
 17102                           intcon2	equ	0xFF1
 17103                           intcon3	equ	0xFF0
 17104                           postinc0	equ	0xFEE
 17105                           fsr0h	equ	0xFEA
 17106                           fsr0l	equ	0xFE9
 17107                           wreg	equ	0xFE8
 17108                           fsr1h	equ	0xFE2
 17109                           fsr1l	equ	0xFE1
 17110                           indf2	equ	0xFDF
 17111                           postinc2	equ	0xFDE
 17112                           postdec2	equ	0xFDD
 17113                           fsr2h	equ	0xFDA
 17114                           fsr2l	equ	0xFD9
 17115                           status	equ	0xFD8
 17116                           
 17117 ;; *************** function _pow *****************
 17118 ;; Defined at:
 17119 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
 17120 ;; Parameters:    Size  Location     Type
 17121 ;;  x               3   99[COMRAM] int 
 17122 ;;  y               3  102[COMRAM] int 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;  yi              4  112[COMRAM] unsigned long 
 17125 ;;  sign            1  111[COMRAM] unsigned char 
 17126 ;; Return value:  Size  Location     Type
 17127 ;;                  3   99[COMRAM] unsigned char 
 17128 ;; Registers used:
 17129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17130 ;; Tracked objects:
 17131 ;;		On entry : 0/0
 17132 ;;		On exit  : 0/0
 17133 ;;		Unchanged: 0/0
 17134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17135 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17136 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17138 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17139 ;;Total ram usage:       17 bytes
 17140 ;; Hardware stack levels used:    1
 17141 ;; Hardware stack levels required when called:    4
 17142 ;; This function calls:
 17143 ;;		_exp
 17144 ;;		_log
 17145 ;;		i2___ftge
 17146 ;;		i2___ftmul
 17147 ;;		i2___ftneg
 17148 ;;		i2___fttol
 17149 ;;		i2___lltoft
 17150 ;; This function is called by:
 17151 ;;		_dec_to_hex
 17152 ;; This function uses a non-reentrant model
 17153 ;;
 17154                           
 17155                           	psect	text63
 17156  003682                     __ptext63:
 17157                           	opt stack 0
 17158  003682                     _pow:
 17159                           	opt stack 19
 17160                           
 17161                           ;incstack = 0
 17162  003682  0E00               	movlw	0
 17163  003684  6E70               	movwf	pow@sign,c
 17164  003686  5064               	movf	pow@x,w,c
 17165  003688  1065               	iorwf	pow@x+1,w,c
 17166  00368A  1066               	iorwf	pow@x+2,w,c
 17167  00368C  A4D8               	btfss	status,2,c
 17168  00368E  D01C               	goto	i2l5700
 17169  003690  0E00               	movlw	0
 17170  003692  6E01               	movwf	i2___ftge@ff1,c
 17171  003694  0E00               	movlw	0
 17172  003696  6E02               	movwf	i2___ftge@ff1+1,c
 17173  003698  0E00               	movlw	0
 17174  00369A  6E03               	movwf	i2___ftge@ff1+2,c
 17175  00369C  C067  F004         	movff	pow@y,i2___ftge@ff2
 17176  0036A0  C068  F005         	movff	pow@y+1,i2___ftge@ff2+1
 17177  0036A4  C069  F006         	movff	pow@y+2,i2___ftge@ff2+2
 17178  0036A8  ECC4  F027         	call	i2___ftge	;wreg free
 17179  0036AC  A0D8               	btfss	status,0,c
 17180  0036AE  D005               	goto	i2l1076
 17181  0036B0  0E00               	movlw	0
 17182  0036B2  0101               	movlb	1	; () banked
 17183  0036B4  6F6C               	movwf	(_errno+1)& (0+255),b
 17184  0036B6  0E21               	movlw	33
 17185  0036B8  6F6B               	movwf	_errno& (0+255),b
 17186  0036BA                     i2l1076:
 17187  0036BA  0E00               	movlw	0
 17188  0036BC  6E64               	movwf	?_pow,c
 17189  0036BE  0E00               	movlw	0
 17190  0036C0  6E65               	movwf	?_pow+1,c
 17191  0036C2  0E00               	movlw	0
 17192  0036C4  6E66               	movwf	?_pow+2,c
 17193  0036C6  0012               	return	
 17194  0036C8                     i2l5700:
 17195  0036C8  5067               	movf	pow@y,w,c
 17196  0036CA  1068               	iorwf	pow@y+1,w,c
 17197  0036CC  1069               	iorwf	pow@y+2,w,c
 17198  0036CE  A4D8               	btfss	status,2,c
 17199  0036D0  D007               	goto	i2l5706
 17200  0036D2  0E00               	movlw	0
 17201  0036D4  6E64               	movwf	?_pow,c
 17202  0036D6  0E80               	movlw	128
 17203  0036D8  6E65               	movwf	?_pow+1,c
 17204  0036DA  0E3F               	movlw	63
 17205  0036DC  6E66               	movwf	?_pow+2,c
 17206  0036DE  0012               	return	
 17207  0036E0                     i2l5706:
 17208  0036E0  AE66               	btfss	pow@x+2,7,c
 17209  0036E2  D041               	goto	i2l5718
 17210  0036E4  C067  F03A         	movff	pow@y,i2___fttol@f1
 17211  0036E8  C068  F03B         	movff	pow@y+1,i2___fttol@f1+1
 17212  0036EC  C069  F03C         	movff	pow@y+2,i2___fttol@f1+2
 17213  0036F0  EC38  F022         	call	i2___fttol	;wreg free
 17214  0036F4  C03A  F071         	movff	?i2___fttol,pow@yi
 17215  0036F8  C03B  F072         	movff	?i2___fttol+1,pow@yi+1
 17216  0036FC  C03C  F073         	movff	?i2___fttol+2,pow@yi+2
 17217  003700  C03D  F074         	movff	?i2___fttol+3,pow@yi+3
 17218  003704  C071  F009         	movff	pow@yi,i2___lltoft@c
 17219  003708  C072  F00A         	movff	pow@yi+1,i2___lltoft@c+1
 17220  00370C  C073  F00B         	movff	pow@yi+2,i2___lltoft@c+2
 17221  003710  C074  F00C         	movff	pow@yi+3,i2___lltoft@c+3
 17222  003714  EC50  F02A         	call	i2___lltoft	;wreg free
 17223  003718  5067               	movf	pow@y,w,c
 17224  00371A  1809               	xorwf	?i2___lltoft,w,c
 17225  00371C  E107               	bnz	i2u631_40
 17226  00371E  5068               	movf	pow@y+1,w,c
 17227  003720  180A               	xorwf	?i2___lltoft+1,w,c
 17228  003722  E104               	bnz	i2u631_40
 17229  003724  5069               	movf	pow@y+2,w,c
 17230  003726  180B               	xorwf	?i2___lltoft+2,w,c
 17231  003728  B4D8               	btfsc	status,2,c
 17232  00372A  D00C               	goto	i2l5714
 17233  00372C                     i2u631_40:
 17234  00372C  0E00               	movlw	0
 17235  00372E  0101               	movlb	1	; () banked
 17236  003730  6F6C               	movwf	(_errno+1)& (0+255),b
 17237  003732  0E21               	movlw	33
 17238  003734  6F6B               	movwf	_errno& (0+255),b
 17239  003736  0E00               	movlw	0
 17240  003738  6E64               	movwf	?_pow,c
 17241  00373A  0E00               	movlw	0
 17242  00373C  6E65               	movwf	?_pow+1,c
 17243  00373E  0E00               	movlw	0
 17244  003740  6E66               	movwf	?_pow+2,c
 17245                           
 17246                           ; BSR set to: 1
 17247  003742  0012               	return	
 17248  003744                     i2l5714:
 17249  003744  5071               	movf	pow@yi,w,c
 17250  003746  0B01               	andlw	1
 17251  003748  6E70               	movwf	pow@sign,c
 17252  00374A  C064  F001         	movff	pow@x,i2___ftneg@f1
 17253  00374E  C065  F002         	movff	pow@x+1,i2___ftneg@f1+1
 17254  003752  C066  F003         	movff	pow@x+2,i2___ftneg@f1+2
 17255  003756  EC32  F02C         	call	i2___ftneg	;wreg free
 17256  00375A  C001  F064         	movff	?i2___ftneg,pow@x
 17257  00375E  C002  F065         	movff	?i2___ftneg+1,pow@x+1
 17258  003762  C003  F066         	movff	?i2___ftneg+2,pow@x+2
 17259  003766                     i2l5718:
 17260  003766  C064  F046         	movff	pow@x,log@x
 17261  00376A  C065  F047         	movff	pow@x+1,log@x+1
 17262  00376E  C066  F048         	movff	pow@x+2,log@x+2
 17263  003772  EC20  F01F         	call	_log	;wreg free
 17264  003776  C046  F06A         	movff	?_log,_pow$1530
 17265  00377A  C047  F06B         	movff	?_log+1,_pow$1530+1
 17266  00377E  C048  F06C         	movff	?_log+2,_pow$1530+2
 17267  003782  C06A  F015         	movff	_pow$1530,i2___ftmul@f1
 17268  003786  C06B  F016         	movff	_pow$1530+1,i2___ftmul@f1+1
 17269  00378A  C06C  F017         	movff	_pow$1530+2,i2___ftmul@f1+2
 17270  00378E  C067  F018         	movff	pow@y,i2___ftmul@f2
 17271  003792  C068  F019         	movff	pow@y+1,i2___ftmul@f2+1
 17272  003796  C069  F01A         	movff	pow@y+2,i2___ftmul@f2+2
 17273  00379A  ECB2  F022         	call	i2___ftmul	;wreg free
 17274  00379E  C015  F06D         	movff	?i2___ftmul,_pow$1531
 17275  0037A2  C016  F06E         	movff	?i2___ftmul+1,_pow$1531+1
 17276  0037A6  C017  F06F         	movff	?i2___ftmul+2,_pow$1531+2
 17277  0037AA  C06D  F05B         	movff	_pow$1531,exp@x
 17278  0037AE  C06E  F05C         	movff	_pow$1531+1,exp@x+1
 17279  0037B2  C06F  F05D         	movff	_pow$1531+2,exp@x+2
 17280  0037B6  EC0F  F017         	call	_exp	;wreg free
 17281  0037BA  C05B  F064         	movff	?_exp,pow@x
 17282  0037BE  C05C  F065         	movff	?_exp+1,pow@x+1
 17283  0037C2  C05D  F066         	movff	?_exp+2,pow@x+2
 17284  0037C6  5070               	movf	pow@sign,w,c
 17285  0037C8  B4D8               	btfsc	status,2,c
 17286  0037CA  D00F               	goto	i2l1081
 17287  0037CC  C064  F001         	movff	pow@x,i2___ftneg@f1
 17288  0037D0  C065  F002         	movff	pow@x+1,i2___ftneg@f1+1
 17289  0037D4  C066  F003         	movff	pow@x+2,i2___ftneg@f1+2
 17290  0037D8  EC32  F02C         	call	i2___ftneg	;wreg free
 17291  0037DC  C001  F064         	movff	?i2___ftneg,?_pow
 17292  0037E0  C002  F065         	movff	?i2___ftneg+1,?_pow+1
 17293  0037E4  C003  F066         	movff	?i2___ftneg+2,?_pow+2
 17294  0037E8  0012               	return	
 17295  0037EA                     i2l1081:
 17296  0037EA  C064  F064         	movff	pow@x,?_pow
 17297  0037EE  C065  F065         	movff	pow@x+1,?_pow+1
 17298  0037F2  C066  F066         	movff	pow@x+2,?_pow+2
 17299  0037F6  0012               	return		;funcret
 17300  0037F8                     __end_of_pow:
 17301                           	opt stack 0
 17302                           pclatu	equ	0xFFB
 17303                           pclath	equ	0xFFA
 17304                           tblptru	equ	0xFF8
 17305                           tblptrh	equ	0xFF7
 17306                           tblptrl	equ	0xFF6
 17307                           tablat	equ	0xFF5
 17308                           prodh	equ	0xFF4
 17309                           prodl	equ	0xFF3
 17310                           intcon	equ	0xFF2
 17311                           intcon2	equ	0xFF1
 17312                           intcon3	equ	0xFF0
 17313                           postinc0	equ	0xFEE
 17314                           fsr0h	equ	0xFEA
 17315                           fsr0l	equ	0xFE9
 17316                           wreg	equ	0xFE8
 17317                           fsr1h	equ	0xFE2
 17318                           fsr1l	equ	0xFE1
 17319                           indf2	equ	0xFDF
 17320                           postinc2	equ	0xFDE
 17321                           postdec2	equ	0xFDD
 17322                           fsr2h	equ	0xFDA
 17323                           fsr2l	equ	0xFD9
 17324                           status	equ	0xFD8
 17325                           
 17326 ;; *************** function i2___lltoft *****************
 17327 ;; Defined at:
 17328 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
 17329 ;; Parameters:    Size  Location     Type
 17330 ;;  c               4    8[COMRAM] unsigned long 
 17331 ;; Auto vars:     Size  Location     Type
 17332 ;;  __lltoft        1   16[COMRAM] unsigned char 
 17333 ;; Return value:  Size  Location     Type
 17334 ;;                  3    8[COMRAM] float 
 17335 ;; Registers used:
 17336 ;;		wreg, status,2, status,0, cstack
 17337 ;; Tracked objects:
 17338 ;;		On entry : 0/0
 17339 ;;		On exit  : 0/0
 17340 ;;		Unchanged: 0/0
 17341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17342 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17344 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17345 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17346 ;;Total ram usage:        9 bytes
 17347 ;; Hardware stack levels used:    1
 17348 ;; Hardware stack levels required when called:    1
 17349 ;; This function calls:
 17350 ;;		i2___ftpack
 17351 ;; This function is called by:
 17352 ;;		_pow
 17353 ;;		i2_printf
 17354 ;; This function uses a non-reentrant model
 17355 ;;
 17356                           
 17357                           	psect	text64
 17358  0054A0                     __ptext64:
 17359                           	opt stack 0
 17360  0054A0                     i2___lltoft:
 17361                           	opt stack 22
 17362                           
 17363                           ;incstack = 0
 17364  0054A0  0E8E               	movlw	142
 17365  0054A2  6E11               	movwf	i2___lltoft@exp,c
 17366  0054A4  D006               	goto	i2l5374
 17367  0054A6                     i2l5372:
 17368  0054A6  90D8               	bcf	status,0,c
 17369  0054A8  320C               	rrcf	i2___lltoft@c+3,f,c
 17370  0054AA  320B               	rrcf	i2___lltoft@c+2,f,c
 17371  0054AC  320A               	rrcf	i2___lltoft@c+1,f,c
 17372  0054AE  3209               	rrcf	i2___lltoft@c,f,c
 17373  0054B0  2A11               	incf	i2___lltoft@exp,f,c
 17374  0054B2                     i2l5374:
 17375  0054B2  0E00               	movlw	0
 17376  0054B4  1409               	andwf	i2___lltoft@c,w,c
 17377  0054B6  6E0D               	movwf	??i2___lltoft& (0+255),c
 17378  0054B8  0E00               	movlw	0
 17379  0054BA  140A               	andwf	i2___lltoft@c+1,w,c
 17380  0054BC  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 17381  0054BE  0E00               	movlw	0
 17382  0054C0  140B               	andwf	i2___lltoft@c+2,w,c
 17383  0054C2  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 17384  0054C4  0EFF               	movlw	255
 17385  0054C6  140C               	andwf	i2___lltoft@c+3,w,c
 17386  0054C8  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 17387  0054CA  500D               	movf	??i2___lltoft,w,c
 17388  0054CC  100E               	iorwf	??i2___lltoft+1,w,c
 17389  0054CE  100F               	iorwf	??i2___lltoft+2,w,c
 17390  0054D0  1010               	iorwf	??i2___lltoft+3,w,c
 17391  0054D2  A4D8               	btfss	status,2,c
 17392  0054D4  D7E8               	goto	i2l5372
 17393  0054D6  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 17394  0054DA  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 17395  0054DE  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 17396  0054E2  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 17397  0054E6  0E00               	movlw	0
 17398  0054E8  6E05               	movwf	i2___ftpack@sign,c
 17399  0054EA  ECCF  F026         	call	i2___ftpack	;wreg free
 17400  0054EE  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 17401  0054F2  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 17402  0054F6  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 17403  0054FA  0012               	return	
 17404  0054FC                     __end_ofi2___lltoft:
 17405                           	opt stack 0
 17406                           pclatu	equ	0xFFB
 17407                           pclath	equ	0xFFA
 17408                           tblptru	equ	0xFF8
 17409                           tblptrh	equ	0xFF7
 17410                           tblptrl	equ	0xFF6
 17411                           tablat	equ	0xFF5
 17412                           prodh	equ	0xFF4
 17413                           prodl	equ	0xFF3
 17414                           intcon	equ	0xFF2
 17415                           intcon2	equ	0xFF1
 17416                           intcon3	equ	0xFF0
 17417                           postinc0	equ	0xFEE
 17418                           fsr0h	equ	0xFEA
 17419                           fsr0l	equ	0xFE9
 17420                           wreg	equ	0xFE8
 17421                           fsr1h	equ	0xFE2
 17422                           fsr1l	equ	0xFE1
 17423                           indf2	equ	0xFDF
 17424                           postinc2	equ	0xFDE
 17425                           postdec2	equ	0xFDD
 17426                           fsr2h	equ	0xFDA
 17427                           fsr2l	equ	0xFD9
 17428                           status	equ	0xFD8
 17429                           
 17430 ;; *************** function _log *****************
 17431 ;; Defined at:
 17432 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
 17433 ;; Parameters:    Size  Location     Type
 17434 ;;  x               3   69[COMRAM] float 
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;  exponent        2   72[COMRAM] int 
 17437 ;; Return value:  Size  Location     Type
 17438 ;;                  3   69[COMRAM] int 
 17439 ;; Registers used:
 17440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17441 ;; Tracked objects:
 17442 ;;		On entry : 0/0
 17443 ;;		On exit  : 0/0
 17444 ;;		Unchanged: 0/0
 17445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17446 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17450 ;;Total ram usage:        5 bytes
 17451 ;; Hardware stack levels used:    1
 17452 ;; Hardware stack levels required when called:    3
 17453 ;; This function calls:
 17454 ;;		_eval_poly
 17455 ;;		_frexp
 17456 ;;		i2___awtoft
 17457 ;;		i2___ftadd
 17458 ;;		i2___ftmul
 17459 ;; This function is called by:
 17460 ;;		_pow
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text65
 17465  003E40                     __ptext65:
 17466                           	opt stack 0
 17467  003E40                     _log:
 17468                           	opt stack 19
 17469                           
 17470                           ;incstack = 0
 17471  003E40  AE48               	btfss	log@x+2,7,c
 17472  003E42  D00C               	goto	i2l5208
 17473  003E44  0E00               	movlw	0
 17474  003E46  0101               	movlb	1	; () banked
 17475  003E48  6F6C               	movwf	(_errno+1)& (0+255),b
 17476  003E4A  0E21               	movlw	33
 17477  003E4C  6F6B               	movwf	_errno& (0+255),b
 17478  003E4E  0E00               	movlw	0
 17479  003E50  6E46               	movwf	?_log,c
 17480  003E52  0E00               	movlw	0
 17481  003E54  6E47               	movwf	?_log+1,c
 17482  003E56  0E00               	movlw	0
 17483  003E58  6E48               	movwf	?_log+2,c
 17484                           
 17485                           ; BSR set to: 1
 17486  003E5A  0012               	return	
 17487  003E5C                     i2l5208:
 17488  003E5C  5046               	movf	log@x,w,c
 17489  003E5E  1047               	iorwf	log@x+1,w,c
 17490  003E60  1048               	iorwf	log@x+2,w,c
 17491  003E62  A4D8               	btfss	status,2,c
 17492  003E64  D00C               	goto	i2l5214
 17493  003E66  0E00               	movlw	0
 17494  003E68  0101               	movlb	1	; () banked
 17495  003E6A  6F6C               	movwf	(_errno+1)& (0+255),b
 17496  003E6C  0E22               	movlw	34
 17497  003E6E  6F6B               	movwf	_errno& (0+255),b
 17498  003E70  0E00               	movlw	0
 17499  003E72  6E46               	movwf	?_log,c
 17500  003E74  0E00               	movlw	0
 17501  003E76  6E47               	movwf	?_log+1,c
 17502  003E78  0E00               	movlw	0
 17503  003E7A  6E48               	movwf	?_log+2,c
 17504                           
 17505                           ; BSR set to: 1
 17506  003E7C  0012               	return	
 17507  003E7E                     i2l5214:
 17508  003E7E  0E00               	movlw	0
 17509  003E80  6E18               	movwf	i2___ftmul@f2,c
 17510  003E82  0E00               	movlw	0
 17511  003E84  6E19               	movwf	i2___ftmul@f2+1,c
 17512  003E86  0E40               	movlw	64
 17513  003E88  6E1A               	movwf	i2___ftmul@f2+2,c
 17514  003E8A  0E49               	movlw	low log@exponent
 17515  003E8C  6E04               	movwf	frexp@eptr,c
 17516  003E8E  0E00               	movlw	high log@exponent
 17517  003E90  6E05               	movwf	frexp@eptr+1,c
 17518  003E92  C046  F001         	movff	log@x,frexp@value
 17519  003E96  C047  F002         	movff	log@x+1,frexp@value+1
 17520  003E9A  C048  F003         	movff	log@x+2,frexp@value+2
 17521  003E9E  EC0C  F028         	call	_frexp	;wreg free
 17522  003EA2  C001  F015         	movff	?_frexp,i2___ftmul@f1
 17523  003EA6  C002  F016         	movff	?_frexp+1,i2___ftmul@f1+1
 17524  003EAA  C003  F017         	movff	?_frexp+2,i2___ftmul@f1+2
 17525  003EAE  ECB2  F022         	call	i2___ftmul	;wreg free
 17526  003EB2  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 17527  003EB6  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 17528  003EBA  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 17529  003EBE  0E00               	movlw	0
 17530  003EC0  6E31               	movwf	i2___ftadd@f2,c
 17531  003EC2  0E80               	movlw	128
 17532  003EC4  6E32               	movwf	i2___ftadd@f2+1,c
 17533  003EC6  0EBF               	movlw	191
 17534  003EC8  6E33               	movwf	i2___ftadd@f2+2,c
 17535  003ECA  EC03  F018         	call	i2___ftadd	;wreg free
 17536  003ECE  C02E  F046         	movff	?i2___ftadd,log@x
 17537  003ED2  C02F  F047         	movff	?i2___ftadd+1,log@x+1
 17538  003ED6  C030  F048         	movff	?i2___ftadd+2,log@x+2
 17539  003EDA  0649               	decf	log@exponent,f,c
 17540  003EDC  A0D8               	btfss	status,0,c
 17541  003EDE  064A               	decf	log@exponent+1,f,c
 17542  003EE0  C046  F03A         	movff	log@x,eval_poly@x
 17543  003EE4  C047  F03B         	movff	log@x+1,eval_poly@x+1
 17544  003EE8  C048  F03C         	movff	log@x+2,eval_poly@x+2
 17545  003EEC  0E83               	movlw	low log@coeff
 17546  003EEE  6E3D               	movwf	eval_poly@d,c
 17547  003EF0  0EFE               	movlw	high log@coeff
 17548  003EF2  6E3E               	movwf	eval_poly@d+1,c
 17549  003EF4  0E00               	movlw	0
 17550  003EF6  6E40               	movwf	eval_poly@n+1,c
 17551  003EF8  0E08               	movlw	8
 17552  003EFA  6E3F               	movwf	eval_poly@n,c
 17553  003EFC  ECE2  F024         	call	_eval_poly	;wreg free
 17554  003F00  C03A  F046         	movff	?_eval_poly,log@x
 17555  003F04  C03B  F047         	movff	?_eval_poly+1,log@x+1
 17556  003F08  C03C  F048         	movff	?_eval_poly+2,log@x+2
 17557  003F0C  0E72               	movlw	114
 17558  003F0E  6E18               	movwf	i2___ftmul@f2,c
 17559  003F10  0E31               	movlw	49
 17560  003F12  6E19               	movwf	i2___ftmul@f2+1,c
 17561  003F14  0E3F               	movlw	63
 17562  003F16  6E1A               	movwf	i2___ftmul@f2+2,c
 17563  003F18  C049  F009         	movff	log@exponent,i2___awtoft@c
 17564  003F1C  C04A  F00A         	movff	log@exponent+1,i2___awtoft@c+1
 17565  003F20  EC76  F02B         	call	i2___awtoft	;wreg free
 17566  003F24  C009  F015         	movff	?i2___awtoft,i2___ftmul@f1
 17567  003F28  C00A  F016         	movff	?i2___awtoft+1,i2___ftmul@f1+1
 17568  003F2C  C00B  F017         	movff	?i2___awtoft+2,i2___ftmul@f1+2
 17569  003F30  ECB2  F022         	call	i2___ftmul	;wreg free
 17570  003F34  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 17571  003F38  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 17572  003F3C  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 17573  003F40  C046  F031         	movff	log@x,i2___ftadd@f2
 17574  003F44  C047  F032         	movff	log@x+1,i2___ftadd@f2+1
 17575  003F48  C048  F033         	movff	log@x+2,i2___ftadd@f2+2
 17576  003F4C  EC03  F018         	call	i2___ftadd	;wreg free
 17577  003F50  C02E  F046         	movff	?i2___ftadd,?_log
 17578  003F54  C02F  F047         	movff	?i2___ftadd+1,?_log+1
 17579  003F58  C030  F048         	movff	?i2___ftadd+2,?_log+2
 17580  003F5C  0012               	return	
 17581  003F5E                     __end_of_log:
 17582                           	opt stack 0
 17583                           pclatu	equ	0xFFB
 17584                           pclath	equ	0xFFA
 17585                           tblptru	equ	0xFF8
 17586                           tblptrh	equ	0xFF7
 17587                           tblptrl	equ	0xFF6
 17588                           tablat	equ	0xFF5
 17589                           prodh	equ	0xFF4
 17590                           prodl	equ	0xFF3
 17591                           intcon	equ	0xFF2
 17592                           intcon2	equ	0xFF1
 17593                           intcon3	equ	0xFF0
 17594                           postinc0	equ	0xFEE
 17595                           fsr0h	equ	0xFEA
 17596                           fsr0l	equ	0xFE9
 17597                           wreg	equ	0xFE8
 17598                           fsr1h	equ	0xFE2
 17599                           fsr1l	equ	0xFE1
 17600                           indf2	equ	0xFDF
 17601                           postinc2	equ	0xFDE
 17602                           postdec2	equ	0xFDD
 17603                           fsr2h	equ	0xFDA
 17604                           fsr2l	equ	0xFD9
 17605                           status	equ	0xFD8
 17606                           
 17607 ;; *************** function _exp *****************
 17608 ;; Defined at:
 17609 ;;		line 12 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
 17610 ;; Parameters:    Size  Location     Type
 17611 ;;  x               3   90[COMRAM] int 
 17612 ;; Auto vars:     Size  Location     Type
 17613 ;;  exponent        2   96[COMRAM] int 
 17614 ;;  sign            1   98[COMRAM] unsigned char 
 17615 ;; Return value:  Size  Location     Type
 17616 ;;                  3   90[COMRAM] unsigned char 
 17617 ;; Registers used:
 17618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : 0/0
 17621 ;;		On exit  : 0/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17624 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17627 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17628 ;;Total ram usage:        9 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    3
 17631 ;; This function calls:
 17632 ;;		_eval_poly
 17633 ;;		_floor
 17634 ;;		_ldexp
 17635 ;;		i2___awtoft
 17636 ;;		i2___ftdiv
 17637 ;;		i2___ftge
 17638 ;;		i2___ftmul
 17639 ;;		i2___ftneg
 17640 ;;		i2___ftsub
 17641 ;;		i2___fttol
 17642 ;; This function is called by:
 17643 ;;		_pow
 17644 ;; This function uses a non-reentrant model
 17645 ;;
 17646                           
 17647                           	psect	text66
 17648  002E1E                     __ptext66:
 17649                           	opt stack 0
 17650  002E1E                     _exp:
 17651                           	opt stack 19
 17652                           
 17653                           ;incstack = 0
 17654  002E1E  505B               	movf	exp@x,w,c
 17655  002E20  105C               	iorwf	exp@x+1,w,c
 17656  002E22  105D               	iorwf	exp@x+2,w,c
 17657  002E24  A4D8               	btfss	status,2,c
 17658  002E26  D007               	goto	i2l5230
 17659  002E28  0E00               	movlw	0
 17660  002E2A  6E5B               	movwf	?_exp,c
 17661  002E2C  0E80               	movlw	128
 17662  002E2E  6E5C               	movwf	?_exp+1,c
 17663  002E30  0E3F               	movlw	63
 17664  002E32  6E5D               	movwf	?_exp+2,c
 17665  002E34  0012               	return	
 17666  002E36                     i2l5230:
 17667  002E36  0E72               	movlw	114
 17668  002E38  6E01               	movwf	i2___ftge@ff1,c
 17669  002E3A  0E31               	movlw	49
 17670  002E3C  6E02               	movwf	i2___ftge@ff1+1,c
 17671  002E3E  0E44               	movlw	68
 17672  002E40  6E03               	movwf	i2___ftge@ff1+2,c
 17673  002E42  C05B  F004         	movff	exp@x,i2___ftge@ff2
 17674  002E46  C05C  F005         	movff	exp@x+1,i2___ftge@ff2+1
 17675  002E4A  C05D  F006         	movff	exp@x+2,i2___ftge@ff2+2
 17676  002E4E  ECC4  F027         	call	i2___ftge	;wreg free
 17677  002E52  B0D8               	btfsc	status,0,c
 17678  002E54  D00C               	goto	i2l5236
 17679  002E56  0E00               	movlw	0
 17680  002E58  0101               	movlb	1	; () banked
 17681  002E5A  6F6C               	movwf	(_errno+1)& (0+255),b
 17682  002E5C  0E22               	movlw	34
 17683  002E5E  6F6B               	movwf	_errno& (0+255),b
 17684  002E60  0EFF               	movlw	255
 17685  002E62  6E5B               	movwf	?_exp,c
 17686  002E64  0E7F               	movlw	127
 17687  002E66  6E5C               	movwf	?_exp+1,c
 17688  002E68  0E7F               	movlw	127
 17689  002E6A  6E5D               	movwf	?_exp+2,c
 17690                           
 17691                           ; BSR set to: 1
 17692  002E6C  0012               	return	
 17693  002E6E                     i2l5236:
 17694  002E6E  C05B  F001         	movff	exp@x,i2___ftge@ff1
 17695  002E72  C05C  F002         	movff	exp@x+1,i2___ftge@ff1+1
 17696  002E76  C05D  F003         	movff	exp@x+2,i2___ftge@ff1+2
 17697  002E7A  0E49               	movlw	73
 17698  002E7C  6E04               	movwf	i2___ftge@ff2,c
 17699  002E7E  0E3A               	movlw	58
 17700  002E80  6E05               	movwf	i2___ftge@ff2+1,c
 17701  002E82  0EC4               	movlw	196
 17702  002E84  6E06               	movwf	i2___ftge@ff2+2,c
 17703  002E86  ECC4  F027         	call	i2___ftge	;wreg free
 17704  002E8A  B0D8               	btfsc	status,0,c
 17705  002E8C  D00C               	goto	i2l5242
 17706  002E8E  0E00               	movlw	0
 17707  002E90  0101               	movlb	1	; () banked
 17708  002E92  6F6C               	movwf	(_errno+1)& (0+255),b
 17709  002E94  0E22               	movlw	34
 17710  002E96  6F6B               	movwf	_errno& (0+255),b
 17711  002E98  0E00               	movlw	0
 17712  002E9A  6E5B               	movwf	?_exp,c
 17713  002E9C  0E00               	movlw	0
 17714  002E9E  6E5C               	movwf	?_exp+1,c
 17715  002EA0  0E00               	movlw	0
 17716  002EA2  6E5D               	movwf	?_exp+2,c
 17717                           
 17718                           ; BSR set to: 1
 17719  002EA4  0012               	return	
 17720  002EA6                     i2l5242:
 17721  002EA6  AE5D               	btfss	exp@x+2,7,c
 17722  002EA8  D002               	goto	i2u555_40
 17723  002EAA  0E01               	movlw	1
 17724  002EAC  D001               	goto	i2u556_40
 17725  002EAE                     i2u555_40:
 17726  002EAE  0E00               	movlw	0
 17727  002EB0                     i2u556_40:
 17728  002EB0  6E63               	movwf	exp@sign,c
 17729  002EB2  5063               	movf	exp@sign,w,c
 17730  002EB4  B4D8               	btfsc	status,2,c
 17731  002EB6  D00E               	goto	i2l1243
 17732  002EB8  C05B  F001         	movff	exp@x,i2___ftneg@f1
 17733  002EBC  C05C  F002         	movff	exp@x+1,i2___ftneg@f1+1
 17734  002EC0  C05D  F003         	movff	exp@x+2,i2___ftneg@f1+2
 17735  002EC4  EC32  F02C         	call	i2___ftneg	;wreg free
 17736  002EC8  C001  F05B         	movff	?i2___ftneg,exp@x
 17737  002ECC  C002  F05C         	movff	?i2___ftneg+1,exp@x+1
 17738  002ED0  C003  F05D         	movff	?i2___ftneg+2,exp@x+2
 17739  002ED4                     i2l1243:
 17740  002ED4  C05B  F015         	movff	exp@x,i2___ftmul@f1
 17741  002ED8  C05C  F016         	movff	exp@x+1,i2___ftmul@f1+1
 17742  002EDC  C05D  F017         	movff	exp@x+2,i2___ftmul@f1+2
 17743  002EE0  0EAA               	movlw	170
 17744  002EE2  6E18               	movwf	i2___ftmul@f2,c
 17745  002EE4  0EB8               	movlw	184
 17746  002EE6  6E19               	movwf	i2___ftmul@f2+1,c
 17747  002EE8  0E3F               	movlw	63
 17748  002EEA  6E1A               	movwf	i2___ftmul@f2+2,c
 17749  002EEC  ECB2  F022         	call	i2___ftmul	;wreg free
 17750  002EF0  C015  F05B         	movff	?i2___ftmul,exp@x
 17751  002EF4  C016  F05C         	movff	?i2___ftmul+1,exp@x+1
 17752  002EF8  C017  F05D         	movff	?i2___ftmul+2,exp@x+2
 17753  002EFC  C05B  F053         	movff	exp@x,floor@x
 17754  002F00  C05C  F054         	movff	exp@x+1,floor@x+1
 17755  002F04  C05D  F055         	movff	exp@x+2,floor@x+2
 17756  002F08  EC9F  F023         	call	_floor	;wreg free
 17757  002F0C  C053  F05E         	movff	?_floor,_exp$1532
 17758  002F10  C054  F05F         	movff	?_floor+1,_exp$1532+1
 17759  002F14  C055  F060         	movff	?_floor+2,_exp$1532+2
 17760  002F18  C05E  F03A         	movff	_exp$1532,i2___fttol@f1
 17761  002F1C  C05F  F03B         	movff	_exp$1532+1,i2___fttol@f1+1
 17762  002F20  C060  F03C         	movff	_exp$1532+2,i2___fttol@f1+2
 17763  002F24  EC38  F022         	call	i2___fttol	;wreg free
 17764  002F28  C03A  F061         	movff	?i2___fttol,exp@exponent
 17765  002F2C  C03B  F062         	movff	?i2___fttol+1,exp@exponent+1
 17766  002F30  C05B  F03A         	movff	exp@x,i2___ftsub@f1
 17767  002F34  C05C  F03B         	movff	exp@x+1,i2___ftsub@f1+1
 17768  002F38  C05D  F03C         	movff	exp@x+2,i2___ftsub@f1+2
 17769  002F3C  C061  F009         	movff	exp@exponent,i2___awtoft@c
 17770  002F40  C062  F00A         	movff	exp@exponent+1,i2___awtoft@c+1
 17771  002F44  EC76  F02B         	call	i2___awtoft	;wreg free
 17772  002F48  C009  F03D         	movff	?i2___awtoft,i2___ftsub@f2
 17773  002F4C  C00A  F03E         	movff	?i2___awtoft+1,i2___ftsub@f2+1
 17774  002F50  C00B  F03F         	movff	?i2___awtoft+2,i2___ftsub@f2+2
 17775  002F54  EC39  F02B         	call	i2___ftsub	;wreg free
 17776  002F58  C03A  F05B         	movff	?i2___ftsub,exp@x
 17777  002F5C  C03B  F05C         	movff	?i2___ftsub+1,exp@x+1
 17778  002F60  C03C  F05D         	movff	?i2___ftsub+2,exp@x+2
 17779  002F64  C05B  F03A         	movff	exp@x,eval_poly@x
 17780  002F68  C05C  F03B         	movff	exp@x+1,eval_poly@x+1
 17781  002F6C  C05D  F03C         	movff	exp@x+2,eval_poly@x+2
 17782  002F70  0E65               	movlw	low exp@coeff
 17783  002F72  6E3D               	movwf	eval_poly@d,c
 17784  002F74  0EFE               	movlw	high exp@coeff
 17785  002F76  6E3E               	movwf	eval_poly@d+1,c
 17786  002F78  0E00               	movlw	0
 17787  002F7A  6E40               	movwf	eval_poly@n+1,c
 17788  002F7C  0E09               	movlw	9
 17789  002F7E  6E3F               	movwf	eval_poly@n,c
 17790  002F80  ECE2  F024         	call	_eval_poly	;wreg free
 17791  002F84  C03A  F046         	movff	?_eval_poly,ldexp@value
 17792  002F88  C03B  F047         	movff	?_eval_poly+1,ldexp@value+1
 17793  002F8C  C03C  F048         	movff	?_eval_poly+2,ldexp@value+2
 17794  002F90  C061  F049         	movff	exp@exponent,ldexp@newexp
 17795  002F94  C062  F04A         	movff	exp@exponent+1,ldexp@newexp+1
 17796  002F98  ECAF  F025         	call	_ldexp	;wreg free
 17797  002F9C  C046  F05B         	movff	?_ldexp,exp@x
 17798  002FA0  C047  F05C         	movff	?_ldexp+1,exp@x+1
 17799  002FA4  C048  F05D         	movff	?_ldexp+2,exp@x+2
 17800  002FA8  5063               	movf	exp@sign,w,c
 17801  002FAA  B4D8               	btfsc	status,2,c
 17802  002FAC  D025               	goto	i2l1244
 17803  002FAE  285B               	incf	exp@x,w,c
 17804  002FB0  E10E               	bnz	i2l5264
 17805  002FB2  0E7F               	movlw	127
 17806  002FB4  185C               	xorwf	exp@x+1,w,c
 17807  002FB6  E10B               	bnz	i2l5264
 17808  002FB8  0E7F               	movlw	127
 17809  002FBA  185D               	xorwf	exp@x+2,w,c
 17810  002FBC  A4D8               	btfss	status,2,c
 17811  002FBE  D007               	goto	i2l5264
 17812  002FC0  0E00               	movlw	0
 17813  002FC2  6E5B               	movwf	?_exp,c
 17814  002FC4  0E00               	movlw	0
 17815  002FC6  6E5C               	movwf	?_exp+1,c
 17816  002FC8  0E00               	movlw	0
 17817  002FCA  6E5D               	movwf	?_exp+2,c
 17818  002FCC  0012               	return	
 17819  002FCE                     i2l5264:
 17820  002FCE  0E00               	movlw	0
 17821  002FD0  6E09               	movwf	i2___ftdiv@f1,c
 17822  002FD2  0E80               	movlw	128
 17823  002FD4  6E0A               	movwf	i2___ftdiv@f1+1,c
 17824  002FD6  0E3F               	movlw	63
 17825  002FD8  6E0B               	movwf	i2___ftdiv@f1+2,c
 17826  002FDA  C05B  F00C         	movff	exp@x,i2___ftdiv@f2
 17827  002FDE  C05C  F00D         	movff	exp@x+1,i2___ftdiv@f2+1
 17828  002FE2  C05D  F00E         	movff	exp@x+2,i2___ftdiv@f2+2
 17829  002FE6  EC2C  F023         	call	i2___ftdiv	;wreg free
 17830  002FEA  C009  F05B         	movff	?i2___ftdiv,?_exp
 17831  002FEE  C00A  F05C         	movff	?i2___ftdiv+1,?_exp+1
 17832  002FF2  C00B  F05D         	movff	?i2___ftdiv+2,?_exp+2
 17833  002FF6  0012               	return	
 17834  002FF8                     i2l1244:
 17835  002FF8  C05B  F05B         	movff	exp@x,?_exp
 17836  002FFC  C05C  F05C         	movff	exp@x+1,?_exp+1
 17837  003000  C05D  F05D         	movff	exp@x+2,?_exp+2
 17838  003004  0012               	return		;funcret
 17839  003006                     __end_of_exp:
 17840                           	opt stack 0
 17841                           pclatu	equ	0xFFB
 17842                           pclath	equ	0xFFA
 17843                           tblptru	equ	0xFF8
 17844                           tblptrh	equ	0xFF7
 17845                           tblptrl	equ	0xFF6
 17846                           tablat	equ	0xFF5
 17847                           prodh	equ	0xFF4
 17848                           prodl	equ	0xFF3
 17849                           intcon	equ	0xFF2
 17850                           intcon2	equ	0xFF1
 17851                           intcon3	equ	0xFF0
 17852                           postinc0	equ	0xFEE
 17853                           fsr0h	equ	0xFEA
 17854                           fsr0l	equ	0xFE9
 17855                           wreg	equ	0xFE8
 17856                           fsr1h	equ	0xFE2
 17857                           fsr1l	equ	0xFE1
 17858                           indf2	equ	0xFDF
 17859                           postinc2	equ	0xFDE
 17860                           postdec2	equ	0xFDD
 17861                           fsr2h	equ	0xFDA
 17862                           fsr2l	equ	0xFD9
 17863                           status	equ	0xFD8
 17864                           
 17865 ;; *************** function i2___ftsub *****************
 17866 ;; Defined at:
 17867 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;  f1              3   57[COMRAM] float 
 17870 ;;  f2              3   60[COMRAM] float 
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;		None
 17873 ;; Return value:  Size  Location     Type
 17874 ;;                  3   57[COMRAM] float 
 17875 ;; Registers used:
 17876 ;;		wreg, status,2, status,0, cstack
 17877 ;; Tracked objects:
 17878 ;;		On entry : 0/0
 17879 ;;		On exit  : 0/0
 17880 ;;		Unchanged: 0/0
 17881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17882 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17885 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17886 ;;Total ram usage:        6 bytes
 17887 ;; Hardware stack levels used:    1
 17888 ;; Hardware stack levels required when called:    2
 17889 ;; This function calls:
 17890 ;;		i2___ftadd
 17891 ;; This function is called by:
 17892 ;;		_exp
 17893 ;;		i2_printf
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           	psect	text67
 17898  005672                     __ptext67:
 17899                           	opt stack 0
 17900  005672                     i2___ftsub:
 17901                           	opt stack 21
 17902                           
 17903                           ;incstack = 0
 17904  005672  503D               	movf	i2___ftsub@f2,w,c
 17905  005674  103E               	iorwf	i2___ftsub@f2+1,w,c
 17906  005676  103F               	iorwf	i2___ftsub@f2+2,w,c
 17907  005678  B4D8               	btfsc	status,2,c
 17908  00567A  D006               	goto	i2l4856
 17909  00567C  0E00               	movlw	0
 17910  00567E  1A3D               	xorwf	i2___ftsub@f2,f,c
 17911  005680  0E00               	movlw	0
 17912  005682  1A3E               	xorwf	i2___ftsub@f2+1,f,c
 17913  005684  0E80               	movlw	128
 17914  005686  1A3F               	xorwf	i2___ftsub@f2+2,f,c
 17915  005688                     i2l4856:
 17916  005688  C03A  F02E         	movff	i2___ftsub@f1,i2___ftadd@f1
 17917  00568C  C03B  F02F         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 17918  005690  C03C  F030         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 17919  005694  C03D  F031         	movff	i2___ftsub@f2,i2___ftadd@f2
 17920  005698  C03E  F032         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 17921  00569C  C03F  F033         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 17922  0056A0  EC03  F018         	call	i2___ftadd	;wreg free
 17923  0056A4  C02E  F03A         	movff	?i2___ftadd,?i2___ftsub
 17924  0056A8  C02F  F03B         	movff	?i2___ftadd+1,?i2___ftsub+1
 17925  0056AC  C030  F03C         	movff	?i2___ftadd+2,?i2___ftsub+2
 17926  0056B0  0012               	return	
 17927  0056B2                     __end_ofi2___ftsub:
 17928                           	opt stack 0
 17929                           pclatu	equ	0xFFB
 17930                           pclath	equ	0xFFA
 17931                           tblptru	equ	0xFF8
 17932                           tblptrh	equ	0xFF7
 17933                           tblptrl	equ	0xFF6
 17934                           tablat	equ	0xFF5
 17935                           prodh	equ	0xFF4
 17936                           prodl	equ	0xFF3
 17937                           intcon	equ	0xFF2
 17938                           intcon2	equ	0xFF1
 17939                           intcon3	equ	0xFF0
 17940                           postinc0	equ	0xFEE
 17941                           fsr0h	equ	0xFEA
 17942                           fsr0l	equ	0xFE9
 17943                           wreg	equ	0xFE8
 17944                           fsr1h	equ	0xFE2
 17945                           fsr1l	equ	0xFE1
 17946                           indf2	equ	0xFDF
 17947                           postinc2	equ	0xFDE
 17948                           postdec2	equ	0xFDD
 17949                           fsr2h	equ	0xFDA
 17950                           fsr2l	equ	0xFD9
 17951                           status	equ	0xFD8
 17952                           
 17953 ;; *************** function i2___ftneg *****************
 17954 ;; Defined at:
 17955 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 17956 ;; Parameters:    Size  Location     Type
 17957 ;;  f1              3    0[COMRAM] float 
 17958 ;; Auto vars:     Size  Location     Type
 17959 ;;		None
 17960 ;; Return value:  Size  Location     Type
 17961 ;;                  3    0[COMRAM] float 
 17962 ;; Registers used:
 17963 ;;		wreg, status,2, status,0
 17964 ;; Tracked objects:
 17965 ;;		On entry : 0/0
 17966 ;;		On exit  : 0/0
 17967 ;;		Unchanged: 0/0
 17968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17969 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17973 ;;Total ram usage:        3 bytes
 17974 ;; Hardware stack levels used:    1
 17975 ;; This function calls:
 17976 ;;		Nothing
 17977 ;; This function is called by:
 17978 ;;		_pow
 17979 ;;		_exp
 17980 ;;		i2_printf
 17981 ;; This function uses a non-reentrant model
 17982 ;;
 17983                           
 17984                           	psect	text68
 17985  005864                     __ptext68:
 17986                           	opt stack 0
 17987  005864                     i2___ftneg:
 17988                           	opt stack 23
 17989                           
 17990                           ;incstack = 0
 17991  005864  5001               	movf	i2___ftneg@f1,w,c
 17992  005866  1002               	iorwf	i2___ftneg@f1+1,w,c
 17993  005868  1003               	iorwf	i2___ftneg@f1+2,w,c
 17994  00586A  B4D8               	btfsc	status,2,c
 17995  00586C  D006               	goto	i2l941
 17996  00586E  0E00               	movlw	0
 17997  005870  1A01               	xorwf	i2___ftneg@f1,f,c
 17998  005872  0E00               	movlw	0
 17999  005874  1A02               	xorwf	i2___ftneg@f1+1,f,c
 18000  005876  0E80               	movlw	128
 18001  005878  1A03               	xorwf	i2___ftneg@f1+2,f,c
 18002  00587A                     i2l941:
 18003  00587A  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 18004  00587E  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 18005  005882  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 18006  005886  0012               	return		;funcret
 18007  005888                     __end_ofi2___ftneg:
 18008                           	opt stack 0
 18009                           pclatu	equ	0xFFB
 18010                           pclath	equ	0xFFA
 18011                           tblptru	equ	0xFF8
 18012                           tblptrh	equ	0xFF7
 18013                           tblptrl	equ	0xFF6
 18014                           tablat	equ	0xFF5
 18015                           prodh	equ	0xFF4
 18016                           prodl	equ	0xFF3
 18017                           intcon	equ	0xFF2
 18018                           intcon2	equ	0xFF1
 18019                           intcon3	equ	0xFF0
 18020                           postinc0	equ	0xFEE
 18021                           fsr0h	equ	0xFEA
 18022                           fsr0l	equ	0xFE9
 18023                           wreg	equ	0xFE8
 18024                           fsr1h	equ	0xFE2
 18025                           fsr1l	equ	0xFE1
 18026                           indf2	equ	0xFDF
 18027                           postinc2	equ	0xFDE
 18028                           postdec2	equ	0xFDD
 18029                           fsr2h	equ	0xFDA
 18030                           fsr2l	equ	0xFD9
 18031                           status	equ	0xFD8
 18032                           
 18033 ;; *************** function i2___ftdiv *****************
 18034 ;; Defined at:
 18035 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 18036 ;; Parameters:    Size  Location     Type
 18037 ;;  f1              3    8[COMRAM] float 
 18038 ;;  f2              3   11[COMRAM] float 
 18039 ;; Auto vars:     Size  Location     Type
 18040 ;;  __ftdiv         3   18[COMRAM] float 
 18041 ;;  __ftdiv         1   22[COMRAM] unsigned char 
 18042 ;;  __ftdiv         1   21[COMRAM] unsigned char 
 18043 ;;  __ftdiv         1   17[COMRAM] unsigned char 
 18044 ;; Return value:  Size  Location     Type
 18045 ;;                  3    8[COMRAM] float 
 18046 ;; Registers used:
 18047 ;;		wreg, status,2, status,0, cstack
 18048 ;; Tracked objects:
 18049 ;;		On entry : 0/0
 18050 ;;		On exit  : 0/0
 18051 ;;		Unchanged: 0/0
 18052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18054 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18055 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18056 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18057 ;;Total ram usage:       15 bytes
 18058 ;; Hardware stack levels used:    1
 18059 ;; Hardware stack levels required when called:    1
 18060 ;; This function calls:
 18061 ;;		i2___ftpack
 18062 ;; This function is called by:
 18063 ;;		_exp
 18064 ;; This function uses a non-reentrant model
 18065 ;;
 18066                           
 18067                           	psect	text69
 18068  004658                     __ptext69:
 18069                           	opt stack 0
 18070  004658                     i2___ftdiv:
 18071                           	opt stack 20
 18072                           
 18073                           ;incstack = 0
 18074  004658  C00B  F00F         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 18075  00465C  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 18076  00465E  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 18077  004660  340A               	rlcf	i2___ftdiv@f1+1,w,c
 18078  004662  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 18079  004664  E301               	bnc	u496_41
 18080  004666  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 18081  004668                     u496_41:
 18082  004668  500F               	movf	??i2___ftdiv,w,c
 18083  00466A  6E16               	movwf	i2___ftdiv@exp,c
 18084  00466C  5016               	movf	i2___ftdiv@exp,w,c
 18085  00466E  A4D8               	btfss	status,2,c
 18086  004670  D007               	goto	i2l4808
 18087  004672  0E00               	movlw	0
 18088  004674  6E09               	movwf	?i2___ftdiv,c
 18089  004676  0E00               	movlw	0
 18090  004678  6E0A               	movwf	?i2___ftdiv+1,c
 18091  00467A  0E00               	movlw	0
 18092  00467C  6E0B               	movwf	?i2___ftdiv+2,c
 18093  00467E  0012               	return	
 18094  004680                     i2l4808:
 18095  004680  C00E  F00F         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 18096  004684  6A10               	clrf	(??i2___ftdiv+1)& (0+255),c
 18097  004686  6A11               	clrf	(??i2___ftdiv+2)& (0+255),c
 18098  004688  340D               	rlcf	i2___ftdiv@f2+1,w,c
 18099  00468A  360F               	rlcf	??i2___ftdiv& (0+255),f,c
 18100  00468C  E301               	bnc	u498_41
 18101  00468E  8010               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 18102  004690                     u498_41:
 18103  004690  500F               	movf	??i2___ftdiv,w,c
 18104  004692  6E17               	movwf	i2___ftdiv@sign,c
 18105  004694  5017               	movf	i2___ftdiv@sign,w,c
 18106  004696  A4D8               	btfss	status,2,c
 18107  004698  D007               	goto	i2l4814
 18108  00469A  0E00               	movlw	0
 18109  00469C  6E09               	movwf	?i2___ftdiv,c
 18110  00469E  0E00               	movlw	0
 18111  0046A0  6E0A               	movwf	?i2___ftdiv+1,c
 18112  0046A2  0E00               	movlw	0
 18113  0046A4  6E0B               	movwf	?i2___ftdiv+2,c
 18114  0046A6  0012               	return	
 18115  0046A8                     i2l4814:
 18116  0046A8  0E00               	movlw	0
 18117  0046AA  6E13               	movwf	i2___ftdiv@f3,c
 18118  0046AC  0E00               	movlw	0
 18119  0046AE  6E14               	movwf	i2___ftdiv@f3+1,c
 18120  0046B0  0E00               	movlw	0
 18121  0046B2  6E15               	movwf	i2___ftdiv@f3+2,c
 18122  0046B4  5017               	movf	i2___ftdiv@sign,w,c
 18123  0046B6  0F89               	addlw	137
 18124  0046B8  5E16               	subwf	i2___ftdiv@exp,f,c
 18125  0046BA  C00B  F017         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 18126  0046BE  500E               	movf	i2___ftdiv@f2+2,w,c
 18127  0046C0  1A17               	xorwf	i2___ftdiv@sign,f,c
 18128  0046C2  0E80               	movlw	128
 18129  0046C4  1617               	andwf	i2___ftdiv@sign,f,c
 18130  0046C6  8E0A               	bsf	i2___ftdiv@f1+1,7,c
 18131  0046C8  0EFF               	movlw	255
 18132  0046CA  1609               	andwf	i2___ftdiv@f1,f,c
 18133  0046CC  0EFF               	movlw	255
 18134  0046CE  160A               	andwf	i2___ftdiv@f1+1,f,c
 18135  0046D0  0E00               	movlw	0
 18136  0046D2  160B               	andwf	i2___ftdiv@f1+2,f,c
 18137  0046D4  8E0D               	bsf	i2___ftdiv@f2+1,7,c
 18138  0046D6  0EFF               	movlw	255
 18139  0046D8  160C               	andwf	i2___ftdiv@f2,f,c
 18140  0046DA  0EFF               	movlw	255
 18141  0046DC  160D               	andwf	i2___ftdiv@f2+1,f,c
 18142  0046DE  0E00               	movlw	0
 18143  0046E0  160E               	andwf	i2___ftdiv@f2+2,f,c
 18144  0046E2  0E18               	movlw	24
 18145  0046E4  6E12               	movwf	i2___ftdiv@cntr,c
 18146  0046E6                     i2l4834:
 18147  0046E6  90D8               	bcf	status,0,c
 18148  0046E8  3613               	rlcf	i2___ftdiv@f3,f,c
 18149  0046EA  3614               	rlcf	i2___ftdiv@f3+1,f,c
 18150  0046EC  3615               	rlcf	i2___ftdiv@f3+2,f,c
 18151  0046EE  500C               	movf	i2___ftdiv@f2,w,c
 18152  0046F0  5C09               	subwf	i2___ftdiv@f1,w,c
 18153  0046F2  500D               	movf	i2___ftdiv@f2+1,w,c
 18154  0046F4  580A               	subwfb	i2___ftdiv@f1+1,w,c
 18155  0046F6  500E               	movf	i2___ftdiv@f2+2,w,c
 18156  0046F8  580B               	subwfb	i2___ftdiv@f1+2,w,c
 18157  0046FA  A0D8               	btfss	status,0,c
 18158  0046FC  D007               	goto	i2l902
 18159  0046FE  500C               	movf	i2___ftdiv@f2,w,c
 18160  004700  5E09               	subwf	i2___ftdiv@f1,f,c
 18161  004702  500D               	movf	i2___ftdiv@f2+1,w,c
 18162  004704  5A0A               	subwfb	i2___ftdiv@f1+1,f,c
 18163  004706  500E               	movf	i2___ftdiv@f2+2,w,c
 18164  004708  5A0B               	subwfb	i2___ftdiv@f1+2,f,c
 18165  00470A  8013               	bsf	i2___ftdiv@f3,0,c
 18166  00470C                     i2l902:
 18167  00470C  90D8               	bcf	status,0,c
 18168  00470E  3609               	rlcf	i2___ftdiv@f1,f,c
 18169  004710  360A               	rlcf	i2___ftdiv@f1+1,f,c
 18170  004712  360B               	rlcf	i2___ftdiv@f1+2,f,c
 18171  004714  2E12               	decfsz	i2___ftdiv@cntr,f,c
 18172  004716  D7E7               	goto	i2l4834
 18173  004718  C013  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 18174  00471C  C014  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 18175  004720  C015  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 18176  004724  C016  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 18177  004728  C017  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 18178  00472C  ECCF  F026         	call	i2___ftpack	;wreg free
 18179  004730  C001  F009         	movff	?i2___ftpack,?i2___ftdiv
 18180  004734  C002  F00A         	movff	?i2___ftpack+1,?i2___ftdiv+1
 18181  004738  C003  F00B         	movff	?i2___ftpack+2,?i2___ftdiv+2
 18182  00473C  0012               	return	
 18183  00473E                     __end_ofi2___ftdiv:
 18184                           	opt stack 0
 18185                           pclatu	equ	0xFFB
 18186                           pclath	equ	0xFFA
 18187                           tblptru	equ	0xFF8
 18188                           tblptrh	equ	0xFF7
 18189                           tblptrl	equ	0xFF6
 18190                           tablat	equ	0xFF5
 18191                           prodh	equ	0xFF4
 18192                           prodl	equ	0xFF3
 18193                           intcon	equ	0xFF2
 18194                           intcon2	equ	0xFF1
 18195                           intcon3	equ	0xFF0
 18196                           postinc0	equ	0xFEE
 18197                           fsr0h	equ	0xFEA
 18198                           fsr0l	equ	0xFE9
 18199                           wreg	equ	0xFE8
 18200                           fsr1h	equ	0xFE2
 18201                           fsr1l	equ	0xFE1
 18202                           indf2	equ	0xFDF
 18203                           postinc2	equ	0xFDE
 18204                           postdec2	equ	0xFDD
 18205                           fsr2h	equ	0xFDA
 18206                           fsr2l	equ	0xFD9
 18207                           status	equ	0xFD8
 18208                           
 18209 ;; *************** function i2___awtoft *****************
 18210 ;; Defined at:
 18211 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  c               2    8[COMRAM] int 
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;  __awtoft        1   11[COMRAM] unsigned char 
 18216 ;; Return value:  Size  Location     Type
 18217 ;;                  3    8[COMRAM] float 
 18218 ;; Registers used:
 18219 ;;		wreg, status,2, status,0, cstack
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18225 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18229 ;;Total ram usage:        4 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    1
 18232 ;; This function calls:
 18233 ;;		i2___ftpack
 18234 ;; This function is called by:
 18235 ;;		_dec_to_hex
 18236 ;;		_exp
 18237 ;;		_log
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           	psect	text70
 18242  0056EC                     __ptext70:
 18243                           	opt stack 0
 18244  0056EC                     i2___awtoft:
 18245                           	opt stack 22
 18246                           
 18247                           ;incstack = 0
 18248  0056EC  0E00               	movlw	0
 18249  0056EE  6E0C               	movwf	i2___awtoft@sign,c
 18250  0056F0  AE0A               	btfss	i2___awtoft@c+1,7,c
 18251  0056F2  D006               	goto	i2l4798
 18252  0056F4  6C09               	negf	i2___awtoft@c,c
 18253  0056F6  1E0A               	comf	i2___awtoft@c+1,f,c
 18254  0056F8  B0D8               	btfsc	status,0,c
 18255  0056FA  2A0A               	incf	i2___awtoft@c+1,f,c
 18256  0056FC  0E01               	movlw	1
 18257  0056FE  6E0C               	movwf	i2___awtoft@sign,c
 18258  005700                     i2l4798:
 18259  005700  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
 18260  005704  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
 18261  005708  6A03               	clrf	i2___ftpack@arg+2,c
 18262  00570A  0E8E               	movlw	142
 18263  00570C  6E04               	movwf	i2___ftpack@exp,c
 18264  00570E  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
 18265  005712  ECCF  F026         	call	i2___ftpack	;wreg free
 18266  005716  C001  F009         	movff	?i2___ftpack,?i2___awtoft
 18267  00571A  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
 18268  00571E  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
 18269  005722  0012               	return	
 18270  005724                     __end_ofi2___awtoft:
 18271                           	opt stack 0
 18272                           pclatu	equ	0xFFB
 18273                           pclath	equ	0xFFA
 18274                           tblptru	equ	0xFF8
 18275                           tblptrh	equ	0xFF7
 18276                           tblptrl	equ	0xFF6
 18277                           tablat	equ	0xFF5
 18278                           prodh	equ	0xFF4
 18279                           prodl	equ	0xFF3
 18280                           intcon	equ	0xFF2
 18281                           intcon2	equ	0xFF1
 18282                           intcon3	equ	0xFF0
 18283                           postinc0	equ	0xFEE
 18284                           fsr0h	equ	0xFEA
 18285                           fsr0l	equ	0xFE9
 18286                           wreg	equ	0xFE8
 18287                           fsr1h	equ	0xFE2
 18288                           fsr1l	equ	0xFE1
 18289                           indf2	equ	0xFDF
 18290                           postinc2	equ	0xFDE
 18291                           postdec2	equ	0xFDD
 18292                           fsr2h	equ	0xFDA
 18293                           fsr2l	equ	0xFD9
 18294                           status	equ	0xFD8
 18295                           
 18296 ;; *************** function _ldexp *****************
 18297 ;; Defined at:
 18298 ;;		line 277 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 18299 ;; Parameters:    Size  Location     Type
 18300 ;;  value           3   69[COMRAM] float 
 18301 ;;  newexp          2   72[COMRAM] int 
 18302 ;; Auto vars:     Size  Location     Type
 18303 ;;		None
 18304 ;; Return value:  Size  Location     Type
 18305 ;;                  3   69[COMRAM] int 
 18306 ;; Registers used:
 18307 ;;		wreg, status,2, status,0
 18308 ;; Tracked objects:
 18309 ;;		On entry : 0/0
 18310 ;;		On exit  : 0/0
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18313 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18316 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18317 ;;Total ram usage:        7 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; This function calls:
 18320 ;;		Nothing
 18321 ;; This function is called by:
 18322 ;;		_exp
 18323 ;; This function uses a non-reentrant model
 18324 ;;
 18325                           
 18326                           	psect	text71
 18327  004B5E                     __ptext71:
 18328                           	opt stack 0
 18329  004B5E                     _ldexp:
 18330                           	opt stack 21
 18331                           
 18332                           ;incstack = 0
 18333  004B5E  5046               	movf	ldexp@value,w,c
 18334  004B60  1047               	iorwf	ldexp@value+1,w,c
 18335  004B62  1048               	iorwf	ldexp@value+2,w,c
 18336  004B64  A4D8               	btfss	status,2,c
 18337  004B66  D007               	goto	i2l4760
 18338  004B68  0E00               	movlw	0
 18339  004B6A  6E46               	movwf	?_ldexp,c
 18340  004B6C  0E00               	movlw	0
 18341  004B6E  6E47               	movwf	?_ldexp+1,c
 18342  004B70  0E00               	movlw	0
 18343  004B72  6E48               	movwf	?_ldexp+2,c
 18344  004B74  0012               	return	
 18345  004B76                     i2l4760:
 18346  004B76  5048               	movf	ldexp@value+2,w,c
 18347  004B78  0B7F               	andlw	127
 18348  004B7A  6E4B               	movwf	??_ldexp& (0+255),c
 18349  004B7C  6A4C               	clrf	(??_ldexp+1)& (0+255),c
 18350  004B7E  90D8               	bcf	status,0,c
 18351  004B80  364B               	rlcf	??_ldexp,f,c
 18352  004B82  364C               	rlcf	??_ldexp+1,f,c
 18353  004B84  504B               	movf	??_ldexp,w,c
 18354  004B86  2649               	addwf	ldexp@newexp,f,c
 18355  004B88  504C               	movf	??_ldexp+1,w,c
 18356  004B8A  224A               	addwfc	ldexp@newexp+1,f,c
 18357  004B8C  AE47               	btfss	ldexp@value+1,7,c
 18358  004B8E  D003               	goto	i2u491_40
 18359  004B90  6A4B               	clrf	??_ldexp& (0+255),c
 18360  004B92  2A4B               	incf	??_ldexp& (0+255),f,c
 18361  004B94  D001               	goto	i2u491_48
 18362  004B96                     i2u491_40:
 18363  004B96  6A4B               	clrf	??_ldexp& (0+255),c
 18364  004B98                     i2u491_48:
 18365  004B98  504B               	movf	??_ldexp,w,c
 18366  004B9A  2649               	addwf	ldexp@newexp,f,c
 18367  004B9C  0E00               	movlw	0
 18368  004B9E  224A               	addwfc	ldexp@newexp+1,f,c
 18369  004BA0  AE4A               	btfss	ldexp@newexp+1,7,c
 18370  004BA2  D00C               	goto	i2l4768
 18371  004BA4  0E00               	movlw	0
 18372  004BA6  0101               	movlb	1	; () banked
 18373  004BA8  6F6C               	movwf	(_errno+1)& (0+255),b
 18374  004BAA  0E22               	movlw	34
 18375  004BAC  6F6B               	movwf	_errno& (0+255),b
 18376  004BAE  0E00               	movlw	0
 18377  004BB0  6E46               	movwf	?_ldexp,c
 18378  004BB2  0E00               	movlw	0
 18379  004BB4  6E47               	movwf	?_ldexp+1,c
 18380  004BB6  0E00               	movlw	0
 18381  004BB8                     L29:
 18382  004BB8  6E48               	movwf	?_ldexp+2,c
 18383                           
 18384                           ; BSR set to: 1
 18385  004BBA  0012               	return	
 18386  004BBC                     i2l4768:
 18387  004BBC  BE4A               	btfsc	ldexp@newexp+1,7,c
 18388  004BBE  D016               	goto	i2l4784
 18389  004BC0  044A               	decf	ldexp@newexp+1,w,c
 18390  004BC2  A0D8               	btfss	status,0,c
 18391  004BC4  D013               	goto	i2l4784
 18392  004BC6  0E00               	movlw	0
 18393  004BC8  0101               	movlb	1	; () banked
 18394  004BCA  6F6C               	movwf	(_errno+1)& (0+255),b
 18395  004BCC  0E22               	movlw	34
 18396  004BCE  6F6B               	movwf	_errno& (0+255),b
 18397                           
 18398                           ; BSR set to: 1
 18399  004BD0  AE48               	btfss	ldexp@value+2,7,c
 18400  004BD2  D006               	goto	i2l4780
 18401                           
 18402                           ; BSR set to: 1
 18403  004BD4  0EFF               	movlw	255
 18404  004BD6  6E46               	movwf	?_ldexp,c
 18405  004BD8  0E7F               	movlw	127
 18406  004BDA  6E47               	movwf	?_ldexp+1,c
 18407  004BDC  0EFF               	movlw	255
 18408  004BDE  D7EC               	goto	L29
 18409  004BE0                     i2l4780:
 18410                           
 18411                           ; BSR set to: 1
 18412  004BE0  0EFF               	movlw	255
 18413  004BE2  6E46               	movwf	?_ldexp,c
 18414  004BE4  0E7F               	movlw	127
 18415  004BE6  6E47               	movwf	?_ldexp+1,c
 18416  004BE8  0E7F               	movlw	127
 18417  004BEA  D7E6               	goto	L29
 18418  004BEC                     i2l4784:
 18419  004BEC  344A               	rlcf	ldexp@newexp+1,w,c
 18420  004BEE  304A               	rrcf	ldexp@newexp+1,w,c
 18421  004BF0  6E4C               	movwf	(??_ldexp+1)& (0+255),c
 18422  004BF2  3049               	rrcf	ldexp@newexp,w,c
 18423  004BF4  6E4B               	movwf	??_ldexp& (0+255),c
 18424  004BF6  5048               	movf	ldexp@value+2,w,c
 18425  004BF8  184B               	xorwf	??_ldexp,w,c
 18426  004BFA  0B80               	andlw	-128
 18427  004BFC  184B               	xorwf	??_ldexp,w,c
 18428  004BFE  6E48               	movwf	ldexp@value+2,c
 18429  004C00  C049  F04B         	movff	ldexp@newexp,??_ldexp
 18430  004C04  0E01               	movlw	1
 18431  004C06  164B               	andwf	??_ldexp,f,c
 18432  004C08  324B               	rrcf	??_ldexp,f,c
 18433  004C0A  324B               	rrcf	??_ldexp,f,c
 18434  004C0C  5047               	movf	ldexp@value+1,w,c
 18435  004C0E  184B               	xorwf	??_ldexp,w,c
 18436  004C10  0B7F               	andlw	-129
 18437  004C12  184B               	xorwf	??_ldexp,w,c
 18438  004C14  6E47               	movwf	ldexp@value+1,c
 18439  004C16  C046  F046         	movff	ldexp@value,?_ldexp
 18440  004C1A  C047  F047         	movff	ldexp@value+1,?_ldexp+1
 18441  004C1E  C048  F048         	movff	ldexp@value+2,?_ldexp+2
 18442  004C22  0012               	return	
 18443  004C24                     __end_of_ldexp:
 18444                           	opt stack 0
 18445                           pclatu	equ	0xFFB
 18446                           pclath	equ	0xFFA
 18447                           tblptru	equ	0xFF8
 18448                           tblptrh	equ	0xFF7
 18449                           tblptrl	equ	0xFF6
 18450                           tablat	equ	0xFF5
 18451                           prodh	equ	0xFF4
 18452                           prodl	equ	0xFF3
 18453                           intcon	equ	0xFF2
 18454                           intcon2	equ	0xFF1
 18455                           intcon3	equ	0xFF0
 18456                           postinc0	equ	0xFEE
 18457                           fsr0h	equ	0xFEA
 18458                           fsr0l	equ	0xFE9
 18459                           wreg	equ	0xFE8
 18460                           fsr1h	equ	0xFE2
 18461                           fsr1l	equ	0xFE1
 18462                           indf2	equ	0xFDF
 18463                           postinc2	equ	0xFDE
 18464                           postdec2	equ	0xFDD
 18465                           fsr2h	equ	0xFDA
 18466                           fsr2l	equ	0xFD9
 18467                           status	equ	0xFD8
 18468                           
 18469 ;; *************** function _floor *****************
 18470 ;; Defined at:
 18471 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
 18472 ;; Parameters:    Size  Location     Type
 18473 ;;  x               3   82[COMRAM] int 
 18474 ;; Auto vars:     Size  Location     Type
 18475 ;;  i               3   85[COMRAM] int 
 18476 ;;  expon           2   88[COMRAM] int 
 18477 ;; Return value:  Size  Location     Type
 18478 ;;                  3   82[COMRAM] int 
 18479 ;; Registers used:
 18480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18481 ;; Tracked objects:
 18482 ;;		On entry : 0/0
 18483 ;;		On exit  : 0/0
 18484 ;;		Unchanged: 0/0
 18485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18486 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18489 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18490 ;;Total ram usage:        8 bytes
 18491 ;; Hardware stack levels used:    1
 18492 ;; Hardware stack levels required when called:    2
 18493 ;; This function calls:
 18494 ;;		___altoft
 18495 ;;		_frexp
 18496 ;;		i2___ftadd
 18497 ;;		i2___ftge
 18498 ;;		i2___fttol
 18499 ;; This function is called by:
 18500 ;;		_exp
 18501 ;; This function uses a non-reentrant model
 18502 ;;
 18503                           
 18504                           	psect	text72
 18505  00473E                     __ptext72:
 18506                           	opt stack 0
 18507  00473E                     _floor:
 18508                           	opt stack 19
 18509                           
 18510                           ;incstack = 0
 18511  00473E  C053  F001         	movff	floor@x,frexp@value
 18512  004742  C054  F002         	movff	floor@x+1,frexp@value+1
 18513  004746  C055  F003         	movff	floor@x+2,frexp@value+2
 18514  00474A  0E59               	movlw	low floor@expon
 18515  00474C  6E04               	movwf	frexp@eptr,c
 18516  00474E  0E00               	movlw	high floor@expon
 18517  004750  6E05               	movwf	frexp@eptr+1,c
 18518  004752  EC0C  F028         	call	_frexp	;wreg free
 18519  004756  AE5A               	btfss	floor@expon+1,7,c
 18520  004758  D010               	goto	i2l4738
 18521  00475A  AE55               	btfss	floor@x+2,7,c
 18522  00475C  D007               	goto	i2l4734
 18523  00475E  0E00               	movlw	0
 18524  004760  6E53               	movwf	?_floor,c
 18525  004762  0E80               	movlw	128
 18526  004764  6E54               	movwf	?_floor+1,c
 18527  004766  0EBF               	movlw	191
 18528  004768  6E55               	movwf	?_floor+2,c
 18529  00476A  0012               	return	
 18530  00476C                     i2l4734:
 18531  00476C  0E00               	movlw	0
 18532  00476E  6E53               	movwf	?_floor,c
 18533  004770  0E00               	movlw	0
 18534  004772  6E54               	movwf	?_floor+1,c
 18535  004774  0E00               	movlw	0
 18536  004776  6E55               	movwf	?_floor+2,c
 18537  004778  0012               	return	
 18538  00477A                     i2l4738:
 18539  00477A  505A               	movf	floor@expon+1,w,c
 18540  00477C  E104               	bnz	i2u487_40
 18541  00477E  0E15               	movlw	21
 18542  004780  5C59               	subwf	floor@expon,w,c
 18543  004782  A0D8               	btfss	status,0,c
 18544  004784  D007               	goto	i2l4742
 18545  004786                     i2u487_40:
 18546  004786  C053  F053         	movff	floor@x,?_floor
 18547  00478A  C054  F054         	movff	floor@x+1,?_floor+1
 18548  00478E  C055  F055         	movff	floor@x+2,?_floor+2
 18549  004792  0012               	return	
 18550  004794                     i2l4742:
 18551  004794  C053  F03A         	movff	floor@x,i2___fttol@f1
 18552  004798  C054  F03B         	movff	floor@x+1,i2___fttol@f1+1
 18553  00479C  C055  F03C         	movff	floor@x+2,i2___fttol@f1+2
 18554  0047A0  EC38  F022         	call	i2___fttol	;wreg free
 18555  0047A4  C03A  F049         	movff	?i2___fttol,___altoft@c
 18556  0047A8  C03B  F04A         	movff	?i2___fttol+1,___altoft@c+1
 18557  0047AC  C03C  F04B         	movff	?i2___fttol+2,___altoft@c+2
 18558  0047B0  C03D  F04C         	movff	?i2___fttol+3,___altoft@c+3
 18559  0047B4  EC15  F029         	call	___altoft	;wreg free
 18560  0047B8  C049  F056         	movff	?___altoft,floor@i
 18561  0047BC  C04A  F057         	movff	?___altoft+1,floor@i+1
 18562  0047C0  C04B  F058         	movff	?___altoft+2,floor@i+2
 18563  0047C4  C053  F001         	movff	floor@x,i2___ftge@ff1
 18564  0047C8  C054  F002         	movff	floor@x+1,i2___ftge@ff1+1
 18565  0047CC  C055  F003         	movff	floor@x+2,i2___ftge@ff1+2
 18566  0047D0  C056  F004         	movff	floor@i,i2___ftge@ff2
 18567  0047D4  C057  F005         	movff	floor@i+1,i2___ftge@ff2+1
 18568  0047D8  C058  F006         	movff	floor@i+2,i2___ftge@ff2+2
 18569  0047DC  ECC4  F027         	call	i2___ftge	;wreg free
 18570  0047E0  B0D8               	btfsc	status,0,c
 18571  0047E2  D015               	goto	i2l1254
 18572  0047E4  C056  F02E         	movff	floor@i,i2___ftadd@f1
 18573  0047E8  C057  F02F         	movff	floor@i+1,i2___ftadd@f1+1
 18574  0047EC  C058  F030         	movff	floor@i+2,i2___ftadd@f1+2
 18575  0047F0  0E00               	movlw	0
 18576  0047F2  6E31               	movwf	i2___ftadd@f2,c
 18577  0047F4  0E80               	movlw	128
 18578  0047F6  6E32               	movwf	i2___ftadd@f2+1,c
 18579  0047F8  0EBF               	movlw	191
 18580  0047FA  6E33               	movwf	i2___ftadd@f2+2,c
 18581  0047FC  EC03  F018         	call	i2___ftadd	;wreg free
 18582  004800  C02E  F053         	movff	?i2___ftadd,?_floor
 18583  004804  C02F  F054         	movff	?i2___ftadd+1,?_floor+1
 18584  004808  C030  F055         	movff	?i2___ftadd+2,?_floor+2
 18585  00480C  0012               	return	
 18586  00480E                     i2l1254:
 18587  00480E  C056  F053         	movff	floor@i,?_floor
 18588  004812  C057  F054         	movff	floor@i+1,?_floor+1
 18589  004816  C058  F055         	movff	floor@i+2,?_floor+2
 18590  00481A  0012               	return		;funcret
 18591  00481C                     __end_of_floor:
 18592                           	opt stack 0
 18593                           pclatu	equ	0xFFB
 18594                           pclath	equ	0xFFA
 18595                           tblptru	equ	0xFF8
 18596                           tblptrh	equ	0xFF7
 18597                           tblptrl	equ	0xFF6
 18598                           tablat	equ	0xFF5
 18599                           prodh	equ	0xFF4
 18600                           prodl	equ	0xFF3
 18601                           intcon	equ	0xFF2
 18602                           intcon2	equ	0xFF1
 18603                           intcon3	equ	0xFF0
 18604                           postinc0	equ	0xFEE
 18605                           fsr0h	equ	0xFEA
 18606                           fsr0l	equ	0xFE9
 18607                           wreg	equ	0xFE8
 18608                           fsr1h	equ	0xFE2
 18609                           fsr1l	equ	0xFE1
 18610                           indf2	equ	0xFDF
 18611                           postinc2	equ	0xFDE
 18612                           postdec2	equ	0xFDD
 18613                           fsr2h	equ	0xFDA
 18614                           fsr2l	equ	0xFD9
 18615                           status	equ	0xFD8
 18616                           
 18617 ;; *************** function i2___fttol *****************
 18618 ;; Defined at:
 18619 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 18620 ;; Parameters:    Size  Location     Type
 18621 ;;  f1              3   57[COMRAM] float 
 18622 ;; Auto vars:     Size  Location     Type
 18623 ;;  __fttol         4   67[COMRAM] unsigned long 
 18624 ;;  __fttol         1   71[COMRAM] unsigned char 
 18625 ;;  __fttol         1   66[COMRAM] unsigned char 
 18626 ;; Return value:  Size  Location     Type
 18627 ;;                  4   57[COMRAM] long 
 18628 ;; Registers used:
 18629 ;;		wreg, status,2, status,0
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18636 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18637 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18638 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18639 ;;Total ram usage:       15 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; This function calls:
 18642 ;;		Nothing
 18643 ;; This function is called by:
 18644 ;;		_dec_to_hex
 18645 ;;		_pow
 18646 ;;		_exp
 18647 ;;		_floor
 18648 ;;		i2_printf
 18649 ;; This function uses a non-reentrant model
 18650 ;;
 18651                           
 18652                           	psect	text73
 18653  004470                     __ptext73:
 18654                           	opt stack 0
 18655  004470                     i2___fttol:
 18656                           	opt stack 23
 18657                           
 18658                           ;incstack = 0
 18659  004470  C03C  F03E         	movff	i2___fttol@f1+2,??i2___fttol
 18660  004474  6A3F               	clrf	(??i2___fttol+1)& (0+255),c
 18661  004476  6A40               	clrf	(??i2___fttol+2)& (0+255),c
 18662  004478  343B               	rlcf	i2___fttol@f1+1,w,c
 18663  00447A  363E               	rlcf	??i2___fttol& (0+255),f,c
 18664  00447C  E301               	bnc	u436_41
 18665  00447E  803F               	bsf	(??i2___fttol+1)& (0+255),0,c
 18666  004480                     u436_41:
 18667  004480  503E               	movf	??i2___fttol,w,c
 18668  004482  6E48               	movwf	i2___fttol@exp1,c
 18669  004484  5048               	movf	i2___fttol@exp1,w,c
 18670  004486  A4D8               	btfss	status,2,c
 18671  004488  D009               	goto	i2l4458
 18672  00448A  0E00               	movlw	0
 18673  00448C  6E3A               	movwf	?i2___fttol,c
 18674  00448E  0E00               	movlw	0
 18675  004490  6E3B               	movwf	?i2___fttol+1,c
 18676  004492  0E00               	movlw	0
 18677  004494  6E3C               	movwf	?i2___fttol+2,c
 18678  004496  0E00               	movlw	0
 18679  004498  6E3D               	movwf	?i2___fttol+3,c
 18680  00449A  0012               	return	
 18681  00449C                     i2l4458:
 18682  00449C  0E17               	movlw	23
 18683  00449E  6E3E               	movwf	??i2___fttol& (0+255),c
 18684  0044A0  C03A  F03F         	movff	i2___fttol@f1,??i2___fttol+1
 18685  0044A4  C03B  F040         	movff	i2___fttol@f1+1,??i2___fttol+2
 18686  0044A8  C03C  F041         	movff	i2___fttol@f1+2,??i2___fttol+3
 18687  0044AC  283E               	incf	??i2___fttol,w,c
 18688  0044AE  6E42               	movwf	(??i2___fttol+4)& (0+255),c
 18689  0044B0  D004               	goto	i2u438_40
 18690  0044B2                     i2u438_45:
 18691  0044B2  90D8               	bcf	status,0,c
 18692  0044B4  3241               	rrcf	??i2___fttol+3,f,c
 18693  0044B6  3240               	rrcf	??i2___fttol+2,f,c
 18694  0044B8  323F               	rrcf	??i2___fttol+1,f,c
 18695  0044BA                     i2u438_40:
 18696  0044BA  2E42               	decfsz	(??i2___fttol+4)& (0+255),f,c
 18697  0044BC  D7FA               	goto	i2u438_45
 18698  0044BE  503F               	movf	??i2___fttol+1,w,c
 18699  0044C0  6E43               	movwf	i2___fttol@sign1,c
 18700  0044C2  8E3B               	bsf	i2___fttol@f1+1,7,c
 18701  0044C4  0EFF               	movlw	255
 18702  0044C6  163A               	andwf	i2___fttol@f1,f,c
 18703  0044C8  0EFF               	movlw	255
 18704  0044CA  163B               	andwf	i2___fttol@f1+1,f,c
 18705  0044CC  0E00               	movlw	0
 18706  0044CE  163C               	andwf	i2___fttol@f1+2,f,c
 18707  0044D0  503A               	movf	i2___fttol@f1,w,c
 18708  0044D2  6E44               	movwf	i2___fttol@lval,c
 18709  0044D4  503B               	movf	i2___fttol@f1+1,w,c
 18710  0044D6  6E45               	movwf	i2___fttol@lval+1,c
 18711  0044D8  503C               	movf	i2___fttol@f1+2,w,c
 18712  0044DA  6E46               	movwf	i2___fttol@lval+2,c
 18713  0044DC  6A47               	clrf	i2___fttol@lval+3,c
 18714  0044DE  0E8E               	movlw	142
 18715  0044E0  5E48               	subwf	i2___fttol@exp1,f,c
 18716  0044E2  AE48               	btfss	i2___fttol@exp1,7,c
 18717  0044E4  D016               	goto	i2l4480
 18718  0044E6  5048               	movf	i2___fttol@exp1,w,c
 18719  0044E8  0A80               	xorlw	128
 18720  0044EA  0F8F               	addlw	143
 18721  0044EC  B0D8               	btfsc	status,0,c
 18722  0044EE  D009               	goto	i2l4476
 18723  0044F0  0E00               	movlw	0
 18724  0044F2  6E3A               	movwf	?i2___fttol,c
 18725  0044F4  0E00               	movlw	0
 18726  0044F6  6E3B               	movwf	?i2___fttol+1,c
 18727  0044F8  0E00               	movlw	0
 18728  0044FA  6E3C               	movwf	?i2___fttol+2,c
 18729  0044FC  0E00               	movlw	0
 18730  0044FE  6E3D               	movwf	?i2___fttol+3,c
 18731  004500  0012               	return	
 18732  004502                     i2l4476:
 18733  004502  90D8               	bcf	status,0,c
 18734  004504  3247               	rrcf	i2___fttol@lval+3,f,c
 18735  004506  3246               	rrcf	i2___fttol@lval+2,f,c
 18736  004508  3245               	rrcf	i2___fttol@lval+1,f,c
 18737  00450A  3244               	rrcf	i2___fttol@lval,f,c
 18738  00450C  3E48               	incfsz	i2___fttol@exp1,f,c
 18739  00450E  D7F9               	goto	i2l4476
 18740  004510  D015               	goto	i2l4490
 18741  004512                     i2l4480:
 18742  004512  0E17               	movlw	23
 18743  004514  6448               	cpfsgt	i2___fttol@exp1,c
 18744  004516  D00F               	goto	i2l4488
 18745  004518  0E00               	movlw	0
 18746  00451A  6E3A               	movwf	?i2___fttol,c
 18747  00451C  0E00               	movlw	0
 18748  00451E  6E3B               	movwf	?i2___fttol+1,c
 18749  004520  0E00               	movlw	0
 18750  004522  6E3C               	movwf	?i2___fttol+2,c
 18751  004524  0E00               	movlw	0
 18752  004526  6E3D               	movwf	?i2___fttol+3,c
 18753  004528  0012               	return	
 18754  00452A                     i2l4486:
 18755  00452A  90D8               	bcf	status,0,c
 18756  00452C  3644               	rlcf	i2___fttol@lval,f,c
 18757  00452E  3645               	rlcf	i2___fttol@lval+1,f,c
 18758  004530  3646               	rlcf	i2___fttol@lval+2,f,c
 18759  004532  3647               	rlcf	i2___fttol@lval+3,f,c
 18760  004534  0648               	decf	i2___fttol@exp1,f,c
 18761  004536                     i2l4488:
 18762  004536  5048               	movf	i2___fttol@exp1,w,c
 18763  004538  A4D8               	btfss	status,2,c
 18764  00453A  D7F7               	goto	i2l4486
 18765  00453C                     i2l4490:
 18766  00453C  5043               	movf	i2___fttol@sign1,w,c
 18767  00453E  B4D8               	btfsc	status,2,c
 18768  004540  D008               	goto	i2l4494
 18769  004542  1E47               	comf	i2___fttol@lval+3,f,c
 18770  004544  1E46               	comf	i2___fttol@lval+2,f,c
 18771  004546  1E45               	comf	i2___fttol@lval+1,f,c
 18772  004548  6C44               	negf	i2___fttol@lval,c
 18773  00454A  0E00               	movlw	0
 18774  00454C  2245               	addwfc	i2___fttol@lval+1,f,c
 18775  00454E  2246               	addwfc	i2___fttol@lval+2,f,c
 18776  004550  2247               	addwfc	i2___fttol@lval+3,f,c
 18777  004552                     i2l4494:
 18778  004552  C044  F03A         	movff	i2___fttol@lval,?i2___fttol
 18779  004556  C045  F03B         	movff	i2___fttol@lval+1,?i2___fttol+1
 18780  00455A  C046  F03C         	movff	i2___fttol@lval+2,?i2___fttol+2
 18781  00455E  C047  F03D         	movff	i2___fttol@lval+3,?i2___fttol+3
 18782  004562  0012               	return	
 18783  004564                     __end_ofi2___fttol:
 18784                           	opt stack 0
 18785                           pclatu	equ	0xFFB
 18786                           pclath	equ	0xFFA
 18787                           tblptru	equ	0xFF8
 18788                           tblptrh	equ	0xFF7
 18789                           tblptrl	equ	0xFF6
 18790                           tablat	equ	0xFF5
 18791                           prodh	equ	0xFF4
 18792                           prodl	equ	0xFF3
 18793                           intcon	equ	0xFF2
 18794                           intcon2	equ	0xFF1
 18795                           intcon3	equ	0xFF0
 18796                           postinc0	equ	0xFEE
 18797                           fsr0h	equ	0xFEA
 18798                           fsr0l	equ	0xFE9
 18799                           wreg	equ	0xFE8
 18800                           fsr1h	equ	0xFE2
 18801                           fsr1l	equ	0xFE1
 18802                           indf2	equ	0xFDF
 18803                           postinc2	equ	0xFDE
 18804                           postdec2	equ	0xFDD
 18805                           fsr2h	equ	0xFDA
 18806                           fsr2l	equ	0xFD9
 18807                           status	equ	0xFD8
 18808                           
 18809 ;; *************** function i2___ftge *****************
 18810 ;; Defined at:
 18811 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;  ff1             3    0[COMRAM] float 
 18814 ;;  ff2             3    3[COMRAM] float 
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;		None
 18817 ;; Return value:  Size  Location     Type
 18818 ;;		None               void
 18819 ;; Registers used:
 18820 ;;		wreg, status,2, status,0
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18826 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18829 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18830 ;;Total ram usage:        9 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; This function calls:
 18833 ;;		Nothing
 18834 ;; This function is called by:
 18835 ;;		_pow
 18836 ;;		_exp
 18837 ;;		_floor
 18838 ;;		i2_printf
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           	psect	text74
 18843  004F88                     __ptext74:
 18844                           	opt stack 0
 18845  004F88                     i2___ftge:
 18846                           	opt stack 23
 18847                           
 18848                           ;incstack = 0
 18849  004F88  AE03               	btfss	i2___ftge@ff1+2,7,c
 18850  004F8A  D016               	goto	i2l4390
 18851  004F8C  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 18852  004F90  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 18853  004F94  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 18854  004F98  1E07               	comf	??i2___ftge,f,c
 18855  004F9A  1E08               	comf	??i2___ftge+1,f,c
 18856  004F9C  1E09               	comf	??i2___ftge+2,f,c
 18857  004F9E  2A07               	incf	??i2___ftge,f,c
 18858  004FA0  0E00               	movlw	0
 18859  004FA2  2208               	addwfc	??i2___ftge+1,f,c
 18860  004FA4  2209               	addwfc	??i2___ftge+2,f,c
 18861  004FA6  0E00               	movlw	0
 18862  004FA8  2407               	addwf	??i2___ftge,w,c
 18863  004FAA  6E01               	movwf	i2___ftge@ff1,c
 18864  004FAC  0E00               	movlw	0
 18865  004FAE  2008               	addwfc	??i2___ftge+1,w,c
 18866  004FB0  6E02               	movwf	i2___ftge@ff1+1,c
 18867  004FB2  0E80               	movlw	128
 18868  004FB4  2009               	addwfc	??i2___ftge+2,w,c
 18869  004FB6  6E03               	movwf	i2___ftge@ff1+2,c
 18870  004FB8                     i2l4390:
 18871  004FB8  AE06               	btfss	i2___ftge@ff2+2,7,c
 18872  004FBA  D016               	goto	i2l4394
 18873  004FBC  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 18874  004FC0  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 18875  004FC4  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 18876  004FC8  1E07               	comf	??i2___ftge,f,c
 18877  004FCA  1E08               	comf	??i2___ftge+1,f,c
 18878  004FCC  1E09               	comf	??i2___ftge+2,f,c
 18879  004FCE  2A07               	incf	??i2___ftge,f,c
 18880  004FD0  0E00               	movlw	0
 18881  004FD2  2208               	addwfc	??i2___ftge+1,f,c
 18882  004FD4  2209               	addwfc	??i2___ftge+2,f,c
 18883  004FD6  0E00               	movlw	0
 18884  004FD8  2407               	addwf	??i2___ftge,w,c
 18885  004FDA  6E04               	movwf	i2___ftge@ff2,c
 18886  004FDC  0E00               	movlw	0
 18887  004FDE  2008               	addwfc	??i2___ftge+1,w,c
 18888  004FE0  6E05               	movwf	i2___ftge@ff2+1,c
 18889  004FE2  0E80               	movlw	128
 18890  004FE4  2009               	addwfc	??i2___ftge+2,w,c
 18891  004FE6  6E06               	movwf	i2___ftge@ff2+2,c
 18892  004FE8                     i2l4394:
 18893  004FE8  0E00               	movlw	0
 18894  004FEA  1A01               	xorwf	i2___ftge@ff1,f,c
 18895  004FEC  0E00               	movlw	0
 18896  004FEE  1A02               	xorwf	i2___ftge@ff1+1,f,c
 18897  004FF0  0E80               	movlw	128
 18898  004FF2  1A03               	xorwf	i2___ftge@ff1+2,f,c
 18899  004FF4  0E00               	movlw	0
 18900  004FF6  1A04               	xorwf	i2___ftge@ff2,f,c
 18901  004FF8  0E00               	movlw	0
 18902  004FFA  1A05               	xorwf	i2___ftge@ff2+1,f,c
 18903  004FFC  0E80               	movlw	128
 18904  004FFE  1A06               	xorwf	i2___ftge@ff2+2,f,c
 18905  005000  5004               	movf	i2___ftge@ff2,w,c
 18906  005002  5C01               	subwf	i2___ftge@ff1,w,c
 18907  005004  5005               	movf	i2___ftge@ff2+1,w,c
 18908  005006  5802               	subwfb	i2___ftge@ff1+1,w,c
 18909  005008  5006               	movf	i2___ftge@ff2+2,w,c
 18910  00500A  5803               	subwfb	i2___ftge@ff1+2,w,c
 18911  00500C  B0D8               	btfsc	status,0,c
 18912  00500E  D002               	goto	i2l4400
 18913  005010  90D8               	bcf	status,0,c
 18914  005012  0012               	return	
 18915  005014                     i2l4400:
 18916  005014  80D8               	bsf	status,0,c
 18917  005016  0012               	return	
 18918  005018                     __end_ofi2___ftge:
 18919                           	opt stack 0
 18920                           pclatu	equ	0xFFB
 18921                           pclath	equ	0xFFA
 18922                           tblptru	equ	0xFF8
 18923                           tblptrh	equ	0xFF7
 18924                           tblptrl	equ	0xFF6
 18925                           tablat	equ	0xFF5
 18926                           prodh	equ	0xFF4
 18927                           prodl	equ	0xFF3
 18928                           intcon	equ	0xFF2
 18929                           intcon2	equ	0xFF1
 18930                           intcon3	equ	0xFF0
 18931                           postinc0	equ	0xFEE
 18932                           fsr0h	equ	0xFEA
 18933                           fsr0l	equ	0xFE9
 18934                           wreg	equ	0xFE8
 18935                           fsr1h	equ	0xFE2
 18936                           fsr1l	equ	0xFE1
 18937                           indf2	equ	0xFDF
 18938                           postinc2	equ	0xFDE
 18939                           postdec2	equ	0xFDD
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function _frexp *****************
 18945 ;; Defined at:
 18946 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;  value           3    0[COMRAM] float 
 18949 ;;  eptr            2    3[COMRAM] PTR int 
 18950 ;;		 -> log@exponent(2), floor@expon(2), 
 18951 ;; Auto vars:     Size  Location     Type
 18952 ;;		None
 18953 ;; Return value:  Size  Location     Type
 18954 ;;                  3    0[COMRAM] PTR int 
 18955 ;; Registers used:
 18956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18957 ;; Tracked objects:
 18958 ;;		On entry : 0/0
 18959 ;;		On exit  : 0/0
 18960 ;;		Unchanged: 0/0
 18961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18962 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;Total ram usage:        7 bytes
 18967 ;; Hardware stack levels used:    1
 18968 ;; This function calls:
 18969 ;;		Nothing
 18970 ;; This function is called by:
 18971 ;;		_floor
 18972 ;;		_log
 18973 ;; This function uses a non-reentrant model
 18974 ;;
 18975                           
 18976                           	psect	text75
 18977  005018                     __ptext75:
 18978                           	opt stack 0
 18979  005018                     _frexp:
 18980                           	opt stack 21
 18981                           
 18982                           ;incstack = 0
 18983  005018  5001               	movf	frexp@value,w,c
 18984  00501A  1002               	iorwf	frexp@value+1,w,c
 18985  00501C  1003               	iorwf	frexp@value+2,w,c
 18986  00501E  A4D8               	btfss	status,2,c
 18987  005020  D00F               	goto	i2l4298
 18988  005022  C004  FFD9         	movff	frexp@eptr,fsr2l
 18989  005026  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 18990  00502A  0E00               	movlw	0
 18991  00502C  6EDE               	movwf	postinc2,c
 18992  00502E  0E00               	movlw	0
 18993  005030  6EDD               	movwf	postdec2,c
 18994  005032  0E00               	movlw	0
 18995  005034  6E01               	movwf	?_frexp,c
 18996  005036  0E00               	movlw	0
 18997  005038  6E02               	movwf	?_frexp+1,c
 18998  00503A  0E00               	movlw	0
 18999  00503C  6E03               	movwf	?_frexp+2,c
 19000  00503E  0012               	return	
 19001  005040                     i2l4298:
 19002  005040  5003               	movf	frexp@value+2,w,c
 19003  005042  0B7F               	andlw	127
 19004  005044  6E06               	movwf	??_frexp& (0+255),c
 19005  005046  6A07               	clrf	(??_frexp+1)& (0+255),c
 19006  005048  90D8               	bcf	status,0,c
 19007  00504A  3606               	rlcf	??_frexp,f,c
 19008  00504C  3607               	rlcf	??_frexp+1,f,c
 19009  00504E  C004  FFD9         	movff	frexp@eptr,fsr2l
 19010  005052  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19011  005056  C006  FFDE         	movff	??_frexp,postinc2
 19012  00505A  C007  FFDD         	movff	??_frexp+1,postdec2
 19013  00505E  AE02               	btfss	frexp@value+1,7,c
 19014  005060  D003               	goto	i2u405_40
 19015  005062  6A06               	clrf	??_frexp& (0+255),c
 19016  005064  2A06               	incf	??_frexp& (0+255),f,c
 19017  005066  D001               	goto	i2u405_48
 19018  005068                     i2u405_40:
 19019  005068  6A06               	clrf	??_frexp& (0+255),c
 19020  00506A                     i2u405_48:
 19021  00506A  5006               	movf	??_frexp,w,c
 19022  00506C  C004  FFD9         	movff	frexp@eptr,fsr2l
 19023  005070  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19024  005074  12DE               	iorwf	postinc2,f,c
 19025  005076  0E00               	movlw	0
 19026  005078  12DD               	iorwf	postdec2,f,c
 19027  00507A  C004  FFD9         	movff	frexp@eptr,fsr2l
 19028  00507E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 19029  005082  0E82               	movlw	130
 19030  005084  26DE               	addwf	postinc2,f,c
 19031  005086  0EFF               	movlw	255
 19032  005088  22DD               	addwfc	postdec2,f,c
 19033  00508A  8003               	bsf	frexp@value+2,0,c
 19034  00508C  8203               	bsf	frexp@value+2,1,c
 19035  00508E  8403               	bsf	frexp@value+2,2,c
 19036  005090  8603               	bsf	frexp@value+2,3,c
 19037  005092  8803               	bsf	frexp@value+2,4,c
 19038  005094  8A03               	bsf	frexp@value+2,5,c
 19039  005096  9C03               	bcf	frexp@value+2,6,c
 19040  005098  9E02               	bcf	frexp@value+1,7,c
 19041  00509A  C001  F001         	movff	frexp@value,?_frexp
 19042  00509E  C002  F002         	movff	frexp@value+1,?_frexp+1
 19043  0050A2  C003  F003         	movff	frexp@value+2,?_frexp+2
 19044  0050A6  0012               	return	
 19045  0050A8                     __end_of_frexp:
 19046                           	opt stack 0
 19047                           pclatu	equ	0xFFB
 19048                           pclath	equ	0xFFA
 19049                           tblptru	equ	0xFF8
 19050                           tblptrh	equ	0xFF7
 19051                           tblptrl	equ	0xFF6
 19052                           tablat	equ	0xFF5
 19053                           prodh	equ	0xFF4
 19054                           prodl	equ	0xFF3
 19055                           intcon	equ	0xFF2
 19056                           intcon2	equ	0xFF1
 19057                           intcon3	equ	0xFF0
 19058                           postinc0	equ	0xFEE
 19059                           fsr0h	equ	0xFEA
 19060                           fsr0l	equ	0xFE9
 19061                           wreg	equ	0xFE8
 19062                           fsr1h	equ	0xFE2
 19063                           fsr1l	equ	0xFE1
 19064                           indf2	equ	0xFDF
 19065                           postinc2	equ	0xFDE
 19066                           postdec2	equ	0xFDD
 19067                           fsr2h	equ	0xFDA
 19068                           fsr2l	equ	0xFD9
 19069                           status	equ	0xFD8
 19070                           
 19071 ;; *************** function ___altoft *****************
 19072 ;; Defined at:
 19073 ;;		line 42 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
 19074 ;; Parameters:    Size  Location     Type
 19075 ;;  c               4   72[COMRAM] long 
 19076 ;; Auto vars:     Size  Location     Type
 19077 ;;  sign            1   81[COMRAM] unsigned char 
 19078 ;;  exp             1   80[COMRAM] unsigned char 
 19079 ;; Return value:  Size  Location     Type
 19080 ;;                  3   72[COMRAM] float 
 19081 ;; Registers used:
 19082 ;;		wreg, status,2, status,0, cstack
 19083 ;; Tracked objects:
 19084 ;;		On entry : 0/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19091 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;Total ram usage:       10 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    1
 19095 ;; This function calls:
 19096 ;;		i2___ftpack
 19097 ;; This function is called by:
 19098 ;;		_floor
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           	psect	text76
 19103  00522A                     __ptext76:
 19104                           	opt stack 0
 19105  00522A                     ___altoft:
 19106                           	opt stack 19
 19107                           
 19108                           ;incstack = 0
 19109  00522A  0E00               	movlw	0
 19110  00522C  6E52               	movwf	___altoft@sign,c
 19111  00522E  0E8E               	movlw	142
 19112  005230  6E51               	movwf	___altoft@exp,c
 19113  005232  AE4C               	btfss	___altoft@c+3,7,c
 19114  005234  D011               	goto	i2l4284
 19115  005236  1E4C               	comf	___altoft@c+3,f,c
 19116  005238  1E4B               	comf	___altoft@c+2,f,c
 19117  00523A  1E4A               	comf	___altoft@c+1,f,c
 19118  00523C  6C49               	negf	___altoft@c,c
 19119  00523E  0E00               	movlw	0
 19120  005240  224A               	addwfc	___altoft@c+1,f,c
 19121  005242  224B               	addwfc	___altoft@c+2,f,c
 19122  005244  224C               	addwfc	___altoft@c+3,f,c
 19123  005246  0E01               	movlw	1
 19124  005248  6E52               	movwf	___altoft@sign,c
 19125  00524A  D006               	goto	i2l4284
 19126  00524C                     i2l4282:
 19127  00524C  90D8               	bcf	status,0,c
 19128  00524E  324C               	rrcf	___altoft@c+3,f,c
 19129  005250  324B               	rrcf	___altoft@c+2,f,c
 19130  005252  324A               	rrcf	___altoft@c+1,f,c
 19131  005254  3249               	rrcf	___altoft@c,f,c
 19132  005256  2A51               	incf	___altoft@exp,f,c
 19133  005258                     i2l4284:
 19134  005258  0E00               	movlw	0
 19135  00525A  1449               	andwf	___altoft@c,w,c
 19136  00525C  6E4D               	movwf	??___altoft& (0+255),c
 19137  00525E  0E00               	movlw	0
 19138  005260  144A               	andwf	___altoft@c+1,w,c
 19139  005262  6E4E               	movwf	(??___altoft+1)& (0+255),c
 19140  005264  0E00               	movlw	0
 19141  005266  144B               	andwf	___altoft@c+2,w,c
 19142  005268  6E4F               	movwf	(??___altoft+2)& (0+255),c
 19143  00526A  0EFF               	movlw	255
 19144  00526C  144C               	andwf	___altoft@c+3,w,c
 19145  00526E  6E50               	movwf	(??___altoft+3)& (0+255),c
 19146  005270  504D               	movf	??___altoft,w,c
 19147  005272  104E               	iorwf	??___altoft+1,w,c
 19148  005274  104F               	iorwf	??___altoft+2,w,c
 19149  005276  1050               	iorwf	??___altoft+3,w,c
 19150  005278  A4D8               	btfss	status,2,c
 19151  00527A  D7E8               	goto	i2l4282
 19152  00527C  C049  F001         	movff	___altoft@c,i2___ftpack@arg
 19153  005280  C04A  F002         	movff	___altoft@c+1,i2___ftpack@arg+1
 19154  005284  C04B  F003         	movff	___altoft@c+2,i2___ftpack@arg+2
 19155  005288  C051  F004         	movff	___altoft@exp,i2___ftpack@exp
 19156  00528C  C052  F005         	movff	___altoft@sign,i2___ftpack@sign
 19157  005290  ECCF  F026         	call	i2___ftpack	;wreg free
 19158  005294  C001  F049         	movff	?i2___ftpack,?___altoft
 19159  005298  C002  F04A         	movff	?i2___ftpack+1,?___altoft+1
 19160  00529C  C003  F04B         	movff	?i2___ftpack+2,?___altoft+2
 19161  0052A0  0012               	return	
 19162  0052A2                     __end_of___altoft:
 19163                           	opt stack 0
 19164                           pclatu	equ	0xFFB
 19165                           pclath	equ	0xFFA
 19166                           tblptru	equ	0xFF8
 19167                           tblptrh	equ	0xFF7
 19168                           tblptrl	equ	0xFF6
 19169                           tablat	equ	0xFF5
 19170                           prodh	equ	0xFF4
 19171                           prodl	equ	0xFF3
 19172                           intcon	equ	0xFF2
 19173                           intcon2	equ	0xFF1
 19174                           intcon3	equ	0xFF0
 19175                           postinc0	equ	0xFEE
 19176                           fsr0h	equ	0xFEA
 19177                           fsr0l	equ	0xFE9
 19178                           wreg	equ	0xFE8
 19179                           fsr1h	equ	0xFE2
 19180                           fsr1l	equ	0xFE1
 19181                           indf2	equ	0xFDF
 19182                           postinc2	equ	0xFDE
 19183                           postdec2	equ	0xFDD
 19184                           fsr2h	equ	0xFDA
 19185                           fsr2l	equ	0xFD9
 19186                           status	equ	0xFD8
 19187                           
 19188 ;; *************** function _eval_poly *****************
 19189 ;; Defined at:
 19190 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;  x               3   57[COMRAM] float 
 19193 ;;  d               2   60[COMRAM] PTR const 
 19194 ;;		 -> log@coeff(27), exp@coeff(30), 
 19195 ;;  n               2   62[COMRAM] int 
 19196 ;; Auto vars:     Size  Location     Type
 19197 ;;  res             3   66[COMRAM] int 
 19198 ;; Return value:  Size  Location     Type
 19199 ;;                  3   57[COMRAM] int 
 19200 ;; Registers used:
 19201 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19202 ;; Tracked objects:
 19203 ;;		On entry : 0/0
 19204 ;;		On exit  : 0/0
 19205 ;;		Unchanged: 0/0
 19206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19207 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19209 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19210 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19211 ;;Total ram usage:       12 bytes
 19212 ;; Hardware stack levels used:    1
 19213 ;; Hardware stack levels required when called:    2
 19214 ;; This function calls:
 19215 ;;		i2___ftadd
 19216 ;;		i2___ftmul
 19217 ;;		i2___wmul
 19218 ;; This function is called by:
 19219 ;;		_exp
 19220 ;;		_log
 19221 ;; This function uses a non-reentrant model
 19222 ;;
 19223                           
 19224                           	psect	text77
 19225  0049C4                     __ptext77:
 19226                           	opt stack 0
 19227  0049C4                     _eval_poly:
 19228                           	opt stack 19
 19229                           
 19230                           ;incstack = 0
 19231  0049C4  C03F  F00F         	movff	eval_poly@n,i2___wmul@multiplier
 19232  0049C8  C040  F010         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 19233  0049CC  0E00               	movlw	0
 19234  0049CE  6E12               	movwf	i2___wmul@multiplicand+1,c
 19235  0049D0  0E03               	movlw	3
 19236  0049D2  6E11               	movwf	i2___wmul@multiplicand,c
 19237  0049D4  EC1F  F02C         	call	i2___wmul	;wreg free
 19238  0049D8  C03D  F041         	movff	eval_poly@d,??_eval_poly
 19239  0049DC  C03E  F042         	movff	eval_poly@d+1,??_eval_poly+1
 19240  0049E0  500F               	movf	?i2___wmul,w,c
 19241  0049E2  2641               	addwf	??_eval_poly,f,c
 19242  0049E4  5010               	movf	?i2___wmul+1,w,c
 19243  0049E6  2242               	addwfc	??_eval_poly+1,f,c
 19244  0049E8  C041  FFF6         	movff	??_eval_poly,tblptrl
 19245  0049EC  C042  FFF7         	movff	??_eval_poly+1,tblptrh
 19246  0049F0                     	if	0	;tblptru may be non-zero
 19247  0049F0                     	endif
 19248  0049F0                     	if	0	;tblptru may be non-zero
 19249  0049F0                     	endif
 19250  0049F0  0009               	tblrd		*+
 19251  0049F2  CFF5 F043          	movff	tablat,eval_poly@res
 19252  0049F6  0009               	tblrd		*+
 19253  0049F8  CFF5 F044          	movff	tablat,eval_poly@res+1
 19254  0049FC  000A               	tblrd		*-
 19255  0049FE  CFF5 F045          	movff	tablat,eval_poly@res+2
 19256  004A02  D03E               	goto	i2l4752
 19257  004A04                     i2l4750:
 19258  004A04  C043  F018         	movff	eval_poly@res,i2___ftmul@f2
 19259  004A08  C044  F019         	movff	eval_poly@res+1,i2___ftmul@f2+1
 19260  004A0C  C045  F01A         	movff	eval_poly@res+2,i2___ftmul@f2+2
 19261  004A10  C03A  F015         	movff	eval_poly@x,i2___ftmul@f1
 19262  004A14  C03B  F016         	movff	eval_poly@x+1,i2___ftmul@f1+1
 19263  004A18  C03C  F017         	movff	eval_poly@x+2,i2___ftmul@f1+2
 19264  004A1C  ECB2  F022         	call	i2___ftmul	;wreg free
 19265  004A20  C015  F02E         	movff	?i2___ftmul,i2___ftadd@f1
 19266  004A24  C016  F02F         	movff	?i2___ftmul+1,i2___ftadd@f1+1
 19267  004A28  C017  F030         	movff	?i2___ftmul+2,i2___ftadd@f1+2
 19268  004A2C  0E00               	movlw	0
 19269  004A2E  6E12               	movwf	i2___wmul@multiplicand+1,c
 19270  004A30  0E03               	movlw	3
 19271  004A32  6E11               	movwf	i2___wmul@multiplicand,c
 19272  004A34  063F               	decf	eval_poly@n,f,c
 19273  004A36  A0D8               	btfss	status,0,c
 19274  004A38  0640               	decf	eval_poly@n+1,f,c
 19275  004A3A  C03F  F00F         	movff	eval_poly@n,i2___wmul@multiplier
 19276  004A3E  C040  F010         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 19277  004A42  EC1F  F02C         	call	i2___wmul	;wreg free
 19278  004A46  C03D  F041         	movff	eval_poly@d,??_eval_poly
 19279  004A4A  C03E  F042         	movff	eval_poly@d+1,??_eval_poly+1
 19280  004A4E  500F               	movf	?i2___wmul,w,c
 19281  004A50  2641               	addwf	??_eval_poly,f,c
 19282  004A52  5010               	movf	?i2___wmul+1,w,c
 19283  004A54  2242               	addwfc	??_eval_poly+1,f,c
 19284  004A56  C041  FFF6         	movff	??_eval_poly,tblptrl
 19285  004A5A  C042  FFF7         	movff	??_eval_poly+1,tblptrh
 19286  004A5E                     	if	0	;tblptru may be non-zero
 19287  004A5E                     	endif
 19288  004A5E                     	if	0	;tblptru may be non-zero
 19289  004A5E                     	endif
 19290  004A5E  0009               	tblrd		*+
 19291  004A60  CFF5 F031          	movff	tablat,i2___ftadd@f2
 19292  004A64  0009               	tblrd		*+
 19293  004A66  CFF5 F032          	movff	tablat,i2___ftadd@f2+1
 19294  004A6A  000A               	tblrd		*-
 19295  004A6C  CFF5 F033          	movff	tablat,i2___ftadd@f2+2
 19296  004A70  EC03  F018         	call	i2___ftadd	;wreg free
 19297  004A74  C02E  F043         	movff	?i2___ftadd,eval_poly@res
 19298  004A78  C02F  F044         	movff	?i2___ftadd+1,eval_poly@res+1
 19299  004A7C  C030  F045         	movff	?i2___ftadd+2,eval_poly@res+2
 19300  004A80                     i2l4752:
 19301  004A80  503F               	movf	eval_poly@n,w,c
 19302  004A82  1040               	iorwf	eval_poly@n+1,w,c
 19303  004A84  A4D8               	btfss	status,2,c
 19304  004A86  D7BE               	goto	i2l4750
 19305  004A88  C043  F03A         	movff	eval_poly@res,?_eval_poly
 19306  004A8C  C044  F03B         	movff	eval_poly@res+1,?_eval_poly+1
 19307  004A90  C045  F03C         	movff	eval_poly@res+2,?_eval_poly+2
 19308  004A94  0012               	return		;funcret
 19309  004A96                     __end_of_eval_poly:
 19310                           	opt stack 0
 19311                           pclatu	equ	0xFFB
 19312                           pclath	equ	0xFFA
 19313                           tblptru	equ	0xFF8
 19314                           tblptrh	equ	0xFF7
 19315                           tblptrl	equ	0xFF6
 19316                           tablat	equ	0xFF5
 19317                           prodh	equ	0xFF4
 19318                           prodl	equ	0xFF3
 19319                           intcon	equ	0xFF2
 19320                           intcon2	equ	0xFF1
 19321                           intcon3	equ	0xFF0
 19322                           postinc0	equ	0xFEE
 19323                           fsr0h	equ	0xFEA
 19324                           fsr0l	equ	0xFE9
 19325                           wreg	equ	0xFE8
 19326                           fsr1h	equ	0xFE2
 19327                           fsr1l	equ	0xFE1
 19328                           indf2	equ	0xFDF
 19329                           postinc2	equ	0xFDE
 19330                           postdec2	equ	0xFDD
 19331                           fsr2h	equ	0xFDA
 19332                           fsr2l	equ	0xFD9
 19333                           status	equ	0xFD8
 19334                           
 19335 ;; *************** function i2___wmul *****************
 19336 ;; Defined at:
 19337 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;  multiplier      2   14[COMRAM] unsigned int 
 19340 ;;  multiplicand    2   16[COMRAM] unsigned int 
 19341 ;; Auto vars:     Size  Location     Type
 19342 ;;  __wmul          2   18[COMRAM] unsigned int 
 19343 ;; Return value:  Size  Location     Type
 19344 ;;                  2   14[COMRAM] unsigned int 
 19345 ;; Registers used:
 19346 ;;		wreg, status,2, status,0, prodl, prodh
 19347 ;; Tracked objects:
 19348 ;;		On entry : 0/0
 19349 ;;		On exit  : 0/0
 19350 ;;		Unchanged: 0/0
 19351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19356 ;;Total ram usage:        6 bytes
 19357 ;; Hardware stack levels used:    1
 19358 ;; This function calls:
 19359 ;;		Nothing
 19360 ;; This function is called by:
 19361 ;;		_isr
 19362 ;;		_eval_poly
 19363 ;;		i2_fround
 19364 ;;		i2_scale
 19365 ;;		i2_printf
 19366 ;; This function uses a non-reentrant model
 19367 ;;
 19368                           
 19369                           	psect	text78
 19370  00583E                     __ptext78:
 19371                           	opt stack 0
 19372  00583E                     i2___wmul:
 19373                           	opt stack 22
 19374                           
 19375                           ;incstack = 0
 19376  00583E  500F               	movf	i2___wmul@multiplier,w,c
 19377  005840  0211               	mulwf	i2___wmul@multiplicand,c
 19378  005842  CFF3 F013          	movff	prodl,i2___wmul@product
 19379  005846  CFF4 F014          	movff	prodh,i2___wmul@product+1
 19380  00584A  500F               	movf	i2___wmul@multiplier,w,c
 19381  00584C  0212               	mulwf	i2___wmul@multiplicand+1,c
 19382  00584E  50F3               	movf	prodl,w,c
 19383  005850  2614               	addwf	i2___wmul@product+1,f,c
 19384  005852  5010               	movf	i2___wmul@multiplier+1,w,c
 19385  005854  0211               	mulwf	i2___wmul@multiplicand,c
 19386  005856  50F3               	movf	prodl,w,c
 19387  005858  2614               	addwf	i2___wmul@product+1,f,c
 19388  00585A  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 19389  00585E  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 19390  005862  0012               	return	
 19391  005864                     __end_ofi2___wmul:
 19392                           	opt stack 0
 19393                           pclatu	equ	0xFFB
 19394                           pclath	equ	0xFFA
 19395                           tblptru	equ	0xFF8
 19396                           tblptrh	equ	0xFF7
 19397                           tblptrl	equ	0xFF6
 19398                           tablat	equ	0xFF5
 19399                           prodh	equ	0xFF4
 19400                           prodl	equ	0xFF3
 19401                           intcon	equ	0xFF2
 19402                           intcon2	equ	0xFF1
 19403                           intcon3	equ	0xFF0
 19404                           postinc0	equ	0xFEE
 19405                           fsr0h	equ	0xFEA
 19406                           fsr0l	equ	0xFE9
 19407                           wreg	equ	0xFE8
 19408                           fsr1h	equ	0xFE2
 19409                           fsr1l	equ	0xFE1
 19410                           indf2	equ	0xFDF
 19411                           postinc2	equ	0xFDE
 19412                           postdec2	equ	0xFDD
 19413                           fsr2h	equ	0xFDA
 19414                           fsr2l	equ	0xFD9
 19415                           status	equ	0xFD8
 19416                           
 19417 ;; *************** function i2___ftmul *****************
 19418 ;; Defined at:
 19419 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 19420 ;; Parameters:    Size  Location     Type
 19421 ;;  f1              3   20[COMRAM] float 
 19422 ;;  f2              3   23[COMRAM] float 
 19423 ;; Auto vars:     Size  Location     Type
 19424 ;;  __ftmul         3   30[COMRAM] unsigned um
 19425 ;;  __ftmul         1   34[COMRAM] unsigned char 
 19426 ;;  __ftmul         1   33[COMRAM] unsigned char 
 19427 ;;  __ftmul         1   29[COMRAM] unsigned char 
 19428 ;; Return value:  Size  Location     Type
 19429 ;;                  3   20[COMRAM] float 
 19430 ;; Registers used:
 19431 ;;		wreg, status,2, status,0, cstack
 19432 ;; Tracked objects:
 19433 ;;		On entry : 0/0
 19434 ;;		On exit  : 0/0
 19435 ;;		Unchanged: 0/0
 19436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19437 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19438 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19440 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19441 ;;Total ram usage:       15 bytes
 19442 ;; Hardware stack levels used:    1
 19443 ;; Hardware stack levels required when called:    1
 19444 ;; This function calls:
 19445 ;;		i2___ftpack
 19446 ;; This function is called by:
 19447 ;;		_dec_to_hex
 19448 ;;		_pow
 19449 ;;		_exp
 19450 ;;		_log
 19451 ;;		_eval_poly
 19452 ;;		i2_fround
 19453 ;;		i2_scale
 19454 ;;		i2_printf
 19455 ;; This function uses a non-reentrant model
 19456 ;;
 19457                           
 19458                           	psect	text79
 19459  004564                     __ptext79:
 19460                           	opt stack 0
 19461  004564                     i2___ftmul:
 19462                           	opt stack 21
 19463                           
 19464                           ;incstack = 0
 19465  004564  C017  F01B         	movff	i2___ftmul@f1+2,??i2___ftmul
 19466  004568  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 19467  00456A  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 19468  00456C  3416               	rlcf	i2___ftmul@f1+1,w,c
 19469  00456E  361B               	rlcf	??i2___ftmul& (0+255),f,c
 19470  004570  E301               	bnc	u430_41
 19471  004572  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 19472  004574                     u430_41:
 19473  004574  501B               	movf	??i2___ftmul,w,c
 19474  004576  6E1E               	movwf	i2___ftmul@exp,c
 19475  004578  501E               	movf	i2___ftmul@exp,w,c
 19476  00457A  A4D8               	btfss	status,2,c
 19477  00457C  D007               	goto	i2l4410
 19478  00457E  0E00               	movlw	0
 19479  004580  6E15               	movwf	?i2___ftmul,c
 19480  004582  0E00               	movlw	0
 19481  004584  6E16               	movwf	?i2___ftmul+1,c
 19482  004586  0E00               	movlw	0
 19483  004588  6E17               	movwf	?i2___ftmul+2,c
 19484  00458A  0012               	return	
 19485  00458C                     i2l4410:
 19486  00458C  C01A  F01B         	movff	i2___ftmul@f2+2,??i2___ftmul
 19487  004590  6A1C               	clrf	(??i2___ftmul+1)& (0+255),c
 19488  004592  6A1D               	clrf	(??i2___ftmul+2)& (0+255),c
 19489  004594  3419               	rlcf	i2___ftmul@f2+1,w,c
 19490  004596  361B               	rlcf	??i2___ftmul& (0+255),f,c
 19491  004598  E301               	bnc	u432_41
 19492  00459A  801C               	bsf	(??i2___ftmul+1)& (0+255),0,c
 19493  00459C                     u432_41:
 19494  00459C  501B               	movf	??i2___ftmul,w,c
 19495  00459E  6E23               	movwf	i2___ftmul@sign,c
 19496  0045A0  5023               	movf	i2___ftmul@sign,w,c
 19497  0045A2  A4D8               	btfss	status,2,c
 19498  0045A4  D007               	goto	i2l4416
 19499  0045A6  0E00               	movlw	0
 19500  0045A8  6E15               	movwf	?i2___ftmul,c
 19501  0045AA  0E00               	movlw	0
 19502  0045AC  6E16               	movwf	?i2___ftmul+1,c
 19503  0045AE  0E00               	movlw	0
 19504  0045B0  6E17               	movwf	?i2___ftmul+2,c
 19505  0045B2  0012               	return	
 19506  0045B4                     i2l4416:
 19507  0045B4  5023               	movf	i2___ftmul@sign,w,c
 19508  0045B6  0F7B               	addlw	123
 19509  0045B8  261E               	addwf	i2___ftmul@exp,f,c
 19510  0045BA  C017  F023         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 19511  0045BE  501A               	movf	i2___ftmul@f2+2,w,c
 19512  0045C0  1A23               	xorwf	i2___ftmul@sign,f,c
 19513  0045C2  0E80               	movlw	128
 19514  0045C4  1623               	andwf	i2___ftmul@sign,f,c
 19515  0045C6  8E16               	bsf	i2___ftmul@f1+1,7,c
 19516  0045C8  8E19               	bsf	i2___ftmul@f2+1,7,c
 19517  0045CA  0EFF               	movlw	255
 19518  0045CC  1618               	andwf	i2___ftmul@f2,f,c
 19519  0045CE  0EFF               	movlw	255
 19520  0045D0  1619               	andwf	i2___ftmul@f2+1,f,c
 19521  0045D2  0E00               	movlw	0
 19522  0045D4  161A               	andwf	i2___ftmul@f2+2,f,c
 19523  0045D6  0E00               	movlw	0
 19524  0045D8  6E1F               	movwf	i2___ftmul@f3_as_product,c
 19525  0045DA  0E00               	movlw	0
 19526  0045DC  6E20               	movwf	i2___ftmul@f3_as_product+1,c
 19527  0045DE  0E00               	movlw	0
 19528  0045E0  6E21               	movwf	i2___ftmul@f3_as_product+2,c
 19529  0045E2  0E07               	movlw	7
 19530  0045E4  6E22               	movwf	i2___ftmul@cntr,c
 19531  0045E6                     i2l4430:
 19532  0045E6  A015               	btfss	i2___ftmul@f1,0,c
 19533  0045E8  D006               	goto	i2l4434
 19534  0045EA  5018               	movf	i2___ftmul@f2,w,c
 19535  0045EC  261F               	addwf	i2___ftmul@f3_as_product,f,c
 19536  0045EE  5019               	movf	i2___ftmul@f2+1,w,c
 19537  0045F0  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 19538  0045F2  501A               	movf	i2___ftmul@f2+2,w,c
 19539  0045F4  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 19540  0045F6                     i2l4434:
 19541  0045F6  90D8               	bcf	status,0,c
 19542  0045F8  3217               	rrcf	i2___ftmul@f1+2,f,c
 19543  0045FA  3216               	rrcf	i2___ftmul@f1+1,f,c
 19544  0045FC  3215               	rrcf	i2___ftmul@f1,f,c
 19545  0045FE  90D8               	bcf	status,0,c
 19546  004600  3618               	rlcf	i2___ftmul@f2,f,c
 19547  004602  3619               	rlcf	i2___ftmul@f2+1,f,c
 19548  004604  361A               	rlcf	i2___ftmul@f2+2,f,c
 19549  004606  2E22               	decfsz	i2___ftmul@cntr,f,c
 19550  004608  D7EE               	goto	i2l4430
 19551  00460A  0E09               	movlw	9
 19552  00460C  6E22               	movwf	i2___ftmul@cntr,c
 19553  00460E                     i2l4440:
 19554  00460E  A015               	btfss	i2___ftmul@f1,0,c
 19555  004610  D006               	goto	i2l4444
 19556  004612  5018               	movf	i2___ftmul@f2,w,c
 19557  004614  261F               	addwf	i2___ftmul@f3_as_product,f,c
 19558  004616  5019               	movf	i2___ftmul@f2+1,w,c
 19559  004618  2220               	addwfc	i2___ftmul@f3_as_product+1,f,c
 19560  00461A  501A               	movf	i2___ftmul@f2+2,w,c
 19561  00461C  2221               	addwfc	i2___ftmul@f3_as_product+2,f,c
 19562  00461E                     i2l4444:
 19563  00461E  90D8               	bcf	status,0,c
 19564  004620  3217               	rrcf	i2___ftmul@f1+2,f,c
 19565  004622  3216               	rrcf	i2___ftmul@f1+1,f,c
 19566  004624  3215               	rrcf	i2___ftmul@f1,f,c
 19567  004626  90D8               	bcf	status,0,c
 19568  004628  3221               	rrcf	i2___ftmul@f3_as_product+2,f,c
 19569  00462A  3220               	rrcf	i2___ftmul@f3_as_product+1,f,c
 19570  00462C  321F               	rrcf	i2___ftmul@f3_as_product,f,c
 19571  00462E  2E22               	decfsz	i2___ftmul@cntr,f,c
 19572  004630  D7EE               	goto	i2l4440
 19573  004632  C01F  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 19574  004636  C020  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 19575  00463A  C021  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 19576  00463E  C01E  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 19577  004642  C023  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 19578  004646  ECCF  F026         	call	i2___ftpack	;wreg free
 19579  00464A  C001  F015         	movff	?i2___ftpack,?i2___ftmul
 19580  00464E  C002  F016         	movff	?i2___ftpack+1,?i2___ftmul+1
 19581  004652  C003  F017         	movff	?i2___ftpack+2,?i2___ftmul+2
 19582  004656  0012               	return	
 19583  004658                     __end_ofi2___ftmul:
 19584                           	opt stack 0
 19585                           pclatu	equ	0xFFB
 19586                           pclath	equ	0xFFA
 19587                           tblptru	equ	0xFF8
 19588                           tblptrh	equ	0xFF7
 19589                           tblptrl	equ	0xFF6
 19590                           tablat	equ	0xFF5
 19591                           prodh	equ	0xFF4
 19592                           prodl	equ	0xFF3
 19593                           intcon	equ	0xFF2
 19594                           intcon2	equ	0xFF1
 19595                           intcon3	equ	0xFF0
 19596                           postinc0	equ	0xFEE
 19597                           fsr0h	equ	0xFEA
 19598                           fsr0l	equ	0xFE9
 19599                           wreg	equ	0xFE8
 19600                           fsr1h	equ	0xFE2
 19601                           fsr1l	equ	0xFE1
 19602                           indf2	equ	0xFDF
 19603                           postinc2	equ	0xFDE
 19604                           postdec2	equ	0xFDD
 19605                           fsr2h	equ	0xFDA
 19606                           fsr2l	equ	0xFD9
 19607                           status	equ	0xFD8
 19608                           
 19609 ;; *************** function i2___ftadd *****************
 19610 ;; Defined at:
 19611 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;  f1              3   45[COMRAM] float 
 19614 ;;  f2              3   48[COMRAM] float 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;  __ftadd         1   56[COMRAM] unsigned char 
 19617 ;;  __ftadd         1   55[COMRAM] unsigned char 
 19618 ;;  __ftadd         1   54[COMRAM] unsigned char 
 19619 ;; Return value:  Size  Location     Type
 19620 ;;                  3   45[COMRAM] float 
 19621 ;; Registers used:
 19622 ;;		wreg, status,2, status,0, cstack
 19623 ;; Tracked objects:
 19624 ;;		On entry : 0/0
 19625 ;;		On exit  : 0/0
 19626 ;;		Unchanged: 0/0
 19627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19628 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19629 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19631 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19632 ;;Total ram usage:       12 bytes
 19633 ;; Hardware stack levels used:    1
 19634 ;; Hardware stack levels required when called:    1
 19635 ;; This function calls:
 19636 ;;		i2___ftpack
 19637 ;; This function is called by:
 19638 ;;		_dec_to_hex
 19639 ;;		_floor
 19640 ;;		_log
 19641 ;;		_eval_poly
 19642 ;;		i2_printf
 19643 ;;		i2___ftsub
 19644 ;; This function uses a non-reentrant model
 19645 ;;
 19646                           
 19647                           	psect	text80
 19648  003006                     __ptext80:
 19649                           	opt stack 0
 19650  003006                     i2___ftadd:
 19651                           	opt stack 21
 19652                           
 19653                           ;incstack = 0
 19654  003006  C030  F034         	movff	i2___ftadd@f1+2,??i2___ftadd
 19655  00300A  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 19656  00300C  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 19657  00300E  342F               	rlcf	i2___ftadd@f1+1,w,c
 19658  003010  3634               	rlcf	??i2___ftadd& (0+255),f,c
 19659  003012  E301               	bnc	u406_41
 19660  003014  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 19661  003016                     u406_41:
 19662  003016  5034               	movf	??i2___ftadd,w,c
 19663  003018  6E39               	movwf	i2___ftadd@exp1,c
 19664  00301A  C033  F034         	movff	i2___ftadd@f2+2,??i2___ftadd
 19665  00301E  6A35               	clrf	(??i2___ftadd+1)& (0+255),c
 19666  003020  6A36               	clrf	(??i2___ftadd+2)& (0+255),c
 19667  003022  3432               	rlcf	i2___ftadd@f2+1,w,c
 19668  003024  3634               	rlcf	??i2___ftadd& (0+255),f,c
 19669  003026  E301               	bnc	u407_41
 19670  003028  8035               	bsf	(??i2___ftadd+1)& (0+255),0,c
 19671  00302A                     u407_41:
 19672  00302A  5034               	movf	??i2___ftadd,w,c
 19673  00302C  6E38               	movwf	i2___ftadd@exp2,c
 19674  00302E  5039               	movf	i2___ftadd@exp1,w,c
 19675  003030  B4D8               	btfsc	status,2,c
 19676  003032  D00B               	goto	i2l867
 19677  003034  5038               	movf	i2___ftadd@exp2,w,c
 19678  003036  5C39               	subwf	i2___ftadd@exp1,w,c
 19679  003038  B0D8               	btfsc	status,0,c
 19680  00303A  D00E               	goto	i2l4324
 19681  00303C  5039               	movf	i2___ftadd@exp1,w,c
 19682  00303E  0800               	sublw	0
 19683  003040  2438               	addwf	i2___ftadd@exp2,w,c
 19684  003042  6E34               	movwf	??i2___ftadd& (0+255),c
 19685  003044  0E18               	movlw	24
 19686  003046  6434               	cpfsgt	??i2___ftadd,c
 19687  003048  D007               	goto	i2l4324
 19688  00304A                     i2l867:
 19689  00304A  C031  F02E         	movff	i2___ftadd@f2,?i2___ftadd
 19690  00304E  C032  F02F         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 19691  003052  C033  F030         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 19692  003056  0012               	return	
 19693  003058                     i2l4324:
 19694  003058  5038               	movf	i2___ftadd@exp2,w,c
 19695  00305A  B4D8               	btfsc	status,2,c
 19696  00305C  D00B               	goto	i2l871
 19697  00305E  5039               	movf	i2___ftadd@exp1,w,c
 19698  003060  5C38               	subwf	i2___ftadd@exp2,w,c
 19699  003062  B0D8               	btfsc	status,0,c
 19700  003064  D00E               	goto	i2l4330
 19701  003066  5038               	movf	i2___ftadd@exp2,w,c
 19702  003068  0800               	sublw	0
 19703  00306A  2439               	addwf	i2___ftadd@exp1,w,c
 19704  00306C  6E34               	movwf	??i2___ftadd& (0+255),c
 19705  00306E  0E18               	movlw	24
 19706  003070  6434               	cpfsgt	??i2___ftadd,c
 19707  003072  D007               	goto	i2l4330
 19708  003074                     i2l871:
 19709  003074  C02E  F02E         	movff	i2___ftadd@f1,?i2___ftadd
 19710  003078  C02F  F02F         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 19711  00307C  C030  F030         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 19712  003080  0012               	return	
 19713  003082                     i2l4330:
 19714  003082  0E06               	movlw	6
 19715  003084  6E37               	movwf	i2___ftadd@sign,c
 19716  003086  BE30               	btfsc	i2___ftadd@f1+2,7,c
 19717  003088  8E37               	bsf	i2___ftadd@sign,7,c
 19718  00308A  BE33               	btfsc	i2___ftadd@f2+2,7,c
 19719  00308C  8C37               	bsf	i2___ftadd@sign,6,c
 19720  00308E  8E2F               	bsf	i2___ftadd@f1+1,7,c
 19721  003090  0EFF               	movlw	255
 19722  003092  162E               	andwf	i2___ftadd@f1,f,c
 19723  003094  0EFF               	movlw	255
 19724  003096  162F               	andwf	i2___ftadd@f1+1,f,c
 19725  003098  0E00               	movlw	0
 19726  00309A  1630               	andwf	i2___ftadd@f1+2,f,c
 19727  00309C  8E32               	bsf	i2___ftadd@f2+1,7,c
 19728  00309E  0EFF               	movlw	255
 19729  0030A0  1631               	andwf	i2___ftadd@f2,f,c
 19730  0030A2  0EFF               	movlw	255
 19731  0030A4  1632               	andwf	i2___ftadd@f2+1,f,c
 19732  0030A6  0E00               	movlw	0
 19733  0030A8  1633               	andwf	i2___ftadd@f2+2,f,c
 19734  0030AA  5038               	movf	i2___ftadd@exp2,w,c
 19735  0030AC  5C39               	subwf	i2___ftadd@exp1,w,c
 19736  0030AE  B0D8               	btfsc	status,0,c
 19737  0030B0  D01B               	goto	i2l4356
 19738  0030B2                     i2l4346:
 19739  0030B2  90D8               	bcf	status,0,c
 19740  0030B4  3631               	rlcf	i2___ftadd@f2,f,c
 19741  0030B6  3632               	rlcf	i2___ftadd@f2+1,f,c
 19742  0030B8  3633               	rlcf	i2___ftadd@f2+2,f,c
 19743  0030BA  0638               	decf	i2___ftadd@exp2,f,c
 19744  0030BC  5039               	movf	i2___ftadd@exp1,w,c
 19745  0030BE  1838               	xorwf	i2___ftadd@exp2,w,c
 19746  0030C0  B4D8               	btfsc	status,2,c
 19747  0030C2  D00D               	goto	i2l4354
 19748  0030C4  0637               	decf	i2___ftadd@sign,f,c
 19749  0030C6  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 19750  0030CA  0E07               	movlw	7
 19751  0030CC  1634               	andwf	??i2___ftadd,f,c
 19752  0030CE  B4D8               	btfsc	status,2,c
 19753  0030D0  D006               	goto	i2l4354
 19754  0030D2  D7EF               	goto	i2l4346
 19755  0030D4                     i2l4352:
 19756  0030D4  90D8               	bcf	status,0,c
 19757  0030D6  3230               	rrcf	i2___ftadd@f1+2,f,c
 19758  0030D8  322F               	rrcf	i2___ftadd@f1+1,f,c
 19759  0030DA  322E               	rrcf	i2___ftadd@f1,f,c
 19760  0030DC  2A39               	incf	i2___ftadd@exp1,f,c
 19761  0030DE                     i2l4354:
 19762  0030DE  5038               	movf	i2___ftadd@exp2,w,c
 19763  0030E0  1839               	xorwf	i2___ftadd@exp1,w,c
 19764  0030E2  B4D8               	btfsc	status,2,c
 19765  0030E4  D01F               	goto	i2l882
 19766  0030E6  D7F6               	goto	i2l4352
 19767  0030E8                     i2l4356:
 19768  0030E8  5039               	movf	i2___ftadd@exp1,w,c
 19769  0030EA  5C38               	subwf	i2___ftadd@exp2,w,c
 19770  0030EC  B0D8               	btfsc	status,0,c
 19771  0030EE  D01A               	goto	i2l882
 19772  0030F0                     i2l4358:
 19773  0030F0  90D8               	bcf	status,0,c
 19774  0030F2  362E               	rlcf	i2___ftadd@f1,f,c
 19775  0030F4  362F               	rlcf	i2___ftadd@f1+1,f,c
 19776  0030F6  3630               	rlcf	i2___ftadd@f1+2,f,c
 19777  0030F8  0639               	decf	i2___ftadd@exp1,f,c
 19778  0030FA  5039               	movf	i2___ftadd@exp1,w,c
 19779  0030FC  1838               	xorwf	i2___ftadd@exp2,w,c
 19780  0030FE  B4D8               	btfsc	status,2,c
 19781  003100  D00D               	goto	i2l4366
 19782  003102  0637               	decf	i2___ftadd@sign,f,c
 19783  003104  C037  F034         	movff	i2___ftadd@sign,??i2___ftadd
 19784  003108  0E07               	movlw	7
 19785  00310A  1634               	andwf	??i2___ftadd,f,c
 19786  00310C  B4D8               	btfsc	status,2,c
 19787  00310E  D006               	goto	i2l4366
 19788  003110  D7EF               	goto	i2l4358
 19789  003112                     i2l4364:
 19790  003112  90D8               	bcf	status,0,c
 19791  003114  3233               	rrcf	i2___ftadd@f2+2,f,c
 19792  003116  3232               	rrcf	i2___ftadd@f2+1,f,c
 19793  003118  3231               	rrcf	i2___ftadd@f2,f,c
 19794  00311A  2A38               	incf	i2___ftadd@exp2,f,c
 19795  00311C                     i2l4366:
 19796  00311C  5038               	movf	i2___ftadd@exp2,w,c
 19797  00311E  1839               	xorwf	i2___ftadd@exp1,w,c
 19798  003120  A4D8               	btfss	status,2,c
 19799  003122  D7F7               	goto	i2l4364
 19800  003124                     i2l882:
 19801  003124  AE37               	btfss	i2___ftadd@sign,7,c
 19802  003126  D00C               	goto	i2l891
 19803  003128  0EFF               	movlw	255
 19804  00312A  1A2E               	xorwf	i2___ftadd@f1,f,c
 19805  00312C  0EFF               	movlw	255
 19806  00312E  1A2F               	xorwf	i2___ftadd@f1+1,f,c
 19807  003130  0EFF               	movlw	255
 19808  003132  1A30               	xorwf	i2___ftadd@f1+2,f,c
 19809  003134  0E01               	movlw	1
 19810  003136  262E               	addwf	i2___ftadd@f1,f,c
 19811  003138  0E00               	movlw	0
 19812  00313A  222F               	addwfc	i2___ftadd@f1+1,f,c
 19813  00313C  0E00               	movlw	0
 19814  00313E  2230               	addwfc	i2___ftadd@f1+2,f,c
 19815  003140                     i2l891:
 19816  003140  AC37               	btfss	i2___ftadd@sign,6,c
 19817  003142  D00C               	goto	i2l4372
 19818  003144  0EFF               	movlw	255
 19819  003146  1A31               	xorwf	i2___ftadd@f2,f,c
 19820  003148  0EFF               	movlw	255
 19821  00314A  1A32               	xorwf	i2___ftadd@f2+1,f,c
 19822  00314C  0EFF               	movlw	255
 19823  00314E  1A33               	xorwf	i2___ftadd@f2+2,f,c
 19824  003150  0E01               	movlw	1
 19825  003152  2631               	addwf	i2___ftadd@f2,f,c
 19826  003154  0E00               	movlw	0
 19827  003156  2232               	addwfc	i2___ftadd@f2+1,f,c
 19828  003158  0E00               	movlw	0
 19829  00315A  2233               	addwfc	i2___ftadd@f2+2,f,c
 19830  00315C                     i2l4372:
 19831  00315C  0E00               	movlw	0
 19832  00315E  6E37               	movwf	i2___ftadd@sign,c
 19833  003160  502E               	movf	i2___ftadd@f1,w,c
 19834  003162  2631               	addwf	i2___ftadd@f2,f,c
 19835  003164  502F               	movf	i2___ftadd@f1+1,w,c
 19836  003166  2232               	addwfc	i2___ftadd@f2+1,f,c
 19837  003168  5030               	movf	i2___ftadd@f1+2,w,c
 19838  00316A  2233               	addwfc	i2___ftadd@f2+2,f,c
 19839  00316C  AE33               	btfss	i2___ftadd@f2+2,7,c
 19840  00316E  D00E               	goto	i2l4382
 19841  003170  0EFF               	movlw	255
 19842  003172  1A31               	xorwf	i2___ftadd@f2,f,c
 19843  003174  0EFF               	movlw	255
 19844  003176  1A32               	xorwf	i2___ftadd@f2+1,f,c
 19845  003178  0EFF               	movlw	255
 19846  00317A  1A33               	xorwf	i2___ftadd@f2+2,f,c
 19847  00317C  0E01               	movlw	1
 19848  00317E  2631               	addwf	i2___ftadd@f2,f,c
 19849  003180  0E00               	movlw	0
 19850  003182  2232               	addwfc	i2___ftadd@f2+1,f,c
 19851  003184  0E00               	movlw	0
 19852  003186  2233               	addwfc	i2___ftadd@f2+2,f,c
 19853  003188  0E01               	movlw	1
 19854  00318A  6E37               	movwf	i2___ftadd@sign,c
 19855  00318C                     i2l4382:
 19856  00318C  C031  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 19857  003190  C032  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 19858  003194  C033  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 19859  003198  C039  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 19860  00319C  C037  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 19861  0031A0  ECCF  F026         	call	i2___ftpack	;wreg free
 19862  0031A4  C001  F02E         	movff	?i2___ftpack,?i2___ftadd
 19863  0031A8  C002  F02F         	movff	?i2___ftpack+1,?i2___ftadd+1
 19864  0031AC  C003  F030         	movff	?i2___ftpack+2,?i2___ftadd+2
 19865  0031B0  0012               	return	
 19866  0031B2                     __end_ofi2___ftadd:
 19867                           	opt stack 0
 19868                           pclatu	equ	0xFFB
 19869                           pclath	equ	0xFFA
 19870                           tblptru	equ	0xFF8
 19871                           tblptrh	equ	0xFF7
 19872                           tblptrl	equ	0xFF6
 19873                           tablat	equ	0xFF5
 19874                           prodh	equ	0xFF4
 19875                           prodl	equ	0xFF3
 19876                           intcon	equ	0xFF2
 19877                           intcon2	equ	0xFF1
 19878                           intcon3	equ	0xFF0
 19879                           postinc0	equ	0xFEE
 19880                           fsr0h	equ	0xFEA
 19881                           fsr0l	equ	0xFE9
 19882                           wreg	equ	0xFE8
 19883                           fsr1h	equ	0xFE2
 19884                           fsr1l	equ	0xFE1
 19885                           indf2	equ	0xFDF
 19886                           postinc2	equ	0xFDE
 19887                           postdec2	equ	0xFDD
 19888                           fsr2h	equ	0xFDA
 19889                           fsr2l	equ	0xFD9
 19890                           status	equ	0xFD8
 19891                           
 19892 ;; *************** function i2___ftpack *****************
 19893 ;; Defined at:
 19894 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 19895 ;; Parameters:    Size  Location     Type
 19896 ;;  arg             3    0[COMRAM] unsigned um
 19897 ;;  exp             1    3[COMRAM] unsigned char 
 19898 ;;  sign            1    4[COMRAM] unsigned char 
 19899 ;; Auto vars:     Size  Location     Type
 19900 ;;		None
 19901 ;; Return value:  Size  Location     Type
 19902 ;;                  3    0[COMRAM] float 
 19903 ;; Registers used:
 19904 ;;		wreg, status,2, status,0
 19905 ;; Tracked objects:
 19906 ;;		On entry : 0/0
 19907 ;;		On exit  : 0/0
 19908 ;;		Unchanged: 0/0
 19909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19910 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19914 ;;Total ram usage:        8 bytes
 19915 ;; Hardware stack levels used:    1
 19916 ;; This function calls:
 19917 ;;		Nothing
 19918 ;; This function is called by:
 19919 ;;		___altoft
 19920 ;;		i2___awtoft
 19921 ;;		i2___ftadd
 19922 ;;		i2___ftdiv
 19923 ;;		i2___ftmul
 19924 ;;		i2___lltoft
 19925 ;; This function uses a non-reentrant model
 19926 ;;
 19927                           
 19928                           	psect	text81
 19929  004D9E                     __ptext81:
 19930                           	opt stack 0
 19931  004D9E                     i2___ftpack:
 19932                           	opt stack 21
 19933                           
 19934                           ;incstack = 0
 19935  004D9E  5004               	movf	i2___ftpack@exp,w,c
 19936  004DA0  B4D8               	btfsc	status,2,c
 19937  004DA2  D005               	goto	i2l4206
 19938  004DA4  5001               	movf	i2___ftpack@arg,w,c
 19939  004DA6  1002               	iorwf	i2___ftpack@arg+1,w,c
 19940  004DA8  1003               	iorwf	i2___ftpack@arg+2,w,c
 19941  004DAA  A4D8               	btfss	status,2,c
 19942  004DAC  D00C               	goto	i2l4212
 19943  004DAE                     i2l4206:
 19944  004DAE  0E00               	movlw	0
 19945  004DB0  6E01               	movwf	?i2___ftpack,c
 19946  004DB2  0E00               	movlw	0
 19947  004DB4  6E02               	movwf	?i2___ftpack+1,c
 19948  004DB6  0E00               	movlw	0
 19949  004DB8  6E03               	movwf	?i2___ftpack+2,c
 19950  004DBA  0012               	return	
 19951  004DBC                     i2l4210:
 19952  004DBC  2A04               	incf	i2___ftpack@exp,f,c
 19953  004DBE  90D8               	bcf	status,0,c
 19954  004DC0  3203               	rrcf	i2___ftpack@arg+2,f,c
 19955  004DC2  3202               	rrcf	i2___ftpack@arg+1,f,c
 19956  004DC4  3201               	rrcf	i2___ftpack@arg,f,c
 19957  004DC6                     i2l4212:
 19958  004DC6  0E00               	movlw	0
 19959  004DC8  1401               	andwf	i2___ftpack@arg,w,c
 19960  004DCA  6E06               	movwf	??i2___ftpack& (0+255),c
 19961  004DCC  0E00               	movlw	0
 19962  004DCE  1402               	andwf	i2___ftpack@arg+1,w,c
 19963  004DD0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19964  004DD2  0EFE               	movlw	254
 19965  004DD4  1403               	andwf	i2___ftpack@arg+2,w,c
 19966  004DD6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19967  004DD8  5006               	movf	??i2___ftpack,w,c
 19968  004DDA  1007               	iorwf	??i2___ftpack+1,w,c
 19969  004DDC  1008               	iorwf	??i2___ftpack+2,w,c
 19970  004DDE  B4D8               	btfsc	status,2,c
 19971  004DE0  D00C               	goto	i2l4218
 19972  004DE2  D7EC               	goto	i2l4210
 19973  004DE4                     i2l4214:
 19974  004DE4  2A04               	incf	i2___ftpack@exp,f,c
 19975  004DE6  0E01               	movlw	1
 19976  004DE8  2601               	addwf	i2___ftpack@arg,f,c
 19977  004DEA  0E00               	movlw	0
 19978  004DEC  2202               	addwfc	i2___ftpack@arg+1,f,c
 19979  004DEE  0E00               	movlw	0
 19980  004DF0  2203               	addwfc	i2___ftpack@arg+2,f,c
 19981  004DF2  90D8               	bcf	status,0,c
 19982  004DF4  3203               	rrcf	i2___ftpack@arg+2,f,c
 19983  004DF6  3202               	rrcf	i2___ftpack@arg+1,f,c
 19984  004DF8  3201               	rrcf	i2___ftpack@arg,f,c
 19985  004DFA                     i2l4218:
 19986  004DFA  0E00               	movlw	0
 19987  004DFC  1401               	andwf	i2___ftpack@arg,w,c
 19988  004DFE  6E06               	movwf	??i2___ftpack& (0+255),c
 19989  004E00  0E00               	movlw	0
 19990  004E02  1402               	andwf	i2___ftpack@arg+1,w,c
 19991  004E04  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19992  004E06  0EFF               	movlw	255
 19993  004E08  1403               	andwf	i2___ftpack@arg+2,w,c
 19994  004E0A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19995  004E0C  5006               	movf	??i2___ftpack,w,c
 19996  004E0E  1007               	iorwf	??i2___ftpack+1,w,c
 19997  004E10  1008               	iorwf	??i2___ftpack+2,w,c
 19998  004E12  B4D8               	btfsc	status,2,c
 19999  004E14  D006               	goto	i2l4222
 20000  004E16  D7E6               	goto	i2l4214
 20001  004E18                     i2l4220:
 20002  004E18  0604               	decf	i2___ftpack@exp,f,c
 20003  004E1A  90D8               	bcf	status,0,c
 20004  004E1C  3601               	rlcf	i2___ftpack@arg,f,c
 20005  004E1E  3602               	rlcf	i2___ftpack@arg+1,f,c
 20006  004E20  3603               	rlcf	i2___ftpack@arg+2,f,c
 20007  004E22                     i2l4222:
 20008  004E22  BE02               	btfsc	i2___ftpack@arg+1,7,c
 20009  004E24  D003               	goto	i2l844
 20010  004E26  0E02               	movlw	2
 20011  004E28  6004               	cpfslt	i2___ftpack@exp,c
 20012  004E2A  D7F6               	goto	i2l4220
 20013  004E2C                     i2l844:
 20014  004E2C  A004               	btfss	i2___ftpack@exp,0,c
 20015  004E2E  9E02               	bcf	i2___ftpack@arg+1,7,c
 20016  004E30  90D8               	bcf	status,0,c
 20017  004E32  3204               	rrcf	i2___ftpack@exp,f,c
 20018  004E34  5004               	movf	i2___ftpack@exp,w,c
 20019  004E36  1203               	iorwf	i2___ftpack@arg+2,f,c
 20020  004E38  5005               	movf	i2___ftpack@sign,w,c
 20021  004E3A  A4D8               	btfss	status,2,c
 20022  004E3C  8E03               	bsf	i2___ftpack@arg+2,7,c
 20023  004E3E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 20024  004E42  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 20025  004E46  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 20026  004E4A  0012               	return	
 20027  004E4C                     __end_ofi2___ftpack:
 20028                           	opt stack 0
 20029                           pclatu	equ	0xFFB
 20030                           pclath	equ	0xFFA
 20031                           tblptru	equ	0xFF8
 20032                           tblptrh	equ	0xFF7
 20033                           tblptrl	equ	0xFF6
 20034                           tablat	equ	0xFF5
 20035                           prodh	equ	0xFF4
 20036                           prodl	equ	0xFF3
 20037                           intcon	equ	0xFF2
 20038                           intcon2	equ	0xFF1
 20039                           intcon3	equ	0xFF0
 20040                           postinc0	equ	0xFEE
 20041                           fsr0h	equ	0xFEA
 20042                           fsr0l	equ	0xFE9
 20043                           wreg	equ	0xFE8
 20044                           fsr1h	equ	0xFE2
 20045                           fsr1l	equ	0xFE1
 20046                           indf2	equ	0xFDF
 20047                           postinc2	equ	0xFDE
 20048                           postdec2	equ	0xFDD
 20049                           fsr2h	equ	0xFDA
 20050                           fsr2l	equ	0xFD9
 20051                           status	equ	0xFD8
 20052                           pclatu	equ	0xFFB
 20053                           pclath	equ	0xFFA
 20054                           tblptru	equ	0xFF8
 20055                           tblptrh	equ	0xFF7
 20056                           tblptrl	equ	0xFF6
 20057                           tablat	equ	0xFF5
 20058                           prodh	equ	0xFF4
 20059                           prodl	equ	0xFF3
 20060                           intcon	equ	0xFF2
 20061                           intcon2	equ	0xFF1
 20062                           intcon3	equ	0xFF0
 20063                           postinc0	equ	0xFEE
 20064                           fsr0h	equ	0xFEA
 20065                           fsr0l	equ	0xFE9
 20066                           wreg	equ	0xFE8
 20067                           fsr1h	equ	0xFE2
 20068                           fsr1l	equ	0xFE1
 20069                           indf2	equ	0xFDF
 20070                           postinc2	equ	0xFDE
 20071                           postdec2	equ	0xFDD
 20072                           fsr2h	equ	0xFDA
 20073                           fsr2l	equ	0xFD9
 20074                           status	equ	0xFD8
 20075                           
 20076                           	psect	rparam
 20077  0000                     pclatu	equ	0xFFB
 20078                           pclath	equ	0xFFA
 20079                           tblptru	equ	0xFF8
 20080                           tblptrh	equ	0xFF7
 20081                           tblptrl	equ	0xFF6
 20082                           tablat	equ	0xFF5
 20083                           prodh	equ	0xFF4
 20084                           prodl	equ	0xFF3
 20085                           intcon	equ	0xFF2
 20086                           intcon2	equ	0xFF1
 20087                           intcon3	equ	0xFF0
 20088                           postinc0	equ	0xFEE
 20089                           fsr0h	equ	0xFEA
 20090                           fsr0l	equ	0xFE9
 20091                           wreg	equ	0xFE8
 20092                           fsr1h	equ	0xFE2
 20093                           fsr1l	equ	0xFE1
 20094                           indf2	equ	0xFDF
 20095                           postinc2	equ	0xFDE
 20096                           postdec2	equ	0xFDD
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101                           	psect	temp
 20102  00007F                     btemp:
 20103                           	opt stack 0
 20104  00007F                     	ds	1
 20105  0000                     int$flags	set	btemp
 20106                           pclatu	equ	0xFFB
 20107                           pclath	equ	0xFFA
 20108                           tblptru	equ	0xFF8
 20109                           tblptrh	equ	0xFF7
 20110                           tblptrl	equ	0xFF6
 20111                           tablat	equ	0xFF5
 20112                           prodh	equ	0xFF4
 20113                           prodl	equ	0xFF3
 20114                           intcon	equ	0xFF2
 20115                           intcon2	equ	0xFF1
 20116                           intcon3	equ	0xFF0
 20117                           postinc0	equ	0xFEE
 20118                           fsr0h	equ	0xFEA
 20119                           fsr0l	equ	0xFE9
 20120                           wreg	equ	0xFE8
 20121                           fsr1h	equ	0xFE2
 20122                           fsr1l	equ	0xFE1
 20123                           indf2	equ	0xFDF
 20124                           postinc2	equ	0xFDE
 20125                           postdec2	equ	0xFDD
 20126                           fsr2h	equ	0xFDA
 20127                           fsr2l	equ	0xFD9
 20128                           status	equ	0xFD8


Data Sizes:
    Strings     353
    Constant    231
    Data        2
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    121     126
    BANK0           128     66      98
    BANK1           256     70     135
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[15]), STR_21(CODE[16]), STR_20(CODE[7]), STR_19(CODE[3]), 
		 -> STR_18(CODE[4]), STR_17(CODE[18]), STR_16(CODE[23]), STR_15(CODE[16]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[23]), STR_7(CODE[23]), 
		 -> STR_6(CODE[9]), STR_5(CODE[8]), STR_4(CODE[13]), STR_3(CODE[24]), 
		 -> STR_2(CODE[24]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_read_colorsensor->i2_I2C_Master_Read
    i2_read_colorsensor->i2_I2C_Master_Write
    i2_printf->i2___fttol
    i2_scale->i2___ftmul
    i2_putch->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___llmod->i2___lldiv
    i2_lcdInst->i2_lcdNibble
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    i2___awdiv->i2___awmod
    _pow->_exp
    i2___lltoft->i2___ftpack
    _log->_eval_poly
    _exp->_floor
    i2___ftsub->i2___ftadd
    i2___ftdiv->i2___ftpack
    i2___awtoft->i2___ftpack
    _ldexp->_eval_poly
    _floor->___altoft
    i2___fttol->i2___ftadd
    ___altoft->i2___fttol
    _eval_poly->i2___ftadd
    i2___wmul->i2___awdiv
    i2___ftmul->i2___wmul
    i2___ftadd->i2_fround

Critical Paths under _main in BANK0

    _main->_date_time
    _read_colorsensor->_I2C_Master_Read
    _read_colorsensor->_I2C_Master_Write
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _initLCD->_lcdInst
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->___ftmul
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftge->___ftdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv
    _I2C_ColorSens_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _isr in BANK0

    _isr->_dec_to_hex

Critical Paths under _main in BANK1

    _standby->_printf
    _operationend->_printf
    _operation->_printf
    _emergencystop->_printf
    _date_time->_printf
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  448758
                                             68 BANK1      2     2      0
                 _I2C_ColorSens_Init
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                          _date_time
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0   63196
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0   61479
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            0     0      0   71683
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            _lcdInst
                             _printf
                   _read_colorsensor
 ---------------------------------------------------------------------------------
 (2) _read_colorsensor                                     2     2      0    1717
                                             33 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4021
                                             38 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3130
                                             38 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             33 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0   61479
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _date_time                                            1     1      0   63295
                                             65 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             31 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0   61479
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0   63452
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              46    38      8   61344
                                             28 BANK1     40    32      8
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   13954
                                              0 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             32 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             30 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   13675
                                              0 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3360
                                             44 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5855
                                             50 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1973
                                             30 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2069
                                             36 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                             30 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     591
                                             30 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2700
                                             38 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     671
                                             43 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     770
                                              7 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4994
                                             22 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4546
                                             10 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2479
                                             30 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1336
                                             53 BANK0      9     3      6
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             32 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             30 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     888
                                             43 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     802
                                             30 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _I2C_ColorSens_Init                                   1     1      0    1672
                                             33 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2    1672
                                             31 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             30 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 25    25      0   69054
                                            118 COMRAM     3     3      0
                                             14 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                 i2_read_colorsensor
 ---------------------------------------------------------------------------------
 (7) i2_read_colorsensor                                   2     2      0     171
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            44    38      6   25411
                                             72 COMRAM    38    32      6
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (8) i2_scale                                             13    10      3    5543
                                             35 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2_fround                                            16    13      3    5345
                                             35 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (8) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _read_time                                            1     1      0     239
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     126
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _dec_to_hex                                          16    14      2   41331
                                            116 COMRAM     2     0      2
                                              0 BANK0     14    14      0
                                _pow
                          i2___awdiv
                         i2___awtoft
                          i2___ftadd
                          i2___ftmul
                          i2___fttol
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     872
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) _pow                                                 17    11      6   34396
                                             99 COMRAM    17    11      6
                                _exp
                                _log
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___fttol
                         i2___lltoft
 ---------------------------------------------------------------------------------
 (8) i2___lltoft                                           9     5      4     820
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _log                                                  5     2      3   11531
                                             69 COMRAM     5     2      3
                          _eval_poly
                              _frexp
                         i2___awtoft
                          i2___ftadd
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) _exp                                                  9     6      3   18410
                                             90 COMRAM     9     6      3
                          _eval_poly
                              _floor
                              _ldexp
                         i2___awtoft
                          i2___ftdiv
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
 ---------------------------------------------------------------------------------
 (8) i2___ftsub                                            6     0      6    2074
                                             57 COMRAM     6     0      6
                         i2___awtoft (ARG)
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftneg                                            3     0      3     149
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (10) i2___ftdiv                                          15     9      6    1031
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___awtoft                                           4     1      3     920
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) _ldexp                                               7     2      5     376
                                             69 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (10) _floor                                               8     5      3    4533
                                             82 COMRAM     8     5      3
                           ___altoft
                              _frexp
                          i2___ftadd
                           i2___ftge
                          i2___fttol
 ---------------------------------------------------------------------------------
 (8) i2___fttol                                           15    11      4     434
                                             57 COMRAM    15    11      4
                         i2___awtoft (ARG)
                          i2___ftadd (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     500
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) _frexp                                               7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (11) ___altoft                                           10     6      4     901
                                             72 COMRAM    10     6      4
                         i2___ftpack
                          i2___fttol (ARG)
 ---------------------------------------------------------------------------------
 (10) _eval_poly                                          12     5      7    5883
                                             57 COMRAM    12     5      7
                          i2___ftadd
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4    1353
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6    2065
                                             20 COMRAM    15     9      6
                              _frexp (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___awtoft (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1903
                                             45 COMRAM    12     6      6
                              _frexp (ARG)
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     699
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_ColorSens_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _date_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftpack
     ___ftge
       ___ftdiv (ARG)
         ___ftpack
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _standby
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
       ___ftge (ARG)
         ___ftdiv (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _read_colorsensor
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait

 _isr (ROOT)
   _dec_to_hex
     _pow
       _exp
         _eval_poly
           i2___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         _floor
           ___altoft
             i2___ftpack
             i2___fttol (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftadd (ARG)
                 _frexp (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftmul (ARG)
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                 i2_fround (ARG)
                   i2___awdiv
                     i2___awmod (ARG)
                   i2___awmod
                   i2___ftmul
                     _frexp (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                     i2___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___wmul (ARG)
                       i2___awdiv (ARG)
                         i2___awmod (ARG)
                       i2___awmod (ARG)
                   i2___wmul
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
           _frexp
           i2___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
           i2___fttol
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftadd (ARG)
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
         _ldexp
           _eval_poly (ARG)
             i2___ftadd
               _frexp (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftmul (ARG)
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   _frexp (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___ftmul
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___awtoft
           i2___ftpack
         i2___ftdiv
           i2___ftpack
         i2___ftge
         i2___ftmul
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftadd (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftadd (ARG)
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       _log
         _eval_poly
           i2___ftadd
             _frexp (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftmul (ARG)
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 _frexp (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         _frexp
         i2___awtoft
           i2___ftpack
         i2___ftadd
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
       i2___ftmul
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___fttol
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftadd (ARG)
           _frexp (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               _frexp (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft
         i2___ftpack
     i2___awdiv
       i2___awmod (ARG)
     i2___awtoft
       i2___ftpack
     i2___ftadd
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftmul
       _frexp (ARG)
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___fttol
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   i2___wmul
     i2___awdiv (ARG)
       i2___awmod (ARG)
     i2___awmod (ARG)
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___awdiv
       i2___awmod (ARG)
     i2___ftadd
       _frexp (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2_fround (ARG)
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___ftge
     i2___ftmul
       _frexp (ARG)
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
       i2___wmul (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2___ftneg
     i2___ftsub
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
       i2___awtoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         _frexp (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftmul (ARG)
           _frexp (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             _frexp (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul (ARG)
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
       i2___ftpack
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     i2_isdigit
     i2_putch
       i2_lcdNibble
     i2_scale
       i2___awdiv
         i2___awmod (ARG)
       i2___awmod
       i2___ftmul
         _frexp (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___awtoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
   i2_read_colorsensor
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     46      87       7       52.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      62       5       76.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     79      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     167      34        0.0%
DATA                 0      0     167       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Apr 07 17:28:17 2017

               ___altoft@exp 0051                            _b 00D2                            _i 007A  
                          _j 007C                            _r 00D5           i2_I2C_Master_Start 596A  
         i2_I2C_Master_Write 5948                ___altoft@sign 0052                           l34 58E0  
             ?_emergencystop 0001                 ___awdiv@sign 00A9          ___wmul@multiplicand 00AE  
                __CFG_BORV$3 000000                   i2___awtoft 56EC                   i2___ftpack 4D9E  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                 ___ftadd@exp1 0115  
               ___ftadd@exp2 0114                   i2___lltoft 54A0                 ___ftadd@sign 0113  
                        l429 58A8                          l812 3670                          l557 06D2  
                        l910 3468                          l902 3A6C                          l399 2088  
                        l844 4036                          l916 34E8                          l941 57B2  
                        l909 3424                          l871 2A12                          l873 2A3A  
                        l882 2B10                          l891 2B3A                          l867 29D8  
                        l991 4D8C                          _GIE 007F97                 __CFG_CPB$OFF 000000  
                        _PEN 007E2A                 __CFG_CPD$OFF 000000                          _SEN 007E28  
                        _PSA 007EAB          ?i2_I2C_Master_Start 0001                          _b_p 0165  
        ?i2_I2C_Master_Write 0002                          _exp 2E1E                          _log 3E40  
                        _r_p 0168                          _isr 0008                          _pow 3682  
               ___awmod@sign 00A3                          prod 000FF3                          wreg 000FE8  
               ?_bottle_time 0001                 __CFG_LVP$OFF 000000                 ___ftdiv@cntr 00AF  
               ___ftdiv@sign 00B4                 __CFG_WDT$OFF 000000                         l1001 4F76  
                       l5100 4B5A                         l5004 349E                         l5030 3546  
                       l5014 34CE                         l5024 3520                         l5016 34DE  
                       l5008 34B2                         l5052 35EE                         l5044 359A  
                       l5160 4D10                         l7000 4028                         l5064 3626  
                       l5162 4D20                         l5090 4AD6                         l5074 3656  
                       l5172 4D7A                         l5164 4D26                         l7012 405C  
                       l5180 4F0A                         l5076 3666                         l5068 363A  
                       l5094 4B16                         l7006 4040                         l7030 29E6  
                       l5182 4F1A                         l5184 4F20                         l7200 4E8C  
                       l7104 386C                         l7042 2A30                         l7202 4E98  
                       l7122 38D8                         l7060 2AAE                         l7052 2A72  
                       l7036 2A20                         l5188 4F64                         l7204 4E9E  
                       l7212 4ED0                         l7132 3916                         l7070 2AF6  
                       l7062 2ABC                         l7118 38BA                         l7230 2844  
                       l7072 2B04                         l7064 2AC8                         l7312 3B6E  
                       l7160 4C74                         l7216 4EE4                         l7208 4EC2  
                       l7128 38F8                         l7058 2AA0                         l7330 3BD4  
                       l7322 3B9E                         l7162 4C80                         l7154 4C56  
                       l7410 0260                         l7324 3BAE                         l7316 3B82  
                       l7180 4CD8                         l7172 4CB6                         l7164 4C86  
                       l7148 4C40                         l7252 174C                         ?_exp 005B  
                       ?_log 0046                         l7078 2B64                         l7326 3BB8  
                       l7238 2928                         l7270 199C                         l7262 1838  
                       l7510 06B4                         l7502 0684                         l7422 02FE  
                       l7350 0038                         l7088 2BB2                         l7336 51B6  
                       l7176 4CC4                         l7192 4E68                         l7520 06FA  
                       l7504 0692                         l7424 0314                         l7352 004E  
                       l4880 57E6                         l7338 51C6                         l7098 3832  
                       l7258 1812                         l7610 0A50                         l7530 0828  
                       l7514 06D6                         l7434 03A4                         l7426 0344  
                       l7418 02D0                         l7370 0100                         l7362 0088  
                       l7346 0022                         l7284 55BC                         l7196 4E78  
                       l7276 1A62                         l7612 0A5C                         l7620 0A9C  
                       l7604 0A34                         l7532 0836                         l7524 074C  
                       l7508 06A0                         l7452 0496                         l7428 035A  
                       l7372 0106                         l7380 0154                         l7356 0058  
                       ?_isr 0001                         l7294 3ADC                         l4974 33D0  
                       l4958 580E                         l7622 0AAC                         l7630 0BA6  
                       l7550 08B8                         l7470 0532                         l7454 049C  
                       l7438 03D2                         l7374 010C                         l4968 3396  
                       l7624 0B30                         l7632 0BBE                         l7616 0A76  
                       l7536 0844                         l7480 0588                         l7448 0430  
                       l7634 0BC6                         l7570 0934                         l7554 08E2  
                       l7490 05BA                         l7474 055A                         l7466 04E2  
                       l7394 01AE                         l7538 0852                         l7378 0114  
                       l7650 39CA                         l7810 22D0                         l7556 08E8  
                       l7492 05CE                         l7484 0596                         l7636 0BDC  
                       l7644 3990                         l7740 2026                         l7486 05AC  
                       l7670 3A2A                         l7592 09C6                         l7568 092E  
                       l7584 097A                         l7496 05F6                         l7824 492E  
                       l7744 2074                         l7728 1F48                         l7760 2196  
                       l7586 0992                         l7850 41AE                         l7834 4958  
                       l7754 2132                         l7746 2092                         l7596 09FE  
                       l7844 4178                         l7828 4938                         l7692 564A  
                       l7748 20A8                         l6990 3F9A                         l7598 0A08  
                       l7862 422A                         l7782 220C                         l7774 21EC  
                       l7758 2180                         l6992 3FCA                         l6984 3F78  
                       l7856 41EC                         l7792 223A                         l7794 2240  
                       l7786 221C                         l7778 21F4                         l7962 328E  
                       l6996 3FEA                         l6988 3F8C                         l7868 4242  
                       l7796 224A                         l7980 330C                         l7972 32CC  
                       l7964 3294                         ?_pow 0064                         l6998 401A  
                       l7958 326E                         l7976 32EC                         l7968 32AC  
                       l7986 332C        __size_ofi2__div_to_l_ 0128           i2_read_colorsensor 481C  
                       STR_1 FFE1                         STR_2 FEB6                         STR_3 FE9E  
                       STR_4 FFCB                         STR_5 FFE9                         STR_6 FFD8  
                       STR_7 FEE5                         STR_8 FEFC                         STR_9 FF47  
                       _T0CS 007EAD                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u5030 57E4                 printf@tmpval 0132                         u5141 3372  
                       u5161 33AC                         _PEIE 007F96                         _RCEN 007E2B  
                       i2l34 58F4                         u8320 01F4                         u8171 3AB8  
                       u9107 5540                         u6725 5470                         u9117 5400  
                       u7701 2986                         u8325 01E8                         u9037 3280  
                       u8190 3B02                         u9127 5408                         u7711 29A4  
                       u9047 32A0                         u9137 5432                         u9057 32BE  
                       u9147 543A                         u8195 3AF8                         u9067 32DE  
                       u8540 06CA                         u9157 42B4                         u9077 32FE  
                       u7911 380E                         u9087 331E                         u9097 5504  
                       u8801 39A6                         u7931 3848                         u8901 20A6  
                       u8840 1F18                         u8860 1F5E                         u8781 396C  
                       u8950 21B8                         _TMR0 000FD6                         _TMR1 000FCE  
                       _TMR3 000FB2                         _RSEN 007E29                         _main 31B2  
               ___ftpack@arg 009E                         _keys FE4D                 ___ftpack@exp 00A1  
                       _time 0158                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007F  
                       exp@x 005B                         log@x 0046                         isr@i 0077  
               i2___ftadd@f1 002E                 i2___ftadd@f2 0031         ??i2_I2C_Master_Start 0002  
               i2___ftge@ff1 0001                 i2___ftge@ff2 0004         ??i2_I2C_Master_Write 0004  
                       pow@x 0064                         pow@y 0067                         prodh 000FF4  
                       prodl 000FF3                         start 000E          ?i2_read_colorsensor 0001  
              __CFG_IESO$OFF 000000                 i2___ftdiv@f1 0009                 i2___ftdiv@f2 000C  
               i2___ftdiv@f3 0013              __end_ofi2_scale 26C4                 i2___ftneg@f1 0001  
            __end_ofi2_putch 5932                 i2___awtoft@c 0009                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 00BF                 i2___ftmul@f1 0015                 i2___ftmul@f2 0018  
               ___param_bank 000000                 ___ftmul@sign 00C0                 i2___ftsub@f1 003A  
               i2___ftsub@f2 003D                 i2___fttol@f1 003A                  i2_lcdNibble 554C  
              ?_bottle_count 0001                 ___fttol@exp1 0115                 i2___lltoft@c 0009  
                      ??_exp 005E                        ??_log 0049                 ___fttol@lval 0111  
                      ??_isr 008E                        ??_pow 006A             ?_I2C_Master_Init 00AB  
           ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
            __end_of___awdiv 4CE2              __end_of___ftadd 2BD8                        STR_10 FF36  
                      STR_11 FF58                        STR_20 FFF1                        STR_12 FF69  
                      STR_21 FF9C                        STR_13 FF7A                        STR_22 FFBC  
                      STR_14 FF8B                        STR_15 FFAC                        STR_23 FF25  
                      STR_16 FECE                        STR_17 FF13                        STR_18 FFF8  
                      STR_19 FFFC              __end_of___awmod 4EEE              __end_of___ftdiv 3AA2  
            __end_of___ftneg 57C0              __end_of___lldiv 4D9E              __end_of___ftmul 3956  
            ___awdiv@divisor 00A6                        _T1CON 000FCD              __end_of___llmod 4F88  
            __end_of___ftsub 55E6              __end_of___fttol 3BE6                        _T3CON 000FB1  
                      _T0PS0 007EA8                        _T0PS1 007EA9                        _T0PS2 007EAA  
                      i2l321 1D2C                        i2l330 1CA4                        i2l331 1CB4  
                      i2l316 1D30                        i2l341 1DB0                        i2l342 1D88  
                      i2l318 1AC8                        i2l335 1D6E                        i2l327 1B96  
                      i2l336 1D48                        i2l328 1BA0                        i2l354 1EA0  
                      i2l812 3E2E                        i2l557 1188                        i2l902 470C  
                      i2l910 3CA0                        i2l844 4E2C                        i2l916 3D06  
                      i2l941 587A                        i2l909 3C78                        i2l871 3074  
                      i2l882 3124                        i2l891 3140                        i2l867 304A  
            ___awdiv@counter 00A8                        i2l991 519C         ??i2_read_colorsensor 0004  
                      _PORTB 000F81                 i2__div_to_l_ 3D18                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
               ___lltoft@exp 00AE              __end_of_lcdInst 5926               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                        _nRBPU 007F8F                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 554C  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 00A9  
            __end_of_dpowers FDDF                        _color 00C2                   i2scale@scl 002A  
                      _floor 473E                        _etime 016D                        _ldexp 4B5E  
                      _frexp 5018                        _errno 016B                        _scale 15DA  
            __end_of_isdigit 5818                ___ftpack@sign 00A2                        _putch 5906  
                      _stime 0181                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___ftge 5018                        pow@yi 0071              __end_of_timeset FE65  
           __end_ofi2___wmul 5864              __end_of_standby 56EC                        status 000FD8  
           __end_ofi2_fround 2E1E                i2___ftdiv@exp 0016           __size_ofi2___awdiv 0084  
         __size_ofi2___ftadd 01AC           __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000  
              i2printf@width 0061           __size_ofi2___ftdiv 00E6                  exp@exponent 0061  
         __size_ofi2___ftneg 0024           __size_ofi2___lldiv 0082           __size_ofi2___ftmul 00F4  
         __size_ofi2___llmod 0066           __size_ofi2___ftsub 0040           __size_ofi2___fttol 00F4  
           __end_ofi2_printf 15DA                  ldexp@newexp 0049              __initialization 55E6  
                log@exponent 0049            i2___lldiv@divisor 0005           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00C1               ??_bottle_count 00C1                 __end_of_main 335C  
          i2___lldiv@counter 000D                 __end_of_keys FE5E                i2___ftmul@exp 001E  
                 i2printf@ap 0059           __size_ofi2_isdigit 001E                  ?i2___awtoft 0009  
                ?i2___ftpack 0001                  ?i2___lltoft 0009                       ??_main 0144  
              ___fttol@sign1 0110                __activetblptr 000002         __size_of__tdiv_to_l_ 019E  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 009F           ??_I2C_Master_Start 009F  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 00A1  
                     ?_floor 0053                       ?_ldexp 0046                       ?_frexp 0001  
           __end_of___altoft 52A2             ___llmod@dividend 00AB                       ?_scale 0100  
                     _T08BIT 007EAE             ___awdiv@dividend 00A4              i2lcdNibble@data 0002  
           __end_of___awtoft 5672                       ?_putch 0001             __end_of___ftpack 406A  
            i2lcdNibble@temp 0001             __end_of___lltoft 522A                       _INT0IE 007F94  
                     _INT1IE 007F83                       _INT1IF 007F80                       _INT2IE 007F84  
                     i2l1001 53CE                       i2l1081 37EA                       i2l1243 2ED4  
                     i2l1244 2FF8                       i2l1076 36BA                       i2l1254 480E  
                     i2l4210 4DBC                       i2l4220 4E18                       i2l4212 4DC6  
                     i2l4222 4E22                       i2l4214 4DE4                       i2l4206 4DAE  
                     i2l4400 5014                       i2l4218 4DFA                       i2l4330 3082  
                     i2l4410 458C                       i2l6002 58C0                       i2l4324 3058  
                     i2l6012 514E                       i2l4430 45E6                       i2l5230 2E36  
                     i2l5214 3E7E                       i2l5310 50E2                       i2l6014 515A  
                     i2l4352 30D4                       i2l4440 460E                       i2l4416 45B4  
                     i2l5208 3E5C                       i2l5312 50EA                       i2l5304 50CC  
                     i2l6024 518E                       i2l6016 515E                       i2l6040 53C0  
                     i2l6032 538C                       i2l4354 30DE                       i2l4346 30B2  
                     i2l4434 45F6                       i2l4282 524C                       i2l5242 2EA6  
                     i2l5330 5122                       i2l5322 510A                       i2l5314 50EE  
                     i2l6034 5398                       i2l4372 315C                       i2l4364 3112  
                     i2l4356 30E8                       i2l4444 461E                       i2l4284 5258  
                     i2l5236 2E6E                       i2l6036 539C                       i2l4382 318C  
                     i2l4366 311C                       i2l4358 30F0                       i2l4390 4FB8  
                     i2l5326 5114                       i2l6302 5346                       i2l5350 52D0  
                     i2l5342 52B6                       i2l4480 4512                       i2l5264 2FCE  
                     i2l6320 4088                       i2l6312 536A                       i2l5352 52D8  
                     i2l6400 0D58                       i2l4298 5040                       i2l4394 4FE8  
                     i2l4490 453C                       i2l4458 449C                       i2l6306 534E  
                     i2l5354 52DC                       i2l5362 52FA                       i2l5346 52C2  
                     i2l4476 4502                       i2l5372 54A6                       i2l5700 36C8  
                     i2l6332 4160                       i2l4750 4A04                       i2l4494 4552  
                     i2l4486 452A                       i2l4742 4794                       i2l4734 476C  
                     i2l4814 46A8                       i2l5374 54B2                       i2l5366 5308  
                     i2l5358 52F0                       i2l6510 1158                       i2l6502 10C6  
                     i2l6430 0E80                       i2l4752 4A80                       i2l4488 4536  
                     i2l4760 4B76                       i2l4808 4680                       i2l6520 118C  
                     i2l6440 0EF2                       i2l6432 0EAE                       i2l6424 0E4C  
                     i2l6416 0DE8                       i2l6352 0C08                       i2l4738 477A  
                     i2l4834 46E6                       i2l5714 3744                       i2l5706 36E0  
                     i2l5298 50BC                       i2l6610 1458                       i2l6602 1432  
                     i2l6530 11F4                       i2l6514 1164                       i2l6434 0EBE  
                     i2l6362 0C32                       i2l4780 4BE0                       i2l6604 143A  
                     i2l6516 1172                       i2l6508 114E                       i2l6460 0FD2  
                     i2l6444 0F16                       i2l6428 0E70                       i2l6380 0CC6  
                     i2l6356 0C1A                       i2l5718 3766                       i2l6630 1528  
                     i2l6622 148A                       i2l6542 12DE                       i2l6526 11A4  
                     i2l6454 0F6A                       i2l6358 0C2C                       i2l4784 4BEC  
                     i2l4768 4BBC                       i2l4856 5688                       i2l5808 5838  
                     i2l5912 3DC6                       i2l5904 3D96                       i2l6640 15AE  
                     i2l6616 146E                       i2l6560 135E                       i2l6536 12C8  
                     i2l6480 1054                       i2l6472 100A                       i2l6544 12E8  
                     i2l6376 0CBE                       i2l6368 0C60                       i2l6384 0CCC  
                     i2l5850 2408                       i2l6618 1476                       i2l6626 14A4  
                     i2l6562 1362                       i2l6538 12D2                       i2l6490 1080  
                     i2l6458 0FCE                       i2l6378 0CC2                       i2l6386 0D08  
                     i2l6642 15BE                       i2l5924 3DF4                       i2l5836 2DDE  
                     i2l5828 2D1E                       i2l5860 24D0                       i2l6628 14B0  
                     i2l6636 1592                       i2l6556 1338                       i2l6492 1090  
                     i2l6476 103A                       i2l6900 1E82                       i2l4798 5700  
                     i2l5934 3E1C                       i2l5950 3C3E                       i2l6638 15A8  
                     i2l6574 139A                       i2l6590 13D6                       i2l6486 1074  
                     i2l5936 3E28                       i2l5928 3E04                       i2l5944 3C12  
                     i2l5856 24AC                       i2l6576 139E                       i2l6592 13EC  
                     i2l6496 109C                       i2l6904 1E8A                       i2l6824 1C5A  
                     i2l5890 3D54                       i2l5874 26A0                       i2l6498 10AA  
                     i2l6842 1CD8                       i2l5884 3D36                       i2l5980 3CCC  
                     i2l5868 25FC                       i2l6836 1CC2                       i2l6772 1AEE  
                     i2l5990 3CF4                       i2l6598 140E                       i2l6854 1D5E  
                     i2l6838 1CCC                       i2l6790 1B4C                       i2l5992 3D00  
                     i2l5984 3CDC                       i2l6768 1ADE                       i2l6794 1B58  
                     i2l6778 1B0E                       i2l6868 1D9E                       i2l6796 1B62  
                     i2l6894 1E6C                       u406_41 3016                       u430_41 4574  
                     u407_41 302A                       u432_41 459C                    ??i2_scale 0027  
                     u436_41 4480                       u655_41 3BF6                       u496_41 4668  
                     u657_41 3C22                       u498_41 4690                       _TMR0IE 007F95  
                     _TMR0IF 007F92                    ??i2_putch 0003                       _TMR1IE 007CE8  
                     _TMR1IF 007CF0                       _TMR1CS 007E69                       _TMR3IE 007D01  
                     _TMR3IF 007D09                       _TMR3CS 007D89                       _TMR0ON 007EAF  
                     _TMR1ON 007E68                       _TMR3ON 007D88                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
     __size_ofi2__tdiv_to_l_ 0132               __CFG_XINST$OFF 000000            ?_read_colorsensor 0001  
               i2_scale$1535 0027             __end_of__powers_ FE2D                       ___ftge 4A96  
                     ___wmul 575A           ??_read_colorsensor 00A1                    ??___awdiv 00A8  
                  ??___ftadd 0110               __CFG_STVREN$ON 000000                    ??___awmod 00A2  
                  ??___ftdiv 00AC                    ??___ftneg 00A1                    ??___lldiv 00A6  
                  ??___ftmul 00B8                    ??___llmod 00B3                    ??___ftsub 00C1  
                  ??___fttol 010B                dec_to_hex@num 0075                       _fround 26C4  
                     clear_0 5604                       clear_1 5610             ___awdiv@quotient 00AA  
            ___awmod@divisor 00A0              ___awmod@counter 00A2                    ??_lcdInst 00A0  
                     _printf 0012               i2___awdiv@sign 000C                       floor@i 0056  
                     floor@x 0053        ___ftmul@f3_as_product 00BC                    ??_initLCD 00A1  
                  ??_isdigit 009E            __end_ofi2___awdiv 512C            __end_ofi2___ftadd 31B2  
          __end_ofi2___awmod 5312            __end_ofi2___ftdiv 473E               i2___ftadd@exp1 0039  
             i2___ftadd@exp2 0038            __end_ofi2___ftneg 5888            __end_ofi2___lldiv 51AE  
          __end_ofi2___ftmul 4658            __end_ofi2___llmod 53E0            __end_ofi2___ftsub 56B2  
          __end_ofi2___fttol 4564               i2___ftadd@sign 0037                 __mediumconst FDB6  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_standby 00C1               i2___awmod@sign 0006            __end_ofi2_lcdInst 593E  
          __end_ofi2_isdigit 58C8             __end_ofexp@coeff FE83         __size_of_bottle_time 0036  
           __end_oflog@coeff FE9E               i2___ftdiv@cntr 0012                   __accesstop 0080  
    __end_of__initialization 5620                   ___altoft@c 0049               i2___ftdiv@sign 0017  
                 ___ftadd@f1 010A                   ___ftadd@f2 010D          __size_ofi2___awtoft 0038  
        __size_ofi2___ftpack 00AE               i2printf@tmpval 005D                   ___ftge@ff1 00B5  
                 ___ftge@ff2 00B8          __size_ofi2___lltoft 005C                 eval_poly@res 0043  
              ___rparam_used 000001                   ___ftdiv@f1 00A6                   ___ftdiv@f2 00A9  
                 ___ftdiv@f3 00B0                   ___ftneg@f1 009E                   ___awtoft@c 00A6  
             i2___ftpack@arg 0001           i2__tdiv_to_l_@exp1 000F            i2___llmod@divisor 0012  
             i2___ftpack@exp 0004           i2__tdiv_to_l_@cntr 000E            i2___llmod@counter 0016  
         i2__tdiv_to_l_@quot 000A                   ___ftmul@f1 00B2                   ___ftmul@f2 00B5  
                 ___ftsub@f1 0116                   ___ftsub@f2 0119                   ___fttol@f1 0107  
             __pcstackCOMRAM 0001           i2___lldiv@dividend 0001                 __pidataBANK1 5972  
                 ___lltoft@c 00A6                __end_of_floor 481C                __end_of_ldexp 4C24  
              __end_of_frexp 50A8               i2___ftmul@cntr 0022                __end_of_scale 1A88  
             i2___ftmul@sign 0023                __end_of_putch 5916                  i2printf@idx 0058  
                i2printf@exp 0063                  i2printf@val 0065           __size_of_date_time 00D2  
             i2___fttol@exp1 0048               i2___fttol@lval 0044                    ?i2___ftge 0001  
                  ?i2___wmul 000F                i2__tdiv_to_l_ 3BE6           __size_of_lcdNibble 0060  
                 __div_to_l_ 34FA                  i2putch@data 0003                    ?i2_fround 0024  
                  ?i2_printf 0049             _flag_bottle_high 0171  __size_of_I2C_ColorSens_Init 00FE  
            __div_to_l_@exp1 00A9                      ??_floor 0056                      ??_ldexp 004B  
            __div_to_l_@cntr 00A8                      ??_frexp 0006                      ??_scale 00C1  
             i2___lltoft@exp 0011         __end_of_bottle_count 427A              __div_to_l_@quot 00A4  
                 _dec_to_hex 406A                      ??_putch 00A0           i2___lldiv@quotient 0009  
                 __pbssBANK0 00C2                   __pbssBANK1 0146           __size_of_eval_poly 00D2  
           i2__tdiv_to_l_@f1 0001             i2__tdiv_to_l_@f2 0004                __div_to_l_@f1 009E  
              __div_to_l_@f2 00A1           __size_of_read_time 0068                      ?___ftge 00B5  
               ?i2_lcdNibble 0001                      ?___wmul 00AC                    ?___altoft 0049  
                    ?_fround 0100                    ?___awtoft 00A6                    ?___ftpack 009E  
                    ?_printf 011C           __size_of_operation 03F8                    ?___lltoft 00A6  
                 _flag_yopNC 0177               ?i2__tdiv_to_l_ 0001              _bottle_read_bot 00D8  
                 ??i2___ftge 0007              _bottle_read_top 00DA                      _T1CKPS0 007E6C  
                    _T1CKPS1 007E6D                      _T3CKPS0 007D8C                      _T3CKPS1 007D8D  
                 ??i2___wmul 0013                   ??i2_fround 0027                   ??i2_printf 004F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                   _color_high 00CA  
                    _SSPSTAT 000FC7                      i2_scale 22D4            __end_of_date_time 49C4  
                    i2_putch 5926            _bottle_count_disp 0185  __size_ofi2_I2C_Master_Start 0008  
          __end_of_lcdNibble 5440  __size_ofi2_I2C_Master_Write 000A            __end_of__npowers_ FE06  
              ?_operationend 0001                      __Hparam 0000                   _scale$1308 0103  
                    __Lparam 0000              __size_of___ftge 00C8                      ___awdiv 4C24  
                    ___ftadd 2970                      ___awmod 4E4C                      ___ftdiv 3956  
                    ___ftneg 5790                      ___lldiv 4CE2              __size_of___wmul 0036  
                    ___ftmul 37F8                      ___llmod 4EEE                      ___ftsub 559A  
                    ___fttol 3AA2                   _curr_state 00E0                   ??___altoft 004D  
                    __pcinit 55E6                 ??i2___awtoft 000C                 ??i2___ftpack 0006  
                 ??___awtoft 00A9                   ??___ftpack 00A3            __end_of_eval_poly 4A96  
            __size_of_fround 02AC      i2___ftmul@f3_as_product 001F                      __ramtop 1000  
               ??i2___lltoft 000D                      _lcdInst 5916                   ??___lltoft 00AA  
                    __ptext0 31B2                      __ptext1 56B2                      __ptext2 58C8  
                    __ptext3 1EDC                      __ptext4 4378                      __ptext5 3956  
                    __ptext6 562E                      __ptext7 54FC                      __ptext8 5888  
                    __ptext9 48F2              __size_of_printf 0BEA                i2_fround$1533 002A  
              i2_fround$1534 0027               dec_to_hex@temp 0086                      _initLCD 54FC  
          __end_of_hexpowers FE4D                  ?__div_to_l_ 009E                i2_isdigit$853 0002  
                    _dpowers FDB7                 i2fround@prec 002D                 __size_of_exp 01E8  
               __size_of_log 011E                      _isdigit 57EE                 __size_of_isr 1ED4  
__size_ofi2_read_colorsensor 00D6                 __size_of_pow 0176             ___awmod@dividend 009E  
          __end_of_read_time 537A     __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E  
   __size_of_I2C_Master_Wait 0014                   date_time@i 00C1     __size_of_I2C_Master_Stop 0008  
                    _timeset FE5E                      _testint 015F                      _standby 56B2  
                ?_dec_to_hex 0075               __pintcode_body 1A88         end_of_initialization 5620  
                    exp@sign 0063                __Lmediumconst FDB6                      int_func 1A88  
        i2___wmul@multiplier 000F            __end_of_operation 22D4               _operation_disp 0179  
         __end_ofi2___awtoft 5724           __end_ofi2___ftpack 4E4C               _operation_time 017B  
             ??_operationend 00C1    __size_of_I2C_Master_Start 0008           __end_ofi2___lltoft 54FC  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 00A2                      pow@sign 0070  
            ___lldiv@counter 00AA                      printf@c 0143                      printf@f 011C  
           I2C_Master_Init@c 00AB             I2C_Master_Read@a 009F                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               __tdiv_to_l_@f1 009E  
             __tdiv_to_l_@f2 00A1        __end_of_emergencystop 58AA              ??i2__tdiv_to_l_ 0007  
              ??__tdiv_to_l_ 00A4                    _PORTAbits 000F80        __size_of_bottle_count 0104  
  __size_of_read_colorsensor 00F8            i2_I2C_Master_Read 5818            i2_I2C_Master_Wait 58F4  
          i2_I2C_Master_Stop 5962                    i2___awdiv 50A8                    i2___ftadd 3006  
                  i2___awmod 52A2                    i2___ftdiv 4658                    i2___ftneg 5864  
                  i2___lldiv 512C                    i2___ftmul 4564                    i2___llmod 537A  
                  i2___ftsub 5672                    i2___fttol 4470           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001                   _start_time 00DE  
                  i2_lcdInst 5932                  ___ftdiv@exp 00B3                  printf@width 0136  
            i2___awtoft@sign 000C           i2___llmod@dividend 000E           i2___awdiv@dividend 0007  
        ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005                    i2_isdigit 58AA  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002          __size_of__div_to_l_ 0188  
                ___ftmul@exp 00BB                 _bottle_count 4176               __end_of___ftge 4B5E  
             __end_of___wmul 5790          __size_of_dec_to_hex 010C         __size_ofi2_lcdNibble 004E  
              i2lcdInst@data 0003               __end_of_fround 2970                   floor@expon 0059  
           i2___wmul@product 0013               __end_of_printf 0BFC                i2_printf$1536 0055  
               i2printf@flag 0069    __end_ofi2_I2C_Master_Read 583E                 i2printf@fval 006B  
  __end_ofi2_I2C_Master_Wait 5906                 i2printf@prec 005B          start_initialization 55E6  
  __end_ofi2_I2C_Master_Stop 596A            __size_ofi2___ftge 0090                   eval_poly@d 003D  
                 eval_poly@n 003F                   eval_poly@x 003A           i2___awdiv@quotient 000D  
          __size_ofi2___wmul 0026                   ldexp@value 0046          __end_of__tdiv_to_l_ 34FA  
                __end_of_exp 3006                  __end_of_log 3F5E                  __end_of_isr 1EDC  
                __end_of_pow 37F8                    i2printf@c 006E                    i2printf@f 0049  
              ??_bottle_time 00C1        i2I2C_Master_Read@temp 0003              i2___fttol@sign1 0043  
          __size_ofi2_fround 0246                   ?i2___awdiv 0007                   ?i2___ftadd 002E  
                 ?i2___awmod 0001                   ?i2___ftdiv 0009                   ?i2___ftneg 0001  
                 ?i2___lldiv 0001                   ?i2___ftmul 0015                   ?i2___llmod 000E  
                 ?i2___ftsub 003A                   ?i2___fttol 003A            __size_ofi2_printf 09DE  
                 frexp@value 0001            ??_I2C_Master_Init 00AF            ??_I2C_Master_Read 009F  
          ??_I2C_Master_Wait 009E                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 009F  
            ___llmod@divisor 00AF              ___llmod@counter 00B3                   ?i2_isdigit 0001  
                   ??___ftge 00BB                     ??___wmul 00B0                  __pdataBANK1 0185  
           __CFG_LPT1OSC$OFF 000000                     ??_fround 00C1                     ??_printf 0124  
          __size_of___altoft 0078                   read_time@i 0004                   fround@prec 0109  
              ?i2__div_to_l_ 0001            __size_of___awtoft 0044            __size_of___ftpack 010C  
          __size_of___lltoft 007C   __end_of_I2C_ColorSens_Init 4378                  __pbssCOMRAM 007A  
       __end_of_operationend 58E0                __pcstackBANK0 0080                __pcstackBANK1 0100  
                   ?i2_scale 0024                     ?i2_putch 0001          __end_of_bottle_time 575A  
           _I2C_Master_Start 595A          i2I2C_Master_Write@d 0002             _I2C_Master_Write 593E  
                  _date_time 48F2            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
              __pmediumconst FDB6                    _lcdNibble 53E0                     ?___awdiv 00A4  
                   ?___ftadd 010A                     ?___awmod 009E                     ?___ftdiv 00A6  
                   ?___ftneg 009E                     ?___lldiv 009E                     ?___ftmul 00B2  
                   ?___llmod 00AB                     ?___ftsub 0116                    __npowers_ FDDF  
                   ?___fttol 0107                     ?_lcdInst 0001                  __tdiv_to_l_ 335C  
           dec_to_hex@hexnum 008A               ??i2__div_to_l_ 0007                    _color_low 00CE  
               ??__div_to_l_ 00A4                     ?_initLCD 0001                    _colorprev 0150  
                   ?_isdigit 0001             _read_colorsensor 4378   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 49C4   __size_ofi2_I2C_Master_Stop 0008  
                _flag_bottle 016F                  _flag_picbug 0173                    _hexpowers FE2D  
                   ?_standby 0001                  ??i2___awdiv 000B                  ??i2___ftadd 0034  
                ??i2___awmod 0005               __size_of_floor 00DE               __size_of_ldexp 00C6  
                ??i2___ftdiv 000F               __size_of_frexp 0090                 ??_dec_to_hex 0077  
                ??i2___ftneg 0004                  ??i2___lldiv 0009                  ??i2___ftmul 001B  
             __size_of_scale 04AE                  ??i2___llmod 0016                  ??i2___ftsub 0040  
                ??i2___fttol 003E                    _read_time 5312               __size_of_putch 0010  
 __end_ofi2_I2C_Master_Start 5972   __end_ofi2_I2C_Master_Write 5952                  ??i2_lcdInst 0003  
             ___wmul@product 00B0                     _LATAbits 000F89                     _LATCbits 000F8B  
                   _LATDbits 000F8C                  ??i2_isdigit 0001                   ?_date_time 0001  
                   i2u405_40 5068                     i2u405_48 506A           __end_of__div_to_l_ 3682  
                   i2u701_40 0D90                     i2u701_45 0D86                     i2u438_40 44BA  
                   i2u438_45 44B2                     i2u631_40 372C                    _operation 1EDC  
                   i2u491_40 4B96                     i2u555_40 2EAE                     i2u723_40 1182  
                   i2u491_48 4B98                     i2u556_40 2EB0                     i2u487_40 4786  
                   i2u639_40 5836                     i2u920_47 558C                     i2u921_47 5594  
                   i2u916_47 1B22                     i2u917_47 1E92                     i2u918_47 5564  
                   i2u919_47 556C             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
            i2__div_to_l_@f1 0001              i2__div_to_l_@f2 0004           __end_of_dec_to_hex 4176  
 __end_ofi2_read_colorsensor 48F2            ___wmul@multiplier 00AC                     i2___ftge 4F88  
                   i2___wmul 583E                lcdNibble@data 009F                   printf@flag 013E  
              lcdNibble@temp 009E                   printf@fval 0140                   printf@prec 0130  
                 ?_eval_poly 003A            i2___awdiv@divisor 0009                     i2_fround 2BD8  
          i2___awdiv@counter 000B                     i2_printf 0BFC                  _bottle_time 5724  
        I2C_Master_Read@temp 00A0           _bottle_count_array 0146                   ?_read_time 0001  
         dec_to_hex@quotient 008C           i2___awmod@dividend 0001             __size_ofi2_scale 03F0  
           __size_ofi2_putch 000C                    frexp@eptr 0004                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
                dec_to_hex@i 0088             __size_of___awdiv 00BE             __size_of___ftadd 0268  
           __size_of___awmod 00A2             __size_of___ftdiv 014C             __size_of___ftneg 0030  
      i2___wmul@multiplicand 0011             __size_of___lldiv 00BC                     ___altoft 522A  
           __size_of___ftmul 015E             __size_of___llmod 009A             __size_of___ftsub 004C  
           __size_of___fttol 0144        __size_of_operationend 0018                     ___awtoft 562E  
                   ___ftpack 3F5E                  _fround$1306 0106                  _fround$1307 0103  
                   ___lltoft 51AE        __end_ofi2__tdiv_to_l_ 3D18                _flag_top_read 0175  
                _isdigit$853 009F           i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010  
                   _exp$1532 005E              _I2C_Master_Init 5440              _I2C_Master_Read 57C0  
           __size_of_initLCD 0050              _I2C_Master_Wait 58E0              _I2C_Master_Stop 5952  
                   _isr$1527 0078             __size_of_isdigit 002A                     __ptext10 57C0  
                   __ptext11 5724                     __ptext20 4E4C                     __ptext12 4176  
                   __ptext21 4C24                     __ptext13 0012                     __ptext30 5790  
                   __ptext22 335C                     __ptext14 15DA                     __ptext31 4A96  
                   __ptext23 34FA                     __ptext15 5906                     __ptext40 58E0  
                   __ptext32 5916                     __ptext24 51AE                     __ptext16 57EE  
                   __ptext33 53E0                     __ptext25 4EEE                     __ptext17 26C4  
                   __ptext50 3D18                     __ptext42 481C                     __ptext34 5440  
                   __ptext26 3AA2                     __ptext18 575A                     __ptext51 537A  
                   __ptext43 0BFC                     __ptext35 4CE2                     __ptext27 559A  
                   __ptext19 37F8                     __ptext60 58F4                     __ptext52 512C  
                   __ptext44 22D4                     __ptext36 427A                     __ptext28 2970  
                   __ptext61 406A                     __ptext53 5932                     __ptext45 5926  
                   __ptext37 593E                     __ptext29 3F5E                     __ptext70 56EC  
                   __ptext62 50A8                     __ptext54 554C                     __ptext46 58AA  
                   __ptext38 5952                     __ptext71 4B5E                     __ptext63 3682  
                   __ptext55 5312                     __ptext47 2BD8                     __ptext39 595A  
                   __ptext80 3006                     __ptext72 473E                     __ptext64 54A0  
                   __ptext56 5948                     __ptext48 52A2                     __ptext81 4D9E  
                   __ptext73 4470                     __ptext65 3E40                     __ptext57 5962  
                   __ptext49 3BE6                     __ptext74 4F88                     __ptext66 2E1E  
                   __ptext58 596A                     __ptext75 5018                     __ptext67 5672  
                   __ptext59 5818                     __ptext76 522A                     __ptext68 5864  
                   __ptext77 49C4                     __ptext69 4658                     __ptext78 583E  
                   __ptext79 4564                     _end_time 00DC                     __powers_ FE06  
           __size_of_standby 003A                     _pow$1530 006A                     _pow$1531 006D  
     __size_of_emergencystop 0022                __size_of_main 01AA         __end_ofi2__div_to_l_ 3E40  
            _dec_to_hex$1528 0080              _dec_to_hex$1529 0083                  ??_date_time 00C1  
               _operationend 58C8                ??i2_lcdNibble 0001                  ??_lcdNibble 009E  
                   _testflag 0183                     int$flags 007F                    printf@idx 012D  
                  printf@exp 0138                    printf@val 013A                     exp@coeff FE65  
                   log@coeff FE83            i2___awmod@divisor 0003                    putch@data 00A0  
          i2___awmod@counter 0005     __end_of_I2C_Master_Start 5962     __end_of_I2C_Master_Write 5948  
               _servo0_timer 017D                   _INTCONbits 000FF2                  ??_eval_poly 0041  
               _servo1_timer 017F                     isdigit@c 00A0                     scale@scl 0106  
                ??_read_time 0004                     intlevel2 0000             __tdiv_to_l_@exp1 00AC  
           __tdiv_to_l_@cntr 00AB             __tdiv_to_l_@quot 00A7             ___lldiv@dividend 009E  
         _I2C_ColorSens_Init 427A     __end_of_read_colorsensor 4470                  ??_operation 00C1  
        ?_I2C_ColorSens_Init 0001                     printf@ap 012E      __end_of_I2C_Master_Init 54A0  
                _servo0_flag 007E      __end_of_I2C_Master_Read 57EE                  _servo1_flag 00E1  
    __end_of_I2C_Master_Wait 58F4      __end_of_I2C_Master_Stop 595A                  lcdInst@data 00A0  
              _emergencystop 5888                 ?__tdiv_to_l_ 009E                  _printf$1309 012A  
        __end_ofi2_lcdNibble 559A             ___lldiv@quotient 00A6            I2C_Master_Write@d 009F  
       ??_I2C_ColorSens_Init 00A1            i2__div_to_l_@exp1 000C            i2__div_to_l_@cntr 000B  
          i2__div_to_l_@quot 0007  
